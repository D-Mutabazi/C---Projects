
PV System Efficiency Monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bf0  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08005d88  08005d88  00015d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005dfc  08005dfc  0002003c  2**0
                  CONTENTS
  4 .ARM          00000008  08005dfc  08005dfc  00015dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e04  08005e04  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e04  08005e04  00015e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e08  08005e08  00015e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08005e0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  20000040  08005e48  00020040  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08005e48  00020220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fae7  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000209d  00000000  00000000  0002fb53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df8  00000000  00000000  00031bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d40  00000000  00000000  000329e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d34  00000000  00000000  00033728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001002e  00000000  00000000  0004b45c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a49b  00000000  00000000  0005b48a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f5925  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c00  00000000  00000000  000f5978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000040 	.word	0x20000040
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005d70 	.word	0x08005d70

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000044 	.word	0x20000044
 80001d4:	08005d70 	.word	0x08005d70

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	3c01      	subs	r4, #1
 8000324:	bf28      	it	cs
 8000326:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032a:	d2e9      	bcs.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__aeabi_d2uiz>:
 8000984:	004a      	lsls	r2, r1, #1
 8000986:	d211      	bcs.n	80009ac <__aeabi_d2uiz+0x28>
 8000988:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800098c:	d211      	bcs.n	80009b2 <__aeabi_d2uiz+0x2e>
 800098e:	d50d      	bpl.n	80009ac <__aeabi_d2uiz+0x28>
 8000990:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000994:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000998:	d40e      	bmi.n	80009b8 <__aeabi_d2uiz+0x34>
 800099a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800099e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009a2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009a6:	fa23 f002 	lsr.w	r0, r3, r2
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009b6:	d102      	bne.n	80009be <__aeabi_d2uiz+0x3a>
 80009b8:	f04f 30ff 	mov.w	r0, #4294967295
 80009bc:	4770      	bx	lr
 80009be:	f04f 0000 	mov.w	r0, #0
 80009c2:	4770      	bx	lr

080009c4 <__aeabi_uldivmod>:
 80009c4:	b953      	cbnz	r3, 80009dc <__aeabi_uldivmod+0x18>
 80009c6:	b94a      	cbnz	r2, 80009dc <__aeabi_uldivmod+0x18>
 80009c8:	2900      	cmp	r1, #0
 80009ca:	bf08      	it	eq
 80009cc:	2800      	cmpeq	r0, #0
 80009ce:	bf1c      	itt	ne
 80009d0:	f04f 31ff 	movne.w	r1, #4294967295
 80009d4:	f04f 30ff 	movne.w	r0, #4294967295
 80009d8:	f000 b974 	b.w	8000cc4 <__aeabi_idiv0>
 80009dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009e4:	f000 f806 	bl	80009f4 <__udivmoddi4>
 80009e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f0:	b004      	add	sp, #16
 80009f2:	4770      	bx	lr

080009f4 <__udivmoddi4>:
 80009f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f8:	9d08      	ldr	r5, [sp, #32]
 80009fa:	4604      	mov	r4, r0
 80009fc:	468e      	mov	lr, r1
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d14d      	bne.n	8000a9e <__udivmoddi4+0xaa>
 8000a02:	428a      	cmp	r2, r1
 8000a04:	4694      	mov	ip, r2
 8000a06:	d969      	bls.n	8000adc <__udivmoddi4+0xe8>
 8000a08:	fab2 f282 	clz	r2, r2
 8000a0c:	b152      	cbz	r2, 8000a24 <__udivmoddi4+0x30>
 8000a0e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a12:	f1c2 0120 	rsb	r1, r2, #32
 8000a16:	fa20 f101 	lsr.w	r1, r0, r1
 8000a1a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a1e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a22:	4094      	lsls	r4, r2
 8000a24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a28:	0c21      	lsrs	r1, r4, #16
 8000a2a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a2e:	fa1f f78c 	uxth.w	r7, ip
 8000a32:	fb08 e316 	mls	r3, r8, r6, lr
 8000a36:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a3a:	fb06 f107 	mul.w	r1, r6, r7
 8000a3e:	4299      	cmp	r1, r3
 8000a40:	d90a      	bls.n	8000a58 <__udivmoddi4+0x64>
 8000a42:	eb1c 0303 	adds.w	r3, ip, r3
 8000a46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a4a:	f080 811f 	bcs.w	8000c8c <__udivmoddi4+0x298>
 8000a4e:	4299      	cmp	r1, r3
 8000a50:	f240 811c 	bls.w	8000c8c <__udivmoddi4+0x298>
 8000a54:	3e02      	subs	r6, #2
 8000a56:	4463      	add	r3, ip
 8000a58:	1a5b      	subs	r3, r3, r1
 8000a5a:	b2a4      	uxth	r4, r4
 8000a5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a60:	fb08 3310 	mls	r3, r8, r0, r3
 8000a64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a68:	fb00 f707 	mul.w	r7, r0, r7
 8000a6c:	42a7      	cmp	r7, r4
 8000a6e:	d90a      	bls.n	8000a86 <__udivmoddi4+0x92>
 8000a70:	eb1c 0404 	adds.w	r4, ip, r4
 8000a74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a78:	f080 810a 	bcs.w	8000c90 <__udivmoddi4+0x29c>
 8000a7c:	42a7      	cmp	r7, r4
 8000a7e:	f240 8107 	bls.w	8000c90 <__udivmoddi4+0x29c>
 8000a82:	4464      	add	r4, ip
 8000a84:	3802      	subs	r0, #2
 8000a86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a8a:	1be4      	subs	r4, r4, r7
 8000a8c:	2600      	movs	r6, #0
 8000a8e:	b11d      	cbz	r5, 8000a98 <__udivmoddi4+0xa4>
 8000a90:	40d4      	lsrs	r4, r2
 8000a92:	2300      	movs	r3, #0
 8000a94:	e9c5 4300 	strd	r4, r3, [r5]
 8000a98:	4631      	mov	r1, r6
 8000a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9e:	428b      	cmp	r3, r1
 8000aa0:	d909      	bls.n	8000ab6 <__udivmoddi4+0xc2>
 8000aa2:	2d00      	cmp	r5, #0
 8000aa4:	f000 80ef 	beq.w	8000c86 <__udivmoddi4+0x292>
 8000aa8:	2600      	movs	r6, #0
 8000aaa:	e9c5 0100 	strd	r0, r1, [r5]
 8000aae:	4630      	mov	r0, r6
 8000ab0:	4631      	mov	r1, r6
 8000ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab6:	fab3 f683 	clz	r6, r3
 8000aba:	2e00      	cmp	r6, #0
 8000abc:	d14a      	bne.n	8000b54 <__udivmoddi4+0x160>
 8000abe:	428b      	cmp	r3, r1
 8000ac0:	d302      	bcc.n	8000ac8 <__udivmoddi4+0xd4>
 8000ac2:	4282      	cmp	r2, r0
 8000ac4:	f200 80f9 	bhi.w	8000cba <__udivmoddi4+0x2c6>
 8000ac8:	1a84      	subs	r4, r0, r2
 8000aca:	eb61 0303 	sbc.w	r3, r1, r3
 8000ace:	2001      	movs	r0, #1
 8000ad0:	469e      	mov	lr, r3
 8000ad2:	2d00      	cmp	r5, #0
 8000ad4:	d0e0      	beq.n	8000a98 <__udivmoddi4+0xa4>
 8000ad6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ada:	e7dd      	b.n	8000a98 <__udivmoddi4+0xa4>
 8000adc:	b902      	cbnz	r2, 8000ae0 <__udivmoddi4+0xec>
 8000ade:	deff      	udf	#255	; 0xff
 8000ae0:	fab2 f282 	clz	r2, r2
 8000ae4:	2a00      	cmp	r2, #0
 8000ae6:	f040 8092 	bne.w	8000c0e <__udivmoddi4+0x21a>
 8000aea:	eba1 010c 	sub.w	r1, r1, ip
 8000aee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000af2:	fa1f fe8c 	uxth.w	lr, ip
 8000af6:	2601      	movs	r6, #1
 8000af8:	0c20      	lsrs	r0, r4, #16
 8000afa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000afe:	fb07 1113 	mls	r1, r7, r3, r1
 8000b02:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b06:	fb0e f003 	mul.w	r0, lr, r3
 8000b0a:	4288      	cmp	r0, r1
 8000b0c:	d908      	bls.n	8000b20 <__udivmoddi4+0x12c>
 8000b0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b12:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b16:	d202      	bcs.n	8000b1e <__udivmoddi4+0x12a>
 8000b18:	4288      	cmp	r0, r1
 8000b1a:	f200 80cb 	bhi.w	8000cb4 <__udivmoddi4+0x2c0>
 8000b1e:	4643      	mov	r3, r8
 8000b20:	1a09      	subs	r1, r1, r0
 8000b22:	b2a4      	uxth	r4, r4
 8000b24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b28:	fb07 1110 	mls	r1, r7, r0, r1
 8000b2c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b30:	fb0e fe00 	mul.w	lr, lr, r0
 8000b34:	45a6      	cmp	lr, r4
 8000b36:	d908      	bls.n	8000b4a <__udivmoddi4+0x156>
 8000b38:	eb1c 0404 	adds.w	r4, ip, r4
 8000b3c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b40:	d202      	bcs.n	8000b48 <__udivmoddi4+0x154>
 8000b42:	45a6      	cmp	lr, r4
 8000b44:	f200 80bb 	bhi.w	8000cbe <__udivmoddi4+0x2ca>
 8000b48:	4608      	mov	r0, r1
 8000b4a:	eba4 040e 	sub.w	r4, r4, lr
 8000b4e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b52:	e79c      	b.n	8000a8e <__udivmoddi4+0x9a>
 8000b54:	f1c6 0720 	rsb	r7, r6, #32
 8000b58:	40b3      	lsls	r3, r6
 8000b5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b62:	fa20 f407 	lsr.w	r4, r0, r7
 8000b66:	fa01 f306 	lsl.w	r3, r1, r6
 8000b6a:	431c      	orrs	r4, r3
 8000b6c:	40f9      	lsrs	r1, r7
 8000b6e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b72:	fa00 f306 	lsl.w	r3, r0, r6
 8000b76:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b7a:	0c20      	lsrs	r0, r4, #16
 8000b7c:	fa1f fe8c 	uxth.w	lr, ip
 8000b80:	fb09 1118 	mls	r1, r9, r8, r1
 8000b84:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b88:	fb08 f00e 	mul.w	r0, r8, lr
 8000b8c:	4288      	cmp	r0, r1
 8000b8e:	fa02 f206 	lsl.w	r2, r2, r6
 8000b92:	d90b      	bls.n	8000bac <__udivmoddi4+0x1b8>
 8000b94:	eb1c 0101 	adds.w	r1, ip, r1
 8000b98:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b9c:	f080 8088 	bcs.w	8000cb0 <__udivmoddi4+0x2bc>
 8000ba0:	4288      	cmp	r0, r1
 8000ba2:	f240 8085 	bls.w	8000cb0 <__udivmoddi4+0x2bc>
 8000ba6:	f1a8 0802 	sub.w	r8, r8, #2
 8000baa:	4461      	add	r1, ip
 8000bac:	1a09      	subs	r1, r1, r0
 8000bae:	b2a4      	uxth	r4, r4
 8000bb0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bb4:	fb09 1110 	mls	r1, r9, r0, r1
 8000bb8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bbc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bc0:	458e      	cmp	lr, r1
 8000bc2:	d908      	bls.n	8000bd6 <__udivmoddi4+0x1e2>
 8000bc4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bc8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bcc:	d26c      	bcs.n	8000ca8 <__udivmoddi4+0x2b4>
 8000bce:	458e      	cmp	lr, r1
 8000bd0:	d96a      	bls.n	8000ca8 <__udivmoddi4+0x2b4>
 8000bd2:	3802      	subs	r0, #2
 8000bd4:	4461      	add	r1, ip
 8000bd6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bda:	fba0 9402 	umull	r9, r4, r0, r2
 8000bde:	eba1 010e 	sub.w	r1, r1, lr
 8000be2:	42a1      	cmp	r1, r4
 8000be4:	46c8      	mov	r8, r9
 8000be6:	46a6      	mov	lr, r4
 8000be8:	d356      	bcc.n	8000c98 <__udivmoddi4+0x2a4>
 8000bea:	d053      	beq.n	8000c94 <__udivmoddi4+0x2a0>
 8000bec:	b15d      	cbz	r5, 8000c06 <__udivmoddi4+0x212>
 8000bee:	ebb3 0208 	subs.w	r2, r3, r8
 8000bf2:	eb61 010e 	sbc.w	r1, r1, lr
 8000bf6:	fa01 f707 	lsl.w	r7, r1, r7
 8000bfa:	fa22 f306 	lsr.w	r3, r2, r6
 8000bfe:	40f1      	lsrs	r1, r6
 8000c00:	431f      	orrs	r7, r3
 8000c02:	e9c5 7100 	strd	r7, r1, [r5]
 8000c06:	2600      	movs	r6, #0
 8000c08:	4631      	mov	r1, r6
 8000c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c0e:	f1c2 0320 	rsb	r3, r2, #32
 8000c12:	40d8      	lsrs	r0, r3
 8000c14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c18:	fa21 f303 	lsr.w	r3, r1, r3
 8000c1c:	4091      	lsls	r1, r2
 8000c1e:	4301      	orrs	r1, r0
 8000c20:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c24:	fa1f fe8c 	uxth.w	lr, ip
 8000c28:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c2c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c30:	0c0b      	lsrs	r3, r1, #16
 8000c32:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c36:	fb00 f60e 	mul.w	r6, r0, lr
 8000c3a:	429e      	cmp	r6, r3
 8000c3c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c40:	d908      	bls.n	8000c54 <__udivmoddi4+0x260>
 8000c42:	eb1c 0303 	adds.w	r3, ip, r3
 8000c46:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c4a:	d22f      	bcs.n	8000cac <__udivmoddi4+0x2b8>
 8000c4c:	429e      	cmp	r6, r3
 8000c4e:	d92d      	bls.n	8000cac <__udivmoddi4+0x2b8>
 8000c50:	3802      	subs	r0, #2
 8000c52:	4463      	add	r3, ip
 8000c54:	1b9b      	subs	r3, r3, r6
 8000c56:	b289      	uxth	r1, r1
 8000c58:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c5c:	fb07 3316 	mls	r3, r7, r6, r3
 8000c60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c64:	fb06 f30e 	mul.w	r3, r6, lr
 8000c68:	428b      	cmp	r3, r1
 8000c6a:	d908      	bls.n	8000c7e <__udivmoddi4+0x28a>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c74:	d216      	bcs.n	8000ca4 <__udivmoddi4+0x2b0>
 8000c76:	428b      	cmp	r3, r1
 8000c78:	d914      	bls.n	8000ca4 <__udivmoddi4+0x2b0>
 8000c7a:	3e02      	subs	r6, #2
 8000c7c:	4461      	add	r1, ip
 8000c7e:	1ac9      	subs	r1, r1, r3
 8000c80:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c84:	e738      	b.n	8000af8 <__udivmoddi4+0x104>
 8000c86:	462e      	mov	r6, r5
 8000c88:	4628      	mov	r0, r5
 8000c8a:	e705      	b.n	8000a98 <__udivmoddi4+0xa4>
 8000c8c:	4606      	mov	r6, r0
 8000c8e:	e6e3      	b.n	8000a58 <__udivmoddi4+0x64>
 8000c90:	4618      	mov	r0, r3
 8000c92:	e6f8      	b.n	8000a86 <__udivmoddi4+0x92>
 8000c94:	454b      	cmp	r3, r9
 8000c96:	d2a9      	bcs.n	8000bec <__udivmoddi4+0x1f8>
 8000c98:	ebb9 0802 	subs.w	r8, r9, r2
 8000c9c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ca0:	3801      	subs	r0, #1
 8000ca2:	e7a3      	b.n	8000bec <__udivmoddi4+0x1f8>
 8000ca4:	4646      	mov	r6, r8
 8000ca6:	e7ea      	b.n	8000c7e <__udivmoddi4+0x28a>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	e794      	b.n	8000bd6 <__udivmoddi4+0x1e2>
 8000cac:	4640      	mov	r0, r8
 8000cae:	e7d1      	b.n	8000c54 <__udivmoddi4+0x260>
 8000cb0:	46d0      	mov	r8, sl
 8000cb2:	e77b      	b.n	8000bac <__udivmoddi4+0x1b8>
 8000cb4:	3b02      	subs	r3, #2
 8000cb6:	4461      	add	r1, ip
 8000cb8:	e732      	b.n	8000b20 <__udivmoddi4+0x12c>
 8000cba:	4630      	mov	r0, r6
 8000cbc:	e709      	b.n	8000ad2 <__udivmoddi4+0xde>
 8000cbe:	4464      	add	r4, ip
 8000cc0:	3802      	subs	r0, #2
 8000cc2:	e742      	b.n	8000b4a <__udivmoddi4+0x156>

08000cc4 <__aeabi_idiv0>:
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000cc8:	b5b0      	push	{r4, r5, r7, lr}
 8000cca:	b08a      	sub	sp, #40	; 0x28
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
 8000cd4:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000cd6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000cda:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8000cde:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000ce2:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ce6:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000ce8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000cea:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000cf8:	f107 0310 	add.w	r3, r7, #16
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f000 f80e 	bl	8000d1e <Lcd_init>

	return lcd;
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	461d      	mov	r5, r3
 8000d06:	f107 0410 	add.w	r4, r7, #16
 8000d0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d0e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d12:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000d16:	68f8      	ldr	r0, [r7, #12]
 8000d18:	3728      	adds	r7, #40	; 0x28
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bdb0      	pop	{r4, r5, r7, pc}

08000d1e <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	7d9b      	ldrb	r3, [r3, #22]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d10c      	bne.n	8000d48 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8000d2e:	2133      	movs	r1, #51	; 0x33
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f000 f863 	bl	8000dfc <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000d36:	2132      	movs	r1, #50	; 0x32
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	f000 f85f 	bl	8000dfc <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000d3e:	2128      	movs	r1, #40	; 0x28
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f000 f85b 	bl	8000dfc <lcd_write_command>
 8000d46:	e003      	b.n	8000d50 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000d48:	2138      	movs	r1, #56	; 0x38
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f000 f856 	bl	8000dfc <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000d50:	2101      	movs	r1, #1
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f000 f852 	bl	8000dfc <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000d58:	210c      	movs	r1, #12
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f000 f84e 	bl	8000dfc <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000d60:	2106      	movs	r1, #6
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f000 f84a 	bl	8000dfc <lcd_write_command>
}
 8000d68:	bf00      	nop
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000d70:	b590      	push	{r4, r7, lr}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]

	for(uint8_t i = 0; i < strlen(string); i++)
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	73fb      	strb	r3, [r7, #15]
 8000d7e:	e00a      	b.n	8000d96 <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000d80:	7bfb      	ldrb	r3, [r7, #15]
 8000d82:	683a      	ldr	r2, [r7, #0]
 8000d84:	4413      	add	r3, r2
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	4619      	mov	r1, r3
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f000 f864 	bl	8000e58 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000d90:	7bfb      	ldrb	r3, [r7, #15]
 8000d92:	3301      	adds	r3, #1
 8000d94:	73fb      	strb	r3, [r7, #15]
 8000d96:	7bfc      	ldrb	r4, [r7, #15]
 8000d98:	6838      	ldr	r0, [r7, #0]
 8000d9a:	f7ff fa1d 	bl	80001d8 <strlen>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	429c      	cmp	r4, r3
 8000da2:	d3ed      	bcc.n	8000d80 <Lcd_string+0x10>
	}
}
 8000da4:	bf00      	nop
 8000da6:	bf00      	nop
 8000da8:	3714      	adds	r7, #20
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd90      	pop	{r4, r7, pc}
	...

08000db0 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	460b      	mov	r3, r1
 8000dba:	70fb      	strb	r3, [r7, #3]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000dc0:	78fb      	ldrb	r3, [r7, #3]
 8000dc2:	4a07      	ldr	r2, [pc, #28]	; (8000de0 <Lcd_cursor+0x30>)
 8000dc4:	5cd2      	ldrb	r2, [r2, r3]
 8000dc6:	78bb      	ldrb	r3, [r7, #2]
 8000dc8:	4413      	add	r3, r2
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	3b80      	subs	r3, #128	; 0x80
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f000 f812 	bl	8000dfc <lcd_write_command>
	#endif
}
 8000dd8:	bf00      	nop
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	08005de0 	.word	0x08005de0

08000de4 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 8000dec:	2101      	movs	r1, #1
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f000 f804 	bl	8000dfc <lcd_write_command>
}
 8000df4:	bf00      	nop
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	460b      	mov	r3, r1
 8000e06:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6898      	ldr	r0, [r3, #8]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	899b      	ldrh	r3, [r3, #12]
 8000e10:	2200      	movs	r2, #0
 8000e12:	4619      	mov	r1, r3
 8000e14:	f002 fbb8 	bl	8003588 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	7d9b      	ldrb	r3, [r3, #22]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d111      	bne.n	8000e44 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8000e20:	78fb      	ldrb	r3, [r7, #3]
 8000e22:	091b      	lsrs	r3, r3, #4
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	2204      	movs	r2, #4
 8000e28:	4619      	mov	r1, r3
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f000 f842 	bl	8000eb4 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8000e30:	78fb      	ldrb	r3, [r7, #3]
 8000e32:	f003 030f 	and.w	r3, r3, #15
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	2204      	movs	r2, #4
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f000 f839 	bl	8000eb4 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8000e42:	e005      	b.n	8000e50 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000e44:	78fb      	ldrb	r3, [r7, #3]
 8000e46:	2208      	movs	r2, #8
 8000e48:	4619      	mov	r1, r3
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f000 f832 	bl	8000eb4 <lcd_write>
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	460b      	mov	r3, r1
 8000e62:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6898      	ldr	r0, [r3, #8]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	899b      	ldrh	r3, [r3, #12]
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	4619      	mov	r1, r3
 8000e70:	f002 fb8a 	bl	8003588 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	7d9b      	ldrb	r3, [r3, #22]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d111      	bne.n	8000ea0 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000e7c:	78fb      	ldrb	r3, [r7, #3]
 8000e7e:	091b      	lsrs	r3, r3, #4
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	2204      	movs	r2, #4
 8000e84:	4619      	mov	r1, r3
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f000 f814 	bl	8000eb4 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8000e8c:	78fb      	ldrb	r3, [r7, #3]
 8000e8e:	f003 030f 	and.w	r3, r3, #15
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	2204      	movs	r2, #4
 8000e96:	4619      	mov	r1, r3
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f000 f80b 	bl	8000eb4 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8000e9e:	e005      	b.n	8000eac <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000ea0:	78fb      	ldrb	r3, [r7, #3]
 8000ea2:	2208      	movs	r2, #8
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f000 f804 	bl	8000eb4 <lcd_write>
}
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	70fb      	strb	r3, [r7, #3]
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	73fb      	strb	r3, [r7, #15]
 8000ec8:	e019      	b.n	8000efe <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	4413      	add	r3, r2
 8000ed4:	6818      	ldr	r0, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	685a      	ldr	r2, [r3, #4]
 8000eda:	7bfb      	ldrb	r3, [r7, #15]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	4413      	add	r3, r2
 8000ee0:	8819      	ldrh	r1, [r3, #0]
 8000ee2:	78fa      	ldrb	r2, [r7, #3]
 8000ee4:	7bfb      	ldrb	r3, [r7, #15]
 8000ee6:	fa42 f303 	asr.w	r3, r2, r3
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	f003 0301 	and.w	r3, r3, #1
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	f002 fb48 	bl	8003588 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
 8000efa:	3301      	adds	r3, #1
 8000efc:	73fb      	strb	r3, [r7, #15]
 8000efe:	7bfa      	ldrb	r2, [r7, #15]
 8000f00:	78bb      	ldrb	r3, [r7, #2]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	d3e1      	bcc.n	8000eca <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6918      	ldr	r0, [r3, #16]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	8a9b      	ldrh	r3, [r3, #20]
 8000f0e:	2201      	movs	r2, #1
 8000f10:	4619      	mov	r1, r3
 8000f12:	f002 fb39 	bl	8003588 <HAL_GPIO_WritePin>
	DELAY(1);
 8000f16:	2001      	movs	r0, #1
 8000f18:	f001 fbe0 	bl	80026dc <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6918      	ldr	r0, [r3, #16]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	8a9b      	ldrh	r3, [r3, #20]
 8000f24:	2200      	movs	r2, #0
 8000f26:	4619      	mov	r1, r3
 8000f28:	f002 fb2e 	bl	8003588 <HAL_GPIO_WritePin>
}
 8000f2c:	bf00      	nop
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <HAL_UART_RxCpltCallback>:
uint16_t get_pv_panel_adc2_input();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]

	g_system_config[g_byte_count] = char_rcvd[0] ;
 8000f3c:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <HAL_UART_RxCpltCallback+0x5c>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	461a      	mov	r2, r3
 8000f42:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <HAL_UART_RxCpltCallback+0x60>)
 8000f44:	7819      	ldrb	r1, [r3, #0]
 8000f46:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <HAL_UART_RxCpltCallback+0x64>)
 8000f48:	5499      	strb	r1, [r3, r2]
	g_byte_count++ ;
 8000f4a:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <HAL_UART_RxCpltCallback+0x5c>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <HAL_UART_RxCpltCallback+0x5c>)
 8000f54:	701a      	strb	r2, [r3, #0]

	if(char_rcvd[0] == '\n'){
 8000f56:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <HAL_UART_RxCpltCallback+0x60>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b0a      	cmp	r3, #10
 8000f5c:	d10f      	bne.n	8000f7e <HAL_UART_RxCpltCallback+0x4a>
		if(g_byte_count == 7){
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <HAL_UART_RxCpltCallback+0x5c>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b07      	cmp	r3, #7
 8000f64:	d103      	bne.n	8000f6e <HAL_UART_RxCpltCallback+0x3a>
			g_config_command_rcvd = 1;
 8000f66:	4b0d      	ldr	r3, [pc, #52]	; (8000f9c <HAL_UART_RxCpltCallback+0x68>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	701a      	strb	r2, [r3, #0]
 8000f6c:	e004      	b.n	8000f78 <HAL_UART_RxCpltCallback+0x44>
			// check for SP or EN command recvd
		}
		else{
			// remove for next DEMO
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)"Invalid command sent\n", 21);
 8000f6e:	2215      	movs	r2, #21
 8000f70:	490b      	ldr	r1, [pc, #44]	; (8000fa0 <HAL_UART_RxCpltCallback+0x6c>)
 8000f72:	480c      	ldr	r0, [pc, #48]	; (8000fa4 <HAL_UART_RxCpltCallback+0x70>)
 8000f74:	f003 ff61 	bl	8004e3a <HAL_UART_Transmit_IT>
			// DO NOTHING: NO STATE UPDATE IN THE CASE OF COMMAND NOT IN THE APPROPRIATE ORDER
		}

		g_byte_count =0 ;
 8000f78:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <HAL_UART_RxCpltCallback+0x5c>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	701a      	strb	r2, [r3, #0]
	}

	//re-prime receiver
	HAL_UART_Receive_IT(&huart2, (uint8_t*)char_rcvd, 1) ;
 8000f7e:	2201      	movs	r2, #1
 8000f80:	4904      	ldr	r1, [pc, #16]	; (8000f94 <HAL_UART_RxCpltCallback+0x60>)
 8000f82:	4808      	ldr	r0, [pc, #32]	; (8000fa4 <HAL_UART_RxCpltCallback+0x70>)
 8000f84:	f003 ff9e 	bl	8004ec4 <HAL_UART_Receive_IT>

}
 8000f88:	bf00      	nop
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	200001c5 	.word	0x200001c5
 8000f94:	20000010 	.word	0x20000010
 8000f98:	200001b4 	.word	0x200001b4
 8000f9c:	200001c6 	.word	0x200001c6
 8000fa0:	08005d88 	.word	0x08005d88
 8000fa4:	20000134 	.word	0x20000134

08000fa8 <get_adc_value_and_celsius_temperature>:
/**
 * function starts the adc, waits for conversion
 * Then converts value to degrees
 */

uint16_t get_adc_value_and_celsius_temperature(){
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0

	//select adc channel 0
	ADC_Select_CH0() ;
 8000fac:	f000 fb4e 	bl	800164c <ADC_Select_CH0>
	HAL_ADC_Start(&hadc1) ;
 8000fb0:	4825      	ldr	r0, [pc, #148]	; (8001048 <get_adc_value_and_celsius_temperature+0xa0>)
 8000fb2:	f001 fbfb 	bl	80027ac <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000fb6:	f04f 31ff 	mov.w	r1, #4294967295
 8000fba:	4823      	ldr	r0, [pc, #140]	; (8001048 <get_adc_value_and_celsius_temperature+0xa0>)
 8000fbc:	f001 fcdd 	bl	800297a <HAL_ADC_PollForConversion>
	g_raw  = HAL_ADC_GetValue(&hadc1) ;
 8000fc0:	4821      	ldr	r0, [pc, #132]	; (8001048 <get_adc_value_and_celsius_temperature+0xa0>)
 8000fc2:	f001 fd65 	bl	8002a90 <HAL_ADC_GetValue>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	b29a      	uxth	r2, r3
 8000fca:	4b20      	ldr	r3, [pc, #128]	; (800104c <get_adc_value_and_celsius_temperature+0xa4>)
 8000fcc:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1) ;  //stop adc
 8000fce:	481e      	ldr	r0, [pc, #120]	; (8001048 <get_adc_value_and_celsius_temperature+0xa0>)
 8000fd0:	f001 fca0 	bl	8002914 <HAL_ADC_Stop>

	g_vin = g_raw*(3.3/4095.0) ; // input voltage
 8000fd4:	4b1d      	ldr	r3, [pc, #116]	; (800104c <get_adc_value_and_celsius_temperature+0xa4>)
 8000fd6:	881b      	ldrh	r3, [r3, #0]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff fa57 	bl	800048c <__aeabi_i2d>
 8000fde:	a316      	add	r3, pc, #88	; (adr r3, 8001038 <get_adc_value_and_celsius_temperature+0x90>)
 8000fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe4:	f7ff fabc 	bl	8000560 <__aeabi_dmul>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	460b      	mov	r3, r1
 8000fec:	4918      	ldr	r1, [pc, #96]	; (8001050 <get_adc_value_and_celsius_temperature+0xa8>)
 8000fee:	e9c1 2300 	strd	r2, r3, [r1]
	g_temp = g_vin*100 - 273.15 ; // cast to 16 bit uint
 8000ff2:	4b17      	ldr	r3, [pc, #92]	; (8001050 <get_adc_value_and_celsius_temperature+0xa8>)
 8000ff4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ff8:	f04f 0200 	mov.w	r2, #0
 8000ffc:	4b15      	ldr	r3, [pc, #84]	; (8001054 <get_adc_value_and_celsius_temperature+0xac>)
 8000ffe:	f7ff faaf 	bl	8000560 <__aeabi_dmul>
 8001002:	4602      	mov	r2, r0
 8001004:	460b      	mov	r3, r1
 8001006:	4610      	mov	r0, r2
 8001008:	4619      	mov	r1, r3
 800100a:	a30d      	add	r3, pc, #52	; (adr r3, 8001040 <get_adc_value_and_celsius_temperature+0x98>)
 800100c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001010:	f7ff f8ee 	bl	80001f0 <__aeabi_dsub>
 8001014:	4602      	mov	r2, r0
 8001016:	460b      	mov	r3, r1
 8001018:	490f      	ldr	r1, [pc, #60]	; (8001058 <get_adc_value_and_celsius_temperature+0xb0>)
 800101a:	e9c1 2300 	strd	r2, r3, [r1]

	return g_temp ;
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <get_adc_value_and_celsius_temperature+0xb0>)
 8001020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001024:	4610      	mov	r0, r2
 8001026:	4619      	mov	r1, r3
 8001028:	f7ff fcac 	bl	8000984 <__aeabi_d2uiz>
 800102c:	4603      	mov	r3, r0
 800102e:	b29b      	uxth	r3, r3
}
 8001030:	4618      	mov	r0, r3
 8001032:	bd80      	pop	{r7, pc}
 8001034:	f3af 8000 	nop.w
 8001038:	e734d9b4 	.word	0xe734d9b4
 800103c:	3f4a680c 	.word	0x3f4a680c
 8001040:	66666666 	.word	0x66666666
 8001044:	40711266 	.word	0x40711266
 8001048:	2000005c 	.word	0x2000005c
 800104c:	20000178 	.word	0x20000178
 8001050:	20000188 	.word	0x20000188
 8001054:	40590000 	.word	0x40590000
 8001058:	20000180 	.word	0x20000180

0800105c <store_temp_in_string>:

void store_temp_in_string(uint16_t temperature, char temp[], int len){
 800105c:	b480      	push	{r7}
 800105e:	b087      	sub	sp, #28
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
 8001068:	81fb      	strh	r3, [r7, #14]

	for(int i= 0 ; i < len ; i++){
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
 800106e:	e04e      	b.n	800110e <store_temp_in_string+0xb2>
		switch(i){
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	2b02      	cmp	r3, #2
 8001074:	d02f      	beq.n	80010d6 <store_temp_in_string+0x7a>
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	2b02      	cmp	r3, #2
 800107a:	dc44      	bgt.n	8001106 <store_temp_in_string+0xaa>
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <store_temp_in_string+0x2e>
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	2b01      	cmp	r3, #1
 8001086:	d00c      	beq.n	80010a2 <store_temp_in_string+0x46>
			case 2:
				temp[2] = (temperature - ((temperature/10)*10) ) + 48 ;

				break;
			default:
				break;
 8001088:	e03d      	b.n	8001106 <store_temp_in_string+0xaa>
				temp[0]  = (temperature/100) + 48 ;
 800108a:	89fb      	ldrh	r3, [r7, #14]
 800108c:	4a25      	ldr	r2, [pc, #148]	; (8001124 <store_temp_in_string+0xc8>)
 800108e:	fba2 2303 	umull	r2, r3, r2, r3
 8001092:	095b      	lsrs	r3, r3, #5
 8001094:	b29b      	uxth	r3, r3
 8001096:	b2db      	uxtb	r3, r3
 8001098:	3330      	adds	r3, #48	; 0x30
 800109a:	b2da      	uxtb	r2, r3
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	701a      	strb	r2, [r3, #0]
				break;
 80010a0:	e032      	b.n	8001108 <store_temp_in_string+0xac>
				temp[1] = (temperature - (temperature/100)*100 )/10 + 48 ;
 80010a2:	89fa      	ldrh	r2, [r7, #14]
 80010a4:	89fb      	ldrh	r3, [r7, #14]
 80010a6:	491f      	ldr	r1, [pc, #124]	; (8001124 <store_temp_in_string+0xc8>)
 80010a8:	fba1 1303 	umull	r1, r3, r1, r3
 80010ac:	095b      	lsrs	r3, r3, #5
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	4619      	mov	r1, r3
 80010b2:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80010b6:	fb01 f303 	mul.w	r3, r1, r3
 80010ba:	4413      	add	r3, r2
 80010bc:	4a1a      	ldr	r2, [pc, #104]	; (8001128 <store_temp_in_string+0xcc>)
 80010be:	fb82 1203 	smull	r1, r2, r2, r3
 80010c2:	1092      	asrs	r2, r2, #2
 80010c4:	17db      	asrs	r3, r3, #31
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	3301      	adds	r3, #1
 80010ce:	3230      	adds	r2, #48	; 0x30
 80010d0:	b2d2      	uxtb	r2, r2
 80010d2:	701a      	strb	r2, [r3, #0]
				break;
 80010d4:	e018      	b.n	8001108 <store_temp_in_string+0xac>
				temp[2] = (temperature - ((temperature/10)*10) ) + 48 ;
 80010d6:	89fb      	ldrh	r3, [r7, #14]
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	89fb      	ldrh	r3, [r7, #14]
 80010dc:	4913      	ldr	r1, [pc, #76]	; (800112c <store_temp_in_string+0xd0>)
 80010de:	fba1 1303 	umull	r1, r3, r1, r3
 80010e2:	08db      	lsrs	r3, r3, #3
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	4619      	mov	r1, r3
 80010ea:	0149      	lsls	r1, r1, #5
 80010ec:	1ac9      	subs	r1, r1, r3
 80010ee:	0089      	lsls	r1, r1, #2
 80010f0:	1acb      	subs	r3, r1, r3
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	4413      	add	r3, r2
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	3302      	adds	r3, #2
 80010fe:	3230      	adds	r2, #48	; 0x30
 8001100:	b2d2      	uxtb	r2, r2
 8001102:	701a      	strb	r2, [r3, #0]
				break;
 8001104:	e000      	b.n	8001108 <store_temp_in_string+0xac>
				break;
 8001106:	bf00      	nop
	for(int i= 0 ; i < len ; i++){
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	3301      	adds	r3, #1
 800110c:	617b      	str	r3, [r7, #20]
 800110e:	697a      	ldr	r2, [r7, #20]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	429a      	cmp	r2, r3
 8001114:	dbac      	blt.n	8001070 <store_temp_in_string+0x14>

		}
	}
}
 8001116:	bf00      	nop
 8001118:	bf00      	nop
 800111a:	371c      	adds	r7, #28
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	51eb851f 	.word	0x51eb851f
 8001128:	66666667 	.word	0x66666667
 800112c:	cccccccd 	.word	0xcccccccd

08001130 <system_state_update>:

/**
 * This function will update the system state based on the received UART command
 * or top button press
 */
void system_state_update(){
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0

	//CHECK FOR TYPE OF MEASUREMENT
	if( g_config_command_rcvd == 1){
 8001134:	4b87      	ldr	r3, [pc, #540]	; (8001354 <system_state_update+0x224>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d125      	bne.n	8001188 <system_state_update+0x58>
		g_config_command_rcvd = 0;
 800113c:	4b85      	ldr	r3, [pc, #532]	; (8001354 <system_state_update+0x224>)
 800113e:	2200      	movs	r2, #0
 8001140:	701a      	strb	r2, [r3, #0]

		if( g_system_config[2]=='E' && g_system_config[3] == 'N'){
 8001142:	4b85      	ldr	r3, [pc, #532]	; (8001358 <system_state_update+0x228>)
 8001144:	789b      	ldrb	r3, [r3, #2]
 8001146:	2b45      	cmp	r3, #69	; 0x45
 8001148:	d10a      	bne.n	8001160 <system_state_update+0x30>
 800114a:	4b83      	ldr	r3, [pc, #524]	; (8001358 <system_state_update+0x228>)
 800114c:	78db      	ldrb	r3, [r3, #3]
 800114e:	2b4e      	cmp	r3, #78	; 0x4e
 8001150:	d106      	bne.n	8001160 <system_state_update+0x30>
			// EN measure comand
			g_EN_config_command_rcvd =1 ;
 8001152:	4b82      	ldr	r3, [pc, #520]	; (800135c <system_state_update+0x22c>)
 8001154:	2201      	movs	r2, #1
 8001156:	701a      	strb	r2, [r3, #0]
			//stop SP measure
			g_SP_config_command_rcvd =0 ;
 8001158:	4b81      	ldr	r3, [pc, #516]	; (8001360 <system_state_update+0x230>)
 800115a:	2200      	movs	r2, #0
 800115c:	701a      	strb	r2, [r3, #0]
 800115e:	e013      	b.n	8001188 <system_state_update+0x58>

		}

		else if(g_system_config[2]=='S' && g_system_config[3] == 'P'){
 8001160:	4b7d      	ldr	r3, [pc, #500]	; (8001358 <system_state_update+0x228>)
 8001162:	789b      	ldrb	r3, [r3, #2]
 8001164:	2b53      	cmp	r3, #83	; 0x53
 8001166:	d10a      	bne.n	800117e <system_state_update+0x4e>
 8001168:	4b7b      	ldr	r3, [pc, #492]	; (8001358 <system_state_update+0x228>)
 800116a:	78db      	ldrb	r3, [r3, #3]
 800116c:	2b50      	cmp	r3, #80	; 0x50
 800116e:	d106      	bne.n	800117e <system_state_update+0x4e>
			// SP command
			g_SP_config_command_rcvd =1 ;
 8001170:	4b7b      	ldr	r3, [pc, #492]	; (8001360 <system_state_update+0x230>)
 8001172:	2201      	movs	r2, #1
 8001174:	701a      	strb	r2, [r3, #0]
			//stop EN command
			g_EN_config_command_rcvd =0;
 8001176:	4b79      	ldr	r3, [pc, #484]	; (800135c <system_state_update+0x22c>)
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
 800117c:	e004      	b.n	8001188 <system_state_update+0x58>

		}

		else{
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)"Invalid Command\n", 16);
 800117e:	2210      	movs	r2, #16
 8001180:	4978      	ldr	r1, [pc, #480]	; (8001364 <system_state_update+0x234>)
 8001182:	4879      	ldr	r0, [pc, #484]	; (8001368 <system_state_update+0x238>)
 8001184:	f003 fe59 	bl	8004e3a <HAL_UART_Transmit_IT>
		}
	}

	// Environment Measure - And not measuring SP
	if(g_top_button_pressed  == 1 && g_EN_config_command_rcvd ==0 && g_SP_config_command_rcvd ==0 && (g_SP_measure == 0 || g_SP_measure ==2)){
 8001188:	4b78      	ldr	r3, [pc, #480]	; (800136c <system_state_update+0x23c>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d120      	bne.n	80011d2 <system_state_update+0xa2>
 8001190:	4b72      	ldr	r3, [pc, #456]	; (800135c <system_state_update+0x22c>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d11c      	bne.n	80011d2 <system_state_update+0xa2>
 8001198:	4b71      	ldr	r3, [pc, #452]	; (8001360 <system_state_update+0x230>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d118      	bne.n	80011d2 <system_state_update+0xa2>
 80011a0:	4b73      	ldr	r3, [pc, #460]	; (8001370 <system_state_update+0x240>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d003      	beq.n	80011b0 <system_state_update+0x80>
 80011a8:	4b71      	ldr	r3, [pc, #452]	; (8001370 <system_state_update+0x240>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d110      	bne.n	80011d2 <system_state_update+0xa2>
		g_top_button_pressed = 0;
 80011b0:	4b6e      	ldr	r3, [pc, #440]	; (800136c <system_state_update+0x23c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	701a      	strb	r2, [r3, #0]

		g_EN_measure++  ;
 80011b6:	4b6f      	ldr	r3, [pc, #444]	; (8001374 <system_state_update+0x244>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	3301      	adds	r3, #1
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	4b6d      	ldr	r3, [pc, #436]	; (8001374 <system_state_update+0x244>)
 80011c0:	701a      	strb	r2, [r3, #0]

		if(g_EN_measure >2 ){
 80011c2:	4b6c      	ldr	r3, [pc, #432]	; (8001374 <system_state_update+0x244>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d954      	bls.n	8001274 <system_state_update+0x144>
			g_EN_measure = 1;
 80011ca:	4b6a      	ldr	r3, [pc, #424]	; (8001374 <system_state_update+0x244>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	701a      	strb	r2, [r3, #0]
		if(g_EN_measure >2 ){
 80011d0:	e050      	b.n	8001274 <system_state_update+0x144>
		}
	}
	else if(g_top_button_pressed ==0  && g_EN_config_command_rcvd == 1 && g_SP_config_command_rcvd ==0  && (g_SP_measure == 0 || g_SP_measure ==2)){
 80011d2:	4b66      	ldr	r3, [pc, #408]	; (800136c <system_state_update+0x23c>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d14c      	bne.n	8001274 <system_state_update+0x144>
 80011da:	4b60      	ldr	r3, [pc, #384]	; (800135c <system_state_update+0x22c>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d148      	bne.n	8001274 <system_state_update+0x144>
 80011e2:	4b5f      	ldr	r3, [pc, #380]	; (8001360 <system_state_update+0x230>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d144      	bne.n	8001274 <system_state_update+0x144>
 80011ea:	4b61      	ldr	r3, [pc, #388]	; (8001370 <system_state_update+0x240>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <system_state_update+0xca>
 80011f2:	4b5f      	ldr	r3, [pc, #380]	; (8001370 <system_state_update+0x240>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d13c      	bne.n	8001274 <system_state_update+0x144>
		g_EN_config_command_rcvd = 0;
 80011fa:	4b58      	ldr	r3, [pc, #352]	; (800135c <system_state_update+0x22c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	701a      	strb	r2, [r3, #0]
		if(g_system_config[0]== '&' && g_system_config[1 ]== '_' && g_system_config[2]=='E' && g_system_config[3] == 'N' &&g_system_config[4] =='_'&& g_system_config[5] =='*' &&  g_system_config[6] =='\n' ){
 8001200:	4b55      	ldr	r3, [pc, #340]	; (8001358 <system_state_update+0x228>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b26      	cmp	r3, #38	; 0x26
 8001206:	d12f      	bne.n	8001268 <system_state_update+0x138>
 8001208:	4b53      	ldr	r3, [pc, #332]	; (8001358 <system_state_update+0x228>)
 800120a:	785b      	ldrb	r3, [r3, #1]
 800120c:	2b5f      	cmp	r3, #95	; 0x5f
 800120e:	d12b      	bne.n	8001268 <system_state_update+0x138>
 8001210:	4b51      	ldr	r3, [pc, #324]	; (8001358 <system_state_update+0x228>)
 8001212:	789b      	ldrb	r3, [r3, #2]
 8001214:	2b45      	cmp	r3, #69	; 0x45
 8001216:	d127      	bne.n	8001268 <system_state_update+0x138>
 8001218:	4b4f      	ldr	r3, [pc, #316]	; (8001358 <system_state_update+0x228>)
 800121a:	78db      	ldrb	r3, [r3, #3]
 800121c:	2b4e      	cmp	r3, #78	; 0x4e
 800121e:	d123      	bne.n	8001268 <system_state_update+0x138>
 8001220:	4b4d      	ldr	r3, [pc, #308]	; (8001358 <system_state_update+0x228>)
 8001222:	791b      	ldrb	r3, [r3, #4]
 8001224:	2b5f      	cmp	r3, #95	; 0x5f
 8001226:	d11f      	bne.n	8001268 <system_state_update+0x138>
 8001228:	4b4b      	ldr	r3, [pc, #300]	; (8001358 <system_state_update+0x228>)
 800122a:	795b      	ldrb	r3, [r3, #5]
 800122c:	2b2a      	cmp	r3, #42	; 0x2a
 800122e:	d11b      	bne.n	8001268 <system_state_update+0x138>
 8001230:	4b49      	ldr	r3, [pc, #292]	; (8001358 <system_state_update+0x228>)
 8001232:	799b      	ldrb	r3, [r3, #6]
 8001234:	2b0a      	cmp	r3, #10
 8001236:	d117      	bne.n	8001268 <system_state_update+0x138>
			if(g_EN_measure == 0){
 8001238:	4b4e      	ldr	r3, [pc, #312]	; (8001374 <system_state_update+0x244>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d103      	bne.n	8001248 <system_state_update+0x118>
				g_EN_measure = 1;
 8001240:	4b4c      	ldr	r3, [pc, #304]	; (8001374 <system_state_update+0x244>)
 8001242:	2201      	movs	r2, #1
 8001244:	701a      	strb	r2, [r3, #0]
			if(g_EN_measure == 0){
 8001246:	e014      	b.n	8001272 <system_state_update+0x142>
			}
			else if(g_EN_measure == 1){
 8001248:	4b4a      	ldr	r3, [pc, #296]	; (8001374 <system_state_update+0x244>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d103      	bne.n	8001258 <system_state_update+0x128>
				g_EN_measure = 2;
 8001250:	4b48      	ldr	r3, [pc, #288]	; (8001374 <system_state_update+0x244>)
 8001252:	2202      	movs	r2, #2
 8001254:	701a      	strb	r2, [r3, #0]
			if(g_EN_measure == 0){
 8001256:	e00c      	b.n	8001272 <system_state_update+0x142>

			}
			else{
				if(g_EN_measure ==2){
 8001258:	4b46      	ldr	r3, [pc, #280]	; (8001374 <system_state_update+0x244>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b02      	cmp	r3, #2
 800125e:	d108      	bne.n	8001272 <system_state_update+0x142>
					g_EN_measure = 1;
 8001260:	4b44      	ldr	r3, [pc, #272]	; (8001374 <system_state_update+0x244>)
 8001262:	2201      	movs	r2, #1
 8001264:	701a      	strb	r2, [r3, #0]
			if(g_EN_measure == 0){
 8001266:	e004      	b.n	8001272 <system_state_update+0x142>
				}
			}
		}
		//else block to not update g_EN_measure if incorrent command revcd
		else{
			g_EN_measure =  g_EN_measure ;
 8001268:	4b42      	ldr	r3, [pc, #264]	; (8001374 <system_state_update+0x244>)
 800126a:	781a      	ldrb	r2, [r3, #0]
 800126c:	4b41      	ldr	r3, [pc, #260]	; (8001374 <system_state_update+0x244>)
 800126e:	701a      	strb	r2, [r3, #0]
 8001270:	e000      	b.n	8001274 <system_state_update+0x144>
			if(g_EN_measure == 0){
 8001272:	bf00      	nop
	}



	//SP Measure
	if(g_bottom_button_pressed  == 1  && g_EN_config_command_rcvd == 0 && g_SP_config_command_rcvd ==0  && (g_EN_measure == 0 || g_EN_measure ==2)){
 8001274:	4b40      	ldr	r3, [pc, #256]	; (8001378 <system_state_update+0x248>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d120      	bne.n	80012be <system_state_update+0x18e>
 800127c:	4b37      	ldr	r3, [pc, #220]	; (800135c <system_state_update+0x22c>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d11c      	bne.n	80012be <system_state_update+0x18e>
 8001284:	4b36      	ldr	r3, [pc, #216]	; (8001360 <system_state_update+0x230>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d118      	bne.n	80012be <system_state_update+0x18e>
 800128c:	4b39      	ldr	r3, [pc, #228]	; (8001374 <system_state_update+0x244>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d003      	beq.n	800129c <system_state_update+0x16c>
 8001294:	4b37      	ldr	r3, [pc, #220]	; (8001374 <system_state_update+0x244>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b02      	cmp	r3, #2
 800129a:	d110      	bne.n	80012be <system_state_update+0x18e>
			g_bottom_button_pressed = 0;
 800129c:	4b36      	ldr	r3, [pc, #216]	; (8001378 <system_state_update+0x248>)
 800129e:	2200      	movs	r2, #0
 80012a0:	701a      	strb	r2, [r3, #0]

			g_SP_measure++  ;
 80012a2:	4b33      	ldr	r3, [pc, #204]	; (8001370 <system_state_update+0x240>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	3301      	adds	r3, #1
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	4b31      	ldr	r3, [pc, #196]	; (8001370 <system_state_update+0x240>)
 80012ac:	701a      	strb	r2, [r3, #0]

			if(g_SP_measure >2 ){
 80012ae:	4b30      	ldr	r3, [pc, #192]	; (8001370 <system_state_update+0x240>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d968      	bls.n	8001388 <system_state_update+0x258>
				g_SP_measure = 1;
 80012b6:	4b2e      	ldr	r3, [pc, #184]	; (8001370 <system_state_update+0x240>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	701a      	strb	r2, [r3, #0]
			if(g_SP_measure >2 ){
 80012bc:	e064      	b.n	8001388 <system_state_update+0x258>
			}
		}
		else if(g_bottom_button_pressed ==0  && g_EN_config_command_rcvd == 0 && g_SP_config_command_rcvd ==1 && (g_EN_measure == 0 || g_EN_measure ==2)){
 80012be:	4b2e      	ldr	r3, [pc, #184]	; (8001378 <system_state_update+0x248>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d160      	bne.n	8001388 <system_state_update+0x258>
 80012c6:	4b25      	ldr	r3, [pc, #148]	; (800135c <system_state_update+0x22c>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d15c      	bne.n	8001388 <system_state_update+0x258>
 80012ce:	4b24      	ldr	r3, [pc, #144]	; (8001360 <system_state_update+0x230>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d158      	bne.n	8001388 <system_state_update+0x258>
 80012d6:	4b27      	ldr	r3, [pc, #156]	; (8001374 <system_state_update+0x244>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d003      	beq.n	80012e6 <system_state_update+0x1b6>
 80012de:	4b25      	ldr	r3, [pc, #148]	; (8001374 <system_state_update+0x244>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d150      	bne.n	8001388 <system_state_update+0x258>
			g_SP_config_command_rcvd = 0;
 80012e6:	4b1e      	ldr	r3, [pc, #120]	; (8001360 <system_state_update+0x230>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	701a      	strb	r2, [r3, #0]
			if(g_system_config[0]== '&' && g_system_config[1 ]== '_' && g_system_config[2]=='S' && g_system_config[3] == 'P' &&g_system_config[4] =='_'&& g_system_config[5] =='*' &&  g_system_config[6] =='\n' ){
 80012ec:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <system_state_update+0x228>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b26      	cmp	r3, #38	; 0x26
 80012f2:	d143      	bne.n	800137c <system_state_update+0x24c>
 80012f4:	4b18      	ldr	r3, [pc, #96]	; (8001358 <system_state_update+0x228>)
 80012f6:	785b      	ldrb	r3, [r3, #1]
 80012f8:	2b5f      	cmp	r3, #95	; 0x5f
 80012fa:	d13f      	bne.n	800137c <system_state_update+0x24c>
 80012fc:	4b16      	ldr	r3, [pc, #88]	; (8001358 <system_state_update+0x228>)
 80012fe:	789b      	ldrb	r3, [r3, #2]
 8001300:	2b53      	cmp	r3, #83	; 0x53
 8001302:	d13b      	bne.n	800137c <system_state_update+0x24c>
 8001304:	4b14      	ldr	r3, [pc, #80]	; (8001358 <system_state_update+0x228>)
 8001306:	78db      	ldrb	r3, [r3, #3]
 8001308:	2b50      	cmp	r3, #80	; 0x50
 800130a:	d137      	bne.n	800137c <system_state_update+0x24c>
 800130c:	4b12      	ldr	r3, [pc, #72]	; (8001358 <system_state_update+0x228>)
 800130e:	791b      	ldrb	r3, [r3, #4]
 8001310:	2b5f      	cmp	r3, #95	; 0x5f
 8001312:	d133      	bne.n	800137c <system_state_update+0x24c>
 8001314:	4b10      	ldr	r3, [pc, #64]	; (8001358 <system_state_update+0x228>)
 8001316:	795b      	ldrb	r3, [r3, #5]
 8001318:	2b2a      	cmp	r3, #42	; 0x2a
 800131a:	d12f      	bne.n	800137c <system_state_update+0x24c>
 800131c:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <system_state_update+0x228>)
 800131e:	799b      	ldrb	r3, [r3, #6]
 8001320:	2b0a      	cmp	r3, #10
 8001322:	d12b      	bne.n	800137c <system_state_update+0x24c>
				if(g_SP_measure == 0){
 8001324:	4b12      	ldr	r3, [pc, #72]	; (8001370 <system_state_update+0x240>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d103      	bne.n	8001334 <system_state_update+0x204>
					g_SP_measure = 1;
 800132c:	4b10      	ldr	r3, [pc, #64]	; (8001370 <system_state_update+0x240>)
 800132e:	2201      	movs	r2, #1
 8001330:	701a      	strb	r2, [r3, #0]
				if(g_SP_measure == 0){
 8001332:	e028      	b.n	8001386 <system_state_update+0x256>
				}
				else if(g_SP_measure == 1){
 8001334:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <system_state_update+0x240>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d103      	bne.n	8001344 <system_state_update+0x214>
					g_SP_measure = 2;
 800133c:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <system_state_update+0x240>)
 800133e:	2202      	movs	r2, #2
 8001340:	701a      	strb	r2, [r3, #0]
				if(g_SP_measure == 0){
 8001342:	e020      	b.n	8001386 <system_state_update+0x256>

				}
				else{
					if(g_SP_measure ==2){
 8001344:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <system_state_update+0x240>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b02      	cmp	r3, #2
 800134a:	d11c      	bne.n	8001386 <system_state_update+0x256>
						g_SP_measure = 1;
 800134c:	4b08      	ldr	r3, [pc, #32]	; (8001370 <system_state_update+0x240>)
 800134e:	2201      	movs	r2, #1
 8001350:	701a      	strb	r2, [r3, #0]
				if(g_SP_measure == 0){
 8001352:	e018      	b.n	8001386 <system_state_update+0x256>
 8001354:	200001c6 	.word	0x200001c6
 8001358:	200001b4 	.word	0x200001b4
 800135c:	200001cd 	.word	0x200001cd
 8001360:	200001d0 	.word	0x200001d0
 8001364:	08005da0 	.word	0x08005da0
 8001368:	20000134 	.word	0x20000134
 800136c:	20000211 	.word	0x20000211
 8001370:	200001ce 	.word	0x200001ce
 8001374:	200001c7 	.word	0x200001c7
 8001378:	20000212 	.word	0x20000212
					}
				}
			}
			//else block to not update g_EN_measure if incorrent command revcd
			else{
				g_SP_measure =  g_SP_measure ;
 800137c:	4b03      	ldr	r3, [pc, #12]	; (800138c <system_state_update+0x25c>)
 800137e:	781a      	ldrb	r2, [r3, #0]
 8001380:	4b02      	ldr	r3, [pc, #8]	; (800138c <system_state_update+0x25c>)
 8001382:	701a      	strb	r2, [r3, #0]
			}
		}
}
 8001384:	e000      	b.n	8001388 <system_state_update+0x258>
				if(g_SP_measure == 0){
 8001386:	bf00      	nop
}
 8001388:	bf00      	nop
 800138a:	bd80      	pop	{r7, pc}
 800138c:	200001ce 	.word	0x200001ce

08001390 <HAL_TIM_IC_CaptureCallback>:
uint8_t g_new_pulse = 0;
uint16_t g_lmt01_sens_temp =  0 ;
char dig_sens_temp[3] = {};

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
  if(htim->Instance == TIM2){
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013a0:	d142      	bne.n	8001428 <HAL_TIM_IC_CaptureCallback+0x98>
	  g_new_pulse = 1;
 80013a2:	4b23      	ldr	r3, [pc, #140]	; (8001430 <HAL_TIM_IC_CaptureCallback+0xa0>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	701a      	strb	r2, [r3, #0]
	  g_time_between_pulses =  __HAL_TIM_GET_COUNTER(&htim2)  - current_value;  //Time between rising edges
 80013a8:	4b22      	ldr	r3, [pc, #136]	; (8001434 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013ae:	4b22      	ldr	r3, [pc, #136]	; (8001438 <HAL_TIM_IC_CaptureCallback+0xa8>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	4a21      	ldr	r2, [pc, #132]	; (800143c <HAL_TIM_IC_CaptureCallback+0xac>)
 80013b6:	6013      	str	r3, [r2, #0]

	  if( g_time_between_pulses<13){
 80013b8:	4b20      	ldr	r3, [pc, #128]	; (800143c <HAL_TIM_IC_CaptureCallback+0xac>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b0c      	cmp	r3, #12
 80013be:	d80a      	bhi.n	80013d6 <HAL_TIM_IC_CaptureCallback+0x46>
		  current_value = __HAL_TIM_GET_COUNTER(&htim2) ;
 80013c0:	4b1c      	ldr	r3, [pc, #112]	; (8001434 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c6:	4a1c      	ldr	r2, [pc, #112]	; (8001438 <HAL_TIM_IC_CaptureCallback+0xa8>)
 80013c8:	6013      	str	r3, [r2, #0]
		  pulse_count++ ;
 80013ca:	4b1d      	ldr	r3, [pc, #116]	; (8001440 <HAL_TIM_IC_CaptureCallback+0xb0>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	3301      	adds	r3, #1
 80013d0:	4a1b      	ldr	r2, [pc, #108]	; (8001440 <HAL_TIM_IC_CaptureCallback+0xb0>)
 80013d2:	6013      	str	r3, [r2, #0]
		  g_TO1_temp = (pulse_count/4096.0)*256 - 50 ; //calculate new temp - BUG Fixed: 4094 changed to 4096
		 current_value = __HAL_TIM_GET_COUNTER(&htim2) ;
		 pulse_count = 0;
	  }
  }
}
 80013d4:	e028      	b.n	8001428 <HAL_TIM_IC_CaptureCallback+0x98>
		  g_TO1_temp = (pulse_count/4096.0)*256 - 50 ; //calculate new temp - BUG Fixed: 4094 changed to 4096
 80013d6:	4b1a      	ldr	r3, [pc, #104]	; (8001440 <HAL_TIM_IC_CaptureCallback+0xb0>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff f846 	bl	800046c <__aeabi_ui2d>
 80013e0:	f04f 0200 	mov.w	r2, #0
 80013e4:	4b17      	ldr	r3, [pc, #92]	; (8001444 <HAL_TIM_IC_CaptureCallback+0xb4>)
 80013e6:	f7ff f9e5 	bl	80007b4 <__aeabi_ddiv>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	4610      	mov	r0, r2
 80013f0:	4619      	mov	r1, r3
 80013f2:	f04f 0200 	mov.w	r2, #0
 80013f6:	4b14      	ldr	r3, [pc, #80]	; (8001448 <HAL_TIM_IC_CaptureCallback+0xb8>)
 80013f8:	f7ff f8b2 	bl	8000560 <__aeabi_dmul>
 80013fc:	4602      	mov	r2, r0
 80013fe:	460b      	mov	r3, r1
 8001400:	4610      	mov	r0, r2
 8001402:	4619      	mov	r1, r3
 8001404:	f04f 0200 	mov.w	r2, #0
 8001408:	4b10      	ldr	r3, [pc, #64]	; (800144c <HAL_TIM_IC_CaptureCallback+0xbc>)
 800140a:	f7fe fef1 	bl	80001f0 <__aeabi_dsub>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	490f      	ldr	r1, [pc, #60]	; (8001450 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001414:	e9c1 2300 	strd	r2, r3, [r1]
		 current_value = __HAL_TIM_GET_COUNTER(&htim2) ;
 8001418:	4b06      	ldr	r3, [pc, #24]	; (8001434 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141e:	4a06      	ldr	r2, [pc, #24]	; (8001438 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8001420:	6013      	str	r3, [r2, #0]
		 pulse_count = 0;
 8001422:	4b07      	ldr	r3, [pc, #28]	; (8001440 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
}
 8001428:	bf00      	nop
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20000208 	.word	0x20000208
 8001434:	200000a4 	.word	0x200000a4
 8001438:	20000200 	.word	0x20000200
 800143c:	20000204 	.word	0x20000204
 8001440:	20000218 	.word	0x20000218
 8001444:	40b00000 	.word	0x40b00000
 8001448:	40700000 	.word	0x40700000
 800144c:	40490000 	.word	0x40490000
 8001450:	20000198 	.word	0x20000198

08001454 <flash_led_d3>:

/**
 * Function flashed LED D3 at specified interval of 50 ms
 */
void flash_led_d3(){
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - g_time_passed >= 50 && g_LED_D3_ON == 0){
 8001458:	f001 f934 	bl	80026c4 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	4b16      	ldr	r3, [pc, #88]	; (80014b8 <flash_led_d3+0x64>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	2b31      	cmp	r3, #49	; 0x31
 8001466:	d90c      	bls.n	8001482 <flash_led_d3+0x2e>
 8001468:	4b14      	ldr	r3, [pc, #80]	; (80014bc <flash_led_d3+0x68>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d108      	bne.n	8001482 <flash_led_d3+0x2e>
		g_LED_D3_ON = 1; // set D2 on
 8001470:	4b12      	ldr	r3, [pc, #72]	; (80014bc <flash_led_d3+0x68>)
 8001472:	2201      	movs	r2, #1
 8001474:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET) ;
 8001476:	2200      	movs	r2, #0
 8001478:	2120      	movs	r1, #32
 800147a:	4811      	ldr	r0, [pc, #68]	; (80014c0 <flash_led_d3+0x6c>)
 800147c:	f002 f884 	bl	8003588 <HAL_GPIO_WritePin>
		g_time_passed =  HAL_GetTick() ;
		g_LED_D3_ON = 0;  //set D2 off

	}

}
 8001480:	e018      	b.n	80014b4 <flash_led_d3+0x60>
	else if(HAL_GetTick() - g_time_passed >= 100 && g_LED_D3_ON == 1){
 8001482:	f001 f91f 	bl	80026c4 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <flash_led_d3+0x64>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b63      	cmp	r3, #99	; 0x63
 8001490:	d910      	bls.n	80014b4 <flash_led_d3+0x60>
 8001492:	4b0a      	ldr	r3, [pc, #40]	; (80014bc <flash_led_d3+0x68>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d10c      	bne.n	80014b4 <flash_led_d3+0x60>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET) ;
 800149a:	2201      	movs	r2, #1
 800149c:	2120      	movs	r1, #32
 800149e:	4808      	ldr	r0, [pc, #32]	; (80014c0 <flash_led_d3+0x6c>)
 80014a0:	f002 f872 	bl	8003588 <HAL_GPIO_WritePin>
		g_time_passed =  HAL_GetTick() ;
 80014a4:	f001 f90e 	bl	80026c4 <HAL_GetTick>
 80014a8:	4603      	mov	r3, r0
 80014aa:	4a03      	ldr	r2, [pc, #12]	; (80014b8 <flash_led_d3+0x64>)
 80014ac:	6013      	str	r3, [r2, #0]
		g_LED_D3_ON = 0;  //set D2 off
 80014ae:	4b03      	ldr	r3, [pc, #12]	; (80014bc <flash_led_d3+0x68>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	701a      	strb	r2, [r3, #0]
}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	200001c8 	.word	0x200001c8
 80014bc:	200001cc 	.word	0x200001cc
 80014c0:	40020400 	.word	0x40020400

080014c4 <flash_led_d2>:

/**
 * Function flashed LED D2 at specified interval of 100 ms
 */
void flash_led_d2(){
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - g_time_passed >= 100 && g_LED_D2_ON == 0){
 80014c8:	f001 f8fc 	bl	80026c4 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	4b16      	ldr	r3, [pc, #88]	; (8001528 <flash_led_d2+0x64>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	2b63      	cmp	r3, #99	; 0x63
 80014d6:	d90c      	bls.n	80014f2 <flash_led_d2+0x2e>
 80014d8:	4b14      	ldr	r3, [pc, #80]	; (800152c <flash_led_d2+0x68>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d108      	bne.n	80014f2 <flash_led_d2+0x2e>
		g_LED_D2_ON = 1; // set D2 on
 80014e0:	4b12      	ldr	r3, [pc, #72]	; (800152c <flash_led_d2+0x68>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET) ;
 80014e6:	2200      	movs	r2, #0
 80014e8:	2110      	movs	r1, #16
 80014ea:	4811      	ldr	r0, [pc, #68]	; (8001530 <flash_led_d2+0x6c>)
 80014ec:	f002 f84c 	bl	8003588 <HAL_GPIO_WritePin>
		g_time_passed =  HAL_GetTick() ;
		g_LED_D2_ON = 0;  //set D2 off

	}

}
 80014f0:	e018      	b.n	8001524 <flash_led_d2+0x60>
	else if(HAL_GetTick() - g_time_passed >= 200 && g_LED_D2_ON == 1){
 80014f2:	f001 f8e7 	bl	80026c4 <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <flash_led_d2+0x64>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2bc7      	cmp	r3, #199	; 0xc7
 8001500:	d910      	bls.n	8001524 <flash_led_d2+0x60>
 8001502:	4b0a      	ldr	r3, [pc, #40]	; (800152c <flash_led_d2+0x68>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d10c      	bne.n	8001524 <flash_led_d2+0x60>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET) ;
 800150a:	2201      	movs	r2, #1
 800150c:	2110      	movs	r1, #16
 800150e:	4808      	ldr	r0, [pc, #32]	; (8001530 <flash_led_d2+0x6c>)
 8001510:	f002 f83a 	bl	8003588 <HAL_GPIO_WritePin>
		g_time_passed =  HAL_GetTick() ;
 8001514:	f001 f8d6 	bl	80026c4 <HAL_GetTick>
 8001518:	4603      	mov	r3, r0
 800151a:	4a03      	ldr	r2, [pc, #12]	; (8001528 <flash_led_d2+0x64>)
 800151c:	6013      	str	r3, [r2, #0]
		g_LED_D2_ON = 0;  //set D2 off
 800151e:	4b03      	ldr	r3, [pc, #12]	; (800152c <flash_led_d2+0x68>)
 8001520:	2200      	movs	r2, #0
 8001522:	701a      	strb	r2, [r3, #0]
}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}
 8001528:	200001c8 	.word	0x200001c8
 800152c:	200001cf 	.word	0x200001cf
 8001530:	40020400 	.word	0x40020400

08001534 <store_system_state_in_buffer>:

void store_system_state_in_buffer(char analog_temp[], char dig_temp[],char lux_value[],char system_state[], uint8_t len_of_sys_arr ){
 8001534:	b480      	push	{r7}
 8001536:	b087      	sub	sp, #28
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
 8001540:	603b      	str	r3, [r7, #0]
	  for(int i = 0; i < len_of_sys_arr ; i++){
 8001542:	2300      	movs	r3, #0
 8001544:	617b      	str	r3, [r7, #20]
 8001546:	e072      	b.n	800162e <store_system_state_in_buffer+0xfa>
		  switch(i){
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	2b0f      	cmp	r3, #15
 800154c:	d86b      	bhi.n	8001626 <store_system_state_in_buffer+0xf2>
 800154e:	a201      	add	r2, pc, #4	; (adr r2, 8001554 <store_system_state_in_buffer+0x20>)
 8001550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001554:	08001595 	.word	0x08001595
 8001558:	0800159d 	.word	0x0800159d
 800155c:	080015a5 	.word	0x080015a5
 8001560:	080015af 	.word	0x080015af
 8001564:	080015b9 	.word	0x080015b9
 8001568:	080015c3 	.word	0x080015c3
 800156c:	080015cb 	.word	0x080015cb
 8001570:	080015d5 	.word	0x080015d5
 8001574:	080015df 	.word	0x080015df
 8001578:	080015e9 	.word	0x080015e9
 800157c:	080015f1 	.word	0x080015f1
 8001580:	080015fb 	.word	0x080015fb
 8001584:	08001605 	.word	0x08001605
 8001588:	0800160f 	.word	0x0800160f
 800158c:	08001617 	.word	0x08001617
 8001590:	0800161f 	.word	0x0800161f
		  case 0:
			  system_state_transmit[0] = '&' ;
 8001594:	4b2c      	ldr	r3, [pc, #176]	; (8001648 <store_system_state_in_buffer+0x114>)
 8001596:	2226      	movs	r2, #38	; 0x26
 8001598:	701a      	strb	r2, [r3, #0]
			  break ;
 800159a:	e045      	b.n	8001628 <store_system_state_in_buffer+0xf4>
		  case 1:
			  system_state_transmit[1] = '_' ;
 800159c:	4b2a      	ldr	r3, [pc, #168]	; (8001648 <store_system_state_in_buffer+0x114>)
 800159e:	225f      	movs	r2, #95	; 0x5f
 80015a0:	705a      	strb	r2, [r3, #1]

			  break;
 80015a2:	e041      	b.n	8001628 <store_system_state_in_buffer+0xf4>
		  case 2:
			  system_state_transmit[2] = analog_temp[0] ;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	781a      	ldrb	r2, [r3, #0]
 80015a8:	4b27      	ldr	r3, [pc, #156]	; (8001648 <store_system_state_in_buffer+0x114>)
 80015aa:	709a      	strb	r2, [r3, #2]

			  break;
 80015ac:	e03c      	b.n	8001628 <store_system_state_in_buffer+0xf4>
		  case 3:
			  system_state_transmit[3] = analog_temp[1] ;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	785a      	ldrb	r2, [r3, #1]
 80015b2:	4b25      	ldr	r3, [pc, #148]	; (8001648 <store_system_state_in_buffer+0x114>)
 80015b4:	70da      	strb	r2, [r3, #3]

			  break;
 80015b6:	e037      	b.n	8001628 <store_system_state_in_buffer+0xf4>
		  case 4:
			  system_state_transmit[4] = analog_temp[2] ;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	789a      	ldrb	r2, [r3, #2]
 80015bc:	4b22      	ldr	r3, [pc, #136]	; (8001648 <store_system_state_in_buffer+0x114>)
 80015be:	711a      	strb	r2, [r3, #4]

			  break;
 80015c0:	e032      	b.n	8001628 <store_system_state_in_buffer+0xf4>
		  case 5:
			  system_state_transmit[5] = '_' ;
 80015c2:	4b21      	ldr	r3, [pc, #132]	; (8001648 <store_system_state_in_buffer+0x114>)
 80015c4:	225f      	movs	r2, #95	; 0x5f
 80015c6:	715a      	strb	r2, [r3, #5]

			  break;
 80015c8:	e02e      	b.n	8001628 <store_system_state_in_buffer+0xf4>
		  case 6:
			  system_state_transmit[6] = dig_temp[0] ;
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	781a      	ldrb	r2, [r3, #0]
 80015ce:	4b1e      	ldr	r3, [pc, #120]	; (8001648 <store_system_state_in_buffer+0x114>)
 80015d0:	719a      	strb	r2, [r3, #6]

			  break;
 80015d2:	e029      	b.n	8001628 <store_system_state_in_buffer+0xf4>
		  case 7:
			  system_state_transmit[7] = dig_temp[1] ;
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	785a      	ldrb	r2, [r3, #1]
 80015d8:	4b1b      	ldr	r3, [pc, #108]	; (8001648 <store_system_state_in_buffer+0x114>)
 80015da:	71da      	strb	r2, [r3, #7]

			  break;
 80015dc:	e024      	b.n	8001628 <store_system_state_in_buffer+0xf4>
		  case 8:
			  system_state_transmit[8] = dig_temp[2] ;
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	789a      	ldrb	r2, [r3, #2]
 80015e2:	4b19      	ldr	r3, [pc, #100]	; (8001648 <store_system_state_in_buffer+0x114>)
 80015e4:	721a      	strb	r2, [r3, #8]

			  break;
 80015e6:	e01f      	b.n	8001628 <store_system_state_in_buffer+0xf4>
		  case 9:
			  system_state_transmit[9] = '_' ;
 80015e8:	4b17      	ldr	r3, [pc, #92]	; (8001648 <store_system_state_in_buffer+0x114>)
 80015ea:	225f      	movs	r2, #95	; 0x5f
 80015ec:	725a      	strb	r2, [r3, #9]

			  break;
 80015ee:	e01b      	b.n	8001628 <store_system_state_in_buffer+0xf4>
		  case 10:
			  system_state_transmit[10] = lux_value[0] ;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	781a      	ldrb	r2, [r3, #0]
 80015f4:	4b14      	ldr	r3, [pc, #80]	; (8001648 <store_system_state_in_buffer+0x114>)
 80015f6:	729a      	strb	r2, [r3, #10]

			  break;
 80015f8:	e016      	b.n	8001628 <store_system_state_in_buffer+0xf4>
		  case 11:
			  system_state_transmit[11] = lux_value[1] ;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	785a      	ldrb	r2, [r3, #1]
 80015fe:	4b12      	ldr	r3, [pc, #72]	; (8001648 <store_system_state_in_buffer+0x114>)
 8001600:	72da      	strb	r2, [r3, #11]

			  break;
 8001602:	e011      	b.n	8001628 <store_system_state_in_buffer+0xf4>
		  case 12:
			  system_state_transmit[12] = lux_value[2] ;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	789a      	ldrb	r2, [r3, #2]
 8001608:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <store_system_state_in_buffer+0x114>)
 800160a:	731a      	strb	r2, [r3, #12]

			  break;
 800160c:	e00c      	b.n	8001628 <store_system_state_in_buffer+0xf4>
		  case 13:
			  system_state_transmit[13] = '_' ;
 800160e:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <store_system_state_in_buffer+0x114>)
 8001610:	225f      	movs	r2, #95	; 0x5f
 8001612:	735a      	strb	r2, [r3, #13]

			  break;
 8001614:	e008      	b.n	8001628 <store_system_state_in_buffer+0xf4>
		  case 14:
			  system_state_transmit[14] = '*' ;
 8001616:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <store_system_state_in_buffer+0x114>)
 8001618:	222a      	movs	r2, #42	; 0x2a
 800161a:	739a      	strb	r2, [r3, #14]

			  break;
 800161c:	e004      	b.n	8001628 <store_system_state_in_buffer+0xf4>
		  case 15:
			  system_state_transmit[15] = '\n' ;
 800161e:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <store_system_state_in_buffer+0x114>)
 8001620:	220a      	movs	r2, #10
 8001622:	73da      	strb	r2, [r3, #15]

			  break;
 8001624:	e000      	b.n	8001628 <store_system_state_in_buffer+0xf4>
		  default:
			  break;
 8001626:	bf00      	nop
	  for(int i = 0; i < len_of_sys_arr ; i++){
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	3301      	adds	r3, #1
 800162c:	617b      	str	r3, [r7, #20]
 800162e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001632:	697a      	ldr	r2, [r7, #20]
 8001634:	429a      	cmp	r2, r3
 8001636:	db87      	blt.n	8001548 <store_system_state_in_buffer+0x14>
		  }
	  }
}
 8001638:	bf00      	nop
 800163a:	bf00      	nop
 800163c:	371c      	adds	r7, #28
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	200001d4 	.word	0x200001d4

0800164c <ADC_Select_CH0>:

//digital sensore
void ADC_Select_CH0(void){
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001652:	463b      	mov	r3, r7
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_0;
 800165e:	2300      	movs	r3, #0
 8001660:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001662:	2301      	movs	r3, #1
 8001664:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001666:	2300      	movs	r3, #0
 8001668:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800166a:	463b      	mov	r3, r7
 800166c:	4619      	mov	r1, r3
 800166e:	4806      	ldr	r0, [pc, #24]	; (8001688 <ADC_Select_CH0+0x3c>)
 8001670:	f001 fa1c 	bl	8002aac <HAL_ADC_ConfigChannel>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <ADC_Select_CH0+0x32>
	{
		Error_Handler();
 800167a:	f000 fc67 	bl	8001f4c <Error_Handler>
	}


}
 800167e:	bf00      	nop
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	2000005c 	.word	0x2000005c

0800168c <ADC_Select_CH14>:
// photodiode
void ADC_Select_CH14(void){
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001692:	463b      	mov	r3, r7
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	*/
	sConfig.Channel = ADC_CHANNEL_14;
 800169e:	230e      	movs	r3, #14
 80016a0:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80016a2:	2301      	movs	r3, #1
 80016a4:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016a6:	463b      	mov	r3, r7
 80016a8:	4619      	mov	r1, r3
 80016aa:	4806      	ldr	r0, [pc, #24]	; (80016c4 <ADC_Select_CH14+0x38>)
 80016ac:	f001 f9fe 	bl	8002aac <HAL_ADC_ConfigChannel>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <ADC_Select_CH14+0x2e>
	{
		Error_Handler();
 80016b6:	f000 fc49 	bl	8001f4c <Error_Handler>
	}


}
 80016ba:	bf00      	nop
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	2000005c 	.word	0x2000005c

080016c8 <ADC_Select_CH9>:

//PV- Panel- ADC 1
void ADC_Select_CH9(void){
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80016ce:	463b      	mov	r3, r7
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	*/
	sConfig.Channel = ADC_CHANNEL_9;
 80016da:	2309      	movs	r3, #9
 80016dc:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80016de:	2301      	movs	r3, #1
 80016e0:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016e2:	463b      	mov	r3, r7
 80016e4:	4619      	mov	r1, r3
 80016e6:	4806      	ldr	r0, [pc, #24]	; (8001700 <ADC_Select_CH9+0x38>)
 80016e8:	f001 f9e0 	bl	8002aac <HAL_ADC_ConfigChannel>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <ADC_Select_CH9+0x2e>
	{
		Error_Handler();
 80016f2:	f000 fc2b 	bl	8001f4c <Error_Handler>
	}
}
 80016f6:	bf00      	nop
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	2000005c 	.word	0x2000005c

08001704 <ADC_Select_CH15>:

//PV - Panel - ADC2
void ADC_Select_CH15(void){
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800170a:	463b      	mov	r3, r7
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	*/
	sConfig.Channel = ADC_CHANNEL_15;
 8001716:	230f      	movs	r3, #15
 8001718:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 800171a:	2301      	movs	r3, #1
 800171c:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800171e:	463b      	mov	r3, r7
 8001720:	4619      	mov	r1, r3
 8001722:	4806      	ldr	r0, [pc, #24]	; (800173c <ADC_Select_CH15+0x38>)
 8001724:	f001 f9c2 	bl	8002aac <HAL_ADC_ConfigChannel>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <ADC_Select_CH15+0x2e>
	{
		Error_Handler();
 800172e:	f000 fc0d 	bl	8001f4c <Error_Handler>
	}
}
 8001732:	bf00      	nop
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	2000005c 	.word	0x2000005c

08001740 <get_adc_value_conver_to_lux>:

/**
 * Function starts ADC CH14, connected to ouput of light diode
 * get the ADC value of diode
 */
uint16_t get_adc_value_conver_to_lux(){
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
	ADC_Select_CH14() ;
 8001744:	f7ff ffa2 	bl	800168c <ADC_Select_CH14>
	HAL_ADC_Start(&hadc1);
 8001748:	4817      	ldr	r0, [pc, #92]	; (80017a8 <get_adc_value_conver_to_lux+0x68>)
 800174a:	f001 f82f 	bl	80027ac <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) ;
 800174e:	f04f 31ff 	mov.w	r1, #4294967295
 8001752:	4815      	ldr	r0, [pc, #84]	; (80017a8 <get_adc_value_conver_to_lux+0x68>)
 8001754:	f001 f911 	bl	800297a <HAL_ADC_PollForConversion>
	g_raw_lux_value = HAL_ADC_GetValue(&hadc1) ;
 8001758:	4813      	ldr	r0, [pc, #76]	; (80017a8 <get_adc_value_conver_to_lux+0x68>)
 800175a:	f001 f999 	bl	8002a90 <HAL_ADC_GetValue>
 800175e:	4603      	mov	r3, r0
 8001760:	b29a      	uxth	r2, r3
 8001762:	4b12      	ldr	r3, [pc, #72]	; (80017ac <get_adc_value_conver_to_lux+0x6c>)
 8001764:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 8001766:	4810      	ldr	r0, [pc, #64]	; (80017a8 <get_adc_value_conver_to_lux+0x68>)
 8001768:	f001 f8d4 	bl	8002914 <HAL_ADC_Stop>

	//scale adc value [0,99999] - For 30000 lux
	g_raw_lux_value = g_raw_lux_value*(999.0/4095.0) ;
 800176c:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <get_adc_value_conver_to_lux+0x6c>)
 800176e:	881b      	ldrh	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f7fe fe8b 	bl	800048c <__aeabi_i2d>
 8001776:	a30a      	add	r3, pc, #40	; (adr r3, 80017a0 <get_adc_value_conver_to_lux+0x60>)
 8001778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177c:	f7fe fef0 	bl	8000560 <__aeabi_dmul>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	4610      	mov	r0, r2
 8001786:	4619      	mov	r1, r3
 8001788:	f7ff f8fc 	bl	8000984 <__aeabi_d2uiz>
 800178c:	4603      	mov	r3, r0
 800178e:	b29a      	uxth	r2, r3
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <get_adc_value_conver_to_lux+0x6c>)
 8001792:	801a      	strh	r2, [r3, #0]

	return g_raw_lux_value ;
 8001794:	4b05      	ldr	r3, [pc, #20]	; (80017ac <get_adc_value_conver_to_lux+0x6c>)
 8001796:	881b      	ldrh	r3, [r3, #0]

}
 8001798:	4618      	mov	r0, r3
 800179a:	bd80      	pop	{r7, pc}
 800179c:	f3af 8000 	nop.w
 80017a0:	9f39f39f 	.word	0x9f39f39f
 80017a4:	3fcf39f3 	.word	0x3fcf39f3
 80017a8:	2000005c 	.word	0x2000005c
 80017ac:	200001a0 	.word	0x200001a0

080017b0 <en_measurements_and_responses>:
 * This funtion performs the measurement for UR3: Environement measure.
 * It measures the ambient temperature, solar panel temperature and light intensity,
 * the board is exposed to.
 * Measurements and responses, transmitted to UART and LCD
 */
void en_measurements_and_responses(){
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af02      	add	r7, sp, #8

	if(g_EN_measure == 1){
 80017b6:	4b43      	ldr	r3, [pc, #268]	; (80018c4 <en_measurements_and_responses+0x114>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d143      	bne.n	8001846 <en_measurements_and_responses+0x96>

	  // ignore bottom button press and SP command while measuring
	  if(g_bottom_button_pressed ==1 || g_SP_config_command_rcvd ==1){
 80017be:	4b42      	ldr	r3, [pc, #264]	; (80018c8 <en_measurements_and_responses+0x118>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d003      	beq.n	80017ce <en_measurements_and_responses+0x1e>
 80017c6:	4b41      	ldr	r3, [pc, #260]	; (80018cc <en_measurements_and_responses+0x11c>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d105      	bne.n	80017da <en_measurements_and_responses+0x2a>
		  g_bottom_button_pressed = 0 ;
 80017ce:	4b3e      	ldr	r3, [pc, #248]	; (80018c8 <en_measurements_and_responses+0x118>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	701a      	strb	r2, [r3, #0]
		  g_SP_config_command_rcvd = 0 ;
 80017d4:	4b3d      	ldr	r3, [pc, #244]	; (80018cc <en_measurements_and_responses+0x11c>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	701a      	strb	r2, [r3, #0]
	  }
	  //ANALOGUE SENSOR CALIBRATION
	  g_temp_in_deg = get_adc_value_and_celsius_temperature() ;
 80017da:	f7ff fbe5 	bl	8000fa8 <get_adc_value_and_celsius_temperature>
 80017de:	4603      	mov	r3, r0
 80017e0:	461a      	mov	r2, r3
 80017e2:	4b3b      	ldr	r3, [pc, #236]	; (80018d0 <en_measurements_and_responses+0x120>)
 80017e4:	801a      	strh	r2, [r3, #0]
	  store_temp_in_string(g_temp_in_deg, g_temperature, LEN);
 80017e6:	4b3a      	ldr	r3, [pc, #232]	; (80018d0 <en_measurements_and_responses+0x120>)
 80017e8:	881b      	ldrh	r3, [r3, #0]
 80017ea:	2203      	movs	r2, #3
 80017ec:	4939      	ldr	r1, [pc, #228]	; (80018d4 <en_measurements_and_responses+0x124>)
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff fc34 	bl	800105c <store_temp_in_string>

	  //PHOTODIOCE ouput
	  g_get_lxd_value = get_adc_value_conver_to_lux();
 80017f4:	f7ff ffa4 	bl	8001740 <get_adc_value_conver_to_lux>
 80017f8:	4603      	mov	r3, r0
 80017fa:	461a      	mov	r2, r3
 80017fc:	4b36      	ldr	r3, [pc, #216]	; (80018d8 <en_measurements_and_responses+0x128>)
 80017fe:	801a      	strh	r2, [r3, #0]
	  store_temp_in_string(g_get_lxd_value, g_lxd_value, LEN);
 8001800:	4b35      	ldr	r3, [pc, #212]	; (80018d8 <en_measurements_and_responses+0x128>)
 8001802:	881b      	ldrh	r3, [r3, #0]
 8001804:	2203      	movs	r2, #3
 8001806:	4935      	ldr	r1, [pc, #212]	; (80018dc <en_measurements_and_responses+0x12c>)
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff fc27 	bl	800105c <store_temp_in_string>

	  // DIGITAL SENSOR CALIBRATION
	  g_lmt01_sens_temp =  (uint16_t)g_TO1_temp ;
 800180e:	4b34      	ldr	r3, [pc, #208]	; (80018e0 <en_measurements_and_responses+0x130>)
 8001810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001814:	4610      	mov	r0, r2
 8001816:	4619      	mov	r1, r3
 8001818:	f7ff f8b4 	bl	8000984 <__aeabi_d2uiz>
 800181c:	4603      	mov	r3, r0
 800181e:	b29a      	uxth	r2, r3
 8001820:	4b30      	ldr	r3, [pc, #192]	; (80018e4 <en_measurements_and_responses+0x134>)
 8001822:	801a      	strh	r2, [r3, #0]
	  store_temp_in_string(g_lmt01_sens_temp, dig_sens_temp, LEN) ;
 8001824:	4b2f      	ldr	r3, [pc, #188]	; (80018e4 <en_measurements_and_responses+0x134>)
 8001826:	881b      	ldrh	r3, [r3, #0]
 8001828:	2203      	movs	r2, #3
 800182a:	492f      	ldr	r1, [pc, #188]	; (80018e8 <en_measurements_and_responses+0x138>)
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff fc15 	bl	800105c <store_temp_in_string>

	  //re-prime system state update
	  if(g_transmit_system_state ==0){
 8001832:	4b2e      	ldr	r3, [pc, #184]	; (80018ec <en_measurements_and_responses+0x13c>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d102      	bne.n	8001840 <en_measurements_and_responses+0x90>
		  g_transmit_system_state =1; //send the system state again
 800183a:	4b2c      	ldr	r3, [pc, #176]	; (80018ec <en_measurements_and_responses+0x13c>)
 800183c:	2201      	movs	r2, #1
 800183e:	701a      	strb	r2, [r3, #0]

	  }

	  //Flash D3 LED -> put in function
	  flash_led_d3();
 8001840:	f7ff fe08 	bl	8001454 <flash_led_d3>
		  Lcd_cursor(&lcd, 1,0);
		  Lcd_string(&lcd, "LUX:00000");
	  }

	}
}
 8001844:	e03a      	b.n	80018bc <en_measurements_and_responses+0x10c>
	else if(g_EN_measure == 2){
 8001846:	4b1f      	ldr	r3, [pc, #124]	; (80018c4 <en_measurements_and_responses+0x114>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b02      	cmp	r3, #2
 800184c:	d136      	bne.n	80018bc <en_measurements_and_responses+0x10c>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET) ;
 800184e:	2201      	movs	r2, #1
 8001850:	2120      	movs	r1, #32
 8001852:	4827      	ldr	r0, [pc, #156]	; (80018f0 <en_measurements_and_responses+0x140>)
 8001854:	f001 fe98 	bl	8003588 <HAL_GPIO_WritePin>
	  store_system_state_in_buffer(g_temperature, dig_sens_temp,g_lxd_value,  system_state_transmit, 17) ;
 8001858:	2311      	movs	r3, #17
 800185a:	9300      	str	r3, [sp, #0]
 800185c:	4b25      	ldr	r3, [pc, #148]	; (80018f4 <en_measurements_and_responses+0x144>)
 800185e:	4a1f      	ldr	r2, [pc, #124]	; (80018dc <en_measurements_and_responses+0x12c>)
 8001860:	4921      	ldr	r1, [pc, #132]	; (80018e8 <en_measurements_and_responses+0x138>)
 8001862:	481c      	ldr	r0, [pc, #112]	; (80018d4 <en_measurements_and_responses+0x124>)
 8001864:	f7ff fe66 	bl	8001534 <store_system_state_in_buffer>
	  if(g_transmit_system_state  == 1){
 8001868:	4b20      	ldr	r3, [pc, #128]	; (80018ec <en_measurements_and_responses+0x13c>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d125      	bne.n	80018bc <en_measurements_and_responses+0x10c>
		  g_transmit_system_state = 0;
 8001870:	4b1e      	ldr	r3, [pc, #120]	; (80018ec <en_measurements_and_responses+0x13c>)
 8001872:	2200      	movs	r2, #0
 8001874:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit_IT(&huart2, (uint8_t*)system_state_transmit, 16);
 8001876:	2210      	movs	r2, #16
 8001878:	491e      	ldr	r1, [pc, #120]	; (80018f4 <en_measurements_and_responses+0x144>)
 800187a:	481f      	ldr	r0, [pc, #124]	; (80018f8 <en_measurements_and_responses+0x148>)
 800187c:	f003 fadd 	bl	8004e3a <HAL_UART_Transmit_IT>
		  Lcd_clear(&lcd);
 8001880:	481e      	ldr	r0, [pc, #120]	; (80018fc <en_measurements_and_responses+0x14c>)
 8001882:	f7ff faaf 	bl	8000de4 <Lcd_clear>
		  Lcd_cursor(&lcd, 0,0);
 8001886:	2200      	movs	r2, #0
 8001888:	2100      	movs	r1, #0
 800188a:	481c      	ldr	r0, [pc, #112]	; (80018fc <en_measurements_and_responses+0x14c>)
 800188c:	f7ff fa90 	bl	8000db0 <Lcd_cursor>
		  Lcd_string(&lcd, "AMB:000C");
 8001890:	491b      	ldr	r1, [pc, #108]	; (8001900 <en_measurements_and_responses+0x150>)
 8001892:	481a      	ldr	r0, [pc, #104]	; (80018fc <en_measurements_and_responses+0x14c>)
 8001894:	f7ff fa6c 	bl	8000d70 <Lcd_string>
		  Lcd_cursor(&lcd, 0,9);
 8001898:	2209      	movs	r2, #9
 800189a:	2100      	movs	r1, #0
 800189c:	4817      	ldr	r0, [pc, #92]	; (80018fc <en_measurements_and_responses+0x14c>)
 800189e:	f7ff fa87 	bl	8000db0 <Lcd_cursor>
		  Lcd_string(&lcd, "SP:000C");
 80018a2:	4918      	ldr	r1, [pc, #96]	; (8001904 <en_measurements_and_responses+0x154>)
 80018a4:	4815      	ldr	r0, [pc, #84]	; (80018fc <en_measurements_and_responses+0x14c>)
 80018a6:	f7ff fa63 	bl	8000d70 <Lcd_string>
		  Lcd_cursor(&lcd, 1,0);
 80018aa:	2200      	movs	r2, #0
 80018ac:	2101      	movs	r1, #1
 80018ae:	4813      	ldr	r0, [pc, #76]	; (80018fc <en_measurements_and_responses+0x14c>)
 80018b0:	f7ff fa7e 	bl	8000db0 <Lcd_cursor>
		  Lcd_string(&lcd, "LUX:00000");
 80018b4:	4914      	ldr	r1, [pc, #80]	; (8001908 <en_measurements_and_responses+0x158>)
 80018b6:	4811      	ldr	r0, [pc, #68]	; (80018fc <en_measurements_and_responses+0x14c>)
 80018b8:	f7ff fa5a 	bl	8000d70 <Lcd_string>
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	200001c7 	.word	0x200001c7
 80018c8:	20000212 	.word	0x20000212
 80018cc:	200001d0 	.word	0x200001d0
 80018d0:	20000190 	.word	0x20000190
 80018d4:	20000194 	.word	0x20000194
 80018d8:	200001a2 	.word	0x200001a2
 80018dc:	200001a4 	.word	0x200001a4
 80018e0:	20000198 	.word	0x20000198
 80018e4:	2000020a 	.word	0x2000020a
 80018e8:	2000020c 	.word	0x2000020c
 80018ec:	20000011 	.word	0x20000011
 80018f0:	40020400 	.word	0x40020400
 80018f4:	200001d4 	.word	0x200001d4
 80018f8:	20000134 	.word	0x20000134
 80018fc:	200001e8 	.word	0x200001e8
 8001900:	08005db4 	.word	0x08005db4
 8001904:	08005dc0 	.word	0x08005dc0
 8001908:	08005dc8 	.word	0x08005dc8

0800190c <get_pv_panel_adc1_input>:

/**
 * This function retrieves the ADC panel voltage,
 * across adc input 1
 */
uint16_t get_pv_panel_adc1_input(){
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
	ADC_Select_CH15() ;
 8001910:	f7ff fef8 	bl	8001704 <ADC_Select_CH15>
	HAL_ADC_Start(&hadc1);
 8001914:	480a      	ldr	r0, [pc, #40]	; (8001940 <get_pv_panel_adc1_input+0x34>)
 8001916:	f000 ff49 	bl	80027ac <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) ;
 800191a:	f04f 31ff 	mov.w	r1, #4294967295
 800191e:	4808      	ldr	r0, [pc, #32]	; (8001940 <get_pv_panel_adc1_input+0x34>)
 8001920:	f001 f82b 	bl	800297a <HAL_ADC_PollForConversion>
	g_v1_pv = HAL_ADC_GetValue(&hadc1) ;
 8001924:	4806      	ldr	r0, [pc, #24]	; (8001940 <get_pv_panel_adc1_input+0x34>)
 8001926:	f001 f8b3 	bl	8002a90 <HAL_ADC_GetValue>
 800192a:	4603      	mov	r3, r0
 800192c:	4a05      	ldr	r2, [pc, #20]	; (8001944 <get_pv_panel_adc1_input+0x38>)
 800192e:	6013      	str	r3, [r2, #0]
	HAL_ADC_Stop(&hadc1);
 8001930:	4803      	ldr	r0, [pc, #12]	; (8001940 <get_pv_panel_adc1_input+0x34>)
 8001932:	f000 ffef 	bl	8002914 <HAL_ADC_Stop>

	return g_v1_pv ;
 8001936:	4b03      	ldr	r3, [pc, #12]	; (8001944 <get_pv_panel_adc1_input+0x38>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	b29b      	uxth	r3, r3
}
 800193c:	4618      	mov	r0, r3
 800193e:	bd80      	pop	{r7, pc}
 8001940:	2000005c 	.word	0x2000005c
 8001944:	200001a8 	.word	0x200001a8

08001948 <get_pv_panel_adc2_input>:

/**
 * This function returns the adc panel voltage, across adc input
 * 2
 */
uint16_t get_pv_panel_adc2_input(){
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
	ADC_Select_CH9() ;
 800194c:	f7ff febc 	bl	80016c8 <ADC_Select_CH9>
	HAL_ADC_Start(&hadc1);
 8001950:	480a      	ldr	r0, [pc, #40]	; (800197c <get_pv_panel_adc2_input+0x34>)
 8001952:	f000 ff2b 	bl	80027ac <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) ;
 8001956:	f04f 31ff 	mov.w	r1, #4294967295
 800195a:	4808      	ldr	r0, [pc, #32]	; (800197c <get_pv_panel_adc2_input+0x34>)
 800195c:	f001 f80d 	bl	800297a <HAL_ADC_PollForConversion>
	g_v2_pv = HAL_ADC_GetValue(&hadc1) ;
 8001960:	4806      	ldr	r0, [pc, #24]	; (800197c <get_pv_panel_adc2_input+0x34>)
 8001962:	f001 f895 	bl	8002a90 <HAL_ADC_GetValue>
 8001966:	4603      	mov	r3, r0
 8001968:	4a05      	ldr	r2, [pc, #20]	; (8001980 <get_pv_panel_adc2_input+0x38>)
 800196a:	6013      	str	r3, [r2, #0]
	HAL_ADC_Stop(&hadc1);
 800196c:	4803      	ldr	r0, [pc, #12]	; (800197c <get_pv_panel_adc2_input+0x34>)
 800196e:	f000 ffd1 	bl	8002914 <HAL_ADC_Stop>

	return g_v2_pv ;
 8001972:	4b03      	ldr	r3, [pc, #12]	; (8001980 <get_pv_panel_adc2_input+0x38>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	b29b      	uxth	r3, r3

}
 8001978:	4618      	mov	r0, r3
 800197a:	bd80      	pop	{r7, pc}
 800197c:	2000005c 	.word	0x2000005c
 8001980:	200001ac 	.word	0x200001ac

08001984 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001984:	b5b0      	push	{r4, r5, r7, lr}
 8001986:	b08a      	sub	sp, #40	; 0x28
 8001988:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800198a:	f000 fe35 	bl	80025f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800198e:	f000 f897 	bl	8001ac0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001992:	f000 fa23 	bl	8001ddc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001996:	f000 f9f5 	bl	8001d84 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800199a:	f000 f8fb 	bl	8001b94 <MX_ADC1_Init>
  MX_TIM2_Init();
 800199e:	f000 f933 	bl	8001c08 <MX_TIM2_Init>
  MX_TIM3_Init();
 80019a2:	f000 f9a1 	bl	8001ce8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(150);
 80019a6:	2096      	movs	r0, #150	; 0x96
 80019a8:	f000 fe98 	bl	80026dc <HAL_Delay>
  HAL_UART_Transmit_IT(&huart2, (uint8_t*)studentNum, 13) ;
 80019ac:	220d      	movs	r2, #13
 80019ae:	4935      	ldr	r1, [pc, #212]	; (8001a84 <main+0x100>)
 80019b0:	4835      	ldr	r0, [pc, #212]	; (8001a88 <main+0x104>)
 80019b2:	f003 fa42 	bl	8004e3a <HAL_UART_Transmit_IT>

  HAL_UART_Receive_IT(&huart2, (uint8_t*)char_rcvd, 1) ;
 80019b6:	2201      	movs	r2, #1
 80019b8:	4934      	ldr	r1, [pc, #208]	; (8001a8c <main+0x108>)
 80019ba:	4833      	ldr	r0, [pc, #204]	; (8001a88 <main+0x104>)
 80019bc:	f003 fa82 	bl	8004ec4 <HAL_UART_Receive_IT>

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1)  ; // input to trigger interrupt - LMT01 sensor
 80019c0:	2100      	movs	r1, #0
 80019c2:	4833      	ldr	r0, [pc, #204]	; (8001a90 <main+0x10c>)
 80019c4:	f002 fb5e 	bl	8004084 <HAL_TIM_IC_Start_IT>

  g_time_passed = HAL_GetTick() ; //snapshot of time
 80019c8:	f000 fe7c 	bl	80026c4 <HAL_GetTick>
 80019cc:	4603      	mov	r3, r0
 80019ce:	4a31      	ldr	r2, [pc, #196]	; (8001a94 <main+0x110>)
 80019d0:	6013      	str	r3, [r2, #0]

  //Write to LCD
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET) ;
 80019d2:	2200      	movs	r2, #0
 80019d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019d8:	482f      	ldr	r0, [pc, #188]	; (8001a98 <main+0x114>)
 80019da:	f001 fdd5 	bl	8003588 <HAL_GPIO_WritePin>
//  Lcd_PortType ports[] = { GPIOB, GPIOA, GPIOA, GPIOC };
//  Lcd_PinType pins[] = {GPIO_PIN_12, GPIO_PIN_11, GPIO_PIN_12, GPIO_PIN_6};
//  Lcd_HandleTypeDef lcd;
  // Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
  lcd = Lcd_create(ports, pins, GPIOB, GPIO_PIN_14, GPIOB, GPIO_PIN_2, LCD_4_BIT_MODE);
 80019de:	4c2f      	ldr	r4, [pc, #188]	; (8001a9c <main+0x118>)
 80019e0:	4638      	mov	r0, r7
 80019e2:	2300      	movs	r3, #0
 80019e4:	9303      	str	r3, [sp, #12]
 80019e6:	2304      	movs	r3, #4
 80019e8:	9302      	str	r3, [sp, #8]
 80019ea:	4b2b      	ldr	r3, [pc, #172]	; (8001a98 <main+0x114>)
 80019ec:	9301      	str	r3, [sp, #4]
 80019ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	4b28      	ldr	r3, [pc, #160]	; (8001a98 <main+0x114>)
 80019f6:	4a2a      	ldr	r2, [pc, #168]	; (8001aa0 <main+0x11c>)
 80019f8:	492a      	ldr	r1, [pc, #168]	; (8001aa4 <main+0x120>)
 80019fa:	f7ff f965 	bl	8000cc8 <Lcd_create>
 80019fe:	4625      	mov	r5, r4
 8001a00:	463c      	mov	r4, r7
 8001a02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a06:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a0a:	e885 0003 	stmia.w	r5, {r0, r1}
  Lcd_cursor(&lcd, 0,3);
 8001a0e:	2203      	movs	r2, #3
 8001a10:	2100      	movs	r1, #0
 8001a12:	4822      	ldr	r0, [pc, #136]	; (8001a9c <main+0x118>)
 8001a14:	f7ff f9cc 	bl	8000db0 <Lcd_cursor>
  Lcd_string(&lcd, "Too SAUCY!");
 8001a18:	4923      	ldr	r1, [pc, #140]	; (8001aa8 <main+0x124>)
 8001a1a:	4820      	ldr	r0, [pc, #128]	; (8001a9c <main+0x118>)
 8001a1c:	f7ff f9a8 	bl	8000d70 <Lcd_string>
  Lcd_clear(&lcd);
 8001a20:	481e      	ldr	r0, [pc, #120]	; (8001a9c <main+0x118>)
 8001a22:	f7ff f9df 	bl	8000de4 <Lcd_clear>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  system_state_update() ;
 8001a26:	f7ff fb83 	bl	8001130 <system_state_update>

	  //UR3: Evironment measure: measure Ta & measure Tb  (Put in Function)/Modularize
	  en_measurements_and_responses() ;
 8001a2a:	f7ff fec1 	bl	80017b0 <en_measurements_and_responses>

	  //UR2: PV Module -(Put in Function)/Modularize
	  if(g_SP_measure == 1){
 8001a2e:	4b1f      	ldr	r3, [pc, #124]	; (8001aac <main+0x128>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d11c      	bne.n	8001a70 <main+0xec>
		  // ignore top button press and EN command while measuring
		  if(g_top_button_pressed ==1 || g_EN_config_command_rcvd ==1){
 8001a36:	4b1e      	ldr	r3, [pc, #120]	; (8001ab0 <main+0x12c>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d003      	beq.n	8001a46 <main+0xc2>
 8001a3e:	4b1d      	ldr	r3, [pc, #116]	; (8001ab4 <main+0x130>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d105      	bne.n	8001a52 <main+0xce>
			  g_top_button_pressed = 0 ;
 8001a46:	4b1a      	ldr	r3, [pc, #104]	; (8001ab0 <main+0x12c>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	701a      	strb	r2, [r3, #0]
			  g_EN_config_command_rcvd = 0;
 8001a4c:	4b19      	ldr	r3, [pc, #100]	; (8001ab4 <main+0x130>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	701a      	strb	r2, [r3, #0]
		  }

		  //PV panel data points measure
		  g_PV_vol1= get_pv_panel_adc1_input() ;
 8001a52:	f7ff ff5b 	bl	800190c <get_pv_panel_adc1_input>
 8001a56:	4603      	mov	r3, r0
 8001a58:	461a      	mov	r2, r3
 8001a5a:	4b17      	ldr	r3, [pc, #92]	; (8001ab8 <main+0x134>)
 8001a5c:	801a      	strh	r2, [r3, #0]
		  g_PV_vol2 = get_pv_panel_adc2_input() ;
 8001a5e:	f7ff ff73 	bl	8001948 <get_pv_panel_adc2_input>
 8001a62:	4603      	mov	r3, r0
 8001a64:	461a      	mov	r2, r3
 8001a66:	4b15      	ldr	r3, [pc, #84]	; (8001abc <main+0x138>)
 8001a68:	801a      	strh	r2, [r3, #0]

		  //Flash D2 LED
		  flash_led_d2() ;
 8001a6a:	f7ff fd2b 	bl	80014c4 <flash_led_d2>
 8001a6e:	e7da      	b.n	8001a26 <main+0xa2>
	  }

	  else if(g_SP_measure == 2){
 8001a70:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <main+0x128>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d1d6      	bne.n	8001a26 <main+0xa2>
		  //set LED D2
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET) ;
 8001a78:	2201      	movs	r2, #1
 8001a7a:	2110      	movs	r1, #16
 8001a7c:	4806      	ldr	r0, [pc, #24]	; (8001a98 <main+0x114>)
 8001a7e:	f001 fd83 	bl	8003588 <HAL_GPIO_WritePin>
	  system_state_update() ;
 8001a82:	e7d0      	b.n	8001a26 <main+0xa2>
 8001a84:	20000000 	.word	0x20000000
 8001a88:	20000134 	.word	0x20000134
 8001a8c:	20000010 	.word	0x20000010
 8001a90:	200000a4 	.word	0x200000a4
 8001a94:	200001c8 	.word	0x200001c8
 8001a98:	40020400 	.word	0x40020400
 8001a9c:	200001e8 	.word	0x200001e8
 8001aa0:	20000024 	.word	0x20000024
 8001aa4:	20000014 	.word	0x20000014
 8001aa8:	08005dd4 	.word	0x08005dd4
 8001aac:	200001ce 	.word	0x200001ce
 8001ab0:	20000211 	.word	0x20000211
 8001ab4:	200001cd 	.word	0x200001cd
 8001ab8:	200001b0 	.word	0x200001b0
 8001abc:	200001b2 	.word	0x200001b2

08001ac0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b094      	sub	sp, #80	; 0x50
 8001ac4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ac6:	f107 0320 	add.w	r3, r7, #32
 8001aca:	2230      	movs	r2, #48	; 0x30
 8001acc:	2100      	movs	r1, #0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f004 f946 	bl	8005d60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ad4:	f107 030c 	add.w	r3, r7, #12
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
 8001ae2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60bb      	str	r3, [r7, #8]
 8001ae8:	4b28      	ldr	r3, [pc, #160]	; (8001b8c <SystemClock_Config+0xcc>)
 8001aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aec:	4a27      	ldr	r2, [pc, #156]	; (8001b8c <SystemClock_Config+0xcc>)
 8001aee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af2:	6413      	str	r3, [r2, #64]	; 0x40
 8001af4:	4b25      	ldr	r3, [pc, #148]	; (8001b8c <SystemClock_Config+0xcc>)
 8001af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afc:	60bb      	str	r3, [r7, #8]
 8001afe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b00:	2300      	movs	r3, #0
 8001b02:	607b      	str	r3, [r7, #4]
 8001b04:	4b22      	ldr	r3, [pc, #136]	; (8001b90 <SystemClock_Config+0xd0>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a21      	ldr	r2, [pc, #132]	; (8001b90 <SystemClock_Config+0xd0>)
 8001b0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b0e:	6013      	str	r3, [r2, #0]
 8001b10:	4b1f      	ldr	r3, [pc, #124]	; (8001b90 <SystemClock_Config+0xd0>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b18:	607b      	str	r3, [r7, #4]
 8001b1a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b20:	2301      	movs	r3, #1
 8001b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b24:	2310      	movs	r3, #16
 8001b26:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001b30:	2310      	movs	r3, #16
 8001b32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001b34:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001b38:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001b3a:	2304      	movs	r3, #4
 8001b3c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b3e:	2304      	movs	r3, #4
 8001b40:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b42:	f107 0320 	add.w	r3, r7, #32
 8001b46:	4618      	mov	r0, r3
 8001b48:	f001 fd5c 	bl	8003604 <HAL_RCC_OscConfig>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001b52:	f000 f9fb 	bl	8001f4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b56:	230f      	movs	r3, #15
 8001b58:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b66:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b6c:	f107 030c 	add.w	r3, r7, #12
 8001b70:	2102      	movs	r1, #2
 8001b72:	4618      	mov	r0, r3
 8001b74:	f001 ffbe 	bl	8003af4 <HAL_RCC_ClockConfig>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001b7e:	f000 f9e5 	bl	8001f4c <Error_Handler>
  }
}
 8001b82:	bf00      	nop
 8001b84:	3750      	adds	r7, #80	; 0x50
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	40007000 	.word	0x40007000

08001b94 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001b98:	4b18      	ldr	r3, [pc, #96]	; (8001bfc <MX_ADC1_Init+0x68>)
 8001b9a:	4a19      	ldr	r2, [pc, #100]	; (8001c00 <MX_ADC1_Init+0x6c>)
 8001b9c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b9e:	4b17      	ldr	r3, [pc, #92]	; (8001bfc <MX_ADC1_Init+0x68>)
 8001ba0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ba4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ba6:	4b15      	ldr	r3, [pc, #84]	; (8001bfc <MX_ADC1_Init+0x68>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001bac:	4b13      	ldr	r3, [pc, #76]	; (8001bfc <MX_ADC1_Init+0x68>)
 8001bae:	2201      	movs	r2, #1
 8001bb0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001bb2:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <MX_ADC1_Init+0x68>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001bb8:	4b10      	ldr	r3, [pc, #64]	; (8001bfc <MX_ADC1_Init+0x68>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001bc0:	4b0e      	ldr	r3, [pc, #56]	; (8001bfc <MX_ADC1_Init+0x68>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bc6:	4b0d      	ldr	r3, [pc, #52]	; (8001bfc <MX_ADC1_Init+0x68>)
 8001bc8:	4a0e      	ldr	r2, [pc, #56]	; (8001c04 <MX_ADC1_Init+0x70>)
 8001bca:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bcc:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <MX_ADC1_Init+0x68>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001bd2:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <MX_ADC1_Init+0x68>)
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001bd8:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <MX_ADC1_Init+0x68>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001be0:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <MX_ADC1_Init+0x68>)
 8001be2:	2201      	movs	r2, #1
 8001be4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001be6:	4805      	ldr	r0, [pc, #20]	; (8001bfc <MX_ADC1_Init+0x68>)
 8001be8:	f000 fd9c 	bl	8002724 <HAL_ADC_Init>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_ADC1_Init+0x62>
  {
    Error_Handler();
 8001bf2:	f000 f9ab 	bl	8001f4c <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	2000005c 	.word	0x2000005c
 8001c00:	40012000 	.word	0x40012000
 8001c04:	0f000001 	.word	0x0f000001

08001c08 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08a      	sub	sp, #40	; 0x28
 8001c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c0e:	f107 0318 	add.w	r3, r7, #24
 8001c12:	2200      	movs	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	605a      	str	r2, [r3, #4]
 8001c18:	609a      	str	r2, [r3, #8]
 8001c1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c1c:	f107 0310 	add.w	r3, r7, #16
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001c26:	463b      	mov	r3, r7
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c32:	4b2c      	ldr	r3, [pc, #176]	; (8001ce4 <MX_TIM2_Init+0xdc>)
 8001c34:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c38:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001c3a:	4b2a      	ldr	r3, [pc, #168]	; (8001ce4 <MX_TIM2_Init+0xdc>)
 8001c3c:	2253      	movs	r2, #83	; 0x53
 8001c3e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c40:	4b28      	ldr	r3, [pc, #160]	; (8001ce4 <MX_TIM2_Init+0xdc>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001c46:	4b27      	ldr	r3, [pc, #156]	; (8001ce4 <MX_TIM2_Init+0xdc>)
 8001c48:	f04f 32ff 	mov.w	r2, #4294967295
 8001c4c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c4e:	4b25      	ldr	r3, [pc, #148]	; (8001ce4 <MX_TIM2_Init+0xdc>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c54:	4b23      	ldr	r3, [pc, #140]	; (8001ce4 <MX_TIM2_Init+0xdc>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c5a:	4822      	ldr	r0, [pc, #136]	; (8001ce4 <MX_TIM2_Init+0xdc>)
 8001c5c:	f002 f96a 	bl	8003f34 <HAL_TIM_Base_Init>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001c66:	f000 f971 	bl	8001f4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c6e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c70:	f107 0318 	add.w	r3, r7, #24
 8001c74:	4619      	mov	r1, r3
 8001c76:	481b      	ldr	r0, [pc, #108]	; (8001ce4 <MX_TIM2_Init+0xdc>)
 8001c78:	f002 fcc2 	bl	8004600 <HAL_TIM_ConfigClockSource>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001c82:	f000 f963 	bl	8001f4c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001c86:	4817      	ldr	r0, [pc, #92]	; (8001ce4 <MX_TIM2_Init+0xdc>)
 8001c88:	f002 f9a3 	bl	8003fd2 <HAL_TIM_IC_Init>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001c92:	f000 f95b 	bl	8001f4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c96:	2300      	movs	r3, #0
 8001c98:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c9e:	f107 0310 	add.w	r3, r7, #16
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	480f      	ldr	r0, [pc, #60]	; (8001ce4 <MX_TIM2_Init+0xdc>)
 8001ca6:	f002 fff9 	bl	8004c9c <HAL_TIMEx_MasterConfigSynchronization>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001cb0:	f000 f94c 	bl	8001f4c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001cc4:	463b      	mov	r3, r7
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4806      	ldr	r0, [pc, #24]	; (8001ce4 <MX_TIM2_Init+0xdc>)
 8001ccc:	f002 fbfc 	bl	80044c8 <HAL_TIM_IC_ConfigChannel>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001cd6:	f000 f939 	bl	8001f4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001cda:	bf00      	nop
 8001cdc:	3728      	adds	r7, #40	; 0x28
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	200000a4 	.word	0x200000a4

08001ce8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cee:	f107 0308 	add.w	r3, r7, #8
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	605a      	str	r2, [r3, #4]
 8001cf8:	609a      	str	r2, [r3, #8]
 8001cfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cfc:	463b      	mov	r3, r7
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d04:	4b1d      	ldr	r3, [pc, #116]	; (8001d7c <MX_TIM3_Init+0x94>)
 8001d06:	4a1e      	ldr	r2, [pc, #120]	; (8001d80 <MX_TIM3_Init+0x98>)
 8001d08:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001d0a:	4b1c      	ldr	r3, [pc, #112]	; (8001d7c <MX_TIM3_Init+0x94>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d10:	4b1a      	ldr	r3, [pc, #104]	; (8001d7c <MX_TIM3_Init+0x94>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001d16:	4b19      	ldr	r3, [pc, #100]	; (8001d7c <MX_TIM3_Init+0x94>)
 8001d18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d1c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d1e:	4b17      	ldr	r3, [pc, #92]	; (8001d7c <MX_TIM3_Init+0x94>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d24:	4b15      	ldr	r3, [pc, #84]	; (8001d7c <MX_TIM3_Init+0x94>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d2a:	4814      	ldr	r0, [pc, #80]	; (8001d7c <MX_TIM3_Init+0x94>)
 8001d2c:	f002 f902 	bl	8003f34 <HAL_TIM_Base_Init>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001d36:	f000 f909 	bl	8001f4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d3e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d40:	f107 0308 	add.w	r3, r7, #8
 8001d44:	4619      	mov	r1, r3
 8001d46:	480d      	ldr	r0, [pc, #52]	; (8001d7c <MX_TIM3_Init+0x94>)
 8001d48:	f002 fc5a 	bl	8004600 <HAL_TIM_ConfigClockSource>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001d52:	f000 f8fb 	bl	8001f4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d56:	2300      	movs	r3, #0
 8001d58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d5e:	463b      	mov	r3, r7
 8001d60:	4619      	mov	r1, r3
 8001d62:	4806      	ldr	r0, [pc, #24]	; (8001d7c <MX_TIM3_Init+0x94>)
 8001d64:	f002 ff9a 	bl	8004c9c <HAL_TIMEx_MasterConfigSynchronization>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001d6e:	f000 f8ed 	bl	8001f4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d72:	bf00      	nop
 8001d74:	3718      	adds	r7, #24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	200000ec 	.word	0x200000ec
 8001d80:	40000400 	.word	0x40000400

08001d84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d88:	4b12      	ldr	r3, [pc, #72]	; (8001dd4 <MX_USART2_UART_Init+0x50>)
 8001d8a:	4a13      	ldr	r2, [pc, #76]	; (8001dd8 <MX_USART2_UART_Init+0x54>)
 8001d8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d8e:	4b11      	ldr	r3, [pc, #68]	; (8001dd4 <MX_USART2_UART_Init+0x50>)
 8001d90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001d96:	4b0f      	ldr	r3, [pc, #60]	; (8001dd4 <MX_USART2_UART_Init+0x50>)
 8001d98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d9c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d9e:	4b0d      	ldr	r3, [pc, #52]	; (8001dd4 <MX_USART2_UART_Init+0x50>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_ODD;
 8001da4:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <MX_USART2_UART_Init+0x50>)
 8001da6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001daa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001dac:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <MX_USART2_UART_Init+0x50>)
 8001dae:	220c      	movs	r2, #12
 8001db0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001db2:	4b08      	ldr	r3, [pc, #32]	; (8001dd4 <MX_USART2_UART_Init+0x50>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001db8:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <MX_USART2_UART_Init+0x50>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001dbe:	4805      	ldr	r0, [pc, #20]	; (8001dd4 <MX_USART2_UART_Init+0x50>)
 8001dc0:	f002 ffee 	bl	8004da0 <HAL_UART_Init>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8001dca:	f000 f8bf 	bl	8001f4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20000134 	.word	0x20000134
 8001dd8:	40004400 	.word	0x40004400

08001ddc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08a      	sub	sp, #40	; 0x28
 8001de0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de2:	f107 0314 	add.w	r3, r7, #20
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	605a      	str	r2, [r3, #4]
 8001dec:	609a      	str	r2, [r3, #8]
 8001dee:	60da      	str	r2, [r3, #12]
 8001df0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	613b      	str	r3, [r7, #16]
 8001df6:	4b51      	ldr	r3, [pc, #324]	; (8001f3c <MX_GPIO_Init+0x160>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	4a50      	ldr	r2, [pc, #320]	; (8001f3c <MX_GPIO_Init+0x160>)
 8001dfc:	f043 0304 	orr.w	r3, r3, #4
 8001e00:	6313      	str	r3, [r2, #48]	; 0x30
 8001e02:	4b4e      	ldr	r3, [pc, #312]	; (8001f3c <MX_GPIO_Init+0x160>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	f003 0304 	and.w	r3, r3, #4
 8001e0a:	613b      	str	r3, [r7, #16]
 8001e0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	4b4a      	ldr	r3, [pc, #296]	; (8001f3c <MX_GPIO_Init+0x160>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	4a49      	ldr	r2, [pc, #292]	; (8001f3c <MX_GPIO_Init+0x160>)
 8001e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1e:	4b47      	ldr	r3, [pc, #284]	; (8001f3c <MX_GPIO_Init+0x160>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60bb      	str	r3, [r7, #8]
 8001e2e:	4b43      	ldr	r3, [pc, #268]	; (8001f3c <MX_GPIO_Init+0x160>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	4a42      	ldr	r2, [pc, #264]	; (8001f3c <MX_GPIO_Init+0x160>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3a:	4b40      	ldr	r3, [pc, #256]	; (8001f3c <MX_GPIO_Init+0x160>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	60bb      	str	r3, [r7, #8]
 8001e44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	607b      	str	r3, [r7, #4]
 8001e4a:	4b3c      	ldr	r3, [pc, #240]	; (8001f3c <MX_GPIO_Init+0x160>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	4a3b      	ldr	r2, [pc, #236]	; (8001f3c <MX_GPIO_Init+0x160>)
 8001e50:	f043 0302 	orr.w	r3, r3, #2
 8001e54:	6313      	str	r3, [r2, #48]	; 0x30
 8001e56:	4b39      	ldr	r3, [pc, #228]	; (8001f3c <MX_GPIO_Init+0x160>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	607b      	str	r3, [r7, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED_D5_Pin|DB5_Line_Pin|DB6_Line_Pin, GPIO_PIN_RESET);
 8001e62:	2200      	movs	r2, #0
 8001e64:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8001e68:	4835      	ldr	r0, [pc, #212]	; (8001f40 <MX_GPIO_Init+0x164>)
 8001e6a:	f001 fb8d 	bl	8003588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, E_Line_Pin|LED_D4_Pin|DB4_Line_Pin|RS_Line_Pin
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f24d 4134 	movw	r1, #54324	; 0xd434
 8001e74:	4833      	ldr	r0, [pc, #204]	; (8001f44 <MX_GPIO_Init+0x168>)
 8001e76:	f001 fb87 	bl	8003588 <HAL_GPIO_WritePin>
                          |R_W_Line_Pin|LED_D2_Pin|LED_D3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DB7_Line_GPIO_Port, DB7_Line_Pin, GPIO_PIN_RESET);
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	2140      	movs	r1, #64	; 0x40
 8001e7e:	4832      	ldr	r0, [pc, #200]	; (8001f48 <MX_GPIO_Init+0x16c>)
 8001e80:	f001 fb82 	bl	8003588 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD2_Pin LED_D5_Pin DB5_Line_Pin DB6_Line_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED_D5_Pin|DB5_Line_Pin|DB6_Line_Pin;
 8001e84:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 8001e88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e92:	2300      	movs	r3, #0
 8001e94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e96:	f107 0314 	add.w	r3, r7, #20
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4828      	ldr	r0, [pc, #160]	; (8001f40 <MX_GPIO_Init+0x164>)
 8001e9e:	f001 f9d7 	bl	8003250 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ea2:	23c0      	movs	r3, #192	; 0xc0
 8001ea4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001ea6:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001eaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eac:	2301      	movs	r3, #1
 8001eae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb0:	f107 0314 	add.w	r3, r7, #20
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4822      	ldr	r0, [pc, #136]	; (8001f40 <MX_GPIO_Init+0x164>)
 8001eb8:	f001 f9ca 	bl	8003250 <HAL_GPIO_Init>

  /*Configure GPIO pins : E_Line_Pin LED_D4_Pin DB4_Line_Pin RS_Line_Pin
                           R_W_Line_Pin LED_D2_Pin LED_D3_Pin */
  GPIO_InitStruct.Pin = E_Line_Pin|LED_D4_Pin|DB4_Line_Pin|RS_Line_Pin
 8001ebc:	f24d 4334 	movw	r3, #54324	; 0xd434
 8001ec0:	617b      	str	r3, [r7, #20]
                          |R_W_Line_Pin|LED_D2_Pin|LED_D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ece:	f107 0314 	add.w	r3, r7, #20
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	481b      	ldr	r0, [pc, #108]	; (8001f44 <MX_GPIO_Init+0x168>)
 8001ed6:	f001 f9bb 	bl	8003250 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_8|GPIO_PIN_9;
 8001eda:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8001ede:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001ee0:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001ee4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eea:	f107 0314 	add.w	r3, r7, #20
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4814      	ldr	r0, [pc, #80]	; (8001f44 <MX_GPIO_Init+0x168>)
 8001ef2:	f001 f9ad 	bl	8003250 <HAL_GPIO_Init>

  /*Configure GPIO pin : DB7_Line_Pin */
  GPIO_InitStruct.Pin = DB7_Line_Pin;
 8001ef6:	2340      	movs	r3, #64	; 0x40
 8001ef8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001efa:	2301      	movs	r3, #1
 8001efc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efe:	2300      	movs	r3, #0
 8001f00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f02:	2300      	movs	r3, #0
 8001f04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DB7_Line_GPIO_Port, &GPIO_InitStruct);
 8001f06:	f107 0314 	add.w	r3, r7, #20
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	480e      	ldr	r0, [pc, #56]	; (8001f48 <MX_GPIO_Init+0x16c>)
 8001f0e:	f001 f99f 	bl	8003250 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001f12:	2200      	movs	r2, #0
 8001f14:	2100      	movs	r1, #0
 8001f16:	2017      	movs	r0, #23
 8001f18:	f001 f8d1 	bl	80030be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001f1c:	2017      	movs	r0, #23
 8001f1e:	f001 f8ea 	bl	80030f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f22:	2200      	movs	r2, #0
 8001f24:	2100      	movs	r1, #0
 8001f26:	2028      	movs	r0, #40	; 0x28
 8001f28:	f001 f8c9 	bl	80030be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f2c:	2028      	movs	r0, #40	; 0x28
 8001f2e:	f001 f8e2 	bl	80030f6 <HAL_NVIC_EnableIRQ>

}
 8001f32:	bf00      	nop
 8001f34:	3728      	adds	r7, #40	; 0x28
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	40020000 	.word	0x40020000
 8001f44:	40020400 	.word	0x40020400
 8001f48:	40020800 	.word	0x40020800

08001f4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f50:	b672      	cpsid	i
}
 8001f52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f54:	e7fe      	b.n	8001f54 <Error_Handler+0x8>
	...

08001f58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	607b      	str	r3, [r7, #4]
 8001f62:	4b10      	ldr	r3, [pc, #64]	; (8001fa4 <HAL_MspInit+0x4c>)
 8001f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f66:	4a0f      	ldr	r2, [pc, #60]	; (8001fa4 <HAL_MspInit+0x4c>)
 8001f68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f6e:	4b0d      	ldr	r3, [pc, #52]	; (8001fa4 <HAL_MspInit+0x4c>)
 8001f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f76:	607b      	str	r3, [r7, #4]
 8001f78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	603b      	str	r3, [r7, #0]
 8001f7e:	4b09      	ldr	r3, [pc, #36]	; (8001fa4 <HAL_MspInit+0x4c>)
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	4a08      	ldr	r2, [pc, #32]	; (8001fa4 <HAL_MspInit+0x4c>)
 8001f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f88:	6413      	str	r3, [r2, #64]	; 0x40
 8001f8a:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <HAL_MspInit+0x4c>)
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f92:	603b      	str	r3, [r7, #0]
 8001f94:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f96:	2007      	movs	r0, #7
 8001f98:	f001 f886 	bl	80030a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f9c:	bf00      	nop
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40023800 	.word	0x40023800

08001fa8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08c      	sub	sp, #48	; 0x30
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb0:	f107 031c 	add.w	r3, r7, #28
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
 8001fbe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a31      	ldr	r2, [pc, #196]	; (800208c <HAL_ADC_MspInit+0xe4>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d15b      	bne.n	8002082 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61bb      	str	r3, [r7, #24]
 8001fce:	4b30      	ldr	r3, [pc, #192]	; (8002090 <HAL_ADC_MspInit+0xe8>)
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd2:	4a2f      	ldr	r2, [pc, #188]	; (8002090 <HAL_ADC_MspInit+0xe8>)
 8001fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fda:	4b2d      	ldr	r3, [pc, #180]	; (8002090 <HAL_ADC_MspInit+0xe8>)
 8001fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe2:	61bb      	str	r3, [r7, #24]
 8001fe4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	617b      	str	r3, [r7, #20]
 8001fea:	4b29      	ldr	r3, [pc, #164]	; (8002090 <HAL_ADC_MspInit+0xe8>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	4a28      	ldr	r2, [pc, #160]	; (8002090 <HAL_ADC_MspInit+0xe8>)
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff6:	4b26      	ldr	r3, [pc, #152]	; (8002090 <HAL_ADC_MspInit+0xe8>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	617b      	str	r3, [r7, #20]
 8002000:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	613b      	str	r3, [r7, #16]
 8002006:	4b22      	ldr	r3, [pc, #136]	; (8002090 <HAL_ADC_MspInit+0xe8>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	4a21      	ldr	r2, [pc, #132]	; (8002090 <HAL_ADC_MspInit+0xe8>)
 800200c:	f043 0304 	orr.w	r3, r3, #4
 8002010:	6313      	str	r3, [r2, #48]	; 0x30
 8002012:	4b1f      	ldr	r3, [pc, #124]	; (8002090 <HAL_ADC_MspInit+0xe8>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	f003 0304 	and.w	r3, r3, #4
 800201a:	613b      	str	r3, [r7, #16]
 800201c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	4b1b      	ldr	r3, [pc, #108]	; (8002090 <HAL_ADC_MspInit+0xe8>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	4a1a      	ldr	r2, [pc, #104]	; (8002090 <HAL_ADC_MspInit+0xe8>)
 8002028:	f043 0302 	orr.w	r3, r3, #2
 800202c:	6313      	str	r3, [r2, #48]	; 0x30
 800202e:	4b18      	ldr	r3, [pc, #96]	; (8002090 <HAL_ADC_MspInit+0xe8>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800203a:	2301      	movs	r3, #1
 800203c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800203e:	2303      	movs	r3, #3
 8002040:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002042:	2300      	movs	r3, #0
 8002044:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002046:	f107 031c 	add.w	r3, r7, #28
 800204a:	4619      	mov	r1, r3
 800204c:	4811      	ldr	r0, [pc, #68]	; (8002094 <HAL_ADC_MspInit+0xec>)
 800204e:	f001 f8ff 	bl	8003250 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002052:	2330      	movs	r3, #48	; 0x30
 8002054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002056:	2303      	movs	r3, #3
 8002058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	2300      	movs	r3, #0
 800205c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800205e:	f107 031c 	add.w	r3, r7, #28
 8002062:	4619      	mov	r1, r3
 8002064:	480c      	ldr	r0, [pc, #48]	; (8002098 <HAL_ADC_MspInit+0xf0>)
 8002066:	f001 f8f3 	bl	8003250 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800206a:	2302      	movs	r3, #2
 800206c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800206e:	2303      	movs	r3, #3
 8002070:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002072:	2300      	movs	r3, #0
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002076:	f107 031c 	add.w	r3, r7, #28
 800207a:	4619      	mov	r1, r3
 800207c:	4807      	ldr	r0, [pc, #28]	; (800209c <HAL_ADC_MspInit+0xf4>)
 800207e:	f001 f8e7 	bl	8003250 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002082:	bf00      	nop
 8002084:	3730      	adds	r7, #48	; 0x30
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40012000 	.word	0x40012000
 8002090:	40023800 	.word	0x40023800
 8002094:	40020000 	.word	0x40020000
 8002098:	40020800 	.word	0x40020800
 800209c:	40020400 	.word	0x40020400

080020a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b08a      	sub	sp, #40	; 0x28
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a8:	f107 0314 	add.w	r3, r7, #20
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	605a      	str	r2, [r3, #4]
 80020b2:	609a      	str	r2, [r3, #8]
 80020b4:	60da      	str	r2, [r3, #12]
 80020b6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020c0:	d135      	bne.n	800212e <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	613b      	str	r3, [r7, #16]
 80020c6:	4b25      	ldr	r3, [pc, #148]	; (800215c <HAL_TIM_Base_MspInit+0xbc>)
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	4a24      	ldr	r2, [pc, #144]	; (800215c <HAL_TIM_Base_MspInit+0xbc>)
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	6413      	str	r3, [r2, #64]	; 0x40
 80020d2:	4b22      	ldr	r3, [pc, #136]	; (800215c <HAL_TIM_Base_MspInit+0xbc>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	613b      	str	r3, [r7, #16]
 80020dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	4b1e      	ldr	r3, [pc, #120]	; (800215c <HAL_TIM_Base_MspInit+0xbc>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	4a1d      	ldr	r2, [pc, #116]	; (800215c <HAL_TIM_Base_MspInit+0xbc>)
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	6313      	str	r3, [r2, #48]	; 0x30
 80020ee:	4b1b      	ldr	r3, [pc, #108]	; (800215c <HAL_TIM_Base_MspInit+0xbc>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80020fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002100:	2302      	movs	r3, #2
 8002102:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002104:	2300      	movs	r3, #0
 8002106:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002108:	2300      	movs	r3, #0
 800210a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800210c:	2301      	movs	r3, #1
 800210e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002110:	f107 0314 	add.w	r3, r7, #20
 8002114:	4619      	mov	r1, r3
 8002116:	4812      	ldr	r0, [pc, #72]	; (8002160 <HAL_TIM_Base_MspInit+0xc0>)
 8002118:	f001 f89a 	bl	8003250 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800211c:	2200      	movs	r2, #0
 800211e:	2100      	movs	r1, #0
 8002120:	201c      	movs	r0, #28
 8002122:	f000 ffcc 	bl	80030be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002126:	201c      	movs	r0, #28
 8002128:	f000 ffe5 	bl	80030f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800212c:	e012      	b.n	8002154 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM3)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a0c      	ldr	r2, [pc, #48]	; (8002164 <HAL_TIM_Base_MspInit+0xc4>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d10d      	bne.n	8002154 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002138:	2300      	movs	r3, #0
 800213a:	60bb      	str	r3, [r7, #8]
 800213c:	4b07      	ldr	r3, [pc, #28]	; (800215c <HAL_TIM_Base_MspInit+0xbc>)
 800213e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002140:	4a06      	ldr	r2, [pc, #24]	; (800215c <HAL_TIM_Base_MspInit+0xbc>)
 8002142:	f043 0302 	orr.w	r3, r3, #2
 8002146:	6413      	str	r3, [r2, #64]	; 0x40
 8002148:	4b04      	ldr	r3, [pc, #16]	; (800215c <HAL_TIM_Base_MspInit+0xbc>)
 800214a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	60bb      	str	r3, [r7, #8]
 8002152:	68bb      	ldr	r3, [r7, #8]
}
 8002154:	bf00      	nop
 8002156:	3728      	adds	r7, #40	; 0x28
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40023800 	.word	0x40023800
 8002160:	40020000 	.word	0x40020000
 8002164:	40000400 	.word	0x40000400

08002168 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b08a      	sub	sp, #40	; 0x28
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002170:	f107 0314 	add.w	r3, r7, #20
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	60da      	str	r2, [r3, #12]
 800217e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a1d      	ldr	r2, [pc, #116]	; (80021fc <HAL_UART_MspInit+0x94>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d133      	bne.n	80021f2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	613b      	str	r3, [r7, #16]
 800218e:	4b1c      	ldr	r3, [pc, #112]	; (8002200 <HAL_UART_MspInit+0x98>)
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	4a1b      	ldr	r2, [pc, #108]	; (8002200 <HAL_UART_MspInit+0x98>)
 8002194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002198:	6413      	str	r3, [r2, #64]	; 0x40
 800219a:	4b19      	ldr	r3, [pc, #100]	; (8002200 <HAL_UART_MspInit+0x98>)
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a2:	613b      	str	r3, [r7, #16]
 80021a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	60fb      	str	r3, [r7, #12]
 80021aa:	4b15      	ldr	r3, [pc, #84]	; (8002200 <HAL_UART_MspInit+0x98>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	4a14      	ldr	r2, [pc, #80]	; (8002200 <HAL_UART_MspInit+0x98>)
 80021b0:	f043 0301 	orr.w	r3, r3, #1
 80021b4:	6313      	str	r3, [r2, #48]	; 0x30
 80021b6:	4b12      	ldr	r3, [pc, #72]	; (8002200 <HAL_UART_MspInit+0x98>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80021c2:	230c      	movs	r3, #12
 80021c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c6:	2302      	movs	r3, #2
 80021c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ca:	2300      	movs	r3, #0
 80021cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ce:	2303      	movs	r3, #3
 80021d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021d2:	2307      	movs	r3, #7
 80021d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d6:	f107 0314 	add.w	r3, r7, #20
 80021da:	4619      	mov	r1, r3
 80021dc:	4809      	ldr	r0, [pc, #36]	; (8002204 <HAL_UART_MspInit+0x9c>)
 80021de:	f001 f837 	bl	8003250 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80021e2:	2200      	movs	r2, #0
 80021e4:	2100      	movs	r1, #0
 80021e6:	2026      	movs	r0, #38	; 0x26
 80021e8:	f000 ff69 	bl	80030be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80021ec:	2026      	movs	r0, #38	; 0x26
 80021ee:	f000 ff82 	bl	80030f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80021f2:	bf00      	nop
 80021f4:	3728      	adds	r7, #40	; 0x28
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	40004400 	.word	0x40004400
 8002200:	40023800 	.word	0x40023800
 8002204:	40020000 	.word	0x40020000

08002208 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800220c:	e7fe      	b.n	800220c <NMI_Handler+0x4>

0800220e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800220e:	b480      	push	{r7}
 8002210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002212:	e7fe      	b.n	8002212 <HardFault_Handler+0x4>

08002214 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002218:	e7fe      	b.n	8002218 <MemManage_Handler+0x4>

0800221a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800221a:	b480      	push	{r7}
 800221c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800221e:	e7fe      	b.n	800221e <BusFault_Handler+0x4>

08002220 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002224:	e7fe      	b.n	8002224 <UsageFault_Handler+0x4>

08002226 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002226:	b480      	push	{r7}
 8002228:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800222a:	bf00      	nop
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002238:	bf00      	nop
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002242:	b480      	push	{r7}
 8002244:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002254:	f000 fa22 	bl	800269c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002258:	bf00      	nop
 800225a:	bd80      	pop	{r7, pc}

0800225c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_8) != RESET){
 8002260:	4b8a      	ldr	r3, [pc, #552]	; (800248c <EXTI9_5_IRQHandler+0x230>)
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002268:	2b00      	cmp	r3, #0
 800226a:	d039      	beq.n	80022e0 <EXTI9_5_IRQHandler+0x84>


		if(HAL_GetTick() - ticks_pressed >= 20){
 800226c:	f000 fa2a 	bl	80026c4 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	4b87      	ldr	r3, [pc, #540]	; (8002490 <EXTI9_5_IRQHandler+0x234>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b13      	cmp	r3, #19
 800227a:	d92c      	bls.n	80022d6 <EXTI9_5_IRQHandler+0x7a>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == 0){
 800227c:	4b85      	ldr	r3, [pc, #532]	; (8002494 <EXTI9_5_IRQHandler+0x238>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b01      	cmp	r3, #1
 8002284:	d112      	bne.n	80022ac <EXTI9_5_IRQHandler+0x50>
 8002286:	f44f 7180 	mov.w	r1, #256	; 0x100
 800228a:	4883      	ldr	r0, [pc, #524]	; (8002498 <EXTI9_5_IRQHandler+0x23c>)
 800228c:	f001 f964 	bl	8003558 <HAL_GPIO_ReadPin>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d10a      	bne.n	80022ac <EXTI9_5_IRQHandler+0x50>
				button_state =0 ; // stable low reached
 8002296:	4b7f      	ldr	r3, [pc, #508]	; (8002494 <EXTI9_5_IRQHandler+0x238>)
 8002298:	2200      	movs	r2, #0
 800229a:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 800229c:	f000 fa12 	bl	80026c4 <HAL_GetTick>
 80022a0:	4603      	mov	r3, r0
 80022a2:	4a7b      	ldr	r2, [pc, #492]	; (8002490 <EXTI9_5_IRQHandler+0x234>)
 80022a4:	6013      	str	r3, [r2, #0]

				g_left_button_pressed =1;
 80022a6:	4b7d      	ldr	r3, [pc, #500]	; (800249c <EXTI9_5_IRQHandler+0x240>)
 80022a8:	2201      	movs	r2, #1
 80022aa:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOB ,GPIO_PIN_8) == 1 ){
 80022ac:	4b79      	ldr	r3, [pc, #484]	; (8002494 <EXTI9_5_IRQHandler+0x238>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d10f      	bne.n	80022d6 <EXTI9_5_IRQHandler+0x7a>
 80022b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022ba:	4877      	ldr	r0, [pc, #476]	; (8002498 <EXTI9_5_IRQHandler+0x23c>)
 80022bc:	f001 f94c 	bl	8003558 <HAL_GPIO_ReadPin>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d107      	bne.n	80022d6 <EXTI9_5_IRQHandler+0x7a>
				ticks_pressed = HAL_GetTick() ;
 80022c6:	f000 f9fd 	bl	80026c4 <HAL_GetTick>
 80022ca:	4603      	mov	r3, r0
 80022cc:	4a70      	ldr	r2, [pc, #448]	; (8002490 <EXTI9_5_IRQHandler+0x234>)
 80022ce:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 80022d0:	4b70      	ldr	r3, [pc, #448]	; (8002494 <EXTI9_5_IRQHandler+0x238>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	701a      	strb	r2, [r3, #0]

			}
		}
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8) ;
 80022d6:	4b6d      	ldr	r3, [pc, #436]	; (800248c <EXTI9_5_IRQHandler+0x230>)
 80022d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022dc:	615a      	str	r2, [r3, #20]
 80022de:	e0c5      	b.n	800246c <EXTI9_5_IRQHandler+0x210>
	}

	else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_9) != RESET){
 80022e0:	4b6a      	ldr	r3, [pc, #424]	; (800248c <EXTI9_5_IRQHandler+0x230>)
 80022e2:	695b      	ldr	r3, [r3, #20]
 80022e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d039      	beq.n	8002360 <EXTI9_5_IRQHandler+0x104>



		if(HAL_GetTick() - ticks_pressed >= 20){
 80022ec:	f000 f9ea 	bl	80026c4 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	4b67      	ldr	r3, [pc, #412]	; (8002490 <EXTI9_5_IRQHandler+0x234>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b13      	cmp	r3, #19
 80022fa:	d92c      	bls.n	8002356 <EXTI9_5_IRQHandler+0xfa>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0){
 80022fc:	4b65      	ldr	r3, [pc, #404]	; (8002494 <EXTI9_5_IRQHandler+0x238>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b01      	cmp	r3, #1
 8002304:	d112      	bne.n	800232c <EXTI9_5_IRQHandler+0xd0>
 8002306:	f44f 7100 	mov.w	r1, #512	; 0x200
 800230a:	4863      	ldr	r0, [pc, #396]	; (8002498 <EXTI9_5_IRQHandler+0x23c>)
 800230c:	f001 f924 	bl	8003558 <HAL_GPIO_ReadPin>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10a      	bne.n	800232c <EXTI9_5_IRQHandler+0xd0>
				button_state =0 ; // stable low reached
 8002316:	4b5f      	ldr	r3, [pc, #380]	; (8002494 <EXTI9_5_IRQHandler+0x238>)
 8002318:	2200      	movs	r2, #0
 800231a:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 800231c:	f000 f9d2 	bl	80026c4 <HAL_GetTick>
 8002320:	4603      	mov	r3, r0
 8002322:	4a5b      	ldr	r2, [pc, #364]	; (8002490 <EXTI9_5_IRQHandler+0x234>)
 8002324:	6013      	str	r3, [r2, #0]

				g_top_button_pressed = 1 ;
 8002326:	4b5e      	ldr	r3, [pc, #376]	; (80024a0 <EXTI9_5_IRQHandler+0x244>)
 8002328:	2201      	movs	r2, #1
 800232a:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOB ,GPIO_PIN_9) == 1 ){
 800232c:	4b59      	ldr	r3, [pc, #356]	; (8002494 <EXTI9_5_IRQHandler+0x238>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	d10f      	bne.n	8002356 <EXTI9_5_IRQHandler+0xfa>
 8002336:	f44f 7100 	mov.w	r1, #512	; 0x200
 800233a:	4857      	ldr	r0, [pc, #348]	; (8002498 <EXTI9_5_IRQHandler+0x23c>)
 800233c:	f001 f90c 	bl	8003558 <HAL_GPIO_ReadPin>
 8002340:	4603      	mov	r3, r0
 8002342:	2b01      	cmp	r3, #1
 8002344:	d107      	bne.n	8002356 <EXTI9_5_IRQHandler+0xfa>
				ticks_pressed = HAL_GetTick() ;
 8002346:	f000 f9bd 	bl	80026c4 <HAL_GetTick>
 800234a:	4603      	mov	r3, r0
 800234c:	4a50      	ldr	r2, [pc, #320]	; (8002490 <EXTI9_5_IRQHandler+0x234>)
 800234e:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 8002350:	4b50      	ldr	r3, [pc, #320]	; (8002494 <EXTI9_5_IRQHandler+0x238>)
 8002352:	2201      	movs	r2, #1
 8002354:	701a      	strb	r2, [r3, #0]

			}
		}

		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_9) ;
 8002356:	4b4d      	ldr	r3, [pc, #308]	; (800248c <EXTI9_5_IRQHandler+0x230>)
 8002358:	f44f 7200 	mov.w	r2, #512	; 0x200
 800235c:	615a      	str	r2, [r3, #20]
 800235e:	e085      	b.n	800246c <EXTI9_5_IRQHandler+0x210>

	}

	else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_6) != RESET){
 8002360:	4b4a      	ldr	r3, [pc, #296]	; (800248c <EXTI9_5_IRQHandler+0x230>)
 8002362:	695b      	ldr	r3, [r3, #20]
 8002364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002368:	2b00      	cmp	r3, #0
 800236a:	d036      	beq.n	80023da <EXTI9_5_IRQHandler+0x17e>



		if(HAL_GetTick() - ticks_pressed >= 20){
 800236c:	f000 f9aa 	bl	80026c4 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	4b47      	ldr	r3, [pc, #284]	; (8002490 <EXTI9_5_IRQHandler+0x234>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b13      	cmp	r3, #19
 800237a:	d92a      	bls.n	80023d2 <EXTI9_5_IRQHandler+0x176>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 0){
 800237c:	4b45      	ldr	r3, [pc, #276]	; (8002494 <EXTI9_5_IRQHandler+0x238>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b01      	cmp	r3, #1
 8002384:	d111      	bne.n	80023aa <EXTI9_5_IRQHandler+0x14e>
 8002386:	2140      	movs	r1, #64	; 0x40
 8002388:	4846      	ldr	r0, [pc, #280]	; (80024a4 <EXTI9_5_IRQHandler+0x248>)
 800238a:	f001 f8e5 	bl	8003558 <HAL_GPIO_ReadPin>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d10a      	bne.n	80023aa <EXTI9_5_IRQHandler+0x14e>
				button_state =0 ; // stable low reached
 8002394:	4b3f      	ldr	r3, [pc, #252]	; (8002494 <EXTI9_5_IRQHandler+0x238>)
 8002396:	2200      	movs	r2, #0
 8002398:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 800239a:	f000 f993 	bl	80026c4 <HAL_GetTick>
 800239e:	4603      	mov	r3, r0
 80023a0:	4a3b      	ldr	r2, [pc, #236]	; (8002490 <EXTI9_5_IRQHandler+0x234>)
 80023a2:	6013      	str	r3, [r2, #0]

				g_middle_button_pressed =1 ;
 80023a4:	4b40      	ldr	r3, [pc, #256]	; (80024a8 <EXTI9_5_IRQHandler+0x24c>)
 80023a6:	2201      	movs	r2, #1
 80023a8:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOA ,GPIO_PIN_6) == 1 ){
 80023aa:	4b3a      	ldr	r3, [pc, #232]	; (8002494 <EXTI9_5_IRQHandler+0x238>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d10e      	bne.n	80023d2 <EXTI9_5_IRQHandler+0x176>
 80023b4:	2140      	movs	r1, #64	; 0x40
 80023b6:	483b      	ldr	r0, [pc, #236]	; (80024a4 <EXTI9_5_IRQHandler+0x248>)
 80023b8:	f001 f8ce 	bl	8003558 <HAL_GPIO_ReadPin>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d107      	bne.n	80023d2 <EXTI9_5_IRQHandler+0x176>
				ticks_pressed = HAL_GetTick() ;
 80023c2:	f000 f97f 	bl	80026c4 <HAL_GetTick>
 80023c6:	4603      	mov	r3, r0
 80023c8:	4a31      	ldr	r2, [pc, #196]	; (8002490 <EXTI9_5_IRQHandler+0x234>)
 80023ca:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 80023cc:	4b31      	ldr	r3, [pc, #196]	; (8002494 <EXTI9_5_IRQHandler+0x238>)
 80023ce:	2201      	movs	r2, #1
 80023d0:	701a      	strb	r2, [r3, #0]

			}
		}


		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6) ;
 80023d2:	4b2e      	ldr	r3, [pc, #184]	; (800248c <EXTI9_5_IRQHandler+0x230>)
 80023d4:	2240      	movs	r2, #64	; 0x40
 80023d6:	615a      	str	r2, [r3, #20]
 80023d8:	e048      	b.n	800246c <EXTI9_5_IRQHandler+0x210>

	}

	else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET){
 80023da:	4b2c      	ldr	r3, [pc, #176]	; (800248c <EXTI9_5_IRQHandler+0x230>)
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d036      	beq.n	8002454 <EXTI9_5_IRQHandler+0x1f8>




		if(HAL_GetTick() - ticks_pressed >= 20){
 80023e6:	f000 f96d 	bl	80026c4 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	4b28      	ldr	r3, [pc, #160]	; (8002490 <EXTI9_5_IRQHandler+0x234>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b13      	cmp	r3, #19
 80023f4:	d92a      	bls.n	800244c <EXTI9_5_IRQHandler+0x1f0>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 0){
 80023f6:	4b27      	ldr	r3, [pc, #156]	; (8002494 <EXTI9_5_IRQHandler+0x238>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d111      	bne.n	8002424 <EXTI9_5_IRQHandler+0x1c8>
 8002400:	2180      	movs	r1, #128	; 0x80
 8002402:	4828      	ldr	r0, [pc, #160]	; (80024a4 <EXTI9_5_IRQHandler+0x248>)
 8002404:	f001 f8a8 	bl	8003558 <HAL_GPIO_ReadPin>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d10a      	bne.n	8002424 <EXTI9_5_IRQHandler+0x1c8>
				button_state =0 ; // stable low reached
 800240e:	4b21      	ldr	r3, [pc, #132]	; (8002494 <EXTI9_5_IRQHandler+0x238>)
 8002410:	2200      	movs	r2, #0
 8002412:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 8002414:	f000 f956 	bl	80026c4 <HAL_GetTick>
 8002418:	4603      	mov	r3, r0
 800241a:	4a1d      	ldr	r2, [pc, #116]	; (8002490 <EXTI9_5_IRQHandler+0x234>)
 800241c:	6013      	str	r3, [r2, #0]

				g_right_button_pressed = 1 ;
 800241e:	4b23      	ldr	r3, [pc, #140]	; (80024ac <EXTI9_5_IRQHandler+0x250>)
 8002420:	2201      	movs	r2, #1
 8002422:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOA ,GPIO_PIN_7) == 1 ){
 8002424:	4b1b      	ldr	r3, [pc, #108]	; (8002494 <EXTI9_5_IRQHandler+0x238>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10e      	bne.n	800244c <EXTI9_5_IRQHandler+0x1f0>
 800242e:	2180      	movs	r1, #128	; 0x80
 8002430:	481c      	ldr	r0, [pc, #112]	; (80024a4 <EXTI9_5_IRQHandler+0x248>)
 8002432:	f001 f891 	bl	8003558 <HAL_GPIO_ReadPin>
 8002436:	4603      	mov	r3, r0
 8002438:	2b01      	cmp	r3, #1
 800243a:	d107      	bne.n	800244c <EXTI9_5_IRQHandler+0x1f0>
				ticks_pressed = HAL_GetTick() ;
 800243c:	f000 f942 	bl	80026c4 <HAL_GetTick>
 8002440:	4603      	mov	r3, r0
 8002442:	4a13      	ldr	r2, [pc, #76]	; (8002490 <EXTI9_5_IRQHandler+0x234>)
 8002444:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 8002446:	4b13      	ldr	r3, [pc, #76]	; (8002494 <EXTI9_5_IRQHandler+0x238>)
 8002448:	2201      	movs	r2, #1
 800244a:	701a      	strb	r2, [r3, #0]

			}
		}
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7) ;
 800244c:	4b0f      	ldr	r3, [pc, #60]	; (800248c <EXTI9_5_IRQHandler+0x230>)
 800244e:	2280      	movs	r2, #128	; 0x80
 8002450:	615a      	str	r2, [r3, #20]
 8002452:	e00b      	b.n	800246c <EXTI9_5_IRQHandler+0x210>
	}

	else{

		if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET){
 8002454:	4b0d      	ldr	r3, [pc, #52]	; (800248c <EXTI9_5_IRQHandler+0x230>)
 8002456:	695b      	ldr	r3, [r3, #20]
 8002458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800245c:	2b00      	cmp	r3, #0
 800245e:	d005      	beq.n	800246c <EXTI9_5_IRQHandler+0x210>

			g_bottom_button_pressed = 1 ;
 8002460:	4b13      	ldr	r3, [pc, #76]	; (80024b0 <EXTI9_5_IRQHandler+0x254>)
 8002462:	2201      	movs	r2, #1
 8002464:	701a      	strb	r2, [r3, #0]

			__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7) ;
 8002466:	4b09      	ldr	r3, [pc, #36]	; (800248c <EXTI9_5_IRQHandler+0x230>)
 8002468:	2280      	movs	r2, #128	; 0x80
 800246a:	615a      	str	r2, [r3, #20]
		}
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800246c:	2040      	movs	r0, #64	; 0x40
 800246e:	f001 f8a5 	bl	80035bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002472:	2080      	movs	r0, #128	; 0x80
 8002474:	f001 f8a2 	bl	80035bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002478:	f44f 7080 	mov.w	r0, #256	; 0x100
 800247c:	f001 f89e 	bl	80035bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002480:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002484:	f001 f89a 	bl	80035bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002488:	bf00      	nop
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40013c00 	.word	0x40013c00
 8002490:	20000214 	.word	0x20000214
 8002494:	2000002c 	.word	0x2000002c
 8002498:	40020400 	.word	0x40020400
 800249c:	2000020f 	.word	0x2000020f
 80024a0:	20000211 	.word	0x20000211
 80024a4:	40020000 	.word	0x40020000
 80024a8:	20000213 	.word	0x20000213
 80024ac:	20000210 	.word	0x20000210
 80024b0:	20000212 	.word	0x20000212

080024b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80024b8:	4802      	ldr	r0, [pc, #8]	; (80024c4 <TIM2_IRQHandler+0x10>)
 80024ba:	f001 fefd 	bl	80042b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80024be:	bf00      	nop
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	200000a4 	.word	0x200000a4

080024c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80024cc:	4802      	ldr	r0, [pc, #8]	; (80024d8 <USART2_IRQHandler+0x10>)
 80024ce:	f002 fd29 	bl	8004f24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	20000134 	.word	0x20000134

080024dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */


	if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_13) != RESET){
 80024e0:	4b22      	ldr	r3, [pc, #136]	; (800256c <EXTI15_10_IRQHandler+0x90>)
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d038      	beq.n	800255e <EXTI15_10_IRQHandler+0x82>

		if(HAL_GetTick() - ticks_pressed >= 20){
 80024ec:	f000 f8ea 	bl	80026c4 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	4b1f      	ldr	r3, [pc, #124]	; (8002570 <EXTI15_10_IRQHandler+0x94>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b13      	cmp	r3, #19
 80024fa:	d92c      	bls.n	8002556 <EXTI15_10_IRQHandler+0x7a>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 0){
 80024fc:	4b1d      	ldr	r3, [pc, #116]	; (8002574 <EXTI15_10_IRQHandler+0x98>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b01      	cmp	r3, #1
 8002504:	d112      	bne.n	800252c <EXTI15_10_IRQHandler+0x50>
 8002506:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800250a:	481b      	ldr	r0, [pc, #108]	; (8002578 <EXTI15_10_IRQHandler+0x9c>)
 800250c:	f001 f824 	bl	8003558 <HAL_GPIO_ReadPin>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10a      	bne.n	800252c <EXTI15_10_IRQHandler+0x50>
				button_state =0 ; // stable low reached
 8002516:	4b17      	ldr	r3, [pc, #92]	; (8002574 <EXTI15_10_IRQHandler+0x98>)
 8002518:	2200      	movs	r2, #0
 800251a:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 800251c:	f000 f8d2 	bl	80026c4 <HAL_GetTick>
 8002520:	4603      	mov	r3, r0
 8002522:	4a13      	ldr	r2, [pc, #76]	; (8002570 <EXTI15_10_IRQHandler+0x94>)
 8002524:	6013      	str	r3, [r2, #0]

				g_bottom_button_pressed = 1 ;
 8002526:	4b15      	ldr	r3, [pc, #84]	; (800257c <EXTI15_10_IRQHandler+0xa0>)
 8002528:	2201      	movs	r2, #1
 800252a:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOB ,GPIO_PIN_13) == 1 ){
 800252c:	4b11      	ldr	r3, [pc, #68]	; (8002574 <EXTI15_10_IRQHandler+0x98>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10f      	bne.n	8002556 <EXTI15_10_IRQHandler+0x7a>
 8002536:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800253a:	480f      	ldr	r0, [pc, #60]	; (8002578 <EXTI15_10_IRQHandler+0x9c>)
 800253c:	f001 f80c 	bl	8003558 <HAL_GPIO_ReadPin>
 8002540:	4603      	mov	r3, r0
 8002542:	2b01      	cmp	r3, #1
 8002544:	d107      	bne.n	8002556 <EXTI15_10_IRQHandler+0x7a>
				ticks_pressed = HAL_GetTick() ;
 8002546:	f000 f8bd 	bl	80026c4 <HAL_GetTick>
 800254a:	4603      	mov	r3, r0
 800254c:	4a08      	ldr	r2, [pc, #32]	; (8002570 <EXTI15_10_IRQHandler+0x94>)
 800254e:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 8002550:	4b08      	ldr	r3, [pc, #32]	; (8002574 <EXTI15_10_IRQHandler+0x98>)
 8002552:	2201      	movs	r2, #1
 8002554:	701a      	strb	r2, [r3, #0]

			}
		}

		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13) ;
 8002556:	4b05      	ldr	r3, [pc, #20]	; (800256c <EXTI15_10_IRQHandler+0x90>)
 8002558:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800255c:	615a      	str	r2, [r3, #20]
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800255e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002562:	f001 f82b 	bl	80035bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	40013c00 	.word	0x40013c00
 8002570:	20000214 	.word	0x20000214
 8002574:	2000002c 	.word	0x2000002c
 8002578:	40020400 	.word	0x40020400
 800257c:	20000212 	.word	0x20000212

08002580 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002584:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <SystemInit+0x20>)
 8002586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258a:	4a05      	ldr	r2, [pc, #20]	; (80025a0 <SystemInit+0x20>)
 800258c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002590:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002594:	bf00      	nop
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	e000ed00 	.word	0xe000ed00

080025a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80025a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025a8:	480d      	ldr	r0, [pc, #52]	; (80025e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025aa:	490e      	ldr	r1, [pc, #56]	; (80025e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025ac:	4a0e      	ldr	r2, [pc, #56]	; (80025e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025b0:	e002      	b.n	80025b8 <LoopCopyDataInit>

080025b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025b6:	3304      	adds	r3, #4

080025b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025bc:	d3f9      	bcc.n	80025b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025be:	4a0b      	ldr	r2, [pc, #44]	; (80025ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025c0:	4c0b      	ldr	r4, [pc, #44]	; (80025f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80025c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025c4:	e001      	b.n	80025ca <LoopFillZerobss>

080025c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025c8:	3204      	adds	r2, #4

080025ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025cc:	d3fb      	bcc.n	80025c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025ce:	f7ff ffd7 	bl	8002580 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025d2:	f003 fba1 	bl	8005d18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025d6:	f7ff f9d5 	bl	8001984 <main>
  bx  lr    
 80025da:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80025dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80025e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025e4:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 80025e8:	08005e0c 	.word	0x08005e0c
  ldr r2, =_sbss
 80025ec:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 80025f0:	20000220 	.word	0x20000220

080025f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025f4:	e7fe      	b.n	80025f4 <ADC_IRQHandler>
	...

080025f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025fc:	4b0e      	ldr	r3, [pc, #56]	; (8002638 <HAL_Init+0x40>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a0d      	ldr	r2, [pc, #52]	; (8002638 <HAL_Init+0x40>)
 8002602:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002606:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002608:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <HAL_Init+0x40>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a0a      	ldr	r2, [pc, #40]	; (8002638 <HAL_Init+0x40>)
 800260e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002612:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002614:	4b08      	ldr	r3, [pc, #32]	; (8002638 <HAL_Init+0x40>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a07      	ldr	r2, [pc, #28]	; (8002638 <HAL_Init+0x40>)
 800261a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800261e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002620:	2003      	movs	r0, #3
 8002622:	f000 fd41 	bl	80030a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002626:	2000      	movs	r0, #0
 8002628:	f000 f808 	bl	800263c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800262c:	f7ff fc94 	bl	8001f58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	40023c00 	.word	0x40023c00

0800263c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002644:	4b12      	ldr	r3, [pc, #72]	; (8002690 <HAL_InitTick+0x54>)
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	4b12      	ldr	r3, [pc, #72]	; (8002694 <HAL_InitTick+0x58>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	4619      	mov	r1, r3
 800264e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002652:	fbb3 f3f1 	udiv	r3, r3, r1
 8002656:	fbb2 f3f3 	udiv	r3, r2, r3
 800265a:	4618      	mov	r0, r3
 800265c:	f000 fd59 	bl	8003112 <HAL_SYSTICK_Config>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e00e      	b.n	8002688 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2b0f      	cmp	r3, #15
 800266e:	d80a      	bhi.n	8002686 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002670:	2200      	movs	r2, #0
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	f04f 30ff 	mov.w	r0, #4294967295
 8002678:	f000 fd21 	bl	80030be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800267c:	4a06      	ldr	r2, [pc, #24]	; (8002698 <HAL_InitTick+0x5c>)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002682:	2300      	movs	r3, #0
 8002684:	e000      	b.n	8002688 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
}
 8002688:	4618      	mov	r0, r3
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	20000030 	.word	0x20000030
 8002694:	20000038 	.word	0x20000038
 8002698:	20000034 	.word	0x20000034

0800269c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026a0:	4b06      	ldr	r3, [pc, #24]	; (80026bc <HAL_IncTick+0x20>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	461a      	mov	r2, r3
 80026a6:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <HAL_IncTick+0x24>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4413      	add	r3, r2
 80026ac:	4a04      	ldr	r2, [pc, #16]	; (80026c0 <HAL_IncTick+0x24>)
 80026ae:	6013      	str	r3, [r2, #0]
}
 80026b0:	bf00      	nop
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	20000038 	.word	0x20000038
 80026c0:	2000021c 	.word	0x2000021c

080026c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  return uwTick;
 80026c8:	4b03      	ldr	r3, [pc, #12]	; (80026d8 <HAL_GetTick+0x14>)
 80026ca:	681b      	ldr	r3, [r3, #0]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	2000021c 	.word	0x2000021c

080026dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026e4:	f7ff ffee 	bl	80026c4 <HAL_GetTick>
 80026e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f4:	d005      	beq.n	8002702 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026f6:	4b0a      	ldr	r3, [pc, #40]	; (8002720 <HAL_Delay+0x44>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	461a      	mov	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	4413      	add	r3, r2
 8002700:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002702:	bf00      	nop
 8002704:	f7ff ffde 	bl	80026c4 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	429a      	cmp	r2, r3
 8002712:	d8f7      	bhi.n	8002704 <HAL_Delay+0x28>
  {
  }
}
 8002714:	bf00      	nop
 8002716:	bf00      	nop
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	20000038 	.word	0x20000038

08002724 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800272c:	2300      	movs	r3, #0
 800272e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e033      	b.n	80027a2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	2b00      	cmp	r3, #0
 8002740:	d109      	bne.n	8002756 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7ff fc30 	bl	8001fa8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	f003 0310 	and.w	r3, r3, #16
 800275e:	2b00      	cmp	r3, #0
 8002760:	d118      	bne.n	8002794 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800276a:	f023 0302 	bic.w	r3, r3, #2
 800276e:	f043 0202 	orr.w	r2, r3, #2
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 faca 	bl	8002d10 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	f023 0303 	bic.w	r3, r3, #3
 800278a:	f043 0201 	orr.w	r2, r3, #1
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	641a      	str	r2, [r3, #64]	; 0x40
 8002792:	e001      	b.n	8002798 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80027a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
	...

080027ac <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80027b4:	2300      	movs	r3, #0
 80027b6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d101      	bne.n	80027c6 <HAL_ADC_Start+0x1a>
 80027c2:	2302      	movs	r3, #2
 80027c4:	e097      	b.n	80028f6 <HAL_ADC_Start+0x14a>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d018      	beq.n	800280e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689a      	ldr	r2, [r3, #8]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f042 0201 	orr.w	r2, r2, #1
 80027ea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80027ec:	4b45      	ldr	r3, [pc, #276]	; (8002904 <HAL_ADC_Start+0x158>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a45      	ldr	r2, [pc, #276]	; (8002908 <HAL_ADC_Start+0x15c>)
 80027f2:	fba2 2303 	umull	r2, r3, r2, r3
 80027f6:	0c9a      	lsrs	r2, r3, #18
 80027f8:	4613      	mov	r3, r2
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	4413      	add	r3, r2
 80027fe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002800:	e002      	b.n	8002808 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	3b01      	subs	r3, #1
 8002806:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1f9      	bne.n	8002802 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	2b01      	cmp	r3, #1
 800281a:	d15f      	bne.n	80028dc <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002820:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002824:	f023 0301 	bic.w	r3, r3, #1
 8002828:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800283a:	2b00      	cmp	r3, #0
 800283c:	d007      	beq.n	800284e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002846:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800285a:	d106      	bne.n	800286a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002860:	f023 0206 	bic.w	r2, r3, #6
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	645a      	str	r2, [r3, #68]	; 0x44
 8002868:	e002      	b.n	8002870 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002878:	4b24      	ldr	r3, [pc, #144]	; (800290c <HAL_ADC_Start+0x160>)
 800287a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002884:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f003 031f 	and.w	r3, r3, #31
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10f      	bne.n	80028b2 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d129      	bne.n	80028f4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689a      	ldr	r2, [r3, #8]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80028ae:	609a      	str	r2, [r3, #8]
 80028b0:	e020      	b.n	80028f4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a16      	ldr	r2, [pc, #88]	; (8002910 <HAL_ADC_Start+0x164>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d11b      	bne.n	80028f4 <HAL_ADC_Start+0x148>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d114      	bne.n	80028f4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80028d8:	609a      	str	r2, [r3, #8]
 80028da:	e00b      	b.n	80028f4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e0:	f043 0210 	orr.w	r2, r3, #16
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ec:	f043 0201 	orr.w	r2, r3, #1
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3714      	adds	r7, #20
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	20000030 	.word	0x20000030
 8002908:	431bde83 	.word	0x431bde83
 800290c:	40012300 	.word	0x40012300
 8002910:	40012000 	.word	0x40012000

08002914 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002922:	2b01      	cmp	r3, #1
 8002924:	d101      	bne.n	800292a <HAL_ADC_Stop+0x16>
 8002926:	2302      	movs	r3, #2
 8002928:	e021      	b.n	800296e <HAL_ADC_Stop+0x5a>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2201      	movs	r2, #1
 800292e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 0201 	bic.w	r2, r2, #1
 8002940:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	2b00      	cmp	r3, #0
 800294e:	d109      	bne.n	8002964 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002954:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002958:	f023 0301 	bic.w	r3, r3, #1
 800295c:	f043 0201 	orr.w	r2, r3, #1
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b084      	sub	sp, #16
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
 8002982:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002984:	2300      	movs	r3, #0
 8002986:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002992:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002996:	d113      	bne.n	80029c0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80029a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029a6:	d10b      	bne.n	80029c0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ac:	f043 0220 	orr.w	r2, r3, #32
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e063      	b.n	8002a88 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80029c0:	f7ff fe80 	bl	80026c4 <HAL_GetTick>
 80029c4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80029c6:	e021      	b.n	8002a0c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ce:	d01d      	beq.n	8002a0c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d007      	beq.n	80029e6 <HAL_ADC_PollForConversion+0x6c>
 80029d6:	f7ff fe75 	bl	80026c4 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d212      	bcs.n	8002a0c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d00b      	beq.n	8002a0c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f8:	f043 0204 	orr.w	r2, r3, #4
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e03d      	b.n	8002a88 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d1d6      	bne.n	80029c8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f06f 0212 	mvn.w	r2, #18
 8002a22:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a28:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d123      	bne.n	8002a86 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d11f      	bne.n	8002a86 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d006      	beq.n	8002a62 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d111      	bne.n	8002a86 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d105      	bne.n	8002a86 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	f043 0201 	orr.w	r2, r3, #1
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
	...

08002aac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d101      	bne.n	8002ac8 <HAL_ADC_ConfigChannel+0x1c>
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	e113      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0x244>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2b09      	cmp	r3, #9
 8002ad6:	d925      	bls.n	8002b24 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68d9      	ldr	r1, [r3, #12]
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	4413      	add	r3, r2
 8002aec:	3b1e      	subs	r3, #30
 8002aee:	2207      	movs	r2, #7
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	43da      	mvns	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	400a      	ands	r2, r1
 8002afc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68d9      	ldr	r1, [r3, #12]
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	4618      	mov	r0, r3
 8002b10:	4603      	mov	r3, r0
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	4403      	add	r3, r0
 8002b16:	3b1e      	subs	r3, #30
 8002b18:	409a      	lsls	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	60da      	str	r2, [r3, #12]
 8002b22:	e022      	b.n	8002b6a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6919      	ldr	r1, [r3, #16]
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	461a      	mov	r2, r3
 8002b32:	4613      	mov	r3, r2
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	4413      	add	r3, r2
 8002b38:	2207      	movs	r2, #7
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	43da      	mvns	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	400a      	ands	r2, r1
 8002b46:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6919      	ldr	r1, [r3, #16]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	689a      	ldr	r2, [r3, #8]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	4618      	mov	r0, r3
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	4403      	add	r3, r0
 8002b60:	409a      	lsls	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	430a      	orrs	r2, r1
 8002b68:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	2b06      	cmp	r3, #6
 8002b70:	d824      	bhi.n	8002bbc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685a      	ldr	r2, [r3, #4]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4413      	add	r3, r2
 8002b82:	3b05      	subs	r3, #5
 8002b84:	221f      	movs	r2, #31
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	43da      	mvns	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	400a      	ands	r2, r1
 8002b92:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4413      	add	r3, r2
 8002bac:	3b05      	subs	r3, #5
 8002bae:	fa00 f203 	lsl.w	r2, r0, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	635a      	str	r2, [r3, #52]	; 0x34
 8002bba:	e04c      	b.n	8002c56 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	2b0c      	cmp	r3, #12
 8002bc2:	d824      	bhi.n	8002c0e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685a      	ldr	r2, [r3, #4]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	4413      	add	r3, r2
 8002bd4:	3b23      	subs	r3, #35	; 0x23
 8002bd6:	221f      	movs	r2, #31
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	43da      	mvns	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	400a      	ands	r2, r1
 8002be4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685a      	ldr	r2, [r3, #4]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	4413      	add	r3, r2
 8002bfe:	3b23      	subs	r3, #35	; 0x23
 8002c00:	fa00 f203 	lsl.w	r2, r0, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	631a      	str	r2, [r3, #48]	; 0x30
 8002c0c:	e023      	b.n	8002c56 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685a      	ldr	r2, [r3, #4]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	3b41      	subs	r3, #65	; 0x41
 8002c20:	221f      	movs	r2, #31
 8002c22:	fa02 f303 	lsl.w	r3, r2, r3
 8002c26:	43da      	mvns	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	400a      	ands	r2, r1
 8002c2e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685a      	ldr	r2, [r3, #4]
 8002c42:	4613      	mov	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4413      	add	r3, r2
 8002c48:	3b41      	subs	r3, #65	; 0x41
 8002c4a:	fa00 f203 	lsl.w	r2, r0, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c56:	4b29      	ldr	r3, [pc, #164]	; (8002cfc <HAL_ADC_ConfigChannel+0x250>)
 8002c58:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a28      	ldr	r2, [pc, #160]	; (8002d00 <HAL_ADC_ConfigChannel+0x254>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d10f      	bne.n	8002c84 <HAL_ADC_ConfigChannel+0x1d8>
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2b12      	cmp	r3, #18
 8002c6a:	d10b      	bne.n	8002c84 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a1d      	ldr	r2, [pc, #116]	; (8002d00 <HAL_ADC_ConfigChannel+0x254>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d12b      	bne.n	8002ce6 <HAL_ADC_ConfigChannel+0x23a>
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a1c      	ldr	r2, [pc, #112]	; (8002d04 <HAL_ADC_ConfigChannel+0x258>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d003      	beq.n	8002ca0 <HAL_ADC_ConfigChannel+0x1f4>
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2b11      	cmp	r3, #17
 8002c9e:	d122      	bne.n	8002ce6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a11      	ldr	r2, [pc, #68]	; (8002d04 <HAL_ADC_ConfigChannel+0x258>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d111      	bne.n	8002ce6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002cc2:	4b11      	ldr	r3, [pc, #68]	; (8002d08 <HAL_ADC_ConfigChannel+0x25c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a11      	ldr	r2, [pc, #68]	; (8002d0c <HAL_ADC_ConfigChannel+0x260>)
 8002cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ccc:	0c9a      	lsrs	r2, r3, #18
 8002cce:	4613      	mov	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4413      	add	r3, r2
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002cd8:	e002      	b.n	8002ce0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1f9      	bne.n	8002cda <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3714      	adds	r7, #20
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	40012300 	.word	0x40012300
 8002d00:	40012000 	.word	0x40012000
 8002d04:	10000012 	.word	0x10000012
 8002d08:	20000030 	.word	0x20000030
 8002d0c:	431bde83 	.word	0x431bde83

08002d10 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d18:	4b79      	ldr	r3, [pc, #484]	; (8002f00 <ADC_Init+0x1f0>)
 8002d1a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	685a      	ldr	r2, [r3, #4]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	431a      	orrs	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	6859      	ldr	r1, [r3, #4]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	691b      	ldr	r3, [r3, #16]
 8002d50:	021a      	lsls	r2, r3, #8
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	685a      	ldr	r2, [r3, #4]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002d68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6859      	ldr	r1, [r3, #4]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689a      	ldr	r2, [r3, #8]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689a      	ldr	r2, [r3, #8]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6899      	ldr	r1, [r3, #8]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68da      	ldr	r2, [r3, #12]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da2:	4a58      	ldr	r2, [pc, #352]	; (8002f04 <ADC_Init+0x1f4>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d022      	beq.n	8002dee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689a      	ldr	r2, [r3, #8]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002db6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6899      	ldr	r1, [r3, #8]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002dd8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6899      	ldr	r1, [r3, #8]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	609a      	str	r2, [r3, #8]
 8002dec:	e00f      	b.n	8002e0e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002dfc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e0c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 0202 	bic.w	r2, r2, #2
 8002e1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	6899      	ldr	r1, [r3, #8]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	7e1b      	ldrb	r3, [r3, #24]
 8002e28:	005a      	lsls	r2, r3, #1
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d01b      	beq.n	8002e74 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	685a      	ldr	r2, [r3, #4]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e4a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	685a      	ldr	r2, [r3, #4]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002e5a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6859      	ldr	r1, [r3, #4]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e66:	3b01      	subs	r3, #1
 8002e68:	035a      	lsls	r2, r3, #13
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	605a      	str	r2, [r3, #4]
 8002e72:	e007      	b.n	8002e84 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e82:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002e92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	051a      	lsls	r2, r3, #20
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002eb8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6899      	ldr	r1, [r3, #8]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ec6:	025a      	lsls	r2, r3, #9
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	689a      	ldr	r2, [r3, #8]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ede:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6899      	ldr	r1, [r3, #8]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	029a      	lsls	r2, r3, #10
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	609a      	str	r2, [r3, #8]
}
 8002ef4:	bf00      	nop
 8002ef6:	3714      	adds	r7, #20
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr
 8002f00:	40012300 	.word	0x40012300
 8002f04:	0f000001 	.word	0x0f000001

08002f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f003 0307 	and.w	r3, r3, #7
 8002f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f18:	4b0c      	ldr	r3, [pc, #48]	; (8002f4c <__NVIC_SetPriorityGrouping+0x44>)
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f1e:	68ba      	ldr	r2, [r7, #8]
 8002f20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f24:	4013      	ands	r3, r2
 8002f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f3a:	4a04      	ldr	r2, [pc, #16]	; (8002f4c <__NVIC_SetPriorityGrouping+0x44>)
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	60d3      	str	r3, [r2, #12]
}
 8002f40:	bf00      	nop
 8002f42:	3714      	adds	r7, #20
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr
 8002f4c:	e000ed00 	.word	0xe000ed00

08002f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f54:	4b04      	ldr	r3, [pc, #16]	; (8002f68 <__NVIC_GetPriorityGrouping+0x18>)
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	0a1b      	lsrs	r3, r3, #8
 8002f5a:	f003 0307 	and.w	r3, r3, #7
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr
 8002f68:	e000ed00 	.word	0xe000ed00

08002f6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	4603      	mov	r3, r0
 8002f74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	db0b      	blt.n	8002f96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f7e:	79fb      	ldrb	r3, [r7, #7]
 8002f80:	f003 021f 	and.w	r2, r3, #31
 8002f84:	4907      	ldr	r1, [pc, #28]	; (8002fa4 <__NVIC_EnableIRQ+0x38>)
 8002f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8a:	095b      	lsrs	r3, r3, #5
 8002f8c:	2001      	movs	r0, #1
 8002f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f96:	bf00      	nop
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	e000e100 	.word	0xe000e100

08002fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	4603      	mov	r3, r0
 8002fb0:	6039      	str	r1, [r7, #0]
 8002fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	db0a      	blt.n	8002fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	b2da      	uxtb	r2, r3
 8002fc0:	490c      	ldr	r1, [pc, #48]	; (8002ff4 <__NVIC_SetPriority+0x4c>)
 8002fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc6:	0112      	lsls	r2, r2, #4
 8002fc8:	b2d2      	uxtb	r2, r2
 8002fca:	440b      	add	r3, r1
 8002fcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fd0:	e00a      	b.n	8002fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	4908      	ldr	r1, [pc, #32]	; (8002ff8 <__NVIC_SetPriority+0x50>)
 8002fd8:	79fb      	ldrb	r3, [r7, #7]
 8002fda:	f003 030f 	and.w	r3, r3, #15
 8002fde:	3b04      	subs	r3, #4
 8002fe0:	0112      	lsls	r2, r2, #4
 8002fe2:	b2d2      	uxtb	r2, r2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	761a      	strb	r2, [r3, #24]
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr
 8002ff4:	e000e100 	.word	0xe000e100
 8002ff8:	e000ed00 	.word	0xe000ed00

08002ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b089      	sub	sp, #36	; 0x24
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f003 0307 	and.w	r3, r3, #7
 800300e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	f1c3 0307 	rsb	r3, r3, #7
 8003016:	2b04      	cmp	r3, #4
 8003018:	bf28      	it	cs
 800301a:	2304      	movcs	r3, #4
 800301c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	3304      	adds	r3, #4
 8003022:	2b06      	cmp	r3, #6
 8003024:	d902      	bls.n	800302c <NVIC_EncodePriority+0x30>
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	3b03      	subs	r3, #3
 800302a:	e000      	b.n	800302e <NVIC_EncodePriority+0x32>
 800302c:	2300      	movs	r3, #0
 800302e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003030:	f04f 32ff 	mov.w	r2, #4294967295
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	fa02 f303 	lsl.w	r3, r2, r3
 800303a:	43da      	mvns	r2, r3
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	401a      	ands	r2, r3
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003044:	f04f 31ff 	mov.w	r1, #4294967295
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	fa01 f303 	lsl.w	r3, r1, r3
 800304e:	43d9      	mvns	r1, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003054:	4313      	orrs	r3, r2
         );
}
 8003056:	4618      	mov	r0, r3
 8003058:	3724      	adds	r7, #36	; 0x24
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
	...

08003064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	3b01      	subs	r3, #1
 8003070:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003074:	d301      	bcc.n	800307a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003076:	2301      	movs	r3, #1
 8003078:	e00f      	b.n	800309a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800307a:	4a0a      	ldr	r2, [pc, #40]	; (80030a4 <SysTick_Config+0x40>)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	3b01      	subs	r3, #1
 8003080:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003082:	210f      	movs	r1, #15
 8003084:	f04f 30ff 	mov.w	r0, #4294967295
 8003088:	f7ff ff8e 	bl	8002fa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800308c:	4b05      	ldr	r3, [pc, #20]	; (80030a4 <SysTick_Config+0x40>)
 800308e:	2200      	movs	r2, #0
 8003090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003092:	4b04      	ldr	r3, [pc, #16]	; (80030a4 <SysTick_Config+0x40>)
 8003094:	2207      	movs	r2, #7
 8003096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	e000e010 	.word	0xe000e010

080030a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f7ff ff29 	bl	8002f08 <__NVIC_SetPriorityGrouping>
}
 80030b6:	bf00      	nop
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030be:	b580      	push	{r7, lr}
 80030c0:	b086      	sub	sp, #24
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	4603      	mov	r3, r0
 80030c6:	60b9      	str	r1, [r7, #8]
 80030c8:	607a      	str	r2, [r7, #4]
 80030ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030cc:	2300      	movs	r3, #0
 80030ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030d0:	f7ff ff3e 	bl	8002f50 <__NVIC_GetPriorityGrouping>
 80030d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	68b9      	ldr	r1, [r7, #8]
 80030da:	6978      	ldr	r0, [r7, #20]
 80030dc:	f7ff ff8e 	bl	8002ffc <NVIC_EncodePriority>
 80030e0:	4602      	mov	r2, r0
 80030e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030e6:	4611      	mov	r1, r2
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff ff5d 	bl	8002fa8 <__NVIC_SetPriority>
}
 80030ee:	bf00      	nop
 80030f0:	3718      	adds	r7, #24
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b082      	sub	sp, #8
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	4603      	mov	r3, r0
 80030fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003104:	4618      	mov	r0, r3
 8003106:	f7ff ff31 	bl	8002f6c <__NVIC_EnableIRQ>
}
 800310a:	bf00      	nop
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b082      	sub	sp, #8
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f7ff ffa2 	bl	8003064 <SysTick_Config>
 8003120:	4603      	mov	r3, r0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b084      	sub	sp, #16
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003136:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003138:	f7ff fac4 	bl	80026c4 <HAL_GetTick>
 800313c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d008      	beq.n	800315c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2280      	movs	r2, #128	; 0x80
 800314e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e052      	b.n	8003202 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f022 0216 	bic.w	r2, r2, #22
 800316a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	695a      	ldr	r2, [r3, #20]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800317a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003180:	2b00      	cmp	r3, #0
 8003182:	d103      	bne.n	800318c <HAL_DMA_Abort+0x62>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003188:	2b00      	cmp	r3, #0
 800318a:	d007      	beq.n	800319c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 0208 	bic.w	r2, r2, #8
 800319a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f022 0201 	bic.w	r2, r2, #1
 80031aa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031ac:	e013      	b.n	80031d6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031ae:	f7ff fa89 	bl	80026c4 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b05      	cmp	r3, #5
 80031ba:	d90c      	bls.n	80031d6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2220      	movs	r2, #32
 80031c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2203      	movs	r2, #3
 80031c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e015      	b.n	8003202 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1e4      	bne.n	80031ae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e8:	223f      	movs	r2, #63	; 0x3f
 80031ea:	409a      	lsls	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800320a:	b480      	push	{r7}
 800320c:	b083      	sub	sp, #12
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d004      	beq.n	8003228 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2280      	movs	r2, #128	; 0x80
 8003222:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e00c      	b.n	8003242 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2205      	movs	r2, #5
 800322c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 0201 	bic.w	r2, r2, #1
 800323e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
	...

08003250 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003250:	b480      	push	{r7}
 8003252:	b089      	sub	sp, #36	; 0x24
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800325a:	2300      	movs	r3, #0
 800325c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800325e:	2300      	movs	r3, #0
 8003260:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003262:	2300      	movs	r3, #0
 8003264:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003266:	2300      	movs	r3, #0
 8003268:	61fb      	str	r3, [r7, #28]
 800326a:	e159      	b.n	8003520 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800326c:	2201      	movs	r2, #1
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	4013      	ands	r3, r2
 800327e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	429a      	cmp	r2, r3
 8003286:	f040 8148 	bne.w	800351a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f003 0303 	and.w	r3, r3, #3
 8003292:	2b01      	cmp	r3, #1
 8003294:	d005      	beq.n	80032a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d130      	bne.n	8003304 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	2203      	movs	r2, #3
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	43db      	mvns	r3, r3
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	4013      	ands	r3, r2
 80032b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	68da      	ldr	r2, [r3, #12]
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	fa02 f303 	lsl.w	r3, r2, r3
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032d8:	2201      	movs	r2, #1
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	43db      	mvns	r3, r3
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	4013      	ands	r3, r2
 80032e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	091b      	lsrs	r3, r3, #4
 80032ee:	f003 0201 	and.w	r2, r3, #1
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f003 0303 	and.w	r3, r3, #3
 800330c:	2b03      	cmp	r3, #3
 800330e:	d017      	beq.n	8003340 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	2203      	movs	r2, #3
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	43db      	mvns	r3, r3
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	4013      	ands	r3, r2
 8003326:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	689a      	ldr	r2, [r3, #8]
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	4313      	orrs	r3, r2
 8003338:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f003 0303 	and.w	r3, r3, #3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d123      	bne.n	8003394 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	08da      	lsrs	r2, r3, #3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	3208      	adds	r2, #8
 8003354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003358:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	f003 0307 	and.w	r3, r3, #7
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	220f      	movs	r2, #15
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	43db      	mvns	r3, r3
 800336a:	69ba      	ldr	r2, [r7, #24]
 800336c:	4013      	ands	r3, r2
 800336e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	691a      	ldr	r2, [r3, #16]
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	f003 0307 	and.w	r3, r3, #7
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	fa02 f303 	lsl.w	r3, r2, r3
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	4313      	orrs	r3, r2
 8003384:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	08da      	lsrs	r2, r3, #3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	3208      	adds	r2, #8
 800338e:	69b9      	ldr	r1, [r7, #24]
 8003390:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	2203      	movs	r2, #3
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	43db      	mvns	r3, r3
 80033a6:	69ba      	ldr	r2, [r7, #24]
 80033a8:	4013      	ands	r3, r2
 80033aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f003 0203 	and.w	r2, r3, #3
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	4313      	orrs	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f000 80a2 	beq.w	800351a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033d6:	2300      	movs	r3, #0
 80033d8:	60fb      	str	r3, [r7, #12]
 80033da:	4b57      	ldr	r3, [pc, #348]	; (8003538 <HAL_GPIO_Init+0x2e8>)
 80033dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033de:	4a56      	ldr	r2, [pc, #344]	; (8003538 <HAL_GPIO_Init+0x2e8>)
 80033e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033e4:	6453      	str	r3, [r2, #68]	; 0x44
 80033e6:	4b54      	ldr	r3, [pc, #336]	; (8003538 <HAL_GPIO_Init+0x2e8>)
 80033e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033f2:	4a52      	ldr	r2, [pc, #328]	; (800353c <HAL_GPIO_Init+0x2ec>)
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	089b      	lsrs	r3, r3, #2
 80033f8:	3302      	adds	r3, #2
 80033fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	f003 0303 	and.w	r3, r3, #3
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	220f      	movs	r2, #15
 800340a:	fa02 f303 	lsl.w	r3, r2, r3
 800340e:	43db      	mvns	r3, r3
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	4013      	ands	r3, r2
 8003414:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a49      	ldr	r2, [pc, #292]	; (8003540 <HAL_GPIO_Init+0x2f0>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d019      	beq.n	8003452 <HAL_GPIO_Init+0x202>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a48      	ldr	r2, [pc, #288]	; (8003544 <HAL_GPIO_Init+0x2f4>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d013      	beq.n	800344e <HAL_GPIO_Init+0x1fe>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a47      	ldr	r2, [pc, #284]	; (8003548 <HAL_GPIO_Init+0x2f8>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d00d      	beq.n	800344a <HAL_GPIO_Init+0x1fa>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a46      	ldr	r2, [pc, #280]	; (800354c <HAL_GPIO_Init+0x2fc>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d007      	beq.n	8003446 <HAL_GPIO_Init+0x1f6>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a45      	ldr	r2, [pc, #276]	; (8003550 <HAL_GPIO_Init+0x300>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d101      	bne.n	8003442 <HAL_GPIO_Init+0x1f2>
 800343e:	2304      	movs	r3, #4
 8003440:	e008      	b.n	8003454 <HAL_GPIO_Init+0x204>
 8003442:	2307      	movs	r3, #7
 8003444:	e006      	b.n	8003454 <HAL_GPIO_Init+0x204>
 8003446:	2303      	movs	r3, #3
 8003448:	e004      	b.n	8003454 <HAL_GPIO_Init+0x204>
 800344a:	2302      	movs	r3, #2
 800344c:	e002      	b.n	8003454 <HAL_GPIO_Init+0x204>
 800344e:	2301      	movs	r3, #1
 8003450:	e000      	b.n	8003454 <HAL_GPIO_Init+0x204>
 8003452:	2300      	movs	r3, #0
 8003454:	69fa      	ldr	r2, [r7, #28]
 8003456:	f002 0203 	and.w	r2, r2, #3
 800345a:	0092      	lsls	r2, r2, #2
 800345c:	4093      	lsls	r3, r2
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	4313      	orrs	r3, r2
 8003462:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003464:	4935      	ldr	r1, [pc, #212]	; (800353c <HAL_GPIO_Init+0x2ec>)
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	089b      	lsrs	r3, r3, #2
 800346a:	3302      	adds	r3, #2
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003472:	4b38      	ldr	r3, [pc, #224]	; (8003554 <HAL_GPIO_Init+0x304>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	43db      	mvns	r3, r3
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	4013      	ands	r3, r2
 8003480:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d003      	beq.n	8003496 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	4313      	orrs	r3, r2
 8003494:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003496:	4a2f      	ldr	r2, [pc, #188]	; (8003554 <HAL_GPIO_Init+0x304>)
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800349c:	4b2d      	ldr	r3, [pc, #180]	; (8003554 <HAL_GPIO_Init+0x304>)
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	43db      	mvns	r3, r3
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	4013      	ands	r3, r2
 80034aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d003      	beq.n	80034c0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	4313      	orrs	r3, r2
 80034be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034c0:	4a24      	ldr	r2, [pc, #144]	; (8003554 <HAL_GPIO_Init+0x304>)
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034c6:	4b23      	ldr	r3, [pc, #140]	; (8003554 <HAL_GPIO_Init+0x304>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	43db      	mvns	r3, r3
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	4013      	ands	r3, r2
 80034d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d003      	beq.n	80034ea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034ea:	4a1a      	ldr	r2, [pc, #104]	; (8003554 <HAL_GPIO_Init+0x304>)
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034f0:	4b18      	ldr	r3, [pc, #96]	; (8003554 <HAL_GPIO_Init+0x304>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	43db      	mvns	r3, r3
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	4013      	ands	r3, r2
 80034fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	4313      	orrs	r3, r2
 8003512:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003514:	4a0f      	ldr	r2, [pc, #60]	; (8003554 <HAL_GPIO_Init+0x304>)
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	3301      	adds	r3, #1
 800351e:	61fb      	str	r3, [r7, #28]
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	2b0f      	cmp	r3, #15
 8003524:	f67f aea2 	bls.w	800326c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003528:	bf00      	nop
 800352a:	bf00      	nop
 800352c:	3724      	adds	r7, #36	; 0x24
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	40023800 	.word	0x40023800
 800353c:	40013800 	.word	0x40013800
 8003540:	40020000 	.word	0x40020000
 8003544:	40020400 	.word	0x40020400
 8003548:	40020800 	.word	0x40020800
 800354c:	40020c00 	.word	0x40020c00
 8003550:	40021000 	.word	0x40021000
 8003554:	40013c00 	.word	0x40013c00

08003558 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	460b      	mov	r3, r1
 8003562:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	691a      	ldr	r2, [r3, #16]
 8003568:	887b      	ldrh	r3, [r7, #2]
 800356a:	4013      	ands	r3, r2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d002      	beq.n	8003576 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003570:	2301      	movs	r3, #1
 8003572:	73fb      	strb	r3, [r7, #15]
 8003574:	e001      	b.n	800357a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003576:	2300      	movs	r3, #0
 8003578:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800357a:	7bfb      	ldrb	r3, [r7, #15]
}
 800357c:	4618      	mov	r0, r3
 800357e:	3714      	adds	r7, #20
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	460b      	mov	r3, r1
 8003592:	807b      	strh	r3, [r7, #2]
 8003594:	4613      	mov	r3, r2
 8003596:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003598:	787b      	ldrb	r3, [r7, #1]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800359e:	887a      	ldrh	r2, [r7, #2]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035a4:	e003      	b.n	80035ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035a6:	887b      	ldrh	r3, [r7, #2]
 80035a8:	041a      	lsls	r2, r3, #16
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	619a      	str	r2, [r3, #24]
}
 80035ae:	bf00      	nop
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
	...

080035bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	4603      	mov	r3, r0
 80035c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80035c6:	4b08      	ldr	r3, [pc, #32]	; (80035e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035c8:	695a      	ldr	r2, [r3, #20]
 80035ca:	88fb      	ldrh	r3, [r7, #6]
 80035cc:	4013      	ands	r3, r2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d006      	beq.n	80035e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035d2:	4a05      	ldr	r2, [pc, #20]	; (80035e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035d4:	88fb      	ldrh	r3, [r7, #6]
 80035d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035d8:	88fb      	ldrh	r3, [r7, #6]
 80035da:	4618      	mov	r0, r3
 80035dc:	f000 f806 	bl	80035ec <HAL_GPIO_EXTI_Callback>
  }
}
 80035e0:	bf00      	nop
 80035e2:	3708      	adds	r7, #8
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	40013c00 	.word	0x40013c00

080035ec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	4603      	mov	r3, r0
 80035f4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80035f6:	bf00      	nop
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
	...

08003604 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e267      	b.n	8003ae6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b00      	cmp	r3, #0
 8003620:	d075      	beq.n	800370e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003622:	4b88      	ldr	r3, [pc, #544]	; (8003844 <HAL_RCC_OscConfig+0x240>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f003 030c 	and.w	r3, r3, #12
 800362a:	2b04      	cmp	r3, #4
 800362c:	d00c      	beq.n	8003648 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800362e:	4b85      	ldr	r3, [pc, #532]	; (8003844 <HAL_RCC_OscConfig+0x240>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003636:	2b08      	cmp	r3, #8
 8003638:	d112      	bne.n	8003660 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800363a:	4b82      	ldr	r3, [pc, #520]	; (8003844 <HAL_RCC_OscConfig+0x240>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003642:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003646:	d10b      	bne.n	8003660 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003648:	4b7e      	ldr	r3, [pc, #504]	; (8003844 <HAL_RCC_OscConfig+0x240>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d05b      	beq.n	800370c <HAL_RCC_OscConfig+0x108>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d157      	bne.n	800370c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e242      	b.n	8003ae6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003668:	d106      	bne.n	8003678 <HAL_RCC_OscConfig+0x74>
 800366a:	4b76      	ldr	r3, [pc, #472]	; (8003844 <HAL_RCC_OscConfig+0x240>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a75      	ldr	r2, [pc, #468]	; (8003844 <HAL_RCC_OscConfig+0x240>)
 8003670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003674:	6013      	str	r3, [r2, #0]
 8003676:	e01d      	b.n	80036b4 <HAL_RCC_OscConfig+0xb0>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003680:	d10c      	bne.n	800369c <HAL_RCC_OscConfig+0x98>
 8003682:	4b70      	ldr	r3, [pc, #448]	; (8003844 <HAL_RCC_OscConfig+0x240>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a6f      	ldr	r2, [pc, #444]	; (8003844 <HAL_RCC_OscConfig+0x240>)
 8003688:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800368c:	6013      	str	r3, [r2, #0]
 800368e:	4b6d      	ldr	r3, [pc, #436]	; (8003844 <HAL_RCC_OscConfig+0x240>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a6c      	ldr	r2, [pc, #432]	; (8003844 <HAL_RCC_OscConfig+0x240>)
 8003694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003698:	6013      	str	r3, [r2, #0]
 800369a:	e00b      	b.n	80036b4 <HAL_RCC_OscConfig+0xb0>
 800369c:	4b69      	ldr	r3, [pc, #420]	; (8003844 <HAL_RCC_OscConfig+0x240>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a68      	ldr	r2, [pc, #416]	; (8003844 <HAL_RCC_OscConfig+0x240>)
 80036a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036a6:	6013      	str	r3, [r2, #0]
 80036a8:	4b66      	ldr	r3, [pc, #408]	; (8003844 <HAL_RCC_OscConfig+0x240>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a65      	ldr	r2, [pc, #404]	; (8003844 <HAL_RCC_OscConfig+0x240>)
 80036ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d013      	beq.n	80036e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036bc:	f7ff f802 	bl	80026c4 <HAL_GetTick>
 80036c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036c4:	f7fe fffe 	bl	80026c4 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b64      	cmp	r3, #100	; 0x64
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e207      	b.n	8003ae6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036d6:	4b5b      	ldr	r3, [pc, #364]	; (8003844 <HAL_RCC_OscConfig+0x240>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d0f0      	beq.n	80036c4 <HAL_RCC_OscConfig+0xc0>
 80036e2:	e014      	b.n	800370e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e4:	f7fe ffee 	bl	80026c4 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036ec:	f7fe ffea 	bl	80026c4 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b64      	cmp	r3, #100	; 0x64
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e1f3      	b.n	8003ae6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036fe:	4b51      	ldr	r3, [pc, #324]	; (8003844 <HAL_RCC_OscConfig+0x240>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1f0      	bne.n	80036ec <HAL_RCC_OscConfig+0xe8>
 800370a:	e000      	b.n	800370e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800370c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d063      	beq.n	80037e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800371a:	4b4a      	ldr	r3, [pc, #296]	; (8003844 <HAL_RCC_OscConfig+0x240>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f003 030c 	and.w	r3, r3, #12
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00b      	beq.n	800373e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003726:	4b47      	ldr	r3, [pc, #284]	; (8003844 <HAL_RCC_OscConfig+0x240>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800372e:	2b08      	cmp	r3, #8
 8003730:	d11c      	bne.n	800376c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003732:	4b44      	ldr	r3, [pc, #272]	; (8003844 <HAL_RCC_OscConfig+0x240>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d116      	bne.n	800376c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800373e:	4b41      	ldr	r3, [pc, #260]	; (8003844 <HAL_RCC_OscConfig+0x240>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d005      	beq.n	8003756 <HAL_RCC_OscConfig+0x152>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d001      	beq.n	8003756 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e1c7      	b.n	8003ae6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003756:	4b3b      	ldr	r3, [pc, #236]	; (8003844 <HAL_RCC_OscConfig+0x240>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	00db      	lsls	r3, r3, #3
 8003764:	4937      	ldr	r1, [pc, #220]	; (8003844 <HAL_RCC_OscConfig+0x240>)
 8003766:	4313      	orrs	r3, r2
 8003768:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800376a:	e03a      	b.n	80037e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d020      	beq.n	80037b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003774:	4b34      	ldr	r3, [pc, #208]	; (8003848 <HAL_RCC_OscConfig+0x244>)
 8003776:	2201      	movs	r2, #1
 8003778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800377a:	f7fe ffa3 	bl	80026c4 <HAL_GetTick>
 800377e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003780:	e008      	b.n	8003794 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003782:	f7fe ff9f 	bl	80026c4 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d901      	bls.n	8003794 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e1a8      	b.n	8003ae6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003794:	4b2b      	ldr	r3, [pc, #172]	; (8003844 <HAL_RCC_OscConfig+0x240>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d0f0      	beq.n	8003782 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037a0:	4b28      	ldr	r3, [pc, #160]	; (8003844 <HAL_RCC_OscConfig+0x240>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	00db      	lsls	r3, r3, #3
 80037ae:	4925      	ldr	r1, [pc, #148]	; (8003844 <HAL_RCC_OscConfig+0x240>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	600b      	str	r3, [r1, #0]
 80037b4:	e015      	b.n	80037e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037b6:	4b24      	ldr	r3, [pc, #144]	; (8003848 <HAL_RCC_OscConfig+0x244>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037bc:	f7fe ff82 	bl	80026c4 <HAL_GetTick>
 80037c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037c2:	e008      	b.n	80037d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037c4:	f7fe ff7e 	bl	80026c4 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e187      	b.n	8003ae6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037d6:	4b1b      	ldr	r3, [pc, #108]	; (8003844 <HAL_RCC_OscConfig+0x240>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1f0      	bne.n	80037c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0308 	and.w	r3, r3, #8
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d036      	beq.n	800385c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d016      	beq.n	8003824 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037f6:	4b15      	ldr	r3, [pc, #84]	; (800384c <HAL_RCC_OscConfig+0x248>)
 80037f8:	2201      	movs	r2, #1
 80037fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037fc:	f7fe ff62 	bl	80026c4 <HAL_GetTick>
 8003800:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003802:	e008      	b.n	8003816 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003804:	f7fe ff5e 	bl	80026c4 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b02      	cmp	r3, #2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e167      	b.n	8003ae6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003816:	4b0b      	ldr	r3, [pc, #44]	; (8003844 <HAL_RCC_OscConfig+0x240>)
 8003818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d0f0      	beq.n	8003804 <HAL_RCC_OscConfig+0x200>
 8003822:	e01b      	b.n	800385c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003824:	4b09      	ldr	r3, [pc, #36]	; (800384c <HAL_RCC_OscConfig+0x248>)
 8003826:	2200      	movs	r2, #0
 8003828:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800382a:	f7fe ff4b 	bl	80026c4 <HAL_GetTick>
 800382e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003830:	e00e      	b.n	8003850 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003832:	f7fe ff47 	bl	80026c4 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d907      	bls.n	8003850 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e150      	b.n	8003ae6 <HAL_RCC_OscConfig+0x4e2>
 8003844:	40023800 	.word	0x40023800
 8003848:	42470000 	.word	0x42470000
 800384c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003850:	4b88      	ldr	r3, [pc, #544]	; (8003a74 <HAL_RCC_OscConfig+0x470>)
 8003852:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1ea      	bne.n	8003832 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 8097 	beq.w	8003998 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800386a:	2300      	movs	r3, #0
 800386c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800386e:	4b81      	ldr	r3, [pc, #516]	; (8003a74 <HAL_RCC_OscConfig+0x470>)
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10f      	bne.n	800389a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800387a:	2300      	movs	r3, #0
 800387c:	60bb      	str	r3, [r7, #8]
 800387e:	4b7d      	ldr	r3, [pc, #500]	; (8003a74 <HAL_RCC_OscConfig+0x470>)
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	4a7c      	ldr	r2, [pc, #496]	; (8003a74 <HAL_RCC_OscConfig+0x470>)
 8003884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003888:	6413      	str	r3, [r2, #64]	; 0x40
 800388a:	4b7a      	ldr	r3, [pc, #488]	; (8003a74 <HAL_RCC_OscConfig+0x470>)
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003892:	60bb      	str	r3, [r7, #8]
 8003894:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003896:	2301      	movs	r3, #1
 8003898:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800389a:	4b77      	ldr	r3, [pc, #476]	; (8003a78 <HAL_RCC_OscConfig+0x474>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d118      	bne.n	80038d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038a6:	4b74      	ldr	r3, [pc, #464]	; (8003a78 <HAL_RCC_OscConfig+0x474>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a73      	ldr	r2, [pc, #460]	; (8003a78 <HAL_RCC_OscConfig+0x474>)
 80038ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038b2:	f7fe ff07 	bl	80026c4 <HAL_GetTick>
 80038b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b8:	e008      	b.n	80038cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038ba:	f7fe ff03 	bl	80026c4 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d901      	bls.n	80038cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e10c      	b.n	8003ae6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038cc:	4b6a      	ldr	r3, [pc, #424]	; (8003a78 <HAL_RCC_OscConfig+0x474>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d0f0      	beq.n	80038ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d106      	bne.n	80038ee <HAL_RCC_OscConfig+0x2ea>
 80038e0:	4b64      	ldr	r3, [pc, #400]	; (8003a74 <HAL_RCC_OscConfig+0x470>)
 80038e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e4:	4a63      	ldr	r2, [pc, #396]	; (8003a74 <HAL_RCC_OscConfig+0x470>)
 80038e6:	f043 0301 	orr.w	r3, r3, #1
 80038ea:	6713      	str	r3, [r2, #112]	; 0x70
 80038ec:	e01c      	b.n	8003928 <HAL_RCC_OscConfig+0x324>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	2b05      	cmp	r3, #5
 80038f4:	d10c      	bne.n	8003910 <HAL_RCC_OscConfig+0x30c>
 80038f6:	4b5f      	ldr	r3, [pc, #380]	; (8003a74 <HAL_RCC_OscConfig+0x470>)
 80038f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fa:	4a5e      	ldr	r2, [pc, #376]	; (8003a74 <HAL_RCC_OscConfig+0x470>)
 80038fc:	f043 0304 	orr.w	r3, r3, #4
 8003900:	6713      	str	r3, [r2, #112]	; 0x70
 8003902:	4b5c      	ldr	r3, [pc, #368]	; (8003a74 <HAL_RCC_OscConfig+0x470>)
 8003904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003906:	4a5b      	ldr	r2, [pc, #364]	; (8003a74 <HAL_RCC_OscConfig+0x470>)
 8003908:	f043 0301 	orr.w	r3, r3, #1
 800390c:	6713      	str	r3, [r2, #112]	; 0x70
 800390e:	e00b      	b.n	8003928 <HAL_RCC_OscConfig+0x324>
 8003910:	4b58      	ldr	r3, [pc, #352]	; (8003a74 <HAL_RCC_OscConfig+0x470>)
 8003912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003914:	4a57      	ldr	r2, [pc, #348]	; (8003a74 <HAL_RCC_OscConfig+0x470>)
 8003916:	f023 0301 	bic.w	r3, r3, #1
 800391a:	6713      	str	r3, [r2, #112]	; 0x70
 800391c:	4b55      	ldr	r3, [pc, #340]	; (8003a74 <HAL_RCC_OscConfig+0x470>)
 800391e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003920:	4a54      	ldr	r2, [pc, #336]	; (8003a74 <HAL_RCC_OscConfig+0x470>)
 8003922:	f023 0304 	bic.w	r3, r3, #4
 8003926:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d015      	beq.n	800395c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003930:	f7fe fec8 	bl	80026c4 <HAL_GetTick>
 8003934:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003936:	e00a      	b.n	800394e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003938:	f7fe fec4 	bl	80026c4 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	f241 3288 	movw	r2, #5000	; 0x1388
 8003946:	4293      	cmp	r3, r2
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e0cb      	b.n	8003ae6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800394e:	4b49      	ldr	r3, [pc, #292]	; (8003a74 <HAL_RCC_OscConfig+0x470>)
 8003950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d0ee      	beq.n	8003938 <HAL_RCC_OscConfig+0x334>
 800395a:	e014      	b.n	8003986 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800395c:	f7fe feb2 	bl	80026c4 <HAL_GetTick>
 8003960:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003962:	e00a      	b.n	800397a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003964:	f7fe feae 	bl	80026c4 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003972:	4293      	cmp	r3, r2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e0b5      	b.n	8003ae6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800397a:	4b3e      	ldr	r3, [pc, #248]	; (8003a74 <HAL_RCC_OscConfig+0x470>)
 800397c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1ee      	bne.n	8003964 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003986:	7dfb      	ldrb	r3, [r7, #23]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d105      	bne.n	8003998 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800398c:	4b39      	ldr	r3, [pc, #228]	; (8003a74 <HAL_RCC_OscConfig+0x470>)
 800398e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003990:	4a38      	ldr	r2, [pc, #224]	; (8003a74 <HAL_RCC_OscConfig+0x470>)
 8003992:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003996:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	2b00      	cmp	r3, #0
 800399e:	f000 80a1 	beq.w	8003ae4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039a2:	4b34      	ldr	r3, [pc, #208]	; (8003a74 <HAL_RCC_OscConfig+0x470>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f003 030c 	and.w	r3, r3, #12
 80039aa:	2b08      	cmp	r3, #8
 80039ac:	d05c      	beq.n	8003a68 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d141      	bne.n	8003a3a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039b6:	4b31      	ldr	r3, [pc, #196]	; (8003a7c <HAL_RCC_OscConfig+0x478>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039bc:	f7fe fe82 	bl	80026c4 <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039c2:	e008      	b.n	80039d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039c4:	f7fe fe7e 	bl	80026c4 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e087      	b.n	8003ae6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039d6:	4b27      	ldr	r3, [pc, #156]	; (8003a74 <HAL_RCC_OscConfig+0x470>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1f0      	bne.n	80039c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	69da      	ldr	r2, [r3, #28]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	431a      	orrs	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f0:	019b      	lsls	r3, r3, #6
 80039f2:	431a      	orrs	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f8:	085b      	lsrs	r3, r3, #1
 80039fa:	3b01      	subs	r3, #1
 80039fc:	041b      	lsls	r3, r3, #16
 80039fe:	431a      	orrs	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a04:	061b      	lsls	r3, r3, #24
 8003a06:	491b      	ldr	r1, [pc, #108]	; (8003a74 <HAL_RCC_OscConfig+0x470>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a0c:	4b1b      	ldr	r3, [pc, #108]	; (8003a7c <HAL_RCC_OscConfig+0x478>)
 8003a0e:	2201      	movs	r2, #1
 8003a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a12:	f7fe fe57 	bl	80026c4 <HAL_GetTick>
 8003a16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a18:	e008      	b.n	8003a2c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a1a:	f7fe fe53 	bl	80026c4 <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d901      	bls.n	8003a2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e05c      	b.n	8003ae6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a2c:	4b11      	ldr	r3, [pc, #68]	; (8003a74 <HAL_RCC_OscConfig+0x470>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d0f0      	beq.n	8003a1a <HAL_RCC_OscConfig+0x416>
 8003a38:	e054      	b.n	8003ae4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a3a:	4b10      	ldr	r3, [pc, #64]	; (8003a7c <HAL_RCC_OscConfig+0x478>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a40:	f7fe fe40 	bl	80026c4 <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a48:	f7fe fe3c 	bl	80026c4 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e045      	b.n	8003ae6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a5a:	4b06      	ldr	r3, [pc, #24]	; (8003a74 <HAL_RCC_OscConfig+0x470>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1f0      	bne.n	8003a48 <HAL_RCC_OscConfig+0x444>
 8003a66:	e03d      	b.n	8003ae4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d107      	bne.n	8003a80 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e038      	b.n	8003ae6 <HAL_RCC_OscConfig+0x4e2>
 8003a74:	40023800 	.word	0x40023800
 8003a78:	40007000 	.word	0x40007000
 8003a7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a80:	4b1b      	ldr	r3, [pc, #108]	; (8003af0 <HAL_RCC_OscConfig+0x4ec>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d028      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d121      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d11a      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ab6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d111      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac6:	085b      	lsrs	r3, r3, #1
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d107      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ada:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d001      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e000      	b.n	8003ae6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3718      	adds	r7, #24
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	40023800 	.word	0x40023800

08003af4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d101      	bne.n	8003b08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e0cc      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b08:	4b68      	ldr	r3, [pc, #416]	; (8003cac <HAL_RCC_ClockConfig+0x1b8>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0307 	and.w	r3, r3, #7
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d90c      	bls.n	8003b30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b16:	4b65      	ldr	r3, [pc, #404]	; (8003cac <HAL_RCC_ClockConfig+0x1b8>)
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	b2d2      	uxtb	r2, r2
 8003b1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b1e:	4b63      	ldr	r3, [pc, #396]	; (8003cac <HAL_RCC_ClockConfig+0x1b8>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0307 	and.w	r3, r3, #7
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d001      	beq.n	8003b30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e0b8      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d020      	beq.n	8003b7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0304 	and.w	r3, r3, #4
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d005      	beq.n	8003b54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b48:	4b59      	ldr	r3, [pc, #356]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	4a58      	ldr	r2, [pc, #352]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0308 	and.w	r3, r3, #8
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d005      	beq.n	8003b6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b60:	4b53      	ldr	r3, [pc, #332]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	4a52      	ldr	r2, [pc, #328]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b6c:	4b50      	ldr	r3, [pc, #320]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	494d      	ldr	r1, [pc, #308]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d044      	beq.n	8003c14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d107      	bne.n	8003ba2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b92:	4b47      	ldr	r3, [pc, #284]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d119      	bne.n	8003bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e07f      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d003      	beq.n	8003bb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bae:	2b03      	cmp	r3, #3
 8003bb0:	d107      	bne.n	8003bc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bb2:	4b3f      	ldr	r3, [pc, #252]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d109      	bne.n	8003bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e06f      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bc2:	4b3b      	ldr	r3, [pc, #236]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d101      	bne.n	8003bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e067      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bd2:	4b37      	ldr	r3, [pc, #220]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f023 0203 	bic.w	r2, r3, #3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	4934      	ldr	r1, [pc, #208]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003be4:	f7fe fd6e 	bl	80026c4 <HAL_GetTick>
 8003be8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bea:	e00a      	b.n	8003c02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bec:	f7fe fd6a 	bl	80026c4 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e04f      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c02:	4b2b      	ldr	r3, [pc, #172]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f003 020c 	and.w	r2, r3, #12
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d1eb      	bne.n	8003bec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c14:	4b25      	ldr	r3, [pc, #148]	; (8003cac <HAL_RCC_ClockConfig+0x1b8>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0307 	and.w	r3, r3, #7
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d20c      	bcs.n	8003c3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c22:	4b22      	ldr	r3, [pc, #136]	; (8003cac <HAL_RCC_ClockConfig+0x1b8>)
 8003c24:	683a      	ldr	r2, [r7, #0]
 8003c26:	b2d2      	uxtb	r2, r2
 8003c28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c2a:	4b20      	ldr	r3, [pc, #128]	; (8003cac <HAL_RCC_ClockConfig+0x1b8>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0307 	and.w	r3, r3, #7
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d001      	beq.n	8003c3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e032      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d008      	beq.n	8003c5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c48:	4b19      	ldr	r3, [pc, #100]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	4916      	ldr	r1, [pc, #88]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0308 	and.w	r3, r3, #8
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d009      	beq.n	8003c7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c66:	4b12      	ldr	r3, [pc, #72]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	490e      	ldr	r1, [pc, #56]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c7a:	f000 f821 	bl	8003cc0 <HAL_RCC_GetSysClockFreq>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	4b0b      	ldr	r3, [pc, #44]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	091b      	lsrs	r3, r3, #4
 8003c86:	f003 030f 	and.w	r3, r3, #15
 8003c8a:	490a      	ldr	r1, [pc, #40]	; (8003cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c8c:	5ccb      	ldrb	r3, [r1, r3]
 8003c8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c92:	4a09      	ldr	r2, [pc, #36]	; (8003cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c96:	4b09      	ldr	r3, [pc, #36]	; (8003cbc <HAL_RCC_ClockConfig+0x1c8>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7fe fcce 	bl	800263c <HAL_InitTick>

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	40023c00 	.word	0x40023c00
 8003cb0:	40023800 	.word	0x40023800
 8003cb4:	08005de4 	.word	0x08005de4
 8003cb8:	20000030 	.word	0x20000030
 8003cbc:	20000034 	.word	0x20000034

08003cc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cc4:	b094      	sub	sp, #80	; 0x50
 8003cc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	647b      	str	r3, [r7, #68]	; 0x44
 8003ccc:	2300      	movs	r3, #0
 8003cce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cd8:	4b79      	ldr	r3, [pc, #484]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f003 030c 	and.w	r3, r3, #12
 8003ce0:	2b08      	cmp	r3, #8
 8003ce2:	d00d      	beq.n	8003d00 <HAL_RCC_GetSysClockFreq+0x40>
 8003ce4:	2b08      	cmp	r3, #8
 8003ce6:	f200 80e1 	bhi.w	8003eac <HAL_RCC_GetSysClockFreq+0x1ec>
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d002      	beq.n	8003cf4 <HAL_RCC_GetSysClockFreq+0x34>
 8003cee:	2b04      	cmp	r3, #4
 8003cf0:	d003      	beq.n	8003cfa <HAL_RCC_GetSysClockFreq+0x3a>
 8003cf2:	e0db      	b.n	8003eac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cf4:	4b73      	ldr	r3, [pc, #460]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003cf6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003cf8:	e0db      	b.n	8003eb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cfa:	4b73      	ldr	r3, [pc, #460]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0x208>)
 8003cfc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003cfe:	e0d8      	b.n	8003eb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d00:	4b6f      	ldr	r3, [pc, #444]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d08:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d0a:	4b6d      	ldr	r3, [pc, #436]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d063      	beq.n	8003dde <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d16:	4b6a      	ldr	r3, [pc, #424]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	099b      	lsrs	r3, r3, #6
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d20:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d28:	633b      	str	r3, [r7, #48]	; 0x30
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	637b      	str	r3, [r7, #52]	; 0x34
 8003d2e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003d32:	4622      	mov	r2, r4
 8003d34:	462b      	mov	r3, r5
 8003d36:	f04f 0000 	mov.w	r0, #0
 8003d3a:	f04f 0100 	mov.w	r1, #0
 8003d3e:	0159      	lsls	r1, r3, #5
 8003d40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d44:	0150      	lsls	r0, r2, #5
 8003d46:	4602      	mov	r2, r0
 8003d48:	460b      	mov	r3, r1
 8003d4a:	4621      	mov	r1, r4
 8003d4c:	1a51      	subs	r1, r2, r1
 8003d4e:	6139      	str	r1, [r7, #16]
 8003d50:	4629      	mov	r1, r5
 8003d52:	eb63 0301 	sbc.w	r3, r3, r1
 8003d56:	617b      	str	r3, [r7, #20]
 8003d58:	f04f 0200 	mov.w	r2, #0
 8003d5c:	f04f 0300 	mov.w	r3, #0
 8003d60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d64:	4659      	mov	r1, fp
 8003d66:	018b      	lsls	r3, r1, #6
 8003d68:	4651      	mov	r1, sl
 8003d6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d6e:	4651      	mov	r1, sl
 8003d70:	018a      	lsls	r2, r1, #6
 8003d72:	4651      	mov	r1, sl
 8003d74:	ebb2 0801 	subs.w	r8, r2, r1
 8003d78:	4659      	mov	r1, fp
 8003d7a:	eb63 0901 	sbc.w	r9, r3, r1
 8003d7e:	f04f 0200 	mov.w	r2, #0
 8003d82:	f04f 0300 	mov.w	r3, #0
 8003d86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d92:	4690      	mov	r8, r2
 8003d94:	4699      	mov	r9, r3
 8003d96:	4623      	mov	r3, r4
 8003d98:	eb18 0303 	adds.w	r3, r8, r3
 8003d9c:	60bb      	str	r3, [r7, #8]
 8003d9e:	462b      	mov	r3, r5
 8003da0:	eb49 0303 	adc.w	r3, r9, r3
 8003da4:	60fb      	str	r3, [r7, #12]
 8003da6:	f04f 0200 	mov.w	r2, #0
 8003daa:	f04f 0300 	mov.w	r3, #0
 8003dae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003db2:	4629      	mov	r1, r5
 8003db4:	024b      	lsls	r3, r1, #9
 8003db6:	4621      	mov	r1, r4
 8003db8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003dbc:	4621      	mov	r1, r4
 8003dbe:	024a      	lsls	r2, r1, #9
 8003dc0:	4610      	mov	r0, r2
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003dcc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003dd0:	f7fc fdf8 	bl	80009c4 <__aeabi_uldivmod>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	4613      	mov	r3, r2
 8003dda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ddc:	e058      	b.n	8003e90 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dde:	4b38      	ldr	r3, [pc, #224]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	099b      	lsrs	r3, r3, #6
 8003de4:	2200      	movs	r2, #0
 8003de6:	4618      	mov	r0, r3
 8003de8:	4611      	mov	r1, r2
 8003dea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003dee:	623b      	str	r3, [r7, #32]
 8003df0:	2300      	movs	r3, #0
 8003df2:	627b      	str	r3, [r7, #36]	; 0x24
 8003df4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003df8:	4642      	mov	r2, r8
 8003dfa:	464b      	mov	r3, r9
 8003dfc:	f04f 0000 	mov.w	r0, #0
 8003e00:	f04f 0100 	mov.w	r1, #0
 8003e04:	0159      	lsls	r1, r3, #5
 8003e06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e0a:	0150      	lsls	r0, r2, #5
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	460b      	mov	r3, r1
 8003e10:	4641      	mov	r1, r8
 8003e12:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e16:	4649      	mov	r1, r9
 8003e18:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e1c:	f04f 0200 	mov.w	r2, #0
 8003e20:	f04f 0300 	mov.w	r3, #0
 8003e24:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e28:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e2c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e30:	ebb2 040a 	subs.w	r4, r2, sl
 8003e34:	eb63 050b 	sbc.w	r5, r3, fp
 8003e38:	f04f 0200 	mov.w	r2, #0
 8003e3c:	f04f 0300 	mov.w	r3, #0
 8003e40:	00eb      	lsls	r3, r5, #3
 8003e42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e46:	00e2      	lsls	r2, r4, #3
 8003e48:	4614      	mov	r4, r2
 8003e4a:	461d      	mov	r5, r3
 8003e4c:	4643      	mov	r3, r8
 8003e4e:	18e3      	adds	r3, r4, r3
 8003e50:	603b      	str	r3, [r7, #0]
 8003e52:	464b      	mov	r3, r9
 8003e54:	eb45 0303 	adc.w	r3, r5, r3
 8003e58:	607b      	str	r3, [r7, #4]
 8003e5a:	f04f 0200 	mov.w	r2, #0
 8003e5e:	f04f 0300 	mov.w	r3, #0
 8003e62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e66:	4629      	mov	r1, r5
 8003e68:	028b      	lsls	r3, r1, #10
 8003e6a:	4621      	mov	r1, r4
 8003e6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e70:	4621      	mov	r1, r4
 8003e72:	028a      	lsls	r2, r1, #10
 8003e74:	4610      	mov	r0, r2
 8003e76:	4619      	mov	r1, r3
 8003e78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	61bb      	str	r3, [r7, #24]
 8003e7e:	61fa      	str	r2, [r7, #28]
 8003e80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e84:	f7fc fd9e 	bl	80009c4 <__aeabi_uldivmod>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e90:	4b0b      	ldr	r3, [pc, #44]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	0c1b      	lsrs	r3, r3, #16
 8003e96:	f003 0303 	and.w	r3, r3, #3
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	005b      	lsls	r3, r3, #1
 8003e9e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003ea0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ea2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003eaa:	e002      	b.n	8003eb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003eac:	4b05      	ldr	r3, [pc, #20]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003eae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003eb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003eb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3750      	adds	r7, #80	; 0x50
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ebe:	bf00      	nop
 8003ec0:	40023800 	.word	0x40023800
 8003ec4:	00f42400 	.word	0x00f42400
 8003ec8:	007a1200 	.word	0x007a1200

08003ecc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ed0:	4b03      	ldr	r3, [pc, #12]	; (8003ee0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	20000030 	.word	0x20000030

08003ee4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ee8:	f7ff fff0 	bl	8003ecc <HAL_RCC_GetHCLKFreq>
 8003eec:	4602      	mov	r2, r0
 8003eee:	4b05      	ldr	r3, [pc, #20]	; (8003f04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	0a9b      	lsrs	r3, r3, #10
 8003ef4:	f003 0307 	and.w	r3, r3, #7
 8003ef8:	4903      	ldr	r1, [pc, #12]	; (8003f08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003efa:	5ccb      	ldrb	r3, [r1, r3]
 8003efc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	40023800 	.word	0x40023800
 8003f08:	08005df4 	.word	0x08005df4

08003f0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f10:	f7ff ffdc 	bl	8003ecc <HAL_RCC_GetHCLKFreq>
 8003f14:	4602      	mov	r2, r0
 8003f16:	4b05      	ldr	r3, [pc, #20]	; (8003f2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	0b5b      	lsrs	r3, r3, #13
 8003f1c:	f003 0307 	and.w	r3, r3, #7
 8003f20:	4903      	ldr	r1, [pc, #12]	; (8003f30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f22:	5ccb      	ldrb	r3, [r1, r3]
 8003f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	40023800 	.word	0x40023800
 8003f30:	08005df4 	.word	0x08005df4

08003f34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e041      	b.n	8003fca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d106      	bne.n	8003f60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7fe f8a0 	bl	80020a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2202      	movs	r2, #2
 8003f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	3304      	adds	r3, #4
 8003f70:	4619      	mov	r1, r3
 8003f72:	4610      	mov	r0, r2
 8003f74:	f000 fc34 	bl	80047e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3708      	adds	r7, #8
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b082      	sub	sp, #8
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d101      	bne.n	8003fe4 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e041      	b.n	8004068 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d106      	bne.n	8003ffe <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 f839 	bl	8004070 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2202      	movs	r2, #2
 8004002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	3304      	adds	r3, #4
 800400e:	4619      	mov	r1, r3
 8004010:	4610      	mov	r0, r2
 8004012:	f000 fbe5 	bl	80047e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2201      	movs	r2, #1
 800402a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3708      	adds	r7, #8
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800408e:	2300      	movs	r3, #0
 8004090:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d104      	bne.n	80040a2 <HAL_TIM_IC_Start_IT+0x1e>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	e013      	b.n	80040ca <HAL_TIM_IC_Start_IT+0x46>
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	2b04      	cmp	r3, #4
 80040a6:	d104      	bne.n	80040b2 <HAL_TIM_IC_Start_IT+0x2e>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	e00b      	b.n	80040ca <HAL_TIM_IC_Start_IT+0x46>
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	2b08      	cmp	r3, #8
 80040b6:	d104      	bne.n	80040c2 <HAL_TIM_IC_Start_IT+0x3e>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	e003      	b.n	80040ca <HAL_TIM_IC_Start_IT+0x46>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d104      	bne.n	80040dc <HAL_TIM_IC_Start_IT+0x58>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	e013      	b.n	8004104 <HAL_TIM_IC_Start_IT+0x80>
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	2b04      	cmp	r3, #4
 80040e0:	d104      	bne.n	80040ec <HAL_TIM_IC_Start_IT+0x68>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	e00b      	b.n	8004104 <HAL_TIM_IC_Start_IT+0x80>
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	2b08      	cmp	r3, #8
 80040f0:	d104      	bne.n	80040fc <HAL_TIM_IC_Start_IT+0x78>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	e003      	b.n	8004104 <HAL_TIM_IC_Start_IT+0x80>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004102:	b2db      	uxtb	r3, r3
 8004104:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004106:	7bbb      	ldrb	r3, [r7, #14]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d102      	bne.n	8004112 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800410c:	7b7b      	ldrb	r3, [r7, #13]
 800410e:	2b01      	cmp	r3, #1
 8004110:	d001      	beq.n	8004116 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e0c2      	b.n	800429c <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d104      	bne.n	8004126 <HAL_TIM_IC_Start_IT+0xa2>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2202      	movs	r2, #2
 8004120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004124:	e013      	b.n	800414e <HAL_TIM_IC_Start_IT+0xca>
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	2b04      	cmp	r3, #4
 800412a:	d104      	bne.n	8004136 <HAL_TIM_IC_Start_IT+0xb2>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2202      	movs	r2, #2
 8004130:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004134:	e00b      	b.n	800414e <HAL_TIM_IC_Start_IT+0xca>
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	2b08      	cmp	r3, #8
 800413a:	d104      	bne.n	8004146 <HAL_TIM_IC_Start_IT+0xc2>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2202      	movs	r2, #2
 8004140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004144:	e003      	b.n	800414e <HAL_TIM_IC_Start_IT+0xca>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2202      	movs	r2, #2
 800414a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d104      	bne.n	800415e <HAL_TIM_IC_Start_IT+0xda>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2202      	movs	r2, #2
 8004158:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800415c:	e013      	b.n	8004186 <HAL_TIM_IC_Start_IT+0x102>
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	2b04      	cmp	r3, #4
 8004162:	d104      	bne.n	800416e <HAL_TIM_IC_Start_IT+0xea>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2202      	movs	r2, #2
 8004168:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800416c:	e00b      	b.n	8004186 <HAL_TIM_IC_Start_IT+0x102>
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	2b08      	cmp	r3, #8
 8004172:	d104      	bne.n	800417e <HAL_TIM_IC_Start_IT+0xfa>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2202      	movs	r2, #2
 8004178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800417c:	e003      	b.n	8004186 <HAL_TIM_IC_Start_IT+0x102>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2202      	movs	r2, #2
 8004182:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	2b0c      	cmp	r3, #12
 800418a:	d841      	bhi.n	8004210 <HAL_TIM_IC_Start_IT+0x18c>
 800418c:	a201      	add	r2, pc, #4	; (adr r2, 8004194 <HAL_TIM_IC_Start_IT+0x110>)
 800418e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004192:	bf00      	nop
 8004194:	080041c9 	.word	0x080041c9
 8004198:	08004211 	.word	0x08004211
 800419c:	08004211 	.word	0x08004211
 80041a0:	08004211 	.word	0x08004211
 80041a4:	080041db 	.word	0x080041db
 80041a8:	08004211 	.word	0x08004211
 80041ac:	08004211 	.word	0x08004211
 80041b0:	08004211 	.word	0x08004211
 80041b4:	080041ed 	.word	0x080041ed
 80041b8:	08004211 	.word	0x08004211
 80041bc:	08004211 	.word	0x08004211
 80041c0:	08004211 	.word	0x08004211
 80041c4:	080041ff 	.word	0x080041ff
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68da      	ldr	r2, [r3, #12]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f042 0202 	orr.w	r2, r2, #2
 80041d6:	60da      	str	r2, [r3, #12]
      break;
 80041d8:	e01d      	b.n	8004216 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68da      	ldr	r2, [r3, #12]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f042 0204 	orr.w	r2, r2, #4
 80041e8:	60da      	str	r2, [r3, #12]
      break;
 80041ea:	e014      	b.n	8004216 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68da      	ldr	r2, [r3, #12]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f042 0208 	orr.w	r2, r2, #8
 80041fa:	60da      	str	r2, [r3, #12]
      break;
 80041fc:	e00b      	b.n	8004216 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68da      	ldr	r2, [r3, #12]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f042 0210 	orr.w	r2, r2, #16
 800420c:	60da      	str	r2, [r3, #12]
      break;
 800420e:	e002      	b.n	8004216 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	73fb      	strb	r3, [r7, #15]
      break;
 8004214:	bf00      	nop
  }

  if (status == HAL_OK)
 8004216:	7bfb      	ldrb	r3, [r7, #15]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d13e      	bne.n	800429a <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2201      	movs	r2, #1
 8004222:	6839      	ldr	r1, [r7, #0]
 8004224:	4618      	mov	r0, r3
 8004226:	f000 fd13 	bl	8004c50 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a1d      	ldr	r2, [pc, #116]	; (80042a4 <HAL_TIM_IC_Start_IT+0x220>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d018      	beq.n	8004266 <HAL_TIM_IC_Start_IT+0x1e2>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800423c:	d013      	beq.n	8004266 <HAL_TIM_IC_Start_IT+0x1e2>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a19      	ldr	r2, [pc, #100]	; (80042a8 <HAL_TIM_IC_Start_IT+0x224>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d00e      	beq.n	8004266 <HAL_TIM_IC_Start_IT+0x1e2>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a17      	ldr	r2, [pc, #92]	; (80042ac <HAL_TIM_IC_Start_IT+0x228>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d009      	beq.n	8004266 <HAL_TIM_IC_Start_IT+0x1e2>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a16      	ldr	r2, [pc, #88]	; (80042b0 <HAL_TIM_IC_Start_IT+0x22c>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d004      	beq.n	8004266 <HAL_TIM_IC_Start_IT+0x1e2>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a14      	ldr	r2, [pc, #80]	; (80042b4 <HAL_TIM_IC_Start_IT+0x230>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d111      	bne.n	800428a <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f003 0307 	and.w	r3, r3, #7
 8004270:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	2b06      	cmp	r3, #6
 8004276:	d010      	beq.n	800429a <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f042 0201 	orr.w	r2, r2, #1
 8004286:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004288:	e007      	b.n	800429a <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f042 0201 	orr.w	r2, r2, #1
 8004298:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800429a:	7bfb      	ldrb	r3, [r7, #15]
}
 800429c:	4618      	mov	r0, r3
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	40010000 	.word	0x40010000
 80042a8:	40000400 	.word	0x40000400
 80042ac:	40000800 	.word	0x40000800
 80042b0:	40000c00 	.word	0x40000c00
 80042b4:	40014000 	.word	0x40014000

080042b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d122      	bne.n	8004314 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d11b      	bne.n	8004314 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f06f 0202 	mvn.w	r2, #2
 80042e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2201      	movs	r2, #1
 80042ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	f003 0303 	and.w	r3, r3, #3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f7fd f848 	bl	8001390 <HAL_TIM_IC_CaptureCallback>
 8004300:	e005      	b.n	800430e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 fa4d 	bl	80047a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 fa54 	bl	80047b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	f003 0304 	and.w	r3, r3, #4
 800431e:	2b04      	cmp	r3, #4
 8004320:	d122      	bne.n	8004368 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	f003 0304 	and.w	r3, r3, #4
 800432c:	2b04      	cmp	r3, #4
 800432e:	d11b      	bne.n	8004368 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f06f 0204 	mvn.w	r2, #4
 8004338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2202      	movs	r2, #2
 800433e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800434a:	2b00      	cmp	r3, #0
 800434c:	d003      	beq.n	8004356 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f7fd f81e 	bl	8001390 <HAL_TIM_IC_CaptureCallback>
 8004354:	e005      	b.n	8004362 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 fa23 	bl	80047a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 fa2a 	bl	80047b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	f003 0308 	and.w	r3, r3, #8
 8004372:	2b08      	cmp	r3, #8
 8004374:	d122      	bne.n	80043bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	f003 0308 	and.w	r3, r3, #8
 8004380:	2b08      	cmp	r3, #8
 8004382:	d11b      	bne.n	80043bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f06f 0208 	mvn.w	r2, #8
 800438c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2204      	movs	r2, #4
 8004392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	69db      	ldr	r3, [r3, #28]
 800439a:	f003 0303 	and.w	r3, r3, #3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d003      	beq.n	80043aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f7fc fff4 	bl	8001390 <HAL_TIM_IC_CaptureCallback>
 80043a8:	e005      	b.n	80043b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f9f9 	bl	80047a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 fa00 	bl	80047b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	f003 0310 	and.w	r3, r3, #16
 80043c6:	2b10      	cmp	r3, #16
 80043c8:	d122      	bne.n	8004410 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	f003 0310 	and.w	r3, r3, #16
 80043d4:	2b10      	cmp	r3, #16
 80043d6:	d11b      	bne.n	8004410 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f06f 0210 	mvn.w	r2, #16
 80043e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2208      	movs	r2, #8
 80043e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	69db      	ldr	r3, [r3, #28]
 80043ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f7fc ffca 	bl	8001390 <HAL_TIM_IC_CaptureCallback>
 80043fc:	e005      	b.n	800440a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 f9cf 	bl	80047a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f000 f9d6 	bl	80047b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	2b01      	cmp	r3, #1
 800441c:	d10e      	bne.n	800443c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	f003 0301 	and.w	r3, r3, #1
 8004428:	2b01      	cmp	r3, #1
 800442a:	d107      	bne.n	800443c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f06f 0201 	mvn.w	r2, #1
 8004434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f9a9 	bl	800478e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004446:	2b80      	cmp	r3, #128	; 0x80
 8004448:	d10e      	bne.n	8004468 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004454:	2b80      	cmp	r3, #128	; 0x80
 8004456:	d107      	bne.n	8004468 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 fc92 	bl	8004d8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004472:	2b40      	cmp	r3, #64	; 0x40
 8004474:	d10e      	bne.n	8004494 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004480:	2b40      	cmp	r3, #64	; 0x40
 8004482:	d107      	bne.n	8004494 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800448c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f99b 	bl	80047ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	f003 0320 	and.w	r3, r3, #32
 800449e:	2b20      	cmp	r3, #32
 80044a0:	d10e      	bne.n	80044c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	f003 0320 	and.w	r3, r3, #32
 80044ac:	2b20      	cmp	r3, #32
 80044ae:	d107      	bne.n	80044c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f06f 0220 	mvn.w	r2, #32
 80044b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 fc5c 	bl	8004d78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044c0:	bf00      	nop
 80044c2:	3708      	adds	r7, #8
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b086      	sub	sp, #24
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044d4:	2300      	movs	r3, #0
 80044d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d101      	bne.n	80044e6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80044e2:	2302      	movs	r3, #2
 80044e4:	e088      	b.n	80045f8 <HAL_TIM_IC_ConfigChannel+0x130>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2201      	movs	r2, #1
 80044ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d11b      	bne.n	800452c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6818      	ldr	r0, [r3, #0]
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	6819      	ldr	r1, [r3, #0]
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	685a      	ldr	r2, [r3, #4]
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f000 f9ec 	bl	80048e0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	699a      	ldr	r2, [r3, #24]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 020c 	bic.w	r2, r2, #12
 8004516:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6999      	ldr	r1, [r3, #24]
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	689a      	ldr	r2, [r3, #8]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	430a      	orrs	r2, r1
 8004528:	619a      	str	r2, [r3, #24]
 800452a:	e060      	b.n	80045ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2b04      	cmp	r3, #4
 8004530:	d11c      	bne.n	800456c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6818      	ldr	r0, [r3, #0]
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	6819      	ldr	r1, [r3, #0]
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	685a      	ldr	r2, [r3, #4]
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	f000 fa64 	bl	8004a0e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	699a      	ldr	r2, [r3, #24]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004554:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	6999      	ldr	r1, [r3, #24]
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	021a      	lsls	r2, r3, #8
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	430a      	orrs	r2, r1
 8004568:	619a      	str	r2, [r3, #24]
 800456a:	e040      	b.n	80045ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2b08      	cmp	r3, #8
 8004570:	d11b      	bne.n	80045aa <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6818      	ldr	r0, [r3, #0]
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	6819      	ldr	r1, [r3, #0]
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	685a      	ldr	r2, [r3, #4]
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	f000 fab1 	bl	8004ae8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	69da      	ldr	r2, [r3, #28]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f022 020c 	bic.w	r2, r2, #12
 8004594:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	69d9      	ldr	r1, [r3, #28]
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	689a      	ldr	r2, [r3, #8]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	430a      	orrs	r2, r1
 80045a6:	61da      	str	r2, [r3, #28]
 80045a8:	e021      	b.n	80045ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b0c      	cmp	r3, #12
 80045ae:	d11c      	bne.n	80045ea <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6818      	ldr	r0, [r3, #0]
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	6819      	ldr	r1, [r3, #0]
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	685a      	ldr	r2, [r3, #4]
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	f000 face 	bl	8004b60 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	69da      	ldr	r2, [r3, #28]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80045d2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	69d9      	ldr	r1, [r3, #28]
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	021a      	lsls	r2, r3, #8
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	430a      	orrs	r2, r1
 80045e6:	61da      	str	r2, [r3, #28]
 80045e8:	e001      	b.n	80045ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3718      	adds	r7, #24
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800460a:	2300      	movs	r3, #0
 800460c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004614:	2b01      	cmp	r3, #1
 8004616:	d101      	bne.n	800461c <HAL_TIM_ConfigClockSource+0x1c>
 8004618:	2302      	movs	r3, #2
 800461a:	e0b4      	b.n	8004786 <HAL_TIM_ConfigClockSource+0x186>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2202      	movs	r2, #2
 8004628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800463a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004642:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68ba      	ldr	r2, [r7, #8]
 800464a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004654:	d03e      	beq.n	80046d4 <HAL_TIM_ConfigClockSource+0xd4>
 8004656:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800465a:	f200 8087 	bhi.w	800476c <HAL_TIM_ConfigClockSource+0x16c>
 800465e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004662:	f000 8086 	beq.w	8004772 <HAL_TIM_ConfigClockSource+0x172>
 8004666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800466a:	d87f      	bhi.n	800476c <HAL_TIM_ConfigClockSource+0x16c>
 800466c:	2b70      	cmp	r3, #112	; 0x70
 800466e:	d01a      	beq.n	80046a6 <HAL_TIM_ConfigClockSource+0xa6>
 8004670:	2b70      	cmp	r3, #112	; 0x70
 8004672:	d87b      	bhi.n	800476c <HAL_TIM_ConfigClockSource+0x16c>
 8004674:	2b60      	cmp	r3, #96	; 0x60
 8004676:	d050      	beq.n	800471a <HAL_TIM_ConfigClockSource+0x11a>
 8004678:	2b60      	cmp	r3, #96	; 0x60
 800467a:	d877      	bhi.n	800476c <HAL_TIM_ConfigClockSource+0x16c>
 800467c:	2b50      	cmp	r3, #80	; 0x50
 800467e:	d03c      	beq.n	80046fa <HAL_TIM_ConfigClockSource+0xfa>
 8004680:	2b50      	cmp	r3, #80	; 0x50
 8004682:	d873      	bhi.n	800476c <HAL_TIM_ConfigClockSource+0x16c>
 8004684:	2b40      	cmp	r3, #64	; 0x40
 8004686:	d058      	beq.n	800473a <HAL_TIM_ConfigClockSource+0x13a>
 8004688:	2b40      	cmp	r3, #64	; 0x40
 800468a:	d86f      	bhi.n	800476c <HAL_TIM_ConfigClockSource+0x16c>
 800468c:	2b30      	cmp	r3, #48	; 0x30
 800468e:	d064      	beq.n	800475a <HAL_TIM_ConfigClockSource+0x15a>
 8004690:	2b30      	cmp	r3, #48	; 0x30
 8004692:	d86b      	bhi.n	800476c <HAL_TIM_ConfigClockSource+0x16c>
 8004694:	2b20      	cmp	r3, #32
 8004696:	d060      	beq.n	800475a <HAL_TIM_ConfigClockSource+0x15a>
 8004698:	2b20      	cmp	r3, #32
 800469a:	d867      	bhi.n	800476c <HAL_TIM_ConfigClockSource+0x16c>
 800469c:	2b00      	cmp	r3, #0
 800469e:	d05c      	beq.n	800475a <HAL_TIM_ConfigClockSource+0x15a>
 80046a0:	2b10      	cmp	r3, #16
 80046a2:	d05a      	beq.n	800475a <HAL_TIM_ConfigClockSource+0x15a>
 80046a4:	e062      	b.n	800476c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6818      	ldr	r0, [r3, #0]
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	6899      	ldr	r1, [r3, #8]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	685a      	ldr	r2, [r3, #4]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	f000 faab 	bl	8004c10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68ba      	ldr	r2, [r7, #8]
 80046d0:	609a      	str	r2, [r3, #8]
      break;
 80046d2:	e04f      	b.n	8004774 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6818      	ldr	r0, [r3, #0]
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	6899      	ldr	r1, [r3, #8]
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	685a      	ldr	r2, [r3, #4]
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	f000 fa94 	bl	8004c10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	689a      	ldr	r2, [r3, #8]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046f6:	609a      	str	r2, [r3, #8]
      break;
 80046f8:	e03c      	b.n	8004774 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6818      	ldr	r0, [r3, #0]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	6859      	ldr	r1, [r3, #4]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	461a      	mov	r2, r3
 8004708:	f000 f952 	bl	80049b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2150      	movs	r1, #80	; 0x50
 8004712:	4618      	mov	r0, r3
 8004714:	f000 fa61 	bl	8004bda <TIM_ITRx_SetConfig>
      break;
 8004718:	e02c      	b.n	8004774 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6818      	ldr	r0, [r3, #0]
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	6859      	ldr	r1, [r3, #4]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	461a      	mov	r2, r3
 8004728:	f000 f9ae 	bl	8004a88 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2160      	movs	r1, #96	; 0x60
 8004732:	4618      	mov	r0, r3
 8004734:	f000 fa51 	bl	8004bda <TIM_ITRx_SetConfig>
      break;
 8004738:	e01c      	b.n	8004774 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6818      	ldr	r0, [r3, #0]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	6859      	ldr	r1, [r3, #4]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	461a      	mov	r2, r3
 8004748:	f000 f932 	bl	80049b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2140      	movs	r1, #64	; 0x40
 8004752:	4618      	mov	r0, r3
 8004754:	f000 fa41 	bl	8004bda <TIM_ITRx_SetConfig>
      break;
 8004758:	e00c      	b.n	8004774 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4619      	mov	r1, r3
 8004764:	4610      	mov	r0, r2
 8004766:	f000 fa38 	bl	8004bda <TIM_ITRx_SetConfig>
      break;
 800476a:	e003      	b.n	8004774 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	73fb      	strb	r3, [r7, #15]
      break;
 8004770:	e000      	b.n	8004774 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004772:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004784:	7bfb      	ldrb	r3, [r7, #15]
}
 8004786:	4618      	mov	r0, r3
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800478e:	b480      	push	{r7}
 8004790:	b083      	sub	sp, #12
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004796:	bf00      	nop
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr

080047a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047a2:	b480      	push	{r7}
 80047a4:	b083      	sub	sp, #12
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047aa:	bf00      	nop
 80047ac:	370c      	adds	r7, #12
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr

080047b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047b6:	b480      	push	{r7}
 80047b8:	b083      	sub	sp, #12
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047be:	bf00      	nop
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr

080047ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047ca:	b480      	push	{r7}
 80047cc:	b083      	sub	sp, #12
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047d2:	bf00      	nop
 80047d4:	370c      	adds	r7, #12
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
	...

080047e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a34      	ldr	r2, [pc, #208]	; (80048c4 <TIM_Base_SetConfig+0xe4>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d00f      	beq.n	8004818 <TIM_Base_SetConfig+0x38>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047fe:	d00b      	beq.n	8004818 <TIM_Base_SetConfig+0x38>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a31      	ldr	r2, [pc, #196]	; (80048c8 <TIM_Base_SetConfig+0xe8>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d007      	beq.n	8004818 <TIM_Base_SetConfig+0x38>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a30      	ldr	r2, [pc, #192]	; (80048cc <TIM_Base_SetConfig+0xec>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d003      	beq.n	8004818 <TIM_Base_SetConfig+0x38>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a2f      	ldr	r2, [pc, #188]	; (80048d0 <TIM_Base_SetConfig+0xf0>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d108      	bne.n	800482a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800481e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	4313      	orrs	r3, r2
 8004828:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a25      	ldr	r2, [pc, #148]	; (80048c4 <TIM_Base_SetConfig+0xe4>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d01b      	beq.n	800486a <TIM_Base_SetConfig+0x8a>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004838:	d017      	beq.n	800486a <TIM_Base_SetConfig+0x8a>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a22      	ldr	r2, [pc, #136]	; (80048c8 <TIM_Base_SetConfig+0xe8>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d013      	beq.n	800486a <TIM_Base_SetConfig+0x8a>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a21      	ldr	r2, [pc, #132]	; (80048cc <TIM_Base_SetConfig+0xec>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d00f      	beq.n	800486a <TIM_Base_SetConfig+0x8a>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a20      	ldr	r2, [pc, #128]	; (80048d0 <TIM_Base_SetConfig+0xf0>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d00b      	beq.n	800486a <TIM_Base_SetConfig+0x8a>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a1f      	ldr	r2, [pc, #124]	; (80048d4 <TIM_Base_SetConfig+0xf4>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d007      	beq.n	800486a <TIM_Base_SetConfig+0x8a>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a1e      	ldr	r2, [pc, #120]	; (80048d8 <TIM_Base_SetConfig+0xf8>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d003      	beq.n	800486a <TIM_Base_SetConfig+0x8a>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a1d      	ldr	r2, [pc, #116]	; (80048dc <TIM_Base_SetConfig+0xfc>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d108      	bne.n	800487c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004870:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	4313      	orrs	r3, r2
 800487a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	4313      	orrs	r3, r2
 8004888:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	689a      	ldr	r2, [r3, #8]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a08      	ldr	r2, [pc, #32]	; (80048c4 <TIM_Base_SetConfig+0xe4>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d103      	bne.n	80048b0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	691a      	ldr	r2, [r3, #16]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	615a      	str	r2, [r3, #20]
}
 80048b6:	bf00      	nop
 80048b8:	3714      	adds	r7, #20
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	40010000 	.word	0x40010000
 80048c8:	40000400 	.word	0x40000400
 80048cc:	40000800 	.word	0x40000800
 80048d0:	40000c00 	.word	0x40000c00
 80048d4:	40014000 	.word	0x40014000
 80048d8:	40014400 	.word	0x40014400
 80048dc:	40014800 	.word	0x40014800

080048e0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b087      	sub	sp, #28
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
 80048ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	f023 0201 	bic.w	r2, r3, #1
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6a1b      	ldr	r3, [r3, #32]
 8004904:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	4a24      	ldr	r2, [pc, #144]	; (800499c <TIM_TI1_SetConfig+0xbc>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d013      	beq.n	8004936 <TIM_TI1_SetConfig+0x56>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004914:	d00f      	beq.n	8004936 <TIM_TI1_SetConfig+0x56>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	4a21      	ldr	r2, [pc, #132]	; (80049a0 <TIM_TI1_SetConfig+0xc0>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d00b      	beq.n	8004936 <TIM_TI1_SetConfig+0x56>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	4a20      	ldr	r2, [pc, #128]	; (80049a4 <TIM_TI1_SetConfig+0xc4>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d007      	beq.n	8004936 <TIM_TI1_SetConfig+0x56>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	4a1f      	ldr	r2, [pc, #124]	; (80049a8 <TIM_TI1_SetConfig+0xc8>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d003      	beq.n	8004936 <TIM_TI1_SetConfig+0x56>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	4a1e      	ldr	r2, [pc, #120]	; (80049ac <TIM_TI1_SetConfig+0xcc>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d101      	bne.n	800493a <TIM_TI1_SetConfig+0x5a>
 8004936:	2301      	movs	r3, #1
 8004938:	e000      	b.n	800493c <TIM_TI1_SetConfig+0x5c>
 800493a:	2300      	movs	r3, #0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d008      	beq.n	8004952 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	f023 0303 	bic.w	r3, r3, #3
 8004946:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4313      	orrs	r3, r2
 800494e:	617b      	str	r3, [r7, #20]
 8004950:	e003      	b.n	800495a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f043 0301 	orr.w	r3, r3, #1
 8004958:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004960:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	011b      	lsls	r3, r3, #4
 8004966:	b2db      	uxtb	r3, r3
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	4313      	orrs	r3, r2
 800496c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	f023 030a 	bic.w	r3, r3, #10
 8004974:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	f003 030a 	and.w	r3, r3, #10
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	4313      	orrs	r3, r2
 8004980:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	697a      	ldr	r2, [r7, #20]
 8004986:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	693a      	ldr	r2, [r7, #16]
 800498c:	621a      	str	r2, [r3, #32]
}
 800498e:	bf00      	nop
 8004990:	371c      	adds	r7, #28
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	40010000 	.word	0x40010000
 80049a0:	40000400 	.word	0x40000400
 80049a4:	40000800 	.word	0x40000800
 80049a8:	40000c00 	.word	0x40000c00
 80049ac:	40014000 	.word	0x40014000

080049b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b087      	sub	sp, #28
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6a1b      	ldr	r3, [r3, #32]
 80049c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	f023 0201 	bic.w	r2, r3, #1
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	011b      	lsls	r3, r3, #4
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f023 030a 	bic.w	r3, r3, #10
 80049ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	693a      	ldr	r2, [r7, #16]
 80049fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	621a      	str	r2, [r3, #32]
}
 8004a02:	bf00      	nop
 8004a04:	371c      	adds	r7, #28
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr

08004a0e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b087      	sub	sp, #28
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	60f8      	str	r0, [r7, #12]
 8004a16:	60b9      	str	r1, [r7, #8]
 8004a18:	607a      	str	r2, [r7, #4]
 8004a1a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6a1b      	ldr	r3, [r3, #32]
 8004a20:	f023 0210 	bic.w	r2, r3, #16
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a3a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	021b      	lsls	r3, r3, #8
 8004a40:	697a      	ldr	r2, [r7, #20]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	031b      	lsls	r3, r3, #12
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a60:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	011b      	lsls	r3, r3, #4
 8004a66:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	697a      	ldr	r2, [r7, #20]
 8004a74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	693a      	ldr	r2, [r7, #16]
 8004a7a:	621a      	str	r2, [r3, #32]
}
 8004a7c:	bf00      	nop
 8004a7e:	371c      	adds	r7, #28
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b087      	sub	sp, #28
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6a1b      	ldr	r3, [r3, #32]
 8004a98:	f023 0210 	bic.w	r2, r3, #16
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ab2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	031b      	lsls	r3, r3, #12
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ac4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	011b      	lsls	r3, r3, #4
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	621a      	str	r2, [r3, #32]
}
 8004adc:	bf00      	nop
 8004ade:	371c      	adds	r7, #28
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b087      	sub	sp, #28
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
 8004af4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	69db      	ldr	r3, [r3, #28]
 8004b06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6a1b      	ldr	r3, [r3, #32]
 8004b0c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	f023 0303 	bic.w	r3, r3, #3
 8004b14:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b24:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	011b      	lsls	r3, r3, #4
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004b38:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	021b      	lsls	r3, r3, #8
 8004b3e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	621a      	str	r2, [r3, #32]
}
 8004b54:	bf00      	nop
 8004b56:	371c      	adds	r7, #28
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b087      	sub	sp, #28
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
 8004b6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	69db      	ldr	r3, [r3, #28]
 8004b7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6a1b      	ldr	r3, [r3, #32]
 8004b84:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b8c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	021b      	lsls	r3, r3, #8
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b9e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	031b      	lsls	r3, r3, #12
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004bb2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	031b      	lsls	r3, r3, #12
 8004bb8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	621a      	str	r2, [r3, #32]
}
 8004bce:	bf00      	nop
 8004bd0:	371c      	adds	r7, #28
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr

08004bda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	b085      	sub	sp, #20
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
 8004be2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	f043 0307 	orr.w	r3, r3, #7
 8004bfc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	609a      	str	r2, [r3, #8]
}
 8004c04:	bf00      	nop
 8004c06:	3714      	adds	r7, #20
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b087      	sub	sp, #28
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
 8004c1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	021a      	lsls	r2, r3, #8
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	431a      	orrs	r2, r3
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	697a      	ldr	r2, [r7, #20]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	697a      	ldr	r2, [r7, #20]
 8004c42:	609a      	str	r2, [r3, #8]
}
 8004c44:	bf00      	nop
 8004c46:	371c      	adds	r7, #28
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b087      	sub	sp, #28
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	f003 031f 	and.w	r3, r3, #31
 8004c62:	2201      	movs	r2, #1
 8004c64:	fa02 f303 	lsl.w	r3, r2, r3
 8004c68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6a1a      	ldr	r2, [r3, #32]
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	43db      	mvns	r3, r3
 8004c72:	401a      	ands	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6a1a      	ldr	r2, [r3, #32]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	f003 031f 	and.w	r3, r3, #31
 8004c82:	6879      	ldr	r1, [r7, #4]
 8004c84:	fa01 f303 	lsl.w	r3, r1, r3
 8004c88:	431a      	orrs	r2, r3
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	621a      	str	r2, [r3, #32]
}
 8004c8e:	bf00      	nop
 8004c90:	371c      	adds	r7, #28
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
	...

08004c9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d101      	bne.n	8004cb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cb0:	2302      	movs	r3, #2
 8004cb2:	e050      	b.n	8004d56 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a1c      	ldr	r2, [pc, #112]	; (8004d64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d018      	beq.n	8004d2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d00:	d013      	beq.n	8004d2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a18      	ldr	r2, [pc, #96]	; (8004d68 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d00e      	beq.n	8004d2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a16      	ldr	r2, [pc, #88]	; (8004d6c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d009      	beq.n	8004d2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a15      	ldr	r2, [pc, #84]	; (8004d70 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d004      	beq.n	8004d2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a13      	ldr	r2, [pc, #76]	; (8004d74 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d10c      	bne.n	8004d44 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	68ba      	ldr	r2, [r7, #8]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68ba      	ldr	r2, [r7, #8]
 8004d42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3714      	adds	r7, #20
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	40010000 	.word	0x40010000
 8004d68:	40000400 	.word	0x40000400
 8004d6c:	40000800 	.word	0x40000800
 8004d70:	40000c00 	.word	0x40000c00
 8004d74:	40014000 	.word	0x40014000

08004d78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d80:	bf00      	nop
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e03f      	b.n	8004e32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d106      	bne.n	8004dcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f7fd f9ce 	bl	8002168 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2224      	movs	r2, #36	; 0x24
 8004dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68da      	ldr	r2, [r3, #12]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004de2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f000 fd23 	bl	8005830 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	691a      	ldr	r2, [r3, #16]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004df8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	695a      	ldr	r2, [r3, #20]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68da      	ldr	r2, [r3, #12]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2220      	movs	r2, #32
 8004e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3708      	adds	r7, #8
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b085      	sub	sp, #20
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	60f8      	str	r0, [r7, #12]
 8004e42:	60b9      	str	r1, [r7, #8]
 8004e44:	4613      	mov	r3, r2
 8004e46:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b20      	cmp	r3, #32
 8004e52:	d130      	bne.n	8004eb6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d002      	beq.n	8004e60 <HAL_UART_Transmit_IT+0x26>
 8004e5a:	88fb      	ldrh	r3, [r7, #6]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d101      	bne.n	8004e64 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e029      	b.n	8004eb8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d101      	bne.n	8004e72 <HAL_UART_Transmit_IT+0x38>
 8004e6e:	2302      	movs	r3, #2
 8004e70:	e022      	b.n	8004eb8 <HAL_UART_Transmit_IT+0x7e>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	68ba      	ldr	r2, [r7, #8]
 8004e7e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	88fa      	ldrh	r2, [r7, #6]
 8004e84:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	88fa      	ldrh	r2, [r7, #6]
 8004e8a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2221      	movs	r2, #33	; 0x21
 8004e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68da      	ldr	r2, [r3, #12]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004eb0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	e000      	b.n	8004eb8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004eb6:	2302      	movs	r3, #2
  }
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3714      	adds	r7, #20
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2b20      	cmp	r3, #32
 8004edc:	d11d      	bne.n	8004f1a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d002      	beq.n	8004eea <HAL_UART_Receive_IT+0x26>
 8004ee4:	88fb      	ldrh	r3, [r7, #6]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d101      	bne.n	8004eee <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e016      	b.n	8004f1c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d101      	bne.n	8004efc <HAL_UART_Receive_IT+0x38>
 8004ef8:	2302      	movs	r3, #2
 8004efa:	e00f      	b.n	8004f1c <HAL_UART_Receive_IT+0x58>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004f0a:	88fb      	ldrh	r3, [r7, #6]
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	68b9      	ldr	r1, [r7, #8]
 8004f10:	68f8      	ldr	r0, [r7, #12]
 8004f12:	f000 fab5 	bl	8005480 <UART_Start_Receive_IT>
 8004f16:	4603      	mov	r3, r0
 8004f18:	e000      	b.n	8004f1c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004f1a:	2302      	movs	r3, #2
  }
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b0ba      	sub	sp, #232	; 0xe8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004f50:	2300      	movs	r3, #0
 8004f52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f5a:	f003 030f 	and.w	r3, r3, #15
 8004f5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004f62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d10f      	bne.n	8004f8a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f6e:	f003 0320 	and.w	r3, r3, #32
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d009      	beq.n	8004f8a <HAL_UART_IRQHandler+0x66>
 8004f76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f7a:	f003 0320 	and.w	r3, r3, #32
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d003      	beq.n	8004f8a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 fb99 	bl	80056ba <UART_Receive_IT>
      return;
 8004f88:	e256      	b.n	8005438 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004f8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	f000 80de 	beq.w	8005150 <HAL_UART_IRQHandler+0x22c>
 8004f94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f98:	f003 0301 	and.w	r3, r3, #1
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d106      	bne.n	8004fae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fa4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	f000 80d1 	beq.w	8005150 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fb2:	f003 0301 	and.w	r3, r3, #1
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00b      	beq.n	8004fd2 <HAL_UART_IRQHandler+0xae>
 8004fba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d005      	beq.n	8004fd2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fca:	f043 0201 	orr.w	r2, r3, #1
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fd6:	f003 0304 	and.w	r3, r3, #4
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00b      	beq.n	8004ff6 <HAL_UART_IRQHandler+0xd2>
 8004fde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d005      	beq.n	8004ff6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fee:	f043 0202 	orr.w	r2, r3, #2
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ffa:	f003 0302 	and.w	r3, r3, #2
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00b      	beq.n	800501a <HAL_UART_IRQHandler+0xf6>
 8005002:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005006:	f003 0301 	and.w	r3, r3, #1
 800500a:	2b00      	cmp	r3, #0
 800500c:	d005      	beq.n	800501a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005012:	f043 0204 	orr.w	r2, r3, #4
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800501a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800501e:	f003 0308 	and.w	r3, r3, #8
 8005022:	2b00      	cmp	r3, #0
 8005024:	d011      	beq.n	800504a <HAL_UART_IRQHandler+0x126>
 8005026:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800502a:	f003 0320 	and.w	r3, r3, #32
 800502e:	2b00      	cmp	r3, #0
 8005030:	d105      	bne.n	800503e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005032:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	2b00      	cmp	r3, #0
 800503c:	d005      	beq.n	800504a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005042:	f043 0208 	orr.w	r2, r3, #8
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504e:	2b00      	cmp	r3, #0
 8005050:	f000 81ed 	beq.w	800542e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005058:	f003 0320 	and.w	r3, r3, #32
 800505c:	2b00      	cmp	r3, #0
 800505e:	d008      	beq.n	8005072 <HAL_UART_IRQHandler+0x14e>
 8005060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005064:	f003 0320 	and.w	r3, r3, #32
 8005068:	2b00      	cmp	r3, #0
 800506a:	d002      	beq.n	8005072 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 fb24 	bl	80056ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800507c:	2b40      	cmp	r3, #64	; 0x40
 800507e:	bf0c      	ite	eq
 8005080:	2301      	moveq	r3, #1
 8005082:	2300      	movne	r3, #0
 8005084:	b2db      	uxtb	r3, r3
 8005086:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508e:	f003 0308 	and.w	r3, r3, #8
 8005092:	2b00      	cmp	r3, #0
 8005094:	d103      	bne.n	800509e <HAL_UART_IRQHandler+0x17a>
 8005096:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800509a:	2b00      	cmp	r3, #0
 800509c:	d04f      	beq.n	800513e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 fa2c 	bl	80054fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ae:	2b40      	cmp	r3, #64	; 0x40
 80050b0:	d141      	bne.n	8005136 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	3314      	adds	r3, #20
 80050b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050c0:	e853 3f00 	ldrex	r3, [r3]
 80050c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80050c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80050cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	3314      	adds	r3, #20
 80050da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80050de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80050e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80050ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80050ee:	e841 2300 	strex	r3, r2, [r1]
 80050f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80050f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1d9      	bne.n	80050b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005102:	2b00      	cmp	r3, #0
 8005104:	d013      	beq.n	800512e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510a:	4a7d      	ldr	r2, [pc, #500]	; (8005300 <HAL_UART_IRQHandler+0x3dc>)
 800510c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005112:	4618      	mov	r0, r3
 8005114:	f7fe f879 	bl	800320a <HAL_DMA_Abort_IT>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d016      	beq.n	800514c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005128:	4610      	mov	r0, r2
 800512a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800512c:	e00e      	b.n	800514c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f990 	bl	8005454 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005134:	e00a      	b.n	800514c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 f98c 	bl	8005454 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800513c:	e006      	b.n	800514c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f988 	bl	8005454 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800514a:	e170      	b.n	800542e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800514c:	bf00      	nop
    return;
 800514e:	e16e      	b.n	800542e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005154:	2b01      	cmp	r3, #1
 8005156:	f040 814a 	bne.w	80053ee <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800515a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800515e:	f003 0310 	and.w	r3, r3, #16
 8005162:	2b00      	cmp	r3, #0
 8005164:	f000 8143 	beq.w	80053ee <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800516c:	f003 0310 	and.w	r3, r3, #16
 8005170:	2b00      	cmp	r3, #0
 8005172:	f000 813c 	beq.w	80053ee <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005176:	2300      	movs	r3, #0
 8005178:	60bb      	str	r3, [r7, #8]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	60bb      	str	r3, [r7, #8]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	60bb      	str	r3, [r7, #8]
 800518a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	695b      	ldr	r3, [r3, #20]
 8005192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005196:	2b40      	cmp	r3, #64	; 0x40
 8005198:	f040 80b4 	bne.w	8005304 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80051a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f000 8140 	beq.w	8005432 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80051b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80051ba:	429a      	cmp	r2, r3
 80051bc:	f080 8139 	bcs.w	8005432 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80051c6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051cc:	69db      	ldr	r3, [r3, #28]
 80051ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051d2:	f000 8088 	beq.w	80052e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	330c      	adds	r3, #12
 80051dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051e4:	e853 3f00 	ldrex	r3, [r3]
 80051e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80051ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	330c      	adds	r3, #12
 80051fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005202:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005206:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800520e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005212:	e841 2300 	strex	r3, r2, [r1]
 8005216:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800521a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1d9      	bne.n	80051d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	3314      	adds	r3, #20
 8005228:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800522c:	e853 3f00 	ldrex	r3, [r3]
 8005230:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005232:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005234:	f023 0301 	bic.w	r3, r3, #1
 8005238:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	3314      	adds	r3, #20
 8005242:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005246:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800524a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800524c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800524e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005252:	e841 2300 	strex	r3, r2, [r1]
 8005256:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005258:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1e1      	bne.n	8005222 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	3314      	adds	r3, #20
 8005264:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005266:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005268:	e853 3f00 	ldrex	r3, [r3]
 800526c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800526e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005270:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005274:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	3314      	adds	r3, #20
 800527e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005282:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005284:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005286:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005288:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800528a:	e841 2300 	strex	r3, r2, [r1]
 800528e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005290:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1e3      	bne.n	800525e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2220      	movs	r2, #32
 800529a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	330c      	adds	r3, #12
 80052aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052ae:	e853 3f00 	ldrex	r3, [r3]
 80052b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80052b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052b6:	f023 0310 	bic.w	r3, r3, #16
 80052ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	330c      	adds	r3, #12
 80052c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80052c8:	65ba      	str	r2, [r7, #88]	; 0x58
 80052ca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80052ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052d0:	e841 2300 	strex	r3, r2, [r1]
 80052d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80052d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1e3      	bne.n	80052a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e0:	4618      	mov	r0, r3
 80052e2:	f7fd ff22 	bl	800312a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	4619      	mov	r1, r3
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 f8b6 	bl	8005468 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80052fc:	e099      	b.n	8005432 <HAL_UART_IRQHandler+0x50e>
 80052fe:	bf00      	nop
 8005300:	080055c3 	.word	0x080055c3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800530c:	b29b      	uxth	r3, r3
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005318:	b29b      	uxth	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	f000 808b 	beq.w	8005436 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005320:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005324:	2b00      	cmp	r3, #0
 8005326:	f000 8086 	beq.w	8005436 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	330c      	adds	r3, #12
 8005330:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005334:	e853 3f00 	ldrex	r3, [r3]
 8005338:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800533a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800533c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005340:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	330c      	adds	r3, #12
 800534a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800534e:	647a      	str	r2, [r7, #68]	; 0x44
 8005350:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005352:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005354:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005356:	e841 2300 	strex	r3, r2, [r1]
 800535a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800535c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1e3      	bne.n	800532a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	3314      	adds	r3, #20
 8005368:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536c:	e853 3f00 	ldrex	r3, [r3]
 8005370:	623b      	str	r3, [r7, #32]
   return(result);
 8005372:	6a3b      	ldr	r3, [r7, #32]
 8005374:	f023 0301 	bic.w	r3, r3, #1
 8005378:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	3314      	adds	r3, #20
 8005382:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005386:	633a      	str	r2, [r7, #48]	; 0x30
 8005388:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800538c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800538e:	e841 2300 	strex	r3, r2, [r1]
 8005392:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1e3      	bne.n	8005362 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2220      	movs	r2, #32
 800539e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	330c      	adds	r3, #12
 80053ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	e853 3f00 	ldrex	r3, [r3]
 80053b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f023 0310 	bic.w	r3, r3, #16
 80053be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	330c      	adds	r3, #12
 80053c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80053cc:	61fa      	str	r2, [r7, #28]
 80053ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d0:	69b9      	ldr	r1, [r7, #24]
 80053d2:	69fa      	ldr	r2, [r7, #28]
 80053d4:	e841 2300 	strex	r3, r2, [r1]
 80053d8:	617b      	str	r3, [r7, #20]
   return(result);
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d1e3      	bne.n	80053a8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80053e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80053e4:	4619      	mov	r1, r3
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f83e 	bl	8005468 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80053ec:	e023      	b.n	8005436 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80053ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d009      	beq.n	800540e <HAL_UART_IRQHandler+0x4ea>
 80053fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005402:	2b00      	cmp	r3, #0
 8005404:	d003      	beq.n	800540e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 f8ef 	bl	80055ea <UART_Transmit_IT>
    return;
 800540c:	e014      	b.n	8005438 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800540e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00e      	beq.n	8005438 <HAL_UART_IRQHandler+0x514>
 800541a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800541e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005422:	2b00      	cmp	r3, #0
 8005424:	d008      	beq.n	8005438 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f92f 	bl	800568a <UART_EndTransmit_IT>
    return;
 800542c:	e004      	b.n	8005438 <HAL_UART_IRQHandler+0x514>
    return;
 800542e:	bf00      	nop
 8005430:	e002      	b.n	8005438 <HAL_UART_IRQHandler+0x514>
      return;
 8005432:	bf00      	nop
 8005434:	e000      	b.n	8005438 <HAL_UART_IRQHandler+0x514>
      return;
 8005436:	bf00      	nop
  }
}
 8005438:	37e8      	adds	r7, #232	; 0xe8
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop

08005440 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005448:	bf00      	nop
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	460b      	mov	r3, r1
 8005472:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005474:	bf00      	nop
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005480:	b480      	push	{r7}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	4613      	mov	r3, r2
 800548c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	68ba      	ldr	r2, [r7, #8]
 8005492:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	88fa      	ldrh	r2, [r7, #6]
 8005498:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	88fa      	ldrh	r2, [r7, #6]
 800549e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2222      	movs	r2, #34	; 0x22
 80054aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d007      	beq.n	80054ce <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68da      	ldr	r2, [r3, #12]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054cc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	695a      	ldr	r2, [r3, #20]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f042 0201 	orr.w	r2, r2, #1
 80054dc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68da      	ldr	r2, [r3, #12]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f042 0220 	orr.w	r2, r2, #32
 80054ec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3714      	adds	r7, #20
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b095      	sub	sp, #84	; 0x54
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	330c      	adds	r3, #12
 800550a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800550c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800550e:	e853 3f00 	ldrex	r3, [r3]
 8005512:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005516:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800551a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	330c      	adds	r3, #12
 8005522:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005524:	643a      	str	r2, [r7, #64]	; 0x40
 8005526:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005528:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800552a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800552c:	e841 2300 	strex	r3, r2, [r1]
 8005530:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1e5      	bne.n	8005504 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	3314      	adds	r3, #20
 800553e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005540:	6a3b      	ldr	r3, [r7, #32]
 8005542:	e853 3f00 	ldrex	r3, [r3]
 8005546:	61fb      	str	r3, [r7, #28]
   return(result);
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	f023 0301 	bic.w	r3, r3, #1
 800554e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	3314      	adds	r3, #20
 8005556:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005558:	62fa      	str	r2, [r7, #44]	; 0x2c
 800555a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800555e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005560:	e841 2300 	strex	r3, r2, [r1]
 8005564:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005568:	2b00      	cmp	r3, #0
 800556a:	d1e5      	bne.n	8005538 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005570:	2b01      	cmp	r3, #1
 8005572:	d119      	bne.n	80055a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	330c      	adds	r3, #12
 800557a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	e853 3f00 	ldrex	r3, [r3]
 8005582:	60bb      	str	r3, [r7, #8]
   return(result);
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	f023 0310 	bic.w	r3, r3, #16
 800558a:	647b      	str	r3, [r7, #68]	; 0x44
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	330c      	adds	r3, #12
 8005592:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005594:	61ba      	str	r2, [r7, #24]
 8005596:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005598:	6979      	ldr	r1, [r7, #20]
 800559a:	69ba      	ldr	r2, [r7, #24]
 800559c:	e841 2300 	strex	r3, r2, [r1]
 80055a0:	613b      	str	r3, [r7, #16]
   return(result);
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d1e5      	bne.n	8005574 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2220      	movs	r2, #32
 80055ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80055b6:	bf00      	nop
 80055b8:	3754      	adds	r7, #84	; 0x54
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr

080055c2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b084      	sub	sp, #16
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055dc:	68f8      	ldr	r0, [r7, #12]
 80055de:	f7ff ff39 	bl	8005454 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055e2:	bf00      	nop
 80055e4:	3710      	adds	r7, #16
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}

080055ea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80055ea:	b480      	push	{r7}
 80055ec:	b085      	sub	sp, #20
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	2b21      	cmp	r3, #33	; 0x21
 80055fc:	d13e      	bne.n	800567c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005606:	d114      	bne.n	8005632 <UART_Transmit_IT+0x48>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d110      	bne.n	8005632 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a1b      	ldr	r3, [r3, #32]
 8005614:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	881b      	ldrh	r3, [r3, #0]
 800561a:	461a      	mov	r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005624:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	1c9a      	adds	r2, r3, #2
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	621a      	str	r2, [r3, #32]
 8005630:	e008      	b.n	8005644 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	1c59      	adds	r1, r3, #1
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	6211      	str	r1, [r2, #32]
 800563c:	781a      	ldrb	r2, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005648:	b29b      	uxth	r3, r3
 800564a:	3b01      	subs	r3, #1
 800564c:	b29b      	uxth	r3, r3
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	4619      	mov	r1, r3
 8005652:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005654:	2b00      	cmp	r3, #0
 8005656:	d10f      	bne.n	8005678 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68da      	ldr	r2, [r3, #12]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005666:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68da      	ldr	r2, [r3, #12]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005676:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005678:	2300      	movs	r3, #0
 800567a:	e000      	b.n	800567e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800567c:	2302      	movs	r3, #2
  }
}
 800567e:	4618      	mov	r0, r3
 8005680:	3714      	adds	r7, #20
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr

0800568a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800568a:	b580      	push	{r7, lr}
 800568c:	b082      	sub	sp, #8
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68da      	ldr	r2, [r3, #12]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2220      	movs	r2, #32
 80056a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f7ff fec8 	bl	8005440 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3708      	adds	r7, #8
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b08c      	sub	sp, #48	; 0x30
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	2b22      	cmp	r3, #34	; 0x22
 80056cc:	f040 80ab 	bne.w	8005826 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056d8:	d117      	bne.n	800570a <UART_Receive_IT+0x50>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d113      	bne.n	800570a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80056e2:	2300      	movs	r3, #0
 80056e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ea:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005702:	1c9a      	adds	r2, r3, #2
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	629a      	str	r2, [r3, #40]	; 0x28
 8005708:	e026      	b.n	8005758 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800570e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005710:	2300      	movs	r3, #0
 8005712:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800571c:	d007      	beq.n	800572e <UART_Receive_IT+0x74>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d10a      	bne.n	800573c <UART_Receive_IT+0x82>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d106      	bne.n	800573c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	b2da      	uxtb	r2, r3
 8005736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005738:	701a      	strb	r2, [r3, #0]
 800573a:	e008      	b.n	800574e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	b2db      	uxtb	r3, r3
 8005744:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005748:	b2da      	uxtb	r2, r3
 800574a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800574c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005752:	1c5a      	adds	r2, r3, #1
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800575c:	b29b      	uxth	r3, r3
 800575e:	3b01      	subs	r3, #1
 8005760:	b29b      	uxth	r3, r3
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	4619      	mov	r1, r3
 8005766:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005768:	2b00      	cmp	r3, #0
 800576a:	d15a      	bne.n	8005822 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68da      	ldr	r2, [r3, #12]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f022 0220 	bic.w	r2, r2, #32
 800577a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68da      	ldr	r2, [r3, #12]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800578a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	695a      	ldr	r2, [r3, #20]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f022 0201 	bic.w	r2, r2, #1
 800579a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2220      	movs	r2, #32
 80057a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d135      	bne.n	8005818 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	330c      	adds	r3, #12
 80057b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	e853 3f00 	ldrex	r3, [r3]
 80057c0:	613b      	str	r3, [r7, #16]
   return(result);
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	f023 0310 	bic.w	r3, r3, #16
 80057c8:	627b      	str	r3, [r7, #36]	; 0x24
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	330c      	adds	r3, #12
 80057d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057d2:	623a      	str	r2, [r7, #32]
 80057d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d6:	69f9      	ldr	r1, [r7, #28]
 80057d8:	6a3a      	ldr	r2, [r7, #32]
 80057da:	e841 2300 	strex	r3, r2, [r1]
 80057de:	61bb      	str	r3, [r7, #24]
   return(result);
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d1e5      	bne.n	80057b2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 0310 	and.w	r3, r3, #16
 80057f0:	2b10      	cmp	r3, #16
 80057f2:	d10a      	bne.n	800580a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80057f4:	2300      	movs	r3, #0
 80057f6:	60fb      	str	r3, [r7, #12]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	60fb      	str	r3, [r7, #12]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	60fb      	str	r3, [r7, #12]
 8005808:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800580e:	4619      	mov	r1, r3
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f7ff fe29 	bl	8005468 <HAL_UARTEx_RxEventCallback>
 8005816:	e002      	b.n	800581e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f7fb fb8b 	bl	8000f34 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800581e:	2300      	movs	r3, #0
 8005820:	e002      	b.n	8005828 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005822:	2300      	movs	r3, #0
 8005824:	e000      	b.n	8005828 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005826:	2302      	movs	r3, #2
  }
}
 8005828:	4618      	mov	r0, r3
 800582a:	3730      	adds	r7, #48	; 0x30
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005830:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005834:	b0c0      	sub	sp, #256	; 0x100
 8005836:	af00      	add	r7, sp, #0
 8005838:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800583c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800584c:	68d9      	ldr	r1, [r3, #12]
 800584e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	ea40 0301 	orr.w	r3, r0, r1
 8005858:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800585a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800585e:	689a      	ldr	r2, [r3, #8]
 8005860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	431a      	orrs	r2, r3
 8005868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800586c:	695b      	ldr	r3, [r3, #20]
 800586e:	431a      	orrs	r2, r3
 8005870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005874:	69db      	ldr	r3, [r3, #28]
 8005876:	4313      	orrs	r3, r2
 8005878:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800587c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005888:	f021 010c 	bic.w	r1, r1, #12
 800588c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005896:	430b      	orrs	r3, r1
 8005898:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800589a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80058a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058aa:	6999      	ldr	r1, [r3, #24]
 80058ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	ea40 0301 	orr.w	r3, r0, r1
 80058b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	4b8f      	ldr	r3, [pc, #572]	; (8005afc <UART_SetConfig+0x2cc>)
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d005      	beq.n	80058d0 <UART_SetConfig+0xa0>
 80058c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	4b8d      	ldr	r3, [pc, #564]	; (8005b00 <UART_SetConfig+0x2d0>)
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d104      	bne.n	80058da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80058d0:	f7fe fb1c 	bl	8003f0c <HAL_RCC_GetPCLK2Freq>
 80058d4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80058d8:	e003      	b.n	80058e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80058da:	f7fe fb03 	bl	8003ee4 <HAL_RCC_GetPCLK1Freq>
 80058de:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058e6:	69db      	ldr	r3, [r3, #28]
 80058e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058ec:	f040 810c 	bne.w	8005b08 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80058f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058f4:	2200      	movs	r2, #0
 80058f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80058fa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80058fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005902:	4622      	mov	r2, r4
 8005904:	462b      	mov	r3, r5
 8005906:	1891      	adds	r1, r2, r2
 8005908:	65b9      	str	r1, [r7, #88]	; 0x58
 800590a:	415b      	adcs	r3, r3
 800590c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800590e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005912:	4621      	mov	r1, r4
 8005914:	eb12 0801 	adds.w	r8, r2, r1
 8005918:	4629      	mov	r1, r5
 800591a:	eb43 0901 	adc.w	r9, r3, r1
 800591e:	f04f 0200 	mov.w	r2, #0
 8005922:	f04f 0300 	mov.w	r3, #0
 8005926:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800592a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800592e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005932:	4690      	mov	r8, r2
 8005934:	4699      	mov	r9, r3
 8005936:	4623      	mov	r3, r4
 8005938:	eb18 0303 	adds.w	r3, r8, r3
 800593c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005940:	462b      	mov	r3, r5
 8005942:	eb49 0303 	adc.w	r3, r9, r3
 8005946:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800594a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005956:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800595a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800595e:	460b      	mov	r3, r1
 8005960:	18db      	adds	r3, r3, r3
 8005962:	653b      	str	r3, [r7, #80]	; 0x50
 8005964:	4613      	mov	r3, r2
 8005966:	eb42 0303 	adc.w	r3, r2, r3
 800596a:	657b      	str	r3, [r7, #84]	; 0x54
 800596c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005970:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005974:	f7fb f826 	bl	80009c4 <__aeabi_uldivmod>
 8005978:	4602      	mov	r2, r0
 800597a:	460b      	mov	r3, r1
 800597c:	4b61      	ldr	r3, [pc, #388]	; (8005b04 <UART_SetConfig+0x2d4>)
 800597e:	fba3 2302 	umull	r2, r3, r3, r2
 8005982:	095b      	lsrs	r3, r3, #5
 8005984:	011c      	lsls	r4, r3, #4
 8005986:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800598a:	2200      	movs	r2, #0
 800598c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005990:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005994:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005998:	4642      	mov	r2, r8
 800599a:	464b      	mov	r3, r9
 800599c:	1891      	adds	r1, r2, r2
 800599e:	64b9      	str	r1, [r7, #72]	; 0x48
 80059a0:	415b      	adcs	r3, r3
 80059a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80059a8:	4641      	mov	r1, r8
 80059aa:	eb12 0a01 	adds.w	sl, r2, r1
 80059ae:	4649      	mov	r1, r9
 80059b0:	eb43 0b01 	adc.w	fp, r3, r1
 80059b4:	f04f 0200 	mov.w	r2, #0
 80059b8:	f04f 0300 	mov.w	r3, #0
 80059bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80059c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80059c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059c8:	4692      	mov	sl, r2
 80059ca:	469b      	mov	fp, r3
 80059cc:	4643      	mov	r3, r8
 80059ce:	eb1a 0303 	adds.w	r3, sl, r3
 80059d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80059d6:	464b      	mov	r3, r9
 80059d8:	eb4b 0303 	adc.w	r3, fp, r3
 80059dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80059e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059ec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80059f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80059f4:	460b      	mov	r3, r1
 80059f6:	18db      	adds	r3, r3, r3
 80059f8:	643b      	str	r3, [r7, #64]	; 0x40
 80059fa:	4613      	mov	r3, r2
 80059fc:	eb42 0303 	adc.w	r3, r2, r3
 8005a00:	647b      	str	r3, [r7, #68]	; 0x44
 8005a02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005a06:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005a0a:	f7fa ffdb 	bl	80009c4 <__aeabi_uldivmod>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	460b      	mov	r3, r1
 8005a12:	4611      	mov	r1, r2
 8005a14:	4b3b      	ldr	r3, [pc, #236]	; (8005b04 <UART_SetConfig+0x2d4>)
 8005a16:	fba3 2301 	umull	r2, r3, r3, r1
 8005a1a:	095b      	lsrs	r3, r3, #5
 8005a1c:	2264      	movs	r2, #100	; 0x64
 8005a1e:	fb02 f303 	mul.w	r3, r2, r3
 8005a22:	1acb      	subs	r3, r1, r3
 8005a24:	00db      	lsls	r3, r3, #3
 8005a26:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005a2a:	4b36      	ldr	r3, [pc, #216]	; (8005b04 <UART_SetConfig+0x2d4>)
 8005a2c:	fba3 2302 	umull	r2, r3, r3, r2
 8005a30:	095b      	lsrs	r3, r3, #5
 8005a32:	005b      	lsls	r3, r3, #1
 8005a34:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a38:	441c      	add	r4, r3
 8005a3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a44:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005a48:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005a4c:	4642      	mov	r2, r8
 8005a4e:	464b      	mov	r3, r9
 8005a50:	1891      	adds	r1, r2, r2
 8005a52:	63b9      	str	r1, [r7, #56]	; 0x38
 8005a54:	415b      	adcs	r3, r3
 8005a56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005a5c:	4641      	mov	r1, r8
 8005a5e:	1851      	adds	r1, r2, r1
 8005a60:	6339      	str	r1, [r7, #48]	; 0x30
 8005a62:	4649      	mov	r1, r9
 8005a64:	414b      	adcs	r3, r1
 8005a66:	637b      	str	r3, [r7, #52]	; 0x34
 8005a68:	f04f 0200 	mov.w	r2, #0
 8005a6c:	f04f 0300 	mov.w	r3, #0
 8005a70:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005a74:	4659      	mov	r1, fp
 8005a76:	00cb      	lsls	r3, r1, #3
 8005a78:	4651      	mov	r1, sl
 8005a7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a7e:	4651      	mov	r1, sl
 8005a80:	00ca      	lsls	r2, r1, #3
 8005a82:	4610      	mov	r0, r2
 8005a84:	4619      	mov	r1, r3
 8005a86:	4603      	mov	r3, r0
 8005a88:	4642      	mov	r2, r8
 8005a8a:	189b      	adds	r3, r3, r2
 8005a8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a90:	464b      	mov	r3, r9
 8005a92:	460a      	mov	r2, r1
 8005a94:	eb42 0303 	adc.w	r3, r2, r3
 8005a98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005aa8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005aac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	18db      	adds	r3, r3, r3
 8005ab4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	eb42 0303 	adc.w	r3, r2, r3
 8005abc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005abe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005ac2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005ac6:	f7fa ff7d 	bl	80009c4 <__aeabi_uldivmod>
 8005aca:	4602      	mov	r2, r0
 8005acc:	460b      	mov	r3, r1
 8005ace:	4b0d      	ldr	r3, [pc, #52]	; (8005b04 <UART_SetConfig+0x2d4>)
 8005ad0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ad4:	095b      	lsrs	r3, r3, #5
 8005ad6:	2164      	movs	r1, #100	; 0x64
 8005ad8:	fb01 f303 	mul.w	r3, r1, r3
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	00db      	lsls	r3, r3, #3
 8005ae0:	3332      	adds	r3, #50	; 0x32
 8005ae2:	4a08      	ldr	r2, [pc, #32]	; (8005b04 <UART_SetConfig+0x2d4>)
 8005ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae8:	095b      	lsrs	r3, r3, #5
 8005aea:	f003 0207 	and.w	r2, r3, #7
 8005aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4422      	add	r2, r4
 8005af6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005af8:	e105      	b.n	8005d06 <UART_SetConfig+0x4d6>
 8005afa:	bf00      	nop
 8005afc:	40011000 	.word	0x40011000
 8005b00:	40011400 	.word	0x40011400
 8005b04:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005b12:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005b16:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005b1a:	4642      	mov	r2, r8
 8005b1c:	464b      	mov	r3, r9
 8005b1e:	1891      	adds	r1, r2, r2
 8005b20:	6239      	str	r1, [r7, #32]
 8005b22:	415b      	adcs	r3, r3
 8005b24:	627b      	str	r3, [r7, #36]	; 0x24
 8005b26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b2a:	4641      	mov	r1, r8
 8005b2c:	1854      	adds	r4, r2, r1
 8005b2e:	4649      	mov	r1, r9
 8005b30:	eb43 0501 	adc.w	r5, r3, r1
 8005b34:	f04f 0200 	mov.w	r2, #0
 8005b38:	f04f 0300 	mov.w	r3, #0
 8005b3c:	00eb      	lsls	r3, r5, #3
 8005b3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b42:	00e2      	lsls	r2, r4, #3
 8005b44:	4614      	mov	r4, r2
 8005b46:	461d      	mov	r5, r3
 8005b48:	4643      	mov	r3, r8
 8005b4a:	18e3      	adds	r3, r4, r3
 8005b4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005b50:	464b      	mov	r3, r9
 8005b52:	eb45 0303 	adc.w	r3, r5, r3
 8005b56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005b66:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b6a:	f04f 0200 	mov.w	r2, #0
 8005b6e:	f04f 0300 	mov.w	r3, #0
 8005b72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005b76:	4629      	mov	r1, r5
 8005b78:	008b      	lsls	r3, r1, #2
 8005b7a:	4621      	mov	r1, r4
 8005b7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b80:	4621      	mov	r1, r4
 8005b82:	008a      	lsls	r2, r1, #2
 8005b84:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005b88:	f7fa ff1c 	bl	80009c4 <__aeabi_uldivmod>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	460b      	mov	r3, r1
 8005b90:	4b60      	ldr	r3, [pc, #384]	; (8005d14 <UART_SetConfig+0x4e4>)
 8005b92:	fba3 2302 	umull	r2, r3, r3, r2
 8005b96:	095b      	lsrs	r3, r3, #5
 8005b98:	011c      	lsls	r4, r3, #4
 8005b9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005ba4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005ba8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005bac:	4642      	mov	r2, r8
 8005bae:	464b      	mov	r3, r9
 8005bb0:	1891      	adds	r1, r2, r2
 8005bb2:	61b9      	str	r1, [r7, #24]
 8005bb4:	415b      	adcs	r3, r3
 8005bb6:	61fb      	str	r3, [r7, #28]
 8005bb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bbc:	4641      	mov	r1, r8
 8005bbe:	1851      	adds	r1, r2, r1
 8005bc0:	6139      	str	r1, [r7, #16]
 8005bc2:	4649      	mov	r1, r9
 8005bc4:	414b      	adcs	r3, r1
 8005bc6:	617b      	str	r3, [r7, #20]
 8005bc8:	f04f 0200 	mov.w	r2, #0
 8005bcc:	f04f 0300 	mov.w	r3, #0
 8005bd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005bd4:	4659      	mov	r1, fp
 8005bd6:	00cb      	lsls	r3, r1, #3
 8005bd8:	4651      	mov	r1, sl
 8005bda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bde:	4651      	mov	r1, sl
 8005be0:	00ca      	lsls	r2, r1, #3
 8005be2:	4610      	mov	r0, r2
 8005be4:	4619      	mov	r1, r3
 8005be6:	4603      	mov	r3, r0
 8005be8:	4642      	mov	r2, r8
 8005bea:	189b      	adds	r3, r3, r2
 8005bec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005bf0:	464b      	mov	r3, r9
 8005bf2:	460a      	mov	r2, r1
 8005bf4:	eb42 0303 	adc.w	r3, r2, r3
 8005bf8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c06:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005c08:	f04f 0200 	mov.w	r2, #0
 8005c0c:	f04f 0300 	mov.w	r3, #0
 8005c10:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005c14:	4649      	mov	r1, r9
 8005c16:	008b      	lsls	r3, r1, #2
 8005c18:	4641      	mov	r1, r8
 8005c1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c1e:	4641      	mov	r1, r8
 8005c20:	008a      	lsls	r2, r1, #2
 8005c22:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005c26:	f7fa fecd 	bl	80009c4 <__aeabi_uldivmod>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	4b39      	ldr	r3, [pc, #228]	; (8005d14 <UART_SetConfig+0x4e4>)
 8005c30:	fba3 1302 	umull	r1, r3, r3, r2
 8005c34:	095b      	lsrs	r3, r3, #5
 8005c36:	2164      	movs	r1, #100	; 0x64
 8005c38:	fb01 f303 	mul.w	r3, r1, r3
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	011b      	lsls	r3, r3, #4
 8005c40:	3332      	adds	r3, #50	; 0x32
 8005c42:	4a34      	ldr	r2, [pc, #208]	; (8005d14 <UART_SetConfig+0x4e4>)
 8005c44:	fba2 2303 	umull	r2, r3, r2, r3
 8005c48:	095b      	lsrs	r3, r3, #5
 8005c4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c4e:	441c      	add	r4, r3
 8005c50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c54:	2200      	movs	r2, #0
 8005c56:	673b      	str	r3, [r7, #112]	; 0x70
 8005c58:	677a      	str	r2, [r7, #116]	; 0x74
 8005c5a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005c5e:	4642      	mov	r2, r8
 8005c60:	464b      	mov	r3, r9
 8005c62:	1891      	adds	r1, r2, r2
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	415b      	adcs	r3, r3
 8005c68:	60fb      	str	r3, [r7, #12]
 8005c6a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c6e:	4641      	mov	r1, r8
 8005c70:	1851      	adds	r1, r2, r1
 8005c72:	6039      	str	r1, [r7, #0]
 8005c74:	4649      	mov	r1, r9
 8005c76:	414b      	adcs	r3, r1
 8005c78:	607b      	str	r3, [r7, #4]
 8005c7a:	f04f 0200 	mov.w	r2, #0
 8005c7e:	f04f 0300 	mov.w	r3, #0
 8005c82:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c86:	4659      	mov	r1, fp
 8005c88:	00cb      	lsls	r3, r1, #3
 8005c8a:	4651      	mov	r1, sl
 8005c8c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c90:	4651      	mov	r1, sl
 8005c92:	00ca      	lsls	r2, r1, #3
 8005c94:	4610      	mov	r0, r2
 8005c96:	4619      	mov	r1, r3
 8005c98:	4603      	mov	r3, r0
 8005c9a:	4642      	mov	r2, r8
 8005c9c:	189b      	adds	r3, r3, r2
 8005c9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ca0:	464b      	mov	r3, r9
 8005ca2:	460a      	mov	r2, r1
 8005ca4:	eb42 0303 	adc.w	r3, r2, r3
 8005ca8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	663b      	str	r3, [r7, #96]	; 0x60
 8005cb4:	667a      	str	r2, [r7, #100]	; 0x64
 8005cb6:	f04f 0200 	mov.w	r2, #0
 8005cba:	f04f 0300 	mov.w	r3, #0
 8005cbe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005cc2:	4649      	mov	r1, r9
 8005cc4:	008b      	lsls	r3, r1, #2
 8005cc6:	4641      	mov	r1, r8
 8005cc8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ccc:	4641      	mov	r1, r8
 8005cce:	008a      	lsls	r2, r1, #2
 8005cd0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005cd4:	f7fa fe76 	bl	80009c4 <__aeabi_uldivmod>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	460b      	mov	r3, r1
 8005cdc:	4b0d      	ldr	r3, [pc, #52]	; (8005d14 <UART_SetConfig+0x4e4>)
 8005cde:	fba3 1302 	umull	r1, r3, r3, r2
 8005ce2:	095b      	lsrs	r3, r3, #5
 8005ce4:	2164      	movs	r1, #100	; 0x64
 8005ce6:	fb01 f303 	mul.w	r3, r1, r3
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	011b      	lsls	r3, r3, #4
 8005cee:	3332      	adds	r3, #50	; 0x32
 8005cf0:	4a08      	ldr	r2, [pc, #32]	; (8005d14 <UART_SetConfig+0x4e4>)
 8005cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf6:	095b      	lsrs	r3, r3, #5
 8005cf8:	f003 020f 	and.w	r2, r3, #15
 8005cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4422      	add	r2, r4
 8005d04:	609a      	str	r2, [r3, #8]
}
 8005d06:	bf00      	nop
 8005d08:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d12:	bf00      	nop
 8005d14:	51eb851f 	.word	0x51eb851f

08005d18 <__libc_init_array>:
 8005d18:	b570      	push	{r4, r5, r6, lr}
 8005d1a:	4d0d      	ldr	r5, [pc, #52]	; (8005d50 <__libc_init_array+0x38>)
 8005d1c:	4c0d      	ldr	r4, [pc, #52]	; (8005d54 <__libc_init_array+0x3c>)
 8005d1e:	1b64      	subs	r4, r4, r5
 8005d20:	10a4      	asrs	r4, r4, #2
 8005d22:	2600      	movs	r6, #0
 8005d24:	42a6      	cmp	r6, r4
 8005d26:	d109      	bne.n	8005d3c <__libc_init_array+0x24>
 8005d28:	4d0b      	ldr	r5, [pc, #44]	; (8005d58 <__libc_init_array+0x40>)
 8005d2a:	4c0c      	ldr	r4, [pc, #48]	; (8005d5c <__libc_init_array+0x44>)
 8005d2c:	f000 f820 	bl	8005d70 <_init>
 8005d30:	1b64      	subs	r4, r4, r5
 8005d32:	10a4      	asrs	r4, r4, #2
 8005d34:	2600      	movs	r6, #0
 8005d36:	42a6      	cmp	r6, r4
 8005d38:	d105      	bne.n	8005d46 <__libc_init_array+0x2e>
 8005d3a:	bd70      	pop	{r4, r5, r6, pc}
 8005d3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d40:	4798      	blx	r3
 8005d42:	3601      	adds	r6, #1
 8005d44:	e7ee      	b.n	8005d24 <__libc_init_array+0xc>
 8005d46:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d4a:	4798      	blx	r3
 8005d4c:	3601      	adds	r6, #1
 8005d4e:	e7f2      	b.n	8005d36 <__libc_init_array+0x1e>
 8005d50:	08005e04 	.word	0x08005e04
 8005d54:	08005e04 	.word	0x08005e04
 8005d58:	08005e04 	.word	0x08005e04
 8005d5c:	08005e08 	.word	0x08005e08

08005d60 <memset>:
 8005d60:	4402      	add	r2, r0
 8005d62:	4603      	mov	r3, r0
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d100      	bne.n	8005d6a <memset+0xa>
 8005d68:	4770      	bx	lr
 8005d6a:	f803 1b01 	strb.w	r1, [r3], #1
 8005d6e:	e7f9      	b.n	8005d64 <memset+0x4>

08005d70 <_init>:
 8005d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d72:	bf00      	nop
 8005d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d76:	bc08      	pop	{r3}
 8005d78:	469e      	mov	lr, r3
 8005d7a:	4770      	bx	lr

08005d7c <_fini>:
 8005d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d7e:	bf00      	nop
 8005d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d82:	bc08      	pop	{r3}
 8005d84:	469e      	mov	lr, r3
 8005d86:	4770      	bx	lr


PV System Efficiency Monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004710  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080048b0  080048b0  000148b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004900  08004900  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08004900  08004900  00014900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004908  08004908  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004908  08004908  00014908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800490c  0800490c  0001490c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08004910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  20000090  0800499c  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  0800499c  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a1ff  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001984  00000000  00000000  0002a2bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e8  00000000  00000000  0002bc40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000750  00000000  00000000  0002c428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016cda  00000000  00000000  0002cb78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a22c  00000000  00000000  00043852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091b86  00000000  00000000  0004da7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000df604  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002460  00000000  00000000  000df654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004898 	.word	0x08004898

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	08004898 	.word	0x08004898

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2uiz>:
 800085c:	004a      	lsls	r2, r1, #1
 800085e:	d211      	bcs.n	8000884 <__aeabi_d2uiz+0x28>
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000864:	d211      	bcs.n	800088a <__aeabi_d2uiz+0x2e>
 8000866:	d50d      	bpl.n	8000884 <__aeabi_d2uiz+0x28>
 8000868:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d40e      	bmi.n	8000890 <__aeabi_d2uiz+0x34>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	fa23 f002 	lsr.w	r0, r3, r2
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800088e:	d102      	bne.n	8000896 <__aeabi_d2uiz+0x3a>
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	4770      	bx	lr
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	4770      	bx	lr

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295
 80008b0:	f000 b974 	b.w	8000b9c <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f000 f806 	bl	80008cc <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__udivmoddi4>:
 80008cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d0:	9d08      	ldr	r5, [sp, #32]
 80008d2:	4604      	mov	r4, r0
 80008d4:	468e      	mov	lr, r1
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d14d      	bne.n	8000976 <__udivmoddi4+0xaa>
 80008da:	428a      	cmp	r2, r1
 80008dc:	4694      	mov	ip, r2
 80008de:	d969      	bls.n	80009b4 <__udivmoddi4+0xe8>
 80008e0:	fab2 f282 	clz	r2, r2
 80008e4:	b152      	cbz	r2, 80008fc <__udivmoddi4+0x30>
 80008e6:	fa01 f302 	lsl.w	r3, r1, r2
 80008ea:	f1c2 0120 	rsb	r1, r2, #32
 80008ee:	fa20 f101 	lsr.w	r1, r0, r1
 80008f2:	fa0c fc02 	lsl.w	ip, ip, r2
 80008f6:	ea41 0e03 	orr.w	lr, r1, r3
 80008fa:	4094      	lsls	r4, r2
 80008fc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000900:	0c21      	lsrs	r1, r4, #16
 8000902:	fbbe f6f8 	udiv	r6, lr, r8
 8000906:	fa1f f78c 	uxth.w	r7, ip
 800090a:	fb08 e316 	mls	r3, r8, r6, lr
 800090e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000912:	fb06 f107 	mul.w	r1, r6, r7
 8000916:	4299      	cmp	r1, r3
 8000918:	d90a      	bls.n	8000930 <__udivmoddi4+0x64>
 800091a:	eb1c 0303 	adds.w	r3, ip, r3
 800091e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000922:	f080 811f 	bcs.w	8000b64 <__udivmoddi4+0x298>
 8000926:	4299      	cmp	r1, r3
 8000928:	f240 811c 	bls.w	8000b64 <__udivmoddi4+0x298>
 800092c:	3e02      	subs	r6, #2
 800092e:	4463      	add	r3, ip
 8000930:	1a5b      	subs	r3, r3, r1
 8000932:	b2a4      	uxth	r4, r4
 8000934:	fbb3 f0f8 	udiv	r0, r3, r8
 8000938:	fb08 3310 	mls	r3, r8, r0, r3
 800093c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000940:	fb00 f707 	mul.w	r7, r0, r7
 8000944:	42a7      	cmp	r7, r4
 8000946:	d90a      	bls.n	800095e <__udivmoddi4+0x92>
 8000948:	eb1c 0404 	adds.w	r4, ip, r4
 800094c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000950:	f080 810a 	bcs.w	8000b68 <__udivmoddi4+0x29c>
 8000954:	42a7      	cmp	r7, r4
 8000956:	f240 8107 	bls.w	8000b68 <__udivmoddi4+0x29c>
 800095a:	4464      	add	r4, ip
 800095c:	3802      	subs	r0, #2
 800095e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000962:	1be4      	subs	r4, r4, r7
 8000964:	2600      	movs	r6, #0
 8000966:	b11d      	cbz	r5, 8000970 <__udivmoddi4+0xa4>
 8000968:	40d4      	lsrs	r4, r2
 800096a:	2300      	movs	r3, #0
 800096c:	e9c5 4300 	strd	r4, r3, [r5]
 8000970:	4631      	mov	r1, r6
 8000972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000976:	428b      	cmp	r3, r1
 8000978:	d909      	bls.n	800098e <__udivmoddi4+0xc2>
 800097a:	2d00      	cmp	r5, #0
 800097c:	f000 80ef 	beq.w	8000b5e <__udivmoddi4+0x292>
 8000980:	2600      	movs	r6, #0
 8000982:	e9c5 0100 	strd	r0, r1, [r5]
 8000986:	4630      	mov	r0, r6
 8000988:	4631      	mov	r1, r6
 800098a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098e:	fab3 f683 	clz	r6, r3
 8000992:	2e00      	cmp	r6, #0
 8000994:	d14a      	bne.n	8000a2c <__udivmoddi4+0x160>
 8000996:	428b      	cmp	r3, r1
 8000998:	d302      	bcc.n	80009a0 <__udivmoddi4+0xd4>
 800099a:	4282      	cmp	r2, r0
 800099c:	f200 80f9 	bhi.w	8000b92 <__udivmoddi4+0x2c6>
 80009a0:	1a84      	subs	r4, r0, r2
 80009a2:	eb61 0303 	sbc.w	r3, r1, r3
 80009a6:	2001      	movs	r0, #1
 80009a8:	469e      	mov	lr, r3
 80009aa:	2d00      	cmp	r5, #0
 80009ac:	d0e0      	beq.n	8000970 <__udivmoddi4+0xa4>
 80009ae:	e9c5 4e00 	strd	r4, lr, [r5]
 80009b2:	e7dd      	b.n	8000970 <__udivmoddi4+0xa4>
 80009b4:	b902      	cbnz	r2, 80009b8 <__udivmoddi4+0xec>
 80009b6:	deff      	udf	#255	; 0xff
 80009b8:	fab2 f282 	clz	r2, r2
 80009bc:	2a00      	cmp	r2, #0
 80009be:	f040 8092 	bne.w	8000ae6 <__udivmoddi4+0x21a>
 80009c2:	eba1 010c 	sub.w	r1, r1, ip
 80009c6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009ca:	fa1f fe8c 	uxth.w	lr, ip
 80009ce:	2601      	movs	r6, #1
 80009d0:	0c20      	lsrs	r0, r4, #16
 80009d2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009d6:	fb07 1113 	mls	r1, r7, r3, r1
 80009da:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009de:	fb0e f003 	mul.w	r0, lr, r3
 80009e2:	4288      	cmp	r0, r1
 80009e4:	d908      	bls.n	80009f8 <__udivmoddi4+0x12c>
 80009e6:	eb1c 0101 	adds.w	r1, ip, r1
 80009ea:	f103 38ff 	add.w	r8, r3, #4294967295
 80009ee:	d202      	bcs.n	80009f6 <__udivmoddi4+0x12a>
 80009f0:	4288      	cmp	r0, r1
 80009f2:	f200 80cb 	bhi.w	8000b8c <__udivmoddi4+0x2c0>
 80009f6:	4643      	mov	r3, r8
 80009f8:	1a09      	subs	r1, r1, r0
 80009fa:	b2a4      	uxth	r4, r4
 80009fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a00:	fb07 1110 	mls	r1, r7, r0, r1
 8000a04:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a08:	fb0e fe00 	mul.w	lr, lr, r0
 8000a0c:	45a6      	cmp	lr, r4
 8000a0e:	d908      	bls.n	8000a22 <__udivmoddi4+0x156>
 8000a10:	eb1c 0404 	adds.w	r4, ip, r4
 8000a14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a18:	d202      	bcs.n	8000a20 <__udivmoddi4+0x154>
 8000a1a:	45a6      	cmp	lr, r4
 8000a1c:	f200 80bb 	bhi.w	8000b96 <__udivmoddi4+0x2ca>
 8000a20:	4608      	mov	r0, r1
 8000a22:	eba4 040e 	sub.w	r4, r4, lr
 8000a26:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a2a:	e79c      	b.n	8000966 <__udivmoddi4+0x9a>
 8000a2c:	f1c6 0720 	rsb	r7, r6, #32
 8000a30:	40b3      	lsls	r3, r6
 8000a32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a3a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a3e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a42:	431c      	orrs	r4, r3
 8000a44:	40f9      	lsrs	r1, r7
 8000a46:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a4a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a4e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a52:	0c20      	lsrs	r0, r4, #16
 8000a54:	fa1f fe8c 	uxth.w	lr, ip
 8000a58:	fb09 1118 	mls	r1, r9, r8, r1
 8000a5c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a60:	fb08 f00e 	mul.w	r0, r8, lr
 8000a64:	4288      	cmp	r0, r1
 8000a66:	fa02 f206 	lsl.w	r2, r2, r6
 8000a6a:	d90b      	bls.n	8000a84 <__udivmoddi4+0x1b8>
 8000a6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a74:	f080 8088 	bcs.w	8000b88 <__udivmoddi4+0x2bc>
 8000a78:	4288      	cmp	r0, r1
 8000a7a:	f240 8085 	bls.w	8000b88 <__udivmoddi4+0x2bc>
 8000a7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a82:	4461      	add	r1, ip
 8000a84:	1a09      	subs	r1, r1, r0
 8000a86:	b2a4      	uxth	r4, r4
 8000a88:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a8c:	fb09 1110 	mls	r1, r9, r0, r1
 8000a90:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a98:	458e      	cmp	lr, r1
 8000a9a:	d908      	bls.n	8000aae <__udivmoddi4+0x1e2>
 8000a9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000aa0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000aa4:	d26c      	bcs.n	8000b80 <__udivmoddi4+0x2b4>
 8000aa6:	458e      	cmp	lr, r1
 8000aa8:	d96a      	bls.n	8000b80 <__udivmoddi4+0x2b4>
 8000aaa:	3802      	subs	r0, #2
 8000aac:	4461      	add	r1, ip
 8000aae:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ab2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ab6:	eba1 010e 	sub.w	r1, r1, lr
 8000aba:	42a1      	cmp	r1, r4
 8000abc:	46c8      	mov	r8, r9
 8000abe:	46a6      	mov	lr, r4
 8000ac0:	d356      	bcc.n	8000b70 <__udivmoddi4+0x2a4>
 8000ac2:	d053      	beq.n	8000b6c <__udivmoddi4+0x2a0>
 8000ac4:	b15d      	cbz	r5, 8000ade <__udivmoddi4+0x212>
 8000ac6:	ebb3 0208 	subs.w	r2, r3, r8
 8000aca:	eb61 010e 	sbc.w	r1, r1, lr
 8000ace:	fa01 f707 	lsl.w	r7, r1, r7
 8000ad2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ad6:	40f1      	lsrs	r1, r6
 8000ad8:	431f      	orrs	r7, r3
 8000ada:	e9c5 7100 	strd	r7, r1, [r5]
 8000ade:	2600      	movs	r6, #0
 8000ae0:	4631      	mov	r1, r6
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	f1c2 0320 	rsb	r3, r2, #32
 8000aea:	40d8      	lsrs	r0, r3
 8000aec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000af0:	fa21 f303 	lsr.w	r3, r1, r3
 8000af4:	4091      	lsls	r1, r2
 8000af6:	4301      	orrs	r1, r0
 8000af8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000afc:	fa1f fe8c 	uxth.w	lr, ip
 8000b00:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b04:	fb07 3610 	mls	r6, r7, r0, r3
 8000b08:	0c0b      	lsrs	r3, r1, #16
 8000b0a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b0e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b12:	429e      	cmp	r6, r3
 8000b14:	fa04 f402 	lsl.w	r4, r4, r2
 8000b18:	d908      	bls.n	8000b2c <__udivmoddi4+0x260>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b22:	d22f      	bcs.n	8000b84 <__udivmoddi4+0x2b8>
 8000b24:	429e      	cmp	r6, r3
 8000b26:	d92d      	bls.n	8000b84 <__udivmoddi4+0x2b8>
 8000b28:	3802      	subs	r0, #2
 8000b2a:	4463      	add	r3, ip
 8000b2c:	1b9b      	subs	r3, r3, r6
 8000b2e:	b289      	uxth	r1, r1
 8000b30:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b34:	fb07 3316 	mls	r3, r7, r6, r3
 8000b38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b3c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b40:	428b      	cmp	r3, r1
 8000b42:	d908      	bls.n	8000b56 <__udivmoddi4+0x28a>
 8000b44:	eb1c 0101 	adds.w	r1, ip, r1
 8000b48:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b4c:	d216      	bcs.n	8000b7c <__udivmoddi4+0x2b0>
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d914      	bls.n	8000b7c <__udivmoddi4+0x2b0>
 8000b52:	3e02      	subs	r6, #2
 8000b54:	4461      	add	r1, ip
 8000b56:	1ac9      	subs	r1, r1, r3
 8000b58:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b5c:	e738      	b.n	80009d0 <__udivmoddi4+0x104>
 8000b5e:	462e      	mov	r6, r5
 8000b60:	4628      	mov	r0, r5
 8000b62:	e705      	b.n	8000970 <__udivmoddi4+0xa4>
 8000b64:	4606      	mov	r6, r0
 8000b66:	e6e3      	b.n	8000930 <__udivmoddi4+0x64>
 8000b68:	4618      	mov	r0, r3
 8000b6a:	e6f8      	b.n	800095e <__udivmoddi4+0x92>
 8000b6c:	454b      	cmp	r3, r9
 8000b6e:	d2a9      	bcs.n	8000ac4 <__udivmoddi4+0x1f8>
 8000b70:	ebb9 0802 	subs.w	r8, r9, r2
 8000b74:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b78:	3801      	subs	r0, #1
 8000b7a:	e7a3      	b.n	8000ac4 <__udivmoddi4+0x1f8>
 8000b7c:	4646      	mov	r6, r8
 8000b7e:	e7ea      	b.n	8000b56 <__udivmoddi4+0x28a>
 8000b80:	4620      	mov	r0, r4
 8000b82:	e794      	b.n	8000aae <__udivmoddi4+0x1e2>
 8000b84:	4640      	mov	r0, r8
 8000b86:	e7d1      	b.n	8000b2c <__udivmoddi4+0x260>
 8000b88:	46d0      	mov	r8, sl
 8000b8a:	e77b      	b.n	8000a84 <__udivmoddi4+0x1b8>
 8000b8c:	3b02      	subs	r3, #2
 8000b8e:	4461      	add	r1, ip
 8000b90:	e732      	b.n	80009f8 <__udivmoddi4+0x12c>
 8000b92:	4630      	mov	r0, r6
 8000b94:	e709      	b.n	80009aa <__udivmoddi4+0xde>
 8000b96:	4464      	add	r4, ip
 8000b98:	3802      	subs	r0, #2
 8000b9a:	e742      	b.n	8000a22 <__udivmoddi4+0x156>

08000b9c <__aeabi_idiv0>:
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <HAL_UART_RxCpltCallback>:
void store_temp_in_string(uint16_t temperature, char temp[], int len) ;
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]

	// char received - echo ;
	HAL_UART_Transmit_IT(huart, (uint8_t*)char_rcvd, 1) ;
 8000ba8:	2201      	movs	r2, #1
 8000baa:	4906      	ldr	r1, [pc, #24]	; (8000bc4 <HAL_UART_RxCpltCallback+0x24>)
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f002 fa64 	bl	800307a <HAL_UART_Transmit_IT>

	//re-prime receiver
	HAL_UART_Receive_IT(huart, (uint8_t*)char_rcvd, 1) ;
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	4903      	ldr	r1, [pc, #12]	; (8000bc4 <HAL_UART_RxCpltCallback+0x24>)
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f002 faa4 	bl	8003104 <HAL_UART_Receive_IT>

}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000010 	.word	0x20000010

08000bc8 <get_adc_value_and_celsius_temperature>:
/**
 * function starts the adc, waits for conversion
 * Then converts value to degrees
 */

uint16_t get_adc_value_and_celsius_temperature(){
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0

	HAL_ADC_Start(&hadc1) ;
 8000bcc:	4824      	ldr	r0, [pc, #144]	; (8000c60 <get_adc_value_and_celsius_temperature+0x98>)
 8000bce:	f000 fe5d 	bl	800188c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000bd2:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd6:	4822      	ldr	r0, [pc, #136]	; (8000c60 <get_adc_value_and_celsius_temperature+0x98>)
 8000bd8:	f000 ff0c 	bl	80019f4 <HAL_ADC_PollForConversion>
	g_raw  = HAL_ADC_GetValue(&hadc1) ;
 8000bdc:	4820      	ldr	r0, [pc, #128]	; (8000c60 <get_adc_value_and_celsius_temperature+0x98>)
 8000bde:	f000 ff94 	bl	8001b0a <HAL_ADC_GetValue>
 8000be2:	4603      	mov	r3, r0
 8000be4:	b29a      	uxth	r2, r3
 8000be6:	4b1f      	ldr	r3, [pc, #124]	; (8000c64 <get_adc_value_and_celsius_temperature+0x9c>)
 8000be8:	801a      	strh	r2, [r3, #0]

	g_vin = g_raw*(3.3/4095.0) ; // input voltage
 8000bea:	4b1e      	ldr	r3, [pc, #120]	; (8000c64 <get_adc_value_and_celsius_temperature+0x9c>)
 8000bec:	881b      	ldrh	r3, [r3, #0]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fdca 	bl	8000788 <__aeabi_i2d>
 8000bf4:	a316      	add	r3, pc, #88	; (adr r3, 8000c50 <get_adc_value_and_celsius_temperature+0x88>)
 8000bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bfa:	f7ff fb49 	bl	8000290 <__aeabi_dmul>
 8000bfe:	4602      	mov	r2, r0
 8000c00:	460b      	mov	r3, r1
 8000c02:	4919      	ldr	r1, [pc, #100]	; (8000c68 <get_adc_value_and_celsius_temperature+0xa0>)
 8000c04:	e9c1 2300 	strd	r2, r3, [r1]
	g_temp = g_vin*100 - 273.15 ; // cast to 16 bit uint
 8000c08:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <get_adc_value_and_celsius_temperature+0xa0>)
 8000c0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c0e:	f04f 0200 	mov.w	r2, #0
 8000c12:	4b16      	ldr	r3, [pc, #88]	; (8000c6c <get_adc_value_and_celsius_temperature+0xa4>)
 8000c14:	f7ff fb3c 	bl	8000290 <__aeabi_dmul>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	4610      	mov	r0, r2
 8000c1e:	4619      	mov	r1, r3
 8000c20:	a30d      	add	r3, pc, #52	; (adr r3, 8000c58 <get_adc_value_and_celsius_temperature+0x90>)
 8000c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c26:	f7ff fc61 	bl	80004ec <__aeabi_dsub>
 8000c2a:	4602      	mov	r2, r0
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	4910      	ldr	r1, [pc, #64]	; (8000c70 <get_adc_value_and_celsius_temperature+0xa8>)
 8000c30:	e9c1 2300 	strd	r2, r3, [r1]

	return g_temp ;
 8000c34:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <get_adc_value_and_celsius_temperature+0xa8>)
 8000c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c3a:	4610      	mov	r0, r2
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	f7ff fe0d 	bl	800085c <__aeabi_d2uiz>
 8000c42:	4603      	mov	r3, r0
 8000c44:	b29b      	uxth	r3, r3
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	f3af 8000 	nop.w
 8000c50:	e734d9b4 	.word	0xe734d9b4
 8000c54:	3f4a680c 	.word	0x3f4a680c
 8000c58:	66666666 	.word	0x66666666
 8000c5c:	40711266 	.word	0x40711266
 8000c60:	200000ac 	.word	0x200000ac
 8000c64:	20000138 	.word	0x20000138
 8000c68:	20000150 	.word	0x20000150
 8000c6c:	40590000 	.word	0x40590000
 8000c70:	20000148 	.word	0x20000148

08000c74 <store_temp_in_string>:

void store_temp_in_string(uint16_t temperature, char temp[], int len){
 8000c74:	b480      	push	{r7}
 8000c76:	b087      	sub	sp, #28
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
 8000c80:	81fb      	strh	r3, [r7, #14]

	for(int i= 0 ; i < len ; i++){
 8000c82:	2300      	movs	r3, #0
 8000c84:	617b      	str	r3, [r7, #20]
 8000c86:	e04e      	b.n	8000d26 <store_temp_in_string+0xb2>
		switch(i){
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	2b02      	cmp	r3, #2
 8000c8c:	d02f      	beq.n	8000cee <store_temp_in_string+0x7a>
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	2b02      	cmp	r3, #2
 8000c92:	dc44      	bgt.n	8000d1e <store_temp_in_string+0xaa>
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d003      	beq.n	8000ca2 <store_temp_in_string+0x2e>
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d00c      	beq.n	8000cba <store_temp_in_string+0x46>
			case 2:
				temp[2] = (temperature - ((temperature/10)*10) ) + 48 ;

				break;
			default:
				break;
 8000ca0:	e03d      	b.n	8000d1e <store_temp_in_string+0xaa>
				temp[0]  = (temperature/100) + 48 ;
 8000ca2:	89fb      	ldrh	r3, [r7, #14]
 8000ca4:	4a25      	ldr	r2, [pc, #148]	; (8000d3c <store_temp_in_string+0xc8>)
 8000ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8000caa:	095b      	lsrs	r3, r3, #5
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	3330      	adds	r3, #48	; 0x30
 8000cb2:	b2da      	uxtb	r2, r3
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	701a      	strb	r2, [r3, #0]
				break;
 8000cb8:	e032      	b.n	8000d20 <store_temp_in_string+0xac>
				temp[1] = (temperature - (temperature/100)*100 )/10 + 48 ;
 8000cba:	89fa      	ldrh	r2, [r7, #14]
 8000cbc:	89fb      	ldrh	r3, [r7, #14]
 8000cbe:	491f      	ldr	r1, [pc, #124]	; (8000d3c <store_temp_in_string+0xc8>)
 8000cc0:	fba1 1303 	umull	r1, r3, r1, r3
 8000cc4:	095b      	lsrs	r3, r3, #5
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	4619      	mov	r1, r3
 8000cca:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8000cce:	fb01 f303 	mul.w	r3, r1, r3
 8000cd2:	4413      	add	r3, r2
 8000cd4:	4a1a      	ldr	r2, [pc, #104]	; (8000d40 <store_temp_in_string+0xcc>)
 8000cd6:	fb82 1203 	smull	r1, r2, r2, r3
 8000cda:	1092      	asrs	r2, r2, #2
 8000cdc:	17db      	asrs	r3, r3, #31
 8000cde:	1ad3      	subs	r3, r2, r3
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	3230      	adds	r2, #48	; 0x30
 8000ce8:	b2d2      	uxtb	r2, r2
 8000cea:	701a      	strb	r2, [r3, #0]
				break;
 8000cec:	e018      	b.n	8000d20 <store_temp_in_string+0xac>
				temp[2] = (temperature - ((temperature/10)*10) ) + 48 ;
 8000cee:	89fb      	ldrh	r3, [r7, #14]
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	89fb      	ldrh	r3, [r7, #14]
 8000cf4:	4913      	ldr	r1, [pc, #76]	; (8000d44 <store_temp_in_string+0xd0>)
 8000cf6:	fba1 1303 	umull	r1, r3, r1, r3
 8000cfa:	08db      	lsrs	r3, r3, #3
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	4619      	mov	r1, r3
 8000d02:	0149      	lsls	r1, r1, #5
 8000d04:	1ac9      	subs	r1, r1, r3
 8000d06:	0089      	lsls	r1, r1, #2
 8000d08:	1acb      	subs	r3, r1, r3
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	4413      	add	r3, r2
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	3302      	adds	r3, #2
 8000d16:	3230      	adds	r2, #48	; 0x30
 8000d18:	b2d2      	uxtb	r2, r2
 8000d1a:	701a      	strb	r2, [r3, #0]
				break;
 8000d1c:	e000      	b.n	8000d20 <store_temp_in_string+0xac>
				break;
 8000d1e:	bf00      	nop
	for(int i= 0 ; i < len ; i++){
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	3301      	adds	r3, #1
 8000d24:	617b      	str	r3, [r7, #20]
 8000d26:	697a      	ldr	r2, [r7, #20]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	dbac      	blt.n	8000c88 <store_temp_in_string+0x14>

		}

	}
}
 8000d2e:	bf00      	nop
 8000d30:	bf00      	nop
 8000d32:	371c      	adds	r7, #28
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	51eb851f 	.word	0x51eb851f
 8000d40:	66666667 	.word	0x66666667
 8000d44:	cccccccd 	.word	0xcccccccd

08000d48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d4c:	f000 fcc4 	bl	80016d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d50:	f000 f88c 	bl	8000e6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d54:	f000 f972 	bl	800103c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d58:	f000 f944 	bl	8000fe4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000d5c:	f000 f8f0 	bl	8000f40 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(150);
 8000d60:	2096      	movs	r0, #150	; 0x96
 8000d62:	f000 fd2b 	bl	80017bc <HAL_Delay>
  HAL_UART_Transmit_IT(&huart2, (uint8_t*)studentNum, 13) ;
 8000d66:	220d      	movs	r2, #13
 8000d68:	4932      	ldr	r1, [pc, #200]	; (8000e34 <main+0xec>)
 8000d6a:	4833      	ldr	r0, [pc, #204]	; (8000e38 <main+0xf0>)
 8000d6c:	f002 f985 	bl	800307a <HAL_UART_Transmit_IT>

  HAL_UART_Receive_IT(&huart2, (uint8_t*)char_rcvd, 1) ;
 8000d70:	2201      	movs	r2, #1
 8000d72:	4932      	ldr	r1, [pc, #200]	; (8000e3c <main+0xf4>)
 8000d74:	4830      	ldr	r0, [pc, #192]	; (8000e38 <main+0xf0>)
 8000d76:	f002 f9c5 	bl	8003104 <HAL_UART_Receive_IT>
  while (1)
  {

	  // temp sens

	  g_temp_in_deg = get_adc_value_and_celsius_temperature() ;
 8000d7a:	f7ff ff25 	bl	8000bc8 <get_adc_value_and_celsius_temperature>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	461a      	mov	r2, r3
 8000d82:	4b2f      	ldr	r3, [pc, #188]	; (8000e40 <main+0xf8>)
 8000d84:	801a      	strh	r2, [r3, #0]
	  store_temp_in_string(g_temp_in_deg, g_temperature, LEN);
 8000d86:	4b2e      	ldr	r3, [pc, #184]	; (8000e40 <main+0xf8>)
 8000d88:	881b      	ldrh	r3, [r3, #0]
 8000d8a:	2203      	movs	r2, #3
 8000d8c:	492d      	ldr	r1, [pc, #180]	; (8000e44 <main+0xfc>)
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff ff70 	bl	8000c74 <store_temp_in_string>
//	  g_temperature[0]  = (g_temp_in_deg/100) + 48 ;
//	  g_temperature[1] = (g_temp_in_deg - (g_temp_in_deg/100)*100 )/10 + 48 ;
//	  g_temperature[2] = (g_temp_in_deg - ((g_temp_in_deg/10)*10) ) + 48 ;

	  sprintf(g_msg, "%d\n", g_raw) ;
 8000d94:	4b2c      	ldr	r3, [pc, #176]	; (8000e48 <main+0x100>)
 8000d96:	881b      	ldrh	r3, [r3, #0]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	492c      	ldr	r1, [pc, #176]	; (8000e4c <main+0x104>)
 8000d9c:	482c      	ldr	r0, [pc, #176]	; (8000e50 <main+0x108>)
 8000d9e:	f003 f90d 	bl	8003fbc <siprintf>
	  HAL_UART_Transmit_IT(&huart2,(uint8_t*)g_msg, strlen(g_msg)) ;
 8000da2:	482b      	ldr	r0, [pc, #172]	; (8000e50 <main+0x108>)
 8000da4:	f7ff fa1c 	bl	80001e0 <strlen>
 8000da8:	4603      	mov	r3, r0
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	461a      	mov	r2, r3
 8000dae:	4928      	ldr	r1, [pc, #160]	; (8000e50 <main+0x108>)
 8000db0:	4821      	ldr	r0, [pc, #132]	; (8000e38 <main+0xf0>)
 8000db2:	f002 f962 	bl	800307a <HAL_UART_Transmit_IT>
	  HAL_Delay(100) ;
 8000db6:	2064      	movs	r0, #100	; 0x64
 8000db8:	f000 fd00 	bl	80017bc <HAL_Delay>


	  if(g_left_button_pressed == 1){
 8000dbc:	4b25      	ldr	r3, [pc, #148]	; (8000e54 <main+0x10c>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d107      	bne.n	8000dd4 <main+0x8c>
		  g_left_button_pressed = 0 ;
 8000dc4:	4b23      	ldr	r3, [pc, #140]	; (8000e54 <main+0x10c>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	701a      	strb	r2, [r3, #0]

		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5) ;
 8000dca:	2120      	movs	r1, #32
 8000dcc:	4822      	ldr	r0, [pc, #136]	; (8000e58 <main+0x110>)
 8000dce:	f001 fc30 	bl	8002632 <HAL_GPIO_TogglePin>
 8000dd2:	e7d2      	b.n	8000d7a <main+0x32>
	  }

	  else if(g_right_button_pressed == 1){
 8000dd4:	4b21      	ldr	r3, [pc, #132]	; (8000e5c <main+0x114>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d107      	bne.n	8000dec <main+0xa4>
		  g_right_button_pressed = 0;
 8000ddc:	4b1f      	ldr	r3, [pc, #124]	; (8000e5c <main+0x114>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	701a      	strb	r2, [r3, #0]

		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5) ;
 8000de2:	2120      	movs	r1, #32
 8000de4:	481c      	ldr	r0, [pc, #112]	; (8000e58 <main+0x110>)
 8000de6:	f001 fc24 	bl	8002632 <HAL_GPIO_TogglePin>
 8000dea:	e7c6      	b.n	8000d7a <main+0x32>

	  }

	  else if(g_middle_button_pressed == 1){
 8000dec:	4b1c      	ldr	r3, [pc, #112]	; (8000e60 <main+0x118>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d107      	bne.n	8000e04 <main+0xbc>
		  g_middle_button_pressed = 0 ;
 8000df4:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <main+0x118>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	701a      	strb	r2, [r3, #0]

		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5) ;
 8000dfa:	2120      	movs	r1, #32
 8000dfc:	4816      	ldr	r0, [pc, #88]	; (8000e58 <main+0x110>)
 8000dfe:	f001 fc18 	bl	8002632 <HAL_GPIO_TogglePin>
 8000e02:	e7ba      	b.n	8000d7a <main+0x32>

	  }

	  else if(g_top_button_pressed ==1 ){
 8000e04:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <main+0x11c>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d107      	bne.n	8000e1c <main+0xd4>
		  g_top_button_pressed = 0;
 8000e0c:	4b15      	ldr	r3, [pc, #84]	; (8000e64 <main+0x11c>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	701a      	strb	r2, [r3, #0]

		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5) ;
 8000e12:	2120      	movs	r1, #32
 8000e14:	4810      	ldr	r0, [pc, #64]	; (8000e58 <main+0x110>)
 8000e16:	f001 fc0c 	bl	8002632 <HAL_GPIO_TogglePin>
 8000e1a:	e7ae      	b.n	8000d7a <main+0x32>

	  }

	  else{
		  if(g_bottom_button_pressed == 1){
 8000e1c:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <main+0x120>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d1aa      	bne.n	8000d7a <main+0x32>
			  g_bottom_button_pressed = 0 ;
 8000e24:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <main+0x120>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	701a      	strb	r2, [r3, #0]

			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5) ;
 8000e2a:	2120      	movs	r1, #32
 8000e2c:	480a      	ldr	r0, [pc, #40]	; (8000e58 <main+0x110>)
 8000e2e:	f001 fc00 	bl	8002632 <HAL_GPIO_TogglePin>
	  g_temp_in_deg = get_adc_value_and_celsius_temperature() ;
 8000e32:	e7a2      	b.n	8000d7a <main+0x32>
 8000e34:	20000000 	.word	0x20000000
 8000e38:	200000f4 	.word	0x200000f4
 8000e3c:	20000010 	.word	0x20000010
 8000e40:	20000158 	.word	0x20000158
 8000e44:	2000015c 	.word	0x2000015c
 8000e48:	20000138 	.word	0x20000138
 8000e4c:	080048b0 	.word	0x080048b0
 8000e50:	2000013c 	.word	0x2000013c
 8000e54:	2000015f 	.word	0x2000015f
 8000e58:	40020000 	.word	0x40020000
 8000e5c:	20000160 	.word	0x20000160
 8000e60:	20000163 	.word	0x20000163
 8000e64:	20000161 	.word	0x20000161
 8000e68:	20000162 	.word	0x20000162

08000e6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b094      	sub	sp, #80	; 0x50
 8000e70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e72:	f107 0320 	add.w	r3, r7, #32
 8000e76:	2230      	movs	r2, #48	; 0x30
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f003 f896 	bl	8003fac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e80:	f107 030c 	add.w	r3, r7, #12
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e90:	2300      	movs	r3, #0
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	4b28      	ldr	r3, [pc, #160]	; (8000f38 <SystemClock_Config+0xcc>)
 8000e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e98:	4a27      	ldr	r2, [pc, #156]	; (8000f38 <SystemClock_Config+0xcc>)
 8000e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea0:	4b25      	ldr	r3, [pc, #148]	; (8000f38 <SystemClock_Config+0xcc>)
 8000ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea8:	60bb      	str	r3, [r7, #8]
 8000eaa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000eac:	2300      	movs	r3, #0
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	4b22      	ldr	r3, [pc, #136]	; (8000f3c <SystemClock_Config+0xd0>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a21      	ldr	r2, [pc, #132]	; (8000f3c <SystemClock_Config+0xd0>)
 8000eb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000eba:	6013      	str	r3, [r2, #0]
 8000ebc:	4b1f      	ldr	r3, [pc, #124]	; (8000f3c <SystemClock_Config+0xd0>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ec4:	607b      	str	r3, [r7, #4]
 8000ec6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ed0:	2310      	movs	r3, #16
 8000ed2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000edc:	2310      	movs	r3, #16
 8000ede:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ee0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ee4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ee6:	2304      	movs	r3, #4
 8000ee8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000eea:	2304      	movs	r3, #4
 8000eec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eee:	f107 0320 	add.w	r3, r7, #32
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f001 fbdc 	bl	80026b0 <HAL_RCC_OscConfig>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000efe:	f000 f94f 	bl	80011a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f02:	230f      	movs	r3, #15
 8000f04:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f06:	2302      	movs	r3, #2
 8000f08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f12:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f14:	2300      	movs	r3, #0
 8000f16:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f18:	f107 030c 	add.w	r3, r7, #12
 8000f1c:	2102      	movs	r1, #2
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f001 fe3e 	bl	8002ba0 <HAL_RCC_ClockConfig>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f2a:	f000 f939 	bl	80011a0 <Error_Handler>
  }
}
 8000f2e:	bf00      	nop
 8000f30:	3750      	adds	r7, #80	; 0x50
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	40007000 	.word	0x40007000

08000f40 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f46:	463b      	mov	r3, r7
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f52:	4b21      	ldr	r3, [pc, #132]	; (8000fd8 <MX_ADC1_Init+0x98>)
 8000f54:	4a21      	ldr	r2, [pc, #132]	; (8000fdc <MX_ADC1_Init+0x9c>)
 8000f56:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f58:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <MX_ADC1_Init+0x98>)
 8000f5a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f5e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f60:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <MX_ADC1_Init+0x98>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f66:	4b1c      	ldr	r3, [pc, #112]	; (8000fd8 <MX_ADC1_Init+0x98>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f6c:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <MX_ADC1_Init+0x98>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f72:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <MX_ADC1_Init+0x98>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f7a:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <MX_ADC1_Init+0x98>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f80:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <MX_ADC1_Init+0x98>)
 8000f82:	4a17      	ldr	r2, [pc, #92]	; (8000fe0 <MX_ADC1_Init+0xa0>)
 8000f84:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f86:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <MX_ADC1_Init+0x98>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f8c:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <MX_ADC1_Init+0x98>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f92:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <MX_ADC1_Init+0x98>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f9a:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <MX_ADC1_Init+0x98>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fa0:	480d      	ldr	r0, [pc, #52]	; (8000fd8 <MX_ADC1_Init+0x98>)
 8000fa2:	f000 fc2f 	bl	8001804 <HAL_ADC_Init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000fac:	f000 f8f8 	bl	80011a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fbc:	463b      	mov	r3, r7
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <MX_ADC1_Init+0x98>)
 8000fc2:	f000 fdaf 	bl	8001b24 <HAL_ADC_ConfigChannel>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000fcc:	f000 f8e8 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fd0:	bf00      	nop
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	200000ac 	.word	0x200000ac
 8000fdc:	40012000 	.word	0x40012000
 8000fe0:	0f000001 	.word	0x0f000001

08000fe4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <MX_USART2_UART_Init+0x50>)
 8000fea:	4a13      	ldr	r2, [pc, #76]	; (8001038 <MX_USART2_UART_Init+0x54>)
 8000fec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fee:	4b11      	ldr	r3, [pc, #68]	; (8001034 <MX_USART2_UART_Init+0x50>)
 8000ff0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ff4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8000ff6:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <MX_USART2_UART_Init+0x50>)
 8000ff8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ffc:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ffe:	4b0d      	ldr	r3, [pc, #52]	; (8001034 <MX_USART2_UART_Init+0x50>)
 8001000:	2200      	movs	r2, #0
 8001002:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_ODD;
 8001004:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <MX_USART2_UART_Init+0x50>)
 8001006:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800100a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800100c:	4b09      	ldr	r3, [pc, #36]	; (8001034 <MX_USART2_UART_Init+0x50>)
 800100e:	220c      	movs	r2, #12
 8001010:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001012:	4b08      	ldr	r3, [pc, #32]	; (8001034 <MX_USART2_UART_Init+0x50>)
 8001014:	2200      	movs	r2, #0
 8001016:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001018:	4b06      	ldr	r3, [pc, #24]	; (8001034 <MX_USART2_UART_Init+0x50>)
 800101a:	2200      	movs	r2, #0
 800101c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800101e:	4805      	ldr	r0, [pc, #20]	; (8001034 <MX_USART2_UART_Init+0x50>)
 8001020:	f001 ffde 	bl	8002fe0 <HAL_UART_Init>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 800102a:	f000 f8b9 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	200000f4 	.word	0x200000f4
 8001038:	40004400 	.word	0x40004400

0800103c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08a      	sub	sp, #40	; 0x28
 8001040:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001042:	f107 0314 	add.w	r3, r7, #20
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
 800104e:	60da      	str	r2, [r3, #12]
 8001050:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
 8001056:	4b4e      	ldr	r3, [pc, #312]	; (8001190 <MX_GPIO_Init+0x154>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	4a4d      	ldr	r2, [pc, #308]	; (8001190 <MX_GPIO_Init+0x154>)
 800105c:	f043 0304 	orr.w	r3, r3, #4
 8001060:	6313      	str	r3, [r2, #48]	; 0x30
 8001062:	4b4b      	ldr	r3, [pc, #300]	; (8001190 <MX_GPIO_Init+0x154>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f003 0304 	and.w	r3, r3, #4
 800106a:	613b      	str	r3, [r7, #16]
 800106c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	4b47      	ldr	r3, [pc, #284]	; (8001190 <MX_GPIO_Init+0x154>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	4a46      	ldr	r2, [pc, #280]	; (8001190 <MX_GPIO_Init+0x154>)
 8001078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800107c:	6313      	str	r3, [r2, #48]	; 0x30
 800107e:	4b44      	ldr	r3, [pc, #272]	; (8001190 <MX_GPIO_Init+0x154>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	4b40      	ldr	r3, [pc, #256]	; (8001190 <MX_GPIO_Init+0x154>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	4a3f      	ldr	r2, [pc, #252]	; (8001190 <MX_GPIO_Init+0x154>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	6313      	str	r3, [r2, #48]	; 0x30
 800109a:	4b3d      	ldr	r3, [pc, #244]	; (8001190 <MX_GPIO_Init+0x154>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	607b      	str	r3, [r7, #4]
 80010aa:	4b39      	ldr	r3, [pc, #228]	; (8001190 <MX_GPIO_Init+0x154>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	4a38      	ldr	r2, [pc, #224]	; (8001190 <MX_GPIO_Init+0x154>)
 80010b0:	f043 0302 	orr.w	r3, r3, #2
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4b36      	ldr	r3, [pc, #216]	; (8001190 <MX_GPIO_Init+0x154>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 80010c2:	2200      	movs	r2, #0
 80010c4:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80010c8:	4832      	ldr	r0, [pc, #200]	; (8001194 <MX_GPIO_Init+0x158>)
 80010ca:	f001 fa99 	bl	8002600 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80010ce:	2200      	movs	r2, #0
 80010d0:	f44f 6186 	mov.w	r1, #1072	; 0x430
 80010d4:	4830      	ldr	r0, [pc, #192]	; (8001198 <MX_GPIO_Init+0x15c>)
 80010d6:	f001 fa93 	bl	8002600 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010e0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010ea:	f107 0314 	add.w	r3, r7, #20
 80010ee:	4619      	mov	r1, r3
 80010f0:	482a      	ldr	r0, [pc, #168]	; (800119c <MX_GPIO_Init+0x160>)
 80010f2:	f001 f8e9 	bl	80022c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_10;
 80010f6:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80010fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fc:	2301      	movs	r3, #1
 80010fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001104:	2300      	movs	r3, #0
 8001106:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	4619      	mov	r1, r3
 800110e:	4821      	ldr	r0, [pc, #132]	; (8001194 <MX_GPIO_Init+0x158>)
 8001110:	f001 f8da 	bl	80022c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001114:	23c0      	movs	r3, #192	; 0xc0
 8001116:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001118:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800111c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800111e:	2301      	movs	r3, #1
 8001120:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001122:	f107 0314 	add.w	r3, r7, #20
 8001126:	4619      	mov	r1, r3
 8001128:	481a      	ldr	r0, [pc, #104]	; (8001194 <MX_GPIO_Init+0x158>)
 800112a:	f001 f8cd 	bl	80022c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 800112e:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8001132:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001134:	2301      	movs	r3, #1
 8001136:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113c:	2300      	movs	r3, #0
 800113e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	4619      	mov	r1, r3
 8001146:	4814      	ldr	r0, [pc, #80]	; (8001198 <MX_GPIO_Init+0x15c>)
 8001148:	f001 f8be 	bl	80022c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800114c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001150:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001152:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001156:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001158:	2301      	movs	r3, #1
 800115a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	4619      	mov	r1, r3
 8001162:	480d      	ldr	r0, [pc, #52]	; (8001198 <MX_GPIO_Init+0x15c>)
 8001164:	f001 f8b0 	bl	80022c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001168:	2200      	movs	r2, #0
 800116a:	2100      	movs	r1, #0
 800116c:	2017      	movs	r0, #23
 800116e:	f000 ffe2 	bl	8002136 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001172:	2017      	movs	r0, #23
 8001174:	f000 fffb 	bl	800216e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001178:	2200      	movs	r2, #0
 800117a:	2100      	movs	r1, #0
 800117c:	2028      	movs	r0, #40	; 0x28
 800117e:	f000 ffda 	bl	8002136 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001182:	2028      	movs	r0, #40	; 0x28
 8001184:	f000 fff3 	bl	800216e <HAL_NVIC_EnableIRQ>

}
 8001188:	bf00      	nop
 800118a:	3728      	adds	r7, #40	; 0x28
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40023800 	.word	0x40023800
 8001194:	40020000 	.word	0x40020000
 8001198:	40020400 	.word	0x40020400
 800119c:	40020800 	.word	0x40020800

080011a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a4:	b672      	cpsid	i
}
 80011a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <Error_Handler+0x8>
	...

080011ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	607b      	str	r3, [r7, #4]
 80011b6:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <HAL_MspInit+0x4c>)
 80011b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ba:	4a0f      	ldr	r2, [pc, #60]	; (80011f8 <HAL_MspInit+0x4c>)
 80011bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c0:	6453      	str	r3, [r2, #68]	; 0x44
 80011c2:	4b0d      	ldr	r3, [pc, #52]	; (80011f8 <HAL_MspInit+0x4c>)
 80011c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	603b      	str	r3, [r7, #0]
 80011d2:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <HAL_MspInit+0x4c>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	4a08      	ldr	r2, [pc, #32]	; (80011f8 <HAL_MspInit+0x4c>)
 80011d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011dc:	6413      	str	r3, [r2, #64]	; 0x40
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <HAL_MspInit+0x4c>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e6:	603b      	str	r3, [r7, #0]
 80011e8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011ea:	2007      	movs	r0, #7
 80011ec:	f000 ff98 	bl	8002120 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40023800 	.word	0x40023800

080011fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08a      	sub	sp, #40	; 0x28
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a17      	ldr	r2, [pc, #92]	; (8001278 <HAL_ADC_MspInit+0x7c>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d127      	bne.n	800126e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	4b16      	ldr	r3, [pc, #88]	; (800127c <HAL_ADC_MspInit+0x80>)
 8001224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001226:	4a15      	ldr	r2, [pc, #84]	; (800127c <HAL_ADC_MspInit+0x80>)
 8001228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800122c:	6453      	str	r3, [r2, #68]	; 0x44
 800122e:	4b13      	ldr	r3, [pc, #76]	; (800127c <HAL_ADC_MspInit+0x80>)
 8001230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	4b0f      	ldr	r3, [pc, #60]	; (800127c <HAL_ADC_MspInit+0x80>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a0e      	ldr	r2, [pc, #56]	; (800127c <HAL_ADC_MspInit+0x80>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b0c      	ldr	r3, [pc, #48]	; (800127c <HAL_ADC_MspInit+0x80>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001256:	2301      	movs	r3, #1
 8001258:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800125a:	2303      	movs	r3, #3
 800125c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001262:	f107 0314 	add.w	r3, r7, #20
 8001266:	4619      	mov	r1, r3
 8001268:	4805      	ldr	r0, [pc, #20]	; (8001280 <HAL_ADC_MspInit+0x84>)
 800126a:	f001 f82d 	bl	80022c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800126e:	bf00      	nop
 8001270:	3728      	adds	r7, #40	; 0x28
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40012000 	.word	0x40012000
 800127c:	40023800 	.word	0x40023800
 8001280:	40020000 	.word	0x40020000

08001284 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08a      	sub	sp, #40	; 0x28
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a1d      	ldr	r2, [pc, #116]	; (8001318 <HAL_UART_MspInit+0x94>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d133      	bne.n	800130e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]
 80012aa:	4b1c      	ldr	r3, [pc, #112]	; (800131c <HAL_UART_MspInit+0x98>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	4a1b      	ldr	r2, [pc, #108]	; (800131c <HAL_UART_MspInit+0x98>)
 80012b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b4:	6413      	str	r3, [r2, #64]	; 0x40
 80012b6:	4b19      	ldr	r3, [pc, #100]	; (800131c <HAL_UART_MspInit+0x98>)
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	4b15      	ldr	r3, [pc, #84]	; (800131c <HAL_UART_MspInit+0x98>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a14      	ldr	r2, [pc, #80]	; (800131c <HAL_UART_MspInit+0x98>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b12      	ldr	r3, [pc, #72]	; (800131c <HAL_UART_MspInit+0x98>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012de:	230c      	movs	r3, #12
 80012e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e2:	2302      	movs	r3, #2
 80012e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ea:	2303      	movs	r3, #3
 80012ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012ee:	2307      	movs	r3, #7
 80012f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f2:	f107 0314 	add.w	r3, r7, #20
 80012f6:	4619      	mov	r1, r3
 80012f8:	4809      	ldr	r0, [pc, #36]	; (8001320 <HAL_UART_MspInit+0x9c>)
 80012fa:	f000 ffe5 	bl	80022c8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012fe:	2200      	movs	r2, #0
 8001300:	2100      	movs	r1, #0
 8001302:	2026      	movs	r0, #38	; 0x26
 8001304:	f000 ff17 	bl	8002136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001308:	2026      	movs	r0, #38	; 0x26
 800130a:	f000 ff30 	bl	800216e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800130e:	bf00      	nop
 8001310:	3728      	adds	r7, #40	; 0x28
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40004400 	.word	0x40004400
 800131c:	40023800 	.word	0x40023800
 8001320:	40020000 	.word	0x40020000

08001324 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001328:	e7fe      	b.n	8001328 <NMI_Handler+0x4>

0800132a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800132e:	e7fe      	b.n	800132e <HardFault_Handler+0x4>

08001330 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001334:	e7fe      	b.n	8001334 <MemManage_Handler+0x4>

08001336 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001336:	b480      	push	{r7}
 8001338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800133a:	e7fe      	b.n	800133a <BusFault_Handler+0x4>

0800133c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001340:	e7fe      	b.n	8001340 <UsageFault_Handler+0x4>

08001342 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001342:	b480      	push	{r7}
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001370:	f000 fa04 	bl	800177c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001374:	bf00      	nop
 8001376:	bd80      	pop	{r7, pc}

08001378 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_8) != RESET){
 800137c:	4b8a      	ldr	r3, [pc, #552]	; (80015a8 <EXTI9_5_IRQHandler+0x230>)
 800137e:	695b      	ldr	r3, [r3, #20]
 8001380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001384:	2b00      	cmp	r3, #0
 8001386:	d039      	beq.n	80013fc <EXTI9_5_IRQHandler+0x84>


		if(HAL_GetTick() - ticks_pressed >= 20){
 8001388:	f000 fa0c 	bl	80017a4 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	4b87      	ldr	r3, [pc, #540]	; (80015ac <EXTI9_5_IRQHandler+0x234>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	2b13      	cmp	r3, #19
 8001396:	d92c      	bls.n	80013f2 <EXTI9_5_IRQHandler+0x7a>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == 0){
 8001398:	4b85      	ldr	r3, [pc, #532]	; (80015b0 <EXTI9_5_IRQHandler+0x238>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	b2db      	uxtb	r3, r3
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d112      	bne.n	80013c8 <EXTI9_5_IRQHandler+0x50>
 80013a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013a6:	4883      	ldr	r0, [pc, #524]	; (80015b4 <EXTI9_5_IRQHandler+0x23c>)
 80013a8:	f001 f912 	bl	80025d0 <HAL_GPIO_ReadPin>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d10a      	bne.n	80013c8 <EXTI9_5_IRQHandler+0x50>
				button_state =0 ; // stable low reached
 80013b2:	4b7f      	ldr	r3, [pc, #508]	; (80015b0 <EXTI9_5_IRQHandler+0x238>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 80013b8:	f000 f9f4 	bl	80017a4 <HAL_GetTick>
 80013bc:	4603      	mov	r3, r0
 80013be:	4a7b      	ldr	r2, [pc, #492]	; (80015ac <EXTI9_5_IRQHandler+0x234>)
 80013c0:	6013      	str	r3, [r2, #0]

				g_left_button_pressed =1;
 80013c2:	4b7d      	ldr	r3, [pc, #500]	; (80015b8 <EXTI9_5_IRQHandler+0x240>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOB ,GPIO_PIN_8) == 1 ){
 80013c8:	4b79      	ldr	r3, [pc, #484]	; (80015b0 <EXTI9_5_IRQHandler+0x238>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d10f      	bne.n	80013f2 <EXTI9_5_IRQHandler+0x7a>
 80013d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013d6:	4877      	ldr	r0, [pc, #476]	; (80015b4 <EXTI9_5_IRQHandler+0x23c>)
 80013d8:	f001 f8fa 	bl	80025d0 <HAL_GPIO_ReadPin>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d107      	bne.n	80013f2 <EXTI9_5_IRQHandler+0x7a>
				ticks_pressed = HAL_GetTick() ;
 80013e2:	f000 f9df 	bl	80017a4 <HAL_GetTick>
 80013e6:	4603      	mov	r3, r0
 80013e8:	4a70      	ldr	r2, [pc, #448]	; (80015ac <EXTI9_5_IRQHandler+0x234>)
 80013ea:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 80013ec:	4b70      	ldr	r3, [pc, #448]	; (80015b0 <EXTI9_5_IRQHandler+0x238>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	701a      	strb	r2, [r3, #0]

			}
		}
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8) ;
 80013f2:	4b6d      	ldr	r3, [pc, #436]	; (80015a8 <EXTI9_5_IRQHandler+0x230>)
 80013f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013f8:	615a      	str	r2, [r3, #20]
 80013fa:	e0c5      	b.n	8001588 <EXTI9_5_IRQHandler+0x210>
	}

	else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_9) != RESET){
 80013fc:	4b6a      	ldr	r3, [pc, #424]	; (80015a8 <EXTI9_5_IRQHandler+0x230>)
 80013fe:	695b      	ldr	r3, [r3, #20]
 8001400:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001404:	2b00      	cmp	r3, #0
 8001406:	d039      	beq.n	800147c <EXTI9_5_IRQHandler+0x104>



		if(HAL_GetTick() - ticks_pressed >= 20){
 8001408:	f000 f9cc 	bl	80017a4 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	4b67      	ldr	r3, [pc, #412]	; (80015ac <EXTI9_5_IRQHandler+0x234>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b13      	cmp	r3, #19
 8001416:	d92c      	bls.n	8001472 <EXTI9_5_IRQHandler+0xfa>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0){
 8001418:	4b65      	ldr	r3, [pc, #404]	; (80015b0 <EXTI9_5_IRQHandler+0x238>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b01      	cmp	r3, #1
 8001420:	d112      	bne.n	8001448 <EXTI9_5_IRQHandler+0xd0>
 8001422:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001426:	4863      	ldr	r0, [pc, #396]	; (80015b4 <EXTI9_5_IRQHandler+0x23c>)
 8001428:	f001 f8d2 	bl	80025d0 <HAL_GPIO_ReadPin>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d10a      	bne.n	8001448 <EXTI9_5_IRQHandler+0xd0>
				button_state =0 ; // stable low reached
 8001432:	4b5f      	ldr	r3, [pc, #380]	; (80015b0 <EXTI9_5_IRQHandler+0x238>)
 8001434:	2200      	movs	r2, #0
 8001436:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 8001438:	f000 f9b4 	bl	80017a4 <HAL_GetTick>
 800143c:	4603      	mov	r3, r0
 800143e:	4a5b      	ldr	r2, [pc, #364]	; (80015ac <EXTI9_5_IRQHandler+0x234>)
 8001440:	6013      	str	r3, [r2, #0]

				g_top_button_pressed = 1 ;
 8001442:	4b5e      	ldr	r3, [pc, #376]	; (80015bc <EXTI9_5_IRQHandler+0x244>)
 8001444:	2201      	movs	r2, #1
 8001446:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOB ,GPIO_PIN_9) == 1 ){
 8001448:	4b59      	ldr	r3, [pc, #356]	; (80015b0 <EXTI9_5_IRQHandler+0x238>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2b00      	cmp	r3, #0
 8001450:	d10f      	bne.n	8001472 <EXTI9_5_IRQHandler+0xfa>
 8001452:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001456:	4857      	ldr	r0, [pc, #348]	; (80015b4 <EXTI9_5_IRQHandler+0x23c>)
 8001458:	f001 f8ba 	bl	80025d0 <HAL_GPIO_ReadPin>
 800145c:	4603      	mov	r3, r0
 800145e:	2b01      	cmp	r3, #1
 8001460:	d107      	bne.n	8001472 <EXTI9_5_IRQHandler+0xfa>
				ticks_pressed = HAL_GetTick() ;
 8001462:	f000 f99f 	bl	80017a4 <HAL_GetTick>
 8001466:	4603      	mov	r3, r0
 8001468:	4a50      	ldr	r2, [pc, #320]	; (80015ac <EXTI9_5_IRQHandler+0x234>)
 800146a:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 800146c:	4b50      	ldr	r3, [pc, #320]	; (80015b0 <EXTI9_5_IRQHandler+0x238>)
 800146e:	2201      	movs	r2, #1
 8001470:	701a      	strb	r2, [r3, #0]

			}
		}

		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_9) ;
 8001472:	4b4d      	ldr	r3, [pc, #308]	; (80015a8 <EXTI9_5_IRQHandler+0x230>)
 8001474:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001478:	615a      	str	r2, [r3, #20]
 800147a:	e085      	b.n	8001588 <EXTI9_5_IRQHandler+0x210>

	}

	else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_6) != RESET){
 800147c:	4b4a      	ldr	r3, [pc, #296]	; (80015a8 <EXTI9_5_IRQHandler+0x230>)
 800147e:	695b      	ldr	r3, [r3, #20]
 8001480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001484:	2b00      	cmp	r3, #0
 8001486:	d036      	beq.n	80014f6 <EXTI9_5_IRQHandler+0x17e>



		if(HAL_GetTick() - ticks_pressed >= 20){
 8001488:	f000 f98c 	bl	80017a4 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	4b47      	ldr	r3, [pc, #284]	; (80015ac <EXTI9_5_IRQHandler+0x234>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	2b13      	cmp	r3, #19
 8001496:	d92a      	bls.n	80014ee <EXTI9_5_IRQHandler+0x176>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 0){
 8001498:	4b45      	ldr	r3, [pc, #276]	; (80015b0 <EXTI9_5_IRQHandler+0x238>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d111      	bne.n	80014c6 <EXTI9_5_IRQHandler+0x14e>
 80014a2:	2140      	movs	r1, #64	; 0x40
 80014a4:	4846      	ldr	r0, [pc, #280]	; (80015c0 <EXTI9_5_IRQHandler+0x248>)
 80014a6:	f001 f893 	bl	80025d0 <HAL_GPIO_ReadPin>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d10a      	bne.n	80014c6 <EXTI9_5_IRQHandler+0x14e>
				button_state =0 ; // stable low reached
 80014b0:	4b3f      	ldr	r3, [pc, #252]	; (80015b0 <EXTI9_5_IRQHandler+0x238>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 80014b6:	f000 f975 	bl	80017a4 <HAL_GetTick>
 80014ba:	4603      	mov	r3, r0
 80014bc:	4a3b      	ldr	r2, [pc, #236]	; (80015ac <EXTI9_5_IRQHandler+0x234>)
 80014be:	6013      	str	r3, [r2, #0]

				g_middle_button_pressed =1 ;
 80014c0:	4b40      	ldr	r3, [pc, #256]	; (80015c4 <EXTI9_5_IRQHandler+0x24c>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOA ,GPIO_PIN_6) == 1 ){
 80014c6:	4b3a      	ldr	r3, [pc, #232]	; (80015b0 <EXTI9_5_IRQHandler+0x238>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d10e      	bne.n	80014ee <EXTI9_5_IRQHandler+0x176>
 80014d0:	2140      	movs	r1, #64	; 0x40
 80014d2:	483b      	ldr	r0, [pc, #236]	; (80015c0 <EXTI9_5_IRQHandler+0x248>)
 80014d4:	f001 f87c 	bl	80025d0 <HAL_GPIO_ReadPin>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d107      	bne.n	80014ee <EXTI9_5_IRQHandler+0x176>
				ticks_pressed = HAL_GetTick() ;
 80014de:	f000 f961 	bl	80017a4 <HAL_GetTick>
 80014e2:	4603      	mov	r3, r0
 80014e4:	4a31      	ldr	r2, [pc, #196]	; (80015ac <EXTI9_5_IRQHandler+0x234>)
 80014e6:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 80014e8:	4b31      	ldr	r3, [pc, #196]	; (80015b0 <EXTI9_5_IRQHandler+0x238>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	701a      	strb	r2, [r3, #0]

			}
		}


		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6) ;
 80014ee:	4b2e      	ldr	r3, [pc, #184]	; (80015a8 <EXTI9_5_IRQHandler+0x230>)
 80014f0:	2240      	movs	r2, #64	; 0x40
 80014f2:	615a      	str	r2, [r3, #20]
 80014f4:	e048      	b.n	8001588 <EXTI9_5_IRQHandler+0x210>

	}

	else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET){
 80014f6:	4b2c      	ldr	r3, [pc, #176]	; (80015a8 <EXTI9_5_IRQHandler+0x230>)
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d036      	beq.n	8001570 <EXTI9_5_IRQHandler+0x1f8>




		if(HAL_GetTick() - ticks_pressed >= 20){
 8001502:	f000 f94f 	bl	80017a4 <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	4b28      	ldr	r3, [pc, #160]	; (80015ac <EXTI9_5_IRQHandler+0x234>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b13      	cmp	r3, #19
 8001510:	d92a      	bls.n	8001568 <EXTI9_5_IRQHandler+0x1f0>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 0){
 8001512:	4b27      	ldr	r3, [pc, #156]	; (80015b0 <EXTI9_5_IRQHandler+0x238>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	b2db      	uxtb	r3, r3
 8001518:	2b01      	cmp	r3, #1
 800151a:	d111      	bne.n	8001540 <EXTI9_5_IRQHandler+0x1c8>
 800151c:	2180      	movs	r1, #128	; 0x80
 800151e:	4828      	ldr	r0, [pc, #160]	; (80015c0 <EXTI9_5_IRQHandler+0x248>)
 8001520:	f001 f856 	bl	80025d0 <HAL_GPIO_ReadPin>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d10a      	bne.n	8001540 <EXTI9_5_IRQHandler+0x1c8>
				button_state =0 ; // stable low reached
 800152a:	4b21      	ldr	r3, [pc, #132]	; (80015b0 <EXTI9_5_IRQHandler+0x238>)
 800152c:	2200      	movs	r2, #0
 800152e:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 8001530:	f000 f938 	bl	80017a4 <HAL_GetTick>
 8001534:	4603      	mov	r3, r0
 8001536:	4a1d      	ldr	r2, [pc, #116]	; (80015ac <EXTI9_5_IRQHandler+0x234>)
 8001538:	6013      	str	r3, [r2, #0]

				g_right_button_pressed = 1 ;
 800153a:	4b23      	ldr	r3, [pc, #140]	; (80015c8 <EXTI9_5_IRQHandler+0x250>)
 800153c:	2201      	movs	r2, #1
 800153e:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOA ,GPIO_PIN_7) == 1 ){
 8001540:	4b1b      	ldr	r3, [pc, #108]	; (80015b0 <EXTI9_5_IRQHandler+0x238>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b00      	cmp	r3, #0
 8001548:	d10e      	bne.n	8001568 <EXTI9_5_IRQHandler+0x1f0>
 800154a:	2180      	movs	r1, #128	; 0x80
 800154c:	481c      	ldr	r0, [pc, #112]	; (80015c0 <EXTI9_5_IRQHandler+0x248>)
 800154e:	f001 f83f 	bl	80025d0 <HAL_GPIO_ReadPin>
 8001552:	4603      	mov	r3, r0
 8001554:	2b01      	cmp	r3, #1
 8001556:	d107      	bne.n	8001568 <EXTI9_5_IRQHandler+0x1f0>
				ticks_pressed = HAL_GetTick() ;
 8001558:	f000 f924 	bl	80017a4 <HAL_GetTick>
 800155c:	4603      	mov	r3, r0
 800155e:	4a13      	ldr	r2, [pc, #76]	; (80015ac <EXTI9_5_IRQHandler+0x234>)
 8001560:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 8001562:	4b13      	ldr	r3, [pc, #76]	; (80015b0 <EXTI9_5_IRQHandler+0x238>)
 8001564:	2201      	movs	r2, #1
 8001566:	701a      	strb	r2, [r3, #0]

			}
		}
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7) ;
 8001568:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <EXTI9_5_IRQHandler+0x230>)
 800156a:	2280      	movs	r2, #128	; 0x80
 800156c:	615a      	str	r2, [r3, #20]
 800156e:	e00b      	b.n	8001588 <EXTI9_5_IRQHandler+0x210>
	}

	else{

		if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET){
 8001570:	4b0d      	ldr	r3, [pc, #52]	; (80015a8 <EXTI9_5_IRQHandler+0x230>)
 8001572:	695b      	ldr	r3, [r3, #20]
 8001574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001578:	2b00      	cmp	r3, #0
 800157a:	d005      	beq.n	8001588 <EXTI9_5_IRQHandler+0x210>

			g_bottom_button_pressed = 1 ;
 800157c:	4b13      	ldr	r3, [pc, #76]	; (80015cc <EXTI9_5_IRQHandler+0x254>)
 800157e:	2201      	movs	r2, #1
 8001580:	701a      	strb	r2, [r3, #0]

			__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7) ;
 8001582:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <EXTI9_5_IRQHandler+0x230>)
 8001584:	2280      	movs	r2, #128	; 0x80
 8001586:	615a      	str	r2, [r3, #20]
		}
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001588:	2040      	movs	r0, #64	; 0x40
 800158a:	f001 f86d 	bl	8002668 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800158e:	2080      	movs	r0, #128	; 0x80
 8001590:	f001 f86a 	bl	8002668 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001594:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001598:	f001 f866 	bl	8002668 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800159c:	f44f 7000 	mov.w	r0, #512	; 0x200
 80015a0:	f001 f862 	bl	8002668 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40013c00 	.word	0x40013c00
 80015ac:	20000164 	.word	0x20000164
 80015b0:	2000001a 	.word	0x2000001a
 80015b4:	40020400 	.word	0x40020400
 80015b8:	2000015f 	.word	0x2000015f
 80015bc:	20000161 	.word	0x20000161
 80015c0:	40020000 	.word	0x40020000
 80015c4:	20000163 	.word	0x20000163
 80015c8:	20000160 	.word	0x20000160
 80015cc:	20000162 	.word	0x20000162

080015d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015d4:	4802      	ldr	r0, [pc, #8]	; (80015e0 <USART2_IRQHandler+0x10>)
 80015d6:	f001 fdc5 	bl	8003164 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	200000f4 	.word	0x200000f4

080015e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80015e8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80015ec:	f001 f83c 	bl	8002668 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015fc:	4a14      	ldr	r2, [pc, #80]	; (8001650 <_sbrk+0x5c>)
 80015fe:	4b15      	ldr	r3, [pc, #84]	; (8001654 <_sbrk+0x60>)
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001608:	4b13      	ldr	r3, [pc, #76]	; (8001658 <_sbrk+0x64>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d102      	bne.n	8001616 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001610:	4b11      	ldr	r3, [pc, #68]	; (8001658 <_sbrk+0x64>)
 8001612:	4a12      	ldr	r2, [pc, #72]	; (800165c <_sbrk+0x68>)
 8001614:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001616:	4b10      	ldr	r3, [pc, #64]	; (8001658 <_sbrk+0x64>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4413      	add	r3, r2
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	429a      	cmp	r2, r3
 8001622:	d207      	bcs.n	8001634 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001624:	f002 fc98 	bl	8003f58 <__errno>
 8001628:	4603      	mov	r3, r0
 800162a:	220c      	movs	r2, #12
 800162c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800162e:	f04f 33ff 	mov.w	r3, #4294967295
 8001632:	e009      	b.n	8001648 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001634:	4b08      	ldr	r3, [pc, #32]	; (8001658 <_sbrk+0x64>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800163a:	4b07      	ldr	r3, [pc, #28]	; (8001658 <_sbrk+0x64>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4413      	add	r3, r2
 8001642:	4a05      	ldr	r2, [pc, #20]	; (8001658 <_sbrk+0x64>)
 8001644:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001646:	68fb      	ldr	r3, [r7, #12]
}
 8001648:	4618      	mov	r0, r3
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20020000 	.word	0x20020000
 8001654:	00000400 	.word	0x00000400
 8001658:	20000168 	.word	0x20000168
 800165c:	20000180 	.word	0x20000180

08001660 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001664:	4b06      	ldr	r3, [pc, #24]	; (8001680 <SystemInit+0x20>)
 8001666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800166a:	4a05      	ldr	r2, [pc, #20]	; (8001680 <SystemInit+0x20>)
 800166c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001670:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001684:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001688:	480d      	ldr	r0, [pc, #52]	; (80016c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800168a:	490e      	ldr	r1, [pc, #56]	; (80016c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800168c:	4a0e      	ldr	r2, [pc, #56]	; (80016c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800168e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001690:	e002      	b.n	8001698 <LoopCopyDataInit>

08001692 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001692:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001694:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001696:	3304      	adds	r3, #4

08001698 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001698:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800169a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800169c:	d3f9      	bcc.n	8001692 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800169e:	4a0b      	ldr	r2, [pc, #44]	; (80016cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016a0:	4c0b      	ldr	r4, [pc, #44]	; (80016d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016a4:	e001      	b.n	80016aa <LoopFillZerobss>

080016a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016a8:	3204      	adds	r2, #4

080016aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016ac:	d3fb      	bcc.n	80016a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016ae:	f7ff ffd7 	bl	8001660 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016b2:	f002 fc57 	bl	8003f64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016b6:	f7ff fb47 	bl	8000d48 <main>
  bx  lr    
 80016ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80016bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016c4:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80016c8:	08004910 	.word	0x08004910
  ldr r2, =_sbss
 80016cc:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80016d0:	20000180 	.word	0x20000180

080016d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016d4:	e7fe      	b.n	80016d4 <ADC_IRQHandler>
	...

080016d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016dc:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <HAL_Init+0x40>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a0d      	ldr	r2, [pc, #52]	; (8001718 <HAL_Init+0x40>)
 80016e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016e8:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <HAL_Init+0x40>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a0a      	ldr	r2, [pc, #40]	; (8001718 <HAL_Init+0x40>)
 80016ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016f4:	4b08      	ldr	r3, [pc, #32]	; (8001718 <HAL_Init+0x40>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a07      	ldr	r2, [pc, #28]	; (8001718 <HAL_Init+0x40>)
 80016fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001700:	2003      	movs	r0, #3
 8001702:	f000 fd0d 	bl	8002120 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001706:	2000      	movs	r0, #0
 8001708:	f000 f808 	bl	800171c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800170c:	f7ff fd4e 	bl	80011ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40023c00 	.word	0x40023c00

0800171c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001724:	4b12      	ldr	r3, [pc, #72]	; (8001770 <HAL_InitTick+0x54>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4b12      	ldr	r3, [pc, #72]	; (8001774 <HAL_InitTick+0x58>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	4619      	mov	r1, r3
 800172e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001732:	fbb3 f3f1 	udiv	r3, r3, r1
 8001736:	fbb2 f3f3 	udiv	r3, r2, r3
 800173a:	4618      	mov	r0, r3
 800173c:	f000 fd25 	bl	800218a <HAL_SYSTICK_Config>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e00e      	b.n	8001768 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2b0f      	cmp	r3, #15
 800174e:	d80a      	bhi.n	8001766 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001750:	2200      	movs	r2, #0
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	f04f 30ff 	mov.w	r0, #4294967295
 8001758:	f000 fced 	bl	8002136 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800175c:	4a06      	ldr	r2, [pc, #24]	; (8001778 <HAL_InitTick+0x5c>)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001762:	2300      	movs	r3, #0
 8001764:	e000      	b.n	8001768 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
}
 8001768:	4618      	mov	r0, r3
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	2000001c 	.word	0x2000001c
 8001774:	20000024 	.word	0x20000024
 8001778:	20000020 	.word	0x20000020

0800177c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <HAL_IncTick+0x20>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	461a      	mov	r2, r3
 8001786:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <HAL_IncTick+0x24>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4413      	add	r3, r2
 800178c:	4a04      	ldr	r2, [pc, #16]	; (80017a0 <HAL_IncTick+0x24>)
 800178e:	6013      	str	r3, [r2, #0]
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	20000024 	.word	0x20000024
 80017a0:	2000016c 	.word	0x2000016c

080017a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  return uwTick;
 80017a8:	4b03      	ldr	r3, [pc, #12]	; (80017b8 <HAL_GetTick+0x14>)
 80017aa:	681b      	ldr	r3, [r3, #0]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	2000016c 	.word	0x2000016c

080017bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017c4:	f7ff ffee 	bl	80017a4 <HAL_GetTick>
 80017c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d4:	d005      	beq.n	80017e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017d6:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <HAL_Delay+0x44>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	461a      	mov	r2, r3
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	4413      	add	r3, r2
 80017e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017e2:	bf00      	nop
 80017e4:	f7ff ffde 	bl	80017a4 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	68fa      	ldr	r2, [r7, #12]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d8f7      	bhi.n	80017e4 <HAL_Delay+0x28>
  {
  }
}
 80017f4:	bf00      	nop
 80017f6:	bf00      	nop
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000024 	.word	0x20000024

08001804 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800180c:	2300      	movs	r3, #0
 800180e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e033      	b.n	8001882 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	2b00      	cmp	r3, #0
 8001820:	d109      	bne.n	8001836 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7ff fcea 	bl	80011fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	f003 0310 	and.w	r3, r3, #16
 800183e:	2b00      	cmp	r3, #0
 8001840:	d118      	bne.n	8001874 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800184a:	f023 0302 	bic.w	r3, r3, #2
 800184e:	f043 0202 	orr.w	r2, r3, #2
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f000 fa96 	bl	8001d88 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	f023 0303 	bic.w	r3, r3, #3
 800186a:	f043 0201 	orr.w	r2, r3, #1
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	641a      	str	r2, [r3, #64]	; 0x40
 8001872:	e001      	b.n	8001878 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001880:	7bfb      	ldrb	r3, [r7, #15]
}
 8001882:	4618      	mov	r0, r3
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
	...

0800188c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001894:	2300      	movs	r3, #0
 8001896:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d101      	bne.n	80018a6 <HAL_ADC_Start+0x1a>
 80018a2:	2302      	movs	r3, #2
 80018a4:	e097      	b.n	80019d6 <HAL_ADC_Start+0x14a>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2201      	movs	r2, #1
 80018aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d018      	beq.n	80018ee <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	689a      	ldr	r2, [r3, #8]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f042 0201 	orr.w	r2, r2, #1
 80018ca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018cc:	4b45      	ldr	r3, [pc, #276]	; (80019e4 <HAL_ADC_Start+0x158>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a45      	ldr	r2, [pc, #276]	; (80019e8 <HAL_ADC_Start+0x15c>)
 80018d2:	fba2 2303 	umull	r2, r3, r2, r3
 80018d6:	0c9a      	lsrs	r2, r3, #18
 80018d8:	4613      	mov	r3, r2
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	4413      	add	r3, r2
 80018de:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80018e0:	e002      	b.n	80018e8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	3b01      	subs	r3, #1
 80018e6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1f9      	bne.n	80018e2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d15f      	bne.n	80019bc <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001900:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001904:	f023 0301 	bic.w	r3, r3, #1
 8001908:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800191a:	2b00      	cmp	r3, #0
 800191c:	d007      	beq.n	800192e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001926:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001936:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800193a:	d106      	bne.n	800194a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001940:	f023 0206 	bic.w	r2, r3, #6
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	645a      	str	r2, [r3, #68]	; 0x44
 8001948:	e002      	b.n	8001950 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001958:	4b24      	ldr	r3, [pc, #144]	; (80019ec <HAL_ADC_Start+0x160>)
 800195a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001964:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f003 031f 	and.w	r3, r3, #31
 800196e:	2b00      	cmp	r3, #0
 8001970:	d10f      	bne.n	8001992 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d129      	bne.n	80019d4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	689a      	ldr	r2, [r3, #8]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	e020      	b.n	80019d4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a16      	ldr	r2, [pc, #88]	; (80019f0 <HAL_ADC_Start+0x164>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d11b      	bne.n	80019d4 <HAL_ADC_Start+0x148>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d114      	bne.n	80019d4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	689a      	ldr	r2, [r3, #8]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019b8:	609a      	str	r2, [r3, #8]
 80019ba:	e00b      	b.n	80019d4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	f043 0210 	orr.w	r2, r3, #16
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019cc:	f043 0201 	orr.w	r2, r3, #1
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3714      	adds	r7, #20
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	2000001c 	.word	0x2000001c
 80019e8:	431bde83 	.word	0x431bde83
 80019ec:	40012300 	.word	0x40012300
 80019f0:	40012000 	.word	0x40012000

080019f4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80019fe:	2300      	movs	r3, #0
 8001a00:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a10:	d113      	bne.n	8001a3a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a20:	d10b      	bne.n	8001a3a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a26:	f043 0220 	orr.w	r2, r3, #32
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e063      	b.n	8001b02 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001a3a:	f7ff feb3 	bl	80017a4 <HAL_GetTick>
 8001a3e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a40:	e021      	b.n	8001a86 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a48:	d01d      	beq.n	8001a86 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d007      	beq.n	8001a60 <HAL_ADC_PollForConversion+0x6c>
 8001a50:	f7ff fea8 	bl	80017a4 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d212      	bcs.n	8001a86 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d00b      	beq.n	8001a86 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	f043 0204 	orr.w	r2, r3, #4
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e03d      	b.n	8001b02 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d1d6      	bne.n	8001a42 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f06f 0212 	mvn.w	r2, #18
 8001a9c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d123      	bne.n	8001b00 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d11f      	bne.n	8001b00 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d006      	beq.n	8001adc <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d111      	bne.n	8001b00 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d105      	bne.n	8001b00 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af8:	f043 0201 	orr.w	r2, r3, #1
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d101      	bne.n	8001b40 <HAL_ADC_ConfigChannel+0x1c>
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	e113      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x244>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b09      	cmp	r3, #9
 8001b4e:	d925      	bls.n	8001b9c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68d9      	ldr	r1, [r3, #12]
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	4613      	mov	r3, r2
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	4413      	add	r3, r2
 8001b64:	3b1e      	subs	r3, #30
 8001b66:	2207      	movs	r2, #7
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	43da      	mvns	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	400a      	ands	r2, r1
 8001b74:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	68d9      	ldr	r1, [r3, #12]
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	689a      	ldr	r2, [r3, #8]
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	4618      	mov	r0, r3
 8001b88:	4603      	mov	r3, r0
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	4403      	add	r3, r0
 8001b8e:	3b1e      	subs	r3, #30
 8001b90:	409a      	lsls	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	430a      	orrs	r2, r1
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	e022      	b.n	8001be2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6919      	ldr	r1, [r3, #16]
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	461a      	mov	r2, r3
 8001baa:	4613      	mov	r3, r2
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	4413      	add	r3, r2
 8001bb0:	2207      	movs	r2, #7
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	43da      	mvns	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	400a      	ands	r2, r1
 8001bbe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6919      	ldr	r1, [r3, #16]
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	689a      	ldr	r2, [r3, #8]
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	4403      	add	r3, r0
 8001bd8:	409a      	lsls	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	430a      	orrs	r2, r1
 8001be0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2b06      	cmp	r3, #6
 8001be8:	d824      	bhi.n	8001c34 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685a      	ldr	r2, [r3, #4]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	3b05      	subs	r3, #5
 8001bfc:	221f      	movs	r2, #31
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	43da      	mvns	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	400a      	ands	r2, r1
 8001c0a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	4618      	mov	r0, r3
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4413      	add	r3, r2
 8001c24:	3b05      	subs	r3, #5
 8001c26:	fa00 f203 	lsl.w	r2, r0, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	635a      	str	r2, [r3, #52]	; 0x34
 8001c32:	e04c      	b.n	8001cce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b0c      	cmp	r3, #12
 8001c3a:	d824      	bhi.n	8001c86 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685a      	ldr	r2, [r3, #4]
 8001c46:	4613      	mov	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	3b23      	subs	r3, #35	; 0x23
 8001c4e:	221f      	movs	r2, #31
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	43da      	mvns	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	400a      	ands	r2, r1
 8001c5c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685a      	ldr	r2, [r3, #4]
 8001c70:	4613      	mov	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	4413      	add	r3, r2
 8001c76:	3b23      	subs	r3, #35	; 0x23
 8001c78:	fa00 f203 	lsl.w	r2, r0, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	430a      	orrs	r2, r1
 8001c82:	631a      	str	r2, [r3, #48]	; 0x30
 8001c84:	e023      	b.n	8001cce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685a      	ldr	r2, [r3, #4]
 8001c90:	4613      	mov	r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4413      	add	r3, r2
 8001c96:	3b41      	subs	r3, #65	; 0x41
 8001c98:	221f      	movs	r2, #31
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	43da      	mvns	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	400a      	ands	r2, r1
 8001ca6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685a      	ldr	r2, [r3, #4]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	4413      	add	r3, r2
 8001cc0:	3b41      	subs	r3, #65	; 0x41
 8001cc2:	fa00 f203 	lsl.w	r2, r0, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cce:	4b29      	ldr	r3, [pc, #164]	; (8001d74 <HAL_ADC_ConfigChannel+0x250>)
 8001cd0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a28      	ldr	r2, [pc, #160]	; (8001d78 <HAL_ADC_ConfigChannel+0x254>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d10f      	bne.n	8001cfc <HAL_ADC_ConfigChannel+0x1d8>
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2b12      	cmp	r3, #18
 8001ce2:	d10b      	bne.n	8001cfc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a1d      	ldr	r2, [pc, #116]	; (8001d78 <HAL_ADC_ConfigChannel+0x254>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d12b      	bne.n	8001d5e <HAL_ADC_ConfigChannel+0x23a>
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a1c      	ldr	r2, [pc, #112]	; (8001d7c <HAL_ADC_ConfigChannel+0x258>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d003      	beq.n	8001d18 <HAL_ADC_ConfigChannel+0x1f4>
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2b11      	cmp	r3, #17
 8001d16:	d122      	bne.n	8001d5e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a11      	ldr	r2, [pc, #68]	; (8001d7c <HAL_ADC_ConfigChannel+0x258>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d111      	bne.n	8001d5e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d3a:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <HAL_ADC_ConfigChannel+0x25c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a11      	ldr	r2, [pc, #68]	; (8001d84 <HAL_ADC_ConfigChannel+0x260>)
 8001d40:	fba2 2303 	umull	r2, r3, r2, r3
 8001d44:	0c9a      	lsrs	r2, r3, #18
 8001d46:	4613      	mov	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	4413      	add	r3, r2
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d50:	e002      	b.n	8001d58 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	3b01      	subs	r3, #1
 8001d56:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1f9      	bne.n	8001d52 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3714      	adds	r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	40012300 	.word	0x40012300
 8001d78:	40012000 	.word	0x40012000
 8001d7c:	10000012 	.word	0x10000012
 8001d80:	2000001c 	.word	0x2000001c
 8001d84:	431bde83 	.word	0x431bde83

08001d88 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d90:	4b79      	ldr	r3, [pc, #484]	; (8001f78 <ADC_Init+0x1f0>)
 8001d92:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	431a      	orrs	r2, r3
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dbc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	6859      	ldr	r1, [r3, #4]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	021a      	lsls	r2, r3, #8
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	685a      	ldr	r2, [r3, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001de0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	6859      	ldr	r1, [r3, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	430a      	orrs	r2, r1
 8001df2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	689a      	ldr	r2, [r3, #8]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6899      	ldr	r1, [r3, #8]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	68da      	ldr	r2, [r3, #12]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	430a      	orrs	r2, r1
 8001e14:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1a:	4a58      	ldr	r2, [pc, #352]	; (8001f7c <ADC_Init+0x1f4>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d022      	beq.n	8001e66 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	689a      	ldr	r2, [r3, #8]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e2e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6899      	ldr	r1, [r3, #8]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	6899      	ldr	r1, [r3, #8]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	430a      	orrs	r2, r1
 8001e62:	609a      	str	r2, [r3, #8]
 8001e64:	e00f      	b.n	8001e86 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e84:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 0202 	bic.w	r2, r2, #2
 8001e94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	6899      	ldr	r1, [r3, #8]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	7e1b      	ldrb	r3, [r3, #24]
 8001ea0:	005a      	lsls	r2, r3, #1
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d01b      	beq.n	8001eec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ec2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001ed2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6859      	ldr	r1, [r3, #4]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	035a      	lsls	r2, r3, #13
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	e007      	b.n	8001efc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	685a      	ldr	r2, [r3, #4]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001efa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	3b01      	subs	r3, #1
 8001f18:	051a      	lsls	r2, r3, #20
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6899      	ldr	r1, [r3, #8]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f3e:	025a      	lsls	r2, r3, #9
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	430a      	orrs	r2, r1
 8001f46:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	689a      	ldr	r2, [r3, #8]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6899      	ldr	r1, [r3, #8]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	029a      	lsls	r2, r3, #10
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	609a      	str	r2, [r3, #8]
}
 8001f6c:	bf00      	nop
 8001f6e:	3714      	adds	r7, #20
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	40012300 	.word	0x40012300
 8001f7c:	0f000001 	.word	0x0f000001

08001f80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f90:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f96:	68ba      	ldr	r2, [r7, #8]
 8001f98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fb2:	4a04      	ldr	r2, [pc, #16]	; (8001fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	60d3      	str	r3, [r2, #12]
}
 8001fb8:	bf00      	nop
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	e000ed00 	.word	0xe000ed00

08001fc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fcc:	4b04      	ldr	r3, [pc, #16]	; (8001fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	0a1b      	lsrs	r3, r3, #8
 8001fd2:	f003 0307 	and.w	r3, r3, #7
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	e000ed00 	.word	0xe000ed00

08001fe4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	db0b      	blt.n	800200e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	f003 021f 	and.w	r2, r3, #31
 8001ffc:	4907      	ldr	r1, [pc, #28]	; (800201c <__NVIC_EnableIRQ+0x38>)
 8001ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002002:	095b      	lsrs	r3, r3, #5
 8002004:	2001      	movs	r0, #1
 8002006:	fa00 f202 	lsl.w	r2, r0, r2
 800200a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	e000e100 	.word	0xe000e100

08002020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	6039      	str	r1, [r7, #0]
 800202a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800202c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002030:	2b00      	cmp	r3, #0
 8002032:	db0a      	blt.n	800204a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	b2da      	uxtb	r2, r3
 8002038:	490c      	ldr	r1, [pc, #48]	; (800206c <__NVIC_SetPriority+0x4c>)
 800203a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203e:	0112      	lsls	r2, r2, #4
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	440b      	add	r3, r1
 8002044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002048:	e00a      	b.n	8002060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	b2da      	uxtb	r2, r3
 800204e:	4908      	ldr	r1, [pc, #32]	; (8002070 <__NVIC_SetPriority+0x50>)
 8002050:	79fb      	ldrb	r3, [r7, #7]
 8002052:	f003 030f 	and.w	r3, r3, #15
 8002056:	3b04      	subs	r3, #4
 8002058:	0112      	lsls	r2, r2, #4
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	440b      	add	r3, r1
 800205e:	761a      	strb	r2, [r3, #24]
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	e000e100 	.word	0xe000e100
 8002070:	e000ed00 	.word	0xe000ed00

08002074 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002074:	b480      	push	{r7}
 8002076:	b089      	sub	sp, #36	; 0x24
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	f1c3 0307 	rsb	r3, r3, #7
 800208e:	2b04      	cmp	r3, #4
 8002090:	bf28      	it	cs
 8002092:	2304      	movcs	r3, #4
 8002094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	3304      	adds	r3, #4
 800209a:	2b06      	cmp	r3, #6
 800209c:	d902      	bls.n	80020a4 <NVIC_EncodePriority+0x30>
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	3b03      	subs	r3, #3
 80020a2:	e000      	b.n	80020a6 <NVIC_EncodePriority+0x32>
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a8:	f04f 32ff 	mov.w	r2, #4294967295
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43da      	mvns	r2, r3
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	401a      	ands	r2, r3
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020bc:	f04f 31ff 	mov.w	r1, #4294967295
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	fa01 f303 	lsl.w	r3, r1, r3
 80020c6:	43d9      	mvns	r1, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020cc:	4313      	orrs	r3, r2
         );
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3724      	adds	r7, #36	; 0x24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
	...

080020dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3b01      	subs	r3, #1
 80020e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020ec:	d301      	bcc.n	80020f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ee:	2301      	movs	r3, #1
 80020f0:	e00f      	b.n	8002112 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020f2:	4a0a      	ldr	r2, [pc, #40]	; (800211c <SysTick_Config+0x40>)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3b01      	subs	r3, #1
 80020f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020fa:	210f      	movs	r1, #15
 80020fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002100:	f7ff ff8e 	bl	8002020 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002104:	4b05      	ldr	r3, [pc, #20]	; (800211c <SysTick_Config+0x40>)
 8002106:	2200      	movs	r2, #0
 8002108:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800210a:	4b04      	ldr	r3, [pc, #16]	; (800211c <SysTick_Config+0x40>)
 800210c:	2207      	movs	r2, #7
 800210e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	e000e010 	.word	0xe000e010

08002120 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7ff ff29 	bl	8001f80 <__NVIC_SetPriorityGrouping>
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002136:	b580      	push	{r7, lr}
 8002138:	b086      	sub	sp, #24
 800213a:	af00      	add	r7, sp, #0
 800213c:	4603      	mov	r3, r0
 800213e:	60b9      	str	r1, [r7, #8]
 8002140:	607a      	str	r2, [r7, #4]
 8002142:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002148:	f7ff ff3e 	bl	8001fc8 <__NVIC_GetPriorityGrouping>
 800214c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	68b9      	ldr	r1, [r7, #8]
 8002152:	6978      	ldr	r0, [r7, #20]
 8002154:	f7ff ff8e 	bl	8002074 <NVIC_EncodePriority>
 8002158:	4602      	mov	r2, r0
 800215a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800215e:	4611      	mov	r1, r2
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff ff5d 	bl	8002020 <__NVIC_SetPriority>
}
 8002166:	bf00      	nop
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b082      	sub	sp, #8
 8002172:	af00      	add	r7, sp, #0
 8002174:	4603      	mov	r3, r0
 8002176:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff ff31 	bl	8001fe4 <__NVIC_EnableIRQ>
}
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b082      	sub	sp, #8
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff ffa2 	bl	80020dc <SysTick_Config>
 8002198:	4603      	mov	r3, r0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b084      	sub	sp, #16
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ae:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80021b0:	f7ff faf8 	bl	80017a4 <HAL_GetTick>
 80021b4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d008      	beq.n	80021d4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2280      	movs	r2, #128	; 0x80
 80021c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e052      	b.n	800227a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 0216 	bic.w	r2, r2, #22
 80021e2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	695a      	ldr	r2, [r3, #20]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021f2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d103      	bne.n	8002204 <HAL_DMA_Abort+0x62>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002200:	2b00      	cmp	r3, #0
 8002202:	d007      	beq.n	8002214 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f022 0208 	bic.w	r2, r2, #8
 8002212:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 0201 	bic.w	r2, r2, #1
 8002222:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002224:	e013      	b.n	800224e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002226:	f7ff fabd 	bl	80017a4 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b05      	cmp	r3, #5
 8002232:	d90c      	bls.n	800224e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2220      	movs	r2, #32
 8002238:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2203      	movs	r2, #3
 800223e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e015      	b.n	800227a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1e4      	bne.n	8002226 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002260:	223f      	movs	r2, #63	; 0x3f
 8002262:	409a      	lsls	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002282:	b480      	push	{r7}
 8002284:	b083      	sub	sp, #12
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d004      	beq.n	80022a0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2280      	movs	r2, #128	; 0x80
 800229a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e00c      	b.n	80022ba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2205      	movs	r2, #5
 80022a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f022 0201 	bic.w	r2, r2, #1
 80022b6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
	...

080022c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b089      	sub	sp, #36	; 0x24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022d2:	2300      	movs	r3, #0
 80022d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022d6:	2300      	movs	r3, #0
 80022d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022da:	2300      	movs	r3, #0
 80022dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022de:	2300      	movs	r3, #0
 80022e0:	61fb      	str	r3, [r7, #28]
 80022e2:	e159      	b.n	8002598 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022e4:	2201      	movs	r2, #1
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	4013      	ands	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	f040 8148 	bne.w	8002592 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f003 0303 	and.w	r3, r3, #3
 800230a:	2b01      	cmp	r3, #1
 800230c:	d005      	beq.n	800231a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002316:	2b02      	cmp	r3, #2
 8002318:	d130      	bne.n	800237c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	2203      	movs	r2, #3
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43db      	mvns	r3, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4013      	ands	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	68da      	ldr	r2, [r3, #12]
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4313      	orrs	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002350:	2201      	movs	r2, #1
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	43db      	mvns	r3, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4013      	ands	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	091b      	lsrs	r3, r3, #4
 8002366:	f003 0201 	and.w	r2, r3, #1
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	4313      	orrs	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f003 0303 	and.w	r3, r3, #3
 8002384:	2b03      	cmp	r3, #3
 8002386:	d017      	beq.n	80023b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	2203      	movs	r2, #3
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	43db      	mvns	r3, r3
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4013      	ands	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 0303 	and.w	r3, r3, #3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d123      	bne.n	800240c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	08da      	lsrs	r2, r3, #3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3208      	adds	r2, #8
 80023cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	220f      	movs	r2, #15
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	43db      	mvns	r3, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4013      	ands	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	691a      	ldr	r2, [r3, #16]
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	08da      	lsrs	r2, r3, #3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	3208      	adds	r2, #8
 8002406:	69b9      	ldr	r1, [r7, #24]
 8002408:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	2203      	movs	r2, #3
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	43db      	mvns	r3, r3
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	4013      	ands	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f003 0203 	and.w	r2, r3, #3
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4313      	orrs	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 80a2 	beq.w	8002592 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800244e:	2300      	movs	r3, #0
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	4b57      	ldr	r3, [pc, #348]	; (80025b0 <HAL_GPIO_Init+0x2e8>)
 8002454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002456:	4a56      	ldr	r2, [pc, #344]	; (80025b0 <HAL_GPIO_Init+0x2e8>)
 8002458:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800245c:	6453      	str	r3, [r2, #68]	; 0x44
 800245e:	4b54      	ldr	r3, [pc, #336]	; (80025b0 <HAL_GPIO_Init+0x2e8>)
 8002460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002462:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002466:	60fb      	str	r3, [r7, #12]
 8002468:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800246a:	4a52      	ldr	r2, [pc, #328]	; (80025b4 <HAL_GPIO_Init+0x2ec>)
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	089b      	lsrs	r3, r3, #2
 8002470:	3302      	adds	r3, #2
 8002472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002476:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	f003 0303 	and.w	r3, r3, #3
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	220f      	movs	r2, #15
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	43db      	mvns	r3, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4013      	ands	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a49      	ldr	r2, [pc, #292]	; (80025b8 <HAL_GPIO_Init+0x2f0>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d019      	beq.n	80024ca <HAL_GPIO_Init+0x202>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a48      	ldr	r2, [pc, #288]	; (80025bc <HAL_GPIO_Init+0x2f4>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d013      	beq.n	80024c6 <HAL_GPIO_Init+0x1fe>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a47      	ldr	r2, [pc, #284]	; (80025c0 <HAL_GPIO_Init+0x2f8>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d00d      	beq.n	80024c2 <HAL_GPIO_Init+0x1fa>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a46      	ldr	r2, [pc, #280]	; (80025c4 <HAL_GPIO_Init+0x2fc>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d007      	beq.n	80024be <HAL_GPIO_Init+0x1f6>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a45      	ldr	r2, [pc, #276]	; (80025c8 <HAL_GPIO_Init+0x300>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d101      	bne.n	80024ba <HAL_GPIO_Init+0x1f2>
 80024b6:	2304      	movs	r3, #4
 80024b8:	e008      	b.n	80024cc <HAL_GPIO_Init+0x204>
 80024ba:	2307      	movs	r3, #7
 80024bc:	e006      	b.n	80024cc <HAL_GPIO_Init+0x204>
 80024be:	2303      	movs	r3, #3
 80024c0:	e004      	b.n	80024cc <HAL_GPIO_Init+0x204>
 80024c2:	2302      	movs	r3, #2
 80024c4:	e002      	b.n	80024cc <HAL_GPIO_Init+0x204>
 80024c6:	2301      	movs	r3, #1
 80024c8:	e000      	b.n	80024cc <HAL_GPIO_Init+0x204>
 80024ca:	2300      	movs	r3, #0
 80024cc:	69fa      	ldr	r2, [r7, #28]
 80024ce:	f002 0203 	and.w	r2, r2, #3
 80024d2:	0092      	lsls	r2, r2, #2
 80024d4:	4093      	lsls	r3, r2
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4313      	orrs	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024dc:	4935      	ldr	r1, [pc, #212]	; (80025b4 <HAL_GPIO_Init+0x2ec>)
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	089b      	lsrs	r3, r3, #2
 80024e2:	3302      	adds	r3, #2
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024ea:	4b38      	ldr	r3, [pc, #224]	; (80025cc <HAL_GPIO_Init+0x304>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	43db      	mvns	r3, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4013      	ands	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	4313      	orrs	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800250e:	4a2f      	ldr	r2, [pc, #188]	; (80025cc <HAL_GPIO_Init+0x304>)
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002514:	4b2d      	ldr	r3, [pc, #180]	; (80025cc <HAL_GPIO_Init+0x304>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	43db      	mvns	r3, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4013      	ands	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d003      	beq.n	8002538 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	4313      	orrs	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002538:	4a24      	ldr	r2, [pc, #144]	; (80025cc <HAL_GPIO_Init+0x304>)
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800253e:	4b23      	ldr	r3, [pc, #140]	; (80025cc <HAL_GPIO_Init+0x304>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	43db      	mvns	r3, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4013      	ands	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	4313      	orrs	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002562:	4a1a      	ldr	r2, [pc, #104]	; (80025cc <HAL_GPIO_Init+0x304>)
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002568:	4b18      	ldr	r3, [pc, #96]	; (80025cc <HAL_GPIO_Init+0x304>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	43db      	mvns	r3, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4013      	ands	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d003      	beq.n	800258c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	4313      	orrs	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800258c:	4a0f      	ldr	r2, [pc, #60]	; (80025cc <HAL_GPIO_Init+0x304>)
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	3301      	adds	r3, #1
 8002596:	61fb      	str	r3, [r7, #28]
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	2b0f      	cmp	r3, #15
 800259c:	f67f aea2 	bls.w	80022e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025a0:	bf00      	nop
 80025a2:	bf00      	nop
 80025a4:	3724      	adds	r7, #36	; 0x24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	40023800 	.word	0x40023800
 80025b4:	40013800 	.word	0x40013800
 80025b8:	40020000 	.word	0x40020000
 80025bc:	40020400 	.word	0x40020400
 80025c0:	40020800 	.word	0x40020800
 80025c4:	40020c00 	.word	0x40020c00
 80025c8:	40021000 	.word	0x40021000
 80025cc:	40013c00 	.word	0x40013c00

080025d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	460b      	mov	r3, r1
 80025da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	691a      	ldr	r2, [r3, #16]
 80025e0:	887b      	ldrh	r3, [r7, #2]
 80025e2:	4013      	ands	r3, r2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d002      	beq.n	80025ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025e8:	2301      	movs	r3, #1
 80025ea:	73fb      	strb	r3, [r7, #15]
 80025ec:	e001      	b.n	80025f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025ee:	2300      	movs	r3, #0
 80025f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	460b      	mov	r3, r1
 800260a:	807b      	strh	r3, [r7, #2]
 800260c:	4613      	mov	r3, r2
 800260e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002610:	787b      	ldrb	r3, [r7, #1]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002616:	887a      	ldrh	r2, [r7, #2]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800261c:	e003      	b.n	8002626 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800261e:	887b      	ldrh	r3, [r7, #2]
 8002620:	041a      	lsls	r2, r3, #16
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	619a      	str	r2, [r3, #24]
}
 8002626:	bf00      	nop
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002632:	b480      	push	{r7}
 8002634:	b085      	sub	sp, #20
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
 800263a:	460b      	mov	r3, r1
 800263c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002644:	887a      	ldrh	r2, [r7, #2]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	4013      	ands	r3, r2
 800264a:	041a      	lsls	r2, r3, #16
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	43d9      	mvns	r1, r3
 8002650:	887b      	ldrh	r3, [r7, #2]
 8002652:	400b      	ands	r3, r1
 8002654:	431a      	orrs	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	619a      	str	r2, [r3, #24]
}
 800265a:	bf00      	nop
 800265c:	3714      	adds	r7, #20
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
	...

08002668 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	4603      	mov	r3, r0
 8002670:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002672:	4b08      	ldr	r3, [pc, #32]	; (8002694 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002674:	695a      	ldr	r2, [r3, #20]
 8002676:	88fb      	ldrh	r3, [r7, #6]
 8002678:	4013      	ands	r3, r2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d006      	beq.n	800268c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800267e:	4a05      	ldr	r2, [pc, #20]	; (8002694 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002680:	88fb      	ldrh	r3, [r7, #6]
 8002682:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002684:	88fb      	ldrh	r3, [r7, #6]
 8002686:	4618      	mov	r0, r3
 8002688:	f000 f806 	bl	8002698 <HAL_GPIO_EXTI_Callback>
  }
}
 800268c:	bf00      	nop
 800268e:	3708      	adds	r7, #8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40013c00 	.word	0x40013c00

08002698 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	4603      	mov	r3, r0
 80026a0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
	...

080026b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e267      	b.n	8002b92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d075      	beq.n	80027ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026ce:	4b88      	ldr	r3, [pc, #544]	; (80028f0 <HAL_RCC_OscConfig+0x240>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f003 030c 	and.w	r3, r3, #12
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	d00c      	beq.n	80026f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026da:	4b85      	ldr	r3, [pc, #532]	; (80028f0 <HAL_RCC_OscConfig+0x240>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026e2:	2b08      	cmp	r3, #8
 80026e4:	d112      	bne.n	800270c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026e6:	4b82      	ldr	r3, [pc, #520]	; (80028f0 <HAL_RCC_OscConfig+0x240>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026f2:	d10b      	bne.n	800270c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f4:	4b7e      	ldr	r3, [pc, #504]	; (80028f0 <HAL_RCC_OscConfig+0x240>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d05b      	beq.n	80027b8 <HAL_RCC_OscConfig+0x108>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d157      	bne.n	80027b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e242      	b.n	8002b92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002714:	d106      	bne.n	8002724 <HAL_RCC_OscConfig+0x74>
 8002716:	4b76      	ldr	r3, [pc, #472]	; (80028f0 <HAL_RCC_OscConfig+0x240>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a75      	ldr	r2, [pc, #468]	; (80028f0 <HAL_RCC_OscConfig+0x240>)
 800271c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002720:	6013      	str	r3, [r2, #0]
 8002722:	e01d      	b.n	8002760 <HAL_RCC_OscConfig+0xb0>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800272c:	d10c      	bne.n	8002748 <HAL_RCC_OscConfig+0x98>
 800272e:	4b70      	ldr	r3, [pc, #448]	; (80028f0 <HAL_RCC_OscConfig+0x240>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a6f      	ldr	r2, [pc, #444]	; (80028f0 <HAL_RCC_OscConfig+0x240>)
 8002734:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002738:	6013      	str	r3, [r2, #0]
 800273a:	4b6d      	ldr	r3, [pc, #436]	; (80028f0 <HAL_RCC_OscConfig+0x240>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a6c      	ldr	r2, [pc, #432]	; (80028f0 <HAL_RCC_OscConfig+0x240>)
 8002740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002744:	6013      	str	r3, [r2, #0]
 8002746:	e00b      	b.n	8002760 <HAL_RCC_OscConfig+0xb0>
 8002748:	4b69      	ldr	r3, [pc, #420]	; (80028f0 <HAL_RCC_OscConfig+0x240>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a68      	ldr	r2, [pc, #416]	; (80028f0 <HAL_RCC_OscConfig+0x240>)
 800274e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002752:	6013      	str	r3, [r2, #0]
 8002754:	4b66      	ldr	r3, [pc, #408]	; (80028f0 <HAL_RCC_OscConfig+0x240>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a65      	ldr	r2, [pc, #404]	; (80028f0 <HAL_RCC_OscConfig+0x240>)
 800275a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800275e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d013      	beq.n	8002790 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002768:	f7ff f81c 	bl	80017a4 <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002770:	f7ff f818 	bl	80017a4 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b64      	cmp	r3, #100	; 0x64
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e207      	b.n	8002b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002782:	4b5b      	ldr	r3, [pc, #364]	; (80028f0 <HAL_RCC_OscConfig+0x240>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0f0      	beq.n	8002770 <HAL_RCC_OscConfig+0xc0>
 800278e:	e014      	b.n	80027ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002790:	f7ff f808 	bl	80017a4 <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002798:	f7ff f804 	bl	80017a4 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b64      	cmp	r3, #100	; 0x64
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e1f3      	b.n	8002b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027aa:	4b51      	ldr	r3, [pc, #324]	; (80028f0 <HAL_RCC_OscConfig+0x240>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1f0      	bne.n	8002798 <HAL_RCC_OscConfig+0xe8>
 80027b6:	e000      	b.n	80027ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d063      	beq.n	800288e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027c6:	4b4a      	ldr	r3, [pc, #296]	; (80028f0 <HAL_RCC_OscConfig+0x240>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 030c 	and.w	r3, r3, #12
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00b      	beq.n	80027ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027d2:	4b47      	ldr	r3, [pc, #284]	; (80028f0 <HAL_RCC_OscConfig+0x240>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027da:	2b08      	cmp	r3, #8
 80027dc:	d11c      	bne.n	8002818 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027de:	4b44      	ldr	r3, [pc, #272]	; (80028f0 <HAL_RCC_OscConfig+0x240>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d116      	bne.n	8002818 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ea:	4b41      	ldr	r3, [pc, #260]	; (80028f0 <HAL_RCC_OscConfig+0x240>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d005      	beq.n	8002802 <HAL_RCC_OscConfig+0x152>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d001      	beq.n	8002802 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e1c7      	b.n	8002b92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002802:	4b3b      	ldr	r3, [pc, #236]	; (80028f0 <HAL_RCC_OscConfig+0x240>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	4937      	ldr	r1, [pc, #220]	; (80028f0 <HAL_RCC_OscConfig+0x240>)
 8002812:	4313      	orrs	r3, r2
 8002814:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002816:	e03a      	b.n	800288e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d020      	beq.n	8002862 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002820:	4b34      	ldr	r3, [pc, #208]	; (80028f4 <HAL_RCC_OscConfig+0x244>)
 8002822:	2201      	movs	r2, #1
 8002824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002826:	f7fe ffbd 	bl	80017a4 <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800282c:	e008      	b.n	8002840 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800282e:	f7fe ffb9 	bl	80017a4 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e1a8      	b.n	8002b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002840:	4b2b      	ldr	r3, [pc, #172]	; (80028f0 <HAL_RCC_OscConfig+0x240>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0f0      	beq.n	800282e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800284c:	4b28      	ldr	r3, [pc, #160]	; (80028f0 <HAL_RCC_OscConfig+0x240>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	4925      	ldr	r1, [pc, #148]	; (80028f0 <HAL_RCC_OscConfig+0x240>)
 800285c:	4313      	orrs	r3, r2
 800285e:	600b      	str	r3, [r1, #0]
 8002860:	e015      	b.n	800288e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002862:	4b24      	ldr	r3, [pc, #144]	; (80028f4 <HAL_RCC_OscConfig+0x244>)
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002868:	f7fe ff9c 	bl	80017a4 <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002870:	f7fe ff98 	bl	80017a4 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e187      	b.n	8002b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002882:	4b1b      	ldr	r3, [pc, #108]	; (80028f0 <HAL_RCC_OscConfig+0x240>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1f0      	bne.n	8002870 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	2b00      	cmp	r3, #0
 8002898:	d036      	beq.n	8002908 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d016      	beq.n	80028d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028a2:	4b15      	ldr	r3, [pc, #84]	; (80028f8 <HAL_RCC_OscConfig+0x248>)
 80028a4:	2201      	movs	r2, #1
 80028a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a8:	f7fe ff7c 	bl	80017a4 <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028b0:	f7fe ff78 	bl	80017a4 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e167      	b.n	8002b92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028c2:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <HAL_RCC_OscConfig+0x240>)
 80028c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d0f0      	beq.n	80028b0 <HAL_RCC_OscConfig+0x200>
 80028ce:	e01b      	b.n	8002908 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028d0:	4b09      	ldr	r3, [pc, #36]	; (80028f8 <HAL_RCC_OscConfig+0x248>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028d6:	f7fe ff65 	bl	80017a4 <HAL_GetTick>
 80028da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028dc:	e00e      	b.n	80028fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028de:	f7fe ff61 	bl	80017a4 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d907      	bls.n	80028fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e150      	b.n	8002b92 <HAL_RCC_OscConfig+0x4e2>
 80028f0:	40023800 	.word	0x40023800
 80028f4:	42470000 	.word	0x42470000
 80028f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028fc:	4b88      	ldr	r3, [pc, #544]	; (8002b20 <HAL_RCC_OscConfig+0x470>)
 80028fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1ea      	bne.n	80028de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0304 	and.w	r3, r3, #4
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 8097 	beq.w	8002a44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002916:	2300      	movs	r3, #0
 8002918:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800291a:	4b81      	ldr	r3, [pc, #516]	; (8002b20 <HAL_RCC_OscConfig+0x470>)
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10f      	bne.n	8002946 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002926:	2300      	movs	r3, #0
 8002928:	60bb      	str	r3, [r7, #8]
 800292a:	4b7d      	ldr	r3, [pc, #500]	; (8002b20 <HAL_RCC_OscConfig+0x470>)
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	4a7c      	ldr	r2, [pc, #496]	; (8002b20 <HAL_RCC_OscConfig+0x470>)
 8002930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002934:	6413      	str	r3, [r2, #64]	; 0x40
 8002936:	4b7a      	ldr	r3, [pc, #488]	; (8002b20 <HAL_RCC_OscConfig+0x470>)
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293e:	60bb      	str	r3, [r7, #8]
 8002940:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002942:	2301      	movs	r3, #1
 8002944:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002946:	4b77      	ldr	r3, [pc, #476]	; (8002b24 <HAL_RCC_OscConfig+0x474>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800294e:	2b00      	cmp	r3, #0
 8002950:	d118      	bne.n	8002984 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002952:	4b74      	ldr	r3, [pc, #464]	; (8002b24 <HAL_RCC_OscConfig+0x474>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a73      	ldr	r2, [pc, #460]	; (8002b24 <HAL_RCC_OscConfig+0x474>)
 8002958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800295c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800295e:	f7fe ff21 	bl	80017a4 <HAL_GetTick>
 8002962:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002964:	e008      	b.n	8002978 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002966:	f7fe ff1d 	bl	80017a4 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b02      	cmp	r3, #2
 8002972:	d901      	bls.n	8002978 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e10c      	b.n	8002b92 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002978:	4b6a      	ldr	r3, [pc, #424]	; (8002b24 <HAL_RCC_OscConfig+0x474>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002980:	2b00      	cmp	r3, #0
 8002982:	d0f0      	beq.n	8002966 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d106      	bne.n	800299a <HAL_RCC_OscConfig+0x2ea>
 800298c:	4b64      	ldr	r3, [pc, #400]	; (8002b20 <HAL_RCC_OscConfig+0x470>)
 800298e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002990:	4a63      	ldr	r2, [pc, #396]	; (8002b20 <HAL_RCC_OscConfig+0x470>)
 8002992:	f043 0301 	orr.w	r3, r3, #1
 8002996:	6713      	str	r3, [r2, #112]	; 0x70
 8002998:	e01c      	b.n	80029d4 <HAL_RCC_OscConfig+0x324>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	2b05      	cmp	r3, #5
 80029a0:	d10c      	bne.n	80029bc <HAL_RCC_OscConfig+0x30c>
 80029a2:	4b5f      	ldr	r3, [pc, #380]	; (8002b20 <HAL_RCC_OscConfig+0x470>)
 80029a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a6:	4a5e      	ldr	r2, [pc, #376]	; (8002b20 <HAL_RCC_OscConfig+0x470>)
 80029a8:	f043 0304 	orr.w	r3, r3, #4
 80029ac:	6713      	str	r3, [r2, #112]	; 0x70
 80029ae:	4b5c      	ldr	r3, [pc, #368]	; (8002b20 <HAL_RCC_OscConfig+0x470>)
 80029b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b2:	4a5b      	ldr	r2, [pc, #364]	; (8002b20 <HAL_RCC_OscConfig+0x470>)
 80029b4:	f043 0301 	orr.w	r3, r3, #1
 80029b8:	6713      	str	r3, [r2, #112]	; 0x70
 80029ba:	e00b      	b.n	80029d4 <HAL_RCC_OscConfig+0x324>
 80029bc:	4b58      	ldr	r3, [pc, #352]	; (8002b20 <HAL_RCC_OscConfig+0x470>)
 80029be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c0:	4a57      	ldr	r2, [pc, #348]	; (8002b20 <HAL_RCC_OscConfig+0x470>)
 80029c2:	f023 0301 	bic.w	r3, r3, #1
 80029c6:	6713      	str	r3, [r2, #112]	; 0x70
 80029c8:	4b55      	ldr	r3, [pc, #340]	; (8002b20 <HAL_RCC_OscConfig+0x470>)
 80029ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029cc:	4a54      	ldr	r2, [pc, #336]	; (8002b20 <HAL_RCC_OscConfig+0x470>)
 80029ce:	f023 0304 	bic.w	r3, r3, #4
 80029d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d015      	beq.n	8002a08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029dc:	f7fe fee2 	bl	80017a4 <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e2:	e00a      	b.n	80029fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029e4:	f7fe fede 	bl	80017a4 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e0cb      	b.n	8002b92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029fa:	4b49      	ldr	r3, [pc, #292]	; (8002b20 <HAL_RCC_OscConfig+0x470>)
 80029fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d0ee      	beq.n	80029e4 <HAL_RCC_OscConfig+0x334>
 8002a06:	e014      	b.n	8002a32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a08:	f7fe fecc 	bl	80017a4 <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a0e:	e00a      	b.n	8002a26 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a10:	f7fe fec8 	bl	80017a4 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e0b5      	b.n	8002b92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a26:	4b3e      	ldr	r3, [pc, #248]	; (8002b20 <HAL_RCC_OscConfig+0x470>)
 8002a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1ee      	bne.n	8002a10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a32:	7dfb      	ldrb	r3, [r7, #23]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d105      	bne.n	8002a44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a38:	4b39      	ldr	r3, [pc, #228]	; (8002b20 <HAL_RCC_OscConfig+0x470>)
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3c:	4a38      	ldr	r2, [pc, #224]	; (8002b20 <HAL_RCC_OscConfig+0x470>)
 8002a3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a42:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f000 80a1 	beq.w	8002b90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a4e:	4b34      	ldr	r3, [pc, #208]	; (8002b20 <HAL_RCC_OscConfig+0x470>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f003 030c 	and.w	r3, r3, #12
 8002a56:	2b08      	cmp	r3, #8
 8002a58:	d05c      	beq.n	8002b14 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d141      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a62:	4b31      	ldr	r3, [pc, #196]	; (8002b28 <HAL_RCC_OscConfig+0x478>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a68:	f7fe fe9c 	bl	80017a4 <HAL_GetTick>
 8002a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a70:	f7fe fe98 	bl	80017a4 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e087      	b.n	8002b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a82:	4b27      	ldr	r3, [pc, #156]	; (8002b20 <HAL_RCC_OscConfig+0x470>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1f0      	bne.n	8002a70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	69da      	ldr	r2, [r3, #28]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	431a      	orrs	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9c:	019b      	lsls	r3, r3, #6
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa4:	085b      	lsrs	r3, r3, #1
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	041b      	lsls	r3, r3, #16
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab0:	061b      	lsls	r3, r3, #24
 8002ab2:	491b      	ldr	r1, [pc, #108]	; (8002b20 <HAL_RCC_OscConfig+0x470>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ab8:	4b1b      	ldr	r3, [pc, #108]	; (8002b28 <HAL_RCC_OscConfig+0x478>)
 8002aba:	2201      	movs	r2, #1
 8002abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002abe:	f7fe fe71 	bl	80017a4 <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ac6:	f7fe fe6d 	bl	80017a4 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e05c      	b.n	8002b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ad8:	4b11      	ldr	r3, [pc, #68]	; (8002b20 <HAL_RCC_OscConfig+0x470>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0f0      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x416>
 8002ae4:	e054      	b.n	8002b90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae6:	4b10      	ldr	r3, [pc, #64]	; (8002b28 <HAL_RCC_OscConfig+0x478>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aec:	f7fe fe5a 	bl	80017a4 <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002af4:	f7fe fe56 	bl	80017a4 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e045      	b.n	8002b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b06:	4b06      	ldr	r3, [pc, #24]	; (8002b20 <HAL_RCC_OscConfig+0x470>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1f0      	bne.n	8002af4 <HAL_RCC_OscConfig+0x444>
 8002b12:	e03d      	b.n	8002b90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d107      	bne.n	8002b2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e038      	b.n	8002b92 <HAL_RCC_OscConfig+0x4e2>
 8002b20:	40023800 	.word	0x40023800
 8002b24:	40007000 	.word	0x40007000
 8002b28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b2c:	4b1b      	ldr	r3, [pc, #108]	; (8002b9c <HAL_RCC_OscConfig+0x4ec>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d028      	beq.n	8002b8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d121      	bne.n	8002b8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d11a      	bne.n	8002b8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d111      	bne.n	8002b8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b72:	085b      	lsrs	r3, r3, #1
 8002b74:	3b01      	subs	r3, #1
 8002b76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d107      	bne.n	8002b8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d001      	beq.n	8002b90 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e000      	b.n	8002b92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3718      	adds	r7, #24
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	40023800 	.word	0x40023800

08002ba0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e0cc      	b.n	8002d4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bb4:	4b68      	ldr	r3, [pc, #416]	; (8002d58 <HAL_RCC_ClockConfig+0x1b8>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0307 	and.w	r3, r3, #7
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d90c      	bls.n	8002bdc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bc2:	4b65      	ldr	r3, [pc, #404]	; (8002d58 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	b2d2      	uxtb	r2, r2
 8002bc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bca:	4b63      	ldr	r3, [pc, #396]	; (8002d58 <HAL_RCC_ClockConfig+0x1b8>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d001      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e0b8      	b.n	8002d4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d020      	beq.n	8002c2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d005      	beq.n	8002c00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bf4:	4b59      	ldr	r3, [pc, #356]	; (8002d5c <HAL_RCC_ClockConfig+0x1bc>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	4a58      	ldr	r2, [pc, #352]	; (8002d5c <HAL_RCC_ClockConfig+0x1bc>)
 8002bfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0308 	and.w	r3, r3, #8
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d005      	beq.n	8002c18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c0c:	4b53      	ldr	r3, [pc, #332]	; (8002d5c <HAL_RCC_ClockConfig+0x1bc>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	4a52      	ldr	r2, [pc, #328]	; (8002d5c <HAL_RCC_ClockConfig+0x1bc>)
 8002c12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c18:	4b50      	ldr	r3, [pc, #320]	; (8002d5c <HAL_RCC_ClockConfig+0x1bc>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	494d      	ldr	r1, [pc, #308]	; (8002d5c <HAL_RCC_ClockConfig+0x1bc>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d044      	beq.n	8002cc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d107      	bne.n	8002c4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c3e:	4b47      	ldr	r3, [pc, #284]	; (8002d5c <HAL_RCC_ClockConfig+0x1bc>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d119      	bne.n	8002c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e07f      	b.n	8002d4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d003      	beq.n	8002c5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c5a:	2b03      	cmp	r3, #3
 8002c5c:	d107      	bne.n	8002c6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c5e:	4b3f      	ldr	r3, [pc, #252]	; (8002d5c <HAL_RCC_ClockConfig+0x1bc>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d109      	bne.n	8002c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e06f      	b.n	8002d4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c6e:	4b3b      	ldr	r3, [pc, #236]	; (8002d5c <HAL_RCC_ClockConfig+0x1bc>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e067      	b.n	8002d4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c7e:	4b37      	ldr	r3, [pc, #220]	; (8002d5c <HAL_RCC_ClockConfig+0x1bc>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f023 0203 	bic.w	r2, r3, #3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	4934      	ldr	r1, [pc, #208]	; (8002d5c <HAL_RCC_ClockConfig+0x1bc>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c90:	f7fe fd88 	bl	80017a4 <HAL_GetTick>
 8002c94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c96:	e00a      	b.n	8002cae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c98:	f7fe fd84 	bl	80017a4 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e04f      	b.n	8002d4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cae:	4b2b      	ldr	r3, [pc, #172]	; (8002d5c <HAL_RCC_ClockConfig+0x1bc>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f003 020c 	and.w	r2, r3, #12
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d1eb      	bne.n	8002c98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cc0:	4b25      	ldr	r3, [pc, #148]	; (8002d58 <HAL_RCC_ClockConfig+0x1b8>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0307 	and.w	r3, r3, #7
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d20c      	bcs.n	8002ce8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cce:	4b22      	ldr	r3, [pc, #136]	; (8002d58 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	b2d2      	uxtb	r2, r2
 8002cd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd6:	4b20      	ldr	r3, [pc, #128]	; (8002d58 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0307 	and.w	r3, r3, #7
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d001      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e032      	b.n	8002d4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0304 	and.w	r3, r3, #4
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d008      	beq.n	8002d06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cf4:	4b19      	ldr	r3, [pc, #100]	; (8002d5c <HAL_RCC_ClockConfig+0x1bc>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	4916      	ldr	r1, [pc, #88]	; (8002d5c <HAL_RCC_ClockConfig+0x1bc>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0308 	and.w	r3, r3, #8
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d009      	beq.n	8002d26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d12:	4b12      	ldr	r3, [pc, #72]	; (8002d5c <HAL_RCC_ClockConfig+0x1bc>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	490e      	ldr	r1, [pc, #56]	; (8002d5c <HAL_RCC_ClockConfig+0x1bc>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d26:	f000 f821 	bl	8002d6c <HAL_RCC_GetSysClockFreq>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	4b0b      	ldr	r3, [pc, #44]	; (8002d5c <HAL_RCC_ClockConfig+0x1bc>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	091b      	lsrs	r3, r3, #4
 8002d32:	f003 030f 	and.w	r3, r3, #15
 8002d36:	490a      	ldr	r1, [pc, #40]	; (8002d60 <HAL_RCC_ClockConfig+0x1c0>)
 8002d38:	5ccb      	ldrb	r3, [r1, r3]
 8002d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d3e:	4a09      	ldr	r2, [pc, #36]	; (8002d64 <HAL_RCC_ClockConfig+0x1c4>)
 8002d40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d42:	4b09      	ldr	r3, [pc, #36]	; (8002d68 <HAL_RCC_ClockConfig+0x1c8>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fe fce8 	bl	800171c <HAL_InitTick>

  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	40023c00 	.word	0x40023c00
 8002d5c:	40023800 	.word	0x40023800
 8002d60:	080048b4 	.word	0x080048b4
 8002d64:	2000001c 	.word	0x2000001c
 8002d68:	20000020 	.word	0x20000020

08002d6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d70:	b094      	sub	sp, #80	; 0x50
 8002d72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d74:	2300      	movs	r3, #0
 8002d76:	647b      	str	r3, [r7, #68]	; 0x44
 8002d78:	2300      	movs	r3, #0
 8002d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002d80:	2300      	movs	r3, #0
 8002d82:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d84:	4b79      	ldr	r3, [pc, #484]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f003 030c 	and.w	r3, r3, #12
 8002d8c:	2b08      	cmp	r3, #8
 8002d8e:	d00d      	beq.n	8002dac <HAL_RCC_GetSysClockFreq+0x40>
 8002d90:	2b08      	cmp	r3, #8
 8002d92:	f200 80e1 	bhi.w	8002f58 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d002      	beq.n	8002da0 <HAL_RCC_GetSysClockFreq+0x34>
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	d003      	beq.n	8002da6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d9e:	e0db      	b.n	8002f58 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002da0:	4b73      	ldr	r3, [pc, #460]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x204>)
 8002da2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002da4:	e0db      	b.n	8002f5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002da6:	4b73      	ldr	r3, [pc, #460]	; (8002f74 <HAL_RCC_GetSysClockFreq+0x208>)
 8002da8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002daa:	e0d8      	b.n	8002f5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dac:	4b6f      	ldr	r3, [pc, #444]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x200>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002db4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002db6:	4b6d      	ldr	r3, [pc, #436]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x200>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d063      	beq.n	8002e8a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dc2:	4b6a      	ldr	r3, [pc, #424]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x200>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	099b      	lsrs	r3, r3, #6
 8002dc8:	2200      	movs	r2, #0
 8002dca:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dcc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dd4:	633b      	str	r3, [r7, #48]	; 0x30
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	637b      	str	r3, [r7, #52]	; 0x34
 8002dda:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002dde:	4622      	mov	r2, r4
 8002de0:	462b      	mov	r3, r5
 8002de2:	f04f 0000 	mov.w	r0, #0
 8002de6:	f04f 0100 	mov.w	r1, #0
 8002dea:	0159      	lsls	r1, r3, #5
 8002dec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002df0:	0150      	lsls	r0, r2, #5
 8002df2:	4602      	mov	r2, r0
 8002df4:	460b      	mov	r3, r1
 8002df6:	4621      	mov	r1, r4
 8002df8:	1a51      	subs	r1, r2, r1
 8002dfa:	6139      	str	r1, [r7, #16]
 8002dfc:	4629      	mov	r1, r5
 8002dfe:	eb63 0301 	sbc.w	r3, r3, r1
 8002e02:	617b      	str	r3, [r7, #20]
 8002e04:	f04f 0200 	mov.w	r2, #0
 8002e08:	f04f 0300 	mov.w	r3, #0
 8002e0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e10:	4659      	mov	r1, fp
 8002e12:	018b      	lsls	r3, r1, #6
 8002e14:	4651      	mov	r1, sl
 8002e16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e1a:	4651      	mov	r1, sl
 8002e1c:	018a      	lsls	r2, r1, #6
 8002e1e:	4651      	mov	r1, sl
 8002e20:	ebb2 0801 	subs.w	r8, r2, r1
 8002e24:	4659      	mov	r1, fp
 8002e26:	eb63 0901 	sbc.w	r9, r3, r1
 8002e2a:	f04f 0200 	mov.w	r2, #0
 8002e2e:	f04f 0300 	mov.w	r3, #0
 8002e32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e3e:	4690      	mov	r8, r2
 8002e40:	4699      	mov	r9, r3
 8002e42:	4623      	mov	r3, r4
 8002e44:	eb18 0303 	adds.w	r3, r8, r3
 8002e48:	60bb      	str	r3, [r7, #8]
 8002e4a:	462b      	mov	r3, r5
 8002e4c:	eb49 0303 	adc.w	r3, r9, r3
 8002e50:	60fb      	str	r3, [r7, #12]
 8002e52:	f04f 0200 	mov.w	r2, #0
 8002e56:	f04f 0300 	mov.w	r3, #0
 8002e5a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e5e:	4629      	mov	r1, r5
 8002e60:	024b      	lsls	r3, r1, #9
 8002e62:	4621      	mov	r1, r4
 8002e64:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e68:	4621      	mov	r1, r4
 8002e6a:	024a      	lsls	r2, r1, #9
 8002e6c:	4610      	mov	r0, r2
 8002e6e:	4619      	mov	r1, r3
 8002e70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e72:	2200      	movs	r2, #0
 8002e74:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e7c:	f7fd fd0e 	bl	800089c <__aeabi_uldivmod>
 8002e80:	4602      	mov	r2, r0
 8002e82:	460b      	mov	r3, r1
 8002e84:	4613      	mov	r3, r2
 8002e86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e88:	e058      	b.n	8002f3c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e8a:	4b38      	ldr	r3, [pc, #224]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	099b      	lsrs	r3, r3, #6
 8002e90:	2200      	movs	r2, #0
 8002e92:	4618      	mov	r0, r3
 8002e94:	4611      	mov	r1, r2
 8002e96:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e9a:	623b      	str	r3, [r7, #32]
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8002ea0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ea4:	4642      	mov	r2, r8
 8002ea6:	464b      	mov	r3, r9
 8002ea8:	f04f 0000 	mov.w	r0, #0
 8002eac:	f04f 0100 	mov.w	r1, #0
 8002eb0:	0159      	lsls	r1, r3, #5
 8002eb2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eb6:	0150      	lsls	r0, r2, #5
 8002eb8:	4602      	mov	r2, r0
 8002eba:	460b      	mov	r3, r1
 8002ebc:	4641      	mov	r1, r8
 8002ebe:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ec2:	4649      	mov	r1, r9
 8002ec4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ec8:	f04f 0200 	mov.w	r2, #0
 8002ecc:	f04f 0300 	mov.w	r3, #0
 8002ed0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ed4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ed8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002edc:	ebb2 040a 	subs.w	r4, r2, sl
 8002ee0:	eb63 050b 	sbc.w	r5, r3, fp
 8002ee4:	f04f 0200 	mov.w	r2, #0
 8002ee8:	f04f 0300 	mov.w	r3, #0
 8002eec:	00eb      	lsls	r3, r5, #3
 8002eee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ef2:	00e2      	lsls	r2, r4, #3
 8002ef4:	4614      	mov	r4, r2
 8002ef6:	461d      	mov	r5, r3
 8002ef8:	4643      	mov	r3, r8
 8002efa:	18e3      	adds	r3, r4, r3
 8002efc:	603b      	str	r3, [r7, #0]
 8002efe:	464b      	mov	r3, r9
 8002f00:	eb45 0303 	adc.w	r3, r5, r3
 8002f04:	607b      	str	r3, [r7, #4]
 8002f06:	f04f 0200 	mov.w	r2, #0
 8002f0a:	f04f 0300 	mov.w	r3, #0
 8002f0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f12:	4629      	mov	r1, r5
 8002f14:	028b      	lsls	r3, r1, #10
 8002f16:	4621      	mov	r1, r4
 8002f18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f1c:	4621      	mov	r1, r4
 8002f1e:	028a      	lsls	r2, r1, #10
 8002f20:	4610      	mov	r0, r2
 8002f22:	4619      	mov	r1, r3
 8002f24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f26:	2200      	movs	r2, #0
 8002f28:	61bb      	str	r3, [r7, #24]
 8002f2a:	61fa      	str	r2, [r7, #28]
 8002f2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f30:	f7fd fcb4 	bl	800089c <__aeabi_uldivmod>
 8002f34:	4602      	mov	r2, r0
 8002f36:	460b      	mov	r3, r1
 8002f38:	4613      	mov	r3, r2
 8002f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f3c:	4b0b      	ldr	r3, [pc, #44]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x200>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	0c1b      	lsrs	r3, r3, #16
 8002f42:	f003 0303 	and.w	r3, r3, #3
 8002f46:	3301      	adds	r3, #1
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002f4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f56:	e002      	b.n	8002f5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f58:	4b05      	ldr	r3, [pc, #20]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f5a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3750      	adds	r7, #80	; 0x50
 8002f64:	46bd      	mov	sp, r7
 8002f66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f6a:	bf00      	nop
 8002f6c:	40023800 	.word	0x40023800
 8002f70:	00f42400 	.word	0x00f42400
 8002f74:	007a1200 	.word	0x007a1200

08002f78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f7c:	4b03      	ldr	r3, [pc, #12]	; (8002f8c <HAL_RCC_GetHCLKFreq+0x14>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	2000001c 	.word	0x2000001c

08002f90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f94:	f7ff fff0 	bl	8002f78 <HAL_RCC_GetHCLKFreq>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	4b05      	ldr	r3, [pc, #20]	; (8002fb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	0a9b      	lsrs	r3, r3, #10
 8002fa0:	f003 0307 	and.w	r3, r3, #7
 8002fa4:	4903      	ldr	r1, [pc, #12]	; (8002fb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fa6:	5ccb      	ldrb	r3, [r1, r3]
 8002fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40023800 	.word	0x40023800
 8002fb4:	080048c4 	.word	0x080048c4

08002fb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002fbc:	f7ff ffdc 	bl	8002f78 <HAL_RCC_GetHCLKFreq>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	4b05      	ldr	r3, [pc, #20]	; (8002fd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	0b5b      	lsrs	r3, r3, #13
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	4903      	ldr	r1, [pc, #12]	; (8002fdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fce:	5ccb      	ldrb	r3, [r1, r3]
 8002fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	40023800 	.word	0x40023800
 8002fdc:	080048c4 	.word	0x080048c4

08002fe0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e03f      	b.n	8003072 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d106      	bne.n	800300c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7fe f93c 	bl	8001284 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2224      	movs	r2, #36	; 0x24
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68da      	ldr	r2, [r3, #12]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003022:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 fd23 	bl	8003a70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	691a      	ldr	r2, [r3, #16]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003038:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	695a      	ldr	r2, [r3, #20]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003048:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68da      	ldr	r2, [r3, #12]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003058:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2220      	movs	r2, #32
 8003064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2220      	movs	r2, #32
 800306c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800307a:	b480      	push	{r7}
 800307c:	b085      	sub	sp, #20
 800307e:	af00      	add	r7, sp, #0
 8003080:	60f8      	str	r0, [r7, #12]
 8003082:	60b9      	str	r1, [r7, #8]
 8003084:	4613      	mov	r3, r2
 8003086:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2b20      	cmp	r3, #32
 8003092:	d130      	bne.n	80030f6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d002      	beq.n	80030a0 <HAL_UART_Transmit_IT+0x26>
 800309a:	88fb      	ldrh	r3, [r7, #6]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d101      	bne.n	80030a4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e029      	b.n	80030f8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d101      	bne.n	80030b2 <HAL_UART_Transmit_IT+0x38>
 80030ae:	2302      	movs	r3, #2
 80030b0:	e022      	b.n	80030f8 <HAL_UART_Transmit_IT+0x7e>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	68ba      	ldr	r2, [r7, #8]
 80030be:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	88fa      	ldrh	r2, [r7, #6]
 80030c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	88fa      	ldrh	r2, [r7, #6]
 80030ca:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2221      	movs	r2, #33	; 0x21
 80030d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68da      	ldr	r2, [r3, #12]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030f0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80030f2:	2300      	movs	r3, #0
 80030f4:	e000      	b.n	80030f8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80030f6:	2302      	movs	r3, #2
  }
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3714      	adds	r7, #20
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	4613      	mov	r3, r2
 8003110:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b20      	cmp	r3, #32
 800311c:	d11d      	bne.n	800315a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d002      	beq.n	800312a <HAL_UART_Receive_IT+0x26>
 8003124:	88fb      	ldrh	r3, [r7, #6]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e016      	b.n	800315c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003134:	2b01      	cmp	r3, #1
 8003136:	d101      	bne.n	800313c <HAL_UART_Receive_IT+0x38>
 8003138:	2302      	movs	r3, #2
 800313a:	e00f      	b.n	800315c <HAL_UART_Receive_IT+0x58>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800314a:	88fb      	ldrh	r3, [r7, #6]
 800314c:	461a      	mov	r2, r3
 800314e:	68b9      	ldr	r1, [r7, #8]
 8003150:	68f8      	ldr	r0, [r7, #12]
 8003152:	f000 fab5 	bl	80036c0 <UART_Start_Receive_IT>
 8003156:	4603      	mov	r3, r0
 8003158:	e000      	b.n	800315c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800315a:	2302      	movs	r3, #2
  }
}
 800315c:	4618      	mov	r0, r3
 800315e:	3710      	adds	r7, #16
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b0ba      	sub	sp, #232	; 0xe8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800318a:	2300      	movs	r3, #0
 800318c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003190:	2300      	movs	r3, #0
 8003192:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800319a:	f003 030f 	and.w	r3, r3, #15
 800319e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80031a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d10f      	bne.n	80031ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031ae:	f003 0320 	and.w	r3, r3, #32
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d009      	beq.n	80031ca <HAL_UART_IRQHandler+0x66>
 80031b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031ba:	f003 0320 	and.w	r3, r3, #32
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d003      	beq.n	80031ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 fb99 	bl	80038fa <UART_Receive_IT>
      return;
 80031c8:	e256      	b.n	8003678 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80031ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 80de 	beq.w	8003390 <HAL_UART_IRQHandler+0x22c>
 80031d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d106      	bne.n	80031ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80031e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031e4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f000 80d1 	beq.w	8003390 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80031ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00b      	beq.n	8003212 <HAL_UART_IRQHandler+0xae>
 80031fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003202:	2b00      	cmp	r3, #0
 8003204:	d005      	beq.n	8003212 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	f043 0201 	orr.w	r2, r3, #1
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003216:	f003 0304 	and.w	r3, r3, #4
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00b      	beq.n	8003236 <HAL_UART_IRQHandler+0xd2>
 800321e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b00      	cmp	r3, #0
 8003228:	d005      	beq.n	8003236 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	f043 0202 	orr.w	r2, r3, #2
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00b      	beq.n	800325a <HAL_UART_IRQHandler+0xf6>
 8003242:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b00      	cmp	r3, #0
 800324c:	d005      	beq.n	800325a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	f043 0204 	orr.w	r2, r3, #4
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800325a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800325e:	f003 0308 	and.w	r3, r3, #8
 8003262:	2b00      	cmp	r3, #0
 8003264:	d011      	beq.n	800328a <HAL_UART_IRQHandler+0x126>
 8003266:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800326a:	f003 0320 	and.w	r3, r3, #32
 800326e:	2b00      	cmp	r3, #0
 8003270:	d105      	bne.n	800327e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003272:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	d005      	beq.n	800328a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	f043 0208 	orr.w	r2, r3, #8
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	2b00      	cmp	r3, #0
 8003290:	f000 81ed 	beq.w	800366e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003298:	f003 0320 	and.w	r3, r3, #32
 800329c:	2b00      	cmp	r3, #0
 800329e:	d008      	beq.n	80032b2 <HAL_UART_IRQHandler+0x14e>
 80032a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032a4:	f003 0320 	and.w	r3, r3, #32
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d002      	beq.n	80032b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 fb24 	bl	80038fa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032bc:	2b40      	cmp	r3, #64	; 0x40
 80032be:	bf0c      	ite	eq
 80032c0:	2301      	moveq	r3, #1
 80032c2:	2300      	movne	r3, #0
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	f003 0308 	and.w	r3, r3, #8
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d103      	bne.n	80032de <HAL_UART_IRQHandler+0x17a>
 80032d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d04f      	beq.n	800337e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 fa2c 	bl	800373c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ee:	2b40      	cmp	r3, #64	; 0x40
 80032f0:	d141      	bne.n	8003376 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	3314      	adds	r3, #20
 80032f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003300:	e853 3f00 	ldrex	r3, [r3]
 8003304:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003308:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800330c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003310:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	3314      	adds	r3, #20
 800331a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800331e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003322:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003326:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800332a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800332e:	e841 2300 	strex	r3, r2, [r1]
 8003332:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003336:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1d9      	bne.n	80032f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003342:	2b00      	cmp	r3, #0
 8003344:	d013      	beq.n	800336e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334a:	4a7d      	ldr	r2, [pc, #500]	; (8003540 <HAL_UART_IRQHandler+0x3dc>)
 800334c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003352:	4618      	mov	r0, r3
 8003354:	f7fe ff95 	bl	8002282 <HAL_DMA_Abort_IT>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d016      	beq.n	800338c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003368:	4610      	mov	r0, r2
 800336a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800336c:	e00e      	b.n	800338c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 f990 	bl	8003694 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003374:	e00a      	b.n	800338c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f98c 	bl	8003694 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800337c:	e006      	b.n	800338c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 f988 	bl	8003694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800338a:	e170      	b.n	800366e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800338c:	bf00      	nop
    return;
 800338e:	e16e      	b.n	800366e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003394:	2b01      	cmp	r3, #1
 8003396:	f040 814a 	bne.w	800362e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800339a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800339e:	f003 0310 	and.w	r3, r3, #16
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f000 8143 	beq.w	800362e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80033a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033ac:	f003 0310 	and.w	r3, r3, #16
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 813c 	beq.w	800362e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033b6:	2300      	movs	r3, #0
 80033b8:	60bb      	str	r3, [r7, #8]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	60bb      	str	r3, [r7, #8]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	60bb      	str	r3, [r7, #8]
 80033ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d6:	2b40      	cmp	r3, #64	; 0x40
 80033d8:	f040 80b4 	bne.w	8003544 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80033e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f000 8140 	beq.w	8003672 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80033f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80033fa:	429a      	cmp	r2, r3
 80033fc:	f080 8139 	bcs.w	8003672 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003406:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003412:	f000 8088 	beq.w	8003526 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	330c      	adds	r3, #12
 800341c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003420:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003424:	e853 3f00 	ldrex	r3, [r3]
 8003428:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800342c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003430:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003434:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	330c      	adds	r3, #12
 800343e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003442:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003446:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800344a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800344e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003452:	e841 2300 	strex	r3, r2, [r1]
 8003456:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800345a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1d9      	bne.n	8003416 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	3314      	adds	r3, #20
 8003468:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800346c:	e853 3f00 	ldrex	r3, [r3]
 8003470:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003472:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003474:	f023 0301 	bic.w	r3, r3, #1
 8003478:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	3314      	adds	r3, #20
 8003482:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003486:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800348a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800348e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003492:	e841 2300 	strex	r3, r2, [r1]
 8003496:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003498:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1e1      	bne.n	8003462 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	3314      	adds	r3, #20
 80034a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034a8:	e853 3f00 	ldrex	r3, [r3]
 80034ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80034ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	3314      	adds	r3, #20
 80034be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80034c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80034c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80034c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80034ca:	e841 2300 	strex	r3, r2, [r1]
 80034ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80034d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1e3      	bne.n	800349e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2220      	movs	r2, #32
 80034da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	330c      	adds	r3, #12
 80034ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034ee:	e853 3f00 	ldrex	r3, [r3]
 80034f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80034f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034f6:	f023 0310 	bic.w	r3, r3, #16
 80034fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	330c      	adds	r3, #12
 8003504:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003508:	65ba      	str	r2, [r7, #88]	; 0x58
 800350a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800350c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800350e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003510:	e841 2300 	strex	r3, r2, [r1]
 8003514:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003516:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1e3      	bne.n	80034e4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003520:	4618      	mov	r0, r3
 8003522:	f7fe fe3e 	bl	80021a2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800352e:	b29b      	uxth	r3, r3
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	b29b      	uxth	r3, r3
 8003534:	4619      	mov	r1, r3
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f8b6 	bl	80036a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800353c:	e099      	b.n	8003672 <HAL_UART_IRQHandler+0x50e>
 800353e:	bf00      	nop
 8003540:	08003803 	.word	0x08003803
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800354c:	b29b      	uxth	r3, r3
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003558:	b29b      	uxth	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	f000 808b 	beq.w	8003676 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003560:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 8086 	beq.w	8003676 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	330c      	adds	r3, #12
 8003570:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003574:	e853 3f00 	ldrex	r3, [r3]
 8003578:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800357a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800357c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003580:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	330c      	adds	r3, #12
 800358a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800358e:	647a      	str	r2, [r7, #68]	; 0x44
 8003590:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003592:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003594:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003596:	e841 2300 	strex	r3, r2, [r1]
 800359a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800359c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1e3      	bne.n	800356a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	3314      	adds	r3, #20
 80035a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ac:	e853 3f00 	ldrex	r3, [r3]
 80035b0:	623b      	str	r3, [r7, #32]
   return(result);
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	f023 0301 	bic.w	r3, r3, #1
 80035b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	3314      	adds	r3, #20
 80035c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80035c6:	633a      	str	r2, [r7, #48]	; 0x30
 80035c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035ce:	e841 2300 	strex	r3, r2, [r1]
 80035d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80035d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1e3      	bne.n	80035a2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2220      	movs	r2, #32
 80035de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	330c      	adds	r3, #12
 80035ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	e853 3f00 	ldrex	r3, [r3]
 80035f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f023 0310 	bic.w	r3, r3, #16
 80035fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	330c      	adds	r3, #12
 8003608:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800360c:	61fa      	str	r2, [r7, #28]
 800360e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003610:	69b9      	ldr	r1, [r7, #24]
 8003612:	69fa      	ldr	r2, [r7, #28]
 8003614:	e841 2300 	strex	r3, r2, [r1]
 8003618:	617b      	str	r3, [r7, #20]
   return(result);
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1e3      	bne.n	80035e8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003620:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003624:	4619      	mov	r1, r3
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f83e 	bl	80036a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800362c:	e023      	b.n	8003676 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800362e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003636:	2b00      	cmp	r3, #0
 8003638:	d009      	beq.n	800364e <HAL_UART_IRQHandler+0x4ea>
 800363a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800363e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f8ef 	bl	800382a <UART_Transmit_IT>
    return;
 800364c:	e014      	b.n	8003678 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800364e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00e      	beq.n	8003678 <HAL_UART_IRQHandler+0x514>
 800365a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800365e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003662:	2b00      	cmp	r3, #0
 8003664:	d008      	beq.n	8003678 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f92f 	bl	80038ca <UART_EndTransmit_IT>
    return;
 800366c:	e004      	b.n	8003678 <HAL_UART_IRQHandler+0x514>
    return;
 800366e:	bf00      	nop
 8003670:	e002      	b.n	8003678 <HAL_UART_IRQHandler+0x514>
      return;
 8003672:	bf00      	nop
 8003674:	e000      	b.n	8003678 <HAL_UART_IRQHandler+0x514>
      return;
 8003676:	bf00      	nop
  }
}
 8003678:	37e8      	adds	r7, #232	; 0xe8
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop

08003680 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	460b      	mov	r3, r1
 80036b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	4613      	mov	r3, r2
 80036cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	68ba      	ldr	r2, [r7, #8]
 80036d2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	88fa      	ldrh	r2, [r7, #6]
 80036d8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	88fa      	ldrh	r2, [r7, #6]
 80036de:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2222      	movs	r2, #34	; 0x22
 80036ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d007      	beq.n	800370e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68da      	ldr	r2, [r3, #12]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800370c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	695a      	ldr	r2, [r3, #20]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f042 0201 	orr.w	r2, r2, #1
 800371c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68da      	ldr	r2, [r3, #12]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f042 0220 	orr.w	r2, r2, #32
 800372c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3714      	adds	r7, #20
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800373c:	b480      	push	{r7}
 800373e:	b095      	sub	sp, #84	; 0x54
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	330c      	adds	r3, #12
 800374a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800374e:	e853 3f00 	ldrex	r3, [r3]
 8003752:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003756:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800375a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	330c      	adds	r3, #12
 8003762:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003764:	643a      	str	r2, [r7, #64]	; 0x40
 8003766:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003768:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800376a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800376c:	e841 2300 	strex	r3, r2, [r1]
 8003770:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1e5      	bne.n	8003744 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	3314      	adds	r3, #20
 800377e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003780:	6a3b      	ldr	r3, [r7, #32]
 8003782:	e853 3f00 	ldrex	r3, [r3]
 8003786:	61fb      	str	r3, [r7, #28]
   return(result);
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	f023 0301 	bic.w	r3, r3, #1
 800378e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	3314      	adds	r3, #20
 8003796:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003798:	62fa      	str	r2, [r7, #44]	; 0x2c
 800379a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800379c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800379e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037a0:	e841 2300 	strex	r3, r2, [r1]
 80037a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1e5      	bne.n	8003778 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d119      	bne.n	80037e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	330c      	adds	r3, #12
 80037ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	e853 3f00 	ldrex	r3, [r3]
 80037c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	f023 0310 	bic.w	r3, r3, #16
 80037ca:	647b      	str	r3, [r7, #68]	; 0x44
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	330c      	adds	r3, #12
 80037d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037d4:	61ba      	str	r2, [r7, #24]
 80037d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d8:	6979      	ldr	r1, [r7, #20]
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	e841 2300 	strex	r3, r2, [r1]
 80037e0:	613b      	str	r3, [r7, #16]
   return(result);
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1e5      	bne.n	80037b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2220      	movs	r2, #32
 80037ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80037f6:	bf00      	nop
 80037f8:	3754      	adds	r7, #84	; 0x54
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr

08003802 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b084      	sub	sp, #16
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f7ff ff39 	bl	8003694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003822:	bf00      	nop
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800382a:	b480      	push	{r7}
 800382c:	b085      	sub	sp, #20
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b21      	cmp	r3, #33	; 0x21
 800383c:	d13e      	bne.n	80038bc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003846:	d114      	bne.n	8003872 <UART_Transmit_IT+0x48>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d110      	bne.n	8003872 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	881b      	ldrh	r3, [r3, #0]
 800385a:	461a      	mov	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003864:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	1c9a      	adds	r2, r3, #2
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	621a      	str	r2, [r3, #32]
 8003870:	e008      	b.n	8003884 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	1c59      	adds	r1, r3, #1
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	6211      	str	r1, [r2, #32]
 800387c:	781a      	ldrb	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003888:	b29b      	uxth	r3, r3
 800388a:	3b01      	subs	r3, #1
 800388c:	b29b      	uxth	r3, r3
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	4619      	mov	r1, r3
 8003892:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10f      	bne.n	80038b8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68da      	ldr	r2, [r3, #12]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038a6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68da      	ldr	r2, [r3, #12]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038b6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80038b8:	2300      	movs	r3, #0
 80038ba:	e000      	b.n	80038be <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80038bc:	2302      	movs	r3, #2
  }
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3714      	adds	r7, #20
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr

080038ca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b082      	sub	sp, #8
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68da      	ldr	r2, [r3, #12]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038e0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2220      	movs	r2, #32
 80038e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7ff fec8 	bl	8003680 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b08c      	sub	sp, #48	; 0x30
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b22      	cmp	r3, #34	; 0x22
 800390c:	f040 80ab 	bne.w	8003a66 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003918:	d117      	bne.n	800394a <UART_Receive_IT+0x50>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d113      	bne.n	800394a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003922:	2300      	movs	r3, #0
 8003924:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	b29b      	uxth	r3, r3
 8003934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003938:	b29a      	uxth	r2, r3
 800393a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003942:	1c9a      	adds	r2, r3, #2
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	629a      	str	r2, [r3, #40]	; 0x28
 8003948:	e026      	b.n	8003998 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003950:	2300      	movs	r3, #0
 8003952:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800395c:	d007      	beq.n	800396e <UART_Receive_IT+0x74>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10a      	bne.n	800397c <UART_Receive_IT+0x82>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d106      	bne.n	800397c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	b2da      	uxtb	r2, r3
 8003976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003978:	701a      	strb	r2, [r3, #0]
 800397a:	e008      	b.n	800398e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	b2db      	uxtb	r3, r3
 8003984:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003988:	b2da      	uxtb	r2, r3
 800398a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800398c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003992:	1c5a      	adds	r2, r3, #1
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800399c:	b29b      	uxth	r3, r3
 800399e:	3b01      	subs	r3, #1
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	4619      	mov	r1, r3
 80039a6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d15a      	bne.n	8003a62 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68da      	ldr	r2, [r3, #12]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 0220 	bic.w	r2, r2, #32
 80039ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68da      	ldr	r2, [r3, #12]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	695a      	ldr	r2, [r3, #20]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0201 	bic.w	r2, r2, #1
 80039da:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2220      	movs	r2, #32
 80039e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d135      	bne.n	8003a58 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	330c      	adds	r3, #12
 80039f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	e853 3f00 	ldrex	r3, [r3]
 8003a00:	613b      	str	r3, [r7, #16]
   return(result);
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	f023 0310 	bic.w	r3, r3, #16
 8003a08:	627b      	str	r3, [r7, #36]	; 0x24
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	330c      	adds	r3, #12
 8003a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a12:	623a      	str	r2, [r7, #32]
 8003a14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a16:	69f9      	ldr	r1, [r7, #28]
 8003a18:	6a3a      	ldr	r2, [r7, #32]
 8003a1a:	e841 2300 	strex	r3, r2, [r1]
 8003a1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1e5      	bne.n	80039f2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0310 	and.w	r3, r3, #16
 8003a30:	2b10      	cmp	r3, #16
 8003a32:	d10a      	bne.n	8003a4a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a34:	2300      	movs	r3, #0
 8003a36:	60fb      	str	r3, [r7, #12]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	60fb      	str	r3, [r7, #12]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	60fb      	str	r3, [r7, #12]
 8003a48:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a4e:	4619      	mov	r1, r3
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f7ff fe29 	bl	80036a8 <HAL_UARTEx_RxEventCallback>
 8003a56:	e002      	b.n	8003a5e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f7fd f8a1 	bl	8000ba0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	e002      	b.n	8003a68 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003a62:	2300      	movs	r3, #0
 8003a64:	e000      	b.n	8003a68 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003a66:	2302      	movs	r3, #2
  }
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3730      	adds	r7, #48	; 0x30
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a74:	b0c0      	sub	sp, #256	; 0x100
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a8c:	68d9      	ldr	r1, [r3, #12]
 8003a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	ea40 0301 	orr.w	r3, r0, r1
 8003a98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a9e:	689a      	ldr	r2, [r3, #8]
 8003aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	431a      	orrs	r2, r3
 8003ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ac8:	f021 010c 	bic.w	r1, r1, #12
 8003acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003ad6:	430b      	orrs	r3, r1
 8003ad8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aea:	6999      	ldr	r1, [r3, #24]
 8003aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	ea40 0301 	orr.w	r3, r0, r1
 8003af6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	4b8f      	ldr	r3, [pc, #572]	; (8003d3c <UART_SetConfig+0x2cc>)
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d005      	beq.n	8003b10 <UART_SetConfig+0xa0>
 8003b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	4b8d      	ldr	r3, [pc, #564]	; (8003d40 <UART_SetConfig+0x2d0>)
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d104      	bne.n	8003b1a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b10:	f7ff fa52 	bl	8002fb8 <HAL_RCC_GetPCLK2Freq>
 8003b14:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003b18:	e003      	b.n	8003b22 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b1a:	f7ff fa39 	bl	8002f90 <HAL_RCC_GetPCLK1Freq>
 8003b1e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b26:	69db      	ldr	r3, [r3, #28]
 8003b28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b2c:	f040 810c 	bne.w	8003d48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b34:	2200      	movs	r2, #0
 8003b36:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003b3a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003b3e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003b42:	4622      	mov	r2, r4
 8003b44:	462b      	mov	r3, r5
 8003b46:	1891      	adds	r1, r2, r2
 8003b48:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b4a:	415b      	adcs	r3, r3
 8003b4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003b52:	4621      	mov	r1, r4
 8003b54:	eb12 0801 	adds.w	r8, r2, r1
 8003b58:	4629      	mov	r1, r5
 8003b5a:	eb43 0901 	adc.w	r9, r3, r1
 8003b5e:	f04f 0200 	mov.w	r2, #0
 8003b62:	f04f 0300 	mov.w	r3, #0
 8003b66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b72:	4690      	mov	r8, r2
 8003b74:	4699      	mov	r9, r3
 8003b76:	4623      	mov	r3, r4
 8003b78:	eb18 0303 	adds.w	r3, r8, r3
 8003b7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003b80:	462b      	mov	r3, r5
 8003b82:	eb49 0303 	adc.w	r3, r9, r3
 8003b86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003b96:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003b9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	18db      	adds	r3, r3, r3
 8003ba2:	653b      	str	r3, [r7, #80]	; 0x50
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	eb42 0303 	adc.w	r3, r2, r3
 8003baa:	657b      	str	r3, [r7, #84]	; 0x54
 8003bac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003bb0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003bb4:	f7fc fe72 	bl	800089c <__aeabi_uldivmod>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	460b      	mov	r3, r1
 8003bbc:	4b61      	ldr	r3, [pc, #388]	; (8003d44 <UART_SetConfig+0x2d4>)
 8003bbe:	fba3 2302 	umull	r2, r3, r3, r2
 8003bc2:	095b      	lsrs	r3, r3, #5
 8003bc4:	011c      	lsls	r4, r3, #4
 8003bc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bd0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003bd4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003bd8:	4642      	mov	r2, r8
 8003bda:	464b      	mov	r3, r9
 8003bdc:	1891      	adds	r1, r2, r2
 8003bde:	64b9      	str	r1, [r7, #72]	; 0x48
 8003be0:	415b      	adcs	r3, r3
 8003be2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003be4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003be8:	4641      	mov	r1, r8
 8003bea:	eb12 0a01 	adds.w	sl, r2, r1
 8003bee:	4649      	mov	r1, r9
 8003bf0:	eb43 0b01 	adc.w	fp, r3, r1
 8003bf4:	f04f 0200 	mov.w	r2, #0
 8003bf8:	f04f 0300 	mov.w	r3, #0
 8003bfc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c08:	4692      	mov	sl, r2
 8003c0a:	469b      	mov	fp, r3
 8003c0c:	4643      	mov	r3, r8
 8003c0e:	eb1a 0303 	adds.w	r3, sl, r3
 8003c12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c16:	464b      	mov	r3, r9
 8003c18:	eb4b 0303 	adc.w	r3, fp, r3
 8003c1c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c2c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003c30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003c34:	460b      	mov	r3, r1
 8003c36:	18db      	adds	r3, r3, r3
 8003c38:	643b      	str	r3, [r7, #64]	; 0x40
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	eb42 0303 	adc.w	r3, r2, r3
 8003c40:	647b      	str	r3, [r7, #68]	; 0x44
 8003c42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003c4a:	f7fc fe27 	bl	800089c <__aeabi_uldivmod>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	460b      	mov	r3, r1
 8003c52:	4611      	mov	r1, r2
 8003c54:	4b3b      	ldr	r3, [pc, #236]	; (8003d44 <UART_SetConfig+0x2d4>)
 8003c56:	fba3 2301 	umull	r2, r3, r3, r1
 8003c5a:	095b      	lsrs	r3, r3, #5
 8003c5c:	2264      	movs	r2, #100	; 0x64
 8003c5e:	fb02 f303 	mul.w	r3, r2, r3
 8003c62:	1acb      	subs	r3, r1, r3
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003c6a:	4b36      	ldr	r3, [pc, #216]	; (8003d44 <UART_SetConfig+0x2d4>)
 8003c6c:	fba3 2302 	umull	r2, r3, r3, r2
 8003c70:	095b      	lsrs	r3, r3, #5
 8003c72:	005b      	lsls	r3, r3, #1
 8003c74:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c78:	441c      	add	r4, r3
 8003c7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c84:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003c88:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003c8c:	4642      	mov	r2, r8
 8003c8e:	464b      	mov	r3, r9
 8003c90:	1891      	adds	r1, r2, r2
 8003c92:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c94:	415b      	adcs	r3, r3
 8003c96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003c9c:	4641      	mov	r1, r8
 8003c9e:	1851      	adds	r1, r2, r1
 8003ca0:	6339      	str	r1, [r7, #48]	; 0x30
 8003ca2:	4649      	mov	r1, r9
 8003ca4:	414b      	adcs	r3, r1
 8003ca6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ca8:	f04f 0200 	mov.w	r2, #0
 8003cac:	f04f 0300 	mov.w	r3, #0
 8003cb0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003cb4:	4659      	mov	r1, fp
 8003cb6:	00cb      	lsls	r3, r1, #3
 8003cb8:	4651      	mov	r1, sl
 8003cba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cbe:	4651      	mov	r1, sl
 8003cc0:	00ca      	lsls	r2, r1, #3
 8003cc2:	4610      	mov	r0, r2
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	4642      	mov	r2, r8
 8003cca:	189b      	adds	r3, r3, r2
 8003ccc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003cd0:	464b      	mov	r3, r9
 8003cd2:	460a      	mov	r2, r1
 8003cd4:	eb42 0303 	adc.w	r3, r2, r3
 8003cd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003ce8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003cec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	18db      	adds	r3, r3, r3
 8003cf4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	eb42 0303 	adc.w	r3, r2, r3
 8003cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cfe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003d06:	f7fc fdc9 	bl	800089c <__aeabi_uldivmod>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	4b0d      	ldr	r3, [pc, #52]	; (8003d44 <UART_SetConfig+0x2d4>)
 8003d10:	fba3 1302 	umull	r1, r3, r3, r2
 8003d14:	095b      	lsrs	r3, r3, #5
 8003d16:	2164      	movs	r1, #100	; 0x64
 8003d18:	fb01 f303 	mul.w	r3, r1, r3
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	00db      	lsls	r3, r3, #3
 8003d20:	3332      	adds	r3, #50	; 0x32
 8003d22:	4a08      	ldr	r2, [pc, #32]	; (8003d44 <UART_SetConfig+0x2d4>)
 8003d24:	fba2 2303 	umull	r2, r3, r2, r3
 8003d28:	095b      	lsrs	r3, r3, #5
 8003d2a:	f003 0207 	and.w	r2, r3, #7
 8003d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4422      	add	r2, r4
 8003d36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d38:	e105      	b.n	8003f46 <UART_SetConfig+0x4d6>
 8003d3a:	bf00      	nop
 8003d3c:	40011000 	.word	0x40011000
 8003d40:	40011400 	.word	0x40011400
 8003d44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003d52:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003d56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003d5a:	4642      	mov	r2, r8
 8003d5c:	464b      	mov	r3, r9
 8003d5e:	1891      	adds	r1, r2, r2
 8003d60:	6239      	str	r1, [r7, #32]
 8003d62:	415b      	adcs	r3, r3
 8003d64:	627b      	str	r3, [r7, #36]	; 0x24
 8003d66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d6a:	4641      	mov	r1, r8
 8003d6c:	1854      	adds	r4, r2, r1
 8003d6e:	4649      	mov	r1, r9
 8003d70:	eb43 0501 	adc.w	r5, r3, r1
 8003d74:	f04f 0200 	mov.w	r2, #0
 8003d78:	f04f 0300 	mov.w	r3, #0
 8003d7c:	00eb      	lsls	r3, r5, #3
 8003d7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d82:	00e2      	lsls	r2, r4, #3
 8003d84:	4614      	mov	r4, r2
 8003d86:	461d      	mov	r5, r3
 8003d88:	4643      	mov	r3, r8
 8003d8a:	18e3      	adds	r3, r4, r3
 8003d8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003d90:	464b      	mov	r3, r9
 8003d92:	eb45 0303 	adc.w	r3, r5, r3
 8003d96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003da6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003daa:	f04f 0200 	mov.w	r2, #0
 8003dae:	f04f 0300 	mov.w	r3, #0
 8003db2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003db6:	4629      	mov	r1, r5
 8003db8:	008b      	lsls	r3, r1, #2
 8003dba:	4621      	mov	r1, r4
 8003dbc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dc0:	4621      	mov	r1, r4
 8003dc2:	008a      	lsls	r2, r1, #2
 8003dc4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003dc8:	f7fc fd68 	bl	800089c <__aeabi_uldivmod>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	460b      	mov	r3, r1
 8003dd0:	4b60      	ldr	r3, [pc, #384]	; (8003f54 <UART_SetConfig+0x4e4>)
 8003dd2:	fba3 2302 	umull	r2, r3, r3, r2
 8003dd6:	095b      	lsrs	r3, r3, #5
 8003dd8:	011c      	lsls	r4, r3, #4
 8003dda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dde:	2200      	movs	r2, #0
 8003de0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003de4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003de8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003dec:	4642      	mov	r2, r8
 8003dee:	464b      	mov	r3, r9
 8003df0:	1891      	adds	r1, r2, r2
 8003df2:	61b9      	str	r1, [r7, #24]
 8003df4:	415b      	adcs	r3, r3
 8003df6:	61fb      	str	r3, [r7, #28]
 8003df8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dfc:	4641      	mov	r1, r8
 8003dfe:	1851      	adds	r1, r2, r1
 8003e00:	6139      	str	r1, [r7, #16]
 8003e02:	4649      	mov	r1, r9
 8003e04:	414b      	adcs	r3, r1
 8003e06:	617b      	str	r3, [r7, #20]
 8003e08:	f04f 0200 	mov.w	r2, #0
 8003e0c:	f04f 0300 	mov.w	r3, #0
 8003e10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e14:	4659      	mov	r1, fp
 8003e16:	00cb      	lsls	r3, r1, #3
 8003e18:	4651      	mov	r1, sl
 8003e1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e1e:	4651      	mov	r1, sl
 8003e20:	00ca      	lsls	r2, r1, #3
 8003e22:	4610      	mov	r0, r2
 8003e24:	4619      	mov	r1, r3
 8003e26:	4603      	mov	r3, r0
 8003e28:	4642      	mov	r2, r8
 8003e2a:	189b      	adds	r3, r3, r2
 8003e2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e30:	464b      	mov	r3, r9
 8003e32:	460a      	mov	r2, r1
 8003e34:	eb42 0303 	adc.w	r3, r2, r3
 8003e38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e46:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003e48:	f04f 0200 	mov.w	r2, #0
 8003e4c:	f04f 0300 	mov.w	r3, #0
 8003e50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003e54:	4649      	mov	r1, r9
 8003e56:	008b      	lsls	r3, r1, #2
 8003e58:	4641      	mov	r1, r8
 8003e5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e5e:	4641      	mov	r1, r8
 8003e60:	008a      	lsls	r2, r1, #2
 8003e62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003e66:	f7fc fd19 	bl	800089c <__aeabi_uldivmod>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	4b39      	ldr	r3, [pc, #228]	; (8003f54 <UART_SetConfig+0x4e4>)
 8003e70:	fba3 1302 	umull	r1, r3, r3, r2
 8003e74:	095b      	lsrs	r3, r3, #5
 8003e76:	2164      	movs	r1, #100	; 0x64
 8003e78:	fb01 f303 	mul.w	r3, r1, r3
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	011b      	lsls	r3, r3, #4
 8003e80:	3332      	adds	r3, #50	; 0x32
 8003e82:	4a34      	ldr	r2, [pc, #208]	; (8003f54 <UART_SetConfig+0x4e4>)
 8003e84:	fba2 2303 	umull	r2, r3, r2, r3
 8003e88:	095b      	lsrs	r3, r3, #5
 8003e8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e8e:	441c      	add	r4, r3
 8003e90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e94:	2200      	movs	r2, #0
 8003e96:	673b      	str	r3, [r7, #112]	; 0x70
 8003e98:	677a      	str	r2, [r7, #116]	; 0x74
 8003e9a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003e9e:	4642      	mov	r2, r8
 8003ea0:	464b      	mov	r3, r9
 8003ea2:	1891      	adds	r1, r2, r2
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	415b      	adcs	r3, r3
 8003ea8:	60fb      	str	r3, [r7, #12]
 8003eaa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003eae:	4641      	mov	r1, r8
 8003eb0:	1851      	adds	r1, r2, r1
 8003eb2:	6039      	str	r1, [r7, #0]
 8003eb4:	4649      	mov	r1, r9
 8003eb6:	414b      	adcs	r3, r1
 8003eb8:	607b      	str	r3, [r7, #4]
 8003eba:	f04f 0200 	mov.w	r2, #0
 8003ebe:	f04f 0300 	mov.w	r3, #0
 8003ec2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ec6:	4659      	mov	r1, fp
 8003ec8:	00cb      	lsls	r3, r1, #3
 8003eca:	4651      	mov	r1, sl
 8003ecc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ed0:	4651      	mov	r1, sl
 8003ed2:	00ca      	lsls	r2, r1, #3
 8003ed4:	4610      	mov	r0, r2
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	4603      	mov	r3, r0
 8003eda:	4642      	mov	r2, r8
 8003edc:	189b      	adds	r3, r3, r2
 8003ede:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ee0:	464b      	mov	r3, r9
 8003ee2:	460a      	mov	r2, r1
 8003ee4:	eb42 0303 	adc.w	r3, r2, r3
 8003ee8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	663b      	str	r3, [r7, #96]	; 0x60
 8003ef4:	667a      	str	r2, [r7, #100]	; 0x64
 8003ef6:	f04f 0200 	mov.w	r2, #0
 8003efa:	f04f 0300 	mov.w	r3, #0
 8003efe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003f02:	4649      	mov	r1, r9
 8003f04:	008b      	lsls	r3, r1, #2
 8003f06:	4641      	mov	r1, r8
 8003f08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f0c:	4641      	mov	r1, r8
 8003f0e:	008a      	lsls	r2, r1, #2
 8003f10:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003f14:	f7fc fcc2 	bl	800089c <__aeabi_uldivmod>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	4b0d      	ldr	r3, [pc, #52]	; (8003f54 <UART_SetConfig+0x4e4>)
 8003f1e:	fba3 1302 	umull	r1, r3, r3, r2
 8003f22:	095b      	lsrs	r3, r3, #5
 8003f24:	2164      	movs	r1, #100	; 0x64
 8003f26:	fb01 f303 	mul.w	r3, r1, r3
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	011b      	lsls	r3, r3, #4
 8003f2e:	3332      	adds	r3, #50	; 0x32
 8003f30:	4a08      	ldr	r2, [pc, #32]	; (8003f54 <UART_SetConfig+0x4e4>)
 8003f32:	fba2 2303 	umull	r2, r3, r2, r3
 8003f36:	095b      	lsrs	r3, r3, #5
 8003f38:	f003 020f 	and.w	r2, r3, #15
 8003f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4422      	add	r2, r4
 8003f44:	609a      	str	r2, [r3, #8]
}
 8003f46:	bf00      	nop
 8003f48:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f52:	bf00      	nop
 8003f54:	51eb851f 	.word	0x51eb851f

08003f58 <__errno>:
 8003f58:	4b01      	ldr	r3, [pc, #4]	; (8003f60 <__errno+0x8>)
 8003f5a:	6818      	ldr	r0, [r3, #0]
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	20000028 	.word	0x20000028

08003f64 <__libc_init_array>:
 8003f64:	b570      	push	{r4, r5, r6, lr}
 8003f66:	4d0d      	ldr	r5, [pc, #52]	; (8003f9c <__libc_init_array+0x38>)
 8003f68:	4c0d      	ldr	r4, [pc, #52]	; (8003fa0 <__libc_init_array+0x3c>)
 8003f6a:	1b64      	subs	r4, r4, r5
 8003f6c:	10a4      	asrs	r4, r4, #2
 8003f6e:	2600      	movs	r6, #0
 8003f70:	42a6      	cmp	r6, r4
 8003f72:	d109      	bne.n	8003f88 <__libc_init_array+0x24>
 8003f74:	4d0b      	ldr	r5, [pc, #44]	; (8003fa4 <__libc_init_array+0x40>)
 8003f76:	4c0c      	ldr	r4, [pc, #48]	; (8003fa8 <__libc_init_array+0x44>)
 8003f78:	f000 fc8e 	bl	8004898 <_init>
 8003f7c:	1b64      	subs	r4, r4, r5
 8003f7e:	10a4      	asrs	r4, r4, #2
 8003f80:	2600      	movs	r6, #0
 8003f82:	42a6      	cmp	r6, r4
 8003f84:	d105      	bne.n	8003f92 <__libc_init_array+0x2e>
 8003f86:	bd70      	pop	{r4, r5, r6, pc}
 8003f88:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f8c:	4798      	blx	r3
 8003f8e:	3601      	adds	r6, #1
 8003f90:	e7ee      	b.n	8003f70 <__libc_init_array+0xc>
 8003f92:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f96:	4798      	blx	r3
 8003f98:	3601      	adds	r6, #1
 8003f9a:	e7f2      	b.n	8003f82 <__libc_init_array+0x1e>
 8003f9c:	08004908 	.word	0x08004908
 8003fa0:	08004908 	.word	0x08004908
 8003fa4:	08004908 	.word	0x08004908
 8003fa8:	0800490c 	.word	0x0800490c

08003fac <memset>:
 8003fac:	4402      	add	r2, r0
 8003fae:	4603      	mov	r3, r0
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d100      	bne.n	8003fb6 <memset+0xa>
 8003fb4:	4770      	bx	lr
 8003fb6:	f803 1b01 	strb.w	r1, [r3], #1
 8003fba:	e7f9      	b.n	8003fb0 <memset+0x4>

08003fbc <siprintf>:
 8003fbc:	b40e      	push	{r1, r2, r3}
 8003fbe:	b500      	push	{lr}
 8003fc0:	b09c      	sub	sp, #112	; 0x70
 8003fc2:	ab1d      	add	r3, sp, #116	; 0x74
 8003fc4:	9002      	str	r0, [sp, #8]
 8003fc6:	9006      	str	r0, [sp, #24]
 8003fc8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003fcc:	4809      	ldr	r0, [pc, #36]	; (8003ff4 <siprintf+0x38>)
 8003fce:	9107      	str	r1, [sp, #28]
 8003fd0:	9104      	str	r1, [sp, #16]
 8003fd2:	4909      	ldr	r1, [pc, #36]	; (8003ff8 <siprintf+0x3c>)
 8003fd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fd8:	9105      	str	r1, [sp, #20]
 8003fda:	6800      	ldr	r0, [r0, #0]
 8003fdc:	9301      	str	r3, [sp, #4]
 8003fde:	a902      	add	r1, sp, #8
 8003fe0:	f000 f868 	bl	80040b4 <_svfiprintf_r>
 8003fe4:	9b02      	ldr	r3, [sp, #8]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	701a      	strb	r2, [r3, #0]
 8003fea:	b01c      	add	sp, #112	; 0x70
 8003fec:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ff0:	b003      	add	sp, #12
 8003ff2:	4770      	bx	lr
 8003ff4:	20000028 	.word	0x20000028
 8003ff8:	ffff0208 	.word	0xffff0208

08003ffc <__ssputs_r>:
 8003ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004000:	688e      	ldr	r6, [r1, #8]
 8004002:	429e      	cmp	r6, r3
 8004004:	4682      	mov	sl, r0
 8004006:	460c      	mov	r4, r1
 8004008:	4690      	mov	r8, r2
 800400a:	461f      	mov	r7, r3
 800400c:	d838      	bhi.n	8004080 <__ssputs_r+0x84>
 800400e:	898a      	ldrh	r2, [r1, #12]
 8004010:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004014:	d032      	beq.n	800407c <__ssputs_r+0x80>
 8004016:	6825      	ldr	r5, [r4, #0]
 8004018:	6909      	ldr	r1, [r1, #16]
 800401a:	eba5 0901 	sub.w	r9, r5, r1
 800401e:	6965      	ldr	r5, [r4, #20]
 8004020:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004024:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004028:	3301      	adds	r3, #1
 800402a:	444b      	add	r3, r9
 800402c:	106d      	asrs	r5, r5, #1
 800402e:	429d      	cmp	r5, r3
 8004030:	bf38      	it	cc
 8004032:	461d      	movcc	r5, r3
 8004034:	0553      	lsls	r3, r2, #21
 8004036:	d531      	bpl.n	800409c <__ssputs_r+0xa0>
 8004038:	4629      	mov	r1, r5
 800403a:	f000 fb63 	bl	8004704 <_malloc_r>
 800403e:	4606      	mov	r6, r0
 8004040:	b950      	cbnz	r0, 8004058 <__ssputs_r+0x5c>
 8004042:	230c      	movs	r3, #12
 8004044:	f8ca 3000 	str.w	r3, [sl]
 8004048:	89a3      	ldrh	r3, [r4, #12]
 800404a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800404e:	81a3      	strh	r3, [r4, #12]
 8004050:	f04f 30ff 	mov.w	r0, #4294967295
 8004054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004058:	6921      	ldr	r1, [r4, #16]
 800405a:	464a      	mov	r2, r9
 800405c:	f000 fabe 	bl	80045dc <memcpy>
 8004060:	89a3      	ldrh	r3, [r4, #12]
 8004062:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004066:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800406a:	81a3      	strh	r3, [r4, #12]
 800406c:	6126      	str	r6, [r4, #16]
 800406e:	6165      	str	r5, [r4, #20]
 8004070:	444e      	add	r6, r9
 8004072:	eba5 0509 	sub.w	r5, r5, r9
 8004076:	6026      	str	r6, [r4, #0]
 8004078:	60a5      	str	r5, [r4, #8]
 800407a:	463e      	mov	r6, r7
 800407c:	42be      	cmp	r6, r7
 800407e:	d900      	bls.n	8004082 <__ssputs_r+0x86>
 8004080:	463e      	mov	r6, r7
 8004082:	6820      	ldr	r0, [r4, #0]
 8004084:	4632      	mov	r2, r6
 8004086:	4641      	mov	r1, r8
 8004088:	f000 fab6 	bl	80045f8 <memmove>
 800408c:	68a3      	ldr	r3, [r4, #8]
 800408e:	1b9b      	subs	r3, r3, r6
 8004090:	60a3      	str	r3, [r4, #8]
 8004092:	6823      	ldr	r3, [r4, #0]
 8004094:	4433      	add	r3, r6
 8004096:	6023      	str	r3, [r4, #0]
 8004098:	2000      	movs	r0, #0
 800409a:	e7db      	b.n	8004054 <__ssputs_r+0x58>
 800409c:	462a      	mov	r2, r5
 800409e:	f000 fba5 	bl	80047ec <_realloc_r>
 80040a2:	4606      	mov	r6, r0
 80040a4:	2800      	cmp	r0, #0
 80040a6:	d1e1      	bne.n	800406c <__ssputs_r+0x70>
 80040a8:	6921      	ldr	r1, [r4, #16]
 80040aa:	4650      	mov	r0, sl
 80040ac:	f000 fabe 	bl	800462c <_free_r>
 80040b0:	e7c7      	b.n	8004042 <__ssputs_r+0x46>
	...

080040b4 <_svfiprintf_r>:
 80040b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040b8:	4698      	mov	r8, r3
 80040ba:	898b      	ldrh	r3, [r1, #12]
 80040bc:	061b      	lsls	r3, r3, #24
 80040be:	b09d      	sub	sp, #116	; 0x74
 80040c0:	4607      	mov	r7, r0
 80040c2:	460d      	mov	r5, r1
 80040c4:	4614      	mov	r4, r2
 80040c6:	d50e      	bpl.n	80040e6 <_svfiprintf_r+0x32>
 80040c8:	690b      	ldr	r3, [r1, #16]
 80040ca:	b963      	cbnz	r3, 80040e6 <_svfiprintf_r+0x32>
 80040cc:	2140      	movs	r1, #64	; 0x40
 80040ce:	f000 fb19 	bl	8004704 <_malloc_r>
 80040d2:	6028      	str	r0, [r5, #0]
 80040d4:	6128      	str	r0, [r5, #16]
 80040d6:	b920      	cbnz	r0, 80040e2 <_svfiprintf_r+0x2e>
 80040d8:	230c      	movs	r3, #12
 80040da:	603b      	str	r3, [r7, #0]
 80040dc:	f04f 30ff 	mov.w	r0, #4294967295
 80040e0:	e0d1      	b.n	8004286 <_svfiprintf_r+0x1d2>
 80040e2:	2340      	movs	r3, #64	; 0x40
 80040e4:	616b      	str	r3, [r5, #20]
 80040e6:	2300      	movs	r3, #0
 80040e8:	9309      	str	r3, [sp, #36]	; 0x24
 80040ea:	2320      	movs	r3, #32
 80040ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80040f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80040f4:	2330      	movs	r3, #48	; 0x30
 80040f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80042a0 <_svfiprintf_r+0x1ec>
 80040fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80040fe:	f04f 0901 	mov.w	r9, #1
 8004102:	4623      	mov	r3, r4
 8004104:	469a      	mov	sl, r3
 8004106:	f813 2b01 	ldrb.w	r2, [r3], #1
 800410a:	b10a      	cbz	r2, 8004110 <_svfiprintf_r+0x5c>
 800410c:	2a25      	cmp	r2, #37	; 0x25
 800410e:	d1f9      	bne.n	8004104 <_svfiprintf_r+0x50>
 8004110:	ebba 0b04 	subs.w	fp, sl, r4
 8004114:	d00b      	beq.n	800412e <_svfiprintf_r+0x7a>
 8004116:	465b      	mov	r3, fp
 8004118:	4622      	mov	r2, r4
 800411a:	4629      	mov	r1, r5
 800411c:	4638      	mov	r0, r7
 800411e:	f7ff ff6d 	bl	8003ffc <__ssputs_r>
 8004122:	3001      	adds	r0, #1
 8004124:	f000 80aa 	beq.w	800427c <_svfiprintf_r+0x1c8>
 8004128:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800412a:	445a      	add	r2, fp
 800412c:	9209      	str	r2, [sp, #36]	; 0x24
 800412e:	f89a 3000 	ldrb.w	r3, [sl]
 8004132:	2b00      	cmp	r3, #0
 8004134:	f000 80a2 	beq.w	800427c <_svfiprintf_r+0x1c8>
 8004138:	2300      	movs	r3, #0
 800413a:	f04f 32ff 	mov.w	r2, #4294967295
 800413e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004142:	f10a 0a01 	add.w	sl, sl, #1
 8004146:	9304      	str	r3, [sp, #16]
 8004148:	9307      	str	r3, [sp, #28]
 800414a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800414e:	931a      	str	r3, [sp, #104]	; 0x68
 8004150:	4654      	mov	r4, sl
 8004152:	2205      	movs	r2, #5
 8004154:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004158:	4851      	ldr	r0, [pc, #324]	; (80042a0 <_svfiprintf_r+0x1ec>)
 800415a:	f7fc f849 	bl	80001f0 <memchr>
 800415e:	9a04      	ldr	r2, [sp, #16]
 8004160:	b9d8      	cbnz	r0, 800419a <_svfiprintf_r+0xe6>
 8004162:	06d0      	lsls	r0, r2, #27
 8004164:	bf44      	itt	mi
 8004166:	2320      	movmi	r3, #32
 8004168:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800416c:	0711      	lsls	r1, r2, #28
 800416e:	bf44      	itt	mi
 8004170:	232b      	movmi	r3, #43	; 0x2b
 8004172:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004176:	f89a 3000 	ldrb.w	r3, [sl]
 800417a:	2b2a      	cmp	r3, #42	; 0x2a
 800417c:	d015      	beq.n	80041aa <_svfiprintf_r+0xf6>
 800417e:	9a07      	ldr	r2, [sp, #28]
 8004180:	4654      	mov	r4, sl
 8004182:	2000      	movs	r0, #0
 8004184:	f04f 0c0a 	mov.w	ip, #10
 8004188:	4621      	mov	r1, r4
 800418a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800418e:	3b30      	subs	r3, #48	; 0x30
 8004190:	2b09      	cmp	r3, #9
 8004192:	d94e      	bls.n	8004232 <_svfiprintf_r+0x17e>
 8004194:	b1b0      	cbz	r0, 80041c4 <_svfiprintf_r+0x110>
 8004196:	9207      	str	r2, [sp, #28]
 8004198:	e014      	b.n	80041c4 <_svfiprintf_r+0x110>
 800419a:	eba0 0308 	sub.w	r3, r0, r8
 800419e:	fa09 f303 	lsl.w	r3, r9, r3
 80041a2:	4313      	orrs	r3, r2
 80041a4:	9304      	str	r3, [sp, #16]
 80041a6:	46a2      	mov	sl, r4
 80041a8:	e7d2      	b.n	8004150 <_svfiprintf_r+0x9c>
 80041aa:	9b03      	ldr	r3, [sp, #12]
 80041ac:	1d19      	adds	r1, r3, #4
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	9103      	str	r1, [sp, #12]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	bfbb      	ittet	lt
 80041b6:	425b      	neglt	r3, r3
 80041b8:	f042 0202 	orrlt.w	r2, r2, #2
 80041bc:	9307      	strge	r3, [sp, #28]
 80041be:	9307      	strlt	r3, [sp, #28]
 80041c0:	bfb8      	it	lt
 80041c2:	9204      	strlt	r2, [sp, #16]
 80041c4:	7823      	ldrb	r3, [r4, #0]
 80041c6:	2b2e      	cmp	r3, #46	; 0x2e
 80041c8:	d10c      	bne.n	80041e4 <_svfiprintf_r+0x130>
 80041ca:	7863      	ldrb	r3, [r4, #1]
 80041cc:	2b2a      	cmp	r3, #42	; 0x2a
 80041ce:	d135      	bne.n	800423c <_svfiprintf_r+0x188>
 80041d0:	9b03      	ldr	r3, [sp, #12]
 80041d2:	1d1a      	adds	r2, r3, #4
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	9203      	str	r2, [sp, #12]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	bfb8      	it	lt
 80041dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80041e0:	3402      	adds	r4, #2
 80041e2:	9305      	str	r3, [sp, #20]
 80041e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80042b0 <_svfiprintf_r+0x1fc>
 80041e8:	7821      	ldrb	r1, [r4, #0]
 80041ea:	2203      	movs	r2, #3
 80041ec:	4650      	mov	r0, sl
 80041ee:	f7fb ffff 	bl	80001f0 <memchr>
 80041f2:	b140      	cbz	r0, 8004206 <_svfiprintf_r+0x152>
 80041f4:	2340      	movs	r3, #64	; 0x40
 80041f6:	eba0 000a 	sub.w	r0, r0, sl
 80041fa:	fa03 f000 	lsl.w	r0, r3, r0
 80041fe:	9b04      	ldr	r3, [sp, #16]
 8004200:	4303      	orrs	r3, r0
 8004202:	3401      	adds	r4, #1
 8004204:	9304      	str	r3, [sp, #16]
 8004206:	f814 1b01 	ldrb.w	r1, [r4], #1
 800420a:	4826      	ldr	r0, [pc, #152]	; (80042a4 <_svfiprintf_r+0x1f0>)
 800420c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004210:	2206      	movs	r2, #6
 8004212:	f7fb ffed 	bl	80001f0 <memchr>
 8004216:	2800      	cmp	r0, #0
 8004218:	d038      	beq.n	800428c <_svfiprintf_r+0x1d8>
 800421a:	4b23      	ldr	r3, [pc, #140]	; (80042a8 <_svfiprintf_r+0x1f4>)
 800421c:	bb1b      	cbnz	r3, 8004266 <_svfiprintf_r+0x1b2>
 800421e:	9b03      	ldr	r3, [sp, #12]
 8004220:	3307      	adds	r3, #7
 8004222:	f023 0307 	bic.w	r3, r3, #7
 8004226:	3308      	adds	r3, #8
 8004228:	9303      	str	r3, [sp, #12]
 800422a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800422c:	4433      	add	r3, r6
 800422e:	9309      	str	r3, [sp, #36]	; 0x24
 8004230:	e767      	b.n	8004102 <_svfiprintf_r+0x4e>
 8004232:	fb0c 3202 	mla	r2, ip, r2, r3
 8004236:	460c      	mov	r4, r1
 8004238:	2001      	movs	r0, #1
 800423a:	e7a5      	b.n	8004188 <_svfiprintf_r+0xd4>
 800423c:	2300      	movs	r3, #0
 800423e:	3401      	adds	r4, #1
 8004240:	9305      	str	r3, [sp, #20]
 8004242:	4619      	mov	r1, r3
 8004244:	f04f 0c0a 	mov.w	ip, #10
 8004248:	4620      	mov	r0, r4
 800424a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800424e:	3a30      	subs	r2, #48	; 0x30
 8004250:	2a09      	cmp	r2, #9
 8004252:	d903      	bls.n	800425c <_svfiprintf_r+0x1a8>
 8004254:	2b00      	cmp	r3, #0
 8004256:	d0c5      	beq.n	80041e4 <_svfiprintf_r+0x130>
 8004258:	9105      	str	r1, [sp, #20]
 800425a:	e7c3      	b.n	80041e4 <_svfiprintf_r+0x130>
 800425c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004260:	4604      	mov	r4, r0
 8004262:	2301      	movs	r3, #1
 8004264:	e7f0      	b.n	8004248 <_svfiprintf_r+0x194>
 8004266:	ab03      	add	r3, sp, #12
 8004268:	9300      	str	r3, [sp, #0]
 800426a:	462a      	mov	r2, r5
 800426c:	4b0f      	ldr	r3, [pc, #60]	; (80042ac <_svfiprintf_r+0x1f8>)
 800426e:	a904      	add	r1, sp, #16
 8004270:	4638      	mov	r0, r7
 8004272:	f3af 8000 	nop.w
 8004276:	1c42      	adds	r2, r0, #1
 8004278:	4606      	mov	r6, r0
 800427a:	d1d6      	bne.n	800422a <_svfiprintf_r+0x176>
 800427c:	89ab      	ldrh	r3, [r5, #12]
 800427e:	065b      	lsls	r3, r3, #25
 8004280:	f53f af2c 	bmi.w	80040dc <_svfiprintf_r+0x28>
 8004284:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004286:	b01d      	add	sp, #116	; 0x74
 8004288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800428c:	ab03      	add	r3, sp, #12
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	462a      	mov	r2, r5
 8004292:	4b06      	ldr	r3, [pc, #24]	; (80042ac <_svfiprintf_r+0x1f8>)
 8004294:	a904      	add	r1, sp, #16
 8004296:	4638      	mov	r0, r7
 8004298:	f000 f87a 	bl	8004390 <_printf_i>
 800429c:	e7eb      	b.n	8004276 <_svfiprintf_r+0x1c2>
 800429e:	bf00      	nop
 80042a0:	080048cc 	.word	0x080048cc
 80042a4:	080048d6 	.word	0x080048d6
 80042a8:	00000000 	.word	0x00000000
 80042ac:	08003ffd 	.word	0x08003ffd
 80042b0:	080048d2 	.word	0x080048d2

080042b4 <_printf_common>:
 80042b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042b8:	4616      	mov	r6, r2
 80042ba:	4699      	mov	r9, r3
 80042bc:	688a      	ldr	r2, [r1, #8]
 80042be:	690b      	ldr	r3, [r1, #16]
 80042c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80042c4:	4293      	cmp	r3, r2
 80042c6:	bfb8      	it	lt
 80042c8:	4613      	movlt	r3, r2
 80042ca:	6033      	str	r3, [r6, #0]
 80042cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80042d0:	4607      	mov	r7, r0
 80042d2:	460c      	mov	r4, r1
 80042d4:	b10a      	cbz	r2, 80042da <_printf_common+0x26>
 80042d6:	3301      	adds	r3, #1
 80042d8:	6033      	str	r3, [r6, #0]
 80042da:	6823      	ldr	r3, [r4, #0]
 80042dc:	0699      	lsls	r1, r3, #26
 80042de:	bf42      	ittt	mi
 80042e0:	6833      	ldrmi	r3, [r6, #0]
 80042e2:	3302      	addmi	r3, #2
 80042e4:	6033      	strmi	r3, [r6, #0]
 80042e6:	6825      	ldr	r5, [r4, #0]
 80042e8:	f015 0506 	ands.w	r5, r5, #6
 80042ec:	d106      	bne.n	80042fc <_printf_common+0x48>
 80042ee:	f104 0a19 	add.w	sl, r4, #25
 80042f2:	68e3      	ldr	r3, [r4, #12]
 80042f4:	6832      	ldr	r2, [r6, #0]
 80042f6:	1a9b      	subs	r3, r3, r2
 80042f8:	42ab      	cmp	r3, r5
 80042fa:	dc26      	bgt.n	800434a <_printf_common+0x96>
 80042fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004300:	1e13      	subs	r3, r2, #0
 8004302:	6822      	ldr	r2, [r4, #0]
 8004304:	bf18      	it	ne
 8004306:	2301      	movne	r3, #1
 8004308:	0692      	lsls	r2, r2, #26
 800430a:	d42b      	bmi.n	8004364 <_printf_common+0xb0>
 800430c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004310:	4649      	mov	r1, r9
 8004312:	4638      	mov	r0, r7
 8004314:	47c0      	blx	r8
 8004316:	3001      	adds	r0, #1
 8004318:	d01e      	beq.n	8004358 <_printf_common+0xa4>
 800431a:	6823      	ldr	r3, [r4, #0]
 800431c:	68e5      	ldr	r5, [r4, #12]
 800431e:	6832      	ldr	r2, [r6, #0]
 8004320:	f003 0306 	and.w	r3, r3, #6
 8004324:	2b04      	cmp	r3, #4
 8004326:	bf08      	it	eq
 8004328:	1aad      	subeq	r5, r5, r2
 800432a:	68a3      	ldr	r3, [r4, #8]
 800432c:	6922      	ldr	r2, [r4, #16]
 800432e:	bf0c      	ite	eq
 8004330:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004334:	2500      	movne	r5, #0
 8004336:	4293      	cmp	r3, r2
 8004338:	bfc4      	itt	gt
 800433a:	1a9b      	subgt	r3, r3, r2
 800433c:	18ed      	addgt	r5, r5, r3
 800433e:	2600      	movs	r6, #0
 8004340:	341a      	adds	r4, #26
 8004342:	42b5      	cmp	r5, r6
 8004344:	d11a      	bne.n	800437c <_printf_common+0xc8>
 8004346:	2000      	movs	r0, #0
 8004348:	e008      	b.n	800435c <_printf_common+0xa8>
 800434a:	2301      	movs	r3, #1
 800434c:	4652      	mov	r2, sl
 800434e:	4649      	mov	r1, r9
 8004350:	4638      	mov	r0, r7
 8004352:	47c0      	blx	r8
 8004354:	3001      	adds	r0, #1
 8004356:	d103      	bne.n	8004360 <_printf_common+0xac>
 8004358:	f04f 30ff 	mov.w	r0, #4294967295
 800435c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004360:	3501      	adds	r5, #1
 8004362:	e7c6      	b.n	80042f2 <_printf_common+0x3e>
 8004364:	18e1      	adds	r1, r4, r3
 8004366:	1c5a      	adds	r2, r3, #1
 8004368:	2030      	movs	r0, #48	; 0x30
 800436a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800436e:	4422      	add	r2, r4
 8004370:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004374:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004378:	3302      	adds	r3, #2
 800437a:	e7c7      	b.n	800430c <_printf_common+0x58>
 800437c:	2301      	movs	r3, #1
 800437e:	4622      	mov	r2, r4
 8004380:	4649      	mov	r1, r9
 8004382:	4638      	mov	r0, r7
 8004384:	47c0      	blx	r8
 8004386:	3001      	adds	r0, #1
 8004388:	d0e6      	beq.n	8004358 <_printf_common+0xa4>
 800438a:	3601      	adds	r6, #1
 800438c:	e7d9      	b.n	8004342 <_printf_common+0x8e>
	...

08004390 <_printf_i>:
 8004390:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004394:	7e0f      	ldrb	r7, [r1, #24]
 8004396:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004398:	2f78      	cmp	r7, #120	; 0x78
 800439a:	4691      	mov	r9, r2
 800439c:	4680      	mov	r8, r0
 800439e:	460c      	mov	r4, r1
 80043a0:	469a      	mov	sl, r3
 80043a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80043a6:	d807      	bhi.n	80043b8 <_printf_i+0x28>
 80043a8:	2f62      	cmp	r7, #98	; 0x62
 80043aa:	d80a      	bhi.n	80043c2 <_printf_i+0x32>
 80043ac:	2f00      	cmp	r7, #0
 80043ae:	f000 80d8 	beq.w	8004562 <_printf_i+0x1d2>
 80043b2:	2f58      	cmp	r7, #88	; 0x58
 80043b4:	f000 80a3 	beq.w	80044fe <_printf_i+0x16e>
 80043b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80043c0:	e03a      	b.n	8004438 <_printf_i+0xa8>
 80043c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80043c6:	2b15      	cmp	r3, #21
 80043c8:	d8f6      	bhi.n	80043b8 <_printf_i+0x28>
 80043ca:	a101      	add	r1, pc, #4	; (adr r1, 80043d0 <_printf_i+0x40>)
 80043cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80043d0:	08004429 	.word	0x08004429
 80043d4:	0800443d 	.word	0x0800443d
 80043d8:	080043b9 	.word	0x080043b9
 80043dc:	080043b9 	.word	0x080043b9
 80043e0:	080043b9 	.word	0x080043b9
 80043e4:	080043b9 	.word	0x080043b9
 80043e8:	0800443d 	.word	0x0800443d
 80043ec:	080043b9 	.word	0x080043b9
 80043f0:	080043b9 	.word	0x080043b9
 80043f4:	080043b9 	.word	0x080043b9
 80043f8:	080043b9 	.word	0x080043b9
 80043fc:	08004549 	.word	0x08004549
 8004400:	0800446d 	.word	0x0800446d
 8004404:	0800452b 	.word	0x0800452b
 8004408:	080043b9 	.word	0x080043b9
 800440c:	080043b9 	.word	0x080043b9
 8004410:	0800456b 	.word	0x0800456b
 8004414:	080043b9 	.word	0x080043b9
 8004418:	0800446d 	.word	0x0800446d
 800441c:	080043b9 	.word	0x080043b9
 8004420:	080043b9 	.word	0x080043b9
 8004424:	08004533 	.word	0x08004533
 8004428:	682b      	ldr	r3, [r5, #0]
 800442a:	1d1a      	adds	r2, r3, #4
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	602a      	str	r2, [r5, #0]
 8004430:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004434:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004438:	2301      	movs	r3, #1
 800443a:	e0a3      	b.n	8004584 <_printf_i+0x1f4>
 800443c:	6820      	ldr	r0, [r4, #0]
 800443e:	6829      	ldr	r1, [r5, #0]
 8004440:	0606      	lsls	r6, r0, #24
 8004442:	f101 0304 	add.w	r3, r1, #4
 8004446:	d50a      	bpl.n	800445e <_printf_i+0xce>
 8004448:	680e      	ldr	r6, [r1, #0]
 800444a:	602b      	str	r3, [r5, #0]
 800444c:	2e00      	cmp	r6, #0
 800444e:	da03      	bge.n	8004458 <_printf_i+0xc8>
 8004450:	232d      	movs	r3, #45	; 0x2d
 8004452:	4276      	negs	r6, r6
 8004454:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004458:	485e      	ldr	r0, [pc, #376]	; (80045d4 <_printf_i+0x244>)
 800445a:	230a      	movs	r3, #10
 800445c:	e019      	b.n	8004492 <_printf_i+0x102>
 800445e:	680e      	ldr	r6, [r1, #0]
 8004460:	602b      	str	r3, [r5, #0]
 8004462:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004466:	bf18      	it	ne
 8004468:	b236      	sxthne	r6, r6
 800446a:	e7ef      	b.n	800444c <_printf_i+0xbc>
 800446c:	682b      	ldr	r3, [r5, #0]
 800446e:	6820      	ldr	r0, [r4, #0]
 8004470:	1d19      	adds	r1, r3, #4
 8004472:	6029      	str	r1, [r5, #0]
 8004474:	0601      	lsls	r1, r0, #24
 8004476:	d501      	bpl.n	800447c <_printf_i+0xec>
 8004478:	681e      	ldr	r6, [r3, #0]
 800447a:	e002      	b.n	8004482 <_printf_i+0xf2>
 800447c:	0646      	lsls	r6, r0, #25
 800447e:	d5fb      	bpl.n	8004478 <_printf_i+0xe8>
 8004480:	881e      	ldrh	r6, [r3, #0]
 8004482:	4854      	ldr	r0, [pc, #336]	; (80045d4 <_printf_i+0x244>)
 8004484:	2f6f      	cmp	r7, #111	; 0x6f
 8004486:	bf0c      	ite	eq
 8004488:	2308      	moveq	r3, #8
 800448a:	230a      	movne	r3, #10
 800448c:	2100      	movs	r1, #0
 800448e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004492:	6865      	ldr	r5, [r4, #4]
 8004494:	60a5      	str	r5, [r4, #8]
 8004496:	2d00      	cmp	r5, #0
 8004498:	bfa2      	ittt	ge
 800449a:	6821      	ldrge	r1, [r4, #0]
 800449c:	f021 0104 	bicge.w	r1, r1, #4
 80044a0:	6021      	strge	r1, [r4, #0]
 80044a2:	b90e      	cbnz	r6, 80044a8 <_printf_i+0x118>
 80044a4:	2d00      	cmp	r5, #0
 80044a6:	d04d      	beq.n	8004544 <_printf_i+0x1b4>
 80044a8:	4615      	mov	r5, r2
 80044aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80044ae:	fb03 6711 	mls	r7, r3, r1, r6
 80044b2:	5dc7      	ldrb	r7, [r0, r7]
 80044b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80044b8:	4637      	mov	r7, r6
 80044ba:	42bb      	cmp	r3, r7
 80044bc:	460e      	mov	r6, r1
 80044be:	d9f4      	bls.n	80044aa <_printf_i+0x11a>
 80044c0:	2b08      	cmp	r3, #8
 80044c2:	d10b      	bne.n	80044dc <_printf_i+0x14c>
 80044c4:	6823      	ldr	r3, [r4, #0]
 80044c6:	07de      	lsls	r6, r3, #31
 80044c8:	d508      	bpl.n	80044dc <_printf_i+0x14c>
 80044ca:	6923      	ldr	r3, [r4, #16]
 80044cc:	6861      	ldr	r1, [r4, #4]
 80044ce:	4299      	cmp	r1, r3
 80044d0:	bfde      	ittt	le
 80044d2:	2330      	movle	r3, #48	; 0x30
 80044d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80044d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80044dc:	1b52      	subs	r2, r2, r5
 80044de:	6122      	str	r2, [r4, #16]
 80044e0:	f8cd a000 	str.w	sl, [sp]
 80044e4:	464b      	mov	r3, r9
 80044e6:	aa03      	add	r2, sp, #12
 80044e8:	4621      	mov	r1, r4
 80044ea:	4640      	mov	r0, r8
 80044ec:	f7ff fee2 	bl	80042b4 <_printf_common>
 80044f0:	3001      	adds	r0, #1
 80044f2:	d14c      	bne.n	800458e <_printf_i+0x1fe>
 80044f4:	f04f 30ff 	mov.w	r0, #4294967295
 80044f8:	b004      	add	sp, #16
 80044fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044fe:	4835      	ldr	r0, [pc, #212]	; (80045d4 <_printf_i+0x244>)
 8004500:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004504:	6829      	ldr	r1, [r5, #0]
 8004506:	6823      	ldr	r3, [r4, #0]
 8004508:	f851 6b04 	ldr.w	r6, [r1], #4
 800450c:	6029      	str	r1, [r5, #0]
 800450e:	061d      	lsls	r5, r3, #24
 8004510:	d514      	bpl.n	800453c <_printf_i+0x1ac>
 8004512:	07df      	lsls	r7, r3, #31
 8004514:	bf44      	itt	mi
 8004516:	f043 0320 	orrmi.w	r3, r3, #32
 800451a:	6023      	strmi	r3, [r4, #0]
 800451c:	b91e      	cbnz	r6, 8004526 <_printf_i+0x196>
 800451e:	6823      	ldr	r3, [r4, #0]
 8004520:	f023 0320 	bic.w	r3, r3, #32
 8004524:	6023      	str	r3, [r4, #0]
 8004526:	2310      	movs	r3, #16
 8004528:	e7b0      	b.n	800448c <_printf_i+0xfc>
 800452a:	6823      	ldr	r3, [r4, #0]
 800452c:	f043 0320 	orr.w	r3, r3, #32
 8004530:	6023      	str	r3, [r4, #0]
 8004532:	2378      	movs	r3, #120	; 0x78
 8004534:	4828      	ldr	r0, [pc, #160]	; (80045d8 <_printf_i+0x248>)
 8004536:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800453a:	e7e3      	b.n	8004504 <_printf_i+0x174>
 800453c:	0659      	lsls	r1, r3, #25
 800453e:	bf48      	it	mi
 8004540:	b2b6      	uxthmi	r6, r6
 8004542:	e7e6      	b.n	8004512 <_printf_i+0x182>
 8004544:	4615      	mov	r5, r2
 8004546:	e7bb      	b.n	80044c0 <_printf_i+0x130>
 8004548:	682b      	ldr	r3, [r5, #0]
 800454a:	6826      	ldr	r6, [r4, #0]
 800454c:	6961      	ldr	r1, [r4, #20]
 800454e:	1d18      	adds	r0, r3, #4
 8004550:	6028      	str	r0, [r5, #0]
 8004552:	0635      	lsls	r5, r6, #24
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	d501      	bpl.n	800455c <_printf_i+0x1cc>
 8004558:	6019      	str	r1, [r3, #0]
 800455a:	e002      	b.n	8004562 <_printf_i+0x1d2>
 800455c:	0670      	lsls	r0, r6, #25
 800455e:	d5fb      	bpl.n	8004558 <_printf_i+0x1c8>
 8004560:	8019      	strh	r1, [r3, #0]
 8004562:	2300      	movs	r3, #0
 8004564:	6123      	str	r3, [r4, #16]
 8004566:	4615      	mov	r5, r2
 8004568:	e7ba      	b.n	80044e0 <_printf_i+0x150>
 800456a:	682b      	ldr	r3, [r5, #0]
 800456c:	1d1a      	adds	r2, r3, #4
 800456e:	602a      	str	r2, [r5, #0]
 8004570:	681d      	ldr	r5, [r3, #0]
 8004572:	6862      	ldr	r2, [r4, #4]
 8004574:	2100      	movs	r1, #0
 8004576:	4628      	mov	r0, r5
 8004578:	f7fb fe3a 	bl	80001f0 <memchr>
 800457c:	b108      	cbz	r0, 8004582 <_printf_i+0x1f2>
 800457e:	1b40      	subs	r0, r0, r5
 8004580:	6060      	str	r0, [r4, #4]
 8004582:	6863      	ldr	r3, [r4, #4]
 8004584:	6123      	str	r3, [r4, #16]
 8004586:	2300      	movs	r3, #0
 8004588:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800458c:	e7a8      	b.n	80044e0 <_printf_i+0x150>
 800458e:	6923      	ldr	r3, [r4, #16]
 8004590:	462a      	mov	r2, r5
 8004592:	4649      	mov	r1, r9
 8004594:	4640      	mov	r0, r8
 8004596:	47d0      	blx	sl
 8004598:	3001      	adds	r0, #1
 800459a:	d0ab      	beq.n	80044f4 <_printf_i+0x164>
 800459c:	6823      	ldr	r3, [r4, #0]
 800459e:	079b      	lsls	r3, r3, #30
 80045a0:	d413      	bmi.n	80045ca <_printf_i+0x23a>
 80045a2:	68e0      	ldr	r0, [r4, #12]
 80045a4:	9b03      	ldr	r3, [sp, #12]
 80045a6:	4298      	cmp	r0, r3
 80045a8:	bfb8      	it	lt
 80045aa:	4618      	movlt	r0, r3
 80045ac:	e7a4      	b.n	80044f8 <_printf_i+0x168>
 80045ae:	2301      	movs	r3, #1
 80045b0:	4632      	mov	r2, r6
 80045b2:	4649      	mov	r1, r9
 80045b4:	4640      	mov	r0, r8
 80045b6:	47d0      	blx	sl
 80045b8:	3001      	adds	r0, #1
 80045ba:	d09b      	beq.n	80044f4 <_printf_i+0x164>
 80045bc:	3501      	adds	r5, #1
 80045be:	68e3      	ldr	r3, [r4, #12]
 80045c0:	9903      	ldr	r1, [sp, #12]
 80045c2:	1a5b      	subs	r3, r3, r1
 80045c4:	42ab      	cmp	r3, r5
 80045c6:	dcf2      	bgt.n	80045ae <_printf_i+0x21e>
 80045c8:	e7eb      	b.n	80045a2 <_printf_i+0x212>
 80045ca:	2500      	movs	r5, #0
 80045cc:	f104 0619 	add.w	r6, r4, #25
 80045d0:	e7f5      	b.n	80045be <_printf_i+0x22e>
 80045d2:	bf00      	nop
 80045d4:	080048dd 	.word	0x080048dd
 80045d8:	080048ee 	.word	0x080048ee

080045dc <memcpy>:
 80045dc:	440a      	add	r2, r1
 80045de:	4291      	cmp	r1, r2
 80045e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80045e4:	d100      	bne.n	80045e8 <memcpy+0xc>
 80045e6:	4770      	bx	lr
 80045e8:	b510      	push	{r4, lr}
 80045ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045f2:	4291      	cmp	r1, r2
 80045f4:	d1f9      	bne.n	80045ea <memcpy+0xe>
 80045f6:	bd10      	pop	{r4, pc}

080045f8 <memmove>:
 80045f8:	4288      	cmp	r0, r1
 80045fa:	b510      	push	{r4, lr}
 80045fc:	eb01 0402 	add.w	r4, r1, r2
 8004600:	d902      	bls.n	8004608 <memmove+0x10>
 8004602:	4284      	cmp	r4, r0
 8004604:	4623      	mov	r3, r4
 8004606:	d807      	bhi.n	8004618 <memmove+0x20>
 8004608:	1e43      	subs	r3, r0, #1
 800460a:	42a1      	cmp	r1, r4
 800460c:	d008      	beq.n	8004620 <memmove+0x28>
 800460e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004612:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004616:	e7f8      	b.n	800460a <memmove+0x12>
 8004618:	4402      	add	r2, r0
 800461a:	4601      	mov	r1, r0
 800461c:	428a      	cmp	r2, r1
 800461e:	d100      	bne.n	8004622 <memmove+0x2a>
 8004620:	bd10      	pop	{r4, pc}
 8004622:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004626:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800462a:	e7f7      	b.n	800461c <memmove+0x24>

0800462c <_free_r>:
 800462c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800462e:	2900      	cmp	r1, #0
 8004630:	d044      	beq.n	80046bc <_free_r+0x90>
 8004632:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004636:	9001      	str	r0, [sp, #4]
 8004638:	2b00      	cmp	r3, #0
 800463a:	f1a1 0404 	sub.w	r4, r1, #4
 800463e:	bfb8      	it	lt
 8004640:	18e4      	addlt	r4, r4, r3
 8004642:	f000 f913 	bl	800486c <__malloc_lock>
 8004646:	4a1e      	ldr	r2, [pc, #120]	; (80046c0 <_free_r+0x94>)
 8004648:	9801      	ldr	r0, [sp, #4]
 800464a:	6813      	ldr	r3, [r2, #0]
 800464c:	b933      	cbnz	r3, 800465c <_free_r+0x30>
 800464e:	6063      	str	r3, [r4, #4]
 8004650:	6014      	str	r4, [r2, #0]
 8004652:	b003      	add	sp, #12
 8004654:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004658:	f000 b90e 	b.w	8004878 <__malloc_unlock>
 800465c:	42a3      	cmp	r3, r4
 800465e:	d908      	bls.n	8004672 <_free_r+0x46>
 8004660:	6825      	ldr	r5, [r4, #0]
 8004662:	1961      	adds	r1, r4, r5
 8004664:	428b      	cmp	r3, r1
 8004666:	bf01      	itttt	eq
 8004668:	6819      	ldreq	r1, [r3, #0]
 800466a:	685b      	ldreq	r3, [r3, #4]
 800466c:	1949      	addeq	r1, r1, r5
 800466e:	6021      	streq	r1, [r4, #0]
 8004670:	e7ed      	b.n	800464e <_free_r+0x22>
 8004672:	461a      	mov	r2, r3
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	b10b      	cbz	r3, 800467c <_free_r+0x50>
 8004678:	42a3      	cmp	r3, r4
 800467a:	d9fa      	bls.n	8004672 <_free_r+0x46>
 800467c:	6811      	ldr	r1, [r2, #0]
 800467e:	1855      	adds	r5, r2, r1
 8004680:	42a5      	cmp	r5, r4
 8004682:	d10b      	bne.n	800469c <_free_r+0x70>
 8004684:	6824      	ldr	r4, [r4, #0]
 8004686:	4421      	add	r1, r4
 8004688:	1854      	adds	r4, r2, r1
 800468a:	42a3      	cmp	r3, r4
 800468c:	6011      	str	r1, [r2, #0]
 800468e:	d1e0      	bne.n	8004652 <_free_r+0x26>
 8004690:	681c      	ldr	r4, [r3, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	6053      	str	r3, [r2, #4]
 8004696:	4421      	add	r1, r4
 8004698:	6011      	str	r1, [r2, #0]
 800469a:	e7da      	b.n	8004652 <_free_r+0x26>
 800469c:	d902      	bls.n	80046a4 <_free_r+0x78>
 800469e:	230c      	movs	r3, #12
 80046a0:	6003      	str	r3, [r0, #0]
 80046a2:	e7d6      	b.n	8004652 <_free_r+0x26>
 80046a4:	6825      	ldr	r5, [r4, #0]
 80046a6:	1961      	adds	r1, r4, r5
 80046a8:	428b      	cmp	r3, r1
 80046aa:	bf04      	itt	eq
 80046ac:	6819      	ldreq	r1, [r3, #0]
 80046ae:	685b      	ldreq	r3, [r3, #4]
 80046b0:	6063      	str	r3, [r4, #4]
 80046b2:	bf04      	itt	eq
 80046b4:	1949      	addeq	r1, r1, r5
 80046b6:	6021      	streq	r1, [r4, #0]
 80046b8:	6054      	str	r4, [r2, #4]
 80046ba:	e7ca      	b.n	8004652 <_free_r+0x26>
 80046bc:	b003      	add	sp, #12
 80046be:	bd30      	pop	{r4, r5, pc}
 80046c0:	20000170 	.word	0x20000170

080046c4 <sbrk_aligned>:
 80046c4:	b570      	push	{r4, r5, r6, lr}
 80046c6:	4e0e      	ldr	r6, [pc, #56]	; (8004700 <sbrk_aligned+0x3c>)
 80046c8:	460c      	mov	r4, r1
 80046ca:	6831      	ldr	r1, [r6, #0]
 80046cc:	4605      	mov	r5, r0
 80046ce:	b911      	cbnz	r1, 80046d6 <sbrk_aligned+0x12>
 80046d0:	f000 f8bc 	bl	800484c <_sbrk_r>
 80046d4:	6030      	str	r0, [r6, #0]
 80046d6:	4621      	mov	r1, r4
 80046d8:	4628      	mov	r0, r5
 80046da:	f000 f8b7 	bl	800484c <_sbrk_r>
 80046de:	1c43      	adds	r3, r0, #1
 80046e0:	d00a      	beq.n	80046f8 <sbrk_aligned+0x34>
 80046e2:	1cc4      	adds	r4, r0, #3
 80046e4:	f024 0403 	bic.w	r4, r4, #3
 80046e8:	42a0      	cmp	r0, r4
 80046ea:	d007      	beq.n	80046fc <sbrk_aligned+0x38>
 80046ec:	1a21      	subs	r1, r4, r0
 80046ee:	4628      	mov	r0, r5
 80046f0:	f000 f8ac 	bl	800484c <_sbrk_r>
 80046f4:	3001      	adds	r0, #1
 80046f6:	d101      	bne.n	80046fc <sbrk_aligned+0x38>
 80046f8:	f04f 34ff 	mov.w	r4, #4294967295
 80046fc:	4620      	mov	r0, r4
 80046fe:	bd70      	pop	{r4, r5, r6, pc}
 8004700:	20000174 	.word	0x20000174

08004704 <_malloc_r>:
 8004704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004708:	1ccd      	adds	r5, r1, #3
 800470a:	f025 0503 	bic.w	r5, r5, #3
 800470e:	3508      	adds	r5, #8
 8004710:	2d0c      	cmp	r5, #12
 8004712:	bf38      	it	cc
 8004714:	250c      	movcc	r5, #12
 8004716:	2d00      	cmp	r5, #0
 8004718:	4607      	mov	r7, r0
 800471a:	db01      	blt.n	8004720 <_malloc_r+0x1c>
 800471c:	42a9      	cmp	r1, r5
 800471e:	d905      	bls.n	800472c <_malloc_r+0x28>
 8004720:	230c      	movs	r3, #12
 8004722:	603b      	str	r3, [r7, #0]
 8004724:	2600      	movs	r6, #0
 8004726:	4630      	mov	r0, r6
 8004728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800472c:	4e2e      	ldr	r6, [pc, #184]	; (80047e8 <_malloc_r+0xe4>)
 800472e:	f000 f89d 	bl	800486c <__malloc_lock>
 8004732:	6833      	ldr	r3, [r6, #0]
 8004734:	461c      	mov	r4, r3
 8004736:	bb34      	cbnz	r4, 8004786 <_malloc_r+0x82>
 8004738:	4629      	mov	r1, r5
 800473a:	4638      	mov	r0, r7
 800473c:	f7ff ffc2 	bl	80046c4 <sbrk_aligned>
 8004740:	1c43      	adds	r3, r0, #1
 8004742:	4604      	mov	r4, r0
 8004744:	d14d      	bne.n	80047e2 <_malloc_r+0xde>
 8004746:	6834      	ldr	r4, [r6, #0]
 8004748:	4626      	mov	r6, r4
 800474a:	2e00      	cmp	r6, #0
 800474c:	d140      	bne.n	80047d0 <_malloc_r+0xcc>
 800474e:	6823      	ldr	r3, [r4, #0]
 8004750:	4631      	mov	r1, r6
 8004752:	4638      	mov	r0, r7
 8004754:	eb04 0803 	add.w	r8, r4, r3
 8004758:	f000 f878 	bl	800484c <_sbrk_r>
 800475c:	4580      	cmp	r8, r0
 800475e:	d13a      	bne.n	80047d6 <_malloc_r+0xd2>
 8004760:	6821      	ldr	r1, [r4, #0]
 8004762:	3503      	adds	r5, #3
 8004764:	1a6d      	subs	r5, r5, r1
 8004766:	f025 0503 	bic.w	r5, r5, #3
 800476a:	3508      	adds	r5, #8
 800476c:	2d0c      	cmp	r5, #12
 800476e:	bf38      	it	cc
 8004770:	250c      	movcc	r5, #12
 8004772:	4629      	mov	r1, r5
 8004774:	4638      	mov	r0, r7
 8004776:	f7ff ffa5 	bl	80046c4 <sbrk_aligned>
 800477a:	3001      	adds	r0, #1
 800477c:	d02b      	beq.n	80047d6 <_malloc_r+0xd2>
 800477e:	6823      	ldr	r3, [r4, #0]
 8004780:	442b      	add	r3, r5
 8004782:	6023      	str	r3, [r4, #0]
 8004784:	e00e      	b.n	80047a4 <_malloc_r+0xa0>
 8004786:	6822      	ldr	r2, [r4, #0]
 8004788:	1b52      	subs	r2, r2, r5
 800478a:	d41e      	bmi.n	80047ca <_malloc_r+0xc6>
 800478c:	2a0b      	cmp	r2, #11
 800478e:	d916      	bls.n	80047be <_malloc_r+0xba>
 8004790:	1961      	adds	r1, r4, r5
 8004792:	42a3      	cmp	r3, r4
 8004794:	6025      	str	r5, [r4, #0]
 8004796:	bf18      	it	ne
 8004798:	6059      	strne	r1, [r3, #4]
 800479a:	6863      	ldr	r3, [r4, #4]
 800479c:	bf08      	it	eq
 800479e:	6031      	streq	r1, [r6, #0]
 80047a0:	5162      	str	r2, [r4, r5]
 80047a2:	604b      	str	r3, [r1, #4]
 80047a4:	4638      	mov	r0, r7
 80047a6:	f104 060b 	add.w	r6, r4, #11
 80047aa:	f000 f865 	bl	8004878 <__malloc_unlock>
 80047ae:	f026 0607 	bic.w	r6, r6, #7
 80047b2:	1d23      	adds	r3, r4, #4
 80047b4:	1af2      	subs	r2, r6, r3
 80047b6:	d0b6      	beq.n	8004726 <_malloc_r+0x22>
 80047b8:	1b9b      	subs	r3, r3, r6
 80047ba:	50a3      	str	r3, [r4, r2]
 80047bc:	e7b3      	b.n	8004726 <_malloc_r+0x22>
 80047be:	6862      	ldr	r2, [r4, #4]
 80047c0:	42a3      	cmp	r3, r4
 80047c2:	bf0c      	ite	eq
 80047c4:	6032      	streq	r2, [r6, #0]
 80047c6:	605a      	strne	r2, [r3, #4]
 80047c8:	e7ec      	b.n	80047a4 <_malloc_r+0xa0>
 80047ca:	4623      	mov	r3, r4
 80047cc:	6864      	ldr	r4, [r4, #4]
 80047ce:	e7b2      	b.n	8004736 <_malloc_r+0x32>
 80047d0:	4634      	mov	r4, r6
 80047d2:	6876      	ldr	r6, [r6, #4]
 80047d4:	e7b9      	b.n	800474a <_malloc_r+0x46>
 80047d6:	230c      	movs	r3, #12
 80047d8:	603b      	str	r3, [r7, #0]
 80047da:	4638      	mov	r0, r7
 80047dc:	f000 f84c 	bl	8004878 <__malloc_unlock>
 80047e0:	e7a1      	b.n	8004726 <_malloc_r+0x22>
 80047e2:	6025      	str	r5, [r4, #0]
 80047e4:	e7de      	b.n	80047a4 <_malloc_r+0xa0>
 80047e6:	bf00      	nop
 80047e8:	20000170 	.word	0x20000170

080047ec <_realloc_r>:
 80047ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047f0:	4680      	mov	r8, r0
 80047f2:	4614      	mov	r4, r2
 80047f4:	460e      	mov	r6, r1
 80047f6:	b921      	cbnz	r1, 8004802 <_realloc_r+0x16>
 80047f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80047fc:	4611      	mov	r1, r2
 80047fe:	f7ff bf81 	b.w	8004704 <_malloc_r>
 8004802:	b92a      	cbnz	r2, 8004810 <_realloc_r+0x24>
 8004804:	f7ff ff12 	bl	800462c <_free_r>
 8004808:	4625      	mov	r5, r4
 800480a:	4628      	mov	r0, r5
 800480c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004810:	f000 f838 	bl	8004884 <_malloc_usable_size_r>
 8004814:	4284      	cmp	r4, r0
 8004816:	4607      	mov	r7, r0
 8004818:	d802      	bhi.n	8004820 <_realloc_r+0x34>
 800481a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800481e:	d812      	bhi.n	8004846 <_realloc_r+0x5a>
 8004820:	4621      	mov	r1, r4
 8004822:	4640      	mov	r0, r8
 8004824:	f7ff ff6e 	bl	8004704 <_malloc_r>
 8004828:	4605      	mov	r5, r0
 800482a:	2800      	cmp	r0, #0
 800482c:	d0ed      	beq.n	800480a <_realloc_r+0x1e>
 800482e:	42bc      	cmp	r4, r7
 8004830:	4622      	mov	r2, r4
 8004832:	4631      	mov	r1, r6
 8004834:	bf28      	it	cs
 8004836:	463a      	movcs	r2, r7
 8004838:	f7ff fed0 	bl	80045dc <memcpy>
 800483c:	4631      	mov	r1, r6
 800483e:	4640      	mov	r0, r8
 8004840:	f7ff fef4 	bl	800462c <_free_r>
 8004844:	e7e1      	b.n	800480a <_realloc_r+0x1e>
 8004846:	4635      	mov	r5, r6
 8004848:	e7df      	b.n	800480a <_realloc_r+0x1e>
	...

0800484c <_sbrk_r>:
 800484c:	b538      	push	{r3, r4, r5, lr}
 800484e:	4d06      	ldr	r5, [pc, #24]	; (8004868 <_sbrk_r+0x1c>)
 8004850:	2300      	movs	r3, #0
 8004852:	4604      	mov	r4, r0
 8004854:	4608      	mov	r0, r1
 8004856:	602b      	str	r3, [r5, #0]
 8004858:	f7fc fecc 	bl	80015f4 <_sbrk>
 800485c:	1c43      	adds	r3, r0, #1
 800485e:	d102      	bne.n	8004866 <_sbrk_r+0x1a>
 8004860:	682b      	ldr	r3, [r5, #0]
 8004862:	b103      	cbz	r3, 8004866 <_sbrk_r+0x1a>
 8004864:	6023      	str	r3, [r4, #0]
 8004866:	bd38      	pop	{r3, r4, r5, pc}
 8004868:	20000178 	.word	0x20000178

0800486c <__malloc_lock>:
 800486c:	4801      	ldr	r0, [pc, #4]	; (8004874 <__malloc_lock+0x8>)
 800486e:	f000 b811 	b.w	8004894 <__retarget_lock_acquire_recursive>
 8004872:	bf00      	nop
 8004874:	2000017c 	.word	0x2000017c

08004878 <__malloc_unlock>:
 8004878:	4801      	ldr	r0, [pc, #4]	; (8004880 <__malloc_unlock+0x8>)
 800487a:	f000 b80c 	b.w	8004896 <__retarget_lock_release_recursive>
 800487e:	bf00      	nop
 8004880:	2000017c 	.word	0x2000017c

08004884 <_malloc_usable_size_r>:
 8004884:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004888:	1f18      	subs	r0, r3, #4
 800488a:	2b00      	cmp	r3, #0
 800488c:	bfbc      	itt	lt
 800488e:	580b      	ldrlt	r3, [r1, r0]
 8004890:	18c0      	addlt	r0, r0, r3
 8004892:	4770      	bx	lr

08004894 <__retarget_lock_acquire_recursive>:
 8004894:	4770      	bx	lr

08004896 <__retarget_lock_release_recursive>:
 8004896:	4770      	bx	lr

08004898 <_init>:
 8004898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800489a:	bf00      	nop
 800489c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800489e:	bc08      	pop	{r3}
 80048a0:	469e      	mov	lr, r3
 80048a2:	4770      	bx	lr

080048a4 <_fini>:
 80048a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048a6:	bf00      	nop
 80048a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048aa:	bc08      	pop	{r3}
 80048ac:	469e      	mov	lr, r3
 80048ae:	4770      	bx	lr

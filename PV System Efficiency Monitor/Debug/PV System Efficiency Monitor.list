
PV System Efficiency Monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba0c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000500  0800bbb0  0800bbb0  0001bbb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0b0  0800c0b0  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  0800c0b0  0800c0b0  0001c0b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c0b8  0800c0b8  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c0b8  0800c0b8  0001c0b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c0bc  0800c0bc  0001c0bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800c0c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  20000210  0800c2d0  00020210  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000520  0800c2d0  00020520  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012630  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002701  00000000  00000000  00032870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001090  00000000  00000000  00034f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f98  00000000  00000000  00036008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000199e8  00000000  00000000  00036fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013768  00000000  00000000  00050988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2824  00000000  00000000  000640f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00106914  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a50  00000000  00000000  00106964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000210 	.word	0x20000210
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bb94 	.word	0x0800bb94

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000214 	.word	0x20000214
 80001dc:	0800bb94 	.word	0x0800bb94

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000f9c:	b5b0      	push	{r4, r5, r7, lr}
 8000f9e:	b08a      	sub	sp, #40	; 0x28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
 8000fa8:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000faa:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000fae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8000fb2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000fb6:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000fb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fba:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000fbc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000fbe:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000fcc:	f107 0310 	add.w	r3, r7, #16
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f000 f80e 	bl	8000ff2 <Lcd_init>

	return lcd;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	461d      	mov	r5, r3
 8000fda:	f107 0410 	add.w	r4, r7, #16
 8000fde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fe0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fe2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fe6:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000fea:	68f8      	ldr	r0, [r7, #12]
 8000fec:	3728      	adds	r7, #40	; 0x28
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bdb0      	pop	{r4, r5, r7, pc}

08000ff2 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	7d9b      	ldrb	r3, [r3, #22]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d10c      	bne.n	800101c <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8001002:	2133      	movs	r1, #51	; 0x33
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f000 f863 	bl	80010d0 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 800100a:	2132      	movs	r1, #50	; 0x32
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f000 f85f 	bl	80010d0 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8001012:	2128      	movs	r1, #40	; 0x28
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f000 f85b 	bl	80010d0 <lcd_write_command>
 800101a:	e003      	b.n	8001024 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 800101c:	2138      	movs	r1, #56	; 0x38
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f000 f856 	bl	80010d0 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8001024:	2101      	movs	r1, #1
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f000 f852 	bl	80010d0 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 800102c:	210c      	movs	r1, #12
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f000 f84e 	bl	80010d0 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8001034:	2106      	movs	r1, #6
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f000 f84a 	bl	80010d0 <lcd_write_command>
}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8001044:	b590      	push	{r4, r7, lr}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]

	for(uint8_t i = 0; i < strlen(string); i++)
 800104e:	2300      	movs	r3, #0
 8001050:	73fb      	strb	r3, [r7, #15]
 8001052:	e00a      	b.n	800106a <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8001054:	7bfb      	ldrb	r3, [r7, #15]
 8001056:	683a      	ldr	r2, [r7, #0]
 8001058:	4413      	add	r3, r2
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	4619      	mov	r1, r3
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f000 f864 	bl	800112c <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8001064:	7bfb      	ldrb	r3, [r7, #15]
 8001066:	3301      	adds	r3, #1
 8001068:	73fb      	strb	r3, [r7, #15]
 800106a:	7bfc      	ldrb	r4, [r7, #15]
 800106c:	6838      	ldr	r0, [r7, #0]
 800106e:	f7ff f8b7 	bl	80001e0 <strlen>
 8001072:	4603      	mov	r3, r0
 8001074:	429c      	cmp	r4, r3
 8001076:	d3ed      	bcc.n	8001054 <Lcd_string+0x10>
	}
}
 8001078:	bf00      	nop
 800107a:	bf00      	nop
 800107c:	3714      	adds	r7, #20
 800107e:	46bd      	mov	sp, r7
 8001080:	bd90      	pop	{r4, r7, pc}
	...

08001084 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	460b      	mov	r3, r1
 800108e:	70fb      	strb	r3, [r7, #3]
 8001090:	4613      	mov	r3, r2
 8001092:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8001094:	78fb      	ldrb	r3, [r7, #3]
 8001096:	4a07      	ldr	r2, [pc, #28]	; (80010b4 <Lcd_cursor+0x30>)
 8001098:	5cd2      	ldrb	r2, [r2, r3]
 800109a:	78bb      	ldrb	r3, [r7, #2]
 800109c:	4413      	add	r3, r2
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	3b80      	subs	r3, #128	; 0x80
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	4619      	mov	r1, r3
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f000 f812 	bl	80010d0 <lcd_write_command>
	#endif
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	0800bc88 	.word	0x0800bc88

080010b8 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 80010c0:	2101      	movs	r1, #1
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f000 f804 	bl	80010d0 <lcd_write_command>
}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	460b      	mov	r3, r1
 80010da:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6898      	ldr	r0, [r3, #8]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	899b      	ldrh	r3, [r3, #12]
 80010e4:	2200      	movs	r2, #0
 80010e6:	4619      	mov	r1, r3
 80010e8:	f003 ff40 	bl	8004f6c <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	7d9b      	ldrb	r3, [r3, #22]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d111      	bne.n	8001118 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80010f4:	78fb      	ldrb	r3, [r7, #3]
 80010f6:	091b      	lsrs	r3, r3, #4
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	2204      	movs	r2, #4
 80010fc:	4619      	mov	r1, r3
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f000 f842 	bl	8001188 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8001104:	78fb      	ldrb	r3, [r7, #3]
 8001106:	f003 030f 	and.w	r3, r3, #15
 800110a:	b2db      	uxtb	r3, r3
 800110c:	2204      	movs	r2, #4
 800110e:	4619      	mov	r1, r3
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f000 f839 	bl	8001188 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8001116:	e005      	b.n	8001124 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8001118:	78fb      	ldrb	r3, [r7, #3]
 800111a:	2208      	movs	r2, #8
 800111c:	4619      	mov	r1, r3
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f000 f832 	bl	8001188 <lcd_write>
}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <lcd_write_data>:
/**
 * Write a byte to the data register
 */

void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	460b      	mov	r3, r1
 8001136:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6898      	ldr	r0, [r3, #8]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	899b      	ldrh	r3, [r3, #12]
 8001140:	2201      	movs	r2, #1
 8001142:	4619      	mov	r1, r3
 8001144:	f003 ff12 	bl	8004f6c <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	7d9b      	ldrb	r3, [r3, #22]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d111      	bne.n	8001174 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8001150:	78fb      	ldrb	r3, [r7, #3]
 8001152:	091b      	lsrs	r3, r3, #4
 8001154:	b2db      	uxtb	r3, r3
 8001156:	2204      	movs	r2, #4
 8001158:	4619      	mov	r1, r3
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f000 f814 	bl	8001188 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8001160:	78fb      	ldrb	r3, [r7, #3]
 8001162:	f003 030f 	and.w	r3, r3, #15
 8001166:	b2db      	uxtb	r3, r3
 8001168:	2204      	movs	r2, #4
 800116a:	4619      	mov	r1, r3
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f000 f80b 	bl	8001188 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8001172:	e005      	b.n	8001180 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8001174:	78fb      	ldrb	r3, [r7, #3]
 8001176:	2208      	movs	r2, #8
 8001178:	4619      	mov	r1, r3
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f000 f804 	bl	8001188 <lcd_write>
}
 8001180:	bf00      	nop
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <lcd_write>:
 */

uint8_t set_enable = 0;
uint32_t previous_time = 0;
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	70fb      	strb	r3, [r7, #3]
 8001194:	4613      	mov	r3, r2
 8001196:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8001198:	2300      	movs	r3, #0
 800119a:	73fb      	strb	r3, [r7, #15]
 800119c:	e019      	b.n	80011d2 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	4413      	add	r3, r2
 80011a8:	6818      	ldr	r0, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685a      	ldr	r2, [r3, #4]
 80011ae:	7bfb      	ldrb	r3, [r7, #15]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	4413      	add	r3, r2
 80011b4:	8819      	ldrh	r1, [r3, #0]
 80011b6:	78fa      	ldrb	r2, [r7, #3]
 80011b8:	7bfb      	ldrb	r3, [r7, #15]
 80011ba:	fa42 f303 	asr.w	r3, r2, r3
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	461a      	mov	r2, r3
 80011c8:	f003 fed0 	bl	8004f6c <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80011cc:	7bfb      	ldrb	r3, [r7, #15]
 80011ce:	3301      	adds	r3, #1
 80011d0:	73fb      	strb	r3, [r7, #15]
 80011d2:	7bfa      	ldrb	r2, [r7, #15]
 80011d4:	78bb      	ldrb	r3, [r7, #2]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d3e1      	bcc.n	800119e <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6918      	ldr	r0, [r3, #16]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	8a9b      	ldrh	r3, [r3, #20]
 80011e2:	2201      	movs	r2, #1
 80011e4:	4619      	mov	r1, r3
 80011e6:	f003 fec1 	bl	8004f6c <HAL_GPIO_WritePin>
	DELAY(1);
 80011ea:	2001      	movs	r0, #1
 80011ec:	f002 ff68 	bl	80040c0 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6918      	ldr	r0, [r3, #16]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	8a9b      	ldrh	r3, [r3, #20]
 80011f8:	2200      	movs	r2, #0
 80011fa:	4619      	mov	r1, r3
 80011fc:	f003 feb6 	bl	8004f6c <HAL_GPIO_WritePin>
//        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); // E = 0
//        set_enable = 1;
//        previous_time = HAL_GetTick() ;
//    }

}
 8001200:	bf00      	nop
 8001202:	3710      	adds	r7, #16
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <HAL_UART_RxCpltCallback>:
uint16_t get_calibrated_power(uint16_t lux_measured, uint16_t panel_temper, uint16_t p_measured) ;
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]

	g_system_config[g_byte_count] = char_rcvd[0] ;
 8001210:	4b14      	ldr	r3, [pc, #80]	; (8001264 <HAL_UART_RxCpltCallback+0x5c>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	461a      	mov	r2, r3
 8001216:	4b14      	ldr	r3, [pc, #80]	; (8001268 <HAL_UART_RxCpltCallback+0x60>)
 8001218:	7819      	ldrb	r1, [r3, #0]
 800121a:	4b14      	ldr	r3, [pc, #80]	; (800126c <HAL_UART_RxCpltCallback+0x64>)
 800121c:	5499      	strb	r1, [r3, r2]
	g_byte_count++ ;
 800121e:	4b11      	ldr	r3, [pc, #68]	; (8001264 <HAL_UART_RxCpltCallback+0x5c>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	3301      	adds	r3, #1
 8001224:	b2da      	uxtb	r2, r3
 8001226:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <HAL_UART_RxCpltCallback+0x5c>)
 8001228:	701a      	strb	r2, [r3, #0]

	if(char_rcvd[0] == '\n'){
 800122a:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <HAL_UART_RxCpltCallback+0x60>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	2b0a      	cmp	r3, #10
 8001230:	d10f      	bne.n	8001252 <HAL_UART_RxCpltCallback+0x4a>
		if(g_byte_count == 7){
 8001232:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <HAL_UART_RxCpltCallback+0x5c>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b07      	cmp	r3, #7
 8001238:	d103      	bne.n	8001242 <HAL_UART_RxCpltCallback+0x3a>
			g_config_command_rcvd = 1;
 800123a:	4b0d      	ldr	r3, [pc, #52]	; (8001270 <HAL_UART_RxCpltCallback+0x68>)
 800123c:	2201      	movs	r2, #1
 800123e:	701a      	strb	r2, [r3, #0]
 8001240:	e004      	b.n	800124c <HAL_UART_RxCpltCallback+0x44>
			// check for SP or EN command recvd
		}
		else{
			// remove for next DEMO
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)"Invalid command sent\n", 21);
 8001242:	2215      	movs	r2, #21
 8001244:	490b      	ldr	r1, [pc, #44]	; (8001274 <HAL_UART_RxCpltCallback+0x6c>)
 8001246:	480c      	ldr	r0, [pc, #48]	; (8001278 <HAL_UART_RxCpltCallback+0x70>)
 8001248:	f005 fef1 	bl	800702e <HAL_UART_Transmit_IT>
			// DO NOTHING: NO STATE UPDATE IN THE CASE OF COMMAND NOT IN THE APPROPRIATE ORDER
		}

		g_byte_count =0 ;
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <HAL_UART_RxCpltCallback+0x5c>)
 800124e:	2200      	movs	r2, #0
 8001250:	701a      	strb	r2, [r3, #0]
	}

	//re-prime receiver
	HAL_UART_Receive_IT(&huart2, (uint8_t*)char_rcvd, 1) ;
 8001252:	2201      	movs	r2, #1
 8001254:	4904      	ldr	r1, [pc, #16]	; (8001268 <HAL_UART_RxCpltCallback+0x60>)
 8001256:	4808      	ldr	r0, [pc, #32]	; (8001278 <HAL_UART_RxCpltCallback+0x70>)
 8001258:	f005 ff2e 	bl	80070b8 <HAL_UART_Receive_IT>

}
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000439 	.word	0x20000439
 8001268:	20000010 	.word	0x20000010
 800126c:	20000428 	.word	0x20000428
 8001270:	2000043a 	.word	0x2000043a
 8001274:	0800bbb0 	.word	0x0800bbb0
 8001278:	20000324 	.word	0x20000324
 800127c:	00000000 	.word	0x00000000

08001280 <get_adc_value_and_celsius_temperature>:
/**
 * function starts the adc, waits for conversion
 * Then converts value to degrees
 */

uint16_t get_adc_value_and_celsius_temperature(){
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0

	//select adc channel 0
	ADC_Select_CH0() ;
 8001284:	f000 fc0a 	bl	8001a9c <ADC_Select_CH0>
	HAL_ADC_Start(&hadc1) ;
 8001288:	4825      	ldr	r0, [pc, #148]	; (8001320 <get_adc_value_and_celsius_temperature+0xa0>)
 800128a:	f002 ff81 	bl	8004190 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800128e:	f04f 31ff 	mov.w	r1, #4294967295
 8001292:	4823      	ldr	r0, [pc, #140]	; (8001320 <get_adc_value_and_celsius_temperature+0xa0>)
 8001294:	f003 f863 	bl	800435e <HAL_ADC_PollForConversion>
	g_raw  = HAL_ADC_GetValue(&hadc1) ;
 8001298:	4821      	ldr	r0, [pc, #132]	; (8001320 <get_adc_value_and_celsius_temperature+0xa0>)
 800129a:	f003 f8eb 	bl	8004474 <HAL_ADC_GetValue>
 800129e:	4603      	mov	r3, r0
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	4b20      	ldr	r3, [pc, #128]	; (8001324 <get_adc_value_and_celsius_temperature+0xa4>)
 80012a4:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1) ;  //stop adc
 80012a6:	481e      	ldr	r0, [pc, #120]	; (8001320 <get_adc_value_and_celsius_temperature+0xa0>)
 80012a8:	f003 f826 	bl	80042f8 <HAL_ADC_Stop>

	g_vin = g_raw*(3.3/4095.0) ; // input voltage
 80012ac:	4b1d      	ldr	r3, [pc, #116]	; (8001324 <get_adc_value_and_celsius_temperature+0xa4>)
 80012ae:	881b      	ldrh	r3, [r3, #0]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff f93f 	bl	8000534 <__aeabi_i2d>
 80012b6:	a316      	add	r3, pc, #88	; (adr r3, 8001310 <get_adc_value_and_celsius_temperature+0x90>)
 80012b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012bc:	f7ff f9a4 	bl	8000608 <__aeabi_dmul>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4918      	ldr	r1, [pc, #96]	; (8001328 <get_adc_value_and_celsius_temperature+0xa8>)
 80012c6:	e9c1 2300 	strd	r2, r3, [r1]
	g_temp = g_vin*100 - 273.15 ; // cast to 16 bit uint
 80012ca:	4b17      	ldr	r3, [pc, #92]	; (8001328 <get_adc_value_and_celsius_temperature+0xa8>)
 80012cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012d0:	f04f 0200 	mov.w	r2, #0
 80012d4:	4b15      	ldr	r3, [pc, #84]	; (800132c <get_adc_value_and_celsius_temperature+0xac>)
 80012d6:	f7ff f997 	bl	8000608 <__aeabi_dmul>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	4610      	mov	r0, r2
 80012e0:	4619      	mov	r1, r3
 80012e2:	a30d      	add	r3, pc, #52	; (adr r3, 8001318 <get_adc_value_and_celsius_temperature+0x98>)
 80012e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e8:	f7fe ffd6 	bl	8000298 <__aeabi_dsub>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	490f      	ldr	r1, [pc, #60]	; (8001330 <get_adc_value_and_celsius_temperature+0xb0>)
 80012f2:	e9c1 2300 	strd	r2, r3, [r1]

	return g_temp ;
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <get_adc_value_and_celsius_temperature+0xb0>)
 80012f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fc:	4610      	mov	r0, r2
 80012fe:	4619      	mov	r1, r3
 8001300:	f7ff fc5a 	bl	8000bb8 <__aeabi_d2uiz>
 8001304:	4603      	mov	r3, r0
 8001306:	b29b      	uxth	r3, r3
}
 8001308:	4618      	mov	r0, r3
 800130a:	bd80      	pop	{r7, pc}
 800130c:	f3af 8000 	nop.w
 8001310:	e734d9b4 	.word	0xe734d9b4
 8001314:	3f4a680c 	.word	0x3f4a680c
 8001318:	66666666 	.word	0x66666666
 800131c:	40711266 	.word	0x40711266
 8001320:	2000022c 	.word	0x2000022c
 8001324:	20000368 	.word	0x20000368
 8001328:	20000378 	.word	0x20000378
 800132c:	40590000 	.word	0x40590000
 8001330:	20000370 	.word	0x20000370

08001334 <store_temp_in_string>:

void store_temp_in_string(uint16_t temperature, char temp[], int len){
 8001334:	b480      	push	{r7}
 8001336:	b087      	sub	sp, #28
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
 8001340:	81fb      	strh	r3, [r7, #14]

	for(int i= 0 ; i < len ; i++){
 8001342:	2300      	movs	r3, #0
 8001344:	617b      	str	r3, [r7, #20]
 8001346:	e04e      	b.n	80013e6 <store_temp_in_string+0xb2>
		switch(i){
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	2b02      	cmp	r3, #2
 800134c:	d02f      	beq.n	80013ae <store_temp_in_string+0x7a>
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	2b02      	cmp	r3, #2
 8001352:	dc44      	bgt.n	80013de <store_temp_in_string+0xaa>
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <store_temp_in_string+0x2e>
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d00c      	beq.n	800137a <store_temp_in_string+0x46>
			case 2:
				temp[2] = (temperature - ((temperature/10)*10) ) + 48 ;

				break;
			default:
				break;
 8001360:	e03d      	b.n	80013de <store_temp_in_string+0xaa>
				temp[0]  = (temperature/100) + 48 ;
 8001362:	89fb      	ldrh	r3, [r7, #14]
 8001364:	4a25      	ldr	r2, [pc, #148]	; (80013fc <store_temp_in_string+0xc8>)
 8001366:	fba2 2303 	umull	r2, r3, r2, r3
 800136a:	095b      	lsrs	r3, r3, #5
 800136c:	b29b      	uxth	r3, r3
 800136e:	b2db      	uxtb	r3, r3
 8001370:	3330      	adds	r3, #48	; 0x30
 8001372:	b2da      	uxtb	r2, r3
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	701a      	strb	r2, [r3, #0]
				break;
 8001378:	e032      	b.n	80013e0 <store_temp_in_string+0xac>
				temp[1] = (temperature - (temperature/100)*100 )/10 + 48 ;
 800137a:	89fa      	ldrh	r2, [r7, #14]
 800137c:	89fb      	ldrh	r3, [r7, #14]
 800137e:	491f      	ldr	r1, [pc, #124]	; (80013fc <store_temp_in_string+0xc8>)
 8001380:	fba1 1303 	umull	r1, r3, r1, r3
 8001384:	095b      	lsrs	r3, r3, #5
 8001386:	b29b      	uxth	r3, r3
 8001388:	4619      	mov	r1, r3
 800138a:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800138e:	fb01 f303 	mul.w	r3, r1, r3
 8001392:	4413      	add	r3, r2
 8001394:	4a1a      	ldr	r2, [pc, #104]	; (8001400 <store_temp_in_string+0xcc>)
 8001396:	fb82 1203 	smull	r1, r2, r2, r3
 800139a:	1092      	asrs	r2, r2, #2
 800139c:	17db      	asrs	r3, r3, #31
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	3301      	adds	r3, #1
 80013a6:	3230      	adds	r2, #48	; 0x30
 80013a8:	b2d2      	uxtb	r2, r2
 80013aa:	701a      	strb	r2, [r3, #0]
				break;
 80013ac:	e018      	b.n	80013e0 <store_temp_in_string+0xac>
				temp[2] = (temperature - ((temperature/10)*10) ) + 48 ;
 80013ae:	89fb      	ldrh	r3, [r7, #14]
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	89fb      	ldrh	r3, [r7, #14]
 80013b4:	4913      	ldr	r1, [pc, #76]	; (8001404 <store_temp_in_string+0xd0>)
 80013b6:	fba1 1303 	umull	r1, r3, r1, r3
 80013ba:	08db      	lsrs	r3, r3, #3
 80013bc:	b29b      	uxth	r3, r3
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	4619      	mov	r1, r3
 80013c2:	0149      	lsls	r1, r1, #5
 80013c4:	1ac9      	subs	r1, r1, r3
 80013c6:	0089      	lsls	r1, r1, #2
 80013c8:	1acb      	subs	r3, r1, r3
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	4413      	add	r3, r2
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	3302      	adds	r3, #2
 80013d6:	3230      	adds	r2, #48	; 0x30
 80013d8:	b2d2      	uxtb	r2, r2
 80013da:	701a      	strb	r2, [r3, #0]
				break;
 80013dc:	e000      	b.n	80013e0 <store_temp_in_string+0xac>
				break;
 80013de:	bf00      	nop
	for(int i= 0 ; i < len ; i++){
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	3301      	adds	r3, #1
 80013e4:	617b      	str	r3, [r7, #20]
 80013e6:	697a      	ldr	r2, [r7, #20]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	dbac      	blt.n	8001348 <store_temp_in_string+0x14>

		}
	}
}
 80013ee:	bf00      	nop
 80013f0:	bf00      	nop
 80013f2:	371c      	adds	r7, #28
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	51eb851f 	.word	0x51eb851f
 8001400:	66666667 	.word	0x66666667
 8001404:	cccccccd 	.word	0xcccccccd

08001408 <system_state_update>:
/**
 * This function will update the system state based on the received UART command
 * or top button press
 * The system is not to be updates when performing a RTC update
 */
void system_state_update(){
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0

	//RTC menu enter/exit
	g_clock_menu_set_and_parameter_update();
 800140c:	f001 fe06 	bl	800301c <g_clock_menu_set_and_parameter_update>

	if(g_update_RTC == 0){
 8001410:	4b26      	ldr	r3, [pc, #152]	; (80014ac <system_state_update+0xa4>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d147      	bne.n	80014a8 <system_state_update+0xa0>
		//CHECK FOR TYPE OF MEASUREMENT command rcvd via UART
		if( g_config_command_rcvd == 1){
 8001418:	4b25      	ldr	r3, [pc, #148]	; (80014b0 <system_state_update+0xa8>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d13d      	bne.n	800149c <system_state_update+0x94>
			g_config_command_rcvd = 0;
 8001420:	4b23      	ldr	r3, [pc, #140]	; (80014b0 <system_state_update+0xa8>)
 8001422:	2200      	movs	r2, #0
 8001424:	701a      	strb	r2, [r3, #0]


			if( g_system_config[2]=='E' && g_system_config[3] == 'N'){
 8001426:	4b23      	ldr	r3, [pc, #140]	; (80014b4 <system_state_update+0xac>)
 8001428:	789b      	ldrb	r3, [r3, #2]
 800142a:	2b45      	cmp	r3, #69	; 0x45
 800142c:	d10d      	bne.n	800144a <system_state_update+0x42>
 800142e:	4b21      	ldr	r3, [pc, #132]	; (80014b4 <system_state_update+0xac>)
 8001430:	78db      	ldrb	r3, [r3, #3]
 8001432:	2b4e      	cmp	r3, #78	; 0x4e
 8001434:	d109      	bne.n	800144a <system_state_update+0x42>
				// EN measure comand
				g_EN_config_command_rcvd =1 ;
 8001436:	4b20      	ldr	r3, [pc, #128]	; (80014b8 <system_state_update+0xb0>)
 8001438:	2201      	movs	r2, #1
 800143a:	701a      	strb	r2, [r3, #0]
				//stop SP measure
				g_SP_config_command_rcvd =0 ;
 800143c:	4b1f      	ldr	r3, [pc, #124]	; (80014bc <system_state_update+0xb4>)
 800143e:	2200      	movs	r2, #0
 8001440:	701a      	strb	r2, [r3, #0]
				//stop CA (calibration)
				g_SP_config_command_rcvd = 0;
 8001442:	4b1e      	ldr	r3, [pc, #120]	; (80014bc <system_state_update+0xb4>)
 8001444:	2200      	movs	r2, #0
 8001446:	701a      	strb	r2, [r3, #0]
 8001448:	e028      	b.n	800149c <system_state_update+0x94>

			}

			else if(g_system_config[2]=='S' && g_system_config[3] == 'P'){
 800144a:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <system_state_update+0xac>)
 800144c:	789b      	ldrb	r3, [r3, #2]
 800144e:	2b53      	cmp	r3, #83	; 0x53
 8001450:	d10d      	bne.n	800146e <system_state_update+0x66>
 8001452:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <system_state_update+0xac>)
 8001454:	78db      	ldrb	r3, [r3, #3]
 8001456:	2b50      	cmp	r3, #80	; 0x50
 8001458:	d109      	bne.n	800146e <system_state_update+0x66>
				// SP command
				g_SP_config_command_rcvd =1 ;
 800145a:	4b18      	ldr	r3, [pc, #96]	; (80014bc <system_state_update+0xb4>)
 800145c:	2201      	movs	r2, #1
 800145e:	701a      	strb	r2, [r3, #0]
				//stop EN command
				g_EN_config_command_rcvd =0;
 8001460:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <system_state_update+0xb0>)
 8001462:	2200      	movs	r2, #0
 8001464:	701a      	strb	r2, [r3, #0]
				//stop CA (calibration)command
				g_CA_config_command_rcvd = 0;
 8001466:	4b16      	ldr	r3, [pc, #88]	; (80014c0 <system_state_update+0xb8>)
 8001468:	2200      	movs	r2, #0
 800146a:	701a      	strb	r2, [r3, #0]
 800146c:	e016      	b.n	800149c <system_state_update+0x94>

			}

			//extend to CA command recieved
			else if(g_system_config[2]=='C' && g_system_config[3] == 'A'){
 800146e:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <system_state_update+0xac>)
 8001470:	789b      	ldrb	r3, [r3, #2]
 8001472:	2b43      	cmp	r3, #67	; 0x43
 8001474:	d10d      	bne.n	8001492 <system_state_update+0x8a>
 8001476:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <system_state_update+0xac>)
 8001478:	78db      	ldrb	r3, [r3, #3]
 800147a:	2b41      	cmp	r3, #65	; 0x41
 800147c:	d109      	bne.n	8001492 <system_state_update+0x8a>

				g_CA_config_command_rcvd = 1;
 800147e:	4b10      	ldr	r3, [pc, #64]	; (80014c0 <system_state_update+0xb8>)
 8001480:	2201      	movs	r2, #1
 8001482:	701a      	strb	r2, [r3, #0]
				// SP command
				g_SP_config_command_rcvd =0 ;
 8001484:	4b0d      	ldr	r3, [pc, #52]	; (80014bc <system_state_update+0xb4>)
 8001486:	2200      	movs	r2, #0
 8001488:	701a      	strb	r2, [r3, #0]
				//stop EN command
				g_EN_config_command_rcvd =0;
 800148a:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <system_state_update+0xb0>)
 800148c:	2200      	movs	r2, #0
 800148e:	701a      	strb	r2, [r3, #0]
 8001490:	e004      	b.n	800149c <system_state_update+0x94>

			}

			else{
				HAL_UART_Transmit_IT(&huart2, (uint8_t*)"Invalid Command\n", 16);
 8001492:	2210      	movs	r2, #16
 8001494:	490b      	ldr	r1, [pc, #44]	; (80014c4 <system_state_update+0xbc>)
 8001496:	480c      	ldr	r0, [pc, #48]	; (80014c8 <system_state_update+0xc0>)
 8001498:	f005 fdc9 	bl	800702e <HAL_UART_Transmit_IT>
			}
		}

		//perform en measurements
		en_measurement_update() ;
 800149c:	f000 f8c2 	bl	8001624 <en_measurement_update>
		//perform sp measurement
		sp_measurement_update() ;
 80014a0:	f000 f966 	bl	8001770 <sp_measurement_update>
		//perform calibration measurements
		ca_measurements_update();
 80014a4:	f000 f812 	bl	80014cc <ca_measurements_update>
	}
	else{
		//dont update any states while in the RTC menu
	}

}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	200004b8 	.word	0x200004b8
 80014b0:	2000043a 	.word	0x2000043a
 80014b4:	20000428 	.word	0x20000428
 80014b8:	20000445 	.word	0x20000445
 80014bc:	20000449 	.word	0x20000449
 80014c0:	2000044a 	.word	0x2000044a
 80014c4:	0800bbc8 	.word	0x0800bbc8
 80014c8:	20000324 	.word	0x20000324

080014cc <ca_measurements_update>:
 * This function begins the calibrations sequence
 * It is to start the measurement for EN and SP where the values for lux is to be stored for later measurements
 *
 */

void ca_measurements_update(){
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0

	// CA - update via push button - only starts the calibration - its to end by itself
	if(g_right_button_pressed  == 1 && g_CA_config_command_rcvd == 0  && g_EN_config_command_rcvd == 0 && g_SP_config_command_rcvd ==0 && (g_SP_measure == 0 || g_SP_measure ==2) && (g_EN_measure == 0 || g_EN_measure ==2)){
 80014d0:	4b4c      	ldr	r3, [pc, #304]	; (8001604 <ca_measurements_update+0x138>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d131      	bne.n	800153c <ca_measurements_update+0x70>
 80014d8:	4b4b      	ldr	r3, [pc, #300]	; (8001608 <ca_measurements_update+0x13c>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d12d      	bne.n	800153c <ca_measurements_update+0x70>
 80014e0:	4b4a      	ldr	r3, [pc, #296]	; (800160c <ca_measurements_update+0x140>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d129      	bne.n	800153c <ca_measurements_update+0x70>
 80014e8:	4b49      	ldr	r3, [pc, #292]	; (8001610 <ca_measurements_update+0x144>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d125      	bne.n	800153c <ca_measurements_update+0x70>
 80014f0:	4b48      	ldr	r3, [pc, #288]	; (8001614 <ca_measurements_update+0x148>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d003      	beq.n	8001500 <ca_measurements_update+0x34>
 80014f8:	4b46      	ldr	r3, [pc, #280]	; (8001614 <ca_measurements_update+0x148>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d11d      	bne.n	800153c <ca_measurements_update+0x70>
 8001500:	4b45      	ldr	r3, [pc, #276]	; (8001618 <ca_measurements_update+0x14c>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d003      	beq.n	8001510 <ca_measurements_update+0x44>
 8001508:	4b43      	ldr	r3, [pc, #268]	; (8001618 <ca_measurements_update+0x14c>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b02      	cmp	r3, #2
 800150e:	d115      	bne.n	800153c <ca_measurements_update+0x70>
		g_right_button_pressed = 0;
 8001510:	4b3c      	ldr	r3, [pc, #240]	; (8001604 <ca_measurements_update+0x138>)
 8001512:	2200      	movs	r2, #0
 8001514:	701a      	strb	r2, [r3, #0]

		g_CA_measure++  ;
 8001516:	4b41      	ldr	r3, [pc, #260]	; (800161c <ca_measurements_update+0x150>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	3301      	adds	r3, #1
 800151c:	b2da      	uxtb	r2, r3
 800151e:	4b3f      	ldr	r3, [pc, #252]	; (800161c <ca_measurements_update+0x150>)
 8001520:	701a      	strb	r2, [r3, #0]

		if(g_CA_measure != 1 ){
 8001522:	4b3e      	ldr	r3, [pc, #248]	; (800161c <ca_measurements_update+0x150>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d003      	beq.n	8001532 <ca_measurements_update+0x66>
//			cal_en_or_sp_measurement = 0; //set flag to 0 on every button press
			g_CA_measure = 1;
 800152a:	4b3c      	ldr	r3, [pc, #240]	; (800161c <ca_measurements_update+0x150>)
 800152c:	2201      	movs	r2, #1
 800152e:	701a      	strb	r2, [r3, #0]
		if(g_CA_measure != 1 ){
 8001530:	e062      	b.n	80015f8 <ca_measurements_update+0x12c>
		}
		else{
			g_CA_measure = g_CA_measure ;
 8001532:	4b3a      	ldr	r3, [pc, #232]	; (800161c <ca_measurements_update+0x150>)
 8001534:	781a      	ldrb	r2, [r3, #0]
 8001536:	4b39      	ldr	r3, [pc, #228]	; (800161c <ca_measurements_update+0x150>)
 8001538:	701a      	strb	r2, [r3, #0]
		if(g_CA_measure != 1 ){
 800153a:	e05d      	b.n	80015f8 <ca_measurements_update+0x12c>
		}
	}

	//CA update via UART
	else if(g_right_button_pressed ==0  && g_CA_config_command_rcvd == 1 && g_EN_config_command_rcvd == 0 && g_SP_config_command_rcvd ==0 && (g_SP_measure == 0 || g_SP_measure ==2) && (g_EN_measure == 0 || g_EN_measure ==2)){
 800153c:	4b31      	ldr	r3, [pc, #196]	; (8001604 <ca_measurements_update+0x138>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d159      	bne.n	80015f8 <ca_measurements_update+0x12c>
 8001544:	4b30      	ldr	r3, [pc, #192]	; (8001608 <ca_measurements_update+0x13c>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d155      	bne.n	80015f8 <ca_measurements_update+0x12c>
 800154c:	4b2f      	ldr	r3, [pc, #188]	; (800160c <ca_measurements_update+0x140>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d151      	bne.n	80015f8 <ca_measurements_update+0x12c>
 8001554:	4b2e      	ldr	r3, [pc, #184]	; (8001610 <ca_measurements_update+0x144>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d14d      	bne.n	80015f8 <ca_measurements_update+0x12c>
 800155c:	4b2d      	ldr	r3, [pc, #180]	; (8001614 <ca_measurements_update+0x148>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d003      	beq.n	800156c <ca_measurements_update+0xa0>
 8001564:	4b2b      	ldr	r3, [pc, #172]	; (8001614 <ca_measurements_update+0x148>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b02      	cmp	r3, #2
 800156a:	d145      	bne.n	80015f8 <ca_measurements_update+0x12c>
 800156c:	4b2a      	ldr	r3, [pc, #168]	; (8001618 <ca_measurements_update+0x14c>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d003      	beq.n	800157c <ca_measurements_update+0xb0>
 8001574:	4b28      	ldr	r3, [pc, #160]	; (8001618 <ca_measurements_update+0x14c>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b02      	cmp	r3, #2
 800157a:	d13d      	bne.n	80015f8 <ca_measurements_update+0x12c>
		g_CA_config_command_rcvd = 0;
 800157c:	4b22      	ldr	r3, [pc, #136]	; (8001608 <ca_measurements_update+0x13c>)
 800157e:	2200      	movs	r2, #0
 8001580:	701a      	strb	r2, [r3, #0]

		//check that the correct UART message recvd
		if(g_system_config[0]== '&' && g_system_config[1 ]== '_' && g_system_config[2]=='C' && g_system_config[3] == 'A' && g_system_config[4] =='_'&& g_system_config[5] =='*' &&  g_system_config[6] =='\n' ){
 8001582:	4b27      	ldr	r3, [pc, #156]	; (8001620 <ca_measurements_update+0x154>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	2b26      	cmp	r3, #38	; 0x26
 8001588:	d130      	bne.n	80015ec <ca_measurements_update+0x120>
 800158a:	4b25      	ldr	r3, [pc, #148]	; (8001620 <ca_measurements_update+0x154>)
 800158c:	785b      	ldrb	r3, [r3, #1]
 800158e:	2b5f      	cmp	r3, #95	; 0x5f
 8001590:	d12c      	bne.n	80015ec <ca_measurements_update+0x120>
 8001592:	4b23      	ldr	r3, [pc, #140]	; (8001620 <ca_measurements_update+0x154>)
 8001594:	789b      	ldrb	r3, [r3, #2]
 8001596:	2b43      	cmp	r3, #67	; 0x43
 8001598:	d128      	bne.n	80015ec <ca_measurements_update+0x120>
 800159a:	4b21      	ldr	r3, [pc, #132]	; (8001620 <ca_measurements_update+0x154>)
 800159c:	78db      	ldrb	r3, [r3, #3]
 800159e:	2b41      	cmp	r3, #65	; 0x41
 80015a0:	d124      	bne.n	80015ec <ca_measurements_update+0x120>
 80015a2:	4b1f      	ldr	r3, [pc, #124]	; (8001620 <ca_measurements_update+0x154>)
 80015a4:	791b      	ldrb	r3, [r3, #4]
 80015a6:	2b5f      	cmp	r3, #95	; 0x5f
 80015a8:	d120      	bne.n	80015ec <ca_measurements_update+0x120>
 80015aa:	4b1d      	ldr	r3, [pc, #116]	; (8001620 <ca_measurements_update+0x154>)
 80015ac:	795b      	ldrb	r3, [r3, #5]
 80015ae:	2b2a      	cmp	r3, #42	; 0x2a
 80015b0:	d11c      	bne.n	80015ec <ca_measurements_update+0x120>
 80015b2:	4b1b      	ldr	r3, [pc, #108]	; (8001620 <ca_measurements_update+0x154>)
 80015b4:	799b      	ldrb	r3, [r3, #6]
 80015b6:	2b0a      	cmp	r3, #10
 80015b8:	d118      	bne.n	80015ec <ca_measurements_update+0x120>
			if(g_CA_measure == 0){
 80015ba:	4b18      	ldr	r3, [pc, #96]	; (800161c <ca_measurements_update+0x150>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d103      	bne.n	80015ca <ca_measurements_update+0xfe>
				g_CA_measure = 1;
 80015c2:	4b16      	ldr	r3, [pc, #88]	; (800161c <ca_measurements_update+0x150>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	701a      	strb	r2, [r3, #0]
			if(g_CA_measure == 0){
 80015c8:	e015      	b.n	80015f6 <ca_measurements_update+0x12a>
			}
			else if(g_CA_measure == 1){
 80015ca:	4b14      	ldr	r3, [pc, #80]	; (800161c <ca_measurements_update+0x150>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d104      	bne.n	80015dc <ca_measurements_update+0x110>
				g_CA_measure = g_CA_measure ;
 80015d2:	4b12      	ldr	r3, [pc, #72]	; (800161c <ca_measurements_update+0x150>)
 80015d4:	781a      	ldrb	r2, [r3, #0]
 80015d6:	4b11      	ldr	r3, [pc, #68]	; (800161c <ca_measurements_update+0x150>)
 80015d8:	701a      	strb	r2, [r3, #0]
			if(g_CA_measure == 0){
 80015da:	e00c      	b.n	80015f6 <ca_measurements_update+0x12a>

			}
			else{
				if(g_CA_measure == 2){
 80015dc:	4b0f      	ldr	r3, [pc, #60]	; (800161c <ca_measurements_update+0x150>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d108      	bne.n	80015f6 <ca_measurements_update+0x12a>
					g_CA_measure = 1;
 80015e4:	4b0d      	ldr	r3, [pc, #52]	; (800161c <ca_measurements_update+0x150>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	701a      	strb	r2, [r3, #0]
			if(g_CA_measure == 0){
 80015ea:	e004      	b.n	80015f6 <ca_measurements_update+0x12a>
//				g_CA_measure = 1;
//			}
		}
		//else block to not update g_EN_measure if incorrent command revcd
		else{
			g_CA_measure =  g_CA_measure ;
 80015ec:	4b0b      	ldr	r3, [pc, #44]	; (800161c <ca_measurements_update+0x150>)
 80015ee:	781a      	ldrb	r2, [r3, #0]
 80015f0:	4b0a      	ldr	r3, [pc, #40]	; (800161c <ca_measurements_update+0x150>)
 80015f2:	701a      	strb	r2, [r3, #0]
		}
	}

}
 80015f4:	e000      	b.n	80015f8 <ca_measurements_update+0x12c>
			if(g_CA_measure == 0){
 80015f6:	bf00      	nop
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	200004f9 	.word	0x200004f9
 8001608:	2000044a 	.word	0x2000044a
 800160c:	20000445 	.word	0x20000445
 8001610:	20000449 	.word	0x20000449
 8001614:	20000446 	.word	0x20000446
 8001618:	2000043b 	.word	0x2000043b
 800161c:	2000044b 	.word	0x2000044b
 8001620:	20000428 	.word	0x20000428

08001624 <en_measurement_update>:
/**
 * This function start/stops the environment measurements
 * This is done by both the UART and push button
 */
void en_measurement_update(){
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
	// Environment Measure - And not measuring SP - modularise
	// EN - update via push button
	if(g_top_button_pressed  == 1 && g_EN_config_command_rcvd ==0 && g_SP_config_command_rcvd ==0 && g_CA_config_command_rcvd == 0 && (g_SP_measure == 0 || g_SP_measure ==2)  && (g_CA_measure == 0 || g_CA_measure ==2)){
 8001628:	4b49      	ldr	r3, [pc, #292]	; (8001750 <en_measurement_update+0x12c>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d12c      	bne.n	800168a <en_measurement_update+0x66>
 8001630:	4b48      	ldr	r3, [pc, #288]	; (8001754 <en_measurement_update+0x130>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d128      	bne.n	800168a <en_measurement_update+0x66>
 8001638:	4b47      	ldr	r3, [pc, #284]	; (8001758 <en_measurement_update+0x134>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d124      	bne.n	800168a <en_measurement_update+0x66>
 8001640:	4b46      	ldr	r3, [pc, #280]	; (800175c <en_measurement_update+0x138>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d120      	bne.n	800168a <en_measurement_update+0x66>
 8001648:	4b45      	ldr	r3, [pc, #276]	; (8001760 <en_measurement_update+0x13c>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d003      	beq.n	8001658 <en_measurement_update+0x34>
 8001650:	4b43      	ldr	r3, [pc, #268]	; (8001760 <en_measurement_update+0x13c>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b02      	cmp	r3, #2
 8001656:	d118      	bne.n	800168a <en_measurement_update+0x66>
 8001658:	4b42      	ldr	r3, [pc, #264]	; (8001764 <en_measurement_update+0x140>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d003      	beq.n	8001668 <en_measurement_update+0x44>
 8001660:	4b40      	ldr	r3, [pc, #256]	; (8001764 <en_measurement_update+0x140>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b02      	cmp	r3, #2
 8001666:	d110      	bne.n	800168a <en_measurement_update+0x66>
		g_top_button_pressed = 0;
 8001668:	4b39      	ldr	r3, [pc, #228]	; (8001750 <en_measurement_update+0x12c>)
 800166a:	2200      	movs	r2, #0
 800166c:	701a      	strb	r2, [r3, #0]

		g_EN_measure++  ;
 800166e:	4b3e      	ldr	r3, [pc, #248]	; (8001768 <en_measurement_update+0x144>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	3301      	adds	r3, #1
 8001674:	b2da      	uxtb	r2, r3
 8001676:	4b3c      	ldr	r3, [pc, #240]	; (8001768 <en_measurement_update+0x144>)
 8001678:	701a      	strb	r2, [r3, #0]

		if(g_EN_measure >2 ){
 800167a:	4b3b      	ldr	r3, [pc, #236]	; (8001768 <en_measurement_update+0x144>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b02      	cmp	r3, #2
 8001680:	d960      	bls.n	8001744 <en_measurement_update+0x120>
			g_EN_measure = 1;
 8001682:	4b39      	ldr	r3, [pc, #228]	; (8001768 <en_measurement_update+0x144>)
 8001684:	2201      	movs	r2, #1
 8001686:	701a      	strb	r2, [r3, #0]
		if(g_EN_measure >2 ){
 8001688:	e05c      	b.n	8001744 <en_measurement_update+0x120>
		}
	}
	//EN update via UART
	else if(g_top_button_pressed ==0  && g_EN_config_command_rcvd == 1 && g_SP_config_command_rcvd ==0 && g_CA_config_command_rcvd == 0  && (g_SP_measure == 0 || g_SP_measure ==2)  && (g_CA_measure == 0 || g_CA_measure ==2)){
 800168a:	4b31      	ldr	r3, [pc, #196]	; (8001750 <en_measurement_update+0x12c>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d158      	bne.n	8001744 <en_measurement_update+0x120>
 8001692:	4b30      	ldr	r3, [pc, #192]	; (8001754 <en_measurement_update+0x130>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d154      	bne.n	8001744 <en_measurement_update+0x120>
 800169a:	4b2f      	ldr	r3, [pc, #188]	; (8001758 <en_measurement_update+0x134>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d150      	bne.n	8001744 <en_measurement_update+0x120>
 80016a2:	4b2e      	ldr	r3, [pc, #184]	; (800175c <en_measurement_update+0x138>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d14c      	bne.n	8001744 <en_measurement_update+0x120>
 80016aa:	4b2d      	ldr	r3, [pc, #180]	; (8001760 <en_measurement_update+0x13c>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <en_measurement_update+0x96>
 80016b2:	4b2b      	ldr	r3, [pc, #172]	; (8001760 <en_measurement_update+0x13c>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d144      	bne.n	8001744 <en_measurement_update+0x120>
 80016ba:	4b2a      	ldr	r3, [pc, #168]	; (8001764 <en_measurement_update+0x140>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <en_measurement_update+0xa6>
 80016c2:	4b28      	ldr	r3, [pc, #160]	; (8001764 <en_measurement_update+0x140>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d13c      	bne.n	8001744 <en_measurement_update+0x120>
		g_EN_config_command_rcvd = 0;
 80016ca:	4b22      	ldr	r3, [pc, #136]	; (8001754 <en_measurement_update+0x130>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	701a      	strb	r2, [r3, #0]

		//check that the correct UART message recvd
		if(g_system_config[0]== '&' && g_system_config[1 ]== '_' && g_system_config[2]=='E' && g_system_config[3] == 'N' && g_system_config[4] =='_'&& g_system_config[5] =='*' &&  g_system_config[6] =='\n' ){
 80016d0:	4b26      	ldr	r3, [pc, #152]	; (800176c <en_measurement_update+0x148>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b26      	cmp	r3, #38	; 0x26
 80016d6:	d12f      	bne.n	8001738 <en_measurement_update+0x114>
 80016d8:	4b24      	ldr	r3, [pc, #144]	; (800176c <en_measurement_update+0x148>)
 80016da:	785b      	ldrb	r3, [r3, #1]
 80016dc:	2b5f      	cmp	r3, #95	; 0x5f
 80016de:	d12b      	bne.n	8001738 <en_measurement_update+0x114>
 80016e0:	4b22      	ldr	r3, [pc, #136]	; (800176c <en_measurement_update+0x148>)
 80016e2:	789b      	ldrb	r3, [r3, #2]
 80016e4:	2b45      	cmp	r3, #69	; 0x45
 80016e6:	d127      	bne.n	8001738 <en_measurement_update+0x114>
 80016e8:	4b20      	ldr	r3, [pc, #128]	; (800176c <en_measurement_update+0x148>)
 80016ea:	78db      	ldrb	r3, [r3, #3]
 80016ec:	2b4e      	cmp	r3, #78	; 0x4e
 80016ee:	d123      	bne.n	8001738 <en_measurement_update+0x114>
 80016f0:	4b1e      	ldr	r3, [pc, #120]	; (800176c <en_measurement_update+0x148>)
 80016f2:	791b      	ldrb	r3, [r3, #4]
 80016f4:	2b5f      	cmp	r3, #95	; 0x5f
 80016f6:	d11f      	bne.n	8001738 <en_measurement_update+0x114>
 80016f8:	4b1c      	ldr	r3, [pc, #112]	; (800176c <en_measurement_update+0x148>)
 80016fa:	795b      	ldrb	r3, [r3, #5]
 80016fc:	2b2a      	cmp	r3, #42	; 0x2a
 80016fe:	d11b      	bne.n	8001738 <en_measurement_update+0x114>
 8001700:	4b1a      	ldr	r3, [pc, #104]	; (800176c <en_measurement_update+0x148>)
 8001702:	799b      	ldrb	r3, [r3, #6]
 8001704:	2b0a      	cmp	r3, #10
 8001706:	d117      	bne.n	8001738 <en_measurement_update+0x114>
			if(g_EN_measure == 0){
 8001708:	4b17      	ldr	r3, [pc, #92]	; (8001768 <en_measurement_update+0x144>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d103      	bne.n	8001718 <en_measurement_update+0xf4>
				g_EN_measure = 1;
 8001710:	4b15      	ldr	r3, [pc, #84]	; (8001768 <en_measurement_update+0x144>)
 8001712:	2201      	movs	r2, #1
 8001714:	701a      	strb	r2, [r3, #0]
			if(g_EN_measure == 0){
 8001716:	e014      	b.n	8001742 <en_measurement_update+0x11e>
			}
			else if(g_EN_measure == 1){
 8001718:	4b13      	ldr	r3, [pc, #76]	; (8001768 <en_measurement_update+0x144>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d103      	bne.n	8001728 <en_measurement_update+0x104>
				g_EN_measure = 2;
 8001720:	4b11      	ldr	r3, [pc, #68]	; (8001768 <en_measurement_update+0x144>)
 8001722:	2202      	movs	r2, #2
 8001724:	701a      	strb	r2, [r3, #0]
			if(g_EN_measure == 0){
 8001726:	e00c      	b.n	8001742 <en_measurement_update+0x11e>

			}
			else{
				if(g_EN_measure ==2){
 8001728:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <en_measurement_update+0x144>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b02      	cmp	r3, #2
 800172e:	d108      	bne.n	8001742 <en_measurement_update+0x11e>
					g_EN_measure = 1;
 8001730:	4b0d      	ldr	r3, [pc, #52]	; (8001768 <en_measurement_update+0x144>)
 8001732:	2201      	movs	r2, #1
 8001734:	701a      	strb	r2, [r3, #0]
			if(g_EN_measure == 0){
 8001736:	e004      	b.n	8001742 <en_measurement_update+0x11e>
				}
			}
		}
		//else block to not update g_EN_measure if incorrent command revcd
		else{
			g_EN_measure =  g_EN_measure ;
 8001738:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <en_measurement_update+0x144>)
 800173a:	781a      	ldrb	r2, [r3, #0]
 800173c:	4b0a      	ldr	r3, [pc, #40]	; (8001768 <en_measurement_update+0x144>)
 800173e:	701a      	strb	r2, [r3, #0]
		}
	}

}
 8001740:	e000      	b.n	8001744 <en_measurement_update+0x120>
			if(g_EN_measure == 0){
 8001742:	bf00      	nop
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	200004fa 	.word	0x200004fa
 8001754:	20000445 	.word	0x20000445
 8001758:	20000449 	.word	0x20000449
 800175c:	2000044a 	.word	0x2000044a
 8001760:	20000446 	.word	0x20000446
 8001764:	2000044b 	.word	0x2000044b
 8001768:	2000043b 	.word	0x2000043b
 800176c:	20000428 	.word	0x20000428

08001770 <sp_measurement_update>:

/**
 * This function start/stops the panel measurements
 * This is done by both the UART and push button
 */
void sp_measurement_update(){
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
	//SP Measure - update via bottom push button - modularise
	if(g_bottom_button_pressed  == 1  && g_EN_config_command_rcvd == 0 && g_SP_config_command_rcvd ==0  && g_CA_config_command_rcvd == 0 && (g_EN_measure == 0 || g_EN_measure ==2)  && (g_CA_measure == 0 || g_CA_measure ==2)){
 8001774:	4b4a      	ldr	r3, [pc, #296]	; (80018a0 <sp_measurement_update+0x130>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d12f      	bne.n	80017dc <sp_measurement_update+0x6c>
 800177c:	4b49      	ldr	r3, [pc, #292]	; (80018a4 <sp_measurement_update+0x134>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d12b      	bne.n	80017dc <sp_measurement_update+0x6c>
 8001784:	4b48      	ldr	r3, [pc, #288]	; (80018a8 <sp_measurement_update+0x138>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d127      	bne.n	80017dc <sp_measurement_update+0x6c>
 800178c:	4b47      	ldr	r3, [pc, #284]	; (80018ac <sp_measurement_update+0x13c>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d123      	bne.n	80017dc <sp_measurement_update+0x6c>
 8001794:	4b46      	ldr	r3, [pc, #280]	; (80018b0 <sp_measurement_update+0x140>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d003      	beq.n	80017a4 <sp_measurement_update+0x34>
 800179c:	4b44      	ldr	r3, [pc, #272]	; (80018b0 <sp_measurement_update+0x140>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d11b      	bne.n	80017dc <sp_measurement_update+0x6c>
 80017a4:	4b43      	ldr	r3, [pc, #268]	; (80018b4 <sp_measurement_update+0x144>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d003      	beq.n	80017b4 <sp_measurement_update+0x44>
 80017ac:	4b41      	ldr	r3, [pc, #260]	; (80018b4 <sp_measurement_update+0x144>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d113      	bne.n	80017dc <sp_measurement_update+0x6c>
		//clear lcd display after EN measurement
		Lcd_clear(&lcd); //to remove EN measure values
 80017b4:	4840      	ldr	r0, [pc, #256]	; (80018b8 <sp_measurement_update+0x148>)
 80017b6:	f7ff fc7f 	bl	80010b8 <Lcd_clear>
		g_bottom_button_pressed = 0;
 80017ba:	4b39      	ldr	r3, [pc, #228]	; (80018a0 <sp_measurement_update+0x130>)
 80017bc:	2200      	movs	r2, #0
 80017be:	701a      	strb	r2, [r3, #0]

		g_SP_measure++  ;
 80017c0:	4b3e      	ldr	r3, [pc, #248]	; (80018bc <sp_measurement_update+0x14c>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	3301      	adds	r3, #1
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	4b3c      	ldr	r3, [pc, #240]	; (80018bc <sp_measurement_update+0x14c>)
 80017ca:	701a      	strb	r2, [r3, #0]

		if(g_SP_measure >2 ){
 80017cc:	4b3b      	ldr	r3, [pc, #236]	; (80018bc <sp_measurement_update+0x14c>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d963      	bls.n	800189c <sp_measurement_update+0x12c>
			g_SP_measure = 1;
 80017d4:	4b39      	ldr	r3, [pc, #228]	; (80018bc <sp_measurement_update+0x14c>)
 80017d6:	2201      	movs	r2, #1
 80017d8:	701a      	strb	r2, [r3, #0]
		if(g_SP_measure >2 ){
 80017da:	e05f      	b.n	800189c <sp_measurement_update+0x12c>
		}
	}

	// SP update via uart
	else if(g_bottom_button_pressed ==0  && g_EN_config_command_rcvd == 0 && g_SP_config_command_rcvd ==1 && g_CA_config_command_rcvd == 0 && (g_EN_measure == 0 || g_EN_measure ==2) && (g_CA_measure == 0 || g_CA_measure ==2)){
 80017dc:	4b30      	ldr	r3, [pc, #192]	; (80018a0 <sp_measurement_update+0x130>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d15b      	bne.n	800189c <sp_measurement_update+0x12c>
 80017e4:	4b2f      	ldr	r3, [pc, #188]	; (80018a4 <sp_measurement_update+0x134>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d157      	bne.n	800189c <sp_measurement_update+0x12c>
 80017ec:	4b2e      	ldr	r3, [pc, #184]	; (80018a8 <sp_measurement_update+0x138>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d153      	bne.n	800189c <sp_measurement_update+0x12c>
 80017f4:	4b2d      	ldr	r3, [pc, #180]	; (80018ac <sp_measurement_update+0x13c>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d14f      	bne.n	800189c <sp_measurement_update+0x12c>
 80017fc:	4b2c      	ldr	r3, [pc, #176]	; (80018b0 <sp_measurement_update+0x140>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d003      	beq.n	800180c <sp_measurement_update+0x9c>
 8001804:	4b2a      	ldr	r3, [pc, #168]	; (80018b0 <sp_measurement_update+0x140>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b02      	cmp	r3, #2
 800180a:	d147      	bne.n	800189c <sp_measurement_update+0x12c>
 800180c:	4b29      	ldr	r3, [pc, #164]	; (80018b4 <sp_measurement_update+0x144>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d003      	beq.n	800181c <sp_measurement_update+0xac>
 8001814:	4b27      	ldr	r3, [pc, #156]	; (80018b4 <sp_measurement_update+0x144>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b02      	cmp	r3, #2
 800181a:	d13f      	bne.n	800189c <sp_measurement_update+0x12c>

		//clear lcd display after EN measurement
		Lcd_clear(&lcd); //to remove EN measure values
 800181c:	4826      	ldr	r0, [pc, #152]	; (80018b8 <sp_measurement_update+0x148>)
 800181e:	f7ff fc4b 	bl	80010b8 <Lcd_clear>

		g_SP_config_command_rcvd = 0;
 8001822:	4b21      	ldr	r3, [pc, #132]	; (80018a8 <sp_measurement_update+0x138>)
 8001824:	2200      	movs	r2, #0
 8001826:	701a      	strb	r2, [r3, #0]

		//check that the correct UART message recvd
		if(g_system_config[0]== '&' && g_system_config[1 ]== '_' && g_system_config[2]=='S' && g_system_config[3] == 'P' &&g_system_config[4] =='_'&& g_system_config[5] =='*' &&  g_system_config[6] =='\n' ){
 8001828:	4b25      	ldr	r3, [pc, #148]	; (80018c0 <sp_measurement_update+0x150>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b26      	cmp	r3, #38	; 0x26
 800182e:	d12f      	bne.n	8001890 <sp_measurement_update+0x120>
 8001830:	4b23      	ldr	r3, [pc, #140]	; (80018c0 <sp_measurement_update+0x150>)
 8001832:	785b      	ldrb	r3, [r3, #1]
 8001834:	2b5f      	cmp	r3, #95	; 0x5f
 8001836:	d12b      	bne.n	8001890 <sp_measurement_update+0x120>
 8001838:	4b21      	ldr	r3, [pc, #132]	; (80018c0 <sp_measurement_update+0x150>)
 800183a:	789b      	ldrb	r3, [r3, #2]
 800183c:	2b53      	cmp	r3, #83	; 0x53
 800183e:	d127      	bne.n	8001890 <sp_measurement_update+0x120>
 8001840:	4b1f      	ldr	r3, [pc, #124]	; (80018c0 <sp_measurement_update+0x150>)
 8001842:	78db      	ldrb	r3, [r3, #3]
 8001844:	2b50      	cmp	r3, #80	; 0x50
 8001846:	d123      	bne.n	8001890 <sp_measurement_update+0x120>
 8001848:	4b1d      	ldr	r3, [pc, #116]	; (80018c0 <sp_measurement_update+0x150>)
 800184a:	791b      	ldrb	r3, [r3, #4]
 800184c:	2b5f      	cmp	r3, #95	; 0x5f
 800184e:	d11f      	bne.n	8001890 <sp_measurement_update+0x120>
 8001850:	4b1b      	ldr	r3, [pc, #108]	; (80018c0 <sp_measurement_update+0x150>)
 8001852:	795b      	ldrb	r3, [r3, #5]
 8001854:	2b2a      	cmp	r3, #42	; 0x2a
 8001856:	d11b      	bne.n	8001890 <sp_measurement_update+0x120>
 8001858:	4b19      	ldr	r3, [pc, #100]	; (80018c0 <sp_measurement_update+0x150>)
 800185a:	799b      	ldrb	r3, [r3, #6]
 800185c:	2b0a      	cmp	r3, #10
 800185e:	d117      	bne.n	8001890 <sp_measurement_update+0x120>
			if(g_SP_measure == 0){
 8001860:	4b16      	ldr	r3, [pc, #88]	; (80018bc <sp_measurement_update+0x14c>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d103      	bne.n	8001870 <sp_measurement_update+0x100>
				g_SP_measure = 1;
 8001868:	4b14      	ldr	r3, [pc, #80]	; (80018bc <sp_measurement_update+0x14c>)
 800186a:	2201      	movs	r2, #1
 800186c:	701a      	strb	r2, [r3, #0]
			if(g_SP_measure == 0){
 800186e:	e014      	b.n	800189a <sp_measurement_update+0x12a>
			}
			else if(g_SP_measure == 1){
 8001870:	4b12      	ldr	r3, [pc, #72]	; (80018bc <sp_measurement_update+0x14c>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d103      	bne.n	8001880 <sp_measurement_update+0x110>
				g_SP_measure = 2;
 8001878:	4b10      	ldr	r3, [pc, #64]	; (80018bc <sp_measurement_update+0x14c>)
 800187a:	2202      	movs	r2, #2
 800187c:	701a      	strb	r2, [r3, #0]
			if(g_SP_measure == 0){
 800187e:	e00c      	b.n	800189a <sp_measurement_update+0x12a>

			}
			else{
				if(g_SP_measure ==2){
 8001880:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <sp_measurement_update+0x14c>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b02      	cmp	r3, #2
 8001886:	d108      	bne.n	800189a <sp_measurement_update+0x12a>
					g_SP_measure = 1;
 8001888:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <sp_measurement_update+0x14c>)
 800188a:	2201      	movs	r2, #1
 800188c:	701a      	strb	r2, [r3, #0]
			if(g_SP_measure == 0){
 800188e:	e004      	b.n	800189a <sp_measurement_update+0x12a>
				}
			}
		}
		//else block to not update g_EN_measure if incorrent command revcd
		else{
			g_SP_measure =  g_SP_measure ;
 8001890:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <sp_measurement_update+0x14c>)
 8001892:	781a      	ldrb	r2, [r3, #0]
 8001894:	4b09      	ldr	r3, [pc, #36]	; (80018bc <sp_measurement_update+0x14c>)
 8001896:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001898:	e000      	b.n	800189c <sp_measurement_update+0x12c>
			if(g_SP_measure == 0){
 800189a:	bf00      	nop
}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	200004fb 	.word	0x200004fb
 80018a4:	20000445 	.word	0x20000445
 80018a8:	20000449 	.word	0x20000449
 80018ac:	2000044a 	.word	0x2000044a
 80018b0:	2000043b 	.word	0x2000043b
 80018b4:	2000044b 	.word	0x2000044b
 80018b8:	20000488 	.word	0x20000488
 80018bc:	20000446 	.word	0x20000446
 80018c0:	20000428 	.word	0x20000428

080018c4 <HAL_TIM_IC_CaptureCallback>:
uint8_t g_new_pulse = 0;
uint16_t g_lmt01_sens_temp =  0 ;
char dig_sens_temp[3] = {};

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
  if(htim->Instance == TIM2){
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018d4:	d142      	bne.n	800195c <HAL_TIM_IC_CaptureCallback+0x98>
	  g_new_pulse = 1;
 80018d6:	4b23      	ldr	r3, [pc, #140]	; (8001964 <HAL_TIM_IC_CaptureCallback+0xa0>)
 80018d8:	2201      	movs	r2, #1
 80018da:	701a      	strb	r2, [r3, #0]
	  g_time_between_pulses =  __HAL_TIM_GET_COUNTER(&htim2)  - current_value;  //Time between rising edges
 80018dc:	4b22      	ldr	r3, [pc, #136]	; (8001968 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018e2:	4b22      	ldr	r3, [pc, #136]	; (800196c <HAL_TIM_IC_CaptureCallback+0xa8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	4a21      	ldr	r2, [pc, #132]	; (8001970 <HAL_TIM_IC_CaptureCallback+0xac>)
 80018ea:	6013      	str	r3, [r2, #0]

	  if( g_time_between_pulses<13){
 80018ec:	4b20      	ldr	r3, [pc, #128]	; (8001970 <HAL_TIM_IC_CaptureCallback+0xac>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2b0c      	cmp	r3, #12
 80018f2:	d80a      	bhi.n	800190a <HAL_TIM_IC_CaptureCallback+0x46>
		  current_value = __HAL_TIM_GET_COUNTER(&htim2) ;
 80018f4:	4b1c      	ldr	r3, [pc, #112]	; (8001968 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fa:	4a1c      	ldr	r2, [pc, #112]	; (800196c <HAL_TIM_IC_CaptureCallback+0xa8>)
 80018fc:	6013      	str	r3, [r2, #0]
		  pulse_count++ ;
 80018fe:	4b1d      	ldr	r3, [pc, #116]	; (8001974 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	3301      	adds	r3, #1
 8001904:	4a1b      	ldr	r2, [pc, #108]	; (8001974 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001906:	6013      	str	r3, [r2, #0]
		  g_TO1_temp = (pulse_count/4096.0)*256 - 50 ; //calculate new temp - BUG Fixed: 4094 changed to 4096
		 current_value = __HAL_TIM_GET_COUNTER(&htim2) ;
		 pulse_count = 0;
	  }
  }
}
 8001908:	e028      	b.n	800195c <HAL_TIM_IC_CaptureCallback+0x98>
		  g_TO1_temp = (pulse_count/4096.0)*256 - 50 ; //calculate new temp - BUG Fixed: 4094 changed to 4096
 800190a:	4b1a      	ldr	r3, [pc, #104]	; (8001974 <HAL_TIM_IC_CaptureCallback+0xb0>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f7fe fe00 	bl	8000514 <__aeabi_ui2d>
 8001914:	f04f 0200 	mov.w	r2, #0
 8001918:	4b17      	ldr	r3, [pc, #92]	; (8001978 <HAL_TIM_IC_CaptureCallback+0xb4>)
 800191a:	f7fe ff9f 	bl	800085c <__aeabi_ddiv>
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	4610      	mov	r0, r2
 8001924:	4619      	mov	r1, r3
 8001926:	f04f 0200 	mov.w	r2, #0
 800192a:	4b14      	ldr	r3, [pc, #80]	; (800197c <HAL_TIM_IC_CaptureCallback+0xb8>)
 800192c:	f7fe fe6c 	bl	8000608 <__aeabi_dmul>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	4610      	mov	r0, r2
 8001936:	4619      	mov	r1, r3
 8001938:	f04f 0200 	mov.w	r2, #0
 800193c:	4b10      	ldr	r3, [pc, #64]	; (8001980 <HAL_TIM_IC_CaptureCallback+0xbc>)
 800193e:	f7fe fcab 	bl	8000298 <__aeabi_dsub>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	490f      	ldr	r1, [pc, #60]	; (8001984 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001948:	e9c1 2300 	strd	r2, r3, [r1]
		 current_value = __HAL_TIM_GET_COUNTER(&htim2) ;
 800194c:	4b06      	ldr	r3, [pc, #24]	; (8001968 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001952:	4a06      	ldr	r2, [pc, #24]	; (800196c <HAL_TIM_IC_CaptureCallback+0xa8>)
 8001954:	6013      	str	r3, [r2, #0]
		 pulse_count = 0;
 8001956:	4b07      	ldr	r3, [pc, #28]	; (8001974 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
}
 800195c:	bf00      	nop
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	200004dc 	.word	0x200004dc
 8001968:	20000294 	.word	0x20000294
 800196c:	200004d4 	.word	0x200004d4
 8001970:	200004d8 	.word	0x200004d8
 8001974:	20000504 	.word	0x20000504
 8001978:	40b00000 	.word	0x40b00000
 800197c:	40700000 	.word	0x40700000
 8001980:	40490000 	.word	0x40490000
 8001984:	20000388 	.word	0x20000388

08001988 <flash_led_d3>:

/**
 * Function flashed LED D3 at specified interval of 50 ms
 */
void flash_led_d3(){
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - g_time_passed >= 50 && g_LED_D3_ON == 0){
 800198c:	f002 fb8c 	bl	80040a8 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	4b16      	ldr	r3, [pc, #88]	; (80019ec <flash_led_d3+0x64>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b31      	cmp	r3, #49	; 0x31
 800199a:	d90c      	bls.n	80019b6 <flash_led_d3+0x2e>
 800199c:	4b14      	ldr	r3, [pc, #80]	; (80019f0 <flash_led_d3+0x68>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d108      	bne.n	80019b6 <flash_led_d3+0x2e>
		g_LED_D3_ON = 1; // set D2 on
 80019a4:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <flash_led_d3+0x68>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET) ;
 80019aa:	2200      	movs	r2, #0
 80019ac:	2120      	movs	r1, #32
 80019ae:	4811      	ldr	r0, [pc, #68]	; (80019f4 <flash_led_d3+0x6c>)
 80019b0:	f003 fadc 	bl	8004f6c <HAL_GPIO_WritePin>
		g_time_passed =  HAL_GetTick() ;
		g_LED_D3_ON = 0;  //set D2 off

	}

}
 80019b4:	e018      	b.n	80019e8 <flash_led_d3+0x60>
	else if(HAL_GetTick() - g_time_passed >= 100 && g_LED_D3_ON == 1){
 80019b6:	f002 fb77 	bl	80040a8 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <flash_led_d3+0x64>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b63      	cmp	r3, #99	; 0x63
 80019c4:	d910      	bls.n	80019e8 <flash_led_d3+0x60>
 80019c6:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <flash_led_d3+0x68>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d10c      	bne.n	80019e8 <flash_led_d3+0x60>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET) ;
 80019ce:	2201      	movs	r2, #1
 80019d0:	2120      	movs	r1, #32
 80019d2:	4808      	ldr	r0, [pc, #32]	; (80019f4 <flash_led_d3+0x6c>)
 80019d4:	f003 faca 	bl	8004f6c <HAL_GPIO_WritePin>
		g_time_passed =  HAL_GetTick() ;
 80019d8:	f002 fb66 	bl	80040a8 <HAL_GetTick>
 80019dc:	4603      	mov	r3, r0
 80019de:	4a03      	ldr	r2, [pc, #12]	; (80019ec <flash_led_d3+0x64>)
 80019e0:	6013      	str	r3, [r2, #0]
		g_LED_D3_ON = 0;  //set D2 off
 80019e2:	4b03      	ldr	r3, [pc, #12]	; (80019f0 <flash_led_d3+0x68>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	701a      	strb	r2, [r3, #0]
}
 80019e8:	bf00      	nop
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	20000440 	.word	0x20000440
 80019f0:	20000444 	.word	0x20000444
 80019f4:	40020400 	.word	0x40020400

080019f8 <flash_led_d2>:

/**
 * Function flashed LED D2 at specified interval of 100 ms
 */
void flash_led_d2(){
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - g_time_passed >= 100 && g_LED_D2_ON == 0){
 80019fc:	f002 fb54 	bl	80040a8 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	4b16      	ldr	r3, [pc, #88]	; (8001a5c <flash_led_d2+0x64>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b63      	cmp	r3, #99	; 0x63
 8001a0a:	d90c      	bls.n	8001a26 <flash_led_d2+0x2e>
 8001a0c:	4b14      	ldr	r3, [pc, #80]	; (8001a60 <flash_led_d2+0x68>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d108      	bne.n	8001a26 <flash_led_d2+0x2e>
		g_LED_D2_ON = 1; // set D2 on
 8001a14:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <flash_led_d2+0x68>)
 8001a16:	2201      	movs	r2, #1
 8001a18:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET) ;
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	2110      	movs	r1, #16
 8001a1e:	4811      	ldr	r0, [pc, #68]	; (8001a64 <flash_led_d2+0x6c>)
 8001a20:	f003 faa4 	bl	8004f6c <HAL_GPIO_WritePin>
		g_time_passed =  HAL_GetTick() ;
		g_LED_D2_ON = 0;  //set D2 off

	}

}
 8001a24:	e018      	b.n	8001a58 <flash_led_d2+0x60>
	else if(HAL_GetTick() - g_time_passed >= 200 && g_LED_D2_ON == 1){
 8001a26:	f002 fb3f 	bl	80040a8 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <flash_led_d2+0x64>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2bc7      	cmp	r3, #199	; 0xc7
 8001a34:	d910      	bls.n	8001a58 <flash_led_d2+0x60>
 8001a36:	4b0a      	ldr	r3, [pc, #40]	; (8001a60 <flash_led_d2+0x68>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d10c      	bne.n	8001a58 <flash_led_d2+0x60>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET) ;
 8001a3e:	2201      	movs	r2, #1
 8001a40:	2110      	movs	r1, #16
 8001a42:	4808      	ldr	r0, [pc, #32]	; (8001a64 <flash_led_d2+0x6c>)
 8001a44:	f003 fa92 	bl	8004f6c <HAL_GPIO_WritePin>
		g_time_passed =  HAL_GetTick() ;
 8001a48:	f002 fb2e 	bl	80040a8 <HAL_GetTick>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	4a03      	ldr	r2, [pc, #12]	; (8001a5c <flash_led_d2+0x64>)
 8001a50:	6013      	str	r3, [r2, #0]
		g_LED_D2_ON = 0;  //set D2 off
 8001a52:	4b03      	ldr	r3, [pc, #12]	; (8001a60 <flash_led_d2+0x68>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	701a      	strb	r2, [r3, #0]
}
 8001a58:	bf00      	nop
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20000440 	.word	0x20000440
 8001a60:	20000448 	.word	0x20000448
 8001a64:	40020400 	.word	0x40020400

08001a68 <flash_led_d4>:
/**
 * Function flashed LED D4 at specified interval of 200 ms
 */
uint32_t d4_toggle_time = 0;
//uint8_t d5_led_entered
void flash_led_d4(){
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
//		g_time_passed =  HAL_GetTick() ;
//		g_LED_D4_ON = 0;  //set D2 off
//
//	}

	if(HAL_GetTick() - d4_toggle_time > 200){
 8001a6c:	f002 fb1c 	bl	80040a8 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <flash_led_d4+0x2c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2bc8      	cmp	r3, #200	; 0xc8
 8001a7a:	d909      	bls.n	8001a90 <flash_led_d4+0x28>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
 8001a7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a80:	4805      	ldr	r0, [pc, #20]	; (8001a98 <flash_led_d4+0x30>)
 8001a82:	f003 fa8c 	bl	8004f9e <HAL_GPIO_TogglePin>
		d4_toggle_time =  HAL_GetTick();
 8001a86:	f002 fb0f 	bl	80040a8 <HAL_GetTick>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	4a01      	ldr	r2, [pc, #4]	; (8001a94 <flash_led_d4+0x2c>)
 8001a8e:	6013      	str	r3, [r2, #0]
	}

}
 8001a90:	bf00      	nop
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	200004e4 	.word	0x200004e4
 8001a98:	40020400 	.word	0x40020400

08001a9c <ADC_Select_CH0>:
		  }
	  }
}

//digital sensore
void ADC_Select_CH0(void){
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001aa2:	463b      	mov	r3, r7
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_0;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aba:	463b      	mov	r3, r7
 8001abc:	4619      	mov	r1, r3
 8001abe:	4806      	ldr	r0, [pc, #24]	; (8001ad8 <ADC_Select_CH0+0x3c>)
 8001ac0:	f002 fce6 	bl	8004490 <HAL_ADC_ConfigChannel>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <ADC_Select_CH0+0x32>
	{
		Error_Handler();
 8001aca:	f001 fe3f 	bl	800374c <Error_Handler>
	}


}
 8001ace:	bf00      	nop
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	2000022c 	.word	0x2000022c

08001adc <ADC_Select_CH14>:
// photodiode
void ADC_Select_CH14(void){
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001ae2:	463b      	mov	r3, r7
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	*/
	sConfig.Channel = ADC_CHANNEL_14;
 8001aee:	230e      	movs	r3, #14
 8001af0:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001af2:	2301      	movs	r3, #1
 8001af4:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001af6:	463b      	mov	r3, r7
 8001af8:	4619      	mov	r1, r3
 8001afa:	4806      	ldr	r0, [pc, #24]	; (8001b14 <ADC_Select_CH14+0x38>)
 8001afc:	f002 fcc8 	bl	8004490 <HAL_ADC_ConfigChannel>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <ADC_Select_CH14+0x2e>
	{
		Error_Handler();
 8001b06:	f001 fe21 	bl	800374c <Error_Handler>
	}


}
 8001b0a:	bf00      	nop
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	2000022c 	.word	0x2000022c

08001b18 <ADC_Select_CH9>:

//PV- Panel- ADC 1
void ADC_Select_CH9(void){
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001b1e:	463b      	mov	r3, r7
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	*/
	sConfig.Channel = ADC_CHANNEL_9;
 8001b2a:	2309      	movs	r3, #9
 8001b2c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b32:	463b      	mov	r3, r7
 8001b34:	4619      	mov	r1, r3
 8001b36:	4806      	ldr	r0, [pc, #24]	; (8001b50 <ADC_Select_CH9+0x38>)
 8001b38:	f002 fcaa 	bl	8004490 <HAL_ADC_ConfigChannel>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <ADC_Select_CH9+0x2e>
	{
		Error_Handler();
 8001b42:	f001 fe03 	bl	800374c <Error_Handler>
	}
}
 8001b46:	bf00      	nop
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	2000022c 	.word	0x2000022c

08001b54 <ADC_Select_CH15>:

//PV - Panel - ADC2
void ADC_Select_CH15(void){
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001b5a:	463b      	mov	r3, r7
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	*/
	sConfig.Channel = ADC_CHANNEL_15;
 8001b66:	230f      	movs	r3, #15
 8001b68:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b6e:	463b      	mov	r3, r7
 8001b70:	4619      	mov	r1, r3
 8001b72:	4806      	ldr	r0, [pc, #24]	; (8001b8c <ADC_Select_CH15+0x38>)
 8001b74:	f002 fc8c 	bl	8004490 <HAL_ADC_ConfigChannel>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <ADC_Select_CH15+0x2e>
	{
		Error_Handler();
 8001b7e:	f001 fde5 	bl	800374c <Error_Handler>
	}
}
 8001b82:	bf00      	nop
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	2000022c 	.word	0x2000022c

08001b90 <get_adc_value_conver_to_lux>:
 * Function starts ADC CH14, connected to ouput of light diode
 * get the ADC value of diode
 */
double ip_diode = 0;
uint16_t lux_value = 0;
uint16_t get_adc_value_conver_to_lux(){
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
	ADC_Select_CH14() ;
 8001b94:	f7ff ffa2 	bl	8001adc <ADC_Select_CH14>
	HAL_ADC_Start(&hadc1);
 8001b98:	482f      	ldr	r0, [pc, #188]	; (8001c58 <get_adc_value_conver_to_lux+0xc8>)
 8001b9a:	f002 faf9 	bl	8004190 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) ;
 8001b9e:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba2:	482d      	ldr	r0, [pc, #180]	; (8001c58 <get_adc_value_conver_to_lux+0xc8>)
 8001ba4:	f002 fbdb 	bl	800435e <HAL_ADC_PollForConversion>
	g_raw_lux_value = HAL_ADC_GetValue(&hadc1) ;
 8001ba8:	482b      	ldr	r0, [pc, #172]	; (8001c58 <get_adc_value_conver_to_lux+0xc8>)
 8001baa:	f002 fc63 	bl	8004474 <HAL_ADC_GetValue>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7fe fcaf 	bl	8000514 <__aeabi_ui2d>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	4928      	ldr	r1, [pc, #160]	; (8001c5c <get_adc_value_conver_to_lux+0xcc>)
 8001bbc:	e9c1 2300 	strd	r2, r3, [r1]
	HAL_ADC_Stop(&hadc1);
 8001bc0:	4825      	ldr	r0, [pc, #148]	; (8001c58 <get_adc_value_conver_to_lux+0xc8>)
 8001bc2:	f002 fb99 	bl	80042f8 <HAL_ADC_Stop>

	//scale adc value [0,99999] - For 30000 lux
//	g_raw_lux_value = g_raw_lux_value*(29999.0/4095.0) ;

	//make these into your own values
	g_raw_lux_value = g_raw_lux_value*(3.3/4095.0) ;
 8001bc6:	4b25      	ldr	r3, [pc, #148]	; (8001c5c <get_adc_value_conver_to_lux+0xcc>)
 8001bc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bcc:	a31c      	add	r3, pc, #112	; (adr r3, 8001c40 <get_adc_value_conver_to_lux+0xb0>)
 8001bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd2:	f7fe fd19 	bl	8000608 <__aeabi_dmul>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	4920      	ldr	r1, [pc, #128]	; (8001c5c <get_adc_value_conver_to_lux+0xcc>)
 8001bdc:	e9c1 2300 	strd	r2, r3, [r1]
	ip_diode = g_raw_lux_value/1200.0 ;
 8001be0:	4b1e      	ldr	r3, [pc, #120]	; (8001c5c <get_adc_value_conver_to_lux+0xcc>)
 8001be2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001be6:	f04f 0200 	mov.w	r2, #0
 8001bea:	4b1d      	ldr	r3, [pc, #116]	; (8001c60 <get_adc_value_conver_to_lux+0xd0>)
 8001bec:	f7fe fe36 	bl	800085c <__aeabi_ddiv>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	491b      	ldr	r1, [pc, #108]	; (8001c64 <get_adc_value_conver_to_lux+0xd4>)
 8001bf6:	e9c1 2300 	strd	r2, r3, [r1]
	lux_value = pow((ip_diode/(0.085*pow(10,-6))),1/1.01) ;
 8001bfa:	4b1a      	ldr	r3, [pc, #104]	; (8001c64 <get_adc_value_conver_to_lux+0xd4>)
 8001bfc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c00:	a311      	add	r3, pc, #68	; (adr r3, 8001c48 <get_adc_value_conver_to_lux+0xb8>)
 8001c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c06:	f7fe fe29 	bl	800085c <__aeabi_ddiv>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	ec43 2b17 	vmov	d7, r2, r3
 8001c12:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8001c50 <get_adc_value_conver_to_lux+0xc0>
 8001c16:	eeb0 0a47 	vmov.f32	s0, s14
 8001c1a:	eef0 0a67 	vmov.f32	s1, s15
 8001c1e:	f009 f89f 	bl	800ad60 <pow>
 8001c22:	ec53 2b10 	vmov	r2, r3, d0
 8001c26:	4610      	mov	r0, r2
 8001c28:	4619      	mov	r1, r3
 8001c2a:	f7fe ffc5 	bl	8000bb8 <__aeabi_d2uiz>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <get_adc_value_conver_to_lux+0xd8>)
 8001c34:	801a      	strh	r2, [r3, #0]

//	return g_raw_lux_value ;
	return lux_value ;
 8001c36:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <get_adc_value_conver_to_lux+0xd8>)
 8001c38:	881b      	ldrh	r3, [r3, #0]
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	e734d9b4 	.word	0xe734d9b4
 8001c44:	3f4a680c 	.word	0x3f4a680c
 8001c48:	d05394fe 	.word	0xd05394fe
 8001c4c:	3e76d127 	.word	0x3e76d127
 8001c50:	1e6a7498 	.word	0x1e6a7498
 8001c54:	3fefaee4 	.word	0x3fefaee4
 8001c58:	2000022c 	.word	0x2000022c
 8001c5c:	20000390 	.word	0x20000390
 8001c60:	4092c000 	.word	0x4092c000
 8001c64:	200004e8 	.word	0x200004e8
 8001c68:	200004f0 	.word	0x200004f0

08001c6c <en_measurements_and_responses>:
 * This funtion performs the measurement for UR3: Environement measure.
 * It measures the ambient temperature, solar panel temperature and light intensity,
 * the board is exposed to.
 * Measurements and responses, transmitted to UART and LCD
 */
void en_measurements_and_responses(){
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af02      	add	r7, sp, #8


	if(g_EN_measure == 1){
 8001c72:	4b41      	ldr	r3, [pc, #260]	; (8001d78 <en_measurements_and_responses+0x10c>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d14a      	bne.n	8001d10 <en_measurements_and_responses+0xa4>

	  // ignore bottom and left button press and SP command while measuring
	  if(g_bottom_button_pressed ==1 || g_SP_config_command_rcvd ==1 ||  g_left_button_pressed ==1){
 8001c7a:	4b40      	ldr	r3, [pc, #256]	; (8001d7c <en_measurements_and_responses+0x110>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d007      	beq.n	8001c92 <en_measurements_and_responses+0x26>
 8001c82:	4b3f      	ldr	r3, [pc, #252]	; (8001d80 <en_measurements_and_responses+0x114>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d003      	beq.n	8001c92 <en_measurements_and_responses+0x26>
 8001c8a:	4b3e      	ldr	r3, [pc, #248]	; (8001d84 <en_measurements_and_responses+0x118>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d108      	bne.n	8001ca4 <en_measurements_and_responses+0x38>
		  g_bottom_button_pressed = 0 ;
 8001c92:	4b3a      	ldr	r3, [pc, #232]	; (8001d7c <en_measurements_and_responses+0x110>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	701a      	strb	r2, [r3, #0]
		  g_SP_config_command_rcvd = 0 ;
 8001c98:	4b39      	ldr	r3, [pc, #228]	; (8001d80 <en_measurements_and_responses+0x114>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	701a      	strb	r2, [r3, #0]
		  g_left_button_pressed = 0;
 8001c9e:	4b39      	ldr	r3, [pc, #228]	; (8001d84 <en_measurements_and_responses+0x118>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	701a      	strb	r2, [r3, #0]
	  }
	  //ANALOGUE SENSOR CALIBRATION
	  g_temp_in_deg = get_adc_value_and_celsius_temperature() ;
 8001ca4:	f7ff faec 	bl	8001280 <get_adc_value_and_celsius_temperature>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	461a      	mov	r2, r3
 8001cac:	4b36      	ldr	r3, [pc, #216]	; (8001d88 <en_measurements_and_responses+0x11c>)
 8001cae:	801a      	strh	r2, [r3, #0]
	  store_temp_in_string(g_temp_in_deg, g_temperature, LEN);
 8001cb0:	4b35      	ldr	r3, [pc, #212]	; (8001d88 <en_measurements_and_responses+0x11c>)
 8001cb2:	881b      	ldrh	r3, [r3, #0]
 8001cb4:	2203      	movs	r2, #3
 8001cb6:	4935      	ldr	r1, [pc, #212]	; (8001d8c <en_measurements_and_responses+0x120>)
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff fb3b 	bl	8001334 <store_temp_in_string>

	  //PHOTODIOCE ouput
	  g_get_lxd_value = get_adc_value_conver_to_lux();
 8001cbe:	f7ff ff67 	bl	8001b90 <get_adc_value_conver_to_lux>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4b32      	ldr	r3, [pc, #200]	; (8001d90 <en_measurements_and_responses+0x124>)
 8001cc8:	801a      	strh	r2, [r3, #0]
	  snprintf(g_lxd_value, sizeof(g_lxd_value), "%05d",g_get_lxd_value);
 8001cca:	4b31      	ldr	r3, [pc, #196]	; (8001d90 <en_measurements_and_responses+0x124>)
 8001ccc:	881b      	ldrh	r3, [r3, #0]
 8001cce:	4a31      	ldr	r2, [pc, #196]	; (8001d94 <en_measurements_and_responses+0x128>)
 8001cd0:	2106      	movs	r1, #6
 8001cd2:	4831      	ldr	r0, [pc, #196]	; (8001d98 <en_measurements_and_responses+0x12c>)
 8001cd4:	f006 fdb6 	bl	8008844 <sniprintf>

	  // DIGITAL SENSOR CALIBRATION
	  g_lmt01_sens_temp =  (uint16_t)g_TO1_temp ;
 8001cd8:	4b30      	ldr	r3, [pc, #192]	; (8001d9c <en_measurements_and_responses+0x130>)
 8001cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cde:	4610      	mov	r0, r2
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	f7fe ff69 	bl	8000bb8 <__aeabi_d2uiz>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	4b2d      	ldr	r3, [pc, #180]	; (8001da0 <en_measurements_and_responses+0x134>)
 8001cec:	801a      	strh	r2, [r3, #0]
	  store_temp_in_string(g_lmt01_sens_temp, dig_sens_temp, LEN) ;
 8001cee:	4b2c      	ldr	r3, [pc, #176]	; (8001da0 <en_measurements_and_responses+0x134>)
 8001cf0:	881b      	ldrh	r3, [r3, #0]
 8001cf2:	2203      	movs	r2, #3
 8001cf4:	492b      	ldr	r1, [pc, #172]	; (8001da4 <en_measurements_and_responses+0x138>)
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff fb1c 	bl	8001334 <store_temp_in_string>

	  //re-prime system state update
	  if(g_transmit_system_state ==0){
 8001cfc:	4b2a      	ldr	r3, [pc, #168]	; (8001da8 <en_measurements_and_responses+0x13c>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d102      	bne.n	8001d0a <en_measurements_and_responses+0x9e>
		  g_transmit_system_state =1; //send the system state again
 8001d04:	4b28      	ldr	r3, [pc, #160]	; (8001da8 <en_measurements_and_responses+0x13c>)
 8001d06:	2201      	movs	r2, #1
 8001d08:	701a      	strb	r2, [r3, #0]

	  }

	  //Flash D3 LED -> put in function
	  flash_led_d3();
 8001d0a:	f7ff fe3d 	bl	8001988 <flash_led_d3>
		  HAL_UART_Transmit_IT(&huart2, (uint8_t*)system_state_transmit, 18);

	  }

	}
}
 8001d0e:	e030      	b.n	8001d72 <en_measurements_and_responses+0x106>
	else if(g_EN_measure == 2){
 8001d10:	4b19      	ldr	r3, [pc, #100]	; (8001d78 <en_measurements_and_responses+0x10c>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d12c      	bne.n	8001d72 <en_measurements_and_responses+0x106>
		g_EN_measure = 0;
 8001d18:	4b17      	ldr	r3, [pc, #92]	; (8001d78 <en_measurements_and_responses+0x10c>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	701a      	strb	r2, [r3, #0]
		 Lcd_clear(&lcd);
 8001d1e:	4823      	ldr	r0, [pc, #140]	; (8001dac <en_measurements_and_responses+0x140>)
 8001d20:	f7ff f9ca 	bl	80010b8 <Lcd_clear>
		g_EN_measure_LCD_display =  1 ;
 8001d24:	4b22      	ldr	r3, [pc, #136]	; (8001db0 <en_measurements_and_responses+0x144>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	701a      	strb	r2, [r3, #0]
		g_SP_measure_LCD_diplay = 0 ; //dont display SP measurements
 8001d2a:	4b22      	ldr	r3, [pc, #136]	; (8001db4 <en_measurements_and_responses+0x148>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET) ;
 8001d30:	2201      	movs	r2, #1
 8001d32:	2120      	movs	r1, #32
 8001d34:	4820      	ldr	r0, [pc, #128]	; (8001db8 <en_measurements_and_responses+0x14c>)
 8001d36:	f003 f919 	bl	8004f6c <HAL_GPIO_WritePin>
	  snprintf(system_state_transmit,sizeof(system_state_transmit),"&_%03d_%03d_%05d_*\n",g_temp_in_deg,g_lmt01_sens_temp, g_get_lxd_value );
 8001d3a:	4b13      	ldr	r3, [pc, #76]	; (8001d88 <en_measurements_and_responses+0x11c>)
 8001d3c:	881b      	ldrh	r3, [r3, #0]
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4b17      	ldr	r3, [pc, #92]	; (8001da0 <en_measurements_and_responses+0x134>)
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	461a      	mov	r2, r3
 8001d46:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <en_measurements_and_responses+0x124>)
 8001d48:	881b      	ldrh	r3, [r3, #0]
 8001d4a:	9301      	str	r3, [sp, #4]
 8001d4c:	9200      	str	r2, [sp, #0]
 8001d4e:	460b      	mov	r3, r1
 8001d50:	4a1a      	ldr	r2, [pc, #104]	; (8001dbc <en_measurements_and_responses+0x150>)
 8001d52:	2113      	movs	r1, #19
 8001d54:	481a      	ldr	r0, [pc, #104]	; (8001dc0 <en_measurements_and_responses+0x154>)
 8001d56:	f006 fd75 	bl	8008844 <sniprintf>
	  if(g_transmit_system_state  == 1){
 8001d5a:	4b13      	ldr	r3, [pc, #76]	; (8001da8 <en_measurements_and_responses+0x13c>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d107      	bne.n	8001d72 <en_measurements_and_responses+0x106>
		  g_transmit_system_state = 0;
 8001d62:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <en_measurements_and_responses+0x13c>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit_IT(&huart2, (uint8_t*)system_state_transmit, 18);
 8001d68:	2212      	movs	r2, #18
 8001d6a:	4915      	ldr	r1, [pc, #84]	; (8001dc0 <en_measurements_and_responses+0x154>)
 8001d6c:	4815      	ldr	r0, [pc, #84]	; (8001dc4 <en_measurements_and_responses+0x158>)
 8001d6e:	f005 f95e 	bl	800702e <HAL_UART_Transmit_IT>
}
 8001d72:	bf00      	nop
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	2000043b 	.word	0x2000043b
 8001d7c:	200004fb 	.word	0x200004fb
 8001d80:	20000449 	.word	0x20000449
 8001d84:	200004f8 	.word	0x200004f8
 8001d88:	20000380 	.word	0x20000380
 8001d8c:	20000384 	.word	0x20000384
 8001d90:	20000398 	.word	0x20000398
 8001d94:	0800bbdc 	.word	0x0800bbdc
 8001d98:	2000039c 	.word	0x2000039c
 8001d9c:	20000388 	.word	0x20000388
 8001da0:	200004de 	.word	0x200004de
 8001da4:	200004e0 	.word	0x200004e0
 8001da8:	20000012 	.word	0x20000012
 8001dac:	20000488 	.word	0x20000488
 8001db0:	2000043c 	.word	0x2000043c
 8001db4:	20000447 	.word	0x20000447
 8001db8:	40020400 	.word	0x40020400
 8001dbc:	0800bbe4 	.word	0x0800bbe4
 8001dc0:	2000045c 	.word	0x2000045c
 8001dc4:	20000324 	.word	0x20000324

08001dc8 <sp_measurements_and_responses>:
/**
 * This funtion performs the measurement for UR2: Photocvoltaic measurements.
 * It measures the PV voltage, PV current, PV power and PV efficiency,
 * Measurements and responses, transmitted to UART and LCD
 */
void sp_measurements_and_responses(){
 8001dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001dcc:	b086      	sub	sp, #24
 8001dce:	af06      	add	r7, sp, #24
	  if(g_SP_measure == 1){
 8001dd0:	4b9d      	ldr	r3, [pc, #628]	; (8002048 <sp_measurements_and_responses+0x280>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	f040 8175 	bne.w	80020c4 <sp_measurements_and_responses+0x2fc>

		// ignore top button and left button press and EN command while measuring
		if(g_top_button_pressed ==1 || g_EN_config_command_rcvd ==1 || g_left_button_pressed ==1){
 8001dda:	4b9c      	ldr	r3, [pc, #624]	; (800204c <sp_measurements_and_responses+0x284>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d007      	beq.n	8001df2 <sp_measurements_and_responses+0x2a>
 8001de2:	4b9b      	ldr	r3, [pc, #620]	; (8002050 <sp_measurements_and_responses+0x288>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d003      	beq.n	8001df2 <sp_measurements_and_responses+0x2a>
 8001dea:	4b9a      	ldr	r3, [pc, #616]	; (8002054 <sp_measurements_and_responses+0x28c>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d108      	bne.n	8001e04 <sp_measurements_and_responses+0x3c>
		  g_top_button_pressed = 0 ;
 8001df2:	4b96      	ldr	r3, [pc, #600]	; (800204c <sp_measurements_and_responses+0x284>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	701a      	strb	r2, [r3, #0]
		  g_EN_config_command_rcvd = 0;
 8001df8:	4b95      	ldr	r3, [pc, #596]	; (8002050 <sp_measurements_and_responses+0x288>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	701a      	strb	r2, [r3, #0]
		  g_left_button_pressed = 0;
 8001dfe:	4b95      	ldr	r3, [pc, #596]	; (8002054 <sp_measurements_and_responses+0x28c>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	701a      	strb	r2, [r3, #0]
		}

		//reprime state transmission
		if(g_transmit_SP_system_state == 0){
 8001e04:	4b94      	ldr	r3, [pc, #592]	; (8002058 <sp_measurements_and_responses+0x290>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d102      	bne.n	8001e12 <sp_measurements_and_responses+0x4a>
			g_transmit_SP_system_state = 1;
 8001e0c:	4b92      	ldr	r3, [pc, #584]	; (8002058 <sp_measurements_and_responses+0x290>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	701a      	strb	r2, [r3, #0]
		}
		//PV panel data points measure
		g_PV_vol1 = get_pv_panel_adc2_input() ; //Voc = Vsp
 8001e12:	f000 fb05 	bl	8002420 <get_pv_panel_adc2_input>
 8001e16:	4603      	mov	r3, r0
 8001e18:	461a      	mov	r2, r3
 8001e1a:	4b90      	ldr	r3, [pc, #576]	; (800205c <sp_measurements_and_responses+0x294>)
 8001e1c:	801a      	strh	r2, [r3, #0]
		//*ADC input(2) Vb = V_var
		g_PV_vol2= get_pv_panel_adc1_input() ;
 8001e1e:	f000 fa9f 	bl	8002360 <get_pv_panel_adc1_input>
 8001e22:	4603      	mov	r3, r0
 8001e24:	461a      	mov	r2, r3
 8001e26:	4b8e      	ldr	r3, [pc, #568]	; (8002060 <sp_measurements_and_responses+0x298>)
 8001e28:	801a      	strh	r2, [r3, #0]

		//GET VALUES
		//Voc measure - Voc, vpv
		if(g_PV_vol1 > g_prev_v_pv){
 8001e2a:	4b8c      	ldr	r3, [pc, #560]	; (800205c <sp_measurements_and_responses+0x294>)
 8001e2c:	881a      	ldrh	r2, [r3, #0]
 8001e2e:	4b8d      	ldr	r3, [pc, #564]	; (8002064 <sp_measurements_and_responses+0x29c>)
 8001e30:	881b      	ldrh	r3, [r3, #0]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d907      	bls.n	8001e46 <sp_measurements_and_responses+0x7e>
		  g_prev_v_pv = g_PV_vol1 ;
 8001e36:	4b89      	ldr	r3, [pc, #548]	; (800205c <sp_measurements_and_responses+0x294>)
 8001e38:	881a      	ldrh	r2, [r3, #0]
 8001e3a:	4b8a      	ldr	r3, [pc, #552]	; (8002064 <sp_measurements_and_responses+0x29c>)
 8001e3c:	801a      	strh	r2, [r3, #0]
		  //capture maximum open circuit voltage
		  g_v_oc_pv = g_PV_vol1 ;
 8001e3e:	4b87      	ldr	r3, [pc, #540]	; (800205c <sp_measurements_and_responses+0x294>)
 8001e40:	881a      	ldrh	r2, [r3, #0]
 8001e42:	4b89      	ldr	r3, [pc, #548]	; (8002068 <sp_measurements_and_responses+0x2a0>)
 8001e44:	801a      	strh	r2, [r3, #0]
//			g_i_pv = g_i_pv ; //dont update current
//		}



		if(g_PV_vol1 - g_PV_vol2 >0){
 8001e46:	4b85      	ldr	r3, [pc, #532]	; (800205c <sp_measurements_and_responses+0x294>)
 8001e48:	881b      	ldrh	r3, [r3, #0]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	4b84      	ldr	r3, [pc, #528]	; (8002060 <sp_measurements_and_responses+0x298>)
 8001e4e:	881b      	ldrh	r3, [r3, #0]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	dd17      	ble.n	8001e86 <sp_measurements_and_responses+0xbe>
			if((g_PV_vol1 - g_PV_vol2) - prev_panel_current <30 ){
 8001e56:	4b81      	ldr	r3, [pc, #516]	; (800205c <sp_measurements_and_responses+0x294>)
 8001e58:	881b      	ldrh	r3, [r3, #0]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	4b80      	ldr	r3, [pc, #512]	; (8002060 <sp_measurements_and_responses+0x298>)
 8001e5e:	881b      	ldrh	r3, [r3, #0]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	4a82      	ldr	r2, [pc, #520]	; (800206c <sp_measurements_and_responses+0x2a4>)
 8001e64:	8812      	ldrh	r2, [r2, #0]
 8001e66:	1a9b      	subs	r3, r3, r2
 8001e68:	2b1d      	cmp	r3, #29
 8001e6a:	dc10      	bgt.n	8001e8e <sp_measurements_and_responses+0xc6>
				g_i_pv = g_PV_vol1 - g_PV_vol2 ;
 8001e6c:	4b7b      	ldr	r3, [pc, #492]	; (800205c <sp_measurements_and_responses+0x294>)
 8001e6e:	881a      	ldrh	r2, [r3, #0]
 8001e70:	4b7b      	ldr	r3, [pc, #492]	; (8002060 <sp_measurements_and_responses+0x298>)
 8001e72:	881b      	ldrh	r3, [r3, #0]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	4b7d      	ldr	r3, [pc, #500]	; (8002070 <sp_measurements_and_responses+0x2a8>)
 8001e7a:	801a      	strh	r2, [r3, #0]

				prev_panel_current = g_i_pv ;
 8001e7c:	4b7c      	ldr	r3, [pc, #496]	; (8002070 <sp_measurements_and_responses+0x2a8>)
 8001e7e:	881a      	ldrh	r2, [r3, #0]
 8001e80:	4b7a      	ldr	r3, [pc, #488]	; (800206c <sp_measurements_and_responses+0x2a4>)
 8001e82:	801a      	strh	r2, [r3, #0]
 8001e84:	e003      	b.n	8001e8e <sp_measurements_and_responses+0xc6>
			}
		}
		else{
			g_i_pv = g_i_pv ; //dont update current
 8001e86:	4b7a      	ldr	r3, [pc, #488]	; (8002070 <sp_measurements_and_responses+0x2a8>)
 8001e88:	881a      	ldrh	r2, [r3, #0]
 8001e8a:	4b79      	ldr	r3, [pc, #484]	; (8002070 <sp_measurements_and_responses+0x2a8>)
 8001e8c:	801a      	strh	r2, [r3, #0]
		}
		//power measure - multiply by 1000, to get result in mW
		g_p_pv = ( (g_PV_vol1 * g_i_pv)/1000000.0) *1000;
 8001e8e:	4b73      	ldr	r3, [pc, #460]	; (800205c <sp_measurements_and_responses+0x294>)
 8001e90:	881b      	ldrh	r3, [r3, #0]
 8001e92:	461a      	mov	r2, r3
 8001e94:	4b76      	ldr	r3, [pc, #472]	; (8002070 <sp_measurements_and_responses+0x2a8>)
 8001e96:	881b      	ldrh	r3, [r3, #0]
 8001e98:	fb02 f303 	mul.w	r3, r2, r3
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7fe fb49 	bl	8000534 <__aeabi_i2d>
 8001ea2:	a365      	add	r3, pc, #404	; (adr r3, 8002038 <sp_measurements_and_responses+0x270>)
 8001ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea8:	f7fe fcd8 	bl	800085c <__aeabi_ddiv>
 8001eac:	4602      	mov	r2, r0
 8001eae:	460b      	mov	r3, r1
 8001eb0:	4610      	mov	r0, r2
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	f04f 0200 	mov.w	r2, #0
 8001eb8:	4b6e      	ldr	r3, [pc, #440]	; (8002074 <sp_measurements_and_responses+0x2ac>)
 8001eba:	f7fe fba5 	bl	8000608 <__aeabi_dmul>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	4610      	mov	r0, r2
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	f7fe fe97 	bl	8000bf8 <__aeabi_d2f>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	4a6a      	ldr	r2, [pc, #424]	; (8002078 <sp_measurements_and_responses+0x2b0>)
 8001ece:	6013      	str	r3, [r2, #0]


		/*mpp values measure using power -Pmpp, Vmpp, Impp*/
		//check is power increasing
		if(g_p_pv > g_prev_p_pv ){
 8001ed0:	4b69      	ldr	r3, [pc, #420]	; (8002078 <sp_measurements_and_responses+0x2b0>)
 8001ed2:	ed93 7a00 	vldr	s14, [r3]
 8001ed6:	4b69      	ldr	r3, [pc, #420]	; (800207c <sp_measurements_and_responses+0x2b4>)
 8001ed8:	edd3 7a00 	vldr	s15, [r3]
 8001edc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee4:	dd66      	ble.n	8001fb4 <sp_measurements_and_responses+0x1ec>
			//calibrate measured power
			g_p_mpp = g_p_pv ;
 8001ee6:	4b64      	ldr	r3, [pc, #400]	; (8002078 <sp_measurements_and_responses+0x2b0>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a65      	ldr	r2, [pc, #404]	; (8002080 <sp_measurements_and_responses+0x2b8>)
 8001eec:	6013      	str	r3, [r2, #0]
//			g_p_mpp =  get_calibrated_power(g_get_lxd_value, g_lmt01_sens_temp, g_p_pv) ; //calibrated power

			g_p_mpp_calibrated =( g_p_mpp/(1+(-.004)*(g_lmt01_sens_temp-25)))*lux_at_calibration/g_get_lxd_value ;
 8001eee:	4b64      	ldr	r3, [pc, #400]	; (8002080 <sp_measurements_and_responses+0x2b8>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7fe fb30 	bl	8000558 <__aeabi_f2d>
 8001ef8:	4604      	mov	r4, r0
 8001efa:	460d      	mov	r5, r1
 8001efc:	4b61      	ldr	r3, [pc, #388]	; (8002084 <sp_measurements_and_responses+0x2bc>)
 8001efe:	881b      	ldrh	r3, [r3, #0]
 8001f00:	3b19      	subs	r3, #25
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7fe fb16 	bl	8000534 <__aeabi_i2d>
 8001f08:	a34d      	add	r3, pc, #308	; (adr r3, 8002040 <sp_measurements_and_responses+0x278>)
 8001f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0e:	f7fe fb7b 	bl	8000608 <__aeabi_dmul>
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	4610      	mov	r0, r2
 8001f18:	4619      	mov	r1, r3
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	4b5a      	ldr	r3, [pc, #360]	; (8002088 <sp_measurements_and_responses+0x2c0>)
 8001f20:	f7fe f9bc 	bl	800029c <__adddf3>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	4620      	mov	r0, r4
 8001f2a:	4629      	mov	r1, r5
 8001f2c:	f7fe fc96 	bl	800085c <__aeabi_ddiv>
 8001f30:	4602      	mov	r2, r0
 8001f32:	460b      	mov	r3, r1
 8001f34:	4614      	mov	r4, r2
 8001f36:	461d      	mov	r5, r3
 8001f38:	4b54      	ldr	r3, [pc, #336]	; (800208c <sp_measurements_and_responses+0x2c4>)
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7fe faf9 	bl	8000534 <__aeabi_i2d>
 8001f42:	4602      	mov	r2, r0
 8001f44:	460b      	mov	r3, r1
 8001f46:	4620      	mov	r0, r4
 8001f48:	4629      	mov	r1, r5
 8001f4a:	f7fe fb5d 	bl	8000608 <__aeabi_dmul>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	460b      	mov	r3, r1
 8001f52:	4614      	mov	r4, r2
 8001f54:	461d      	mov	r5, r3
 8001f56:	4b4e      	ldr	r3, [pc, #312]	; (8002090 <sp_measurements_and_responses+0x2c8>)
 8001f58:	881b      	ldrh	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7fe faea 	bl	8000534 <__aeabi_i2d>
 8001f60:	4602      	mov	r2, r0
 8001f62:	460b      	mov	r3, r1
 8001f64:	4620      	mov	r0, r4
 8001f66:	4629      	mov	r1, r5
 8001f68:	f7fe fc78 	bl	800085c <__aeabi_ddiv>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	460b      	mov	r3, r1
 8001f70:	4610      	mov	r0, r2
 8001f72:	4619      	mov	r1, r3
 8001f74:	f7fe fe40 	bl	8000bf8 <__aeabi_d2f>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	4a46      	ldr	r2, [pc, #280]	; (8002094 <sp_measurements_and_responses+0x2cc>)
 8001f7c:	6013      	str	r3, [r2, #0]
			g_v_mpp = g_PV_vol1 ;
 8001f7e:	4b37      	ldr	r3, [pc, #220]	; (800205c <sp_measurements_and_responses+0x294>)
 8001f80:	881a      	ldrh	r2, [r3, #0]
 8001f82:	4b45      	ldr	r3, [pc, #276]	; (8002098 <sp_measurements_and_responses+0x2d0>)
 8001f84:	801a      	strh	r2, [r3, #0]
			g_i_mpp = g_i_pv ;
 8001f86:	4b3a      	ldr	r3, [pc, #232]	; (8002070 <sp_measurements_and_responses+0x2a8>)
 8001f88:	881a      	ldrh	r2, [r3, #0]
 8001f8a:	4b44      	ldr	r3, [pc, #272]	; (800209c <sp_measurements_and_responses+0x2d4>)
 8001f8c:	801a      	strh	r2, [r3, #0]
			g_pv_eff = (calibrated_power/g_p_mpp_calibrated)*100 ;
 8001f8e:	4b44      	ldr	r3, [pc, #272]	; (80020a0 <sp_measurements_and_responses+0x2d8>)
 8001f90:	edd3 6a00 	vldr	s13, [r3]
 8001f94:	4b3f      	ldr	r3, [pc, #252]	; (8002094 <sp_measurements_and_responses+0x2cc>)
 8001f96:	ed93 7a00 	vldr	s14, [r3]
 8001f9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f9e:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80020a4 <sp_measurements_and_responses+0x2dc>
 8001fa2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fa6:	4b40      	ldr	r3, [pc, #256]	; (80020a8 <sp_measurements_and_responses+0x2e0>)
 8001fa8:	edc3 7a00 	vstr	s15, [r3]
			g_prev_p_pv = g_p_pv ;
 8001fac:	4b32      	ldr	r3, [pc, #200]	; (8002078 <sp_measurements_and_responses+0x2b0>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a32      	ldr	r2, [pc, #200]	; (800207c <sp_measurements_and_responses+0x2b4>)
 8001fb2:	6013      	str	r3, [r2, #0]
		}

		if(clear_lcd_display == 1){
 8001fb4:	4b3d      	ldr	r3, [pc, #244]	; (80020ac <sp_measurements_and_responses+0x2e4>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d105      	bne.n	8001fc8 <sp_measurements_and_responses+0x200>
			clear_lcd_display = 0;
 8001fbc:	4b3b      	ldr	r3, [pc, #236]	; (80020ac <sp_measurements_and_responses+0x2e4>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	701a      	strb	r2, [r3, #0]
			Lcd_clear(&lcd);
 8001fc2:	483b      	ldr	r0, [pc, #236]	; (80020b0 <sp_measurements_and_responses+0x2e8>)
 8001fc4:	f7ff f878 	bl	80010b8 <Lcd_clear>
		}
		//LCD write - real-time measured Vpv (mV), Ipv (mA), Ppv (mW), Peff = 0 while measuring
		//write to lcd - //row 1
		Lcd_cursor(&lcd, 0, 0) ;
 8001fc8:	2200      	movs	r2, #0
 8001fca:	2100      	movs	r1, #0
 8001fcc:	4838      	ldr	r0, [pc, #224]	; (80020b0 <sp_measurements_and_responses+0x2e8>)
 8001fce:	f7ff f859 	bl	8001084 <Lcd_cursor>
		snprintf(g_panel_voltage_and_current, sizeof(g_panel_voltage_and_current),"V:%04dmV I:%03dmA",g_PV_vol1,g_i_pv);
 8001fd2:	4b22      	ldr	r3, [pc, #136]	; (800205c <sp_measurements_and_responses+0x294>)
 8001fd4:	881b      	ldrh	r3, [r3, #0]
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	4b25      	ldr	r3, [pc, #148]	; (8002070 <sp_measurements_and_responses+0x2a8>)
 8001fda:	881b      	ldrh	r3, [r3, #0]
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	4a34      	ldr	r2, [pc, #208]	; (80020b4 <sp_measurements_and_responses+0x2ec>)
 8001fe2:	2111      	movs	r1, #17
 8001fe4:	4834      	ldr	r0, [pc, #208]	; (80020b8 <sp_measurements_and_responses+0x2f0>)
 8001fe6:	f006 fc2d 	bl	8008844 <sniprintf>
		Lcd_string(&lcd, g_panel_voltage_and_current);
 8001fea:	4933      	ldr	r1, [pc, #204]	; (80020b8 <sp_measurements_and_responses+0x2f0>)
 8001fec:	4830      	ldr	r0, [pc, #192]	; (80020b0 <sp_measurements_and_responses+0x2e8>)
 8001fee:	f7ff f829 	bl	8001044 <Lcd_string>

		//2nd row
		Lcd_cursor(&lcd, 1, 0) ;
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	482e      	ldr	r0, [pc, #184]	; (80020b0 <sp_measurements_and_responses+0x2e8>)
 8001ff8:	f7ff f844 	bl	8001084 <Lcd_cursor>
		snprintf(g_panel_power_and_efficiency, sizeof(g_panel_power_and_efficiency),"P: %03.0fmW E:%03.0f%%",g_p_mpp_calibrated, g_pv_eff);
 8001ffc:	4b25      	ldr	r3, [pc, #148]	; (8002094 <sp_measurements_and_responses+0x2cc>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4618      	mov	r0, r3
 8002002:	f7fe faa9 	bl	8000558 <__aeabi_f2d>
 8002006:	4604      	mov	r4, r0
 8002008:	460d      	mov	r5, r1
 800200a:	4b27      	ldr	r3, [pc, #156]	; (80020a8 <sp_measurements_and_responses+0x2e0>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f7fe faa2 	bl	8000558 <__aeabi_f2d>
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800201c:	e9cd 4500 	strd	r4, r5, [sp]
 8002020:	4a26      	ldr	r2, [pc, #152]	; (80020bc <sp_measurements_and_responses+0x2f4>)
 8002022:	2111      	movs	r1, #17
 8002024:	4826      	ldr	r0, [pc, #152]	; (80020c0 <sp_measurements_and_responses+0x2f8>)
 8002026:	f006 fc0d 	bl	8008844 <sniprintf>
		Lcd_string(&lcd, g_panel_power_and_efficiency);
 800202a:	4925      	ldr	r1, [pc, #148]	; (80020c0 <sp_measurements_and_responses+0x2f8>)
 800202c:	4820      	ldr	r0, [pc, #128]	; (80020b0 <sp_measurements_and_responses+0x2e8>)
 800202e:	f7ff f809 	bl	8001044 <Lcd_string>

		//Flash D2 LED
		flash_led_d2() ;
 8002032:	f7ff fce1 	bl	80019f8 <flash_led_d2>
			  //transmit over UART
			  HAL_UART_Transmit_IT(&huart2,(uint8_t*)system_state_SP_transmit, 21) ;

		  }
	  }
}
 8002036:	e082      	b.n	800213e <sp_measurements_and_responses+0x376>
 8002038:	00000000 	.word	0x00000000
 800203c:	412e8480 	.word	0x412e8480
 8002040:	d2f1a9fc 	.word	0xd2f1a9fc
 8002044:	bf70624d 	.word	0xbf70624d
 8002048:	20000446 	.word	0x20000446
 800204c:	200004fa 	.word	0x200004fa
 8002050:	20000445 	.word	0x20000445
 8002054:	200004f8 	.word	0x200004f8
 8002058:	20000013 	.word	0x20000013
 800205c:	200003d4 	.word	0x200003d4
 8002060:	200003dc 	.word	0x200003dc
 8002064:	200003d8 	.word	0x200003d8
 8002068:	200003d6 	.word	0x200003d6
 800206c:	200003da 	.word	0x200003da
 8002070:	200003b8 	.word	0x200003b8
 8002074:	408f4000 	.word	0x408f4000
 8002078:	200003bc 	.word	0x200003bc
 800207c:	200003c0 	.word	0x200003c0
 8002080:	200003c8 	.word	0x200003c8
 8002084:	200004de 	.word	0x200004de
 8002088:	3ff00000 	.word	0x3ff00000
 800208c:	20000450 	.word	0x20000450
 8002090:	20000398 	.word	0x20000398
 8002094:	200003cc 	.word	0x200003cc
 8002098:	200003c4 	.word	0x200003c4
 800209c:	200003c6 	.word	0x200003c6
 80020a0:	20000454 	.word	0x20000454
 80020a4:	42c80000 	.word	0x42c80000
 80020a8:	200003d0 	.word	0x200003d0
 80020ac:	20000015 	.word	0x20000015
 80020b0:	20000488 	.word	0x20000488
 80020b4:	0800bbf8 	.word	0x0800bbf8
 80020b8:	200003ec 	.word	0x200003ec
 80020bc:	0800bc0c 	.word	0x0800bc0c
 80020c0:	20000414 	.word	0x20000414
	  else if(g_SP_measure == 2){
 80020c4:	4b20      	ldr	r3, [pc, #128]	; (8002148 <sp_measurements_and_responses+0x380>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d138      	bne.n	800213e <sp_measurements_and_responses+0x376>
		  g_SP_measure = 0;
 80020cc:	4b1e      	ldr	r3, [pc, #120]	; (8002148 <sp_measurements_and_responses+0x380>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	701a      	strb	r2, [r3, #0]
		  g_SP_measure_LCD_diplay =  1;
 80020d2:	4b1e      	ldr	r3, [pc, #120]	; (800214c <sp_measurements_and_responses+0x384>)
 80020d4:	2201      	movs	r2, #1
 80020d6:	701a      	strb	r2, [r3, #0]
		  g_EN_measure_LCD_display = 0; //dont diplay EN measurements
 80020d8:	4b1d      	ldr	r3, [pc, #116]	; (8002150 <sp_measurements_and_responses+0x388>)
 80020da:	2200      	movs	r2, #0
 80020dc:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET) ;
 80020de:	2201      	movs	r2, #1
 80020e0:	2110      	movs	r1, #16
 80020e2:	481c      	ldr	r0, [pc, #112]	; (8002154 <sp_measurements_and_responses+0x38c>)
 80020e4:	f002 ff42 	bl	8004f6c <HAL_GPIO_WritePin>
		  snprintf(system_state_SP_transmit,sizeof(system_state_SP_transmit), "&_%04d_%03d_%03.0f_%03.0f_*\n",g_v_mpp,g_i_mpp,g_p_mpp,g_pv_eff);
 80020e8:	4b1b      	ldr	r3, [pc, #108]	; (8002158 <sp_measurements_and_responses+0x390>)
 80020ea:	881b      	ldrh	r3, [r3, #0]
 80020ec:	4698      	mov	r8, r3
 80020ee:	4b1b      	ldr	r3, [pc, #108]	; (800215c <sp_measurements_and_responses+0x394>)
 80020f0:	881b      	ldrh	r3, [r3, #0]
 80020f2:	461e      	mov	r6, r3
 80020f4:	4b1a      	ldr	r3, [pc, #104]	; (8002160 <sp_measurements_and_responses+0x398>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7fe fa2d 	bl	8000558 <__aeabi_f2d>
 80020fe:	4604      	mov	r4, r0
 8002100:	460d      	mov	r5, r1
 8002102:	4b18      	ldr	r3, [pc, #96]	; (8002164 <sp_measurements_and_responses+0x39c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f7fe fa26 	bl	8000558 <__aeabi_f2d>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002114:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002118:	9600      	str	r6, [sp, #0]
 800211a:	4643      	mov	r3, r8
 800211c:	4a12      	ldr	r2, [pc, #72]	; (8002168 <sp_measurements_and_responses+0x3a0>)
 800211e:	2116      	movs	r1, #22
 8002120:	4812      	ldr	r0, [pc, #72]	; (800216c <sp_measurements_and_responses+0x3a4>)
 8002122:	f006 fb8f 	bl	8008844 <sniprintf>
		  if(g_transmit_SP_system_state == 1){
 8002126:	4b12      	ldr	r3, [pc, #72]	; (8002170 <sp_measurements_and_responses+0x3a8>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d107      	bne.n	800213e <sp_measurements_and_responses+0x376>
			  g_transmit_SP_system_state = 0 ;
 800212e:	4b10      	ldr	r3, [pc, #64]	; (8002170 <sp_measurements_and_responses+0x3a8>)
 8002130:	2200      	movs	r2, #0
 8002132:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit_IT(&huart2,(uint8_t*)system_state_SP_transmit, 21) ;
 8002134:	2215      	movs	r2, #21
 8002136:	490d      	ldr	r1, [pc, #52]	; (800216c <sp_measurements_and_responses+0x3a4>)
 8002138:	480e      	ldr	r0, [pc, #56]	; (8002174 <sp_measurements_and_responses+0x3ac>)
 800213a:	f004 ff78 	bl	800702e <HAL_UART_Transmit_IT>
}
 800213e:	bf00      	nop
 8002140:	46bd      	mov	sp, r7
 8002142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002146:	bf00      	nop
 8002148:	20000446 	.word	0x20000446
 800214c:	20000447 	.word	0x20000447
 8002150:	2000043c 	.word	0x2000043c
 8002154:	40020400 	.word	0x40020400
 8002158:	200003c4 	.word	0x200003c4
 800215c:	200003c6 	.word	0x200003c6
 8002160:	200003c8 	.word	0x200003c8
 8002164:	200003d0 	.word	0x200003d0
 8002168:	0800bc24 	.word	0x0800bc24
 800216c:	20000470 	.word	0x20000470
 8002170:	20000013 	.word	0x20000013
 8002174:	20000324 	.word	0x20000324

08002178 <ca_measurements_and_responses>:

/**
 * Function gets the EN and SP measurements
 */

void ca_measurements_and_responses(){
 8002178:	b5b0      	push	{r4, r5, r7, lr}
 800217a:	af00      	add	r7, sp, #0

	if(g_CA_measure == 1){ // find calibrated measurements
 800217c:	4b6a      	ldr	r3, [pc, #424]	; (8002328 <ca_measurements_and_responses+0x1b0>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b01      	cmp	r3, #1
 8002182:	f040 80bd 	bne.w	8002300 <ca_measurements_and_responses+0x188>
		if(cal_entered == 1){
 8002186:	4b69      	ldr	r3, [pc, #420]	; (800232c <ca_measurements_and_responses+0x1b4>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d10c      	bne.n	80021a8 <ca_measurements_and_responses+0x30>
			cal_entered = 0 ;
 800218e:	4b67      	ldr	r3, [pc, #412]	; (800232c <ca_measurements_and_responses+0x1b4>)
 8002190:	2200      	movs	r2, #0
 8002192:	701a      	strb	r2, [r3, #0]
			calibration_time_passed =  HAL_GetTick() ;
 8002194:	f001 ff88 	bl	80040a8 <HAL_GetTick>
 8002198:	4603      	mov	r3, r0
 800219a:	4a65      	ldr	r2, [pc, #404]	; (8002330 <ca_measurements_and_responses+0x1b8>)
 800219c:	6013      	str	r3, [r2, #0]
			g_time_passed = HAL_GetTick() ;
 800219e:	f001 ff83 	bl	80040a8 <HAL_GetTick>
 80021a2:	4603      	mov	r3, r0
 80021a4:	4a63      	ldr	r2, [pc, #396]	; (8002334 <ca_measurements_and_responses+0x1bc>)
 80021a6:	6013      	str	r3, [r2, #0]
		}

		flash_led_d4() ;
 80021a8:	f7ff fc5e 	bl	8001a68 <flash_led_d4>


		if(HAL_GetTick() - calibration_time_passed <3000){
 80021ac:	f001 ff7c 	bl	80040a8 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	4b5f      	ldr	r3, [pc, #380]	; (8002330 <ca_measurements_and_responses+0x1b8>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80021bc:	4293      	cmp	r3, r2
 80021be:	d803      	bhi.n	80021c8 <ca_measurements_and_responses+0x50>
			g_EN_measure =1;
 80021c0:	4b5d      	ldr	r3, [pc, #372]	; (8002338 <ca_measurements_and_responses+0x1c0>)
 80021c2:	2201      	movs	r2, #1
 80021c4:	701a      	strb	r2, [r3, #0]
	//calibration ended - after 8s
	else if(g_CA_measure == 2){
//		g_CA_measure = 0; //perform next calibration if needed
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET) ;
	}
}
 80021c6:	e0a6      	b.n	8002316 <ca_measurements_and_responses+0x19e>
		else if((HAL_GetTick() - calibration_time_passed > 3000) && (HAL_GetTick() - calibration_time_passed< 4000) && g_EN_measure == 1){
 80021c8:	f001 ff6e 	bl	80040a8 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	4b58      	ldr	r3, [pc, #352]	; (8002330 <ca_measurements_and_responses+0x1b8>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80021d8:	4293      	cmp	r3, r2
 80021da:	d910      	bls.n	80021fe <ca_measurements_and_responses+0x86>
 80021dc:	f001 ff64 	bl	80040a8 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	4b53      	ldr	r3, [pc, #332]	; (8002330 <ca_measurements_and_responses+0x1b8>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80021ec:	d207      	bcs.n	80021fe <ca_measurements_and_responses+0x86>
 80021ee:	4b52      	ldr	r3, [pc, #328]	; (8002338 <ca_measurements_and_responses+0x1c0>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d103      	bne.n	80021fe <ca_measurements_and_responses+0x86>
			g_EN_measure =2;
 80021f6:	4b50      	ldr	r3, [pc, #320]	; (8002338 <ca_measurements_and_responses+0x1c0>)
 80021f8:	2202      	movs	r2, #2
 80021fa:	701a      	strb	r2, [r3, #0]
 80021fc:	e08b      	b.n	8002316 <ca_measurements_and_responses+0x19e>
		else if((HAL_GetTick() - calibration_time_passed > 4000) && (HAL_GetTick() - calibration_time_passed< 7000)){
 80021fe:	f001 ff53 	bl	80040a8 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	4b4a      	ldr	r3, [pc, #296]	; (8002330 <ca_measurements_and_responses+0x1b8>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800220e:	d90d      	bls.n	800222c <ca_measurements_and_responses+0xb4>
 8002210:	f001 ff4a 	bl	80040a8 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	4b46      	ldr	r3, [pc, #280]	; (8002330 <ca_measurements_and_responses+0x1b8>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	f641 3257 	movw	r2, #6999	; 0x1b57
 8002220:	4293      	cmp	r3, r2
 8002222:	d803      	bhi.n	800222c <ca_measurements_and_responses+0xb4>
			g_SP_measure =1;
 8002224:	4b45      	ldr	r3, [pc, #276]	; (800233c <ca_measurements_and_responses+0x1c4>)
 8002226:	2201      	movs	r2, #1
 8002228:	701a      	strb	r2, [r3, #0]
 800222a:	e074      	b.n	8002316 <ca_measurements_and_responses+0x19e>
		else if((HAL_GetTick() - calibration_time_passed > 7000) && (HAL_GetTick() - calibration_time_passed< 8000) && g_SP_measure == 1){
 800222c:	f001 ff3c 	bl	80040a8 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	4b3f      	ldr	r3, [pc, #252]	; (8002330 <ca_measurements_and_responses+0x1b8>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	f641 3258 	movw	r2, #7000	; 0x1b58
 800223c:	4293      	cmp	r3, r2
 800223e:	d910      	bls.n	8002262 <ca_measurements_and_responses+0xea>
 8002240:	f001 ff32 	bl	80040a8 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	4b3a      	ldr	r3, [pc, #232]	; (8002330 <ca_measurements_and_responses+0x1b8>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8002250:	d207      	bcs.n	8002262 <ca_measurements_and_responses+0xea>
 8002252:	4b3a      	ldr	r3, [pc, #232]	; (800233c <ca_measurements_and_responses+0x1c4>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d103      	bne.n	8002262 <ca_measurements_and_responses+0xea>
				g_SP_measure =2;
 800225a:	4b38      	ldr	r3, [pc, #224]	; (800233c <ca_measurements_and_responses+0x1c4>)
 800225c:	2202      	movs	r2, #2
 800225e:	701a      	strb	r2, [r3, #0]
 8002260:	e059      	b.n	8002316 <ca_measurements_and_responses+0x19e>
		else if(HAL_GetTick() - calibration_time_passed > 8000){
 8002262:	f001 ff21 	bl	80040a8 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	4b31      	ldr	r3, [pc, #196]	; (8002330 <ca_measurements_and_responses+0x1b8>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8002272:	d950      	bls.n	8002316 <ca_measurements_and_responses+0x19e>
			cal_entered  =1;
 8002274:	4b2d      	ldr	r3, [pc, #180]	; (800232c <ca_measurements_and_responses+0x1b4>)
 8002276:	2201      	movs	r2, #1
 8002278:	701a      	strb	r2, [r3, #0]
			panel_temp_at_calibration = g_lmt01_sens_temp ; //panel temperature
 800227a:	4b31      	ldr	r3, [pc, #196]	; (8002340 <ca_measurements_and_responses+0x1c8>)
 800227c:	881a      	ldrh	r2, [r3, #0]
 800227e:	4b31      	ldr	r3, [pc, #196]	; (8002344 <ca_measurements_and_responses+0x1cc>)
 8002280:	801a      	strh	r2, [r3, #0]
			lux_at_calibration = g_get_lxd_value ;
 8002282:	4b31      	ldr	r3, [pc, #196]	; (8002348 <ca_measurements_and_responses+0x1d0>)
 8002284:	881a      	ldrh	r2, [r3, #0]
 8002286:	4b31      	ldr	r3, [pc, #196]	; (800234c <ca_measurements_and_responses+0x1d4>)
 8002288:	801a      	strh	r2, [r3, #0]
			calibrated_power = g_p_mpp ;
 800228a:	4b31      	ldr	r3, [pc, #196]	; (8002350 <ca_measurements_and_responses+0x1d8>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a31      	ldr	r2, [pc, #196]	; (8002354 <ca_measurements_and_responses+0x1dc>)
 8002290:	6013      	str	r3, [r2, #0]
			calibrated_power = calibrated_power/(1+(-0.004)*(panel_temp_at_calibration -25)) ; //Calibrated Power
 8002292:	4b30      	ldr	r3, [pc, #192]	; (8002354 <ca_measurements_and_responses+0x1dc>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe f95e 	bl	8000558 <__aeabi_f2d>
 800229c:	4604      	mov	r4, r0
 800229e:	460d      	mov	r5, r1
 80022a0:	4b28      	ldr	r3, [pc, #160]	; (8002344 <ca_measurements_and_responses+0x1cc>)
 80022a2:	881b      	ldrh	r3, [r3, #0]
 80022a4:	3b19      	subs	r3, #25
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7fe f944 	bl	8000534 <__aeabi_i2d>
 80022ac:	a31c      	add	r3, pc, #112	; (adr r3, 8002320 <ca_measurements_and_responses+0x1a8>)
 80022ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b2:	f7fe f9a9 	bl	8000608 <__aeabi_dmul>
 80022b6:	4602      	mov	r2, r0
 80022b8:	460b      	mov	r3, r1
 80022ba:	4610      	mov	r0, r2
 80022bc:	4619      	mov	r1, r3
 80022be:	f04f 0200 	mov.w	r2, #0
 80022c2:	4b25      	ldr	r3, [pc, #148]	; (8002358 <ca_measurements_and_responses+0x1e0>)
 80022c4:	f7fd ffea 	bl	800029c <__adddf3>
 80022c8:	4602      	mov	r2, r0
 80022ca:	460b      	mov	r3, r1
 80022cc:	4620      	mov	r0, r4
 80022ce:	4629      	mov	r1, r5
 80022d0:	f7fe fac4 	bl	800085c <__aeabi_ddiv>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	4610      	mov	r0, r2
 80022da:	4619      	mov	r1, r3
 80022dc:	f7fe fc8c 	bl	8000bf8 <__aeabi_d2f>
 80022e0:	4603      	mov	r3, r0
 80022e2:	4a1c      	ldr	r2, [pc, #112]	; (8002354 <ca_measurements_and_responses+0x1dc>)
 80022e4:	6013      	str	r3, [r2, #0]
			calibration_time_passed =  HAL_GetTick() ;
 80022e6:	f001 fedf 	bl	80040a8 <HAL_GetTick>
 80022ea:	4603      	mov	r3, r0
 80022ec:	4a10      	ldr	r2, [pc, #64]	; (8002330 <ca_measurements_and_responses+0x1b8>)
 80022ee:	6013      	str	r3, [r2, #0]
			if(g_CA_measure == 1){
 80022f0:	4b0d      	ldr	r3, [pc, #52]	; (8002328 <ca_measurements_and_responses+0x1b0>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d10e      	bne.n	8002316 <ca_measurements_and_responses+0x19e>
				g_CA_measure = 2;
 80022f8:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <ca_measurements_and_responses+0x1b0>)
 80022fa:	2202      	movs	r2, #2
 80022fc:	701a      	strb	r2, [r3, #0]
}
 80022fe:	e00a      	b.n	8002316 <ca_measurements_and_responses+0x19e>
	else if(g_CA_measure == 2){
 8002300:	4b09      	ldr	r3, [pc, #36]	; (8002328 <ca_measurements_and_responses+0x1b0>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b02      	cmp	r3, #2
 8002306:	d106      	bne.n	8002316 <ca_measurements_and_responses+0x19e>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET) ;
 8002308:	2201      	movs	r2, #1
 800230a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800230e:	4813      	ldr	r0, [pc, #76]	; (800235c <ca_measurements_and_responses+0x1e4>)
 8002310:	f002 fe2c 	bl	8004f6c <HAL_GPIO_WritePin>
}
 8002314:	e7ff      	b.n	8002316 <ca_measurements_and_responses+0x19e>
 8002316:	bf00      	nop
 8002318:	bdb0      	pop	{r4, r5, r7, pc}
 800231a:	bf00      	nop
 800231c:	f3af 8000 	nop.w
 8002320:	d2f1a9fc 	.word	0xd2f1a9fc
 8002324:	bf70624d 	.word	0xbf70624d
 8002328:	2000044b 	.word	0x2000044b
 800232c:	20000011 	.word	0x20000011
 8002330:	2000044c 	.word	0x2000044c
 8002334:	20000440 	.word	0x20000440
 8002338:	2000043b 	.word	0x2000043b
 800233c:	20000446 	.word	0x20000446
 8002340:	200004de 	.word	0x200004de
 8002344:	20000458 	.word	0x20000458
 8002348:	20000398 	.word	0x20000398
 800234c:	20000450 	.word	0x20000450
 8002350:	200003c8 	.word	0x200003c8
 8002354:	20000454 	.word	0x20000454
 8002358:	3ff00000 	.word	0x3ff00000
 800235c:	40020400 	.word	0x40020400

08002360 <get_pv_panel_adc1_input>:
 * This function retrieves the ADC panel voltage,
 * across adc input 1
 * Gets the input voltage to the adc
 * Scales the voltage to the appropriate PV voltage
 */
uint16_t get_pv_panel_adc1_input(){
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
	//READ ADC VALUE
	ADC_Select_CH15() ;
 8002364:	f7ff fbf6 	bl	8001b54 <ADC_Select_CH15>
	HAL_ADC_Start(&hadc1);
 8002368:	4829      	ldr	r0, [pc, #164]	; (8002410 <get_pv_panel_adc1_input+0xb0>)
 800236a:	f001 ff11 	bl	8004190 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) ;
 800236e:	f04f 31ff 	mov.w	r1, #4294967295
 8002372:	4827      	ldr	r0, [pc, #156]	; (8002410 <get_pv_panel_adc1_input+0xb0>)
 8002374:	f001 fff3 	bl	800435e <HAL_ADC_PollForConversion>
	g_v1_pv = HAL_ADC_GetValue(&hadc1) ;
 8002378:	4825      	ldr	r0, [pc, #148]	; (8002410 <get_pv_panel_adc1_input+0xb0>)
 800237a:	f002 f87b 	bl	8004474 <HAL_ADC_GetValue>
 800237e:	4603      	mov	r3, r0
 8002380:	4618      	mov	r0, r3
 8002382:	f7fe f8c7 	bl	8000514 <__aeabi_ui2d>
 8002386:	4602      	mov	r2, r0
 8002388:	460b      	mov	r3, r1
 800238a:	4922      	ldr	r1, [pc, #136]	; (8002414 <get_pv_panel_adc1_input+0xb4>)
 800238c:	e9c1 2300 	strd	r2, r3, [r1]
	HAL_ADC_Stop(&hadc1);
 8002390:	481f      	ldr	r0, [pc, #124]	; (8002410 <get_pv_panel_adc1_input+0xb0>)
 8002392:	f001 ffb1 	bl	80042f8 <HAL_ADC_Stop>

	//get voltage (mv) - from ADC formula
	g_v1_pv = g_v1_pv*(3.3/4095.0) ;
 8002396:	4b1f      	ldr	r3, [pc, #124]	; (8002414 <get_pv_panel_adc1_input+0xb4>)
 8002398:	e9d3 0100 	ldrd	r0, r1, [r3]
 800239c:	a318      	add	r3, pc, #96	; (adr r3, 8002400 <get_pv_panel_adc1_input+0xa0>)
 800239e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a2:	f7fe f931 	bl	8000608 <__aeabi_dmul>
 80023a6:	4602      	mov	r2, r0
 80023a8:	460b      	mov	r3, r1
 80023aa:	491a      	ldr	r1, [pc, #104]	; (8002414 <get_pv_panel_adc1_input+0xb4>)
 80023ac:	e9c1 2300 	strd	r2, r3, [r1]

	//scale voltage up to PV panel voltage (V)
	g_v1_pv = g_v1_pv*(99000.0/39000.0);
 80023b0:	4b18      	ldr	r3, [pc, #96]	; (8002414 <get_pv_panel_adc1_input+0xb4>)
 80023b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023b6:	a314      	add	r3, pc, #80	; (adr r3, 8002408 <get_pv_panel_adc1_input+0xa8>)
 80023b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023bc:	f7fe f924 	bl	8000608 <__aeabi_dmul>
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	4913      	ldr	r1, [pc, #76]	; (8002414 <get_pv_panel_adc1_input+0xb4>)
 80023c6:	e9c1 2300 	strd	r2, r3, [r1]

	//multiply by 1000 to get voltage to mv
	g_v1_pv = g_v1_pv*1000;
 80023ca:	4b12      	ldr	r3, [pc, #72]	; (8002414 <get_pv_panel_adc1_input+0xb4>)
 80023cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023d0:	f04f 0200 	mov.w	r2, #0
 80023d4:	4b10      	ldr	r3, [pc, #64]	; (8002418 <get_pv_panel_adc1_input+0xb8>)
 80023d6:	f7fe f917 	bl	8000608 <__aeabi_dmul>
 80023da:	4602      	mov	r2, r0
 80023dc:	460b      	mov	r3, r1
 80023de:	490d      	ldr	r1, [pc, #52]	; (8002414 <get_pv_panel_adc1_input+0xb4>)
 80023e0:	e9c1 2300 	strd	r2, r3, [r1]

	return g_v1_pv ;
 80023e4:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <get_pv_panel_adc1_input+0xb4>)
 80023e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ea:	4610      	mov	r0, r2
 80023ec:	4619      	mov	r1, r3
 80023ee:	f7fe fbe3 	bl	8000bb8 <__aeabi_d2uiz>
 80023f2:	4603      	mov	r3, r0
 80023f4:	b29b      	uxth	r3, r3
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	f3af 8000 	nop.w
 8002400:	e734d9b4 	.word	0xe734d9b4
 8002404:	3f4a680c 	.word	0x3f4a680c
 8002408:	ec4ec4ec 	.word	0xec4ec4ec
 800240c:	40044ec4 	.word	0x40044ec4
 8002410:	2000022c 	.word	0x2000022c
 8002414:	200003a8 	.word	0x200003a8
 8002418:	408f4000 	.word	0x408f4000
 800241c:	00000000 	.word	0x00000000

08002420 <get_pv_panel_adc2_input>:
 * This function returns the adc panel voltage, across adc input
 * 2
 * Gets the input voltage to the adc
 * Scales the voltage to the appropriate PV voltage
 */
uint16_t get_pv_panel_adc2_input(){
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
	//read adc value
	ADC_Select_CH9() ;
 8002424:	f7ff fb78 	bl	8001b18 <ADC_Select_CH9>
	HAL_ADC_Start(&hadc1);
 8002428:	4829      	ldr	r0, [pc, #164]	; (80024d0 <get_pv_panel_adc2_input+0xb0>)
 800242a:	f001 feb1 	bl	8004190 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) ;
 800242e:	f04f 31ff 	mov.w	r1, #4294967295
 8002432:	4827      	ldr	r0, [pc, #156]	; (80024d0 <get_pv_panel_adc2_input+0xb0>)
 8002434:	f001 ff93 	bl	800435e <HAL_ADC_PollForConversion>
	g_v2_pv = HAL_ADC_GetValue(&hadc1) ;
 8002438:	4825      	ldr	r0, [pc, #148]	; (80024d0 <get_pv_panel_adc2_input+0xb0>)
 800243a:	f002 f81b 	bl	8004474 <HAL_ADC_GetValue>
 800243e:	4603      	mov	r3, r0
 8002440:	4618      	mov	r0, r3
 8002442:	f7fe f867 	bl	8000514 <__aeabi_ui2d>
 8002446:	4602      	mov	r2, r0
 8002448:	460b      	mov	r3, r1
 800244a:	4922      	ldr	r1, [pc, #136]	; (80024d4 <get_pv_panel_adc2_input+0xb4>)
 800244c:	e9c1 2300 	strd	r2, r3, [r1]
	HAL_ADC_Stop(&hadc1);
 8002450:	481f      	ldr	r0, [pc, #124]	; (80024d0 <get_pv_panel_adc2_input+0xb0>)
 8002452:	f001 ff51 	bl	80042f8 <HAL_ADC_Stop>

	//get voltage (mv) -from adc formula
	g_v2_pv = g_v2_pv*(3.3/4095.0) ;
 8002456:	4b1f      	ldr	r3, [pc, #124]	; (80024d4 <get_pv_panel_adc2_input+0xb4>)
 8002458:	e9d3 0100 	ldrd	r0, r1, [r3]
 800245c:	a318      	add	r3, pc, #96	; (adr r3, 80024c0 <get_pv_panel_adc2_input+0xa0>)
 800245e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002462:	f7fe f8d1 	bl	8000608 <__aeabi_dmul>
 8002466:	4602      	mov	r2, r0
 8002468:	460b      	mov	r3, r1
 800246a:	491a      	ldr	r1, [pc, #104]	; (80024d4 <get_pv_panel_adc2_input+0xb4>)
 800246c:	e9c1 2300 	strd	r2, r3, [r1]

	//scale voltage up to PV panel voltage
	g_v2_pv = g_v2_pv*(99000.0/39000.0);
 8002470:	4b18      	ldr	r3, [pc, #96]	; (80024d4 <get_pv_panel_adc2_input+0xb4>)
 8002472:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002476:	a314      	add	r3, pc, #80	; (adr r3, 80024c8 <get_pv_panel_adc2_input+0xa8>)
 8002478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800247c:	f7fe f8c4 	bl	8000608 <__aeabi_dmul>
 8002480:	4602      	mov	r2, r0
 8002482:	460b      	mov	r3, r1
 8002484:	4913      	ldr	r1, [pc, #76]	; (80024d4 <get_pv_panel_adc2_input+0xb4>)
 8002486:	e9c1 2300 	strd	r2, r3, [r1]

	//multiply by 1000 to get voltage to mv
	g_v2_pv = g_v2_pv*1000;
 800248a:	4b12      	ldr	r3, [pc, #72]	; (80024d4 <get_pv_panel_adc2_input+0xb4>)
 800248c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002490:	f04f 0200 	mov.w	r2, #0
 8002494:	4b10      	ldr	r3, [pc, #64]	; (80024d8 <get_pv_panel_adc2_input+0xb8>)
 8002496:	f7fe f8b7 	bl	8000608 <__aeabi_dmul>
 800249a:	4602      	mov	r2, r0
 800249c:	460b      	mov	r3, r1
 800249e:	490d      	ldr	r1, [pc, #52]	; (80024d4 <get_pv_panel_adc2_input+0xb4>)
 80024a0:	e9c1 2300 	strd	r2, r3, [r1]

	return g_v2_pv ;
 80024a4:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <get_pv_panel_adc2_input+0xb4>)
 80024a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024aa:	4610      	mov	r0, r2
 80024ac:	4619      	mov	r1, r3
 80024ae:	f7fe fb83 	bl	8000bb8 <__aeabi_d2uiz>
 80024b2:	4603      	mov	r3, r0
 80024b4:	b29b      	uxth	r3, r3

}
 80024b6:	4618      	mov	r0, r3
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	f3af 8000 	nop.w
 80024c0:	e734d9b4 	.word	0xe734d9b4
 80024c4:	3f4a680c 	.word	0x3f4a680c
 80024c8:	ec4ec4ec 	.word	0xec4ec4ec
 80024cc:	40044ec4 	.word	0x40044ec4
 80024d0:	2000022c 	.word	0x2000022c
 80024d4:	200003b0 	.word	0x200003b0
 80024d8:	408f4000 	.word	0x408f4000

080024dc <lcd_Mode_1>:

/**
 * SP Measurement
 */
void lcd_Mode_1(){
 80024dc:	b5b0      	push	{r4, r5, r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af04      	add	r7, sp, #16
	Lcd_clear(&lcd);
 80024e2:	481d      	ldr	r0, [pc, #116]	; (8002558 <lcd_Mode_1+0x7c>)
 80024e4:	f7fe fde8 	bl	80010b8 <Lcd_clear>

	//first row
	Lcd_cursor(&lcd, 0, 0) ;
 80024e8:	2200      	movs	r2, #0
 80024ea:	2100      	movs	r1, #0
 80024ec:	481a      	ldr	r0, [pc, #104]	; (8002558 <lcd_Mode_1+0x7c>)
 80024ee:	f7fe fdc9 	bl	8001084 <Lcd_cursor>
	snprintf(g_panel_voltage_and_current, sizeof(g_panel_voltage_and_current),"V:%04dmV I:%03dmA",g_v_mpp,g_i_mpp);
 80024f2:	4b1a      	ldr	r3, [pc, #104]	; (800255c <lcd_Mode_1+0x80>)
 80024f4:	881b      	ldrh	r3, [r3, #0]
 80024f6:	461a      	mov	r2, r3
 80024f8:	4b19      	ldr	r3, [pc, #100]	; (8002560 <lcd_Mode_1+0x84>)
 80024fa:	881b      	ldrh	r3, [r3, #0]
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	4613      	mov	r3, r2
 8002500:	4a18      	ldr	r2, [pc, #96]	; (8002564 <lcd_Mode_1+0x88>)
 8002502:	2111      	movs	r1, #17
 8002504:	4818      	ldr	r0, [pc, #96]	; (8002568 <lcd_Mode_1+0x8c>)
 8002506:	f006 f99d 	bl	8008844 <sniprintf>
	Lcd_string(&lcd, g_panel_voltage_and_current);
 800250a:	4917      	ldr	r1, [pc, #92]	; (8002568 <lcd_Mode_1+0x8c>)
 800250c:	4812      	ldr	r0, [pc, #72]	; (8002558 <lcd_Mode_1+0x7c>)
 800250e:	f7fe fd99 	bl	8001044 <Lcd_string>

	//2nd row
	Lcd_cursor(&lcd, 1, 0) ;
 8002512:	2200      	movs	r2, #0
 8002514:	2101      	movs	r1, #1
 8002516:	4810      	ldr	r0, [pc, #64]	; (8002558 <lcd_Mode_1+0x7c>)
 8002518:	f7fe fdb4 	bl	8001084 <Lcd_cursor>
	snprintf(g_panel_power_and_efficiency, sizeof(g_panel_power_and_efficiency),"P: %03.0fmW E:%03.0f%%",g_p_mpp, g_pv_eff);
 800251c:	4b13      	ldr	r3, [pc, #76]	; (800256c <lcd_Mode_1+0x90>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4618      	mov	r0, r3
 8002522:	f7fe f819 	bl	8000558 <__aeabi_f2d>
 8002526:	4604      	mov	r4, r0
 8002528:	460d      	mov	r5, r1
 800252a:	4b11      	ldr	r3, [pc, #68]	; (8002570 <lcd_Mode_1+0x94>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f7fe f812 	bl	8000558 <__aeabi_f2d>
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800253c:	e9cd 4500 	strd	r4, r5, [sp]
 8002540:	4a0c      	ldr	r2, [pc, #48]	; (8002574 <lcd_Mode_1+0x98>)
 8002542:	2111      	movs	r1, #17
 8002544:	480c      	ldr	r0, [pc, #48]	; (8002578 <lcd_Mode_1+0x9c>)
 8002546:	f006 f97d 	bl	8008844 <sniprintf>
	Lcd_string(&lcd, g_panel_power_and_efficiency);
 800254a:	490b      	ldr	r1, [pc, #44]	; (8002578 <lcd_Mode_1+0x9c>)
 800254c:	4802      	ldr	r0, [pc, #8]	; (8002558 <lcd_Mode_1+0x7c>)
 800254e:	f7fe fd79 	bl	8001044 <Lcd_string>

}
 8002552:	bf00      	nop
 8002554:	46bd      	mov	sp, r7
 8002556:	bdb0      	pop	{r4, r5, r7, pc}
 8002558:	20000488 	.word	0x20000488
 800255c:	200003c4 	.word	0x200003c4
 8002560:	200003c6 	.word	0x200003c6
 8002564:	0800bbf8 	.word	0x0800bbf8
 8002568:	200003ec 	.word	0x200003ec
 800256c:	200003c8 	.word	0x200003c8
 8002570:	200003d0 	.word	0x200003d0
 8002574:	0800bc0c 	.word	0x0800bc0c
 8002578:	20000414 	.word	0x20000414

0800257c <lcd_Mode_2>:

/**
 * EN measurements
 */
void lcd_Mode_2(){
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af02      	add	r7, sp, #8
	//clear current LCD contents
	Lcd_clear(&lcd);
 8002582:	4815      	ldr	r0, [pc, #84]	; (80025d8 <lcd_Mode_2+0x5c>)
 8002584:	f7fe fd98 	bl	80010b8 <Lcd_clear>
	//first row
	Lcd_cursor(&lcd, 0, 0) ;
 8002588:	2200      	movs	r2, #0
 800258a:	2100      	movs	r1, #0
 800258c:	4812      	ldr	r0, [pc, #72]	; (80025d8 <lcd_Mode_2+0x5c>)
 800258e:	f7fe fd79 	bl	8001084 <Lcd_cursor>
	snprintf(g_envir_measure_temperatures, sizeof(g_envir_measure_temperatures),"AMB:%03dC SP:%03dC",g_temp_in_deg,g_lmt01_sens_temp);
 8002592:	4b12      	ldr	r3, [pc, #72]	; (80025dc <lcd_Mode_2+0x60>)
 8002594:	881b      	ldrh	r3, [r3, #0]
 8002596:	461a      	mov	r2, r3
 8002598:	4b11      	ldr	r3, [pc, #68]	; (80025e0 <lcd_Mode_2+0x64>)
 800259a:	881b      	ldrh	r3, [r3, #0]
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	4613      	mov	r3, r2
 80025a0:	4a10      	ldr	r2, [pc, #64]	; (80025e4 <lcd_Mode_2+0x68>)
 80025a2:	2111      	movs	r1, #17
 80025a4:	4810      	ldr	r0, [pc, #64]	; (80025e8 <lcd_Mode_2+0x6c>)
 80025a6:	f006 f94d 	bl	8008844 <sniprintf>
	Lcd_string(&lcd, g_envir_measure_temperatures);
 80025aa:	490f      	ldr	r1, [pc, #60]	; (80025e8 <lcd_Mode_2+0x6c>)
 80025ac:	480a      	ldr	r0, [pc, #40]	; (80025d8 <lcd_Mode_2+0x5c>)
 80025ae:	f7fe fd49 	bl	8001044 <Lcd_string>

	//scale lux value: [0: 30000]?
	Lcd_cursor(&lcd, 1,0);
 80025b2:	2200      	movs	r2, #0
 80025b4:	2101      	movs	r1, #1
 80025b6:	4808      	ldr	r0, [pc, #32]	; (80025d8 <lcd_Mode_2+0x5c>)
 80025b8:	f7fe fd64 	bl	8001084 <Lcd_cursor>
	snprintf(g_lcd_lux_val, sizeof(g_lcd_lux_val),"LUX:%05d",g_get_lxd_value);
 80025bc:	4b0b      	ldr	r3, [pc, #44]	; (80025ec <lcd_Mode_2+0x70>)
 80025be:	881b      	ldrh	r3, [r3, #0]
 80025c0:	4a0b      	ldr	r2, [pc, #44]	; (80025f0 <lcd_Mode_2+0x74>)
 80025c2:	210a      	movs	r1, #10
 80025c4:	480b      	ldr	r0, [pc, #44]	; (80025f4 <lcd_Mode_2+0x78>)
 80025c6:	f006 f93d 	bl	8008844 <sniprintf>
	Lcd_string(&lcd,g_lcd_lux_val);
 80025ca:	490a      	ldr	r1, [pc, #40]	; (80025f4 <lcd_Mode_2+0x78>)
 80025cc:	4802      	ldr	r0, [pc, #8]	; (80025d8 <lcd_Mode_2+0x5c>)
 80025ce:	f7fe fd39 	bl	8001044 <Lcd_string>
}
 80025d2:	bf00      	nop
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	20000488 	.word	0x20000488
 80025dc:	20000380 	.word	0x20000380
 80025e0:	200004de 	.word	0x200004de
 80025e4:	0800bc44 	.word	0x0800bc44
 80025e8:	20000400 	.word	0x20000400
 80025ec:	20000398 	.word	0x20000398
 80025f0:	0800bc58 	.word	0x0800bc58
 80025f4:	200003e0 	.word	0x200003e0

080025f8 <lcd_Mode_3>:

/**
 * RTC measurements
 */
void lcd_Mode_3(){
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af02      	add	r7, sp, #8
	Lcd_clear(&lcd);
 80025fe:	4821      	ldr	r0, [pc, #132]	; (8002684 <lcd_Mode_3+0x8c>)
 8002600:	f7fe fd5a 	bl	80010b8 <Lcd_clear>

	//display the updated time and date
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN) ;
 8002604:	2200      	movs	r2, #0
 8002606:	4920      	ldr	r1, [pc, #128]	; (8002688 <lcd_Mode_3+0x90>)
 8002608:	4820      	ldr	r0, [pc, #128]	; (800268c <lcd_Mode_3+0x94>)
 800260a:	f003 fb9f 	bl	8005d4c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN) ;
 800260e:	2200      	movs	r2, #0
 8002610:	491f      	ldr	r1, [pc, #124]	; (8002690 <lcd_Mode_3+0x98>)
 8002612:	481e      	ldr	r0, [pc, #120]	; (800268c <lcd_Mode_3+0x94>)
 8002614:	f003 fc7c 	bl	8005f10 <HAL_RTC_GetDate>

	snprintf(g_date, sizeof(g_date),"%02d/%02d/20%02d",sDate.Date, sDate.Month,sDate.Year);
 8002618:	4b1d      	ldr	r3, [pc, #116]	; (8002690 <lcd_Mode_3+0x98>)
 800261a:	789b      	ldrb	r3, [r3, #2]
 800261c:	4619      	mov	r1, r3
 800261e:	4b1c      	ldr	r3, [pc, #112]	; (8002690 <lcd_Mode_3+0x98>)
 8002620:	785b      	ldrb	r3, [r3, #1]
 8002622:	461a      	mov	r2, r3
 8002624:	4b1a      	ldr	r3, [pc, #104]	; (8002690 <lcd_Mode_3+0x98>)
 8002626:	78db      	ldrb	r3, [r3, #3]
 8002628:	9301      	str	r3, [sp, #4]
 800262a:	9200      	str	r2, [sp, #0]
 800262c:	460b      	mov	r3, r1
 800262e:	4a19      	ldr	r2, [pc, #100]	; (8002694 <lcd_Mode_3+0x9c>)
 8002630:	210b      	movs	r1, #11
 8002632:	4819      	ldr	r0, [pc, #100]	; (8002698 <lcd_Mode_3+0xa0>)
 8002634:	f006 f906 	bl	8008844 <sniprintf>
	snprintf(g_time, sizeof(g_time),"%02d:%02d:%02d",sTime.Hours, sTime.Minutes, sTime.Seconds);
 8002638:	4b13      	ldr	r3, [pc, #76]	; (8002688 <lcd_Mode_3+0x90>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	4619      	mov	r1, r3
 800263e:	4b12      	ldr	r3, [pc, #72]	; (8002688 <lcd_Mode_3+0x90>)
 8002640:	785b      	ldrb	r3, [r3, #1]
 8002642:	461a      	mov	r2, r3
 8002644:	4b10      	ldr	r3, [pc, #64]	; (8002688 <lcd_Mode_3+0x90>)
 8002646:	789b      	ldrb	r3, [r3, #2]
 8002648:	9301      	str	r3, [sp, #4]
 800264a:	9200      	str	r2, [sp, #0]
 800264c:	460b      	mov	r3, r1
 800264e:	4a13      	ldr	r2, [pc, #76]	; (800269c <lcd_Mode_3+0xa4>)
 8002650:	2109      	movs	r1, #9
 8002652:	4813      	ldr	r0, [pc, #76]	; (80026a0 <lcd_Mode_3+0xa8>)
 8002654:	f006 f8f6 	bl	8008844 <sniprintf>
	//display date
	Lcd_cursor(&lcd, 0, 0) ;
 8002658:	2200      	movs	r2, #0
 800265a:	2100      	movs	r1, #0
 800265c:	4809      	ldr	r0, [pc, #36]	; (8002684 <lcd_Mode_3+0x8c>)
 800265e:	f7fe fd11 	bl	8001084 <Lcd_cursor>
	Lcd_string(&lcd, g_date);
 8002662:	490d      	ldr	r1, [pc, #52]	; (8002698 <lcd_Mode_3+0xa0>)
 8002664:	4807      	ldr	r0, [pc, #28]	; (8002684 <lcd_Mode_3+0x8c>)
 8002666:	f7fe fced 	bl	8001044 <Lcd_string>

	//display time - second row
	Lcd_cursor(&lcd, 1, 0) ;
 800266a:	2200      	movs	r2, #0
 800266c:	2101      	movs	r1, #1
 800266e:	4805      	ldr	r0, [pc, #20]	; (8002684 <lcd_Mode_3+0x8c>)
 8002670:	f7fe fd08 	bl	8001084 <Lcd_cursor>
	Lcd_string(&lcd, g_time);
 8002674:	490a      	ldr	r1, [pc, #40]	; (80026a0 <lcd_Mode_3+0xa8>)
 8002676:	4803      	ldr	r0, [pc, #12]	; (8002684 <lcd_Mode_3+0x8c>)
 8002678:	f7fe fce4 	bl	8001044 <Lcd_string>
}
 800267c:	bf00      	nop
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	20000488 	.word	0x20000488
 8002688:	200004a0 	.word	0x200004a0
 800268c:	20000274 	.word	0x20000274
 8002690:	200004b4 	.word	0x200004b4
 8002694:	0800bc64 	.word	0x0800bc64
 8002698:	200004bc 	.word	0x200004bc
 800269c:	0800bc78 	.word	0x0800bc78
 80026a0:	200004c8 	.word	0x200004c8

080026a4 <change_lcd_display_mode>:
 * Changing the view is independent of the system ,and does not change any
 * state of the system
 */

uint8_t default_switch_mode = 1;
void change_lcd_display_mode(){
 80026a4:	b5b0      	push	{r4, r5, r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af04      	add	r7, sp, #16
	//display default display mode
	if(g_lcd_default_mode == 1){
 80026aa:	4b56      	ldr	r3, [pc, #344]	; (8002804 <change_lcd_display_mode+0x160>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d167      	bne.n	8002782 <change_lcd_display_mode+0xde>

		g_lcd_default_mode = 0;
 80026b2:	4b54      	ldr	r3, [pc, #336]	; (8002804 <change_lcd_display_mode+0x160>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	701a      	strb	r2, [r3, #0]

		//update the correspoding lcd mode
		g_lcd_mode =1 ;
 80026b8:	4b53      	ldr	r3, [pc, #332]	; (8002808 <change_lcd_display_mode+0x164>)
 80026ba:	2201      	movs	r2, #1
 80026bc:	701a      	strb	r2, [r3, #0]

		Lcd_clear(&lcd);
 80026be:	4853      	ldr	r0, [pc, #332]	; (800280c <change_lcd_display_mode+0x168>)
 80026c0:	f7fe fcfa 	bl	80010b8 <Lcd_clear>

		//first row
		Lcd_cursor(&lcd, 0, 0) ;
 80026c4:	2200      	movs	r2, #0
 80026c6:	2100      	movs	r1, #0
 80026c8:	4850      	ldr	r0, [pc, #320]	; (800280c <change_lcd_display_mode+0x168>)
 80026ca:	f7fe fcdb 	bl	8001084 <Lcd_cursor>
		snprintf(g_panel_voltage_and_current, sizeof(g_panel_voltage_and_current),"V:%04dmV I:%03dmA",g_v_mpp,g_i_mpp);
 80026ce:	4b50      	ldr	r3, [pc, #320]	; (8002810 <change_lcd_display_mode+0x16c>)
 80026d0:	881b      	ldrh	r3, [r3, #0]
 80026d2:	461a      	mov	r2, r3
 80026d4:	4b4f      	ldr	r3, [pc, #316]	; (8002814 <change_lcd_display_mode+0x170>)
 80026d6:	881b      	ldrh	r3, [r3, #0]
 80026d8:	9300      	str	r3, [sp, #0]
 80026da:	4613      	mov	r3, r2
 80026dc:	4a4e      	ldr	r2, [pc, #312]	; (8002818 <change_lcd_display_mode+0x174>)
 80026de:	2111      	movs	r1, #17
 80026e0:	484e      	ldr	r0, [pc, #312]	; (800281c <change_lcd_display_mode+0x178>)
 80026e2:	f006 f8af 	bl	8008844 <sniprintf>
		Lcd_string(&lcd, g_panel_voltage_and_current);
 80026e6:	494d      	ldr	r1, [pc, #308]	; (800281c <change_lcd_display_mode+0x178>)
 80026e8:	4848      	ldr	r0, [pc, #288]	; (800280c <change_lcd_display_mode+0x168>)
 80026ea:	f7fe fcab 	bl	8001044 <Lcd_string>

		//2nd row
		Lcd_cursor(&lcd, 1, 0) ;
 80026ee:	2200      	movs	r2, #0
 80026f0:	2101      	movs	r1, #1
 80026f2:	4846      	ldr	r0, [pc, #280]	; (800280c <change_lcd_display_mode+0x168>)
 80026f4:	f7fe fcc6 	bl	8001084 <Lcd_cursor>
		snprintf(g_panel_power_and_efficiency, sizeof(g_panel_power_and_efficiency),"P: %03.0fmW E:%03.0f%%",g_p_mpp, g_pv_eff);
 80026f8:	4b49      	ldr	r3, [pc, #292]	; (8002820 <change_lcd_display_mode+0x17c>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7fd ff2b 	bl	8000558 <__aeabi_f2d>
 8002702:	4604      	mov	r4, r0
 8002704:	460d      	mov	r5, r1
 8002706:	4b47      	ldr	r3, [pc, #284]	; (8002824 <change_lcd_display_mode+0x180>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f7fd ff24 	bl	8000558 <__aeabi_f2d>
 8002710:	4602      	mov	r2, r0
 8002712:	460b      	mov	r3, r1
 8002714:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002718:	e9cd 4500 	strd	r4, r5, [sp]
 800271c:	4a42      	ldr	r2, [pc, #264]	; (8002828 <change_lcd_display_mode+0x184>)
 800271e:	2111      	movs	r1, #17
 8002720:	4842      	ldr	r0, [pc, #264]	; (800282c <change_lcd_display_mode+0x188>)
 8002722:	f006 f88f 	bl	8008844 <sniprintf>
		Lcd_string(&lcd, g_panel_power_and_efficiency);
 8002726:	4941      	ldr	r1, [pc, #260]	; (800282c <change_lcd_display_mode+0x188>)
 8002728:	4838      	ldr	r0, [pc, #224]	; (800280c <change_lcd_display_mode+0x168>)
 800272a:	f7fe fc8b 	bl	8001044 <Lcd_string>

		//get default date and time
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800272e:	2200      	movs	r2, #0
 8002730:	493f      	ldr	r1, [pc, #252]	; (8002830 <change_lcd_display_mode+0x18c>)
 8002732:	4840      	ldr	r0, [pc, #256]	; (8002834 <change_lcd_display_mode+0x190>)
 8002734:	f003 fb0a 	bl	8005d4c <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN) ;
 8002738:	2200      	movs	r2, #0
 800273a:	493f      	ldr	r1, [pc, #252]	; (8002838 <change_lcd_display_mode+0x194>)
 800273c:	483d      	ldr	r0, [pc, #244]	; (8002834 <change_lcd_display_mode+0x190>)
 800273e:	f003 fbe7 	bl	8005f10 <HAL_RTC_GetDate>

		snprintf(g_date, sizeof(g_date),"%02d/%02d/20%02d",sDate.Date, sDate.Month,sDate.Year);
 8002742:	4b3d      	ldr	r3, [pc, #244]	; (8002838 <change_lcd_display_mode+0x194>)
 8002744:	789b      	ldrb	r3, [r3, #2]
 8002746:	4619      	mov	r1, r3
 8002748:	4b3b      	ldr	r3, [pc, #236]	; (8002838 <change_lcd_display_mode+0x194>)
 800274a:	785b      	ldrb	r3, [r3, #1]
 800274c:	461a      	mov	r2, r3
 800274e:	4b3a      	ldr	r3, [pc, #232]	; (8002838 <change_lcd_display_mode+0x194>)
 8002750:	78db      	ldrb	r3, [r3, #3]
 8002752:	9301      	str	r3, [sp, #4]
 8002754:	9200      	str	r2, [sp, #0]
 8002756:	460b      	mov	r3, r1
 8002758:	4a38      	ldr	r2, [pc, #224]	; (800283c <change_lcd_display_mode+0x198>)
 800275a:	210b      	movs	r1, #11
 800275c:	4838      	ldr	r0, [pc, #224]	; (8002840 <change_lcd_display_mode+0x19c>)
 800275e:	f006 f871 	bl	8008844 <sniprintf>
		snprintf(g_time, sizeof(g_time),"%02d:%02d:%02d",sTime.Hours, sTime.Minutes, sTime.Seconds);
 8002762:	4b33      	ldr	r3, [pc, #204]	; (8002830 <change_lcd_display_mode+0x18c>)
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	4619      	mov	r1, r3
 8002768:	4b31      	ldr	r3, [pc, #196]	; (8002830 <change_lcd_display_mode+0x18c>)
 800276a:	785b      	ldrb	r3, [r3, #1]
 800276c:	461a      	mov	r2, r3
 800276e:	4b30      	ldr	r3, [pc, #192]	; (8002830 <change_lcd_display_mode+0x18c>)
 8002770:	789b      	ldrb	r3, [r3, #2]
 8002772:	9301      	str	r3, [sp, #4]
 8002774:	9200      	str	r2, [sp, #0]
 8002776:	460b      	mov	r3, r1
 8002778:	4a32      	ldr	r2, [pc, #200]	; (8002844 <change_lcd_display_mode+0x1a0>)
 800277a:	2109      	movs	r1, #9
 800277c:	4832      	ldr	r0, [pc, #200]	; (8002848 <change_lcd_display_mode+0x1a4>)
 800277e:	f006 f861 	bl	8008844 <sniprintf>

	}


	//dont change lcd modes when updating the RTC
	if(g_update_RTC ==0){
 8002782:	4b32      	ldr	r3, [pc, #200]	; (800284c <change_lcd_display_mode+0x1a8>)
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d102      	bne.n	8002790 <change_lcd_display_mode+0xec>
		lcd_display_mode_change_on_button_press() ;
 800278a:	f000 f8ab 	bl	80028e4 <lcd_display_mode_change_on_button_press>
 800278e:	e006      	b.n	800279e <change_lcd_display_mode+0xfa>

	}
	else{
		if(g_left_button_pressed == 1){
 8002790:	4b2f      	ldr	r3, [pc, #188]	; (8002850 <change_lcd_display_mode+0x1ac>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d102      	bne.n	800279e <change_lcd_display_mode+0xfa>
			g_left_button_pressed = 0 ; //if left button pressed when updating the RTC parameteers
 8002798:	4b2d      	ldr	r3, [pc, #180]	; (8002850 <change_lcd_display_mode+0x1ac>)
 800279a:	2200      	movs	r2, #0
 800279c:	701a      	strb	r2, [r3, #0]
		}
	}


	if(display_result == 1){
 800279e:	4b2d      	ldr	r3, [pc, #180]	; (8002854 <change_lcd_display_mode+0x1b0>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d120      	bne.n	80027e8 <change_lcd_display_mode+0x144>
		display_result = 0;
 80027a6:	4b2b      	ldr	r3, [pc, #172]	; (8002854 <change_lcd_display_mode+0x1b0>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	701a      	strb	r2, [r3, #0]


		if(g_lcd_mode == 2){//display mode 2: EN measurement
 80027ac:	4b16      	ldr	r3, [pc, #88]	; (8002808 <change_lcd_display_mode+0x164>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d105      	bne.n	80027c0 <change_lcd_display_mode+0x11c>
			display_result = 0; //display contents once only
 80027b4:	4b27      	ldr	r3, [pc, #156]	; (8002854 <change_lcd_display_mode+0x1b0>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	701a      	strb	r2, [r3, #0]

			lcd_Mode_2() ;
 80027ba:	f7ff fedf 	bl	800257c <lcd_Mode_2>
//		}

		change_between_dispplay_modes();
	}

}
 80027be:	e01d      	b.n	80027fc <change_lcd_display_mode+0x158>
		else if(g_lcd_mode == 1 ){//disply mode 1: SP measurements
 80027c0:	4b11      	ldr	r3, [pc, #68]	; (8002808 <change_lcd_display_mode+0x164>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d105      	bne.n	80027d4 <change_lcd_display_mode+0x130>
			display_result = 0 ; //display content only once
 80027c8:	4b22      	ldr	r3, [pc, #136]	; (8002854 <change_lcd_display_mode+0x1b0>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	701a      	strb	r2, [r3, #0]
			lcd_Mode_1() ;
 80027ce:	f7ff fe85 	bl	80024dc <lcd_Mode_1>
}
 80027d2:	e013      	b.n	80027fc <change_lcd_display_mode+0x158>
			if(g_lcd_mode == 3){ //display mode 3: RTC
 80027d4:	4b0c      	ldr	r3, [pc, #48]	; (8002808 <change_lcd_display_mode+0x164>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2b03      	cmp	r3, #3
 80027da:	d10f      	bne.n	80027fc <change_lcd_display_mode+0x158>
				display_result = 0 ; //display content only once
 80027dc:	4b1d      	ldr	r3, [pc, #116]	; (8002854 <change_lcd_display_mode+0x1b0>)
 80027de:	2200      	movs	r2, #0
 80027e0:	701a      	strb	r2, [r3, #0]
				lcd_Mode_3();
 80027e2:	f7ff ff09 	bl	80025f8 <lcd_Mode_3>
}
 80027e6:	e009      	b.n	80027fc <change_lcd_display_mode+0x158>
	else if(display_result ==0 && g_lcd_mode == 4 ){
 80027e8:	4b1a      	ldr	r3, [pc, #104]	; (8002854 <change_lcd_display_mode+0x1b0>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d105      	bne.n	80027fc <change_lcd_display_mode+0x158>
 80027f0:	4b05      	ldr	r3, [pc, #20]	; (8002808 <change_lcd_display_mode+0x164>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2b04      	cmp	r3, #4
 80027f6:	d101      	bne.n	80027fc <change_lcd_display_mode+0x158>
		change_between_dispplay_modes();
 80027f8:	f000 f82e 	bl	8002858 <change_between_dispplay_modes>
}
 80027fc:	bf00      	nop
 80027fe:	46bd      	mov	sp, r7
 8002800:	bdb0      	pop	{r4, r5, r7, pc}
 8002802:	bf00      	nop
 8002804:	20000014 	.word	0x20000014
 8002808:	20000486 	.word	0x20000486
 800280c:	20000488 	.word	0x20000488
 8002810:	200003c4 	.word	0x200003c4
 8002814:	200003c6 	.word	0x200003c6
 8002818:	0800bbf8 	.word	0x0800bbf8
 800281c:	200003ec 	.word	0x200003ec
 8002820:	200003c8 	.word	0x200003c8
 8002824:	200003d0 	.word	0x200003d0
 8002828:	0800bc0c 	.word	0x0800bc0c
 800282c:	20000414 	.word	0x20000414
 8002830:	200004a0 	.word	0x200004a0
 8002834:	20000274 	.word	0x20000274
 8002838:	200004b4 	.word	0x200004b4
 800283c:	0800bc64 	.word	0x0800bc64
 8002840:	200004bc 	.word	0x200004bc
 8002844:	0800bc78 	.word	0x0800bc78
 8002848:	200004c8 	.word	0x200004c8
 800284c:	200004b8 	.word	0x200004b8
 8002850:	200004f8 	.word	0x200004f8
 8002854:	20000487 	.word	0x20000487

08002858 <change_between_dispplay_modes>:

uint32_t time_passed_between_mode = 0 ;
uint8_t display_mode_x = 2; //start at mode 2

void change_between_dispplay_modes(){
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0

	if(HAL_GetTick()- time_passed_between_mode >= 2000 && display_mode_x == 1){
 800285c:	f001 fc24 	bl	80040a8 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	4b1e      	ldr	r3, [pc, #120]	; (80028dc <change_between_dispplay_modes+0x84>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800286c:	d309      	bcc.n	8002882 <change_between_dispplay_modes+0x2a>
 800286e:	4b1c      	ldr	r3, [pc, #112]	; (80028e0 <change_between_dispplay_modes+0x88>)
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d105      	bne.n	8002882 <change_between_dispplay_modes+0x2a>
		display_mode_x = 2 ;
 8002876:	4b1a      	ldr	r3, [pc, #104]	; (80028e0 <change_between_dispplay_modes+0x88>)
 8002878:	2202      	movs	r2, #2
 800287a:	701a      	strb	r2, [r3, #0]
		lcd_Mode_1() ;
 800287c:	f7ff fe2e 	bl	80024dc <lcd_Mode_1>
 8002880:	e011      	b.n	80028a6 <change_between_dispplay_modes+0x4e>

	}

	else if(HAL_GetTick()- time_passed_between_mode >=4000 && display_mode_x == 2){
 8002882:	f001 fc11 	bl	80040a8 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	4b14      	ldr	r3, [pc, #80]	; (80028dc <change_between_dispplay_modes+0x84>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8002892:	d308      	bcc.n	80028a6 <change_between_dispplay_modes+0x4e>
 8002894:	4b12      	ldr	r3, [pc, #72]	; (80028e0 <change_between_dispplay_modes+0x88>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	2b02      	cmp	r3, #2
 800289a:	d104      	bne.n	80028a6 <change_between_dispplay_modes+0x4e>
		display_mode_x = 3 ;
 800289c:	4b10      	ldr	r3, [pc, #64]	; (80028e0 <change_between_dispplay_modes+0x88>)
 800289e:	2203      	movs	r2, #3
 80028a0:	701a      	strb	r2, [r3, #0]
		lcd_Mode_2();
 80028a2:	f7ff fe6b 	bl	800257c <lcd_Mode_2>

	}

	if(HAL_GetTick()- time_passed_between_mode >=6000 && display_mode_x == 3){
 80028a6:	f001 fbff 	bl	80040a8 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <change_between_dispplay_modes+0x84>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	f241 726f 	movw	r2, #5999	; 0x176f
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d90d      	bls.n	80028d6 <change_between_dispplay_modes+0x7e>
 80028ba:	4b09      	ldr	r3, [pc, #36]	; (80028e0 <change_between_dispplay_modes+0x88>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b03      	cmp	r3, #3
 80028c0:	d109      	bne.n	80028d6 <change_between_dispplay_modes+0x7e>
		display_mode_x= 1;
 80028c2:	4b07      	ldr	r3, [pc, #28]	; (80028e0 <change_between_dispplay_modes+0x88>)
 80028c4:	2201      	movs	r2, #1
 80028c6:	701a      	strb	r2, [r3, #0]
		time_passed_between_mode = HAL_GetTick() ;
 80028c8:	f001 fbee 	bl	80040a8 <HAL_GetTick>
 80028cc:	4603      	mov	r3, r0
 80028ce:	4a03      	ldr	r2, [pc, #12]	; (80028dc <change_between_dispplay_modes+0x84>)
 80028d0:	6013      	str	r3, [r2, #0]
		lcd_Mode_3() ;
 80028d2:	f7ff fe91 	bl	80025f8 <lcd_Mode_3>

	}

}
 80028d6:	bf00      	nop
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	200004f4 	.word	0x200004f4
 80028e0:	20000030 	.word	0x20000030

080028e4 <lcd_display_mode_change_on_button_press>:
/**
 * This function works to change the LCD display modes when the left button is pressed
 */
void lcd_display_mode_change_on_button_press(){
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0

	//update state based on button press - DONT UPDATE ANYS STATES WHILE MEASURING
	if(g_left_button_pressed == 1 && g_EN_measure_LCD_display ==0 && g_SP_measure_LCD_diplay ==0 && g_SP_measure !=1 && g_EN_measure !=1){
 80028e8:	4b36      	ldr	r3, [pc, #216]	; (80029c4 <lcd_display_mode_change_on_button_press+0xe0>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d123      	bne.n	8002938 <lcd_display_mode_change_on_button_press+0x54>
 80028f0:	4b35      	ldr	r3, [pc, #212]	; (80029c8 <lcd_display_mode_change_on_button_press+0xe4>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d11f      	bne.n	8002938 <lcd_display_mode_change_on_button_press+0x54>
 80028f8:	4b34      	ldr	r3, [pc, #208]	; (80029cc <lcd_display_mode_change_on_button_press+0xe8>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d11b      	bne.n	8002938 <lcd_display_mode_change_on_button_press+0x54>
 8002900:	4b33      	ldr	r3, [pc, #204]	; (80029d0 <lcd_display_mode_change_on_button_press+0xec>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d017      	beq.n	8002938 <lcd_display_mode_change_on_button_press+0x54>
 8002908:	4b32      	ldr	r3, [pc, #200]	; (80029d4 <lcd_display_mode_change_on_button_press+0xf0>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d013      	beq.n	8002938 <lcd_display_mode_change_on_button_press+0x54>

		//display/update lcd results
		display_result= 1 ;
 8002910:	4b31      	ldr	r3, [pc, #196]	; (80029d8 <lcd_display_mode_change_on_button_press+0xf4>)
 8002912:	2201      	movs	r2, #1
 8002914:	701a      	strb	r2, [r3, #0]

		g_left_button_pressed = 0;
 8002916:	4b2b      	ldr	r3, [pc, #172]	; (80029c4 <lcd_display_mode_change_on_button_press+0xe0>)
 8002918:	2200      	movs	r2, #0
 800291a:	701a      	strb	r2, [r3, #0]
		g_lcd_mode ++;
 800291c:	4b2f      	ldr	r3, [pc, #188]	; (80029dc <lcd_display_mode_change_on_button_press+0xf8>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	3301      	adds	r3, #1
 8002922:	b2da      	uxtb	r2, r3
 8002924:	4b2d      	ldr	r3, [pc, #180]	; (80029dc <lcd_display_mode_change_on_button_press+0xf8>)
 8002926:	701a      	strb	r2, [r3, #0]

		//cycles between the mode
		if(g_lcd_mode>4){
 8002928:	4b2c      	ldr	r3, [pc, #176]	; (80029dc <lcd_display_mode_change_on_button_press+0xf8>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b04      	cmp	r3, #4
 800292e:	d944      	bls.n	80029ba <lcd_display_mode_change_on_button_press+0xd6>
			g_lcd_mode = 1 ;
 8002930:	4b2a      	ldr	r3, [pc, #168]	; (80029dc <lcd_display_mode_change_on_button_press+0xf8>)
 8002932:	2201      	movs	r2, #1
 8002934:	701a      	strb	r2, [r3, #0]
		if(g_lcd_mode>4){
 8002936:	e040      	b.n	80029ba <lcd_display_mode_change_on_button_press+0xd6>
		}
	}

	//update lcd state based on  EN stop command
	else if(g_left_button_pressed == 0 && g_EN_measure_LCD_display == 1 && g_SP_measure_LCD_diplay ==0  && g_SP_measure !=1 && g_EN_measure !=1 ){
 8002938:	4b22      	ldr	r3, [pc, #136]	; (80029c4 <lcd_display_mode_change_on_button_press+0xe0>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d119      	bne.n	8002974 <lcd_display_mode_change_on_button_press+0x90>
 8002940:	4b21      	ldr	r3, [pc, #132]	; (80029c8 <lcd_display_mode_change_on_button_press+0xe4>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d115      	bne.n	8002974 <lcd_display_mode_change_on_button_press+0x90>
 8002948:	4b20      	ldr	r3, [pc, #128]	; (80029cc <lcd_display_mode_change_on_button_press+0xe8>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d111      	bne.n	8002974 <lcd_display_mode_change_on_button_press+0x90>
 8002950:	4b1f      	ldr	r3, [pc, #124]	; (80029d0 <lcd_display_mode_change_on_button_press+0xec>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d00d      	beq.n	8002974 <lcd_display_mode_change_on_button_press+0x90>
 8002958:	4b1e      	ldr	r3, [pc, #120]	; (80029d4 <lcd_display_mode_change_on_button_press+0xf0>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d009      	beq.n	8002974 <lcd_display_mode_change_on_button_press+0x90>
		g_EN_measure_LCD_display = 0 ;
 8002960:	4b19      	ldr	r3, [pc, #100]	; (80029c8 <lcd_display_mode_change_on_button_press+0xe4>)
 8002962:	2200      	movs	r2, #0
 8002964:	701a      	strb	r2, [r3, #0]

		g_lcd_mode = 2; //display EN measurements
 8002966:	4b1d      	ldr	r3, [pc, #116]	; (80029dc <lcd_display_mode_change_on_button_press+0xf8>)
 8002968:	2202      	movs	r2, #2
 800296a:	701a      	strb	r2, [r3, #0]

		//display/update lcd results
		display_result= 1 ;
 800296c:	4b1a      	ldr	r3, [pc, #104]	; (80029d8 <lcd_display_mode_change_on_button_press+0xf4>)
 800296e:	2201      	movs	r2, #1
 8002970:	701a      	strb	r2, [r3, #0]
 8002972:	e022      	b.n	80029ba <lcd_display_mode_change_on_button_press+0xd6>
	}

	//update LCD based on SP command
	else if(g_left_button_pressed ==0 && g_EN_measure_LCD_display== 0 && g_SP_measure_LCD_diplay== 1  && g_SP_measure !=1 && g_EN_measure !=1){
 8002974:	4b13      	ldr	r3, [pc, #76]	; (80029c4 <lcd_display_mode_change_on_button_press+0xe0>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d119      	bne.n	80029b0 <lcd_display_mode_change_on_button_press+0xcc>
 800297c:	4b12      	ldr	r3, [pc, #72]	; (80029c8 <lcd_display_mode_change_on_button_press+0xe4>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d115      	bne.n	80029b0 <lcd_display_mode_change_on_button_press+0xcc>
 8002984:	4b11      	ldr	r3, [pc, #68]	; (80029cc <lcd_display_mode_change_on_button_press+0xe8>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d111      	bne.n	80029b0 <lcd_display_mode_change_on_button_press+0xcc>
 800298c:	4b10      	ldr	r3, [pc, #64]	; (80029d0 <lcd_display_mode_change_on_button_press+0xec>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d00d      	beq.n	80029b0 <lcd_display_mode_change_on_button_press+0xcc>
 8002994:	4b0f      	ldr	r3, [pc, #60]	; (80029d4 <lcd_display_mode_change_on_button_press+0xf0>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d009      	beq.n	80029b0 <lcd_display_mode_change_on_button_press+0xcc>
		g_SP_measure_LCD_diplay =0;
 800299c:	4b0b      	ldr	r3, [pc, #44]	; (80029cc <lcd_display_mode_change_on_button_press+0xe8>)
 800299e:	2200      	movs	r2, #0
 80029a0:	701a      	strb	r2, [r3, #0]

		g_lcd_mode = 1; //display SP measurements
 80029a2:	4b0e      	ldr	r3, [pc, #56]	; (80029dc <lcd_display_mode_change_on_button_press+0xf8>)
 80029a4:	2201      	movs	r2, #1
 80029a6:	701a      	strb	r2, [r3, #0]

		//display/update lcd results
		display_result= 1 ;
 80029a8:	4b0b      	ldr	r3, [pc, #44]	; (80029d8 <lcd_display_mode_change_on_button_press+0xf4>)
 80029aa:	2201      	movs	r2, #1
 80029ac:	701a      	strb	r2, [r3, #0]
 80029ae:	e004      	b.n	80029ba <lcd_display_mode_change_on_button_press+0xd6>
	}

	//otherwise dont update display maode
	else{
		g_lcd_mode = g_lcd_mode ;
 80029b0:	4b0a      	ldr	r3, [pc, #40]	; (80029dc <lcd_display_mode_change_on_button_press+0xf8>)
 80029b2:	781a      	ldrb	r2, [r3, #0]
 80029b4:	4b09      	ldr	r3, [pc, #36]	; (80029dc <lcd_display_mode_change_on_button_press+0xf8>)
 80029b6:	701a      	strb	r2, [r3, #0]
	}

}
 80029b8:	bf00      	nop
 80029ba:	bf00      	nop
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	200004f8 	.word	0x200004f8
 80029c8:	2000043c 	.word	0x2000043c
 80029cc:	20000447 	.word	0x20000447
 80029d0:	20000446 	.word	0x20000446
 80029d4:	2000043b 	.word	0x2000043b
 80029d8:	20000487 	.word	0x20000487
 80029dc:	20000486 	.word	0x20000486

080029e0 <RTC_date_and_time_update>:
 *The system is designed such that until all the parameters are set ,no other state is execessible.
 *Once the Menu state is entered. It can only be exited on when the left button is pressed. This restores normal system state functionality
 *The top and bottom measurements can be used to update /start or stop the measurement sequence
 */

void RTC_date_and_time_update(uint8_t paramx){
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af02      	add	r7, sp, #8
 80029e6:	4603      	mov	r3, r0
 80029e8:	71fb      	strb	r3, [r7, #7]

	//IF UPDATING RTC VALUES - do not use top button and bottom button for measurement sequence

	if(paramx == 1){ //update date
 80029ea:	79fb      	ldrb	r3, [r7, #7]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d16d      	bne.n	8002acc <RTC_date_and_time_update+0xec>

		//top button pressed - increment date
		if(g_top_button_pressed== 1){
 80029f0:	4b6f      	ldr	r3, [pc, #444]	; (8002bb0 <RTC_date_and_time_update+0x1d0>)
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d131      	bne.n	8002a5c <RTC_date_and_time_update+0x7c>
			sDate.Date++ ;
 80029f8:	4b6e      	ldr	r3, [pc, #440]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 80029fa:	789b      	ldrb	r3, [r3, #2]
 80029fc:	3301      	adds	r3, #1
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	4b6c      	ldr	r3, [pc, #432]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 8002a02:	709a      	strb	r2, [r3, #2]

			//oveflow
			if(sDate.Date > 30){
 8002a04:	4b6b      	ldr	r3, [pc, #428]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 8002a06:	789b      	ldrb	r3, [r3, #2]
 8002a08:	2b1e      	cmp	r3, #30
 8002a0a:	d902      	bls.n	8002a12 <RTC_date_and_time_update+0x32>
				sDate.Date = 1 ;
 8002a0c:	4b69      	ldr	r3, [pc, #420]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 8002a0e:	2201      	movs	r2, #1
 8002a10:	709a      	strb	r2, [r3, #2]
			}

			g_top_button_pressed =0 ;
 8002a12:	4b67      	ldr	r3, [pc, #412]	; (8002bb0 <RTC_date_and_time_update+0x1d0>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	701a      	strb	r2, [r3, #0]

			//display date - first row
			snprintf(g_date, sizeof(g_date),"%02d/%02d/20%02d",sDate.Date, sDate.Month,sDate.Year);
 8002a18:	4b66      	ldr	r3, [pc, #408]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 8002a1a:	789b      	ldrb	r3, [r3, #2]
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4b65      	ldr	r3, [pc, #404]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 8002a20:	785b      	ldrb	r3, [r3, #1]
 8002a22:	461a      	mov	r2, r3
 8002a24:	4b63      	ldr	r3, [pc, #396]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 8002a26:	78db      	ldrb	r3, [r3, #3]
 8002a28:	9301      	str	r3, [sp, #4]
 8002a2a:	9200      	str	r2, [sp, #0]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	4a62      	ldr	r2, [pc, #392]	; (8002bb8 <RTC_date_and_time_update+0x1d8>)
 8002a30:	210b      	movs	r1, #11
 8002a32:	4862      	ldr	r0, [pc, #392]	; (8002bbc <RTC_date_and_time_update+0x1dc>)
 8002a34:	f005 ff06 	bl	8008844 <sniprintf>
			Lcd_cursor(&lcd, 0, 0) ;
 8002a38:	2200      	movs	r2, #0
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	4860      	ldr	r0, [pc, #384]	; (8002bc0 <RTC_date_and_time_update+0x1e0>)
 8002a3e:	f7fe fb21 	bl	8001084 <Lcd_cursor>
			Lcd_string(&lcd, g_date);
 8002a42:	495e      	ldr	r1, [pc, #376]	; (8002bbc <RTC_date_and_time_update+0x1dc>)
 8002a44:	485e      	ldr	r0, [pc, #376]	; (8002bc0 <RTC_date_and_time_update+0x1e0>)
 8002a46:	f7fe fafd 	bl	8001044 <Lcd_string>

			Lcd_cursor(&lcd, 1, 0	) ;
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	485c      	ldr	r0, [pc, #368]	; (8002bc0 <RTC_date_and_time_update+0x1e0>)
 8002a50:	f7fe fb18 	bl	8001084 <Lcd_cursor>
			Lcd_string(&lcd, g_time);
 8002a54:	495b      	ldr	r1, [pc, #364]	; (8002bc4 <RTC_date_and_time_update+0x1e4>)
 8002a56:	485a      	ldr	r0, [pc, #360]	; (8002bc0 <RTC_date_and_time_update+0x1e0>)
 8002a58:	f7fe faf4 	bl	8001044 <Lcd_string>


		}

		//bottom button press -decrement date
		if(g_bottom_button_pressed== 1){
 8002a5c:	4b5a      	ldr	r3, [pc, #360]	; (8002bc8 <RTC_date_and_time_update+0x1e8>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	f040 82c2 	bne.w	8002fea <RTC_date_and_time_update+0x60a>
			sDate.Date-- ;
 8002a66:	4b53      	ldr	r3, [pc, #332]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 8002a68:	789b      	ldrb	r3, [r3, #2]
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	b2da      	uxtb	r2, r3
 8002a6e:	4b51      	ldr	r3, [pc, #324]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 8002a70:	709a      	strb	r2, [r3, #2]

			//oveflow
			if(sDate.Date < 1){
 8002a72:	4b50      	ldr	r3, [pc, #320]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 8002a74:	789b      	ldrb	r3, [r3, #2]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d102      	bne.n	8002a80 <RTC_date_and_time_update+0xa0>
				sDate.Date = 31 ;
 8002a7a:	4b4e      	ldr	r3, [pc, #312]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 8002a7c:	221f      	movs	r2, #31
 8002a7e:	709a      	strb	r2, [r3, #2]
			}

			//display date - first row
			snprintf(g_date, sizeof(g_date),"%02d/%02d/20%02d",sDate.Date, sDate.Month,sDate.Year);
 8002a80:	4b4c      	ldr	r3, [pc, #304]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 8002a82:	789b      	ldrb	r3, [r3, #2]
 8002a84:	4619      	mov	r1, r3
 8002a86:	4b4b      	ldr	r3, [pc, #300]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 8002a88:	785b      	ldrb	r3, [r3, #1]
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	4b49      	ldr	r3, [pc, #292]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 8002a8e:	78db      	ldrb	r3, [r3, #3]
 8002a90:	9301      	str	r3, [sp, #4]
 8002a92:	9200      	str	r2, [sp, #0]
 8002a94:	460b      	mov	r3, r1
 8002a96:	4a48      	ldr	r2, [pc, #288]	; (8002bb8 <RTC_date_and_time_update+0x1d8>)
 8002a98:	210b      	movs	r1, #11
 8002a9a:	4848      	ldr	r0, [pc, #288]	; (8002bbc <RTC_date_and_time_update+0x1dc>)
 8002a9c:	f005 fed2 	bl	8008844 <sniprintf>
			Lcd_cursor(&lcd, 0, 0) ;
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	4846      	ldr	r0, [pc, #280]	; (8002bc0 <RTC_date_and_time_update+0x1e0>)
 8002aa6:	f7fe faed 	bl	8001084 <Lcd_cursor>
			Lcd_string(&lcd, g_date);
 8002aaa:	4944      	ldr	r1, [pc, #272]	; (8002bbc <RTC_date_and_time_update+0x1dc>)
 8002aac:	4844      	ldr	r0, [pc, #272]	; (8002bc0 <RTC_date_and_time_update+0x1e0>)
 8002aae:	f7fe fac9 	bl	8001044 <Lcd_string>

			Lcd_cursor(&lcd, 1, 0) ;
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	4842      	ldr	r0, [pc, #264]	; (8002bc0 <RTC_date_and_time_update+0x1e0>)
 8002ab8:	f7fe fae4 	bl	8001084 <Lcd_cursor>
			Lcd_string(&lcd, g_time);
 8002abc:	4941      	ldr	r1, [pc, #260]	; (8002bc4 <RTC_date_and_time_update+0x1e4>)
 8002abe:	4840      	ldr	r0, [pc, #256]	; (8002bc0 <RTC_date_and_time_update+0x1e0>)
 8002ac0:	f7fe fac0 	bl	8001044 <Lcd_string>


			g_bottom_button_pressed =0 ;
 8002ac4:	4b40      	ldr	r3, [pc, #256]	; (8002bc8 <RTC_date_and_time_update+0x1e8>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	701a      	strb	r2, [r3, #0]
		}

	}


}
 8002aca:	e28e      	b.n	8002fea <RTC_date_and_time_update+0x60a>
	else if(paramx == 2){ //update month
 8002acc:	79fb      	ldrb	r3, [r7, #7]
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d17c      	bne.n	8002bcc <RTC_date_and_time_update+0x1ec>
		if(g_top_button_pressed== 1){
 8002ad2:	4b37      	ldr	r3, [pc, #220]	; (8002bb0 <RTC_date_and_time_update+0x1d0>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d131      	bne.n	8002b3e <RTC_date_and_time_update+0x15e>
			sDate.Month++ ;
 8002ada:	4b36      	ldr	r3, [pc, #216]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 8002adc:	785b      	ldrb	r3, [r3, #1]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	b2da      	uxtb	r2, r3
 8002ae2:	4b34      	ldr	r3, [pc, #208]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 8002ae4:	705a      	strb	r2, [r3, #1]
			if(sDate.Month > 12){
 8002ae6:	4b33      	ldr	r3, [pc, #204]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 8002ae8:	785b      	ldrb	r3, [r3, #1]
 8002aea:	2b0c      	cmp	r3, #12
 8002aec:	d902      	bls.n	8002af4 <RTC_date_and_time_update+0x114>
				sDate.Month = 1 ;
 8002aee:	4b31      	ldr	r3, [pc, #196]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 8002af0:	2201      	movs	r2, #1
 8002af2:	705a      	strb	r2, [r3, #1]
			snprintf(g_date, sizeof(g_date),"%02d/%02d/20%02d",sDate.Date, sDate.Month,sDate.Year);
 8002af4:	4b2f      	ldr	r3, [pc, #188]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 8002af6:	789b      	ldrb	r3, [r3, #2]
 8002af8:	4619      	mov	r1, r3
 8002afa:	4b2e      	ldr	r3, [pc, #184]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 8002afc:	785b      	ldrb	r3, [r3, #1]
 8002afe:	461a      	mov	r2, r3
 8002b00:	4b2c      	ldr	r3, [pc, #176]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 8002b02:	78db      	ldrb	r3, [r3, #3]
 8002b04:	9301      	str	r3, [sp, #4]
 8002b06:	9200      	str	r2, [sp, #0]
 8002b08:	460b      	mov	r3, r1
 8002b0a:	4a2b      	ldr	r2, [pc, #172]	; (8002bb8 <RTC_date_and_time_update+0x1d8>)
 8002b0c:	210b      	movs	r1, #11
 8002b0e:	482b      	ldr	r0, [pc, #172]	; (8002bbc <RTC_date_and_time_update+0x1dc>)
 8002b10:	f005 fe98 	bl	8008844 <sniprintf>
			Lcd_cursor(&lcd, 0, 0) ;
 8002b14:	2200      	movs	r2, #0
 8002b16:	2100      	movs	r1, #0
 8002b18:	4829      	ldr	r0, [pc, #164]	; (8002bc0 <RTC_date_and_time_update+0x1e0>)
 8002b1a:	f7fe fab3 	bl	8001084 <Lcd_cursor>
			Lcd_string(&lcd, g_date);
 8002b1e:	4927      	ldr	r1, [pc, #156]	; (8002bbc <RTC_date_and_time_update+0x1dc>)
 8002b20:	4827      	ldr	r0, [pc, #156]	; (8002bc0 <RTC_date_and_time_update+0x1e0>)
 8002b22:	f7fe fa8f 	bl	8001044 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0) ;
 8002b26:	2200      	movs	r2, #0
 8002b28:	2101      	movs	r1, #1
 8002b2a:	4825      	ldr	r0, [pc, #148]	; (8002bc0 <RTC_date_and_time_update+0x1e0>)
 8002b2c:	f7fe faaa 	bl	8001084 <Lcd_cursor>
			Lcd_string(&lcd, g_time);
 8002b30:	4924      	ldr	r1, [pc, #144]	; (8002bc4 <RTC_date_and_time_update+0x1e4>)
 8002b32:	4823      	ldr	r0, [pc, #140]	; (8002bc0 <RTC_date_and_time_update+0x1e0>)
 8002b34:	f7fe fa86 	bl	8001044 <Lcd_string>
			g_top_button_pressed =0 ;
 8002b38:	4b1d      	ldr	r3, [pc, #116]	; (8002bb0 <RTC_date_and_time_update+0x1d0>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	701a      	strb	r2, [r3, #0]
		if(g_bottom_button_pressed== 1){
 8002b3e:	4b22      	ldr	r3, [pc, #136]	; (8002bc8 <RTC_date_and_time_update+0x1e8>)
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	f040 8251 	bne.w	8002fea <RTC_date_and_time_update+0x60a>
			sDate.Month-- ;
 8002b48:	4b1a      	ldr	r3, [pc, #104]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 8002b4a:	785b      	ldrb	r3, [r3, #1]
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	b2da      	uxtb	r2, r3
 8002b50:	4b18      	ldr	r3, [pc, #96]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 8002b52:	705a      	strb	r2, [r3, #1]
			if(sDate.Month < 1){
 8002b54:	4b17      	ldr	r3, [pc, #92]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 8002b56:	785b      	ldrb	r3, [r3, #1]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d102      	bne.n	8002b62 <RTC_date_and_time_update+0x182>
				sDate.Month = 12 ;
 8002b5c:	4b15      	ldr	r3, [pc, #84]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 8002b5e:	220c      	movs	r2, #12
 8002b60:	705a      	strb	r2, [r3, #1]
			snprintf(g_date, sizeof(g_date),"%02d/%02d/20%02d",sDate.Date, sDate.Month,sDate.Year);
 8002b62:	4b14      	ldr	r3, [pc, #80]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 8002b64:	789b      	ldrb	r3, [r3, #2]
 8002b66:	4619      	mov	r1, r3
 8002b68:	4b12      	ldr	r3, [pc, #72]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 8002b6a:	785b      	ldrb	r3, [r3, #1]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	4b11      	ldr	r3, [pc, #68]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 8002b70:	78db      	ldrb	r3, [r3, #3]
 8002b72:	9301      	str	r3, [sp, #4]
 8002b74:	9200      	str	r2, [sp, #0]
 8002b76:	460b      	mov	r3, r1
 8002b78:	4a0f      	ldr	r2, [pc, #60]	; (8002bb8 <RTC_date_and_time_update+0x1d8>)
 8002b7a:	210b      	movs	r1, #11
 8002b7c:	480f      	ldr	r0, [pc, #60]	; (8002bbc <RTC_date_and_time_update+0x1dc>)
 8002b7e:	f005 fe61 	bl	8008844 <sniprintf>
			Lcd_cursor(&lcd, 0, 0) ;
 8002b82:	2200      	movs	r2, #0
 8002b84:	2100      	movs	r1, #0
 8002b86:	480e      	ldr	r0, [pc, #56]	; (8002bc0 <RTC_date_and_time_update+0x1e0>)
 8002b88:	f7fe fa7c 	bl	8001084 <Lcd_cursor>
			Lcd_string(&lcd, g_date);
 8002b8c:	490b      	ldr	r1, [pc, #44]	; (8002bbc <RTC_date_and_time_update+0x1dc>)
 8002b8e:	480c      	ldr	r0, [pc, #48]	; (8002bc0 <RTC_date_and_time_update+0x1e0>)
 8002b90:	f7fe fa58 	bl	8001044 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0) ;
 8002b94:	2200      	movs	r2, #0
 8002b96:	2101      	movs	r1, #1
 8002b98:	4809      	ldr	r0, [pc, #36]	; (8002bc0 <RTC_date_and_time_update+0x1e0>)
 8002b9a:	f7fe fa73 	bl	8001084 <Lcd_cursor>
			Lcd_string(&lcd, g_time);
 8002b9e:	4909      	ldr	r1, [pc, #36]	; (8002bc4 <RTC_date_and_time_update+0x1e4>)
 8002ba0:	4807      	ldr	r0, [pc, #28]	; (8002bc0 <RTC_date_and_time_update+0x1e0>)
 8002ba2:	f7fe fa4f 	bl	8001044 <Lcd_string>
			g_bottom_button_pressed =0 ;
 8002ba6:	4b08      	ldr	r3, [pc, #32]	; (8002bc8 <RTC_date_and_time_update+0x1e8>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	701a      	strb	r2, [r3, #0]
}
 8002bac:	e21d      	b.n	8002fea <RTC_date_and_time_update+0x60a>
 8002bae:	bf00      	nop
 8002bb0:	200004fa 	.word	0x200004fa
 8002bb4:	200004b4 	.word	0x200004b4
 8002bb8:	0800bc64 	.word	0x0800bc64
 8002bbc:	200004bc 	.word	0x200004bc
 8002bc0:	20000488 	.word	0x20000488
 8002bc4:	200004c8 	.word	0x200004c8
 8002bc8:	200004fb 	.word	0x200004fb
	else if(paramx == 3){ //update year -
 8002bcc:	79fb      	ldrb	r3, [r7, #7]
 8002bce:	2b03      	cmp	r3, #3
 8002bd0:	d16d      	bne.n	8002cae <RTC_date_and_time_update+0x2ce>
		if(g_top_button_pressed== 1){
 8002bd2:	4b6f      	ldr	r3, [pc, #444]	; (8002d90 <RTC_date_and_time_update+0x3b0>)
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d131      	bne.n	8002c3e <RTC_date_and_time_update+0x25e>
			sDate.Year++ ;
 8002bda:	4b6e      	ldr	r3, [pc, #440]	; (8002d94 <RTC_date_and_time_update+0x3b4>)
 8002bdc:	78db      	ldrb	r3, [r3, #3]
 8002bde:	3301      	adds	r3, #1
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	4b6c      	ldr	r3, [pc, #432]	; (8002d94 <RTC_date_and_time_update+0x3b4>)
 8002be4:	70da      	strb	r2, [r3, #3]
			if(sDate.Year > 99){
 8002be6:	4b6b      	ldr	r3, [pc, #428]	; (8002d94 <RTC_date_and_time_update+0x3b4>)
 8002be8:	78db      	ldrb	r3, [r3, #3]
 8002bea:	2b63      	cmp	r3, #99	; 0x63
 8002bec:	d902      	bls.n	8002bf4 <RTC_date_and_time_update+0x214>
				sDate.Year = 0 ;
 8002bee:	4b69      	ldr	r3, [pc, #420]	; (8002d94 <RTC_date_and_time_update+0x3b4>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	70da      	strb	r2, [r3, #3]
			snprintf(g_date, sizeof(g_date),"%02d/%02d/20%02d",sDate.Date, sDate.Month,sDate.Year);
 8002bf4:	4b67      	ldr	r3, [pc, #412]	; (8002d94 <RTC_date_and_time_update+0x3b4>)
 8002bf6:	789b      	ldrb	r3, [r3, #2]
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4b66      	ldr	r3, [pc, #408]	; (8002d94 <RTC_date_and_time_update+0x3b4>)
 8002bfc:	785b      	ldrb	r3, [r3, #1]
 8002bfe:	461a      	mov	r2, r3
 8002c00:	4b64      	ldr	r3, [pc, #400]	; (8002d94 <RTC_date_and_time_update+0x3b4>)
 8002c02:	78db      	ldrb	r3, [r3, #3]
 8002c04:	9301      	str	r3, [sp, #4]
 8002c06:	9200      	str	r2, [sp, #0]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	4a63      	ldr	r2, [pc, #396]	; (8002d98 <RTC_date_and_time_update+0x3b8>)
 8002c0c:	210b      	movs	r1, #11
 8002c0e:	4863      	ldr	r0, [pc, #396]	; (8002d9c <RTC_date_and_time_update+0x3bc>)
 8002c10:	f005 fe18 	bl	8008844 <sniprintf>
			Lcd_cursor(&lcd, 0, 0) ;
 8002c14:	2200      	movs	r2, #0
 8002c16:	2100      	movs	r1, #0
 8002c18:	4861      	ldr	r0, [pc, #388]	; (8002da0 <RTC_date_and_time_update+0x3c0>)
 8002c1a:	f7fe fa33 	bl	8001084 <Lcd_cursor>
			Lcd_string(&lcd, g_date);
 8002c1e:	495f      	ldr	r1, [pc, #380]	; (8002d9c <RTC_date_and_time_update+0x3bc>)
 8002c20:	485f      	ldr	r0, [pc, #380]	; (8002da0 <RTC_date_and_time_update+0x3c0>)
 8002c22:	f7fe fa0f 	bl	8001044 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0) ;
 8002c26:	2200      	movs	r2, #0
 8002c28:	2101      	movs	r1, #1
 8002c2a:	485d      	ldr	r0, [pc, #372]	; (8002da0 <RTC_date_and_time_update+0x3c0>)
 8002c2c:	f7fe fa2a 	bl	8001084 <Lcd_cursor>
			Lcd_string(&lcd, g_time);
 8002c30:	495c      	ldr	r1, [pc, #368]	; (8002da4 <RTC_date_and_time_update+0x3c4>)
 8002c32:	485b      	ldr	r0, [pc, #364]	; (8002da0 <RTC_date_and_time_update+0x3c0>)
 8002c34:	f7fe fa06 	bl	8001044 <Lcd_string>
			g_top_button_pressed =0 ;
 8002c38:	4b55      	ldr	r3, [pc, #340]	; (8002d90 <RTC_date_and_time_update+0x3b0>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	701a      	strb	r2, [r3, #0]
		if(g_bottom_button_pressed== 1){
 8002c3e:	4b5a      	ldr	r3, [pc, #360]	; (8002da8 <RTC_date_and_time_update+0x3c8>)
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	f040 81d1 	bne.w	8002fea <RTC_date_and_time_update+0x60a>
			sDate.Year-- ;
 8002c48:	4b52      	ldr	r3, [pc, #328]	; (8002d94 <RTC_date_and_time_update+0x3b4>)
 8002c4a:	78db      	ldrb	r3, [r3, #3]
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	b2da      	uxtb	r2, r3
 8002c50:	4b50      	ldr	r3, [pc, #320]	; (8002d94 <RTC_date_and_time_update+0x3b4>)
 8002c52:	70da      	strb	r2, [r3, #3]
			if(sDate.Year < 1){
 8002c54:	4b4f      	ldr	r3, [pc, #316]	; (8002d94 <RTC_date_and_time_update+0x3b4>)
 8002c56:	78db      	ldrb	r3, [r3, #3]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d102      	bne.n	8002c62 <RTC_date_and_time_update+0x282>
				sDate.Year = 99 ;
 8002c5c:	4b4d      	ldr	r3, [pc, #308]	; (8002d94 <RTC_date_and_time_update+0x3b4>)
 8002c5e:	2263      	movs	r2, #99	; 0x63
 8002c60:	70da      	strb	r2, [r3, #3]
			snprintf(g_date, sizeof(g_date),"%02d/%02d/20%02d",sDate.Date, sDate.Month,sDate.Year);
 8002c62:	4b4c      	ldr	r3, [pc, #304]	; (8002d94 <RTC_date_and_time_update+0x3b4>)
 8002c64:	789b      	ldrb	r3, [r3, #2]
 8002c66:	4619      	mov	r1, r3
 8002c68:	4b4a      	ldr	r3, [pc, #296]	; (8002d94 <RTC_date_and_time_update+0x3b4>)
 8002c6a:	785b      	ldrb	r3, [r3, #1]
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	4b49      	ldr	r3, [pc, #292]	; (8002d94 <RTC_date_and_time_update+0x3b4>)
 8002c70:	78db      	ldrb	r3, [r3, #3]
 8002c72:	9301      	str	r3, [sp, #4]
 8002c74:	9200      	str	r2, [sp, #0]
 8002c76:	460b      	mov	r3, r1
 8002c78:	4a47      	ldr	r2, [pc, #284]	; (8002d98 <RTC_date_and_time_update+0x3b8>)
 8002c7a:	210b      	movs	r1, #11
 8002c7c:	4847      	ldr	r0, [pc, #284]	; (8002d9c <RTC_date_and_time_update+0x3bc>)
 8002c7e:	f005 fde1 	bl	8008844 <sniprintf>
			Lcd_cursor(&lcd, 0, 0) ;
 8002c82:	2200      	movs	r2, #0
 8002c84:	2100      	movs	r1, #0
 8002c86:	4846      	ldr	r0, [pc, #280]	; (8002da0 <RTC_date_and_time_update+0x3c0>)
 8002c88:	f7fe f9fc 	bl	8001084 <Lcd_cursor>
			Lcd_string(&lcd, g_date);
 8002c8c:	4943      	ldr	r1, [pc, #268]	; (8002d9c <RTC_date_and_time_update+0x3bc>)
 8002c8e:	4844      	ldr	r0, [pc, #272]	; (8002da0 <RTC_date_and_time_update+0x3c0>)
 8002c90:	f7fe f9d8 	bl	8001044 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0) ;
 8002c94:	2200      	movs	r2, #0
 8002c96:	2101      	movs	r1, #1
 8002c98:	4841      	ldr	r0, [pc, #260]	; (8002da0 <RTC_date_and_time_update+0x3c0>)
 8002c9a:	f7fe f9f3 	bl	8001084 <Lcd_cursor>
			Lcd_string(&lcd, g_time);
 8002c9e:	4941      	ldr	r1, [pc, #260]	; (8002da4 <RTC_date_and_time_update+0x3c4>)
 8002ca0:	483f      	ldr	r0, [pc, #252]	; (8002da0 <RTC_date_and_time_update+0x3c0>)
 8002ca2:	f7fe f9cf 	bl	8001044 <Lcd_string>
			g_bottom_button_pressed =0 ;
 8002ca6:	4b40      	ldr	r3, [pc, #256]	; (8002da8 <RTC_date_and_time_update+0x3c8>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	701a      	strb	r2, [r3, #0]
}
 8002cac:	e19d      	b.n	8002fea <RTC_date_and_time_update+0x60a>
	else if(paramx == 4){//update hour
 8002cae:	79fb      	ldrb	r3, [r7, #7]
 8002cb0:	2b04      	cmp	r3, #4
 8002cb2:	d17f      	bne.n	8002db4 <RTC_date_and_time_update+0x3d4>
		if(g_top_button_pressed== 1){
 8002cb4:	4b36      	ldr	r3, [pc, #216]	; (8002d90 <RTC_date_and_time_update+0x3b0>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d131      	bne.n	8002d20 <RTC_date_and_time_update+0x340>
			sTime.Hours++ ;
 8002cbc:	4b3b      	ldr	r3, [pc, #236]	; (8002dac <RTC_date_and_time_update+0x3cc>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	b2da      	uxtb	r2, r3
 8002cc4:	4b39      	ldr	r3, [pc, #228]	; (8002dac <RTC_date_and_time_update+0x3cc>)
 8002cc6:	701a      	strb	r2, [r3, #0]
			if(sTime.Hours > 24){
 8002cc8:	4b38      	ldr	r3, [pc, #224]	; (8002dac <RTC_date_and_time_update+0x3cc>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	2b18      	cmp	r3, #24
 8002cce:	d902      	bls.n	8002cd6 <RTC_date_and_time_update+0x2f6>
				sTime.Hours = 1 ;
 8002cd0:	4b36      	ldr	r3, [pc, #216]	; (8002dac <RTC_date_and_time_update+0x3cc>)
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	701a      	strb	r2, [r3, #0]
			g_top_button_pressed =0 ;
 8002cd6:	4b2e      	ldr	r3, [pc, #184]	; (8002d90 <RTC_date_and_time_update+0x3b0>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	701a      	strb	r2, [r3, #0]
			Lcd_cursor(&lcd, 0, 0) ;
 8002cdc:	2200      	movs	r2, #0
 8002cde:	2100      	movs	r1, #0
 8002ce0:	482f      	ldr	r0, [pc, #188]	; (8002da0 <RTC_date_and_time_update+0x3c0>)
 8002ce2:	f7fe f9cf 	bl	8001084 <Lcd_cursor>
			Lcd_string(&lcd, g_date);
 8002ce6:	492d      	ldr	r1, [pc, #180]	; (8002d9c <RTC_date_and_time_update+0x3bc>)
 8002ce8:	482d      	ldr	r0, [pc, #180]	; (8002da0 <RTC_date_and_time_update+0x3c0>)
 8002cea:	f7fe f9ab 	bl	8001044 <Lcd_string>
			snprintf(g_time, sizeof(g_time),"%02d:%02d:%02d",sTime.Hours, sTime.Minutes, sTime.Seconds);
 8002cee:	4b2f      	ldr	r3, [pc, #188]	; (8002dac <RTC_date_and_time_update+0x3cc>)
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4b2d      	ldr	r3, [pc, #180]	; (8002dac <RTC_date_and_time_update+0x3cc>)
 8002cf6:	785b      	ldrb	r3, [r3, #1]
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	4b2c      	ldr	r3, [pc, #176]	; (8002dac <RTC_date_and_time_update+0x3cc>)
 8002cfc:	789b      	ldrb	r3, [r3, #2]
 8002cfe:	9301      	str	r3, [sp, #4]
 8002d00:	9200      	str	r2, [sp, #0]
 8002d02:	460b      	mov	r3, r1
 8002d04:	4a2a      	ldr	r2, [pc, #168]	; (8002db0 <RTC_date_and_time_update+0x3d0>)
 8002d06:	2109      	movs	r1, #9
 8002d08:	4826      	ldr	r0, [pc, #152]	; (8002da4 <RTC_date_and_time_update+0x3c4>)
 8002d0a:	f005 fd9b 	bl	8008844 <sniprintf>
			Lcd_cursor(&lcd, 1, 0) ;
 8002d0e:	2200      	movs	r2, #0
 8002d10:	2101      	movs	r1, #1
 8002d12:	4823      	ldr	r0, [pc, #140]	; (8002da0 <RTC_date_and_time_update+0x3c0>)
 8002d14:	f7fe f9b6 	bl	8001084 <Lcd_cursor>
			Lcd_string(&lcd, g_time);
 8002d18:	4922      	ldr	r1, [pc, #136]	; (8002da4 <RTC_date_and_time_update+0x3c4>)
 8002d1a:	4821      	ldr	r0, [pc, #132]	; (8002da0 <RTC_date_and_time_update+0x3c0>)
 8002d1c:	f7fe f992 	bl	8001044 <Lcd_string>
		if(g_bottom_button_pressed== 1){
 8002d20:	4b21      	ldr	r3, [pc, #132]	; (8002da8 <RTC_date_and_time_update+0x3c8>)
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	f040 8160 	bne.w	8002fea <RTC_date_and_time_update+0x60a>
			sTime.Hours-- ;
 8002d2a:	4b20      	ldr	r3, [pc, #128]	; (8002dac <RTC_date_and_time_update+0x3cc>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	b2da      	uxtb	r2, r3
 8002d32:	4b1e      	ldr	r3, [pc, #120]	; (8002dac <RTC_date_and_time_update+0x3cc>)
 8002d34:	701a      	strb	r2, [r3, #0]
			if(sTime.Hours < 1){
 8002d36:	4b1d      	ldr	r3, [pc, #116]	; (8002dac <RTC_date_and_time_update+0x3cc>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d102      	bne.n	8002d44 <RTC_date_and_time_update+0x364>
				sTime.Hours = 24 ;
 8002d3e:	4b1b      	ldr	r3, [pc, #108]	; (8002dac <RTC_date_and_time_update+0x3cc>)
 8002d40:	2218      	movs	r2, #24
 8002d42:	701a      	strb	r2, [r3, #0]
			Lcd_cursor(&lcd, 0, 0) ;
 8002d44:	2200      	movs	r2, #0
 8002d46:	2100      	movs	r1, #0
 8002d48:	4815      	ldr	r0, [pc, #84]	; (8002da0 <RTC_date_and_time_update+0x3c0>)
 8002d4a:	f7fe f99b 	bl	8001084 <Lcd_cursor>
			Lcd_string(&lcd, g_date);
 8002d4e:	4913      	ldr	r1, [pc, #76]	; (8002d9c <RTC_date_and_time_update+0x3bc>)
 8002d50:	4813      	ldr	r0, [pc, #76]	; (8002da0 <RTC_date_and_time_update+0x3c0>)
 8002d52:	f7fe f977 	bl	8001044 <Lcd_string>
			snprintf(g_time, sizeof(g_time),"%02d:%02d:%02d",sTime.Hours, sTime.Minutes, sTime.Seconds);
 8002d56:	4b15      	ldr	r3, [pc, #84]	; (8002dac <RTC_date_and_time_update+0x3cc>)
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	4b13      	ldr	r3, [pc, #76]	; (8002dac <RTC_date_and_time_update+0x3cc>)
 8002d5e:	785b      	ldrb	r3, [r3, #1]
 8002d60:	461a      	mov	r2, r3
 8002d62:	4b12      	ldr	r3, [pc, #72]	; (8002dac <RTC_date_and_time_update+0x3cc>)
 8002d64:	789b      	ldrb	r3, [r3, #2]
 8002d66:	9301      	str	r3, [sp, #4]
 8002d68:	9200      	str	r2, [sp, #0]
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	4a10      	ldr	r2, [pc, #64]	; (8002db0 <RTC_date_and_time_update+0x3d0>)
 8002d6e:	2109      	movs	r1, #9
 8002d70:	480c      	ldr	r0, [pc, #48]	; (8002da4 <RTC_date_and_time_update+0x3c4>)
 8002d72:	f005 fd67 	bl	8008844 <sniprintf>
			Lcd_cursor(&lcd, 1, 0) ;
 8002d76:	2200      	movs	r2, #0
 8002d78:	2101      	movs	r1, #1
 8002d7a:	4809      	ldr	r0, [pc, #36]	; (8002da0 <RTC_date_and_time_update+0x3c0>)
 8002d7c:	f7fe f982 	bl	8001084 <Lcd_cursor>
			Lcd_string(&lcd, g_time);
 8002d80:	4908      	ldr	r1, [pc, #32]	; (8002da4 <RTC_date_and_time_update+0x3c4>)
 8002d82:	4807      	ldr	r0, [pc, #28]	; (8002da0 <RTC_date_and_time_update+0x3c0>)
 8002d84:	f7fe f95e 	bl	8001044 <Lcd_string>
			g_bottom_button_pressed =0 ;
 8002d88:	4b07      	ldr	r3, [pc, #28]	; (8002da8 <RTC_date_and_time_update+0x3c8>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	701a      	strb	r2, [r3, #0]
}
 8002d8e:	e12c      	b.n	8002fea <RTC_date_and_time_update+0x60a>
 8002d90:	200004fa 	.word	0x200004fa
 8002d94:	200004b4 	.word	0x200004b4
 8002d98:	0800bc64 	.word	0x0800bc64
 8002d9c:	200004bc 	.word	0x200004bc
 8002da0:	20000488 	.word	0x20000488
 8002da4:	200004c8 	.word	0x200004c8
 8002da8:	200004fb 	.word	0x200004fb
 8002dac:	200004a0 	.word	0x200004a0
 8002db0:	0800bc78 	.word	0x0800bc78
	else if(paramx ==5){//update minutes
 8002db4:	79fb      	ldrb	r3, [r7, #7]
 8002db6:	2b05      	cmp	r3, #5
 8002db8:	d16d      	bne.n	8002e96 <RTC_date_and_time_update+0x4b6>
		if(g_top_button_pressed== 1){
 8002dba:	4b8e      	ldr	r3, [pc, #568]	; (8002ff4 <RTC_date_and_time_update+0x614>)
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d131      	bne.n	8002e26 <RTC_date_and_time_update+0x446>
			sTime.Minutes++ ;
 8002dc2:	4b8d      	ldr	r3, [pc, #564]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002dc4:	785b      	ldrb	r3, [r3, #1]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	4b8b      	ldr	r3, [pc, #556]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002dcc:	705a      	strb	r2, [r3, #1]
			if(sTime.Minutes > 60){
 8002dce:	4b8a      	ldr	r3, [pc, #552]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002dd0:	785b      	ldrb	r3, [r3, #1]
 8002dd2:	2b3c      	cmp	r3, #60	; 0x3c
 8002dd4:	d902      	bls.n	8002ddc <RTC_date_and_time_update+0x3fc>
				sTime.Minutes = 1 ;
 8002dd6:	4b88      	ldr	r3, [pc, #544]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002dd8:	2201      	movs	r2, #1
 8002dda:	705a      	strb	r2, [r3, #1]
			Lcd_cursor(&lcd, 0, 0) ;
 8002ddc:	2200      	movs	r2, #0
 8002dde:	2100      	movs	r1, #0
 8002de0:	4886      	ldr	r0, [pc, #536]	; (8002ffc <RTC_date_and_time_update+0x61c>)
 8002de2:	f7fe f94f 	bl	8001084 <Lcd_cursor>
			Lcd_string(&lcd, g_date);
 8002de6:	4986      	ldr	r1, [pc, #536]	; (8003000 <RTC_date_and_time_update+0x620>)
 8002de8:	4884      	ldr	r0, [pc, #528]	; (8002ffc <RTC_date_and_time_update+0x61c>)
 8002dea:	f7fe f92b 	bl	8001044 <Lcd_string>
			snprintf(g_time, sizeof(g_time),"%02d:%02d:%02d",sTime.Hours, sTime.Minutes, sTime.Seconds);
 8002dee:	4b82      	ldr	r3, [pc, #520]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	4619      	mov	r1, r3
 8002df4:	4b80      	ldr	r3, [pc, #512]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002df6:	785b      	ldrb	r3, [r3, #1]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	4b7f      	ldr	r3, [pc, #508]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002dfc:	789b      	ldrb	r3, [r3, #2]
 8002dfe:	9301      	str	r3, [sp, #4]
 8002e00:	9200      	str	r2, [sp, #0]
 8002e02:	460b      	mov	r3, r1
 8002e04:	4a7f      	ldr	r2, [pc, #508]	; (8003004 <RTC_date_and_time_update+0x624>)
 8002e06:	2109      	movs	r1, #9
 8002e08:	487f      	ldr	r0, [pc, #508]	; (8003008 <RTC_date_and_time_update+0x628>)
 8002e0a:	f005 fd1b 	bl	8008844 <sniprintf>
			Lcd_cursor(&lcd, 1, 0) ;
 8002e0e:	2200      	movs	r2, #0
 8002e10:	2101      	movs	r1, #1
 8002e12:	487a      	ldr	r0, [pc, #488]	; (8002ffc <RTC_date_and_time_update+0x61c>)
 8002e14:	f7fe f936 	bl	8001084 <Lcd_cursor>
			Lcd_string(&lcd, g_time);
 8002e18:	497b      	ldr	r1, [pc, #492]	; (8003008 <RTC_date_and_time_update+0x628>)
 8002e1a:	4878      	ldr	r0, [pc, #480]	; (8002ffc <RTC_date_and_time_update+0x61c>)
 8002e1c:	f7fe f912 	bl	8001044 <Lcd_string>
			g_top_button_pressed =0 ;
 8002e20:	4b74      	ldr	r3, [pc, #464]	; (8002ff4 <RTC_date_and_time_update+0x614>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	701a      	strb	r2, [r3, #0]
		if(g_bottom_button_pressed== 1){
 8002e26:	4b79      	ldr	r3, [pc, #484]	; (800300c <RTC_date_and_time_update+0x62c>)
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	f040 80dd 	bne.w	8002fea <RTC_date_and_time_update+0x60a>
			sTime.Minutes-- ;
 8002e30:	4b71      	ldr	r3, [pc, #452]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002e32:	785b      	ldrb	r3, [r3, #1]
 8002e34:	3b01      	subs	r3, #1
 8002e36:	b2da      	uxtb	r2, r3
 8002e38:	4b6f      	ldr	r3, [pc, #444]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002e3a:	705a      	strb	r2, [r3, #1]
			if(sTime.Minutes < 1){
 8002e3c:	4b6e      	ldr	r3, [pc, #440]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002e3e:	785b      	ldrb	r3, [r3, #1]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d102      	bne.n	8002e4a <RTC_date_and_time_update+0x46a>
				sTime.Minutes = 60 ;
 8002e44:	4b6c      	ldr	r3, [pc, #432]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002e46:	223c      	movs	r2, #60	; 0x3c
 8002e48:	705a      	strb	r2, [r3, #1]
			Lcd_cursor(&lcd, 0, 0) ;
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	486b      	ldr	r0, [pc, #428]	; (8002ffc <RTC_date_and_time_update+0x61c>)
 8002e50:	f7fe f918 	bl	8001084 <Lcd_cursor>
			Lcd_string(&lcd, g_date);
 8002e54:	496a      	ldr	r1, [pc, #424]	; (8003000 <RTC_date_and_time_update+0x620>)
 8002e56:	4869      	ldr	r0, [pc, #420]	; (8002ffc <RTC_date_and_time_update+0x61c>)
 8002e58:	f7fe f8f4 	bl	8001044 <Lcd_string>
			snprintf(g_time, sizeof(g_time),"%02d:%02d:%02d",sTime.Hours, sTime.Minutes, sTime.Seconds);
 8002e5c:	4b66      	ldr	r3, [pc, #408]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	4619      	mov	r1, r3
 8002e62:	4b65      	ldr	r3, [pc, #404]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002e64:	785b      	ldrb	r3, [r3, #1]
 8002e66:	461a      	mov	r2, r3
 8002e68:	4b63      	ldr	r3, [pc, #396]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002e6a:	789b      	ldrb	r3, [r3, #2]
 8002e6c:	9301      	str	r3, [sp, #4]
 8002e6e:	9200      	str	r2, [sp, #0]
 8002e70:	460b      	mov	r3, r1
 8002e72:	4a64      	ldr	r2, [pc, #400]	; (8003004 <RTC_date_and_time_update+0x624>)
 8002e74:	2109      	movs	r1, #9
 8002e76:	4864      	ldr	r0, [pc, #400]	; (8003008 <RTC_date_and_time_update+0x628>)
 8002e78:	f005 fce4 	bl	8008844 <sniprintf>
			Lcd_cursor(&lcd, 1, 0) ;
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	2101      	movs	r1, #1
 8002e80:	485e      	ldr	r0, [pc, #376]	; (8002ffc <RTC_date_and_time_update+0x61c>)
 8002e82:	f7fe f8ff 	bl	8001084 <Lcd_cursor>
			Lcd_string(&lcd, g_time);
 8002e86:	4960      	ldr	r1, [pc, #384]	; (8003008 <RTC_date_and_time_update+0x628>)
 8002e88:	485c      	ldr	r0, [pc, #368]	; (8002ffc <RTC_date_and_time_update+0x61c>)
 8002e8a:	f7fe f8db 	bl	8001044 <Lcd_string>
			g_bottom_button_pressed =0 ;
 8002e8e:	4b5f      	ldr	r3, [pc, #380]	; (800300c <RTC_date_and_time_update+0x62c>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	701a      	strb	r2, [r3, #0]
}
 8002e94:	e0a9      	b.n	8002fea <RTC_date_and_time_update+0x60a>
	else if(paramx == 6){//update seconds
 8002e96:	79fb      	ldrb	r3, [r7, #7]
 8002e98:	2b06      	cmp	r3, #6
 8002e9a:	d16c      	bne.n	8002f76 <RTC_date_and_time_update+0x596>
		if(g_top_button_pressed== 1){
 8002e9c:	4b55      	ldr	r3, [pc, #340]	; (8002ff4 <RTC_date_and_time_update+0x614>)
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d131      	bne.n	8002f08 <RTC_date_and_time_update+0x528>
			sTime.Seconds++ ;
 8002ea4:	4b54      	ldr	r3, [pc, #336]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002ea6:	789b      	ldrb	r3, [r3, #2]
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	4b52      	ldr	r3, [pc, #328]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002eae:	709a      	strb	r2, [r3, #2]
			if(sTime.Seconds > 60){
 8002eb0:	4b51      	ldr	r3, [pc, #324]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002eb2:	789b      	ldrb	r3, [r3, #2]
 8002eb4:	2b3c      	cmp	r3, #60	; 0x3c
 8002eb6:	d902      	bls.n	8002ebe <RTC_date_and_time_update+0x4de>
				sTime.Seconds = 1 ;
 8002eb8:	4b4f      	ldr	r3, [pc, #316]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002eba:	2201      	movs	r2, #1
 8002ebc:	709a      	strb	r2, [r3, #2]
			Lcd_cursor(&lcd, 0, 0) ;
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	484e      	ldr	r0, [pc, #312]	; (8002ffc <RTC_date_and_time_update+0x61c>)
 8002ec4:	f7fe f8de 	bl	8001084 <Lcd_cursor>
			Lcd_string(&lcd, g_date);
 8002ec8:	494d      	ldr	r1, [pc, #308]	; (8003000 <RTC_date_and_time_update+0x620>)
 8002eca:	484c      	ldr	r0, [pc, #304]	; (8002ffc <RTC_date_and_time_update+0x61c>)
 8002ecc:	f7fe f8ba 	bl	8001044 <Lcd_string>
			snprintf(g_time, sizeof(g_time),"%02d:%02d:%02d",sTime.Hours, sTime.Minutes, sTime.Seconds);
 8002ed0:	4b49      	ldr	r3, [pc, #292]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4b48      	ldr	r3, [pc, #288]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002ed8:	785b      	ldrb	r3, [r3, #1]
 8002eda:	461a      	mov	r2, r3
 8002edc:	4b46      	ldr	r3, [pc, #280]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002ede:	789b      	ldrb	r3, [r3, #2]
 8002ee0:	9301      	str	r3, [sp, #4]
 8002ee2:	9200      	str	r2, [sp, #0]
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	4a47      	ldr	r2, [pc, #284]	; (8003004 <RTC_date_and_time_update+0x624>)
 8002ee8:	2109      	movs	r1, #9
 8002eea:	4847      	ldr	r0, [pc, #284]	; (8003008 <RTC_date_and_time_update+0x628>)
 8002eec:	f005 fcaa 	bl	8008844 <sniprintf>
			Lcd_cursor(&lcd, 1, 0) ;
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	4841      	ldr	r0, [pc, #260]	; (8002ffc <RTC_date_and_time_update+0x61c>)
 8002ef6:	f7fe f8c5 	bl	8001084 <Lcd_cursor>
			Lcd_string(&lcd, g_time);
 8002efa:	4943      	ldr	r1, [pc, #268]	; (8003008 <RTC_date_and_time_update+0x628>)
 8002efc:	483f      	ldr	r0, [pc, #252]	; (8002ffc <RTC_date_and_time_update+0x61c>)
 8002efe:	f7fe f8a1 	bl	8001044 <Lcd_string>
			g_top_button_pressed =0 ;
 8002f02:	4b3c      	ldr	r3, [pc, #240]	; (8002ff4 <RTC_date_and_time_update+0x614>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	701a      	strb	r2, [r3, #0]
		if(g_bottom_button_pressed== 1){
 8002f08:	4b40      	ldr	r3, [pc, #256]	; (800300c <RTC_date_and_time_update+0x62c>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d16c      	bne.n	8002fea <RTC_date_and_time_update+0x60a>
			sTime.Seconds-- ;
 8002f10:	4b39      	ldr	r3, [pc, #228]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002f12:	789b      	ldrb	r3, [r3, #2]
 8002f14:	3b01      	subs	r3, #1
 8002f16:	b2da      	uxtb	r2, r3
 8002f18:	4b37      	ldr	r3, [pc, #220]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002f1a:	709a      	strb	r2, [r3, #2]
			if(sTime.Seconds < 1){
 8002f1c:	4b36      	ldr	r3, [pc, #216]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002f1e:	789b      	ldrb	r3, [r3, #2]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d102      	bne.n	8002f2a <RTC_date_and_time_update+0x54a>
				sTime.Seconds = 60 ;
 8002f24:	4b34      	ldr	r3, [pc, #208]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002f26:	223c      	movs	r2, #60	; 0x3c
 8002f28:	709a      	strb	r2, [r3, #2]
			Lcd_cursor(&lcd, 0, 0) ;
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	4833      	ldr	r0, [pc, #204]	; (8002ffc <RTC_date_and_time_update+0x61c>)
 8002f30:	f7fe f8a8 	bl	8001084 <Lcd_cursor>
			Lcd_string(&lcd, g_date);
 8002f34:	4932      	ldr	r1, [pc, #200]	; (8003000 <RTC_date_and_time_update+0x620>)
 8002f36:	4831      	ldr	r0, [pc, #196]	; (8002ffc <RTC_date_and_time_update+0x61c>)
 8002f38:	f7fe f884 	bl	8001044 <Lcd_string>
			snprintf(g_time, sizeof(g_time),"%02d:%02d:%02d",sTime.Hours, sTime.Minutes, sTime.Seconds);
 8002f3c:	4b2e      	ldr	r3, [pc, #184]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	4619      	mov	r1, r3
 8002f42:	4b2d      	ldr	r3, [pc, #180]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002f44:	785b      	ldrb	r3, [r3, #1]
 8002f46:	461a      	mov	r2, r3
 8002f48:	4b2b      	ldr	r3, [pc, #172]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002f4a:	789b      	ldrb	r3, [r3, #2]
 8002f4c:	9301      	str	r3, [sp, #4]
 8002f4e:	9200      	str	r2, [sp, #0]
 8002f50:	460b      	mov	r3, r1
 8002f52:	4a2c      	ldr	r2, [pc, #176]	; (8003004 <RTC_date_and_time_update+0x624>)
 8002f54:	2109      	movs	r1, #9
 8002f56:	482c      	ldr	r0, [pc, #176]	; (8003008 <RTC_date_and_time_update+0x628>)
 8002f58:	f005 fc74 	bl	8008844 <sniprintf>
			Lcd_cursor(&lcd, 1, 0) ;
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	2101      	movs	r1, #1
 8002f60:	4826      	ldr	r0, [pc, #152]	; (8002ffc <RTC_date_and_time_update+0x61c>)
 8002f62:	f7fe f88f 	bl	8001084 <Lcd_cursor>
			Lcd_string(&lcd, g_time);
 8002f66:	4928      	ldr	r1, [pc, #160]	; (8003008 <RTC_date_and_time_update+0x628>)
 8002f68:	4824      	ldr	r0, [pc, #144]	; (8002ffc <RTC_date_and_time_update+0x61c>)
 8002f6a:	f7fe f86b 	bl	8001044 <Lcd_string>
			g_bottom_button_pressed =0 ;
 8002f6e:	4b27      	ldr	r3, [pc, #156]	; (800300c <RTC_date_and_time_update+0x62c>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	701a      	strb	r2, [r3, #0]
}
 8002f74:	e039      	b.n	8002fea <RTC_date_and_time_update+0x60a>
		if(paramx == 7){
 8002f76:	79fb      	ldrb	r3, [r7, #7]
 8002f78:	2b07      	cmp	r3, #7
 8002f7a:	d136      	bne.n	8002fea <RTC_date_and_time_update+0x60a>
			g_update_RTC = 0 ; //done updating the RTC
 8002f7c:	4b24      	ldr	r3, [pc, #144]	; (8003010 <RTC_date_and_time_update+0x630>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	701a      	strb	r2, [r3, #0]
			set_RTC_date_and_time() ;
 8002f82:	f000 f883 	bl	800308c <set_RTC_date_and_time>
			snprintf(g_date, sizeof(g_date),"%02d/%02d/20%02d",sDate.Date, sDate.Month,sDate.Year);
 8002f86:	4b23      	ldr	r3, [pc, #140]	; (8003014 <RTC_date_and_time_update+0x634>)
 8002f88:	789b      	ldrb	r3, [r3, #2]
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	4b21      	ldr	r3, [pc, #132]	; (8003014 <RTC_date_and_time_update+0x634>)
 8002f8e:	785b      	ldrb	r3, [r3, #1]
 8002f90:	461a      	mov	r2, r3
 8002f92:	4b20      	ldr	r3, [pc, #128]	; (8003014 <RTC_date_and_time_update+0x634>)
 8002f94:	78db      	ldrb	r3, [r3, #3]
 8002f96:	9301      	str	r3, [sp, #4]
 8002f98:	9200      	str	r2, [sp, #0]
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	4a1e      	ldr	r2, [pc, #120]	; (8003018 <RTC_date_and_time_update+0x638>)
 8002f9e:	210b      	movs	r1, #11
 8002fa0:	4817      	ldr	r0, [pc, #92]	; (8003000 <RTC_date_and_time_update+0x620>)
 8002fa2:	f005 fc4f 	bl	8008844 <sniprintf>
			snprintf(g_time, sizeof(g_time),"%02d:%02d:%02d",sTime.Hours, sTime.Minutes, sTime.Seconds);
 8002fa6:	4b14      	ldr	r3, [pc, #80]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	4619      	mov	r1, r3
 8002fac:	4b12      	ldr	r3, [pc, #72]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002fae:	785b      	ldrb	r3, [r3, #1]
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	4b11      	ldr	r3, [pc, #68]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002fb4:	789b      	ldrb	r3, [r3, #2]
 8002fb6:	9301      	str	r3, [sp, #4]
 8002fb8:	9200      	str	r2, [sp, #0]
 8002fba:	460b      	mov	r3, r1
 8002fbc:	4a11      	ldr	r2, [pc, #68]	; (8003004 <RTC_date_and_time_update+0x624>)
 8002fbe:	2109      	movs	r1, #9
 8002fc0:	4811      	ldr	r0, [pc, #68]	; (8003008 <RTC_date_and_time_update+0x628>)
 8002fc2:	f005 fc3f 	bl	8008844 <sniprintf>
			Lcd_cursor(&lcd, 0, 0) ;
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	2100      	movs	r1, #0
 8002fca:	480c      	ldr	r0, [pc, #48]	; (8002ffc <RTC_date_and_time_update+0x61c>)
 8002fcc:	f7fe f85a 	bl	8001084 <Lcd_cursor>
			Lcd_string(&lcd, g_date);
 8002fd0:	490b      	ldr	r1, [pc, #44]	; (8003000 <RTC_date_and_time_update+0x620>)
 8002fd2:	480a      	ldr	r0, [pc, #40]	; (8002ffc <RTC_date_and_time_update+0x61c>)
 8002fd4:	f7fe f836 	bl	8001044 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0) ;
 8002fd8:	2200      	movs	r2, #0
 8002fda:	2101      	movs	r1, #1
 8002fdc:	4807      	ldr	r0, [pc, #28]	; (8002ffc <RTC_date_and_time_update+0x61c>)
 8002fde:	f7fe f851 	bl	8001084 <Lcd_cursor>
			Lcd_string(&lcd, g_time);
 8002fe2:	4909      	ldr	r1, [pc, #36]	; (8003008 <RTC_date_and_time_update+0x628>)
 8002fe4:	4805      	ldr	r0, [pc, #20]	; (8002ffc <RTC_date_and_time_update+0x61c>)
 8002fe6:	f7fe f82d 	bl	8001044 <Lcd_string>
}
 8002fea:	bf00      	nop
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	200004fa 	.word	0x200004fa
 8002ff8:	200004a0 	.word	0x200004a0
 8002ffc:	20000488 	.word	0x20000488
 8003000:	200004bc 	.word	0x200004bc
 8003004:	0800bc78 	.word	0x0800bc78
 8003008:	200004c8 	.word	0x200004c8
 800300c:	200004fb 	.word	0x200004fb
 8003010:	200004b8 	.word	0x200004b8
 8003014:	200004b4 	.word	0x200004b4
 8003018:	0800bc64 	.word	0x0800bc64

0800301c <g_clock_menu_set_and_parameter_update>:

void g_clock_menu_set_and_parameter_update(){
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
	if(g_middle_button_pressed == 1){
 8003020:	4b15      	ldr	r3, [pc, #84]	; (8003078 <g_clock_menu_set_and_parameter_update+0x5c>)
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d11c      	bne.n	8003062 <g_clock_menu_set_and_parameter_update+0x46>
		g_middle_button_pressed = 0;
 8003028:	4b13      	ldr	r3, [pc, #76]	; (8003078 <g_clock_menu_set_and_parameter_update+0x5c>)
 800302a:	2200      	movs	r2, #0
 800302c:	701a      	strb	r2, [r3, #0]

		//RTC menu
		if(g_update_RTC ==0){
 800302e:	4b13      	ldr	r3, [pc, #76]	; (800307c <g_clock_menu_set_and_parameter_update+0x60>)
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d108      	bne.n	8003048 <g_clock_menu_set_and_parameter_update+0x2c>
			g_update_RTC = 1;
 8003036:	4b11      	ldr	r3, [pc, #68]	; (800307c <g_clock_menu_set_and_parameter_update+0x60>)
 8003038:	2201      	movs	r2, #1
 800303a:	701a      	strb	r2, [r3, #0]

			//set LCD in mode 3 - LCD parameter
			display_result = 1;
 800303c:	4b10      	ldr	r3, [pc, #64]	; (8003080 <g_clock_menu_set_and_parameter_update+0x64>)
 800303e:	2201      	movs	r2, #1
 8003040:	701a      	strb	r2, [r3, #0]

			g_lcd_mode = 3  ;
 8003042:	4b10      	ldr	r3, [pc, #64]	; (8003084 <g_clock_menu_set_and_parameter_update+0x68>)
 8003044:	2203      	movs	r2, #3
 8003046:	701a      	strb	r2, [r3, #0]
		}

		//increment parameter to update
		g_RTC_parameter++ ;
 8003048:	4b0f      	ldr	r3, [pc, #60]	; (8003088 <g_clock_menu_set_and_parameter_update+0x6c>)
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	3301      	adds	r3, #1
 800304e:	b2da      	uxtb	r2, r3
 8003050:	4b0d      	ldr	r3, [pc, #52]	; (8003088 <g_clock_menu_set_and_parameter_update+0x6c>)
 8003052:	701a      	strb	r2, [r3, #0]

		if(g_RTC_parameter>7){
 8003054:	4b0c      	ldr	r3, [pc, #48]	; (8003088 <g_clock_menu_set_and_parameter_update+0x6c>)
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	2b07      	cmp	r3, #7
 800305a:	d902      	bls.n	8003062 <g_clock_menu_set_and_parameter_update+0x46>
			g_RTC_parameter = 1; //cycle back to first parameter once RTC entered again
 800305c:	4b0a      	ldr	r3, [pc, #40]	; (8003088 <g_clock_menu_set_and_parameter_update+0x6c>)
 800305e:	2201      	movs	r2, #1
 8003060:	701a      	strb	r2, [r3, #0]
		}

	}

	//update parameters
	if(g_update_RTC == 1){
 8003062:	4b06      	ldr	r3, [pc, #24]	; (800307c <g_clock_menu_set_and_parameter_update+0x60>)
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d104      	bne.n	8003074 <g_clock_menu_set_and_parameter_update+0x58>
		RTC_date_and_time_update(g_RTC_parameter) ;
 800306a:	4b07      	ldr	r3, [pc, #28]	; (8003088 <g_clock_menu_set_and_parameter_update+0x6c>)
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff fcb6 	bl	80029e0 <RTC_date_and_time_update>
	}

}
 8003074:	bf00      	nop
 8003076:	bd80      	pop	{r7, pc}
 8003078:	200004fc 	.word	0x200004fc
 800307c:	200004b8 	.word	0x200004b8
 8003080:	20000487 	.word	0x20000487
 8003084:	20000486 	.word	0x20000486
 8003088:	200004b9 	.word	0x200004b9

0800308c <set_RTC_date_and_time>:

/**
 * This function sets the updated time
 */
void set_RTC_date_and_time(){
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) ;
 8003090:	2200      	movs	r2, #0
 8003092:	4905      	ldr	r1, [pc, #20]	; (80030a8 <set_RTC_date_and_time+0x1c>)
 8003094:	4805      	ldr	r0, [pc, #20]	; (80030ac <set_RTC_date_and_time+0x20>)
 8003096:	f002 fdbf 	bl	8005c18 <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) ;
 800309a:	2200      	movs	r2, #0
 800309c:	4904      	ldr	r1, [pc, #16]	; (80030b0 <set_RTC_date_and_time+0x24>)
 800309e:	4803      	ldr	r0, [pc, #12]	; (80030ac <set_RTC_date_and_time+0x20>)
 80030a0:	f002 feb2 	bl	8005e08 <HAL_RTC_SetDate>
}
 80030a4:	bf00      	nop
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	200004a0 	.word	0x200004a0
 80030ac:	20000274 	.word	0x20000274
 80030b0:	200004b4 	.word	0x200004b4

080030b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80030b4:	b5b0      	push	{r4, r5, r7, lr}
 80030b6:	b08a      	sub	sp, #40	; 0x28
 80030b8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80030ba:	f000 ff8f 	bl	8003fdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80030be:	f000 f861 	bl	8003184 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80030c2:	f000 fa8b 	bl	80035dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80030c6:	f000 fa5d 	bl	8003584 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80030ca:	f000 f8c7 	bl	800325c <MX_ADC1_Init>
  MX_TIM2_Init();
 80030ce:	f000 f99b 	bl	8003408 <MX_TIM2_Init>
  MX_TIM3_Init();
 80030d2:	f000 fa09 	bl	80034e8 <MX_TIM3_Init>
  MX_RTC_Init();
 80030d6:	f000 f93d 	bl	8003354 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(150);
 80030da:	2096      	movs	r0, #150	; 0x96
 80030dc:	f000 fff0 	bl	80040c0 <HAL_Delay>
  HAL_UART_Transmit_IT(&huart2, (uint8_t*)studentNum, 13) ;
 80030e0:	220d      	movs	r2, #13
 80030e2:	491f      	ldr	r1, [pc, #124]	; (8003160 <main+0xac>)
 80030e4:	481f      	ldr	r0, [pc, #124]	; (8003164 <main+0xb0>)
 80030e6:	f003 ffa2 	bl	800702e <HAL_UART_Transmit_IT>

  HAL_UART_Receive_IT(&huart2, (uint8_t*)char_rcvd, 1) ;
 80030ea:	2201      	movs	r2, #1
 80030ec:	491e      	ldr	r1, [pc, #120]	; (8003168 <main+0xb4>)
 80030ee:	481d      	ldr	r0, [pc, #116]	; (8003164 <main+0xb0>)
 80030f0:	f003 ffe2 	bl	80070b8 <HAL_UART_Receive_IT>

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1)  ; // input to trigger interrupt - LMT01 sensor
 80030f4:	2100      	movs	r1, #0
 80030f6:	481d      	ldr	r0, [pc, #116]	; (800316c <main+0xb8>)
 80030f8:	f003 f8be 	bl	8006278 <HAL_TIM_IC_Start_IT>

  g_time_passed = HAL_GetTick() ; //snapshot of time
 80030fc:	f000 ffd4 	bl	80040a8 <HAL_GetTick>
 8003100:	4603      	mov	r3, r0
 8003102:	4a1b      	ldr	r2, [pc, #108]	; (8003170 <main+0xbc>)
 8003104:	6013      	str	r3, [r2, #0]

  //Write to LCD
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET) ;
 8003106:	2200      	movs	r2, #0
 8003108:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800310c:	4819      	ldr	r0, [pc, #100]	; (8003174 <main+0xc0>)
 800310e:	f001 ff2d 	bl	8004f6c <HAL_GPIO_WritePin>

  lcd = Lcd_create(ports, pins, GPIOB, GPIO_PIN_14, GPIOB, GPIO_PIN_2, LCD_4_BIT_MODE);
 8003112:	4c19      	ldr	r4, [pc, #100]	; (8003178 <main+0xc4>)
 8003114:	4638      	mov	r0, r7
 8003116:	2300      	movs	r3, #0
 8003118:	9303      	str	r3, [sp, #12]
 800311a:	2304      	movs	r3, #4
 800311c:	9302      	str	r3, [sp, #8]
 800311e:	4b15      	ldr	r3, [pc, #84]	; (8003174 <main+0xc0>)
 8003120:	9301      	str	r3, [sp, #4]
 8003122:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	4b12      	ldr	r3, [pc, #72]	; (8003174 <main+0xc0>)
 800312a:	4a14      	ldr	r2, [pc, #80]	; (800317c <main+0xc8>)
 800312c:	4914      	ldr	r1, [pc, #80]	; (8003180 <main+0xcc>)
 800312e:	f7fd ff35 	bl	8000f9c <Lcd_create>
 8003132:	4625      	mov	r5, r4
 8003134:	463c      	mov	r4, r7
 8003136:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003138:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800313a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800313e:	e885 0003 	stmia.w	r5, {r0, r1}
  Lcd_clear(&lcd);
 8003142:	480d      	ldr	r0, [pc, #52]	; (8003178 <main+0xc4>)
 8003144:	f7fd ffb8 	bl	80010b8 <Lcd_clear>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //update system state based on input recvd
	  system_state_update() ;
 8003148:	f7fe f95e 	bl	8001408 <system_state_update>

	  //UR5: Calibration of device
	  ca_measurements_and_responses();
 800314c:	f7ff f814 	bl	8002178 <ca_measurements_and_responses>

	  //UR3: Evironment measure: measure Ta & measure Tb  (Put in Function)/Modularize
	  en_measurements_and_responses() ;
 8003150:	f7fe fd8c 	bl	8001c6c <en_measurements_and_responses>

	  //UR2: PV Module -(Put in Function)/Modularize
	  sp_measurements_and_responses();
 8003154:	f7fe fe38 	bl	8001dc8 <sp_measurements_and_responses>



	  //update LCD - code runs seqeuntionally and lcd updates based on variable states above
	  change_lcd_display_mode();
 8003158:	f7ff faa4 	bl	80026a4 <change_lcd_display_mode>
	  system_state_update() ;
 800315c:	e7f4      	b.n	8003148 <main+0x94>
 800315e:	bf00      	nop
 8003160:	20000000 	.word	0x20000000
 8003164:	20000324 	.word	0x20000324
 8003168:	20000010 	.word	0x20000010
 800316c:	20000294 	.word	0x20000294
 8003170:	20000440 	.word	0x20000440
 8003174:	40020400 	.word	0x40020400
 8003178:	20000488 	.word	0x20000488
 800317c:	20000028 	.word	0x20000028
 8003180:	20000018 	.word	0x20000018

08003184 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b094      	sub	sp, #80	; 0x50
 8003188:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800318a:	f107 0320 	add.w	r3, r7, #32
 800318e:	2230      	movs	r2, #48	; 0x30
 8003190:	2100      	movs	r1, #0
 8003192:	4618      	mov	r0, r3
 8003194:	f004 fee4 	bl	8007f60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003198:	f107 030c 	add.w	r3, r7, #12
 800319c:	2200      	movs	r2, #0
 800319e:	601a      	str	r2, [r3, #0]
 80031a0:	605a      	str	r2, [r3, #4]
 80031a2:	609a      	str	r2, [r3, #8]
 80031a4:	60da      	str	r2, [r3, #12]
 80031a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80031a8:	2300      	movs	r3, #0
 80031aa:	60bb      	str	r3, [r7, #8]
 80031ac:	4b29      	ldr	r3, [pc, #164]	; (8003254 <SystemClock_Config+0xd0>)
 80031ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b0:	4a28      	ldr	r2, [pc, #160]	; (8003254 <SystemClock_Config+0xd0>)
 80031b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031b6:	6413      	str	r3, [r2, #64]	; 0x40
 80031b8:	4b26      	ldr	r3, [pc, #152]	; (8003254 <SystemClock_Config+0xd0>)
 80031ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c0:	60bb      	str	r3, [r7, #8]
 80031c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80031c4:	2300      	movs	r3, #0
 80031c6:	607b      	str	r3, [r7, #4]
 80031c8:	4b23      	ldr	r3, [pc, #140]	; (8003258 <SystemClock_Config+0xd4>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a22      	ldr	r2, [pc, #136]	; (8003258 <SystemClock_Config+0xd4>)
 80031ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031d2:	6013      	str	r3, [r2, #0]
 80031d4:	4b20      	ldr	r3, [pc, #128]	; (8003258 <SystemClock_Config+0xd4>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80031dc:	607b      	str	r3, [r7, #4]
 80031de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80031e0:	230a      	movs	r3, #10
 80031e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80031e4:	2301      	movs	r3, #1
 80031e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80031e8:	2310      	movs	r3, #16
 80031ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80031ec:	2301      	movs	r3, #1
 80031ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031f0:	2302      	movs	r3, #2
 80031f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80031f4:	2300      	movs	r3, #0
 80031f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80031f8:	2310      	movs	r3, #16
 80031fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80031fc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003200:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003202:	2304      	movs	r3, #4
 8003204:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003206:	2304      	movs	r3, #4
 8003208:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800320a:	f107 0320 	add.w	r3, r7, #32
 800320e:	4618      	mov	r0, r3
 8003210:	f001 ff04 	bl	800501c <HAL_RCC_OscConfig>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800321a:	f000 fa97 	bl	800374c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800321e:	230f      	movs	r3, #15
 8003220:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003222:	2302      	movs	r3, #2
 8003224:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003226:	2300      	movs	r3, #0
 8003228:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800322a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800322e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003230:	2300      	movs	r3, #0
 8003232:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003234:	f107 030c 	add.w	r3, r7, #12
 8003238:	2102      	movs	r1, #2
 800323a:	4618      	mov	r0, r3
 800323c:	f002 f966 	bl	800550c <HAL_RCC_ClockConfig>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8003246:	f000 fa81 	bl	800374c <Error_Handler>
  }
}
 800324a:	bf00      	nop
 800324c:	3750      	adds	r7, #80	; 0x50
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	40023800 	.word	0x40023800
 8003258:	40007000 	.word	0x40007000

0800325c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003262:	463b      	mov	r3, r7
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	605a      	str	r2, [r3, #4]
 800326a:	609a      	str	r2, [r3, #8]
 800326c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800326e:	4b36      	ldr	r3, [pc, #216]	; (8003348 <MX_ADC1_Init+0xec>)
 8003270:	4a36      	ldr	r2, [pc, #216]	; (800334c <MX_ADC1_Init+0xf0>)
 8003272:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003274:	4b34      	ldr	r3, [pc, #208]	; (8003348 <MX_ADC1_Init+0xec>)
 8003276:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800327a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800327c:	4b32      	ldr	r3, [pc, #200]	; (8003348 <MX_ADC1_Init+0xec>)
 800327e:	2200      	movs	r2, #0
 8003280:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003282:	4b31      	ldr	r3, [pc, #196]	; (8003348 <MX_ADC1_Init+0xec>)
 8003284:	2201      	movs	r2, #1
 8003286:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003288:	4b2f      	ldr	r3, [pc, #188]	; (8003348 <MX_ADC1_Init+0xec>)
 800328a:	2200      	movs	r2, #0
 800328c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800328e:	4b2e      	ldr	r3, [pc, #184]	; (8003348 <MX_ADC1_Init+0xec>)
 8003290:	2200      	movs	r2, #0
 8003292:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003296:	4b2c      	ldr	r3, [pc, #176]	; (8003348 <MX_ADC1_Init+0xec>)
 8003298:	2200      	movs	r2, #0
 800329a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800329c:	4b2a      	ldr	r3, [pc, #168]	; (8003348 <MX_ADC1_Init+0xec>)
 800329e:	4a2c      	ldr	r2, [pc, #176]	; (8003350 <MX_ADC1_Init+0xf4>)
 80032a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80032a2:	4b29      	ldr	r3, [pc, #164]	; (8003348 <MX_ADC1_Init+0xec>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80032a8:	4b27      	ldr	r3, [pc, #156]	; (8003348 <MX_ADC1_Init+0xec>)
 80032aa:	2204      	movs	r2, #4
 80032ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80032ae:	4b26      	ldr	r3, [pc, #152]	; (8003348 <MX_ADC1_Init+0xec>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80032b6:	4b24      	ldr	r3, [pc, #144]	; (8003348 <MX_ADC1_Init+0xec>)
 80032b8:	2201      	movs	r2, #1
 80032ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80032bc:	4822      	ldr	r0, [pc, #136]	; (8003348 <MX_ADC1_Init+0xec>)
 80032be:	f000 ff23 	bl	8004108 <HAL_ADC_Init>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80032c8:	f000 fa40 	bl	800374c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80032cc:	2300      	movs	r3, #0
 80032ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80032d0:	2301      	movs	r3, #1
 80032d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80032d4:	2300      	movs	r3, #0
 80032d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80032d8:	463b      	mov	r3, r7
 80032da:	4619      	mov	r1, r3
 80032dc:	481a      	ldr	r0, [pc, #104]	; (8003348 <MX_ADC1_Init+0xec>)
 80032de:	f001 f8d7 	bl	8004490 <HAL_ADC_ConfigChannel>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80032e8:	f000 fa30 	bl	800374c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80032ec:	230e      	movs	r3, #14
 80032ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80032f0:	2302      	movs	r3, #2
 80032f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80032f4:	463b      	mov	r3, r7
 80032f6:	4619      	mov	r1, r3
 80032f8:	4813      	ldr	r0, [pc, #76]	; (8003348 <MX_ADC1_Init+0xec>)
 80032fa:	f001 f8c9 	bl	8004490 <HAL_ADC_ConfigChannel>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8003304:	f000 fa22 	bl	800374c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003308:	2309      	movs	r3, #9
 800330a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800330c:	2303      	movs	r3, #3
 800330e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003310:	463b      	mov	r3, r7
 8003312:	4619      	mov	r1, r3
 8003314:	480c      	ldr	r0, [pc, #48]	; (8003348 <MX_ADC1_Init+0xec>)
 8003316:	f001 f8bb 	bl	8004490 <HAL_ADC_ConfigChannel>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8003320:	f000 fa14 	bl	800374c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8003324:	230f      	movs	r3, #15
 8003326:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8003328:	2304      	movs	r3, #4
 800332a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800332c:	463b      	mov	r3, r7
 800332e:	4619      	mov	r1, r3
 8003330:	4805      	ldr	r0, [pc, #20]	; (8003348 <MX_ADC1_Init+0xec>)
 8003332:	f001 f8ad 	bl	8004490 <HAL_ADC_ConfigChannel>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800333c:	f000 fa06 	bl	800374c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003340:	bf00      	nop
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	2000022c 	.word	0x2000022c
 800334c:	40012000 	.word	0x40012000
 8003350:	0f000001 	.word	0x0f000001

08003354 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800335a:	1d3b      	adds	r3, r7, #4
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]
 8003360:	605a      	str	r2, [r3, #4]
 8003362:	609a      	str	r2, [r3, #8]
 8003364:	60da      	str	r2, [r3, #12]
 8003366:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003368:	2300      	movs	r3, #0
 800336a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800336c:	4b24      	ldr	r3, [pc, #144]	; (8003400 <MX_RTC_Init+0xac>)
 800336e:	4a25      	ldr	r2, [pc, #148]	; (8003404 <MX_RTC_Init+0xb0>)
 8003370:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003372:	4b23      	ldr	r3, [pc, #140]	; (8003400 <MX_RTC_Init+0xac>)
 8003374:	2200      	movs	r2, #0
 8003376:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003378:	4b21      	ldr	r3, [pc, #132]	; (8003400 <MX_RTC_Init+0xac>)
 800337a:	227f      	movs	r2, #127	; 0x7f
 800337c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800337e:	4b20      	ldr	r3, [pc, #128]	; (8003400 <MX_RTC_Init+0xac>)
 8003380:	22ff      	movs	r2, #255	; 0xff
 8003382:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003384:	4b1e      	ldr	r3, [pc, #120]	; (8003400 <MX_RTC_Init+0xac>)
 8003386:	2200      	movs	r2, #0
 8003388:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800338a:	4b1d      	ldr	r3, [pc, #116]	; (8003400 <MX_RTC_Init+0xac>)
 800338c:	2200      	movs	r2, #0
 800338e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003390:	4b1b      	ldr	r3, [pc, #108]	; (8003400 <MX_RTC_Init+0xac>)
 8003392:	2200      	movs	r2, #0
 8003394:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003396:	481a      	ldr	r0, [pc, #104]	; (8003400 <MX_RTC_Init+0xac>)
 8003398:	f002 fbc8 	bl	8005b2c <HAL_RTC_Init>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80033a2:	f000 f9d3 	bl	800374c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x16;
 80033a6:	2316      	movs	r3, #22
 80033a8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x20;
 80033aa:	2320      	movs	r3, #32
 80033ac:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80033ae:	2300      	movs	r3, #0
 80033b0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80033b2:	2300      	movs	r3, #0
 80033b4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80033b6:	2300      	movs	r3, #0
 80033b8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80033ba:	1d3b      	adds	r3, r7, #4
 80033bc:	2201      	movs	r2, #1
 80033be:	4619      	mov	r1, r3
 80033c0:	480f      	ldr	r0, [pc, #60]	; (8003400 <MX_RTC_Init+0xac>)
 80033c2:	f002 fc29 	bl	8005c18 <HAL_RTC_SetTime>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80033cc:	f000 f9be 	bl	800374c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 80033d0:	2304      	movs	r3, #4
 80033d2:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_SEPTEMBER;
 80033d4:	2309      	movs	r3, #9
 80033d6:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x19;
 80033d8:	2319      	movs	r3, #25
 80033da:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x24;
 80033dc:	2324      	movs	r3, #36	; 0x24
 80033de:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80033e0:	463b      	mov	r3, r7
 80033e2:	2201      	movs	r2, #1
 80033e4:	4619      	mov	r1, r3
 80033e6:	4806      	ldr	r0, [pc, #24]	; (8003400 <MX_RTC_Init+0xac>)
 80033e8:	f002 fd0e 	bl	8005e08 <HAL_RTC_SetDate>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80033f2:	f000 f9ab 	bl	800374c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80033f6:	bf00      	nop
 80033f8:	3718      	adds	r7, #24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	20000274 	.word	0x20000274
 8003404:	40002800 	.word	0x40002800

08003408 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b08a      	sub	sp, #40	; 0x28
 800340c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800340e:	f107 0318 	add.w	r3, r7, #24
 8003412:	2200      	movs	r2, #0
 8003414:	601a      	str	r2, [r3, #0]
 8003416:	605a      	str	r2, [r3, #4]
 8003418:	609a      	str	r2, [r3, #8]
 800341a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800341c:	f107 0310 	add.w	r3, r7, #16
 8003420:	2200      	movs	r2, #0
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003426:	463b      	mov	r3, r7
 8003428:	2200      	movs	r2, #0
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	605a      	str	r2, [r3, #4]
 800342e:	609a      	str	r2, [r3, #8]
 8003430:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003432:	4b2c      	ldr	r3, [pc, #176]	; (80034e4 <MX_TIM2_Init+0xdc>)
 8003434:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003438:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 800343a:	4b2a      	ldr	r3, [pc, #168]	; (80034e4 <MX_TIM2_Init+0xdc>)
 800343c:	2253      	movs	r2, #83	; 0x53
 800343e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003440:	4b28      	ldr	r3, [pc, #160]	; (80034e4 <MX_TIM2_Init+0xdc>)
 8003442:	2200      	movs	r2, #0
 8003444:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003446:	4b27      	ldr	r3, [pc, #156]	; (80034e4 <MX_TIM2_Init+0xdc>)
 8003448:	f04f 32ff 	mov.w	r2, #4294967295
 800344c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800344e:	4b25      	ldr	r3, [pc, #148]	; (80034e4 <MX_TIM2_Init+0xdc>)
 8003450:	2200      	movs	r2, #0
 8003452:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003454:	4b23      	ldr	r3, [pc, #140]	; (80034e4 <MX_TIM2_Init+0xdc>)
 8003456:	2200      	movs	r2, #0
 8003458:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800345a:	4822      	ldr	r0, [pc, #136]	; (80034e4 <MX_TIM2_Init+0xdc>)
 800345c:	f002 fe64 	bl	8006128 <HAL_TIM_Base_Init>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8003466:	f000 f971 	bl	800374c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800346a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800346e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003470:	f107 0318 	add.w	r3, r7, #24
 8003474:	4619      	mov	r1, r3
 8003476:	481b      	ldr	r0, [pc, #108]	; (80034e4 <MX_TIM2_Init+0xdc>)
 8003478:	f003 f9bc 	bl	80067f4 <HAL_TIM_ConfigClockSource>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8003482:	f000 f963 	bl	800374c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8003486:	4817      	ldr	r0, [pc, #92]	; (80034e4 <MX_TIM2_Init+0xdc>)
 8003488:	f002 fe9d 	bl	80061c6 <HAL_TIM_IC_Init>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003492:	f000 f95b 	bl	800374c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003496:	2300      	movs	r3, #0
 8003498:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800349a:	2300      	movs	r3, #0
 800349c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800349e:	f107 0310 	add.w	r3, r7, #16
 80034a2:	4619      	mov	r1, r3
 80034a4:	480f      	ldr	r0, [pc, #60]	; (80034e4 <MX_TIM2_Init+0xdc>)
 80034a6:	f003 fcf3 	bl	8006e90 <HAL_TIMEx_MasterConfigSynchronization>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80034b0:	f000 f94c 	bl	800374c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80034b4:	2300      	movs	r3, #0
 80034b6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80034b8:	2301      	movs	r3, #1
 80034ba:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80034bc:	2300      	movs	r3, #0
 80034be:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80034c0:	2300      	movs	r3, #0
 80034c2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80034c4:	463b      	mov	r3, r7
 80034c6:	2200      	movs	r2, #0
 80034c8:	4619      	mov	r1, r3
 80034ca:	4806      	ldr	r0, [pc, #24]	; (80034e4 <MX_TIM2_Init+0xdc>)
 80034cc:	f003 f8f6 	bl	80066bc <HAL_TIM_IC_ConfigChannel>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80034d6:	f000 f939 	bl	800374c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80034da:	bf00      	nop
 80034dc:	3728      	adds	r7, #40	; 0x28
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	20000294 	.word	0x20000294

080034e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034ee:	f107 0308 	add.w	r3, r7, #8
 80034f2:	2200      	movs	r2, #0
 80034f4:	601a      	str	r2, [r3, #0]
 80034f6:	605a      	str	r2, [r3, #4]
 80034f8:	609a      	str	r2, [r3, #8]
 80034fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034fc:	463b      	mov	r3, r7
 80034fe:	2200      	movs	r2, #0
 8003500:	601a      	str	r2, [r3, #0]
 8003502:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003504:	4b1d      	ldr	r3, [pc, #116]	; (800357c <MX_TIM3_Init+0x94>)
 8003506:	4a1e      	ldr	r2, [pc, #120]	; (8003580 <MX_TIM3_Init+0x98>)
 8003508:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800350a:	4b1c      	ldr	r3, [pc, #112]	; (800357c <MX_TIM3_Init+0x94>)
 800350c:	2200      	movs	r2, #0
 800350e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003510:	4b1a      	ldr	r3, [pc, #104]	; (800357c <MX_TIM3_Init+0x94>)
 8003512:	2200      	movs	r2, #0
 8003514:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003516:	4b19      	ldr	r3, [pc, #100]	; (800357c <MX_TIM3_Init+0x94>)
 8003518:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800351c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800351e:	4b17      	ldr	r3, [pc, #92]	; (800357c <MX_TIM3_Init+0x94>)
 8003520:	2200      	movs	r2, #0
 8003522:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003524:	4b15      	ldr	r3, [pc, #84]	; (800357c <MX_TIM3_Init+0x94>)
 8003526:	2200      	movs	r2, #0
 8003528:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800352a:	4814      	ldr	r0, [pc, #80]	; (800357c <MX_TIM3_Init+0x94>)
 800352c:	f002 fdfc 	bl	8006128 <HAL_TIM_Base_Init>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8003536:	f000 f909 	bl	800374c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800353a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800353e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003540:	f107 0308 	add.w	r3, r7, #8
 8003544:	4619      	mov	r1, r3
 8003546:	480d      	ldr	r0, [pc, #52]	; (800357c <MX_TIM3_Init+0x94>)
 8003548:	f003 f954 	bl	80067f4 <HAL_TIM_ConfigClockSource>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8003552:	f000 f8fb 	bl	800374c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003556:	2300      	movs	r3, #0
 8003558:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800355a:	2300      	movs	r3, #0
 800355c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800355e:	463b      	mov	r3, r7
 8003560:	4619      	mov	r1, r3
 8003562:	4806      	ldr	r0, [pc, #24]	; (800357c <MX_TIM3_Init+0x94>)
 8003564:	f003 fc94 	bl	8006e90 <HAL_TIMEx_MasterConfigSynchronization>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800356e:	f000 f8ed 	bl	800374c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003572:	bf00      	nop
 8003574:	3718      	adds	r7, #24
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	200002dc 	.word	0x200002dc
 8003580:	40000400 	.word	0x40000400

08003584 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003588:	4b12      	ldr	r3, [pc, #72]	; (80035d4 <MX_USART2_UART_Init+0x50>)
 800358a:	4a13      	ldr	r2, [pc, #76]	; (80035d8 <MX_USART2_UART_Init+0x54>)
 800358c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800358e:	4b11      	ldr	r3, [pc, #68]	; (80035d4 <MX_USART2_UART_Init+0x50>)
 8003590:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003594:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8003596:	4b0f      	ldr	r3, [pc, #60]	; (80035d4 <MX_USART2_UART_Init+0x50>)
 8003598:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800359c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800359e:	4b0d      	ldr	r3, [pc, #52]	; (80035d4 <MX_USART2_UART_Init+0x50>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_ODD;
 80035a4:	4b0b      	ldr	r3, [pc, #44]	; (80035d4 <MX_USART2_UART_Init+0x50>)
 80035a6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80035aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80035ac:	4b09      	ldr	r3, [pc, #36]	; (80035d4 <MX_USART2_UART_Init+0x50>)
 80035ae:	220c      	movs	r2, #12
 80035b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035b2:	4b08      	ldr	r3, [pc, #32]	; (80035d4 <MX_USART2_UART_Init+0x50>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80035b8:	4b06      	ldr	r3, [pc, #24]	; (80035d4 <MX_USART2_UART_Init+0x50>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80035be:	4805      	ldr	r0, [pc, #20]	; (80035d4 <MX_USART2_UART_Init+0x50>)
 80035c0:	f003 fce8 	bl	8006f94 <HAL_UART_Init>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 80035ca:	f000 f8bf 	bl	800374c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80035ce:	bf00      	nop
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	20000324 	.word	0x20000324
 80035d8:	40004400 	.word	0x40004400

080035dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b08a      	sub	sp, #40	; 0x28
 80035e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035e2:	f107 0314 	add.w	r3, r7, #20
 80035e6:	2200      	movs	r2, #0
 80035e8:	601a      	str	r2, [r3, #0]
 80035ea:	605a      	str	r2, [r3, #4]
 80035ec:	609a      	str	r2, [r3, #8]
 80035ee:	60da      	str	r2, [r3, #12]
 80035f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035f2:	2300      	movs	r3, #0
 80035f4:	613b      	str	r3, [r7, #16]
 80035f6:	4b51      	ldr	r3, [pc, #324]	; (800373c <MX_GPIO_Init+0x160>)
 80035f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fa:	4a50      	ldr	r2, [pc, #320]	; (800373c <MX_GPIO_Init+0x160>)
 80035fc:	f043 0304 	orr.w	r3, r3, #4
 8003600:	6313      	str	r3, [r2, #48]	; 0x30
 8003602:	4b4e      	ldr	r3, [pc, #312]	; (800373c <MX_GPIO_Init+0x160>)
 8003604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003606:	f003 0304 	and.w	r3, r3, #4
 800360a:	613b      	str	r3, [r7, #16]
 800360c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800360e:	2300      	movs	r3, #0
 8003610:	60fb      	str	r3, [r7, #12]
 8003612:	4b4a      	ldr	r3, [pc, #296]	; (800373c <MX_GPIO_Init+0x160>)
 8003614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003616:	4a49      	ldr	r2, [pc, #292]	; (800373c <MX_GPIO_Init+0x160>)
 8003618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800361c:	6313      	str	r3, [r2, #48]	; 0x30
 800361e:	4b47      	ldr	r3, [pc, #284]	; (800373c <MX_GPIO_Init+0x160>)
 8003620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003626:	60fb      	str	r3, [r7, #12]
 8003628:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800362a:	2300      	movs	r3, #0
 800362c:	60bb      	str	r3, [r7, #8]
 800362e:	4b43      	ldr	r3, [pc, #268]	; (800373c <MX_GPIO_Init+0x160>)
 8003630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003632:	4a42      	ldr	r2, [pc, #264]	; (800373c <MX_GPIO_Init+0x160>)
 8003634:	f043 0301 	orr.w	r3, r3, #1
 8003638:	6313      	str	r3, [r2, #48]	; 0x30
 800363a:	4b40      	ldr	r3, [pc, #256]	; (800373c <MX_GPIO_Init+0x160>)
 800363c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	60bb      	str	r3, [r7, #8]
 8003644:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003646:	2300      	movs	r3, #0
 8003648:	607b      	str	r3, [r7, #4]
 800364a:	4b3c      	ldr	r3, [pc, #240]	; (800373c <MX_GPIO_Init+0x160>)
 800364c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364e:	4a3b      	ldr	r2, [pc, #236]	; (800373c <MX_GPIO_Init+0x160>)
 8003650:	f043 0302 	orr.w	r3, r3, #2
 8003654:	6313      	str	r3, [r2, #48]	; 0x30
 8003656:	4b39      	ldr	r3, [pc, #228]	; (800373c <MX_GPIO_Init+0x160>)
 8003658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	607b      	str	r3, [r7, #4]
 8003660:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED_D5_Pin|DB5_Line_Pin|DB6_Line_Pin, GPIO_PIN_RESET);
 8003662:	2200      	movs	r2, #0
 8003664:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8003668:	4835      	ldr	r0, [pc, #212]	; (8003740 <MX_GPIO_Init+0x164>)
 800366a:	f001 fc7f 	bl	8004f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, E_Line_Pin|LED_D4_Pin|DB4_Line_Pin|RS_Line_Pin
 800366e:	2200      	movs	r2, #0
 8003670:	f24d 4134 	movw	r1, #54324	; 0xd434
 8003674:	4833      	ldr	r0, [pc, #204]	; (8003744 <MX_GPIO_Init+0x168>)
 8003676:	f001 fc79 	bl	8004f6c <HAL_GPIO_WritePin>
                          |R_W_Line_Pin|LED_D2_Pin|LED_D3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DB7_Line_GPIO_Port, DB7_Line_Pin, GPIO_PIN_RESET);
 800367a:	2200      	movs	r2, #0
 800367c:	2140      	movs	r1, #64	; 0x40
 800367e:	4832      	ldr	r0, [pc, #200]	; (8003748 <MX_GPIO_Init+0x16c>)
 8003680:	f001 fc74 	bl	8004f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD2_Pin LED_D5_Pin DB5_Line_Pin DB6_Line_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED_D5_Pin|DB5_Line_Pin|DB6_Line_Pin;
 8003684:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 8003688:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800368a:	2301      	movs	r3, #1
 800368c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368e:	2300      	movs	r3, #0
 8003690:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003692:	2300      	movs	r3, #0
 8003694:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003696:	f107 0314 	add.w	r3, r7, #20
 800369a:	4619      	mov	r1, r3
 800369c:	4828      	ldr	r0, [pc, #160]	; (8003740 <MX_GPIO_Init+0x164>)
 800369e:	f001 fac9 	bl	8004c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80036a2:	23c0      	movs	r3, #192	; 0xc0
 80036a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80036a6:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80036aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036ac:	2301      	movs	r3, #1
 80036ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036b0:	f107 0314 	add.w	r3, r7, #20
 80036b4:	4619      	mov	r1, r3
 80036b6:	4822      	ldr	r0, [pc, #136]	; (8003740 <MX_GPIO_Init+0x164>)
 80036b8:	f001 fabc 	bl	8004c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : E_Line_Pin LED_D4_Pin DB4_Line_Pin RS_Line_Pin
                           R_W_Line_Pin LED_D2_Pin LED_D3_Pin */
  GPIO_InitStruct.Pin = E_Line_Pin|LED_D4_Pin|DB4_Line_Pin|RS_Line_Pin
 80036bc:	f24d 4334 	movw	r3, #54324	; 0xd434
 80036c0:	617b      	str	r3, [r7, #20]
                          |R_W_Line_Pin|LED_D2_Pin|LED_D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036c2:	2301      	movs	r3, #1
 80036c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c6:	2300      	movs	r3, #0
 80036c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ca:	2300      	movs	r3, #0
 80036cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036ce:	f107 0314 	add.w	r3, r7, #20
 80036d2:	4619      	mov	r1, r3
 80036d4:	481b      	ldr	r0, [pc, #108]	; (8003744 <MX_GPIO_Init+0x168>)
 80036d6:	f001 faad 	bl	8004c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_8|GPIO_PIN_9;
 80036da:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 80036de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80036e0:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80036e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036e6:	2301      	movs	r3, #1
 80036e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036ea:	f107 0314 	add.w	r3, r7, #20
 80036ee:	4619      	mov	r1, r3
 80036f0:	4814      	ldr	r0, [pc, #80]	; (8003744 <MX_GPIO_Init+0x168>)
 80036f2:	f001 fa9f 	bl	8004c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : DB7_Line_Pin */
  GPIO_InitStruct.Pin = DB7_Line_Pin;
 80036f6:	2340      	movs	r3, #64	; 0x40
 80036f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036fa:	2301      	movs	r3, #1
 80036fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fe:	2300      	movs	r3, #0
 8003700:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003702:	2300      	movs	r3, #0
 8003704:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DB7_Line_GPIO_Port, &GPIO_InitStruct);
 8003706:	f107 0314 	add.w	r3, r7, #20
 800370a:	4619      	mov	r1, r3
 800370c:	480e      	ldr	r0, [pc, #56]	; (8003748 <MX_GPIO_Init+0x16c>)
 800370e:	f001 fa91 	bl	8004c34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003712:	2200      	movs	r2, #0
 8003714:	2100      	movs	r1, #0
 8003716:	2017      	movs	r0, #23
 8003718:	f001 f9c3 	bl	8004aa2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800371c:	2017      	movs	r0, #23
 800371e:	f001 f9dc 	bl	8004ada <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003722:	2200      	movs	r2, #0
 8003724:	2100      	movs	r1, #0
 8003726:	2028      	movs	r0, #40	; 0x28
 8003728:	f001 f9bb 	bl	8004aa2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800372c:	2028      	movs	r0, #40	; 0x28
 800372e:	f001 f9d4 	bl	8004ada <HAL_NVIC_EnableIRQ>

}
 8003732:	bf00      	nop
 8003734:	3728      	adds	r7, #40	; 0x28
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	40023800 	.word	0x40023800
 8003740:	40020000 	.word	0x40020000
 8003744:	40020400 	.word	0x40020400
 8003748:	40020800 	.word	0x40020800

0800374c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003750:	b672      	cpsid	i
}
 8003752:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003754:	e7fe      	b.n	8003754 <Error_Handler+0x8>
	...

08003758 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800375e:	2300      	movs	r3, #0
 8003760:	607b      	str	r3, [r7, #4]
 8003762:	4b10      	ldr	r3, [pc, #64]	; (80037a4 <HAL_MspInit+0x4c>)
 8003764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003766:	4a0f      	ldr	r2, [pc, #60]	; (80037a4 <HAL_MspInit+0x4c>)
 8003768:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800376c:	6453      	str	r3, [r2, #68]	; 0x44
 800376e:	4b0d      	ldr	r3, [pc, #52]	; (80037a4 <HAL_MspInit+0x4c>)
 8003770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003772:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003776:	607b      	str	r3, [r7, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800377a:	2300      	movs	r3, #0
 800377c:	603b      	str	r3, [r7, #0]
 800377e:	4b09      	ldr	r3, [pc, #36]	; (80037a4 <HAL_MspInit+0x4c>)
 8003780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003782:	4a08      	ldr	r2, [pc, #32]	; (80037a4 <HAL_MspInit+0x4c>)
 8003784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003788:	6413      	str	r3, [r2, #64]	; 0x40
 800378a:	4b06      	ldr	r3, [pc, #24]	; (80037a4 <HAL_MspInit+0x4c>)
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003792:	603b      	str	r3, [r7, #0]
 8003794:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003796:	2007      	movs	r0, #7
 8003798:	f001 f978 	bl	8004a8c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800379c:	bf00      	nop
 800379e:	3708      	adds	r7, #8
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	40023800 	.word	0x40023800

080037a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b08c      	sub	sp, #48	; 0x30
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037b0:	f107 031c 	add.w	r3, r7, #28
 80037b4:	2200      	movs	r2, #0
 80037b6:	601a      	str	r2, [r3, #0]
 80037b8:	605a      	str	r2, [r3, #4]
 80037ba:	609a      	str	r2, [r3, #8]
 80037bc:	60da      	str	r2, [r3, #12]
 80037be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a31      	ldr	r2, [pc, #196]	; (800388c <HAL_ADC_MspInit+0xe4>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d15b      	bne.n	8003882 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80037ca:	2300      	movs	r3, #0
 80037cc:	61bb      	str	r3, [r7, #24]
 80037ce:	4b30      	ldr	r3, [pc, #192]	; (8003890 <HAL_ADC_MspInit+0xe8>)
 80037d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d2:	4a2f      	ldr	r2, [pc, #188]	; (8003890 <HAL_ADC_MspInit+0xe8>)
 80037d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037d8:	6453      	str	r3, [r2, #68]	; 0x44
 80037da:	4b2d      	ldr	r3, [pc, #180]	; (8003890 <HAL_ADC_MspInit+0xe8>)
 80037dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e2:	61bb      	str	r3, [r7, #24]
 80037e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037e6:	2300      	movs	r3, #0
 80037e8:	617b      	str	r3, [r7, #20]
 80037ea:	4b29      	ldr	r3, [pc, #164]	; (8003890 <HAL_ADC_MspInit+0xe8>)
 80037ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ee:	4a28      	ldr	r2, [pc, #160]	; (8003890 <HAL_ADC_MspInit+0xe8>)
 80037f0:	f043 0301 	orr.w	r3, r3, #1
 80037f4:	6313      	str	r3, [r2, #48]	; 0x30
 80037f6:	4b26      	ldr	r3, [pc, #152]	; (8003890 <HAL_ADC_MspInit+0xe8>)
 80037f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	617b      	str	r3, [r7, #20]
 8003800:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003802:	2300      	movs	r3, #0
 8003804:	613b      	str	r3, [r7, #16]
 8003806:	4b22      	ldr	r3, [pc, #136]	; (8003890 <HAL_ADC_MspInit+0xe8>)
 8003808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380a:	4a21      	ldr	r2, [pc, #132]	; (8003890 <HAL_ADC_MspInit+0xe8>)
 800380c:	f043 0304 	orr.w	r3, r3, #4
 8003810:	6313      	str	r3, [r2, #48]	; 0x30
 8003812:	4b1f      	ldr	r3, [pc, #124]	; (8003890 <HAL_ADC_MspInit+0xe8>)
 8003814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003816:	f003 0304 	and.w	r3, r3, #4
 800381a:	613b      	str	r3, [r7, #16]
 800381c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800381e:	2300      	movs	r3, #0
 8003820:	60fb      	str	r3, [r7, #12]
 8003822:	4b1b      	ldr	r3, [pc, #108]	; (8003890 <HAL_ADC_MspInit+0xe8>)
 8003824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003826:	4a1a      	ldr	r2, [pc, #104]	; (8003890 <HAL_ADC_MspInit+0xe8>)
 8003828:	f043 0302 	orr.w	r3, r3, #2
 800382c:	6313      	str	r3, [r2, #48]	; 0x30
 800382e:	4b18      	ldr	r3, [pc, #96]	; (8003890 <HAL_ADC_MspInit+0xe8>)
 8003830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	60fb      	str	r3, [r7, #12]
 8003838:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800383a:	2301      	movs	r3, #1
 800383c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800383e:	2303      	movs	r3, #3
 8003840:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003842:	2300      	movs	r3, #0
 8003844:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003846:	f107 031c 	add.w	r3, r7, #28
 800384a:	4619      	mov	r1, r3
 800384c:	4811      	ldr	r0, [pc, #68]	; (8003894 <HAL_ADC_MspInit+0xec>)
 800384e:	f001 f9f1 	bl	8004c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003852:	2330      	movs	r3, #48	; 0x30
 8003854:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003856:	2303      	movs	r3, #3
 8003858:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800385a:	2300      	movs	r3, #0
 800385c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800385e:	f107 031c 	add.w	r3, r7, #28
 8003862:	4619      	mov	r1, r3
 8003864:	480c      	ldr	r0, [pc, #48]	; (8003898 <HAL_ADC_MspInit+0xf0>)
 8003866:	f001 f9e5 	bl	8004c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800386a:	2302      	movs	r3, #2
 800386c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800386e:	2303      	movs	r3, #3
 8003870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003872:	2300      	movs	r3, #0
 8003874:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003876:	f107 031c 	add.w	r3, r7, #28
 800387a:	4619      	mov	r1, r3
 800387c:	4807      	ldr	r0, [pc, #28]	; (800389c <HAL_ADC_MspInit+0xf4>)
 800387e:	f001 f9d9 	bl	8004c34 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003882:	bf00      	nop
 8003884:	3730      	adds	r7, #48	; 0x30
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	40012000 	.word	0x40012000
 8003890:	40023800 	.word	0x40023800
 8003894:	40020000 	.word	0x40020000
 8003898:	40020800 	.word	0x40020800
 800389c:	40020400 	.word	0x40020400

080038a0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b088      	sub	sp, #32
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80038a8:	f107 0308 	add.w	r3, r7, #8
 80038ac:	2200      	movs	r2, #0
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	605a      	str	r2, [r3, #4]
 80038b2:	609a      	str	r2, [r3, #8]
 80038b4:	60da      	str	r2, [r3, #12]
 80038b6:	611a      	str	r2, [r3, #16]
 80038b8:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a0c      	ldr	r2, [pc, #48]	; (80038f0 <HAL_RTC_MspInit+0x50>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d111      	bne.n	80038e8 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80038c4:	2302      	movs	r3, #2
 80038c6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80038c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038cc:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80038ce:	f107 0308 	add.w	r3, r7, #8
 80038d2:	4618      	mov	r0, r3
 80038d4:	f002 f83a 	bl	800594c <HAL_RCCEx_PeriphCLKConfig>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80038de:	f7ff ff35 	bl	800374c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80038e2:	4b04      	ldr	r3, [pc, #16]	; (80038f4 <HAL_RTC_MspInit+0x54>)
 80038e4:	2201      	movs	r2, #1
 80038e6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80038e8:	bf00      	nop
 80038ea:	3720      	adds	r7, #32
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40002800 	.word	0x40002800
 80038f4:	42470e3c 	.word	0x42470e3c

080038f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b08a      	sub	sp, #40	; 0x28
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003900:	f107 0314 	add.w	r3, r7, #20
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	605a      	str	r2, [r3, #4]
 800390a:	609a      	str	r2, [r3, #8]
 800390c:	60da      	str	r2, [r3, #12]
 800390e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003918:	d135      	bne.n	8003986 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800391a:	2300      	movs	r3, #0
 800391c:	613b      	str	r3, [r7, #16]
 800391e:	4b25      	ldr	r3, [pc, #148]	; (80039b4 <HAL_TIM_Base_MspInit+0xbc>)
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	4a24      	ldr	r2, [pc, #144]	; (80039b4 <HAL_TIM_Base_MspInit+0xbc>)
 8003924:	f043 0301 	orr.w	r3, r3, #1
 8003928:	6413      	str	r3, [r2, #64]	; 0x40
 800392a:	4b22      	ldr	r3, [pc, #136]	; (80039b4 <HAL_TIM_Base_MspInit+0xbc>)
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	613b      	str	r3, [r7, #16]
 8003934:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003936:	2300      	movs	r3, #0
 8003938:	60fb      	str	r3, [r7, #12]
 800393a:	4b1e      	ldr	r3, [pc, #120]	; (80039b4 <HAL_TIM_Base_MspInit+0xbc>)
 800393c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393e:	4a1d      	ldr	r2, [pc, #116]	; (80039b4 <HAL_TIM_Base_MspInit+0xbc>)
 8003940:	f043 0301 	orr.w	r3, r3, #1
 8003944:	6313      	str	r3, [r2, #48]	; 0x30
 8003946:	4b1b      	ldr	r3, [pc, #108]	; (80039b4 <HAL_TIM_Base_MspInit+0xbc>)
 8003948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	60fb      	str	r3, [r7, #12]
 8003950:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003952:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003956:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003958:	2302      	movs	r3, #2
 800395a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800395c:	2300      	movs	r3, #0
 800395e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003960:	2300      	movs	r3, #0
 8003962:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003964:	2301      	movs	r3, #1
 8003966:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003968:	f107 0314 	add.w	r3, r7, #20
 800396c:	4619      	mov	r1, r3
 800396e:	4812      	ldr	r0, [pc, #72]	; (80039b8 <HAL_TIM_Base_MspInit+0xc0>)
 8003970:	f001 f960 	bl	8004c34 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003974:	2200      	movs	r2, #0
 8003976:	2100      	movs	r1, #0
 8003978:	201c      	movs	r0, #28
 800397a:	f001 f892 	bl	8004aa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800397e:	201c      	movs	r0, #28
 8003980:	f001 f8ab 	bl	8004ada <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003984:	e012      	b.n	80039ac <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM3)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a0c      	ldr	r2, [pc, #48]	; (80039bc <HAL_TIM_Base_MspInit+0xc4>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d10d      	bne.n	80039ac <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003990:	2300      	movs	r3, #0
 8003992:	60bb      	str	r3, [r7, #8]
 8003994:	4b07      	ldr	r3, [pc, #28]	; (80039b4 <HAL_TIM_Base_MspInit+0xbc>)
 8003996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003998:	4a06      	ldr	r2, [pc, #24]	; (80039b4 <HAL_TIM_Base_MspInit+0xbc>)
 800399a:	f043 0302 	orr.w	r3, r3, #2
 800399e:	6413      	str	r3, [r2, #64]	; 0x40
 80039a0:	4b04      	ldr	r3, [pc, #16]	; (80039b4 <HAL_TIM_Base_MspInit+0xbc>)
 80039a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	60bb      	str	r3, [r7, #8]
 80039aa:	68bb      	ldr	r3, [r7, #8]
}
 80039ac:	bf00      	nop
 80039ae:	3728      	adds	r7, #40	; 0x28
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	40023800 	.word	0x40023800
 80039b8:	40020000 	.word	0x40020000
 80039bc:	40000400 	.word	0x40000400

080039c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b08a      	sub	sp, #40	; 0x28
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039c8:	f107 0314 	add.w	r3, r7, #20
 80039cc:	2200      	movs	r2, #0
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	605a      	str	r2, [r3, #4]
 80039d2:	609a      	str	r2, [r3, #8]
 80039d4:	60da      	str	r2, [r3, #12]
 80039d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a1d      	ldr	r2, [pc, #116]	; (8003a54 <HAL_UART_MspInit+0x94>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d133      	bne.n	8003a4a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80039e2:	2300      	movs	r3, #0
 80039e4:	613b      	str	r3, [r7, #16]
 80039e6:	4b1c      	ldr	r3, [pc, #112]	; (8003a58 <HAL_UART_MspInit+0x98>)
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	4a1b      	ldr	r2, [pc, #108]	; (8003a58 <HAL_UART_MspInit+0x98>)
 80039ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039f0:	6413      	str	r3, [r2, #64]	; 0x40
 80039f2:	4b19      	ldr	r3, [pc, #100]	; (8003a58 <HAL_UART_MspInit+0x98>)
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fa:	613b      	str	r3, [r7, #16]
 80039fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039fe:	2300      	movs	r3, #0
 8003a00:	60fb      	str	r3, [r7, #12]
 8003a02:	4b15      	ldr	r3, [pc, #84]	; (8003a58 <HAL_UART_MspInit+0x98>)
 8003a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a06:	4a14      	ldr	r2, [pc, #80]	; (8003a58 <HAL_UART_MspInit+0x98>)
 8003a08:	f043 0301 	orr.w	r3, r3, #1
 8003a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a0e:	4b12      	ldr	r3, [pc, #72]	; (8003a58 <HAL_UART_MspInit+0x98>)
 8003a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003a1a:	230c      	movs	r3, #12
 8003a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a1e:	2302      	movs	r3, #2
 8003a20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a22:	2300      	movs	r3, #0
 8003a24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a26:	2303      	movs	r3, #3
 8003a28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003a2a:	2307      	movs	r3, #7
 8003a2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a2e:	f107 0314 	add.w	r3, r7, #20
 8003a32:	4619      	mov	r1, r3
 8003a34:	4809      	ldr	r0, [pc, #36]	; (8003a5c <HAL_UART_MspInit+0x9c>)
 8003a36:	f001 f8fd 	bl	8004c34 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	2100      	movs	r1, #0
 8003a3e:	2026      	movs	r0, #38	; 0x26
 8003a40:	f001 f82f 	bl	8004aa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003a44:	2026      	movs	r0, #38	; 0x26
 8003a46:	f001 f848 	bl	8004ada <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003a4a:	bf00      	nop
 8003a4c:	3728      	adds	r7, #40	; 0x28
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	40004400 	.word	0x40004400
 8003a58:	40023800 	.word	0x40023800
 8003a5c:	40020000 	.word	0x40020000

08003a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a64:	e7fe      	b.n	8003a64 <NMI_Handler+0x4>

08003a66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a66:	b480      	push	{r7}
 8003a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a6a:	e7fe      	b.n	8003a6a <HardFault_Handler+0x4>

08003a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a70:	e7fe      	b.n	8003a70 <MemManage_Handler+0x4>

08003a72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a72:	b480      	push	{r7}
 8003a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a76:	e7fe      	b.n	8003a76 <BusFault_Handler+0x4>

08003a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a7c:	e7fe      	b.n	8003a7c <UsageFault_Handler+0x4>

08003a7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a82:	bf00      	nop
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a90:	bf00      	nop
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr

08003a9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a9e:	bf00      	nop
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003aac:	f000 fae8 	bl	8004080 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ab0:	bf00      	nop
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_8) != RESET){
 8003ab8:	4b8a      	ldr	r3, [pc, #552]	; (8003ce4 <EXTI9_5_IRQHandler+0x230>)
 8003aba:	695b      	ldr	r3, [r3, #20]
 8003abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d039      	beq.n	8003b38 <EXTI9_5_IRQHandler+0x84>


		if(HAL_GetTick() - ticks_pressed >= 20){
 8003ac4:	f000 faf0 	bl	80040a8 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	4b87      	ldr	r3, [pc, #540]	; (8003ce8 <EXTI9_5_IRQHandler+0x234>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	2b13      	cmp	r3, #19
 8003ad2:	d92c      	bls.n	8003b2e <EXTI9_5_IRQHandler+0x7a>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == 0){
 8003ad4:	4b85      	ldr	r3, [pc, #532]	; (8003cec <EXTI9_5_IRQHandler+0x238>)
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d112      	bne.n	8003b04 <EXTI9_5_IRQHandler+0x50>
 8003ade:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ae2:	4883      	ldr	r0, [pc, #524]	; (8003cf0 <EXTI9_5_IRQHandler+0x23c>)
 8003ae4:	f001 fa2a 	bl	8004f3c <HAL_GPIO_ReadPin>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10a      	bne.n	8003b04 <EXTI9_5_IRQHandler+0x50>
				button_state =0 ; // stable low reached
 8003aee:	4b7f      	ldr	r3, [pc, #508]	; (8003cec <EXTI9_5_IRQHandler+0x238>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 8003af4:	f000 fad8 	bl	80040a8 <HAL_GetTick>
 8003af8:	4603      	mov	r3, r0
 8003afa:	4a7b      	ldr	r2, [pc, #492]	; (8003ce8 <EXTI9_5_IRQHandler+0x234>)
 8003afc:	6013      	str	r3, [r2, #0]

				g_left_button_pressed =1;
 8003afe:	4b7d      	ldr	r3, [pc, #500]	; (8003cf4 <EXTI9_5_IRQHandler+0x240>)
 8003b00:	2201      	movs	r2, #1
 8003b02:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOB ,GPIO_PIN_8) == 1 ){
 8003b04:	4b79      	ldr	r3, [pc, #484]	; (8003cec <EXTI9_5_IRQHandler+0x238>)
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10f      	bne.n	8003b2e <EXTI9_5_IRQHandler+0x7a>
 8003b0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003b12:	4877      	ldr	r0, [pc, #476]	; (8003cf0 <EXTI9_5_IRQHandler+0x23c>)
 8003b14:	f001 fa12 	bl	8004f3c <HAL_GPIO_ReadPin>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d107      	bne.n	8003b2e <EXTI9_5_IRQHandler+0x7a>
				ticks_pressed = HAL_GetTick() ;
 8003b1e:	f000 fac3 	bl	80040a8 <HAL_GetTick>
 8003b22:	4603      	mov	r3, r0
 8003b24:	4a70      	ldr	r2, [pc, #448]	; (8003ce8 <EXTI9_5_IRQHandler+0x234>)
 8003b26:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 8003b28:	4b70      	ldr	r3, [pc, #448]	; (8003cec <EXTI9_5_IRQHandler+0x238>)
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	701a      	strb	r2, [r3, #0]

			}
		}
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8) ;
 8003b2e:	4b6d      	ldr	r3, [pc, #436]	; (8003ce4 <EXTI9_5_IRQHandler+0x230>)
 8003b30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b34:	615a      	str	r2, [r3, #20]
 8003b36:	e0c5      	b.n	8003cc4 <EXTI9_5_IRQHandler+0x210>
	}

	else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_9) != RESET){
 8003b38:	4b6a      	ldr	r3, [pc, #424]	; (8003ce4 <EXTI9_5_IRQHandler+0x230>)
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d039      	beq.n	8003bb8 <EXTI9_5_IRQHandler+0x104>



		if(HAL_GetTick() - ticks_pressed >= 20){
 8003b44:	f000 fab0 	bl	80040a8 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	4b67      	ldr	r3, [pc, #412]	; (8003ce8 <EXTI9_5_IRQHandler+0x234>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b13      	cmp	r3, #19
 8003b52:	d92c      	bls.n	8003bae <EXTI9_5_IRQHandler+0xfa>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0){
 8003b54:	4b65      	ldr	r3, [pc, #404]	; (8003cec <EXTI9_5_IRQHandler+0x238>)
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d112      	bne.n	8003b84 <EXTI9_5_IRQHandler+0xd0>
 8003b5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b62:	4863      	ldr	r0, [pc, #396]	; (8003cf0 <EXTI9_5_IRQHandler+0x23c>)
 8003b64:	f001 f9ea 	bl	8004f3c <HAL_GPIO_ReadPin>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10a      	bne.n	8003b84 <EXTI9_5_IRQHandler+0xd0>
				button_state =0 ; // stable low reached
 8003b6e:	4b5f      	ldr	r3, [pc, #380]	; (8003cec <EXTI9_5_IRQHandler+0x238>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 8003b74:	f000 fa98 	bl	80040a8 <HAL_GetTick>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	4a5b      	ldr	r2, [pc, #364]	; (8003ce8 <EXTI9_5_IRQHandler+0x234>)
 8003b7c:	6013      	str	r3, [r2, #0]

				g_top_button_pressed = 1 ;
 8003b7e:	4b5e      	ldr	r3, [pc, #376]	; (8003cf8 <EXTI9_5_IRQHandler+0x244>)
 8003b80:	2201      	movs	r2, #1
 8003b82:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOB ,GPIO_PIN_9) == 1 ){
 8003b84:	4b59      	ldr	r3, [pc, #356]	; (8003cec <EXTI9_5_IRQHandler+0x238>)
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d10f      	bne.n	8003bae <EXTI9_5_IRQHandler+0xfa>
 8003b8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b92:	4857      	ldr	r0, [pc, #348]	; (8003cf0 <EXTI9_5_IRQHandler+0x23c>)
 8003b94:	f001 f9d2 	bl	8004f3c <HAL_GPIO_ReadPin>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d107      	bne.n	8003bae <EXTI9_5_IRQHandler+0xfa>
				ticks_pressed = HAL_GetTick() ;
 8003b9e:	f000 fa83 	bl	80040a8 <HAL_GetTick>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	4a50      	ldr	r2, [pc, #320]	; (8003ce8 <EXTI9_5_IRQHandler+0x234>)
 8003ba6:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 8003ba8:	4b50      	ldr	r3, [pc, #320]	; (8003cec <EXTI9_5_IRQHandler+0x238>)
 8003baa:	2201      	movs	r2, #1
 8003bac:	701a      	strb	r2, [r3, #0]

			}
		}

		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_9) ;
 8003bae:	4b4d      	ldr	r3, [pc, #308]	; (8003ce4 <EXTI9_5_IRQHandler+0x230>)
 8003bb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bb4:	615a      	str	r2, [r3, #20]
 8003bb6:	e085      	b.n	8003cc4 <EXTI9_5_IRQHandler+0x210>

	}

	else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_6) != RESET){
 8003bb8:	4b4a      	ldr	r3, [pc, #296]	; (8003ce4 <EXTI9_5_IRQHandler+0x230>)
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d036      	beq.n	8003c32 <EXTI9_5_IRQHandler+0x17e>



		if(HAL_GetTick() - ticks_pressed >= 20){
 8003bc4:	f000 fa70 	bl	80040a8 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	4b47      	ldr	r3, [pc, #284]	; (8003ce8 <EXTI9_5_IRQHandler+0x234>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b13      	cmp	r3, #19
 8003bd2:	d92a      	bls.n	8003c2a <EXTI9_5_IRQHandler+0x176>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 0){
 8003bd4:	4b45      	ldr	r3, [pc, #276]	; (8003cec <EXTI9_5_IRQHandler+0x238>)
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d111      	bne.n	8003c02 <EXTI9_5_IRQHandler+0x14e>
 8003bde:	2140      	movs	r1, #64	; 0x40
 8003be0:	4846      	ldr	r0, [pc, #280]	; (8003cfc <EXTI9_5_IRQHandler+0x248>)
 8003be2:	f001 f9ab 	bl	8004f3c <HAL_GPIO_ReadPin>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d10a      	bne.n	8003c02 <EXTI9_5_IRQHandler+0x14e>
				button_state =0 ; // stable low reached
 8003bec:	4b3f      	ldr	r3, [pc, #252]	; (8003cec <EXTI9_5_IRQHandler+0x238>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 8003bf2:	f000 fa59 	bl	80040a8 <HAL_GetTick>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	4a3b      	ldr	r2, [pc, #236]	; (8003ce8 <EXTI9_5_IRQHandler+0x234>)
 8003bfa:	6013      	str	r3, [r2, #0]

				g_middle_button_pressed =1 ;
 8003bfc:	4b40      	ldr	r3, [pc, #256]	; (8003d00 <EXTI9_5_IRQHandler+0x24c>)
 8003bfe:	2201      	movs	r2, #1
 8003c00:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOA ,GPIO_PIN_6) == 1 ){
 8003c02:	4b3a      	ldr	r3, [pc, #232]	; (8003cec <EXTI9_5_IRQHandler+0x238>)
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d10e      	bne.n	8003c2a <EXTI9_5_IRQHandler+0x176>
 8003c0c:	2140      	movs	r1, #64	; 0x40
 8003c0e:	483b      	ldr	r0, [pc, #236]	; (8003cfc <EXTI9_5_IRQHandler+0x248>)
 8003c10:	f001 f994 	bl	8004f3c <HAL_GPIO_ReadPin>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d107      	bne.n	8003c2a <EXTI9_5_IRQHandler+0x176>
				ticks_pressed = HAL_GetTick() ;
 8003c1a:	f000 fa45 	bl	80040a8 <HAL_GetTick>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	4a31      	ldr	r2, [pc, #196]	; (8003ce8 <EXTI9_5_IRQHandler+0x234>)
 8003c22:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 8003c24:	4b31      	ldr	r3, [pc, #196]	; (8003cec <EXTI9_5_IRQHandler+0x238>)
 8003c26:	2201      	movs	r2, #1
 8003c28:	701a      	strb	r2, [r3, #0]

			}
		}


		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6) ;
 8003c2a:	4b2e      	ldr	r3, [pc, #184]	; (8003ce4 <EXTI9_5_IRQHandler+0x230>)
 8003c2c:	2240      	movs	r2, #64	; 0x40
 8003c2e:	615a      	str	r2, [r3, #20]
 8003c30:	e048      	b.n	8003cc4 <EXTI9_5_IRQHandler+0x210>

	}

	else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET){
 8003c32:	4b2c      	ldr	r3, [pc, #176]	; (8003ce4 <EXTI9_5_IRQHandler+0x230>)
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d036      	beq.n	8003cac <EXTI9_5_IRQHandler+0x1f8>




		if(HAL_GetTick() - ticks_pressed >= 20){
 8003c3e:	f000 fa33 	bl	80040a8 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	4b28      	ldr	r3, [pc, #160]	; (8003ce8 <EXTI9_5_IRQHandler+0x234>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b13      	cmp	r3, #19
 8003c4c:	d92a      	bls.n	8003ca4 <EXTI9_5_IRQHandler+0x1f0>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 0){
 8003c4e:	4b27      	ldr	r3, [pc, #156]	; (8003cec <EXTI9_5_IRQHandler+0x238>)
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d111      	bne.n	8003c7c <EXTI9_5_IRQHandler+0x1c8>
 8003c58:	2180      	movs	r1, #128	; 0x80
 8003c5a:	4828      	ldr	r0, [pc, #160]	; (8003cfc <EXTI9_5_IRQHandler+0x248>)
 8003c5c:	f001 f96e 	bl	8004f3c <HAL_GPIO_ReadPin>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10a      	bne.n	8003c7c <EXTI9_5_IRQHandler+0x1c8>
				button_state =0 ; // stable low reached
 8003c66:	4b21      	ldr	r3, [pc, #132]	; (8003cec <EXTI9_5_IRQHandler+0x238>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 8003c6c:	f000 fa1c 	bl	80040a8 <HAL_GetTick>
 8003c70:	4603      	mov	r3, r0
 8003c72:	4a1d      	ldr	r2, [pc, #116]	; (8003ce8 <EXTI9_5_IRQHandler+0x234>)
 8003c74:	6013      	str	r3, [r2, #0]

				g_right_button_pressed = 1 ;
 8003c76:	4b23      	ldr	r3, [pc, #140]	; (8003d04 <EXTI9_5_IRQHandler+0x250>)
 8003c78:	2201      	movs	r2, #1
 8003c7a:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOA ,GPIO_PIN_7) == 1 ){
 8003c7c:	4b1b      	ldr	r3, [pc, #108]	; (8003cec <EXTI9_5_IRQHandler+0x238>)
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10e      	bne.n	8003ca4 <EXTI9_5_IRQHandler+0x1f0>
 8003c86:	2180      	movs	r1, #128	; 0x80
 8003c88:	481c      	ldr	r0, [pc, #112]	; (8003cfc <EXTI9_5_IRQHandler+0x248>)
 8003c8a:	f001 f957 	bl	8004f3c <HAL_GPIO_ReadPin>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d107      	bne.n	8003ca4 <EXTI9_5_IRQHandler+0x1f0>
				ticks_pressed = HAL_GetTick() ;
 8003c94:	f000 fa08 	bl	80040a8 <HAL_GetTick>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	4a13      	ldr	r2, [pc, #76]	; (8003ce8 <EXTI9_5_IRQHandler+0x234>)
 8003c9c:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 8003c9e:	4b13      	ldr	r3, [pc, #76]	; (8003cec <EXTI9_5_IRQHandler+0x238>)
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	701a      	strb	r2, [r3, #0]

			}
		}
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7) ;
 8003ca4:	4b0f      	ldr	r3, [pc, #60]	; (8003ce4 <EXTI9_5_IRQHandler+0x230>)
 8003ca6:	2280      	movs	r2, #128	; 0x80
 8003ca8:	615a      	str	r2, [r3, #20]
 8003caa:	e00b      	b.n	8003cc4 <EXTI9_5_IRQHandler+0x210>
	}

	else{

		if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET){
 8003cac:	4b0d      	ldr	r3, [pc, #52]	; (8003ce4 <EXTI9_5_IRQHandler+0x230>)
 8003cae:	695b      	ldr	r3, [r3, #20]
 8003cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d005      	beq.n	8003cc4 <EXTI9_5_IRQHandler+0x210>

			g_bottom_button_pressed = 1 ;
 8003cb8:	4b13      	ldr	r3, [pc, #76]	; (8003d08 <EXTI9_5_IRQHandler+0x254>)
 8003cba:	2201      	movs	r2, #1
 8003cbc:	701a      	strb	r2, [r3, #0]

			__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7) ;
 8003cbe:	4b09      	ldr	r3, [pc, #36]	; (8003ce4 <EXTI9_5_IRQHandler+0x230>)
 8003cc0:	2280      	movs	r2, #128	; 0x80
 8003cc2:	615a      	str	r2, [r3, #20]
		}
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8003cc4:	2040      	movs	r0, #64	; 0x40
 8003cc6:	f001 f985 	bl	8004fd4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003cca:	2080      	movs	r0, #128	; 0x80
 8003ccc:	f001 f982 	bl	8004fd4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003cd0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003cd4:	f001 f97e 	bl	8004fd4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8003cd8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003cdc:	f001 f97a 	bl	8004fd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003ce0:	bf00      	nop
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40013c00 	.word	0x40013c00
 8003ce8:	20000500 	.word	0x20000500
 8003cec:	20000031 	.word	0x20000031
 8003cf0:	40020400 	.word	0x40020400
 8003cf4:	200004f8 	.word	0x200004f8
 8003cf8:	200004fa 	.word	0x200004fa
 8003cfc:	40020000 	.word	0x40020000
 8003d00:	200004fc 	.word	0x200004fc
 8003d04:	200004f9 	.word	0x200004f9
 8003d08:	200004fb 	.word	0x200004fb

08003d0c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003d10:	4802      	ldr	r0, [pc, #8]	; (8003d1c <TIM2_IRQHandler+0x10>)
 8003d12:	f002 fbcb 	bl	80064ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003d16:	bf00      	nop
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	20000294 	.word	0x20000294

08003d20 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003d24:	4802      	ldr	r0, [pc, #8]	; (8003d30 <USART2_IRQHandler+0x10>)
 8003d26:	f003 f9f7 	bl	8007118 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003d2a:	bf00      	nop
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	20000324 	.word	0x20000324

08003d34 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */


	if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_13) != RESET){
 8003d38:	4b22      	ldr	r3, [pc, #136]	; (8003dc4 <EXTI15_10_IRQHandler+0x90>)
 8003d3a:	695b      	ldr	r3, [r3, #20]
 8003d3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d038      	beq.n	8003db6 <EXTI15_10_IRQHandler+0x82>

		if(HAL_GetTick() - ticks_pressed >= 20){
 8003d44:	f000 f9b0 	bl	80040a8 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	4b1f      	ldr	r3, [pc, #124]	; (8003dc8 <EXTI15_10_IRQHandler+0x94>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	2b13      	cmp	r3, #19
 8003d52:	d92c      	bls.n	8003dae <EXTI15_10_IRQHandler+0x7a>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 0){
 8003d54:	4b1d      	ldr	r3, [pc, #116]	; (8003dcc <EXTI15_10_IRQHandler+0x98>)
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d112      	bne.n	8003d84 <EXTI15_10_IRQHandler+0x50>
 8003d5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d62:	481b      	ldr	r0, [pc, #108]	; (8003dd0 <EXTI15_10_IRQHandler+0x9c>)
 8003d64:	f001 f8ea 	bl	8004f3c <HAL_GPIO_ReadPin>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d10a      	bne.n	8003d84 <EXTI15_10_IRQHandler+0x50>
				button_state =0 ; // stable low reached
 8003d6e:	4b17      	ldr	r3, [pc, #92]	; (8003dcc <EXTI15_10_IRQHandler+0x98>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 8003d74:	f000 f998 	bl	80040a8 <HAL_GetTick>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	4a13      	ldr	r2, [pc, #76]	; (8003dc8 <EXTI15_10_IRQHandler+0x94>)
 8003d7c:	6013      	str	r3, [r2, #0]

				g_bottom_button_pressed = 1 ;
 8003d7e:	4b15      	ldr	r3, [pc, #84]	; (8003dd4 <EXTI15_10_IRQHandler+0xa0>)
 8003d80:	2201      	movs	r2, #1
 8003d82:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOB ,GPIO_PIN_13) == 1 ){
 8003d84:	4b11      	ldr	r3, [pc, #68]	; (8003dcc <EXTI15_10_IRQHandler+0x98>)
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10f      	bne.n	8003dae <EXTI15_10_IRQHandler+0x7a>
 8003d8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d92:	480f      	ldr	r0, [pc, #60]	; (8003dd0 <EXTI15_10_IRQHandler+0x9c>)
 8003d94:	f001 f8d2 	bl	8004f3c <HAL_GPIO_ReadPin>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d107      	bne.n	8003dae <EXTI15_10_IRQHandler+0x7a>
				ticks_pressed = HAL_GetTick() ;
 8003d9e:	f000 f983 	bl	80040a8 <HAL_GetTick>
 8003da2:	4603      	mov	r3, r0
 8003da4:	4a08      	ldr	r2, [pc, #32]	; (8003dc8 <EXTI15_10_IRQHandler+0x94>)
 8003da6:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 8003da8:	4b08      	ldr	r3, [pc, #32]	; (8003dcc <EXTI15_10_IRQHandler+0x98>)
 8003daa:	2201      	movs	r2, #1
 8003dac:	701a      	strb	r2, [r3, #0]

			}
		}

		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13) ;
 8003dae:	4b05      	ldr	r3, [pc, #20]	; (8003dc4 <EXTI15_10_IRQHandler+0x90>)
 8003db0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003db4:	615a      	str	r2, [r3, #20]
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003db6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003dba:	f001 f90b 	bl	8004fd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003dbe:	bf00      	nop
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	40013c00 	.word	0x40013c00
 8003dc8:	20000500 	.word	0x20000500
 8003dcc:	20000031 	.word	0x20000031
 8003dd0:	40020400 	.word	0x40020400
 8003dd4:	200004fb 	.word	0x200004fb

08003dd8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
  return 1;
 8003ddc:	2301      	movs	r3, #1
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <_kill>:

int _kill(int pid, int sig)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003df2:	f004 f88b 	bl	8007f0c <__errno>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2216      	movs	r2, #22
 8003dfa:	601a      	str	r2, [r3, #0]
  return -1;
 8003dfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3708      	adds	r7, #8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <_exit>:

void _exit (int status)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003e10:	f04f 31ff 	mov.w	r1, #4294967295
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f7ff ffe7 	bl	8003de8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003e1a:	e7fe      	b.n	8003e1a <_exit+0x12>

08003e1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e28:	2300      	movs	r3, #0
 8003e2a:	617b      	str	r3, [r7, #20]
 8003e2c:	e00a      	b.n	8003e44 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003e2e:	f3af 8000 	nop.w
 8003e32:	4601      	mov	r1, r0
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	1c5a      	adds	r2, r3, #1
 8003e38:	60ba      	str	r2, [r7, #8]
 8003e3a:	b2ca      	uxtb	r2, r1
 8003e3c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	3301      	adds	r3, #1
 8003e42:	617b      	str	r3, [r7, #20]
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	dbf0      	blt.n	8003e2e <_read+0x12>
  }

  return len;
 8003e4c:	687b      	ldr	r3, [r7, #4]
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3718      	adds	r7, #24
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b086      	sub	sp, #24
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	60f8      	str	r0, [r7, #12]
 8003e5e:	60b9      	str	r1, [r7, #8]
 8003e60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e62:	2300      	movs	r3, #0
 8003e64:	617b      	str	r3, [r7, #20]
 8003e66:	e009      	b.n	8003e7c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	1c5a      	adds	r2, r3, #1
 8003e6c:	60ba      	str	r2, [r7, #8]
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	617b      	str	r3, [r7, #20]
 8003e7c:	697a      	ldr	r2, [r7, #20]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	dbf1      	blt.n	8003e68 <_write+0x12>
  }
  return len;
 8003e84:	687b      	ldr	r3, [r7, #4]
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3718      	adds	r7, #24
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <_close>:

int _close(int file)
{
 8003e8e:	b480      	push	{r7}
 8003e90:	b083      	sub	sp, #12
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003e96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr

08003ea6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ea6:	b480      	push	{r7}
 8003ea8:	b083      	sub	sp, #12
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
 8003eae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003eb6:	605a      	str	r2, [r3, #4]
  return 0;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <_isatty>:

int _isatty(int file)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003ece:	2301      	movs	r3, #1
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3714      	adds	r7, #20
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
	...

08003ef8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f00:	4a14      	ldr	r2, [pc, #80]	; (8003f54 <_sbrk+0x5c>)
 8003f02:	4b15      	ldr	r3, [pc, #84]	; (8003f58 <_sbrk+0x60>)
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f0c:	4b13      	ldr	r3, [pc, #76]	; (8003f5c <_sbrk+0x64>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d102      	bne.n	8003f1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f14:	4b11      	ldr	r3, [pc, #68]	; (8003f5c <_sbrk+0x64>)
 8003f16:	4a12      	ldr	r2, [pc, #72]	; (8003f60 <_sbrk+0x68>)
 8003f18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f1a:	4b10      	ldr	r3, [pc, #64]	; (8003f5c <_sbrk+0x64>)
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4413      	add	r3, r2
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d207      	bcs.n	8003f38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f28:	f003 fff0 	bl	8007f0c <__errno>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	220c      	movs	r2, #12
 8003f30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f32:	f04f 33ff 	mov.w	r3, #4294967295
 8003f36:	e009      	b.n	8003f4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f38:	4b08      	ldr	r3, [pc, #32]	; (8003f5c <_sbrk+0x64>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f3e:	4b07      	ldr	r3, [pc, #28]	; (8003f5c <_sbrk+0x64>)
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4413      	add	r3, r2
 8003f46:	4a05      	ldr	r2, [pc, #20]	; (8003f5c <_sbrk+0x64>)
 8003f48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3718      	adds	r7, #24
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	20020000 	.word	0x20020000
 8003f58:	00000400 	.word	0x00000400
 8003f5c:	20000508 	.word	0x20000508
 8003f60:	20000520 	.word	0x20000520

08003f64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f64:	b480      	push	{r7}
 8003f66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f68:	4b06      	ldr	r3, [pc, #24]	; (8003f84 <SystemInit+0x20>)
 8003f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f6e:	4a05      	ldr	r2, [pc, #20]	; (8003f84 <SystemInit+0x20>)
 8003f70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f78:	bf00      	nop
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	e000ed00 	.word	0xe000ed00

08003f88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003f88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003fc0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003f8c:	480d      	ldr	r0, [pc, #52]	; (8003fc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003f8e:	490e      	ldr	r1, [pc, #56]	; (8003fc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003f90:	4a0e      	ldr	r2, [pc, #56]	; (8003fcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003f92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f94:	e002      	b.n	8003f9c <LoopCopyDataInit>

08003f96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f9a:	3304      	adds	r3, #4

08003f9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003fa0:	d3f9      	bcc.n	8003f96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003fa2:	4a0b      	ldr	r2, [pc, #44]	; (8003fd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003fa4:	4c0b      	ldr	r4, [pc, #44]	; (8003fd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003fa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003fa8:	e001      	b.n	8003fae <LoopFillZerobss>

08003faa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003faa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003fac:	3204      	adds	r2, #4

08003fae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003fae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003fb0:	d3fb      	bcc.n	8003faa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003fb2:	f7ff ffd7 	bl	8003f64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003fb6:	f003 ffaf 	bl	8007f18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003fba:	f7ff f87b 	bl	80030b4 <main>
  bx  lr    
 8003fbe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003fc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003fc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003fc8:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8003fcc:	0800c0c0 	.word	0x0800c0c0
  ldr r2, =_sbss
 8003fd0:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8003fd4:	20000520 	.word	0x20000520

08003fd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003fd8:	e7fe      	b.n	8003fd8 <ADC_IRQHandler>
	...

08003fdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003fe0:	4b0e      	ldr	r3, [pc, #56]	; (800401c <HAL_Init+0x40>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a0d      	ldr	r2, [pc, #52]	; (800401c <HAL_Init+0x40>)
 8003fe6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003fec:	4b0b      	ldr	r3, [pc, #44]	; (800401c <HAL_Init+0x40>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a0a      	ldr	r2, [pc, #40]	; (800401c <HAL_Init+0x40>)
 8003ff2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ff6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ff8:	4b08      	ldr	r3, [pc, #32]	; (800401c <HAL_Init+0x40>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a07      	ldr	r2, [pc, #28]	; (800401c <HAL_Init+0x40>)
 8003ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004002:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004004:	2003      	movs	r0, #3
 8004006:	f000 fd41 	bl	8004a8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800400a:	2000      	movs	r0, #0
 800400c:	f000 f808 	bl	8004020 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004010:	f7ff fba2 	bl	8003758 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	40023c00 	.word	0x40023c00

08004020 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004028:	4b12      	ldr	r3, [pc, #72]	; (8004074 <HAL_InitTick+0x54>)
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	4b12      	ldr	r3, [pc, #72]	; (8004078 <HAL_InitTick+0x58>)
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	4619      	mov	r1, r3
 8004032:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004036:	fbb3 f3f1 	udiv	r3, r3, r1
 800403a:	fbb2 f3f3 	udiv	r3, r2, r3
 800403e:	4618      	mov	r0, r3
 8004040:	f000 fd59 	bl	8004af6 <HAL_SYSTICK_Config>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e00e      	b.n	800406c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2b0f      	cmp	r3, #15
 8004052:	d80a      	bhi.n	800406a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004054:	2200      	movs	r2, #0
 8004056:	6879      	ldr	r1, [r7, #4]
 8004058:	f04f 30ff 	mov.w	r0, #4294967295
 800405c:	f000 fd21 	bl	8004aa2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004060:	4a06      	ldr	r2, [pc, #24]	; (800407c <HAL_InitTick+0x5c>)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004066:	2300      	movs	r3, #0
 8004068:	e000      	b.n	800406c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
}
 800406c:	4618      	mov	r0, r3
 800406e:	3708      	adds	r7, #8
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	20000034 	.word	0x20000034
 8004078:	2000003c 	.word	0x2000003c
 800407c:	20000038 	.word	0x20000038

08004080 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004080:	b480      	push	{r7}
 8004082:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004084:	4b06      	ldr	r3, [pc, #24]	; (80040a0 <HAL_IncTick+0x20>)
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	461a      	mov	r2, r3
 800408a:	4b06      	ldr	r3, [pc, #24]	; (80040a4 <HAL_IncTick+0x24>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4413      	add	r3, r2
 8004090:	4a04      	ldr	r2, [pc, #16]	; (80040a4 <HAL_IncTick+0x24>)
 8004092:	6013      	str	r3, [r2, #0]
}
 8004094:	bf00      	nop
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	2000003c 	.word	0x2000003c
 80040a4:	2000050c 	.word	0x2000050c

080040a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040a8:	b480      	push	{r7}
 80040aa:	af00      	add	r7, sp, #0
  return uwTick;
 80040ac:	4b03      	ldr	r3, [pc, #12]	; (80040bc <HAL_GetTick+0x14>)
 80040ae:	681b      	ldr	r3, [r3, #0]
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	2000050c 	.word	0x2000050c

080040c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040c8:	f7ff ffee 	bl	80040a8 <HAL_GetTick>
 80040cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d8:	d005      	beq.n	80040e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80040da:	4b0a      	ldr	r3, [pc, #40]	; (8004104 <HAL_Delay+0x44>)
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	461a      	mov	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	4413      	add	r3, r2
 80040e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80040e6:	bf00      	nop
 80040e8:	f7ff ffde 	bl	80040a8 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d8f7      	bhi.n	80040e8 <HAL_Delay+0x28>
  {
  }
}
 80040f8:	bf00      	nop
 80040fa:	bf00      	nop
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	2000003c 	.word	0x2000003c

08004108 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004110:	2300      	movs	r3, #0
 8004112:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e033      	b.n	8004186 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004122:	2b00      	cmp	r3, #0
 8004124:	d109      	bne.n	800413a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f7ff fb3e 	bl	80037a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413e:	f003 0310 	and.w	r3, r3, #16
 8004142:	2b00      	cmp	r3, #0
 8004144:	d118      	bne.n	8004178 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800414e:	f023 0302 	bic.w	r3, r3, #2
 8004152:	f043 0202 	orr.w	r2, r3, #2
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 faca 	bl	80046f4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416a:	f023 0303 	bic.w	r3, r3, #3
 800416e:	f043 0201 	orr.w	r2, r3, #1
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	641a      	str	r2, [r3, #64]	; 0x40
 8004176:	e001      	b.n	800417c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004184:	7bfb      	ldrb	r3, [r7, #15]
}
 8004186:	4618      	mov	r0, r3
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
	...

08004190 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004198:	2300      	movs	r3, #0
 800419a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d101      	bne.n	80041aa <HAL_ADC_Start+0x1a>
 80041a6:	2302      	movs	r3, #2
 80041a8:	e097      	b.n	80042da <HAL_ADC_Start+0x14a>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f003 0301 	and.w	r3, r3, #1
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d018      	beq.n	80041f2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	689a      	ldr	r2, [r3, #8]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f042 0201 	orr.w	r2, r2, #1
 80041ce:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80041d0:	4b45      	ldr	r3, [pc, #276]	; (80042e8 <HAL_ADC_Start+0x158>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a45      	ldr	r2, [pc, #276]	; (80042ec <HAL_ADC_Start+0x15c>)
 80041d6:	fba2 2303 	umull	r2, r3, r2, r3
 80041da:	0c9a      	lsrs	r2, r3, #18
 80041dc:	4613      	mov	r3, r2
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	4413      	add	r3, r2
 80041e2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80041e4:	e002      	b.n	80041ec <HAL_ADC_Start+0x5c>
    {
      counter--;
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	3b01      	subs	r3, #1
 80041ea:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1f9      	bne.n	80041e6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f003 0301 	and.w	r3, r3, #1
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d15f      	bne.n	80042c0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004204:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004208:	f023 0301 	bic.w	r3, r3, #1
 800420c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800421e:	2b00      	cmp	r3, #0
 8004220:	d007      	beq.n	8004232 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004226:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800422a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004236:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800423a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800423e:	d106      	bne.n	800424e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004244:	f023 0206 	bic.w	r2, r3, #6
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	645a      	str	r2, [r3, #68]	; 0x44
 800424c:	e002      	b.n	8004254 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800425c:	4b24      	ldr	r3, [pc, #144]	; (80042f0 <HAL_ADC_Start+0x160>)
 800425e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004268:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f003 031f 	and.w	r3, r3, #31
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10f      	bne.n	8004296 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d129      	bne.n	80042d8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	689a      	ldr	r2, [r3, #8]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004292:	609a      	str	r2, [r3, #8]
 8004294:	e020      	b.n	80042d8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a16      	ldr	r2, [pc, #88]	; (80042f4 <HAL_ADC_Start+0x164>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d11b      	bne.n	80042d8 <HAL_ADC_Start+0x148>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d114      	bne.n	80042d8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	689a      	ldr	r2, [r3, #8]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80042bc:	609a      	str	r2, [r3, #8]
 80042be:	e00b      	b.n	80042d8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c4:	f043 0210 	orr.w	r2, r3, #16
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d0:	f043 0201 	orr.w	r2, r3, #1
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3714      	adds	r7, #20
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	20000034 	.word	0x20000034
 80042ec:	431bde83 	.word	0x431bde83
 80042f0:	40012300 	.word	0x40012300
 80042f4:	40012000 	.word	0x40012000

080042f8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004306:	2b01      	cmp	r3, #1
 8004308:	d101      	bne.n	800430e <HAL_ADC_Stop+0x16>
 800430a:	2302      	movs	r3, #2
 800430c:	e021      	b.n	8004352 <HAL_ADC_Stop+0x5a>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	689a      	ldr	r2, [r3, #8]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f022 0201 	bic.w	r2, r2, #1
 8004324:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f003 0301 	and.w	r3, r3, #1
 8004330:	2b00      	cmp	r3, #0
 8004332:	d109      	bne.n	8004348 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004338:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800433c:	f023 0301 	bic.w	r3, r3, #1
 8004340:	f043 0201 	orr.w	r2, r3, #1
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	370c      	adds	r7, #12
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr

0800435e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800435e:	b580      	push	{r7, lr}
 8004360:	b084      	sub	sp, #16
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
 8004366:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800437a:	d113      	bne.n	80043a4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004386:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800438a:	d10b      	bne.n	80043a4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004390:	f043 0220 	orr.w	r2, r3, #32
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e063      	b.n	800446c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80043a4:	f7ff fe80 	bl	80040a8 <HAL_GetTick>
 80043a8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80043aa:	e021      	b.n	80043f0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b2:	d01d      	beq.n	80043f0 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d007      	beq.n	80043ca <HAL_ADC_PollForConversion+0x6c>
 80043ba:	f7ff fe75 	bl	80040a8 <HAL_GetTick>
 80043be:	4602      	mov	r2, r0
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	683a      	ldr	r2, [r7, #0]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d212      	bcs.n	80043f0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d00b      	beq.n	80043f0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043dc:	f043 0204 	orr.w	r2, r3, #4
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e03d      	b.n	800446c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d1d6      	bne.n	80043ac <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f06f 0212 	mvn.w	r2, #18
 8004406:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d123      	bne.n	800446a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004426:	2b00      	cmp	r3, #0
 8004428:	d11f      	bne.n	800446a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004430:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004434:	2b00      	cmp	r3, #0
 8004436:	d006      	beq.n	8004446 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004442:	2b00      	cmp	r3, #0
 8004444:	d111      	bne.n	800446a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d105      	bne.n	800446a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004462:	f043 0201 	orr.w	r2, r3, #1
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	3710      	adds	r7, #16
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004482:	4618      	mov	r0, r3
 8004484:	370c      	adds	r7, #12
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
	...

08004490 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800449a:	2300      	movs	r3, #0
 800449c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d101      	bne.n	80044ac <HAL_ADC_ConfigChannel+0x1c>
 80044a8:	2302      	movs	r3, #2
 80044aa:	e113      	b.n	80046d4 <HAL_ADC_ConfigChannel+0x244>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2b09      	cmp	r3, #9
 80044ba:	d925      	bls.n	8004508 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68d9      	ldr	r1, [r3, #12]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	461a      	mov	r2, r3
 80044ca:	4613      	mov	r3, r2
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	4413      	add	r3, r2
 80044d0:	3b1e      	subs	r3, #30
 80044d2:	2207      	movs	r2, #7
 80044d4:	fa02 f303 	lsl.w	r3, r2, r3
 80044d8:	43da      	mvns	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	400a      	ands	r2, r1
 80044e0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68d9      	ldr	r1, [r3, #12]
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	689a      	ldr	r2, [r3, #8]
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	4618      	mov	r0, r3
 80044f4:	4603      	mov	r3, r0
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	4403      	add	r3, r0
 80044fa:	3b1e      	subs	r3, #30
 80044fc:	409a      	lsls	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	430a      	orrs	r2, r1
 8004504:	60da      	str	r2, [r3, #12]
 8004506:	e022      	b.n	800454e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6919      	ldr	r1, [r3, #16]
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	b29b      	uxth	r3, r3
 8004514:	461a      	mov	r2, r3
 8004516:	4613      	mov	r3, r2
 8004518:	005b      	lsls	r3, r3, #1
 800451a:	4413      	add	r3, r2
 800451c:	2207      	movs	r2, #7
 800451e:	fa02 f303 	lsl.w	r3, r2, r3
 8004522:	43da      	mvns	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	400a      	ands	r2, r1
 800452a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	6919      	ldr	r1, [r3, #16]
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	689a      	ldr	r2, [r3, #8]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	b29b      	uxth	r3, r3
 800453c:	4618      	mov	r0, r3
 800453e:	4603      	mov	r3, r0
 8004540:	005b      	lsls	r3, r3, #1
 8004542:	4403      	add	r3, r0
 8004544:	409a      	lsls	r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	430a      	orrs	r2, r1
 800454c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	2b06      	cmp	r3, #6
 8004554:	d824      	bhi.n	80045a0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	4613      	mov	r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	4413      	add	r3, r2
 8004566:	3b05      	subs	r3, #5
 8004568:	221f      	movs	r2, #31
 800456a:	fa02 f303 	lsl.w	r3, r2, r3
 800456e:	43da      	mvns	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	400a      	ands	r2, r1
 8004576:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	b29b      	uxth	r3, r3
 8004584:	4618      	mov	r0, r3
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	685a      	ldr	r2, [r3, #4]
 800458a:	4613      	mov	r3, r2
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	4413      	add	r3, r2
 8004590:	3b05      	subs	r3, #5
 8004592:	fa00 f203 	lsl.w	r2, r0, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	635a      	str	r2, [r3, #52]	; 0x34
 800459e:	e04c      	b.n	800463a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	2b0c      	cmp	r3, #12
 80045a6:	d824      	bhi.n	80045f2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	685a      	ldr	r2, [r3, #4]
 80045b2:	4613      	mov	r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	4413      	add	r3, r2
 80045b8:	3b23      	subs	r3, #35	; 0x23
 80045ba:	221f      	movs	r2, #31
 80045bc:	fa02 f303 	lsl.w	r3, r2, r3
 80045c0:	43da      	mvns	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	400a      	ands	r2, r1
 80045c8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	4618      	mov	r0, r3
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685a      	ldr	r2, [r3, #4]
 80045dc:	4613      	mov	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4413      	add	r3, r2
 80045e2:	3b23      	subs	r3, #35	; 0x23
 80045e4:	fa00 f203 	lsl.w	r2, r0, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	430a      	orrs	r2, r1
 80045ee:	631a      	str	r2, [r3, #48]	; 0x30
 80045f0:	e023      	b.n	800463a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685a      	ldr	r2, [r3, #4]
 80045fc:	4613      	mov	r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4413      	add	r3, r2
 8004602:	3b41      	subs	r3, #65	; 0x41
 8004604:	221f      	movs	r2, #31
 8004606:	fa02 f303 	lsl.w	r3, r2, r3
 800460a:	43da      	mvns	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	400a      	ands	r2, r1
 8004612:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	b29b      	uxth	r3, r3
 8004620:	4618      	mov	r0, r3
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	685a      	ldr	r2, [r3, #4]
 8004626:	4613      	mov	r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	4413      	add	r3, r2
 800462c:	3b41      	subs	r3, #65	; 0x41
 800462e:	fa00 f203 	lsl.w	r2, r0, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	430a      	orrs	r2, r1
 8004638:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800463a:	4b29      	ldr	r3, [pc, #164]	; (80046e0 <HAL_ADC_ConfigChannel+0x250>)
 800463c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a28      	ldr	r2, [pc, #160]	; (80046e4 <HAL_ADC_ConfigChannel+0x254>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d10f      	bne.n	8004668 <HAL_ADC_ConfigChannel+0x1d8>
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2b12      	cmp	r3, #18
 800464e:	d10b      	bne.n	8004668 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a1d      	ldr	r2, [pc, #116]	; (80046e4 <HAL_ADC_ConfigChannel+0x254>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d12b      	bne.n	80046ca <HAL_ADC_ConfigChannel+0x23a>
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a1c      	ldr	r2, [pc, #112]	; (80046e8 <HAL_ADC_ConfigChannel+0x258>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d003      	beq.n	8004684 <HAL_ADC_ConfigChannel+0x1f4>
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2b11      	cmp	r3, #17
 8004682:	d122      	bne.n	80046ca <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a11      	ldr	r2, [pc, #68]	; (80046e8 <HAL_ADC_ConfigChannel+0x258>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d111      	bne.n	80046ca <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80046a6:	4b11      	ldr	r3, [pc, #68]	; (80046ec <HAL_ADC_ConfigChannel+0x25c>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a11      	ldr	r2, [pc, #68]	; (80046f0 <HAL_ADC_ConfigChannel+0x260>)
 80046ac:	fba2 2303 	umull	r2, r3, r2, r3
 80046b0:	0c9a      	lsrs	r2, r3, #18
 80046b2:	4613      	mov	r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	4413      	add	r3, r2
 80046b8:	005b      	lsls	r3, r3, #1
 80046ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80046bc:	e002      	b.n	80046c4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	3b01      	subs	r3, #1
 80046c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1f9      	bne.n	80046be <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3714      	adds	r7, #20
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr
 80046e0:	40012300 	.word	0x40012300
 80046e4:	40012000 	.word	0x40012000
 80046e8:	10000012 	.word	0x10000012
 80046ec:	20000034 	.word	0x20000034
 80046f0:	431bde83 	.word	0x431bde83

080046f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80046fc:	4b79      	ldr	r3, [pc, #484]	; (80048e4 <ADC_Init+0x1f0>)
 80046fe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	685a      	ldr	r2, [r3, #4]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	431a      	orrs	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	685a      	ldr	r2, [r3, #4]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004728:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	6859      	ldr	r1, [r3, #4]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	021a      	lsls	r2, r3, #8
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	430a      	orrs	r2, r1
 800473c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800474c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	6859      	ldr	r1, [r3, #4]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689a      	ldr	r2, [r3, #8]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	430a      	orrs	r2, r1
 800475e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	689a      	ldr	r2, [r3, #8]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800476e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6899      	ldr	r1, [r3, #8]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68da      	ldr	r2, [r3, #12]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	430a      	orrs	r2, r1
 8004780:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004786:	4a58      	ldr	r2, [pc, #352]	; (80048e8 <ADC_Init+0x1f4>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d022      	beq.n	80047d2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	689a      	ldr	r2, [r3, #8]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800479a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	6899      	ldr	r1, [r3, #8]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	430a      	orrs	r2, r1
 80047ac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	689a      	ldr	r2, [r3, #8]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80047bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	6899      	ldr	r1, [r3, #8]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	430a      	orrs	r2, r1
 80047ce:	609a      	str	r2, [r3, #8]
 80047d0:	e00f      	b.n	80047f2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	689a      	ldr	r2, [r3, #8]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80047e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	689a      	ldr	r2, [r3, #8]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80047f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	689a      	ldr	r2, [r3, #8]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f022 0202 	bic.w	r2, r2, #2
 8004800:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	6899      	ldr	r1, [r3, #8]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	7e1b      	ldrb	r3, [r3, #24]
 800480c:	005a      	lsls	r2, r3, #1
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	430a      	orrs	r2, r1
 8004814:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 3020 	ldrb.w	r3, [r3, #32]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d01b      	beq.n	8004858 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	685a      	ldr	r2, [r3, #4]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800482e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	685a      	ldr	r2, [r3, #4]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800483e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	6859      	ldr	r1, [r3, #4]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484a:	3b01      	subs	r3, #1
 800484c:	035a      	lsls	r2, r3, #13
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	430a      	orrs	r2, r1
 8004854:	605a      	str	r2, [r3, #4]
 8004856:	e007      	b.n	8004868 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	685a      	ldr	r2, [r3, #4]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004866:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004876:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	69db      	ldr	r3, [r3, #28]
 8004882:	3b01      	subs	r3, #1
 8004884:	051a      	lsls	r2, r3, #20
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	430a      	orrs	r2, r1
 800488c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	689a      	ldr	r2, [r3, #8]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800489c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	6899      	ldr	r1, [r3, #8]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80048aa:	025a      	lsls	r2, r3, #9
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	430a      	orrs	r2, r1
 80048b2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689a      	ldr	r2, [r3, #8]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	6899      	ldr	r1, [r3, #8]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	029a      	lsls	r2, r3, #10
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	430a      	orrs	r2, r1
 80048d6:	609a      	str	r2, [r3, #8]
}
 80048d8:	bf00      	nop
 80048da:	3714      	adds	r7, #20
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr
 80048e4:	40012300 	.word	0x40012300
 80048e8:	0f000001 	.word	0x0f000001

080048ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f003 0307 	and.w	r3, r3, #7
 80048fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048fc:	4b0c      	ldr	r3, [pc, #48]	; (8004930 <__NVIC_SetPriorityGrouping+0x44>)
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004908:	4013      	ands	r3, r2
 800490a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004914:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800491c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800491e:	4a04      	ldr	r2, [pc, #16]	; (8004930 <__NVIC_SetPriorityGrouping+0x44>)
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	60d3      	str	r3, [r2, #12]
}
 8004924:	bf00      	nop
 8004926:	3714      	adds	r7, #20
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr
 8004930:	e000ed00 	.word	0xe000ed00

08004934 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004934:	b480      	push	{r7}
 8004936:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004938:	4b04      	ldr	r3, [pc, #16]	; (800494c <__NVIC_GetPriorityGrouping+0x18>)
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	0a1b      	lsrs	r3, r3, #8
 800493e:	f003 0307 	and.w	r3, r3, #7
}
 8004942:	4618      	mov	r0, r3
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr
 800494c:	e000ed00 	.word	0xe000ed00

08004950 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	4603      	mov	r3, r0
 8004958:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800495a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800495e:	2b00      	cmp	r3, #0
 8004960:	db0b      	blt.n	800497a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004962:	79fb      	ldrb	r3, [r7, #7]
 8004964:	f003 021f 	and.w	r2, r3, #31
 8004968:	4907      	ldr	r1, [pc, #28]	; (8004988 <__NVIC_EnableIRQ+0x38>)
 800496a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800496e:	095b      	lsrs	r3, r3, #5
 8004970:	2001      	movs	r0, #1
 8004972:	fa00 f202 	lsl.w	r2, r0, r2
 8004976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800497a:	bf00      	nop
 800497c:	370c      	adds	r7, #12
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	e000e100 	.word	0xe000e100

0800498c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	4603      	mov	r3, r0
 8004994:	6039      	str	r1, [r7, #0]
 8004996:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800499c:	2b00      	cmp	r3, #0
 800499e:	db0a      	blt.n	80049b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	b2da      	uxtb	r2, r3
 80049a4:	490c      	ldr	r1, [pc, #48]	; (80049d8 <__NVIC_SetPriority+0x4c>)
 80049a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049aa:	0112      	lsls	r2, r2, #4
 80049ac:	b2d2      	uxtb	r2, r2
 80049ae:	440b      	add	r3, r1
 80049b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80049b4:	e00a      	b.n	80049cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	b2da      	uxtb	r2, r3
 80049ba:	4908      	ldr	r1, [pc, #32]	; (80049dc <__NVIC_SetPriority+0x50>)
 80049bc:	79fb      	ldrb	r3, [r7, #7]
 80049be:	f003 030f 	and.w	r3, r3, #15
 80049c2:	3b04      	subs	r3, #4
 80049c4:	0112      	lsls	r2, r2, #4
 80049c6:	b2d2      	uxtb	r2, r2
 80049c8:	440b      	add	r3, r1
 80049ca:	761a      	strb	r2, [r3, #24]
}
 80049cc:	bf00      	nop
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr
 80049d8:	e000e100 	.word	0xe000e100
 80049dc:	e000ed00 	.word	0xe000ed00

080049e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b089      	sub	sp, #36	; 0x24
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f003 0307 	and.w	r3, r3, #7
 80049f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	f1c3 0307 	rsb	r3, r3, #7
 80049fa:	2b04      	cmp	r3, #4
 80049fc:	bf28      	it	cs
 80049fe:	2304      	movcs	r3, #4
 8004a00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	3304      	adds	r3, #4
 8004a06:	2b06      	cmp	r3, #6
 8004a08:	d902      	bls.n	8004a10 <NVIC_EncodePriority+0x30>
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	3b03      	subs	r3, #3
 8004a0e:	e000      	b.n	8004a12 <NVIC_EncodePriority+0x32>
 8004a10:	2300      	movs	r3, #0
 8004a12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a14:	f04f 32ff 	mov.w	r2, #4294967295
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1e:	43da      	mvns	r2, r3
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	401a      	ands	r2, r3
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a28:	f04f 31ff 	mov.w	r1, #4294967295
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a32:	43d9      	mvns	r1, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a38:	4313      	orrs	r3, r2
         );
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3724      	adds	r7, #36	; 0x24
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
	...

08004a48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	3b01      	subs	r3, #1
 8004a54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a58:	d301      	bcc.n	8004a5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e00f      	b.n	8004a7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a5e:	4a0a      	ldr	r2, [pc, #40]	; (8004a88 <SysTick_Config+0x40>)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	3b01      	subs	r3, #1
 8004a64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a66:	210f      	movs	r1, #15
 8004a68:	f04f 30ff 	mov.w	r0, #4294967295
 8004a6c:	f7ff ff8e 	bl	800498c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a70:	4b05      	ldr	r3, [pc, #20]	; (8004a88 <SysTick_Config+0x40>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a76:	4b04      	ldr	r3, [pc, #16]	; (8004a88 <SysTick_Config+0x40>)
 8004a78:	2207      	movs	r2, #7
 8004a7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3708      	adds	r7, #8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	e000e010 	.word	0xe000e010

08004a8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f7ff ff29 	bl	80048ec <__NVIC_SetPriorityGrouping>
}
 8004a9a:	bf00      	nop
 8004a9c:	3708      	adds	r7, #8
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}

08004aa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b086      	sub	sp, #24
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	60b9      	str	r1, [r7, #8]
 8004aac:	607a      	str	r2, [r7, #4]
 8004aae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004ab4:	f7ff ff3e 	bl	8004934 <__NVIC_GetPriorityGrouping>
 8004ab8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	68b9      	ldr	r1, [r7, #8]
 8004abe:	6978      	ldr	r0, [r7, #20]
 8004ac0:	f7ff ff8e 	bl	80049e0 <NVIC_EncodePriority>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004aca:	4611      	mov	r1, r2
 8004acc:	4618      	mov	r0, r3
 8004ace:	f7ff ff5d 	bl	800498c <__NVIC_SetPriority>
}
 8004ad2:	bf00      	nop
 8004ad4:	3718      	adds	r7, #24
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b082      	sub	sp, #8
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7ff ff31 	bl	8004950 <__NVIC_EnableIRQ>
}
 8004aee:	bf00      	nop
 8004af0:	3708      	adds	r7, #8
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b082      	sub	sp, #8
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f7ff ffa2 	bl	8004a48 <SysTick_Config>
 8004b04:	4603      	mov	r3, r0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3708      	adds	r7, #8
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b084      	sub	sp, #16
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b1a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004b1c:	f7ff fac4 	bl	80040a8 <HAL_GetTick>
 8004b20:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d008      	beq.n	8004b40 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2280      	movs	r2, #128	; 0x80
 8004b32:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e052      	b.n	8004be6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f022 0216 	bic.w	r2, r2, #22
 8004b4e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	695a      	ldr	r2, [r3, #20]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b5e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d103      	bne.n	8004b70 <HAL_DMA_Abort+0x62>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d007      	beq.n	8004b80 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f022 0208 	bic.w	r2, r2, #8
 8004b7e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f022 0201 	bic.w	r2, r2, #1
 8004b8e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b90:	e013      	b.n	8004bba <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b92:	f7ff fa89 	bl	80040a8 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	2b05      	cmp	r3, #5
 8004b9e:	d90c      	bls.n	8004bba <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2203      	movs	r2, #3
 8004baa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e015      	b.n	8004be6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0301 	and.w	r3, r3, #1
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1e4      	bne.n	8004b92 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bcc:	223f      	movs	r2, #63	; 0x3f
 8004bce:	409a      	lsls	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004bee:	b480      	push	{r7}
 8004bf0:	b083      	sub	sp, #12
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d004      	beq.n	8004c0c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2280      	movs	r2, #128	; 0x80
 8004c06:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e00c      	b.n	8004c26 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2205      	movs	r2, #5
 8004c10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f022 0201 	bic.w	r2, r2, #1
 8004c22:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	370c      	adds	r7, #12
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
	...

08004c34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b089      	sub	sp, #36	; 0x24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004c42:	2300      	movs	r3, #0
 8004c44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004c46:	2300      	movs	r3, #0
 8004c48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	61fb      	str	r3, [r7, #28]
 8004c4e:	e159      	b.n	8004f04 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c50:	2201      	movs	r2, #1
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	fa02 f303 	lsl.w	r3, r2, r3
 8004c58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	4013      	ands	r3, r2
 8004c62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	f040 8148 	bne.w	8004efe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f003 0303 	and.w	r3, r3, #3
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d005      	beq.n	8004c86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d130      	bne.n	8004ce8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	005b      	lsls	r3, r3, #1
 8004c90:	2203      	movs	r2, #3
 8004c92:	fa02 f303 	lsl.w	r3, r2, r3
 8004c96:	43db      	mvns	r3, r3
 8004c98:	69ba      	ldr	r2, [r7, #24]
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	68da      	ldr	r2, [r3, #12]
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	005b      	lsls	r3, r3, #1
 8004ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8004caa:	69ba      	ldr	r2, [r7, #24]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	69ba      	ldr	r2, [r7, #24]
 8004cb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc4:	43db      	mvns	r3, r3
 8004cc6:	69ba      	ldr	r2, [r7, #24]
 8004cc8:	4013      	ands	r3, r2
 8004cca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	091b      	lsrs	r3, r3, #4
 8004cd2:	f003 0201 	and.w	r2, r3, #1
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cdc:	69ba      	ldr	r2, [r7, #24]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f003 0303 	and.w	r3, r3, #3
 8004cf0:	2b03      	cmp	r3, #3
 8004cf2:	d017      	beq.n	8004d24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	005b      	lsls	r3, r3, #1
 8004cfe:	2203      	movs	r2, #3
 8004d00:	fa02 f303 	lsl.w	r3, r2, r3
 8004d04:	43db      	mvns	r3, r3
 8004d06:	69ba      	ldr	r2, [r7, #24]
 8004d08:	4013      	ands	r3, r2
 8004d0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	689a      	ldr	r2, [r3, #8]
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	005b      	lsls	r3, r3, #1
 8004d14:	fa02 f303 	lsl.w	r3, r2, r3
 8004d18:	69ba      	ldr	r2, [r7, #24]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	69ba      	ldr	r2, [r7, #24]
 8004d22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f003 0303 	and.w	r3, r3, #3
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d123      	bne.n	8004d78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	08da      	lsrs	r2, r3, #3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	3208      	adds	r2, #8
 8004d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	f003 0307 	and.w	r3, r3, #7
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	220f      	movs	r2, #15
 8004d48:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4c:	43db      	mvns	r3, r3
 8004d4e:	69ba      	ldr	r2, [r7, #24]
 8004d50:	4013      	ands	r3, r2
 8004d52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	691a      	ldr	r2, [r3, #16]
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	f003 0307 	and.w	r3, r3, #7
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	fa02 f303 	lsl.w	r3, r2, r3
 8004d64:	69ba      	ldr	r2, [r7, #24]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	08da      	lsrs	r2, r3, #3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	3208      	adds	r2, #8
 8004d72:	69b9      	ldr	r1, [r7, #24]
 8004d74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	005b      	lsls	r3, r3, #1
 8004d82:	2203      	movs	r2, #3
 8004d84:	fa02 f303 	lsl.w	r3, r2, r3
 8004d88:	43db      	mvns	r3, r3
 8004d8a:	69ba      	ldr	r2, [r7, #24]
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f003 0203 	and.w	r2, r3, #3
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	005b      	lsls	r3, r3, #1
 8004d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	69ba      	ldr	r2, [r7, #24]
 8004daa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f000 80a2 	beq.w	8004efe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dba:	2300      	movs	r3, #0
 8004dbc:	60fb      	str	r3, [r7, #12]
 8004dbe:	4b57      	ldr	r3, [pc, #348]	; (8004f1c <HAL_GPIO_Init+0x2e8>)
 8004dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc2:	4a56      	ldr	r2, [pc, #344]	; (8004f1c <HAL_GPIO_Init+0x2e8>)
 8004dc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8004dca:	4b54      	ldr	r3, [pc, #336]	; (8004f1c <HAL_GPIO_Init+0x2e8>)
 8004dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dd2:	60fb      	str	r3, [r7, #12]
 8004dd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004dd6:	4a52      	ldr	r2, [pc, #328]	; (8004f20 <HAL_GPIO_Init+0x2ec>)
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	089b      	lsrs	r3, r3, #2
 8004ddc:	3302      	adds	r3, #2
 8004dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	f003 0303 	and.w	r3, r3, #3
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	220f      	movs	r2, #15
 8004dee:	fa02 f303 	lsl.w	r3, r2, r3
 8004df2:	43db      	mvns	r3, r3
 8004df4:	69ba      	ldr	r2, [r7, #24]
 8004df6:	4013      	ands	r3, r2
 8004df8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a49      	ldr	r2, [pc, #292]	; (8004f24 <HAL_GPIO_Init+0x2f0>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d019      	beq.n	8004e36 <HAL_GPIO_Init+0x202>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a48      	ldr	r2, [pc, #288]	; (8004f28 <HAL_GPIO_Init+0x2f4>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d013      	beq.n	8004e32 <HAL_GPIO_Init+0x1fe>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a47      	ldr	r2, [pc, #284]	; (8004f2c <HAL_GPIO_Init+0x2f8>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d00d      	beq.n	8004e2e <HAL_GPIO_Init+0x1fa>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a46      	ldr	r2, [pc, #280]	; (8004f30 <HAL_GPIO_Init+0x2fc>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d007      	beq.n	8004e2a <HAL_GPIO_Init+0x1f6>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a45      	ldr	r2, [pc, #276]	; (8004f34 <HAL_GPIO_Init+0x300>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d101      	bne.n	8004e26 <HAL_GPIO_Init+0x1f2>
 8004e22:	2304      	movs	r3, #4
 8004e24:	e008      	b.n	8004e38 <HAL_GPIO_Init+0x204>
 8004e26:	2307      	movs	r3, #7
 8004e28:	e006      	b.n	8004e38 <HAL_GPIO_Init+0x204>
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e004      	b.n	8004e38 <HAL_GPIO_Init+0x204>
 8004e2e:	2302      	movs	r3, #2
 8004e30:	e002      	b.n	8004e38 <HAL_GPIO_Init+0x204>
 8004e32:	2301      	movs	r3, #1
 8004e34:	e000      	b.n	8004e38 <HAL_GPIO_Init+0x204>
 8004e36:	2300      	movs	r3, #0
 8004e38:	69fa      	ldr	r2, [r7, #28]
 8004e3a:	f002 0203 	and.w	r2, r2, #3
 8004e3e:	0092      	lsls	r2, r2, #2
 8004e40:	4093      	lsls	r3, r2
 8004e42:	69ba      	ldr	r2, [r7, #24]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e48:	4935      	ldr	r1, [pc, #212]	; (8004f20 <HAL_GPIO_Init+0x2ec>)
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	089b      	lsrs	r3, r3, #2
 8004e4e:	3302      	adds	r3, #2
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e56:	4b38      	ldr	r3, [pc, #224]	; (8004f38 <HAL_GPIO_Init+0x304>)
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	43db      	mvns	r3, r3
 8004e60:	69ba      	ldr	r2, [r7, #24]
 8004e62:	4013      	ands	r3, r2
 8004e64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d003      	beq.n	8004e7a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004e72:	69ba      	ldr	r2, [r7, #24]
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004e7a:	4a2f      	ldr	r2, [pc, #188]	; (8004f38 <HAL_GPIO_Init+0x304>)
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e80:	4b2d      	ldr	r3, [pc, #180]	; (8004f38 <HAL_GPIO_Init+0x304>)
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	43db      	mvns	r3, r3
 8004e8a:	69ba      	ldr	r2, [r7, #24]
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d003      	beq.n	8004ea4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004e9c:	69ba      	ldr	r2, [r7, #24]
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ea4:	4a24      	ldr	r2, [pc, #144]	; (8004f38 <HAL_GPIO_Init+0x304>)
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004eaa:	4b23      	ldr	r3, [pc, #140]	; (8004f38 <HAL_GPIO_Init+0x304>)
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	43db      	mvns	r3, r3
 8004eb4:	69ba      	ldr	r2, [r7, #24]
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d003      	beq.n	8004ece <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004ec6:	69ba      	ldr	r2, [r7, #24]
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ece:	4a1a      	ldr	r2, [pc, #104]	; (8004f38 <HAL_GPIO_Init+0x304>)
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ed4:	4b18      	ldr	r3, [pc, #96]	; (8004f38 <HAL_GPIO_Init+0x304>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	43db      	mvns	r3, r3
 8004ede:	69ba      	ldr	r2, [r7, #24]
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d003      	beq.n	8004ef8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004ef0:	69ba      	ldr	r2, [r7, #24]
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004ef8:	4a0f      	ldr	r2, [pc, #60]	; (8004f38 <HAL_GPIO_Init+0x304>)
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	3301      	adds	r3, #1
 8004f02:	61fb      	str	r3, [r7, #28]
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	2b0f      	cmp	r3, #15
 8004f08:	f67f aea2 	bls.w	8004c50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004f0c:	bf00      	nop
 8004f0e:	bf00      	nop
 8004f10:	3724      	adds	r7, #36	; 0x24
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	40023800 	.word	0x40023800
 8004f20:	40013800 	.word	0x40013800
 8004f24:	40020000 	.word	0x40020000
 8004f28:	40020400 	.word	0x40020400
 8004f2c:	40020800 	.word	0x40020800
 8004f30:	40020c00 	.word	0x40020c00
 8004f34:	40021000 	.word	0x40021000
 8004f38:	40013c00 	.word	0x40013c00

08004f3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	460b      	mov	r3, r1
 8004f46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	691a      	ldr	r2, [r3, #16]
 8004f4c:	887b      	ldrh	r3, [r7, #2]
 8004f4e:	4013      	ands	r3, r2
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d002      	beq.n	8004f5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004f54:	2301      	movs	r3, #1
 8004f56:	73fb      	strb	r3, [r7, #15]
 8004f58:	e001      	b.n	8004f5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3714      	adds	r7, #20
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	460b      	mov	r3, r1
 8004f76:	807b      	strh	r3, [r7, #2]
 8004f78:	4613      	mov	r3, r2
 8004f7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f7c:	787b      	ldrb	r3, [r7, #1]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d003      	beq.n	8004f8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f82:	887a      	ldrh	r2, [r7, #2]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004f88:	e003      	b.n	8004f92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004f8a:	887b      	ldrh	r3, [r7, #2]
 8004f8c:	041a      	lsls	r2, r3, #16
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	619a      	str	r2, [r3, #24]
}
 8004f92:	bf00      	nop
 8004f94:	370c      	adds	r7, #12
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr

08004f9e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b085      	sub	sp, #20
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004fb0:	887a      	ldrh	r2, [r7, #2]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	041a      	lsls	r2, r3, #16
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	43d9      	mvns	r1, r3
 8004fbc:	887b      	ldrh	r3, [r7, #2]
 8004fbe:	400b      	ands	r3, r1
 8004fc0:	431a      	orrs	r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	619a      	str	r2, [r3, #24]
}
 8004fc6:	bf00      	nop
 8004fc8:	3714      	adds	r7, #20
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
	...

08004fd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	4603      	mov	r3, r0
 8004fdc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004fde:	4b08      	ldr	r3, [pc, #32]	; (8005000 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004fe0:	695a      	ldr	r2, [r3, #20]
 8004fe2:	88fb      	ldrh	r3, [r7, #6]
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d006      	beq.n	8004ff8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004fea:	4a05      	ldr	r2, [pc, #20]	; (8005000 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004fec:	88fb      	ldrh	r3, [r7, #6]
 8004fee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ff0:	88fb      	ldrh	r3, [r7, #6]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f000 f806 	bl	8005004 <HAL_GPIO_EXTI_Callback>
  }
}
 8004ff8:	bf00      	nop
 8004ffa:	3708      	adds	r7, #8
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	40013c00 	.word	0x40013c00

08005004 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	4603      	mov	r3, r0
 800500c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800500e:	bf00      	nop
 8005010:	370c      	adds	r7, #12
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
	...

0800501c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e267      	b.n	80054fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	2b00      	cmp	r3, #0
 8005038:	d075      	beq.n	8005126 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800503a:	4b88      	ldr	r3, [pc, #544]	; (800525c <HAL_RCC_OscConfig+0x240>)
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f003 030c 	and.w	r3, r3, #12
 8005042:	2b04      	cmp	r3, #4
 8005044:	d00c      	beq.n	8005060 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005046:	4b85      	ldr	r3, [pc, #532]	; (800525c <HAL_RCC_OscConfig+0x240>)
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800504e:	2b08      	cmp	r3, #8
 8005050:	d112      	bne.n	8005078 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005052:	4b82      	ldr	r3, [pc, #520]	; (800525c <HAL_RCC_OscConfig+0x240>)
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800505a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800505e:	d10b      	bne.n	8005078 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005060:	4b7e      	ldr	r3, [pc, #504]	; (800525c <HAL_RCC_OscConfig+0x240>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d05b      	beq.n	8005124 <HAL_RCC_OscConfig+0x108>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d157      	bne.n	8005124 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e242      	b.n	80054fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005080:	d106      	bne.n	8005090 <HAL_RCC_OscConfig+0x74>
 8005082:	4b76      	ldr	r3, [pc, #472]	; (800525c <HAL_RCC_OscConfig+0x240>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a75      	ldr	r2, [pc, #468]	; (800525c <HAL_RCC_OscConfig+0x240>)
 8005088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800508c:	6013      	str	r3, [r2, #0]
 800508e:	e01d      	b.n	80050cc <HAL_RCC_OscConfig+0xb0>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005098:	d10c      	bne.n	80050b4 <HAL_RCC_OscConfig+0x98>
 800509a:	4b70      	ldr	r3, [pc, #448]	; (800525c <HAL_RCC_OscConfig+0x240>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a6f      	ldr	r2, [pc, #444]	; (800525c <HAL_RCC_OscConfig+0x240>)
 80050a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050a4:	6013      	str	r3, [r2, #0]
 80050a6:	4b6d      	ldr	r3, [pc, #436]	; (800525c <HAL_RCC_OscConfig+0x240>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a6c      	ldr	r2, [pc, #432]	; (800525c <HAL_RCC_OscConfig+0x240>)
 80050ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050b0:	6013      	str	r3, [r2, #0]
 80050b2:	e00b      	b.n	80050cc <HAL_RCC_OscConfig+0xb0>
 80050b4:	4b69      	ldr	r3, [pc, #420]	; (800525c <HAL_RCC_OscConfig+0x240>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a68      	ldr	r2, [pc, #416]	; (800525c <HAL_RCC_OscConfig+0x240>)
 80050ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050be:	6013      	str	r3, [r2, #0]
 80050c0:	4b66      	ldr	r3, [pc, #408]	; (800525c <HAL_RCC_OscConfig+0x240>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a65      	ldr	r2, [pc, #404]	; (800525c <HAL_RCC_OscConfig+0x240>)
 80050c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d013      	beq.n	80050fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050d4:	f7fe ffe8 	bl	80040a8 <HAL_GetTick>
 80050d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050da:	e008      	b.n	80050ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050dc:	f7fe ffe4 	bl	80040a8 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	2b64      	cmp	r3, #100	; 0x64
 80050e8:	d901      	bls.n	80050ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e207      	b.n	80054fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ee:	4b5b      	ldr	r3, [pc, #364]	; (800525c <HAL_RCC_OscConfig+0x240>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d0f0      	beq.n	80050dc <HAL_RCC_OscConfig+0xc0>
 80050fa:	e014      	b.n	8005126 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050fc:	f7fe ffd4 	bl	80040a8 <HAL_GetTick>
 8005100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005102:	e008      	b.n	8005116 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005104:	f7fe ffd0 	bl	80040a8 <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	2b64      	cmp	r3, #100	; 0x64
 8005110:	d901      	bls.n	8005116 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e1f3      	b.n	80054fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005116:	4b51      	ldr	r3, [pc, #324]	; (800525c <HAL_RCC_OscConfig+0x240>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1f0      	bne.n	8005104 <HAL_RCC_OscConfig+0xe8>
 8005122:	e000      	b.n	8005126 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005124:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0302 	and.w	r3, r3, #2
 800512e:	2b00      	cmp	r3, #0
 8005130:	d063      	beq.n	80051fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005132:	4b4a      	ldr	r3, [pc, #296]	; (800525c <HAL_RCC_OscConfig+0x240>)
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f003 030c 	and.w	r3, r3, #12
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00b      	beq.n	8005156 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800513e:	4b47      	ldr	r3, [pc, #284]	; (800525c <HAL_RCC_OscConfig+0x240>)
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005146:	2b08      	cmp	r3, #8
 8005148:	d11c      	bne.n	8005184 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800514a:	4b44      	ldr	r3, [pc, #272]	; (800525c <HAL_RCC_OscConfig+0x240>)
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d116      	bne.n	8005184 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005156:	4b41      	ldr	r3, [pc, #260]	; (800525c <HAL_RCC_OscConfig+0x240>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0302 	and.w	r3, r3, #2
 800515e:	2b00      	cmp	r3, #0
 8005160:	d005      	beq.n	800516e <HAL_RCC_OscConfig+0x152>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d001      	beq.n	800516e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e1c7      	b.n	80054fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800516e:	4b3b      	ldr	r3, [pc, #236]	; (800525c <HAL_RCC_OscConfig+0x240>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	00db      	lsls	r3, r3, #3
 800517c:	4937      	ldr	r1, [pc, #220]	; (800525c <HAL_RCC_OscConfig+0x240>)
 800517e:	4313      	orrs	r3, r2
 8005180:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005182:	e03a      	b.n	80051fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d020      	beq.n	80051ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800518c:	4b34      	ldr	r3, [pc, #208]	; (8005260 <HAL_RCC_OscConfig+0x244>)
 800518e:	2201      	movs	r2, #1
 8005190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005192:	f7fe ff89 	bl	80040a8 <HAL_GetTick>
 8005196:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005198:	e008      	b.n	80051ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800519a:	f7fe ff85 	bl	80040a8 <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d901      	bls.n	80051ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e1a8      	b.n	80054fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051ac:	4b2b      	ldr	r3, [pc, #172]	; (800525c <HAL_RCC_OscConfig+0x240>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0302 	and.w	r3, r3, #2
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d0f0      	beq.n	800519a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051b8:	4b28      	ldr	r3, [pc, #160]	; (800525c <HAL_RCC_OscConfig+0x240>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	00db      	lsls	r3, r3, #3
 80051c6:	4925      	ldr	r1, [pc, #148]	; (800525c <HAL_RCC_OscConfig+0x240>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	600b      	str	r3, [r1, #0]
 80051cc:	e015      	b.n	80051fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051ce:	4b24      	ldr	r3, [pc, #144]	; (8005260 <HAL_RCC_OscConfig+0x244>)
 80051d0:	2200      	movs	r2, #0
 80051d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d4:	f7fe ff68 	bl	80040a8 <HAL_GetTick>
 80051d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051da:	e008      	b.n	80051ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051dc:	f7fe ff64 	bl	80040a8 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d901      	bls.n	80051ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e187      	b.n	80054fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051ee:	4b1b      	ldr	r3, [pc, #108]	; (800525c <HAL_RCC_OscConfig+0x240>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0302 	and.w	r3, r3, #2
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1f0      	bne.n	80051dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0308 	and.w	r3, r3, #8
 8005202:	2b00      	cmp	r3, #0
 8005204:	d036      	beq.n	8005274 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d016      	beq.n	800523c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800520e:	4b15      	ldr	r3, [pc, #84]	; (8005264 <HAL_RCC_OscConfig+0x248>)
 8005210:	2201      	movs	r2, #1
 8005212:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005214:	f7fe ff48 	bl	80040a8 <HAL_GetTick>
 8005218:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800521a:	e008      	b.n	800522e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800521c:	f7fe ff44 	bl	80040a8 <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	2b02      	cmp	r3, #2
 8005228:	d901      	bls.n	800522e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e167      	b.n	80054fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800522e:	4b0b      	ldr	r3, [pc, #44]	; (800525c <HAL_RCC_OscConfig+0x240>)
 8005230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005232:	f003 0302 	and.w	r3, r3, #2
 8005236:	2b00      	cmp	r3, #0
 8005238:	d0f0      	beq.n	800521c <HAL_RCC_OscConfig+0x200>
 800523a:	e01b      	b.n	8005274 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800523c:	4b09      	ldr	r3, [pc, #36]	; (8005264 <HAL_RCC_OscConfig+0x248>)
 800523e:	2200      	movs	r2, #0
 8005240:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005242:	f7fe ff31 	bl	80040a8 <HAL_GetTick>
 8005246:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005248:	e00e      	b.n	8005268 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800524a:	f7fe ff2d 	bl	80040a8 <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	2b02      	cmp	r3, #2
 8005256:	d907      	bls.n	8005268 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e150      	b.n	80054fe <HAL_RCC_OscConfig+0x4e2>
 800525c:	40023800 	.word	0x40023800
 8005260:	42470000 	.word	0x42470000
 8005264:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005268:	4b88      	ldr	r3, [pc, #544]	; (800548c <HAL_RCC_OscConfig+0x470>)
 800526a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800526c:	f003 0302 	and.w	r3, r3, #2
 8005270:	2b00      	cmp	r3, #0
 8005272:	d1ea      	bne.n	800524a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0304 	and.w	r3, r3, #4
 800527c:	2b00      	cmp	r3, #0
 800527e:	f000 8097 	beq.w	80053b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005282:	2300      	movs	r3, #0
 8005284:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005286:	4b81      	ldr	r3, [pc, #516]	; (800548c <HAL_RCC_OscConfig+0x470>)
 8005288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d10f      	bne.n	80052b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005292:	2300      	movs	r3, #0
 8005294:	60bb      	str	r3, [r7, #8]
 8005296:	4b7d      	ldr	r3, [pc, #500]	; (800548c <HAL_RCC_OscConfig+0x470>)
 8005298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529a:	4a7c      	ldr	r2, [pc, #496]	; (800548c <HAL_RCC_OscConfig+0x470>)
 800529c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052a0:	6413      	str	r3, [r2, #64]	; 0x40
 80052a2:	4b7a      	ldr	r3, [pc, #488]	; (800548c <HAL_RCC_OscConfig+0x470>)
 80052a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052aa:	60bb      	str	r3, [r7, #8]
 80052ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052ae:	2301      	movs	r3, #1
 80052b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052b2:	4b77      	ldr	r3, [pc, #476]	; (8005490 <HAL_RCC_OscConfig+0x474>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d118      	bne.n	80052f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052be:	4b74      	ldr	r3, [pc, #464]	; (8005490 <HAL_RCC_OscConfig+0x474>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a73      	ldr	r2, [pc, #460]	; (8005490 <HAL_RCC_OscConfig+0x474>)
 80052c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052ca:	f7fe feed 	bl	80040a8 <HAL_GetTick>
 80052ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052d0:	e008      	b.n	80052e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052d2:	f7fe fee9 	bl	80040a8 <HAL_GetTick>
 80052d6:	4602      	mov	r2, r0
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d901      	bls.n	80052e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	e10c      	b.n	80054fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052e4:	4b6a      	ldr	r3, [pc, #424]	; (8005490 <HAL_RCC_OscConfig+0x474>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d0f0      	beq.n	80052d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d106      	bne.n	8005306 <HAL_RCC_OscConfig+0x2ea>
 80052f8:	4b64      	ldr	r3, [pc, #400]	; (800548c <HAL_RCC_OscConfig+0x470>)
 80052fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052fc:	4a63      	ldr	r2, [pc, #396]	; (800548c <HAL_RCC_OscConfig+0x470>)
 80052fe:	f043 0301 	orr.w	r3, r3, #1
 8005302:	6713      	str	r3, [r2, #112]	; 0x70
 8005304:	e01c      	b.n	8005340 <HAL_RCC_OscConfig+0x324>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	2b05      	cmp	r3, #5
 800530c:	d10c      	bne.n	8005328 <HAL_RCC_OscConfig+0x30c>
 800530e:	4b5f      	ldr	r3, [pc, #380]	; (800548c <HAL_RCC_OscConfig+0x470>)
 8005310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005312:	4a5e      	ldr	r2, [pc, #376]	; (800548c <HAL_RCC_OscConfig+0x470>)
 8005314:	f043 0304 	orr.w	r3, r3, #4
 8005318:	6713      	str	r3, [r2, #112]	; 0x70
 800531a:	4b5c      	ldr	r3, [pc, #368]	; (800548c <HAL_RCC_OscConfig+0x470>)
 800531c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800531e:	4a5b      	ldr	r2, [pc, #364]	; (800548c <HAL_RCC_OscConfig+0x470>)
 8005320:	f043 0301 	orr.w	r3, r3, #1
 8005324:	6713      	str	r3, [r2, #112]	; 0x70
 8005326:	e00b      	b.n	8005340 <HAL_RCC_OscConfig+0x324>
 8005328:	4b58      	ldr	r3, [pc, #352]	; (800548c <HAL_RCC_OscConfig+0x470>)
 800532a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800532c:	4a57      	ldr	r2, [pc, #348]	; (800548c <HAL_RCC_OscConfig+0x470>)
 800532e:	f023 0301 	bic.w	r3, r3, #1
 8005332:	6713      	str	r3, [r2, #112]	; 0x70
 8005334:	4b55      	ldr	r3, [pc, #340]	; (800548c <HAL_RCC_OscConfig+0x470>)
 8005336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005338:	4a54      	ldr	r2, [pc, #336]	; (800548c <HAL_RCC_OscConfig+0x470>)
 800533a:	f023 0304 	bic.w	r3, r3, #4
 800533e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d015      	beq.n	8005374 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005348:	f7fe feae 	bl	80040a8 <HAL_GetTick>
 800534c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800534e:	e00a      	b.n	8005366 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005350:	f7fe feaa 	bl	80040a8 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	f241 3288 	movw	r2, #5000	; 0x1388
 800535e:	4293      	cmp	r3, r2
 8005360:	d901      	bls.n	8005366 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e0cb      	b.n	80054fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005366:	4b49      	ldr	r3, [pc, #292]	; (800548c <HAL_RCC_OscConfig+0x470>)
 8005368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800536a:	f003 0302 	and.w	r3, r3, #2
 800536e:	2b00      	cmp	r3, #0
 8005370:	d0ee      	beq.n	8005350 <HAL_RCC_OscConfig+0x334>
 8005372:	e014      	b.n	800539e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005374:	f7fe fe98 	bl	80040a8 <HAL_GetTick>
 8005378:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800537a:	e00a      	b.n	8005392 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800537c:	f7fe fe94 	bl	80040a8 <HAL_GetTick>
 8005380:	4602      	mov	r2, r0
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	f241 3288 	movw	r2, #5000	; 0x1388
 800538a:	4293      	cmp	r3, r2
 800538c:	d901      	bls.n	8005392 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e0b5      	b.n	80054fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005392:	4b3e      	ldr	r3, [pc, #248]	; (800548c <HAL_RCC_OscConfig+0x470>)
 8005394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005396:	f003 0302 	and.w	r3, r3, #2
 800539a:	2b00      	cmp	r3, #0
 800539c:	d1ee      	bne.n	800537c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800539e:	7dfb      	ldrb	r3, [r7, #23]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d105      	bne.n	80053b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053a4:	4b39      	ldr	r3, [pc, #228]	; (800548c <HAL_RCC_OscConfig+0x470>)
 80053a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a8:	4a38      	ldr	r2, [pc, #224]	; (800548c <HAL_RCC_OscConfig+0x470>)
 80053aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f000 80a1 	beq.w	80054fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053ba:	4b34      	ldr	r3, [pc, #208]	; (800548c <HAL_RCC_OscConfig+0x470>)
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f003 030c 	and.w	r3, r3, #12
 80053c2:	2b08      	cmp	r3, #8
 80053c4:	d05c      	beq.n	8005480 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d141      	bne.n	8005452 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053ce:	4b31      	ldr	r3, [pc, #196]	; (8005494 <HAL_RCC_OscConfig+0x478>)
 80053d0:	2200      	movs	r2, #0
 80053d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053d4:	f7fe fe68 	bl	80040a8 <HAL_GetTick>
 80053d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053da:	e008      	b.n	80053ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053dc:	f7fe fe64 	bl	80040a8 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e087      	b.n	80054fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ee:	4b27      	ldr	r3, [pc, #156]	; (800548c <HAL_RCC_OscConfig+0x470>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1f0      	bne.n	80053dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	69da      	ldr	r2, [r3, #28]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	431a      	orrs	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005408:	019b      	lsls	r3, r3, #6
 800540a:	431a      	orrs	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005410:	085b      	lsrs	r3, r3, #1
 8005412:	3b01      	subs	r3, #1
 8005414:	041b      	lsls	r3, r3, #16
 8005416:	431a      	orrs	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541c:	061b      	lsls	r3, r3, #24
 800541e:	491b      	ldr	r1, [pc, #108]	; (800548c <HAL_RCC_OscConfig+0x470>)
 8005420:	4313      	orrs	r3, r2
 8005422:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005424:	4b1b      	ldr	r3, [pc, #108]	; (8005494 <HAL_RCC_OscConfig+0x478>)
 8005426:	2201      	movs	r2, #1
 8005428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800542a:	f7fe fe3d 	bl	80040a8 <HAL_GetTick>
 800542e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005430:	e008      	b.n	8005444 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005432:	f7fe fe39 	bl	80040a8 <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	2b02      	cmp	r3, #2
 800543e:	d901      	bls.n	8005444 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	e05c      	b.n	80054fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005444:	4b11      	ldr	r3, [pc, #68]	; (800548c <HAL_RCC_OscConfig+0x470>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800544c:	2b00      	cmp	r3, #0
 800544e:	d0f0      	beq.n	8005432 <HAL_RCC_OscConfig+0x416>
 8005450:	e054      	b.n	80054fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005452:	4b10      	ldr	r3, [pc, #64]	; (8005494 <HAL_RCC_OscConfig+0x478>)
 8005454:	2200      	movs	r2, #0
 8005456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005458:	f7fe fe26 	bl	80040a8 <HAL_GetTick>
 800545c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800545e:	e008      	b.n	8005472 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005460:	f7fe fe22 	bl	80040a8 <HAL_GetTick>
 8005464:	4602      	mov	r2, r0
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	2b02      	cmp	r3, #2
 800546c:	d901      	bls.n	8005472 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e045      	b.n	80054fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005472:	4b06      	ldr	r3, [pc, #24]	; (800548c <HAL_RCC_OscConfig+0x470>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d1f0      	bne.n	8005460 <HAL_RCC_OscConfig+0x444>
 800547e:	e03d      	b.n	80054fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	2b01      	cmp	r3, #1
 8005486:	d107      	bne.n	8005498 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e038      	b.n	80054fe <HAL_RCC_OscConfig+0x4e2>
 800548c:	40023800 	.word	0x40023800
 8005490:	40007000 	.word	0x40007000
 8005494:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005498:	4b1b      	ldr	r3, [pc, #108]	; (8005508 <HAL_RCC_OscConfig+0x4ec>)
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d028      	beq.n	80054f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d121      	bne.n	80054f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054be:	429a      	cmp	r2, r3
 80054c0:	d11a      	bne.n	80054f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80054c8:	4013      	ands	r3, r2
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80054ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d111      	bne.n	80054f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054de:	085b      	lsrs	r3, r3, #1
 80054e0:	3b01      	subs	r3, #1
 80054e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d107      	bne.n	80054f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d001      	beq.n	80054fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e000      	b.n	80054fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3718      	adds	r7, #24
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	40023800 	.word	0x40023800

0800550c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d101      	bne.n	8005520 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e0cc      	b.n	80056ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005520:	4b68      	ldr	r3, [pc, #416]	; (80056c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0307 	and.w	r3, r3, #7
 8005528:	683a      	ldr	r2, [r7, #0]
 800552a:	429a      	cmp	r2, r3
 800552c:	d90c      	bls.n	8005548 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800552e:	4b65      	ldr	r3, [pc, #404]	; (80056c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005530:	683a      	ldr	r2, [r7, #0]
 8005532:	b2d2      	uxtb	r2, r2
 8005534:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005536:	4b63      	ldr	r3, [pc, #396]	; (80056c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0307 	and.w	r3, r3, #7
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	429a      	cmp	r2, r3
 8005542:	d001      	beq.n	8005548 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e0b8      	b.n	80056ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0302 	and.w	r3, r3, #2
 8005550:	2b00      	cmp	r3, #0
 8005552:	d020      	beq.n	8005596 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0304 	and.w	r3, r3, #4
 800555c:	2b00      	cmp	r3, #0
 800555e:	d005      	beq.n	800556c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005560:	4b59      	ldr	r3, [pc, #356]	; (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	4a58      	ldr	r2, [pc, #352]	; (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005566:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800556a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0308 	and.w	r3, r3, #8
 8005574:	2b00      	cmp	r3, #0
 8005576:	d005      	beq.n	8005584 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005578:	4b53      	ldr	r3, [pc, #332]	; (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	4a52      	ldr	r2, [pc, #328]	; (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 800557e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005582:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005584:	4b50      	ldr	r3, [pc, #320]	; (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	494d      	ldr	r1, [pc, #308]	; (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005592:	4313      	orrs	r3, r2
 8005594:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d044      	beq.n	800562c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d107      	bne.n	80055ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055aa:	4b47      	ldr	r3, [pc, #284]	; (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d119      	bne.n	80055ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e07f      	b.n	80056ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d003      	beq.n	80055ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055c6:	2b03      	cmp	r3, #3
 80055c8:	d107      	bne.n	80055da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055ca:	4b3f      	ldr	r3, [pc, #252]	; (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d109      	bne.n	80055ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e06f      	b.n	80056ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055da:	4b3b      	ldr	r3, [pc, #236]	; (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0302 	and.w	r3, r3, #2
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d101      	bne.n	80055ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e067      	b.n	80056ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055ea:	4b37      	ldr	r3, [pc, #220]	; (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f023 0203 	bic.w	r2, r3, #3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	4934      	ldr	r1, [pc, #208]	; (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055fc:	f7fe fd54 	bl	80040a8 <HAL_GetTick>
 8005600:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005602:	e00a      	b.n	800561a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005604:	f7fe fd50 	bl	80040a8 <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005612:	4293      	cmp	r3, r2
 8005614:	d901      	bls.n	800561a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e04f      	b.n	80056ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800561a:	4b2b      	ldr	r3, [pc, #172]	; (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f003 020c 	and.w	r2, r3, #12
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	429a      	cmp	r2, r3
 800562a:	d1eb      	bne.n	8005604 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800562c:	4b25      	ldr	r3, [pc, #148]	; (80056c4 <HAL_RCC_ClockConfig+0x1b8>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0307 	and.w	r3, r3, #7
 8005634:	683a      	ldr	r2, [r7, #0]
 8005636:	429a      	cmp	r2, r3
 8005638:	d20c      	bcs.n	8005654 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800563a:	4b22      	ldr	r3, [pc, #136]	; (80056c4 <HAL_RCC_ClockConfig+0x1b8>)
 800563c:	683a      	ldr	r2, [r7, #0]
 800563e:	b2d2      	uxtb	r2, r2
 8005640:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005642:	4b20      	ldr	r3, [pc, #128]	; (80056c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0307 	and.w	r3, r3, #7
 800564a:	683a      	ldr	r2, [r7, #0]
 800564c:	429a      	cmp	r2, r3
 800564e:	d001      	beq.n	8005654 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e032      	b.n	80056ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0304 	and.w	r3, r3, #4
 800565c:	2b00      	cmp	r3, #0
 800565e:	d008      	beq.n	8005672 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005660:	4b19      	ldr	r3, [pc, #100]	; (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	4916      	ldr	r1, [pc, #88]	; (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 800566e:	4313      	orrs	r3, r2
 8005670:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0308 	and.w	r3, r3, #8
 800567a:	2b00      	cmp	r3, #0
 800567c:	d009      	beq.n	8005692 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800567e:	4b12      	ldr	r3, [pc, #72]	; (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	00db      	lsls	r3, r3, #3
 800568c:	490e      	ldr	r1, [pc, #56]	; (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 800568e:	4313      	orrs	r3, r2
 8005690:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005692:	f000 f821 	bl	80056d8 <HAL_RCC_GetSysClockFreq>
 8005696:	4602      	mov	r2, r0
 8005698:	4b0b      	ldr	r3, [pc, #44]	; (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	091b      	lsrs	r3, r3, #4
 800569e:	f003 030f 	and.w	r3, r3, #15
 80056a2:	490a      	ldr	r1, [pc, #40]	; (80056cc <HAL_RCC_ClockConfig+0x1c0>)
 80056a4:	5ccb      	ldrb	r3, [r1, r3]
 80056a6:	fa22 f303 	lsr.w	r3, r2, r3
 80056aa:	4a09      	ldr	r2, [pc, #36]	; (80056d0 <HAL_RCC_ClockConfig+0x1c4>)
 80056ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80056ae:	4b09      	ldr	r3, [pc, #36]	; (80056d4 <HAL_RCC_ClockConfig+0x1c8>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7fe fcb4 	bl	8004020 <HAL_InitTick>

  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	40023c00 	.word	0x40023c00
 80056c8:	40023800 	.word	0x40023800
 80056cc:	0800bc8c 	.word	0x0800bc8c
 80056d0:	20000034 	.word	0x20000034
 80056d4:	20000038 	.word	0x20000038

080056d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056dc:	b094      	sub	sp, #80	; 0x50
 80056de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80056e0:	2300      	movs	r3, #0
 80056e2:	647b      	str	r3, [r7, #68]	; 0x44
 80056e4:	2300      	movs	r3, #0
 80056e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056e8:	2300      	movs	r3, #0
 80056ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80056ec:	2300      	movs	r3, #0
 80056ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056f0:	4b79      	ldr	r3, [pc, #484]	; (80058d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	f003 030c 	and.w	r3, r3, #12
 80056f8:	2b08      	cmp	r3, #8
 80056fa:	d00d      	beq.n	8005718 <HAL_RCC_GetSysClockFreq+0x40>
 80056fc:	2b08      	cmp	r3, #8
 80056fe:	f200 80e1 	bhi.w	80058c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005702:	2b00      	cmp	r3, #0
 8005704:	d002      	beq.n	800570c <HAL_RCC_GetSysClockFreq+0x34>
 8005706:	2b04      	cmp	r3, #4
 8005708:	d003      	beq.n	8005712 <HAL_RCC_GetSysClockFreq+0x3a>
 800570a:	e0db      	b.n	80058c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800570c:	4b73      	ldr	r3, [pc, #460]	; (80058dc <HAL_RCC_GetSysClockFreq+0x204>)
 800570e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005710:	e0db      	b.n	80058ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005712:	4b73      	ldr	r3, [pc, #460]	; (80058e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8005714:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005716:	e0d8      	b.n	80058ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005718:	4b6f      	ldr	r3, [pc, #444]	; (80058d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005720:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005722:	4b6d      	ldr	r3, [pc, #436]	; (80058d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800572a:	2b00      	cmp	r3, #0
 800572c:	d063      	beq.n	80057f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800572e:	4b6a      	ldr	r3, [pc, #424]	; (80058d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	099b      	lsrs	r3, r3, #6
 8005734:	2200      	movs	r2, #0
 8005736:	63bb      	str	r3, [r7, #56]	; 0x38
 8005738:	63fa      	str	r2, [r7, #60]	; 0x3c
 800573a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800573c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005740:	633b      	str	r3, [r7, #48]	; 0x30
 8005742:	2300      	movs	r3, #0
 8005744:	637b      	str	r3, [r7, #52]	; 0x34
 8005746:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800574a:	4622      	mov	r2, r4
 800574c:	462b      	mov	r3, r5
 800574e:	f04f 0000 	mov.w	r0, #0
 8005752:	f04f 0100 	mov.w	r1, #0
 8005756:	0159      	lsls	r1, r3, #5
 8005758:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800575c:	0150      	lsls	r0, r2, #5
 800575e:	4602      	mov	r2, r0
 8005760:	460b      	mov	r3, r1
 8005762:	4621      	mov	r1, r4
 8005764:	1a51      	subs	r1, r2, r1
 8005766:	6139      	str	r1, [r7, #16]
 8005768:	4629      	mov	r1, r5
 800576a:	eb63 0301 	sbc.w	r3, r3, r1
 800576e:	617b      	str	r3, [r7, #20]
 8005770:	f04f 0200 	mov.w	r2, #0
 8005774:	f04f 0300 	mov.w	r3, #0
 8005778:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800577c:	4659      	mov	r1, fp
 800577e:	018b      	lsls	r3, r1, #6
 8005780:	4651      	mov	r1, sl
 8005782:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005786:	4651      	mov	r1, sl
 8005788:	018a      	lsls	r2, r1, #6
 800578a:	4651      	mov	r1, sl
 800578c:	ebb2 0801 	subs.w	r8, r2, r1
 8005790:	4659      	mov	r1, fp
 8005792:	eb63 0901 	sbc.w	r9, r3, r1
 8005796:	f04f 0200 	mov.w	r2, #0
 800579a:	f04f 0300 	mov.w	r3, #0
 800579e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057aa:	4690      	mov	r8, r2
 80057ac:	4699      	mov	r9, r3
 80057ae:	4623      	mov	r3, r4
 80057b0:	eb18 0303 	adds.w	r3, r8, r3
 80057b4:	60bb      	str	r3, [r7, #8]
 80057b6:	462b      	mov	r3, r5
 80057b8:	eb49 0303 	adc.w	r3, r9, r3
 80057bc:	60fb      	str	r3, [r7, #12]
 80057be:	f04f 0200 	mov.w	r2, #0
 80057c2:	f04f 0300 	mov.w	r3, #0
 80057c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80057ca:	4629      	mov	r1, r5
 80057cc:	024b      	lsls	r3, r1, #9
 80057ce:	4621      	mov	r1, r4
 80057d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80057d4:	4621      	mov	r1, r4
 80057d6:	024a      	lsls	r2, r1, #9
 80057d8:	4610      	mov	r0, r2
 80057da:	4619      	mov	r1, r3
 80057dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057de:	2200      	movs	r2, #0
 80057e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80057e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80057e8:	f7fb fa56 	bl	8000c98 <__aeabi_uldivmod>
 80057ec:	4602      	mov	r2, r0
 80057ee:	460b      	mov	r3, r1
 80057f0:	4613      	mov	r3, r2
 80057f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057f4:	e058      	b.n	80058a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057f6:	4b38      	ldr	r3, [pc, #224]	; (80058d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	099b      	lsrs	r3, r3, #6
 80057fc:	2200      	movs	r2, #0
 80057fe:	4618      	mov	r0, r3
 8005800:	4611      	mov	r1, r2
 8005802:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005806:	623b      	str	r3, [r7, #32]
 8005808:	2300      	movs	r3, #0
 800580a:	627b      	str	r3, [r7, #36]	; 0x24
 800580c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005810:	4642      	mov	r2, r8
 8005812:	464b      	mov	r3, r9
 8005814:	f04f 0000 	mov.w	r0, #0
 8005818:	f04f 0100 	mov.w	r1, #0
 800581c:	0159      	lsls	r1, r3, #5
 800581e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005822:	0150      	lsls	r0, r2, #5
 8005824:	4602      	mov	r2, r0
 8005826:	460b      	mov	r3, r1
 8005828:	4641      	mov	r1, r8
 800582a:	ebb2 0a01 	subs.w	sl, r2, r1
 800582e:	4649      	mov	r1, r9
 8005830:	eb63 0b01 	sbc.w	fp, r3, r1
 8005834:	f04f 0200 	mov.w	r2, #0
 8005838:	f04f 0300 	mov.w	r3, #0
 800583c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005840:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005844:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005848:	ebb2 040a 	subs.w	r4, r2, sl
 800584c:	eb63 050b 	sbc.w	r5, r3, fp
 8005850:	f04f 0200 	mov.w	r2, #0
 8005854:	f04f 0300 	mov.w	r3, #0
 8005858:	00eb      	lsls	r3, r5, #3
 800585a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800585e:	00e2      	lsls	r2, r4, #3
 8005860:	4614      	mov	r4, r2
 8005862:	461d      	mov	r5, r3
 8005864:	4643      	mov	r3, r8
 8005866:	18e3      	adds	r3, r4, r3
 8005868:	603b      	str	r3, [r7, #0]
 800586a:	464b      	mov	r3, r9
 800586c:	eb45 0303 	adc.w	r3, r5, r3
 8005870:	607b      	str	r3, [r7, #4]
 8005872:	f04f 0200 	mov.w	r2, #0
 8005876:	f04f 0300 	mov.w	r3, #0
 800587a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800587e:	4629      	mov	r1, r5
 8005880:	028b      	lsls	r3, r1, #10
 8005882:	4621      	mov	r1, r4
 8005884:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005888:	4621      	mov	r1, r4
 800588a:	028a      	lsls	r2, r1, #10
 800588c:	4610      	mov	r0, r2
 800588e:	4619      	mov	r1, r3
 8005890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005892:	2200      	movs	r2, #0
 8005894:	61bb      	str	r3, [r7, #24]
 8005896:	61fa      	str	r2, [r7, #28]
 8005898:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800589c:	f7fb f9fc 	bl	8000c98 <__aeabi_uldivmod>
 80058a0:	4602      	mov	r2, r0
 80058a2:	460b      	mov	r3, r1
 80058a4:	4613      	mov	r3, r2
 80058a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80058a8:	4b0b      	ldr	r3, [pc, #44]	; (80058d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	0c1b      	lsrs	r3, r3, #16
 80058ae:	f003 0303 	and.w	r3, r3, #3
 80058b2:	3301      	adds	r3, #1
 80058b4:	005b      	lsls	r3, r3, #1
 80058b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80058b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80058ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80058c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80058c2:	e002      	b.n	80058ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80058c4:	4b05      	ldr	r3, [pc, #20]	; (80058dc <HAL_RCC_GetSysClockFreq+0x204>)
 80058c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80058c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3750      	adds	r7, #80	; 0x50
 80058d0:	46bd      	mov	sp, r7
 80058d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058d6:	bf00      	nop
 80058d8:	40023800 	.word	0x40023800
 80058dc:	00f42400 	.word	0x00f42400
 80058e0:	007a1200 	.word	0x007a1200

080058e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058e4:	b480      	push	{r7}
 80058e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058e8:	4b03      	ldr	r3, [pc, #12]	; (80058f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80058ea:	681b      	ldr	r3, [r3, #0]
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	20000034 	.word	0x20000034

080058fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005900:	f7ff fff0 	bl	80058e4 <HAL_RCC_GetHCLKFreq>
 8005904:	4602      	mov	r2, r0
 8005906:	4b05      	ldr	r3, [pc, #20]	; (800591c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	0a9b      	lsrs	r3, r3, #10
 800590c:	f003 0307 	and.w	r3, r3, #7
 8005910:	4903      	ldr	r1, [pc, #12]	; (8005920 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005912:	5ccb      	ldrb	r3, [r1, r3]
 8005914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005918:	4618      	mov	r0, r3
 800591a:	bd80      	pop	{r7, pc}
 800591c:	40023800 	.word	0x40023800
 8005920:	0800bc9c 	.word	0x0800bc9c

08005924 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005928:	f7ff ffdc 	bl	80058e4 <HAL_RCC_GetHCLKFreq>
 800592c:	4602      	mov	r2, r0
 800592e:	4b05      	ldr	r3, [pc, #20]	; (8005944 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	0b5b      	lsrs	r3, r3, #13
 8005934:	f003 0307 	and.w	r3, r3, #7
 8005938:	4903      	ldr	r1, [pc, #12]	; (8005948 <HAL_RCC_GetPCLK2Freq+0x24>)
 800593a:	5ccb      	ldrb	r3, [r1, r3]
 800593c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005940:	4618      	mov	r0, r3
 8005942:	bd80      	pop	{r7, pc}
 8005944:	40023800 	.word	0x40023800
 8005948:	0800bc9c 	.word	0x0800bc9c

0800594c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005954:	2300      	movs	r3, #0
 8005956:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005958:	2300      	movs	r3, #0
 800595a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0301 	and.w	r3, r3, #1
 8005964:	2b00      	cmp	r3, #0
 8005966:	d105      	bne.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005970:	2b00      	cmp	r3, #0
 8005972:	d038      	beq.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005974:	4b68      	ldr	r3, [pc, #416]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005976:	2200      	movs	r2, #0
 8005978:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800597a:	f7fe fb95 	bl	80040a8 <HAL_GetTick>
 800597e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005980:	e008      	b.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005982:	f7fe fb91 	bl	80040a8 <HAL_GetTick>
 8005986:	4602      	mov	r2, r0
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	2b02      	cmp	r3, #2
 800598e:	d901      	bls.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e0bd      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005994:	4b61      	ldr	r3, [pc, #388]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d1f0      	bne.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685a      	ldr	r2, [r3, #4]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	019b      	lsls	r3, r3, #6
 80059aa:	431a      	orrs	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	071b      	lsls	r3, r3, #28
 80059b2:	495a      	ldr	r1, [pc, #360]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059b4:	4313      	orrs	r3, r2
 80059b6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80059ba:	4b57      	ldr	r3, [pc, #348]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80059bc:	2201      	movs	r2, #1
 80059be:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80059c0:	f7fe fb72 	bl	80040a8 <HAL_GetTick>
 80059c4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059c6:	e008      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80059c8:	f7fe fb6e 	bl	80040a8 <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d901      	bls.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e09a      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059da:	4b50      	ldr	r3, [pc, #320]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d0f0      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0302 	and.w	r3, r3, #2
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	f000 8083 	beq.w	8005afa <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80059f4:	2300      	movs	r3, #0
 80059f6:	60fb      	str	r3, [r7, #12]
 80059f8:	4b48      	ldr	r3, [pc, #288]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fc:	4a47      	ldr	r2, [pc, #284]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a02:	6413      	str	r3, [r2, #64]	; 0x40
 8005a04:	4b45      	ldr	r3, [pc, #276]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a0c:	60fb      	str	r3, [r7, #12]
 8005a0e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005a10:	4b43      	ldr	r3, [pc, #268]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a42      	ldr	r2, [pc, #264]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005a16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a1a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005a1c:	f7fe fb44 	bl	80040a8 <HAL_GetTick>
 8005a20:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005a22:	e008      	b.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005a24:	f7fe fb40 	bl	80040a8 <HAL_GetTick>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d901      	bls.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	e06c      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005a36:	4b3a      	ldr	r3, [pc, #232]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d0f0      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005a42:	4b36      	ldr	r3, [pc, #216]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a4a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d02f      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d028      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a60:	4b2e      	ldr	r3, [pc, #184]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a68:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a6a:	4b2e      	ldr	r3, [pc, #184]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a70:	4b2c      	ldr	r3, [pc, #176]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005a72:	2200      	movs	r2, #0
 8005a74:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005a76:	4a29      	ldr	r2, [pc, #164]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005a7c:	4b27      	ldr	r3, [pc, #156]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a80:	f003 0301 	and.w	r3, r3, #1
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d114      	bne.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005a88:	f7fe fb0e 	bl	80040a8 <HAL_GetTick>
 8005a8c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a8e:	e00a      	b.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a90:	f7fe fb0a 	bl	80040a8 <HAL_GetTick>
 8005a94:	4602      	mov	r2, r0
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	1ad3      	subs	r3, r2, r3
 8005a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d901      	bls.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e034      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005aa6:	4b1d      	ldr	r3, [pc, #116]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aaa:	f003 0302 	and.w	r3, r3, #2
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d0ee      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005abe:	d10d      	bne.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005ac0:	4b16      	ldr	r3, [pc, #88]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005ad0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ad4:	4911      	ldr	r1, [pc, #68]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	608b      	str	r3, [r1, #8]
 8005ada:	e005      	b.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005adc:	4b0f      	ldr	r3, [pc, #60]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	4a0e      	ldr	r2, [pc, #56]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ae2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005ae6:	6093      	str	r3, [r2, #8]
 8005ae8:	4b0c      	ldr	r3, [pc, #48]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005aea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005af4:	4909      	ldr	r1, [pc, #36]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005af6:	4313      	orrs	r3, r2
 8005af8:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0308 	and.w	r3, r3, #8
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d003      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	7d1a      	ldrb	r2, [r3, #20]
 8005b0a:	4b07      	ldr	r3, [pc, #28]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005b0c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3718      	adds	r7, #24
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	42470068 	.word	0x42470068
 8005b1c:	40023800 	.word	0x40023800
 8005b20:	40007000 	.word	0x40007000
 8005b24:	42470e40 	.word	0x42470e40
 8005b28:	424711e0 	.word	0x424711e0

08005b2c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d101      	bne.n	8005b42 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e066      	b.n	8005c10 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	7f5b      	ldrb	r3, [r3, #29]
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d105      	bne.n	8005b58 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f7fd fea4 	bl	80038a0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2202      	movs	r2, #2
 8005b5c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	22ca      	movs	r2, #202	; 0xca
 8005b64:	625a      	str	r2, [r3, #36]	; 0x24
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2253      	movs	r2, #83	; 0x53
 8005b6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 fa45 	bl	8005ffe <RTC_EnterInitMode>
 8005b74:	4603      	mov	r3, r0
 8005b76:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005b78:	7bfb      	ldrb	r3, [r7, #15]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d12c      	bne.n	8005bd8 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	6812      	ldr	r2, [r2, #0]
 8005b88:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005b8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b90:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	6899      	ldr	r1, [r3, #8]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	685a      	ldr	r2, [r3, #4]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	431a      	orrs	r2, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	695b      	ldr	r3, [r3, #20]
 8005ba6:	431a      	orrs	r2, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	430a      	orrs	r2, r1
 8005bae:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	68d2      	ldr	r2, [r2, #12]
 8005bb8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	6919      	ldr	r1, [r3, #16]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	041a      	lsls	r2, r3, #16
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	430a      	orrs	r2, r1
 8005bcc:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 fa4c 	bl	800606c <RTC_ExitInitMode>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005bd8:	7bfb      	ldrb	r3, [r7, #15]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d113      	bne.n	8005c06 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005bec:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	699a      	ldr	r2, [r3, #24]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	430a      	orrs	r2, r1
 8005bfe:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	22ff      	movs	r2, #255	; 0xff
 8005c0c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005c18:	b590      	push	{r4, r7, lr}
 8005c1a:	b087      	sub	sp, #28
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005c24:	2300      	movs	r3, #0
 8005c26:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	7f1b      	ldrb	r3, [r3, #28]
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d101      	bne.n	8005c34 <HAL_RTC_SetTime+0x1c>
 8005c30:	2302      	movs	r3, #2
 8005c32:	e087      	b.n	8005d44 <HAL_RTC_SetTime+0x12c>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2201      	movs	r2, #1
 8005c38:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2202      	movs	r2, #2
 8005c3e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d126      	bne.n	8005c94 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d102      	bne.n	8005c5a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	2200      	movs	r2, #0
 8005c58:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f000 fa29 	bl	80060b6 <RTC_ByteToBcd2>
 8005c64:	4603      	mov	r3, r0
 8005c66:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	785b      	ldrb	r3, [r3, #1]
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f000 fa22 	bl	80060b6 <RTC_ByteToBcd2>
 8005c72:	4603      	mov	r3, r0
 8005c74:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005c76:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	789b      	ldrb	r3, [r3, #2]
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f000 fa1a 	bl	80060b6 <RTC_ByteToBcd2>
 8005c82:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005c84:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	78db      	ldrb	r3, [r3, #3]
 8005c8c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	617b      	str	r3, [r7, #20]
 8005c92:	e018      	b.n	8005cc6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d102      	bne.n	8005ca8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	785b      	ldrb	r3, [r3, #1]
 8005cb2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005cb4:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005cb6:	68ba      	ldr	r2, [r7, #8]
 8005cb8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005cba:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	78db      	ldrb	r3, [r3, #3]
 8005cc0:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	22ca      	movs	r2, #202	; 0xca
 8005ccc:	625a      	str	r2, [r3, #36]	; 0x24
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2253      	movs	r2, #83	; 0x53
 8005cd4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005cd6:	68f8      	ldr	r0, [r7, #12]
 8005cd8:	f000 f991 	bl	8005ffe <RTC_EnterInitMode>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005ce0:	7cfb      	ldrb	r3, [r7, #19]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d120      	bne.n	8005d28 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005cf0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005cf4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	689a      	ldr	r2, [r3, #8]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005d04:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	6899      	ldr	r1, [r3, #8]
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	68da      	ldr	r2, [r3, #12]
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	431a      	orrs	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	430a      	orrs	r2, r1
 8005d1c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005d1e:	68f8      	ldr	r0, [r7, #12]
 8005d20:	f000 f9a4 	bl	800606c <RTC_ExitInitMode>
 8005d24:	4603      	mov	r3, r0
 8005d26:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005d28:	7cfb      	ldrb	r3, [r7, #19]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d102      	bne.n	8005d34 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2201      	movs	r2, #1
 8005d32:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	22ff      	movs	r2, #255	; 0xff
 8005d3a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	771a      	strb	r2, [r3, #28]

  return status;
 8005d42:	7cfb      	ldrb	r3, [r7, #19]
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	371c      	adds	r7, #28
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd90      	pop	{r4, r7, pc}

08005d4c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b086      	sub	sp, #24
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005d7e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005d82:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	0c1b      	lsrs	r3, r3, #16
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d8e:	b2da      	uxtb	r2, r3
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	0a1b      	lsrs	r3, r3, #8
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d9e:	b2da      	uxtb	r2, r3
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dac:	b2da      	uxtb	r2, r3
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	0d9b      	lsrs	r3, r3, #22
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	f003 0301 	and.w	r3, r3, #1
 8005dbc:	b2da      	uxtb	r2, r3
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d11a      	bne.n	8005dfe <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f000 f98f 	bl	80060f0 <RTC_Bcd2ToByte>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	785b      	ldrb	r3, [r3, #1]
 8005dde:	4618      	mov	r0, r3
 8005de0:	f000 f986 	bl	80060f0 <RTC_Bcd2ToByte>
 8005de4:	4603      	mov	r3, r0
 8005de6:	461a      	mov	r2, r3
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	789b      	ldrb	r3, [r3, #2]
 8005df0:	4618      	mov	r0, r3
 8005df2:	f000 f97d 	bl	80060f0 <RTC_Bcd2ToByte>
 8005df6:	4603      	mov	r3, r0
 8005df8:	461a      	mov	r2, r3
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3718      	adds	r7, #24
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005e08:	b590      	push	{r4, r7, lr}
 8005e0a:	b087      	sub	sp, #28
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005e14:	2300      	movs	r3, #0
 8005e16:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	7f1b      	ldrb	r3, [r3, #28]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d101      	bne.n	8005e24 <HAL_RTC_SetDate+0x1c>
 8005e20:	2302      	movs	r3, #2
 8005e22:	e071      	b.n	8005f08 <HAL_RTC_SetDate+0x100>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2201      	movs	r2, #1
 8005e28:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2202      	movs	r2, #2
 8005e2e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d10e      	bne.n	8005e54 <HAL_RTC_SetDate+0x4c>
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	785b      	ldrb	r3, [r3, #1]
 8005e3a:	f003 0310 	and.w	r3, r3, #16
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d008      	beq.n	8005e54 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	785b      	ldrb	r3, [r3, #1]
 8005e46:	f023 0310 	bic.w	r3, r3, #16
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	330a      	adds	r3, #10
 8005e4e:	b2da      	uxtb	r2, r3
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d11c      	bne.n	8005e94 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	78db      	ldrb	r3, [r3, #3]
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f000 f929 	bl	80060b6 <RTC_ByteToBcd2>
 8005e64:	4603      	mov	r3, r0
 8005e66:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	785b      	ldrb	r3, [r3, #1]
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f000 f922 	bl	80060b6 <RTC_ByteToBcd2>
 8005e72:	4603      	mov	r3, r0
 8005e74:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005e76:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	789b      	ldrb	r3, [r3, #2]
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f000 f91a 	bl	80060b6 <RTC_ByteToBcd2>
 8005e82:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005e84:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	617b      	str	r3, [r7, #20]
 8005e92:	e00e      	b.n	8005eb2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	78db      	ldrb	r3, [r3, #3]
 8005e98:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	785b      	ldrb	r3, [r3, #1]
 8005e9e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005ea0:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005ea2:	68ba      	ldr	r2, [r7, #8]
 8005ea4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005ea6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	22ca      	movs	r2, #202	; 0xca
 8005eb8:	625a      	str	r2, [r3, #36]	; 0x24
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2253      	movs	r2, #83	; 0x53
 8005ec0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005ec2:	68f8      	ldr	r0, [r7, #12]
 8005ec4:	f000 f89b 	bl	8005ffe <RTC_EnterInitMode>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005ecc:	7cfb      	ldrb	r3, [r7, #19]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d10c      	bne.n	8005eec <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005edc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005ee0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	f000 f8c2 	bl	800606c <RTC_ExitInitMode>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005eec:	7cfb      	ldrb	r3, [r7, #19]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d102      	bne.n	8005ef8 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	22ff      	movs	r2, #255	; 0xff
 8005efe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	771a      	strb	r2, [r3, #28]

  return status;
 8005f06:	7cfb      	ldrb	r3, [r7, #19]
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	371c      	adds	r7, #28
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd90      	pop	{r4, r7, pc}

08005f10 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b086      	sub	sp, #24
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005f2a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005f2e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	0c1b      	lsrs	r3, r3, #16
 8005f34:	b2da      	uxtb	r2, r3
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	0a1b      	lsrs	r3, r3, #8
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	f003 031f 	and.w	r3, r3, #31
 8005f44:	b2da      	uxtb	r2, r3
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f52:	b2da      	uxtb	r2, r3
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	0b5b      	lsrs	r3, r3, #13
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	f003 0307 	and.w	r3, r3, #7
 8005f62:	b2da      	uxtb	r2, r3
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d11a      	bne.n	8005fa4 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	78db      	ldrb	r3, [r3, #3]
 8005f72:	4618      	mov	r0, r3
 8005f74:	f000 f8bc 	bl	80060f0 <RTC_Bcd2ToByte>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	785b      	ldrb	r3, [r3, #1]
 8005f84:	4618      	mov	r0, r3
 8005f86:	f000 f8b3 	bl	80060f0 <RTC_Bcd2ToByte>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	789b      	ldrb	r3, [r3, #2]
 8005f96:	4618      	mov	r0, r3
 8005f98:	f000 f8aa 	bl	80060f0 <RTC_Bcd2ToByte>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3718      	adds	r7, #24
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b084      	sub	sp, #16
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68da      	ldr	r2, [r3, #12]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005fc8:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005fca:	f7fe f86d 	bl	80040a8 <HAL_GetTick>
 8005fce:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005fd0:	e009      	b.n	8005fe6 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005fd2:	f7fe f869 	bl	80040a8 <HAL_GetTick>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fe0:	d901      	bls.n	8005fe6 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e007      	b.n	8005ff6 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	f003 0320 	and.w	r3, r3, #32
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d0ee      	beq.n	8005fd2 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b084      	sub	sp, #16
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006006:	2300      	movs	r3, #0
 8006008:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800600a:	2300      	movs	r3, #0
 800600c:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006018:	2b00      	cmp	r3, #0
 800601a:	d122      	bne.n	8006062 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	68da      	ldr	r2, [r3, #12]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800602a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800602c:	f7fe f83c 	bl	80040a8 <HAL_GetTick>
 8006030:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006032:	e00c      	b.n	800604e <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006034:	f7fe f838 	bl	80040a8 <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006042:	d904      	bls.n	800604e <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2204      	movs	r2, #4
 8006048:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006058:	2b00      	cmp	r3, #0
 800605a:	d102      	bne.n	8006062 <RTC_EnterInitMode+0x64>
 800605c:	7bfb      	ldrb	r3, [r7, #15]
 800605e:	2b01      	cmp	r3, #1
 8006060:	d1e8      	bne.n	8006034 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006062:	7bfb      	ldrb	r3, [r7, #15]
}
 8006064:	4618      	mov	r0, r3
 8006066:	3710      	adds	r7, #16
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006074:	2300      	movs	r3, #0
 8006076:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68da      	ldr	r2, [r3, #12]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006086:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	f003 0320 	and.w	r3, r3, #32
 8006092:	2b00      	cmp	r3, #0
 8006094:	d10a      	bne.n	80060ac <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f7ff ff89 	bl	8005fae <HAL_RTC_WaitForSynchro>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d004      	beq.n	80060ac <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2204      	movs	r2, #4
 80060a6:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80060ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3710      	adds	r7, #16
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80060b6:	b480      	push	{r7}
 80060b8:	b085      	sub	sp, #20
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	4603      	mov	r3, r0
 80060be:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80060c0:	2300      	movs	r3, #0
 80060c2:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80060c4:	e005      	b.n	80060d2 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80060c6:	7bfb      	ldrb	r3, [r7, #15]
 80060c8:	3301      	adds	r3, #1
 80060ca:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80060cc:	79fb      	ldrb	r3, [r7, #7]
 80060ce:	3b0a      	subs	r3, #10
 80060d0:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80060d2:	79fb      	ldrb	r3, [r7, #7]
 80060d4:	2b09      	cmp	r3, #9
 80060d6:	d8f6      	bhi.n	80060c6 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80060d8:	7bfb      	ldrb	r3, [r7, #15]
 80060da:	011b      	lsls	r3, r3, #4
 80060dc:	b2da      	uxtb	r2, r3
 80060de:	79fb      	ldrb	r3, [r7, #7]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	b2db      	uxtb	r3, r3
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3714      	adds	r7, #20
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b085      	sub	sp, #20
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	4603      	mov	r3, r0
 80060f8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80060fa:	2300      	movs	r3, #0
 80060fc:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80060fe:	79fb      	ldrb	r3, [r7, #7]
 8006100:	091b      	lsrs	r3, r3, #4
 8006102:	b2db      	uxtb	r3, r3
 8006104:	461a      	mov	r2, r3
 8006106:	0092      	lsls	r2, r2, #2
 8006108:	4413      	add	r3, r2
 800610a:	005b      	lsls	r3, r3, #1
 800610c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800610e:	79fb      	ldrb	r3, [r7, #7]
 8006110:	f003 030f 	and.w	r3, r3, #15
 8006114:	b2da      	uxtb	r2, r3
 8006116:	7bfb      	ldrb	r3, [r7, #15]
 8006118:	4413      	add	r3, r2
 800611a:	b2db      	uxtb	r3, r3
}
 800611c:	4618      	mov	r0, r3
 800611e:	3714      	adds	r7, #20
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d101      	bne.n	800613a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e041      	b.n	80061be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006140:	b2db      	uxtb	r3, r3
 8006142:	2b00      	cmp	r3, #0
 8006144:	d106      	bne.n	8006154 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f7fd fbd2 	bl	80038f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2202      	movs	r2, #2
 8006158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	3304      	adds	r3, #4
 8006164:	4619      	mov	r1, r3
 8006166:	4610      	mov	r0, r2
 8006168:	f000 fc34 	bl	80069d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3708      	adds	r7, #8
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}

080061c6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80061c6:	b580      	push	{r7, lr}
 80061c8:	b082      	sub	sp, #8
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d101      	bne.n	80061d8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e041      	b.n	800625c <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d106      	bne.n	80061f2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 f839 	bl	8006264 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2202      	movs	r2, #2
 80061f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	3304      	adds	r3, #4
 8006202:	4619      	mov	r1, r3
 8006204:	4610      	mov	r0, r2
 8006206:	f000 fbe5 	bl	80069d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2201      	movs	r2, #1
 800620e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2201      	movs	r2, #1
 8006216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2201      	movs	r2, #1
 800621e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2201      	movs	r2, #1
 8006226:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2201      	movs	r2, #1
 800622e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2201      	movs	r2, #1
 8006236:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2201      	movs	r2, #1
 800623e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2201      	movs	r2, #1
 8006246:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2201      	movs	r2, #1
 800624e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2201      	movs	r2, #1
 8006256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	3708      	adds	r7, #8
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800626c:	bf00      	nop
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006282:	2300      	movs	r3, #0
 8006284:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d104      	bne.n	8006296 <HAL_TIM_IC_Start_IT+0x1e>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006292:	b2db      	uxtb	r3, r3
 8006294:	e013      	b.n	80062be <HAL_TIM_IC_Start_IT+0x46>
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	2b04      	cmp	r3, #4
 800629a:	d104      	bne.n	80062a6 <HAL_TIM_IC_Start_IT+0x2e>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	e00b      	b.n	80062be <HAL_TIM_IC_Start_IT+0x46>
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	2b08      	cmp	r3, #8
 80062aa:	d104      	bne.n	80062b6 <HAL_TIM_IC_Start_IT+0x3e>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	e003      	b.n	80062be <HAL_TIM_IC_Start_IT+0x46>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d104      	bne.n	80062d0 <HAL_TIM_IC_Start_IT+0x58>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	e013      	b.n	80062f8 <HAL_TIM_IC_Start_IT+0x80>
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	2b04      	cmp	r3, #4
 80062d4:	d104      	bne.n	80062e0 <HAL_TIM_IC_Start_IT+0x68>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	e00b      	b.n	80062f8 <HAL_TIM_IC_Start_IT+0x80>
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	2b08      	cmp	r3, #8
 80062e4:	d104      	bne.n	80062f0 <HAL_TIM_IC_Start_IT+0x78>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	e003      	b.n	80062f8 <HAL_TIM_IC_Start_IT+0x80>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80062fa:	7bbb      	ldrb	r3, [r7, #14]
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d102      	bne.n	8006306 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006300:	7b7b      	ldrb	r3, [r7, #13]
 8006302:	2b01      	cmp	r3, #1
 8006304:	d001      	beq.n	800630a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e0c2      	b.n	8006490 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d104      	bne.n	800631a <HAL_TIM_IC_Start_IT+0xa2>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2202      	movs	r2, #2
 8006314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006318:	e013      	b.n	8006342 <HAL_TIM_IC_Start_IT+0xca>
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	2b04      	cmp	r3, #4
 800631e:	d104      	bne.n	800632a <HAL_TIM_IC_Start_IT+0xb2>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2202      	movs	r2, #2
 8006324:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006328:	e00b      	b.n	8006342 <HAL_TIM_IC_Start_IT+0xca>
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	2b08      	cmp	r3, #8
 800632e:	d104      	bne.n	800633a <HAL_TIM_IC_Start_IT+0xc2>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2202      	movs	r2, #2
 8006334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006338:	e003      	b.n	8006342 <HAL_TIM_IC_Start_IT+0xca>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2202      	movs	r2, #2
 800633e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d104      	bne.n	8006352 <HAL_TIM_IC_Start_IT+0xda>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2202      	movs	r2, #2
 800634c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006350:	e013      	b.n	800637a <HAL_TIM_IC_Start_IT+0x102>
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	2b04      	cmp	r3, #4
 8006356:	d104      	bne.n	8006362 <HAL_TIM_IC_Start_IT+0xea>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2202      	movs	r2, #2
 800635c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006360:	e00b      	b.n	800637a <HAL_TIM_IC_Start_IT+0x102>
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	2b08      	cmp	r3, #8
 8006366:	d104      	bne.n	8006372 <HAL_TIM_IC_Start_IT+0xfa>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2202      	movs	r2, #2
 800636c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006370:	e003      	b.n	800637a <HAL_TIM_IC_Start_IT+0x102>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2202      	movs	r2, #2
 8006376:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	2b0c      	cmp	r3, #12
 800637e:	d841      	bhi.n	8006404 <HAL_TIM_IC_Start_IT+0x18c>
 8006380:	a201      	add	r2, pc, #4	; (adr r2, 8006388 <HAL_TIM_IC_Start_IT+0x110>)
 8006382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006386:	bf00      	nop
 8006388:	080063bd 	.word	0x080063bd
 800638c:	08006405 	.word	0x08006405
 8006390:	08006405 	.word	0x08006405
 8006394:	08006405 	.word	0x08006405
 8006398:	080063cf 	.word	0x080063cf
 800639c:	08006405 	.word	0x08006405
 80063a0:	08006405 	.word	0x08006405
 80063a4:	08006405 	.word	0x08006405
 80063a8:	080063e1 	.word	0x080063e1
 80063ac:	08006405 	.word	0x08006405
 80063b0:	08006405 	.word	0x08006405
 80063b4:	08006405 	.word	0x08006405
 80063b8:	080063f3 	.word	0x080063f3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68da      	ldr	r2, [r3, #12]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f042 0202 	orr.w	r2, r2, #2
 80063ca:	60da      	str	r2, [r3, #12]
      break;
 80063cc:	e01d      	b.n	800640a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68da      	ldr	r2, [r3, #12]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f042 0204 	orr.w	r2, r2, #4
 80063dc:	60da      	str	r2, [r3, #12]
      break;
 80063de:	e014      	b.n	800640a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68da      	ldr	r2, [r3, #12]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f042 0208 	orr.w	r2, r2, #8
 80063ee:	60da      	str	r2, [r3, #12]
      break;
 80063f0:	e00b      	b.n	800640a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68da      	ldr	r2, [r3, #12]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f042 0210 	orr.w	r2, r2, #16
 8006400:	60da      	str	r2, [r3, #12]
      break;
 8006402:	e002      	b.n	800640a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	73fb      	strb	r3, [r7, #15]
      break;
 8006408:	bf00      	nop
  }

  if (status == HAL_OK)
 800640a:	7bfb      	ldrb	r3, [r7, #15]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d13e      	bne.n	800648e <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2201      	movs	r2, #1
 8006416:	6839      	ldr	r1, [r7, #0]
 8006418:	4618      	mov	r0, r3
 800641a:	f000 fd13 	bl	8006e44 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a1d      	ldr	r2, [pc, #116]	; (8006498 <HAL_TIM_IC_Start_IT+0x220>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d018      	beq.n	800645a <HAL_TIM_IC_Start_IT+0x1e2>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006430:	d013      	beq.n	800645a <HAL_TIM_IC_Start_IT+0x1e2>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a19      	ldr	r2, [pc, #100]	; (800649c <HAL_TIM_IC_Start_IT+0x224>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d00e      	beq.n	800645a <HAL_TIM_IC_Start_IT+0x1e2>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a17      	ldr	r2, [pc, #92]	; (80064a0 <HAL_TIM_IC_Start_IT+0x228>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d009      	beq.n	800645a <HAL_TIM_IC_Start_IT+0x1e2>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a16      	ldr	r2, [pc, #88]	; (80064a4 <HAL_TIM_IC_Start_IT+0x22c>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d004      	beq.n	800645a <HAL_TIM_IC_Start_IT+0x1e2>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a14      	ldr	r2, [pc, #80]	; (80064a8 <HAL_TIM_IC_Start_IT+0x230>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d111      	bne.n	800647e <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	f003 0307 	and.w	r3, r3, #7
 8006464:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	2b06      	cmp	r3, #6
 800646a:	d010      	beq.n	800648e <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f042 0201 	orr.w	r2, r2, #1
 800647a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800647c:	e007      	b.n	800648e <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f042 0201 	orr.w	r2, r2, #1
 800648c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800648e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006490:	4618      	mov	r0, r3
 8006492:	3710      	adds	r7, #16
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}
 8006498:	40010000 	.word	0x40010000
 800649c:	40000400 	.word	0x40000400
 80064a0:	40000800 	.word	0x40000800
 80064a4:	40000c00 	.word	0x40000c00
 80064a8:	40014000 	.word	0x40014000

080064ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b082      	sub	sp, #8
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	f003 0302 	and.w	r3, r3, #2
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d122      	bne.n	8006508 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	f003 0302 	and.w	r3, r3, #2
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d11b      	bne.n	8006508 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f06f 0202 	mvn.w	r2, #2
 80064d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2201      	movs	r2, #1
 80064de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	699b      	ldr	r3, [r3, #24]
 80064e6:	f003 0303 	and.w	r3, r3, #3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d003      	beq.n	80064f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f7fb f9e8 	bl	80018c4 <HAL_TIM_IC_CaptureCallback>
 80064f4:	e005      	b.n	8006502 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 fa4d 	bl	8006996 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 fa54 	bl	80069aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	f003 0304 	and.w	r3, r3, #4
 8006512:	2b04      	cmp	r3, #4
 8006514:	d122      	bne.n	800655c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	f003 0304 	and.w	r3, r3, #4
 8006520:	2b04      	cmp	r3, #4
 8006522:	d11b      	bne.n	800655c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f06f 0204 	mvn.w	r2, #4
 800652c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2202      	movs	r2, #2
 8006532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	699b      	ldr	r3, [r3, #24]
 800653a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800653e:	2b00      	cmp	r3, #0
 8006540:	d003      	beq.n	800654a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f7fb f9be 	bl	80018c4 <HAL_TIM_IC_CaptureCallback>
 8006548:	e005      	b.n	8006556 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 fa23 	bl	8006996 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 fa2a 	bl	80069aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	f003 0308 	and.w	r3, r3, #8
 8006566:	2b08      	cmp	r3, #8
 8006568:	d122      	bne.n	80065b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	f003 0308 	and.w	r3, r3, #8
 8006574:	2b08      	cmp	r3, #8
 8006576:	d11b      	bne.n	80065b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f06f 0208 	mvn.w	r2, #8
 8006580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2204      	movs	r2, #4
 8006586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	69db      	ldr	r3, [r3, #28]
 800658e:	f003 0303 	and.w	r3, r3, #3
 8006592:	2b00      	cmp	r3, #0
 8006594:	d003      	beq.n	800659e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f7fb f994 	bl	80018c4 <HAL_TIM_IC_CaptureCallback>
 800659c:	e005      	b.n	80065aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 f9f9 	bl	8006996 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 fa00 	bl	80069aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	f003 0310 	and.w	r3, r3, #16
 80065ba:	2b10      	cmp	r3, #16
 80065bc:	d122      	bne.n	8006604 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	f003 0310 	and.w	r3, r3, #16
 80065c8:	2b10      	cmp	r3, #16
 80065ca:	d11b      	bne.n	8006604 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f06f 0210 	mvn.w	r2, #16
 80065d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2208      	movs	r2, #8
 80065da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	69db      	ldr	r3, [r3, #28]
 80065e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d003      	beq.n	80065f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f7fb f96a 	bl	80018c4 <HAL_TIM_IC_CaptureCallback>
 80065f0:	e005      	b.n	80065fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 f9cf 	bl	8006996 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 f9d6 	bl	80069aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	f003 0301 	and.w	r3, r3, #1
 800660e:	2b01      	cmp	r3, #1
 8006610:	d10e      	bne.n	8006630 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	f003 0301 	and.w	r3, r3, #1
 800661c:	2b01      	cmp	r3, #1
 800661e:	d107      	bne.n	8006630 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f06f 0201 	mvn.w	r2, #1
 8006628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 f9a9 	bl	8006982 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800663a:	2b80      	cmp	r3, #128	; 0x80
 800663c:	d10e      	bne.n	800665c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006648:	2b80      	cmp	r3, #128	; 0x80
 800664a:	d107      	bne.n	800665c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 fc92 	bl	8006f80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006666:	2b40      	cmp	r3, #64	; 0x40
 8006668:	d10e      	bne.n	8006688 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006674:	2b40      	cmp	r3, #64	; 0x40
 8006676:	d107      	bne.n	8006688 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 f99b 	bl	80069be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	f003 0320 	and.w	r3, r3, #32
 8006692:	2b20      	cmp	r3, #32
 8006694:	d10e      	bne.n	80066b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	f003 0320 	and.w	r3, r3, #32
 80066a0:	2b20      	cmp	r3, #32
 80066a2:	d107      	bne.n	80066b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f06f 0220 	mvn.w	r2, #32
 80066ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 fc5c 	bl	8006f6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066b4:	bf00      	nop
 80066b6:	3708      	adds	r7, #8
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b086      	sub	sp, #24
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066c8:	2300      	movs	r3, #0
 80066ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d101      	bne.n	80066da <HAL_TIM_IC_ConfigChannel+0x1e>
 80066d6:	2302      	movs	r3, #2
 80066d8:	e088      	b.n	80067ec <HAL_TIM_IC_ConfigChannel+0x130>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2201      	movs	r2, #1
 80066de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d11b      	bne.n	8006720 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6818      	ldr	r0, [r3, #0]
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	6819      	ldr	r1, [r3, #0]
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	685a      	ldr	r2, [r3, #4]
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	f000 f9ec 	bl	8006ad4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	699a      	ldr	r2, [r3, #24]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f022 020c 	bic.w	r2, r2, #12
 800670a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	6999      	ldr	r1, [r3, #24]
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	689a      	ldr	r2, [r3, #8]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	430a      	orrs	r2, r1
 800671c:	619a      	str	r2, [r3, #24]
 800671e:	e060      	b.n	80067e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2b04      	cmp	r3, #4
 8006724:	d11c      	bne.n	8006760 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6818      	ldr	r0, [r3, #0]
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	6819      	ldr	r1, [r3, #0]
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	685a      	ldr	r2, [r3, #4]
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	f000 fa64 	bl	8006c02 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	699a      	ldr	r2, [r3, #24]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006748:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	6999      	ldr	r1, [r3, #24]
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	021a      	lsls	r2, r3, #8
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	430a      	orrs	r2, r1
 800675c:	619a      	str	r2, [r3, #24]
 800675e:	e040      	b.n	80067e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2b08      	cmp	r3, #8
 8006764:	d11b      	bne.n	800679e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6818      	ldr	r0, [r3, #0]
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	6819      	ldr	r1, [r3, #0]
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	685a      	ldr	r2, [r3, #4]
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	f000 fab1 	bl	8006cdc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	69da      	ldr	r2, [r3, #28]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f022 020c 	bic.w	r2, r2, #12
 8006788:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	69d9      	ldr	r1, [r3, #28]
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	689a      	ldr	r2, [r3, #8]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	430a      	orrs	r2, r1
 800679a:	61da      	str	r2, [r3, #28]
 800679c:	e021      	b.n	80067e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2b0c      	cmp	r3, #12
 80067a2:	d11c      	bne.n	80067de <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6818      	ldr	r0, [r3, #0]
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	6819      	ldr	r1, [r3, #0]
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	685a      	ldr	r2, [r3, #4]
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	f000 face 	bl	8006d54 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	69da      	ldr	r2, [r3, #28]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80067c6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	69d9      	ldr	r1, [r3, #28]
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	021a      	lsls	r2, r3, #8
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	430a      	orrs	r2, r1
 80067da:	61da      	str	r2, [r3, #28]
 80067dc:	e001      	b.n	80067e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80067ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3718      	adds	r7, #24
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067fe:	2300      	movs	r3, #0
 8006800:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006808:	2b01      	cmp	r3, #1
 800680a:	d101      	bne.n	8006810 <HAL_TIM_ConfigClockSource+0x1c>
 800680c:	2302      	movs	r3, #2
 800680e:	e0b4      	b.n	800697a <HAL_TIM_ConfigClockSource+0x186>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2202      	movs	r2, #2
 800681c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800682e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006836:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68ba      	ldr	r2, [r7, #8]
 800683e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006848:	d03e      	beq.n	80068c8 <HAL_TIM_ConfigClockSource+0xd4>
 800684a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800684e:	f200 8087 	bhi.w	8006960 <HAL_TIM_ConfigClockSource+0x16c>
 8006852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006856:	f000 8086 	beq.w	8006966 <HAL_TIM_ConfigClockSource+0x172>
 800685a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800685e:	d87f      	bhi.n	8006960 <HAL_TIM_ConfigClockSource+0x16c>
 8006860:	2b70      	cmp	r3, #112	; 0x70
 8006862:	d01a      	beq.n	800689a <HAL_TIM_ConfigClockSource+0xa6>
 8006864:	2b70      	cmp	r3, #112	; 0x70
 8006866:	d87b      	bhi.n	8006960 <HAL_TIM_ConfigClockSource+0x16c>
 8006868:	2b60      	cmp	r3, #96	; 0x60
 800686a:	d050      	beq.n	800690e <HAL_TIM_ConfigClockSource+0x11a>
 800686c:	2b60      	cmp	r3, #96	; 0x60
 800686e:	d877      	bhi.n	8006960 <HAL_TIM_ConfigClockSource+0x16c>
 8006870:	2b50      	cmp	r3, #80	; 0x50
 8006872:	d03c      	beq.n	80068ee <HAL_TIM_ConfigClockSource+0xfa>
 8006874:	2b50      	cmp	r3, #80	; 0x50
 8006876:	d873      	bhi.n	8006960 <HAL_TIM_ConfigClockSource+0x16c>
 8006878:	2b40      	cmp	r3, #64	; 0x40
 800687a:	d058      	beq.n	800692e <HAL_TIM_ConfigClockSource+0x13a>
 800687c:	2b40      	cmp	r3, #64	; 0x40
 800687e:	d86f      	bhi.n	8006960 <HAL_TIM_ConfigClockSource+0x16c>
 8006880:	2b30      	cmp	r3, #48	; 0x30
 8006882:	d064      	beq.n	800694e <HAL_TIM_ConfigClockSource+0x15a>
 8006884:	2b30      	cmp	r3, #48	; 0x30
 8006886:	d86b      	bhi.n	8006960 <HAL_TIM_ConfigClockSource+0x16c>
 8006888:	2b20      	cmp	r3, #32
 800688a:	d060      	beq.n	800694e <HAL_TIM_ConfigClockSource+0x15a>
 800688c:	2b20      	cmp	r3, #32
 800688e:	d867      	bhi.n	8006960 <HAL_TIM_ConfigClockSource+0x16c>
 8006890:	2b00      	cmp	r3, #0
 8006892:	d05c      	beq.n	800694e <HAL_TIM_ConfigClockSource+0x15a>
 8006894:	2b10      	cmp	r3, #16
 8006896:	d05a      	beq.n	800694e <HAL_TIM_ConfigClockSource+0x15a>
 8006898:	e062      	b.n	8006960 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6818      	ldr	r0, [r3, #0]
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	6899      	ldr	r1, [r3, #8]
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	685a      	ldr	r2, [r3, #4]
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	f000 faab 	bl	8006e04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80068bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	68ba      	ldr	r2, [r7, #8]
 80068c4:	609a      	str	r2, [r3, #8]
      break;
 80068c6:	e04f      	b.n	8006968 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6818      	ldr	r0, [r3, #0]
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	6899      	ldr	r1, [r3, #8]
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	685a      	ldr	r2, [r3, #4]
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	f000 fa94 	bl	8006e04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	689a      	ldr	r2, [r3, #8]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068ea:	609a      	str	r2, [r3, #8]
      break;
 80068ec:	e03c      	b.n	8006968 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6818      	ldr	r0, [r3, #0]
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	6859      	ldr	r1, [r3, #4]
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	461a      	mov	r2, r3
 80068fc:	f000 f952 	bl	8006ba4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2150      	movs	r1, #80	; 0x50
 8006906:	4618      	mov	r0, r3
 8006908:	f000 fa61 	bl	8006dce <TIM_ITRx_SetConfig>
      break;
 800690c:	e02c      	b.n	8006968 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6818      	ldr	r0, [r3, #0]
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	6859      	ldr	r1, [r3, #4]
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	461a      	mov	r2, r3
 800691c:	f000 f9ae 	bl	8006c7c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2160      	movs	r1, #96	; 0x60
 8006926:	4618      	mov	r0, r3
 8006928:	f000 fa51 	bl	8006dce <TIM_ITRx_SetConfig>
      break;
 800692c:	e01c      	b.n	8006968 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6818      	ldr	r0, [r3, #0]
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	6859      	ldr	r1, [r3, #4]
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	461a      	mov	r2, r3
 800693c:	f000 f932 	bl	8006ba4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2140      	movs	r1, #64	; 0x40
 8006946:	4618      	mov	r0, r3
 8006948:	f000 fa41 	bl	8006dce <TIM_ITRx_SetConfig>
      break;
 800694c:	e00c      	b.n	8006968 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4619      	mov	r1, r3
 8006958:	4610      	mov	r0, r2
 800695a:	f000 fa38 	bl	8006dce <TIM_ITRx_SetConfig>
      break;
 800695e:	e003      	b.n	8006968 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	73fb      	strb	r3, [r7, #15]
      break;
 8006964:	e000      	b.n	8006968 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006966:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2201      	movs	r2, #1
 800696c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006978:	7bfb      	ldrb	r3, [r7, #15]
}
 800697a:	4618      	mov	r0, r3
 800697c:	3710      	adds	r7, #16
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}

08006982 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006982:	b480      	push	{r7}
 8006984:	b083      	sub	sp, #12
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800698a:	bf00      	nop
 800698c:	370c      	adds	r7, #12
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr

08006996 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006996:	b480      	push	{r7}
 8006998:	b083      	sub	sp, #12
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800699e:	bf00      	nop
 80069a0:	370c      	adds	r7, #12
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr

080069aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80069aa:	b480      	push	{r7}
 80069ac:	b083      	sub	sp, #12
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80069b2:	bf00      	nop
 80069b4:	370c      	adds	r7, #12
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr

080069be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069be:	b480      	push	{r7}
 80069c0:	b083      	sub	sp, #12
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069c6:	bf00      	nop
 80069c8:	370c      	adds	r7, #12
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
	...

080069d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b085      	sub	sp, #20
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a34      	ldr	r2, [pc, #208]	; (8006ab8 <TIM_Base_SetConfig+0xe4>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d00f      	beq.n	8006a0c <TIM_Base_SetConfig+0x38>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069f2:	d00b      	beq.n	8006a0c <TIM_Base_SetConfig+0x38>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a31      	ldr	r2, [pc, #196]	; (8006abc <TIM_Base_SetConfig+0xe8>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d007      	beq.n	8006a0c <TIM_Base_SetConfig+0x38>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4a30      	ldr	r2, [pc, #192]	; (8006ac0 <TIM_Base_SetConfig+0xec>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d003      	beq.n	8006a0c <TIM_Base_SetConfig+0x38>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a2f      	ldr	r2, [pc, #188]	; (8006ac4 <TIM_Base_SetConfig+0xf0>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d108      	bne.n	8006a1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a25      	ldr	r2, [pc, #148]	; (8006ab8 <TIM_Base_SetConfig+0xe4>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d01b      	beq.n	8006a5e <TIM_Base_SetConfig+0x8a>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a2c:	d017      	beq.n	8006a5e <TIM_Base_SetConfig+0x8a>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a22      	ldr	r2, [pc, #136]	; (8006abc <TIM_Base_SetConfig+0xe8>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d013      	beq.n	8006a5e <TIM_Base_SetConfig+0x8a>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a21      	ldr	r2, [pc, #132]	; (8006ac0 <TIM_Base_SetConfig+0xec>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d00f      	beq.n	8006a5e <TIM_Base_SetConfig+0x8a>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a20      	ldr	r2, [pc, #128]	; (8006ac4 <TIM_Base_SetConfig+0xf0>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d00b      	beq.n	8006a5e <TIM_Base_SetConfig+0x8a>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a1f      	ldr	r2, [pc, #124]	; (8006ac8 <TIM_Base_SetConfig+0xf4>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d007      	beq.n	8006a5e <TIM_Base_SetConfig+0x8a>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a1e      	ldr	r2, [pc, #120]	; (8006acc <TIM_Base_SetConfig+0xf8>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d003      	beq.n	8006a5e <TIM_Base_SetConfig+0x8a>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a1d      	ldr	r2, [pc, #116]	; (8006ad0 <TIM_Base_SetConfig+0xfc>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d108      	bne.n	8006a70 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	695b      	ldr	r3, [r3, #20]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	689a      	ldr	r2, [r3, #8]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a08      	ldr	r2, [pc, #32]	; (8006ab8 <TIM_Base_SetConfig+0xe4>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d103      	bne.n	8006aa4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	691a      	ldr	r2, [r3, #16]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	615a      	str	r2, [r3, #20]
}
 8006aaa:	bf00      	nop
 8006aac:	3714      	adds	r7, #20
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr
 8006ab6:	bf00      	nop
 8006ab8:	40010000 	.word	0x40010000
 8006abc:	40000400 	.word	0x40000400
 8006ac0:	40000800 	.word	0x40000800
 8006ac4:	40000c00 	.word	0x40000c00
 8006ac8:	40014000 	.word	0x40014000
 8006acc:	40014400 	.word	0x40014400
 8006ad0:	40014800 	.word	0x40014800

08006ad4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b087      	sub	sp, #28
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	607a      	str	r2, [r7, #4]
 8006ae0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6a1b      	ldr	r3, [r3, #32]
 8006ae6:	f023 0201 	bic.w	r2, r3, #1
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	699b      	ldr	r3, [r3, #24]
 8006af2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6a1b      	ldr	r3, [r3, #32]
 8006af8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	4a24      	ldr	r2, [pc, #144]	; (8006b90 <TIM_TI1_SetConfig+0xbc>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d013      	beq.n	8006b2a <TIM_TI1_SetConfig+0x56>
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b08:	d00f      	beq.n	8006b2a <TIM_TI1_SetConfig+0x56>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	4a21      	ldr	r2, [pc, #132]	; (8006b94 <TIM_TI1_SetConfig+0xc0>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d00b      	beq.n	8006b2a <TIM_TI1_SetConfig+0x56>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	4a20      	ldr	r2, [pc, #128]	; (8006b98 <TIM_TI1_SetConfig+0xc4>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d007      	beq.n	8006b2a <TIM_TI1_SetConfig+0x56>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	4a1f      	ldr	r2, [pc, #124]	; (8006b9c <TIM_TI1_SetConfig+0xc8>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d003      	beq.n	8006b2a <TIM_TI1_SetConfig+0x56>
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	4a1e      	ldr	r2, [pc, #120]	; (8006ba0 <TIM_TI1_SetConfig+0xcc>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d101      	bne.n	8006b2e <TIM_TI1_SetConfig+0x5a>
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e000      	b.n	8006b30 <TIM_TI1_SetConfig+0x5c>
 8006b2e:	2300      	movs	r3, #0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d008      	beq.n	8006b46 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	f023 0303 	bic.w	r3, r3, #3
 8006b3a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006b3c:	697a      	ldr	r2, [r7, #20]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	617b      	str	r3, [r7, #20]
 8006b44:	e003      	b.n	8006b4e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	f043 0301 	orr.w	r3, r3, #1
 8006b4c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	011b      	lsls	r3, r3, #4
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	697a      	ldr	r2, [r7, #20]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	f023 030a 	bic.w	r3, r3, #10
 8006b68:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	f003 030a 	and.w	r3, r3, #10
 8006b70:	693a      	ldr	r2, [r7, #16]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	697a      	ldr	r2, [r7, #20]
 8006b7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	693a      	ldr	r2, [r7, #16]
 8006b80:	621a      	str	r2, [r3, #32]
}
 8006b82:	bf00      	nop
 8006b84:	371c      	adds	r7, #28
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	40010000 	.word	0x40010000
 8006b94:	40000400 	.word	0x40000400
 8006b98:	40000800 	.word	0x40000800
 8006b9c:	40000c00 	.word	0x40000c00
 8006ba0:	40014000 	.word	0x40014000

08006ba4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b087      	sub	sp, #28
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6a1b      	ldr	r3, [r3, #32]
 8006bb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	6a1b      	ldr	r3, [r3, #32]
 8006bba:	f023 0201 	bic.w	r2, r3, #1
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	699b      	ldr	r3, [r3, #24]
 8006bc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	011b      	lsls	r3, r3, #4
 8006bd4:	693a      	ldr	r2, [r7, #16]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	f023 030a 	bic.w	r3, r3, #10
 8006be0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006be2:	697a      	ldr	r2, [r7, #20]
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	693a      	ldr	r2, [r7, #16]
 8006bee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	697a      	ldr	r2, [r7, #20]
 8006bf4:	621a      	str	r2, [r3, #32]
}
 8006bf6:	bf00      	nop
 8006bf8:	371c      	adds	r7, #28
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr

08006c02 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c02:	b480      	push	{r7}
 8006c04:	b087      	sub	sp, #28
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	60f8      	str	r0, [r7, #12]
 8006c0a:	60b9      	str	r1, [r7, #8]
 8006c0c:	607a      	str	r2, [r7, #4]
 8006c0e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6a1b      	ldr	r3, [r3, #32]
 8006c14:	f023 0210 	bic.w	r2, r3, #16
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	699b      	ldr	r3, [r3, #24]
 8006c20:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6a1b      	ldr	r3, [r3, #32]
 8006c26:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c2e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	021b      	lsls	r3, r3, #8
 8006c34:	697a      	ldr	r2, [r7, #20]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	031b      	lsls	r3, r3, #12
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	697a      	ldr	r2, [r7, #20]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c54:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	011b      	lsls	r3, r3, #4
 8006c5a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006c5e:	693a      	ldr	r2, [r7, #16]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	697a      	ldr	r2, [r7, #20]
 8006c68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	693a      	ldr	r2, [r7, #16]
 8006c6e:	621a      	str	r2, [r3, #32]
}
 8006c70:	bf00      	nop
 8006c72:	371c      	adds	r7, #28
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b087      	sub	sp, #28
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6a1b      	ldr	r3, [r3, #32]
 8006c8c:	f023 0210 	bic.w	r2, r3, #16
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	699b      	ldr	r3, [r3, #24]
 8006c98:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6a1b      	ldr	r3, [r3, #32]
 8006c9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ca6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	031b      	lsls	r3, r3, #12
 8006cac:	697a      	ldr	r2, [r7, #20]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006cb8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	011b      	lsls	r3, r3, #4
 8006cbe:	693a      	ldr	r2, [r7, #16]
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	697a      	ldr	r2, [r7, #20]
 8006cc8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	693a      	ldr	r2, [r7, #16]
 8006cce:	621a      	str	r2, [r3, #32]
}
 8006cd0:	bf00      	nop
 8006cd2:	371c      	adds	r7, #28
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b087      	sub	sp, #28
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	607a      	str	r2, [r7, #4]
 8006ce8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6a1b      	ldr	r3, [r3, #32]
 8006cee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	69db      	ldr	r3, [r3, #28]
 8006cfa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6a1b      	ldr	r3, [r3, #32]
 8006d00:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	f023 0303 	bic.w	r3, r3, #3
 8006d08:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006d0a:	697a      	ldr	r2, [r7, #20]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d18:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	011b      	lsls	r3, r3, #4
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	697a      	ldr	r2, [r7, #20]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006d2c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	021b      	lsls	r3, r3, #8
 8006d32:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006d36:	693a      	ldr	r2, [r7, #16]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	697a      	ldr	r2, [r7, #20]
 8006d40:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	693a      	ldr	r2, [r7, #16]
 8006d46:	621a      	str	r2, [r3, #32]
}
 8006d48:	bf00      	nop
 8006d4a:	371c      	adds	r7, #28
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b087      	sub	sp, #28
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	607a      	str	r2, [r7, #4]
 8006d60:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	6a1b      	ldr	r3, [r3, #32]
 8006d66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	69db      	ldr	r3, [r3, #28]
 8006d72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6a1b      	ldr	r3, [r3, #32]
 8006d78:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d80:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	021b      	lsls	r3, r3, #8
 8006d86:	697a      	ldr	r2, [r7, #20]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d92:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	031b      	lsls	r3, r3, #12
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	697a      	ldr	r2, [r7, #20]
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006da6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	031b      	lsls	r3, r3, #12
 8006dac:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006db0:	693a      	ldr	r2, [r7, #16]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	697a      	ldr	r2, [r7, #20]
 8006dba:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	693a      	ldr	r2, [r7, #16]
 8006dc0:	621a      	str	r2, [r3, #32]
}
 8006dc2:	bf00      	nop
 8006dc4:	371c      	adds	r7, #28
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr

08006dce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006dce:	b480      	push	{r7}
 8006dd0:	b085      	sub	sp, #20
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
 8006dd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006de4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006de6:	683a      	ldr	r2, [r7, #0]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	f043 0307 	orr.w	r3, r3, #7
 8006df0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	68fa      	ldr	r2, [r7, #12]
 8006df6:	609a      	str	r2, [r3, #8]
}
 8006df8:	bf00      	nop
 8006dfa:	3714      	adds	r7, #20
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b087      	sub	sp, #28
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	607a      	str	r2, [r7, #4]
 8006e10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	021a      	lsls	r2, r3, #8
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	431a      	orrs	r2, r3
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	697a      	ldr	r2, [r7, #20]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	697a      	ldr	r2, [r7, #20]
 8006e36:	609a      	str	r2, [r3, #8]
}
 8006e38:	bf00      	nop
 8006e3a:	371c      	adds	r7, #28
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b087      	sub	sp, #28
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	f003 031f 	and.w	r3, r3, #31
 8006e56:	2201      	movs	r2, #1
 8006e58:	fa02 f303 	lsl.w	r3, r2, r3
 8006e5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6a1a      	ldr	r2, [r3, #32]
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	43db      	mvns	r3, r3
 8006e66:	401a      	ands	r2, r3
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6a1a      	ldr	r2, [r3, #32]
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	f003 031f 	and.w	r3, r3, #31
 8006e76:	6879      	ldr	r1, [r7, #4]
 8006e78:	fa01 f303 	lsl.w	r3, r1, r3
 8006e7c:	431a      	orrs	r2, r3
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	621a      	str	r2, [r3, #32]
}
 8006e82:	bf00      	nop
 8006e84:	371c      	adds	r7, #28
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr
	...

08006e90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d101      	bne.n	8006ea8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ea4:	2302      	movs	r3, #2
 8006ea6:	e050      	b.n	8006f4a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2202      	movs	r2, #2
 8006eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ece:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	68fa      	ldr	r2, [r7, #12]
 8006ee0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a1c      	ldr	r2, [pc, #112]	; (8006f58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d018      	beq.n	8006f1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ef4:	d013      	beq.n	8006f1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a18      	ldr	r2, [pc, #96]	; (8006f5c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d00e      	beq.n	8006f1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a16      	ldr	r2, [pc, #88]	; (8006f60 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d009      	beq.n	8006f1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a15      	ldr	r2, [pc, #84]	; (8006f64 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d004      	beq.n	8006f1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a13      	ldr	r2, [pc, #76]	; (8006f68 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d10c      	bne.n	8006f38 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	68ba      	ldr	r2, [r7, #8]
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	68ba      	ldr	r2, [r7, #8]
 8006f36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3714      	adds	r7, #20
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	40010000 	.word	0x40010000
 8006f5c:	40000400 	.word	0x40000400
 8006f60:	40000800 	.word	0x40000800
 8006f64:	40000c00 	.word	0x40000c00
 8006f68:	40014000 	.word	0x40014000

08006f6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f74:	bf00      	nop
 8006f76:	370c      	adds	r7, #12
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f88:	bf00      	nop
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d101      	bne.n	8006fa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e03f      	b.n	8007026 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d106      	bne.n	8006fc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f7fc fd00 	bl	80039c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2224      	movs	r2, #36	; 0x24
 8006fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	68da      	ldr	r2, [r3, #12]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006fd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 fd23 	bl	8007a24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	691a      	ldr	r2, [r3, #16]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006fec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	695a      	ldr	r2, [r3, #20]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ffc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	68da      	ldr	r2, [r3, #12]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800700c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2220      	movs	r2, #32
 8007018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2220      	movs	r2, #32
 8007020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3708      	adds	r7, #8
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}

0800702e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800702e:	b480      	push	{r7}
 8007030:	b085      	sub	sp, #20
 8007032:	af00      	add	r7, sp, #0
 8007034:	60f8      	str	r0, [r7, #12]
 8007036:	60b9      	str	r1, [r7, #8]
 8007038:	4613      	mov	r3, r2
 800703a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007042:	b2db      	uxtb	r3, r3
 8007044:	2b20      	cmp	r3, #32
 8007046:	d130      	bne.n	80070aa <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d002      	beq.n	8007054 <HAL_UART_Transmit_IT+0x26>
 800704e:	88fb      	ldrh	r3, [r7, #6]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d101      	bne.n	8007058 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	e029      	b.n	80070ac <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800705e:	2b01      	cmp	r3, #1
 8007060:	d101      	bne.n	8007066 <HAL_UART_Transmit_IT+0x38>
 8007062:	2302      	movs	r3, #2
 8007064:	e022      	b.n	80070ac <HAL_UART_Transmit_IT+0x7e>
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2201      	movs	r2, #1
 800706a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	68ba      	ldr	r2, [r7, #8]
 8007072:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	88fa      	ldrh	r2, [r7, #6]
 8007078:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	88fa      	ldrh	r2, [r7, #6]
 800707e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2200      	movs	r2, #0
 8007084:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2221      	movs	r2, #33	; 0x21
 800708a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2200      	movs	r2, #0
 8007092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	68da      	ldr	r2, [r3, #12]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80070a4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80070a6:	2300      	movs	r3, #0
 80070a8:	e000      	b.n	80070ac <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80070aa:	2302      	movs	r3, #2
  }
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3714      	adds	r7, #20
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	4613      	mov	r3, r2
 80070c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	2b20      	cmp	r3, #32
 80070d0:	d11d      	bne.n	800710e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d002      	beq.n	80070de <HAL_UART_Receive_IT+0x26>
 80070d8:	88fb      	ldrh	r3, [r7, #6]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d101      	bne.n	80070e2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	e016      	b.n	8007110 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d101      	bne.n	80070f0 <HAL_UART_Receive_IT+0x38>
 80070ec:	2302      	movs	r3, #2
 80070ee:	e00f      	b.n	8007110 <HAL_UART_Receive_IT+0x58>
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2200      	movs	r2, #0
 80070fc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80070fe:	88fb      	ldrh	r3, [r7, #6]
 8007100:	461a      	mov	r2, r3
 8007102:	68b9      	ldr	r1, [r7, #8]
 8007104:	68f8      	ldr	r0, [r7, #12]
 8007106:	f000 fab5 	bl	8007674 <UART_Start_Receive_IT>
 800710a:	4603      	mov	r3, r0
 800710c:	e000      	b.n	8007110 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800710e:	2302      	movs	r3, #2
  }
}
 8007110:	4618      	mov	r0, r3
 8007112:	3710      	adds	r7, #16
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b0ba      	sub	sp, #232	; 0xe8
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	695b      	ldr	r3, [r3, #20]
 800713a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800713e:	2300      	movs	r3, #0
 8007140:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007144:	2300      	movs	r3, #0
 8007146:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800714a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800714e:	f003 030f 	and.w	r3, r3, #15
 8007152:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007156:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800715a:	2b00      	cmp	r3, #0
 800715c:	d10f      	bne.n	800717e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800715e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007162:	f003 0320 	and.w	r3, r3, #32
 8007166:	2b00      	cmp	r3, #0
 8007168:	d009      	beq.n	800717e <HAL_UART_IRQHandler+0x66>
 800716a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800716e:	f003 0320 	and.w	r3, r3, #32
 8007172:	2b00      	cmp	r3, #0
 8007174:	d003      	beq.n	800717e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 fb99 	bl	80078ae <UART_Receive_IT>
      return;
 800717c:	e256      	b.n	800762c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800717e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007182:	2b00      	cmp	r3, #0
 8007184:	f000 80de 	beq.w	8007344 <HAL_UART_IRQHandler+0x22c>
 8007188:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800718c:	f003 0301 	and.w	r3, r3, #1
 8007190:	2b00      	cmp	r3, #0
 8007192:	d106      	bne.n	80071a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007198:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800719c:	2b00      	cmp	r3, #0
 800719e:	f000 80d1 	beq.w	8007344 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80071a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071a6:	f003 0301 	and.w	r3, r3, #1
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00b      	beq.n	80071c6 <HAL_UART_IRQHandler+0xae>
 80071ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d005      	beq.n	80071c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071be:	f043 0201 	orr.w	r2, r3, #1
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80071c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ca:	f003 0304 	and.w	r3, r3, #4
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d00b      	beq.n	80071ea <HAL_UART_IRQHandler+0xd2>
 80071d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071d6:	f003 0301 	and.w	r3, r3, #1
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d005      	beq.n	80071ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e2:	f043 0202 	orr.w	r2, r3, #2
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80071ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ee:	f003 0302 	and.w	r3, r3, #2
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d00b      	beq.n	800720e <HAL_UART_IRQHandler+0xf6>
 80071f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071fa:	f003 0301 	and.w	r3, r3, #1
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d005      	beq.n	800720e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007206:	f043 0204 	orr.w	r2, r3, #4
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800720e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007212:	f003 0308 	and.w	r3, r3, #8
 8007216:	2b00      	cmp	r3, #0
 8007218:	d011      	beq.n	800723e <HAL_UART_IRQHandler+0x126>
 800721a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800721e:	f003 0320 	and.w	r3, r3, #32
 8007222:	2b00      	cmp	r3, #0
 8007224:	d105      	bne.n	8007232 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007226:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800722a:	f003 0301 	and.w	r3, r3, #1
 800722e:	2b00      	cmp	r3, #0
 8007230:	d005      	beq.n	800723e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007236:	f043 0208 	orr.w	r2, r3, #8
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007242:	2b00      	cmp	r3, #0
 8007244:	f000 81ed 	beq.w	8007622 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800724c:	f003 0320 	and.w	r3, r3, #32
 8007250:	2b00      	cmp	r3, #0
 8007252:	d008      	beq.n	8007266 <HAL_UART_IRQHandler+0x14e>
 8007254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007258:	f003 0320 	and.w	r3, r3, #32
 800725c:	2b00      	cmp	r3, #0
 800725e:	d002      	beq.n	8007266 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 fb24 	bl	80078ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	695b      	ldr	r3, [r3, #20]
 800726c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007270:	2b40      	cmp	r3, #64	; 0x40
 8007272:	bf0c      	ite	eq
 8007274:	2301      	moveq	r3, #1
 8007276:	2300      	movne	r3, #0
 8007278:	b2db      	uxtb	r3, r3
 800727a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007282:	f003 0308 	and.w	r3, r3, #8
 8007286:	2b00      	cmp	r3, #0
 8007288:	d103      	bne.n	8007292 <HAL_UART_IRQHandler+0x17a>
 800728a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800728e:	2b00      	cmp	r3, #0
 8007290:	d04f      	beq.n	8007332 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 fa2c 	bl	80076f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	695b      	ldr	r3, [r3, #20]
 800729e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072a2:	2b40      	cmp	r3, #64	; 0x40
 80072a4:	d141      	bne.n	800732a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	3314      	adds	r3, #20
 80072ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80072b4:	e853 3f00 	ldrex	r3, [r3]
 80072b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80072bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	3314      	adds	r3, #20
 80072ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80072d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80072d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80072de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80072e2:	e841 2300 	strex	r3, r2, [r1]
 80072e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80072ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d1d9      	bne.n	80072a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d013      	beq.n	8007322 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072fe:	4a7d      	ldr	r2, [pc, #500]	; (80074f4 <HAL_UART_IRQHandler+0x3dc>)
 8007300:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007306:	4618      	mov	r0, r3
 8007308:	f7fd fc71 	bl	8004bee <HAL_DMA_Abort_IT>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d016      	beq.n	8007340 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800731c:	4610      	mov	r0, r2
 800731e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007320:	e00e      	b.n	8007340 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 f990 	bl	8007648 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007328:	e00a      	b.n	8007340 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 f98c 	bl	8007648 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007330:	e006      	b.n	8007340 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 f988 	bl	8007648 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800733e:	e170      	b.n	8007622 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007340:	bf00      	nop
    return;
 8007342:	e16e      	b.n	8007622 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007348:	2b01      	cmp	r3, #1
 800734a:	f040 814a 	bne.w	80075e2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800734e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007352:	f003 0310 	and.w	r3, r3, #16
 8007356:	2b00      	cmp	r3, #0
 8007358:	f000 8143 	beq.w	80075e2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800735c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007360:	f003 0310 	and.w	r3, r3, #16
 8007364:	2b00      	cmp	r3, #0
 8007366:	f000 813c 	beq.w	80075e2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800736a:	2300      	movs	r3, #0
 800736c:	60bb      	str	r3, [r7, #8]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	60bb      	str	r3, [r7, #8]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	60bb      	str	r3, [r7, #8]
 800737e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	695b      	ldr	r3, [r3, #20]
 8007386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800738a:	2b40      	cmp	r3, #64	; 0x40
 800738c:	f040 80b4 	bne.w	80074f8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800739c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f000 8140 	beq.w	8007626 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80073aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80073ae:	429a      	cmp	r2, r3
 80073b0:	f080 8139 	bcs.w	8007626 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80073ba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c0:	69db      	ldr	r3, [r3, #28]
 80073c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073c6:	f000 8088 	beq.w	80074da <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	330c      	adds	r3, #12
 80073d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80073d8:	e853 3f00 	ldrex	r3, [r3]
 80073dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80073e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80073e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	330c      	adds	r3, #12
 80073f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80073f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80073fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007402:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007406:	e841 2300 	strex	r3, r2, [r1]
 800740a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800740e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007412:	2b00      	cmp	r3, #0
 8007414:	d1d9      	bne.n	80073ca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	3314      	adds	r3, #20
 800741c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007420:	e853 3f00 	ldrex	r3, [r3]
 8007424:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007426:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007428:	f023 0301 	bic.w	r3, r3, #1
 800742c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	3314      	adds	r3, #20
 8007436:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800743a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800743e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007440:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007442:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007446:	e841 2300 	strex	r3, r2, [r1]
 800744a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800744c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800744e:	2b00      	cmp	r3, #0
 8007450:	d1e1      	bne.n	8007416 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	3314      	adds	r3, #20
 8007458:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800745c:	e853 3f00 	ldrex	r3, [r3]
 8007460:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007462:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007464:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007468:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	3314      	adds	r3, #20
 8007472:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007476:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007478:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800747c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800747e:	e841 2300 	strex	r3, r2, [r1]
 8007482:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007484:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1e3      	bne.n	8007452 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2220      	movs	r2, #32
 800748e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	330c      	adds	r3, #12
 800749e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074a2:	e853 3f00 	ldrex	r3, [r3]
 80074a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80074a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074aa:	f023 0310 	bic.w	r3, r3, #16
 80074ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	330c      	adds	r3, #12
 80074b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80074bc:	65ba      	str	r2, [r7, #88]	; 0x58
 80074be:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80074c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80074c4:	e841 2300 	strex	r3, r2, [r1]
 80074c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80074ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d1e3      	bne.n	8007498 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d4:	4618      	mov	r0, r3
 80074d6:	f7fd fb1a 	bl	8004b0e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	1ad3      	subs	r3, r2, r3
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	4619      	mov	r1, r3
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 f8b6 	bl	800765c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80074f0:	e099      	b.n	8007626 <HAL_UART_IRQHandler+0x50e>
 80074f2:	bf00      	nop
 80074f4:	080077b7 	.word	0x080077b7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007500:	b29b      	uxth	r3, r3
 8007502:	1ad3      	subs	r3, r2, r3
 8007504:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800750c:	b29b      	uxth	r3, r3
 800750e:	2b00      	cmp	r3, #0
 8007510:	f000 808b 	beq.w	800762a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007514:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007518:	2b00      	cmp	r3, #0
 800751a:	f000 8086 	beq.w	800762a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	330c      	adds	r3, #12
 8007524:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007528:	e853 3f00 	ldrex	r3, [r3]
 800752c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800752e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007530:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007534:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	330c      	adds	r3, #12
 800753e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007542:	647a      	str	r2, [r7, #68]	; 0x44
 8007544:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007546:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007548:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800754a:	e841 2300 	strex	r3, r2, [r1]
 800754e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007552:	2b00      	cmp	r3, #0
 8007554:	d1e3      	bne.n	800751e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	3314      	adds	r3, #20
 800755c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800755e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007560:	e853 3f00 	ldrex	r3, [r3]
 8007564:	623b      	str	r3, [r7, #32]
   return(result);
 8007566:	6a3b      	ldr	r3, [r7, #32]
 8007568:	f023 0301 	bic.w	r3, r3, #1
 800756c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	3314      	adds	r3, #20
 8007576:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800757a:	633a      	str	r2, [r7, #48]	; 0x30
 800757c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007580:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007582:	e841 2300 	strex	r3, r2, [r1]
 8007586:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758a:	2b00      	cmp	r3, #0
 800758c:	d1e3      	bne.n	8007556 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2220      	movs	r2, #32
 8007592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	330c      	adds	r3, #12
 80075a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	e853 3f00 	ldrex	r3, [r3]
 80075aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f023 0310 	bic.w	r3, r3, #16
 80075b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	330c      	adds	r3, #12
 80075bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80075c0:	61fa      	str	r2, [r7, #28]
 80075c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c4:	69b9      	ldr	r1, [r7, #24]
 80075c6:	69fa      	ldr	r2, [r7, #28]
 80075c8:	e841 2300 	strex	r3, r2, [r1]
 80075cc:	617b      	str	r3, [r7, #20]
   return(result);
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d1e3      	bne.n	800759c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80075d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80075d8:	4619      	mov	r1, r3
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 f83e 	bl	800765c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80075e0:	e023      	b.n	800762a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80075e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d009      	beq.n	8007602 <HAL_UART_IRQHandler+0x4ea>
 80075ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d003      	beq.n	8007602 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 f8ef 	bl	80077de <UART_Transmit_IT>
    return;
 8007600:	e014      	b.n	800762c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800760a:	2b00      	cmp	r3, #0
 800760c:	d00e      	beq.n	800762c <HAL_UART_IRQHandler+0x514>
 800760e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007616:	2b00      	cmp	r3, #0
 8007618:	d008      	beq.n	800762c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 f92f 	bl	800787e <UART_EndTransmit_IT>
    return;
 8007620:	e004      	b.n	800762c <HAL_UART_IRQHandler+0x514>
    return;
 8007622:	bf00      	nop
 8007624:	e002      	b.n	800762c <HAL_UART_IRQHandler+0x514>
      return;
 8007626:	bf00      	nop
 8007628:	e000      	b.n	800762c <HAL_UART_IRQHandler+0x514>
      return;
 800762a:	bf00      	nop
  }
}
 800762c:	37e8      	adds	r7, #232	; 0xe8
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop

08007634 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800763c:	bf00      	nop
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007650:	bf00      	nop
 8007652:	370c      	adds	r7, #12
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr

0800765c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800765c:	b480      	push	{r7}
 800765e:	b083      	sub	sp, #12
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	460b      	mov	r3, r1
 8007666:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007668:	bf00      	nop
 800766a:	370c      	adds	r7, #12
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr

08007674 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007674:	b480      	push	{r7}
 8007676:	b085      	sub	sp, #20
 8007678:	af00      	add	r7, sp, #0
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	60b9      	str	r1, [r7, #8]
 800767e:	4613      	mov	r3, r2
 8007680:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	68ba      	ldr	r2, [r7, #8]
 8007686:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	88fa      	ldrh	r2, [r7, #6]
 800768c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	88fa      	ldrh	r2, [r7, #6]
 8007692:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2200      	movs	r2, #0
 8007698:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2222      	movs	r2, #34	; 0x22
 800769e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	691b      	ldr	r3, [r3, #16]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d007      	beq.n	80076c2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	68da      	ldr	r2, [r3, #12]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076c0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	695a      	ldr	r2, [r3, #20]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f042 0201 	orr.w	r2, r2, #1
 80076d0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	68da      	ldr	r2, [r3, #12]
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f042 0220 	orr.w	r2, r2, #32
 80076e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80076e2:	2300      	movs	r3, #0
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3714      	adds	r7, #20
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b095      	sub	sp, #84	; 0x54
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	330c      	adds	r3, #12
 80076fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007702:	e853 3f00 	ldrex	r3, [r3]
 8007706:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800770e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	330c      	adds	r3, #12
 8007716:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007718:	643a      	str	r2, [r7, #64]	; 0x40
 800771a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800771e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007720:	e841 2300 	strex	r3, r2, [r1]
 8007724:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007728:	2b00      	cmp	r3, #0
 800772a:	d1e5      	bne.n	80076f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	3314      	adds	r3, #20
 8007732:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007734:	6a3b      	ldr	r3, [r7, #32]
 8007736:	e853 3f00 	ldrex	r3, [r3]
 800773a:	61fb      	str	r3, [r7, #28]
   return(result);
 800773c:	69fb      	ldr	r3, [r7, #28]
 800773e:	f023 0301 	bic.w	r3, r3, #1
 8007742:	64bb      	str	r3, [r7, #72]	; 0x48
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	3314      	adds	r3, #20
 800774a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800774c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800774e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007750:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007752:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007754:	e841 2300 	strex	r3, r2, [r1]
 8007758:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800775a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775c:	2b00      	cmp	r3, #0
 800775e:	d1e5      	bne.n	800772c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007764:	2b01      	cmp	r3, #1
 8007766:	d119      	bne.n	800779c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	330c      	adds	r3, #12
 800776e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	e853 3f00 	ldrex	r3, [r3]
 8007776:	60bb      	str	r3, [r7, #8]
   return(result);
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	f023 0310 	bic.w	r3, r3, #16
 800777e:	647b      	str	r3, [r7, #68]	; 0x44
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	330c      	adds	r3, #12
 8007786:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007788:	61ba      	str	r2, [r7, #24]
 800778a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778c:	6979      	ldr	r1, [r7, #20]
 800778e:	69ba      	ldr	r2, [r7, #24]
 8007790:	e841 2300 	strex	r3, r2, [r1]
 8007794:	613b      	str	r3, [r7, #16]
   return(result);
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d1e5      	bne.n	8007768 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2220      	movs	r2, #32
 80077a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80077aa:	bf00      	nop
 80077ac:	3754      	adds	r7, #84	; 0x54
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr

080077b6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80077b6:	b580      	push	{r7, lr}
 80077b8:	b084      	sub	sp, #16
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2200      	movs	r2, #0
 80077c8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2200      	movs	r2, #0
 80077ce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80077d0:	68f8      	ldr	r0, [r7, #12]
 80077d2:	f7ff ff39 	bl	8007648 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077d6:	bf00      	nop
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}

080077de <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80077de:	b480      	push	{r7}
 80077e0:	b085      	sub	sp, #20
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	2b21      	cmp	r3, #33	; 0x21
 80077f0:	d13e      	bne.n	8007870 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077fa:	d114      	bne.n	8007826 <UART_Transmit_IT+0x48>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	691b      	ldr	r3, [r3, #16]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d110      	bne.n	8007826 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6a1b      	ldr	r3, [r3, #32]
 8007808:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	881b      	ldrh	r3, [r3, #0]
 800780e:	461a      	mov	r2, r3
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007818:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a1b      	ldr	r3, [r3, #32]
 800781e:	1c9a      	adds	r2, r3, #2
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	621a      	str	r2, [r3, #32]
 8007824:	e008      	b.n	8007838 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6a1b      	ldr	r3, [r3, #32]
 800782a:	1c59      	adds	r1, r3, #1
 800782c:	687a      	ldr	r2, [r7, #4]
 800782e:	6211      	str	r1, [r2, #32]
 8007830:	781a      	ldrb	r2, [r3, #0]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800783c:	b29b      	uxth	r3, r3
 800783e:	3b01      	subs	r3, #1
 8007840:	b29b      	uxth	r3, r3
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	4619      	mov	r1, r3
 8007846:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007848:	2b00      	cmp	r3, #0
 800784a:	d10f      	bne.n	800786c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	68da      	ldr	r2, [r3, #12]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800785a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	68da      	ldr	r2, [r3, #12]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800786a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800786c:	2300      	movs	r3, #0
 800786e:	e000      	b.n	8007872 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007870:	2302      	movs	r3, #2
  }
}
 8007872:	4618      	mov	r0, r3
 8007874:	3714      	adds	r7, #20
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr

0800787e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800787e:	b580      	push	{r7, lr}
 8007880:	b082      	sub	sp, #8
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	68da      	ldr	r2, [r3, #12]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007894:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2220      	movs	r2, #32
 800789a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f7ff fec8 	bl	8007634 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3708      	adds	r7, #8
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}

080078ae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80078ae:	b580      	push	{r7, lr}
 80078b0:	b08c      	sub	sp, #48	; 0x30
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	2b22      	cmp	r3, #34	; 0x22
 80078c0:	f040 80ab 	bne.w	8007a1a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078cc:	d117      	bne.n	80078fe <UART_Receive_IT+0x50>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	691b      	ldr	r3, [r3, #16]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d113      	bne.n	80078fe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80078d6:	2300      	movs	r3, #0
 80078d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078de:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078ec:	b29a      	uxth	r2, r3
 80078ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078f6:	1c9a      	adds	r2, r3, #2
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	629a      	str	r2, [r3, #40]	; 0x28
 80078fc:	e026      	b.n	800794c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007902:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007904:	2300      	movs	r3, #0
 8007906:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007910:	d007      	beq.n	8007922 <UART_Receive_IT+0x74>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	689b      	ldr	r3, [r3, #8]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d10a      	bne.n	8007930 <UART_Receive_IT+0x82>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	691b      	ldr	r3, [r3, #16]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d106      	bne.n	8007930 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	b2da      	uxtb	r2, r3
 800792a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800792c:	701a      	strb	r2, [r3, #0]
 800792e:	e008      	b.n	8007942 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	b2db      	uxtb	r3, r3
 8007938:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800793c:	b2da      	uxtb	r2, r3
 800793e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007940:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007946:	1c5a      	adds	r2, r3, #1
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007950:	b29b      	uxth	r3, r3
 8007952:	3b01      	subs	r3, #1
 8007954:	b29b      	uxth	r3, r3
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	4619      	mov	r1, r3
 800795a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800795c:	2b00      	cmp	r3, #0
 800795e:	d15a      	bne.n	8007a16 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	68da      	ldr	r2, [r3, #12]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f022 0220 	bic.w	r2, r2, #32
 800796e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	68da      	ldr	r2, [r3, #12]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800797e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	695a      	ldr	r2, [r3, #20]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f022 0201 	bic.w	r2, r2, #1
 800798e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2220      	movs	r2, #32
 8007994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800799c:	2b01      	cmp	r3, #1
 800799e:	d135      	bne.n	8007a0c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	330c      	adds	r3, #12
 80079ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	e853 3f00 	ldrex	r3, [r3]
 80079b4:	613b      	str	r3, [r7, #16]
   return(result);
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	f023 0310 	bic.w	r3, r3, #16
 80079bc:	627b      	str	r3, [r7, #36]	; 0x24
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	330c      	adds	r3, #12
 80079c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079c6:	623a      	str	r2, [r7, #32]
 80079c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ca:	69f9      	ldr	r1, [r7, #28]
 80079cc:	6a3a      	ldr	r2, [r7, #32]
 80079ce:	e841 2300 	strex	r3, r2, [r1]
 80079d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d1e5      	bne.n	80079a6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f003 0310 	and.w	r3, r3, #16
 80079e4:	2b10      	cmp	r3, #16
 80079e6:	d10a      	bne.n	80079fe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80079e8:	2300      	movs	r3, #0
 80079ea:	60fb      	str	r3, [r7, #12]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	60fb      	str	r3, [r7, #12]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	60fb      	str	r3, [r7, #12]
 80079fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007a02:	4619      	mov	r1, r3
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f7ff fe29 	bl	800765c <HAL_UARTEx_RxEventCallback>
 8007a0a:	e002      	b.n	8007a12 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f7f9 fbfb 	bl	8001208 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007a12:	2300      	movs	r3, #0
 8007a14:	e002      	b.n	8007a1c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007a16:	2300      	movs	r3, #0
 8007a18:	e000      	b.n	8007a1c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007a1a:	2302      	movs	r3, #2
  }
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3730      	adds	r7, #48	; 0x30
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a28:	b0c0      	sub	sp, #256	; 0x100
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	691b      	ldr	r3, [r3, #16]
 8007a38:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a40:	68d9      	ldr	r1, [r3, #12]
 8007a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	ea40 0301 	orr.w	r3, r0, r1
 8007a4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a52:	689a      	ldr	r2, [r3, #8]
 8007a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a58:	691b      	ldr	r3, [r3, #16]
 8007a5a:	431a      	orrs	r2, r3
 8007a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a60:	695b      	ldr	r3, [r3, #20]
 8007a62:	431a      	orrs	r2, r3
 8007a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a68:	69db      	ldr	r3, [r3, #28]
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007a7c:	f021 010c 	bic.w	r1, r1, #12
 8007a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007a8a:	430b      	orrs	r3, r1
 8007a8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	695b      	ldr	r3, [r3, #20]
 8007a96:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a9e:	6999      	ldr	r1, [r3, #24]
 8007aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	ea40 0301 	orr.w	r3, r0, r1
 8007aaa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	4b8f      	ldr	r3, [pc, #572]	; (8007cf0 <UART_SetConfig+0x2cc>)
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d005      	beq.n	8007ac4 <UART_SetConfig+0xa0>
 8007ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	4b8d      	ldr	r3, [pc, #564]	; (8007cf4 <UART_SetConfig+0x2d0>)
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d104      	bne.n	8007ace <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007ac4:	f7fd ff2e 	bl	8005924 <HAL_RCC_GetPCLK2Freq>
 8007ac8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007acc:	e003      	b.n	8007ad6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007ace:	f7fd ff15 	bl	80058fc <HAL_RCC_GetPCLK1Freq>
 8007ad2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ada:	69db      	ldr	r3, [r3, #28]
 8007adc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ae0:	f040 810c 	bne.w	8007cfc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007ae4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007aee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007af2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007af6:	4622      	mov	r2, r4
 8007af8:	462b      	mov	r3, r5
 8007afa:	1891      	adds	r1, r2, r2
 8007afc:	65b9      	str	r1, [r7, #88]	; 0x58
 8007afe:	415b      	adcs	r3, r3
 8007b00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007b06:	4621      	mov	r1, r4
 8007b08:	eb12 0801 	adds.w	r8, r2, r1
 8007b0c:	4629      	mov	r1, r5
 8007b0e:	eb43 0901 	adc.w	r9, r3, r1
 8007b12:	f04f 0200 	mov.w	r2, #0
 8007b16:	f04f 0300 	mov.w	r3, #0
 8007b1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007b1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007b22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007b26:	4690      	mov	r8, r2
 8007b28:	4699      	mov	r9, r3
 8007b2a:	4623      	mov	r3, r4
 8007b2c:	eb18 0303 	adds.w	r3, r8, r3
 8007b30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007b34:	462b      	mov	r3, r5
 8007b36:	eb49 0303 	adc.w	r3, r9, r3
 8007b3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007b4a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007b4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007b52:	460b      	mov	r3, r1
 8007b54:	18db      	adds	r3, r3, r3
 8007b56:	653b      	str	r3, [r7, #80]	; 0x50
 8007b58:	4613      	mov	r3, r2
 8007b5a:	eb42 0303 	adc.w	r3, r2, r3
 8007b5e:	657b      	str	r3, [r7, #84]	; 0x54
 8007b60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007b64:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007b68:	f7f9 f896 	bl	8000c98 <__aeabi_uldivmod>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	460b      	mov	r3, r1
 8007b70:	4b61      	ldr	r3, [pc, #388]	; (8007cf8 <UART_SetConfig+0x2d4>)
 8007b72:	fba3 2302 	umull	r2, r3, r3, r2
 8007b76:	095b      	lsrs	r3, r3, #5
 8007b78:	011c      	lsls	r4, r3, #4
 8007b7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b84:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007b88:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007b8c:	4642      	mov	r2, r8
 8007b8e:	464b      	mov	r3, r9
 8007b90:	1891      	adds	r1, r2, r2
 8007b92:	64b9      	str	r1, [r7, #72]	; 0x48
 8007b94:	415b      	adcs	r3, r3
 8007b96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007b9c:	4641      	mov	r1, r8
 8007b9e:	eb12 0a01 	adds.w	sl, r2, r1
 8007ba2:	4649      	mov	r1, r9
 8007ba4:	eb43 0b01 	adc.w	fp, r3, r1
 8007ba8:	f04f 0200 	mov.w	r2, #0
 8007bac:	f04f 0300 	mov.w	r3, #0
 8007bb0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007bb4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007bb8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007bbc:	4692      	mov	sl, r2
 8007bbe:	469b      	mov	fp, r3
 8007bc0:	4643      	mov	r3, r8
 8007bc2:	eb1a 0303 	adds.w	r3, sl, r3
 8007bc6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007bca:	464b      	mov	r3, r9
 8007bcc:	eb4b 0303 	adc.w	r3, fp, r3
 8007bd0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007be0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007be4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007be8:	460b      	mov	r3, r1
 8007bea:	18db      	adds	r3, r3, r3
 8007bec:	643b      	str	r3, [r7, #64]	; 0x40
 8007bee:	4613      	mov	r3, r2
 8007bf0:	eb42 0303 	adc.w	r3, r2, r3
 8007bf4:	647b      	str	r3, [r7, #68]	; 0x44
 8007bf6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007bfa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007bfe:	f7f9 f84b 	bl	8000c98 <__aeabi_uldivmod>
 8007c02:	4602      	mov	r2, r0
 8007c04:	460b      	mov	r3, r1
 8007c06:	4611      	mov	r1, r2
 8007c08:	4b3b      	ldr	r3, [pc, #236]	; (8007cf8 <UART_SetConfig+0x2d4>)
 8007c0a:	fba3 2301 	umull	r2, r3, r3, r1
 8007c0e:	095b      	lsrs	r3, r3, #5
 8007c10:	2264      	movs	r2, #100	; 0x64
 8007c12:	fb02 f303 	mul.w	r3, r2, r3
 8007c16:	1acb      	subs	r3, r1, r3
 8007c18:	00db      	lsls	r3, r3, #3
 8007c1a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007c1e:	4b36      	ldr	r3, [pc, #216]	; (8007cf8 <UART_SetConfig+0x2d4>)
 8007c20:	fba3 2302 	umull	r2, r3, r3, r2
 8007c24:	095b      	lsrs	r3, r3, #5
 8007c26:	005b      	lsls	r3, r3, #1
 8007c28:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007c2c:	441c      	add	r4, r3
 8007c2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c32:	2200      	movs	r2, #0
 8007c34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c38:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007c3c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007c40:	4642      	mov	r2, r8
 8007c42:	464b      	mov	r3, r9
 8007c44:	1891      	adds	r1, r2, r2
 8007c46:	63b9      	str	r1, [r7, #56]	; 0x38
 8007c48:	415b      	adcs	r3, r3
 8007c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007c50:	4641      	mov	r1, r8
 8007c52:	1851      	adds	r1, r2, r1
 8007c54:	6339      	str	r1, [r7, #48]	; 0x30
 8007c56:	4649      	mov	r1, r9
 8007c58:	414b      	adcs	r3, r1
 8007c5a:	637b      	str	r3, [r7, #52]	; 0x34
 8007c5c:	f04f 0200 	mov.w	r2, #0
 8007c60:	f04f 0300 	mov.w	r3, #0
 8007c64:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007c68:	4659      	mov	r1, fp
 8007c6a:	00cb      	lsls	r3, r1, #3
 8007c6c:	4651      	mov	r1, sl
 8007c6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c72:	4651      	mov	r1, sl
 8007c74:	00ca      	lsls	r2, r1, #3
 8007c76:	4610      	mov	r0, r2
 8007c78:	4619      	mov	r1, r3
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	4642      	mov	r2, r8
 8007c7e:	189b      	adds	r3, r3, r2
 8007c80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007c84:	464b      	mov	r3, r9
 8007c86:	460a      	mov	r2, r1
 8007c88:	eb42 0303 	adc.w	r3, r2, r3
 8007c8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007c9c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007ca0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	18db      	adds	r3, r3, r3
 8007ca8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007caa:	4613      	mov	r3, r2
 8007cac:	eb42 0303 	adc.w	r3, r2, r3
 8007cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007cb6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007cba:	f7f8 ffed 	bl	8000c98 <__aeabi_uldivmod>
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	4b0d      	ldr	r3, [pc, #52]	; (8007cf8 <UART_SetConfig+0x2d4>)
 8007cc4:	fba3 1302 	umull	r1, r3, r3, r2
 8007cc8:	095b      	lsrs	r3, r3, #5
 8007cca:	2164      	movs	r1, #100	; 0x64
 8007ccc:	fb01 f303 	mul.w	r3, r1, r3
 8007cd0:	1ad3      	subs	r3, r2, r3
 8007cd2:	00db      	lsls	r3, r3, #3
 8007cd4:	3332      	adds	r3, #50	; 0x32
 8007cd6:	4a08      	ldr	r2, [pc, #32]	; (8007cf8 <UART_SetConfig+0x2d4>)
 8007cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8007cdc:	095b      	lsrs	r3, r3, #5
 8007cde:	f003 0207 	and.w	r2, r3, #7
 8007ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4422      	add	r2, r4
 8007cea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007cec:	e105      	b.n	8007efa <UART_SetConfig+0x4d6>
 8007cee:	bf00      	nop
 8007cf0:	40011000 	.word	0x40011000
 8007cf4:	40011400 	.word	0x40011400
 8007cf8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007cfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d00:	2200      	movs	r2, #0
 8007d02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007d06:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007d0a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007d0e:	4642      	mov	r2, r8
 8007d10:	464b      	mov	r3, r9
 8007d12:	1891      	adds	r1, r2, r2
 8007d14:	6239      	str	r1, [r7, #32]
 8007d16:	415b      	adcs	r3, r3
 8007d18:	627b      	str	r3, [r7, #36]	; 0x24
 8007d1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007d1e:	4641      	mov	r1, r8
 8007d20:	1854      	adds	r4, r2, r1
 8007d22:	4649      	mov	r1, r9
 8007d24:	eb43 0501 	adc.w	r5, r3, r1
 8007d28:	f04f 0200 	mov.w	r2, #0
 8007d2c:	f04f 0300 	mov.w	r3, #0
 8007d30:	00eb      	lsls	r3, r5, #3
 8007d32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d36:	00e2      	lsls	r2, r4, #3
 8007d38:	4614      	mov	r4, r2
 8007d3a:	461d      	mov	r5, r3
 8007d3c:	4643      	mov	r3, r8
 8007d3e:	18e3      	adds	r3, r4, r3
 8007d40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007d44:	464b      	mov	r3, r9
 8007d46:	eb45 0303 	adc.w	r3, r5, r3
 8007d4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007d5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007d5e:	f04f 0200 	mov.w	r2, #0
 8007d62:	f04f 0300 	mov.w	r3, #0
 8007d66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007d6a:	4629      	mov	r1, r5
 8007d6c:	008b      	lsls	r3, r1, #2
 8007d6e:	4621      	mov	r1, r4
 8007d70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d74:	4621      	mov	r1, r4
 8007d76:	008a      	lsls	r2, r1, #2
 8007d78:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007d7c:	f7f8 ff8c 	bl	8000c98 <__aeabi_uldivmod>
 8007d80:	4602      	mov	r2, r0
 8007d82:	460b      	mov	r3, r1
 8007d84:	4b60      	ldr	r3, [pc, #384]	; (8007f08 <UART_SetConfig+0x4e4>)
 8007d86:	fba3 2302 	umull	r2, r3, r3, r2
 8007d8a:	095b      	lsrs	r3, r3, #5
 8007d8c:	011c      	lsls	r4, r3, #4
 8007d8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d92:	2200      	movs	r2, #0
 8007d94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007d98:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007d9c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007da0:	4642      	mov	r2, r8
 8007da2:	464b      	mov	r3, r9
 8007da4:	1891      	adds	r1, r2, r2
 8007da6:	61b9      	str	r1, [r7, #24]
 8007da8:	415b      	adcs	r3, r3
 8007daa:	61fb      	str	r3, [r7, #28]
 8007dac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007db0:	4641      	mov	r1, r8
 8007db2:	1851      	adds	r1, r2, r1
 8007db4:	6139      	str	r1, [r7, #16]
 8007db6:	4649      	mov	r1, r9
 8007db8:	414b      	adcs	r3, r1
 8007dba:	617b      	str	r3, [r7, #20]
 8007dbc:	f04f 0200 	mov.w	r2, #0
 8007dc0:	f04f 0300 	mov.w	r3, #0
 8007dc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007dc8:	4659      	mov	r1, fp
 8007dca:	00cb      	lsls	r3, r1, #3
 8007dcc:	4651      	mov	r1, sl
 8007dce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007dd2:	4651      	mov	r1, sl
 8007dd4:	00ca      	lsls	r2, r1, #3
 8007dd6:	4610      	mov	r0, r2
 8007dd8:	4619      	mov	r1, r3
 8007dda:	4603      	mov	r3, r0
 8007ddc:	4642      	mov	r2, r8
 8007dde:	189b      	adds	r3, r3, r2
 8007de0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007de4:	464b      	mov	r3, r9
 8007de6:	460a      	mov	r2, r1
 8007de8:	eb42 0303 	adc.w	r3, r2, r3
 8007dec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	67bb      	str	r3, [r7, #120]	; 0x78
 8007dfa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007dfc:	f04f 0200 	mov.w	r2, #0
 8007e00:	f04f 0300 	mov.w	r3, #0
 8007e04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007e08:	4649      	mov	r1, r9
 8007e0a:	008b      	lsls	r3, r1, #2
 8007e0c:	4641      	mov	r1, r8
 8007e0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e12:	4641      	mov	r1, r8
 8007e14:	008a      	lsls	r2, r1, #2
 8007e16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007e1a:	f7f8 ff3d 	bl	8000c98 <__aeabi_uldivmod>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	460b      	mov	r3, r1
 8007e22:	4b39      	ldr	r3, [pc, #228]	; (8007f08 <UART_SetConfig+0x4e4>)
 8007e24:	fba3 1302 	umull	r1, r3, r3, r2
 8007e28:	095b      	lsrs	r3, r3, #5
 8007e2a:	2164      	movs	r1, #100	; 0x64
 8007e2c:	fb01 f303 	mul.w	r3, r1, r3
 8007e30:	1ad3      	subs	r3, r2, r3
 8007e32:	011b      	lsls	r3, r3, #4
 8007e34:	3332      	adds	r3, #50	; 0x32
 8007e36:	4a34      	ldr	r2, [pc, #208]	; (8007f08 <UART_SetConfig+0x4e4>)
 8007e38:	fba2 2303 	umull	r2, r3, r2, r3
 8007e3c:	095b      	lsrs	r3, r3, #5
 8007e3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e42:	441c      	add	r4, r3
 8007e44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e48:	2200      	movs	r2, #0
 8007e4a:	673b      	str	r3, [r7, #112]	; 0x70
 8007e4c:	677a      	str	r2, [r7, #116]	; 0x74
 8007e4e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007e52:	4642      	mov	r2, r8
 8007e54:	464b      	mov	r3, r9
 8007e56:	1891      	adds	r1, r2, r2
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	415b      	adcs	r3, r3
 8007e5c:	60fb      	str	r3, [r7, #12]
 8007e5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007e62:	4641      	mov	r1, r8
 8007e64:	1851      	adds	r1, r2, r1
 8007e66:	6039      	str	r1, [r7, #0]
 8007e68:	4649      	mov	r1, r9
 8007e6a:	414b      	adcs	r3, r1
 8007e6c:	607b      	str	r3, [r7, #4]
 8007e6e:	f04f 0200 	mov.w	r2, #0
 8007e72:	f04f 0300 	mov.w	r3, #0
 8007e76:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007e7a:	4659      	mov	r1, fp
 8007e7c:	00cb      	lsls	r3, r1, #3
 8007e7e:	4651      	mov	r1, sl
 8007e80:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e84:	4651      	mov	r1, sl
 8007e86:	00ca      	lsls	r2, r1, #3
 8007e88:	4610      	mov	r0, r2
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	4642      	mov	r2, r8
 8007e90:	189b      	adds	r3, r3, r2
 8007e92:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e94:	464b      	mov	r3, r9
 8007e96:	460a      	mov	r2, r1
 8007e98:	eb42 0303 	adc.w	r3, r2, r3
 8007e9c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	663b      	str	r3, [r7, #96]	; 0x60
 8007ea8:	667a      	str	r2, [r7, #100]	; 0x64
 8007eaa:	f04f 0200 	mov.w	r2, #0
 8007eae:	f04f 0300 	mov.w	r3, #0
 8007eb2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007eb6:	4649      	mov	r1, r9
 8007eb8:	008b      	lsls	r3, r1, #2
 8007eba:	4641      	mov	r1, r8
 8007ebc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ec0:	4641      	mov	r1, r8
 8007ec2:	008a      	lsls	r2, r1, #2
 8007ec4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007ec8:	f7f8 fee6 	bl	8000c98 <__aeabi_uldivmod>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	460b      	mov	r3, r1
 8007ed0:	4b0d      	ldr	r3, [pc, #52]	; (8007f08 <UART_SetConfig+0x4e4>)
 8007ed2:	fba3 1302 	umull	r1, r3, r3, r2
 8007ed6:	095b      	lsrs	r3, r3, #5
 8007ed8:	2164      	movs	r1, #100	; 0x64
 8007eda:	fb01 f303 	mul.w	r3, r1, r3
 8007ede:	1ad3      	subs	r3, r2, r3
 8007ee0:	011b      	lsls	r3, r3, #4
 8007ee2:	3332      	adds	r3, #50	; 0x32
 8007ee4:	4a08      	ldr	r2, [pc, #32]	; (8007f08 <UART_SetConfig+0x4e4>)
 8007ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8007eea:	095b      	lsrs	r3, r3, #5
 8007eec:	f003 020f 	and.w	r2, r3, #15
 8007ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4422      	add	r2, r4
 8007ef8:	609a      	str	r2, [r3, #8]
}
 8007efa:	bf00      	nop
 8007efc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007f00:	46bd      	mov	sp, r7
 8007f02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f06:	bf00      	nop
 8007f08:	51eb851f 	.word	0x51eb851f

08007f0c <__errno>:
 8007f0c:	4b01      	ldr	r3, [pc, #4]	; (8007f14 <__errno+0x8>)
 8007f0e:	6818      	ldr	r0, [r3, #0]
 8007f10:	4770      	bx	lr
 8007f12:	bf00      	nop
 8007f14:	20000040 	.word	0x20000040

08007f18 <__libc_init_array>:
 8007f18:	b570      	push	{r4, r5, r6, lr}
 8007f1a:	4d0d      	ldr	r5, [pc, #52]	; (8007f50 <__libc_init_array+0x38>)
 8007f1c:	4c0d      	ldr	r4, [pc, #52]	; (8007f54 <__libc_init_array+0x3c>)
 8007f1e:	1b64      	subs	r4, r4, r5
 8007f20:	10a4      	asrs	r4, r4, #2
 8007f22:	2600      	movs	r6, #0
 8007f24:	42a6      	cmp	r6, r4
 8007f26:	d109      	bne.n	8007f3c <__libc_init_array+0x24>
 8007f28:	4d0b      	ldr	r5, [pc, #44]	; (8007f58 <__libc_init_array+0x40>)
 8007f2a:	4c0c      	ldr	r4, [pc, #48]	; (8007f5c <__libc_init_array+0x44>)
 8007f2c:	f003 fe32 	bl	800bb94 <_init>
 8007f30:	1b64      	subs	r4, r4, r5
 8007f32:	10a4      	asrs	r4, r4, #2
 8007f34:	2600      	movs	r6, #0
 8007f36:	42a6      	cmp	r6, r4
 8007f38:	d105      	bne.n	8007f46 <__libc_init_array+0x2e>
 8007f3a:	bd70      	pop	{r4, r5, r6, pc}
 8007f3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f40:	4798      	blx	r3
 8007f42:	3601      	adds	r6, #1
 8007f44:	e7ee      	b.n	8007f24 <__libc_init_array+0xc>
 8007f46:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f4a:	4798      	blx	r3
 8007f4c:	3601      	adds	r6, #1
 8007f4e:	e7f2      	b.n	8007f36 <__libc_init_array+0x1e>
 8007f50:	0800c0b8 	.word	0x0800c0b8
 8007f54:	0800c0b8 	.word	0x0800c0b8
 8007f58:	0800c0b8 	.word	0x0800c0b8
 8007f5c:	0800c0bc 	.word	0x0800c0bc

08007f60 <memset>:
 8007f60:	4402      	add	r2, r0
 8007f62:	4603      	mov	r3, r0
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d100      	bne.n	8007f6a <memset+0xa>
 8007f68:	4770      	bx	lr
 8007f6a:	f803 1b01 	strb.w	r1, [r3], #1
 8007f6e:	e7f9      	b.n	8007f64 <memset+0x4>

08007f70 <__cvt>:
 8007f70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f74:	ec55 4b10 	vmov	r4, r5, d0
 8007f78:	2d00      	cmp	r5, #0
 8007f7a:	460e      	mov	r6, r1
 8007f7c:	4619      	mov	r1, r3
 8007f7e:	462b      	mov	r3, r5
 8007f80:	bfbb      	ittet	lt
 8007f82:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007f86:	461d      	movlt	r5, r3
 8007f88:	2300      	movge	r3, #0
 8007f8a:	232d      	movlt	r3, #45	; 0x2d
 8007f8c:	700b      	strb	r3, [r1, #0]
 8007f8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f90:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007f94:	4691      	mov	r9, r2
 8007f96:	f023 0820 	bic.w	r8, r3, #32
 8007f9a:	bfbc      	itt	lt
 8007f9c:	4622      	movlt	r2, r4
 8007f9e:	4614      	movlt	r4, r2
 8007fa0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007fa4:	d005      	beq.n	8007fb2 <__cvt+0x42>
 8007fa6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007faa:	d100      	bne.n	8007fae <__cvt+0x3e>
 8007fac:	3601      	adds	r6, #1
 8007fae:	2102      	movs	r1, #2
 8007fb0:	e000      	b.n	8007fb4 <__cvt+0x44>
 8007fb2:	2103      	movs	r1, #3
 8007fb4:	ab03      	add	r3, sp, #12
 8007fb6:	9301      	str	r3, [sp, #4]
 8007fb8:	ab02      	add	r3, sp, #8
 8007fba:	9300      	str	r3, [sp, #0]
 8007fbc:	ec45 4b10 	vmov	d0, r4, r5
 8007fc0:	4653      	mov	r3, sl
 8007fc2:	4632      	mov	r2, r6
 8007fc4:	f000 fd00 	bl	80089c8 <_dtoa_r>
 8007fc8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007fcc:	4607      	mov	r7, r0
 8007fce:	d102      	bne.n	8007fd6 <__cvt+0x66>
 8007fd0:	f019 0f01 	tst.w	r9, #1
 8007fd4:	d022      	beq.n	800801c <__cvt+0xac>
 8007fd6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007fda:	eb07 0906 	add.w	r9, r7, r6
 8007fde:	d110      	bne.n	8008002 <__cvt+0x92>
 8007fe0:	783b      	ldrb	r3, [r7, #0]
 8007fe2:	2b30      	cmp	r3, #48	; 0x30
 8007fe4:	d10a      	bne.n	8007ffc <__cvt+0x8c>
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	2300      	movs	r3, #0
 8007fea:	4620      	mov	r0, r4
 8007fec:	4629      	mov	r1, r5
 8007fee:	f7f8 fd73 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ff2:	b918      	cbnz	r0, 8007ffc <__cvt+0x8c>
 8007ff4:	f1c6 0601 	rsb	r6, r6, #1
 8007ff8:	f8ca 6000 	str.w	r6, [sl]
 8007ffc:	f8da 3000 	ldr.w	r3, [sl]
 8008000:	4499      	add	r9, r3
 8008002:	2200      	movs	r2, #0
 8008004:	2300      	movs	r3, #0
 8008006:	4620      	mov	r0, r4
 8008008:	4629      	mov	r1, r5
 800800a:	f7f8 fd65 	bl	8000ad8 <__aeabi_dcmpeq>
 800800e:	b108      	cbz	r0, 8008014 <__cvt+0xa4>
 8008010:	f8cd 900c 	str.w	r9, [sp, #12]
 8008014:	2230      	movs	r2, #48	; 0x30
 8008016:	9b03      	ldr	r3, [sp, #12]
 8008018:	454b      	cmp	r3, r9
 800801a:	d307      	bcc.n	800802c <__cvt+0xbc>
 800801c:	9b03      	ldr	r3, [sp, #12]
 800801e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008020:	1bdb      	subs	r3, r3, r7
 8008022:	4638      	mov	r0, r7
 8008024:	6013      	str	r3, [r2, #0]
 8008026:	b004      	add	sp, #16
 8008028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800802c:	1c59      	adds	r1, r3, #1
 800802e:	9103      	str	r1, [sp, #12]
 8008030:	701a      	strb	r2, [r3, #0]
 8008032:	e7f0      	b.n	8008016 <__cvt+0xa6>

08008034 <__exponent>:
 8008034:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008036:	4603      	mov	r3, r0
 8008038:	2900      	cmp	r1, #0
 800803a:	bfb8      	it	lt
 800803c:	4249      	neglt	r1, r1
 800803e:	f803 2b02 	strb.w	r2, [r3], #2
 8008042:	bfb4      	ite	lt
 8008044:	222d      	movlt	r2, #45	; 0x2d
 8008046:	222b      	movge	r2, #43	; 0x2b
 8008048:	2909      	cmp	r1, #9
 800804a:	7042      	strb	r2, [r0, #1]
 800804c:	dd2a      	ble.n	80080a4 <__exponent+0x70>
 800804e:	f10d 0407 	add.w	r4, sp, #7
 8008052:	46a4      	mov	ip, r4
 8008054:	270a      	movs	r7, #10
 8008056:	46a6      	mov	lr, r4
 8008058:	460a      	mov	r2, r1
 800805a:	fb91 f6f7 	sdiv	r6, r1, r7
 800805e:	fb07 1516 	mls	r5, r7, r6, r1
 8008062:	3530      	adds	r5, #48	; 0x30
 8008064:	2a63      	cmp	r2, #99	; 0x63
 8008066:	f104 34ff 	add.w	r4, r4, #4294967295
 800806a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800806e:	4631      	mov	r1, r6
 8008070:	dcf1      	bgt.n	8008056 <__exponent+0x22>
 8008072:	3130      	adds	r1, #48	; 0x30
 8008074:	f1ae 0502 	sub.w	r5, lr, #2
 8008078:	f804 1c01 	strb.w	r1, [r4, #-1]
 800807c:	1c44      	adds	r4, r0, #1
 800807e:	4629      	mov	r1, r5
 8008080:	4561      	cmp	r1, ip
 8008082:	d30a      	bcc.n	800809a <__exponent+0x66>
 8008084:	f10d 0209 	add.w	r2, sp, #9
 8008088:	eba2 020e 	sub.w	r2, r2, lr
 800808c:	4565      	cmp	r5, ip
 800808e:	bf88      	it	hi
 8008090:	2200      	movhi	r2, #0
 8008092:	4413      	add	r3, r2
 8008094:	1a18      	subs	r0, r3, r0
 8008096:	b003      	add	sp, #12
 8008098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800809a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800809e:	f804 2f01 	strb.w	r2, [r4, #1]!
 80080a2:	e7ed      	b.n	8008080 <__exponent+0x4c>
 80080a4:	2330      	movs	r3, #48	; 0x30
 80080a6:	3130      	adds	r1, #48	; 0x30
 80080a8:	7083      	strb	r3, [r0, #2]
 80080aa:	70c1      	strb	r1, [r0, #3]
 80080ac:	1d03      	adds	r3, r0, #4
 80080ae:	e7f1      	b.n	8008094 <__exponent+0x60>

080080b0 <_printf_float>:
 80080b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080b4:	ed2d 8b02 	vpush	{d8}
 80080b8:	b08d      	sub	sp, #52	; 0x34
 80080ba:	460c      	mov	r4, r1
 80080bc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80080c0:	4616      	mov	r6, r2
 80080c2:	461f      	mov	r7, r3
 80080c4:	4605      	mov	r5, r0
 80080c6:	f001 fa6d 	bl	80095a4 <_localeconv_r>
 80080ca:	f8d0 a000 	ldr.w	sl, [r0]
 80080ce:	4650      	mov	r0, sl
 80080d0:	f7f8 f886 	bl	80001e0 <strlen>
 80080d4:	2300      	movs	r3, #0
 80080d6:	930a      	str	r3, [sp, #40]	; 0x28
 80080d8:	6823      	ldr	r3, [r4, #0]
 80080da:	9305      	str	r3, [sp, #20]
 80080dc:	f8d8 3000 	ldr.w	r3, [r8]
 80080e0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80080e4:	3307      	adds	r3, #7
 80080e6:	f023 0307 	bic.w	r3, r3, #7
 80080ea:	f103 0208 	add.w	r2, r3, #8
 80080ee:	f8c8 2000 	str.w	r2, [r8]
 80080f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80080fa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80080fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008102:	9307      	str	r3, [sp, #28]
 8008104:	f8cd 8018 	str.w	r8, [sp, #24]
 8008108:	ee08 0a10 	vmov	s16, r0
 800810c:	4b9f      	ldr	r3, [pc, #636]	; (800838c <_printf_float+0x2dc>)
 800810e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008112:	f04f 32ff 	mov.w	r2, #4294967295
 8008116:	f7f8 fd11 	bl	8000b3c <__aeabi_dcmpun>
 800811a:	bb88      	cbnz	r0, 8008180 <_printf_float+0xd0>
 800811c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008120:	4b9a      	ldr	r3, [pc, #616]	; (800838c <_printf_float+0x2dc>)
 8008122:	f04f 32ff 	mov.w	r2, #4294967295
 8008126:	f7f8 fceb 	bl	8000b00 <__aeabi_dcmple>
 800812a:	bb48      	cbnz	r0, 8008180 <_printf_float+0xd0>
 800812c:	2200      	movs	r2, #0
 800812e:	2300      	movs	r3, #0
 8008130:	4640      	mov	r0, r8
 8008132:	4649      	mov	r1, r9
 8008134:	f7f8 fcda 	bl	8000aec <__aeabi_dcmplt>
 8008138:	b110      	cbz	r0, 8008140 <_printf_float+0x90>
 800813a:	232d      	movs	r3, #45	; 0x2d
 800813c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008140:	4b93      	ldr	r3, [pc, #588]	; (8008390 <_printf_float+0x2e0>)
 8008142:	4894      	ldr	r0, [pc, #592]	; (8008394 <_printf_float+0x2e4>)
 8008144:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008148:	bf94      	ite	ls
 800814a:	4698      	movls	r8, r3
 800814c:	4680      	movhi	r8, r0
 800814e:	2303      	movs	r3, #3
 8008150:	6123      	str	r3, [r4, #16]
 8008152:	9b05      	ldr	r3, [sp, #20]
 8008154:	f023 0204 	bic.w	r2, r3, #4
 8008158:	6022      	str	r2, [r4, #0]
 800815a:	f04f 0900 	mov.w	r9, #0
 800815e:	9700      	str	r7, [sp, #0]
 8008160:	4633      	mov	r3, r6
 8008162:	aa0b      	add	r2, sp, #44	; 0x2c
 8008164:	4621      	mov	r1, r4
 8008166:	4628      	mov	r0, r5
 8008168:	f000 f9d8 	bl	800851c <_printf_common>
 800816c:	3001      	adds	r0, #1
 800816e:	f040 8090 	bne.w	8008292 <_printf_float+0x1e2>
 8008172:	f04f 30ff 	mov.w	r0, #4294967295
 8008176:	b00d      	add	sp, #52	; 0x34
 8008178:	ecbd 8b02 	vpop	{d8}
 800817c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008180:	4642      	mov	r2, r8
 8008182:	464b      	mov	r3, r9
 8008184:	4640      	mov	r0, r8
 8008186:	4649      	mov	r1, r9
 8008188:	f7f8 fcd8 	bl	8000b3c <__aeabi_dcmpun>
 800818c:	b140      	cbz	r0, 80081a0 <_printf_float+0xf0>
 800818e:	464b      	mov	r3, r9
 8008190:	2b00      	cmp	r3, #0
 8008192:	bfbc      	itt	lt
 8008194:	232d      	movlt	r3, #45	; 0x2d
 8008196:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800819a:	487f      	ldr	r0, [pc, #508]	; (8008398 <_printf_float+0x2e8>)
 800819c:	4b7f      	ldr	r3, [pc, #508]	; (800839c <_printf_float+0x2ec>)
 800819e:	e7d1      	b.n	8008144 <_printf_float+0x94>
 80081a0:	6863      	ldr	r3, [r4, #4]
 80081a2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80081a6:	9206      	str	r2, [sp, #24]
 80081a8:	1c5a      	adds	r2, r3, #1
 80081aa:	d13f      	bne.n	800822c <_printf_float+0x17c>
 80081ac:	2306      	movs	r3, #6
 80081ae:	6063      	str	r3, [r4, #4]
 80081b0:	9b05      	ldr	r3, [sp, #20]
 80081b2:	6861      	ldr	r1, [r4, #4]
 80081b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80081b8:	2300      	movs	r3, #0
 80081ba:	9303      	str	r3, [sp, #12]
 80081bc:	ab0a      	add	r3, sp, #40	; 0x28
 80081be:	e9cd b301 	strd	fp, r3, [sp, #4]
 80081c2:	ab09      	add	r3, sp, #36	; 0x24
 80081c4:	ec49 8b10 	vmov	d0, r8, r9
 80081c8:	9300      	str	r3, [sp, #0]
 80081ca:	6022      	str	r2, [r4, #0]
 80081cc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80081d0:	4628      	mov	r0, r5
 80081d2:	f7ff fecd 	bl	8007f70 <__cvt>
 80081d6:	9b06      	ldr	r3, [sp, #24]
 80081d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80081da:	2b47      	cmp	r3, #71	; 0x47
 80081dc:	4680      	mov	r8, r0
 80081de:	d108      	bne.n	80081f2 <_printf_float+0x142>
 80081e0:	1cc8      	adds	r0, r1, #3
 80081e2:	db02      	blt.n	80081ea <_printf_float+0x13a>
 80081e4:	6863      	ldr	r3, [r4, #4]
 80081e6:	4299      	cmp	r1, r3
 80081e8:	dd41      	ble.n	800826e <_printf_float+0x1be>
 80081ea:	f1ab 0b02 	sub.w	fp, fp, #2
 80081ee:	fa5f fb8b 	uxtb.w	fp, fp
 80081f2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80081f6:	d820      	bhi.n	800823a <_printf_float+0x18a>
 80081f8:	3901      	subs	r1, #1
 80081fa:	465a      	mov	r2, fp
 80081fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008200:	9109      	str	r1, [sp, #36]	; 0x24
 8008202:	f7ff ff17 	bl	8008034 <__exponent>
 8008206:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008208:	1813      	adds	r3, r2, r0
 800820a:	2a01      	cmp	r2, #1
 800820c:	4681      	mov	r9, r0
 800820e:	6123      	str	r3, [r4, #16]
 8008210:	dc02      	bgt.n	8008218 <_printf_float+0x168>
 8008212:	6822      	ldr	r2, [r4, #0]
 8008214:	07d2      	lsls	r2, r2, #31
 8008216:	d501      	bpl.n	800821c <_printf_float+0x16c>
 8008218:	3301      	adds	r3, #1
 800821a:	6123      	str	r3, [r4, #16]
 800821c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008220:	2b00      	cmp	r3, #0
 8008222:	d09c      	beq.n	800815e <_printf_float+0xae>
 8008224:	232d      	movs	r3, #45	; 0x2d
 8008226:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800822a:	e798      	b.n	800815e <_printf_float+0xae>
 800822c:	9a06      	ldr	r2, [sp, #24]
 800822e:	2a47      	cmp	r2, #71	; 0x47
 8008230:	d1be      	bne.n	80081b0 <_printf_float+0x100>
 8008232:	2b00      	cmp	r3, #0
 8008234:	d1bc      	bne.n	80081b0 <_printf_float+0x100>
 8008236:	2301      	movs	r3, #1
 8008238:	e7b9      	b.n	80081ae <_printf_float+0xfe>
 800823a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800823e:	d118      	bne.n	8008272 <_printf_float+0x1c2>
 8008240:	2900      	cmp	r1, #0
 8008242:	6863      	ldr	r3, [r4, #4]
 8008244:	dd0b      	ble.n	800825e <_printf_float+0x1ae>
 8008246:	6121      	str	r1, [r4, #16]
 8008248:	b913      	cbnz	r3, 8008250 <_printf_float+0x1a0>
 800824a:	6822      	ldr	r2, [r4, #0]
 800824c:	07d0      	lsls	r0, r2, #31
 800824e:	d502      	bpl.n	8008256 <_printf_float+0x1a6>
 8008250:	3301      	adds	r3, #1
 8008252:	440b      	add	r3, r1
 8008254:	6123      	str	r3, [r4, #16]
 8008256:	65a1      	str	r1, [r4, #88]	; 0x58
 8008258:	f04f 0900 	mov.w	r9, #0
 800825c:	e7de      	b.n	800821c <_printf_float+0x16c>
 800825e:	b913      	cbnz	r3, 8008266 <_printf_float+0x1b6>
 8008260:	6822      	ldr	r2, [r4, #0]
 8008262:	07d2      	lsls	r2, r2, #31
 8008264:	d501      	bpl.n	800826a <_printf_float+0x1ba>
 8008266:	3302      	adds	r3, #2
 8008268:	e7f4      	b.n	8008254 <_printf_float+0x1a4>
 800826a:	2301      	movs	r3, #1
 800826c:	e7f2      	b.n	8008254 <_printf_float+0x1a4>
 800826e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008272:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008274:	4299      	cmp	r1, r3
 8008276:	db05      	blt.n	8008284 <_printf_float+0x1d4>
 8008278:	6823      	ldr	r3, [r4, #0]
 800827a:	6121      	str	r1, [r4, #16]
 800827c:	07d8      	lsls	r0, r3, #31
 800827e:	d5ea      	bpl.n	8008256 <_printf_float+0x1a6>
 8008280:	1c4b      	adds	r3, r1, #1
 8008282:	e7e7      	b.n	8008254 <_printf_float+0x1a4>
 8008284:	2900      	cmp	r1, #0
 8008286:	bfd4      	ite	le
 8008288:	f1c1 0202 	rsble	r2, r1, #2
 800828c:	2201      	movgt	r2, #1
 800828e:	4413      	add	r3, r2
 8008290:	e7e0      	b.n	8008254 <_printf_float+0x1a4>
 8008292:	6823      	ldr	r3, [r4, #0]
 8008294:	055a      	lsls	r2, r3, #21
 8008296:	d407      	bmi.n	80082a8 <_printf_float+0x1f8>
 8008298:	6923      	ldr	r3, [r4, #16]
 800829a:	4642      	mov	r2, r8
 800829c:	4631      	mov	r1, r6
 800829e:	4628      	mov	r0, r5
 80082a0:	47b8      	blx	r7
 80082a2:	3001      	adds	r0, #1
 80082a4:	d12c      	bne.n	8008300 <_printf_float+0x250>
 80082a6:	e764      	b.n	8008172 <_printf_float+0xc2>
 80082a8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80082ac:	f240 80e0 	bls.w	8008470 <_printf_float+0x3c0>
 80082b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80082b4:	2200      	movs	r2, #0
 80082b6:	2300      	movs	r3, #0
 80082b8:	f7f8 fc0e 	bl	8000ad8 <__aeabi_dcmpeq>
 80082bc:	2800      	cmp	r0, #0
 80082be:	d034      	beq.n	800832a <_printf_float+0x27a>
 80082c0:	4a37      	ldr	r2, [pc, #220]	; (80083a0 <_printf_float+0x2f0>)
 80082c2:	2301      	movs	r3, #1
 80082c4:	4631      	mov	r1, r6
 80082c6:	4628      	mov	r0, r5
 80082c8:	47b8      	blx	r7
 80082ca:	3001      	adds	r0, #1
 80082cc:	f43f af51 	beq.w	8008172 <_printf_float+0xc2>
 80082d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082d4:	429a      	cmp	r2, r3
 80082d6:	db02      	blt.n	80082de <_printf_float+0x22e>
 80082d8:	6823      	ldr	r3, [r4, #0]
 80082da:	07d8      	lsls	r0, r3, #31
 80082dc:	d510      	bpl.n	8008300 <_printf_float+0x250>
 80082de:	ee18 3a10 	vmov	r3, s16
 80082e2:	4652      	mov	r2, sl
 80082e4:	4631      	mov	r1, r6
 80082e6:	4628      	mov	r0, r5
 80082e8:	47b8      	blx	r7
 80082ea:	3001      	adds	r0, #1
 80082ec:	f43f af41 	beq.w	8008172 <_printf_float+0xc2>
 80082f0:	f04f 0800 	mov.w	r8, #0
 80082f4:	f104 091a 	add.w	r9, r4, #26
 80082f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082fa:	3b01      	subs	r3, #1
 80082fc:	4543      	cmp	r3, r8
 80082fe:	dc09      	bgt.n	8008314 <_printf_float+0x264>
 8008300:	6823      	ldr	r3, [r4, #0]
 8008302:	079b      	lsls	r3, r3, #30
 8008304:	f100 8105 	bmi.w	8008512 <_printf_float+0x462>
 8008308:	68e0      	ldr	r0, [r4, #12]
 800830a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800830c:	4298      	cmp	r0, r3
 800830e:	bfb8      	it	lt
 8008310:	4618      	movlt	r0, r3
 8008312:	e730      	b.n	8008176 <_printf_float+0xc6>
 8008314:	2301      	movs	r3, #1
 8008316:	464a      	mov	r2, r9
 8008318:	4631      	mov	r1, r6
 800831a:	4628      	mov	r0, r5
 800831c:	47b8      	blx	r7
 800831e:	3001      	adds	r0, #1
 8008320:	f43f af27 	beq.w	8008172 <_printf_float+0xc2>
 8008324:	f108 0801 	add.w	r8, r8, #1
 8008328:	e7e6      	b.n	80082f8 <_printf_float+0x248>
 800832a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800832c:	2b00      	cmp	r3, #0
 800832e:	dc39      	bgt.n	80083a4 <_printf_float+0x2f4>
 8008330:	4a1b      	ldr	r2, [pc, #108]	; (80083a0 <_printf_float+0x2f0>)
 8008332:	2301      	movs	r3, #1
 8008334:	4631      	mov	r1, r6
 8008336:	4628      	mov	r0, r5
 8008338:	47b8      	blx	r7
 800833a:	3001      	adds	r0, #1
 800833c:	f43f af19 	beq.w	8008172 <_printf_float+0xc2>
 8008340:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008344:	4313      	orrs	r3, r2
 8008346:	d102      	bne.n	800834e <_printf_float+0x29e>
 8008348:	6823      	ldr	r3, [r4, #0]
 800834a:	07d9      	lsls	r1, r3, #31
 800834c:	d5d8      	bpl.n	8008300 <_printf_float+0x250>
 800834e:	ee18 3a10 	vmov	r3, s16
 8008352:	4652      	mov	r2, sl
 8008354:	4631      	mov	r1, r6
 8008356:	4628      	mov	r0, r5
 8008358:	47b8      	blx	r7
 800835a:	3001      	adds	r0, #1
 800835c:	f43f af09 	beq.w	8008172 <_printf_float+0xc2>
 8008360:	f04f 0900 	mov.w	r9, #0
 8008364:	f104 0a1a 	add.w	sl, r4, #26
 8008368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800836a:	425b      	negs	r3, r3
 800836c:	454b      	cmp	r3, r9
 800836e:	dc01      	bgt.n	8008374 <_printf_float+0x2c4>
 8008370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008372:	e792      	b.n	800829a <_printf_float+0x1ea>
 8008374:	2301      	movs	r3, #1
 8008376:	4652      	mov	r2, sl
 8008378:	4631      	mov	r1, r6
 800837a:	4628      	mov	r0, r5
 800837c:	47b8      	blx	r7
 800837e:	3001      	adds	r0, #1
 8008380:	f43f aef7 	beq.w	8008172 <_printf_float+0xc2>
 8008384:	f109 0901 	add.w	r9, r9, #1
 8008388:	e7ee      	b.n	8008368 <_printf_float+0x2b8>
 800838a:	bf00      	nop
 800838c:	7fefffff 	.word	0x7fefffff
 8008390:	0800bca8 	.word	0x0800bca8
 8008394:	0800bcac 	.word	0x0800bcac
 8008398:	0800bcb4 	.word	0x0800bcb4
 800839c:	0800bcb0 	.word	0x0800bcb0
 80083a0:	0800bcb8 	.word	0x0800bcb8
 80083a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80083a8:	429a      	cmp	r2, r3
 80083aa:	bfa8      	it	ge
 80083ac:	461a      	movge	r2, r3
 80083ae:	2a00      	cmp	r2, #0
 80083b0:	4691      	mov	r9, r2
 80083b2:	dc37      	bgt.n	8008424 <_printf_float+0x374>
 80083b4:	f04f 0b00 	mov.w	fp, #0
 80083b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80083bc:	f104 021a 	add.w	r2, r4, #26
 80083c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80083c2:	9305      	str	r3, [sp, #20]
 80083c4:	eba3 0309 	sub.w	r3, r3, r9
 80083c8:	455b      	cmp	r3, fp
 80083ca:	dc33      	bgt.n	8008434 <_printf_float+0x384>
 80083cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083d0:	429a      	cmp	r2, r3
 80083d2:	db3b      	blt.n	800844c <_printf_float+0x39c>
 80083d4:	6823      	ldr	r3, [r4, #0]
 80083d6:	07da      	lsls	r2, r3, #31
 80083d8:	d438      	bmi.n	800844c <_printf_float+0x39c>
 80083da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083dc:	9a05      	ldr	r2, [sp, #20]
 80083de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083e0:	1a9a      	subs	r2, r3, r2
 80083e2:	eba3 0901 	sub.w	r9, r3, r1
 80083e6:	4591      	cmp	r9, r2
 80083e8:	bfa8      	it	ge
 80083ea:	4691      	movge	r9, r2
 80083ec:	f1b9 0f00 	cmp.w	r9, #0
 80083f0:	dc35      	bgt.n	800845e <_printf_float+0x3ae>
 80083f2:	f04f 0800 	mov.w	r8, #0
 80083f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80083fa:	f104 0a1a 	add.w	sl, r4, #26
 80083fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008402:	1a9b      	subs	r3, r3, r2
 8008404:	eba3 0309 	sub.w	r3, r3, r9
 8008408:	4543      	cmp	r3, r8
 800840a:	f77f af79 	ble.w	8008300 <_printf_float+0x250>
 800840e:	2301      	movs	r3, #1
 8008410:	4652      	mov	r2, sl
 8008412:	4631      	mov	r1, r6
 8008414:	4628      	mov	r0, r5
 8008416:	47b8      	blx	r7
 8008418:	3001      	adds	r0, #1
 800841a:	f43f aeaa 	beq.w	8008172 <_printf_float+0xc2>
 800841e:	f108 0801 	add.w	r8, r8, #1
 8008422:	e7ec      	b.n	80083fe <_printf_float+0x34e>
 8008424:	4613      	mov	r3, r2
 8008426:	4631      	mov	r1, r6
 8008428:	4642      	mov	r2, r8
 800842a:	4628      	mov	r0, r5
 800842c:	47b8      	blx	r7
 800842e:	3001      	adds	r0, #1
 8008430:	d1c0      	bne.n	80083b4 <_printf_float+0x304>
 8008432:	e69e      	b.n	8008172 <_printf_float+0xc2>
 8008434:	2301      	movs	r3, #1
 8008436:	4631      	mov	r1, r6
 8008438:	4628      	mov	r0, r5
 800843a:	9205      	str	r2, [sp, #20]
 800843c:	47b8      	blx	r7
 800843e:	3001      	adds	r0, #1
 8008440:	f43f ae97 	beq.w	8008172 <_printf_float+0xc2>
 8008444:	9a05      	ldr	r2, [sp, #20]
 8008446:	f10b 0b01 	add.w	fp, fp, #1
 800844a:	e7b9      	b.n	80083c0 <_printf_float+0x310>
 800844c:	ee18 3a10 	vmov	r3, s16
 8008450:	4652      	mov	r2, sl
 8008452:	4631      	mov	r1, r6
 8008454:	4628      	mov	r0, r5
 8008456:	47b8      	blx	r7
 8008458:	3001      	adds	r0, #1
 800845a:	d1be      	bne.n	80083da <_printf_float+0x32a>
 800845c:	e689      	b.n	8008172 <_printf_float+0xc2>
 800845e:	9a05      	ldr	r2, [sp, #20]
 8008460:	464b      	mov	r3, r9
 8008462:	4442      	add	r2, r8
 8008464:	4631      	mov	r1, r6
 8008466:	4628      	mov	r0, r5
 8008468:	47b8      	blx	r7
 800846a:	3001      	adds	r0, #1
 800846c:	d1c1      	bne.n	80083f2 <_printf_float+0x342>
 800846e:	e680      	b.n	8008172 <_printf_float+0xc2>
 8008470:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008472:	2a01      	cmp	r2, #1
 8008474:	dc01      	bgt.n	800847a <_printf_float+0x3ca>
 8008476:	07db      	lsls	r3, r3, #31
 8008478:	d538      	bpl.n	80084ec <_printf_float+0x43c>
 800847a:	2301      	movs	r3, #1
 800847c:	4642      	mov	r2, r8
 800847e:	4631      	mov	r1, r6
 8008480:	4628      	mov	r0, r5
 8008482:	47b8      	blx	r7
 8008484:	3001      	adds	r0, #1
 8008486:	f43f ae74 	beq.w	8008172 <_printf_float+0xc2>
 800848a:	ee18 3a10 	vmov	r3, s16
 800848e:	4652      	mov	r2, sl
 8008490:	4631      	mov	r1, r6
 8008492:	4628      	mov	r0, r5
 8008494:	47b8      	blx	r7
 8008496:	3001      	adds	r0, #1
 8008498:	f43f ae6b 	beq.w	8008172 <_printf_float+0xc2>
 800849c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80084a0:	2200      	movs	r2, #0
 80084a2:	2300      	movs	r3, #0
 80084a4:	f7f8 fb18 	bl	8000ad8 <__aeabi_dcmpeq>
 80084a8:	b9d8      	cbnz	r0, 80084e2 <_printf_float+0x432>
 80084aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084ac:	f108 0201 	add.w	r2, r8, #1
 80084b0:	3b01      	subs	r3, #1
 80084b2:	4631      	mov	r1, r6
 80084b4:	4628      	mov	r0, r5
 80084b6:	47b8      	blx	r7
 80084b8:	3001      	adds	r0, #1
 80084ba:	d10e      	bne.n	80084da <_printf_float+0x42a>
 80084bc:	e659      	b.n	8008172 <_printf_float+0xc2>
 80084be:	2301      	movs	r3, #1
 80084c0:	4652      	mov	r2, sl
 80084c2:	4631      	mov	r1, r6
 80084c4:	4628      	mov	r0, r5
 80084c6:	47b8      	blx	r7
 80084c8:	3001      	adds	r0, #1
 80084ca:	f43f ae52 	beq.w	8008172 <_printf_float+0xc2>
 80084ce:	f108 0801 	add.w	r8, r8, #1
 80084d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084d4:	3b01      	subs	r3, #1
 80084d6:	4543      	cmp	r3, r8
 80084d8:	dcf1      	bgt.n	80084be <_printf_float+0x40e>
 80084da:	464b      	mov	r3, r9
 80084dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80084e0:	e6dc      	b.n	800829c <_printf_float+0x1ec>
 80084e2:	f04f 0800 	mov.w	r8, #0
 80084e6:	f104 0a1a 	add.w	sl, r4, #26
 80084ea:	e7f2      	b.n	80084d2 <_printf_float+0x422>
 80084ec:	2301      	movs	r3, #1
 80084ee:	4642      	mov	r2, r8
 80084f0:	e7df      	b.n	80084b2 <_printf_float+0x402>
 80084f2:	2301      	movs	r3, #1
 80084f4:	464a      	mov	r2, r9
 80084f6:	4631      	mov	r1, r6
 80084f8:	4628      	mov	r0, r5
 80084fa:	47b8      	blx	r7
 80084fc:	3001      	adds	r0, #1
 80084fe:	f43f ae38 	beq.w	8008172 <_printf_float+0xc2>
 8008502:	f108 0801 	add.w	r8, r8, #1
 8008506:	68e3      	ldr	r3, [r4, #12]
 8008508:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800850a:	1a5b      	subs	r3, r3, r1
 800850c:	4543      	cmp	r3, r8
 800850e:	dcf0      	bgt.n	80084f2 <_printf_float+0x442>
 8008510:	e6fa      	b.n	8008308 <_printf_float+0x258>
 8008512:	f04f 0800 	mov.w	r8, #0
 8008516:	f104 0919 	add.w	r9, r4, #25
 800851a:	e7f4      	b.n	8008506 <_printf_float+0x456>

0800851c <_printf_common>:
 800851c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008520:	4616      	mov	r6, r2
 8008522:	4699      	mov	r9, r3
 8008524:	688a      	ldr	r2, [r1, #8]
 8008526:	690b      	ldr	r3, [r1, #16]
 8008528:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800852c:	4293      	cmp	r3, r2
 800852e:	bfb8      	it	lt
 8008530:	4613      	movlt	r3, r2
 8008532:	6033      	str	r3, [r6, #0]
 8008534:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008538:	4607      	mov	r7, r0
 800853a:	460c      	mov	r4, r1
 800853c:	b10a      	cbz	r2, 8008542 <_printf_common+0x26>
 800853e:	3301      	adds	r3, #1
 8008540:	6033      	str	r3, [r6, #0]
 8008542:	6823      	ldr	r3, [r4, #0]
 8008544:	0699      	lsls	r1, r3, #26
 8008546:	bf42      	ittt	mi
 8008548:	6833      	ldrmi	r3, [r6, #0]
 800854a:	3302      	addmi	r3, #2
 800854c:	6033      	strmi	r3, [r6, #0]
 800854e:	6825      	ldr	r5, [r4, #0]
 8008550:	f015 0506 	ands.w	r5, r5, #6
 8008554:	d106      	bne.n	8008564 <_printf_common+0x48>
 8008556:	f104 0a19 	add.w	sl, r4, #25
 800855a:	68e3      	ldr	r3, [r4, #12]
 800855c:	6832      	ldr	r2, [r6, #0]
 800855e:	1a9b      	subs	r3, r3, r2
 8008560:	42ab      	cmp	r3, r5
 8008562:	dc26      	bgt.n	80085b2 <_printf_common+0x96>
 8008564:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008568:	1e13      	subs	r3, r2, #0
 800856a:	6822      	ldr	r2, [r4, #0]
 800856c:	bf18      	it	ne
 800856e:	2301      	movne	r3, #1
 8008570:	0692      	lsls	r2, r2, #26
 8008572:	d42b      	bmi.n	80085cc <_printf_common+0xb0>
 8008574:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008578:	4649      	mov	r1, r9
 800857a:	4638      	mov	r0, r7
 800857c:	47c0      	blx	r8
 800857e:	3001      	adds	r0, #1
 8008580:	d01e      	beq.n	80085c0 <_printf_common+0xa4>
 8008582:	6823      	ldr	r3, [r4, #0]
 8008584:	68e5      	ldr	r5, [r4, #12]
 8008586:	6832      	ldr	r2, [r6, #0]
 8008588:	f003 0306 	and.w	r3, r3, #6
 800858c:	2b04      	cmp	r3, #4
 800858e:	bf08      	it	eq
 8008590:	1aad      	subeq	r5, r5, r2
 8008592:	68a3      	ldr	r3, [r4, #8]
 8008594:	6922      	ldr	r2, [r4, #16]
 8008596:	bf0c      	ite	eq
 8008598:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800859c:	2500      	movne	r5, #0
 800859e:	4293      	cmp	r3, r2
 80085a0:	bfc4      	itt	gt
 80085a2:	1a9b      	subgt	r3, r3, r2
 80085a4:	18ed      	addgt	r5, r5, r3
 80085a6:	2600      	movs	r6, #0
 80085a8:	341a      	adds	r4, #26
 80085aa:	42b5      	cmp	r5, r6
 80085ac:	d11a      	bne.n	80085e4 <_printf_common+0xc8>
 80085ae:	2000      	movs	r0, #0
 80085b0:	e008      	b.n	80085c4 <_printf_common+0xa8>
 80085b2:	2301      	movs	r3, #1
 80085b4:	4652      	mov	r2, sl
 80085b6:	4649      	mov	r1, r9
 80085b8:	4638      	mov	r0, r7
 80085ba:	47c0      	blx	r8
 80085bc:	3001      	adds	r0, #1
 80085be:	d103      	bne.n	80085c8 <_printf_common+0xac>
 80085c0:	f04f 30ff 	mov.w	r0, #4294967295
 80085c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085c8:	3501      	adds	r5, #1
 80085ca:	e7c6      	b.n	800855a <_printf_common+0x3e>
 80085cc:	18e1      	adds	r1, r4, r3
 80085ce:	1c5a      	adds	r2, r3, #1
 80085d0:	2030      	movs	r0, #48	; 0x30
 80085d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80085d6:	4422      	add	r2, r4
 80085d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80085dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80085e0:	3302      	adds	r3, #2
 80085e2:	e7c7      	b.n	8008574 <_printf_common+0x58>
 80085e4:	2301      	movs	r3, #1
 80085e6:	4622      	mov	r2, r4
 80085e8:	4649      	mov	r1, r9
 80085ea:	4638      	mov	r0, r7
 80085ec:	47c0      	blx	r8
 80085ee:	3001      	adds	r0, #1
 80085f0:	d0e6      	beq.n	80085c0 <_printf_common+0xa4>
 80085f2:	3601      	adds	r6, #1
 80085f4:	e7d9      	b.n	80085aa <_printf_common+0x8e>
	...

080085f8 <_printf_i>:
 80085f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085fc:	7e0f      	ldrb	r7, [r1, #24]
 80085fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008600:	2f78      	cmp	r7, #120	; 0x78
 8008602:	4691      	mov	r9, r2
 8008604:	4680      	mov	r8, r0
 8008606:	460c      	mov	r4, r1
 8008608:	469a      	mov	sl, r3
 800860a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800860e:	d807      	bhi.n	8008620 <_printf_i+0x28>
 8008610:	2f62      	cmp	r7, #98	; 0x62
 8008612:	d80a      	bhi.n	800862a <_printf_i+0x32>
 8008614:	2f00      	cmp	r7, #0
 8008616:	f000 80d8 	beq.w	80087ca <_printf_i+0x1d2>
 800861a:	2f58      	cmp	r7, #88	; 0x58
 800861c:	f000 80a3 	beq.w	8008766 <_printf_i+0x16e>
 8008620:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008624:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008628:	e03a      	b.n	80086a0 <_printf_i+0xa8>
 800862a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800862e:	2b15      	cmp	r3, #21
 8008630:	d8f6      	bhi.n	8008620 <_printf_i+0x28>
 8008632:	a101      	add	r1, pc, #4	; (adr r1, 8008638 <_printf_i+0x40>)
 8008634:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008638:	08008691 	.word	0x08008691
 800863c:	080086a5 	.word	0x080086a5
 8008640:	08008621 	.word	0x08008621
 8008644:	08008621 	.word	0x08008621
 8008648:	08008621 	.word	0x08008621
 800864c:	08008621 	.word	0x08008621
 8008650:	080086a5 	.word	0x080086a5
 8008654:	08008621 	.word	0x08008621
 8008658:	08008621 	.word	0x08008621
 800865c:	08008621 	.word	0x08008621
 8008660:	08008621 	.word	0x08008621
 8008664:	080087b1 	.word	0x080087b1
 8008668:	080086d5 	.word	0x080086d5
 800866c:	08008793 	.word	0x08008793
 8008670:	08008621 	.word	0x08008621
 8008674:	08008621 	.word	0x08008621
 8008678:	080087d3 	.word	0x080087d3
 800867c:	08008621 	.word	0x08008621
 8008680:	080086d5 	.word	0x080086d5
 8008684:	08008621 	.word	0x08008621
 8008688:	08008621 	.word	0x08008621
 800868c:	0800879b 	.word	0x0800879b
 8008690:	682b      	ldr	r3, [r5, #0]
 8008692:	1d1a      	adds	r2, r3, #4
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	602a      	str	r2, [r5, #0]
 8008698:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800869c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086a0:	2301      	movs	r3, #1
 80086a2:	e0a3      	b.n	80087ec <_printf_i+0x1f4>
 80086a4:	6820      	ldr	r0, [r4, #0]
 80086a6:	6829      	ldr	r1, [r5, #0]
 80086a8:	0606      	lsls	r6, r0, #24
 80086aa:	f101 0304 	add.w	r3, r1, #4
 80086ae:	d50a      	bpl.n	80086c6 <_printf_i+0xce>
 80086b0:	680e      	ldr	r6, [r1, #0]
 80086b2:	602b      	str	r3, [r5, #0]
 80086b4:	2e00      	cmp	r6, #0
 80086b6:	da03      	bge.n	80086c0 <_printf_i+0xc8>
 80086b8:	232d      	movs	r3, #45	; 0x2d
 80086ba:	4276      	negs	r6, r6
 80086bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086c0:	485e      	ldr	r0, [pc, #376]	; (800883c <_printf_i+0x244>)
 80086c2:	230a      	movs	r3, #10
 80086c4:	e019      	b.n	80086fa <_printf_i+0x102>
 80086c6:	680e      	ldr	r6, [r1, #0]
 80086c8:	602b      	str	r3, [r5, #0]
 80086ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 80086ce:	bf18      	it	ne
 80086d0:	b236      	sxthne	r6, r6
 80086d2:	e7ef      	b.n	80086b4 <_printf_i+0xbc>
 80086d4:	682b      	ldr	r3, [r5, #0]
 80086d6:	6820      	ldr	r0, [r4, #0]
 80086d8:	1d19      	adds	r1, r3, #4
 80086da:	6029      	str	r1, [r5, #0]
 80086dc:	0601      	lsls	r1, r0, #24
 80086de:	d501      	bpl.n	80086e4 <_printf_i+0xec>
 80086e0:	681e      	ldr	r6, [r3, #0]
 80086e2:	e002      	b.n	80086ea <_printf_i+0xf2>
 80086e4:	0646      	lsls	r6, r0, #25
 80086e6:	d5fb      	bpl.n	80086e0 <_printf_i+0xe8>
 80086e8:	881e      	ldrh	r6, [r3, #0]
 80086ea:	4854      	ldr	r0, [pc, #336]	; (800883c <_printf_i+0x244>)
 80086ec:	2f6f      	cmp	r7, #111	; 0x6f
 80086ee:	bf0c      	ite	eq
 80086f0:	2308      	moveq	r3, #8
 80086f2:	230a      	movne	r3, #10
 80086f4:	2100      	movs	r1, #0
 80086f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80086fa:	6865      	ldr	r5, [r4, #4]
 80086fc:	60a5      	str	r5, [r4, #8]
 80086fe:	2d00      	cmp	r5, #0
 8008700:	bfa2      	ittt	ge
 8008702:	6821      	ldrge	r1, [r4, #0]
 8008704:	f021 0104 	bicge.w	r1, r1, #4
 8008708:	6021      	strge	r1, [r4, #0]
 800870a:	b90e      	cbnz	r6, 8008710 <_printf_i+0x118>
 800870c:	2d00      	cmp	r5, #0
 800870e:	d04d      	beq.n	80087ac <_printf_i+0x1b4>
 8008710:	4615      	mov	r5, r2
 8008712:	fbb6 f1f3 	udiv	r1, r6, r3
 8008716:	fb03 6711 	mls	r7, r3, r1, r6
 800871a:	5dc7      	ldrb	r7, [r0, r7]
 800871c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008720:	4637      	mov	r7, r6
 8008722:	42bb      	cmp	r3, r7
 8008724:	460e      	mov	r6, r1
 8008726:	d9f4      	bls.n	8008712 <_printf_i+0x11a>
 8008728:	2b08      	cmp	r3, #8
 800872a:	d10b      	bne.n	8008744 <_printf_i+0x14c>
 800872c:	6823      	ldr	r3, [r4, #0]
 800872e:	07de      	lsls	r6, r3, #31
 8008730:	d508      	bpl.n	8008744 <_printf_i+0x14c>
 8008732:	6923      	ldr	r3, [r4, #16]
 8008734:	6861      	ldr	r1, [r4, #4]
 8008736:	4299      	cmp	r1, r3
 8008738:	bfde      	ittt	le
 800873a:	2330      	movle	r3, #48	; 0x30
 800873c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008740:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008744:	1b52      	subs	r2, r2, r5
 8008746:	6122      	str	r2, [r4, #16]
 8008748:	f8cd a000 	str.w	sl, [sp]
 800874c:	464b      	mov	r3, r9
 800874e:	aa03      	add	r2, sp, #12
 8008750:	4621      	mov	r1, r4
 8008752:	4640      	mov	r0, r8
 8008754:	f7ff fee2 	bl	800851c <_printf_common>
 8008758:	3001      	adds	r0, #1
 800875a:	d14c      	bne.n	80087f6 <_printf_i+0x1fe>
 800875c:	f04f 30ff 	mov.w	r0, #4294967295
 8008760:	b004      	add	sp, #16
 8008762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008766:	4835      	ldr	r0, [pc, #212]	; (800883c <_printf_i+0x244>)
 8008768:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800876c:	6829      	ldr	r1, [r5, #0]
 800876e:	6823      	ldr	r3, [r4, #0]
 8008770:	f851 6b04 	ldr.w	r6, [r1], #4
 8008774:	6029      	str	r1, [r5, #0]
 8008776:	061d      	lsls	r5, r3, #24
 8008778:	d514      	bpl.n	80087a4 <_printf_i+0x1ac>
 800877a:	07df      	lsls	r7, r3, #31
 800877c:	bf44      	itt	mi
 800877e:	f043 0320 	orrmi.w	r3, r3, #32
 8008782:	6023      	strmi	r3, [r4, #0]
 8008784:	b91e      	cbnz	r6, 800878e <_printf_i+0x196>
 8008786:	6823      	ldr	r3, [r4, #0]
 8008788:	f023 0320 	bic.w	r3, r3, #32
 800878c:	6023      	str	r3, [r4, #0]
 800878e:	2310      	movs	r3, #16
 8008790:	e7b0      	b.n	80086f4 <_printf_i+0xfc>
 8008792:	6823      	ldr	r3, [r4, #0]
 8008794:	f043 0320 	orr.w	r3, r3, #32
 8008798:	6023      	str	r3, [r4, #0]
 800879a:	2378      	movs	r3, #120	; 0x78
 800879c:	4828      	ldr	r0, [pc, #160]	; (8008840 <_printf_i+0x248>)
 800879e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80087a2:	e7e3      	b.n	800876c <_printf_i+0x174>
 80087a4:	0659      	lsls	r1, r3, #25
 80087a6:	bf48      	it	mi
 80087a8:	b2b6      	uxthmi	r6, r6
 80087aa:	e7e6      	b.n	800877a <_printf_i+0x182>
 80087ac:	4615      	mov	r5, r2
 80087ae:	e7bb      	b.n	8008728 <_printf_i+0x130>
 80087b0:	682b      	ldr	r3, [r5, #0]
 80087b2:	6826      	ldr	r6, [r4, #0]
 80087b4:	6961      	ldr	r1, [r4, #20]
 80087b6:	1d18      	adds	r0, r3, #4
 80087b8:	6028      	str	r0, [r5, #0]
 80087ba:	0635      	lsls	r5, r6, #24
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	d501      	bpl.n	80087c4 <_printf_i+0x1cc>
 80087c0:	6019      	str	r1, [r3, #0]
 80087c2:	e002      	b.n	80087ca <_printf_i+0x1d2>
 80087c4:	0670      	lsls	r0, r6, #25
 80087c6:	d5fb      	bpl.n	80087c0 <_printf_i+0x1c8>
 80087c8:	8019      	strh	r1, [r3, #0]
 80087ca:	2300      	movs	r3, #0
 80087cc:	6123      	str	r3, [r4, #16]
 80087ce:	4615      	mov	r5, r2
 80087d0:	e7ba      	b.n	8008748 <_printf_i+0x150>
 80087d2:	682b      	ldr	r3, [r5, #0]
 80087d4:	1d1a      	adds	r2, r3, #4
 80087d6:	602a      	str	r2, [r5, #0]
 80087d8:	681d      	ldr	r5, [r3, #0]
 80087da:	6862      	ldr	r2, [r4, #4]
 80087dc:	2100      	movs	r1, #0
 80087de:	4628      	mov	r0, r5
 80087e0:	f7f7 fd06 	bl	80001f0 <memchr>
 80087e4:	b108      	cbz	r0, 80087ea <_printf_i+0x1f2>
 80087e6:	1b40      	subs	r0, r0, r5
 80087e8:	6060      	str	r0, [r4, #4]
 80087ea:	6863      	ldr	r3, [r4, #4]
 80087ec:	6123      	str	r3, [r4, #16]
 80087ee:	2300      	movs	r3, #0
 80087f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087f4:	e7a8      	b.n	8008748 <_printf_i+0x150>
 80087f6:	6923      	ldr	r3, [r4, #16]
 80087f8:	462a      	mov	r2, r5
 80087fa:	4649      	mov	r1, r9
 80087fc:	4640      	mov	r0, r8
 80087fe:	47d0      	blx	sl
 8008800:	3001      	adds	r0, #1
 8008802:	d0ab      	beq.n	800875c <_printf_i+0x164>
 8008804:	6823      	ldr	r3, [r4, #0]
 8008806:	079b      	lsls	r3, r3, #30
 8008808:	d413      	bmi.n	8008832 <_printf_i+0x23a>
 800880a:	68e0      	ldr	r0, [r4, #12]
 800880c:	9b03      	ldr	r3, [sp, #12]
 800880e:	4298      	cmp	r0, r3
 8008810:	bfb8      	it	lt
 8008812:	4618      	movlt	r0, r3
 8008814:	e7a4      	b.n	8008760 <_printf_i+0x168>
 8008816:	2301      	movs	r3, #1
 8008818:	4632      	mov	r2, r6
 800881a:	4649      	mov	r1, r9
 800881c:	4640      	mov	r0, r8
 800881e:	47d0      	blx	sl
 8008820:	3001      	adds	r0, #1
 8008822:	d09b      	beq.n	800875c <_printf_i+0x164>
 8008824:	3501      	adds	r5, #1
 8008826:	68e3      	ldr	r3, [r4, #12]
 8008828:	9903      	ldr	r1, [sp, #12]
 800882a:	1a5b      	subs	r3, r3, r1
 800882c:	42ab      	cmp	r3, r5
 800882e:	dcf2      	bgt.n	8008816 <_printf_i+0x21e>
 8008830:	e7eb      	b.n	800880a <_printf_i+0x212>
 8008832:	2500      	movs	r5, #0
 8008834:	f104 0619 	add.w	r6, r4, #25
 8008838:	e7f5      	b.n	8008826 <_printf_i+0x22e>
 800883a:	bf00      	nop
 800883c:	0800bcba 	.word	0x0800bcba
 8008840:	0800bccb 	.word	0x0800bccb

08008844 <sniprintf>:
 8008844:	b40c      	push	{r2, r3}
 8008846:	b530      	push	{r4, r5, lr}
 8008848:	4b17      	ldr	r3, [pc, #92]	; (80088a8 <sniprintf+0x64>)
 800884a:	1e0c      	subs	r4, r1, #0
 800884c:	681d      	ldr	r5, [r3, #0]
 800884e:	b09d      	sub	sp, #116	; 0x74
 8008850:	da08      	bge.n	8008864 <sniprintf+0x20>
 8008852:	238b      	movs	r3, #139	; 0x8b
 8008854:	602b      	str	r3, [r5, #0]
 8008856:	f04f 30ff 	mov.w	r0, #4294967295
 800885a:	b01d      	add	sp, #116	; 0x74
 800885c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008860:	b002      	add	sp, #8
 8008862:	4770      	bx	lr
 8008864:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008868:	f8ad 3014 	strh.w	r3, [sp, #20]
 800886c:	bf14      	ite	ne
 800886e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008872:	4623      	moveq	r3, r4
 8008874:	9304      	str	r3, [sp, #16]
 8008876:	9307      	str	r3, [sp, #28]
 8008878:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800887c:	9002      	str	r0, [sp, #8]
 800887e:	9006      	str	r0, [sp, #24]
 8008880:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008884:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008886:	ab21      	add	r3, sp, #132	; 0x84
 8008888:	a902      	add	r1, sp, #8
 800888a:	4628      	mov	r0, r5
 800888c:	9301      	str	r3, [sp, #4]
 800888e:	f001 fb79 	bl	8009f84 <_svfiprintf_r>
 8008892:	1c43      	adds	r3, r0, #1
 8008894:	bfbc      	itt	lt
 8008896:	238b      	movlt	r3, #139	; 0x8b
 8008898:	602b      	strlt	r3, [r5, #0]
 800889a:	2c00      	cmp	r4, #0
 800889c:	d0dd      	beq.n	800885a <sniprintf+0x16>
 800889e:	9b02      	ldr	r3, [sp, #8]
 80088a0:	2200      	movs	r2, #0
 80088a2:	701a      	strb	r2, [r3, #0]
 80088a4:	e7d9      	b.n	800885a <sniprintf+0x16>
 80088a6:	bf00      	nop
 80088a8:	20000040 	.word	0x20000040

080088ac <quorem>:
 80088ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088b0:	6903      	ldr	r3, [r0, #16]
 80088b2:	690c      	ldr	r4, [r1, #16]
 80088b4:	42a3      	cmp	r3, r4
 80088b6:	4607      	mov	r7, r0
 80088b8:	f2c0 8081 	blt.w	80089be <quorem+0x112>
 80088bc:	3c01      	subs	r4, #1
 80088be:	f101 0814 	add.w	r8, r1, #20
 80088c2:	f100 0514 	add.w	r5, r0, #20
 80088c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80088ca:	9301      	str	r3, [sp, #4]
 80088cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80088d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80088d4:	3301      	adds	r3, #1
 80088d6:	429a      	cmp	r2, r3
 80088d8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80088dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80088e0:	fbb2 f6f3 	udiv	r6, r2, r3
 80088e4:	d331      	bcc.n	800894a <quorem+0x9e>
 80088e6:	f04f 0e00 	mov.w	lr, #0
 80088ea:	4640      	mov	r0, r8
 80088ec:	46ac      	mov	ip, r5
 80088ee:	46f2      	mov	sl, lr
 80088f0:	f850 2b04 	ldr.w	r2, [r0], #4
 80088f4:	b293      	uxth	r3, r2
 80088f6:	fb06 e303 	mla	r3, r6, r3, lr
 80088fa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80088fe:	b29b      	uxth	r3, r3
 8008900:	ebaa 0303 	sub.w	r3, sl, r3
 8008904:	f8dc a000 	ldr.w	sl, [ip]
 8008908:	0c12      	lsrs	r2, r2, #16
 800890a:	fa13 f38a 	uxtah	r3, r3, sl
 800890e:	fb06 e202 	mla	r2, r6, r2, lr
 8008912:	9300      	str	r3, [sp, #0]
 8008914:	9b00      	ldr	r3, [sp, #0]
 8008916:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800891a:	b292      	uxth	r2, r2
 800891c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008920:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008924:	f8bd 3000 	ldrh.w	r3, [sp]
 8008928:	4581      	cmp	r9, r0
 800892a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800892e:	f84c 3b04 	str.w	r3, [ip], #4
 8008932:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008936:	d2db      	bcs.n	80088f0 <quorem+0x44>
 8008938:	f855 300b 	ldr.w	r3, [r5, fp]
 800893c:	b92b      	cbnz	r3, 800894a <quorem+0x9e>
 800893e:	9b01      	ldr	r3, [sp, #4]
 8008940:	3b04      	subs	r3, #4
 8008942:	429d      	cmp	r5, r3
 8008944:	461a      	mov	r2, r3
 8008946:	d32e      	bcc.n	80089a6 <quorem+0xfa>
 8008948:	613c      	str	r4, [r7, #16]
 800894a:	4638      	mov	r0, r7
 800894c:	f001 f8c6 	bl	8009adc <__mcmp>
 8008950:	2800      	cmp	r0, #0
 8008952:	db24      	blt.n	800899e <quorem+0xf2>
 8008954:	3601      	adds	r6, #1
 8008956:	4628      	mov	r0, r5
 8008958:	f04f 0c00 	mov.w	ip, #0
 800895c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008960:	f8d0 e000 	ldr.w	lr, [r0]
 8008964:	b293      	uxth	r3, r2
 8008966:	ebac 0303 	sub.w	r3, ip, r3
 800896a:	0c12      	lsrs	r2, r2, #16
 800896c:	fa13 f38e 	uxtah	r3, r3, lr
 8008970:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008974:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008978:	b29b      	uxth	r3, r3
 800897a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800897e:	45c1      	cmp	r9, r8
 8008980:	f840 3b04 	str.w	r3, [r0], #4
 8008984:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008988:	d2e8      	bcs.n	800895c <quorem+0xb0>
 800898a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800898e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008992:	b922      	cbnz	r2, 800899e <quorem+0xf2>
 8008994:	3b04      	subs	r3, #4
 8008996:	429d      	cmp	r5, r3
 8008998:	461a      	mov	r2, r3
 800899a:	d30a      	bcc.n	80089b2 <quorem+0x106>
 800899c:	613c      	str	r4, [r7, #16]
 800899e:	4630      	mov	r0, r6
 80089a0:	b003      	add	sp, #12
 80089a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089a6:	6812      	ldr	r2, [r2, #0]
 80089a8:	3b04      	subs	r3, #4
 80089aa:	2a00      	cmp	r2, #0
 80089ac:	d1cc      	bne.n	8008948 <quorem+0x9c>
 80089ae:	3c01      	subs	r4, #1
 80089b0:	e7c7      	b.n	8008942 <quorem+0x96>
 80089b2:	6812      	ldr	r2, [r2, #0]
 80089b4:	3b04      	subs	r3, #4
 80089b6:	2a00      	cmp	r2, #0
 80089b8:	d1f0      	bne.n	800899c <quorem+0xf0>
 80089ba:	3c01      	subs	r4, #1
 80089bc:	e7eb      	b.n	8008996 <quorem+0xea>
 80089be:	2000      	movs	r0, #0
 80089c0:	e7ee      	b.n	80089a0 <quorem+0xf4>
 80089c2:	0000      	movs	r0, r0
 80089c4:	0000      	movs	r0, r0
	...

080089c8 <_dtoa_r>:
 80089c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089cc:	ed2d 8b04 	vpush	{d8-d9}
 80089d0:	ec57 6b10 	vmov	r6, r7, d0
 80089d4:	b093      	sub	sp, #76	; 0x4c
 80089d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80089d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80089dc:	9106      	str	r1, [sp, #24]
 80089de:	ee10 aa10 	vmov	sl, s0
 80089e2:	4604      	mov	r4, r0
 80089e4:	9209      	str	r2, [sp, #36]	; 0x24
 80089e6:	930c      	str	r3, [sp, #48]	; 0x30
 80089e8:	46bb      	mov	fp, r7
 80089ea:	b975      	cbnz	r5, 8008a0a <_dtoa_r+0x42>
 80089ec:	2010      	movs	r0, #16
 80089ee:	f000 fddd 	bl	80095ac <malloc>
 80089f2:	4602      	mov	r2, r0
 80089f4:	6260      	str	r0, [r4, #36]	; 0x24
 80089f6:	b920      	cbnz	r0, 8008a02 <_dtoa_r+0x3a>
 80089f8:	4ba7      	ldr	r3, [pc, #668]	; (8008c98 <_dtoa_r+0x2d0>)
 80089fa:	21ea      	movs	r1, #234	; 0xea
 80089fc:	48a7      	ldr	r0, [pc, #668]	; (8008c9c <_dtoa_r+0x2d4>)
 80089fe:	f001 fbd1 	bl	800a1a4 <__assert_func>
 8008a02:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008a06:	6005      	str	r5, [r0, #0]
 8008a08:	60c5      	str	r5, [r0, #12]
 8008a0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a0c:	6819      	ldr	r1, [r3, #0]
 8008a0e:	b151      	cbz	r1, 8008a26 <_dtoa_r+0x5e>
 8008a10:	685a      	ldr	r2, [r3, #4]
 8008a12:	604a      	str	r2, [r1, #4]
 8008a14:	2301      	movs	r3, #1
 8008a16:	4093      	lsls	r3, r2
 8008a18:	608b      	str	r3, [r1, #8]
 8008a1a:	4620      	mov	r0, r4
 8008a1c:	f000 fe1c 	bl	8009658 <_Bfree>
 8008a20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a22:	2200      	movs	r2, #0
 8008a24:	601a      	str	r2, [r3, #0]
 8008a26:	1e3b      	subs	r3, r7, #0
 8008a28:	bfaa      	itet	ge
 8008a2a:	2300      	movge	r3, #0
 8008a2c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008a30:	f8c8 3000 	strge.w	r3, [r8]
 8008a34:	4b9a      	ldr	r3, [pc, #616]	; (8008ca0 <_dtoa_r+0x2d8>)
 8008a36:	bfbc      	itt	lt
 8008a38:	2201      	movlt	r2, #1
 8008a3a:	f8c8 2000 	strlt.w	r2, [r8]
 8008a3e:	ea33 030b 	bics.w	r3, r3, fp
 8008a42:	d11b      	bne.n	8008a7c <_dtoa_r+0xb4>
 8008a44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a46:	f242 730f 	movw	r3, #9999	; 0x270f
 8008a4a:	6013      	str	r3, [r2, #0]
 8008a4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a50:	4333      	orrs	r3, r6
 8008a52:	f000 8592 	beq.w	800957a <_dtoa_r+0xbb2>
 8008a56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a58:	b963      	cbnz	r3, 8008a74 <_dtoa_r+0xac>
 8008a5a:	4b92      	ldr	r3, [pc, #584]	; (8008ca4 <_dtoa_r+0x2dc>)
 8008a5c:	e022      	b.n	8008aa4 <_dtoa_r+0xdc>
 8008a5e:	4b92      	ldr	r3, [pc, #584]	; (8008ca8 <_dtoa_r+0x2e0>)
 8008a60:	9301      	str	r3, [sp, #4]
 8008a62:	3308      	adds	r3, #8
 8008a64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008a66:	6013      	str	r3, [r2, #0]
 8008a68:	9801      	ldr	r0, [sp, #4]
 8008a6a:	b013      	add	sp, #76	; 0x4c
 8008a6c:	ecbd 8b04 	vpop	{d8-d9}
 8008a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a74:	4b8b      	ldr	r3, [pc, #556]	; (8008ca4 <_dtoa_r+0x2dc>)
 8008a76:	9301      	str	r3, [sp, #4]
 8008a78:	3303      	adds	r3, #3
 8008a7a:	e7f3      	b.n	8008a64 <_dtoa_r+0x9c>
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	2300      	movs	r3, #0
 8008a80:	4650      	mov	r0, sl
 8008a82:	4659      	mov	r1, fp
 8008a84:	f7f8 f828 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a88:	ec4b ab19 	vmov	d9, sl, fp
 8008a8c:	4680      	mov	r8, r0
 8008a8e:	b158      	cbz	r0, 8008aa8 <_dtoa_r+0xe0>
 8008a90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a92:	2301      	movs	r3, #1
 8008a94:	6013      	str	r3, [r2, #0]
 8008a96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	f000 856b 	beq.w	8009574 <_dtoa_r+0xbac>
 8008a9e:	4883      	ldr	r0, [pc, #524]	; (8008cac <_dtoa_r+0x2e4>)
 8008aa0:	6018      	str	r0, [r3, #0]
 8008aa2:	1e43      	subs	r3, r0, #1
 8008aa4:	9301      	str	r3, [sp, #4]
 8008aa6:	e7df      	b.n	8008a68 <_dtoa_r+0xa0>
 8008aa8:	ec4b ab10 	vmov	d0, sl, fp
 8008aac:	aa10      	add	r2, sp, #64	; 0x40
 8008aae:	a911      	add	r1, sp, #68	; 0x44
 8008ab0:	4620      	mov	r0, r4
 8008ab2:	f001 f8b9 	bl	8009c28 <__d2b>
 8008ab6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008aba:	ee08 0a10 	vmov	s16, r0
 8008abe:	2d00      	cmp	r5, #0
 8008ac0:	f000 8084 	beq.w	8008bcc <_dtoa_r+0x204>
 8008ac4:	ee19 3a90 	vmov	r3, s19
 8008ac8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008acc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008ad0:	4656      	mov	r6, sl
 8008ad2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008ad6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008ada:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008ade:	4b74      	ldr	r3, [pc, #464]	; (8008cb0 <_dtoa_r+0x2e8>)
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	4630      	mov	r0, r6
 8008ae4:	4639      	mov	r1, r7
 8008ae6:	f7f7 fbd7 	bl	8000298 <__aeabi_dsub>
 8008aea:	a365      	add	r3, pc, #404	; (adr r3, 8008c80 <_dtoa_r+0x2b8>)
 8008aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af0:	f7f7 fd8a 	bl	8000608 <__aeabi_dmul>
 8008af4:	a364      	add	r3, pc, #400	; (adr r3, 8008c88 <_dtoa_r+0x2c0>)
 8008af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008afa:	f7f7 fbcf 	bl	800029c <__adddf3>
 8008afe:	4606      	mov	r6, r0
 8008b00:	4628      	mov	r0, r5
 8008b02:	460f      	mov	r7, r1
 8008b04:	f7f7 fd16 	bl	8000534 <__aeabi_i2d>
 8008b08:	a361      	add	r3, pc, #388	; (adr r3, 8008c90 <_dtoa_r+0x2c8>)
 8008b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b0e:	f7f7 fd7b 	bl	8000608 <__aeabi_dmul>
 8008b12:	4602      	mov	r2, r0
 8008b14:	460b      	mov	r3, r1
 8008b16:	4630      	mov	r0, r6
 8008b18:	4639      	mov	r1, r7
 8008b1a:	f7f7 fbbf 	bl	800029c <__adddf3>
 8008b1e:	4606      	mov	r6, r0
 8008b20:	460f      	mov	r7, r1
 8008b22:	f7f8 f821 	bl	8000b68 <__aeabi_d2iz>
 8008b26:	2200      	movs	r2, #0
 8008b28:	9000      	str	r0, [sp, #0]
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	4630      	mov	r0, r6
 8008b2e:	4639      	mov	r1, r7
 8008b30:	f7f7 ffdc 	bl	8000aec <__aeabi_dcmplt>
 8008b34:	b150      	cbz	r0, 8008b4c <_dtoa_r+0x184>
 8008b36:	9800      	ldr	r0, [sp, #0]
 8008b38:	f7f7 fcfc 	bl	8000534 <__aeabi_i2d>
 8008b3c:	4632      	mov	r2, r6
 8008b3e:	463b      	mov	r3, r7
 8008b40:	f7f7 ffca 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b44:	b910      	cbnz	r0, 8008b4c <_dtoa_r+0x184>
 8008b46:	9b00      	ldr	r3, [sp, #0]
 8008b48:	3b01      	subs	r3, #1
 8008b4a:	9300      	str	r3, [sp, #0]
 8008b4c:	9b00      	ldr	r3, [sp, #0]
 8008b4e:	2b16      	cmp	r3, #22
 8008b50:	d85a      	bhi.n	8008c08 <_dtoa_r+0x240>
 8008b52:	9a00      	ldr	r2, [sp, #0]
 8008b54:	4b57      	ldr	r3, [pc, #348]	; (8008cb4 <_dtoa_r+0x2ec>)
 8008b56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b5e:	ec51 0b19 	vmov	r0, r1, d9
 8008b62:	f7f7 ffc3 	bl	8000aec <__aeabi_dcmplt>
 8008b66:	2800      	cmp	r0, #0
 8008b68:	d050      	beq.n	8008c0c <_dtoa_r+0x244>
 8008b6a:	9b00      	ldr	r3, [sp, #0]
 8008b6c:	3b01      	subs	r3, #1
 8008b6e:	9300      	str	r3, [sp, #0]
 8008b70:	2300      	movs	r3, #0
 8008b72:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b76:	1b5d      	subs	r5, r3, r5
 8008b78:	1e6b      	subs	r3, r5, #1
 8008b7a:	9305      	str	r3, [sp, #20]
 8008b7c:	bf45      	ittet	mi
 8008b7e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008b82:	9304      	strmi	r3, [sp, #16]
 8008b84:	2300      	movpl	r3, #0
 8008b86:	2300      	movmi	r3, #0
 8008b88:	bf4c      	ite	mi
 8008b8a:	9305      	strmi	r3, [sp, #20]
 8008b8c:	9304      	strpl	r3, [sp, #16]
 8008b8e:	9b00      	ldr	r3, [sp, #0]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	db3d      	blt.n	8008c10 <_dtoa_r+0x248>
 8008b94:	9b05      	ldr	r3, [sp, #20]
 8008b96:	9a00      	ldr	r2, [sp, #0]
 8008b98:	920a      	str	r2, [sp, #40]	; 0x28
 8008b9a:	4413      	add	r3, r2
 8008b9c:	9305      	str	r3, [sp, #20]
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	9307      	str	r3, [sp, #28]
 8008ba2:	9b06      	ldr	r3, [sp, #24]
 8008ba4:	2b09      	cmp	r3, #9
 8008ba6:	f200 8089 	bhi.w	8008cbc <_dtoa_r+0x2f4>
 8008baa:	2b05      	cmp	r3, #5
 8008bac:	bfc4      	itt	gt
 8008bae:	3b04      	subgt	r3, #4
 8008bb0:	9306      	strgt	r3, [sp, #24]
 8008bb2:	9b06      	ldr	r3, [sp, #24]
 8008bb4:	f1a3 0302 	sub.w	r3, r3, #2
 8008bb8:	bfcc      	ite	gt
 8008bba:	2500      	movgt	r5, #0
 8008bbc:	2501      	movle	r5, #1
 8008bbe:	2b03      	cmp	r3, #3
 8008bc0:	f200 8087 	bhi.w	8008cd2 <_dtoa_r+0x30a>
 8008bc4:	e8df f003 	tbb	[pc, r3]
 8008bc8:	59383a2d 	.word	0x59383a2d
 8008bcc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008bd0:	441d      	add	r5, r3
 8008bd2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008bd6:	2b20      	cmp	r3, #32
 8008bd8:	bfc1      	itttt	gt
 8008bda:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008bde:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008be2:	fa0b f303 	lslgt.w	r3, fp, r3
 8008be6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008bea:	bfda      	itte	le
 8008bec:	f1c3 0320 	rsble	r3, r3, #32
 8008bf0:	fa06 f003 	lslle.w	r0, r6, r3
 8008bf4:	4318      	orrgt	r0, r3
 8008bf6:	f7f7 fc8d 	bl	8000514 <__aeabi_ui2d>
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	4606      	mov	r6, r0
 8008bfe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008c02:	3d01      	subs	r5, #1
 8008c04:	930e      	str	r3, [sp, #56]	; 0x38
 8008c06:	e76a      	b.n	8008ade <_dtoa_r+0x116>
 8008c08:	2301      	movs	r3, #1
 8008c0a:	e7b2      	b.n	8008b72 <_dtoa_r+0x1aa>
 8008c0c:	900b      	str	r0, [sp, #44]	; 0x2c
 8008c0e:	e7b1      	b.n	8008b74 <_dtoa_r+0x1ac>
 8008c10:	9b04      	ldr	r3, [sp, #16]
 8008c12:	9a00      	ldr	r2, [sp, #0]
 8008c14:	1a9b      	subs	r3, r3, r2
 8008c16:	9304      	str	r3, [sp, #16]
 8008c18:	4253      	negs	r3, r2
 8008c1a:	9307      	str	r3, [sp, #28]
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	930a      	str	r3, [sp, #40]	; 0x28
 8008c20:	e7bf      	b.n	8008ba2 <_dtoa_r+0x1da>
 8008c22:	2300      	movs	r3, #0
 8008c24:	9308      	str	r3, [sp, #32]
 8008c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	dc55      	bgt.n	8008cd8 <_dtoa_r+0x310>
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008c32:	461a      	mov	r2, r3
 8008c34:	9209      	str	r2, [sp, #36]	; 0x24
 8008c36:	e00c      	b.n	8008c52 <_dtoa_r+0x28a>
 8008c38:	2301      	movs	r3, #1
 8008c3a:	e7f3      	b.n	8008c24 <_dtoa_r+0x25c>
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c40:	9308      	str	r3, [sp, #32]
 8008c42:	9b00      	ldr	r3, [sp, #0]
 8008c44:	4413      	add	r3, r2
 8008c46:	9302      	str	r3, [sp, #8]
 8008c48:	3301      	adds	r3, #1
 8008c4a:	2b01      	cmp	r3, #1
 8008c4c:	9303      	str	r3, [sp, #12]
 8008c4e:	bfb8      	it	lt
 8008c50:	2301      	movlt	r3, #1
 8008c52:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008c54:	2200      	movs	r2, #0
 8008c56:	6042      	str	r2, [r0, #4]
 8008c58:	2204      	movs	r2, #4
 8008c5a:	f102 0614 	add.w	r6, r2, #20
 8008c5e:	429e      	cmp	r6, r3
 8008c60:	6841      	ldr	r1, [r0, #4]
 8008c62:	d93d      	bls.n	8008ce0 <_dtoa_r+0x318>
 8008c64:	4620      	mov	r0, r4
 8008c66:	f000 fcb7 	bl	80095d8 <_Balloc>
 8008c6a:	9001      	str	r0, [sp, #4]
 8008c6c:	2800      	cmp	r0, #0
 8008c6e:	d13b      	bne.n	8008ce8 <_dtoa_r+0x320>
 8008c70:	4b11      	ldr	r3, [pc, #68]	; (8008cb8 <_dtoa_r+0x2f0>)
 8008c72:	4602      	mov	r2, r0
 8008c74:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008c78:	e6c0      	b.n	80089fc <_dtoa_r+0x34>
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	e7df      	b.n	8008c3e <_dtoa_r+0x276>
 8008c7e:	bf00      	nop
 8008c80:	636f4361 	.word	0x636f4361
 8008c84:	3fd287a7 	.word	0x3fd287a7
 8008c88:	8b60c8b3 	.word	0x8b60c8b3
 8008c8c:	3fc68a28 	.word	0x3fc68a28
 8008c90:	509f79fb 	.word	0x509f79fb
 8008c94:	3fd34413 	.word	0x3fd34413
 8008c98:	0800bce9 	.word	0x0800bce9
 8008c9c:	0800bd00 	.word	0x0800bd00
 8008ca0:	7ff00000 	.word	0x7ff00000
 8008ca4:	0800bce5 	.word	0x0800bce5
 8008ca8:	0800bcdc 	.word	0x0800bcdc
 8008cac:	0800bcb9 	.word	0x0800bcb9
 8008cb0:	3ff80000 	.word	0x3ff80000
 8008cb4:	0800bdf0 	.word	0x0800bdf0
 8008cb8:	0800bd5b 	.word	0x0800bd5b
 8008cbc:	2501      	movs	r5, #1
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	9306      	str	r3, [sp, #24]
 8008cc2:	9508      	str	r5, [sp, #32]
 8008cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8008cc8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	2312      	movs	r3, #18
 8008cd0:	e7b0      	b.n	8008c34 <_dtoa_r+0x26c>
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	9308      	str	r3, [sp, #32]
 8008cd6:	e7f5      	b.n	8008cc4 <_dtoa_r+0x2fc>
 8008cd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cda:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008cde:	e7b8      	b.n	8008c52 <_dtoa_r+0x28a>
 8008ce0:	3101      	adds	r1, #1
 8008ce2:	6041      	str	r1, [r0, #4]
 8008ce4:	0052      	lsls	r2, r2, #1
 8008ce6:	e7b8      	b.n	8008c5a <_dtoa_r+0x292>
 8008ce8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cea:	9a01      	ldr	r2, [sp, #4]
 8008cec:	601a      	str	r2, [r3, #0]
 8008cee:	9b03      	ldr	r3, [sp, #12]
 8008cf0:	2b0e      	cmp	r3, #14
 8008cf2:	f200 809d 	bhi.w	8008e30 <_dtoa_r+0x468>
 8008cf6:	2d00      	cmp	r5, #0
 8008cf8:	f000 809a 	beq.w	8008e30 <_dtoa_r+0x468>
 8008cfc:	9b00      	ldr	r3, [sp, #0]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	dd32      	ble.n	8008d68 <_dtoa_r+0x3a0>
 8008d02:	4ab7      	ldr	r2, [pc, #732]	; (8008fe0 <_dtoa_r+0x618>)
 8008d04:	f003 030f 	and.w	r3, r3, #15
 8008d08:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008d0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008d10:	9b00      	ldr	r3, [sp, #0]
 8008d12:	05d8      	lsls	r0, r3, #23
 8008d14:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008d18:	d516      	bpl.n	8008d48 <_dtoa_r+0x380>
 8008d1a:	4bb2      	ldr	r3, [pc, #712]	; (8008fe4 <_dtoa_r+0x61c>)
 8008d1c:	ec51 0b19 	vmov	r0, r1, d9
 8008d20:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008d24:	f7f7 fd9a 	bl	800085c <__aeabi_ddiv>
 8008d28:	f007 070f 	and.w	r7, r7, #15
 8008d2c:	4682      	mov	sl, r0
 8008d2e:	468b      	mov	fp, r1
 8008d30:	2503      	movs	r5, #3
 8008d32:	4eac      	ldr	r6, [pc, #688]	; (8008fe4 <_dtoa_r+0x61c>)
 8008d34:	b957      	cbnz	r7, 8008d4c <_dtoa_r+0x384>
 8008d36:	4642      	mov	r2, r8
 8008d38:	464b      	mov	r3, r9
 8008d3a:	4650      	mov	r0, sl
 8008d3c:	4659      	mov	r1, fp
 8008d3e:	f7f7 fd8d 	bl	800085c <__aeabi_ddiv>
 8008d42:	4682      	mov	sl, r0
 8008d44:	468b      	mov	fp, r1
 8008d46:	e028      	b.n	8008d9a <_dtoa_r+0x3d2>
 8008d48:	2502      	movs	r5, #2
 8008d4a:	e7f2      	b.n	8008d32 <_dtoa_r+0x36a>
 8008d4c:	07f9      	lsls	r1, r7, #31
 8008d4e:	d508      	bpl.n	8008d62 <_dtoa_r+0x39a>
 8008d50:	4640      	mov	r0, r8
 8008d52:	4649      	mov	r1, r9
 8008d54:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008d58:	f7f7 fc56 	bl	8000608 <__aeabi_dmul>
 8008d5c:	3501      	adds	r5, #1
 8008d5e:	4680      	mov	r8, r0
 8008d60:	4689      	mov	r9, r1
 8008d62:	107f      	asrs	r7, r7, #1
 8008d64:	3608      	adds	r6, #8
 8008d66:	e7e5      	b.n	8008d34 <_dtoa_r+0x36c>
 8008d68:	f000 809b 	beq.w	8008ea2 <_dtoa_r+0x4da>
 8008d6c:	9b00      	ldr	r3, [sp, #0]
 8008d6e:	4f9d      	ldr	r7, [pc, #628]	; (8008fe4 <_dtoa_r+0x61c>)
 8008d70:	425e      	negs	r6, r3
 8008d72:	4b9b      	ldr	r3, [pc, #620]	; (8008fe0 <_dtoa_r+0x618>)
 8008d74:	f006 020f 	and.w	r2, r6, #15
 8008d78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d80:	ec51 0b19 	vmov	r0, r1, d9
 8008d84:	f7f7 fc40 	bl	8000608 <__aeabi_dmul>
 8008d88:	1136      	asrs	r6, r6, #4
 8008d8a:	4682      	mov	sl, r0
 8008d8c:	468b      	mov	fp, r1
 8008d8e:	2300      	movs	r3, #0
 8008d90:	2502      	movs	r5, #2
 8008d92:	2e00      	cmp	r6, #0
 8008d94:	d17a      	bne.n	8008e8c <_dtoa_r+0x4c4>
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d1d3      	bne.n	8008d42 <_dtoa_r+0x37a>
 8008d9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	f000 8082 	beq.w	8008ea6 <_dtoa_r+0x4de>
 8008da2:	4b91      	ldr	r3, [pc, #580]	; (8008fe8 <_dtoa_r+0x620>)
 8008da4:	2200      	movs	r2, #0
 8008da6:	4650      	mov	r0, sl
 8008da8:	4659      	mov	r1, fp
 8008daa:	f7f7 fe9f 	bl	8000aec <__aeabi_dcmplt>
 8008dae:	2800      	cmp	r0, #0
 8008db0:	d079      	beq.n	8008ea6 <_dtoa_r+0x4de>
 8008db2:	9b03      	ldr	r3, [sp, #12]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d076      	beq.n	8008ea6 <_dtoa_r+0x4de>
 8008db8:	9b02      	ldr	r3, [sp, #8]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	dd36      	ble.n	8008e2c <_dtoa_r+0x464>
 8008dbe:	9b00      	ldr	r3, [sp, #0]
 8008dc0:	4650      	mov	r0, sl
 8008dc2:	4659      	mov	r1, fp
 8008dc4:	1e5f      	subs	r7, r3, #1
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	4b88      	ldr	r3, [pc, #544]	; (8008fec <_dtoa_r+0x624>)
 8008dca:	f7f7 fc1d 	bl	8000608 <__aeabi_dmul>
 8008dce:	9e02      	ldr	r6, [sp, #8]
 8008dd0:	4682      	mov	sl, r0
 8008dd2:	468b      	mov	fp, r1
 8008dd4:	3501      	adds	r5, #1
 8008dd6:	4628      	mov	r0, r5
 8008dd8:	f7f7 fbac 	bl	8000534 <__aeabi_i2d>
 8008ddc:	4652      	mov	r2, sl
 8008dde:	465b      	mov	r3, fp
 8008de0:	f7f7 fc12 	bl	8000608 <__aeabi_dmul>
 8008de4:	4b82      	ldr	r3, [pc, #520]	; (8008ff0 <_dtoa_r+0x628>)
 8008de6:	2200      	movs	r2, #0
 8008de8:	f7f7 fa58 	bl	800029c <__adddf3>
 8008dec:	46d0      	mov	r8, sl
 8008dee:	46d9      	mov	r9, fp
 8008df0:	4682      	mov	sl, r0
 8008df2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008df6:	2e00      	cmp	r6, #0
 8008df8:	d158      	bne.n	8008eac <_dtoa_r+0x4e4>
 8008dfa:	4b7e      	ldr	r3, [pc, #504]	; (8008ff4 <_dtoa_r+0x62c>)
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	4640      	mov	r0, r8
 8008e00:	4649      	mov	r1, r9
 8008e02:	f7f7 fa49 	bl	8000298 <__aeabi_dsub>
 8008e06:	4652      	mov	r2, sl
 8008e08:	465b      	mov	r3, fp
 8008e0a:	4680      	mov	r8, r0
 8008e0c:	4689      	mov	r9, r1
 8008e0e:	f7f7 fe8b 	bl	8000b28 <__aeabi_dcmpgt>
 8008e12:	2800      	cmp	r0, #0
 8008e14:	f040 8295 	bne.w	8009342 <_dtoa_r+0x97a>
 8008e18:	4652      	mov	r2, sl
 8008e1a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008e1e:	4640      	mov	r0, r8
 8008e20:	4649      	mov	r1, r9
 8008e22:	f7f7 fe63 	bl	8000aec <__aeabi_dcmplt>
 8008e26:	2800      	cmp	r0, #0
 8008e28:	f040 8289 	bne.w	800933e <_dtoa_r+0x976>
 8008e2c:	ec5b ab19 	vmov	sl, fp, d9
 8008e30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	f2c0 8148 	blt.w	80090c8 <_dtoa_r+0x700>
 8008e38:	9a00      	ldr	r2, [sp, #0]
 8008e3a:	2a0e      	cmp	r2, #14
 8008e3c:	f300 8144 	bgt.w	80090c8 <_dtoa_r+0x700>
 8008e40:	4b67      	ldr	r3, [pc, #412]	; (8008fe0 <_dtoa_r+0x618>)
 8008e42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e46:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	f280 80d5 	bge.w	8008ffc <_dtoa_r+0x634>
 8008e52:	9b03      	ldr	r3, [sp, #12]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	f300 80d1 	bgt.w	8008ffc <_dtoa_r+0x634>
 8008e5a:	f040 826f 	bne.w	800933c <_dtoa_r+0x974>
 8008e5e:	4b65      	ldr	r3, [pc, #404]	; (8008ff4 <_dtoa_r+0x62c>)
 8008e60:	2200      	movs	r2, #0
 8008e62:	4640      	mov	r0, r8
 8008e64:	4649      	mov	r1, r9
 8008e66:	f7f7 fbcf 	bl	8000608 <__aeabi_dmul>
 8008e6a:	4652      	mov	r2, sl
 8008e6c:	465b      	mov	r3, fp
 8008e6e:	f7f7 fe51 	bl	8000b14 <__aeabi_dcmpge>
 8008e72:	9e03      	ldr	r6, [sp, #12]
 8008e74:	4637      	mov	r7, r6
 8008e76:	2800      	cmp	r0, #0
 8008e78:	f040 8245 	bne.w	8009306 <_dtoa_r+0x93e>
 8008e7c:	9d01      	ldr	r5, [sp, #4]
 8008e7e:	2331      	movs	r3, #49	; 0x31
 8008e80:	f805 3b01 	strb.w	r3, [r5], #1
 8008e84:	9b00      	ldr	r3, [sp, #0]
 8008e86:	3301      	adds	r3, #1
 8008e88:	9300      	str	r3, [sp, #0]
 8008e8a:	e240      	b.n	800930e <_dtoa_r+0x946>
 8008e8c:	07f2      	lsls	r2, r6, #31
 8008e8e:	d505      	bpl.n	8008e9c <_dtoa_r+0x4d4>
 8008e90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e94:	f7f7 fbb8 	bl	8000608 <__aeabi_dmul>
 8008e98:	3501      	adds	r5, #1
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	1076      	asrs	r6, r6, #1
 8008e9e:	3708      	adds	r7, #8
 8008ea0:	e777      	b.n	8008d92 <_dtoa_r+0x3ca>
 8008ea2:	2502      	movs	r5, #2
 8008ea4:	e779      	b.n	8008d9a <_dtoa_r+0x3d2>
 8008ea6:	9f00      	ldr	r7, [sp, #0]
 8008ea8:	9e03      	ldr	r6, [sp, #12]
 8008eaa:	e794      	b.n	8008dd6 <_dtoa_r+0x40e>
 8008eac:	9901      	ldr	r1, [sp, #4]
 8008eae:	4b4c      	ldr	r3, [pc, #304]	; (8008fe0 <_dtoa_r+0x618>)
 8008eb0:	4431      	add	r1, r6
 8008eb2:	910d      	str	r1, [sp, #52]	; 0x34
 8008eb4:	9908      	ldr	r1, [sp, #32]
 8008eb6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008eba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008ebe:	2900      	cmp	r1, #0
 8008ec0:	d043      	beq.n	8008f4a <_dtoa_r+0x582>
 8008ec2:	494d      	ldr	r1, [pc, #308]	; (8008ff8 <_dtoa_r+0x630>)
 8008ec4:	2000      	movs	r0, #0
 8008ec6:	f7f7 fcc9 	bl	800085c <__aeabi_ddiv>
 8008eca:	4652      	mov	r2, sl
 8008ecc:	465b      	mov	r3, fp
 8008ece:	f7f7 f9e3 	bl	8000298 <__aeabi_dsub>
 8008ed2:	9d01      	ldr	r5, [sp, #4]
 8008ed4:	4682      	mov	sl, r0
 8008ed6:	468b      	mov	fp, r1
 8008ed8:	4649      	mov	r1, r9
 8008eda:	4640      	mov	r0, r8
 8008edc:	f7f7 fe44 	bl	8000b68 <__aeabi_d2iz>
 8008ee0:	4606      	mov	r6, r0
 8008ee2:	f7f7 fb27 	bl	8000534 <__aeabi_i2d>
 8008ee6:	4602      	mov	r2, r0
 8008ee8:	460b      	mov	r3, r1
 8008eea:	4640      	mov	r0, r8
 8008eec:	4649      	mov	r1, r9
 8008eee:	f7f7 f9d3 	bl	8000298 <__aeabi_dsub>
 8008ef2:	3630      	adds	r6, #48	; 0x30
 8008ef4:	f805 6b01 	strb.w	r6, [r5], #1
 8008ef8:	4652      	mov	r2, sl
 8008efa:	465b      	mov	r3, fp
 8008efc:	4680      	mov	r8, r0
 8008efe:	4689      	mov	r9, r1
 8008f00:	f7f7 fdf4 	bl	8000aec <__aeabi_dcmplt>
 8008f04:	2800      	cmp	r0, #0
 8008f06:	d163      	bne.n	8008fd0 <_dtoa_r+0x608>
 8008f08:	4642      	mov	r2, r8
 8008f0a:	464b      	mov	r3, r9
 8008f0c:	4936      	ldr	r1, [pc, #216]	; (8008fe8 <_dtoa_r+0x620>)
 8008f0e:	2000      	movs	r0, #0
 8008f10:	f7f7 f9c2 	bl	8000298 <__aeabi_dsub>
 8008f14:	4652      	mov	r2, sl
 8008f16:	465b      	mov	r3, fp
 8008f18:	f7f7 fde8 	bl	8000aec <__aeabi_dcmplt>
 8008f1c:	2800      	cmp	r0, #0
 8008f1e:	f040 80b5 	bne.w	800908c <_dtoa_r+0x6c4>
 8008f22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f24:	429d      	cmp	r5, r3
 8008f26:	d081      	beq.n	8008e2c <_dtoa_r+0x464>
 8008f28:	4b30      	ldr	r3, [pc, #192]	; (8008fec <_dtoa_r+0x624>)
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	4650      	mov	r0, sl
 8008f2e:	4659      	mov	r1, fp
 8008f30:	f7f7 fb6a 	bl	8000608 <__aeabi_dmul>
 8008f34:	4b2d      	ldr	r3, [pc, #180]	; (8008fec <_dtoa_r+0x624>)
 8008f36:	4682      	mov	sl, r0
 8008f38:	468b      	mov	fp, r1
 8008f3a:	4640      	mov	r0, r8
 8008f3c:	4649      	mov	r1, r9
 8008f3e:	2200      	movs	r2, #0
 8008f40:	f7f7 fb62 	bl	8000608 <__aeabi_dmul>
 8008f44:	4680      	mov	r8, r0
 8008f46:	4689      	mov	r9, r1
 8008f48:	e7c6      	b.n	8008ed8 <_dtoa_r+0x510>
 8008f4a:	4650      	mov	r0, sl
 8008f4c:	4659      	mov	r1, fp
 8008f4e:	f7f7 fb5b 	bl	8000608 <__aeabi_dmul>
 8008f52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f54:	9d01      	ldr	r5, [sp, #4]
 8008f56:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f58:	4682      	mov	sl, r0
 8008f5a:	468b      	mov	fp, r1
 8008f5c:	4649      	mov	r1, r9
 8008f5e:	4640      	mov	r0, r8
 8008f60:	f7f7 fe02 	bl	8000b68 <__aeabi_d2iz>
 8008f64:	4606      	mov	r6, r0
 8008f66:	f7f7 fae5 	bl	8000534 <__aeabi_i2d>
 8008f6a:	3630      	adds	r6, #48	; 0x30
 8008f6c:	4602      	mov	r2, r0
 8008f6e:	460b      	mov	r3, r1
 8008f70:	4640      	mov	r0, r8
 8008f72:	4649      	mov	r1, r9
 8008f74:	f7f7 f990 	bl	8000298 <__aeabi_dsub>
 8008f78:	f805 6b01 	strb.w	r6, [r5], #1
 8008f7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f7e:	429d      	cmp	r5, r3
 8008f80:	4680      	mov	r8, r0
 8008f82:	4689      	mov	r9, r1
 8008f84:	f04f 0200 	mov.w	r2, #0
 8008f88:	d124      	bne.n	8008fd4 <_dtoa_r+0x60c>
 8008f8a:	4b1b      	ldr	r3, [pc, #108]	; (8008ff8 <_dtoa_r+0x630>)
 8008f8c:	4650      	mov	r0, sl
 8008f8e:	4659      	mov	r1, fp
 8008f90:	f7f7 f984 	bl	800029c <__adddf3>
 8008f94:	4602      	mov	r2, r0
 8008f96:	460b      	mov	r3, r1
 8008f98:	4640      	mov	r0, r8
 8008f9a:	4649      	mov	r1, r9
 8008f9c:	f7f7 fdc4 	bl	8000b28 <__aeabi_dcmpgt>
 8008fa0:	2800      	cmp	r0, #0
 8008fa2:	d173      	bne.n	800908c <_dtoa_r+0x6c4>
 8008fa4:	4652      	mov	r2, sl
 8008fa6:	465b      	mov	r3, fp
 8008fa8:	4913      	ldr	r1, [pc, #76]	; (8008ff8 <_dtoa_r+0x630>)
 8008faa:	2000      	movs	r0, #0
 8008fac:	f7f7 f974 	bl	8000298 <__aeabi_dsub>
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	460b      	mov	r3, r1
 8008fb4:	4640      	mov	r0, r8
 8008fb6:	4649      	mov	r1, r9
 8008fb8:	f7f7 fd98 	bl	8000aec <__aeabi_dcmplt>
 8008fbc:	2800      	cmp	r0, #0
 8008fbe:	f43f af35 	beq.w	8008e2c <_dtoa_r+0x464>
 8008fc2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008fc4:	1e6b      	subs	r3, r5, #1
 8008fc6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008fc8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008fcc:	2b30      	cmp	r3, #48	; 0x30
 8008fce:	d0f8      	beq.n	8008fc2 <_dtoa_r+0x5fa>
 8008fd0:	9700      	str	r7, [sp, #0]
 8008fd2:	e049      	b.n	8009068 <_dtoa_r+0x6a0>
 8008fd4:	4b05      	ldr	r3, [pc, #20]	; (8008fec <_dtoa_r+0x624>)
 8008fd6:	f7f7 fb17 	bl	8000608 <__aeabi_dmul>
 8008fda:	4680      	mov	r8, r0
 8008fdc:	4689      	mov	r9, r1
 8008fde:	e7bd      	b.n	8008f5c <_dtoa_r+0x594>
 8008fe0:	0800bdf0 	.word	0x0800bdf0
 8008fe4:	0800bdc8 	.word	0x0800bdc8
 8008fe8:	3ff00000 	.word	0x3ff00000
 8008fec:	40240000 	.word	0x40240000
 8008ff0:	401c0000 	.word	0x401c0000
 8008ff4:	40140000 	.word	0x40140000
 8008ff8:	3fe00000 	.word	0x3fe00000
 8008ffc:	9d01      	ldr	r5, [sp, #4]
 8008ffe:	4656      	mov	r6, sl
 8009000:	465f      	mov	r7, fp
 8009002:	4642      	mov	r2, r8
 8009004:	464b      	mov	r3, r9
 8009006:	4630      	mov	r0, r6
 8009008:	4639      	mov	r1, r7
 800900a:	f7f7 fc27 	bl	800085c <__aeabi_ddiv>
 800900e:	f7f7 fdab 	bl	8000b68 <__aeabi_d2iz>
 8009012:	4682      	mov	sl, r0
 8009014:	f7f7 fa8e 	bl	8000534 <__aeabi_i2d>
 8009018:	4642      	mov	r2, r8
 800901a:	464b      	mov	r3, r9
 800901c:	f7f7 faf4 	bl	8000608 <__aeabi_dmul>
 8009020:	4602      	mov	r2, r0
 8009022:	460b      	mov	r3, r1
 8009024:	4630      	mov	r0, r6
 8009026:	4639      	mov	r1, r7
 8009028:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800902c:	f7f7 f934 	bl	8000298 <__aeabi_dsub>
 8009030:	f805 6b01 	strb.w	r6, [r5], #1
 8009034:	9e01      	ldr	r6, [sp, #4]
 8009036:	9f03      	ldr	r7, [sp, #12]
 8009038:	1bae      	subs	r6, r5, r6
 800903a:	42b7      	cmp	r7, r6
 800903c:	4602      	mov	r2, r0
 800903e:	460b      	mov	r3, r1
 8009040:	d135      	bne.n	80090ae <_dtoa_r+0x6e6>
 8009042:	f7f7 f92b 	bl	800029c <__adddf3>
 8009046:	4642      	mov	r2, r8
 8009048:	464b      	mov	r3, r9
 800904a:	4606      	mov	r6, r0
 800904c:	460f      	mov	r7, r1
 800904e:	f7f7 fd6b 	bl	8000b28 <__aeabi_dcmpgt>
 8009052:	b9d0      	cbnz	r0, 800908a <_dtoa_r+0x6c2>
 8009054:	4642      	mov	r2, r8
 8009056:	464b      	mov	r3, r9
 8009058:	4630      	mov	r0, r6
 800905a:	4639      	mov	r1, r7
 800905c:	f7f7 fd3c 	bl	8000ad8 <__aeabi_dcmpeq>
 8009060:	b110      	cbz	r0, 8009068 <_dtoa_r+0x6a0>
 8009062:	f01a 0f01 	tst.w	sl, #1
 8009066:	d110      	bne.n	800908a <_dtoa_r+0x6c2>
 8009068:	4620      	mov	r0, r4
 800906a:	ee18 1a10 	vmov	r1, s16
 800906e:	f000 faf3 	bl	8009658 <_Bfree>
 8009072:	2300      	movs	r3, #0
 8009074:	9800      	ldr	r0, [sp, #0]
 8009076:	702b      	strb	r3, [r5, #0]
 8009078:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800907a:	3001      	adds	r0, #1
 800907c:	6018      	str	r0, [r3, #0]
 800907e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009080:	2b00      	cmp	r3, #0
 8009082:	f43f acf1 	beq.w	8008a68 <_dtoa_r+0xa0>
 8009086:	601d      	str	r5, [r3, #0]
 8009088:	e4ee      	b.n	8008a68 <_dtoa_r+0xa0>
 800908a:	9f00      	ldr	r7, [sp, #0]
 800908c:	462b      	mov	r3, r5
 800908e:	461d      	mov	r5, r3
 8009090:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009094:	2a39      	cmp	r2, #57	; 0x39
 8009096:	d106      	bne.n	80090a6 <_dtoa_r+0x6de>
 8009098:	9a01      	ldr	r2, [sp, #4]
 800909a:	429a      	cmp	r2, r3
 800909c:	d1f7      	bne.n	800908e <_dtoa_r+0x6c6>
 800909e:	9901      	ldr	r1, [sp, #4]
 80090a0:	2230      	movs	r2, #48	; 0x30
 80090a2:	3701      	adds	r7, #1
 80090a4:	700a      	strb	r2, [r1, #0]
 80090a6:	781a      	ldrb	r2, [r3, #0]
 80090a8:	3201      	adds	r2, #1
 80090aa:	701a      	strb	r2, [r3, #0]
 80090ac:	e790      	b.n	8008fd0 <_dtoa_r+0x608>
 80090ae:	4ba6      	ldr	r3, [pc, #664]	; (8009348 <_dtoa_r+0x980>)
 80090b0:	2200      	movs	r2, #0
 80090b2:	f7f7 faa9 	bl	8000608 <__aeabi_dmul>
 80090b6:	2200      	movs	r2, #0
 80090b8:	2300      	movs	r3, #0
 80090ba:	4606      	mov	r6, r0
 80090bc:	460f      	mov	r7, r1
 80090be:	f7f7 fd0b 	bl	8000ad8 <__aeabi_dcmpeq>
 80090c2:	2800      	cmp	r0, #0
 80090c4:	d09d      	beq.n	8009002 <_dtoa_r+0x63a>
 80090c6:	e7cf      	b.n	8009068 <_dtoa_r+0x6a0>
 80090c8:	9a08      	ldr	r2, [sp, #32]
 80090ca:	2a00      	cmp	r2, #0
 80090cc:	f000 80d7 	beq.w	800927e <_dtoa_r+0x8b6>
 80090d0:	9a06      	ldr	r2, [sp, #24]
 80090d2:	2a01      	cmp	r2, #1
 80090d4:	f300 80ba 	bgt.w	800924c <_dtoa_r+0x884>
 80090d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80090da:	2a00      	cmp	r2, #0
 80090dc:	f000 80b2 	beq.w	8009244 <_dtoa_r+0x87c>
 80090e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80090e4:	9e07      	ldr	r6, [sp, #28]
 80090e6:	9d04      	ldr	r5, [sp, #16]
 80090e8:	9a04      	ldr	r2, [sp, #16]
 80090ea:	441a      	add	r2, r3
 80090ec:	9204      	str	r2, [sp, #16]
 80090ee:	9a05      	ldr	r2, [sp, #20]
 80090f0:	2101      	movs	r1, #1
 80090f2:	441a      	add	r2, r3
 80090f4:	4620      	mov	r0, r4
 80090f6:	9205      	str	r2, [sp, #20]
 80090f8:	f000 fb66 	bl	80097c8 <__i2b>
 80090fc:	4607      	mov	r7, r0
 80090fe:	2d00      	cmp	r5, #0
 8009100:	dd0c      	ble.n	800911c <_dtoa_r+0x754>
 8009102:	9b05      	ldr	r3, [sp, #20]
 8009104:	2b00      	cmp	r3, #0
 8009106:	dd09      	ble.n	800911c <_dtoa_r+0x754>
 8009108:	42ab      	cmp	r3, r5
 800910a:	9a04      	ldr	r2, [sp, #16]
 800910c:	bfa8      	it	ge
 800910e:	462b      	movge	r3, r5
 8009110:	1ad2      	subs	r2, r2, r3
 8009112:	9204      	str	r2, [sp, #16]
 8009114:	9a05      	ldr	r2, [sp, #20]
 8009116:	1aed      	subs	r5, r5, r3
 8009118:	1ad3      	subs	r3, r2, r3
 800911a:	9305      	str	r3, [sp, #20]
 800911c:	9b07      	ldr	r3, [sp, #28]
 800911e:	b31b      	cbz	r3, 8009168 <_dtoa_r+0x7a0>
 8009120:	9b08      	ldr	r3, [sp, #32]
 8009122:	2b00      	cmp	r3, #0
 8009124:	f000 80af 	beq.w	8009286 <_dtoa_r+0x8be>
 8009128:	2e00      	cmp	r6, #0
 800912a:	dd13      	ble.n	8009154 <_dtoa_r+0x78c>
 800912c:	4639      	mov	r1, r7
 800912e:	4632      	mov	r2, r6
 8009130:	4620      	mov	r0, r4
 8009132:	f000 fc09 	bl	8009948 <__pow5mult>
 8009136:	ee18 2a10 	vmov	r2, s16
 800913a:	4601      	mov	r1, r0
 800913c:	4607      	mov	r7, r0
 800913e:	4620      	mov	r0, r4
 8009140:	f000 fb58 	bl	80097f4 <__multiply>
 8009144:	ee18 1a10 	vmov	r1, s16
 8009148:	4680      	mov	r8, r0
 800914a:	4620      	mov	r0, r4
 800914c:	f000 fa84 	bl	8009658 <_Bfree>
 8009150:	ee08 8a10 	vmov	s16, r8
 8009154:	9b07      	ldr	r3, [sp, #28]
 8009156:	1b9a      	subs	r2, r3, r6
 8009158:	d006      	beq.n	8009168 <_dtoa_r+0x7a0>
 800915a:	ee18 1a10 	vmov	r1, s16
 800915e:	4620      	mov	r0, r4
 8009160:	f000 fbf2 	bl	8009948 <__pow5mult>
 8009164:	ee08 0a10 	vmov	s16, r0
 8009168:	2101      	movs	r1, #1
 800916a:	4620      	mov	r0, r4
 800916c:	f000 fb2c 	bl	80097c8 <__i2b>
 8009170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009172:	2b00      	cmp	r3, #0
 8009174:	4606      	mov	r6, r0
 8009176:	f340 8088 	ble.w	800928a <_dtoa_r+0x8c2>
 800917a:	461a      	mov	r2, r3
 800917c:	4601      	mov	r1, r0
 800917e:	4620      	mov	r0, r4
 8009180:	f000 fbe2 	bl	8009948 <__pow5mult>
 8009184:	9b06      	ldr	r3, [sp, #24]
 8009186:	2b01      	cmp	r3, #1
 8009188:	4606      	mov	r6, r0
 800918a:	f340 8081 	ble.w	8009290 <_dtoa_r+0x8c8>
 800918e:	f04f 0800 	mov.w	r8, #0
 8009192:	6933      	ldr	r3, [r6, #16]
 8009194:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009198:	6918      	ldr	r0, [r3, #16]
 800919a:	f000 fac5 	bl	8009728 <__hi0bits>
 800919e:	f1c0 0020 	rsb	r0, r0, #32
 80091a2:	9b05      	ldr	r3, [sp, #20]
 80091a4:	4418      	add	r0, r3
 80091a6:	f010 001f 	ands.w	r0, r0, #31
 80091aa:	f000 8092 	beq.w	80092d2 <_dtoa_r+0x90a>
 80091ae:	f1c0 0320 	rsb	r3, r0, #32
 80091b2:	2b04      	cmp	r3, #4
 80091b4:	f340 808a 	ble.w	80092cc <_dtoa_r+0x904>
 80091b8:	f1c0 001c 	rsb	r0, r0, #28
 80091bc:	9b04      	ldr	r3, [sp, #16]
 80091be:	4403      	add	r3, r0
 80091c0:	9304      	str	r3, [sp, #16]
 80091c2:	9b05      	ldr	r3, [sp, #20]
 80091c4:	4403      	add	r3, r0
 80091c6:	4405      	add	r5, r0
 80091c8:	9305      	str	r3, [sp, #20]
 80091ca:	9b04      	ldr	r3, [sp, #16]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	dd07      	ble.n	80091e0 <_dtoa_r+0x818>
 80091d0:	ee18 1a10 	vmov	r1, s16
 80091d4:	461a      	mov	r2, r3
 80091d6:	4620      	mov	r0, r4
 80091d8:	f000 fc10 	bl	80099fc <__lshift>
 80091dc:	ee08 0a10 	vmov	s16, r0
 80091e0:	9b05      	ldr	r3, [sp, #20]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	dd05      	ble.n	80091f2 <_dtoa_r+0x82a>
 80091e6:	4631      	mov	r1, r6
 80091e8:	461a      	mov	r2, r3
 80091ea:	4620      	mov	r0, r4
 80091ec:	f000 fc06 	bl	80099fc <__lshift>
 80091f0:	4606      	mov	r6, r0
 80091f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d06e      	beq.n	80092d6 <_dtoa_r+0x90e>
 80091f8:	ee18 0a10 	vmov	r0, s16
 80091fc:	4631      	mov	r1, r6
 80091fe:	f000 fc6d 	bl	8009adc <__mcmp>
 8009202:	2800      	cmp	r0, #0
 8009204:	da67      	bge.n	80092d6 <_dtoa_r+0x90e>
 8009206:	9b00      	ldr	r3, [sp, #0]
 8009208:	3b01      	subs	r3, #1
 800920a:	ee18 1a10 	vmov	r1, s16
 800920e:	9300      	str	r3, [sp, #0]
 8009210:	220a      	movs	r2, #10
 8009212:	2300      	movs	r3, #0
 8009214:	4620      	mov	r0, r4
 8009216:	f000 fa41 	bl	800969c <__multadd>
 800921a:	9b08      	ldr	r3, [sp, #32]
 800921c:	ee08 0a10 	vmov	s16, r0
 8009220:	2b00      	cmp	r3, #0
 8009222:	f000 81b1 	beq.w	8009588 <_dtoa_r+0xbc0>
 8009226:	2300      	movs	r3, #0
 8009228:	4639      	mov	r1, r7
 800922a:	220a      	movs	r2, #10
 800922c:	4620      	mov	r0, r4
 800922e:	f000 fa35 	bl	800969c <__multadd>
 8009232:	9b02      	ldr	r3, [sp, #8]
 8009234:	2b00      	cmp	r3, #0
 8009236:	4607      	mov	r7, r0
 8009238:	f300 808e 	bgt.w	8009358 <_dtoa_r+0x990>
 800923c:	9b06      	ldr	r3, [sp, #24]
 800923e:	2b02      	cmp	r3, #2
 8009240:	dc51      	bgt.n	80092e6 <_dtoa_r+0x91e>
 8009242:	e089      	b.n	8009358 <_dtoa_r+0x990>
 8009244:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009246:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800924a:	e74b      	b.n	80090e4 <_dtoa_r+0x71c>
 800924c:	9b03      	ldr	r3, [sp, #12]
 800924e:	1e5e      	subs	r6, r3, #1
 8009250:	9b07      	ldr	r3, [sp, #28]
 8009252:	42b3      	cmp	r3, r6
 8009254:	bfbf      	itttt	lt
 8009256:	9b07      	ldrlt	r3, [sp, #28]
 8009258:	9607      	strlt	r6, [sp, #28]
 800925a:	1af2      	sublt	r2, r6, r3
 800925c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800925e:	bfb6      	itet	lt
 8009260:	189b      	addlt	r3, r3, r2
 8009262:	1b9e      	subge	r6, r3, r6
 8009264:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009266:	9b03      	ldr	r3, [sp, #12]
 8009268:	bfb8      	it	lt
 800926a:	2600      	movlt	r6, #0
 800926c:	2b00      	cmp	r3, #0
 800926e:	bfb7      	itett	lt
 8009270:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009274:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009278:	1a9d      	sublt	r5, r3, r2
 800927a:	2300      	movlt	r3, #0
 800927c:	e734      	b.n	80090e8 <_dtoa_r+0x720>
 800927e:	9e07      	ldr	r6, [sp, #28]
 8009280:	9d04      	ldr	r5, [sp, #16]
 8009282:	9f08      	ldr	r7, [sp, #32]
 8009284:	e73b      	b.n	80090fe <_dtoa_r+0x736>
 8009286:	9a07      	ldr	r2, [sp, #28]
 8009288:	e767      	b.n	800915a <_dtoa_r+0x792>
 800928a:	9b06      	ldr	r3, [sp, #24]
 800928c:	2b01      	cmp	r3, #1
 800928e:	dc18      	bgt.n	80092c2 <_dtoa_r+0x8fa>
 8009290:	f1ba 0f00 	cmp.w	sl, #0
 8009294:	d115      	bne.n	80092c2 <_dtoa_r+0x8fa>
 8009296:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800929a:	b993      	cbnz	r3, 80092c2 <_dtoa_r+0x8fa>
 800929c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80092a0:	0d1b      	lsrs	r3, r3, #20
 80092a2:	051b      	lsls	r3, r3, #20
 80092a4:	b183      	cbz	r3, 80092c8 <_dtoa_r+0x900>
 80092a6:	9b04      	ldr	r3, [sp, #16]
 80092a8:	3301      	adds	r3, #1
 80092aa:	9304      	str	r3, [sp, #16]
 80092ac:	9b05      	ldr	r3, [sp, #20]
 80092ae:	3301      	adds	r3, #1
 80092b0:	9305      	str	r3, [sp, #20]
 80092b2:	f04f 0801 	mov.w	r8, #1
 80092b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	f47f af6a 	bne.w	8009192 <_dtoa_r+0x7ca>
 80092be:	2001      	movs	r0, #1
 80092c0:	e76f      	b.n	80091a2 <_dtoa_r+0x7da>
 80092c2:	f04f 0800 	mov.w	r8, #0
 80092c6:	e7f6      	b.n	80092b6 <_dtoa_r+0x8ee>
 80092c8:	4698      	mov	r8, r3
 80092ca:	e7f4      	b.n	80092b6 <_dtoa_r+0x8ee>
 80092cc:	f43f af7d 	beq.w	80091ca <_dtoa_r+0x802>
 80092d0:	4618      	mov	r0, r3
 80092d2:	301c      	adds	r0, #28
 80092d4:	e772      	b.n	80091bc <_dtoa_r+0x7f4>
 80092d6:	9b03      	ldr	r3, [sp, #12]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	dc37      	bgt.n	800934c <_dtoa_r+0x984>
 80092dc:	9b06      	ldr	r3, [sp, #24]
 80092de:	2b02      	cmp	r3, #2
 80092e0:	dd34      	ble.n	800934c <_dtoa_r+0x984>
 80092e2:	9b03      	ldr	r3, [sp, #12]
 80092e4:	9302      	str	r3, [sp, #8]
 80092e6:	9b02      	ldr	r3, [sp, #8]
 80092e8:	b96b      	cbnz	r3, 8009306 <_dtoa_r+0x93e>
 80092ea:	4631      	mov	r1, r6
 80092ec:	2205      	movs	r2, #5
 80092ee:	4620      	mov	r0, r4
 80092f0:	f000 f9d4 	bl	800969c <__multadd>
 80092f4:	4601      	mov	r1, r0
 80092f6:	4606      	mov	r6, r0
 80092f8:	ee18 0a10 	vmov	r0, s16
 80092fc:	f000 fbee 	bl	8009adc <__mcmp>
 8009300:	2800      	cmp	r0, #0
 8009302:	f73f adbb 	bgt.w	8008e7c <_dtoa_r+0x4b4>
 8009306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009308:	9d01      	ldr	r5, [sp, #4]
 800930a:	43db      	mvns	r3, r3
 800930c:	9300      	str	r3, [sp, #0]
 800930e:	f04f 0800 	mov.w	r8, #0
 8009312:	4631      	mov	r1, r6
 8009314:	4620      	mov	r0, r4
 8009316:	f000 f99f 	bl	8009658 <_Bfree>
 800931a:	2f00      	cmp	r7, #0
 800931c:	f43f aea4 	beq.w	8009068 <_dtoa_r+0x6a0>
 8009320:	f1b8 0f00 	cmp.w	r8, #0
 8009324:	d005      	beq.n	8009332 <_dtoa_r+0x96a>
 8009326:	45b8      	cmp	r8, r7
 8009328:	d003      	beq.n	8009332 <_dtoa_r+0x96a>
 800932a:	4641      	mov	r1, r8
 800932c:	4620      	mov	r0, r4
 800932e:	f000 f993 	bl	8009658 <_Bfree>
 8009332:	4639      	mov	r1, r7
 8009334:	4620      	mov	r0, r4
 8009336:	f000 f98f 	bl	8009658 <_Bfree>
 800933a:	e695      	b.n	8009068 <_dtoa_r+0x6a0>
 800933c:	2600      	movs	r6, #0
 800933e:	4637      	mov	r7, r6
 8009340:	e7e1      	b.n	8009306 <_dtoa_r+0x93e>
 8009342:	9700      	str	r7, [sp, #0]
 8009344:	4637      	mov	r7, r6
 8009346:	e599      	b.n	8008e7c <_dtoa_r+0x4b4>
 8009348:	40240000 	.word	0x40240000
 800934c:	9b08      	ldr	r3, [sp, #32]
 800934e:	2b00      	cmp	r3, #0
 8009350:	f000 80ca 	beq.w	80094e8 <_dtoa_r+0xb20>
 8009354:	9b03      	ldr	r3, [sp, #12]
 8009356:	9302      	str	r3, [sp, #8]
 8009358:	2d00      	cmp	r5, #0
 800935a:	dd05      	ble.n	8009368 <_dtoa_r+0x9a0>
 800935c:	4639      	mov	r1, r7
 800935e:	462a      	mov	r2, r5
 8009360:	4620      	mov	r0, r4
 8009362:	f000 fb4b 	bl	80099fc <__lshift>
 8009366:	4607      	mov	r7, r0
 8009368:	f1b8 0f00 	cmp.w	r8, #0
 800936c:	d05b      	beq.n	8009426 <_dtoa_r+0xa5e>
 800936e:	6879      	ldr	r1, [r7, #4]
 8009370:	4620      	mov	r0, r4
 8009372:	f000 f931 	bl	80095d8 <_Balloc>
 8009376:	4605      	mov	r5, r0
 8009378:	b928      	cbnz	r0, 8009386 <_dtoa_r+0x9be>
 800937a:	4b87      	ldr	r3, [pc, #540]	; (8009598 <_dtoa_r+0xbd0>)
 800937c:	4602      	mov	r2, r0
 800937e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009382:	f7ff bb3b 	b.w	80089fc <_dtoa_r+0x34>
 8009386:	693a      	ldr	r2, [r7, #16]
 8009388:	3202      	adds	r2, #2
 800938a:	0092      	lsls	r2, r2, #2
 800938c:	f107 010c 	add.w	r1, r7, #12
 8009390:	300c      	adds	r0, #12
 8009392:	f000 f913 	bl	80095bc <memcpy>
 8009396:	2201      	movs	r2, #1
 8009398:	4629      	mov	r1, r5
 800939a:	4620      	mov	r0, r4
 800939c:	f000 fb2e 	bl	80099fc <__lshift>
 80093a0:	9b01      	ldr	r3, [sp, #4]
 80093a2:	f103 0901 	add.w	r9, r3, #1
 80093a6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80093aa:	4413      	add	r3, r2
 80093ac:	9305      	str	r3, [sp, #20]
 80093ae:	f00a 0301 	and.w	r3, sl, #1
 80093b2:	46b8      	mov	r8, r7
 80093b4:	9304      	str	r3, [sp, #16]
 80093b6:	4607      	mov	r7, r0
 80093b8:	4631      	mov	r1, r6
 80093ba:	ee18 0a10 	vmov	r0, s16
 80093be:	f7ff fa75 	bl	80088ac <quorem>
 80093c2:	4641      	mov	r1, r8
 80093c4:	9002      	str	r0, [sp, #8]
 80093c6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80093ca:	ee18 0a10 	vmov	r0, s16
 80093ce:	f000 fb85 	bl	8009adc <__mcmp>
 80093d2:	463a      	mov	r2, r7
 80093d4:	9003      	str	r0, [sp, #12]
 80093d6:	4631      	mov	r1, r6
 80093d8:	4620      	mov	r0, r4
 80093da:	f000 fb9b 	bl	8009b14 <__mdiff>
 80093de:	68c2      	ldr	r2, [r0, #12]
 80093e0:	f109 3bff 	add.w	fp, r9, #4294967295
 80093e4:	4605      	mov	r5, r0
 80093e6:	bb02      	cbnz	r2, 800942a <_dtoa_r+0xa62>
 80093e8:	4601      	mov	r1, r0
 80093ea:	ee18 0a10 	vmov	r0, s16
 80093ee:	f000 fb75 	bl	8009adc <__mcmp>
 80093f2:	4602      	mov	r2, r0
 80093f4:	4629      	mov	r1, r5
 80093f6:	4620      	mov	r0, r4
 80093f8:	9207      	str	r2, [sp, #28]
 80093fa:	f000 f92d 	bl	8009658 <_Bfree>
 80093fe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009402:	ea43 0102 	orr.w	r1, r3, r2
 8009406:	9b04      	ldr	r3, [sp, #16]
 8009408:	430b      	orrs	r3, r1
 800940a:	464d      	mov	r5, r9
 800940c:	d10f      	bne.n	800942e <_dtoa_r+0xa66>
 800940e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009412:	d02a      	beq.n	800946a <_dtoa_r+0xaa2>
 8009414:	9b03      	ldr	r3, [sp, #12]
 8009416:	2b00      	cmp	r3, #0
 8009418:	dd02      	ble.n	8009420 <_dtoa_r+0xa58>
 800941a:	9b02      	ldr	r3, [sp, #8]
 800941c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009420:	f88b a000 	strb.w	sl, [fp]
 8009424:	e775      	b.n	8009312 <_dtoa_r+0x94a>
 8009426:	4638      	mov	r0, r7
 8009428:	e7ba      	b.n	80093a0 <_dtoa_r+0x9d8>
 800942a:	2201      	movs	r2, #1
 800942c:	e7e2      	b.n	80093f4 <_dtoa_r+0xa2c>
 800942e:	9b03      	ldr	r3, [sp, #12]
 8009430:	2b00      	cmp	r3, #0
 8009432:	db04      	blt.n	800943e <_dtoa_r+0xa76>
 8009434:	9906      	ldr	r1, [sp, #24]
 8009436:	430b      	orrs	r3, r1
 8009438:	9904      	ldr	r1, [sp, #16]
 800943a:	430b      	orrs	r3, r1
 800943c:	d122      	bne.n	8009484 <_dtoa_r+0xabc>
 800943e:	2a00      	cmp	r2, #0
 8009440:	ddee      	ble.n	8009420 <_dtoa_r+0xa58>
 8009442:	ee18 1a10 	vmov	r1, s16
 8009446:	2201      	movs	r2, #1
 8009448:	4620      	mov	r0, r4
 800944a:	f000 fad7 	bl	80099fc <__lshift>
 800944e:	4631      	mov	r1, r6
 8009450:	ee08 0a10 	vmov	s16, r0
 8009454:	f000 fb42 	bl	8009adc <__mcmp>
 8009458:	2800      	cmp	r0, #0
 800945a:	dc03      	bgt.n	8009464 <_dtoa_r+0xa9c>
 800945c:	d1e0      	bne.n	8009420 <_dtoa_r+0xa58>
 800945e:	f01a 0f01 	tst.w	sl, #1
 8009462:	d0dd      	beq.n	8009420 <_dtoa_r+0xa58>
 8009464:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009468:	d1d7      	bne.n	800941a <_dtoa_r+0xa52>
 800946a:	2339      	movs	r3, #57	; 0x39
 800946c:	f88b 3000 	strb.w	r3, [fp]
 8009470:	462b      	mov	r3, r5
 8009472:	461d      	mov	r5, r3
 8009474:	3b01      	subs	r3, #1
 8009476:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800947a:	2a39      	cmp	r2, #57	; 0x39
 800947c:	d071      	beq.n	8009562 <_dtoa_r+0xb9a>
 800947e:	3201      	adds	r2, #1
 8009480:	701a      	strb	r2, [r3, #0]
 8009482:	e746      	b.n	8009312 <_dtoa_r+0x94a>
 8009484:	2a00      	cmp	r2, #0
 8009486:	dd07      	ble.n	8009498 <_dtoa_r+0xad0>
 8009488:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800948c:	d0ed      	beq.n	800946a <_dtoa_r+0xaa2>
 800948e:	f10a 0301 	add.w	r3, sl, #1
 8009492:	f88b 3000 	strb.w	r3, [fp]
 8009496:	e73c      	b.n	8009312 <_dtoa_r+0x94a>
 8009498:	9b05      	ldr	r3, [sp, #20]
 800949a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800949e:	4599      	cmp	r9, r3
 80094a0:	d047      	beq.n	8009532 <_dtoa_r+0xb6a>
 80094a2:	ee18 1a10 	vmov	r1, s16
 80094a6:	2300      	movs	r3, #0
 80094a8:	220a      	movs	r2, #10
 80094aa:	4620      	mov	r0, r4
 80094ac:	f000 f8f6 	bl	800969c <__multadd>
 80094b0:	45b8      	cmp	r8, r7
 80094b2:	ee08 0a10 	vmov	s16, r0
 80094b6:	f04f 0300 	mov.w	r3, #0
 80094ba:	f04f 020a 	mov.w	r2, #10
 80094be:	4641      	mov	r1, r8
 80094c0:	4620      	mov	r0, r4
 80094c2:	d106      	bne.n	80094d2 <_dtoa_r+0xb0a>
 80094c4:	f000 f8ea 	bl	800969c <__multadd>
 80094c8:	4680      	mov	r8, r0
 80094ca:	4607      	mov	r7, r0
 80094cc:	f109 0901 	add.w	r9, r9, #1
 80094d0:	e772      	b.n	80093b8 <_dtoa_r+0x9f0>
 80094d2:	f000 f8e3 	bl	800969c <__multadd>
 80094d6:	4639      	mov	r1, r7
 80094d8:	4680      	mov	r8, r0
 80094da:	2300      	movs	r3, #0
 80094dc:	220a      	movs	r2, #10
 80094de:	4620      	mov	r0, r4
 80094e0:	f000 f8dc 	bl	800969c <__multadd>
 80094e4:	4607      	mov	r7, r0
 80094e6:	e7f1      	b.n	80094cc <_dtoa_r+0xb04>
 80094e8:	9b03      	ldr	r3, [sp, #12]
 80094ea:	9302      	str	r3, [sp, #8]
 80094ec:	9d01      	ldr	r5, [sp, #4]
 80094ee:	ee18 0a10 	vmov	r0, s16
 80094f2:	4631      	mov	r1, r6
 80094f4:	f7ff f9da 	bl	80088ac <quorem>
 80094f8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80094fc:	9b01      	ldr	r3, [sp, #4]
 80094fe:	f805 ab01 	strb.w	sl, [r5], #1
 8009502:	1aea      	subs	r2, r5, r3
 8009504:	9b02      	ldr	r3, [sp, #8]
 8009506:	4293      	cmp	r3, r2
 8009508:	dd09      	ble.n	800951e <_dtoa_r+0xb56>
 800950a:	ee18 1a10 	vmov	r1, s16
 800950e:	2300      	movs	r3, #0
 8009510:	220a      	movs	r2, #10
 8009512:	4620      	mov	r0, r4
 8009514:	f000 f8c2 	bl	800969c <__multadd>
 8009518:	ee08 0a10 	vmov	s16, r0
 800951c:	e7e7      	b.n	80094ee <_dtoa_r+0xb26>
 800951e:	9b02      	ldr	r3, [sp, #8]
 8009520:	2b00      	cmp	r3, #0
 8009522:	bfc8      	it	gt
 8009524:	461d      	movgt	r5, r3
 8009526:	9b01      	ldr	r3, [sp, #4]
 8009528:	bfd8      	it	le
 800952a:	2501      	movle	r5, #1
 800952c:	441d      	add	r5, r3
 800952e:	f04f 0800 	mov.w	r8, #0
 8009532:	ee18 1a10 	vmov	r1, s16
 8009536:	2201      	movs	r2, #1
 8009538:	4620      	mov	r0, r4
 800953a:	f000 fa5f 	bl	80099fc <__lshift>
 800953e:	4631      	mov	r1, r6
 8009540:	ee08 0a10 	vmov	s16, r0
 8009544:	f000 faca 	bl	8009adc <__mcmp>
 8009548:	2800      	cmp	r0, #0
 800954a:	dc91      	bgt.n	8009470 <_dtoa_r+0xaa8>
 800954c:	d102      	bne.n	8009554 <_dtoa_r+0xb8c>
 800954e:	f01a 0f01 	tst.w	sl, #1
 8009552:	d18d      	bne.n	8009470 <_dtoa_r+0xaa8>
 8009554:	462b      	mov	r3, r5
 8009556:	461d      	mov	r5, r3
 8009558:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800955c:	2a30      	cmp	r2, #48	; 0x30
 800955e:	d0fa      	beq.n	8009556 <_dtoa_r+0xb8e>
 8009560:	e6d7      	b.n	8009312 <_dtoa_r+0x94a>
 8009562:	9a01      	ldr	r2, [sp, #4]
 8009564:	429a      	cmp	r2, r3
 8009566:	d184      	bne.n	8009472 <_dtoa_r+0xaaa>
 8009568:	9b00      	ldr	r3, [sp, #0]
 800956a:	3301      	adds	r3, #1
 800956c:	9300      	str	r3, [sp, #0]
 800956e:	2331      	movs	r3, #49	; 0x31
 8009570:	7013      	strb	r3, [r2, #0]
 8009572:	e6ce      	b.n	8009312 <_dtoa_r+0x94a>
 8009574:	4b09      	ldr	r3, [pc, #36]	; (800959c <_dtoa_r+0xbd4>)
 8009576:	f7ff ba95 	b.w	8008aa4 <_dtoa_r+0xdc>
 800957a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800957c:	2b00      	cmp	r3, #0
 800957e:	f47f aa6e 	bne.w	8008a5e <_dtoa_r+0x96>
 8009582:	4b07      	ldr	r3, [pc, #28]	; (80095a0 <_dtoa_r+0xbd8>)
 8009584:	f7ff ba8e 	b.w	8008aa4 <_dtoa_r+0xdc>
 8009588:	9b02      	ldr	r3, [sp, #8]
 800958a:	2b00      	cmp	r3, #0
 800958c:	dcae      	bgt.n	80094ec <_dtoa_r+0xb24>
 800958e:	9b06      	ldr	r3, [sp, #24]
 8009590:	2b02      	cmp	r3, #2
 8009592:	f73f aea8 	bgt.w	80092e6 <_dtoa_r+0x91e>
 8009596:	e7a9      	b.n	80094ec <_dtoa_r+0xb24>
 8009598:	0800bd5b 	.word	0x0800bd5b
 800959c:	0800bcb8 	.word	0x0800bcb8
 80095a0:	0800bcdc 	.word	0x0800bcdc

080095a4 <_localeconv_r>:
 80095a4:	4800      	ldr	r0, [pc, #0]	; (80095a8 <_localeconv_r+0x4>)
 80095a6:	4770      	bx	lr
 80095a8:	20000194 	.word	0x20000194

080095ac <malloc>:
 80095ac:	4b02      	ldr	r3, [pc, #8]	; (80095b8 <malloc+0xc>)
 80095ae:	4601      	mov	r1, r0
 80095b0:	6818      	ldr	r0, [r3, #0]
 80095b2:	f000 bc17 	b.w	8009de4 <_malloc_r>
 80095b6:	bf00      	nop
 80095b8:	20000040 	.word	0x20000040

080095bc <memcpy>:
 80095bc:	440a      	add	r2, r1
 80095be:	4291      	cmp	r1, r2
 80095c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80095c4:	d100      	bne.n	80095c8 <memcpy+0xc>
 80095c6:	4770      	bx	lr
 80095c8:	b510      	push	{r4, lr}
 80095ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095d2:	4291      	cmp	r1, r2
 80095d4:	d1f9      	bne.n	80095ca <memcpy+0xe>
 80095d6:	bd10      	pop	{r4, pc}

080095d8 <_Balloc>:
 80095d8:	b570      	push	{r4, r5, r6, lr}
 80095da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80095dc:	4604      	mov	r4, r0
 80095de:	460d      	mov	r5, r1
 80095e0:	b976      	cbnz	r6, 8009600 <_Balloc+0x28>
 80095e2:	2010      	movs	r0, #16
 80095e4:	f7ff ffe2 	bl	80095ac <malloc>
 80095e8:	4602      	mov	r2, r0
 80095ea:	6260      	str	r0, [r4, #36]	; 0x24
 80095ec:	b920      	cbnz	r0, 80095f8 <_Balloc+0x20>
 80095ee:	4b18      	ldr	r3, [pc, #96]	; (8009650 <_Balloc+0x78>)
 80095f0:	4818      	ldr	r0, [pc, #96]	; (8009654 <_Balloc+0x7c>)
 80095f2:	2166      	movs	r1, #102	; 0x66
 80095f4:	f000 fdd6 	bl	800a1a4 <__assert_func>
 80095f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80095fc:	6006      	str	r6, [r0, #0]
 80095fe:	60c6      	str	r6, [r0, #12]
 8009600:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009602:	68f3      	ldr	r3, [r6, #12]
 8009604:	b183      	cbz	r3, 8009628 <_Balloc+0x50>
 8009606:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009608:	68db      	ldr	r3, [r3, #12]
 800960a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800960e:	b9b8      	cbnz	r0, 8009640 <_Balloc+0x68>
 8009610:	2101      	movs	r1, #1
 8009612:	fa01 f605 	lsl.w	r6, r1, r5
 8009616:	1d72      	adds	r2, r6, #5
 8009618:	0092      	lsls	r2, r2, #2
 800961a:	4620      	mov	r0, r4
 800961c:	f000 fb60 	bl	8009ce0 <_calloc_r>
 8009620:	b160      	cbz	r0, 800963c <_Balloc+0x64>
 8009622:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009626:	e00e      	b.n	8009646 <_Balloc+0x6e>
 8009628:	2221      	movs	r2, #33	; 0x21
 800962a:	2104      	movs	r1, #4
 800962c:	4620      	mov	r0, r4
 800962e:	f000 fb57 	bl	8009ce0 <_calloc_r>
 8009632:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009634:	60f0      	str	r0, [r6, #12]
 8009636:	68db      	ldr	r3, [r3, #12]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d1e4      	bne.n	8009606 <_Balloc+0x2e>
 800963c:	2000      	movs	r0, #0
 800963e:	bd70      	pop	{r4, r5, r6, pc}
 8009640:	6802      	ldr	r2, [r0, #0]
 8009642:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009646:	2300      	movs	r3, #0
 8009648:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800964c:	e7f7      	b.n	800963e <_Balloc+0x66>
 800964e:	bf00      	nop
 8009650:	0800bce9 	.word	0x0800bce9
 8009654:	0800bd6c 	.word	0x0800bd6c

08009658 <_Bfree>:
 8009658:	b570      	push	{r4, r5, r6, lr}
 800965a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800965c:	4605      	mov	r5, r0
 800965e:	460c      	mov	r4, r1
 8009660:	b976      	cbnz	r6, 8009680 <_Bfree+0x28>
 8009662:	2010      	movs	r0, #16
 8009664:	f7ff ffa2 	bl	80095ac <malloc>
 8009668:	4602      	mov	r2, r0
 800966a:	6268      	str	r0, [r5, #36]	; 0x24
 800966c:	b920      	cbnz	r0, 8009678 <_Bfree+0x20>
 800966e:	4b09      	ldr	r3, [pc, #36]	; (8009694 <_Bfree+0x3c>)
 8009670:	4809      	ldr	r0, [pc, #36]	; (8009698 <_Bfree+0x40>)
 8009672:	218a      	movs	r1, #138	; 0x8a
 8009674:	f000 fd96 	bl	800a1a4 <__assert_func>
 8009678:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800967c:	6006      	str	r6, [r0, #0]
 800967e:	60c6      	str	r6, [r0, #12]
 8009680:	b13c      	cbz	r4, 8009692 <_Bfree+0x3a>
 8009682:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009684:	6862      	ldr	r2, [r4, #4]
 8009686:	68db      	ldr	r3, [r3, #12]
 8009688:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800968c:	6021      	str	r1, [r4, #0]
 800968e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009692:	bd70      	pop	{r4, r5, r6, pc}
 8009694:	0800bce9 	.word	0x0800bce9
 8009698:	0800bd6c 	.word	0x0800bd6c

0800969c <__multadd>:
 800969c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096a0:	690d      	ldr	r5, [r1, #16]
 80096a2:	4607      	mov	r7, r0
 80096a4:	460c      	mov	r4, r1
 80096a6:	461e      	mov	r6, r3
 80096a8:	f101 0c14 	add.w	ip, r1, #20
 80096ac:	2000      	movs	r0, #0
 80096ae:	f8dc 3000 	ldr.w	r3, [ip]
 80096b2:	b299      	uxth	r1, r3
 80096b4:	fb02 6101 	mla	r1, r2, r1, r6
 80096b8:	0c1e      	lsrs	r6, r3, #16
 80096ba:	0c0b      	lsrs	r3, r1, #16
 80096bc:	fb02 3306 	mla	r3, r2, r6, r3
 80096c0:	b289      	uxth	r1, r1
 80096c2:	3001      	adds	r0, #1
 80096c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80096c8:	4285      	cmp	r5, r0
 80096ca:	f84c 1b04 	str.w	r1, [ip], #4
 80096ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80096d2:	dcec      	bgt.n	80096ae <__multadd+0x12>
 80096d4:	b30e      	cbz	r6, 800971a <__multadd+0x7e>
 80096d6:	68a3      	ldr	r3, [r4, #8]
 80096d8:	42ab      	cmp	r3, r5
 80096da:	dc19      	bgt.n	8009710 <__multadd+0x74>
 80096dc:	6861      	ldr	r1, [r4, #4]
 80096de:	4638      	mov	r0, r7
 80096e0:	3101      	adds	r1, #1
 80096e2:	f7ff ff79 	bl	80095d8 <_Balloc>
 80096e6:	4680      	mov	r8, r0
 80096e8:	b928      	cbnz	r0, 80096f6 <__multadd+0x5a>
 80096ea:	4602      	mov	r2, r0
 80096ec:	4b0c      	ldr	r3, [pc, #48]	; (8009720 <__multadd+0x84>)
 80096ee:	480d      	ldr	r0, [pc, #52]	; (8009724 <__multadd+0x88>)
 80096f0:	21b5      	movs	r1, #181	; 0xb5
 80096f2:	f000 fd57 	bl	800a1a4 <__assert_func>
 80096f6:	6922      	ldr	r2, [r4, #16]
 80096f8:	3202      	adds	r2, #2
 80096fa:	f104 010c 	add.w	r1, r4, #12
 80096fe:	0092      	lsls	r2, r2, #2
 8009700:	300c      	adds	r0, #12
 8009702:	f7ff ff5b 	bl	80095bc <memcpy>
 8009706:	4621      	mov	r1, r4
 8009708:	4638      	mov	r0, r7
 800970a:	f7ff ffa5 	bl	8009658 <_Bfree>
 800970e:	4644      	mov	r4, r8
 8009710:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009714:	3501      	adds	r5, #1
 8009716:	615e      	str	r6, [r3, #20]
 8009718:	6125      	str	r5, [r4, #16]
 800971a:	4620      	mov	r0, r4
 800971c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009720:	0800bd5b 	.word	0x0800bd5b
 8009724:	0800bd6c 	.word	0x0800bd6c

08009728 <__hi0bits>:
 8009728:	0c03      	lsrs	r3, r0, #16
 800972a:	041b      	lsls	r3, r3, #16
 800972c:	b9d3      	cbnz	r3, 8009764 <__hi0bits+0x3c>
 800972e:	0400      	lsls	r0, r0, #16
 8009730:	2310      	movs	r3, #16
 8009732:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009736:	bf04      	itt	eq
 8009738:	0200      	lsleq	r0, r0, #8
 800973a:	3308      	addeq	r3, #8
 800973c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009740:	bf04      	itt	eq
 8009742:	0100      	lsleq	r0, r0, #4
 8009744:	3304      	addeq	r3, #4
 8009746:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800974a:	bf04      	itt	eq
 800974c:	0080      	lsleq	r0, r0, #2
 800974e:	3302      	addeq	r3, #2
 8009750:	2800      	cmp	r0, #0
 8009752:	db05      	blt.n	8009760 <__hi0bits+0x38>
 8009754:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009758:	f103 0301 	add.w	r3, r3, #1
 800975c:	bf08      	it	eq
 800975e:	2320      	moveq	r3, #32
 8009760:	4618      	mov	r0, r3
 8009762:	4770      	bx	lr
 8009764:	2300      	movs	r3, #0
 8009766:	e7e4      	b.n	8009732 <__hi0bits+0xa>

08009768 <__lo0bits>:
 8009768:	6803      	ldr	r3, [r0, #0]
 800976a:	f013 0207 	ands.w	r2, r3, #7
 800976e:	4601      	mov	r1, r0
 8009770:	d00b      	beq.n	800978a <__lo0bits+0x22>
 8009772:	07da      	lsls	r2, r3, #31
 8009774:	d423      	bmi.n	80097be <__lo0bits+0x56>
 8009776:	0798      	lsls	r0, r3, #30
 8009778:	bf49      	itett	mi
 800977a:	085b      	lsrmi	r3, r3, #1
 800977c:	089b      	lsrpl	r3, r3, #2
 800977e:	2001      	movmi	r0, #1
 8009780:	600b      	strmi	r3, [r1, #0]
 8009782:	bf5c      	itt	pl
 8009784:	600b      	strpl	r3, [r1, #0]
 8009786:	2002      	movpl	r0, #2
 8009788:	4770      	bx	lr
 800978a:	b298      	uxth	r0, r3
 800978c:	b9a8      	cbnz	r0, 80097ba <__lo0bits+0x52>
 800978e:	0c1b      	lsrs	r3, r3, #16
 8009790:	2010      	movs	r0, #16
 8009792:	b2da      	uxtb	r2, r3
 8009794:	b90a      	cbnz	r2, 800979a <__lo0bits+0x32>
 8009796:	3008      	adds	r0, #8
 8009798:	0a1b      	lsrs	r3, r3, #8
 800979a:	071a      	lsls	r2, r3, #28
 800979c:	bf04      	itt	eq
 800979e:	091b      	lsreq	r3, r3, #4
 80097a0:	3004      	addeq	r0, #4
 80097a2:	079a      	lsls	r2, r3, #30
 80097a4:	bf04      	itt	eq
 80097a6:	089b      	lsreq	r3, r3, #2
 80097a8:	3002      	addeq	r0, #2
 80097aa:	07da      	lsls	r2, r3, #31
 80097ac:	d403      	bmi.n	80097b6 <__lo0bits+0x4e>
 80097ae:	085b      	lsrs	r3, r3, #1
 80097b0:	f100 0001 	add.w	r0, r0, #1
 80097b4:	d005      	beq.n	80097c2 <__lo0bits+0x5a>
 80097b6:	600b      	str	r3, [r1, #0]
 80097b8:	4770      	bx	lr
 80097ba:	4610      	mov	r0, r2
 80097bc:	e7e9      	b.n	8009792 <__lo0bits+0x2a>
 80097be:	2000      	movs	r0, #0
 80097c0:	4770      	bx	lr
 80097c2:	2020      	movs	r0, #32
 80097c4:	4770      	bx	lr
	...

080097c8 <__i2b>:
 80097c8:	b510      	push	{r4, lr}
 80097ca:	460c      	mov	r4, r1
 80097cc:	2101      	movs	r1, #1
 80097ce:	f7ff ff03 	bl	80095d8 <_Balloc>
 80097d2:	4602      	mov	r2, r0
 80097d4:	b928      	cbnz	r0, 80097e2 <__i2b+0x1a>
 80097d6:	4b05      	ldr	r3, [pc, #20]	; (80097ec <__i2b+0x24>)
 80097d8:	4805      	ldr	r0, [pc, #20]	; (80097f0 <__i2b+0x28>)
 80097da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80097de:	f000 fce1 	bl	800a1a4 <__assert_func>
 80097e2:	2301      	movs	r3, #1
 80097e4:	6144      	str	r4, [r0, #20]
 80097e6:	6103      	str	r3, [r0, #16]
 80097e8:	bd10      	pop	{r4, pc}
 80097ea:	bf00      	nop
 80097ec:	0800bd5b 	.word	0x0800bd5b
 80097f0:	0800bd6c 	.word	0x0800bd6c

080097f4 <__multiply>:
 80097f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097f8:	4691      	mov	r9, r2
 80097fa:	690a      	ldr	r2, [r1, #16]
 80097fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009800:	429a      	cmp	r2, r3
 8009802:	bfb8      	it	lt
 8009804:	460b      	movlt	r3, r1
 8009806:	460c      	mov	r4, r1
 8009808:	bfbc      	itt	lt
 800980a:	464c      	movlt	r4, r9
 800980c:	4699      	movlt	r9, r3
 800980e:	6927      	ldr	r7, [r4, #16]
 8009810:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009814:	68a3      	ldr	r3, [r4, #8]
 8009816:	6861      	ldr	r1, [r4, #4]
 8009818:	eb07 060a 	add.w	r6, r7, sl
 800981c:	42b3      	cmp	r3, r6
 800981e:	b085      	sub	sp, #20
 8009820:	bfb8      	it	lt
 8009822:	3101      	addlt	r1, #1
 8009824:	f7ff fed8 	bl	80095d8 <_Balloc>
 8009828:	b930      	cbnz	r0, 8009838 <__multiply+0x44>
 800982a:	4602      	mov	r2, r0
 800982c:	4b44      	ldr	r3, [pc, #272]	; (8009940 <__multiply+0x14c>)
 800982e:	4845      	ldr	r0, [pc, #276]	; (8009944 <__multiply+0x150>)
 8009830:	f240 115d 	movw	r1, #349	; 0x15d
 8009834:	f000 fcb6 	bl	800a1a4 <__assert_func>
 8009838:	f100 0514 	add.w	r5, r0, #20
 800983c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009840:	462b      	mov	r3, r5
 8009842:	2200      	movs	r2, #0
 8009844:	4543      	cmp	r3, r8
 8009846:	d321      	bcc.n	800988c <__multiply+0x98>
 8009848:	f104 0314 	add.w	r3, r4, #20
 800984c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009850:	f109 0314 	add.w	r3, r9, #20
 8009854:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009858:	9202      	str	r2, [sp, #8]
 800985a:	1b3a      	subs	r2, r7, r4
 800985c:	3a15      	subs	r2, #21
 800985e:	f022 0203 	bic.w	r2, r2, #3
 8009862:	3204      	adds	r2, #4
 8009864:	f104 0115 	add.w	r1, r4, #21
 8009868:	428f      	cmp	r7, r1
 800986a:	bf38      	it	cc
 800986c:	2204      	movcc	r2, #4
 800986e:	9201      	str	r2, [sp, #4]
 8009870:	9a02      	ldr	r2, [sp, #8]
 8009872:	9303      	str	r3, [sp, #12]
 8009874:	429a      	cmp	r2, r3
 8009876:	d80c      	bhi.n	8009892 <__multiply+0x9e>
 8009878:	2e00      	cmp	r6, #0
 800987a:	dd03      	ble.n	8009884 <__multiply+0x90>
 800987c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009880:	2b00      	cmp	r3, #0
 8009882:	d05a      	beq.n	800993a <__multiply+0x146>
 8009884:	6106      	str	r6, [r0, #16]
 8009886:	b005      	add	sp, #20
 8009888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800988c:	f843 2b04 	str.w	r2, [r3], #4
 8009890:	e7d8      	b.n	8009844 <__multiply+0x50>
 8009892:	f8b3 a000 	ldrh.w	sl, [r3]
 8009896:	f1ba 0f00 	cmp.w	sl, #0
 800989a:	d024      	beq.n	80098e6 <__multiply+0xf2>
 800989c:	f104 0e14 	add.w	lr, r4, #20
 80098a0:	46a9      	mov	r9, r5
 80098a2:	f04f 0c00 	mov.w	ip, #0
 80098a6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80098aa:	f8d9 1000 	ldr.w	r1, [r9]
 80098ae:	fa1f fb82 	uxth.w	fp, r2
 80098b2:	b289      	uxth	r1, r1
 80098b4:	fb0a 110b 	mla	r1, sl, fp, r1
 80098b8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80098bc:	f8d9 2000 	ldr.w	r2, [r9]
 80098c0:	4461      	add	r1, ip
 80098c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80098c6:	fb0a c20b 	mla	r2, sl, fp, ip
 80098ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80098ce:	b289      	uxth	r1, r1
 80098d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80098d4:	4577      	cmp	r7, lr
 80098d6:	f849 1b04 	str.w	r1, [r9], #4
 80098da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80098de:	d8e2      	bhi.n	80098a6 <__multiply+0xb2>
 80098e0:	9a01      	ldr	r2, [sp, #4]
 80098e2:	f845 c002 	str.w	ip, [r5, r2]
 80098e6:	9a03      	ldr	r2, [sp, #12]
 80098e8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80098ec:	3304      	adds	r3, #4
 80098ee:	f1b9 0f00 	cmp.w	r9, #0
 80098f2:	d020      	beq.n	8009936 <__multiply+0x142>
 80098f4:	6829      	ldr	r1, [r5, #0]
 80098f6:	f104 0c14 	add.w	ip, r4, #20
 80098fa:	46ae      	mov	lr, r5
 80098fc:	f04f 0a00 	mov.w	sl, #0
 8009900:	f8bc b000 	ldrh.w	fp, [ip]
 8009904:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009908:	fb09 220b 	mla	r2, r9, fp, r2
 800990c:	4492      	add	sl, r2
 800990e:	b289      	uxth	r1, r1
 8009910:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009914:	f84e 1b04 	str.w	r1, [lr], #4
 8009918:	f85c 2b04 	ldr.w	r2, [ip], #4
 800991c:	f8be 1000 	ldrh.w	r1, [lr]
 8009920:	0c12      	lsrs	r2, r2, #16
 8009922:	fb09 1102 	mla	r1, r9, r2, r1
 8009926:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800992a:	4567      	cmp	r7, ip
 800992c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009930:	d8e6      	bhi.n	8009900 <__multiply+0x10c>
 8009932:	9a01      	ldr	r2, [sp, #4]
 8009934:	50a9      	str	r1, [r5, r2]
 8009936:	3504      	adds	r5, #4
 8009938:	e79a      	b.n	8009870 <__multiply+0x7c>
 800993a:	3e01      	subs	r6, #1
 800993c:	e79c      	b.n	8009878 <__multiply+0x84>
 800993e:	bf00      	nop
 8009940:	0800bd5b 	.word	0x0800bd5b
 8009944:	0800bd6c 	.word	0x0800bd6c

08009948 <__pow5mult>:
 8009948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800994c:	4615      	mov	r5, r2
 800994e:	f012 0203 	ands.w	r2, r2, #3
 8009952:	4606      	mov	r6, r0
 8009954:	460f      	mov	r7, r1
 8009956:	d007      	beq.n	8009968 <__pow5mult+0x20>
 8009958:	4c25      	ldr	r4, [pc, #148]	; (80099f0 <__pow5mult+0xa8>)
 800995a:	3a01      	subs	r2, #1
 800995c:	2300      	movs	r3, #0
 800995e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009962:	f7ff fe9b 	bl	800969c <__multadd>
 8009966:	4607      	mov	r7, r0
 8009968:	10ad      	asrs	r5, r5, #2
 800996a:	d03d      	beq.n	80099e8 <__pow5mult+0xa0>
 800996c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800996e:	b97c      	cbnz	r4, 8009990 <__pow5mult+0x48>
 8009970:	2010      	movs	r0, #16
 8009972:	f7ff fe1b 	bl	80095ac <malloc>
 8009976:	4602      	mov	r2, r0
 8009978:	6270      	str	r0, [r6, #36]	; 0x24
 800997a:	b928      	cbnz	r0, 8009988 <__pow5mult+0x40>
 800997c:	4b1d      	ldr	r3, [pc, #116]	; (80099f4 <__pow5mult+0xac>)
 800997e:	481e      	ldr	r0, [pc, #120]	; (80099f8 <__pow5mult+0xb0>)
 8009980:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009984:	f000 fc0e 	bl	800a1a4 <__assert_func>
 8009988:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800998c:	6004      	str	r4, [r0, #0]
 800998e:	60c4      	str	r4, [r0, #12]
 8009990:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009994:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009998:	b94c      	cbnz	r4, 80099ae <__pow5mult+0x66>
 800999a:	f240 2171 	movw	r1, #625	; 0x271
 800999e:	4630      	mov	r0, r6
 80099a0:	f7ff ff12 	bl	80097c8 <__i2b>
 80099a4:	2300      	movs	r3, #0
 80099a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80099aa:	4604      	mov	r4, r0
 80099ac:	6003      	str	r3, [r0, #0]
 80099ae:	f04f 0900 	mov.w	r9, #0
 80099b2:	07eb      	lsls	r3, r5, #31
 80099b4:	d50a      	bpl.n	80099cc <__pow5mult+0x84>
 80099b6:	4639      	mov	r1, r7
 80099b8:	4622      	mov	r2, r4
 80099ba:	4630      	mov	r0, r6
 80099bc:	f7ff ff1a 	bl	80097f4 <__multiply>
 80099c0:	4639      	mov	r1, r7
 80099c2:	4680      	mov	r8, r0
 80099c4:	4630      	mov	r0, r6
 80099c6:	f7ff fe47 	bl	8009658 <_Bfree>
 80099ca:	4647      	mov	r7, r8
 80099cc:	106d      	asrs	r5, r5, #1
 80099ce:	d00b      	beq.n	80099e8 <__pow5mult+0xa0>
 80099d0:	6820      	ldr	r0, [r4, #0]
 80099d2:	b938      	cbnz	r0, 80099e4 <__pow5mult+0x9c>
 80099d4:	4622      	mov	r2, r4
 80099d6:	4621      	mov	r1, r4
 80099d8:	4630      	mov	r0, r6
 80099da:	f7ff ff0b 	bl	80097f4 <__multiply>
 80099de:	6020      	str	r0, [r4, #0]
 80099e0:	f8c0 9000 	str.w	r9, [r0]
 80099e4:	4604      	mov	r4, r0
 80099e6:	e7e4      	b.n	80099b2 <__pow5mult+0x6a>
 80099e8:	4638      	mov	r0, r7
 80099ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099ee:	bf00      	nop
 80099f0:	0800beb8 	.word	0x0800beb8
 80099f4:	0800bce9 	.word	0x0800bce9
 80099f8:	0800bd6c 	.word	0x0800bd6c

080099fc <__lshift>:
 80099fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a00:	460c      	mov	r4, r1
 8009a02:	6849      	ldr	r1, [r1, #4]
 8009a04:	6923      	ldr	r3, [r4, #16]
 8009a06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009a0a:	68a3      	ldr	r3, [r4, #8]
 8009a0c:	4607      	mov	r7, r0
 8009a0e:	4691      	mov	r9, r2
 8009a10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009a14:	f108 0601 	add.w	r6, r8, #1
 8009a18:	42b3      	cmp	r3, r6
 8009a1a:	db0b      	blt.n	8009a34 <__lshift+0x38>
 8009a1c:	4638      	mov	r0, r7
 8009a1e:	f7ff fddb 	bl	80095d8 <_Balloc>
 8009a22:	4605      	mov	r5, r0
 8009a24:	b948      	cbnz	r0, 8009a3a <__lshift+0x3e>
 8009a26:	4602      	mov	r2, r0
 8009a28:	4b2a      	ldr	r3, [pc, #168]	; (8009ad4 <__lshift+0xd8>)
 8009a2a:	482b      	ldr	r0, [pc, #172]	; (8009ad8 <__lshift+0xdc>)
 8009a2c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009a30:	f000 fbb8 	bl	800a1a4 <__assert_func>
 8009a34:	3101      	adds	r1, #1
 8009a36:	005b      	lsls	r3, r3, #1
 8009a38:	e7ee      	b.n	8009a18 <__lshift+0x1c>
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	f100 0114 	add.w	r1, r0, #20
 8009a40:	f100 0210 	add.w	r2, r0, #16
 8009a44:	4618      	mov	r0, r3
 8009a46:	4553      	cmp	r3, sl
 8009a48:	db37      	blt.n	8009aba <__lshift+0xbe>
 8009a4a:	6920      	ldr	r0, [r4, #16]
 8009a4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009a50:	f104 0314 	add.w	r3, r4, #20
 8009a54:	f019 091f 	ands.w	r9, r9, #31
 8009a58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009a5c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009a60:	d02f      	beq.n	8009ac2 <__lshift+0xc6>
 8009a62:	f1c9 0e20 	rsb	lr, r9, #32
 8009a66:	468a      	mov	sl, r1
 8009a68:	f04f 0c00 	mov.w	ip, #0
 8009a6c:	681a      	ldr	r2, [r3, #0]
 8009a6e:	fa02 f209 	lsl.w	r2, r2, r9
 8009a72:	ea42 020c 	orr.w	r2, r2, ip
 8009a76:	f84a 2b04 	str.w	r2, [sl], #4
 8009a7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a7e:	4298      	cmp	r0, r3
 8009a80:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009a84:	d8f2      	bhi.n	8009a6c <__lshift+0x70>
 8009a86:	1b03      	subs	r3, r0, r4
 8009a88:	3b15      	subs	r3, #21
 8009a8a:	f023 0303 	bic.w	r3, r3, #3
 8009a8e:	3304      	adds	r3, #4
 8009a90:	f104 0215 	add.w	r2, r4, #21
 8009a94:	4290      	cmp	r0, r2
 8009a96:	bf38      	it	cc
 8009a98:	2304      	movcc	r3, #4
 8009a9a:	f841 c003 	str.w	ip, [r1, r3]
 8009a9e:	f1bc 0f00 	cmp.w	ip, #0
 8009aa2:	d001      	beq.n	8009aa8 <__lshift+0xac>
 8009aa4:	f108 0602 	add.w	r6, r8, #2
 8009aa8:	3e01      	subs	r6, #1
 8009aaa:	4638      	mov	r0, r7
 8009aac:	612e      	str	r6, [r5, #16]
 8009aae:	4621      	mov	r1, r4
 8009ab0:	f7ff fdd2 	bl	8009658 <_Bfree>
 8009ab4:	4628      	mov	r0, r5
 8009ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009aba:	f842 0f04 	str.w	r0, [r2, #4]!
 8009abe:	3301      	adds	r3, #1
 8009ac0:	e7c1      	b.n	8009a46 <__lshift+0x4a>
 8009ac2:	3904      	subs	r1, #4
 8009ac4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ac8:	f841 2f04 	str.w	r2, [r1, #4]!
 8009acc:	4298      	cmp	r0, r3
 8009ace:	d8f9      	bhi.n	8009ac4 <__lshift+0xc8>
 8009ad0:	e7ea      	b.n	8009aa8 <__lshift+0xac>
 8009ad2:	bf00      	nop
 8009ad4:	0800bd5b 	.word	0x0800bd5b
 8009ad8:	0800bd6c 	.word	0x0800bd6c

08009adc <__mcmp>:
 8009adc:	b530      	push	{r4, r5, lr}
 8009ade:	6902      	ldr	r2, [r0, #16]
 8009ae0:	690c      	ldr	r4, [r1, #16]
 8009ae2:	1b12      	subs	r2, r2, r4
 8009ae4:	d10e      	bne.n	8009b04 <__mcmp+0x28>
 8009ae6:	f100 0314 	add.w	r3, r0, #20
 8009aea:	3114      	adds	r1, #20
 8009aec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009af0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009af4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009af8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009afc:	42a5      	cmp	r5, r4
 8009afe:	d003      	beq.n	8009b08 <__mcmp+0x2c>
 8009b00:	d305      	bcc.n	8009b0e <__mcmp+0x32>
 8009b02:	2201      	movs	r2, #1
 8009b04:	4610      	mov	r0, r2
 8009b06:	bd30      	pop	{r4, r5, pc}
 8009b08:	4283      	cmp	r3, r0
 8009b0a:	d3f3      	bcc.n	8009af4 <__mcmp+0x18>
 8009b0c:	e7fa      	b.n	8009b04 <__mcmp+0x28>
 8009b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8009b12:	e7f7      	b.n	8009b04 <__mcmp+0x28>

08009b14 <__mdiff>:
 8009b14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b18:	460c      	mov	r4, r1
 8009b1a:	4606      	mov	r6, r0
 8009b1c:	4611      	mov	r1, r2
 8009b1e:	4620      	mov	r0, r4
 8009b20:	4690      	mov	r8, r2
 8009b22:	f7ff ffdb 	bl	8009adc <__mcmp>
 8009b26:	1e05      	subs	r5, r0, #0
 8009b28:	d110      	bne.n	8009b4c <__mdiff+0x38>
 8009b2a:	4629      	mov	r1, r5
 8009b2c:	4630      	mov	r0, r6
 8009b2e:	f7ff fd53 	bl	80095d8 <_Balloc>
 8009b32:	b930      	cbnz	r0, 8009b42 <__mdiff+0x2e>
 8009b34:	4b3a      	ldr	r3, [pc, #232]	; (8009c20 <__mdiff+0x10c>)
 8009b36:	4602      	mov	r2, r0
 8009b38:	f240 2132 	movw	r1, #562	; 0x232
 8009b3c:	4839      	ldr	r0, [pc, #228]	; (8009c24 <__mdiff+0x110>)
 8009b3e:	f000 fb31 	bl	800a1a4 <__assert_func>
 8009b42:	2301      	movs	r3, #1
 8009b44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009b48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b4c:	bfa4      	itt	ge
 8009b4e:	4643      	movge	r3, r8
 8009b50:	46a0      	movge	r8, r4
 8009b52:	4630      	mov	r0, r6
 8009b54:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009b58:	bfa6      	itte	ge
 8009b5a:	461c      	movge	r4, r3
 8009b5c:	2500      	movge	r5, #0
 8009b5e:	2501      	movlt	r5, #1
 8009b60:	f7ff fd3a 	bl	80095d8 <_Balloc>
 8009b64:	b920      	cbnz	r0, 8009b70 <__mdiff+0x5c>
 8009b66:	4b2e      	ldr	r3, [pc, #184]	; (8009c20 <__mdiff+0x10c>)
 8009b68:	4602      	mov	r2, r0
 8009b6a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009b6e:	e7e5      	b.n	8009b3c <__mdiff+0x28>
 8009b70:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009b74:	6926      	ldr	r6, [r4, #16]
 8009b76:	60c5      	str	r5, [r0, #12]
 8009b78:	f104 0914 	add.w	r9, r4, #20
 8009b7c:	f108 0514 	add.w	r5, r8, #20
 8009b80:	f100 0e14 	add.w	lr, r0, #20
 8009b84:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009b88:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009b8c:	f108 0210 	add.w	r2, r8, #16
 8009b90:	46f2      	mov	sl, lr
 8009b92:	2100      	movs	r1, #0
 8009b94:	f859 3b04 	ldr.w	r3, [r9], #4
 8009b98:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009b9c:	fa1f f883 	uxth.w	r8, r3
 8009ba0:	fa11 f18b 	uxtah	r1, r1, fp
 8009ba4:	0c1b      	lsrs	r3, r3, #16
 8009ba6:	eba1 0808 	sub.w	r8, r1, r8
 8009baa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009bae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009bb2:	fa1f f888 	uxth.w	r8, r8
 8009bb6:	1419      	asrs	r1, r3, #16
 8009bb8:	454e      	cmp	r6, r9
 8009bba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009bbe:	f84a 3b04 	str.w	r3, [sl], #4
 8009bc2:	d8e7      	bhi.n	8009b94 <__mdiff+0x80>
 8009bc4:	1b33      	subs	r3, r6, r4
 8009bc6:	3b15      	subs	r3, #21
 8009bc8:	f023 0303 	bic.w	r3, r3, #3
 8009bcc:	3304      	adds	r3, #4
 8009bce:	3415      	adds	r4, #21
 8009bd0:	42a6      	cmp	r6, r4
 8009bd2:	bf38      	it	cc
 8009bd4:	2304      	movcc	r3, #4
 8009bd6:	441d      	add	r5, r3
 8009bd8:	4473      	add	r3, lr
 8009bda:	469e      	mov	lr, r3
 8009bdc:	462e      	mov	r6, r5
 8009bde:	4566      	cmp	r6, ip
 8009be0:	d30e      	bcc.n	8009c00 <__mdiff+0xec>
 8009be2:	f10c 0203 	add.w	r2, ip, #3
 8009be6:	1b52      	subs	r2, r2, r5
 8009be8:	f022 0203 	bic.w	r2, r2, #3
 8009bec:	3d03      	subs	r5, #3
 8009bee:	45ac      	cmp	ip, r5
 8009bf0:	bf38      	it	cc
 8009bf2:	2200      	movcc	r2, #0
 8009bf4:	441a      	add	r2, r3
 8009bf6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009bfa:	b17b      	cbz	r3, 8009c1c <__mdiff+0x108>
 8009bfc:	6107      	str	r7, [r0, #16]
 8009bfe:	e7a3      	b.n	8009b48 <__mdiff+0x34>
 8009c00:	f856 8b04 	ldr.w	r8, [r6], #4
 8009c04:	fa11 f288 	uxtah	r2, r1, r8
 8009c08:	1414      	asrs	r4, r2, #16
 8009c0a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009c0e:	b292      	uxth	r2, r2
 8009c10:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009c14:	f84e 2b04 	str.w	r2, [lr], #4
 8009c18:	1421      	asrs	r1, r4, #16
 8009c1a:	e7e0      	b.n	8009bde <__mdiff+0xca>
 8009c1c:	3f01      	subs	r7, #1
 8009c1e:	e7ea      	b.n	8009bf6 <__mdiff+0xe2>
 8009c20:	0800bd5b 	.word	0x0800bd5b
 8009c24:	0800bd6c 	.word	0x0800bd6c

08009c28 <__d2b>:
 8009c28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009c2c:	4689      	mov	r9, r1
 8009c2e:	2101      	movs	r1, #1
 8009c30:	ec57 6b10 	vmov	r6, r7, d0
 8009c34:	4690      	mov	r8, r2
 8009c36:	f7ff fccf 	bl	80095d8 <_Balloc>
 8009c3a:	4604      	mov	r4, r0
 8009c3c:	b930      	cbnz	r0, 8009c4c <__d2b+0x24>
 8009c3e:	4602      	mov	r2, r0
 8009c40:	4b25      	ldr	r3, [pc, #148]	; (8009cd8 <__d2b+0xb0>)
 8009c42:	4826      	ldr	r0, [pc, #152]	; (8009cdc <__d2b+0xb4>)
 8009c44:	f240 310a 	movw	r1, #778	; 0x30a
 8009c48:	f000 faac 	bl	800a1a4 <__assert_func>
 8009c4c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009c50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009c54:	bb35      	cbnz	r5, 8009ca4 <__d2b+0x7c>
 8009c56:	2e00      	cmp	r6, #0
 8009c58:	9301      	str	r3, [sp, #4]
 8009c5a:	d028      	beq.n	8009cae <__d2b+0x86>
 8009c5c:	4668      	mov	r0, sp
 8009c5e:	9600      	str	r6, [sp, #0]
 8009c60:	f7ff fd82 	bl	8009768 <__lo0bits>
 8009c64:	9900      	ldr	r1, [sp, #0]
 8009c66:	b300      	cbz	r0, 8009caa <__d2b+0x82>
 8009c68:	9a01      	ldr	r2, [sp, #4]
 8009c6a:	f1c0 0320 	rsb	r3, r0, #32
 8009c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8009c72:	430b      	orrs	r3, r1
 8009c74:	40c2      	lsrs	r2, r0
 8009c76:	6163      	str	r3, [r4, #20]
 8009c78:	9201      	str	r2, [sp, #4]
 8009c7a:	9b01      	ldr	r3, [sp, #4]
 8009c7c:	61a3      	str	r3, [r4, #24]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	bf14      	ite	ne
 8009c82:	2202      	movne	r2, #2
 8009c84:	2201      	moveq	r2, #1
 8009c86:	6122      	str	r2, [r4, #16]
 8009c88:	b1d5      	cbz	r5, 8009cc0 <__d2b+0x98>
 8009c8a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009c8e:	4405      	add	r5, r0
 8009c90:	f8c9 5000 	str.w	r5, [r9]
 8009c94:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009c98:	f8c8 0000 	str.w	r0, [r8]
 8009c9c:	4620      	mov	r0, r4
 8009c9e:	b003      	add	sp, #12
 8009ca0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ca4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ca8:	e7d5      	b.n	8009c56 <__d2b+0x2e>
 8009caa:	6161      	str	r1, [r4, #20]
 8009cac:	e7e5      	b.n	8009c7a <__d2b+0x52>
 8009cae:	a801      	add	r0, sp, #4
 8009cb0:	f7ff fd5a 	bl	8009768 <__lo0bits>
 8009cb4:	9b01      	ldr	r3, [sp, #4]
 8009cb6:	6163      	str	r3, [r4, #20]
 8009cb8:	2201      	movs	r2, #1
 8009cba:	6122      	str	r2, [r4, #16]
 8009cbc:	3020      	adds	r0, #32
 8009cbe:	e7e3      	b.n	8009c88 <__d2b+0x60>
 8009cc0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009cc4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009cc8:	f8c9 0000 	str.w	r0, [r9]
 8009ccc:	6918      	ldr	r0, [r3, #16]
 8009cce:	f7ff fd2b 	bl	8009728 <__hi0bits>
 8009cd2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009cd6:	e7df      	b.n	8009c98 <__d2b+0x70>
 8009cd8:	0800bd5b 	.word	0x0800bd5b
 8009cdc:	0800bd6c 	.word	0x0800bd6c

08009ce0 <_calloc_r>:
 8009ce0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ce2:	fba1 2402 	umull	r2, r4, r1, r2
 8009ce6:	b94c      	cbnz	r4, 8009cfc <_calloc_r+0x1c>
 8009ce8:	4611      	mov	r1, r2
 8009cea:	9201      	str	r2, [sp, #4]
 8009cec:	f000 f87a 	bl	8009de4 <_malloc_r>
 8009cf0:	9a01      	ldr	r2, [sp, #4]
 8009cf2:	4605      	mov	r5, r0
 8009cf4:	b930      	cbnz	r0, 8009d04 <_calloc_r+0x24>
 8009cf6:	4628      	mov	r0, r5
 8009cf8:	b003      	add	sp, #12
 8009cfa:	bd30      	pop	{r4, r5, pc}
 8009cfc:	220c      	movs	r2, #12
 8009cfe:	6002      	str	r2, [r0, #0]
 8009d00:	2500      	movs	r5, #0
 8009d02:	e7f8      	b.n	8009cf6 <_calloc_r+0x16>
 8009d04:	4621      	mov	r1, r4
 8009d06:	f7fe f92b 	bl	8007f60 <memset>
 8009d0a:	e7f4      	b.n	8009cf6 <_calloc_r+0x16>

08009d0c <_free_r>:
 8009d0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d0e:	2900      	cmp	r1, #0
 8009d10:	d044      	beq.n	8009d9c <_free_r+0x90>
 8009d12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d16:	9001      	str	r0, [sp, #4]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	f1a1 0404 	sub.w	r4, r1, #4
 8009d1e:	bfb8      	it	lt
 8009d20:	18e4      	addlt	r4, r4, r3
 8009d22:	f000 fa9b 	bl	800a25c <__malloc_lock>
 8009d26:	4a1e      	ldr	r2, [pc, #120]	; (8009da0 <_free_r+0x94>)
 8009d28:	9801      	ldr	r0, [sp, #4]
 8009d2a:	6813      	ldr	r3, [r2, #0]
 8009d2c:	b933      	cbnz	r3, 8009d3c <_free_r+0x30>
 8009d2e:	6063      	str	r3, [r4, #4]
 8009d30:	6014      	str	r4, [r2, #0]
 8009d32:	b003      	add	sp, #12
 8009d34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d38:	f000 ba96 	b.w	800a268 <__malloc_unlock>
 8009d3c:	42a3      	cmp	r3, r4
 8009d3e:	d908      	bls.n	8009d52 <_free_r+0x46>
 8009d40:	6825      	ldr	r5, [r4, #0]
 8009d42:	1961      	adds	r1, r4, r5
 8009d44:	428b      	cmp	r3, r1
 8009d46:	bf01      	itttt	eq
 8009d48:	6819      	ldreq	r1, [r3, #0]
 8009d4a:	685b      	ldreq	r3, [r3, #4]
 8009d4c:	1949      	addeq	r1, r1, r5
 8009d4e:	6021      	streq	r1, [r4, #0]
 8009d50:	e7ed      	b.n	8009d2e <_free_r+0x22>
 8009d52:	461a      	mov	r2, r3
 8009d54:	685b      	ldr	r3, [r3, #4]
 8009d56:	b10b      	cbz	r3, 8009d5c <_free_r+0x50>
 8009d58:	42a3      	cmp	r3, r4
 8009d5a:	d9fa      	bls.n	8009d52 <_free_r+0x46>
 8009d5c:	6811      	ldr	r1, [r2, #0]
 8009d5e:	1855      	adds	r5, r2, r1
 8009d60:	42a5      	cmp	r5, r4
 8009d62:	d10b      	bne.n	8009d7c <_free_r+0x70>
 8009d64:	6824      	ldr	r4, [r4, #0]
 8009d66:	4421      	add	r1, r4
 8009d68:	1854      	adds	r4, r2, r1
 8009d6a:	42a3      	cmp	r3, r4
 8009d6c:	6011      	str	r1, [r2, #0]
 8009d6e:	d1e0      	bne.n	8009d32 <_free_r+0x26>
 8009d70:	681c      	ldr	r4, [r3, #0]
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	6053      	str	r3, [r2, #4]
 8009d76:	4421      	add	r1, r4
 8009d78:	6011      	str	r1, [r2, #0]
 8009d7a:	e7da      	b.n	8009d32 <_free_r+0x26>
 8009d7c:	d902      	bls.n	8009d84 <_free_r+0x78>
 8009d7e:	230c      	movs	r3, #12
 8009d80:	6003      	str	r3, [r0, #0]
 8009d82:	e7d6      	b.n	8009d32 <_free_r+0x26>
 8009d84:	6825      	ldr	r5, [r4, #0]
 8009d86:	1961      	adds	r1, r4, r5
 8009d88:	428b      	cmp	r3, r1
 8009d8a:	bf04      	itt	eq
 8009d8c:	6819      	ldreq	r1, [r3, #0]
 8009d8e:	685b      	ldreq	r3, [r3, #4]
 8009d90:	6063      	str	r3, [r4, #4]
 8009d92:	bf04      	itt	eq
 8009d94:	1949      	addeq	r1, r1, r5
 8009d96:	6021      	streq	r1, [r4, #0]
 8009d98:	6054      	str	r4, [r2, #4]
 8009d9a:	e7ca      	b.n	8009d32 <_free_r+0x26>
 8009d9c:	b003      	add	sp, #12
 8009d9e:	bd30      	pop	{r4, r5, pc}
 8009da0:	20000510 	.word	0x20000510

08009da4 <sbrk_aligned>:
 8009da4:	b570      	push	{r4, r5, r6, lr}
 8009da6:	4e0e      	ldr	r6, [pc, #56]	; (8009de0 <sbrk_aligned+0x3c>)
 8009da8:	460c      	mov	r4, r1
 8009daa:	6831      	ldr	r1, [r6, #0]
 8009dac:	4605      	mov	r5, r0
 8009dae:	b911      	cbnz	r1, 8009db6 <sbrk_aligned+0x12>
 8009db0:	f000 f9e8 	bl	800a184 <_sbrk_r>
 8009db4:	6030      	str	r0, [r6, #0]
 8009db6:	4621      	mov	r1, r4
 8009db8:	4628      	mov	r0, r5
 8009dba:	f000 f9e3 	bl	800a184 <_sbrk_r>
 8009dbe:	1c43      	adds	r3, r0, #1
 8009dc0:	d00a      	beq.n	8009dd8 <sbrk_aligned+0x34>
 8009dc2:	1cc4      	adds	r4, r0, #3
 8009dc4:	f024 0403 	bic.w	r4, r4, #3
 8009dc8:	42a0      	cmp	r0, r4
 8009dca:	d007      	beq.n	8009ddc <sbrk_aligned+0x38>
 8009dcc:	1a21      	subs	r1, r4, r0
 8009dce:	4628      	mov	r0, r5
 8009dd0:	f000 f9d8 	bl	800a184 <_sbrk_r>
 8009dd4:	3001      	adds	r0, #1
 8009dd6:	d101      	bne.n	8009ddc <sbrk_aligned+0x38>
 8009dd8:	f04f 34ff 	mov.w	r4, #4294967295
 8009ddc:	4620      	mov	r0, r4
 8009dde:	bd70      	pop	{r4, r5, r6, pc}
 8009de0:	20000514 	.word	0x20000514

08009de4 <_malloc_r>:
 8009de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009de8:	1ccd      	adds	r5, r1, #3
 8009dea:	f025 0503 	bic.w	r5, r5, #3
 8009dee:	3508      	adds	r5, #8
 8009df0:	2d0c      	cmp	r5, #12
 8009df2:	bf38      	it	cc
 8009df4:	250c      	movcc	r5, #12
 8009df6:	2d00      	cmp	r5, #0
 8009df8:	4607      	mov	r7, r0
 8009dfa:	db01      	blt.n	8009e00 <_malloc_r+0x1c>
 8009dfc:	42a9      	cmp	r1, r5
 8009dfe:	d905      	bls.n	8009e0c <_malloc_r+0x28>
 8009e00:	230c      	movs	r3, #12
 8009e02:	603b      	str	r3, [r7, #0]
 8009e04:	2600      	movs	r6, #0
 8009e06:	4630      	mov	r0, r6
 8009e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e0c:	4e2e      	ldr	r6, [pc, #184]	; (8009ec8 <_malloc_r+0xe4>)
 8009e0e:	f000 fa25 	bl	800a25c <__malloc_lock>
 8009e12:	6833      	ldr	r3, [r6, #0]
 8009e14:	461c      	mov	r4, r3
 8009e16:	bb34      	cbnz	r4, 8009e66 <_malloc_r+0x82>
 8009e18:	4629      	mov	r1, r5
 8009e1a:	4638      	mov	r0, r7
 8009e1c:	f7ff ffc2 	bl	8009da4 <sbrk_aligned>
 8009e20:	1c43      	adds	r3, r0, #1
 8009e22:	4604      	mov	r4, r0
 8009e24:	d14d      	bne.n	8009ec2 <_malloc_r+0xde>
 8009e26:	6834      	ldr	r4, [r6, #0]
 8009e28:	4626      	mov	r6, r4
 8009e2a:	2e00      	cmp	r6, #0
 8009e2c:	d140      	bne.n	8009eb0 <_malloc_r+0xcc>
 8009e2e:	6823      	ldr	r3, [r4, #0]
 8009e30:	4631      	mov	r1, r6
 8009e32:	4638      	mov	r0, r7
 8009e34:	eb04 0803 	add.w	r8, r4, r3
 8009e38:	f000 f9a4 	bl	800a184 <_sbrk_r>
 8009e3c:	4580      	cmp	r8, r0
 8009e3e:	d13a      	bne.n	8009eb6 <_malloc_r+0xd2>
 8009e40:	6821      	ldr	r1, [r4, #0]
 8009e42:	3503      	adds	r5, #3
 8009e44:	1a6d      	subs	r5, r5, r1
 8009e46:	f025 0503 	bic.w	r5, r5, #3
 8009e4a:	3508      	adds	r5, #8
 8009e4c:	2d0c      	cmp	r5, #12
 8009e4e:	bf38      	it	cc
 8009e50:	250c      	movcc	r5, #12
 8009e52:	4629      	mov	r1, r5
 8009e54:	4638      	mov	r0, r7
 8009e56:	f7ff ffa5 	bl	8009da4 <sbrk_aligned>
 8009e5a:	3001      	adds	r0, #1
 8009e5c:	d02b      	beq.n	8009eb6 <_malloc_r+0xd2>
 8009e5e:	6823      	ldr	r3, [r4, #0]
 8009e60:	442b      	add	r3, r5
 8009e62:	6023      	str	r3, [r4, #0]
 8009e64:	e00e      	b.n	8009e84 <_malloc_r+0xa0>
 8009e66:	6822      	ldr	r2, [r4, #0]
 8009e68:	1b52      	subs	r2, r2, r5
 8009e6a:	d41e      	bmi.n	8009eaa <_malloc_r+0xc6>
 8009e6c:	2a0b      	cmp	r2, #11
 8009e6e:	d916      	bls.n	8009e9e <_malloc_r+0xba>
 8009e70:	1961      	adds	r1, r4, r5
 8009e72:	42a3      	cmp	r3, r4
 8009e74:	6025      	str	r5, [r4, #0]
 8009e76:	bf18      	it	ne
 8009e78:	6059      	strne	r1, [r3, #4]
 8009e7a:	6863      	ldr	r3, [r4, #4]
 8009e7c:	bf08      	it	eq
 8009e7e:	6031      	streq	r1, [r6, #0]
 8009e80:	5162      	str	r2, [r4, r5]
 8009e82:	604b      	str	r3, [r1, #4]
 8009e84:	4638      	mov	r0, r7
 8009e86:	f104 060b 	add.w	r6, r4, #11
 8009e8a:	f000 f9ed 	bl	800a268 <__malloc_unlock>
 8009e8e:	f026 0607 	bic.w	r6, r6, #7
 8009e92:	1d23      	adds	r3, r4, #4
 8009e94:	1af2      	subs	r2, r6, r3
 8009e96:	d0b6      	beq.n	8009e06 <_malloc_r+0x22>
 8009e98:	1b9b      	subs	r3, r3, r6
 8009e9a:	50a3      	str	r3, [r4, r2]
 8009e9c:	e7b3      	b.n	8009e06 <_malloc_r+0x22>
 8009e9e:	6862      	ldr	r2, [r4, #4]
 8009ea0:	42a3      	cmp	r3, r4
 8009ea2:	bf0c      	ite	eq
 8009ea4:	6032      	streq	r2, [r6, #0]
 8009ea6:	605a      	strne	r2, [r3, #4]
 8009ea8:	e7ec      	b.n	8009e84 <_malloc_r+0xa0>
 8009eaa:	4623      	mov	r3, r4
 8009eac:	6864      	ldr	r4, [r4, #4]
 8009eae:	e7b2      	b.n	8009e16 <_malloc_r+0x32>
 8009eb0:	4634      	mov	r4, r6
 8009eb2:	6876      	ldr	r6, [r6, #4]
 8009eb4:	e7b9      	b.n	8009e2a <_malloc_r+0x46>
 8009eb6:	230c      	movs	r3, #12
 8009eb8:	603b      	str	r3, [r7, #0]
 8009eba:	4638      	mov	r0, r7
 8009ebc:	f000 f9d4 	bl	800a268 <__malloc_unlock>
 8009ec0:	e7a1      	b.n	8009e06 <_malloc_r+0x22>
 8009ec2:	6025      	str	r5, [r4, #0]
 8009ec4:	e7de      	b.n	8009e84 <_malloc_r+0xa0>
 8009ec6:	bf00      	nop
 8009ec8:	20000510 	.word	0x20000510

08009ecc <__ssputs_r>:
 8009ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ed0:	688e      	ldr	r6, [r1, #8]
 8009ed2:	429e      	cmp	r6, r3
 8009ed4:	4682      	mov	sl, r0
 8009ed6:	460c      	mov	r4, r1
 8009ed8:	4690      	mov	r8, r2
 8009eda:	461f      	mov	r7, r3
 8009edc:	d838      	bhi.n	8009f50 <__ssputs_r+0x84>
 8009ede:	898a      	ldrh	r2, [r1, #12]
 8009ee0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009ee4:	d032      	beq.n	8009f4c <__ssputs_r+0x80>
 8009ee6:	6825      	ldr	r5, [r4, #0]
 8009ee8:	6909      	ldr	r1, [r1, #16]
 8009eea:	eba5 0901 	sub.w	r9, r5, r1
 8009eee:	6965      	ldr	r5, [r4, #20]
 8009ef0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ef4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ef8:	3301      	adds	r3, #1
 8009efa:	444b      	add	r3, r9
 8009efc:	106d      	asrs	r5, r5, #1
 8009efe:	429d      	cmp	r5, r3
 8009f00:	bf38      	it	cc
 8009f02:	461d      	movcc	r5, r3
 8009f04:	0553      	lsls	r3, r2, #21
 8009f06:	d531      	bpl.n	8009f6c <__ssputs_r+0xa0>
 8009f08:	4629      	mov	r1, r5
 8009f0a:	f7ff ff6b 	bl	8009de4 <_malloc_r>
 8009f0e:	4606      	mov	r6, r0
 8009f10:	b950      	cbnz	r0, 8009f28 <__ssputs_r+0x5c>
 8009f12:	230c      	movs	r3, #12
 8009f14:	f8ca 3000 	str.w	r3, [sl]
 8009f18:	89a3      	ldrh	r3, [r4, #12]
 8009f1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f1e:	81a3      	strh	r3, [r4, #12]
 8009f20:	f04f 30ff 	mov.w	r0, #4294967295
 8009f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f28:	6921      	ldr	r1, [r4, #16]
 8009f2a:	464a      	mov	r2, r9
 8009f2c:	f7ff fb46 	bl	80095bc <memcpy>
 8009f30:	89a3      	ldrh	r3, [r4, #12]
 8009f32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009f36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f3a:	81a3      	strh	r3, [r4, #12]
 8009f3c:	6126      	str	r6, [r4, #16]
 8009f3e:	6165      	str	r5, [r4, #20]
 8009f40:	444e      	add	r6, r9
 8009f42:	eba5 0509 	sub.w	r5, r5, r9
 8009f46:	6026      	str	r6, [r4, #0]
 8009f48:	60a5      	str	r5, [r4, #8]
 8009f4a:	463e      	mov	r6, r7
 8009f4c:	42be      	cmp	r6, r7
 8009f4e:	d900      	bls.n	8009f52 <__ssputs_r+0x86>
 8009f50:	463e      	mov	r6, r7
 8009f52:	6820      	ldr	r0, [r4, #0]
 8009f54:	4632      	mov	r2, r6
 8009f56:	4641      	mov	r1, r8
 8009f58:	f000 f966 	bl	800a228 <memmove>
 8009f5c:	68a3      	ldr	r3, [r4, #8]
 8009f5e:	1b9b      	subs	r3, r3, r6
 8009f60:	60a3      	str	r3, [r4, #8]
 8009f62:	6823      	ldr	r3, [r4, #0]
 8009f64:	4433      	add	r3, r6
 8009f66:	6023      	str	r3, [r4, #0]
 8009f68:	2000      	movs	r0, #0
 8009f6a:	e7db      	b.n	8009f24 <__ssputs_r+0x58>
 8009f6c:	462a      	mov	r2, r5
 8009f6e:	f000 f981 	bl	800a274 <_realloc_r>
 8009f72:	4606      	mov	r6, r0
 8009f74:	2800      	cmp	r0, #0
 8009f76:	d1e1      	bne.n	8009f3c <__ssputs_r+0x70>
 8009f78:	6921      	ldr	r1, [r4, #16]
 8009f7a:	4650      	mov	r0, sl
 8009f7c:	f7ff fec6 	bl	8009d0c <_free_r>
 8009f80:	e7c7      	b.n	8009f12 <__ssputs_r+0x46>
	...

08009f84 <_svfiprintf_r>:
 8009f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f88:	4698      	mov	r8, r3
 8009f8a:	898b      	ldrh	r3, [r1, #12]
 8009f8c:	061b      	lsls	r3, r3, #24
 8009f8e:	b09d      	sub	sp, #116	; 0x74
 8009f90:	4607      	mov	r7, r0
 8009f92:	460d      	mov	r5, r1
 8009f94:	4614      	mov	r4, r2
 8009f96:	d50e      	bpl.n	8009fb6 <_svfiprintf_r+0x32>
 8009f98:	690b      	ldr	r3, [r1, #16]
 8009f9a:	b963      	cbnz	r3, 8009fb6 <_svfiprintf_r+0x32>
 8009f9c:	2140      	movs	r1, #64	; 0x40
 8009f9e:	f7ff ff21 	bl	8009de4 <_malloc_r>
 8009fa2:	6028      	str	r0, [r5, #0]
 8009fa4:	6128      	str	r0, [r5, #16]
 8009fa6:	b920      	cbnz	r0, 8009fb2 <_svfiprintf_r+0x2e>
 8009fa8:	230c      	movs	r3, #12
 8009faa:	603b      	str	r3, [r7, #0]
 8009fac:	f04f 30ff 	mov.w	r0, #4294967295
 8009fb0:	e0d1      	b.n	800a156 <_svfiprintf_r+0x1d2>
 8009fb2:	2340      	movs	r3, #64	; 0x40
 8009fb4:	616b      	str	r3, [r5, #20]
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	9309      	str	r3, [sp, #36]	; 0x24
 8009fba:	2320      	movs	r3, #32
 8009fbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009fc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fc4:	2330      	movs	r3, #48	; 0x30
 8009fc6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a170 <_svfiprintf_r+0x1ec>
 8009fca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009fce:	f04f 0901 	mov.w	r9, #1
 8009fd2:	4623      	mov	r3, r4
 8009fd4:	469a      	mov	sl, r3
 8009fd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fda:	b10a      	cbz	r2, 8009fe0 <_svfiprintf_r+0x5c>
 8009fdc:	2a25      	cmp	r2, #37	; 0x25
 8009fde:	d1f9      	bne.n	8009fd4 <_svfiprintf_r+0x50>
 8009fe0:	ebba 0b04 	subs.w	fp, sl, r4
 8009fe4:	d00b      	beq.n	8009ffe <_svfiprintf_r+0x7a>
 8009fe6:	465b      	mov	r3, fp
 8009fe8:	4622      	mov	r2, r4
 8009fea:	4629      	mov	r1, r5
 8009fec:	4638      	mov	r0, r7
 8009fee:	f7ff ff6d 	bl	8009ecc <__ssputs_r>
 8009ff2:	3001      	adds	r0, #1
 8009ff4:	f000 80aa 	beq.w	800a14c <_svfiprintf_r+0x1c8>
 8009ff8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ffa:	445a      	add	r2, fp
 8009ffc:	9209      	str	r2, [sp, #36]	; 0x24
 8009ffe:	f89a 3000 	ldrb.w	r3, [sl]
 800a002:	2b00      	cmp	r3, #0
 800a004:	f000 80a2 	beq.w	800a14c <_svfiprintf_r+0x1c8>
 800a008:	2300      	movs	r3, #0
 800a00a:	f04f 32ff 	mov.w	r2, #4294967295
 800a00e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a012:	f10a 0a01 	add.w	sl, sl, #1
 800a016:	9304      	str	r3, [sp, #16]
 800a018:	9307      	str	r3, [sp, #28]
 800a01a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a01e:	931a      	str	r3, [sp, #104]	; 0x68
 800a020:	4654      	mov	r4, sl
 800a022:	2205      	movs	r2, #5
 800a024:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a028:	4851      	ldr	r0, [pc, #324]	; (800a170 <_svfiprintf_r+0x1ec>)
 800a02a:	f7f6 f8e1 	bl	80001f0 <memchr>
 800a02e:	9a04      	ldr	r2, [sp, #16]
 800a030:	b9d8      	cbnz	r0, 800a06a <_svfiprintf_r+0xe6>
 800a032:	06d0      	lsls	r0, r2, #27
 800a034:	bf44      	itt	mi
 800a036:	2320      	movmi	r3, #32
 800a038:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a03c:	0711      	lsls	r1, r2, #28
 800a03e:	bf44      	itt	mi
 800a040:	232b      	movmi	r3, #43	; 0x2b
 800a042:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a046:	f89a 3000 	ldrb.w	r3, [sl]
 800a04a:	2b2a      	cmp	r3, #42	; 0x2a
 800a04c:	d015      	beq.n	800a07a <_svfiprintf_r+0xf6>
 800a04e:	9a07      	ldr	r2, [sp, #28]
 800a050:	4654      	mov	r4, sl
 800a052:	2000      	movs	r0, #0
 800a054:	f04f 0c0a 	mov.w	ip, #10
 800a058:	4621      	mov	r1, r4
 800a05a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a05e:	3b30      	subs	r3, #48	; 0x30
 800a060:	2b09      	cmp	r3, #9
 800a062:	d94e      	bls.n	800a102 <_svfiprintf_r+0x17e>
 800a064:	b1b0      	cbz	r0, 800a094 <_svfiprintf_r+0x110>
 800a066:	9207      	str	r2, [sp, #28]
 800a068:	e014      	b.n	800a094 <_svfiprintf_r+0x110>
 800a06a:	eba0 0308 	sub.w	r3, r0, r8
 800a06e:	fa09 f303 	lsl.w	r3, r9, r3
 800a072:	4313      	orrs	r3, r2
 800a074:	9304      	str	r3, [sp, #16]
 800a076:	46a2      	mov	sl, r4
 800a078:	e7d2      	b.n	800a020 <_svfiprintf_r+0x9c>
 800a07a:	9b03      	ldr	r3, [sp, #12]
 800a07c:	1d19      	adds	r1, r3, #4
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	9103      	str	r1, [sp, #12]
 800a082:	2b00      	cmp	r3, #0
 800a084:	bfbb      	ittet	lt
 800a086:	425b      	neglt	r3, r3
 800a088:	f042 0202 	orrlt.w	r2, r2, #2
 800a08c:	9307      	strge	r3, [sp, #28]
 800a08e:	9307      	strlt	r3, [sp, #28]
 800a090:	bfb8      	it	lt
 800a092:	9204      	strlt	r2, [sp, #16]
 800a094:	7823      	ldrb	r3, [r4, #0]
 800a096:	2b2e      	cmp	r3, #46	; 0x2e
 800a098:	d10c      	bne.n	800a0b4 <_svfiprintf_r+0x130>
 800a09a:	7863      	ldrb	r3, [r4, #1]
 800a09c:	2b2a      	cmp	r3, #42	; 0x2a
 800a09e:	d135      	bne.n	800a10c <_svfiprintf_r+0x188>
 800a0a0:	9b03      	ldr	r3, [sp, #12]
 800a0a2:	1d1a      	adds	r2, r3, #4
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	9203      	str	r2, [sp, #12]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	bfb8      	it	lt
 800a0ac:	f04f 33ff 	movlt.w	r3, #4294967295
 800a0b0:	3402      	adds	r4, #2
 800a0b2:	9305      	str	r3, [sp, #20]
 800a0b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a180 <_svfiprintf_r+0x1fc>
 800a0b8:	7821      	ldrb	r1, [r4, #0]
 800a0ba:	2203      	movs	r2, #3
 800a0bc:	4650      	mov	r0, sl
 800a0be:	f7f6 f897 	bl	80001f0 <memchr>
 800a0c2:	b140      	cbz	r0, 800a0d6 <_svfiprintf_r+0x152>
 800a0c4:	2340      	movs	r3, #64	; 0x40
 800a0c6:	eba0 000a 	sub.w	r0, r0, sl
 800a0ca:	fa03 f000 	lsl.w	r0, r3, r0
 800a0ce:	9b04      	ldr	r3, [sp, #16]
 800a0d0:	4303      	orrs	r3, r0
 800a0d2:	3401      	adds	r4, #1
 800a0d4:	9304      	str	r3, [sp, #16]
 800a0d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0da:	4826      	ldr	r0, [pc, #152]	; (800a174 <_svfiprintf_r+0x1f0>)
 800a0dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a0e0:	2206      	movs	r2, #6
 800a0e2:	f7f6 f885 	bl	80001f0 <memchr>
 800a0e6:	2800      	cmp	r0, #0
 800a0e8:	d038      	beq.n	800a15c <_svfiprintf_r+0x1d8>
 800a0ea:	4b23      	ldr	r3, [pc, #140]	; (800a178 <_svfiprintf_r+0x1f4>)
 800a0ec:	bb1b      	cbnz	r3, 800a136 <_svfiprintf_r+0x1b2>
 800a0ee:	9b03      	ldr	r3, [sp, #12]
 800a0f0:	3307      	adds	r3, #7
 800a0f2:	f023 0307 	bic.w	r3, r3, #7
 800a0f6:	3308      	adds	r3, #8
 800a0f8:	9303      	str	r3, [sp, #12]
 800a0fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0fc:	4433      	add	r3, r6
 800a0fe:	9309      	str	r3, [sp, #36]	; 0x24
 800a100:	e767      	b.n	8009fd2 <_svfiprintf_r+0x4e>
 800a102:	fb0c 3202 	mla	r2, ip, r2, r3
 800a106:	460c      	mov	r4, r1
 800a108:	2001      	movs	r0, #1
 800a10a:	e7a5      	b.n	800a058 <_svfiprintf_r+0xd4>
 800a10c:	2300      	movs	r3, #0
 800a10e:	3401      	adds	r4, #1
 800a110:	9305      	str	r3, [sp, #20]
 800a112:	4619      	mov	r1, r3
 800a114:	f04f 0c0a 	mov.w	ip, #10
 800a118:	4620      	mov	r0, r4
 800a11a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a11e:	3a30      	subs	r2, #48	; 0x30
 800a120:	2a09      	cmp	r2, #9
 800a122:	d903      	bls.n	800a12c <_svfiprintf_r+0x1a8>
 800a124:	2b00      	cmp	r3, #0
 800a126:	d0c5      	beq.n	800a0b4 <_svfiprintf_r+0x130>
 800a128:	9105      	str	r1, [sp, #20]
 800a12a:	e7c3      	b.n	800a0b4 <_svfiprintf_r+0x130>
 800a12c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a130:	4604      	mov	r4, r0
 800a132:	2301      	movs	r3, #1
 800a134:	e7f0      	b.n	800a118 <_svfiprintf_r+0x194>
 800a136:	ab03      	add	r3, sp, #12
 800a138:	9300      	str	r3, [sp, #0]
 800a13a:	462a      	mov	r2, r5
 800a13c:	4b0f      	ldr	r3, [pc, #60]	; (800a17c <_svfiprintf_r+0x1f8>)
 800a13e:	a904      	add	r1, sp, #16
 800a140:	4638      	mov	r0, r7
 800a142:	f7fd ffb5 	bl	80080b0 <_printf_float>
 800a146:	1c42      	adds	r2, r0, #1
 800a148:	4606      	mov	r6, r0
 800a14a:	d1d6      	bne.n	800a0fa <_svfiprintf_r+0x176>
 800a14c:	89ab      	ldrh	r3, [r5, #12]
 800a14e:	065b      	lsls	r3, r3, #25
 800a150:	f53f af2c 	bmi.w	8009fac <_svfiprintf_r+0x28>
 800a154:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a156:	b01d      	add	sp, #116	; 0x74
 800a158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a15c:	ab03      	add	r3, sp, #12
 800a15e:	9300      	str	r3, [sp, #0]
 800a160:	462a      	mov	r2, r5
 800a162:	4b06      	ldr	r3, [pc, #24]	; (800a17c <_svfiprintf_r+0x1f8>)
 800a164:	a904      	add	r1, sp, #16
 800a166:	4638      	mov	r0, r7
 800a168:	f7fe fa46 	bl	80085f8 <_printf_i>
 800a16c:	e7eb      	b.n	800a146 <_svfiprintf_r+0x1c2>
 800a16e:	bf00      	nop
 800a170:	0800bec4 	.word	0x0800bec4
 800a174:	0800bece 	.word	0x0800bece
 800a178:	080080b1 	.word	0x080080b1
 800a17c:	08009ecd 	.word	0x08009ecd
 800a180:	0800beca 	.word	0x0800beca

0800a184 <_sbrk_r>:
 800a184:	b538      	push	{r3, r4, r5, lr}
 800a186:	4d06      	ldr	r5, [pc, #24]	; (800a1a0 <_sbrk_r+0x1c>)
 800a188:	2300      	movs	r3, #0
 800a18a:	4604      	mov	r4, r0
 800a18c:	4608      	mov	r0, r1
 800a18e:	602b      	str	r3, [r5, #0]
 800a190:	f7f9 feb2 	bl	8003ef8 <_sbrk>
 800a194:	1c43      	adds	r3, r0, #1
 800a196:	d102      	bne.n	800a19e <_sbrk_r+0x1a>
 800a198:	682b      	ldr	r3, [r5, #0]
 800a19a:	b103      	cbz	r3, 800a19e <_sbrk_r+0x1a>
 800a19c:	6023      	str	r3, [r4, #0]
 800a19e:	bd38      	pop	{r3, r4, r5, pc}
 800a1a0:	20000518 	.word	0x20000518

0800a1a4 <__assert_func>:
 800a1a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a1a6:	4614      	mov	r4, r2
 800a1a8:	461a      	mov	r2, r3
 800a1aa:	4b09      	ldr	r3, [pc, #36]	; (800a1d0 <__assert_func+0x2c>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	4605      	mov	r5, r0
 800a1b0:	68d8      	ldr	r0, [r3, #12]
 800a1b2:	b14c      	cbz	r4, 800a1c8 <__assert_func+0x24>
 800a1b4:	4b07      	ldr	r3, [pc, #28]	; (800a1d4 <__assert_func+0x30>)
 800a1b6:	9100      	str	r1, [sp, #0]
 800a1b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a1bc:	4906      	ldr	r1, [pc, #24]	; (800a1d8 <__assert_func+0x34>)
 800a1be:	462b      	mov	r3, r5
 800a1c0:	f000 f80e 	bl	800a1e0 <fiprintf>
 800a1c4:	f000 faac 	bl	800a720 <abort>
 800a1c8:	4b04      	ldr	r3, [pc, #16]	; (800a1dc <__assert_func+0x38>)
 800a1ca:	461c      	mov	r4, r3
 800a1cc:	e7f3      	b.n	800a1b6 <__assert_func+0x12>
 800a1ce:	bf00      	nop
 800a1d0:	20000040 	.word	0x20000040
 800a1d4:	0800bed5 	.word	0x0800bed5
 800a1d8:	0800bee2 	.word	0x0800bee2
 800a1dc:	0800bf10 	.word	0x0800bf10

0800a1e0 <fiprintf>:
 800a1e0:	b40e      	push	{r1, r2, r3}
 800a1e2:	b503      	push	{r0, r1, lr}
 800a1e4:	4601      	mov	r1, r0
 800a1e6:	ab03      	add	r3, sp, #12
 800a1e8:	4805      	ldr	r0, [pc, #20]	; (800a200 <fiprintf+0x20>)
 800a1ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1ee:	6800      	ldr	r0, [r0, #0]
 800a1f0:	9301      	str	r3, [sp, #4]
 800a1f2:	f000 f897 	bl	800a324 <_vfiprintf_r>
 800a1f6:	b002      	add	sp, #8
 800a1f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1fc:	b003      	add	sp, #12
 800a1fe:	4770      	bx	lr
 800a200:	20000040 	.word	0x20000040

0800a204 <__ascii_mbtowc>:
 800a204:	b082      	sub	sp, #8
 800a206:	b901      	cbnz	r1, 800a20a <__ascii_mbtowc+0x6>
 800a208:	a901      	add	r1, sp, #4
 800a20a:	b142      	cbz	r2, 800a21e <__ascii_mbtowc+0x1a>
 800a20c:	b14b      	cbz	r3, 800a222 <__ascii_mbtowc+0x1e>
 800a20e:	7813      	ldrb	r3, [r2, #0]
 800a210:	600b      	str	r3, [r1, #0]
 800a212:	7812      	ldrb	r2, [r2, #0]
 800a214:	1e10      	subs	r0, r2, #0
 800a216:	bf18      	it	ne
 800a218:	2001      	movne	r0, #1
 800a21a:	b002      	add	sp, #8
 800a21c:	4770      	bx	lr
 800a21e:	4610      	mov	r0, r2
 800a220:	e7fb      	b.n	800a21a <__ascii_mbtowc+0x16>
 800a222:	f06f 0001 	mvn.w	r0, #1
 800a226:	e7f8      	b.n	800a21a <__ascii_mbtowc+0x16>

0800a228 <memmove>:
 800a228:	4288      	cmp	r0, r1
 800a22a:	b510      	push	{r4, lr}
 800a22c:	eb01 0402 	add.w	r4, r1, r2
 800a230:	d902      	bls.n	800a238 <memmove+0x10>
 800a232:	4284      	cmp	r4, r0
 800a234:	4623      	mov	r3, r4
 800a236:	d807      	bhi.n	800a248 <memmove+0x20>
 800a238:	1e43      	subs	r3, r0, #1
 800a23a:	42a1      	cmp	r1, r4
 800a23c:	d008      	beq.n	800a250 <memmove+0x28>
 800a23e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a242:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a246:	e7f8      	b.n	800a23a <memmove+0x12>
 800a248:	4402      	add	r2, r0
 800a24a:	4601      	mov	r1, r0
 800a24c:	428a      	cmp	r2, r1
 800a24e:	d100      	bne.n	800a252 <memmove+0x2a>
 800a250:	bd10      	pop	{r4, pc}
 800a252:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a256:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a25a:	e7f7      	b.n	800a24c <memmove+0x24>

0800a25c <__malloc_lock>:
 800a25c:	4801      	ldr	r0, [pc, #4]	; (800a264 <__malloc_lock+0x8>)
 800a25e:	f000 bc1f 	b.w	800aaa0 <__retarget_lock_acquire_recursive>
 800a262:	bf00      	nop
 800a264:	2000051c 	.word	0x2000051c

0800a268 <__malloc_unlock>:
 800a268:	4801      	ldr	r0, [pc, #4]	; (800a270 <__malloc_unlock+0x8>)
 800a26a:	f000 bc1a 	b.w	800aaa2 <__retarget_lock_release_recursive>
 800a26e:	bf00      	nop
 800a270:	2000051c 	.word	0x2000051c

0800a274 <_realloc_r>:
 800a274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a278:	4680      	mov	r8, r0
 800a27a:	4614      	mov	r4, r2
 800a27c:	460e      	mov	r6, r1
 800a27e:	b921      	cbnz	r1, 800a28a <_realloc_r+0x16>
 800a280:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a284:	4611      	mov	r1, r2
 800a286:	f7ff bdad 	b.w	8009de4 <_malloc_r>
 800a28a:	b92a      	cbnz	r2, 800a298 <_realloc_r+0x24>
 800a28c:	f7ff fd3e 	bl	8009d0c <_free_r>
 800a290:	4625      	mov	r5, r4
 800a292:	4628      	mov	r0, r5
 800a294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a298:	f000 fc6a 	bl	800ab70 <_malloc_usable_size_r>
 800a29c:	4284      	cmp	r4, r0
 800a29e:	4607      	mov	r7, r0
 800a2a0:	d802      	bhi.n	800a2a8 <_realloc_r+0x34>
 800a2a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a2a6:	d812      	bhi.n	800a2ce <_realloc_r+0x5a>
 800a2a8:	4621      	mov	r1, r4
 800a2aa:	4640      	mov	r0, r8
 800a2ac:	f7ff fd9a 	bl	8009de4 <_malloc_r>
 800a2b0:	4605      	mov	r5, r0
 800a2b2:	2800      	cmp	r0, #0
 800a2b4:	d0ed      	beq.n	800a292 <_realloc_r+0x1e>
 800a2b6:	42bc      	cmp	r4, r7
 800a2b8:	4622      	mov	r2, r4
 800a2ba:	4631      	mov	r1, r6
 800a2bc:	bf28      	it	cs
 800a2be:	463a      	movcs	r2, r7
 800a2c0:	f7ff f97c 	bl	80095bc <memcpy>
 800a2c4:	4631      	mov	r1, r6
 800a2c6:	4640      	mov	r0, r8
 800a2c8:	f7ff fd20 	bl	8009d0c <_free_r>
 800a2cc:	e7e1      	b.n	800a292 <_realloc_r+0x1e>
 800a2ce:	4635      	mov	r5, r6
 800a2d0:	e7df      	b.n	800a292 <_realloc_r+0x1e>

0800a2d2 <__sfputc_r>:
 800a2d2:	6893      	ldr	r3, [r2, #8]
 800a2d4:	3b01      	subs	r3, #1
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	b410      	push	{r4}
 800a2da:	6093      	str	r3, [r2, #8]
 800a2dc:	da08      	bge.n	800a2f0 <__sfputc_r+0x1e>
 800a2de:	6994      	ldr	r4, [r2, #24]
 800a2e0:	42a3      	cmp	r3, r4
 800a2e2:	db01      	blt.n	800a2e8 <__sfputc_r+0x16>
 800a2e4:	290a      	cmp	r1, #10
 800a2e6:	d103      	bne.n	800a2f0 <__sfputc_r+0x1e>
 800a2e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2ec:	f000 b94a 	b.w	800a584 <__swbuf_r>
 800a2f0:	6813      	ldr	r3, [r2, #0]
 800a2f2:	1c58      	adds	r0, r3, #1
 800a2f4:	6010      	str	r0, [r2, #0]
 800a2f6:	7019      	strb	r1, [r3, #0]
 800a2f8:	4608      	mov	r0, r1
 800a2fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2fe:	4770      	bx	lr

0800a300 <__sfputs_r>:
 800a300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a302:	4606      	mov	r6, r0
 800a304:	460f      	mov	r7, r1
 800a306:	4614      	mov	r4, r2
 800a308:	18d5      	adds	r5, r2, r3
 800a30a:	42ac      	cmp	r4, r5
 800a30c:	d101      	bne.n	800a312 <__sfputs_r+0x12>
 800a30e:	2000      	movs	r0, #0
 800a310:	e007      	b.n	800a322 <__sfputs_r+0x22>
 800a312:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a316:	463a      	mov	r2, r7
 800a318:	4630      	mov	r0, r6
 800a31a:	f7ff ffda 	bl	800a2d2 <__sfputc_r>
 800a31e:	1c43      	adds	r3, r0, #1
 800a320:	d1f3      	bne.n	800a30a <__sfputs_r+0xa>
 800a322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a324 <_vfiprintf_r>:
 800a324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a328:	460d      	mov	r5, r1
 800a32a:	b09d      	sub	sp, #116	; 0x74
 800a32c:	4614      	mov	r4, r2
 800a32e:	4698      	mov	r8, r3
 800a330:	4606      	mov	r6, r0
 800a332:	b118      	cbz	r0, 800a33c <_vfiprintf_r+0x18>
 800a334:	6983      	ldr	r3, [r0, #24]
 800a336:	b90b      	cbnz	r3, 800a33c <_vfiprintf_r+0x18>
 800a338:	f000 fb14 	bl	800a964 <__sinit>
 800a33c:	4b89      	ldr	r3, [pc, #548]	; (800a564 <_vfiprintf_r+0x240>)
 800a33e:	429d      	cmp	r5, r3
 800a340:	d11b      	bne.n	800a37a <_vfiprintf_r+0x56>
 800a342:	6875      	ldr	r5, [r6, #4]
 800a344:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a346:	07d9      	lsls	r1, r3, #31
 800a348:	d405      	bmi.n	800a356 <_vfiprintf_r+0x32>
 800a34a:	89ab      	ldrh	r3, [r5, #12]
 800a34c:	059a      	lsls	r2, r3, #22
 800a34e:	d402      	bmi.n	800a356 <_vfiprintf_r+0x32>
 800a350:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a352:	f000 fba5 	bl	800aaa0 <__retarget_lock_acquire_recursive>
 800a356:	89ab      	ldrh	r3, [r5, #12]
 800a358:	071b      	lsls	r3, r3, #28
 800a35a:	d501      	bpl.n	800a360 <_vfiprintf_r+0x3c>
 800a35c:	692b      	ldr	r3, [r5, #16]
 800a35e:	b9eb      	cbnz	r3, 800a39c <_vfiprintf_r+0x78>
 800a360:	4629      	mov	r1, r5
 800a362:	4630      	mov	r0, r6
 800a364:	f000 f96e 	bl	800a644 <__swsetup_r>
 800a368:	b1c0      	cbz	r0, 800a39c <_vfiprintf_r+0x78>
 800a36a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a36c:	07dc      	lsls	r4, r3, #31
 800a36e:	d50e      	bpl.n	800a38e <_vfiprintf_r+0x6a>
 800a370:	f04f 30ff 	mov.w	r0, #4294967295
 800a374:	b01d      	add	sp, #116	; 0x74
 800a376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a37a:	4b7b      	ldr	r3, [pc, #492]	; (800a568 <_vfiprintf_r+0x244>)
 800a37c:	429d      	cmp	r5, r3
 800a37e:	d101      	bne.n	800a384 <_vfiprintf_r+0x60>
 800a380:	68b5      	ldr	r5, [r6, #8]
 800a382:	e7df      	b.n	800a344 <_vfiprintf_r+0x20>
 800a384:	4b79      	ldr	r3, [pc, #484]	; (800a56c <_vfiprintf_r+0x248>)
 800a386:	429d      	cmp	r5, r3
 800a388:	bf08      	it	eq
 800a38a:	68f5      	ldreq	r5, [r6, #12]
 800a38c:	e7da      	b.n	800a344 <_vfiprintf_r+0x20>
 800a38e:	89ab      	ldrh	r3, [r5, #12]
 800a390:	0598      	lsls	r0, r3, #22
 800a392:	d4ed      	bmi.n	800a370 <_vfiprintf_r+0x4c>
 800a394:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a396:	f000 fb84 	bl	800aaa2 <__retarget_lock_release_recursive>
 800a39a:	e7e9      	b.n	800a370 <_vfiprintf_r+0x4c>
 800a39c:	2300      	movs	r3, #0
 800a39e:	9309      	str	r3, [sp, #36]	; 0x24
 800a3a0:	2320      	movs	r3, #32
 800a3a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3aa:	2330      	movs	r3, #48	; 0x30
 800a3ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a570 <_vfiprintf_r+0x24c>
 800a3b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3b4:	f04f 0901 	mov.w	r9, #1
 800a3b8:	4623      	mov	r3, r4
 800a3ba:	469a      	mov	sl, r3
 800a3bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3c0:	b10a      	cbz	r2, 800a3c6 <_vfiprintf_r+0xa2>
 800a3c2:	2a25      	cmp	r2, #37	; 0x25
 800a3c4:	d1f9      	bne.n	800a3ba <_vfiprintf_r+0x96>
 800a3c6:	ebba 0b04 	subs.w	fp, sl, r4
 800a3ca:	d00b      	beq.n	800a3e4 <_vfiprintf_r+0xc0>
 800a3cc:	465b      	mov	r3, fp
 800a3ce:	4622      	mov	r2, r4
 800a3d0:	4629      	mov	r1, r5
 800a3d2:	4630      	mov	r0, r6
 800a3d4:	f7ff ff94 	bl	800a300 <__sfputs_r>
 800a3d8:	3001      	adds	r0, #1
 800a3da:	f000 80aa 	beq.w	800a532 <_vfiprintf_r+0x20e>
 800a3de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3e0:	445a      	add	r2, fp
 800a3e2:	9209      	str	r2, [sp, #36]	; 0x24
 800a3e4:	f89a 3000 	ldrb.w	r3, [sl]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	f000 80a2 	beq.w	800a532 <_vfiprintf_r+0x20e>
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	f04f 32ff 	mov.w	r2, #4294967295
 800a3f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3f8:	f10a 0a01 	add.w	sl, sl, #1
 800a3fc:	9304      	str	r3, [sp, #16]
 800a3fe:	9307      	str	r3, [sp, #28]
 800a400:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a404:	931a      	str	r3, [sp, #104]	; 0x68
 800a406:	4654      	mov	r4, sl
 800a408:	2205      	movs	r2, #5
 800a40a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a40e:	4858      	ldr	r0, [pc, #352]	; (800a570 <_vfiprintf_r+0x24c>)
 800a410:	f7f5 feee 	bl	80001f0 <memchr>
 800a414:	9a04      	ldr	r2, [sp, #16]
 800a416:	b9d8      	cbnz	r0, 800a450 <_vfiprintf_r+0x12c>
 800a418:	06d1      	lsls	r1, r2, #27
 800a41a:	bf44      	itt	mi
 800a41c:	2320      	movmi	r3, #32
 800a41e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a422:	0713      	lsls	r3, r2, #28
 800a424:	bf44      	itt	mi
 800a426:	232b      	movmi	r3, #43	; 0x2b
 800a428:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a42c:	f89a 3000 	ldrb.w	r3, [sl]
 800a430:	2b2a      	cmp	r3, #42	; 0x2a
 800a432:	d015      	beq.n	800a460 <_vfiprintf_r+0x13c>
 800a434:	9a07      	ldr	r2, [sp, #28]
 800a436:	4654      	mov	r4, sl
 800a438:	2000      	movs	r0, #0
 800a43a:	f04f 0c0a 	mov.w	ip, #10
 800a43e:	4621      	mov	r1, r4
 800a440:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a444:	3b30      	subs	r3, #48	; 0x30
 800a446:	2b09      	cmp	r3, #9
 800a448:	d94e      	bls.n	800a4e8 <_vfiprintf_r+0x1c4>
 800a44a:	b1b0      	cbz	r0, 800a47a <_vfiprintf_r+0x156>
 800a44c:	9207      	str	r2, [sp, #28]
 800a44e:	e014      	b.n	800a47a <_vfiprintf_r+0x156>
 800a450:	eba0 0308 	sub.w	r3, r0, r8
 800a454:	fa09 f303 	lsl.w	r3, r9, r3
 800a458:	4313      	orrs	r3, r2
 800a45a:	9304      	str	r3, [sp, #16]
 800a45c:	46a2      	mov	sl, r4
 800a45e:	e7d2      	b.n	800a406 <_vfiprintf_r+0xe2>
 800a460:	9b03      	ldr	r3, [sp, #12]
 800a462:	1d19      	adds	r1, r3, #4
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	9103      	str	r1, [sp, #12]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	bfbb      	ittet	lt
 800a46c:	425b      	neglt	r3, r3
 800a46e:	f042 0202 	orrlt.w	r2, r2, #2
 800a472:	9307      	strge	r3, [sp, #28]
 800a474:	9307      	strlt	r3, [sp, #28]
 800a476:	bfb8      	it	lt
 800a478:	9204      	strlt	r2, [sp, #16]
 800a47a:	7823      	ldrb	r3, [r4, #0]
 800a47c:	2b2e      	cmp	r3, #46	; 0x2e
 800a47e:	d10c      	bne.n	800a49a <_vfiprintf_r+0x176>
 800a480:	7863      	ldrb	r3, [r4, #1]
 800a482:	2b2a      	cmp	r3, #42	; 0x2a
 800a484:	d135      	bne.n	800a4f2 <_vfiprintf_r+0x1ce>
 800a486:	9b03      	ldr	r3, [sp, #12]
 800a488:	1d1a      	adds	r2, r3, #4
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	9203      	str	r2, [sp, #12]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	bfb8      	it	lt
 800a492:	f04f 33ff 	movlt.w	r3, #4294967295
 800a496:	3402      	adds	r4, #2
 800a498:	9305      	str	r3, [sp, #20]
 800a49a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a580 <_vfiprintf_r+0x25c>
 800a49e:	7821      	ldrb	r1, [r4, #0]
 800a4a0:	2203      	movs	r2, #3
 800a4a2:	4650      	mov	r0, sl
 800a4a4:	f7f5 fea4 	bl	80001f0 <memchr>
 800a4a8:	b140      	cbz	r0, 800a4bc <_vfiprintf_r+0x198>
 800a4aa:	2340      	movs	r3, #64	; 0x40
 800a4ac:	eba0 000a 	sub.w	r0, r0, sl
 800a4b0:	fa03 f000 	lsl.w	r0, r3, r0
 800a4b4:	9b04      	ldr	r3, [sp, #16]
 800a4b6:	4303      	orrs	r3, r0
 800a4b8:	3401      	adds	r4, #1
 800a4ba:	9304      	str	r3, [sp, #16]
 800a4bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4c0:	482c      	ldr	r0, [pc, #176]	; (800a574 <_vfiprintf_r+0x250>)
 800a4c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4c6:	2206      	movs	r2, #6
 800a4c8:	f7f5 fe92 	bl	80001f0 <memchr>
 800a4cc:	2800      	cmp	r0, #0
 800a4ce:	d03f      	beq.n	800a550 <_vfiprintf_r+0x22c>
 800a4d0:	4b29      	ldr	r3, [pc, #164]	; (800a578 <_vfiprintf_r+0x254>)
 800a4d2:	bb1b      	cbnz	r3, 800a51c <_vfiprintf_r+0x1f8>
 800a4d4:	9b03      	ldr	r3, [sp, #12]
 800a4d6:	3307      	adds	r3, #7
 800a4d8:	f023 0307 	bic.w	r3, r3, #7
 800a4dc:	3308      	adds	r3, #8
 800a4de:	9303      	str	r3, [sp, #12]
 800a4e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4e2:	443b      	add	r3, r7
 800a4e4:	9309      	str	r3, [sp, #36]	; 0x24
 800a4e6:	e767      	b.n	800a3b8 <_vfiprintf_r+0x94>
 800a4e8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4ec:	460c      	mov	r4, r1
 800a4ee:	2001      	movs	r0, #1
 800a4f0:	e7a5      	b.n	800a43e <_vfiprintf_r+0x11a>
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	3401      	adds	r4, #1
 800a4f6:	9305      	str	r3, [sp, #20]
 800a4f8:	4619      	mov	r1, r3
 800a4fa:	f04f 0c0a 	mov.w	ip, #10
 800a4fe:	4620      	mov	r0, r4
 800a500:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a504:	3a30      	subs	r2, #48	; 0x30
 800a506:	2a09      	cmp	r2, #9
 800a508:	d903      	bls.n	800a512 <_vfiprintf_r+0x1ee>
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d0c5      	beq.n	800a49a <_vfiprintf_r+0x176>
 800a50e:	9105      	str	r1, [sp, #20]
 800a510:	e7c3      	b.n	800a49a <_vfiprintf_r+0x176>
 800a512:	fb0c 2101 	mla	r1, ip, r1, r2
 800a516:	4604      	mov	r4, r0
 800a518:	2301      	movs	r3, #1
 800a51a:	e7f0      	b.n	800a4fe <_vfiprintf_r+0x1da>
 800a51c:	ab03      	add	r3, sp, #12
 800a51e:	9300      	str	r3, [sp, #0]
 800a520:	462a      	mov	r2, r5
 800a522:	4b16      	ldr	r3, [pc, #88]	; (800a57c <_vfiprintf_r+0x258>)
 800a524:	a904      	add	r1, sp, #16
 800a526:	4630      	mov	r0, r6
 800a528:	f7fd fdc2 	bl	80080b0 <_printf_float>
 800a52c:	4607      	mov	r7, r0
 800a52e:	1c78      	adds	r0, r7, #1
 800a530:	d1d6      	bne.n	800a4e0 <_vfiprintf_r+0x1bc>
 800a532:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a534:	07d9      	lsls	r1, r3, #31
 800a536:	d405      	bmi.n	800a544 <_vfiprintf_r+0x220>
 800a538:	89ab      	ldrh	r3, [r5, #12]
 800a53a:	059a      	lsls	r2, r3, #22
 800a53c:	d402      	bmi.n	800a544 <_vfiprintf_r+0x220>
 800a53e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a540:	f000 faaf 	bl	800aaa2 <__retarget_lock_release_recursive>
 800a544:	89ab      	ldrh	r3, [r5, #12]
 800a546:	065b      	lsls	r3, r3, #25
 800a548:	f53f af12 	bmi.w	800a370 <_vfiprintf_r+0x4c>
 800a54c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a54e:	e711      	b.n	800a374 <_vfiprintf_r+0x50>
 800a550:	ab03      	add	r3, sp, #12
 800a552:	9300      	str	r3, [sp, #0]
 800a554:	462a      	mov	r2, r5
 800a556:	4b09      	ldr	r3, [pc, #36]	; (800a57c <_vfiprintf_r+0x258>)
 800a558:	a904      	add	r1, sp, #16
 800a55a:	4630      	mov	r0, r6
 800a55c:	f7fe f84c 	bl	80085f8 <_printf_i>
 800a560:	e7e4      	b.n	800a52c <_vfiprintf_r+0x208>
 800a562:	bf00      	nop
 800a564:	0800c03c 	.word	0x0800c03c
 800a568:	0800c05c 	.word	0x0800c05c
 800a56c:	0800c01c 	.word	0x0800c01c
 800a570:	0800bec4 	.word	0x0800bec4
 800a574:	0800bece 	.word	0x0800bece
 800a578:	080080b1 	.word	0x080080b1
 800a57c:	0800a301 	.word	0x0800a301
 800a580:	0800beca 	.word	0x0800beca

0800a584 <__swbuf_r>:
 800a584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a586:	460e      	mov	r6, r1
 800a588:	4614      	mov	r4, r2
 800a58a:	4605      	mov	r5, r0
 800a58c:	b118      	cbz	r0, 800a596 <__swbuf_r+0x12>
 800a58e:	6983      	ldr	r3, [r0, #24]
 800a590:	b90b      	cbnz	r3, 800a596 <__swbuf_r+0x12>
 800a592:	f000 f9e7 	bl	800a964 <__sinit>
 800a596:	4b21      	ldr	r3, [pc, #132]	; (800a61c <__swbuf_r+0x98>)
 800a598:	429c      	cmp	r4, r3
 800a59a:	d12b      	bne.n	800a5f4 <__swbuf_r+0x70>
 800a59c:	686c      	ldr	r4, [r5, #4]
 800a59e:	69a3      	ldr	r3, [r4, #24]
 800a5a0:	60a3      	str	r3, [r4, #8]
 800a5a2:	89a3      	ldrh	r3, [r4, #12]
 800a5a4:	071a      	lsls	r2, r3, #28
 800a5a6:	d52f      	bpl.n	800a608 <__swbuf_r+0x84>
 800a5a8:	6923      	ldr	r3, [r4, #16]
 800a5aa:	b36b      	cbz	r3, 800a608 <__swbuf_r+0x84>
 800a5ac:	6923      	ldr	r3, [r4, #16]
 800a5ae:	6820      	ldr	r0, [r4, #0]
 800a5b0:	1ac0      	subs	r0, r0, r3
 800a5b2:	6963      	ldr	r3, [r4, #20]
 800a5b4:	b2f6      	uxtb	r6, r6
 800a5b6:	4283      	cmp	r3, r0
 800a5b8:	4637      	mov	r7, r6
 800a5ba:	dc04      	bgt.n	800a5c6 <__swbuf_r+0x42>
 800a5bc:	4621      	mov	r1, r4
 800a5be:	4628      	mov	r0, r5
 800a5c0:	f000 f93c 	bl	800a83c <_fflush_r>
 800a5c4:	bb30      	cbnz	r0, 800a614 <__swbuf_r+0x90>
 800a5c6:	68a3      	ldr	r3, [r4, #8]
 800a5c8:	3b01      	subs	r3, #1
 800a5ca:	60a3      	str	r3, [r4, #8]
 800a5cc:	6823      	ldr	r3, [r4, #0]
 800a5ce:	1c5a      	adds	r2, r3, #1
 800a5d0:	6022      	str	r2, [r4, #0]
 800a5d2:	701e      	strb	r6, [r3, #0]
 800a5d4:	6963      	ldr	r3, [r4, #20]
 800a5d6:	3001      	adds	r0, #1
 800a5d8:	4283      	cmp	r3, r0
 800a5da:	d004      	beq.n	800a5e6 <__swbuf_r+0x62>
 800a5dc:	89a3      	ldrh	r3, [r4, #12]
 800a5de:	07db      	lsls	r3, r3, #31
 800a5e0:	d506      	bpl.n	800a5f0 <__swbuf_r+0x6c>
 800a5e2:	2e0a      	cmp	r6, #10
 800a5e4:	d104      	bne.n	800a5f0 <__swbuf_r+0x6c>
 800a5e6:	4621      	mov	r1, r4
 800a5e8:	4628      	mov	r0, r5
 800a5ea:	f000 f927 	bl	800a83c <_fflush_r>
 800a5ee:	b988      	cbnz	r0, 800a614 <__swbuf_r+0x90>
 800a5f0:	4638      	mov	r0, r7
 800a5f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5f4:	4b0a      	ldr	r3, [pc, #40]	; (800a620 <__swbuf_r+0x9c>)
 800a5f6:	429c      	cmp	r4, r3
 800a5f8:	d101      	bne.n	800a5fe <__swbuf_r+0x7a>
 800a5fa:	68ac      	ldr	r4, [r5, #8]
 800a5fc:	e7cf      	b.n	800a59e <__swbuf_r+0x1a>
 800a5fe:	4b09      	ldr	r3, [pc, #36]	; (800a624 <__swbuf_r+0xa0>)
 800a600:	429c      	cmp	r4, r3
 800a602:	bf08      	it	eq
 800a604:	68ec      	ldreq	r4, [r5, #12]
 800a606:	e7ca      	b.n	800a59e <__swbuf_r+0x1a>
 800a608:	4621      	mov	r1, r4
 800a60a:	4628      	mov	r0, r5
 800a60c:	f000 f81a 	bl	800a644 <__swsetup_r>
 800a610:	2800      	cmp	r0, #0
 800a612:	d0cb      	beq.n	800a5ac <__swbuf_r+0x28>
 800a614:	f04f 37ff 	mov.w	r7, #4294967295
 800a618:	e7ea      	b.n	800a5f0 <__swbuf_r+0x6c>
 800a61a:	bf00      	nop
 800a61c:	0800c03c 	.word	0x0800c03c
 800a620:	0800c05c 	.word	0x0800c05c
 800a624:	0800c01c 	.word	0x0800c01c

0800a628 <__ascii_wctomb>:
 800a628:	b149      	cbz	r1, 800a63e <__ascii_wctomb+0x16>
 800a62a:	2aff      	cmp	r2, #255	; 0xff
 800a62c:	bf85      	ittet	hi
 800a62e:	238a      	movhi	r3, #138	; 0x8a
 800a630:	6003      	strhi	r3, [r0, #0]
 800a632:	700a      	strbls	r2, [r1, #0]
 800a634:	f04f 30ff 	movhi.w	r0, #4294967295
 800a638:	bf98      	it	ls
 800a63a:	2001      	movls	r0, #1
 800a63c:	4770      	bx	lr
 800a63e:	4608      	mov	r0, r1
 800a640:	4770      	bx	lr
	...

0800a644 <__swsetup_r>:
 800a644:	4b32      	ldr	r3, [pc, #200]	; (800a710 <__swsetup_r+0xcc>)
 800a646:	b570      	push	{r4, r5, r6, lr}
 800a648:	681d      	ldr	r5, [r3, #0]
 800a64a:	4606      	mov	r6, r0
 800a64c:	460c      	mov	r4, r1
 800a64e:	b125      	cbz	r5, 800a65a <__swsetup_r+0x16>
 800a650:	69ab      	ldr	r3, [r5, #24]
 800a652:	b913      	cbnz	r3, 800a65a <__swsetup_r+0x16>
 800a654:	4628      	mov	r0, r5
 800a656:	f000 f985 	bl	800a964 <__sinit>
 800a65a:	4b2e      	ldr	r3, [pc, #184]	; (800a714 <__swsetup_r+0xd0>)
 800a65c:	429c      	cmp	r4, r3
 800a65e:	d10f      	bne.n	800a680 <__swsetup_r+0x3c>
 800a660:	686c      	ldr	r4, [r5, #4]
 800a662:	89a3      	ldrh	r3, [r4, #12]
 800a664:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a668:	0719      	lsls	r1, r3, #28
 800a66a:	d42c      	bmi.n	800a6c6 <__swsetup_r+0x82>
 800a66c:	06dd      	lsls	r5, r3, #27
 800a66e:	d411      	bmi.n	800a694 <__swsetup_r+0x50>
 800a670:	2309      	movs	r3, #9
 800a672:	6033      	str	r3, [r6, #0]
 800a674:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a678:	81a3      	strh	r3, [r4, #12]
 800a67a:	f04f 30ff 	mov.w	r0, #4294967295
 800a67e:	e03e      	b.n	800a6fe <__swsetup_r+0xba>
 800a680:	4b25      	ldr	r3, [pc, #148]	; (800a718 <__swsetup_r+0xd4>)
 800a682:	429c      	cmp	r4, r3
 800a684:	d101      	bne.n	800a68a <__swsetup_r+0x46>
 800a686:	68ac      	ldr	r4, [r5, #8]
 800a688:	e7eb      	b.n	800a662 <__swsetup_r+0x1e>
 800a68a:	4b24      	ldr	r3, [pc, #144]	; (800a71c <__swsetup_r+0xd8>)
 800a68c:	429c      	cmp	r4, r3
 800a68e:	bf08      	it	eq
 800a690:	68ec      	ldreq	r4, [r5, #12]
 800a692:	e7e6      	b.n	800a662 <__swsetup_r+0x1e>
 800a694:	0758      	lsls	r0, r3, #29
 800a696:	d512      	bpl.n	800a6be <__swsetup_r+0x7a>
 800a698:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a69a:	b141      	cbz	r1, 800a6ae <__swsetup_r+0x6a>
 800a69c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6a0:	4299      	cmp	r1, r3
 800a6a2:	d002      	beq.n	800a6aa <__swsetup_r+0x66>
 800a6a4:	4630      	mov	r0, r6
 800a6a6:	f7ff fb31 	bl	8009d0c <_free_r>
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	6363      	str	r3, [r4, #52]	; 0x34
 800a6ae:	89a3      	ldrh	r3, [r4, #12]
 800a6b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a6b4:	81a3      	strh	r3, [r4, #12]
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	6063      	str	r3, [r4, #4]
 800a6ba:	6923      	ldr	r3, [r4, #16]
 800a6bc:	6023      	str	r3, [r4, #0]
 800a6be:	89a3      	ldrh	r3, [r4, #12]
 800a6c0:	f043 0308 	orr.w	r3, r3, #8
 800a6c4:	81a3      	strh	r3, [r4, #12]
 800a6c6:	6923      	ldr	r3, [r4, #16]
 800a6c8:	b94b      	cbnz	r3, 800a6de <__swsetup_r+0x9a>
 800a6ca:	89a3      	ldrh	r3, [r4, #12]
 800a6cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a6d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6d4:	d003      	beq.n	800a6de <__swsetup_r+0x9a>
 800a6d6:	4621      	mov	r1, r4
 800a6d8:	4630      	mov	r0, r6
 800a6da:	f000 fa09 	bl	800aaf0 <__smakebuf_r>
 800a6de:	89a0      	ldrh	r0, [r4, #12]
 800a6e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6e4:	f010 0301 	ands.w	r3, r0, #1
 800a6e8:	d00a      	beq.n	800a700 <__swsetup_r+0xbc>
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	60a3      	str	r3, [r4, #8]
 800a6ee:	6963      	ldr	r3, [r4, #20]
 800a6f0:	425b      	negs	r3, r3
 800a6f2:	61a3      	str	r3, [r4, #24]
 800a6f4:	6923      	ldr	r3, [r4, #16]
 800a6f6:	b943      	cbnz	r3, 800a70a <__swsetup_r+0xc6>
 800a6f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a6fc:	d1ba      	bne.n	800a674 <__swsetup_r+0x30>
 800a6fe:	bd70      	pop	{r4, r5, r6, pc}
 800a700:	0781      	lsls	r1, r0, #30
 800a702:	bf58      	it	pl
 800a704:	6963      	ldrpl	r3, [r4, #20]
 800a706:	60a3      	str	r3, [r4, #8]
 800a708:	e7f4      	b.n	800a6f4 <__swsetup_r+0xb0>
 800a70a:	2000      	movs	r0, #0
 800a70c:	e7f7      	b.n	800a6fe <__swsetup_r+0xba>
 800a70e:	bf00      	nop
 800a710:	20000040 	.word	0x20000040
 800a714:	0800c03c 	.word	0x0800c03c
 800a718:	0800c05c 	.word	0x0800c05c
 800a71c:	0800c01c 	.word	0x0800c01c

0800a720 <abort>:
 800a720:	b508      	push	{r3, lr}
 800a722:	2006      	movs	r0, #6
 800a724:	f000 fa54 	bl	800abd0 <raise>
 800a728:	2001      	movs	r0, #1
 800a72a:	f7f9 fb6d 	bl	8003e08 <_exit>
	...

0800a730 <__sflush_r>:
 800a730:	898a      	ldrh	r2, [r1, #12]
 800a732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a736:	4605      	mov	r5, r0
 800a738:	0710      	lsls	r0, r2, #28
 800a73a:	460c      	mov	r4, r1
 800a73c:	d458      	bmi.n	800a7f0 <__sflush_r+0xc0>
 800a73e:	684b      	ldr	r3, [r1, #4]
 800a740:	2b00      	cmp	r3, #0
 800a742:	dc05      	bgt.n	800a750 <__sflush_r+0x20>
 800a744:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a746:	2b00      	cmp	r3, #0
 800a748:	dc02      	bgt.n	800a750 <__sflush_r+0x20>
 800a74a:	2000      	movs	r0, #0
 800a74c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a750:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a752:	2e00      	cmp	r6, #0
 800a754:	d0f9      	beq.n	800a74a <__sflush_r+0x1a>
 800a756:	2300      	movs	r3, #0
 800a758:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a75c:	682f      	ldr	r7, [r5, #0]
 800a75e:	602b      	str	r3, [r5, #0]
 800a760:	d032      	beq.n	800a7c8 <__sflush_r+0x98>
 800a762:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a764:	89a3      	ldrh	r3, [r4, #12]
 800a766:	075a      	lsls	r2, r3, #29
 800a768:	d505      	bpl.n	800a776 <__sflush_r+0x46>
 800a76a:	6863      	ldr	r3, [r4, #4]
 800a76c:	1ac0      	subs	r0, r0, r3
 800a76e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a770:	b10b      	cbz	r3, 800a776 <__sflush_r+0x46>
 800a772:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a774:	1ac0      	subs	r0, r0, r3
 800a776:	2300      	movs	r3, #0
 800a778:	4602      	mov	r2, r0
 800a77a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a77c:	6a21      	ldr	r1, [r4, #32]
 800a77e:	4628      	mov	r0, r5
 800a780:	47b0      	blx	r6
 800a782:	1c43      	adds	r3, r0, #1
 800a784:	89a3      	ldrh	r3, [r4, #12]
 800a786:	d106      	bne.n	800a796 <__sflush_r+0x66>
 800a788:	6829      	ldr	r1, [r5, #0]
 800a78a:	291d      	cmp	r1, #29
 800a78c:	d82c      	bhi.n	800a7e8 <__sflush_r+0xb8>
 800a78e:	4a2a      	ldr	r2, [pc, #168]	; (800a838 <__sflush_r+0x108>)
 800a790:	40ca      	lsrs	r2, r1
 800a792:	07d6      	lsls	r6, r2, #31
 800a794:	d528      	bpl.n	800a7e8 <__sflush_r+0xb8>
 800a796:	2200      	movs	r2, #0
 800a798:	6062      	str	r2, [r4, #4]
 800a79a:	04d9      	lsls	r1, r3, #19
 800a79c:	6922      	ldr	r2, [r4, #16]
 800a79e:	6022      	str	r2, [r4, #0]
 800a7a0:	d504      	bpl.n	800a7ac <__sflush_r+0x7c>
 800a7a2:	1c42      	adds	r2, r0, #1
 800a7a4:	d101      	bne.n	800a7aa <__sflush_r+0x7a>
 800a7a6:	682b      	ldr	r3, [r5, #0]
 800a7a8:	b903      	cbnz	r3, 800a7ac <__sflush_r+0x7c>
 800a7aa:	6560      	str	r0, [r4, #84]	; 0x54
 800a7ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a7ae:	602f      	str	r7, [r5, #0]
 800a7b0:	2900      	cmp	r1, #0
 800a7b2:	d0ca      	beq.n	800a74a <__sflush_r+0x1a>
 800a7b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a7b8:	4299      	cmp	r1, r3
 800a7ba:	d002      	beq.n	800a7c2 <__sflush_r+0x92>
 800a7bc:	4628      	mov	r0, r5
 800a7be:	f7ff faa5 	bl	8009d0c <_free_r>
 800a7c2:	2000      	movs	r0, #0
 800a7c4:	6360      	str	r0, [r4, #52]	; 0x34
 800a7c6:	e7c1      	b.n	800a74c <__sflush_r+0x1c>
 800a7c8:	6a21      	ldr	r1, [r4, #32]
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	4628      	mov	r0, r5
 800a7ce:	47b0      	blx	r6
 800a7d0:	1c41      	adds	r1, r0, #1
 800a7d2:	d1c7      	bne.n	800a764 <__sflush_r+0x34>
 800a7d4:	682b      	ldr	r3, [r5, #0]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d0c4      	beq.n	800a764 <__sflush_r+0x34>
 800a7da:	2b1d      	cmp	r3, #29
 800a7dc:	d001      	beq.n	800a7e2 <__sflush_r+0xb2>
 800a7de:	2b16      	cmp	r3, #22
 800a7e0:	d101      	bne.n	800a7e6 <__sflush_r+0xb6>
 800a7e2:	602f      	str	r7, [r5, #0]
 800a7e4:	e7b1      	b.n	800a74a <__sflush_r+0x1a>
 800a7e6:	89a3      	ldrh	r3, [r4, #12]
 800a7e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7ec:	81a3      	strh	r3, [r4, #12]
 800a7ee:	e7ad      	b.n	800a74c <__sflush_r+0x1c>
 800a7f0:	690f      	ldr	r7, [r1, #16]
 800a7f2:	2f00      	cmp	r7, #0
 800a7f4:	d0a9      	beq.n	800a74a <__sflush_r+0x1a>
 800a7f6:	0793      	lsls	r3, r2, #30
 800a7f8:	680e      	ldr	r6, [r1, #0]
 800a7fa:	bf08      	it	eq
 800a7fc:	694b      	ldreq	r3, [r1, #20]
 800a7fe:	600f      	str	r7, [r1, #0]
 800a800:	bf18      	it	ne
 800a802:	2300      	movne	r3, #0
 800a804:	eba6 0807 	sub.w	r8, r6, r7
 800a808:	608b      	str	r3, [r1, #8]
 800a80a:	f1b8 0f00 	cmp.w	r8, #0
 800a80e:	dd9c      	ble.n	800a74a <__sflush_r+0x1a>
 800a810:	6a21      	ldr	r1, [r4, #32]
 800a812:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a814:	4643      	mov	r3, r8
 800a816:	463a      	mov	r2, r7
 800a818:	4628      	mov	r0, r5
 800a81a:	47b0      	blx	r6
 800a81c:	2800      	cmp	r0, #0
 800a81e:	dc06      	bgt.n	800a82e <__sflush_r+0xfe>
 800a820:	89a3      	ldrh	r3, [r4, #12]
 800a822:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a826:	81a3      	strh	r3, [r4, #12]
 800a828:	f04f 30ff 	mov.w	r0, #4294967295
 800a82c:	e78e      	b.n	800a74c <__sflush_r+0x1c>
 800a82e:	4407      	add	r7, r0
 800a830:	eba8 0800 	sub.w	r8, r8, r0
 800a834:	e7e9      	b.n	800a80a <__sflush_r+0xda>
 800a836:	bf00      	nop
 800a838:	20400001 	.word	0x20400001

0800a83c <_fflush_r>:
 800a83c:	b538      	push	{r3, r4, r5, lr}
 800a83e:	690b      	ldr	r3, [r1, #16]
 800a840:	4605      	mov	r5, r0
 800a842:	460c      	mov	r4, r1
 800a844:	b913      	cbnz	r3, 800a84c <_fflush_r+0x10>
 800a846:	2500      	movs	r5, #0
 800a848:	4628      	mov	r0, r5
 800a84a:	bd38      	pop	{r3, r4, r5, pc}
 800a84c:	b118      	cbz	r0, 800a856 <_fflush_r+0x1a>
 800a84e:	6983      	ldr	r3, [r0, #24]
 800a850:	b90b      	cbnz	r3, 800a856 <_fflush_r+0x1a>
 800a852:	f000 f887 	bl	800a964 <__sinit>
 800a856:	4b14      	ldr	r3, [pc, #80]	; (800a8a8 <_fflush_r+0x6c>)
 800a858:	429c      	cmp	r4, r3
 800a85a:	d11b      	bne.n	800a894 <_fflush_r+0x58>
 800a85c:	686c      	ldr	r4, [r5, #4]
 800a85e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d0ef      	beq.n	800a846 <_fflush_r+0xa>
 800a866:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a868:	07d0      	lsls	r0, r2, #31
 800a86a:	d404      	bmi.n	800a876 <_fflush_r+0x3a>
 800a86c:	0599      	lsls	r1, r3, #22
 800a86e:	d402      	bmi.n	800a876 <_fflush_r+0x3a>
 800a870:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a872:	f000 f915 	bl	800aaa0 <__retarget_lock_acquire_recursive>
 800a876:	4628      	mov	r0, r5
 800a878:	4621      	mov	r1, r4
 800a87a:	f7ff ff59 	bl	800a730 <__sflush_r>
 800a87e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a880:	07da      	lsls	r2, r3, #31
 800a882:	4605      	mov	r5, r0
 800a884:	d4e0      	bmi.n	800a848 <_fflush_r+0xc>
 800a886:	89a3      	ldrh	r3, [r4, #12]
 800a888:	059b      	lsls	r3, r3, #22
 800a88a:	d4dd      	bmi.n	800a848 <_fflush_r+0xc>
 800a88c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a88e:	f000 f908 	bl	800aaa2 <__retarget_lock_release_recursive>
 800a892:	e7d9      	b.n	800a848 <_fflush_r+0xc>
 800a894:	4b05      	ldr	r3, [pc, #20]	; (800a8ac <_fflush_r+0x70>)
 800a896:	429c      	cmp	r4, r3
 800a898:	d101      	bne.n	800a89e <_fflush_r+0x62>
 800a89a:	68ac      	ldr	r4, [r5, #8]
 800a89c:	e7df      	b.n	800a85e <_fflush_r+0x22>
 800a89e:	4b04      	ldr	r3, [pc, #16]	; (800a8b0 <_fflush_r+0x74>)
 800a8a0:	429c      	cmp	r4, r3
 800a8a2:	bf08      	it	eq
 800a8a4:	68ec      	ldreq	r4, [r5, #12]
 800a8a6:	e7da      	b.n	800a85e <_fflush_r+0x22>
 800a8a8:	0800c03c 	.word	0x0800c03c
 800a8ac:	0800c05c 	.word	0x0800c05c
 800a8b0:	0800c01c 	.word	0x0800c01c

0800a8b4 <std>:
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	b510      	push	{r4, lr}
 800a8b8:	4604      	mov	r4, r0
 800a8ba:	e9c0 3300 	strd	r3, r3, [r0]
 800a8be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a8c2:	6083      	str	r3, [r0, #8]
 800a8c4:	8181      	strh	r1, [r0, #12]
 800a8c6:	6643      	str	r3, [r0, #100]	; 0x64
 800a8c8:	81c2      	strh	r2, [r0, #14]
 800a8ca:	6183      	str	r3, [r0, #24]
 800a8cc:	4619      	mov	r1, r3
 800a8ce:	2208      	movs	r2, #8
 800a8d0:	305c      	adds	r0, #92	; 0x5c
 800a8d2:	f7fd fb45 	bl	8007f60 <memset>
 800a8d6:	4b05      	ldr	r3, [pc, #20]	; (800a8ec <std+0x38>)
 800a8d8:	6263      	str	r3, [r4, #36]	; 0x24
 800a8da:	4b05      	ldr	r3, [pc, #20]	; (800a8f0 <std+0x3c>)
 800a8dc:	62a3      	str	r3, [r4, #40]	; 0x28
 800a8de:	4b05      	ldr	r3, [pc, #20]	; (800a8f4 <std+0x40>)
 800a8e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a8e2:	4b05      	ldr	r3, [pc, #20]	; (800a8f8 <std+0x44>)
 800a8e4:	6224      	str	r4, [r4, #32]
 800a8e6:	6323      	str	r3, [r4, #48]	; 0x30
 800a8e8:	bd10      	pop	{r4, pc}
 800a8ea:	bf00      	nop
 800a8ec:	0800ac09 	.word	0x0800ac09
 800a8f0:	0800ac2b 	.word	0x0800ac2b
 800a8f4:	0800ac63 	.word	0x0800ac63
 800a8f8:	0800ac87 	.word	0x0800ac87

0800a8fc <_cleanup_r>:
 800a8fc:	4901      	ldr	r1, [pc, #4]	; (800a904 <_cleanup_r+0x8>)
 800a8fe:	f000 b8af 	b.w	800aa60 <_fwalk_reent>
 800a902:	bf00      	nop
 800a904:	0800a83d 	.word	0x0800a83d

0800a908 <__sfmoreglue>:
 800a908:	b570      	push	{r4, r5, r6, lr}
 800a90a:	2268      	movs	r2, #104	; 0x68
 800a90c:	1e4d      	subs	r5, r1, #1
 800a90e:	4355      	muls	r5, r2
 800a910:	460e      	mov	r6, r1
 800a912:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a916:	f7ff fa65 	bl	8009de4 <_malloc_r>
 800a91a:	4604      	mov	r4, r0
 800a91c:	b140      	cbz	r0, 800a930 <__sfmoreglue+0x28>
 800a91e:	2100      	movs	r1, #0
 800a920:	e9c0 1600 	strd	r1, r6, [r0]
 800a924:	300c      	adds	r0, #12
 800a926:	60a0      	str	r0, [r4, #8]
 800a928:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a92c:	f7fd fb18 	bl	8007f60 <memset>
 800a930:	4620      	mov	r0, r4
 800a932:	bd70      	pop	{r4, r5, r6, pc}

0800a934 <__sfp_lock_acquire>:
 800a934:	4801      	ldr	r0, [pc, #4]	; (800a93c <__sfp_lock_acquire+0x8>)
 800a936:	f000 b8b3 	b.w	800aaa0 <__retarget_lock_acquire_recursive>
 800a93a:	bf00      	nop
 800a93c:	2000051d 	.word	0x2000051d

0800a940 <__sfp_lock_release>:
 800a940:	4801      	ldr	r0, [pc, #4]	; (800a948 <__sfp_lock_release+0x8>)
 800a942:	f000 b8ae 	b.w	800aaa2 <__retarget_lock_release_recursive>
 800a946:	bf00      	nop
 800a948:	2000051d 	.word	0x2000051d

0800a94c <__sinit_lock_acquire>:
 800a94c:	4801      	ldr	r0, [pc, #4]	; (800a954 <__sinit_lock_acquire+0x8>)
 800a94e:	f000 b8a7 	b.w	800aaa0 <__retarget_lock_acquire_recursive>
 800a952:	bf00      	nop
 800a954:	2000051e 	.word	0x2000051e

0800a958 <__sinit_lock_release>:
 800a958:	4801      	ldr	r0, [pc, #4]	; (800a960 <__sinit_lock_release+0x8>)
 800a95a:	f000 b8a2 	b.w	800aaa2 <__retarget_lock_release_recursive>
 800a95e:	bf00      	nop
 800a960:	2000051e 	.word	0x2000051e

0800a964 <__sinit>:
 800a964:	b510      	push	{r4, lr}
 800a966:	4604      	mov	r4, r0
 800a968:	f7ff fff0 	bl	800a94c <__sinit_lock_acquire>
 800a96c:	69a3      	ldr	r3, [r4, #24]
 800a96e:	b11b      	cbz	r3, 800a978 <__sinit+0x14>
 800a970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a974:	f7ff bff0 	b.w	800a958 <__sinit_lock_release>
 800a978:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a97c:	6523      	str	r3, [r4, #80]	; 0x50
 800a97e:	4b13      	ldr	r3, [pc, #76]	; (800a9cc <__sinit+0x68>)
 800a980:	4a13      	ldr	r2, [pc, #76]	; (800a9d0 <__sinit+0x6c>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	62a2      	str	r2, [r4, #40]	; 0x28
 800a986:	42a3      	cmp	r3, r4
 800a988:	bf04      	itt	eq
 800a98a:	2301      	moveq	r3, #1
 800a98c:	61a3      	streq	r3, [r4, #24]
 800a98e:	4620      	mov	r0, r4
 800a990:	f000 f820 	bl	800a9d4 <__sfp>
 800a994:	6060      	str	r0, [r4, #4]
 800a996:	4620      	mov	r0, r4
 800a998:	f000 f81c 	bl	800a9d4 <__sfp>
 800a99c:	60a0      	str	r0, [r4, #8]
 800a99e:	4620      	mov	r0, r4
 800a9a0:	f000 f818 	bl	800a9d4 <__sfp>
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	60e0      	str	r0, [r4, #12]
 800a9a8:	2104      	movs	r1, #4
 800a9aa:	6860      	ldr	r0, [r4, #4]
 800a9ac:	f7ff ff82 	bl	800a8b4 <std>
 800a9b0:	68a0      	ldr	r0, [r4, #8]
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	2109      	movs	r1, #9
 800a9b6:	f7ff ff7d 	bl	800a8b4 <std>
 800a9ba:	68e0      	ldr	r0, [r4, #12]
 800a9bc:	2202      	movs	r2, #2
 800a9be:	2112      	movs	r1, #18
 800a9c0:	f7ff ff78 	bl	800a8b4 <std>
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	61a3      	str	r3, [r4, #24]
 800a9c8:	e7d2      	b.n	800a970 <__sinit+0xc>
 800a9ca:	bf00      	nop
 800a9cc:	0800bca4 	.word	0x0800bca4
 800a9d0:	0800a8fd 	.word	0x0800a8fd

0800a9d4 <__sfp>:
 800a9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9d6:	4607      	mov	r7, r0
 800a9d8:	f7ff ffac 	bl	800a934 <__sfp_lock_acquire>
 800a9dc:	4b1e      	ldr	r3, [pc, #120]	; (800aa58 <__sfp+0x84>)
 800a9de:	681e      	ldr	r6, [r3, #0]
 800a9e0:	69b3      	ldr	r3, [r6, #24]
 800a9e2:	b913      	cbnz	r3, 800a9ea <__sfp+0x16>
 800a9e4:	4630      	mov	r0, r6
 800a9e6:	f7ff ffbd 	bl	800a964 <__sinit>
 800a9ea:	3648      	adds	r6, #72	; 0x48
 800a9ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a9f0:	3b01      	subs	r3, #1
 800a9f2:	d503      	bpl.n	800a9fc <__sfp+0x28>
 800a9f4:	6833      	ldr	r3, [r6, #0]
 800a9f6:	b30b      	cbz	r3, 800aa3c <__sfp+0x68>
 800a9f8:	6836      	ldr	r6, [r6, #0]
 800a9fa:	e7f7      	b.n	800a9ec <__sfp+0x18>
 800a9fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aa00:	b9d5      	cbnz	r5, 800aa38 <__sfp+0x64>
 800aa02:	4b16      	ldr	r3, [pc, #88]	; (800aa5c <__sfp+0x88>)
 800aa04:	60e3      	str	r3, [r4, #12]
 800aa06:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aa0a:	6665      	str	r5, [r4, #100]	; 0x64
 800aa0c:	f000 f847 	bl	800aa9e <__retarget_lock_init_recursive>
 800aa10:	f7ff ff96 	bl	800a940 <__sfp_lock_release>
 800aa14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aa18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aa1c:	6025      	str	r5, [r4, #0]
 800aa1e:	61a5      	str	r5, [r4, #24]
 800aa20:	2208      	movs	r2, #8
 800aa22:	4629      	mov	r1, r5
 800aa24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aa28:	f7fd fa9a 	bl	8007f60 <memset>
 800aa2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aa30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aa34:	4620      	mov	r0, r4
 800aa36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa38:	3468      	adds	r4, #104	; 0x68
 800aa3a:	e7d9      	b.n	800a9f0 <__sfp+0x1c>
 800aa3c:	2104      	movs	r1, #4
 800aa3e:	4638      	mov	r0, r7
 800aa40:	f7ff ff62 	bl	800a908 <__sfmoreglue>
 800aa44:	4604      	mov	r4, r0
 800aa46:	6030      	str	r0, [r6, #0]
 800aa48:	2800      	cmp	r0, #0
 800aa4a:	d1d5      	bne.n	800a9f8 <__sfp+0x24>
 800aa4c:	f7ff ff78 	bl	800a940 <__sfp_lock_release>
 800aa50:	230c      	movs	r3, #12
 800aa52:	603b      	str	r3, [r7, #0]
 800aa54:	e7ee      	b.n	800aa34 <__sfp+0x60>
 800aa56:	bf00      	nop
 800aa58:	0800bca4 	.word	0x0800bca4
 800aa5c:	ffff0001 	.word	0xffff0001

0800aa60 <_fwalk_reent>:
 800aa60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa64:	4606      	mov	r6, r0
 800aa66:	4688      	mov	r8, r1
 800aa68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aa6c:	2700      	movs	r7, #0
 800aa6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aa72:	f1b9 0901 	subs.w	r9, r9, #1
 800aa76:	d505      	bpl.n	800aa84 <_fwalk_reent+0x24>
 800aa78:	6824      	ldr	r4, [r4, #0]
 800aa7a:	2c00      	cmp	r4, #0
 800aa7c:	d1f7      	bne.n	800aa6e <_fwalk_reent+0xe>
 800aa7e:	4638      	mov	r0, r7
 800aa80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa84:	89ab      	ldrh	r3, [r5, #12]
 800aa86:	2b01      	cmp	r3, #1
 800aa88:	d907      	bls.n	800aa9a <_fwalk_reent+0x3a>
 800aa8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aa8e:	3301      	adds	r3, #1
 800aa90:	d003      	beq.n	800aa9a <_fwalk_reent+0x3a>
 800aa92:	4629      	mov	r1, r5
 800aa94:	4630      	mov	r0, r6
 800aa96:	47c0      	blx	r8
 800aa98:	4307      	orrs	r7, r0
 800aa9a:	3568      	adds	r5, #104	; 0x68
 800aa9c:	e7e9      	b.n	800aa72 <_fwalk_reent+0x12>

0800aa9e <__retarget_lock_init_recursive>:
 800aa9e:	4770      	bx	lr

0800aaa0 <__retarget_lock_acquire_recursive>:
 800aaa0:	4770      	bx	lr

0800aaa2 <__retarget_lock_release_recursive>:
 800aaa2:	4770      	bx	lr

0800aaa4 <__swhatbuf_r>:
 800aaa4:	b570      	push	{r4, r5, r6, lr}
 800aaa6:	460e      	mov	r6, r1
 800aaa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaac:	2900      	cmp	r1, #0
 800aaae:	b096      	sub	sp, #88	; 0x58
 800aab0:	4614      	mov	r4, r2
 800aab2:	461d      	mov	r5, r3
 800aab4:	da08      	bge.n	800aac8 <__swhatbuf_r+0x24>
 800aab6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800aaba:	2200      	movs	r2, #0
 800aabc:	602a      	str	r2, [r5, #0]
 800aabe:	061a      	lsls	r2, r3, #24
 800aac0:	d410      	bmi.n	800aae4 <__swhatbuf_r+0x40>
 800aac2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aac6:	e00e      	b.n	800aae6 <__swhatbuf_r+0x42>
 800aac8:	466a      	mov	r2, sp
 800aaca:	f000 f903 	bl	800acd4 <_fstat_r>
 800aace:	2800      	cmp	r0, #0
 800aad0:	dbf1      	blt.n	800aab6 <__swhatbuf_r+0x12>
 800aad2:	9a01      	ldr	r2, [sp, #4]
 800aad4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aad8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aadc:	425a      	negs	r2, r3
 800aade:	415a      	adcs	r2, r3
 800aae0:	602a      	str	r2, [r5, #0]
 800aae2:	e7ee      	b.n	800aac2 <__swhatbuf_r+0x1e>
 800aae4:	2340      	movs	r3, #64	; 0x40
 800aae6:	2000      	movs	r0, #0
 800aae8:	6023      	str	r3, [r4, #0]
 800aaea:	b016      	add	sp, #88	; 0x58
 800aaec:	bd70      	pop	{r4, r5, r6, pc}
	...

0800aaf0 <__smakebuf_r>:
 800aaf0:	898b      	ldrh	r3, [r1, #12]
 800aaf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aaf4:	079d      	lsls	r5, r3, #30
 800aaf6:	4606      	mov	r6, r0
 800aaf8:	460c      	mov	r4, r1
 800aafa:	d507      	bpl.n	800ab0c <__smakebuf_r+0x1c>
 800aafc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ab00:	6023      	str	r3, [r4, #0]
 800ab02:	6123      	str	r3, [r4, #16]
 800ab04:	2301      	movs	r3, #1
 800ab06:	6163      	str	r3, [r4, #20]
 800ab08:	b002      	add	sp, #8
 800ab0a:	bd70      	pop	{r4, r5, r6, pc}
 800ab0c:	ab01      	add	r3, sp, #4
 800ab0e:	466a      	mov	r2, sp
 800ab10:	f7ff ffc8 	bl	800aaa4 <__swhatbuf_r>
 800ab14:	9900      	ldr	r1, [sp, #0]
 800ab16:	4605      	mov	r5, r0
 800ab18:	4630      	mov	r0, r6
 800ab1a:	f7ff f963 	bl	8009de4 <_malloc_r>
 800ab1e:	b948      	cbnz	r0, 800ab34 <__smakebuf_r+0x44>
 800ab20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab24:	059a      	lsls	r2, r3, #22
 800ab26:	d4ef      	bmi.n	800ab08 <__smakebuf_r+0x18>
 800ab28:	f023 0303 	bic.w	r3, r3, #3
 800ab2c:	f043 0302 	orr.w	r3, r3, #2
 800ab30:	81a3      	strh	r3, [r4, #12]
 800ab32:	e7e3      	b.n	800aafc <__smakebuf_r+0xc>
 800ab34:	4b0d      	ldr	r3, [pc, #52]	; (800ab6c <__smakebuf_r+0x7c>)
 800ab36:	62b3      	str	r3, [r6, #40]	; 0x28
 800ab38:	89a3      	ldrh	r3, [r4, #12]
 800ab3a:	6020      	str	r0, [r4, #0]
 800ab3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab40:	81a3      	strh	r3, [r4, #12]
 800ab42:	9b00      	ldr	r3, [sp, #0]
 800ab44:	6163      	str	r3, [r4, #20]
 800ab46:	9b01      	ldr	r3, [sp, #4]
 800ab48:	6120      	str	r0, [r4, #16]
 800ab4a:	b15b      	cbz	r3, 800ab64 <__smakebuf_r+0x74>
 800ab4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab50:	4630      	mov	r0, r6
 800ab52:	f000 f8d1 	bl	800acf8 <_isatty_r>
 800ab56:	b128      	cbz	r0, 800ab64 <__smakebuf_r+0x74>
 800ab58:	89a3      	ldrh	r3, [r4, #12]
 800ab5a:	f023 0303 	bic.w	r3, r3, #3
 800ab5e:	f043 0301 	orr.w	r3, r3, #1
 800ab62:	81a3      	strh	r3, [r4, #12]
 800ab64:	89a0      	ldrh	r0, [r4, #12]
 800ab66:	4305      	orrs	r5, r0
 800ab68:	81a5      	strh	r5, [r4, #12]
 800ab6a:	e7cd      	b.n	800ab08 <__smakebuf_r+0x18>
 800ab6c:	0800a8fd 	.word	0x0800a8fd

0800ab70 <_malloc_usable_size_r>:
 800ab70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab74:	1f18      	subs	r0, r3, #4
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	bfbc      	itt	lt
 800ab7a:	580b      	ldrlt	r3, [r1, r0]
 800ab7c:	18c0      	addlt	r0, r0, r3
 800ab7e:	4770      	bx	lr

0800ab80 <_raise_r>:
 800ab80:	291f      	cmp	r1, #31
 800ab82:	b538      	push	{r3, r4, r5, lr}
 800ab84:	4604      	mov	r4, r0
 800ab86:	460d      	mov	r5, r1
 800ab88:	d904      	bls.n	800ab94 <_raise_r+0x14>
 800ab8a:	2316      	movs	r3, #22
 800ab8c:	6003      	str	r3, [r0, #0]
 800ab8e:	f04f 30ff 	mov.w	r0, #4294967295
 800ab92:	bd38      	pop	{r3, r4, r5, pc}
 800ab94:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ab96:	b112      	cbz	r2, 800ab9e <_raise_r+0x1e>
 800ab98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ab9c:	b94b      	cbnz	r3, 800abb2 <_raise_r+0x32>
 800ab9e:	4620      	mov	r0, r4
 800aba0:	f000 f830 	bl	800ac04 <_getpid_r>
 800aba4:	462a      	mov	r2, r5
 800aba6:	4601      	mov	r1, r0
 800aba8:	4620      	mov	r0, r4
 800abaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abae:	f000 b817 	b.w	800abe0 <_kill_r>
 800abb2:	2b01      	cmp	r3, #1
 800abb4:	d00a      	beq.n	800abcc <_raise_r+0x4c>
 800abb6:	1c59      	adds	r1, r3, #1
 800abb8:	d103      	bne.n	800abc2 <_raise_r+0x42>
 800abba:	2316      	movs	r3, #22
 800abbc:	6003      	str	r3, [r0, #0]
 800abbe:	2001      	movs	r0, #1
 800abc0:	e7e7      	b.n	800ab92 <_raise_r+0x12>
 800abc2:	2400      	movs	r4, #0
 800abc4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800abc8:	4628      	mov	r0, r5
 800abca:	4798      	blx	r3
 800abcc:	2000      	movs	r0, #0
 800abce:	e7e0      	b.n	800ab92 <_raise_r+0x12>

0800abd0 <raise>:
 800abd0:	4b02      	ldr	r3, [pc, #8]	; (800abdc <raise+0xc>)
 800abd2:	4601      	mov	r1, r0
 800abd4:	6818      	ldr	r0, [r3, #0]
 800abd6:	f7ff bfd3 	b.w	800ab80 <_raise_r>
 800abda:	bf00      	nop
 800abdc:	20000040 	.word	0x20000040

0800abe0 <_kill_r>:
 800abe0:	b538      	push	{r3, r4, r5, lr}
 800abe2:	4d07      	ldr	r5, [pc, #28]	; (800ac00 <_kill_r+0x20>)
 800abe4:	2300      	movs	r3, #0
 800abe6:	4604      	mov	r4, r0
 800abe8:	4608      	mov	r0, r1
 800abea:	4611      	mov	r1, r2
 800abec:	602b      	str	r3, [r5, #0]
 800abee:	f7f9 f8fb 	bl	8003de8 <_kill>
 800abf2:	1c43      	adds	r3, r0, #1
 800abf4:	d102      	bne.n	800abfc <_kill_r+0x1c>
 800abf6:	682b      	ldr	r3, [r5, #0]
 800abf8:	b103      	cbz	r3, 800abfc <_kill_r+0x1c>
 800abfa:	6023      	str	r3, [r4, #0]
 800abfc:	bd38      	pop	{r3, r4, r5, pc}
 800abfe:	bf00      	nop
 800ac00:	20000518 	.word	0x20000518

0800ac04 <_getpid_r>:
 800ac04:	f7f9 b8e8 	b.w	8003dd8 <_getpid>

0800ac08 <__sread>:
 800ac08:	b510      	push	{r4, lr}
 800ac0a:	460c      	mov	r4, r1
 800ac0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac10:	f000 f894 	bl	800ad3c <_read_r>
 800ac14:	2800      	cmp	r0, #0
 800ac16:	bfab      	itete	ge
 800ac18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ac1a:	89a3      	ldrhlt	r3, [r4, #12]
 800ac1c:	181b      	addge	r3, r3, r0
 800ac1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ac22:	bfac      	ite	ge
 800ac24:	6563      	strge	r3, [r4, #84]	; 0x54
 800ac26:	81a3      	strhlt	r3, [r4, #12]
 800ac28:	bd10      	pop	{r4, pc}

0800ac2a <__swrite>:
 800ac2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac2e:	461f      	mov	r7, r3
 800ac30:	898b      	ldrh	r3, [r1, #12]
 800ac32:	05db      	lsls	r3, r3, #23
 800ac34:	4605      	mov	r5, r0
 800ac36:	460c      	mov	r4, r1
 800ac38:	4616      	mov	r6, r2
 800ac3a:	d505      	bpl.n	800ac48 <__swrite+0x1e>
 800ac3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac40:	2302      	movs	r3, #2
 800ac42:	2200      	movs	r2, #0
 800ac44:	f000 f868 	bl	800ad18 <_lseek_r>
 800ac48:	89a3      	ldrh	r3, [r4, #12]
 800ac4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac52:	81a3      	strh	r3, [r4, #12]
 800ac54:	4632      	mov	r2, r6
 800ac56:	463b      	mov	r3, r7
 800ac58:	4628      	mov	r0, r5
 800ac5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac5e:	f000 b817 	b.w	800ac90 <_write_r>

0800ac62 <__sseek>:
 800ac62:	b510      	push	{r4, lr}
 800ac64:	460c      	mov	r4, r1
 800ac66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac6a:	f000 f855 	bl	800ad18 <_lseek_r>
 800ac6e:	1c43      	adds	r3, r0, #1
 800ac70:	89a3      	ldrh	r3, [r4, #12]
 800ac72:	bf15      	itete	ne
 800ac74:	6560      	strne	r0, [r4, #84]	; 0x54
 800ac76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ac7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ac7e:	81a3      	strheq	r3, [r4, #12]
 800ac80:	bf18      	it	ne
 800ac82:	81a3      	strhne	r3, [r4, #12]
 800ac84:	bd10      	pop	{r4, pc}

0800ac86 <__sclose>:
 800ac86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac8a:	f000 b813 	b.w	800acb4 <_close_r>
	...

0800ac90 <_write_r>:
 800ac90:	b538      	push	{r3, r4, r5, lr}
 800ac92:	4d07      	ldr	r5, [pc, #28]	; (800acb0 <_write_r+0x20>)
 800ac94:	4604      	mov	r4, r0
 800ac96:	4608      	mov	r0, r1
 800ac98:	4611      	mov	r1, r2
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	602a      	str	r2, [r5, #0]
 800ac9e:	461a      	mov	r2, r3
 800aca0:	f7f9 f8d9 	bl	8003e56 <_write>
 800aca4:	1c43      	adds	r3, r0, #1
 800aca6:	d102      	bne.n	800acae <_write_r+0x1e>
 800aca8:	682b      	ldr	r3, [r5, #0]
 800acaa:	b103      	cbz	r3, 800acae <_write_r+0x1e>
 800acac:	6023      	str	r3, [r4, #0]
 800acae:	bd38      	pop	{r3, r4, r5, pc}
 800acb0:	20000518 	.word	0x20000518

0800acb4 <_close_r>:
 800acb4:	b538      	push	{r3, r4, r5, lr}
 800acb6:	4d06      	ldr	r5, [pc, #24]	; (800acd0 <_close_r+0x1c>)
 800acb8:	2300      	movs	r3, #0
 800acba:	4604      	mov	r4, r0
 800acbc:	4608      	mov	r0, r1
 800acbe:	602b      	str	r3, [r5, #0]
 800acc0:	f7f9 f8e5 	bl	8003e8e <_close>
 800acc4:	1c43      	adds	r3, r0, #1
 800acc6:	d102      	bne.n	800acce <_close_r+0x1a>
 800acc8:	682b      	ldr	r3, [r5, #0]
 800acca:	b103      	cbz	r3, 800acce <_close_r+0x1a>
 800accc:	6023      	str	r3, [r4, #0]
 800acce:	bd38      	pop	{r3, r4, r5, pc}
 800acd0:	20000518 	.word	0x20000518

0800acd4 <_fstat_r>:
 800acd4:	b538      	push	{r3, r4, r5, lr}
 800acd6:	4d07      	ldr	r5, [pc, #28]	; (800acf4 <_fstat_r+0x20>)
 800acd8:	2300      	movs	r3, #0
 800acda:	4604      	mov	r4, r0
 800acdc:	4608      	mov	r0, r1
 800acde:	4611      	mov	r1, r2
 800ace0:	602b      	str	r3, [r5, #0]
 800ace2:	f7f9 f8e0 	bl	8003ea6 <_fstat>
 800ace6:	1c43      	adds	r3, r0, #1
 800ace8:	d102      	bne.n	800acf0 <_fstat_r+0x1c>
 800acea:	682b      	ldr	r3, [r5, #0]
 800acec:	b103      	cbz	r3, 800acf0 <_fstat_r+0x1c>
 800acee:	6023      	str	r3, [r4, #0]
 800acf0:	bd38      	pop	{r3, r4, r5, pc}
 800acf2:	bf00      	nop
 800acf4:	20000518 	.word	0x20000518

0800acf8 <_isatty_r>:
 800acf8:	b538      	push	{r3, r4, r5, lr}
 800acfa:	4d06      	ldr	r5, [pc, #24]	; (800ad14 <_isatty_r+0x1c>)
 800acfc:	2300      	movs	r3, #0
 800acfe:	4604      	mov	r4, r0
 800ad00:	4608      	mov	r0, r1
 800ad02:	602b      	str	r3, [r5, #0]
 800ad04:	f7f9 f8df 	bl	8003ec6 <_isatty>
 800ad08:	1c43      	adds	r3, r0, #1
 800ad0a:	d102      	bne.n	800ad12 <_isatty_r+0x1a>
 800ad0c:	682b      	ldr	r3, [r5, #0]
 800ad0e:	b103      	cbz	r3, 800ad12 <_isatty_r+0x1a>
 800ad10:	6023      	str	r3, [r4, #0]
 800ad12:	bd38      	pop	{r3, r4, r5, pc}
 800ad14:	20000518 	.word	0x20000518

0800ad18 <_lseek_r>:
 800ad18:	b538      	push	{r3, r4, r5, lr}
 800ad1a:	4d07      	ldr	r5, [pc, #28]	; (800ad38 <_lseek_r+0x20>)
 800ad1c:	4604      	mov	r4, r0
 800ad1e:	4608      	mov	r0, r1
 800ad20:	4611      	mov	r1, r2
 800ad22:	2200      	movs	r2, #0
 800ad24:	602a      	str	r2, [r5, #0]
 800ad26:	461a      	mov	r2, r3
 800ad28:	f7f9 f8d8 	bl	8003edc <_lseek>
 800ad2c:	1c43      	adds	r3, r0, #1
 800ad2e:	d102      	bne.n	800ad36 <_lseek_r+0x1e>
 800ad30:	682b      	ldr	r3, [r5, #0]
 800ad32:	b103      	cbz	r3, 800ad36 <_lseek_r+0x1e>
 800ad34:	6023      	str	r3, [r4, #0]
 800ad36:	bd38      	pop	{r3, r4, r5, pc}
 800ad38:	20000518 	.word	0x20000518

0800ad3c <_read_r>:
 800ad3c:	b538      	push	{r3, r4, r5, lr}
 800ad3e:	4d07      	ldr	r5, [pc, #28]	; (800ad5c <_read_r+0x20>)
 800ad40:	4604      	mov	r4, r0
 800ad42:	4608      	mov	r0, r1
 800ad44:	4611      	mov	r1, r2
 800ad46:	2200      	movs	r2, #0
 800ad48:	602a      	str	r2, [r5, #0]
 800ad4a:	461a      	mov	r2, r3
 800ad4c:	f7f9 f866 	bl	8003e1c <_read>
 800ad50:	1c43      	adds	r3, r0, #1
 800ad52:	d102      	bne.n	800ad5a <_read_r+0x1e>
 800ad54:	682b      	ldr	r3, [r5, #0]
 800ad56:	b103      	cbz	r3, 800ad5a <_read_r+0x1e>
 800ad58:	6023      	str	r3, [r4, #0]
 800ad5a:	bd38      	pop	{r3, r4, r5, pc}
 800ad5c:	20000518 	.word	0x20000518

0800ad60 <pow>:
 800ad60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad62:	ed2d 8b02 	vpush	{d8}
 800ad66:	eeb0 8a40 	vmov.f32	s16, s0
 800ad6a:	eef0 8a60 	vmov.f32	s17, s1
 800ad6e:	ec55 4b11 	vmov	r4, r5, d1
 800ad72:	f000 f865 	bl	800ae40 <__ieee754_pow>
 800ad76:	4622      	mov	r2, r4
 800ad78:	462b      	mov	r3, r5
 800ad7a:	4620      	mov	r0, r4
 800ad7c:	4629      	mov	r1, r5
 800ad7e:	ec57 6b10 	vmov	r6, r7, d0
 800ad82:	f7f5 fedb 	bl	8000b3c <__aeabi_dcmpun>
 800ad86:	2800      	cmp	r0, #0
 800ad88:	d13b      	bne.n	800ae02 <pow+0xa2>
 800ad8a:	ec51 0b18 	vmov	r0, r1, d8
 800ad8e:	2200      	movs	r2, #0
 800ad90:	2300      	movs	r3, #0
 800ad92:	f7f5 fea1 	bl	8000ad8 <__aeabi_dcmpeq>
 800ad96:	b1b8      	cbz	r0, 800adc8 <pow+0x68>
 800ad98:	2200      	movs	r2, #0
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	4620      	mov	r0, r4
 800ad9e:	4629      	mov	r1, r5
 800ada0:	f7f5 fe9a 	bl	8000ad8 <__aeabi_dcmpeq>
 800ada4:	2800      	cmp	r0, #0
 800ada6:	d146      	bne.n	800ae36 <pow+0xd6>
 800ada8:	ec45 4b10 	vmov	d0, r4, r5
 800adac:	f000 fe61 	bl	800ba72 <finite>
 800adb0:	b338      	cbz	r0, 800ae02 <pow+0xa2>
 800adb2:	2200      	movs	r2, #0
 800adb4:	2300      	movs	r3, #0
 800adb6:	4620      	mov	r0, r4
 800adb8:	4629      	mov	r1, r5
 800adba:	f7f5 fe97 	bl	8000aec <__aeabi_dcmplt>
 800adbe:	b300      	cbz	r0, 800ae02 <pow+0xa2>
 800adc0:	f7fd f8a4 	bl	8007f0c <__errno>
 800adc4:	2322      	movs	r3, #34	; 0x22
 800adc6:	e01b      	b.n	800ae00 <pow+0xa0>
 800adc8:	ec47 6b10 	vmov	d0, r6, r7
 800adcc:	f000 fe51 	bl	800ba72 <finite>
 800add0:	b9e0      	cbnz	r0, 800ae0c <pow+0xac>
 800add2:	eeb0 0a48 	vmov.f32	s0, s16
 800add6:	eef0 0a68 	vmov.f32	s1, s17
 800adda:	f000 fe4a 	bl	800ba72 <finite>
 800adde:	b1a8      	cbz	r0, 800ae0c <pow+0xac>
 800ade0:	ec45 4b10 	vmov	d0, r4, r5
 800ade4:	f000 fe45 	bl	800ba72 <finite>
 800ade8:	b180      	cbz	r0, 800ae0c <pow+0xac>
 800adea:	4632      	mov	r2, r6
 800adec:	463b      	mov	r3, r7
 800adee:	4630      	mov	r0, r6
 800adf0:	4639      	mov	r1, r7
 800adf2:	f7f5 fea3 	bl	8000b3c <__aeabi_dcmpun>
 800adf6:	2800      	cmp	r0, #0
 800adf8:	d0e2      	beq.n	800adc0 <pow+0x60>
 800adfa:	f7fd f887 	bl	8007f0c <__errno>
 800adfe:	2321      	movs	r3, #33	; 0x21
 800ae00:	6003      	str	r3, [r0, #0]
 800ae02:	ecbd 8b02 	vpop	{d8}
 800ae06:	ec47 6b10 	vmov	d0, r6, r7
 800ae0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	2300      	movs	r3, #0
 800ae10:	4630      	mov	r0, r6
 800ae12:	4639      	mov	r1, r7
 800ae14:	f7f5 fe60 	bl	8000ad8 <__aeabi_dcmpeq>
 800ae18:	2800      	cmp	r0, #0
 800ae1a:	d0f2      	beq.n	800ae02 <pow+0xa2>
 800ae1c:	eeb0 0a48 	vmov.f32	s0, s16
 800ae20:	eef0 0a68 	vmov.f32	s1, s17
 800ae24:	f000 fe25 	bl	800ba72 <finite>
 800ae28:	2800      	cmp	r0, #0
 800ae2a:	d0ea      	beq.n	800ae02 <pow+0xa2>
 800ae2c:	ec45 4b10 	vmov	d0, r4, r5
 800ae30:	f000 fe1f 	bl	800ba72 <finite>
 800ae34:	e7c3      	b.n	800adbe <pow+0x5e>
 800ae36:	4f01      	ldr	r7, [pc, #4]	; (800ae3c <pow+0xdc>)
 800ae38:	2600      	movs	r6, #0
 800ae3a:	e7e2      	b.n	800ae02 <pow+0xa2>
 800ae3c:	3ff00000 	.word	0x3ff00000

0800ae40 <__ieee754_pow>:
 800ae40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae44:	ed2d 8b06 	vpush	{d8-d10}
 800ae48:	b089      	sub	sp, #36	; 0x24
 800ae4a:	ed8d 1b00 	vstr	d1, [sp]
 800ae4e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800ae52:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800ae56:	ea58 0102 	orrs.w	r1, r8, r2
 800ae5a:	ec57 6b10 	vmov	r6, r7, d0
 800ae5e:	d115      	bne.n	800ae8c <__ieee754_pow+0x4c>
 800ae60:	19b3      	adds	r3, r6, r6
 800ae62:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800ae66:	4152      	adcs	r2, r2
 800ae68:	4299      	cmp	r1, r3
 800ae6a:	4b89      	ldr	r3, [pc, #548]	; (800b090 <__ieee754_pow+0x250>)
 800ae6c:	4193      	sbcs	r3, r2
 800ae6e:	f080 84d2 	bcs.w	800b816 <__ieee754_pow+0x9d6>
 800ae72:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae76:	4630      	mov	r0, r6
 800ae78:	4639      	mov	r1, r7
 800ae7a:	f7f5 fa0f 	bl	800029c <__adddf3>
 800ae7e:	ec41 0b10 	vmov	d0, r0, r1
 800ae82:	b009      	add	sp, #36	; 0x24
 800ae84:	ecbd 8b06 	vpop	{d8-d10}
 800ae88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae8c:	4b81      	ldr	r3, [pc, #516]	; (800b094 <__ieee754_pow+0x254>)
 800ae8e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800ae92:	429c      	cmp	r4, r3
 800ae94:	ee10 aa10 	vmov	sl, s0
 800ae98:	463d      	mov	r5, r7
 800ae9a:	dc06      	bgt.n	800aeaa <__ieee754_pow+0x6a>
 800ae9c:	d101      	bne.n	800aea2 <__ieee754_pow+0x62>
 800ae9e:	2e00      	cmp	r6, #0
 800aea0:	d1e7      	bne.n	800ae72 <__ieee754_pow+0x32>
 800aea2:	4598      	cmp	r8, r3
 800aea4:	dc01      	bgt.n	800aeaa <__ieee754_pow+0x6a>
 800aea6:	d10f      	bne.n	800aec8 <__ieee754_pow+0x88>
 800aea8:	b172      	cbz	r2, 800aec8 <__ieee754_pow+0x88>
 800aeaa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800aeae:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800aeb2:	ea55 050a 	orrs.w	r5, r5, sl
 800aeb6:	d1dc      	bne.n	800ae72 <__ieee754_pow+0x32>
 800aeb8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800aebc:	18db      	adds	r3, r3, r3
 800aebe:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800aec2:	4152      	adcs	r2, r2
 800aec4:	429d      	cmp	r5, r3
 800aec6:	e7d0      	b.n	800ae6a <__ieee754_pow+0x2a>
 800aec8:	2d00      	cmp	r5, #0
 800aeca:	da3b      	bge.n	800af44 <__ieee754_pow+0x104>
 800aecc:	4b72      	ldr	r3, [pc, #456]	; (800b098 <__ieee754_pow+0x258>)
 800aece:	4598      	cmp	r8, r3
 800aed0:	dc51      	bgt.n	800af76 <__ieee754_pow+0x136>
 800aed2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800aed6:	4598      	cmp	r8, r3
 800aed8:	f340 84ac 	ble.w	800b834 <__ieee754_pow+0x9f4>
 800aedc:	ea4f 5328 	mov.w	r3, r8, asr #20
 800aee0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800aee4:	2b14      	cmp	r3, #20
 800aee6:	dd0f      	ble.n	800af08 <__ieee754_pow+0xc8>
 800aee8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800aeec:	fa22 f103 	lsr.w	r1, r2, r3
 800aef0:	fa01 f303 	lsl.w	r3, r1, r3
 800aef4:	4293      	cmp	r3, r2
 800aef6:	f040 849d 	bne.w	800b834 <__ieee754_pow+0x9f4>
 800aefa:	f001 0101 	and.w	r1, r1, #1
 800aefe:	f1c1 0302 	rsb	r3, r1, #2
 800af02:	9304      	str	r3, [sp, #16]
 800af04:	b182      	cbz	r2, 800af28 <__ieee754_pow+0xe8>
 800af06:	e05f      	b.n	800afc8 <__ieee754_pow+0x188>
 800af08:	2a00      	cmp	r2, #0
 800af0a:	d15b      	bne.n	800afc4 <__ieee754_pow+0x184>
 800af0c:	f1c3 0314 	rsb	r3, r3, #20
 800af10:	fa48 f103 	asr.w	r1, r8, r3
 800af14:	fa01 f303 	lsl.w	r3, r1, r3
 800af18:	4543      	cmp	r3, r8
 800af1a:	f040 8488 	bne.w	800b82e <__ieee754_pow+0x9ee>
 800af1e:	f001 0101 	and.w	r1, r1, #1
 800af22:	f1c1 0302 	rsb	r3, r1, #2
 800af26:	9304      	str	r3, [sp, #16]
 800af28:	4b5c      	ldr	r3, [pc, #368]	; (800b09c <__ieee754_pow+0x25c>)
 800af2a:	4598      	cmp	r8, r3
 800af2c:	d132      	bne.n	800af94 <__ieee754_pow+0x154>
 800af2e:	f1b9 0f00 	cmp.w	r9, #0
 800af32:	f280 8478 	bge.w	800b826 <__ieee754_pow+0x9e6>
 800af36:	4959      	ldr	r1, [pc, #356]	; (800b09c <__ieee754_pow+0x25c>)
 800af38:	4632      	mov	r2, r6
 800af3a:	463b      	mov	r3, r7
 800af3c:	2000      	movs	r0, #0
 800af3e:	f7f5 fc8d 	bl	800085c <__aeabi_ddiv>
 800af42:	e79c      	b.n	800ae7e <__ieee754_pow+0x3e>
 800af44:	2300      	movs	r3, #0
 800af46:	9304      	str	r3, [sp, #16]
 800af48:	2a00      	cmp	r2, #0
 800af4a:	d13d      	bne.n	800afc8 <__ieee754_pow+0x188>
 800af4c:	4b51      	ldr	r3, [pc, #324]	; (800b094 <__ieee754_pow+0x254>)
 800af4e:	4598      	cmp	r8, r3
 800af50:	d1ea      	bne.n	800af28 <__ieee754_pow+0xe8>
 800af52:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800af56:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800af5a:	ea53 030a 	orrs.w	r3, r3, sl
 800af5e:	f000 845a 	beq.w	800b816 <__ieee754_pow+0x9d6>
 800af62:	4b4f      	ldr	r3, [pc, #316]	; (800b0a0 <__ieee754_pow+0x260>)
 800af64:	429c      	cmp	r4, r3
 800af66:	dd08      	ble.n	800af7a <__ieee754_pow+0x13a>
 800af68:	f1b9 0f00 	cmp.w	r9, #0
 800af6c:	f2c0 8457 	blt.w	800b81e <__ieee754_pow+0x9de>
 800af70:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af74:	e783      	b.n	800ae7e <__ieee754_pow+0x3e>
 800af76:	2302      	movs	r3, #2
 800af78:	e7e5      	b.n	800af46 <__ieee754_pow+0x106>
 800af7a:	f1b9 0f00 	cmp.w	r9, #0
 800af7e:	f04f 0000 	mov.w	r0, #0
 800af82:	f04f 0100 	mov.w	r1, #0
 800af86:	f6bf af7a 	bge.w	800ae7e <__ieee754_pow+0x3e>
 800af8a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800af8e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800af92:	e774      	b.n	800ae7e <__ieee754_pow+0x3e>
 800af94:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800af98:	d106      	bne.n	800afa8 <__ieee754_pow+0x168>
 800af9a:	4632      	mov	r2, r6
 800af9c:	463b      	mov	r3, r7
 800af9e:	4630      	mov	r0, r6
 800afa0:	4639      	mov	r1, r7
 800afa2:	f7f5 fb31 	bl	8000608 <__aeabi_dmul>
 800afa6:	e76a      	b.n	800ae7e <__ieee754_pow+0x3e>
 800afa8:	4b3e      	ldr	r3, [pc, #248]	; (800b0a4 <__ieee754_pow+0x264>)
 800afaa:	4599      	cmp	r9, r3
 800afac:	d10c      	bne.n	800afc8 <__ieee754_pow+0x188>
 800afae:	2d00      	cmp	r5, #0
 800afb0:	db0a      	blt.n	800afc8 <__ieee754_pow+0x188>
 800afb2:	ec47 6b10 	vmov	d0, r6, r7
 800afb6:	b009      	add	sp, #36	; 0x24
 800afb8:	ecbd 8b06 	vpop	{d8-d10}
 800afbc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afc0:	f000 bc6c 	b.w	800b89c <__ieee754_sqrt>
 800afc4:	2300      	movs	r3, #0
 800afc6:	9304      	str	r3, [sp, #16]
 800afc8:	ec47 6b10 	vmov	d0, r6, r7
 800afcc:	f000 fd48 	bl	800ba60 <fabs>
 800afd0:	ec51 0b10 	vmov	r0, r1, d0
 800afd4:	f1ba 0f00 	cmp.w	sl, #0
 800afd8:	d129      	bne.n	800b02e <__ieee754_pow+0x1ee>
 800afda:	b124      	cbz	r4, 800afe6 <__ieee754_pow+0x1a6>
 800afdc:	4b2f      	ldr	r3, [pc, #188]	; (800b09c <__ieee754_pow+0x25c>)
 800afde:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800afe2:	429a      	cmp	r2, r3
 800afe4:	d123      	bne.n	800b02e <__ieee754_pow+0x1ee>
 800afe6:	f1b9 0f00 	cmp.w	r9, #0
 800afea:	da05      	bge.n	800aff8 <__ieee754_pow+0x1b8>
 800afec:	4602      	mov	r2, r0
 800afee:	460b      	mov	r3, r1
 800aff0:	2000      	movs	r0, #0
 800aff2:	492a      	ldr	r1, [pc, #168]	; (800b09c <__ieee754_pow+0x25c>)
 800aff4:	f7f5 fc32 	bl	800085c <__aeabi_ddiv>
 800aff8:	2d00      	cmp	r5, #0
 800affa:	f6bf af40 	bge.w	800ae7e <__ieee754_pow+0x3e>
 800affe:	9b04      	ldr	r3, [sp, #16]
 800b000:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b004:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b008:	4323      	orrs	r3, r4
 800b00a:	d108      	bne.n	800b01e <__ieee754_pow+0x1de>
 800b00c:	4602      	mov	r2, r0
 800b00e:	460b      	mov	r3, r1
 800b010:	4610      	mov	r0, r2
 800b012:	4619      	mov	r1, r3
 800b014:	f7f5 f940 	bl	8000298 <__aeabi_dsub>
 800b018:	4602      	mov	r2, r0
 800b01a:	460b      	mov	r3, r1
 800b01c:	e78f      	b.n	800af3e <__ieee754_pow+0xfe>
 800b01e:	9b04      	ldr	r3, [sp, #16]
 800b020:	2b01      	cmp	r3, #1
 800b022:	f47f af2c 	bne.w	800ae7e <__ieee754_pow+0x3e>
 800b026:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b02a:	4619      	mov	r1, r3
 800b02c:	e727      	b.n	800ae7e <__ieee754_pow+0x3e>
 800b02e:	0feb      	lsrs	r3, r5, #31
 800b030:	3b01      	subs	r3, #1
 800b032:	9306      	str	r3, [sp, #24]
 800b034:	9a06      	ldr	r2, [sp, #24]
 800b036:	9b04      	ldr	r3, [sp, #16]
 800b038:	4313      	orrs	r3, r2
 800b03a:	d102      	bne.n	800b042 <__ieee754_pow+0x202>
 800b03c:	4632      	mov	r2, r6
 800b03e:	463b      	mov	r3, r7
 800b040:	e7e6      	b.n	800b010 <__ieee754_pow+0x1d0>
 800b042:	4b19      	ldr	r3, [pc, #100]	; (800b0a8 <__ieee754_pow+0x268>)
 800b044:	4598      	cmp	r8, r3
 800b046:	f340 80fb 	ble.w	800b240 <__ieee754_pow+0x400>
 800b04a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b04e:	4598      	cmp	r8, r3
 800b050:	4b13      	ldr	r3, [pc, #76]	; (800b0a0 <__ieee754_pow+0x260>)
 800b052:	dd0c      	ble.n	800b06e <__ieee754_pow+0x22e>
 800b054:	429c      	cmp	r4, r3
 800b056:	dc0f      	bgt.n	800b078 <__ieee754_pow+0x238>
 800b058:	f1b9 0f00 	cmp.w	r9, #0
 800b05c:	da0f      	bge.n	800b07e <__ieee754_pow+0x23e>
 800b05e:	2000      	movs	r0, #0
 800b060:	b009      	add	sp, #36	; 0x24
 800b062:	ecbd 8b06 	vpop	{d8-d10}
 800b066:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b06a:	f000 bcf0 	b.w	800ba4e <__math_oflow>
 800b06e:	429c      	cmp	r4, r3
 800b070:	dbf2      	blt.n	800b058 <__ieee754_pow+0x218>
 800b072:	4b0a      	ldr	r3, [pc, #40]	; (800b09c <__ieee754_pow+0x25c>)
 800b074:	429c      	cmp	r4, r3
 800b076:	dd19      	ble.n	800b0ac <__ieee754_pow+0x26c>
 800b078:	f1b9 0f00 	cmp.w	r9, #0
 800b07c:	dcef      	bgt.n	800b05e <__ieee754_pow+0x21e>
 800b07e:	2000      	movs	r0, #0
 800b080:	b009      	add	sp, #36	; 0x24
 800b082:	ecbd 8b06 	vpop	{d8-d10}
 800b086:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b08a:	f000 bcd7 	b.w	800ba3c <__math_uflow>
 800b08e:	bf00      	nop
 800b090:	fff00000 	.word	0xfff00000
 800b094:	7ff00000 	.word	0x7ff00000
 800b098:	433fffff 	.word	0x433fffff
 800b09c:	3ff00000 	.word	0x3ff00000
 800b0a0:	3fefffff 	.word	0x3fefffff
 800b0a4:	3fe00000 	.word	0x3fe00000
 800b0a8:	41e00000 	.word	0x41e00000
 800b0ac:	4b60      	ldr	r3, [pc, #384]	; (800b230 <__ieee754_pow+0x3f0>)
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	f7f5 f8f2 	bl	8000298 <__aeabi_dsub>
 800b0b4:	a354      	add	r3, pc, #336	; (adr r3, 800b208 <__ieee754_pow+0x3c8>)
 800b0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ba:	4604      	mov	r4, r0
 800b0bc:	460d      	mov	r5, r1
 800b0be:	f7f5 faa3 	bl	8000608 <__aeabi_dmul>
 800b0c2:	a353      	add	r3, pc, #332	; (adr r3, 800b210 <__ieee754_pow+0x3d0>)
 800b0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c8:	4606      	mov	r6, r0
 800b0ca:	460f      	mov	r7, r1
 800b0cc:	4620      	mov	r0, r4
 800b0ce:	4629      	mov	r1, r5
 800b0d0:	f7f5 fa9a 	bl	8000608 <__aeabi_dmul>
 800b0d4:	4b57      	ldr	r3, [pc, #348]	; (800b234 <__ieee754_pow+0x3f4>)
 800b0d6:	4682      	mov	sl, r0
 800b0d8:	468b      	mov	fp, r1
 800b0da:	2200      	movs	r2, #0
 800b0dc:	4620      	mov	r0, r4
 800b0de:	4629      	mov	r1, r5
 800b0e0:	f7f5 fa92 	bl	8000608 <__aeabi_dmul>
 800b0e4:	4602      	mov	r2, r0
 800b0e6:	460b      	mov	r3, r1
 800b0e8:	a14b      	add	r1, pc, #300	; (adr r1, 800b218 <__ieee754_pow+0x3d8>)
 800b0ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0ee:	f7f5 f8d3 	bl	8000298 <__aeabi_dsub>
 800b0f2:	4622      	mov	r2, r4
 800b0f4:	462b      	mov	r3, r5
 800b0f6:	f7f5 fa87 	bl	8000608 <__aeabi_dmul>
 800b0fa:	4602      	mov	r2, r0
 800b0fc:	460b      	mov	r3, r1
 800b0fe:	2000      	movs	r0, #0
 800b100:	494d      	ldr	r1, [pc, #308]	; (800b238 <__ieee754_pow+0x3f8>)
 800b102:	f7f5 f8c9 	bl	8000298 <__aeabi_dsub>
 800b106:	4622      	mov	r2, r4
 800b108:	4680      	mov	r8, r0
 800b10a:	4689      	mov	r9, r1
 800b10c:	462b      	mov	r3, r5
 800b10e:	4620      	mov	r0, r4
 800b110:	4629      	mov	r1, r5
 800b112:	f7f5 fa79 	bl	8000608 <__aeabi_dmul>
 800b116:	4602      	mov	r2, r0
 800b118:	460b      	mov	r3, r1
 800b11a:	4640      	mov	r0, r8
 800b11c:	4649      	mov	r1, r9
 800b11e:	f7f5 fa73 	bl	8000608 <__aeabi_dmul>
 800b122:	a33f      	add	r3, pc, #252	; (adr r3, 800b220 <__ieee754_pow+0x3e0>)
 800b124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b128:	f7f5 fa6e 	bl	8000608 <__aeabi_dmul>
 800b12c:	4602      	mov	r2, r0
 800b12e:	460b      	mov	r3, r1
 800b130:	4650      	mov	r0, sl
 800b132:	4659      	mov	r1, fp
 800b134:	f7f5 f8b0 	bl	8000298 <__aeabi_dsub>
 800b138:	4602      	mov	r2, r0
 800b13a:	460b      	mov	r3, r1
 800b13c:	4680      	mov	r8, r0
 800b13e:	4689      	mov	r9, r1
 800b140:	4630      	mov	r0, r6
 800b142:	4639      	mov	r1, r7
 800b144:	f7f5 f8aa 	bl	800029c <__adddf3>
 800b148:	2000      	movs	r0, #0
 800b14a:	4632      	mov	r2, r6
 800b14c:	463b      	mov	r3, r7
 800b14e:	4604      	mov	r4, r0
 800b150:	460d      	mov	r5, r1
 800b152:	f7f5 f8a1 	bl	8000298 <__aeabi_dsub>
 800b156:	4602      	mov	r2, r0
 800b158:	460b      	mov	r3, r1
 800b15a:	4640      	mov	r0, r8
 800b15c:	4649      	mov	r1, r9
 800b15e:	f7f5 f89b 	bl	8000298 <__aeabi_dsub>
 800b162:	9b04      	ldr	r3, [sp, #16]
 800b164:	9a06      	ldr	r2, [sp, #24]
 800b166:	3b01      	subs	r3, #1
 800b168:	4313      	orrs	r3, r2
 800b16a:	4682      	mov	sl, r0
 800b16c:	468b      	mov	fp, r1
 800b16e:	f040 81e7 	bne.w	800b540 <__ieee754_pow+0x700>
 800b172:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800b228 <__ieee754_pow+0x3e8>
 800b176:	eeb0 8a47 	vmov.f32	s16, s14
 800b17a:	eef0 8a67 	vmov.f32	s17, s15
 800b17e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b182:	2600      	movs	r6, #0
 800b184:	4632      	mov	r2, r6
 800b186:	463b      	mov	r3, r7
 800b188:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b18c:	f7f5 f884 	bl	8000298 <__aeabi_dsub>
 800b190:	4622      	mov	r2, r4
 800b192:	462b      	mov	r3, r5
 800b194:	f7f5 fa38 	bl	8000608 <__aeabi_dmul>
 800b198:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b19c:	4680      	mov	r8, r0
 800b19e:	4689      	mov	r9, r1
 800b1a0:	4650      	mov	r0, sl
 800b1a2:	4659      	mov	r1, fp
 800b1a4:	f7f5 fa30 	bl	8000608 <__aeabi_dmul>
 800b1a8:	4602      	mov	r2, r0
 800b1aa:	460b      	mov	r3, r1
 800b1ac:	4640      	mov	r0, r8
 800b1ae:	4649      	mov	r1, r9
 800b1b0:	f7f5 f874 	bl	800029c <__adddf3>
 800b1b4:	4632      	mov	r2, r6
 800b1b6:	463b      	mov	r3, r7
 800b1b8:	4680      	mov	r8, r0
 800b1ba:	4689      	mov	r9, r1
 800b1bc:	4620      	mov	r0, r4
 800b1be:	4629      	mov	r1, r5
 800b1c0:	f7f5 fa22 	bl	8000608 <__aeabi_dmul>
 800b1c4:	460b      	mov	r3, r1
 800b1c6:	4604      	mov	r4, r0
 800b1c8:	460d      	mov	r5, r1
 800b1ca:	4602      	mov	r2, r0
 800b1cc:	4649      	mov	r1, r9
 800b1ce:	4640      	mov	r0, r8
 800b1d0:	f7f5 f864 	bl	800029c <__adddf3>
 800b1d4:	4b19      	ldr	r3, [pc, #100]	; (800b23c <__ieee754_pow+0x3fc>)
 800b1d6:	4299      	cmp	r1, r3
 800b1d8:	ec45 4b19 	vmov	d9, r4, r5
 800b1dc:	4606      	mov	r6, r0
 800b1de:	460f      	mov	r7, r1
 800b1e0:	468b      	mov	fp, r1
 800b1e2:	f340 82f1 	ble.w	800b7c8 <__ieee754_pow+0x988>
 800b1e6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b1ea:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b1ee:	4303      	orrs	r3, r0
 800b1f0:	f000 81e4 	beq.w	800b5bc <__ieee754_pow+0x77c>
 800b1f4:	ec51 0b18 	vmov	r0, r1, d8
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	f7f5 fc76 	bl	8000aec <__aeabi_dcmplt>
 800b200:	3800      	subs	r0, #0
 800b202:	bf18      	it	ne
 800b204:	2001      	movne	r0, #1
 800b206:	e72b      	b.n	800b060 <__ieee754_pow+0x220>
 800b208:	60000000 	.word	0x60000000
 800b20c:	3ff71547 	.word	0x3ff71547
 800b210:	f85ddf44 	.word	0xf85ddf44
 800b214:	3e54ae0b 	.word	0x3e54ae0b
 800b218:	55555555 	.word	0x55555555
 800b21c:	3fd55555 	.word	0x3fd55555
 800b220:	652b82fe 	.word	0x652b82fe
 800b224:	3ff71547 	.word	0x3ff71547
 800b228:	00000000 	.word	0x00000000
 800b22c:	bff00000 	.word	0xbff00000
 800b230:	3ff00000 	.word	0x3ff00000
 800b234:	3fd00000 	.word	0x3fd00000
 800b238:	3fe00000 	.word	0x3fe00000
 800b23c:	408fffff 	.word	0x408fffff
 800b240:	4bd5      	ldr	r3, [pc, #852]	; (800b598 <__ieee754_pow+0x758>)
 800b242:	402b      	ands	r3, r5
 800b244:	2200      	movs	r2, #0
 800b246:	b92b      	cbnz	r3, 800b254 <__ieee754_pow+0x414>
 800b248:	4bd4      	ldr	r3, [pc, #848]	; (800b59c <__ieee754_pow+0x75c>)
 800b24a:	f7f5 f9dd 	bl	8000608 <__aeabi_dmul>
 800b24e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b252:	460c      	mov	r4, r1
 800b254:	1523      	asrs	r3, r4, #20
 800b256:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b25a:	4413      	add	r3, r2
 800b25c:	9305      	str	r3, [sp, #20]
 800b25e:	4bd0      	ldr	r3, [pc, #832]	; (800b5a0 <__ieee754_pow+0x760>)
 800b260:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b264:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b268:	429c      	cmp	r4, r3
 800b26a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b26e:	dd08      	ble.n	800b282 <__ieee754_pow+0x442>
 800b270:	4bcc      	ldr	r3, [pc, #816]	; (800b5a4 <__ieee754_pow+0x764>)
 800b272:	429c      	cmp	r4, r3
 800b274:	f340 8162 	ble.w	800b53c <__ieee754_pow+0x6fc>
 800b278:	9b05      	ldr	r3, [sp, #20]
 800b27a:	3301      	adds	r3, #1
 800b27c:	9305      	str	r3, [sp, #20]
 800b27e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b282:	2400      	movs	r4, #0
 800b284:	00e3      	lsls	r3, r4, #3
 800b286:	9307      	str	r3, [sp, #28]
 800b288:	4bc7      	ldr	r3, [pc, #796]	; (800b5a8 <__ieee754_pow+0x768>)
 800b28a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b28e:	ed93 7b00 	vldr	d7, [r3]
 800b292:	4629      	mov	r1, r5
 800b294:	ec53 2b17 	vmov	r2, r3, d7
 800b298:	eeb0 9a47 	vmov.f32	s18, s14
 800b29c:	eef0 9a67 	vmov.f32	s19, s15
 800b2a0:	4682      	mov	sl, r0
 800b2a2:	f7f4 fff9 	bl	8000298 <__aeabi_dsub>
 800b2a6:	4652      	mov	r2, sl
 800b2a8:	4606      	mov	r6, r0
 800b2aa:	460f      	mov	r7, r1
 800b2ac:	462b      	mov	r3, r5
 800b2ae:	ec51 0b19 	vmov	r0, r1, d9
 800b2b2:	f7f4 fff3 	bl	800029c <__adddf3>
 800b2b6:	4602      	mov	r2, r0
 800b2b8:	460b      	mov	r3, r1
 800b2ba:	2000      	movs	r0, #0
 800b2bc:	49bb      	ldr	r1, [pc, #748]	; (800b5ac <__ieee754_pow+0x76c>)
 800b2be:	f7f5 facd 	bl	800085c <__aeabi_ddiv>
 800b2c2:	ec41 0b1a 	vmov	d10, r0, r1
 800b2c6:	4602      	mov	r2, r0
 800b2c8:	460b      	mov	r3, r1
 800b2ca:	4630      	mov	r0, r6
 800b2cc:	4639      	mov	r1, r7
 800b2ce:	f7f5 f99b 	bl	8000608 <__aeabi_dmul>
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2d8:	9302      	str	r3, [sp, #8]
 800b2da:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b2de:	46ab      	mov	fp, r5
 800b2e0:	106d      	asrs	r5, r5, #1
 800b2e2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b2e6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b2ea:	ec41 0b18 	vmov	d8, r0, r1
 800b2ee:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	4640      	mov	r0, r8
 800b2f6:	4649      	mov	r1, r9
 800b2f8:	4614      	mov	r4, r2
 800b2fa:	461d      	mov	r5, r3
 800b2fc:	f7f5 f984 	bl	8000608 <__aeabi_dmul>
 800b300:	4602      	mov	r2, r0
 800b302:	460b      	mov	r3, r1
 800b304:	4630      	mov	r0, r6
 800b306:	4639      	mov	r1, r7
 800b308:	f7f4 ffc6 	bl	8000298 <__aeabi_dsub>
 800b30c:	ec53 2b19 	vmov	r2, r3, d9
 800b310:	4606      	mov	r6, r0
 800b312:	460f      	mov	r7, r1
 800b314:	4620      	mov	r0, r4
 800b316:	4629      	mov	r1, r5
 800b318:	f7f4 ffbe 	bl	8000298 <__aeabi_dsub>
 800b31c:	4602      	mov	r2, r0
 800b31e:	460b      	mov	r3, r1
 800b320:	4650      	mov	r0, sl
 800b322:	4659      	mov	r1, fp
 800b324:	f7f4 ffb8 	bl	8000298 <__aeabi_dsub>
 800b328:	4642      	mov	r2, r8
 800b32a:	464b      	mov	r3, r9
 800b32c:	f7f5 f96c 	bl	8000608 <__aeabi_dmul>
 800b330:	4602      	mov	r2, r0
 800b332:	460b      	mov	r3, r1
 800b334:	4630      	mov	r0, r6
 800b336:	4639      	mov	r1, r7
 800b338:	f7f4 ffae 	bl	8000298 <__aeabi_dsub>
 800b33c:	ec53 2b1a 	vmov	r2, r3, d10
 800b340:	f7f5 f962 	bl	8000608 <__aeabi_dmul>
 800b344:	ec53 2b18 	vmov	r2, r3, d8
 800b348:	ec41 0b19 	vmov	d9, r0, r1
 800b34c:	ec51 0b18 	vmov	r0, r1, d8
 800b350:	f7f5 f95a 	bl	8000608 <__aeabi_dmul>
 800b354:	a37c      	add	r3, pc, #496	; (adr r3, 800b548 <__ieee754_pow+0x708>)
 800b356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b35a:	4604      	mov	r4, r0
 800b35c:	460d      	mov	r5, r1
 800b35e:	f7f5 f953 	bl	8000608 <__aeabi_dmul>
 800b362:	a37b      	add	r3, pc, #492	; (adr r3, 800b550 <__ieee754_pow+0x710>)
 800b364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b368:	f7f4 ff98 	bl	800029c <__adddf3>
 800b36c:	4622      	mov	r2, r4
 800b36e:	462b      	mov	r3, r5
 800b370:	f7f5 f94a 	bl	8000608 <__aeabi_dmul>
 800b374:	a378      	add	r3, pc, #480	; (adr r3, 800b558 <__ieee754_pow+0x718>)
 800b376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b37a:	f7f4 ff8f 	bl	800029c <__adddf3>
 800b37e:	4622      	mov	r2, r4
 800b380:	462b      	mov	r3, r5
 800b382:	f7f5 f941 	bl	8000608 <__aeabi_dmul>
 800b386:	a376      	add	r3, pc, #472	; (adr r3, 800b560 <__ieee754_pow+0x720>)
 800b388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b38c:	f7f4 ff86 	bl	800029c <__adddf3>
 800b390:	4622      	mov	r2, r4
 800b392:	462b      	mov	r3, r5
 800b394:	f7f5 f938 	bl	8000608 <__aeabi_dmul>
 800b398:	a373      	add	r3, pc, #460	; (adr r3, 800b568 <__ieee754_pow+0x728>)
 800b39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b39e:	f7f4 ff7d 	bl	800029c <__adddf3>
 800b3a2:	4622      	mov	r2, r4
 800b3a4:	462b      	mov	r3, r5
 800b3a6:	f7f5 f92f 	bl	8000608 <__aeabi_dmul>
 800b3aa:	a371      	add	r3, pc, #452	; (adr r3, 800b570 <__ieee754_pow+0x730>)
 800b3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3b0:	f7f4 ff74 	bl	800029c <__adddf3>
 800b3b4:	4622      	mov	r2, r4
 800b3b6:	4606      	mov	r6, r0
 800b3b8:	460f      	mov	r7, r1
 800b3ba:	462b      	mov	r3, r5
 800b3bc:	4620      	mov	r0, r4
 800b3be:	4629      	mov	r1, r5
 800b3c0:	f7f5 f922 	bl	8000608 <__aeabi_dmul>
 800b3c4:	4602      	mov	r2, r0
 800b3c6:	460b      	mov	r3, r1
 800b3c8:	4630      	mov	r0, r6
 800b3ca:	4639      	mov	r1, r7
 800b3cc:	f7f5 f91c 	bl	8000608 <__aeabi_dmul>
 800b3d0:	4642      	mov	r2, r8
 800b3d2:	4604      	mov	r4, r0
 800b3d4:	460d      	mov	r5, r1
 800b3d6:	464b      	mov	r3, r9
 800b3d8:	ec51 0b18 	vmov	r0, r1, d8
 800b3dc:	f7f4 ff5e 	bl	800029c <__adddf3>
 800b3e0:	ec53 2b19 	vmov	r2, r3, d9
 800b3e4:	f7f5 f910 	bl	8000608 <__aeabi_dmul>
 800b3e8:	4622      	mov	r2, r4
 800b3ea:	462b      	mov	r3, r5
 800b3ec:	f7f4 ff56 	bl	800029c <__adddf3>
 800b3f0:	4642      	mov	r2, r8
 800b3f2:	4682      	mov	sl, r0
 800b3f4:	468b      	mov	fp, r1
 800b3f6:	464b      	mov	r3, r9
 800b3f8:	4640      	mov	r0, r8
 800b3fa:	4649      	mov	r1, r9
 800b3fc:	f7f5 f904 	bl	8000608 <__aeabi_dmul>
 800b400:	4b6b      	ldr	r3, [pc, #428]	; (800b5b0 <__ieee754_pow+0x770>)
 800b402:	2200      	movs	r2, #0
 800b404:	4606      	mov	r6, r0
 800b406:	460f      	mov	r7, r1
 800b408:	f7f4 ff48 	bl	800029c <__adddf3>
 800b40c:	4652      	mov	r2, sl
 800b40e:	465b      	mov	r3, fp
 800b410:	f7f4 ff44 	bl	800029c <__adddf3>
 800b414:	2000      	movs	r0, #0
 800b416:	4604      	mov	r4, r0
 800b418:	460d      	mov	r5, r1
 800b41a:	4602      	mov	r2, r0
 800b41c:	460b      	mov	r3, r1
 800b41e:	4640      	mov	r0, r8
 800b420:	4649      	mov	r1, r9
 800b422:	f7f5 f8f1 	bl	8000608 <__aeabi_dmul>
 800b426:	4b62      	ldr	r3, [pc, #392]	; (800b5b0 <__ieee754_pow+0x770>)
 800b428:	4680      	mov	r8, r0
 800b42a:	4689      	mov	r9, r1
 800b42c:	2200      	movs	r2, #0
 800b42e:	4620      	mov	r0, r4
 800b430:	4629      	mov	r1, r5
 800b432:	f7f4 ff31 	bl	8000298 <__aeabi_dsub>
 800b436:	4632      	mov	r2, r6
 800b438:	463b      	mov	r3, r7
 800b43a:	f7f4 ff2d 	bl	8000298 <__aeabi_dsub>
 800b43e:	4602      	mov	r2, r0
 800b440:	460b      	mov	r3, r1
 800b442:	4650      	mov	r0, sl
 800b444:	4659      	mov	r1, fp
 800b446:	f7f4 ff27 	bl	8000298 <__aeabi_dsub>
 800b44a:	ec53 2b18 	vmov	r2, r3, d8
 800b44e:	f7f5 f8db 	bl	8000608 <__aeabi_dmul>
 800b452:	4622      	mov	r2, r4
 800b454:	4606      	mov	r6, r0
 800b456:	460f      	mov	r7, r1
 800b458:	462b      	mov	r3, r5
 800b45a:	ec51 0b19 	vmov	r0, r1, d9
 800b45e:	f7f5 f8d3 	bl	8000608 <__aeabi_dmul>
 800b462:	4602      	mov	r2, r0
 800b464:	460b      	mov	r3, r1
 800b466:	4630      	mov	r0, r6
 800b468:	4639      	mov	r1, r7
 800b46a:	f7f4 ff17 	bl	800029c <__adddf3>
 800b46e:	4606      	mov	r6, r0
 800b470:	460f      	mov	r7, r1
 800b472:	4602      	mov	r2, r0
 800b474:	460b      	mov	r3, r1
 800b476:	4640      	mov	r0, r8
 800b478:	4649      	mov	r1, r9
 800b47a:	f7f4 ff0f 	bl	800029c <__adddf3>
 800b47e:	a33e      	add	r3, pc, #248	; (adr r3, 800b578 <__ieee754_pow+0x738>)
 800b480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b484:	2000      	movs	r0, #0
 800b486:	4604      	mov	r4, r0
 800b488:	460d      	mov	r5, r1
 800b48a:	f7f5 f8bd 	bl	8000608 <__aeabi_dmul>
 800b48e:	4642      	mov	r2, r8
 800b490:	ec41 0b18 	vmov	d8, r0, r1
 800b494:	464b      	mov	r3, r9
 800b496:	4620      	mov	r0, r4
 800b498:	4629      	mov	r1, r5
 800b49a:	f7f4 fefd 	bl	8000298 <__aeabi_dsub>
 800b49e:	4602      	mov	r2, r0
 800b4a0:	460b      	mov	r3, r1
 800b4a2:	4630      	mov	r0, r6
 800b4a4:	4639      	mov	r1, r7
 800b4a6:	f7f4 fef7 	bl	8000298 <__aeabi_dsub>
 800b4aa:	a335      	add	r3, pc, #212	; (adr r3, 800b580 <__ieee754_pow+0x740>)
 800b4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b0:	f7f5 f8aa 	bl	8000608 <__aeabi_dmul>
 800b4b4:	a334      	add	r3, pc, #208	; (adr r3, 800b588 <__ieee754_pow+0x748>)
 800b4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ba:	4606      	mov	r6, r0
 800b4bc:	460f      	mov	r7, r1
 800b4be:	4620      	mov	r0, r4
 800b4c0:	4629      	mov	r1, r5
 800b4c2:	f7f5 f8a1 	bl	8000608 <__aeabi_dmul>
 800b4c6:	4602      	mov	r2, r0
 800b4c8:	460b      	mov	r3, r1
 800b4ca:	4630      	mov	r0, r6
 800b4cc:	4639      	mov	r1, r7
 800b4ce:	f7f4 fee5 	bl	800029c <__adddf3>
 800b4d2:	9a07      	ldr	r2, [sp, #28]
 800b4d4:	4b37      	ldr	r3, [pc, #220]	; (800b5b4 <__ieee754_pow+0x774>)
 800b4d6:	4413      	add	r3, r2
 800b4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4dc:	f7f4 fede 	bl	800029c <__adddf3>
 800b4e0:	4682      	mov	sl, r0
 800b4e2:	9805      	ldr	r0, [sp, #20]
 800b4e4:	468b      	mov	fp, r1
 800b4e6:	f7f5 f825 	bl	8000534 <__aeabi_i2d>
 800b4ea:	9a07      	ldr	r2, [sp, #28]
 800b4ec:	4b32      	ldr	r3, [pc, #200]	; (800b5b8 <__ieee754_pow+0x778>)
 800b4ee:	4413      	add	r3, r2
 800b4f0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b4f4:	4606      	mov	r6, r0
 800b4f6:	460f      	mov	r7, r1
 800b4f8:	4652      	mov	r2, sl
 800b4fa:	465b      	mov	r3, fp
 800b4fc:	ec51 0b18 	vmov	r0, r1, d8
 800b500:	f7f4 fecc 	bl	800029c <__adddf3>
 800b504:	4642      	mov	r2, r8
 800b506:	464b      	mov	r3, r9
 800b508:	f7f4 fec8 	bl	800029c <__adddf3>
 800b50c:	4632      	mov	r2, r6
 800b50e:	463b      	mov	r3, r7
 800b510:	f7f4 fec4 	bl	800029c <__adddf3>
 800b514:	2000      	movs	r0, #0
 800b516:	4632      	mov	r2, r6
 800b518:	463b      	mov	r3, r7
 800b51a:	4604      	mov	r4, r0
 800b51c:	460d      	mov	r5, r1
 800b51e:	f7f4 febb 	bl	8000298 <__aeabi_dsub>
 800b522:	4642      	mov	r2, r8
 800b524:	464b      	mov	r3, r9
 800b526:	f7f4 feb7 	bl	8000298 <__aeabi_dsub>
 800b52a:	ec53 2b18 	vmov	r2, r3, d8
 800b52e:	f7f4 feb3 	bl	8000298 <__aeabi_dsub>
 800b532:	4602      	mov	r2, r0
 800b534:	460b      	mov	r3, r1
 800b536:	4650      	mov	r0, sl
 800b538:	4659      	mov	r1, fp
 800b53a:	e610      	b.n	800b15e <__ieee754_pow+0x31e>
 800b53c:	2401      	movs	r4, #1
 800b53e:	e6a1      	b.n	800b284 <__ieee754_pow+0x444>
 800b540:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800b590 <__ieee754_pow+0x750>
 800b544:	e617      	b.n	800b176 <__ieee754_pow+0x336>
 800b546:	bf00      	nop
 800b548:	4a454eef 	.word	0x4a454eef
 800b54c:	3fca7e28 	.word	0x3fca7e28
 800b550:	93c9db65 	.word	0x93c9db65
 800b554:	3fcd864a 	.word	0x3fcd864a
 800b558:	a91d4101 	.word	0xa91d4101
 800b55c:	3fd17460 	.word	0x3fd17460
 800b560:	518f264d 	.word	0x518f264d
 800b564:	3fd55555 	.word	0x3fd55555
 800b568:	db6fabff 	.word	0xdb6fabff
 800b56c:	3fdb6db6 	.word	0x3fdb6db6
 800b570:	33333303 	.word	0x33333303
 800b574:	3fe33333 	.word	0x3fe33333
 800b578:	e0000000 	.word	0xe0000000
 800b57c:	3feec709 	.word	0x3feec709
 800b580:	dc3a03fd 	.word	0xdc3a03fd
 800b584:	3feec709 	.word	0x3feec709
 800b588:	145b01f5 	.word	0x145b01f5
 800b58c:	be3e2fe0 	.word	0xbe3e2fe0
 800b590:	00000000 	.word	0x00000000
 800b594:	3ff00000 	.word	0x3ff00000
 800b598:	7ff00000 	.word	0x7ff00000
 800b59c:	43400000 	.word	0x43400000
 800b5a0:	0003988e 	.word	0x0003988e
 800b5a4:	000bb679 	.word	0x000bb679
 800b5a8:	0800c080 	.word	0x0800c080
 800b5ac:	3ff00000 	.word	0x3ff00000
 800b5b0:	40080000 	.word	0x40080000
 800b5b4:	0800c0a0 	.word	0x0800c0a0
 800b5b8:	0800c090 	.word	0x0800c090
 800b5bc:	a3b5      	add	r3, pc, #724	; (adr r3, 800b894 <__ieee754_pow+0xa54>)
 800b5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c2:	4640      	mov	r0, r8
 800b5c4:	4649      	mov	r1, r9
 800b5c6:	f7f4 fe69 	bl	800029c <__adddf3>
 800b5ca:	4622      	mov	r2, r4
 800b5cc:	ec41 0b1a 	vmov	d10, r0, r1
 800b5d0:	462b      	mov	r3, r5
 800b5d2:	4630      	mov	r0, r6
 800b5d4:	4639      	mov	r1, r7
 800b5d6:	f7f4 fe5f 	bl	8000298 <__aeabi_dsub>
 800b5da:	4602      	mov	r2, r0
 800b5dc:	460b      	mov	r3, r1
 800b5de:	ec51 0b1a 	vmov	r0, r1, d10
 800b5e2:	f7f5 faa1 	bl	8000b28 <__aeabi_dcmpgt>
 800b5e6:	2800      	cmp	r0, #0
 800b5e8:	f47f ae04 	bne.w	800b1f4 <__ieee754_pow+0x3b4>
 800b5ec:	4aa4      	ldr	r2, [pc, #656]	; (800b880 <__ieee754_pow+0xa40>)
 800b5ee:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	f340 8108 	ble.w	800b808 <__ieee754_pow+0x9c8>
 800b5f8:	151b      	asrs	r3, r3, #20
 800b5fa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b5fe:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b602:	fa4a f303 	asr.w	r3, sl, r3
 800b606:	445b      	add	r3, fp
 800b608:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b60c:	4e9d      	ldr	r6, [pc, #628]	; (800b884 <__ieee754_pow+0xa44>)
 800b60e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b612:	4116      	asrs	r6, r2
 800b614:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b618:	2000      	movs	r0, #0
 800b61a:	ea23 0106 	bic.w	r1, r3, r6
 800b61e:	f1c2 0214 	rsb	r2, r2, #20
 800b622:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b626:	fa4a fa02 	asr.w	sl, sl, r2
 800b62a:	f1bb 0f00 	cmp.w	fp, #0
 800b62e:	4602      	mov	r2, r0
 800b630:	460b      	mov	r3, r1
 800b632:	4620      	mov	r0, r4
 800b634:	4629      	mov	r1, r5
 800b636:	bfb8      	it	lt
 800b638:	f1ca 0a00 	rsblt	sl, sl, #0
 800b63c:	f7f4 fe2c 	bl	8000298 <__aeabi_dsub>
 800b640:	ec41 0b19 	vmov	d9, r0, r1
 800b644:	4642      	mov	r2, r8
 800b646:	464b      	mov	r3, r9
 800b648:	ec51 0b19 	vmov	r0, r1, d9
 800b64c:	f7f4 fe26 	bl	800029c <__adddf3>
 800b650:	a37b      	add	r3, pc, #492	; (adr r3, 800b840 <__ieee754_pow+0xa00>)
 800b652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b656:	2000      	movs	r0, #0
 800b658:	4604      	mov	r4, r0
 800b65a:	460d      	mov	r5, r1
 800b65c:	f7f4 ffd4 	bl	8000608 <__aeabi_dmul>
 800b660:	ec53 2b19 	vmov	r2, r3, d9
 800b664:	4606      	mov	r6, r0
 800b666:	460f      	mov	r7, r1
 800b668:	4620      	mov	r0, r4
 800b66a:	4629      	mov	r1, r5
 800b66c:	f7f4 fe14 	bl	8000298 <__aeabi_dsub>
 800b670:	4602      	mov	r2, r0
 800b672:	460b      	mov	r3, r1
 800b674:	4640      	mov	r0, r8
 800b676:	4649      	mov	r1, r9
 800b678:	f7f4 fe0e 	bl	8000298 <__aeabi_dsub>
 800b67c:	a372      	add	r3, pc, #456	; (adr r3, 800b848 <__ieee754_pow+0xa08>)
 800b67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b682:	f7f4 ffc1 	bl	8000608 <__aeabi_dmul>
 800b686:	a372      	add	r3, pc, #456	; (adr r3, 800b850 <__ieee754_pow+0xa10>)
 800b688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b68c:	4680      	mov	r8, r0
 800b68e:	4689      	mov	r9, r1
 800b690:	4620      	mov	r0, r4
 800b692:	4629      	mov	r1, r5
 800b694:	f7f4 ffb8 	bl	8000608 <__aeabi_dmul>
 800b698:	4602      	mov	r2, r0
 800b69a:	460b      	mov	r3, r1
 800b69c:	4640      	mov	r0, r8
 800b69e:	4649      	mov	r1, r9
 800b6a0:	f7f4 fdfc 	bl	800029c <__adddf3>
 800b6a4:	4604      	mov	r4, r0
 800b6a6:	460d      	mov	r5, r1
 800b6a8:	4602      	mov	r2, r0
 800b6aa:	460b      	mov	r3, r1
 800b6ac:	4630      	mov	r0, r6
 800b6ae:	4639      	mov	r1, r7
 800b6b0:	f7f4 fdf4 	bl	800029c <__adddf3>
 800b6b4:	4632      	mov	r2, r6
 800b6b6:	463b      	mov	r3, r7
 800b6b8:	4680      	mov	r8, r0
 800b6ba:	4689      	mov	r9, r1
 800b6bc:	f7f4 fdec 	bl	8000298 <__aeabi_dsub>
 800b6c0:	4602      	mov	r2, r0
 800b6c2:	460b      	mov	r3, r1
 800b6c4:	4620      	mov	r0, r4
 800b6c6:	4629      	mov	r1, r5
 800b6c8:	f7f4 fde6 	bl	8000298 <__aeabi_dsub>
 800b6cc:	4642      	mov	r2, r8
 800b6ce:	4606      	mov	r6, r0
 800b6d0:	460f      	mov	r7, r1
 800b6d2:	464b      	mov	r3, r9
 800b6d4:	4640      	mov	r0, r8
 800b6d6:	4649      	mov	r1, r9
 800b6d8:	f7f4 ff96 	bl	8000608 <__aeabi_dmul>
 800b6dc:	a35e      	add	r3, pc, #376	; (adr r3, 800b858 <__ieee754_pow+0xa18>)
 800b6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e2:	4604      	mov	r4, r0
 800b6e4:	460d      	mov	r5, r1
 800b6e6:	f7f4 ff8f 	bl	8000608 <__aeabi_dmul>
 800b6ea:	a35d      	add	r3, pc, #372	; (adr r3, 800b860 <__ieee754_pow+0xa20>)
 800b6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f0:	f7f4 fdd2 	bl	8000298 <__aeabi_dsub>
 800b6f4:	4622      	mov	r2, r4
 800b6f6:	462b      	mov	r3, r5
 800b6f8:	f7f4 ff86 	bl	8000608 <__aeabi_dmul>
 800b6fc:	a35a      	add	r3, pc, #360	; (adr r3, 800b868 <__ieee754_pow+0xa28>)
 800b6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b702:	f7f4 fdcb 	bl	800029c <__adddf3>
 800b706:	4622      	mov	r2, r4
 800b708:	462b      	mov	r3, r5
 800b70a:	f7f4 ff7d 	bl	8000608 <__aeabi_dmul>
 800b70e:	a358      	add	r3, pc, #352	; (adr r3, 800b870 <__ieee754_pow+0xa30>)
 800b710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b714:	f7f4 fdc0 	bl	8000298 <__aeabi_dsub>
 800b718:	4622      	mov	r2, r4
 800b71a:	462b      	mov	r3, r5
 800b71c:	f7f4 ff74 	bl	8000608 <__aeabi_dmul>
 800b720:	a355      	add	r3, pc, #340	; (adr r3, 800b878 <__ieee754_pow+0xa38>)
 800b722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b726:	f7f4 fdb9 	bl	800029c <__adddf3>
 800b72a:	4622      	mov	r2, r4
 800b72c:	462b      	mov	r3, r5
 800b72e:	f7f4 ff6b 	bl	8000608 <__aeabi_dmul>
 800b732:	4602      	mov	r2, r0
 800b734:	460b      	mov	r3, r1
 800b736:	4640      	mov	r0, r8
 800b738:	4649      	mov	r1, r9
 800b73a:	f7f4 fdad 	bl	8000298 <__aeabi_dsub>
 800b73e:	4604      	mov	r4, r0
 800b740:	460d      	mov	r5, r1
 800b742:	4602      	mov	r2, r0
 800b744:	460b      	mov	r3, r1
 800b746:	4640      	mov	r0, r8
 800b748:	4649      	mov	r1, r9
 800b74a:	f7f4 ff5d 	bl	8000608 <__aeabi_dmul>
 800b74e:	2200      	movs	r2, #0
 800b750:	ec41 0b19 	vmov	d9, r0, r1
 800b754:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b758:	4620      	mov	r0, r4
 800b75a:	4629      	mov	r1, r5
 800b75c:	f7f4 fd9c 	bl	8000298 <__aeabi_dsub>
 800b760:	4602      	mov	r2, r0
 800b762:	460b      	mov	r3, r1
 800b764:	ec51 0b19 	vmov	r0, r1, d9
 800b768:	f7f5 f878 	bl	800085c <__aeabi_ddiv>
 800b76c:	4632      	mov	r2, r6
 800b76e:	4604      	mov	r4, r0
 800b770:	460d      	mov	r5, r1
 800b772:	463b      	mov	r3, r7
 800b774:	4640      	mov	r0, r8
 800b776:	4649      	mov	r1, r9
 800b778:	f7f4 ff46 	bl	8000608 <__aeabi_dmul>
 800b77c:	4632      	mov	r2, r6
 800b77e:	463b      	mov	r3, r7
 800b780:	f7f4 fd8c 	bl	800029c <__adddf3>
 800b784:	4602      	mov	r2, r0
 800b786:	460b      	mov	r3, r1
 800b788:	4620      	mov	r0, r4
 800b78a:	4629      	mov	r1, r5
 800b78c:	f7f4 fd84 	bl	8000298 <__aeabi_dsub>
 800b790:	4642      	mov	r2, r8
 800b792:	464b      	mov	r3, r9
 800b794:	f7f4 fd80 	bl	8000298 <__aeabi_dsub>
 800b798:	460b      	mov	r3, r1
 800b79a:	4602      	mov	r2, r0
 800b79c:	493a      	ldr	r1, [pc, #232]	; (800b888 <__ieee754_pow+0xa48>)
 800b79e:	2000      	movs	r0, #0
 800b7a0:	f7f4 fd7a 	bl	8000298 <__aeabi_dsub>
 800b7a4:	ec41 0b10 	vmov	d0, r0, r1
 800b7a8:	ee10 3a90 	vmov	r3, s1
 800b7ac:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b7b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b7b4:	da2b      	bge.n	800b80e <__ieee754_pow+0x9ce>
 800b7b6:	4650      	mov	r0, sl
 800b7b8:	f000 f966 	bl	800ba88 <scalbn>
 800b7bc:	ec51 0b10 	vmov	r0, r1, d0
 800b7c0:	ec53 2b18 	vmov	r2, r3, d8
 800b7c4:	f7ff bbed 	b.w	800afa2 <__ieee754_pow+0x162>
 800b7c8:	4b30      	ldr	r3, [pc, #192]	; (800b88c <__ieee754_pow+0xa4c>)
 800b7ca:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b7ce:	429e      	cmp	r6, r3
 800b7d0:	f77f af0c 	ble.w	800b5ec <__ieee754_pow+0x7ac>
 800b7d4:	4b2e      	ldr	r3, [pc, #184]	; (800b890 <__ieee754_pow+0xa50>)
 800b7d6:	440b      	add	r3, r1
 800b7d8:	4303      	orrs	r3, r0
 800b7da:	d009      	beq.n	800b7f0 <__ieee754_pow+0x9b0>
 800b7dc:	ec51 0b18 	vmov	r0, r1, d8
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	f7f5 f982 	bl	8000aec <__aeabi_dcmplt>
 800b7e8:	3800      	subs	r0, #0
 800b7ea:	bf18      	it	ne
 800b7ec:	2001      	movne	r0, #1
 800b7ee:	e447      	b.n	800b080 <__ieee754_pow+0x240>
 800b7f0:	4622      	mov	r2, r4
 800b7f2:	462b      	mov	r3, r5
 800b7f4:	f7f4 fd50 	bl	8000298 <__aeabi_dsub>
 800b7f8:	4642      	mov	r2, r8
 800b7fa:	464b      	mov	r3, r9
 800b7fc:	f7f5 f98a 	bl	8000b14 <__aeabi_dcmpge>
 800b800:	2800      	cmp	r0, #0
 800b802:	f43f aef3 	beq.w	800b5ec <__ieee754_pow+0x7ac>
 800b806:	e7e9      	b.n	800b7dc <__ieee754_pow+0x99c>
 800b808:	f04f 0a00 	mov.w	sl, #0
 800b80c:	e71a      	b.n	800b644 <__ieee754_pow+0x804>
 800b80e:	ec51 0b10 	vmov	r0, r1, d0
 800b812:	4619      	mov	r1, r3
 800b814:	e7d4      	b.n	800b7c0 <__ieee754_pow+0x980>
 800b816:	491c      	ldr	r1, [pc, #112]	; (800b888 <__ieee754_pow+0xa48>)
 800b818:	2000      	movs	r0, #0
 800b81a:	f7ff bb30 	b.w	800ae7e <__ieee754_pow+0x3e>
 800b81e:	2000      	movs	r0, #0
 800b820:	2100      	movs	r1, #0
 800b822:	f7ff bb2c 	b.w	800ae7e <__ieee754_pow+0x3e>
 800b826:	4630      	mov	r0, r6
 800b828:	4639      	mov	r1, r7
 800b82a:	f7ff bb28 	b.w	800ae7e <__ieee754_pow+0x3e>
 800b82e:	9204      	str	r2, [sp, #16]
 800b830:	f7ff bb7a 	b.w	800af28 <__ieee754_pow+0xe8>
 800b834:	2300      	movs	r3, #0
 800b836:	f7ff bb64 	b.w	800af02 <__ieee754_pow+0xc2>
 800b83a:	bf00      	nop
 800b83c:	f3af 8000 	nop.w
 800b840:	00000000 	.word	0x00000000
 800b844:	3fe62e43 	.word	0x3fe62e43
 800b848:	fefa39ef 	.word	0xfefa39ef
 800b84c:	3fe62e42 	.word	0x3fe62e42
 800b850:	0ca86c39 	.word	0x0ca86c39
 800b854:	be205c61 	.word	0xbe205c61
 800b858:	72bea4d0 	.word	0x72bea4d0
 800b85c:	3e663769 	.word	0x3e663769
 800b860:	c5d26bf1 	.word	0xc5d26bf1
 800b864:	3ebbbd41 	.word	0x3ebbbd41
 800b868:	af25de2c 	.word	0xaf25de2c
 800b86c:	3f11566a 	.word	0x3f11566a
 800b870:	16bebd93 	.word	0x16bebd93
 800b874:	3f66c16c 	.word	0x3f66c16c
 800b878:	5555553e 	.word	0x5555553e
 800b87c:	3fc55555 	.word	0x3fc55555
 800b880:	3fe00000 	.word	0x3fe00000
 800b884:	000fffff 	.word	0x000fffff
 800b888:	3ff00000 	.word	0x3ff00000
 800b88c:	4090cbff 	.word	0x4090cbff
 800b890:	3f6f3400 	.word	0x3f6f3400
 800b894:	652b82fe 	.word	0x652b82fe
 800b898:	3c971547 	.word	0x3c971547

0800b89c <__ieee754_sqrt>:
 800b89c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8a0:	ec55 4b10 	vmov	r4, r5, d0
 800b8a4:	4e55      	ldr	r6, [pc, #340]	; (800b9fc <__ieee754_sqrt+0x160>)
 800b8a6:	43ae      	bics	r6, r5
 800b8a8:	ee10 0a10 	vmov	r0, s0
 800b8ac:	ee10 3a10 	vmov	r3, s0
 800b8b0:	462a      	mov	r2, r5
 800b8b2:	4629      	mov	r1, r5
 800b8b4:	d110      	bne.n	800b8d8 <__ieee754_sqrt+0x3c>
 800b8b6:	ee10 2a10 	vmov	r2, s0
 800b8ba:	462b      	mov	r3, r5
 800b8bc:	f7f4 fea4 	bl	8000608 <__aeabi_dmul>
 800b8c0:	4602      	mov	r2, r0
 800b8c2:	460b      	mov	r3, r1
 800b8c4:	4620      	mov	r0, r4
 800b8c6:	4629      	mov	r1, r5
 800b8c8:	f7f4 fce8 	bl	800029c <__adddf3>
 800b8cc:	4604      	mov	r4, r0
 800b8ce:	460d      	mov	r5, r1
 800b8d0:	ec45 4b10 	vmov	d0, r4, r5
 800b8d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8d8:	2d00      	cmp	r5, #0
 800b8da:	dc10      	bgt.n	800b8fe <__ieee754_sqrt+0x62>
 800b8dc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b8e0:	4330      	orrs	r0, r6
 800b8e2:	d0f5      	beq.n	800b8d0 <__ieee754_sqrt+0x34>
 800b8e4:	b15d      	cbz	r5, 800b8fe <__ieee754_sqrt+0x62>
 800b8e6:	ee10 2a10 	vmov	r2, s0
 800b8ea:	462b      	mov	r3, r5
 800b8ec:	ee10 0a10 	vmov	r0, s0
 800b8f0:	f7f4 fcd2 	bl	8000298 <__aeabi_dsub>
 800b8f4:	4602      	mov	r2, r0
 800b8f6:	460b      	mov	r3, r1
 800b8f8:	f7f4 ffb0 	bl	800085c <__aeabi_ddiv>
 800b8fc:	e7e6      	b.n	800b8cc <__ieee754_sqrt+0x30>
 800b8fe:	1512      	asrs	r2, r2, #20
 800b900:	d074      	beq.n	800b9ec <__ieee754_sqrt+0x150>
 800b902:	07d4      	lsls	r4, r2, #31
 800b904:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b908:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800b90c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b910:	bf5e      	ittt	pl
 800b912:	0fda      	lsrpl	r2, r3, #31
 800b914:	005b      	lslpl	r3, r3, #1
 800b916:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800b91a:	2400      	movs	r4, #0
 800b91c:	0fda      	lsrs	r2, r3, #31
 800b91e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800b922:	107f      	asrs	r7, r7, #1
 800b924:	005b      	lsls	r3, r3, #1
 800b926:	2516      	movs	r5, #22
 800b928:	4620      	mov	r0, r4
 800b92a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b92e:	1886      	adds	r6, r0, r2
 800b930:	428e      	cmp	r6, r1
 800b932:	bfde      	ittt	le
 800b934:	1b89      	suble	r1, r1, r6
 800b936:	18b0      	addle	r0, r6, r2
 800b938:	18a4      	addle	r4, r4, r2
 800b93a:	0049      	lsls	r1, r1, #1
 800b93c:	3d01      	subs	r5, #1
 800b93e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800b942:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b946:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b94a:	d1f0      	bne.n	800b92e <__ieee754_sqrt+0x92>
 800b94c:	462a      	mov	r2, r5
 800b94e:	f04f 0e20 	mov.w	lr, #32
 800b952:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b956:	4281      	cmp	r1, r0
 800b958:	eb06 0c05 	add.w	ip, r6, r5
 800b95c:	dc02      	bgt.n	800b964 <__ieee754_sqrt+0xc8>
 800b95e:	d113      	bne.n	800b988 <__ieee754_sqrt+0xec>
 800b960:	459c      	cmp	ip, r3
 800b962:	d811      	bhi.n	800b988 <__ieee754_sqrt+0xec>
 800b964:	f1bc 0f00 	cmp.w	ip, #0
 800b968:	eb0c 0506 	add.w	r5, ip, r6
 800b96c:	da43      	bge.n	800b9f6 <__ieee754_sqrt+0x15a>
 800b96e:	2d00      	cmp	r5, #0
 800b970:	db41      	blt.n	800b9f6 <__ieee754_sqrt+0x15a>
 800b972:	f100 0801 	add.w	r8, r0, #1
 800b976:	1a09      	subs	r1, r1, r0
 800b978:	459c      	cmp	ip, r3
 800b97a:	bf88      	it	hi
 800b97c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800b980:	eba3 030c 	sub.w	r3, r3, ip
 800b984:	4432      	add	r2, r6
 800b986:	4640      	mov	r0, r8
 800b988:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800b98c:	f1be 0e01 	subs.w	lr, lr, #1
 800b990:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800b994:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b998:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b99c:	d1db      	bne.n	800b956 <__ieee754_sqrt+0xba>
 800b99e:	430b      	orrs	r3, r1
 800b9a0:	d006      	beq.n	800b9b0 <__ieee754_sqrt+0x114>
 800b9a2:	1c50      	adds	r0, r2, #1
 800b9a4:	bf13      	iteet	ne
 800b9a6:	3201      	addne	r2, #1
 800b9a8:	3401      	addeq	r4, #1
 800b9aa:	4672      	moveq	r2, lr
 800b9ac:	f022 0201 	bicne.w	r2, r2, #1
 800b9b0:	1063      	asrs	r3, r4, #1
 800b9b2:	0852      	lsrs	r2, r2, #1
 800b9b4:	07e1      	lsls	r1, r4, #31
 800b9b6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b9ba:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b9be:	bf48      	it	mi
 800b9c0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b9c4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800b9c8:	4614      	mov	r4, r2
 800b9ca:	e781      	b.n	800b8d0 <__ieee754_sqrt+0x34>
 800b9cc:	0ad9      	lsrs	r1, r3, #11
 800b9ce:	3815      	subs	r0, #21
 800b9d0:	055b      	lsls	r3, r3, #21
 800b9d2:	2900      	cmp	r1, #0
 800b9d4:	d0fa      	beq.n	800b9cc <__ieee754_sqrt+0x130>
 800b9d6:	02cd      	lsls	r5, r1, #11
 800b9d8:	d50a      	bpl.n	800b9f0 <__ieee754_sqrt+0x154>
 800b9da:	f1c2 0420 	rsb	r4, r2, #32
 800b9de:	fa23 f404 	lsr.w	r4, r3, r4
 800b9e2:	1e55      	subs	r5, r2, #1
 800b9e4:	4093      	lsls	r3, r2
 800b9e6:	4321      	orrs	r1, r4
 800b9e8:	1b42      	subs	r2, r0, r5
 800b9ea:	e78a      	b.n	800b902 <__ieee754_sqrt+0x66>
 800b9ec:	4610      	mov	r0, r2
 800b9ee:	e7f0      	b.n	800b9d2 <__ieee754_sqrt+0x136>
 800b9f0:	0049      	lsls	r1, r1, #1
 800b9f2:	3201      	adds	r2, #1
 800b9f4:	e7ef      	b.n	800b9d6 <__ieee754_sqrt+0x13a>
 800b9f6:	4680      	mov	r8, r0
 800b9f8:	e7bd      	b.n	800b976 <__ieee754_sqrt+0xda>
 800b9fa:	bf00      	nop
 800b9fc:	7ff00000 	.word	0x7ff00000

0800ba00 <with_errno>:
 800ba00:	b570      	push	{r4, r5, r6, lr}
 800ba02:	4604      	mov	r4, r0
 800ba04:	460d      	mov	r5, r1
 800ba06:	4616      	mov	r6, r2
 800ba08:	f7fc fa80 	bl	8007f0c <__errno>
 800ba0c:	4629      	mov	r1, r5
 800ba0e:	6006      	str	r6, [r0, #0]
 800ba10:	4620      	mov	r0, r4
 800ba12:	bd70      	pop	{r4, r5, r6, pc}

0800ba14 <xflow>:
 800ba14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba16:	4614      	mov	r4, r2
 800ba18:	461d      	mov	r5, r3
 800ba1a:	b108      	cbz	r0, 800ba20 <xflow+0xc>
 800ba1c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ba20:	e9cd 2300 	strd	r2, r3, [sp]
 800ba24:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba28:	4620      	mov	r0, r4
 800ba2a:	4629      	mov	r1, r5
 800ba2c:	f7f4 fdec 	bl	8000608 <__aeabi_dmul>
 800ba30:	2222      	movs	r2, #34	; 0x22
 800ba32:	b003      	add	sp, #12
 800ba34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ba38:	f7ff bfe2 	b.w	800ba00 <with_errno>

0800ba3c <__math_uflow>:
 800ba3c:	b508      	push	{r3, lr}
 800ba3e:	2200      	movs	r2, #0
 800ba40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ba44:	f7ff ffe6 	bl	800ba14 <xflow>
 800ba48:	ec41 0b10 	vmov	d0, r0, r1
 800ba4c:	bd08      	pop	{r3, pc}

0800ba4e <__math_oflow>:
 800ba4e:	b508      	push	{r3, lr}
 800ba50:	2200      	movs	r2, #0
 800ba52:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800ba56:	f7ff ffdd 	bl	800ba14 <xflow>
 800ba5a:	ec41 0b10 	vmov	d0, r0, r1
 800ba5e:	bd08      	pop	{r3, pc}

0800ba60 <fabs>:
 800ba60:	ec51 0b10 	vmov	r0, r1, d0
 800ba64:	ee10 2a10 	vmov	r2, s0
 800ba68:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ba6c:	ec43 2b10 	vmov	d0, r2, r3
 800ba70:	4770      	bx	lr

0800ba72 <finite>:
 800ba72:	b082      	sub	sp, #8
 800ba74:	ed8d 0b00 	vstr	d0, [sp]
 800ba78:	9801      	ldr	r0, [sp, #4]
 800ba7a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ba7e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ba82:	0fc0      	lsrs	r0, r0, #31
 800ba84:	b002      	add	sp, #8
 800ba86:	4770      	bx	lr

0800ba88 <scalbn>:
 800ba88:	b570      	push	{r4, r5, r6, lr}
 800ba8a:	ec55 4b10 	vmov	r4, r5, d0
 800ba8e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ba92:	4606      	mov	r6, r0
 800ba94:	462b      	mov	r3, r5
 800ba96:	b99a      	cbnz	r2, 800bac0 <scalbn+0x38>
 800ba98:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ba9c:	4323      	orrs	r3, r4
 800ba9e:	d036      	beq.n	800bb0e <scalbn+0x86>
 800baa0:	4b39      	ldr	r3, [pc, #228]	; (800bb88 <scalbn+0x100>)
 800baa2:	4629      	mov	r1, r5
 800baa4:	ee10 0a10 	vmov	r0, s0
 800baa8:	2200      	movs	r2, #0
 800baaa:	f7f4 fdad 	bl	8000608 <__aeabi_dmul>
 800baae:	4b37      	ldr	r3, [pc, #220]	; (800bb8c <scalbn+0x104>)
 800bab0:	429e      	cmp	r6, r3
 800bab2:	4604      	mov	r4, r0
 800bab4:	460d      	mov	r5, r1
 800bab6:	da10      	bge.n	800bada <scalbn+0x52>
 800bab8:	a32b      	add	r3, pc, #172	; (adr r3, 800bb68 <scalbn+0xe0>)
 800baba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800babe:	e03a      	b.n	800bb36 <scalbn+0xae>
 800bac0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800bac4:	428a      	cmp	r2, r1
 800bac6:	d10c      	bne.n	800bae2 <scalbn+0x5a>
 800bac8:	ee10 2a10 	vmov	r2, s0
 800bacc:	4620      	mov	r0, r4
 800bace:	4629      	mov	r1, r5
 800bad0:	f7f4 fbe4 	bl	800029c <__adddf3>
 800bad4:	4604      	mov	r4, r0
 800bad6:	460d      	mov	r5, r1
 800bad8:	e019      	b.n	800bb0e <scalbn+0x86>
 800bada:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bade:	460b      	mov	r3, r1
 800bae0:	3a36      	subs	r2, #54	; 0x36
 800bae2:	4432      	add	r2, r6
 800bae4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800bae8:	428a      	cmp	r2, r1
 800baea:	dd08      	ble.n	800bafe <scalbn+0x76>
 800baec:	2d00      	cmp	r5, #0
 800baee:	a120      	add	r1, pc, #128	; (adr r1, 800bb70 <scalbn+0xe8>)
 800baf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800baf4:	da1c      	bge.n	800bb30 <scalbn+0xa8>
 800baf6:	a120      	add	r1, pc, #128	; (adr r1, 800bb78 <scalbn+0xf0>)
 800baf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bafc:	e018      	b.n	800bb30 <scalbn+0xa8>
 800bafe:	2a00      	cmp	r2, #0
 800bb00:	dd08      	ble.n	800bb14 <scalbn+0x8c>
 800bb02:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bb06:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bb0a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bb0e:	ec45 4b10 	vmov	d0, r4, r5
 800bb12:	bd70      	pop	{r4, r5, r6, pc}
 800bb14:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800bb18:	da19      	bge.n	800bb4e <scalbn+0xc6>
 800bb1a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bb1e:	429e      	cmp	r6, r3
 800bb20:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800bb24:	dd0a      	ble.n	800bb3c <scalbn+0xb4>
 800bb26:	a112      	add	r1, pc, #72	; (adr r1, 800bb70 <scalbn+0xe8>)
 800bb28:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d1e2      	bne.n	800baf6 <scalbn+0x6e>
 800bb30:	a30f      	add	r3, pc, #60	; (adr r3, 800bb70 <scalbn+0xe8>)
 800bb32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb36:	f7f4 fd67 	bl	8000608 <__aeabi_dmul>
 800bb3a:	e7cb      	b.n	800bad4 <scalbn+0x4c>
 800bb3c:	a10a      	add	r1, pc, #40	; (adr r1, 800bb68 <scalbn+0xe0>)
 800bb3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d0b8      	beq.n	800bab8 <scalbn+0x30>
 800bb46:	a10e      	add	r1, pc, #56	; (adr r1, 800bb80 <scalbn+0xf8>)
 800bb48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb4c:	e7b4      	b.n	800bab8 <scalbn+0x30>
 800bb4e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bb52:	3236      	adds	r2, #54	; 0x36
 800bb54:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bb58:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800bb5c:	4620      	mov	r0, r4
 800bb5e:	4b0c      	ldr	r3, [pc, #48]	; (800bb90 <scalbn+0x108>)
 800bb60:	2200      	movs	r2, #0
 800bb62:	e7e8      	b.n	800bb36 <scalbn+0xae>
 800bb64:	f3af 8000 	nop.w
 800bb68:	c2f8f359 	.word	0xc2f8f359
 800bb6c:	01a56e1f 	.word	0x01a56e1f
 800bb70:	8800759c 	.word	0x8800759c
 800bb74:	7e37e43c 	.word	0x7e37e43c
 800bb78:	8800759c 	.word	0x8800759c
 800bb7c:	fe37e43c 	.word	0xfe37e43c
 800bb80:	c2f8f359 	.word	0xc2f8f359
 800bb84:	81a56e1f 	.word	0x81a56e1f
 800bb88:	43500000 	.word	0x43500000
 800bb8c:	ffff3cb0 	.word	0xffff3cb0
 800bb90:	3c900000 	.word	0x3c900000

0800bb94 <_init>:
 800bb94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb96:	bf00      	nop
 800bb98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb9a:	bc08      	pop	{r3}
 800bb9c:	469e      	mov	lr, r3
 800bb9e:	4770      	bx	lr

0800bba0 <_fini>:
 800bba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bba2:	bf00      	nop
 800bba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bba6:	bc08      	pop	{r3}
 800bba8:	469e      	mov	lr, r3
 800bbaa:	4770      	bx	lr

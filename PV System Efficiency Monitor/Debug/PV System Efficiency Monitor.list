
PV System Efficiency Monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004170  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004308  08004308  00014308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004320  08004320  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08004320  08004320  00014320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004328  08004328  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004328  08004328  00014328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800432c  0800432c  0001432c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08004330  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000020  08004350  00020020  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08004350  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a166  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018e3  00000000  00000000  0002a1b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d8  00000000  00000000  0002baa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000750  00000000  00000000  0002c278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000169b2  00000000  00000000  0002c9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009f16  00000000  00000000  0004337a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000917e9  00000000  00000000  0004d290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dea79  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002078  00000000  00000000  000deacc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000020 	.word	0x20000020
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080042f0 	.word	0x080042f0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000024 	.word	0x20000024
 80001d4:	080042f0 	.word	0x080042f0

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <__aeabi_uldivmod>:
 80009b4:	b953      	cbnz	r3, 80009cc <__aeabi_uldivmod+0x18>
 80009b6:	b94a      	cbnz	r2, 80009cc <__aeabi_uldivmod+0x18>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	bf08      	it	eq
 80009bc:	2800      	cmpeq	r0, #0
 80009be:	bf1c      	itt	ne
 80009c0:	f04f 31ff 	movne.w	r1, #4294967295
 80009c4:	f04f 30ff 	movne.w	r0, #4294967295
 80009c8:	f000 b974 	b.w	8000cb4 <__aeabi_idiv0>
 80009cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d4:	f000 f806 	bl	80009e4 <__udivmoddi4>
 80009d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr

080009e4 <__udivmoddi4>:
 80009e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e8:	9d08      	ldr	r5, [sp, #32]
 80009ea:	4604      	mov	r4, r0
 80009ec:	468e      	mov	lr, r1
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d14d      	bne.n	8000a8e <__udivmoddi4+0xaa>
 80009f2:	428a      	cmp	r2, r1
 80009f4:	4694      	mov	ip, r2
 80009f6:	d969      	bls.n	8000acc <__udivmoddi4+0xe8>
 80009f8:	fab2 f282 	clz	r2, r2
 80009fc:	b152      	cbz	r2, 8000a14 <__udivmoddi4+0x30>
 80009fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000a02:	f1c2 0120 	rsb	r1, r2, #32
 8000a06:	fa20 f101 	lsr.w	r1, r0, r1
 8000a0a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a0e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a12:	4094      	lsls	r4, r2
 8000a14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a18:	0c21      	lsrs	r1, r4, #16
 8000a1a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a1e:	fa1f f78c 	uxth.w	r7, ip
 8000a22:	fb08 e316 	mls	r3, r8, r6, lr
 8000a26:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a2a:	fb06 f107 	mul.w	r1, r6, r7
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	d90a      	bls.n	8000a48 <__udivmoddi4+0x64>
 8000a32:	eb1c 0303 	adds.w	r3, ip, r3
 8000a36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a3a:	f080 811f 	bcs.w	8000c7c <__udivmoddi4+0x298>
 8000a3e:	4299      	cmp	r1, r3
 8000a40:	f240 811c 	bls.w	8000c7c <__udivmoddi4+0x298>
 8000a44:	3e02      	subs	r6, #2
 8000a46:	4463      	add	r3, ip
 8000a48:	1a5b      	subs	r3, r3, r1
 8000a4a:	b2a4      	uxth	r4, r4
 8000a4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a50:	fb08 3310 	mls	r3, r8, r0, r3
 8000a54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a58:	fb00 f707 	mul.w	r7, r0, r7
 8000a5c:	42a7      	cmp	r7, r4
 8000a5e:	d90a      	bls.n	8000a76 <__udivmoddi4+0x92>
 8000a60:	eb1c 0404 	adds.w	r4, ip, r4
 8000a64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a68:	f080 810a 	bcs.w	8000c80 <__udivmoddi4+0x29c>
 8000a6c:	42a7      	cmp	r7, r4
 8000a6e:	f240 8107 	bls.w	8000c80 <__udivmoddi4+0x29c>
 8000a72:	4464      	add	r4, ip
 8000a74:	3802      	subs	r0, #2
 8000a76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a7a:	1be4      	subs	r4, r4, r7
 8000a7c:	2600      	movs	r6, #0
 8000a7e:	b11d      	cbz	r5, 8000a88 <__udivmoddi4+0xa4>
 8000a80:	40d4      	lsrs	r4, r2
 8000a82:	2300      	movs	r3, #0
 8000a84:	e9c5 4300 	strd	r4, r3, [r5]
 8000a88:	4631      	mov	r1, r6
 8000a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8e:	428b      	cmp	r3, r1
 8000a90:	d909      	bls.n	8000aa6 <__udivmoddi4+0xc2>
 8000a92:	2d00      	cmp	r5, #0
 8000a94:	f000 80ef 	beq.w	8000c76 <__udivmoddi4+0x292>
 8000a98:	2600      	movs	r6, #0
 8000a9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000a9e:	4630      	mov	r0, r6
 8000aa0:	4631      	mov	r1, r6
 8000aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa6:	fab3 f683 	clz	r6, r3
 8000aaa:	2e00      	cmp	r6, #0
 8000aac:	d14a      	bne.n	8000b44 <__udivmoddi4+0x160>
 8000aae:	428b      	cmp	r3, r1
 8000ab0:	d302      	bcc.n	8000ab8 <__udivmoddi4+0xd4>
 8000ab2:	4282      	cmp	r2, r0
 8000ab4:	f200 80f9 	bhi.w	8000caa <__udivmoddi4+0x2c6>
 8000ab8:	1a84      	subs	r4, r0, r2
 8000aba:	eb61 0303 	sbc.w	r3, r1, r3
 8000abe:	2001      	movs	r0, #1
 8000ac0:	469e      	mov	lr, r3
 8000ac2:	2d00      	cmp	r5, #0
 8000ac4:	d0e0      	beq.n	8000a88 <__udivmoddi4+0xa4>
 8000ac6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000aca:	e7dd      	b.n	8000a88 <__udivmoddi4+0xa4>
 8000acc:	b902      	cbnz	r2, 8000ad0 <__udivmoddi4+0xec>
 8000ace:	deff      	udf	#255	; 0xff
 8000ad0:	fab2 f282 	clz	r2, r2
 8000ad4:	2a00      	cmp	r2, #0
 8000ad6:	f040 8092 	bne.w	8000bfe <__udivmoddi4+0x21a>
 8000ada:	eba1 010c 	sub.w	r1, r1, ip
 8000ade:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ae2:	fa1f fe8c 	uxth.w	lr, ip
 8000ae6:	2601      	movs	r6, #1
 8000ae8:	0c20      	lsrs	r0, r4, #16
 8000aea:	fbb1 f3f7 	udiv	r3, r1, r7
 8000aee:	fb07 1113 	mls	r1, r7, r3, r1
 8000af2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000af6:	fb0e f003 	mul.w	r0, lr, r3
 8000afa:	4288      	cmp	r0, r1
 8000afc:	d908      	bls.n	8000b10 <__udivmoddi4+0x12c>
 8000afe:	eb1c 0101 	adds.w	r1, ip, r1
 8000b02:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b06:	d202      	bcs.n	8000b0e <__udivmoddi4+0x12a>
 8000b08:	4288      	cmp	r0, r1
 8000b0a:	f200 80cb 	bhi.w	8000ca4 <__udivmoddi4+0x2c0>
 8000b0e:	4643      	mov	r3, r8
 8000b10:	1a09      	subs	r1, r1, r0
 8000b12:	b2a4      	uxth	r4, r4
 8000b14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b18:	fb07 1110 	mls	r1, r7, r0, r1
 8000b1c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b20:	fb0e fe00 	mul.w	lr, lr, r0
 8000b24:	45a6      	cmp	lr, r4
 8000b26:	d908      	bls.n	8000b3a <__udivmoddi4+0x156>
 8000b28:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b30:	d202      	bcs.n	8000b38 <__udivmoddi4+0x154>
 8000b32:	45a6      	cmp	lr, r4
 8000b34:	f200 80bb 	bhi.w	8000cae <__udivmoddi4+0x2ca>
 8000b38:	4608      	mov	r0, r1
 8000b3a:	eba4 040e 	sub.w	r4, r4, lr
 8000b3e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b42:	e79c      	b.n	8000a7e <__udivmoddi4+0x9a>
 8000b44:	f1c6 0720 	rsb	r7, r6, #32
 8000b48:	40b3      	lsls	r3, r6
 8000b4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b52:	fa20 f407 	lsr.w	r4, r0, r7
 8000b56:	fa01 f306 	lsl.w	r3, r1, r6
 8000b5a:	431c      	orrs	r4, r3
 8000b5c:	40f9      	lsrs	r1, r7
 8000b5e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b62:	fa00 f306 	lsl.w	r3, r0, r6
 8000b66:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b6a:	0c20      	lsrs	r0, r4, #16
 8000b6c:	fa1f fe8c 	uxth.w	lr, ip
 8000b70:	fb09 1118 	mls	r1, r9, r8, r1
 8000b74:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b78:	fb08 f00e 	mul.w	r0, r8, lr
 8000b7c:	4288      	cmp	r0, r1
 8000b7e:	fa02 f206 	lsl.w	r2, r2, r6
 8000b82:	d90b      	bls.n	8000b9c <__udivmoddi4+0x1b8>
 8000b84:	eb1c 0101 	adds.w	r1, ip, r1
 8000b88:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b8c:	f080 8088 	bcs.w	8000ca0 <__udivmoddi4+0x2bc>
 8000b90:	4288      	cmp	r0, r1
 8000b92:	f240 8085 	bls.w	8000ca0 <__udivmoddi4+0x2bc>
 8000b96:	f1a8 0802 	sub.w	r8, r8, #2
 8000b9a:	4461      	add	r1, ip
 8000b9c:	1a09      	subs	r1, r1, r0
 8000b9e:	b2a4      	uxth	r4, r4
 8000ba0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ba4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ba8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bac:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bb0:	458e      	cmp	lr, r1
 8000bb2:	d908      	bls.n	8000bc6 <__udivmoddi4+0x1e2>
 8000bb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bb8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bbc:	d26c      	bcs.n	8000c98 <__udivmoddi4+0x2b4>
 8000bbe:	458e      	cmp	lr, r1
 8000bc0:	d96a      	bls.n	8000c98 <__udivmoddi4+0x2b4>
 8000bc2:	3802      	subs	r0, #2
 8000bc4:	4461      	add	r1, ip
 8000bc6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bca:	fba0 9402 	umull	r9, r4, r0, r2
 8000bce:	eba1 010e 	sub.w	r1, r1, lr
 8000bd2:	42a1      	cmp	r1, r4
 8000bd4:	46c8      	mov	r8, r9
 8000bd6:	46a6      	mov	lr, r4
 8000bd8:	d356      	bcc.n	8000c88 <__udivmoddi4+0x2a4>
 8000bda:	d053      	beq.n	8000c84 <__udivmoddi4+0x2a0>
 8000bdc:	b15d      	cbz	r5, 8000bf6 <__udivmoddi4+0x212>
 8000bde:	ebb3 0208 	subs.w	r2, r3, r8
 8000be2:	eb61 010e 	sbc.w	r1, r1, lr
 8000be6:	fa01 f707 	lsl.w	r7, r1, r7
 8000bea:	fa22 f306 	lsr.w	r3, r2, r6
 8000bee:	40f1      	lsrs	r1, r6
 8000bf0:	431f      	orrs	r7, r3
 8000bf2:	e9c5 7100 	strd	r7, r1, [r5]
 8000bf6:	2600      	movs	r6, #0
 8000bf8:	4631      	mov	r1, r6
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	f1c2 0320 	rsb	r3, r2, #32
 8000c02:	40d8      	lsrs	r0, r3
 8000c04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c08:	fa21 f303 	lsr.w	r3, r1, r3
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4301      	orrs	r1, r0
 8000c10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c14:	fa1f fe8c 	uxth.w	lr, ip
 8000c18:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c1c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c20:	0c0b      	lsrs	r3, r1, #16
 8000c22:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c26:	fb00 f60e 	mul.w	r6, r0, lr
 8000c2a:	429e      	cmp	r6, r3
 8000c2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c30:	d908      	bls.n	8000c44 <__udivmoddi4+0x260>
 8000c32:	eb1c 0303 	adds.w	r3, ip, r3
 8000c36:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c3a:	d22f      	bcs.n	8000c9c <__udivmoddi4+0x2b8>
 8000c3c:	429e      	cmp	r6, r3
 8000c3e:	d92d      	bls.n	8000c9c <__udivmoddi4+0x2b8>
 8000c40:	3802      	subs	r0, #2
 8000c42:	4463      	add	r3, ip
 8000c44:	1b9b      	subs	r3, r3, r6
 8000c46:	b289      	uxth	r1, r1
 8000c48:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c4c:	fb07 3316 	mls	r3, r7, r6, r3
 8000c50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c54:	fb06 f30e 	mul.w	r3, r6, lr
 8000c58:	428b      	cmp	r3, r1
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x28a>
 8000c5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c60:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c64:	d216      	bcs.n	8000c94 <__udivmoddi4+0x2b0>
 8000c66:	428b      	cmp	r3, r1
 8000c68:	d914      	bls.n	8000c94 <__udivmoddi4+0x2b0>
 8000c6a:	3e02      	subs	r6, #2
 8000c6c:	4461      	add	r1, ip
 8000c6e:	1ac9      	subs	r1, r1, r3
 8000c70:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c74:	e738      	b.n	8000ae8 <__udivmoddi4+0x104>
 8000c76:	462e      	mov	r6, r5
 8000c78:	4628      	mov	r0, r5
 8000c7a:	e705      	b.n	8000a88 <__udivmoddi4+0xa4>
 8000c7c:	4606      	mov	r6, r0
 8000c7e:	e6e3      	b.n	8000a48 <__udivmoddi4+0x64>
 8000c80:	4618      	mov	r0, r3
 8000c82:	e6f8      	b.n	8000a76 <__udivmoddi4+0x92>
 8000c84:	454b      	cmp	r3, r9
 8000c86:	d2a9      	bcs.n	8000bdc <__udivmoddi4+0x1f8>
 8000c88:	ebb9 0802 	subs.w	r8, r9, r2
 8000c8c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c90:	3801      	subs	r0, #1
 8000c92:	e7a3      	b.n	8000bdc <__udivmoddi4+0x1f8>
 8000c94:	4646      	mov	r6, r8
 8000c96:	e7ea      	b.n	8000c6e <__udivmoddi4+0x28a>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	e794      	b.n	8000bc6 <__udivmoddi4+0x1e2>
 8000c9c:	4640      	mov	r0, r8
 8000c9e:	e7d1      	b.n	8000c44 <__udivmoddi4+0x260>
 8000ca0:	46d0      	mov	r8, sl
 8000ca2:	e77b      	b.n	8000b9c <__udivmoddi4+0x1b8>
 8000ca4:	3b02      	subs	r3, #2
 8000ca6:	4461      	add	r1, ip
 8000ca8:	e732      	b.n	8000b10 <__udivmoddi4+0x12c>
 8000caa:	4630      	mov	r0, r6
 8000cac:	e709      	b.n	8000ac2 <__udivmoddi4+0xde>
 8000cae:	4464      	add	r4, ip
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	e742      	b.n	8000b3a <__udivmoddi4+0x156>

08000cb4 <__aeabi_idiv0>:
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <HAL_UART_RxCpltCallback>:
void system_state_update() ;
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]

	g_system_config[g_byte_count] = char_rcvd[0] ;
 8000cc0:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <HAL_UART_RxCpltCallback+0x50>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <HAL_UART_RxCpltCallback+0x54>)
 8000cc8:	7819      	ldrb	r1, [r3, #0]
 8000cca:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <HAL_UART_RxCpltCallback+0x58>)
 8000ccc:	5499      	strb	r1, [r3, r2]
	g_byte_count++ ;
 8000cce:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <HAL_UART_RxCpltCallback+0x50>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <HAL_UART_RxCpltCallback+0x50>)
 8000cd8:	701a      	strb	r2, [r3, #0]

	if(char_rcvd[0] == '\n'){
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <HAL_UART_RxCpltCallback+0x54>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2b0a      	cmp	r3, #10
 8000ce0:	d109      	bne.n	8000cf6 <HAL_UART_RxCpltCallback+0x3e>
		if(g_byte_count == 7){
 8000ce2:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <HAL_UART_RxCpltCallback+0x50>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2b07      	cmp	r3, #7
 8000ce8:	d102      	bne.n	8000cf0 <HAL_UART_RxCpltCallback+0x38>
//			HAL_UART_Transmit_IT(&huart2,(uint8_t*)"config recvd\n", 13);
			g_config_command_rcvd = 1;
 8000cea:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <HAL_UART_RxCpltCallback+0x5c>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	701a      	strb	r2, [r3, #0]
		}

		g_byte_count =0 ;
 8000cf0:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <HAL_UART_RxCpltCallback+0x50>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	701a      	strb	r2, [r3, #0]
	}

	//re-prime receiver
	HAL_UART_Receive_IT(&huart2, (uint8_t*)char_rcvd, 1) ;
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	4904      	ldr	r1, [pc, #16]	; (8000d0c <HAL_UART_RxCpltCallback+0x54>)
 8000cfa:	4807      	ldr	r0, [pc, #28]	; (8000d18 <HAL_UART_RxCpltCallback+0x60>)
 8000cfc:	f002 fba2 	bl	8003444 <HAL_UART_Receive_IT>

}
 8000d00:	bf00      	nop
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000109 	.word	0x20000109
 8000d0c:	20000010 	.word	0x20000010
 8000d10:	200000f8 	.word	0x200000f8
 8000d14:	2000010a 	.word	0x2000010a
 8000d18:	20000084 	.word	0x20000084
 8000d1c:	00000000 	.word	0x00000000

08000d20 <get_adc_value_and_celsius_temperature>:
/**
 * function starts the adc, waits for conversion
 * Then converts value to degrees
 */

uint16_t get_adc_value_and_celsius_temperature(){
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0

	HAL_ADC_Start(&hadc1) ;
 8000d24:	4824      	ldr	r0, [pc, #144]	; (8000db8 <get_adc_value_and_celsius_temperature+0x98>)
 8000d26:	f000 ff6b 	bl	8001c00 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000d2a:	f04f 31ff 	mov.w	r1, #4294967295
 8000d2e:	4822      	ldr	r0, [pc, #136]	; (8000db8 <get_adc_value_and_celsius_temperature+0x98>)
 8000d30:	f001 f81a 	bl	8001d68 <HAL_ADC_PollForConversion>
	g_raw  = HAL_ADC_GetValue(&hadc1) ;
 8000d34:	4820      	ldr	r0, [pc, #128]	; (8000db8 <get_adc_value_and_celsius_temperature+0x98>)
 8000d36:	f001 f8a2 	bl	8001e7e <HAL_ADC_GetValue>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	b29a      	uxth	r2, r3
 8000d3e:	4b1f      	ldr	r3, [pc, #124]	; (8000dbc <get_adc_value_and_celsius_temperature+0x9c>)
 8000d40:	801a      	strh	r2, [r3, #0]

	g_vin = g_raw*(3.3/4095.0) ; // input voltage
 8000d42:	4b1e      	ldr	r3, [pc, #120]	; (8000dbc <get_adc_value_and_celsius_temperature+0x9c>)
 8000d44:	881b      	ldrh	r3, [r3, #0]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff fb98 	bl	800047c <__aeabi_i2d>
 8000d4c:	a316      	add	r3, pc, #88	; (adr r3, 8000da8 <get_adc_value_and_celsius_temperature+0x88>)
 8000d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d52:	f7ff fbfd 	bl	8000550 <__aeabi_dmul>
 8000d56:	4602      	mov	r2, r0
 8000d58:	460b      	mov	r3, r1
 8000d5a:	4919      	ldr	r1, [pc, #100]	; (8000dc0 <get_adc_value_and_celsius_temperature+0xa0>)
 8000d5c:	e9c1 2300 	strd	r2, r3, [r1]
	g_temp = g_vin*100 - 273.15 ; // cast to 16 bit uint
 8000d60:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <get_adc_value_and_celsius_temperature+0xa0>)
 8000d62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d66:	f04f 0200 	mov.w	r2, #0
 8000d6a:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <get_adc_value_and_celsius_temperature+0xa4>)
 8000d6c:	f7ff fbf0 	bl	8000550 <__aeabi_dmul>
 8000d70:	4602      	mov	r2, r0
 8000d72:	460b      	mov	r3, r1
 8000d74:	4610      	mov	r0, r2
 8000d76:	4619      	mov	r1, r3
 8000d78:	a30d      	add	r3, pc, #52	; (adr r3, 8000db0 <get_adc_value_and_celsius_temperature+0x90>)
 8000d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d7e:	f7ff fa2f 	bl	80001e0 <__aeabi_dsub>
 8000d82:	4602      	mov	r2, r0
 8000d84:	460b      	mov	r3, r1
 8000d86:	4910      	ldr	r1, [pc, #64]	; (8000dc8 <get_adc_value_and_celsius_temperature+0xa8>)
 8000d88:	e9c1 2300 	strd	r2, r3, [r1]

	return g_temp ;
 8000d8c:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <get_adc_value_and_celsius_temperature+0xa8>)
 8000d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d92:	4610      	mov	r0, r2
 8000d94:	4619      	mov	r1, r3
 8000d96:	f7ff fded 	bl	8000974 <__aeabi_d2uiz>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	b29b      	uxth	r3, r3
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	f3af 8000 	nop.w
 8000da8:	e734d9b4 	.word	0xe734d9b4
 8000dac:	3f4a680c 	.word	0x3f4a680c
 8000db0:	66666666 	.word	0x66666666
 8000db4:	40711266 	.word	0x40711266
 8000db8:	2000003c 	.word	0x2000003c
 8000dbc:	200000c8 	.word	0x200000c8
 8000dc0:	200000d8 	.word	0x200000d8
 8000dc4:	40590000 	.word	0x40590000
 8000dc8:	200000d0 	.word	0x200000d0

08000dcc <store_temp_in_string>:

void store_temp_in_string(uint16_t temperature, char temp[], int len){
 8000dcc:	b480      	push	{r7}
 8000dce:	b087      	sub	sp, #28
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
 8000dd8:	81fb      	strh	r3, [r7, #14]

	for(int i= 0 ; i < len ; i++){
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
 8000dde:	e04e      	b.n	8000e7e <store_temp_in_string+0xb2>
		switch(i){
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	d02f      	beq.n	8000e46 <store_temp_in_string+0x7a>
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	2b02      	cmp	r3, #2
 8000dea:	dc44      	bgt.n	8000e76 <store_temp_in_string+0xaa>
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d003      	beq.n	8000dfa <store_temp_in_string+0x2e>
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d00c      	beq.n	8000e12 <store_temp_in_string+0x46>
			case 2:
				temp[2] = (temperature - ((temperature/10)*10) ) + 48 ;

				break;
			default:
				break;
 8000df8:	e03d      	b.n	8000e76 <store_temp_in_string+0xaa>
				temp[0]  = (temperature/100) + 48 ;
 8000dfa:	89fb      	ldrh	r3, [r7, #14]
 8000dfc:	4a25      	ldr	r2, [pc, #148]	; (8000e94 <store_temp_in_string+0xc8>)
 8000dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8000e02:	095b      	lsrs	r3, r3, #5
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	3330      	adds	r3, #48	; 0x30
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	701a      	strb	r2, [r3, #0]
				break;
 8000e10:	e032      	b.n	8000e78 <store_temp_in_string+0xac>
				temp[1] = (temperature - (temperature/100)*100 )/10 + 48 ;
 8000e12:	89fa      	ldrh	r2, [r7, #14]
 8000e14:	89fb      	ldrh	r3, [r7, #14]
 8000e16:	491f      	ldr	r1, [pc, #124]	; (8000e94 <store_temp_in_string+0xc8>)
 8000e18:	fba1 1303 	umull	r1, r3, r1, r3
 8000e1c:	095b      	lsrs	r3, r3, #5
 8000e1e:	b29b      	uxth	r3, r3
 8000e20:	4619      	mov	r1, r3
 8000e22:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8000e26:	fb01 f303 	mul.w	r3, r1, r3
 8000e2a:	4413      	add	r3, r2
 8000e2c:	4a1a      	ldr	r2, [pc, #104]	; (8000e98 <store_temp_in_string+0xcc>)
 8000e2e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e32:	1092      	asrs	r2, r2, #2
 8000e34:	17db      	asrs	r3, r3, #31
 8000e36:	1ad3      	subs	r3, r2, r3
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	3230      	adds	r2, #48	; 0x30
 8000e40:	b2d2      	uxtb	r2, r2
 8000e42:	701a      	strb	r2, [r3, #0]
				break;
 8000e44:	e018      	b.n	8000e78 <store_temp_in_string+0xac>
				temp[2] = (temperature - ((temperature/10)*10) ) + 48 ;
 8000e46:	89fb      	ldrh	r3, [r7, #14]
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	89fb      	ldrh	r3, [r7, #14]
 8000e4c:	4913      	ldr	r1, [pc, #76]	; (8000e9c <store_temp_in_string+0xd0>)
 8000e4e:	fba1 1303 	umull	r1, r3, r1, r3
 8000e52:	08db      	lsrs	r3, r3, #3
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	4619      	mov	r1, r3
 8000e5a:	0149      	lsls	r1, r1, #5
 8000e5c:	1ac9      	subs	r1, r1, r3
 8000e5e:	0089      	lsls	r1, r1, #2
 8000e60:	1acb      	subs	r3, r1, r3
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	4413      	add	r3, r2
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	3302      	adds	r3, #2
 8000e6e:	3230      	adds	r2, #48	; 0x30
 8000e70:	b2d2      	uxtb	r2, r2
 8000e72:	701a      	strb	r2, [r3, #0]
				break;
 8000e74:	e000      	b.n	8000e78 <store_temp_in_string+0xac>
				break;
 8000e76:	bf00      	nop
	for(int i= 0 ; i < len ; i++){
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	617b      	str	r3, [r7, #20]
 8000e7e:	697a      	ldr	r2, [r7, #20]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	429a      	cmp	r2, r3
 8000e84:	dbac      	blt.n	8000de0 <store_temp_in_string+0x14>

		}
	}
}
 8000e86:	bf00      	nop
 8000e88:	bf00      	nop
 8000e8a:	371c      	adds	r7, #28
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	51eb851f 	.word	0x51eb851f
 8000e98:	66666667 	.word	0x66666667
 8000e9c:	cccccccd 	.word	0xcccccccd

08000ea0 <system_state_update>:

/**
 * This function will update the system state based on the received UART command
 * or top button press
 */
void system_state_update(){
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
	if(g_top_button_pressed  == 1 && g_config_command_rcvd ==0){
 8000ea4:	4b2c      	ldr	r3, [pc, #176]	; (8000f58 <system_state_update+0xb8>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d114      	bne.n	8000ed6 <system_state_update+0x36>
 8000eac:	4b2b      	ldr	r3, [pc, #172]	; (8000f5c <system_state_update+0xbc>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d110      	bne.n	8000ed6 <system_state_update+0x36>
		g_top_button_pressed = 0;
 8000eb4:	4b28      	ldr	r3, [pc, #160]	; (8000f58 <system_state_update+0xb8>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	701a      	strb	r2, [r3, #0]

		g_EN_measure++  ;
 8000eba:	4b29      	ldr	r3, [pc, #164]	; (8000f60 <system_state_update+0xc0>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	4b27      	ldr	r3, [pc, #156]	; (8000f60 <system_state_update+0xc0>)
 8000ec4:	701a      	strb	r2, [r3, #0]

		if(g_EN_measure >2 ){
 8000ec6:	4b26      	ldr	r3, [pc, #152]	; (8000f60 <system_state_update+0xc0>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	d93e      	bls.n	8000f4c <system_state_update+0xac>
			g_EN_measure = 1;
 8000ece:	4b24      	ldr	r3, [pc, #144]	; (8000f60 <system_state_update+0xc0>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	701a      	strb	r2, [r3, #0]
		if(g_EN_measure >2 ){
 8000ed4:	e03a      	b.n	8000f4c <system_state_update+0xac>
		}
	}
	else if(g_top_button_pressed ==0  && g_config_command_rcvd == 1){
 8000ed6:	4b20      	ldr	r3, [pc, #128]	; (8000f58 <system_state_update+0xb8>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d136      	bne.n	8000f4c <system_state_update+0xac>
 8000ede:	4b1f      	ldr	r3, [pc, #124]	; (8000f5c <system_state_update+0xbc>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d132      	bne.n	8000f4c <system_state_update+0xac>
		g_config_command_rcvd = 0;
 8000ee6:	4b1d      	ldr	r3, [pc, #116]	; (8000f5c <system_state_update+0xbc>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]
		if(g_system_config[0]== '&' && g_system_config[1 ]== '_' && g_system_config[2]=='E' && g_system_config[3] == 'N' &&g_system_config[4] =='_'&& g_system_config[5] =='*'){
 8000eec:	4b1d      	ldr	r3, [pc, #116]	; (8000f64 <system_state_update+0xc4>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b26      	cmp	r3, #38	; 0x26
 8000ef2:	d12b      	bne.n	8000f4c <system_state_update+0xac>
 8000ef4:	4b1b      	ldr	r3, [pc, #108]	; (8000f64 <system_state_update+0xc4>)
 8000ef6:	785b      	ldrb	r3, [r3, #1]
 8000ef8:	2b5f      	cmp	r3, #95	; 0x5f
 8000efa:	d127      	bne.n	8000f4c <system_state_update+0xac>
 8000efc:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <system_state_update+0xc4>)
 8000efe:	789b      	ldrb	r3, [r3, #2]
 8000f00:	2b45      	cmp	r3, #69	; 0x45
 8000f02:	d123      	bne.n	8000f4c <system_state_update+0xac>
 8000f04:	4b17      	ldr	r3, [pc, #92]	; (8000f64 <system_state_update+0xc4>)
 8000f06:	78db      	ldrb	r3, [r3, #3]
 8000f08:	2b4e      	cmp	r3, #78	; 0x4e
 8000f0a:	d11f      	bne.n	8000f4c <system_state_update+0xac>
 8000f0c:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <system_state_update+0xc4>)
 8000f0e:	791b      	ldrb	r3, [r3, #4]
 8000f10:	2b5f      	cmp	r3, #95	; 0x5f
 8000f12:	d11b      	bne.n	8000f4c <system_state_update+0xac>
 8000f14:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <system_state_update+0xc4>)
 8000f16:	795b      	ldrb	r3, [r3, #5]
 8000f18:	2b2a      	cmp	r3, #42	; 0x2a
 8000f1a:	d117      	bne.n	8000f4c <system_state_update+0xac>
			if(g_EN_measure == 0){
 8000f1c:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <system_state_update+0xc0>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d103      	bne.n	8000f2c <system_state_update+0x8c>
				g_EN_measure = 1;
 8000f24:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <system_state_update+0xc0>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	701a      	strb	r2, [r3, #0]
					g_EN_measure = 1;
				}
			}
		}
	}
}
 8000f2a:	e00f      	b.n	8000f4c <system_state_update+0xac>
			else if(g_EN_measure == 1){
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <system_state_update+0xc0>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d103      	bne.n	8000f3c <system_state_update+0x9c>
				g_EN_measure = 2;
 8000f34:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <system_state_update+0xc0>)
 8000f36:	2202      	movs	r2, #2
 8000f38:	701a      	strb	r2, [r3, #0]
}
 8000f3a:	e007      	b.n	8000f4c <system_state_update+0xac>
				if(g_EN_measure ==2){
 8000f3c:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <system_state_update+0xc0>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d103      	bne.n	8000f4c <system_state_update+0xac>
					g_EN_measure = 1;
 8000f44:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <system_state_update+0xc0>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	701a      	strb	r2, [r3, #0]
}
 8000f4a:	e7ff      	b.n	8000f4c <system_state_update+0xac>
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	20000127 	.word	0x20000127
 8000f5c:	2000010a 	.word	0x2000010a
 8000f60:	2000010b 	.word	0x2000010b
 8000f64:	200000f8 	.word	0x200000f8

08000f68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f6e:	f000 fd6d 	bl	8001a4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f72:	f000 f947 	bl	8001204 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f76:	f000 fa2d 	bl	80013d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f7a:	f000 f9ff 	bl	800137c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000f7e:	f000 f9ab 	bl	80012d8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(150);
 8000f82:	2096      	movs	r0, #150	; 0x96
 8000f84:	f000 fdd4 	bl	8001b30 <HAL_Delay>
  HAL_UART_Transmit_IT(&huart2, (uint8_t*)studentNum, 13) ;
 8000f88:	220d      	movs	r2, #13
 8000f8a:	498c      	ldr	r1, [pc, #560]	; (80011bc <main+0x254>)
 8000f8c:	488c      	ldr	r0, [pc, #560]	; (80011c0 <main+0x258>)
 8000f8e:	f002 fa14 	bl	80033ba <HAL_UART_Transmit_IT>

  HAL_UART_Receive_IT(&huart2, (uint8_t*)char_rcvd, 1) ;
 8000f92:	2201      	movs	r2, #1
 8000f94:	498b      	ldr	r1, [pc, #556]	; (80011c4 <main+0x25c>)
 8000f96:	488a      	ldr	r0, [pc, #552]	; (80011c0 <main+0x258>)
 8000f98:	f002 fa54 	bl	8003444 <HAL_UART_Receive_IT>

  g_time_passed = HAL_GetTick() ; //snapshot of time
 8000f9c:	f000 fdbc 	bl	8001b18 <HAL_GetTick>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	4a89      	ldr	r2, [pc, #548]	; (80011c8 <main+0x260>)
 8000fa4:	6013      	str	r3, [r2, #0]
  g_pulse_window_period  = HAL_GetTick() ;
 8000fa6:	f000 fdb7 	bl	8001b18 <HAL_GetTick>
 8000faa:	4603      	mov	r3, r0
 8000fac:	4a87      	ldr	r2, [pc, #540]	; (80011cc <main+0x264>)
 8000fae:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  system_state_update() ;
 8000fb0:	f7ff ff76 	bl	8000ea0 <system_state_update>


	  // measure Ta & measure Tb
	  if(g_EN_measure == 1){
 8000fb4:	4b86      	ldr	r3, [pc, #536]	; (80011d0 <main+0x268>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d174      	bne.n	80010a6 <main+0x13e>

		  //ANALOGUE SENSOR CALIBRATION
		  g_temp_in_deg = get_adc_value_and_celsius_temperature() ;
 8000fbc:	f7ff feb0 	bl	8000d20 <get_adc_value_and_celsius_temperature>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	4b83      	ldr	r3, [pc, #524]	; (80011d4 <main+0x26c>)
 8000fc6:	801a      	strh	r2, [r3, #0]
		  store_temp_in_string(g_temp_in_deg, g_temperature, LEN);
 8000fc8:	4b82      	ldr	r3, [pc, #520]	; (80011d4 <main+0x26c>)
 8000fca:	881b      	ldrh	r3, [r3, #0]
 8000fcc:	2203      	movs	r2, #3
 8000fce:	4982      	ldr	r1, [pc, #520]	; (80011d8 <main+0x270>)
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fefb 	bl	8000dcc <store_temp_in_string>

		  // DIGITAL SENSOR CALIBRATION
		  if(HAL_GetTick() - g_pulse_window_period >=104){
 8000fd6:	f000 fd9f 	bl	8001b18 <HAL_GetTick>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	4b7b      	ldr	r3, [pc, #492]	; (80011cc <main+0x264>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	2b67      	cmp	r3, #103	; 0x67
 8000fe4:	d92d      	bls.n	8001042 <main+0xda>
			  g_num_pulses = pulse_count ;
 8000fe6:	4b7d      	ldr	r3, [pc, #500]	; (80011dc <main+0x274>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	b29a      	uxth	r2, r3
 8000fec:	4b7c      	ldr	r3, [pc, #496]	; (80011e0 <main+0x278>)
 8000fee:	801a      	strh	r2, [r3, #0]
			  g_TO1_temp =  (pulse_count/4096.0)*256-50 ;  // fluctuation in temperature - due to PCB issues?
 8000ff0:	4b7a      	ldr	r3, [pc, #488]	; (80011dc <main+0x274>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff fa31 	bl	800045c <__aeabi_ui2d>
 8000ffa:	f04f 0200 	mov.w	r2, #0
 8000ffe:	4b79      	ldr	r3, [pc, #484]	; (80011e4 <main+0x27c>)
 8001000:	f7ff fbd0 	bl	80007a4 <__aeabi_ddiv>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4610      	mov	r0, r2
 800100a:	4619      	mov	r1, r3
 800100c:	f04f 0200 	mov.w	r2, #0
 8001010:	4b75      	ldr	r3, [pc, #468]	; (80011e8 <main+0x280>)
 8001012:	f7ff fa9d 	bl	8000550 <__aeabi_dmul>
 8001016:	4602      	mov	r2, r0
 8001018:	460b      	mov	r3, r1
 800101a:	4610      	mov	r0, r2
 800101c:	4619      	mov	r1, r3
 800101e:	f04f 0200 	mov.w	r2, #0
 8001022:	4b72      	ldr	r3, [pc, #456]	; (80011ec <main+0x284>)
 8001024:	f7ff f8dc 	bl	80001e0 <__aeabi_dsub>
 8001028:	4602      	mov	r2, r0
 800102a:	460b      	mov	r3, r1
 800102c:	4970      	ldr	r1, [pc, #448]	; (80011f0 <main+0x288>)
 800102e:	e9c1 2300 	strd	r2, r3, [r1]


			  pulse_count = 0 ;
 8001032:	4b6a      	ldr	r3, [pc, #424]	; (80011dc <main+0x274>)
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
			  g_pulse_window_period  = HAL_GetTick()  ;
 8001038:	f000 fd6e 	bl	8001b18 <HAL_GetTick>
 800103c:	4603      	mov	r3, r0
 800103e:	4a63      	ldr	r2, [pc, #396]	; (80011cc <main+0x264>)
 8001040:	6013      	str	r3, [r2, #0]

		  }


		  //re-prime system state update
		  g_transmit_system_state =1; //send the system state again
 8001042:	4b6c      	ldr	r3, [pc, #432]	; (80011f4 <main+0x28c>)
 8001044:	2201      	movs	r2, #1
 8001046:	701a      	strb	r2, [r3, #0]

		  if(HAL_GetTick() - g_time_passed >= 50 && g_LED_D2_ON == 0){
 8001048:	f000 fd66 	bl	8001b18 <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	4b5e      	ldr	r3, [pc, #376]	; (80011c8 <main+0x260>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	2b31      	cmp	r3, #49	; 0x31
 8001056:	d90c      	bls.n	8001072 <main+0x10a>
 8001058:	4b67      	ldr	r3, [pc, #412]	; (80011f8 <main+0x290>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d108      	bne.n	8001072 <main+0x10a>
			  g_LED_D2_ON = 1; // set D2 on
 8001060:	4b65      	ldr	r3, [pc, #404]	; (80011f8 <main+0x290>)
 8001062:	2201      	movs	r2, #1
 8001064:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET) ;
 8001066:	2200      	movs	r2, #0
 8001068:	2120      	movs	r1, #32
 800106a:	4864      	ldr	r0, [pc, #400]	; (80011fc <main+0x294>)
 800106c:	f001 fc82 	bl	8002974 <HAL_GPIO_WritePin>
 8001070:	e0a3      	b.n	80011ba <main+0x252>

		  }
		  else if(HAL_GetTick() - g_time_passed >= 100 && g_LED_D2_ON == 1){
 8001072:	f000 fd51 	bl	8001b18 <HAL_GetTick>
 8001076:	4602      	mov	r2, r0
 8001078:	4b53      	ldr	r3, [pc, #332]	; (80011c8 <main+0x260>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	2b63      	cmp	r3, #99	; 0x63
 8001080:	d996      	bls.n	8000fb0 <main+0x48>
 8001082:	4b5d      	ldr	r3, [pc, #372]	; (80011f8 <main+0x290>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d192      	bne.n	8000fb0 <main+0x48>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET) ;
 800108a:	2201      	movs	r2, #1
 800108c:	2120      	movs	r1, #32
 800108e:	485b      	ldr	r0, [pc, #364]	; (80011fc <main+0x294>)
 8001090:	f001 fc70 	bl	8002974 <HAL_GPIO_WritePin>
			  g_time_passed =  HAL_GetTick() ;
 8001094:	f000 fd40 	bl	8001b18 <HAL_GetTick>
 8001098:	4603      	mov	r3, r0
 800109a:	4a4b      	ldr	r2, [pc, #300]	; (80011c8 <main+0x260>)
 800109c:	6013      	str	r3, [r2, #0]
			  g_LED_D2_ON = 0;  //set D2 off
 800109e:	4b56      	ldr	r3, [pc, #344]	; (80011f8 <main+0x290>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	701a      	strb	r2, [r3, #0]
 80010a4:	e784      	b.n	8000fb0 <main+0x48>

		  }

	  }
	  else if(g_EN_measure == 2){
 80010a6:	4b4a      	ldr	r3, [pc, #296]	; (80011d0 <main+0x268>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d180      	bne.n	8000fb0 <main+0x48>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET) ;
 80010ae:	2201      	movs	r2, #1
 80010b0:	2120      	movs	r1, #32
 80010b2:	4852      	ldr	r0, [pc, #328]	; (80011fc <main+0x294>)
 80010b4:	f001 fc5e 	bl	8002974 <HAL_GPIO_WritePin>

		  for(int i = 0; i < 17 ; i++){
 80010b8:	2300      	movs	r3, #0
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	e06d      	b.n	800119a <main+0x232>
			  switch(i){
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2b0f      	cmp	r3, #15
 80010c2:	d866      	bhi.n	8001192 <main+0x22a>
 80010c4:	a201      	add	r2, pc, #4	; (adr r2, 80010cc <main+0x164>)
 80010c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ca:	bf00      	nop
 80010cc:	0800110d 	.word	0x0800110d
 80010d0:	08001115 	.word	0x08001115
 80010d4:	0800111d 	.word	0x0800111d
 80010d8:	08001127 	.word	0x08001127
 80010dc:	08001131 	.word	0x08001131
 80010e0:	0800113b 	.word	0x0800113b
 80010e4:	08001143 	.word	0x08001143
 80010e8:	0800114b 	.word	0x0800114b
 80010ec:	08001153 	.word	0x08001153
 80010f0:	0800115b 	.word	0x0800115b
 80010f4:	08001163 	.word	0x08001163
 80010f8:	0800116b 	.word	0x0800116b
 80010fc:	08001173 	.word	0x08001173
 8001100:	0800117b 	.word	0x0800117b
 8001104:	08001183 	.word	0x08001183
 8001108:	0800118b 	.word	0x0800118b
			  case 0:
				  system_state_transmit[0] = '&' ;
 800110c:	4b3c      	ldr	r3, [pc, #240]	; (8001200 <main+0x298>)
 800110e:	2226      	movs	r2, #38	; 0x26
 8001110:	701a      	strb	r2, [r3, #0]
				  break ;
 8001112:	e03f      	b.n	8001194 <main+0x22c>
			  case 1:
				  system_state_transmit[1] = '_' ;
 8001114:	4b3a      	ldr	r3, [pc, #232]	; (8001200 <main+0x298>)
 8001116:	225f      	movs	r2, #95	; 0x5f
 8001118:	705a      	strb	r2, [r3, #1]

				  break;
 800111a:	e03b      	b.n	8001194 <main+0x22c>
			  case 2:
				  system_state_transmit[2] = g_temperature[0] ;
 800111c:	4b2e      	ldr	r3, [pc, #184]	; (80011d8 <main+0x270>)
 800111e:	781a      	ldrb	r2, [r3, #0]
 8001120:	4b37      	ldr	r3, [pc, #220]	; (8001200 <main+0x298>)
 8001122:	709a      	strb	r2, [r3, #2]

				  break;
 8001124:	e036      	b.n	8001194 <main+0x22c>
			  case 3:
				  system_state_transmit[3] = g_temperature[1] ;
 8001126:	4b2c      	ldr	r3, [pc, #176]	; (80011d8 <main+0x270>)
 8001128:	785a      	ldrb	r2, [r3, #1]
 800112a:	4b35      	ldr	r3, [pc, #212]	; (8001200 <main+0x298>)
 800112c:	70da      	strb	r2, [r3, #3]

				  break;
 800112e:	e031      	b.n	8001194 <main+0x22c>
			  case 4:
				  system_state_transmit[4] = g_temperature[2] ;
 8001130:	4b29      	ldr	r3, [pc, #164]	; (80011d8 <main+0x270>)
 8001132:	789a      	ldrb	r2, [r3, #2]
 8001134:	4b32      	ldr	r3, [pc, #200]	; (8001200 <main+0x298>)
 8001136:	711a      	strb	r2, [r3, #4]

				  break;
 8001138:	e02c      	b.n	8001194 <main+0x22c>
			  case 5:
				  system_state_transmit[5] = '_' ;
 800113a:	4b31      	ldr	r3, [pc, #196]	; (8001200 <main+0x298>)
 800113c:	225f      	movs	r2, #95	; 0x5f
 800113e:	715a      	strb	r2, [r3, #5]

				  break;
 8001140:	e028      	b.n	8001194 <main+0x22c>
			  case 6:
				  system_state_transmit[6] = '0' ;
 8001142:	4b2f      	ldr	r3, [pc, #188]	; (8001200 <main+0x298>)
 8001144:	2230      	movs	r2, #48	; 0x30
 8001146:	719a      	strb	r2, [r3, #6]

				  break;
 8001148:	e024      	b.n	8001194 <main+0x22c>
			  case 7:
				  system_state_transmit[7] = '0' ;
 800114a:	4b2d      	ldr	r3, [pc, #180]	; (8001200 <main+0x298>)
 800114c:	2230      	movs	r2, #48	; 0x30
 800114e:	71da      	strb	r2, [r3, #7]

				  break;
 8001150:	e020      	b.n	8001194 <main+0x22c>
			  case 8:
				  system_state_transmit[8] = '0' ;
 8001152:	4b2b      	ldr	r3, [pc, #172]	; (8001200 <main+0x298>)
 8001154:	2230      	movs	r2, #48	; 0x30
 8001156:	721a      	strb	r2, [r3, #8]

				  break;
 8001158:	e01c      	b.n	8001194 <main+0x22c>
			  case 9:
				  system_state_transmit[9] = '_' ;
 800115a:	4b29      	ldr	r3, [pc, #164]	; (8001200 <main+0x298>)
 800115c:	225f      	movs	r2, #95	; 0x5f
 800115e:	725a      	strb	r2, [r3, #9]

				  break;
 8001160:	e018      	b.n	8001194 <main+0x22c>
			  case 10:
				  system_state_transmit[10] = '0' ;
 8001162:	4b27      	ldr	r3, [pc, #156]	; (8001200 <main+0x298>)
 8001164:	2230      	movs	r2, #48	; 0x30
 8001166:	729a      	strb	r2, [r3, #10]

				  break;
 8001168:	e014      	b.n	8001194 <main+0x22c>
			  case 11:
				  system_state_transmit[11] = '0' ;
 800116a:	4b25      	ldr	r3, [pc, #148]	; (8001200 <main+0x298>)
 800116c:	2230      	movs	r2, #48	; 0x30
 800116e:	72da      	strb	r2, [r3, #11]

				  break;
 8001170:	e010      	b.n	8001194 <main+0x22c>
			  case 12:
				  system_state_transmit[12] = '0' ;
 8001172:	4b23      	ldr	r3, [pc, #140]	; (8001200 <main+0x298>)
 8001174:	2230      	movs	r2, #48	; 0x30
 8001176:	731a      	strb	r2, [r3, #12]

				  break;
 8001178:	e00c      	b.n	8001194 <main+0x22c>
			  case 13:
				  system_state_transmit[13] = '_' ;
 800117a:	4b21      	ldr	r3, [pc, #132]	; (8001200 <main+0x298>)
 800117c:	225f      	movs	r2, #95	; 0x5f
 800117e:	735a      	strb	r2, [r3, #13]

				  break;
 8001180:	e008      	b.n	8001194 <main+0x22c>
			  case 14:
				  system_state_transmit[14] = '*' ;
 8001182:	4b1f      	ldr	r3, [pc, #124]	; (8001200 <main+0x298>)
 8001184:	222a      	movs	r2, #42	; 0x2a
 8001186:	739a      	strb	r2, [r3, #14]

				  break;
 8001188:	e004      	b.n	8001194 <main+0x22c>
			  case 15:
				  system_state_transmit[15] = '\n' ;
 800118a:	4b1d      	ldr	r3, [pc, #116]	; (8001200 <main+0x298>)
 800118c:	220a      	movs	r2, #10
 800118e:	73da      	strb	r2, [r3, #15]

				  break;
 8001190:	e000      	b.n	8001194 <main+0x22c>
			  default:
				  break;
 8001192:	bf00      	nop
		  for(int i = 0; i < 17 ; i++){
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3301      	adds	r3, #1
 8001198:	607b      	str	r3, [r7, #4]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2b10      	cmp	r3, #16
 800119e:	dd8e      	ble.n	80010be <main+0x156>
			  }
		  }
		  // Transmit system state via the UART
		  if(g_transmit_system_state  == 1){
 80011a0:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <main+0x28c>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	f47f af03 	bne.w	8000fb0 <main+0x48>
			  g_transmit_system_state = 0;
 80011aa:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <main+0x28c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit_IT(&huart2, (uint8_t*)system_state_transmit, 16);
 80011b0:	2210      	movs	r2, #16
 80011b2:	4913      	ldr	r1, [pc, #76]	; (8001200 <main+0x298>)
 80011b4:	4802      	ldr	r0, [pc, #8]	; (80011c0 <main+0x258>)
 80011b6:	f002 f900 	bl	80033ba <HAL_UART_Transmit_IT>
	  system_state_update() ;
 80011ba:	e6f9      	b.n	8000fb0 <main+0x48>
 80011bc:	20000000 	.word	0x20000000
 80011c0:	20000084 	.word	0x20000084
 80011c4:	20000010 	.word	0x20000010
 80011c8:	2000010c 	.word	0x2000010c
 80011cc:	200000e8 	.word	0x200000e8
 80011d0:	2000010b 	.word	0x2000010b
 80011d4:	200000e0 	.word	0x200000e0
 80011d8:	200000e4 	.word	0x200000e4
 80011dc:	20000130 	.word	0x20000130
 80011e0:	200000ec 	.word	0x200000ec
 80011e4:	40b00000 	.word	0x40b00000
 80011e8:	40700000 	.word	0x40700000
 80011ec:	40490000 	.word	0x40490000
 80011f0:	200000f0 	.word	0x200000f0
 80011f4:	20000011 	.word	0x20000011
 80011f8:	20000110 	.word	0x20000110
 80011fc:	40020400 	.word	0x40020400
 8001200:	20000114 	.word	0x20000114

08001204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b094      	sub	sp, #80	; 0x50
 8001208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800120a:	f107 0320 	add.w	r3, r7, #32
 800120e:	2230      	movs	r2, #48	; 0x30
 8001210:	2100      	movs	r1, #0
 8001212:	4618      	mov	r0, r3
 8001214:	f003 f864 	bl	80042e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001218:	f107 030c 	add.w	r3, r7, #12
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001228:	2300      	movs	r3, #0
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	4b28      	ldr	r3, [pc, #160]	; (80012d0 <SystemClock_Config+0xcc>)
 800122e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001230:	4a27      	ldr	r2, [pc, #156]	; (80012d0 <SystemClock_Config+0xcc>)
 8001232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001236:	6413      	str	r3, [r2, #64]	; 0x40
 8001238:	4b25      	ldr	r3, [pc, #148]	; (80012d0 <SystemClock_Config+0xcc>)
 800123a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001244:	2300      	movs	r3, #0
 8001246:	607b      	str	r3, [r7, #4]
 8001248:	4b22      	ldr	r3, [pc, #136]	; (80012d4 <SystemClock_Config+0xd0>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a21      	ldr	r2, [pc, #132]	; (80012d4 <SystemClock_Config+0xd0>)
 800124e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001252:	6013      	str	r3, [r2, #0]
 8001254:	4b1f      	ldr	r3, [pc, #124]	; (80012d4 <SystemClock_Config+0xd0>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001260:	2302      	movs	r3, #2
 8001262:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001264:	2301      	movs	r3, #1
 8001266:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001268:	2310      	movs	r3, #16
 800126a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800126c:	2302      	movs	r3, #2
 800126e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001270:	2300      	movs	r3, #0
 8001272:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001274:	2310      	movs	r3, #16
 8001276:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001278:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800127c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800127e:	2304      	movs	r3, #4
 8001280:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001282:	2304      	movs	r3, #4
 8001284:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001286:	f107 0320 	add.w	r3, r7, #32
 800128a:	4618      	mov	r0, r3
 800128c:	f001 fbb0 	bl	80029f0 <HAL_RCC_OscConfig>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001296:	f000 f965 	bl	8001564 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800129a:	230f      	movs	r3, #15
 800129c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800129e:	2302      	movs	r3, #2
 80012a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012ac:	2300      	movs	r3, #0
 80012ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012b0:	f107 030c 	add.w	r3, r7, #12
 80012b4:	2102      	movs	r1, #2
 80012b6:	4618      	mov	r0, r3
 80012b8:	f001 fe12 	bl	8002ee0 <HAL_RCC_ClockConfig>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80012c2:	f000 f94f 	bl	8001564 <Error_Handler>
  }
}
 80012c6:	bf00      	nop
 80012c8:	3750      	adds	r7, #80	; 0x50
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40007000 	.word	0x40007000

080012d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012de:	463b      	mov	r3, r7
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80012ea:	4b21      	ldr	r3, [pc, #132]	; (8001370 <MX_ADC1_Init+0x98>)
 80012ec:	4a21      	ldr	r2, [pc, #132]	; (8001374 <MX_ADC1_Init+0x9c>)
 80012ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012f0:	4b1f      	ldr	r3, [pc, #124]	; (8001370 <MX_ADC1_Init+0x98>)
 80012f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012f8:	4b1d      	ldr	r3, [pc, #116]	; (8001370 <MX_ADC1_Init+0x98>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80012fe:	4b1c      	ldr	r3, [pc, #112]	; (8001370 <MX_ADC1_Init+0x98>)
 8001300:	2200      	movs	r2, #0
 8001302:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001304:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <MX_ADC1_Init+0x98>)
 8001306:	2200      	movs	r2, #0
 8001308:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800130a:	4b19      	ldr	r3, [pc, #100]	; (8001370 <MX_ADC1_Init+0x98>)
 800130c:	2200      	movs	r2, #0
 800130e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001312:	4b17      	ldr	r3, [pc, #92]	; (8001370 <MX_ADC1_Init+0x98>)
 8001314:	2200      	movs	r2, #0
 8001316:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001318:	4b15      	ldr	r3, [pc, #84]	; (8001370 <MX_ADC1_Init+0x98>)
 800131a:	4a17      	ldr	r2, [pc, #92]	; (8001378 <MX_ADC1_Init+0xa0>)
 800131c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800131e:	4b14      	ldr	r3, [pc, #80]	; (8001370 <MX_ADC1_Init+0x98>)
 8001320:	2200      	movs	r2, #0
 8001322:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001324:	4b12      	ldr	r3, [pc, #72]	; (8001370 <MX_ADC1_Init+0x98>)
 8001326:	2201      	movs	r2, #1
 8001328:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800132a:	4b11      	ldr	r3, [pc, #68]	; (8001370 <MX_ADC1_Init+0x98>)
 800132c:	2200      	movs	r2, #0
 800132e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001332:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <MX_ADC1_Init+0x98>)
 8001334:	2201      	movs	r2, #1
 8001336:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001338:	480d      	ldr	r0, [pc, #52]	; (8001370 <MX_ADC1_Init+0x98>)
 800133a:	f000 fc1d 	bl	8001b78 <HAL_ADC_Init>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001344:	f000 f90e 	bl	8001564 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001348:	2300      	movs	r3, #0
 800134a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800134c:	2301      	movs	r3, #1
 800134e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001350:	2300      	movs	r3, #0
 8001352:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001354:	463b      	mov	r3, r7
 8001356:	4619      	mov	r1, r3
 8001358:	4805      	ldr	r0, [pc, #20]	; (8001370 <MX_ADC1_Init+0x98>)
 800135a:	f000 fd9d 	bl	8001e98 <HAL_ADC_ConfigChannel>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001364:	f000 f8fe 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001368:	bf00      	nop
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	2000003c 	.word	0x2000003c
 8001374:	40012000 	.word	0x40012000
 8001378:	0f000001 	.word	0x0f000001

0800137c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001380:	4b12      	ldr	r3, [pc, #72]	; (80013cc <MX_USART2_UART_Init+0x50>)
 8001382:	4a13      	ldr	r2, [pc, #76]	; (80013d0 <MX_USART2_UART_Init+0x54>)
 8001384:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001386:	4b11      	ldr	r3, [pc, #68]	; (80013cc <MX_USART2_UART_Init+0x50>)
 8001388:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800138c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800138e:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <MX_USART2_UART_Init+0x50>)
 8001390:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001394:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001396:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <MX_USART2_UART_Init+0x50>)
 8001398:	2200      	movs	r2, #0
 800139a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_ODD;
 800139c:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <MX_USART2_UART_Init+0x50>)
 800139e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80013a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013a4:	4b09      	ldr	r3, [pc, #36]	; (80013cc <MX_USART2_UART_Init+0x50>)
 80013a6:	220c      	movs	r2, #12
 80013a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013aa:	4b08      	ldr	r3, [pc, #32]	; (80013cc <MX_USART2_UART_Init+0x50>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <MX_USART2_UART_Init+0x50>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013b6:	4805      	ldr	r0, [pc, #20]	; (80013cc <MX_USART2_UART_Init+0x50>)
 80013b8:	f001 ffb2 	bl	8003320 <HAL_UART_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 80013c2:	f000 f8cf 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20000084 	.word	0x20000084
 80013d0:	40004400 	.word	0x40004400

080013d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08a      	sub	sp, #40	; 0x28
 80013d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013da:	f107 0314 	add.w	r3, r7, #20
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	60da      	str	r2, [r3, #12]
 80013e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
 80013ee:	4b59      	ldr	r3, [pc, #356]	; (8001554 <MX_GPIO_Init+0x180>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a58      	ldr	r2, [pc, #352]	; (8001554 <MX_GPIO_Init+0x180>)
 80013f4:	f043 0304 	orr.w	r3, r3, #4
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b56      	ldr	r3, [pc, #344]	; (8001554 <MX_GPIO_Init+0x180>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0304 	and.w	r3, r3, #4
 8001402:	613b      	str	r3, [r7, #16]
 8001404:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	4b52      	ldr	r3, [pc, #328]	; (8001554 <MX_GPIO_Init+0x180>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	4a51      	ldr	r2, [pc, #324]	; (8001554 <MX_GPIO_Init+0x180>)
 8001410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001414:	6313      	str	r3, [r2, #48]	; 0x30
 8001416:	4b4f      	ldr	r3, [pc, #316]	; (8001554 <MX_GPIO_Init+0x180>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	60bb      	str	r3, [r7, #8]
 8001426:	4b4b      	ldr	r3, [pc, #300]	; (8001554 <MX_GPIO_Init+0x180>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	4a4a      	ldr	r2, [pc, #296]	; (8001554 <MX_GPIO_Init+0x180>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	6313      	str	r3, [r2, #48]	; 0x30
 8001432:	4b48      	ldr	r3, [pc, #288]	; (8001554 <MX_GPIO_Init+0x180>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	60bb      	str	r3, [r7, #8]
 800143c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	607b      	str	r3, [r7, #4]
 8001442:	4b44      	ldr	r3, [pc, #272]	; (8001554 <MX_GPIO_Init+0x180>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a43      	ldr	r2, [pc, #268]	; (8001554 <MX_GPIO_Init+0x180>)
 8001448:	f043 0302 	orr.w	r3, r3, #2
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b41      	ldr	r3, [pc, #260]	; (8001554 <MX_GPIO_Init+0x180>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 800145a:	2200      	movs	r2, #0
 800145c:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001460:	483d      	ldr	r0, [pc, #244]	; (8001558 <MX_GPIO_Init+0x184>)
 8001462:	f001 fa87 	bl	8002974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001466:	2200      	movs	r2, #0
 8001468:	f44f 6186 	mov.w	r1, #1072	; 0x430
 800146c:	483b      	ldr	r0, [pc, #236]	; (800155c <MX_GPIO_Init+0x188>)
 800146e:	f001 fa81 	bl	8002974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001472:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001476:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001478:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800147c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001482:	f107 0314 	add.w	r3, r7, #20
 8001486:	4619      	mov	r1, r3
 8001488:	4835      	ldr	r0, [pc, #212]	; (8001560 <MX_GPIO_Init+0x18c>)
 800148a:	f001 f8d7 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pin : LMTO1_GPIO_EXTI2_Pin */
  GPIO_InitStruct.Pin = LMTO1_GPIO_EXTI2_Pin;
 800148e:	2304      	movs	r3, #4
 8001490:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001492:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001496:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LMTO1_GPIO_EXTI2_GPIO_Port, &GPIO_InitStruct);
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	4619      	mov	r1, r3
 80014a2:	482f      	ldr	r0, [pc, #188]	; (8001560 <MX_GPIO_Init+0x18c>)
 80014a4:	f001 f8ca 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_10;
 80014a8:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80014ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ae:	2301      	movs	r3, #1
 80014b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b6:	2300      	movs	r3, #0
 80014b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ba:	f107 0314 	add.w	r3, r7, #20
 80014be:	4619      	mov	r1, r3
 80014c0:	4825      	ldr	r0, [pc, #148]	; (8001558 <MX_GPIO_Init+0x184>)
 80014c2:	f001 f8bb 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014c6:	23c0      	movs	r3, #192	; 0xc0
 80014c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80014ca:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80014ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014d0:	2301      	movs	r3, #1
 80014d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	4619      	mov	r1, r3
 80014da:	481f      	ldr	r0, [pc, #124]	; (8001558 <MX_GPIO_Init+0x184>)
 80014dc:	f001 f8ae 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 80014e0:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80014e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e6:	2301      	movs	r3, #1
 80014e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ee:	2300      	movs	r3, #0
 80014f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f2:	f107 0314 	add.w	r3, r7, #20
 80014f6:	4619      	mov	r1, r3
 80014f8:	4818      	ldr	r0, [pc, #96]	; (800155c <MX_GPIO_Init+0x188>)
 80014fa:	f001 f89f 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001502:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001504:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001508:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800150a:	2301      	movs	r3, #1
 800150c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150e:	f107 0314 	add.w	r3, r7, #20
 8001512:	4619      	mov	r1, r3
 8001514:	4811      	ldr	r0, [pc, #68]	; (800155c <MX_GPIO_Init+0x188>)
 8001516:	f001 f891 	bl	800263c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800151a:	2200      	movs	r2, #0
 800151c:	2100      	movs	r1, #0
 800151e:	2008      	movs	r0, #8
 8001520:	f000 ffc3 	bl	80024aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001524:	2008      	movs	r0, #8
 8001526:	f000 ffdc 	bl	80024e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800152a:	2200      	movs	r2, #0
 800152c:	2100      	movs	r1, #0
 800152e:	2017      	movs	r0, #23
 8001530:	f000 ffbb 	bl	80024aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001534:	2017      	movs	r0, #23
 8001536:	f000 ffd4 	bl	80024e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800153a:	2200      	movs	r2, #0
 800153c:	2100      	movs	r1, #0
 800153e:	2028      	movs	r0, #40	; 0x28
 8001540:	f000 ffb3 	bl	80024aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001544:	2028      	movs	r0, #40	; 0x28
 8001546:	f000 ffcc 	bl	80024e2 <HAL_NVIC_EnableIRQ>

}
 800154a:	bf00      	nop
 800154c:	3728      	adds	r7, #40	; 0x28
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40023800 	.word	0x40023800
 8001558:	40020000 	.word	0x40020000
 800155c:	40020400 	.word	0x40020400
 8001560:	40020800 	.word	0x40020800

08001564 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001568:	b672      	cpsid	i
}
 800156a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800156c:	e7fe      	b.n	800156c <Error_Handler+0x8>
	...

08001570 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	607b      	str	r3, [r7, #4]
 800157a:	4b10      	ldr	r3, [pc, #64]	; (80015bc <HAL_MspInit+0x4c>)
 800157c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157e:	4a0f      	ldr	r2, [pc, #60]	; (80015bc <HAL_MspInit+0x4c>)
 8001580:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001584:	6453      	str	r3, [r2, #68]	; 0x44
 8001586:	4b0d      	ldr	r3, [pc, #52]	; (80015bc <HAL_MspInit+0x4c>)
 8001588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	603b      	str	r3, [r7, #0]
 8001596:	4b09      	ldr	r3, [pc, #36]	; (80015bc <HAL_MspInit+0x4c>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	4a08      	ldr	r2, [pc, #32]	; (80015bc <HAL_MspInit+0x4c>)
 800159c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a0:	6413      	str	r3, [r2, #64]	; 0x40
 80015a2:	4b06      	ldr	r3, [pc, #24]	; (80015bc <HAL_MspInit+0x4c>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015aa:	603b      	str	r3, [r7, #0]
 80015ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015ae:	2007      	movs	r0, #7
 80015b0:	f000 ff70 	bl	8002494 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015b4:	bf00      	nop
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40023800 	.word	0x40023800

080015c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08a      	sub	sp, #40	; 0x28
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a17      	ldr	r2, [pc, #92]	; (800163c <HAL_ADC_MspInit+0x7c>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d127      	bne.n	8001632 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	613b      	str	r3, [r7, #16]
 80015e6:	4b16      	ldr	r3, [pc, #88]	; (8001640 <HAL_ADC_MspInit+0x80>)
 80015e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ea:	4a15      	ldr	r2, [pc, #84]	; (8001640 <HAL_ADC_MspInit+0x80>)
 80015ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f0:	6453      	str	r3, [r2, #68]	; 0x44
 80015f2:	4b13      	ldr	r3, [pc, #76]	; (8001640 <HAL_ADC_MspInit+0x80>)
 80015f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015fa:	613b      	str	r3, [r7, #16]
 80015fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <HAL_ADC_MspInit+0x80>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	4a0e      	ldr	r2, [pc, #56]	; (8001640 <HAL_ADC_MspInit+0x80>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6313      	str	r3, [r2, #48]	; 0x30
 800160e:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <HAL_ADC_MspInit+0x80>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800161a:	2301      	movs	r3, #1
 800161c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800161e:	2303      	movs	r3, #3
 8001620:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001626:	f107 0314 	add.w	r3, r7, #20
 800162a:	4619      	mov	r1, r3
 800162c:	4805      	ldr	r0, [pc, #20]	; (8001644 <HAL_ADC_MspInit+0x84>)
 800162e:	f001 f805 	bl	800263c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001632:	bf00      	nop
 8001634:	3728      	adds	r7, #40	; 0x28
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40012000 	.word	0x40012000
 8001640:	40023800 	.word	0x40023800
 8001644:	40020000 	.word	0x40020000

08001648 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08a      	sub	sp, #40	; 0x28
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a1d      	ldr	r2, [pc, #116]	; (80016dc <HAL_UART_MspInit+0x94>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d133      	bne.n	80016d2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	4b1c      	ldr	r3, [pc, #112]	; (80016e0 <HAL_UART_MspInit+0x98>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	4a1b      	ldr	r2, [pc, #108]	; (80016e0 <HAL_UART_MspInit+0x98>)
 8001674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001678:	6413      	str	r3, [r2, #64]	; 0x40
 800167a:	4b19      	ldr	r3, [pc, #100]	; (80016e0 <HAL_UART_MspInit+0x98>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001682:	613b      	str	r3, [r7, #16]
 8001684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <HAL_UART_MspInit+0x98>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	4a14      	ldr	r2, [pc, #80]	; (80016e0 <HAL_UART_MspInit+0x98>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6313      	str	r3, [r2, #48]	; 0x30
 8001696:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <HAL_UART_MspInit+0x98>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016a2:	230c      	movs	r3, #12
 80016a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a6:	2302      	movs	r3, #2
 80016a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ae:	2303      	movs	r3, #3
 80016b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016b2:	2307      	movs	r3, #7
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b6:	f107 0314 	add.w	r3, r7, #20
 80016ba:	4619      	mov	r1, r3
 80016bc:	4809      	ldr	r0, [pc, #36]	; (80016e4 <HAL_UART_MspInit+0x9c>)
 80016be:	f000 ffbd 	bl	800263c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2100      	movs	r1, #0
 80016c6:	2026      	movs	r0, #38	; 0x26
 80016c8:	f000 feef 	bl	80024aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016cc:	2026      	movs	r0, #38	; 0x26
 80016ce:	f000 ff08 	bl	80024e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016d2:	bf00      	nop
 80016d4:	3728      	adds	r7, #40	; 0x28
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40004400 	.word	0x40004400
 80016e0:	40023800 	.word	0x40023800
 80016e4:	40020000 	.word	0x40020000

080016e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016ec:	e7fe      	b.n	80016ec <NMI_Handler+0x4>

080016ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016f2:	e7fe      	b.n	80016f2 <HardFault_Handler+0x4>

080016f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f8:	e7fe      	b.n	80016f8 <MemManage_Handler+0x4>

080016fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016fe:	e7fe      	b.n	80016fe <BusFault_Handler+0x4>

08001700 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001704:	e7fe      	b.n	8001704 <UsageFault_Handler+0x4>

08001706 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001734:	f000 f9dc 	bl	8001af0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}

0800173c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

	pulse_count++ ;
 8001740:	4b04      	ldr	r3, [pc, #16]	; (8001754 <EXTI2_IRQHandler+0x18>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	3301      	adds	r3, #1
 8001746:	4a03      	ldr	r2, [pc, #12]	; (8001754 <EXTI2_IRQHandler+0x18>)
 8001748:	6013      	str	r3, [r2, #0]

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LMTO1_GPIO_EXTI2_Pin);
 800174a:	2004      	movs	r0, #4
 800174c:	f001 f92c 	bl	80029a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20000130 	.word	0x20000130

08001758 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_8) != RESET){
 800175c:	4b8a      	ldr	r3, [pc, #552]	; (8001988 <EXTI9_5_IRQHandler+0x230>)
 800175e:	695b      	ldr	r3, [r3, #20]
 8001760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001764:	2b00      	cmp	r3, #0
 8001766:	d039      	beq.n	80017dc <EXTI9_5_IRQHandler+0x84>


		if(HAL_GetTick() - ticks_pressed >= 20){
 8001768:	f000 f9d6 	bl	8001b18 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	4b87      	ldr	r3, [pc, #540]	; (800198c <EXTI9_5_IRQHandler+0x234>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b13      	cmp	r3, #19
 8001776:	d92c      	bls.n	80017d2 <EXTI9_5_IRQHandler+0x7a>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == 0){
 8001778:	4b85      	ldr	r3, [pc, #532]	; (8001990 <EXTI9_5_IRQHandler+0x238>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b01      	cmp	r3, #1
 8001780:	d112      	bne.n	80017a8 <EXTI9_5_IRQHandler+0x50>
 8001782:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001786:	4883      	ldr	r0, [pc, #524]	; (8001994 <EXTI9_5_IRQHandler+0x23c>)
 8001788:	f001 f8dc 	bl	8002944 <HAL_GPIO_ReadPin>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d10a      	bne.n	80017a8 <EXTI9_5_IRQHandler+0x50>
				button_state =0 ; // stable low reached
 8001792:	4b7f      	ldr	r3, [pc, #508]	; (8001990 <EXTI9_5_IRQHandler+0x238>)
 8001794:	2200      	movs	r2, #0
 8001796:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 8001798:	f000 f9be 	bl	8001b18 <HAL_GetTick>
 800179c:	4603      	mov	r3, r0
 800179e:	4a7b      	ldr	r2, [pc, #492]	; (800198c <EXTI9_5_IRQHandler+0x234>)
 80017a0:	6013      	str	r3, [r2, #0]

				g_left_button_pressed =1;
 80017a2:	4b7d      	ldr	r3, [pc, #500]	; (8001998 <EXTI9_5_IRQHandler+0x240>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOB ,GPIO_PIN_8) == 1 ){
 80017a8:	4b79      	ldr	r3, [pc, #484]	; (8001990 <EXTI9_5_IRQHandler+0x238>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d10f      	bne.n	80017d2 <EXTI9_5_IRQHandler+0x7a>
 80017b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017b6:	4877      	ldr	r0, [pc, #476]	; (8001994 <EXTI9_5_IRQHandler+0x23c>)
 80017b8:	f001 f8c4 	bl	8002944 <HAL_GPIO_ReadPin>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d107      	bne.n	80017d2 <EXTI9_5_IRQHandler+0x7a>
				ticks_pressed = HAL_GetTick() ;
 80017c2:	f000 f9a9 	bl	8001b18 <HAL_GetTick>
 80017c6:	4603      	mov	r3, r0
 80017c8:	4a70      	ldr	r2, [pc, #448]	; (800198c <EXTI9_5_IRQHandler+0x234>)
 80017ca:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 80017cc:	4b70      	ldr	r3, [pc, #448]	; (8001990 <EXTI9_5_IRQHandler+0x238>)
 80017ce:	2201      	movs	r2, #1
 80017d0:	701a      	strb	r2, [r3, #0]

			}
		}
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8) ;
 80017d2:	4b6d      	ldr	r3, [pc, #436]	; (8001988 <EXTI9_5_IRQHandler+0x230>)
 80017d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017d8:	615a      	str	r2, [r3, #20]
 80017da:	e0c5      	b.n	8001968 <EXTI9_5_IRQHandler+0x210>
	}

	else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_9) != RESET){
 80017dc:	4b6a      	ldr	r3, [pc, #424]	; (8001988 <EXTI9_5_IRQHandler+0x230>)
 80017de:	695b      	ldr	r3, [r3, #20]
 80017e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d039      	beq.n	800185c <EXTI9_5_IRQHandler+0x104>



		if(HAL_GetTick() - ticks_pressed >= 20){
 80017e8:	f000 f996 	bl	8001b18 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	4b67      	ldr	r3, [pc, #412]	; (800198c <EXTI9_5_IRQHandler+0x234>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b13      	cmp	r3, #19
 80017f6:	d92c      	bls.n	8001852 <EXTI9_5_IRQHandler+0xfa>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0){
 80017f8:	4b65      	ldr	r3, [pc, #404]	; (8001990 <EXTI9_5_IRQHandler+0x238>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d112      	bne.n	8001828 <EXTI9_5_IRQHandler+0xd0>
 8001802:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001806:	4863      	ldr	r0, [pc, #396]	; (8001994 <EXTI9_5_IRQHandler+0x23c>)
 8001808:	f001 f89c 	bl	8002944 <HAL_GPIO_ReadPin>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d10a      	bne.n	8001828 <EXTI9_5_IRQHandler+0xd0>
				button_state =0 ; // stable low reached
 8001812:	4b5f      	ldr	r3, [pc, #380]	; (8001990 <EXTI9_5_IRQHandler+0x238>)
 8001814:	2200      	movs	r2, #0
 8001816:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 8001818:	f000 f97e 	bl	8001b18 <HAL_GetTick>
 800181c:	4603      	mov	r3, r0
 800181e:	4a5b      	ldr	r2, [pc, #364]	; (800198c <EXTI9_5_IRQHandler+0x234>)
 8001820:	6013      	str	r3, [r2, #0]

				g_top_button_pressed = 1 ;
 8001822:	4b5e      	ldr	r3, [pc, #376]	; (800199c <EXTI9_5_IRQHandler+0x244>)
 8001824:	2201      	movs	r2, #1
 8001826:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOB ,GPIO_PIN_9) == 1 ){
 8001828:	4b59      	ldr	r3, [pc, #356]	; (8001990 <EXTI9_5_IRQHandler+0x238>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b00      	cmp	r3, #0
 8001830:	d10f      	bne.n	8001852 <EXTI9_5_IRQHandler+0xfa>
 8001832:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001836:	4857      	ldr	r0, [pc, #348]	; (8001994 <EXTI9_5_IRQHandler+0x23c>)
 8001838:	f001 f884 	bl	8002944 <HAL_GPIO_ReadPin>
 800183c:	4603      	mov	r3, r0
 800183e:	2b01      	cmp	r3, #1
 8001840:	d107      	bne.n	8001852 <EXTI9_5_IRQHandler+0xfa>
				ticks_pressed = HAL_GetTick() ;
 8001842:	f000 f969 	bl	8001b18 <HAL_GetTick>
 8001846:	4603      	mov	r3, r0
 8001848:	4a50      	ldr	r2, [pc, #320]	; (800198c <EXTI9_5_IRQHandler+0x234>)
 800184a:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 800184c:	4b50      	ldr	r3, [pc, #320]	; (8001990 <EXTI9_5_IRQHandler+0x238>)
 800184e:	2201      	movs	r2, #1
 8001850:	701a      	strb	r2, [r3, #0]

			}
		}

		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_9) ;
 8001852:	4b4d      	ldr	r3, [pc, #308]	; (8001988 <EXTI9_5_IRQHandler+0x230>)
 8001854:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001858:	615a      	str	r2, [r3, #20]
 800185a:	e085      	b.n	8001968 <EXTI9_5_IRQHandler+0x210>

	}

	else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_6) != RESET){
 800185c:	4b4a      	ldr	r3, [pc, #296]	; (8001988 <EXTI9_5_IRQHandler+0x230>)
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001864:	2b00      	cmp	r3, #0
 8001866:	d036      	beq.n	80018d6 <EXTI9_5_IRQHandler+0x17e>



		if(HAL_GetTick() - ticks_pressed >= 20){
 8001868:	f000 f956 	bl	8001b18 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	4b47      	ldr	r3, [pc, #284]	; (800198c <EXTI9_5_IRQHandler+0x234>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b13      	cmp	r3, #19
 8001876:	d92a      	bls.n	80018ce <EXTI9_5_IRQHandler+0x176>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 0){
 8001878:	4b45      	ldr	r3, [pc, #276]	; (8001990 <EXTI9_5_IRQHandler+0x238>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b01      	cmp	r3, #1
 8001880:	d111      	bne.n	80018a6 <EXTI9_5_IRQHandler+0x14e>
 8001882:	2140      	movs	r1, #64	; 0x40
 8001884:	4846      	ldr	r0, [pc, #280]	; (80019a0 <EXTI9_5_IRQHandler+0x248>)
 8001886:	f001 f85d 	bl	8002944 <HAL_GPIO_ReadPin>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d10a      	bne.n	80018a6 <EXTI9_5_IRQHandler+0x14e>
				button_state =0 ; // stable low reached
 8001890:	4b3f      	ldr	r3, [pc, #252]	; (8001990 <EXTI9_5_IRQHandler+0x238>)
 8001892:	2200      	movs	r2, #0
 8001894:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 8001896:	f000 f93f 	bl	8001b18 <HAL_GetTick>
 800189a:	4603      	mov	r3, r0
 800189c:	4a3b      	ldr	r2, [pc, #236]	; (800198c <EXTI9_5_IRQHandler+0x234>)
 800189e:	6013      	str	r3, [r2, #0]

				g_middle_button_pressed =1 ;
 80018a0:	4b40      	ldr	r3, [pc, #256]	; (80019a4 <EXTI9_5_IRQHandler+0x24c>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOA ,GPIO_PIN_6) == 1 ){
 80018a6:	4b3a      	ldr	r3, [pc, #232]	; (8001990 <EXTI9_5_IRQHandler+0x238>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d10e      	bne.n	80018ce <EXTI9_5_IRQHandler+0x176>
 80018b0:	2140      	movs	r1, #64	; 0x40
 80018b2:	483b      	ldr	r0, [pc, #236]	; (80019a0 <EXTI9_5_IRQHandler+0x248>)
 80018b4:	f001 f846 	bl	8002944 <HAL_GPIO_ReadPin>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d107      	bne.n	80018ce <EXTI9_5_IRQHandler+0x176>
				ticks_pressed = HAL_GetTick() ;
 80018be:	f000 f92b 	bl	8001b18 <HAL_GetTick>
 80018c2:	4603      	mov	r3, r0
 80018c4:	4a31      	ldr	r2, [pc, #196]	; (800198c <EXTI9_5_IRQHandler+0x234>)
 80018c6:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 80018c8:	4b31      	ldr	r3, [pc, #196]	; (8001990 <EXTI9_5_IRQHandler+0x238>)
 80018ca:	2201      	movs	r2, #1
 80018cc:	701a      	strb	r2, [r3, #0]

			}
		}


		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6) ;
 80018ce:	4b2e      	ldr	r3, [pc, #184]	; (8001988 <EXTI9_5_IRQHandler+0x230>)
 80018d0:	2240      	movs	r2, #64	; 0x40
 80018d2:	615a      	str	r2, [r3, #20]
 80018d4:	e048      	b.n	8001968 <EXTI9_5_IRQHandler+0x210>

	}

	else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET){
 80018d6:	4b2c      	ldr	r3, [pc, #176]	; (8001988 <EXTI9_5_IRQHandler+0x230>)
 80018d8:	695b      	ldr	r3, [r3, #20]
 80018da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d036      	beq.n	8001950 <EXTI9_5_IRQHandler+0x1f8>




		if(HAL_GetTick() - ticks_pressed >= 20){
 80018e2:	f000 f919 	bl	8001b18 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	4b28      	ldr	r3, [pc, #160]	; (800198c <EXTI9_5_IRQHandler+0x234>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b13      	cmp	r3, #19
 80018f0:	d92a      	bls.n	8001948 <EXTI9_5_IRQHandler+0x1f0>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 0){
 80018f2:	4b27      	ldr	r3, [pc, #156]	; (8001990 <EXTI9_5_IRQHandler+0x238>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d111      	bne.n	8001920 <EXTI9_5_IRQHandler+0x1c8>
 80018fc:	2180      	movs	r1, #128	; 0x80
 80018fe:	4828      	ldr	r0, [pc, #160]	; (80019a0 <EXTI9_5_IRQHandler+0x248>)
 8001900:	f001 f820 	bl	8002944 <HAL_GPIO_ReadPin>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d10a      	bne.n	8001920 <EXTI9_5_IRQHandler+0x1c8>
				button_state =0 ; // stable low reached
 800190a:	4b21      	ldr	r3, [pc, #132]	; (8001990 <EXTI9_5_IRQHandler+0x238>)
 800190c:	2200      	movs	r2, #0
 800190e:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 8001910:	f000 f902 	bl	8001b18 <HAL_GetTick>
 8001914:	4603      	mov	r3, r0
 8001916:	4a1d      	ldr	r2, [pc, #116]	; (800198c <EXTI9_5_IRQHandler+0x234>)
 8001918:	6013      	str	r3, [r2, #0]

				g_right_button_pressed = 1 ;
 800191a:	4b23      	ldr	r3, [pc, #140]	; (80019a8 <EXTI9_5_IRQHandler+0x250>)
 800191c:	2201      	movs	r2, #1
 800191e:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOA ,GPIO_PIN_7) == 1 ){
 8001920:	4b1b      	ldr	r3, [pc, #108]	; (8001990 <EXTI9_5_IRQHandler+0x238>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2b00      	cmp	r3, #0
 8001928:	d10e      	bne.n	8001948 <EXTI9_5_IRQHandler+0x1f0>
 800192a:	2180      	movs	r1, #128	; 0x80
 800192c:	481c      	ldr	r0, [pc, #112]	; (80019a0 <EXTI9_5_IRQHandler+0x248>)
 800192e:	f001 f809 	bl	8002944 <HAL_GPIO_ReadPin>
 8001932:	4603      	mov	r3, r0
 8001934:	2b01      	cmp	r3, #1
 8001936:	d107      	bne.n	8001948 <EXTI9_5_IRQHandler+0x1f0>
				ticks_pressed = HAL_GetTick() ;
 8001938:	f000 f8ee 	bl	8001b18 <HAL_GetTick>
 800193c:	4603      	mov	r3, r0
 800193e:	4a13      	ldr	r2, [pc, #76]	; (800198c <EXTI9_5_IRQHandler+0x234>)
 8001940:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 8001942:	4b13      	ldr	r3, [pc, #76]	; (8001990 <EXTI9_5_IRQHandler+0x238>)
 8001944:	2201      	movs	r2, #1
 8001946:	701a      	strb	r2, [r3, #0]

			}
		}
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7) ;
 8001948:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <EXTI9_5_IRQHandler+0x230>)
 800194a:	2280      	movs	r2, #128	; 0x80
 800194c:	615a      	str	r2, [r3, #20]
 800194e:	e00b      	b.n	8001968 <EXTI9_5_IRQHandler+0x210>
	}

	else{

		if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET){
 8001950:	4b0d      	ldr	r3, [pc, #52]	; (8001988 <EXTI9_5_IRQHandler+0x230>)
 8001952:	695b      	ldr	r3, [r3, #20]
 8001954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001958:	2b00      	cmp	r3, #0
 800195a:	d005      	beq.n	8001968 <EXTI9_5_IRQHandler+0x210>

			g_bottom_button_pressed = 1 ;
 800195c:	4b13      	ldr	r3, [pc, #76]	; (80019ac <EXTI9_5_IRQHandler+0x254>)
 800195e:	2201      	movs	r2, #1
 8001960:	701a      	strb	r2, [r3, #0]

			__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7) ;
 8001962:	4b09      	ldr	r3, [pc, #36]	; (8001988 <EXTI9_5_IRQHandler+0x230>)
 8001964:	2280      	movs	r2, #128	; 0x80
 8001966:	615a      	str	r2, [r3, #20]
		}
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001968:	2040      	movs	r0, #64	; 0x40
 800196a:	f001 f81d 	bl	80029a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800196e:	2080      	movs	r0, #128	; 0x80
 8001970:	f001 f81a 	bl	80029a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001974:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001978:	f001 f816 	bl	80029a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800197c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001980:	f001 f812 	bl	80029a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40013c00 	.word	0x40013c00
 800198c:	2000012c 	.word	0x2000012c
 8001990:	20000012 	.word	0x20000012
 8001994:	40020400 	.word	0x40020400
 8001998:	20000125 	.word	0x20000125
 800199c:	20000127 	.word	0x20000127
 80019a0:	40020000 	.word	0x40020000
 80019a4:	20000129 	.word	0x20000129
 80019a8:	20000126 	.word	0x20000126
 80019ac:	20000128 	.word	0x20000128

080019b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019b4:	4802      	ldr	r0, [pc, #8]	; (80019c0 <USART2_IRQHandler+0x10>)
 80019b6:	f001 fd75 	bl	80034a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000084 	.word	0x20000084

080019c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80019c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80019cc:	f000 ffec 	bl	80029a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019d0:	bf00      	nop
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019d8:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <SystemInit+0x20>)
 80019da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019de:	4a05      	ldr	r2, [pc, #20]	; (80019f4 <SystemInit+0x20>)
 80019e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019fc:	480d      	ldr	r0, [pc, #52]	; (8001a34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019fe:	490e      	ldr	r1, [pc, #56]	; (8001a38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a00:	4a0e      	ldr	r2, [pc, #56]	; (8001a3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a04:	e002      	b.n	8001a0c <LoopCopyDataInit>

08001a06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a0a:	3304      	adds	r3, #4

08001a0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a10:	d3f9      	bcc.n	8001a06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a12:	4a0b      	ldr	r2, [pc, #44]	; (8001a40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a14:	4c0b      	ldr	r4, [pc, #44]	; (8001a44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a18:	e001      	b.n	8001a1e <LoopFillZerobss>

08001a1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a1c:	3204      	adds	r2, #4

08001a1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a20:	d3fb      	bcc.n	8001a1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a22:	f7ff ffd7 	bl	80019d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a26:	f002 fc37 	bl	8004298 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a2a:	f7ff fa9d 	bl	8000f68 <main>
  bx  lr    
 8001a2e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a38:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001a3c:	08004330 	.word	0x08004330
  ldr r2, =_sbss
 8001a40:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001a44:	20000138 	.word	0x20000138

08001a48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a48:	e7fe      	b.n	8001a48 <ADC_IRQHandler>
	...

08001a4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a50:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <HAL_Init+0x40>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a0d      	ldr	r2, [pc, #52]	; (8001a8c <HAL_Init+0x40>)
 8001a56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a5c:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <HAL_Init+0x40>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a0a      	ldr	r2, [pc, #40]	; (8001a8c <HAL_Init+0x40>)
 8001a62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a68:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <HAL_Init+0x40>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a07      	ldr	r2, [pc, #28]	; (8001a8c <HAL_Init+0x40>)
 8001a6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a74:	2003      	movs	r0, #3
 8001a76:	f000 fd0d 	bl	8002494 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a7a:	2000      	movs	r0, #0
 8001a7c:	f000 f808 	bl	8001a90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a80:	f7ff fd76 	bl	8001570 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40023c00 	.word	0x40023c00

08001a90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a98:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <HAL_InitTick+0x54>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	4b12      	ldr	r3, [pc, #72]	; (8001ae8 <HAL_InitTick+0x58>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f000 fd25 	bl	80024fe <HAL_SYSTICK_Config>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e00e      	b.n	8001adc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2b0f      	cmp	r3, #15
 8001ac2:	d80a      	bhi.n	8001ada <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	6879      	ldr	r1, [r7, #4]
 8001ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8001acc:	f000 fced 	bl	80024aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ad0:	4a06      	ldr	r2, [pc, #24]	; (8001aec <HAL_InitTick+0x5c>)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	e000      	b.n	8001adc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20000014 	.word	0x20000014
 8001ae8:	2000001c 	.word	0x2000001c
 8001aec:	20000018 	.word	0x20000018

08001af0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001af4:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <HAL_IncTick+0x20>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	461a      	mov	r2, r3
 8001afa:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <HAL_IncTick+0x24>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4413      	add	r3, r2
 8001b00:	4a04      	ldr	r2, [pc, #16]	; (8001b14 <HAL_IncTick+0x24>)
 8001b02:	6013      	str	r3, [r2, #0]
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	2000001c 	.word	0x2000001c
 8001b14:	20000134 	.word	0x20000134

08001b18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b1c:	4b03      	ldr	r3, [pc, #12]	; (8001b2c <HAL_GetTick+0x14>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	20000134 	.word	0x20000134

08001b30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b38:	f7ff ffee 	bl	8001b18 <HAL_GetTick>
 8001b3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b48:	d005      	beq.n	8001b56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b4a:	4b0a      	ldr	r3, [pc, #40]	; (8001b74 <HAL_Delay+0x44>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	461a      	mov	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	4413      	add	r3, r2
 8001b54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b56:	bf00      	nop
 8001b58:	f7ff ffde 	bl	8001b18 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d8f7      	bhi.n	8001b58 <HAL_Delay+0x28>
  {
  }
}
 8001b68:	bf00      	nop
 8001b6a:	bf00      	nop
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	2000001c 	.word	0x2000001c

08001b78 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b80:	2300      	movs	r3, #0
 8001b82:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e033      	b.n	8001bf6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d109      	bne.n	8001baa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff fd12 	bl	80015c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	f003 0310 	and.w	r3, r3, #16
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d118      	bne.n	8001be8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001bbe:	f023 0302 	bic.w	r3, r3, #2
 8001bc2:	f043 0202 	orr.w	r2, r3, #2
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 fa96 	bl	80020fc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	f023 0303 	bic.w	r3, r3, #3
 8001bde:	f043 0201 	orr.w	r2, r3, #1
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	641a      	str	r2, [r3, #64]	; 0x40
 8001be6:	e001      	b.n	8001bec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
	...

08001c00 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d101      	bne.n	8001c1a <HAL_ADC_Start+0x1a>
 8001c16:	2302      	movs	r3, #2
 8001c18:	e097      	b.n	8001d4a <HAL_ADC_Start+0x14a>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d018      	beq.n	8001c62 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	689a      	ldr	r2, [r3, #8]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f042 0201 	orr.w	r2, r2, #1
 8001c3e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c40:	4b45      	ldr	r3, [pc, #276]	; (8001d58 <HAL_ADC_Start+0x158>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a45      	ldr	r2, [pc, #276]	; (8001d5c <HAL_ADC_Start+0x15c>)
 8001c46:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4a:	0c9a      	lsrs	r2, r3, #18
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	4413      	add	r3, r2
 8001c52:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001c54:	e002      	b.n	8001c5c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1f9      	bne.n	8001c56 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d15f      	bne.n	8001d30 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c74:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c78:	f023 0301 	bic.w	r3, r3, #1
 8001c7c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d007      	beq.n	8001ca2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c9a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cae:	d106      	bne.n	8001cbe <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb4:	f023 0206 	bic.w	r2, r3, #6
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	645a      	str	r2, [r3, #68]	; 0x44
 8001cbc:	e002      	b.n	8001cc4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ccc:	4b24      	ldr	r3, [pc, #144]	; (8001d60 <HAL_ADC_Start+0x160>)
 8001cce:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001cd8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f003 031f 	and.w	r3, r3, #31
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d10f      	bne.n	8001d06 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d129      	bne.n	8001d48 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	689a      	ldr	r2, [r3, #8]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	e020      	b.n	8001d48 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a16      	ldr	r2, [pc, #88]	; (8001d64 <HAL_ADC_Start+0x164>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d11b      	bne.n	8001d48 <HAL_ADC_Start+0x148>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d114      	bne.n	8001d48 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d2c:	609a      	str	r2, [r3, #8]
 8001d2e:	e00b      	b.n	8001d48 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d34:	f043 0210 	orr.w	r2, r3, #16
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d40:	f043 0201 	orr.w	r2, r3, #1
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3714      	adds	r7, #20
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	20000014 	.word	0x20000014
 8001d5c:	431bde83 	.word	0x431bde83
 8001d60:	40012300 	.word	0x40012300
 8001d64:	40012000 	.word	0x40012000

08001d68 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d72:	2300      	movs	r3, #0
 8001d74:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d84:	d113      	bne.n	8001dae <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d94:	d10b      	bne.n	8001dae <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	f043 0220 	orr.w	r2, r3, #32
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e063      	b.n	8001e76 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001dae:	f7ff feb3 	bl	8001b18 <HAL_GetTick>
 8001db2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001db4:	e021      	b.n	8001dfa <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dbc:	d01d      	beq.n	8001dfa <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d007      	beq.n	8001dd4 <HAL_ADC_PollForConversion+0x6c>
 8001dc4:	f7ff fea8 	bl	8001b18 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d212      	bcs.n	8001dfa <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d00b      	beq.n	8001dfa <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	f043 0204 	orr.w	r2, r3, #4
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e03d      	b.n	8001e76 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d1d6      	bne.n	8001db6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f06f 0212 	mvn.w	r2, #18
 8001e10:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e16:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d123      	bne.n	8001e74 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d11f      	bne.n	8001e74 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d006      	beq.n	8001e50 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d111      	bne.n	8001e74 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d105      	bne.n	8001e74 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6c:	f043 0201 	orr.w	r2, r3, #1
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d101      	bne.n	8001eb4 <HAL_ADC_ConfigChannel+0x1c>
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	e113      	b.n	80020dc <HAL_ADC_ConfigChannel+0x244>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2b09      	cmp	r3, #9
 8001ec2:	d925      	bls.n	8001f10 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68d9      	ldr	r1, [r3, #12]
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	4413      	add	r3, r2
 8001ed8:	3b1e      	subs	r3, #30
 8001eda:	2207      	movs	r2, #7
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	43da      	mvns	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	400a      	ands	r2, r1
 8001ee8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68d9      	ldr	r1, [r3, #12]
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	689a      	ldr	r2, [r3, #8]
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	4618      	mov	r0, r3
 8001efc:	4603      	mov	r3, r0
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	4403      	add	r3, r0
 8001f02:	3b1e      	subs	r3, #30
 8001f04:	409a      	lsls	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	60da      	str	r2, [r3, #12]
 8001f0e:	e022      	b.n	8001f56 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6919      	ldr	r1, [r3, #16]
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4613      	mov	r3, r2
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	4413      	add	r3, r2
 8001f24:	2207      	movs	r2, #7
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	43da      	mvns	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	400a      	ands	r2, r1
 8001f32:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6919      	ldr	r1, [r3, #16]
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	689a      	ldr	r2, [r3, #8]
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	4618      	mov	r0, r3
 8001f46:	4603      	mov	r3, r0
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	4403      	add	r3, r0
 8001f4c:	409a      	lsls	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	430a      	orrs	r2, r1
 8001f54:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b06      	cmp	r3, #6
 8001f5c:	d824      	bhi.n	8001fa8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685a      	ldr	r2, [r3, #4]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4413      	add	r3, r2
 8001f6e:	3b05      	subs	r3, #5
 8001f70:	221f      	movs	r2, #31
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	43da      	mvns	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	400a      	ands	r2, r1
 8001f7e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685a      	ldr	r2, [r3, #4]
 8001f92:	4613      	mov	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	4413      	add	r3, r2
 8001f98:	3b05      	subs	r3, #5
 8001f9a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	635a      	str	r2, [r3, #52]	; 0x34
 8001fa6:	e04c      	b.n	8002042 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	2b0c      	cmp	r3, #12
 8001fae:	d824      	bhi.n	8001ffa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	3b23      	subs	r3, #35	; 0x23
 8001fc2:	221f      	movs	r2, #31
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43da      	mvns	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	400a      	ands	r2, r1
 8001fd0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	4618      	mov	r0, r3
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4413      	add	r3, r2
 8001fea:	3b23      	subs	r3, #35	; 0x23
 8001fec:	fa00 f203 	lsl.w	r2, r0, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	631a      	str	r2, [r3, #48]	; 0x30
 8001ff8:	e023      	b.n	8002042 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685a      	ldr	r2, [r3, #4]
 8002004:	4613      	mov	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	4413      	add	r3, r2
 800200a:	3b41      	subs	r3, #65	; 0x41
 800200c:	221f      	movs	r2, #31
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	43da      	mvns	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	400a      	ands	r2, r1
 800201a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	b29b      	uxth	r3, r3
 8002028:	4618      	mov	r0, r3
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685a      	ldr	r2, [r3, #4]
 800202e:	4613      	mov	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4413      	add	r3, r2
 8002034:	3b41      	subs	r3, #65	; 0x41
 8002036:	fa00 f203 	lsl.w	r2, r0, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	430a      	orrs	r2, r1
 8002040:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002042:	4b29      	ldr	r3, [pc, #164]	; (80020e8 <HAL_ADC_ConfigChannel+0x250>)
 8002044:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a28      	ldr	r2, [pc, #160]	; (80020ec <HAL_ADC_ConfigChannel+0x254>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d10f      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x1d8>
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2b12      	cmp	r3, #18
 8002056:	d10b      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a1d      	ldr	r2, [pc, #116]	; (80020ec <HAL_ADC_ConfigChannel+0x254>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d12b      	bne.n	80020d2 <HAL_ADC_ConfigChannel+0x23a>
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a1c      	ldr	r2, [pc, #112]	; (80020f0 <HAL_ADC_ConfigChannel+0x258>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d003      	beq.n	800208c <HAL_ADC_ConfigChannel+0x1f4>
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2b11      	cmp	r3, #17
 800208a:	d122      	bne.n	80020d2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a11      	ldr	r2, [pc, #68]	; (80020f0 <HAL_ADC_ConfigChannel+0x258>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d111      	bne.n	80020d2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020ae:	4b11      	ldr	r3, [pc, #68]	; (80020f4 <HAL_ADC_ConfigChannel+0x25c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a11      	ldr	r2, [pc, #68]	; (80020f8 <HAL_ADC_ConfigChannel+0x260>)
 80020b4:	fba2 2303 	umull	r2, r3, r2, r3
 80020b8:	0c9a      	lsrs	r2, r3, #18
 80020ba:	4613      	mov	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020c4:	e002      	b.n	80020cc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	3b01      	subs	r3, #1
 80020ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1f9      	bne.n	80020c6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3714      	adds	r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	40012300 	.word	0x40012300
 80020ec:	40012000 	.word	0x40012000
 80020f0:	10000012 	.word	0x10000012
 80020f4:	20000014 	.word	0x20000014
 80020f8:	431bde83 	.word	0x431bde83

080020fc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002104:	4b79      	ldr	r3, [pc, #484]	; (80022ec <ADC_Init+0x1f0>)
 8002106:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	685a      	ldr	r2, [r3, #4]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	431a      	orrs	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002130:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6859      	ldr	r1, [r3, #4]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	021a      	lsls	r2, r3, #8
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	430a      	orrs	r2, r1
 8002144:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002154:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6859      	ldr	r1, [r3, #4]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	430a      	orrs	r2, r1
 8002166:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689a      	ldr	r2, [r3, #8]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002176:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6899      	ldr	r1, [r3, #8]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68da      	ldr	r2, [r3, #12]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	430a      	orrs	r2, r1
 8002188:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218e:	4a58      	ldr	r2, [pc, #352]	; (80022f0 <ADC_Init+0x1f4>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d022      	beq.n	80021da <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	689a      	ldr	r2, [r3, #8]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6899      	ldr	r1, [r3, #8]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	430a      	orrs	r2, r1
 80021b4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6899      	ldr	r1, [r3, #8]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	e00f      	b.n	80021fa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 0202 	bic.w	r2, r2, #2
 8002208:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	6899      	ldr	r1, [r3, #8]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	7e1b      	ldrb	r3, [r3, #24]
 8002214:	005a      	lsls	r2, r3, #1
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	430a      	orrs	r2, r1
 800221c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d01b      	beq.n	8002260 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002236:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002246:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6859      	ldr	r1, [r3, #4]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002252:	3b01      	subs	r3, #1
 8002254:	035a      	lsls	r2, r3, #13
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	430a      	orrs	r2, r1
 800225c:	605a      	str	r2, [r3, #4]
 800225e:	e007      	b.n	8002270 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	685a      	ldr	r2, [r3, #4]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800226e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800227e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	3b01      	subs	r3, #1
 800228c:	051a      	lsls	r2, r3, #20
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	430a      	orrs	r2, r1
 8002294:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80022a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6899      	ldr	r1, [r3, #8]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022b2:	025a      	lsls	r2, r3, #9
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	430a      	orrs	r2, r1
 80022ba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	689a      	ldr	r2, [r3, #8]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6899      	ldr	r1, [r3, #8]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	029a      	lsls	r2, r3, #10
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	430a      	orrs	r2, r1
 80022de:	609a      	str	r2, [r3, #8]
}
 80022e0:	bf00      	nop
 80022e2:	3714      	adds	r7, #20
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	40012300 	.word	0x40012300
 80022f0:	0f000001 	.word	0x0f000001

080022f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002304:	4b0c      	ldr	r3, [pc, #48]	; (8002338 <__NVIC_SetPriorityGrouping+0x44>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002310:	4013      	ands	r3, r2
 8002312:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800231c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002326:	4a04      	ldr	r2, [pc, #16]	; (8002338 <__NVIC_SetPriorityGrouping+0x44>)
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	60d3      	str	r3, [r2, #12]
}
 800232c:	bf00      	nop
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	e000ed00 	.word	0xe000ed00

0800233c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002340:	4b04      	ldr	r3, [pc, #16]	; (8002354 <__NVIC_GetPriorityGrouping+0x18>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	0a1b      	lsrs	r3, r3, #8
 8002346:	f003 0307 	and.w	r3, r3, #7
}
 800234a:	4618      	mov	r0, r3
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002366:	2b00      	cmp	r3, #0
 8002368:	db0b      	blt.n	8002382 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800236a:	79fb      	ldrb	r3, [r7, #7]
 800236c:	f003 021f 	and.w	r2, r3, #31
 8002370:	4907      	ldr	r1, [pc, #28]	; (8002390 <__NVIC_EnableIRQ+0x38>)
 8002372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002376:	095b      	lsrs	r3, r3, #5
 8002378:	2001      	movs	r0, #1
 800237a:	fa00 f202 	lsl.w	r2, r0, r2
 800237e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	e000e100 	.word	0xe000e100

08002394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	6039      	str	r1, [r7, #0]
 800239e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	db0a      	blt.n	80023be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	490c      	ldr	r1, [pc, #48]	; (80023e0 <__NVIC_SetPriority+0x4c>)
 80023ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b2:	0112      	lsls	r2, r2, #4
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	440b      	add	r3, r1
 80023b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023bc:	e00a      	b.n	80023d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	4908      	ldr	r1, [pc, #32]	; (80023e4 <__NVIC_SetPriority+0x50>)
 80023c4:	79fb      	ldrb	r3, [r7, #7]
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	3b04      	subs	r3, #4
 80023cc:	0112      	lsls	r2, r2, #4
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	440b      	add	r3, r1
 80023d2:	761a      	strb	r2, [r3, #24]
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	e000e100 	.word	0xe000e100
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b089      	sub	sp, #36	; 0x24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	f1c3 0307 	rsb	r3, r3, #7
 8002402:	2b04      	cmp	r3, #4
 8002404:	bf28      	it	cs
 8002406:	2304      	movcs	r3, #4
 8002408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	3304      	adds	r3, #4
 800240e:	2b06      	cmp	r3, #6
 8002410:	d902      	bls.n	8002418 <NVIC_EncodePriority+0x30>
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	3b03      	subs	r3, #3
 8002416:	e000      	b.n	800241a <NVIC_EncodePriority+0x32>
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800241c:	f04f 32ff 	mov.w	r2, #4294967295
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43da      	mvns	r2, r3
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	401a      	ands	r2, r3
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002430:	f04f 31ff 	mov.w	r1, #4294967295
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	fa01 f303 	lsl.w	r3, r1, r3
 800243a:	43d9      	mvns	r1, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002440:	4313      	orrs	r3, r2
         );
}
 8002442:	4618      	mov	r0, r3
 8002444:	3724      	adds	r7, #36	; 0x24
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
	...

08002450 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3b01      	subs	r3, #1
 800245c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002460:	d301      	bcc.n	8002466 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002462:	2301      	movs	r3, #1
 8002464:	e00f      	b.n	8002486 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002466:	4a0a      	ldr	r2, [pc, #40]	; (8002490 <SysTick_Config+0x40>)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3b01      	subs	r3, #1
 800246c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800246e:	210f      	movs	r1, #15
 8002470:	f04f 30ff 	mov.w	r0, #4294967295
 8002474:	f7ff ff8e 	bl	8002394 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002478:	4b05      	ldr	r3, [pc, #20]	; (8002490 <SysTick_Config+0x40>)
 800247a:	2200      	movs	r2, #0
 800247c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800247e:	4b04      	ldr	r3, [pc, #16]	; (8002490 <SysTick_Config+0x40>)
 8002480:	2207      	movs	r2, #7
 8002482:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	e000e010 	.word	0xe000e010

08002494 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f7ff ff29 	bl	80022f4 <__NVIC_SetPriorityGrouping>
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b086      	sub	sp, #24
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	4603      	mov	r3, r0
 80024b2:	60b9      	str	r1, [r7, #8]
 80024b4:	607a      	str	r2, [r7, #4]
 80024b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024b8:	2300      	movs	r3, #0
 80024ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024bc:	f7ff ff3e 	bl	800233c <__NVIC_GetPriorityGrouping>
 80024c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	68b9      	ldr	r1, [r7, #8]
 80024c6:	6978      	ldr	r0, [r7, #20]
 80024c8:	f7ff ff8e 	bl	80023e8 <NVIC_EncodePriority>
 80024cc:	4602      	mov	r2, r0
 80024ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024d2:	4611      	mov	r1, r2
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff ff5d 	bl	8002394 <__NVIC_SetPriority>
}
 80024da:	bf00      	nop
 80024dc:	3718      	adds	r7, #24
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b082      	sub	sp, #8
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	4603      	mov	r3, r0
 80024ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff ff31 	bl	8002358 <__NVIC_EnableIRQ>
}
 80024f6:	bf00      	nop
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b082      	sub	sp, #8
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7ff ffa2 	bl	8002450 <SysTick_Config>
 800250c:	4603      	mov	r3, r0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b084      	sub	sp, #16
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002522:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002524:	f7ff faf8 	bl	8001b18 <HAL_GetTick>
 8002528:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d008      	beq.n	8002548 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2280      	movs	r2, #128	; 0x80
 800253a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e052      	b.n	80025ee <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f022 0216 	bic.w	r2, r2, #22
 8002556:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	695a      	ldr	r2, [r3, #20]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002566:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256c:	2b00      	cmp	r3, #0
 800256e:	d103      	bne.n	8002578 <HAL_DMA_Abort+0x62>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002574:	2b00      	cmp	r3, #0
 8002576:	d007      	beq.n	8002588 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f022 0208 	bic.w	r2, r2, #8
 8002586:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 0201 	bic.w	r2, r2, #1
 8002596:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002598:	e013      	b.n	80025c2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800259a:	f7ff fabd 	bl	8001b18 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b05      	cmp	r3, #5
 80025a6:	d90c      	bls.n	80025c2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2220      	movs	r2, #32
 80025ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2203      	movs	r2, #3
 80025b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e015      	b.n	80025ee <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1e4      	bne.n	800259a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d4:	223f      	movs	r2, #63	; 0x3f
 80025d6:	409a      	lsls	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b083      	sub	sp, #12
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d004      	beq.n	8002614 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2280      	movs	r2, #128	; 0x80
 800260e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e00c      	b.n	800262e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2205      	movs	r2, #5
 8002618:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 0201 	bic.w	r2, r2, #1
 800262a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
	...

0800263c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800263c:	b480      	push	{r7}
 800263e:	b089      	sub	sp, #36	; 0x24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002646:	2300      	movs	r3, #0
 8002648:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800264a:	2300      	movs	r3, #0
 800264c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800264e:	2300      	movs	r3, #0
 8002650:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002652:	2300      	movs	r3, #0
 8002654:	61fb      	str	r3, [r7, #28]
 8002656:	e159      	b.n	800290c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002658:	2201      	movs	r2, #1
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	4013      	ands	r3, r2
 800266a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	429a      	cmp	r2, r3
 8002672:	f040 8148 	bne.w	8002906 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f003 0303 	and.w	r3, r3, #3
 800267e:	2b01      	cmp	r3, #1
 8002680:	d005      	beq.n	800268e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800268a:	2b02      	cmp	r3, #2
 800268c:	d130      	bne.n	80026f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	2203      	movs	r2, #3
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	43db      	mvns	r3, r3
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	4013      	ands	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	68da      	ldr	r2, [r3, #12]
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026c4:	2201      	movs	r2, #1
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	43db      	mvns	r3, r3
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	4013      	ands	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	091b      	lsrs	r3, r3, #4
 80026da:	f003 0201 	and.w	r2, r3, #1
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f003 0303 	and.w	r3, r3, #3
 80026f8:	2b03      	cmp	r3, #3
 80026fa:	d017      	beq.n	800272c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	2203      	movs	r2, #3
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	43db      	mvns	r3, r3
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4013      	ands	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	4313      	orrs	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f003 0303 	and.w	r3, r3, #3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d123      	bne.n	8002780 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	08da      	lsrs	r2, r3, #3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3208      	adds	r2, #8
 8002740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002744:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	f003 0307 	and.w	r3, r3, #7
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	220f      	movs	r2, #15
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	43db      	mvns	r3, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4013      	ands	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	691a      	ldr	r2, [r3, #16]
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	4313      	orrs	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	08da      	lsrs	r2, r3, #3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	3208      	adds	r2, #8
 800277a:	69b9      	ldr	r1, [r7, #24]
 800277c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	2203      	movs	r2, #3
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	43db      	mvns	r3, r3
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4013      	ands	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f003 0203 	and.w	r2, r3, #3
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f000 80a2 	beq.w	8002906 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027c2:	2300      	movs	r3, #0
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	4b57      	ldr	r3, [pc, #348]	; (8002924 <HAL_GPIO_Init+0x2e8>)
 80027c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ca:	4a56      	ldr	r2, [pc, #344]	; (8002924 <HAL_GPIO_Init+0x2e8>)
 80027cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027d0:	6453      	str	r3, [r2, #68]	; 0x44
 80027d2:	4b54      	ldr	r3, [pc, #336]	; (8002924 <HAL_GPIO_Init+0x2e8>)
 80027d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027de:	4a52      	ldr	r2, [pc, #328]	; (8002928 <HAL_GPIO_Init+0x2ec>)
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	089b      	lsrs	r3, r3, #2
 80027e4:	3302      	adds	r3, #2
 80027e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	f003 0303 	and.w	r3, r3, #3
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	220f      	movs	r2, #15
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	43db      	mvns	r3, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4013      	ands	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a49      	ldr	r2, [pc, #292]	; (800292c <HAL_GPIO_Init+0x2f0>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d019      	beq.n	800283e <HAL_GPIO_Init+0x202>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a48      	ldr	r2, [pc, #288]	; (8002930 <HAL_GPIO_Init+0x2f4>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d013      	beq.n	800283a <HAL_GPIO_Init+0x1fe>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a47      	ldr	r2, [pc, #284]	; (8002934 <HAL_GPIO_Init+0x2f8>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d00d      	beq.n	8002836 <HAL_GPIO_Init+0x1fa>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a46      	ldr	r2, [pc, #280]	; (8002938 <HAL_GPIO_Init+0x2fc>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d007      	beq.n	8002832 <HAL_GPIO_Init+0x1f6>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a45      	ldr	r2, [pc, #276]	; (800293c <HAL_GPIO_Init+0x300>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d101      	bne.n	800282e <HAL_GPIO_Init+0x1f2>
 800282a:	2304      	movs	r3, #4
 800282c:	e008      	b.n	8002840 <HAL_GPIO_Init+0x204>
 800282e:	2307      	movs	r3, #7
 8002830:	e006      	b.n	8002840 <HAL_GPIO_Init+0x204>
 8002832:	2303      	movs	r3, #3
 8002834:	e004      	b.n	8002840 <HAL_GPIO_Init+0x204>
 8002836:	2302      	movs	r3, #2
 8002838:	e002      	b.n	8002840 <HAL_GPIO_Init+0x204>
 800283a:	2301      	movs	r3, #1
 800283c:	e000      	b.n	8002840 <HAL_GPIO_Init+0x204>
 800283e:	2300      	movs	r3, #0
 8002840:	69fa      	ldr	r2, [r7, #28]
 8002842:	f002 0203 	and.w	r2, r2, #3
 8002846:	0092      	lsls	r2, r2, #2
 8002848:	4093      	lsls	r3, r2
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4313      	orrs	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002850:	4935      	ldr	r1, [pc, #212]	; (8002928 <HAL_GPIO_Init+0x2ec>)
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	089b      	lsrs	r3, r3, #2
 8002856:	3302      	adds	r3, #2
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800285e:	4b38      	ldr	r3, [pc, #224]	; (8002940 <HAL_GPIO_Init+0x304>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	43db      	mvns	r3, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4013      	ands	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	4313      	orrs	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002882:	4a2f      	ldr	r2, [pc, #188]	; (8002940 <HAL_GPIO_Init+0x304>)
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002888:	4b2d      	ldr	r3, [pc, #180]	; (8002940 <HAL_GPIO_Init+0x304>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	43db      	mvns	r3, r3
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	4013      	ands	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d003      	beq.n	80028ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028ac:	4a24      	ldr	r2, [pc, #144]	; (8002940 <HAL_GPIO_Init+0x304>)
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028b2:	4b23      	ldr	r3, [pc, #140]	; (8002940 <HAL_GPIO_Init+0x304>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	43db      	mvns	r3, r3
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	4013      	ands	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028d6:	4a1a      	ldr	r2, [pc, #104]	; (8002940 <HAL_GPIO_Init+0x304>)
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028dc:	4b18      	ldr	r3, [pc, #96]	; (8002940 <HAL_GPIO_Init+0x304>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	43db      	mvns	r3, r3
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4013      	ands	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d003      	beq.n	8002900 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002900:	4a0f      	ldr	r2, [pc, #60]	; (8002940 <HAL_GPIO_Init+0x304>)
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	3301      	adds	r3, #1
 800290a:	61fb      	str	r3, [r7, #28]
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	2b0f      	cmp	r3, #15
 8002910:	f67f aea2 	bls.w	8002658 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002914:	bf00      	nop
 8002916:	bf00      	nop
 8002918:	3724      	adds	r7, #36	; 0x24
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	40023800 	.word	0x40023800
 8002928:	40013800 	.word	0x40013800
 800292c:	40020000 	.word	0x40020000
 8002930:	40020400 	.word	0x40020400
 8002934:	40020800 	.word	0x40020800
 8002938:	40020c00 	.word	0x40020c00
 800293c:	40021000 	.word	0x40021000
 8002940:	40013c00 	.word	0x40013c00

08002944 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	460b      	mov	r3, r1
 800294e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	691a      	ldr	r2, [r3, #16]
 8002954:	887b      	ldrh	r3, [r7, #2]
 8002956:	4013      	ands	r3, r2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d002      	beq.n	8002962 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800295c:	2301      	movs	r3, #1
 800295e:	73fb      	strb	r3, [r7, #15]
 8002960:	e001      	b.n	8002966 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002962:	2300      	movs	r3, #0
 8002964:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002966:	7bfb      	ldrb	r3, [r7, #15]
}
 8002968:	4618      	mov	r0, r3
 800296a:	3714      	adds	r7, #20
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	460b      	mov	r3, r1
 800297e:	807b      	strh	r3, [r7, #2]
 8002980:	4613      	mov	r3, r2
 8002982:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002984:	787b      	ldrb	r3, [r7, #1]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800298a:	887a      	ldrh	r2, [r7, #2]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002990:	e003      	b.n	800299a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002992:	887b      	ldrh	r3, [r7, #2]
 8002994:	041a      	lsls	r2, r3, #16
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	619a      	str	r2, [r3, #24]
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
	...

080029a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	4603      	mov	r3, r0
 80029b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80029b2:	4b08      	ldr	r3, [pc, #32]	; (80029d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029b4:	695a      	ldr	r2, [r3, #20]
 80029b6:	88fb      	ldrh	r3, [r7, #6]
 80029b8:	4013      	ands	r3, r2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d006      	beq.n	80029cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029be:	4a05      	ldr	r2, [pc, #20]	; (80029d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029c0:	88fb      	ldrh	r3, [r7, #6]
 80029c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029c4:	88fb      	ldrh	r3, [r7, #6]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f000 f806 	bl	80029d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80029cc:	bf00      	nop
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40013c00 	.word	0x40013c00

080029d8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	4603      	mov	r3, r0
 80029e0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
	...

080029f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e267      	b.n	8002ed2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d075      	beq.n	8002afa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a0e:	4b88      	ldr	r3, [pc, #544]	; (8002c30 <HAL_RCC_OscConfig+0x240>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f003 030c 	and.w	r3, r3, #12
 8002a16:	2b04      	cmp	r3, #4
 8002a18:	d00c      	beq.n	8002a34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a1a:	4b85      	ldr	r3, [pc, #532]	; (8002c30 <HAL_RCC_OscConfig+0x240>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a22:	2b08      	cmp	r3, #8
 8002a24:	d112      	bne.n	8002a4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a26:	4b82      	ldr	r3, [pc, #520]	; (8002c30 <HAL_RCC_OscConfig+0x240>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a32:	d10b      	bne.n	8002a4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a34:	4b7e      	ldr	r3, [pc, #504]	; (8002c30 <HAL_RCC_OscConfig+0x240>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d05b      	beq.n	8002af8 <HAL_RCC_OscConfig+0x108>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d157      	bne.n	8002af8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e242      	b.n	8002ed2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a54:	d106      	bne.n	8002a64 <HAL_RCC_OscConfig+0x74>
 8002a56:	4b76      	ldr	r3, [pc, #472]	; (8002c30 <HAL_RCC_OscConfig+0x240>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a75      	ldr	r2, [pc, #468]	; (8002c30 <HAL_RCC_OscConfig+0x240>)
 8002a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a60:	6013      	str	r3, [r2, #0]
 8002a62:	e01d      	b.n	8002aa0 <HAL_RCC_OscConfig+0xb0>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a6c:	d10c      	bne.n	8002a88 <HAL_RCC_OscConfig+0x98>
 8002a6e:	4b70      	ldr	r3, [pc, #448]	; (8002c30 <HAL_RCC_OscConfig+0x240>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a6f      	ldr	r2, [pc, #444]	; (8002c30 <HAL_RCC_OscConfig+0x240>)
 8002a74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a78:	6013      	str	r3, [r2, #0]
 8002a7a:	4b6d      	ldr	r3, [pc, #436]	; (8002c30 <HAL_RCC_OscConfig+0x240>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a6c      	ldr	r2, [pc, #432]	; (8002c30 <HAL_RCC_OscConfig+0x240>)
 8002a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a84:	6013      	str	r3, [r2, #0]
 8002a86:	e00b      	b.n	8002aa0 <HAL_RCC_OscConfig+0xb0>
 8002a88:	4b69      	ldr	r3, [pc, #420]	; (8002c30 <HAL_RCC_OscConfig+0x240>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a68      	ldr	r2, [pc, #416]	; (8002c30 <HAL_RCC_OscConfig+0x240>)
 8002a8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a92:	6013      	str	r3, [r2, #0]
 8002a94:	4b66      	ldr	r3, [pc, #408]	; (8002c30 <HAL_RCC_OscConfig+0x240>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a65      	ldr	r2, [pc, #404]	; (8002c30 <HAL_RCC_OscConfig+0x240>)
 8002a9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d013      	beq.n	8002ad0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa8:	f7ff f836 	bl	8001b18 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ab0:	f7ff f832 	bl	8001b18 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b64      	cmp	r3, #100	; 0x64
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e207      	b.n	8002ed2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac2:	4b5b      	ldr	r3, [pc, #364]	; (8002c30 <HAL_RCC_OscConfig+0x240>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0f0      	beq.n	8002ab0 <HAL_RCC_OscConfig+0xc0>
 8002ace:	e014      	b.n	8002afa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad0:	f7ff f822 	bl	8001b18 <HAL_GetTick>
 8002ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ad6:	e008      	b.n	8002aea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ad8:	f7ff f81e 	bl	8001b18 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b64      	cmp	r3, #100	; 0x64
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e1f3      	b.n	8002ed2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aea:	4b51      	ldr	r3, [pc, #324]	; (8002c30 <HAL_RCC_OscConfig+0x240>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1f0      	bne.n	8002ad8 <HAL_RCC_OscConfig+0xe8>
 8002af6:	e000      	b.n	8002afa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d063      	beq.n	8002bce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b06:	4b4a      	ldr	r3, [pc, #296]	; (8002c30 <HAL_RCC_OscConfig+0x240>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 030c 	and.w	r3, r3, #12
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00b      	beq.n	8002b2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b12:	4b47      	ldr	r3, [pc, #284]	; (8002c30 <HAL_RCC_OscConfig+0x240>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b1a:	2b08      	cmp	r3, #8
 8002b1c:	d11c      	bne.n	8002b58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b1e:	4b44      	ldr	r3, [pc, #272]	; (8002c30 <HAL_RCC_OscConfig+0x240>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d116      	bne.n	8002b58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b2a:	4b41      	ldr	r3, [pc, #260]	; (8002c30 <HAL_RCC_OscConfig+0x240>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d005      	beq.n	8002b42 <HAL_RCC_OscConfig+0x152>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d001      	beq.n	8002b42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e1c7      	b.n	8002ed2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b42:	4b3b      	ldr	r3, [pc, #236]	; (8002c30 <HAL_RCC_OscConfig+0x240>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	4937      	ldr	r1, [pc, #220]	; (8002c30 <HAL_RCC_OscConfig+0x240>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b56:	e03a      	b.n	8002bce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d020      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b60:	4b34      	ldr	r3, [pc, #208]	; (8002c34 <HAL_RCC_OscConfig+0x244>)
 8002b62:	2201      	movs	r2, #1
 8002b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b66:	f7fe ffd7 	bl	8001b18 <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b6c:	e008      	b.n	8002b80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b6e:	f7fe ffd3 	bl	8001b18 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e1a8      	b.n	8002ed2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b80:	4b2b      	ldr	r3, [pc, #172]	; (8002c30 <HAL_RCC_OscConfig+0x240>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d0f0      	beq.n	8002b6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b8c:	4b28      	ldr	r3, [pc, #160]	; (8002c30 <HAL_RCC_OscConfig+0x240>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	4925      	ldr	r1, [pc, #148]	; (8002c30 <HAL_RCC_OscConfig+0x240>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	600b      	str	r3, [r1, #0]
 8002ba0:	e015      	b.n	8002bce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ba2:	4b24      	ldr	r3, [pc, #144]	; (8002c34 <HAL_RCC_OscConfig+0x244>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba8:	f7fe ffb6 	bl	8001b18 <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bb0:	f7fe ffb2 	bl	8001b18 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e187      	b.n	8002ed2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bc2:	4b1b      	ldr	r3, [pc, #108]	; (8002c30 <HAL_RCC_OscConfig+0x240>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1f0      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d036      	beq.n	8002c48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d016      	beq.n	8002c10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002be2:	4b15      	ldr	r3, [pc, #84]	; (8002c38 <HAL_RCC_OscConfig+0x248>)
 8002be4:	2201      	movs	r2, #1
 8002be6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be8:	f7fe ff96 	bl	8001b18 <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bf0:	f7fe ff92 	bl	8001b18 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e167      	b.n	8002ed2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c02:	4b0b      	ldr	r3, [pc, #44]	; (8002c30 <HAL_RCC_OscConfig+0x240>)
 8002c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0f0      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x200>
 8002c0e:	e01b      	b.n	8002c48 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c10:	4b09      	ldr	r3, [pc, #36]	; (8002c38 <HAL_RCC_OscConfig+0x248>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c16:	f7fe ff7f 	bl	8001b18 <HAL_GetTick>
 8002c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c1c:	e00e      	b.n	8002c3c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c1e:	f7fe ff7b 	bl	8001b18 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d907      	bls.n	8002c3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e150      	b.n	8002ed2 <HAL_RCC_OscConfig+0x4e2>
 8002c30:	40023800 	.word	0x40023800
 8002c34:	42470000 	.word	0x42470000
 8002c38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c3c:	4b88      	ldr	r3, [pc, #544]	; (8002e60 <HAL_RCC_OscConfig+0x470>)
 8002c3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1ea      	bne.n	8002c1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 8097 	beq.w	8002d84 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c56:	2300      	movs	r3, #0
 8002c58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c5a:	4b81      	ldr	r3, [pc, #516]	; (8002e60 <HAL_RCC_OscConfig+0x470>)
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10f      	bne.n	8002c86 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c66:	2300      	movs	r3, #0
 8002c68:	60bb      	str	r3, [r7, #8]
 8002c6a:	4b7d      	ldr	r3, [pc, #500]	; (8002e60 <HAL_RCC_OscConfig+0x470>)
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	4a7c      	ldr	r2, [pc, #496]	; (8002e60 <HAL_RCC_OscConfig+0x470>)
 8002c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c74:	6413      	str	r3, [r2, #64]	; 0x40
 8002c76:	4b7a      	ldr	r3, [pc, #488]	; (8002e60 <HAL_RCC_OscConfig+0x470>)
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c7e:	60bb      	str	r3, [r7, #8]
 8002c80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c82:	2301      	movs	r3, #1
 8002c84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c86:	4b77      	ldr	r3, [pc, #476]	; (8002e64 <HAL_RCC_OscConfig+0x474>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d118      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c92:	4b74      	ldr	r3, [pc, #464]	; (8002e64 <HAL_RCC_OscConfig+0x474>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a73      	ldr	r2, [pc, #460]	; (8002e64 <HAL_RCC_OscConfig+0x474>)
 8002c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c9e:	f7fe ff3b 	bl	8001b18 <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca4:	e008      	b.n	8002cb8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ca6:	f7fe ff37 	bl	8001b18 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e10c      	b.n	8002ed2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb8:	4b6a      	ldr	r3, [pc, #424]	; (8002e64 <HAL_RCC_OscConfig+0x474>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0f0      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d106      	bne.n	8002cda <HAL_RCC_OscConfig+0x2ea>
 8002ccc:	4b64      	ldr	r3, [pc, #400]	; (8002e60 <HAL_RCC_OscConfig+0x470>)
 8002cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd0:	4a63      	ldr	r2, [pc, #396]	; (8002e60 <HAL_RCC_OscConfig+0x470>)
 8002cd2:	f043 0301 	orr.w	r3, r3, #1
 8002cd6:	6713      	str	r3, [r2, #112]	; 0x70
 8002cd8:	e01c      	b.n	8002d14 <HAL_RCC_OscConfig+0x324>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	2b05      	cmp	r3, #5
 8002ce0:	d10c      	bne.n	8002cfc <HAL_RCC_OscConfig+0x30c>
 8002ce2:	4b5f      	ldr	r3, [pc, #380]	; (8002e60 <HAL_RCC_OscConfig+0x470>)
 8002ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce6:	4a5e      	ldr	r2, [pc, #376]	; (8002e60 <HAL_RCC_OscConfig+0x470>)
 8002ce8:	f043 0304 	orr.w	r3, r3, #4
 8002cec:	6713      	str	r3, [r2, #112]	; 0x70
 8002cee:	4b5c      	ldr	r3, [pc, #368]	; (8002e60 <HAL_RCC_OscConfig+0x470>)
 8002cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf2:	4a5b      	ldr	r2, [pc, #364]	; (8002e60 <HAL_RCC_OscConfig+0x470>)
 8002cf4:	f043 0301 	orr.w	r3, r3, #1
 8002cf8:	6713      	str	r3, [r2, #112]	; 0x70
 8002cfa:	e00b      	b.n	8002d14 <HAL_RCC_OscConfig+0x324>
 8002cfc:	4b58      	ldr	r3, [pc, #352]	; (8002e60 <HAL_RCC_OscConfig+0x470>)
 8002cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d00:	4a57      	ldr	r2, [pc, #348]	; (8002e60 <HAL_RCC_OscConfig+0x470>)
 8002d02:	f023 0301 	bic.w	r3, r3, #1
 8002d06:	6713      	str	r3, [r2, #112]	; 0x70
 8002d08:	4b55      	ldr	r3, [pc, #340]	; (8002e60 <HAL_RCC_OscConfig+0x470>)
 8002d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0c:	4a54      	ldr	r2, [pc, #336]	; (8002e60 <HAL_RCC_OscConfig+0x470>)
 8002d0e:	f023 0304 	bic.w	r3, r3, #4
 8002d12:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d015      	beq.n	8002d48 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d1c:	f7fe fefc 	bl	8001b18 <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d22:	e00a      	b.n	8002d3a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d24:	f7fe fef8 	bl	8001b18 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e0cb      	b.n	8002ed2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d3a:	4b49      	ldr	r3, [pc, #292]	; (8002e60 <HAL_RCC_OscConfig+0x470>)
 8002d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d0ee      	beq.n	8002d24 <HAL_RCC_OscConfig+0x334>
 8002d46:	e014      	b.n	8002d72 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d48:	f7fe fee6 	bl	8001b18 <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d4e:	e00a      	b.n	8002d66 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d50:	f7fe fee2 	bl	8001b18 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e0b5      	b.n	8002ed2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d66:	4b3e      	ldr	r3, [pc, #248]	; (8002e60 <HAL_RCC_OscConfig+0x470>)
 8002d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1ee      	bne.n	8002d50 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d72:	7dfb      	ldrb	r3, [r7, #23]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d105      	bne.n	8002d84 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d78:	4b39      	ldr	r3, [pc, #228]	; (8002e60 <HAL_RCC_OscConfig+0x470>)
 8002d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7c:	4a38      	ldr	r2, [pc, #224]	; (8002e60 <HAL_RCC_OscConfig+0x470>)
 8002d7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d82:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f000 80a1 	beq.w	8002ed0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d8e:	4b34      	ldr	r3, [pc, #208]	; (8002e60 <HAL_RCC_OscConfig+0x470>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 030c 	and.w	r3, r3, #12
 8002d96:	2b08      	cmp	r3, #8
 8002d98:	d05c      	beq.n	8002e54 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d141      	bne.n	8002e26 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002da2:	4b31      	ldr	r3, [pc, #196]	; (8002e68 <HAL_RCC_OscConfig+0x478>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da8:	f7fe feb6 	bl	8001b18 <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002db0:	f7fe feb2 	bl	8001b18 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e087      	b.n	8002ed2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dc2:	4b27      	ldr	r3, [pc, #156]	; (8002e60 <HAL_RCC_OscConfig+0x470>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1f0      	bne.n	8002db0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	69da      	ldr	r2, [r3, #28]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	431a      	orrs	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ddc:	019b      	lsls	r3, r3, #6
 8002dde:	431a      	orrs	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de4:	085b      	lsrs	r3, r3, #1
 8002de6:	3b01      	subs	r3, #1
 8002de8:	041b      	lsls	r3, r3, #16
 8002dea:	431a      	orrs	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df0:	061b      	lsls	r3, r3, #24
 8002df2:	491b      	ldr	r1, [pc, #108]	; (8002e60 <HAL_RCC_OscConfig+0x470>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002df8:	4b1b      	ldr	r3, [pc, #108]	; (8002e68 <HAL_RCC_OscConfig+0x478>)
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfe:	f7fe fe8b 	bl	8001b18 <HAL_GetTick>
 8002e02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e04:	e008      	b.n	8002e18 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e06:	f7fe fe87 	bl	8001b18 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e05c      	b.n	8002ed2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e18:	4b11      	ldr	r3, [pc, #68]	; (8002e60 <HAL_RCC_OscConfig+0x470>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d0f0      	beq.n	8002e06 <HAL_RCC_OscConfig+0x416>
 8002e24:	e054      	b.n	8002ed0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e26:	4b10      	ldr	r3, [pc, #64]	; (8002e68 <HAL_RCC_OscConfig+0x478>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2c:	f7fe fe74 	bl	8001b18 <HAL_GetTick>
 8002e30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e34:	f7fe fe70 	bl	8001b18 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e045      	b.n	8002ed2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e46:	4b06      	ldr	r3, [pc, #24]	; (8002e60 <HAL_RCC_OscConfig+0x470>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1f0      	bne.n	8002e34 <HAL_RCC_OscConfig+0x444>
 8002e52:	e03d      	b.n	8002ed0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d107      	bne.n	8002e6c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e038      	b.n	8002ed2 <HAL_RCC_OscConfig+0x4e2>
 8002e60:	40023800 	.word	0x40023800
 8002e64:	40007000 	.word	0x40007000
 8002e68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e6c:	4b1b      	ldr	r3, [pc, #108]	; (8002edc <HAL_RCC_OscConfig+0x4ec>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d028      	beq.n	8002ecc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d121      	bne.n	8002ecc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d11a      	bne.n	8002ecc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ea2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d111      	bne.n	8002ecc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb2:	085b      	lsrs	r3, r3, #1
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d107      	bne.n	8002ecc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d001      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e000      	b.n	8002ed2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3718      	adds	r7, #24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	40023800 	.word	0x40023800

08002ee0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d101      	bne.n	8002ef4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e0cc      	b.n	800308e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ef4:	4b68      	ldr	r3, [pc, #416]	; (8003098 <HAL_RCC_ClockConfig+0x1b8>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0307 	and.w	r3, r3, #7
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d90c      	bls.n	8002f1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f02:	4b65      	ldr	r3, [pc, #404]	; (8003098 <HAL_RCC_ClockConfig+0x1b8>)
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f0a:	4b63      	ldr	r3, [pc, #396]	; (8003098 <HAL_RCC_ClockConfig+0x1b8>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0307 	and.w	r3, r3, #7
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d001      	beq.n	8002f1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e0b8      	b.n	800308e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d020      	beq.n	8002f6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0304 	and.w	r3, r3, #4
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d005      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f34:	4b59      	ldr	r3, [pc, #356]	; (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	4a58      	ldr	r2, [pc, #352]	; (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002f3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0308 	and.w	r3, r3, #8
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d005      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f4c:	4b53      	ldr	r3, [pc, #332]	; (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	4a52      	ldr	r2, [pc, #328]	; (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002f52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f58:	4b50      	ldr	r3, [pc, #320]	; (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	494d      	ldr	r1, [pc, #308]	; (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d044      	beq.n	8003000 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d107      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f7e:	4b47      	ldr	r3, [pc, #284]	; (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d119      	bne.n	8002fbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e07f      	b.n	800308e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d003      	beq.n	8002f9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f9a:	2b03      	cmp	r3, #3
 8002f9c:	d107      	bne.n	8002fae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f9e:	4b3f      	ldr	r3, [pc, #252]	; (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d109      	bne.n	8002fbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e06f      	b.n	800308e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fae:	4b3b      	ldr	r3, [pc, #236]	; (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e067      	b.n	800308e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fbe:	4b37      	ldr	r3, [pc, #220]	; (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f023 0203 	bic.w	r2, r3, #3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	4934      	ldr	r1, [pc, #208]	; (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fd0:	f7fe fda2 	bl	8001b18 <HAL_GetTick>
 8002fd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fd6:	e00a      	b.n	8002fee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fd8:	f7fe fd9e 	bl	8001b18 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e04f      	b.n	800308e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fee:	4b2b      	ldr	r3, [pc, #172]	; (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f003 020c 	and.w	r2, r3, #12
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d1eb      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003000:	4b25      	ldr	r3, [pc, #148]	; (8003098 <HAL_RCC_ClockConfig+0x1b8>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0307 	and.w	r3, r3, #7
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	429a      	cmp	r2, r3
 800300c:	d20c      	bcs.n	8003028 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300e:	4b22      	ldr	r3, [pc, #136]	; (8003098 <HAL_RCC_ClockConfig+0x1b8>)
 8003010:	683a      	ldr	r2, [r7, #0]
 8003012:	b2d2      	uxtb	r2, r2
 8003014:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003016:	4b20      	ldr	r3, [pc, #128]	; (8003098 <HAL_RCC_ClockConfig+0x1b8>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0307 	and.w	r3, r3, #7
 800301e:	683a      	ldr	r2, [r7, #0]
 8003020:	429a      	cmp	r2, r3
 8003022:	d001      	beq.n	8003028 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e032      	b.n	800308e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0304 	and.w	r3, r3, #4
 8003030:	2b00      	cmp	r3, #0
 8003032:	d008      	beq.n	8003046 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003034:	4b19      	ldr	r3, [pc, #100]	; (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	4916      	ldr	r1, [pc, #88]	; (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8003042:	4313      	orrs	r3, r2
 8003044:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0308 	and.w	r3, r3, #8
 800304e:	2b00      	cmp	r3, #0
 8003050:	d009      	beq.n	8003066 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003052:	4b12      	ldr	r3, [pc, #72]	; (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	490e      	ldr	r1, [pc, #56]	; (800309c <HAL_RCC_ClockConfig+0x1bc>)
 8003062:	4313      	orrs	r3, r2
 8003064:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003066:	f000 f821 	bl	80030ac <HAL_RCC_GetSysClockFreq>
 800306a:	4602      	mov	r2, r0
 800306c:	4b0b      	ldr	r3, [pc, #44]	; (800309c <HAL_RCC_ClockConfig+0x1bc>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	091b      	lsrs	r3, r3, #4
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	490a      	ldr	r1, [pc, #40]	; (80030a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003078:	5ccb      	ldrb	r3, [r1, r3]
 800307a:	fa22 f303 	lsr.w	r3, r2, r3
 800307e:	4a09      	ldr	r2, [pc, #36]	; (80030a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003080:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003082:	4b09      	ldr	r3, [pc, #36]	; (80030a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4618      	mov	r0, r3
 8003088:	f7fe fd02 	bl	8001a90 <HAL_InitTick>

  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	40023c00 	.word	0x40023c00
 800309c:	40023800 	.word	0x40023800
 80030a0:	08004308 	.word	0x08004308
 80030a4:	20000014 	.word	0x20000014
 80030a8:	20000018 	.word	0x20000018

080030ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030b0:	b094      	sub	sp, #80	; 0x50
 80030b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030b4:	2300      	movs	r3, #0
 80030b6:	647b      	str	r3, [r7, #68]	; 0x44
 80030b8:	2300      	movs	r3, #0
 80030ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030bc:	2300      	movs	r3, #0
 80030be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80030c0:	2300      	movs	r3, #0
 80030c2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030c4:	4b79      	ldr	r3, [pc, #484]	; (80032ac <HAL_RCC_GetSysClockFreq+0x200>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f003 030c 	and.w	r3, r3, #12
 80030cc:	2b08      	cmp	r3, #8
 80030ce:	d00d      	beq.n	80030ec <HAL_RCC_GetSysClockFreq+0x40>
 80030d0:	2b08      	cmp	r3, #8
 80030d2:	f200 80e1 	bhi.w	8003298 <HAL_RCC_GetSysClockFreq+0x1ec>
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d002      	beq.n	80030e0 <HAL_RCC_GetSysClockFreq+0x34>
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d003      	beq.n	80030e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80030de:	e0db      	b.n	8003298 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030e0:	4b73      	ldr	r3, [pc, #460]	; (80032b0 <HAL_RCC_GetSysClockFreq+0x204>)
 80030e2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80030e4:	e0db      	b.n	800329e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030e6:	4b73      	ldr	r3, [pc, #460]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x208>)
 80030e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030ea:	e0d8      	b.n	800329e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030ec:	4b6f      	ldr	r3, [pc, #444]	; (80032ac <HAL_RCC_GetSysClockFreq+0x200>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030f4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030f6:	4b6d      	ldr	r3, [pc, #436]	; (80032ac <HAL_RCC_GetSysClockFreq+0x200>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d063      	beq.n	80031ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003102:	4b6a      	ldr	r3, [pc, #424]	; (80032ac <HAL_RCC_GetSysClockFreq+0x200>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	099b      	lsrs	r3, r3, #6
 8003108:	2200      	movs	r2, #0
 800310a:	63bb      	str	r3, [r7, #56]	; 0x38
 800310c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800310e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003110:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003114:	633b      	str	r3, [r7, #48]	; 0x30
 8003116:	2300      	movs	r3, #0
 8003118:	637b      	str	r3, [r7, #52]	; 0x34
 800311a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800311e:	4622      	mov	r2, r4
 8003120:	462b      	mov	r3, r5
 8003122:	f04f 0000 	mov.w	r0, #0
 8003126:	f04f 0100 	mov.w	r1, #0
 800312a:	0159      	lsls	r1, r3, #5
 800312c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003130:	0150      	lsls	r0, r2, #5
 8003132:	4602      	mov	r2, r0
 8003134:	460b      	mov	r3, r1
 8003136:	4621      	mov	r1, r4
 8003138:	1a51      	subs	r1, r2, r1
 800313a:	6139      	str	r1, [r7, #16]
 800313c:	4629      	mov	r1, r5
 800313e:	eb63 0301 	sbc.w	r3, r3, r1
 8003142:	617b      	str	r3, [r7, #20]
 8003144:	f04f 0200 	mov.w	r2, #0
 8003148:	f04f 0300 	mov.w	r3, #0
 800314c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003150:	4659      	mov	r1, fp
 8003152:	018b      	lsls	r3, r1, #6
 8003154:	4651      	mov	r1, sl
 8003156:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800315a:	4651      	mov	r1, sl
 800315c:	018a      	lsls	r2, r1, #6
 800315e:	4651      	mov	r1, sl
 8003160:	ebb2 0801 	subs.w	r8, r2, r1
 8003164:	4659      	mov	r1, fp
 8003166:	eb63 0901 	sbc.w	r9, r3, r1
 800316a:	f04f 0200 	mov.w	r2, #0
 800316e:	f04f 0300 	mov.w	r3, #0
 8003172:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003176:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800317a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800317e:	4690      	mov	r8, r2
 8003180:	4699      	mov	r9, r3
 8003182:	4623      	mov	r3, r4
 8003184:	eb18 0303 	adds.w	r3, r8, r3
 8003188:	60bb      	str	r3, [r7, #8]
 800318a:	462b      	mov	r3, r5
 800318c:	eb49 0303 	adc.w	r3, r9, r3
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	f04f 0200 	mov.w	r2, #0
 8003196:	f04f 0300 	mov.w	r3, #0
 800319a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800319e:	4629      	mov	r1, r5
 80031a0:	024b      	lsls	r3, r1, #9
 80031a2:	4621      	mov	r1, r4
 80031a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031a8:	4621      	mov	r1, r4
 80031aa:	024a      	lsls	r2, r1, #9
 80031ac:	4610      	mov	r0, r2
 80031ae:	4619      	mov	r1, r3
 80031b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031b2:	2200      	movs	r2, #0
 80031b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80031b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031bc:	f7fd fbfa 	bl	80009b4 <__aeabi_uldivmod>
 80031c0:	4602      	mov	r2, r0
 80031c2:	460b      	mov	r3, r1
 80031c4:	4613      	mov	r3, r2
 80031c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031c8:	e058      	b.n	800327c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031ca:	4b38      	ldr	r3, [pc, #224]	; (80032ac <HAL_RCC_GetSysClockFreq+0x200>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	099b      	lsrs	r3, r3, #6
 80031d0:	2200      	movs	r2, #0
 80031d2:	4618      	mov	r0, r3
 80031d4:	4611      	mov	r1, r2
 80031d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80031da:	623b      	str	r3, [r7, #32]
 80031dc:	2300      	movs	r3, #0
 80031de:	627b      	str	r3, [r7, #36]	; 0x24
 80031e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80031e4:	4642      	mov	r2, r8
 80031e6:	464b      	mov	r3, r9
 80031e8:	f04f 0000 	mov.w	r0, #0
 80031ec:	f04f 0100 	mov.w	r1, #0
 80031f0:	0159      	lsls	r1, r3, #5
 80031f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031f6:	0150      	lsls	r0, r2, #5
 80031f8:	4602      	mov	r2, r0
 80031fa:	460b      	mov	r3, r1
 80031fc:	4641      	mov	r1, r8
 80031fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8003202:	4649      	mov	r1, r9
 8003204:	eb63 0b01 	sbc.w	fp, r3, r1
 8003208:	f04f 0200 	mov.w	r2, #0
 800320c:	f04f 0300 	mov.w	r3, #0
 8003210:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003214:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003218:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800321c:	ebb2 040a 	subs.w	r4, r2, sl
 8003220:	eb63 050b 	sbc.w	r5, r3, fp
 8003224:	f04f 0200 	mov.w	r2, #0
 8003228:	f04f 0300 	mov.w	r3, #0
 800322c:	00eb      	lsls	r3, r5, #3
 800322e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003232:	00e2      	lsls	r2, r4, #3
 8003234:	4614      	mov	r4, r2
 8003236:	461d      	mov	r5, r3
 8003238:	4643      	mov	r3, r8
 800323a:	18e3      	adds	r3, r4, r3
 800323c:	603b      	str	r3, [r7, #0]
 800323e:	464b      	mov	r3, r9
 8003240:	eb45 0303 	adc.w	r3, r5, r3
 8003244:	607b      	str	r3, [r7, #4]
 8003246:	f04f 0200 	mov.w	r2, #0
 800324a:	f04f 0300 	mov.w	r3, #0
 800324e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003252:	4629      	mov	r1, r5
 8003254:	028b      	lsls	r3, r1, #10
 8003256:	4621      	mov	r1, r4
 8003258:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800325c:	4621      	mov	r1, r4
 800325e:	028a      	lsls	r2, r1, #10
 8003260:	4610      	mov	r0, r2
 8003262:	4619      	mov	r1, r3
 8003264:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003266:	2200      	movs	r2, #0
 8003268:	61bb      	str	r3, [r7, #24]
 800326a:	61fa      	str	r2, [r7, #28]
 800326c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003270:	f7fd fba0 	bl	80009b4 <__aeabi_uldivmod>
 8003274:	4602      	mov	r2, r0
 8003276:	460b      	mov	r3, r1
 8003278:	4613      	mov	r3, r2
 800327a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800327c:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <HAL_RCC_GetSysClockFreq+0x200>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	0c1b      	lsrs	r3, r3, #16
 8003282:	f003 0303 	and.w	r3, r3, #3
 8003286:	3301      	adds	r3, #1
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800328c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800328e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003290:	fbb2 f3f3 	udiv	r3, r2, r3
 8003294:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003296:	e002      	b.n	800329e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003298:	4b05      	ldr	r3, [pc, #20]	; (80032b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800329a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800329c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800329e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3750      	adds	r7, #80	; 0x50
 80032a4:	46bd      	mov	sp, r7
 80032a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032aa:	bf00      	nop
 80032ac:	40023800 	.word	0x40023800
 80032b0:	00f42400 	.word	0x00f42400
 80032b4:	007a1200 	.word	0x007a1200

080032b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032bc:	4b03      	ldr	r3, [pc, #12]	; (80032cc <HAL_RCC_GetHCLKFreq+0x14>)
 80032be:	681b      	ldr	r3, [r3, #0]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	20000014 	.word	0x20000014

080032d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032d4:	f7ff fff0 	bl	80032b8 <HAL_RCC_GetHCLKFreq>
 80032d8:	4602      	mov	r2, r0
 80032da:	4b05      	ldr	r3, [pc, #20]	; (80032f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	0a9b      	lsrs	r3, r3, #10
 80032e0:	f003 0307 	and.w	r3, r3, #7
 80032e4:	4903      	ldr	r1, [pc, #12]	; (80032f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032e6:	5ccb      	ldrb	r3, [r1, r3]
 80032e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	40023800 	.word	0x40023800
 80032f4:	08004318 	.word	0x08004318

080032f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032fc:	f7ff ffdc 	bl	80032b8 <HAL_RCC_GetHCLKFreq>
 8003300:	4602      	mov	r2, r0
 8003302:	4b05      	ldr	r3, [pc, #20]	; (8003318 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	0b5b      	lsrs	r3, r3, #13
 8003308:	f003 0307 	and.w	r3, r3, #7
 800330c:	4903      	ldr	r1, [pc, #12]	; (800331c <HAL_RCC_GetPCLK2Freq+0x24>)
 800330e:	5ccb      	ldrb	r3, [r1, r3]
 8003310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003314:	4618      	mov	r0, r3
 8003316:	bd80      	pop	{r7, pc}
 8003318:	40023800 	.word	0x40023800
 800331c:	08004318 	.word	0x08004318

08003320 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e03f      	b.n	80033b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d106      	bne.n	800334c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7fe f97e 	bl	8001648 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2224      	movs	r2, #36	; 0x24
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68da      	ldr	r2, [r3, #12]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003362:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f000 fd23 	bl	8003db0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	691a      	ldr	r2, [r3, #16]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003378:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	695a      	ldr	r2, [r3, #20]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003388:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68da      	ldr	r2, [r3, #12]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003398:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2220      	movs	r2, #32
 80033a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2220      	movs	r2, #32
 80033ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80033ba:	b480      	push	{r7}
 80033bc:	b085      	sub	sp, #20
 80033be:	af00      	add	r7, sp, #0
 80033c0:	60f8      	str	r0, [r7, #12]
 80033c2:	60b9      	str	r1, [r7, #8]
 80033c4:	4613      	mov	r3, r2
 80033c6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b20      	cmp	r3, #32
 80033d2:	d130      	bne.n	8003436 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d002      	beq.n	80033e0 <HAL_UART_Transmit_IT+0x26>
 80033da:	88fb      	ldrh	r3, [r7, #6]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d101      	bne.n	80033e4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e029      	b.n	8003438 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d101      	bne.n	80033f2 <HAL_UART_Transmit_IT+0x38>
 80033ee:	2302      	movs	r3, #2
 80033f0:	e022      	b.n	8003438 <HAL_UART_Transmit_IT+0x7e>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	68ba      	ldr	r2, [r7, #8]
 80033fe:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	88fa      	ldrh	r2, [r7, #6]
 8003404:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	88fa      	ldrh	r2, [r7, #6]
 800340a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2221      	movs	r2, #33	; 0x21
 8003416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68da      	ldr	r2, [r3, #12]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003430:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003432:	2300      	movs	r3, #0
 8003434:	e000      	b.n	8003438 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003436:	2302      	movs	r3, #2
  }
}
 8003438:	4618      	mov	r0, r3
 800343a:	3714      	adds	r7, #20
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	4613      	mov	r3, r2
 8003450:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b20      	cmp	r3, #32
 800345c:	d11d      	bne.n	800349a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d002      	beq.n	800346a <HAL_UART_Receive_IT+0x26>
 8003464:	88fb      	ldrh	r3, [r7, #6]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e016      	b.n	800349c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003474:	2b01      	cmp	r3, #1
 8003476:	d101      	bne.n	800347c <HAL_UART_Receive_IT+0x38>
 8003478:	2302      	movs	r3, #2
 800347a:	e00f      	b.n	800349c <HAL_UART_Receive_IT+0x58>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800348a:	88fb      	ldrh	r3, [r7, #6]
 800348c:	461a      	mov	r2, r3
 800348e:	68b9      	ldr	r1, [r7, #8]
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f000 fab5 	bl	8003a00 <UART_Start_Receive_IT>
 8003496:	4603      	mov	r3, r0
 8003498:	e000      	b.n	800349c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800349a:	2302      	movs	r3, #2
  }
}
 800349c:	4618      	mov	r0, r3
 800349e:	3710      	adds	r7, #16
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b0ba      	sub	sp, #232	; 0xe8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80034ca:	2300      	movs	r3, #0
 80034cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80034d0:	2300      	movs	r3, #0
 80034d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80034d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034da:	f003 030f 	and.w	r3, r3, #15
 80034de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80034e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10f      	bne.n	800350a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034ee:	f003 0320 	and.w	r3, r3, #32
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d009      	beq.n	800350a <HAL_UART_IRQHandler+0x66>
 80034f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034fa:	f003 0320 	and.w	r3, r3, #32
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 fb99 	bl	8003c3a <UART_Receive_IT>
      return;
 8003508:	e256      	b.n	80039b8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800350a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800350e:	2b00      	cmp	r3, #0
 8003510:	f000 80de 	beq.w	80036d0 <HAL_UART_IRQHandler+0x22c>
 8003514:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	2b00      	cmp	r3, #0
 800351e:	d106      	bne.n	800352e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003524:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 80d1 	beq.w	80036d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800352e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00b      	beq.n	8003552 <HAL_UART_IRQHandler+0xae>
 800353a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800353e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003542:	2b00      	cmp	r3, #0
 8003544:	d005      	beq.n	8003552 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	f043 0201 	orr.w	r2, r3, #1
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003556:	f003 0304 	and.w	r3, r3, #4
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00b      	beq.n	8003576 <HAL_UART_IRQHandler+0xd2>
 800355e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b00      	cmp	r3, #0
 8003568:	d005      	beq.n	8003576 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	f043 0202 	orr.w	r2, r3, #2
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00b      	beq.n	800359a <HAL_UART_IRQHandler+0xf6>
 8003582:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b00      	cmp	r3, #0
 800358c:	d005      	beq.n	800359a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	f043 0204 	orr.w	r2, r3, #4
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800359a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800359e:	f003 0308 	and.w	r3, r3, #8
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d011      	beq.n	80035ca <HAL_UART_IRQHandler+0x126>
 80035a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035aa:	f003 0320 	and.w	r3, r3, #32
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d105      	bne.n	80035be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80035b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d005      	beq.n	80035ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	f043 0208 	orr.w	r2, r3, #8
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	f000 81ed 	beq.w	80039ae <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035d8:	f003 0320 	and.w	r3, r3, #32
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d008      	beq.n	80035f2 <HAL_UART_IRQHandler+0x14e>
 80035e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035e4:	f003 0320 	and.w	r3, r3, #32
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d002      	beq.n	80035f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 fb24 	bl	8003c3a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035fc:	2b40      	cmp	r3, #64	; 0x40
 80035fe:	bf0c      	ite	eq
 8003600:	2301      	moveq	r3, #1
 8003602:	2300      	movne	r3, #0
 8003604:	b2db      	uxtb	r3, r3
 8003606:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360e:	f003 0308 	and.w	r3, r3, #8
 8003612:	2b00      	cmp	r3, #0
 8003614:	d103      	bne.n	800361e <HAL_UART_IRQHandler+0x17a>
 8003616:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800361a:	2b00      	cmp	r3, #0
 800361c:	d04f      	beq.n	80036be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 fa2c 	bl	8003a7c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362e:	2b40      	cmp	r3, #64	; 0x40
 8003630:	d141      	bne.n	80036b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	3314      	adds	r3, #20
 8003638:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800363c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003640:	e853 3f00 	ldrex	r3, [r3]
 8003644:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003648:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800364c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003650:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	3314      	adds	r3, #20
 800365a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800365e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003662:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003666:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800366a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800366e:	e841 2300 	strex	r3, r2, [r1]
 8003672:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003676:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1d9      	bne.n	8003632 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003682:	2b00      	cmp	r3, #0
 8003684:	d013      	beq.n	80036ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368a:	4a7d      	ldr	r2, [pc, #500]	; (8003880 <HAL_UART_IRQHandler+0x3dc>)
 800368c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003692:	4618      	mov	r0, r3
 8003694:	f7fe ffaf 	bl	80025f6 <HAL_DMA_Abort_IT>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d016      	beq.n	80036cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036a8:	4610      	mov	r0, r2
 80036aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036ac:	e00e      	b.n	80036cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f990 	bl	80039d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036b4:	e00a      	b.n	80036cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 f98c 	bl	80039d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036bc:	e006      	b.n	80036cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f988 	bl	80039d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80036ca:	e170      	b.n	80039ae <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036cc:	bf00      	nop
    return;
 80036ce:	e16e      	b.n	80039ae <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	f040 814a 	bne.w	800396e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80036da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036de:	f003 0310 	and.w	r3, r3, #16
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f000 8143 	beq.w	800396e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80036e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036ec:	f003 0310 	and.w	r3, r3, #16
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f000 813c 	beq.w	800396e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80036f6:	2300      	movs	r3, #0
 80036f8:	60bb      	str	r3, [r7, #8]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	60bb      	str	r3, [r7, #8]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	60bb      	str	r3, [r7, #8]
 800370a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003716:	2b40      	cmp	r3, #64	; 0x40
 8003718:	f040 80b4 	bne.w	8003884 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003728:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 8140 	beq.w	80039b2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003736:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800373a:	429a      	cmp	r2, r3
 800373c:	f080 8139 	bcs.w	80039b2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003746:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003752:	f000 8088 	beq.w	8003866 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	330c      	adds	r3, #12
 800375c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003760:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003764:	e853 3f00 	ldrex	r3, [r3]
 8003768:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800376c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003770:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003774:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	330c      	adds	r3, #12
 800377e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003782:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003786:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800378a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800378e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003792:	e841 2300 	strex	r3, r2, [r1]
 8003796:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800379a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1d9      	bne.n	8003756 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	3314      	adds	r3, #20
 80037a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037ac:	e853 3f00 	ldrex	r3, [r3]
 80037b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80037b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037b4:	f023 0301 	bic.w	r3, r3, #1
 80037b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	3314      	adds	r3, #20
 80037c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80037c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80037ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80037ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80037d2:	e841 2300 	strex	r3, r2, [r1]
 80037d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80037d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1e1      	bne.n	80037a2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	3314      	adds	r3, #20
 80037e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037e8:	e853 3f00 	ldrex	r3, [r3]
 80037ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80037ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	3314      	adds	r3, #20
 80037fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003802:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003804:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003806:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003808:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800380a:	e841 2300 	strex	r3, r2, [r1]
 800380e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003810:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1e3      	bne.n	80037de <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2220      	movs	r2, #32
 800381a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	330c      	adds	r3, #12
 800382a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800382e:	e853 3f00 	ldrex	r3, [r3]
 8003832:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003834:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003836:	f023 0310 	bic.w	r3, r3, #16
 800383a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	330c      	adds	r3, #12
 8003844:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003848:	65ba      	str	r2, [r7, #88]	; 0x58
 800384a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800384e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003850:	e841 2300 	strex	r3, r2, [r1]
 8003854:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003856:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1e3      	bne.n	8003824 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003860:	4618      	mov	r0, r3
 8003862:	f7fe fe58 	bl	8002516 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800386e:	b29b      	uxth	r3, r3
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	b29b      	uxth	r3, r3
 8003874:	4619      	mov	r1, r3
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f8b6 	bl	80039e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800387c:	e099      	b.n	80039b2 <HAL_UART_IRQHandler+0x50e>
 800387e:	bf00      	nop
 8003880:	08003b43 	.word	0x08003b43
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800388c:	b29b      	uxth	r3, r3
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003898:	b29b      	uxth	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	f000 808b 	beq.w	80039b6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80038a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f000 8086 	beq.w	80039b6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	330c      	adds	r3, #12
 80038b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b4:	e853 3f00 	ldrex	r3, [r3]
 80038b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80038ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	330c      	adds	r3, #12
 80038ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80038ce:	647a      	str	r2, [r7, #68]	; 0x44
 80038d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80038d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038d6:	e841 2300 	strex	r3, r2, [r1]
 80038da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80038dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1e3      	bne.n	80038aa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	3314      	adds	r3, #20
 80038e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ec:	e853 3f00 	ldrex	r3, [r3]
 80038f0:	623b      	str	r3, [r7, #32]
   return(result);
 80038f2:	6a3b      	ldr	r3, [r7, #32]
 80038f4:	f023 0301 	bic.w	r3, r3, #1
 80038f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	3314      	adds	r3, #20
 8003902:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003906:	633a      	str	r2, [r7, #48]	; 0x30
 8003908:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800390a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800390c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800390e:	e841 2300 	strex	r3, r2, [r1]
 8003912:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1e3      	bne.n	80038e2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2220      	movs	r2, #32
 800391e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	330c      	adds	r3, #12
 800392e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	e853 3f00 	ldrex	r3, [r3]
 8003936:	60fb      	str	r3, [r7, #12]
   return(result);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f023 0310 	bic.w	r3, r3, #16
 800393e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	330c      	adds	r3, #12
 8003948:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800394c:	61fa      	str	r2, [r7, #28]
 800394e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003950:	69b9      	ldr	r1, [r7, #24]
 8003952:	69fa      	ldr	r2, [r7, #28]
 8003954:	e841 2300 	strex	r3, r2, [r1]
 8003958:	617b      	str	r3, [r7, #20]
   return(result);
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1e3      	bne.n	8003928 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003960:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003964:	4619      	mov	r1, r3
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f83e 	bl	80039e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800396c:	e023      	b.n	80039b6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800396e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003976:	2b00      	cmp	r3, #0
 8003978:	d009      	beq.n	800398e <HAL_UART_IRQHandler+0x4ea>
 800397a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800397e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 f8ef 	bl	8003b6a <UART_Transmit_IT>
    return;
 800398c:	e014      	b.n	80039b8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800398e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00e      	beq.n	80039b8 <HAL_UART_IRQHandler+0x514>
 800399a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800399e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d008      	beq.n	80039b8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 f92f 	bl	8003c0a <UART_EndTransmit_IT>
    return;
 80039ac:	e004      	b.n	80039b8 <HAL_UART_IRQHandler+0x514>
    return;
 80039ae:	bf00      	nop
 80039b0:	e002      	b.n	80039b8 <HAL_UART_IRQHandler+0x514>
      return;
 80039b2:	bf00      	nop
 80039b4:	e000      	b.n	80039b8 <HAL_UART_IRQHandler+0x514>
      return;
 80039b6:	bf00      	nop
  }
}
 80039b8:	37e8      	adds	r7, #232	; 0xe8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop

080039c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	460b      	mov	r3, r1
 80039f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	68ba      	ldr	r2, [r7, #8]
 8003a12:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	88fa      	ldrh	r2, [r7, #6]
 8003a18:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	88fa      	ldrh	r2, [r7, #6]
 8003a1e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2222      	movs	r2, #34	; 0x22
 8003a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d007      	beq.n	8003a4e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68da      	ldr	r2, [r3, #12]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a4c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	695a      	ldr	r2, [r3, #20]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f042 0201 	orr.w	r2, r2, #1
 8003a5c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68da      	ldr	r2, [r3, #12]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f042 0220 	orr.w	r2, r2, #32
 8003a6c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3714      	adds	r7, #20
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b095      	sub	sp, #84	; 0x54
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	330c      	adds	r3, #12
 8003a8a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a8e:	e853 3f00 	ldrex	r3, [r3]
 8003a92:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	330c      	adds	r3, #12
 8003aa2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003aa4:	643a      	str	r2, [r7, #64]	; 0x40
 8003aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003aaa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003aac:	e841 2300 	strex	r3, r2, [r1]
 8003ab0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1e5      	bne.n	8003a84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	3314      	adds	r3, #20
 8003abe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac0:	6a3b      	ldr	r3, [r7, #32]
 8003ac2:	e853 3f00 	ldrex	r3, [r3]
 8003ac6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	f023 0301 	bic.w	r3, r3, #1
 8003ace:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	3314      	adds	r3, #20
 8003ad6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ad8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ada:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003adc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ade:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ae0:	e841 2300 	strex	r3, r2, [r1]
 8003ae4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1e5      	bne.n	8003ab8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d119      	bne.n	8003b28 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	330c      	adds	r3, #12
 8003afa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	e853 3f00 	ldrex	r3, [r3]
 8003b02:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	f023 0310 	bic.w	r3, r3, #16
 8003b0a:	647b      	str	r3, [r7, #68]	; 0x44
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	330c      	adds	r3, #12
 8003b12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b14:	61ba      	str	r2, [r7, #24]
 8003b16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b18:	6979      	ldr	r1, [r7, #20]
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	e841 2300 	strex	r3, r2, [r1]
 8003b20:	613b      	str	r3, [r7, #16]
   return(result);
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1e5      	bne.n	8003af4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003b36:	bf00      	nop
 8003b38:	3754      	adds	r7, #84	; 0x54
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr

08003b42 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b084      	sub	sp, #16
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f7ff ff39 	bl	80039d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b62:	bf00      	nop
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b085      	sub	sp, #20
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b21      	cmp	r3, #33	; 0x21
 8003b7c:	d13e      	bne.n	8003bfc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b86:	d114      	bne.n	8003bb2 <UART_Transmit_IT+0x48>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d110      	bne.n	8003bb2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	881b      	ldrh	r3, [r3, #0]
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ba4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	1c9a      	adds	r2, r3, #2
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	621a      	str	r2, [r3, #32]
 8003bb0:	e008      	b.n	8003bc4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	1c59      	adds	r1, r3, #1
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	6211      	str	r1, [r2, #32]
 8003bbc:	781a      	ldrb	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10f      	bne.n	8003bf8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68da      	ldr	r2, [r3, #12]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003be6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68da      	ldr	r2, [r3, #12]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bf6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	e000      	b.n	8003bfe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003bfc:	2302      	movs	r3, #2
  }
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3714      	adds	r7, #20
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b082      	sub	sp, #8
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68da      	ldr	r2, [r3, #12]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c20:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2220      	movs	r2, #32
 8003c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f7ff fec8 	bl	80039c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b08c      	sub	sp, #48	; 0x30
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b22      	cmp	r3, #34	; 0x22
 8003c4c:	f040 80ab 	bne.w	8003da6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c58:	d117      	bne.n	8003c8a <UART_Receive_IT+0x50>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d113      	bne.n	8003c8a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003c62:	2300      	movs	r3, #0
 8003c64:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c82:	1c9a      	adds	r2, r3, #2
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	629a      	str	r2, [r3, #40]	; 0x28
 8003c88:	e026      	b.n	8003cd8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003c90:	2300      	movs	r3, #0
 8003c92:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c9c:	d007      	beq.n	8003cae <UART_Receive_IT+0x74>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10a      	bne.n	8003cbc <UART_Receive_IT+0x82>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d106      	bne.n	8003cbc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	b2da      	uxtb	r2, r3
 8003cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb8:	701a      	strb	r2, [r3, #0]
 8003cba:	e008      	b.n	8003cce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cc8:	b2da      	uxtb	r2, r3
 8003cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ccc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd2:	1c5a      	adds	r2, r3, #1
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d15a      	bne.n	8003da2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68da      	ldr	r2, [r3, #12]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f022 0220 	bic.w	r2, r2, #32
 8003cfa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68da      	ldr	r2, [r3, #12]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	695a      	ldr	r2, [r3, #20]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 0201 	bic.w	r2, r2, #1
 8003d1a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d135      	bne.n	8003d98 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	330c      	adds	r3, #12
 8003d38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	e853 3f00 	ldrex	r3, [r3]
 8003d40:	613b      	str	r3, [r7, #16]
   return(result);
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	f023 0310 	bic.w	r3, r3, #16
 8003d48:	627b      	str	r3, [r7, #36]	; 0x24
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	330c      	adds	r3, #12
 8003d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d52:	623a      	str	r2, [r7, #32]
 8003d54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d56:	69f9      	ldr	r1, [r7, #28]
 8003d58:	6a3a      	ldr	r2, [r7, #32]
 8003d5a:	e841 2300 	strex	r3, r2, [r1]
 8003d5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1e5      	bne.n	8003d32 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0310 	and.w	r3, r3, #16
 8003d70:	2b10      	cmp	r3, #16
 8003d72:	d10a      	bne.n	8003d8a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d74:	2300      	movs	r3, #0
 8003d76:	60fb      	str	r3, [r7, #12]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	60fb      	str	r3, [r7, #12]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	60fb      	str	r3, [r7, #12]
 8003d88:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d8e:	4619      	mov	r1, r3
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f7ff fe29 	bl	80039e8 <HAL_UARTEx_RxEventCallback>
 8003d96:	e002      	b.n	8003d9e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f7fc ff8d 	bl	8000cb8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	e002      	b.n	8003da8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003da2:	2300      	movs	r3, #0
 8003da4:	e000      	b.n	8003da8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003da6:	2302      	movs	r3, #2
  }
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3730      	adds	r7, #48	; 0x30
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003db0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003db4:	b0c0      	sub	sp, #256	; 0x100
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dcc:	68d9      	ldr	r1, [r3, #12]
 8003dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	ea40 0301 	orr.w	r3, r0, r1
 8003dd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dde:	689a      	ldr	r2, [r3, #8]
 8003de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	431a      	orrs	r2, r3
 8003de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	431a      	orrs	r2, r3
 8003df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003df4:	69db      	ldr	r3, [r3, #28]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003e08:	f021 010c 	bic.w	r1, r1, #12
 8003e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e16:	430b      	orrs	r3, r1
 8003e18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e2a:	6999      	ldr	r1, [r3, #24]
 8003e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	ea40 0301 	orr.w	r3, r0, r1
 8003e36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	4b8f      	ldr	r3, [pc, #572]	; (800407c <UART_SetConfig+0x2cc>)
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d005      	beq.n	8003e50 <UART_SetConfig+0xa0>
 8003e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	4b8d      	ldr	r3, [pc, #564]	; (8004080 <UART_SetConfig+0x2d0>)
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d104      	bne.n	8003e5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e50:	f7ff fa52 	bl	80032f8 <HAL_RCC_GetPCLK2Freq>
 8003e54:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003e58:	e003      	b.n	8003e62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e5a:	f7ff fa39 	bl	80032d0 <HAL_RCC_GetPCLK1Freq>
 8003e5e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e66:	69db      	ldr	r3, [r3, #28]
 8003e68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e6c:	f040 810c 	bne.w	8004088 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e74:	2200      	movs	r2, #0
 8003e76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003e7a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003e7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003e82:	4622      	mov	r2, r4
 8003e84:	462b      	mov	r3, r5
 8003e86:	1891      	adds	r1, r2, r2
 8003e88:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e8a:	415b      	adcs	r3, r3
 8003e8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e92:	4621      	mov	r1, r4
 8003e94:	eb12 0801 	adds.w	r8, r2, r1
 8003e98:	4629      	mov	r1, r5
 8003e9a:	eb43 0901 	adc.w	r9, r3, r1
 8003e9e:	f04f 0200 	mov.w	r2, #0
 8003ea2:	f04f 0300 	mov.w	r3, #0
 8003ea6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003eaa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003eae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003eb2:	4690      	mov	r8, r2
 8003eb4:	4699      	mov	r9, r3
 8003eb6:	4623      	mov	r3, r4
 8003eb8:	eb18 0303 	adds.w	r3, r8, r3
 8003ebc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003ec0:	462b      	mov	r3, r5
 8003ec2:	eb49 0303 	adc.w	r3, r9, r3
 8003ec6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003ed6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003eda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003ede:	460b      	mov	r3, r1
 8003ee0:	18db      	adds	r3, r3, r3
 8003ee2:	653b      	str	r3, [r7, #80]	; 0x50
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	eb42 0303 	adc.w	r3, r2, r3
 8003eea:	657b      	str	r3, [r7, #84]	; 0x54
 8003eec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003ef0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003ef4:	f7fc fd5e 	bl	80009b4 <__aeabi_uldivmod>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	460b      	mov	r3, r1
 8003efc:	4b61      	ldr	r3, [pc, #388]	; (8004084 <UART_SetConfig+0x2d4>)
 8003efe:	fba3 2302 	umull	r2, r3, r3, r2
 8003f02:	095b      	lsrs	r3, r3, #5
 8003f04:	011c      	lsls	r4, r3, #4
 8003f06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f10:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003f14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003f18:	4642      	mov	r2, r8
 8003f1a:	464b      	mov	r3, r9
 8003f1c:	1891      	adds	r1, r2, r2
 8003f1e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003f20:	415b      	adcs	r3, r3
 8003f22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003f28:	4641      	mov	r1, r8
 8003f2a:	eb12 0a01 	adds.w	sl, r2, r1
 8003f2e:	4649      	mov	r1, r9
 8003f30:	eb43 0b01 	adc.w	fp, r3, r1
 8003f34:	f04f 0200 	mov.w	r2, #0
 8003f38:	f04f 0300 	mov.w	r3, #0
 8003f3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f48:	4692      	mov	sl, r2
 8003f4a:	469b      	mov	fp, r3
 8003f4c:	4643      	mov	r3, r8
 8003f4e:	eb1a 0303 	adds.w	r3, sl, r3
 8003f52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f56:	464b      	mov	r3, r9
 8003f58:	eb4b 0303 	adc.w	r3, fp, r3
 8003f5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f6c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003f70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003f74:	460b      	mov	r3, r1
 8003f76:	18db      	adds	r3, r3, r3
 8003f78:	643b      	str	r3, [r7, #64]	; 0x40
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	eb42 0303 	adc.w	r3, r2, r3
 8003f80:	647b      	str	r3, [r7, #68]	; 0x44
 8003f82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003f8a:	f7fc fd13 	bl	80009b4 <__aeabi_uldivmod>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	460b      	mov	r3, r1
 8003f92:	4611      	mov	r1, r2
 8003f94:	4b3b      	ldr	r3, [pc, #236]	; (8004084 <UART_SetConfig+0x2d4>)
 8003f96:	fba3 2301 	umull	r2, r3, r3, r1
 8003f9a:	095b      	lsrs	r3, r3, #5
 8003f9c:	2264      	movs	r2, #100	; 0x64
 8003f9e:	fb02 f303 	mul.w	r3, r2, r3
 8003fa2:	1acb      	subs	r3, r1, r3
 8003fa4:	00db      	lsls	r3, r3, #3
 8003fa6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003faa:	4b36      	ldr	r3, [pc, #216]	; (8004084 <UART_SetConfig+0x2d4>)
 8003fac:	fba3 2302 	umull	r2, r3, r3, r2
 8003fb0:	095b      	lsrs	r3, r3, #5
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003fb8:	441c      	add	r4, r3
 8003fba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003fc4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003fc8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003fcc:	4642      	mov	r2, r8
 8003fce:	464b      	mov	r3, r9
 8003fd0:	1891      	adds	r1, r2, r2
 8003fd2:	63b9      	str	r1, [r7, #56]	; 0x38
 8003fd4:	415b      	adcs	r3, r3
 8003fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003fdc:	4641      	mov	r1, r8
 8003fde:	1851      	adds	r1, r2, r1
 8003fe0:	6339      	str	r1, [r7, #48]	; 0x30
 8003fe2:	4649      	mov	r1, r9
 8003fe4:	414b      	adcs	r3, r1
 8003fe6:	637b      	str	r3, [r7, #52]	; 0x34
 8003fe8:	f04f 0200 	mov.w	r2, #0
 8003fec:	f04f 0300 	mov.w	r3, #0
 8003ff0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003ff4:	4659      	mov	r1, fp
 8003ff6:	00cb      	lsls	r3, r1, #3
 8003ff8:	4651      	mov	r1, sl
 8003ffa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ffe:	4651      	mov	r1, sl
 8004000:	00ca      	lsls	r2, r1, #3
 8004002:	4610      	mov	r0, r2
 8004004:	4619      	mov	r1, r3
 8004006:	4603      	mov	r3, r0
 8004008:	4642      	mov	r2, r8
 800400a:	189b      	adds	r3, r3, r2
 800400c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004010:	464b      	mov	r3, r9
 8004012:	460a      	mov	r2, r1
 8004014:	eb42 0303 	adc.w	r3, r2, r3
 8004018:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800401c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004028:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800402c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004030:	460b      	mov	r3, r1
 8004032:	18db      	adds	r3, r3, r3
 8004034:	62bb      	str	r3, [r7, #40]	; 0x28
 8004036:	4613      	mov	r3, r2
 8004038:	eb42 0303 	adc.w	r3, r2, r3
 800403c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800403e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004042:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004046:	f7fc fcb5 	bl	80009b4 <__aeabi_uldivmod>
 800404a:	4602      	mov	r2, r0
 800404c:	460b      	mov	r3, r1
 800404e:	4b0d      	ldr	r3, [pc, #52]	; (8004084 <UART_SetConfig+0x2d4>)
 8004050:	fba3 1302 	umull	r1, r3, r3, r2
 8004054:	095b      	lsrs	r3, r3, #5
 8004056:	2164      	movs	r1, #100	; 0x64
 8004058:	fb01 f303 	mul.w	r3, r1, r3
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	00db      	lsls	r3, r3, #3
 8004060:	3332      	adds	r3, #50	; 0x32
 8004062:	4a08      	ldr	r2, [pc, #32]	; (8004084 <UART_SetConfig+0x2d4>)
 8004064:	fba2 2303 	umull	r2, r3, r2, r3
 8004068:	095b      	lsrs	r3, r3, #5
 800406a:	f003 0207 	and.w	r2, r3, #7
 800406e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4422      	add	r2, r4
 8004076:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004078:	e105      	b.n	8004286 <UART_SetConfig+0x4d6>
 800407a:	bf00      	nop
 800407c:	40011000 	.word	0x40011000
 8004080:	40011400 	.word	0x40011400
 8004084:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004088:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800408c:	2200      	movs	r2, #0
 800408e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004092:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004096:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800409a:	4642      	mov	r2, r8
 800409c:	464b      	mov	r3, r9
 800409e:	1891      	adds	r1, r2, r2
 80040a0:	6239      	str	r1, [r7, #32]
 80040a2:	415b      	adcs	r3, r3
 80040a4:	627b      	str	r3, [r7, #36]	; 0x24
 80040a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80040aa:	4641      	mov	r1, r8
 80040ac:	1854      	adds	r4, r2, r1
 80040ae:	4649      	mov	r1, r9
 80040b0:	eb43 0501 	adc.w	r5, r3, r1
 80040b4:	f04f 0200 	mov.w	r2, #0
 80040b8:	f04f 0300 	mov.w	r3, #0
 80040bc:	00eb      	lsls	r3, r5, #3
 80040be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040c2:	00e2      	lsls	r2, r4, #3
 80040c4:	4614      	mov	r4, r2
 80040c6:	461d      	mov	r5, r3
 80040c8:	4643      	mov	r3, r8
 80040ca:	18e3      	adds	r3, r4, r3
 80040cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80040d0:	464b      	mov	r3, r9
 80040d2:	eb45 0303 	adc.w	r3, r5, r3
 80040d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80040da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80040e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80040ea:	f04f 0200 	mov.w	r2, #0
 80040ee:	f04f 0300 	mov.w	r3, #0
 80040f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80040f6:	4629      	mov	r1, r5
 80040f8:	008b      	lsls	r3, r1, #2
 80040fa:	4621      	mov	r1, r4
 80040fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004100:	4621      	mov	r1, r4
 8004102:	008a      	lsls	r2, r1, #2
 8004104:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004108:	f7fc fc54 	bl	80009b4 <__aeabi_uldivmod>
 800410c:	4602      	mov	r2, r0
 800410e:	460b      	mov	r3, r1
 8004110:	4b60      	ldr	r3, [pc, #384]	; (8004294 <UART_SetConfig+0x4e4>)
 8004112:	fba3 2302 	umull	r2, r3, r3, r2
 8004116:	095b      	lsrs	r3, r3, #5
 8004118:	011c      	lsls	r4, r3, #4
 800411a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800411e:	2200      	movs	r2, #0
 8004120:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004124:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004128:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800412c:	4642      	mov	r2, r8
 800412e:	464b      	mov	r3, r9
 8004130:	1891      	adds	r1, r2, r2
 8004132:	61b9      	str	r1, [r7, #24]
 8004134:	415b      	adcs	r3, r3
 8004136:	61fb      	str	r3, [r7, #28]
 8004138:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800413c:	4641      	mov	r1, r8
 800413e:	1851      	adds	r1, r2, r1
 8004140:	6139      	str	r1, [r7, #16]
 8004142:	4649      	mov	r1, r9
 8004144:	414b      	adcs	r3, r1
 8004146:	617b      	str	r3, [r7, #20]
 8004148:	f04f 0200 	mov.w	r2, #0
 800414c:	f04f 0300 	mov.w	r3, #0
 8004150:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004154:	4659      	mov	r1, fp
 8004156:	00cb      	lsls	r3, r1, #3
 8004158:	4651      	mov	r1, sl
 800415a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800415e:	4651      	mov	r1, sl
 8004160:	00ca      	lsls	r2, r1, #3
 8004162:	4610      	mov	r0, r2
 8004164:	4619      	mov	r1, r3
 8004166:	4603      	mov	r3, r0
 8004168:	4642      	mov	r2, r8
 800416a:	189b      	adds	r3, r3, r2
 800416c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004170:	464b      	mov	r3, r9
 8004172:	460a      	mov	r2, r1
 8004174:	eb42 0303 	adc.w	r3, r2, r3
 8004178:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800417c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	67bb      	str	r3, [r7, #120]	; 0x78
 8004186:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004188:	f04f 0200 	mov.w	r2, #0
 800418c:	f04f 0300 	mov.w	r3, #0
 8004190:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004194:	4649      	mov	r1, r9
 8004196:	008b      	lsls	r3, r1, #2
 8004198:	4641      	mov	r1, r8
 800419a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800419e:	4641      	mov	r1, r8
 80041a0:	008a      	lsls	r2, r1, #2
 80041a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80041a6:	f7fc fc05 	bl	80009b4 <__aeabi_uldivmod>
 80041aa:	4602      	mov	r2, r0
 80041ac:	460b      	mov	r3, r1
 80041ae:	4b39      	ldr	r3, [pc, #228]	; (8004294 <UART_SetConfig+0x4e4>)
 80041b0:	fba3 1302 	umull	r1, r3, r3, r2
 80041b4:	095b      	lsrs	r3, r3, #5
 80041b6:	2164      	movs	r1, #100	; 0x64
 80041b8:	fb01 f303 	mul.w	r3, r1, r3
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	011b      	lsls	r3, r3, #4
 80041c0:	3332      	adds	r3, #50	; 0x32
 80041c2:	4a34      	ldr	r2, [pc, #208]	; (8004294 <UART_SetConfig+0x4e4>)
 80041c4:	fba2 2303 	umull	r2, r3, r2, r3
 80041c8:	095b      	lsrs	r3, r3, #5
 80041ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041ce:	441c      	add	r4, r3
 80041d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041d4:	2200      	movs	r2, #0
 80041d6:	673b      	str	r3, [r7, #112]	; 0x70
 80041d8:	677a      	str	r2, [r7, #116]	; 0x74
 80041da:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80041de:	4642      	mov	r2, r8
 80041e0:	464b      	mov	r3, r9
 80041e2:	1891      	adds	r1, r2, r2
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	415b      	adcs	r3, r3
 80041e8:	60fb      	str	r3, [r7, #12]
 80041ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041ee:	4641      	mov	r1, r8
 80041f0:	1851      	adds	r1, r2, r1
 80041f2:	6039      	str	r1, [r7, #0]
 80041f4:	4649      	mov	r1, r9
 80041f6:	414b      	adcs	r3, r1
 80041f8:	607b      	str	r3, [r7, #4]
 80041fa:	f04f 0200 	mov.w	r2, #0
 80041fe:	f04f 0300 	mov.w	r3, #0
 8004202:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004206:	4659      	mov	r1, fp
 8004208:	00cb      	lsls	r3, r1, #3
 800420a:	4651      	mov	r1, sl
 800420c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004210:	4651      	mov	r1, sl
 8004212:	00ca      	lsls	r2, r1, #3
 8004214:	4610      	mov	r0, r2
 8004216:	4619      	mov	r1, r3
 8004218:	4603      	mov	r3, r0
 800421a:	4642      	mov	r2, r8
 800421c:	189b      	adds	r3, r3, r2
 800421e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004220:	464b      	mov	r3, r9
 8004222:	460a      	mov	r2, r1
 8004224:	eb42 0303 	adc.w	r3, r2, r3
 8004228:	66fb      	str	r3, [r7, #108]	; 0x6c
 800422a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	663b      	str	r3, [r7, #96]	; 0x60
 8004234:	667a      	str	r2, [r7, #100]	; 0x64
 8004236:	f04f 0200 	mov.w	r2, #0
 800423a:	f04f 0300 	mov.w	r3, #0
 800423e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004242:	4649      	mov	r1, r9
 8004244:	008b      	lsls	r3, r1, #2
 8004246:	4641      	mov	r1, r8
 8004248:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800424c:	4641      	mov	r1, r8
 800424e:	008a      	lsls	r2, r1, #2
 8004250:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004254:	f7fc fbae 	bl	80009b4 <__aeabi_uldivmod>
 8004258:	4602      	mov	r2, r0
 800425a:	460b      	mov	r3, r1
 800425c:	4b0d      	ldr	r3, [pc, #52]	; (8004294 <UART_SetConfig+0x4e4>)
 800425e:	fba3 1302 	umull	r1, r3, r3, r2
 8004262:	095b      	lsrs	r3, r3, #5
 8004264:	2164      	movs	r1, #100	; 0x64
 8004266:	fb01 f303 	mul.w	r3, r1, r3
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	011b      	lsls	r3, r3, #4
 800426e:	3332      	adds	r3, #50	; 0x32
 8004270:	4a08      	ldr	r2, [pc, #32]	; (8004294 <UART_SetConfig+0x4e4>)
 8004272:	fba2 2303 	umull	r2, r3, r2, r3
 8004276:	095b      	lsrs	r3, r3, #5
 8004278:	f003 020f 	and.w	r2, r3, #15
 800427c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4422      	add	r2, r4
 8004284:	609a      	str	r2, [r3, #8]
}
 8004286:	bf00      	nop
 8004288:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800428c:	46bd      	mov	sp, r7
 800428e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004292:	bf00      	nop
 8004294:	51eb851f 	.word	0x51eb851f

08004298 <__libc_init_array>:
 8004298:	b570      	push	{r4, r5, r6, lr}
 800429a:	4d0d      	ldr	r5, [pc, #52]	; (80042d0 <__libc_init_array+0x38>)
 800429c:	4c0d      	ldr	r4, [pc, #52]	; (80042d4 <__libc_init_array+0x3c>)
 800429e:	1b64      	subs	r4, r4, r5
 80042a0:	10a4      	asrs	r4, r4, #2
 80042a2:	2600      	movs	r6, #0
 80042a4:	42a6      	cmp	r6, r4
 80042a6:	d109      	bne.n	80042bc <__libc_init_array+0x24>
 80042a8:	4d0b      	ldr	r5, [pc, #44]	; (80042d8 <__libc_init_array+0x40>)
 80042aa:	4c0c      	ldr	r4, [pc, #48]	; (80042dc <__libc_init_array+0x44>)
 80042ac:	f000 f820 	bl	80042f0 <_init>
 80042b0:	1b64      	subs	r4, r4, r5
 80042b2:	10a4      	asrs	r4, r4, #2
 80042b4:	2600      	movs	r6, #0
 80042b6:	42a6      	cmp	r6, r4
 80042b8:	d105      	bne.n	80042c6 <__libc_init_array+0x2e>
 80042ba:	bd70      	pop	{r4, r5, r6, pc}
 80042bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80042c0:	4798      	blx	r3
 80042c2:	3601      	adds	r6, #1
 80042c4:	e7ee      	b.n	80042a4 <__libc_init_array+0xc>
 80042c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80042ca:	4798      	blx	r3
 80042cc:	3601      	adds	r6, #1
 80042ce:	e7f2      	b.n	80042b6 <__libc_init_array+0x1e>
 80042d0:	08004328 	.word	0x08004328
 80042d4:	08004328 	.word	0x08004328
 80042d8:	08004328 	.word	0x08004328
 80042dc:	0800432c 	.word	0x0800432c

080042e0 <memset>:
 80042e0:	4402      	add	r2, r0
 80042e2:	4603      	mov	r3, r0
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d100      	bne.n	80042ea <memset+0xa>
 80042e8:	4770      	bx	lr
 80042ea:	f803 1b01 	strb.w	r1, [r3], #1
 80042ee:	e7f9      	b.n	80042e4 <memset+0x4>

080042f0 <_init>:
 80042f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042f2:	bf00      	nop
 80042f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042f6:	bc08      	pop	{r3}
 80042f8:	469e      	mov	lr, r3
 80042fa:	4770      	bx	lr

080042fc <_fini>:
 80042fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042fe:	bf00      	nop
 8004300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004302:	bc08      	pop	{r3}
 8004304:	469e      	mov	lr, r3
 8004306:	4770      	bx	lr

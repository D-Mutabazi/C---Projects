
PV System Efficiency Monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d84  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08008f28  08008f28  00018f28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009078  08009078  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  08009078  08009078  00019078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009080  08009080  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009080  08009080  00019080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009084  08009084  00019084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08009088  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  200000a8  0800912c  000200a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  0800912c  00020398  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011daf  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002530  00000000  00000000  00031e83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc8  00000000  00000000  000343b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee0  00000000  00000000  00035380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018fb1  00000000  00000000  00036260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012b51  00000000  00000000  0004f211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a13fa  00000000  00000000  00061d62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010315c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b08  00000000  00000000  001031ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a8 	.word	0x200000a8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008f0c 	.word	0x08008f0c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000ac 	.word	0x200000ac
 80001dc:	08008f0c 	.word	0x08008f0c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000eac:	b5b0      	push	{r4, r5, r7, lr}
 8000eae:	b08a      	sub	sp, #40	; 0x28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
 8000eb8:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000eba:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000ebe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8000ec2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000ec6:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000eca:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000ecc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000ece:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000edc:	f107 0310 	add.w	r3, r7, #16
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f000 f80e 	bl	8000f02 <Lcd_init>

	return lcd;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	461d      	mov	r5, r3
 8000eea:	f107 0410 	add.w	r4, r7, #16
 8000eee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ef0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ef2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ef6:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000efa:	68f8      	ldr	r0, [r7, #12]
 8000efc:	3728      	adds	r7, #40	; 0x28
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bdb0      	pop	{r4, r5, r7, pc}

08000f02 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	7d9b      	ldrb	r3, [r3, #22]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d10c      	bne.n	8000f2c <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8000f12:	2133      	movs	r1, #51	; 0x33
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f000 f863 	bl	8000fe0 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000f1a:	2132      	movs	r1, #50	; 0x32
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f000 f85f 	bl	8000fe0 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000f22:	2128      	movs	r1, #40	; 0x28
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f000 f85b 	bl	8000fe0 <lcd_write_command>
 8000f2a:	e003      	b.n	8000f34 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000f2c:	2138      	movs	r1, #56	; 0x38
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f000 f856 	bl	8000fe0 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000f34:	2101      	movs	r1, #1
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f000 f852 	bl	8000fe0 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000f3c:	210c      	movs	r1, #12
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f000 f84e 	bl	8000fe0 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000f44:	2106      	movs	r1, #6
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f000 f84a 	bl	8000fe0 <lcd_write_command>
}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000f54:	b590      	push	{r4, r7, lr}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]

	for(uint8_t i = 0; i < strlen(string); i++)
 8000f5e:	2300      	movs	r3, #0
 8000f60:	73fb      	strb	r3, [r7, #15]
 8000f62:	e00a      	b.n	8000f7a <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000f64:	7bfb      	ldrb	r3, [r7, #15]
 8000f66:	683a      	ldr	r2, [r7, #0]
 8000f68:	4413      	add	r3, r2
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f000 f864 	bl	800103c <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	3301      	adds	r3, #1
 8000f78:	73fb      	strb	r3, [r7, #15]
 8000f7a:	7bfc      	ldrb	r4, [r7, #15]
 8000f7c:	6838      	ldr	r0, [r7, #0]
 8000f7e:	f7ff f92f 	bl	80001e0 <strlen>
 8000f82:	4603      	mov	r3, r0
 8000f84:	429c      	cmp	r4, r3
 8000f86:	d3ed      	bcc.n	8000f64 <Lcd_string+0x10>
	}
}
 8000f88:	bf00      	nop
 8000f8a:	bf00      	nop
 8000f8c:	3714      	adds	r7, #20
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd90      	pop	{r4, r7, pc}
	...

08000f94 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	70fb      	strb	r3, [r7, #3]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000fa4:	78fb      	ldrb	r3, [r7, #3]
 8000fa6:	4a07      	ldr	r2, [pc, #28]	; (8000fc4 <Lcd_cursor+0x30>)
 8000fa8:	5cd2      	ldrb	r2, [r2, r3]
 8000faa:	78bb      	ldrb	r3, [r7, #2]
 8000fac:	4413      	add	r3, r2
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	3b80      	subs	r3, #128	; 0x80
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f000 f812 	bl	8000fe0 <lcd_write_command>
	#endif
}
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	08008ff8 	.word	0x08008ff8

08000fc8 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f000 f804 	bl	8000fe0 <lcd_write_command>
}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	460b      	mov	r3, r1
 8000fea:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6898      	ldr	r0, [r3, #8]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	899b      	ldrh	r3, [r3, #12]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	f003 fc02 	bl	8004800 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	7d9b      	ldrb	r3, [r3, #22]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d111      	bne.n	8001028 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8001004:	78fb      	ldrb	r3, [r7, #3]
 8001006:	091b      	lsrs	r3, r3, #4
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2204      	movs	r2, #4
 800100c:	4619      	mov	r1, r3
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f000 f842 	bl	8001098 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8001014:	78fb      	ldrb	r3, [r7, #3]
 8001016:	f003 030f 	and.w	r3, r3, #15
 800101a:	b2db      	uxtb	r3, r3
 800101c:	2204      	movs	r2, #4
 800101e:	4619      	mov	r1, r3
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f000 f839 	bl	8001098 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8001026:	e005      	b.n	8001034 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8001028:	78fb      	ldrb	r3, [r7, #3]
 800102a:	2208      	movs	r2, #8
 800102c:	4619      	mov	r1, r3
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f000 f832 	bl	8001098 <lcd_write>
}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <lcd_write_data>:
/**
 * Write a byte to the data register
 */

void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6898      	ldr	r0, [r3, #8]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	899b      	ldrh	r3, [r3, #12]
 8001050:	2201      	movs	r2, #1
 8001052:	4619      	mov	r1, r3
 8001054:	f003 fbd4 	bl	8004800 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	7d9b      	ldrb	r3, [r3, #22]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d111      	bne.n	8001084 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8001060:	78fb      	ldrb	r3, [r7, #3]
 8001062:	091b      	lsrs	r3, r3, #4
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2204      	movs	r2, #4
 8001068:	4619      	mov	r1, r3
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f000 f814 	bl	8001098 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8001070:	78fb      	ldrb	r3, [r7, #3]
 8001072:	f003 030f 	and.w	r3, r3, #15
 8001076:	b2db      	uxtb	r3, r3
 8001078:	2204      	movs	r2, #4
 800107a:	4619      	mov	r1, r3
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f000 f80b 	bl	8001098 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8001082:	e005      	b.n	8001090 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8001084:	78fb      	ldrb	r3, [r7, #3]
 8001086:	2208      	movs	r2, #8
 8001088:	4619      	mov	r1, r3
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f000 f804 	bl	8001098 <lcd_write>
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <lcd_write>:
 */

uint8_t set_enable = 0;
uint32_t previous_time = 0;
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	460b      	mov	r3, r1
 80010a2:	70fb      	strb	r3, [r7, #3]
 80010a4:	4613      	mov	r3, r2
 80010a6:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 80010a8:	2300      	movs	r3, #0
 80010aa:	73fb      	strb	r3, [r7, #15]
 80010ac:	e019      	b.n	80010e2 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	4413      	add	r3, r2
 80010b8:	6818      	ldr	r0, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	685a      	ldr	r2, [r3, #4]
 80010be:	7bfb      	ldrb	r3, [r7, #15]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	4413      	add	r3, r2
 80010c4:	8819      	ldrh	r1, [r3, #0]
 80010c6:	78fa      	ldrb	r2, [r7, #3]
 80010c8:	7bfb      	ldrb	r3, [r7, #15]
 80010ca:	fa42 f303 	asr.w	r3, r2, r3
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	461a      	mov	r2, r3
 80010d8:	f003 fb92 	bl	8004800 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
 80010de:	3301      	adds	r3, #1
 80010e0:	73fb      	strb	r3, [r7, #15]
 80010e2:	7bfa      	ldrb	r2, [r7, #15]
 80010e4:	78bb      	ldrb	r3, [r7, #2]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d3e1      	bcc.n	80010ae <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6918      	ldr	r0, [r3, #16]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	8a9b      	ldrh	r3, [r3, #20]
 80010f2:	2201      	movs	r2, #1
 80010f4:	4619      	mov	r1, r3
 80010f6:	f003 fb83 	bl	8004800 <HAL_GPIO_WritePin>
	DELAY(1);
 80010fa:	2001      	movs	r0, #1
 80010fc:	f002 fc2a 	bl	8003954 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6918      	ldr	r0, [r3, #16]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	8a9b      	ldrh	r3, [r3, #20]
 8001108:	2200      	movs	r2, #0
 800110a:	4619      	mov	r1, r3
 800110c:	f003 fb78 	bl	8004800 <HAL_GPIO_WritePin>
//        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); // E = 0
//        set_enable = 1;
//        previous_time = HAL_GetTick() ;
//    }

}
 8001110:	bf00      	nop
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <HAL_UART_RxCpltCallback>:
void change_between_dispplay_modes() ;
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]

	g_system_config[g_byte_count] = char_rcvd[0] ;
 8001120:	4b14      	ldr	r3, [pc, #80]	; (8001174 <HAL_UART_RxCpltCallback+0x5c>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	461a      	mov	r2, r3
 8001126:	4b14      	ldr	r3, [pc, #80]	; (8001178 <HAL_UART_RxCpltCallback+0x60>)
 8001128:	7819      	ldrb	r1, [r3, #0]
 800112a:	4b14      	ldr	r3, [pc, #80]	; (800117c <HAL_UART_RxCpltCallback+0x64>)
 800112c:	5499      	strb	r1, [r3, r2]
	g_byte_count++ ;
 800112e:	4b11      	ldr	r3, [pc, #68]	; (8001174 <HAL_UART_RxCpltCallback+0x5c>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	3301      	adds	r3, #1
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <HAL_UART_RxCpltCallback+0x5c>)
 8001138:	701a      	strb	r2, [r3, #0]

	if(char_rcvd[0] == '\n'){
 800113a:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <HAL_UART_RxCpltCallback+0x60>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b0a      	cmp	r3, #10
 8001140:	d10f      	bne.n	8001162 <HAL_UART_RxCpltCallback+0x4a>
		if(g_byte_count == 7){
 8001142:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <HAL_UART_RxCpltCallback+0x5c>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b07      	cmp	r3, #7
 8001148:	d103      	bne.n	8001152 <HAL_UART_RxCpltCallback+0x3a>
			g_config_command_rcvd = 1;
 800114a:	4b0d      	ldr	r3, [pc, #52]	; (8001180 <HAL_UART_RxCpltCallback+0x68>)
 800114c:	2201      	movs	r2, #1
 800114e:	701a      	strb	r2, [r3, #0]
 8001150:	e004      	b.n	800115c <HAL_UART_RxCpltCallback+0x44>
			// check for SP or EN command recvd
		}
		else{
			// remove for next DEMO
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)"Invalid command sent\n", 21);
 8001152:	2215      	movs	r2, #21
 8001154:	490b      	ldr	r1, [pc, #44]	; (8001184 <HAL_UART_RxCpltCallback+0x6c>)
 8001156:	480c      	ldr	r0, [pc, #48]	; (8001188 <HAL_UART_RxCpltCallback+0x70>)
 8001158:	f005 fb99 	bl	800688e <HAL_UART_Transmit_IT>
			// DO NOTHING: NO STATE UPDATE IN THE CASE OF COMMAND NOT IN THE APPROPRIATE ORDER
		}

		g_byte_count =0 ;
 800115c:	4b05      	ldr	r3, [pc, #20]	; (8001174 <HAL_UART_RxCpltCallback+0x5c>)
 800115e:	2200      	movs	r2, #0
 8001160:	701a      	strb	r2, [r3, #0]
	}

	//re-prime receiver
	HAL_UART_Receive_IT(&huart2, (uint8_t*)char_rcvd, 1) ;
 8001162:	2201      	movs	r2, #1
 8001164:	4904      	ldr	r1, [pc, #16]	; (8001178 <HAL_UART_RxCpltCallback+0x60>)
 8001166:	4808      	ldr	r0, [pc, #32]	; (8001188 <HAL_UART_RxCpltCallback+0x70>)
 8001168:	f005 fbd6 	bl	8006918 <HAL_UART_Receive_IT>

}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	200002c5 	.word	0x200002c5
 8001178:	20000010 	.word	0x20000010
 800117c:	200002b4 	.word	0x200002b4
 8001180:	200002c6 	.word	0x200002c6
 8001184:	08008f28 	.word	0x08008f28
 8001188:	200001bc 	.word	0x200001bc
 800118c:	00000000 	.word	0x00000000

08001190 <get_adc_value_and_celsius_temperature>:
/**
 * function starts the adc, waits for conversion
 * Then converts value to degrees
 */

uint16_t get_adc_value_and_celsius_temperature(){
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0

	//select adc channel 0
	ADC_Select_CH0() ;
 8001194:	f000 faf0 	bl	8001778 <ADC_Select_CH0>
	HAL_ADC_Start(&hadc1) ;
 8001198:	4825      	ldr	r0, [pc, #148]	; (8001230 <get_adc_value_and_celsius_temperature+0xa0>)
 800119a:	f002 fc43 	bl	8003a24 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800119e:	f04f 31ff 	mov.w	r1, #4294967295
 80011a2:	4823      	ldr	r0, [pc, #140]	; (8001230 <get_adc_value_and_celsius_temperature+0xa0>)
 80011a4:	f002 fd25 	bl	8003bf2 <HAL_ADC_PollForConversion>
	g_raw  = HAL_ADC_GetValue(&hadc1) ;
 80011a8:	4821      	ldr	r0, [pc, #132]	; (8001230 <get_adc_value_and_celsius_temperature+0xa0>)
 80011aa:	f002 fdad 	bl	8003d08 <HAL_ADC_GetValue>
 80011ae:	4603      	mov	r3, r0
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	4b20      	ldr	r3, [pc, #128]	; (8001234 <get_adc_value_and_celsius_temperature+0xa4>)
 80011b4:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1) ;  //stop adc
 80011b6:	481e      	ldr	r0, [pc, #120]	; (8001230 <get_adc_value_and_celsius_temperature+0xa0>)
 80011b8:	f002 fce8 	bl	8003b8c <HAL_ADC_Stop>

	g_vin = g_raw*(3.3/4095.0) ; // input voltage
 80011bc:	4b1d      	ldr	r3, [pc, #116]	; (8001234 <get_adc_value_and_celsius_temperature+0xa4>)
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff f9b7 	bl	8000534 <__aeabi_i2d>
 80011c6:	a316      	add	r3, pc, #88	; (adr r3, 8001220 <get_adc_value_and_celsius_temperature+0x90>)
 80011c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011cc:	f7ff fa1c 	bl	8000608 <__aeabi_dmul>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	4918      	ldr	r1, [pc, #96]	; (8001238 <get_adc_value_and_celsius_temperature+0xa8>)
 80011d6:	e9c1 2300 	strd	r2, r3, [r1]
	g_temp = g_vin*100 - 273.15 ; // cast to 16 bit uint
 80011da:	4b17      	ldr	r3, [pc, #92]	; (8001238 <get_adc_value_and_celsius_temperature+0xa8>)
 80011dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011e0:	f04f 0200 	mov.w	r2, #0
 80011e4:	4b15      	ldr	r3, [pc, #84]	; (800123c <get_adc_value_and_celsius_temperature+0xac>)
 80011e6:	f7ff fa0f 	bl	8000608 <__aeabi_dmul>
 80011ea:	4602      	mov	r2, r0
 80011ec:	460b      	mov	r3, r1
 80011ee:	4610      	mov	r0, r2
 80011f0:	4619      	mov	r1, r3
 80011f2:	a30d      	add	r3, pc, #52	; (adr r3, 8001228 <get_adc_value_and_celsius_temperature+0x98>)
 80011f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f8:	f7ff f84e 	bl	8000298 <__aeabi_dsub>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	490f      	ldr	r1, [pc, #60]	; (8001240 <get_adc_value_and_celsius_temperature+0xb0>)
 8001202:	e9c1 2300 	strd	r2, r3, [r1]

	return g_temp ;
 8001206:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <get_adc_value_and_celsius_temperature+0xb0>)
 8001208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120c:	4610      	mov	r0, r2
 800120e:	4619      	mov	r1, r3
 8001210:	f7ff fcaa 	bl	8000b68 <__aeabi_d2uiz>
 8001214:	4603      	mov	r3, r0
 8001216:	b29b      	uxth	r3, r3
}
 8001218:	4618      	mov	r0, r3
 800121a:	bd80      	pop	{r7, pc}
 800121c:	f3af 8000 	nop.w
 8001220:	e734d9b4 	.word	0xe734d9b4
 8001224:	3f4a680c 	.word	0x3f4a680c
 8001228:	66666666 	.word	0x66666666
 800122c:	40711266 	.word	0x40711266
 8001230:	200000c4 	.word	0x200000c4
 8001234:	20000200 	.word	0x20000200
 8001238:	20000210 	.word	0x20000210
 800123c:	40590000 	.word	0x40590000
 8001240:	20000208 	.word	0x20000208

08001244 <store_temp_in_string>:

void store_temp_in_string(uint16_t temperature, char temp[], int len){
 8001244:	b480      	push	{r7}
 8001246:	b087      	sub	sp, #28
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
 8001250:	81fb      	strh	r3, [r7, #14]

	for(int i= 0 ; i < len ; i++){
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
 8001256:	e04e      	b.n	80012f6 <store_temp_in_string+0xb2>
		switch(i){
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	2b02      	cmp	r3, #2
 800125c:	d02f      	beq.n	80012be <store_temp_in_string+0x7a>
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	2b02      	cmp	r3, #2
 8001262:	dc44      	bgt.n	80012ee <store_temp_in_string+0xaa>
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <store_temp_in_string+0x2e>
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d00c      	beq.n	800128a <store_temp_in_string+0x46>
			case 2:
				temp[2] = (temperature - ((temperature/10)*10) ) + 48 ;

				break;
			default:
				break;
 8001270:	e03d      	b.n	80012ee <store_temp_in_string+0xaa>
				temp[0]  = (temperature/100) + 48 ;
 8001272:	89fb      	ldrh	r3, [r7, #14]
 8001274:	4a25      	ldr	r2, [pc, #148]	; (800130c <store_temp_in_string+0xc8>)
 8001276:	fba2 2303 	umull	r2, r3, r2, r3
 800127a:	095b      	lsrs	r3, r3, #5
 800127c:	b29b      	uxth	r3, r3
 800127e:	b2db      	uxtb	r3, r3
 8001280:	3330      	adds	r3, #48	; 0x30
 8001282:	b2da      	uxtb	r2, r3
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	701a      	strb	r2, [r3, #0]
				break;
 8001288:	e032      	b.n	80012f0 <store_temp_in_string+0xac>
				temp[1] = (temperature - (temperature/100)*100 )/10 + 48 ;
 800128a:	89fa      	ldrh	r2, [r7, #14]
 800128c:	89fb      	ldrh	r3, [r7, #14]
 800128e:	491f      	ldr	r1, [pc, #124]	; (800130c <store_temp_in_string+0xc8>)
 8001290:	fba1 1303 	umull	r1, r3, r1, r3
 8001294:	095b      	lsrs	r3, r3, #5
 8001296:	b29b      	uxth	r3, r3
 8001298:	4619      	mov	r1, r3
 800129a:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800129e:	fb01 f303 	mul.w	r3, r1, r3
 80012a2:	4413      	add	r3, r2
 80012a4:	4a1a      	ldr	r2, [pc, #104]	; (8001310 <store_temp_in_string+0xcc>)
 80012a6:	fb82 1203 	smull	r1, r2, r2, r3
 80012aa:	1092      	asrs	r2, r2, #2
 80012ac:	17db      	asrs	r3, r3, #31
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	3301      	adds	r3, #1
 80012b6:	3230      	adds	r2, #48	; 0x30
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	701a      	strb	r2, [r3, #0]
				break;
 80012bc:	e018      	b.n	80012f0 <store_temp_in_string+0xac>
				temp[2] = (temperature - ((temperature/10)*10) ) + 48 ;
 80012be:	89fb      	ldrh	r3, [r7, #14]
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	89fb      	ldrh	r3, [r7, #14]
 80012c4:	4913      	ldr	r1, [pc, #76]	; (8001314 <store_temp_in_string+0xd0>)
 80012c6:	fba1 1303 	umull	r1, r3, r1, r3
 80012ca:	08db      	lsrs	r3, r3, #3
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	4619      	mov	r1, r3
 80012d2:	0149      	lsls	r1, r1, #5
 80012d4:	1ac9      	subs	r1, r1, r3
 80012d6:	0089      	lsls	r1, r1, #2
 80012d8:	1acb      	subs	r3, r1, r3
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	4413      	add	r3, r2
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	3302      	adds	r3, #2
 80012e6:	3230      	adds	r2, #48	; 0x30
 80012e8:	b2d2      	uxtb	r2, r2
 80012ea:	701a      	strb	r2, [r3, #0]
				break;
 80012ec:	e000      	b.n	80012f0 <store_temp_in_string+0xac>
				break;
 80012ee:	bf00      	nop
	for(int i= 0 ; i < len ; i++){
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	3301      	adds	r3, #1
 80012f4:	617b      	str	r3, [r7, #20]
 80012f6:	697a      	ldr	r2, [r7, #20]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	dbac      	blt.n	8001258 <store_temp_in_string+0x14>

		}
	}
}
 80012fe:	bf00      	nop
 8001300:	bf00      	nop
 8001302:	371c      	adds	r7, #28
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	51eb851f 	.word	0x51eb851f
 8001310:	66666667 	.word	0x66666667
 8001314:	cccccccd 	.word	0xcccccccd

08001318 <system_state_update>:
/**
 * This function will update the system state based on the received UART command
 * or top button press
 * The system is not to be updates when performing a RTC update
 */
void system_state_update(){
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0

	//RTC menu enter/exit
	g_clock_menu_set_and_parameter_update();
 800131c:	f001 fb5a 	bl	80029d4 <g_clock_menu_set_and_parameter_update>

	if(g_update_RTC == 0){
 8001320:	4b19      	ldr	r3, [pc, #100]	; (8001388 <system_state_update+0x70>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d12d      	bne.n	8001384 <system_state_update+0x6c>
		//CHECK FOR TYPE OF MEASUREMENT command rcvd via UART
		if( g_config_command_rcvd == 1){
 8001328:	4b18      	ldr	r3, [pc, #96]	; (800138c <system_state_update+0x74>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d125      	bne.n	800137c <system_state_update+0x64>
			g_config_command_rcvd = 0;
 8001330:	4b16      	ldr	r3, [pc, #88]	; (800138c <system_state_update+0x74>)
 8001332:	2200      	movs	r2, #0
 8001334:	701a      	strb	r2, [r3, #0]


			if( g_system_config[2]=='E' && g_system_config[3] == 'N'){
 8001336:	4b16      	ldr	r3, [pc, #88]	; (8001390 <system_state_update+0x78>)
 8001338:	789b      	ldrb	r3, [r3, #2]
 800133a:	2b45      	cmp	r3, #69	; 0x45
 800133c:	d10a      	bne.n	8001354 <system_state_update+0x3c>
 800133e:	4b14      	ldr	r3, [pc, #80]	; (8001390 <system_state_update+0x78>)
 8001340:	78db      	ldrb	r3, [r3, #3]
 8001342:	2b4e      	cmp	r3, #78	; 0x4e
 8001344:	d106      	bne.n	8001354 <system_state_update+0x3c>
				// EN measure comand
				g_EN_config_command_rcvd =1 ;
 8001346:	4b13      	ldr	r3, [pc, #76]	; (8001394 <system_state_update+0x7c>)
 8001348:	2201      	movs	r2, #1
 800134a:	701a      	strb	r2, [r3, #0]
				//stop SP measure
				g_SP_config_command_rcvd =0 ;
 800134c:	4b12      	ldr	r3, [pc, #72]	; (8001398 <system_state_update+0x80>)
 800134e:	2200      	movs	r2, #0
 8001350:	701a      	strb	r2, [r3, #0]
 8001352:	e013      	b.n	800137c <system_state_update+0x64>

			}

			else if(g_system_config[2]=='S' && g_system_config[3] == 'P'){
 8001354:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <system_state_update+0x78>)
 8001356:	789b      	ldrb	r3, [r3, #2]
 8001358:	2b53      	cmp	r3, #83	; 0x53
 800135a:	d10a      	bne.n	8001372 <system_state_update+0x5a>
 800135c:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <system_state_update+0x78>)
 800135e:	78db      	ldrb	r3, [r3, #3]
 8001360:	2b50      	cmp	r3, #80	; 0x50
 8001362:	d106      	bne.n	8001372 <system_state_update+0x5a>
				// SP command
				g_SP_config_command_rcvd =1 ;
 8001364:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <system_state_update+0x80>)
 8001366:	2201      	movs	r2, #1
 8001368:	701a      	strb	r2, [r3, #0]
				//stop EN command
				g_EN_config_command_rcvd =0;
 800136a:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <system_state_update+0x7c>)
 800136c:	2200      	movs	r2, #0
 800136e:	701a      	strb	r2, [r3, #0]
 8001370:	e004      	b.n	800137c <system_state_update+0x64>
			}

			//extend to CA

			else{
				HAL_UART_Transmit_IT(&huart2, (uint8_t*)"Invalid Command\n", 16);
 8001372:	2210      	movs	r2, #16
 8001374:	4909      	ldr	r1, [pc, #36]	; (800139c <system_state_update+0x84>)
 8001376:	480a      	ldr	r0, [pc, #40]	; (80013a0 <system_state_update+0x88>)
 8001378:	f005 fa89 	bl	800688e <HAL_UART_Transmit_IT>
			}
		}

		//perform en measurements
		en_measurement_update() ;
 800137c:	f000 f812 	bl	80013a4 <en_measurement_update>
		//perform sp measurement
		sp_measurement_update() ;
 8001380:	f000 f89a 	bl	80014b8 <sp_measurement_update>
	}
	else{
		//dont update any states while in the RTC menu
	}

}
 8001384:	bf00      	nop
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000334 	.word	0x20000334
 800138c:	200002c6 	.word	0x200002c6
 8001390:	200002b4 	.word	0x200002b4
 8001394:	200002d1 	.word	0x200002d1
 8001398:	200002d5 	.word	0x200002d5
 800139c:	08008f40 	.word	0x08008f40
 80013a0:	200001bc 	.word	0x200001bc

080013a4 <en_measurement_update>:

/**
 * This function start/stops the environment measurements
 * This is done by both the UART and push button
 */
void en_measurement_update(){
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
	// Environment Measure - And not measuring SP - modularise
	// EN - update via push button
	if(g_top_button_pressed  == 1 && g_EN_config_command_rcvd ==0 && g_SP_config_command_rcvd ==0 && (g_SP_measure == 0 || g_SP_measure ==2)){
 80013a8:	4b3d      	ldr	r3, [pc, #244]	; (80014a0 <en_measurement_update+0xfc>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d120      	bne.n	80013f2 <en_measurement_update+0x4e>
 80013b0:	4b3c      	ldr	r3, [pc, #240]	; (80014a4 <en_measurement_update+0x100>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d11c      	bne.n	80013f2 <en_measurement_update+0x4e>
 80013b8:	4b3b      	ldr	r3, [pc, #236]	; (80014a8 <en_measurement_update+0x104>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d118      	bne.n	80013f2 <en_measurement_update+0x4e>
 80013c0:	4b3a      	ldr	r3, [pc, #232]	; (80014ac <en_measurement_update+0x108>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d003      	beq.n	80013d0 <en_measurement_update+0x2c>
 80013c8:	4b38      	ldr	r3, [pc, #224]	; (80014ac <en_measurement_update+0x108>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d110      	bne.n	80013f2 <en_measurement_update+0x4e>
		g_top_button_pressed = 0;
 80013d0:	4b33      	ldr	r3, [pc, #204]	; (80014a0 <en_measurement_update+0xfc>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	701a      	strb	r2, [r3, #0]

		g_EN_measure++  ;
 80013d6:	4b36      	ldr	r3, [pc, #216]	; (80014b0 <en_measurement_update+0x10c>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	3301      	adds	r3, #1
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	4b34      	ldr	r3, [pc, #208]	; (80014b0 <en_measurement_update+0x10c>)
 80013e0:	701a      	strb	r2, [r3, #0]

		if(g_EN_measure >2 ){
 80013e2:	4b33      	ldr	r3, [pc, #204]	; (80014b0 <en_measurement_update+0x10c>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d954      	bls.n	8001494 <en_measurement_update+0xf0>
			g_EN_measure = 1;
 80013ea:	4b31      	ldr	r3, [pc, #196]	; (80014b0 <en_measurement_update+0x10c>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	701a      	strb	r2, [r3, #0]
		if(g_EN_measure >2 ){
 80013f0:	e050      	b.n	8001494 <en_measurement_update+0xf0>
		}
	}
	//EN update via UART
	else if(g_top_button_pressed ==0  && g_EN_config_command_rcvd == 1 && g_SP_config_command_rcvd ==0  && (g_SP_measure == 0 || g_SP_measure ==2)){
 80013f2:	4b2b      	ldr	r3, [pc, #172]	; (80014a0 <en_measurement_update+0xfc>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d14c      	bne.n	8001494 <en_measurement_update+0xf0>
 80013fa:	4b2a      	ldr	r3, [pc, #168]	; (80014a4 <en_measurement_update+0x100>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d148      	bne.n	8001494 <en_measurement_update+0xf0>
 8001402:	4b29      	ldr	r3, [pc, #164]	; (80014a8 <en_measurement_update+0x104>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d144      	bne.n	8001494 <en_measurement_update+0xf0>
 800140a:	4b28      	ldr	r3, [pc, #160]	; (80014ac <en_measurement_update+0x108>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <en_measurement_update+0x76>
 8001412:	4b26      	ldr	r3, [pc, #152]	; (80014ac <en_measurement_update+0x108>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b02      	cmp	r3, #2
 8001418:	d13c      	bne.n	8001494 <en_measurement_update+0xf0>
		g_EN_config_command_rcvd = 0;
 800141a:	4b22      	ldr	r3, [pc, #136]	; (80014a4 <en_measurement_update+0x100>)
 800141c:	2200      	movs	r2, #0
 800141e:	701a      	strb	r2, [r3, #0]

		//check that the correct UART message recvd
		if(g_system_config[0]== '&' && g_system_config[1 ]== '_' && g_system_config[2]=='E' && g_system_config[3] == 'N' && g_system_config[4] =='_'&& g_system_config[5] =='*' &&  g_system_config[6] =='\n' ){
 8001420:	4b24      	ldr	r3, [pc, #144]	; (80014b4 <en_measurement_update+0x110>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b26      	cmp	r3, #38	; 0x26
 8001426:	d12f      	bne.n	8001488 <en_measurement_update+0xe4>
 8001428:	4b22      	ldr	r3, [pc, #136]	; (80014b4 <en_measurement_update+0x110>)
 800142a:	785b      	ldrb	r3, [r3, #1]
 800142c:	2b5f      	cmp	r3, #95	; 0x5f
 800142e:	d12b      	bne.n	8001488 <en_measurement_update+0xe4>
 8001430:	4b20      	ldr	r3, [pc, #128]	; (80014b4 <en_measurement_update+0x110>)
 8001432:	789b      	ldrb	r3, [r3, #2]
 8001434:	2b45      	cmp	r3, #69	; 0x45
 8001436:	d127      	bne.n	8001488 <en_measurement_update+0xe4>
 8001438:	4b1e      	ldr	r3, [pc, #120]	; (80014b4 <en_measurement_update+0x110>)
 800143a:	78db      	ldrb	r3, [r3, #3]
 800143c:	2b4e      	cmp	r3, #78	; 0x4e
 800143e:	d123      	bne.n	8001488 <en_measurement_update+0xe4>
 8001440:	4b1c      	ldr	r3, [pc, #112]	; (80014b4 <en_measurement_update+0x110>)
 8001442:	791b      	ldrb	r3, [r3, #4]
 8001444:	2b5f      	cmp	r3, #95	; 0x5f
 8001446:	d11f      	bne.n	8001488 <en_measurement_update+0xe4>
 8001448:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <en_measurement_update+0x110>)
 800144a:	795b      	ldrb	r3, [r3, #5]
 800144c:	2b2a      	cmp	r3, #42	; 0x2a
 800144e:	d11b      	bne.n	8001488 <en_measurement_update+0xe4>
 8001450:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <en_measurement_update+0x110>)
 8001452:	799b      	ldrb	r3, [r3, #6]
 8001454:	2b0a      	cmp	r3, #10
 8001456:	d117      	bne.n	8001488 <en_measurement_update+0xe4>
			if(g_EN_measure == 0){
 8001458:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <en_measurement_update+0x10c>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d103      	bne.n	8001468 <en_measurement_update+0xc4>
				g_EN_measure = 1;
 8001460:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <en_measurement_update+0x10c>)
 8001462:	2201      	movs	r2, #1
 8001464:	701a      	strb	r2, [r3, #0]
			if(g_EN_measure == 0){
 8001466:	e014      	b.n	8001492 <en_measurement_update+0xee>
			}
			else if(g_EN_measure == 1){
 8001468:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <en_measurement_update+0x10c>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d103      	bne.n	8001478 <en_measurement_update+0xd4>
				g_EN_measure = 2;
 8001470:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <en_measurement_update+0x10c>)
 8001472:	2202      	movs	r2, #2
 8001474:	701a      	strb	r2, [r3, #0]
			if(g_EN_measure == 0){
 8001476:	e00c      	b.n	8001492 <en_measurement_update+0xee>

			}
			else{
				if(g_EN_measure ==2){
 8001478:	4b0d      	ldr	r3, [pc, #52]	; (80014b0 <en_measurement_update+0x10c>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b02      	cmp	r3, #2
 800147e:	d108      	bne.n	8001492 <en_measurement_update+0xee>
					g_EN_measure = 1;
 8001480:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <en_measurement_update+0x10c>)
 8001482:	2201      	movs	r2, #1
 8001484:	701a      	strb	r2, [r3, #0]
			if(g_EN_measure == 0){
 8001486:	e004      	b.n	8001492 <en_measurement_update+0xee>
				}
			}
		}
		//else block to not update g_EN_measure if incorrent command revcd
		else{
			g_EN_measure =  g_EN_measure ;
 8001488:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <en_measurement_update+0x10c>)
 800148a:	781a      	ldrb	r2, [r3, #0]
 800148c:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <en_measurement_update+0x10c>)
 800148e:	701a      	strb	r2, [r3, #0]
		}
	}

}
 8001490:	e000      	b.n	8001494 <en_measurement_update+0xf0>
			if(g_EN_measure == 0){
 8001492:	bf00      	nop
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	20000372 	.word	0x20000372
 80014a4:	200002d1 	.word	0x200002d1
 80014a8:	200002d5 	.word	0x200002d5
 80014ac:	200002d2 	.word	0x200002d2
 80014b0:	200002c7 	.word	0x200002c7
 80014b4:	200002b4 	.word	0x200002b4

080014b8 <sp_measurement_update>:

/**
 * This function start/stops the panel measurements
 * This is done by both the UART and push button
 */
void sp_measurement_update(){
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
	//SP Measure - update via bottom push button - modularise
	if(g_bottom_button_pressed  == 1  && g_EN_config_command_rcvd == 0 && g_SP_config_command_rcvd ==0  && (g_EN_measure == 0 || g_EN_measure ==2)){
 80014bc:	4b3e      	ldr	r3, [pc, #248]	; (80015b8 <sp_measurement_update+0x100>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d123      	bne.n	800150c <sp_measurement_update+0x54>
 80014c4:	4b3d      	ldr	r3, [pc, #244]	; (80015bc <sp_measurement_update+0x104>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d11f      	bne.n	800150c <sp_measurement_update+0x54>
 80014cc:	4b3c      	ldr	r3, [pc, #240]	; (80015c0 <sp_measurement_update+0x108>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d11b      	bne.n	800150c <sp_measurement_update+0x54>
 80014d4:	4b3b      	ldr	r3, [pc, #236]	; (80015c4 <sp_measurement_update+0x10c>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d003      	beq.n	80014e4 <sp_measurement_update+0x2c>
 80014dc:	4b39      	ldr	r3, [pc, #228]	; (80015c4 <sp_measurement_update+0x10c>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d113      	bne.n	800150c <sp_measurement_update+0x54>
		//clear lcd display after EN measurement
		Lcd_clear(&lcd); //to remove EN measure values
 80014e4:	4838      	ldr	r0, [pc, #224]	; (80015c8 <sp_measurement_update+0x110>)
 80014e6:	f7ff fd6f 	bl	8000fc8 <Lcd_clear>
		g_bottom_button_pressed = 0;
 80014ea:	4b33      	ldr	r3, [pc, #204]	; (80015b8 <sp_measurement_update+0x100>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	701a      	strb	r2, [r3, #0]

		g_SP_measure++  ;
 80014f0:	4b36      	ldr	r3, [pc, #216]	; (80015cc <sp_measurement_update+0x114>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	3301      	adds	r3, #1
 80014f6:	b2da      	uxtb	r2, r3
 80014f8:	4b34      	ldr	r3, [pc, #208]	; (80015cc <sp_measurement_update+0x114>)
 80014fa:	701a      	strb	r2, [r3, #0]

		if(g_SP_measure >2 ){
 80014fc:	4b33      	ldr	r3, [pc, #204]	; (80015cc <sp_measurement_update+0x114>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b02      	cmp	r3, #2
 8001502:	d957      	bls.n	80015b4 <sp_measurement_update+0xfc>
			g_SP_measure = 1;
 8001504:	4b31      	ldr	r3, [pc, #196]	; (80015cc <sp_measurement_update+0x114>)
 8001506:	2201      	movs	r2, #1
 8001508:	701a      	strb	r2, [r3, #0]
		if(g_SP_measure >2 ){
 800150a:	e053      	b.n	80015b4 <sp_measurement_update+0xfc>
		}
	}

	// SP update via uart
	else if(g_bottom_button_pressed ==0  && g_EN_config_command_rcvd == 0 && g_SP_config_command_rcvd ==1 && (g_EN_measure == 0 || g_EN_measure ==2)){
 800150c:	4b2a      	ldr	r3, [pc, #168]	; (80015b8 <sp_measurement_update+0x100>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d14f      	bne.n	80015b4 <sp_measurement_update+0xfc>
 8001514:	4b29      	ldr	r3, [pc, #164]	; (80015bc <sp_measurement_update+0x104>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d14b      	bne.n	80015b4 <sp_measurement_update+0xfc>
 800151c:	4b28      	ldr	r3, [pc, #160]	; (80015c0 <sp_measurement_update+0x108>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d147      	bne.n	80015b4 <sp_measurement_update+0xfc>
 8001524:	4b27      	ldr	r3, [pc, #156]	; (80015c4 <sp_measurement_update+0x10c>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d003      	beq.n	8001534 <sp_measurement_update+0x7c>
 800152c:	4b25      	ldr	r3, [pc, #148]	; (80015c4 <sp_measurement_update+0x10c>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b02      	cmp	r3, #2
 8001532:	d13f      	bne.n	80015b4 <sp_measurement_update+0xfc>

		//clear lcd display after EN measurement
		Lcd_clear(&lcd); //to remove EN measure values
 8001534:	4824      	ldr	r0, [pc, #144]	; (80015c8 <sp_measurement_update+0x110>)
 8001536:	f7ff fd47 	bl	8000fc8 <Lcd_clear>

		g_SP_config_command_rcvd = 0;
 800153a:	4b21      	ldr	r3, [pc, #132]	; (80015c0 <sp_measurement_update+0x108>)
 800153c:	2200      	movs	r2, #0
 800153e:	701a      	strb	r2, [r3, #0]

		//check that the correct UART message recvd
		if(g_system_config[0]== '&' && g_system_config[1 ]== '_' && g_system_config[2]=='S' && g_system_config[3] == 'P' &&g_system_config[4] =='_'&& g_system_config[5] =='*' &&  g_system_config[6] =='\n' ){
 8001540:	4b23      	ldr	r3, [pc, #140]	; (80015d0 <sp_measurement_update+0x118>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b26      	cmp	r3, #38	; 0x26
 8001546:	d12f      	bne.n	80015a8 <sp_measurement_update+0xf0>
 8001548:	4b21      	ldr	r3, [pc, #132]	; (80015d0 <sp_measurement_update+0x118>)
 800154a:	785b      	ldrb	r3, [r3, #1]
 800154c:	2b5f      	cmp	r3, #95	; 0x5f
 800154e:	d12b      	bne.n	80015a8 <sp_measurement_update+0xf0>
 8001550:	4b1f      	ldr	r3, [pc, #124]	; (80015d0 <sp_measurement_update+0x118>)
 8001552:	789b      	ldrb	r3, [r3, #2]
 8001554:	2b53      	cmp	r3, #83	; 0x53
 8001556:	d127      	bne.n	80015a8 <sp_measurement_update+0xf0>
 8001558:	4b1d      	ldr	r3, [pc, #116]	; (80015d0 <sp_measurement_update+0x118>)
 800155a:	78db      	ldrb	r3, [r3, #3]
 800155c:	2b50      	cmp	r3, #80	; 0x50
 800155e:	d123      	bne.n	80015a8 <sp_measurement_update+0xf0>
 8001560:	4b1b      	ldr	r3, [pc, #108]	; (80015d0 <sp_measurement_update+0x118>)
 8001562:	791b      	ldrb	r3, [r3, #4]
 8001564:	2b5f      	cmp	r3, #95	; 0x5f
 8001566:	d11f      	bne.n	80015a8 <sp_measurement_update+0xf0>
 8001568:	4b19      	ldr	r3, [pc, #100]	; (80015d0 <sp_measurement_update+0x118>)
 800156a:	795b      	ldrb	r3, [r3, #5]
 800156c:	2b2a      	cmp	r3, #42	; 0x2a
 800156e:	d11b      	bne.n	80015a8 <sp_measurement_update+0xf0>
 8001570:	4b17      	ldr	r3, [pc, #92]	; (80015d0 <sp_measurement_update+0x118>)
 8001572:	799b      	ldrb	r3, [r3, #6]
 8001574:	2b0a      	cmp	r3, #10
 8001576:	d117      	bne.n	80015a8 <sp_measurement_update+0xf0>
			if(g_SP_measure == 0){
 8001578:	4b14      	ldr	r3, [pc, #80]	; (80015cc <sp_measurement_update+0x114>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d103      	bne.n	8001588 <sp_measurement_update+0xd0>
				g_SP_measure = 1;
 8001580:	4b12      	ldr	r3, [pc, #72]	; (80015cc <sp_measurement_update+0x114>)
 8001582:	2201      	movs	r2, #1
 8001584:	701a      	strb	r2, [r3, #0]
			if(g_SP_measure == 0){
 8001586:	e014      	b.n	80015b2 <sp_measurement_update+0xfa>
			}
			else if(g_SP_measure == 1){
 8001588:	4b10      	ldr	r3, [pc, #64]	; (80015cc <sp_measurement_update+0x114>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d103      	bne.n	8001598 <sp_measurement_update+0xe0>
				g_SP_measure = 2;
 8001590:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <sp_measurement_update+0x114>)
 8001592:	2202      	movs	r2, #2
 8001594:	701a      	strb	r2, [r3, #0]
			if(g_SP_measure == 0){
 8001596:	e00c      	b.n	80015b2 <sp_measurement_update+0xfa>

			}
			else{
				if(g_SP_measure ==2){
 8001598:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <sp_measurement_update+0x114>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b02      	cmp	r3, #2
 800159e:	d108      	bne.n	80015b2 <sp_measurement_update+0xfa>
					g_SP_measure = 1;
 80015a0:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <sp_measurement_update+0x114>)
 80015a2:	2201      	movs	r2, #1
 80015a4:	701a      	strb	r2, [r3, #0]
			if(g_SP_measure == 0){
 80015a6:	e004      	b.n	80015b2 <sp_measurement_update+0xfa>
				}
			}
		}
		//else block to not update g_EN_measure if incorrent command revcd
		else{
			g_SP_measure =  g_SP_measure ;
 80015a8:	4b08      	ldr	r3, [pc, #32]	; (80015cc <sp_measurement_update+0x114>)
 80015aa:	781a      	ldrb	r2, [r3, #0]
 80015ac:	4b07      	ldr	r3, [pc, #28]	; (80015cc <sp_measurement_update+0x114>)
 80015ae:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80015b0:	e000      	b.n	80015b4 <sp_measurement_update+0xfc>
			if(g_SP_measure == 0){
 80015b2:	bf00      	nop
}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20000373 	.word	0x20000373
 80015bc:	200002d1 	.word	0x200002d1
 80015c0:	200002d5 	.word	0x200002d5
 80015c4:	200002c7 	.word	0x200002c7
 80015c8:	20000304 	.word	0x20000304
 80015cc:	200002d2 	.word	0x200002d2
 80015d0:	200002b4 	.word	0x200002b4

080015d4 <HAL_TIM_IC_CaptureCallback>:
uint8_t g_new_pulse = 0;
uint16_t g_lmt01_sens_temp =  0 ;
char dig_sens_temp[3] = {};

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
  if(htim->Instance == TIM2){
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015e4:	d142      	bne.n	800166c <HAL_TIM_IC_CaptureCallback+0x98>
	  g_new_pulse = 1;
 80015e6:	4b23      	ldr	r3, [pc, #140]	; (8001674 <HAL_TIM_IC_CaptureCallback+0xa0>)
 80015e8:	2201      	movs	r2, #1
 80015ea:	701a      	strb	r2, [r3, #0]
	  g_time_between_pulses =  __HAL_TIM_GET_COUNTER(&htim2)  - current_value;  //Time between rising edges
 80015ec:	4b22      	ldr	r3, [pc, #136]	; (8001678 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015f2:	4b22      	ldr	r3, [pc, #136]	; (800167c <HAL_TIM_IC_CaptureCallback+0xa8>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	4a21      	ldr	r2, [pc, #132]	; (8001680 <HAL_TIM_IC_CaptureCallback+0xac>)
 80015fa:	6013      	str	r3, [r2, #0]

	  if( g_time_between_pulses<13){
 80015fc:	4b20      	ldr	r3, [pc, #128]	; (8001680 <HAL_TIM_IC_CaptureCallback+0xac>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2b0c      	cmp	r3, #12
 8001602:	d80a      	bhi.n	800161a <HAL_TIM_IC_CaptureCallback+0x46>
		  current_value = __HAL_TIM_GET_COUNTER(&htim2) ;
 8001604:	4b1c      	ldr	r3, [pc, #112]	; (8001678 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160a:	4a1c      	ldr	r2, [pc, #112]	; (800167c <HAL_TIM_IC_CaptureCallback+0xa8>)
 800160c:	6013      	str	r3, [r2, #0]
		  pulse_count++ ;
 800160e:	4b1d      	ldr	r3, [pc, #116]	; (8001684 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	3301      	adds	r3, #1
 8001614:	4a1b      	ldr	r2, [pc, #108]	; (8001684 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001616:	6013      	str	r3, [r2, #0]
		  g_TO1_temp = (pulse_count/4096.0)*256 - 50 ; //calculate new temp - BUG Fixed: 4094 changed to 4096
		 current_value = __HAL_TIM_GET_COUNTER(&htim2) ;
		 pulse_count = 0;
	  }
  }
}
 8001618:	e028      	b.n	800166c <HAL_TIM_IC_CaptureCallback+0x98>
		  g_TO1_temp = (pulse_count/4096.0)*256 - 50 ; //calculate new temp - BUG Fixed: 4094 changed to 4096
 800161a:	4b1a      	ldr	r3, [pc, #104]	; (8001684 <HAL_TIM_IC_CaptureCallback+0xb0>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f7fe ff78 	bl	8000514 <__aeabi_ui2d>
 8001624:	f04f 0200 	mov.w	r2, #0
 8001628:	4b17      	ldr	r3, [pc, #92]	; (8001688 <HAL_TIM_IC_CaptureCallback+0xb4>)
 800162a:	f7ff f917 	bl	800085c <__aeabi_ddiv>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	4610      	mov	r0, r2
 8001634:	4619      	mov	r1, r3
 8001636:	f04f 0200 	mov.w	r2, #0
 800163a:	4b14      	ldr	r3, [pc, #80]	; (800168c <HAL_TIM_IC_CaptureCallback+0xb8>)
 800163c:	f7fe ffe4 	bl	8000608 <__aeabi_dmul>
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	4610      	mov	r0, r2
 8001646:	4619      	mov	r1, r3
 8001648:	f04f 0200 	mov.w	r2, #0
 800164c:	4b10      	ldr	r3, [pc, #64]	; (8001690 <HAL_TIM_IC_CaptureCallback+0xbc>)
 800164e:	f7fe fe23 	bl	8000298 <__aeabi_dsub>
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	490f      	ldr	r1, [pc, #60]	; (8001694 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001658:	e9c1 2300 	strd	r2, r3, [r1]
		 current_value = __HAL_TIM_GET_COUNTER(&htim2) ;
 800165c:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001662:	4a06      	ldr	r2, [pc, #24]	; (800167c <HAL_TIM_IC_CaptureCallback+0xa8>)
 8001664:	6013      	str	r3, [r2, #0]
		 pulse_count = 0;
 8001666:	4b07      	ldr	r3, [pc, #28]	; (8001684 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
}
 800166c:	bf00      	nop
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20000358 	.word	0x20000358
 8001678:	2000012c 	.word	0x2000012c
 800167c:	20000350 	.word	0x20000350
 8001680:	20000354 	.word	0x20000354
 8001684:	2000037c 	.word	0x2000037c
 8001688:	40b00000 	.word	0x40b00000
 800168c:	40700000 	.word	0x40700000
 8001690:	40490000 	.word	0x40490000
 8001694:	20000220 	.word	0x20000220

08001698 <flash_led_d3>:

/**
 * Function flashed LED D3 at specified interval of 50 ms
 */
void flash_led_d3(){
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - g_time_passed >= 50 && g_LED_D3_ON == 0){
 800169c:	f002 f94e 	bl	800393c <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	4b16      	ldr	r3, [pc, #88]	; (80016fc <flash_led_d3+0x64>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b31      	cmp	r3, #49	; 0x31
 80016aa:	d90c      	bls.n	80016c6 <flash_led_d3+0x2e>
 80016ac:	4b14      	ldr	r3, [pc, #80]	; (8001700 <flash_led_d3+0x68>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d108      	bne.n	80016c6 <flash_led_d3+0x2e>
		g_LED_D3_ON = 1; // set D2 on
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <flash_led_d3+0x68>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET) ;
 80016ba:	2200      	movs	r2, #0
 80016bc:	2120      	movs	r1, #32
 80016be:	4811      	ldr	r0, [pc, #68]	; (8001704 <flash_led_d3+0x6c>)
 80016c0:	f003 f89e 	bl	8004800 <HAL_GPIO_WritePin>
		g_time_passed =  HAL_GetTick() ;
		g_LED_D3_ON = 0;  //set D2 off

	}

}
 80016c4:	e018      	b.n	80016f8 <flash_led_d3+0x60>
	else if(HAL_GetTick() - g_time_passed >= 100 && g_LED_D3_ON == 1){
 80016c6:	f002 f939 	bl	800393c <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <flash_led_d3+0x64>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b63      	cmp	r3, #99	; 0x63
 80016d4:	d910      	bls.n	80016f8 <flash_led_d3+0x60>
 80016d6:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <flash_led_d3+0x68>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d10c      	bne.n	80016f8 <flash_led_d3+0x60>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET) ;
 80016de:	2201      	movs	r2, #1
 80016e0:	2120      	movs	r1, #32
 80016e2:	4808      	ldr	r0, [pc, #32]	; (8001704 <flash_led_d3+0x6c>)
 80016e4:	f003 f88c 	bl	8004800 <HAL_GPIO_WritePin>
		g_time_passed =  HAL_GetTick() ;
 80016e8:	f002 f928 	bl	800393c <HAL_GetTick>
 80016ec:	4603      	mov	r3, r0
 80016ee:	4a03      	ldr	r2, [pc, #12]	; (80016fc <flash_led_d3+0x64>)
 80016f0:	6013      	str	r3, [r2, #0]
		g_LED_D3_ON = 0;  //set D2 off
 80016f2:	4b03      	ldr	r3, [pc, #12]	; (8001700 <flash_led_d3+0x68>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	701a      	strb	r2, [r3, #0]
}
 80016f8:	bf00      	nop
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	200002cc 	.word	0x200002cc
 8001700:	200002d0 	.word	0x200002d0
 8001704:	40020400 	.word	0x40020400

08001708 <flash_led_d2>:

/**
 * Function flashed LED D2 at specified interval of 100 ms
 */
void flash_led_d2(){
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - g_time_passed >= 100 && g_LED_D2_ON == 0){
 800170c:	f002 f916 	bl	800393c <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	4b16      	ldr	r3, [pc, #88]	; (800176c <flash_led_d2+0x64>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b63      	cmp	r3, #99	; 0x63
 800171a:	d90c      	bls.n	8001736 <flash_led_d2+0x2e>
 800171c:	4b14      	ldr	r3, [pc, #80]	; (8001770 <flash_led_d2+0x68>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d108      	bne.n	8001736 <flash_led_d2+0x2e>
		g_LED_D2_ON = 1; // set D2 on
 8001724:	4b12      	ldr	r3, [pc, #72]	; (8001770 <flash_led_d2+0x68>)
 8001726:	2201      	movs	r2, #1
 8001728:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET) ;
 800172a:	2200      	movs	r2, #0
 800172c:	2110      	movs	r1, #16
 800172e:	4811      	ldr	r0, [pc, #68]	; (8001774 <flash_led_d2+0x6c>)
 8001730:	f003 f866 	bl	8004800 <HAL_GPIO_WritePin>
		g_time_passed =  HAL_GetTick() ;
		g_LED_D2_ON = 0;  //set D2 off

	}

}
 8001734:	e018      	b.n	8001768 <flash_led_d2+0x60>
	else if(HAL_GetTick() - g_time_passed >= 200 && g_LED_D2_ON == 1){
 8001736:	f002 f901 	bl	800393c <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	4b0b      	ldr	r3, [pc, #44]	; (800176c <flash_led_d2+0x64>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2bc7      	cmp	r3, #199	; 0xc7
 8001744:	d910      	bls.n	8001768 <flash_led_d2+0x60>
 8001746:	4b0a      	ldr	r3, [pc, #40]	; (8001770 <flash_led_d2+0x68>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d10c      	bne.n	8001768 <flash_led_d2+0x60>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET) ;
 800174e:	2201      	movs	r2, #1
 8001750:	2110      	movs	r1, #16
 8001752:	4808      	ldr	r0, [pc, #32]	; (8001774 <flash_led_d2+0x6c>)
 8001754:	f003 f854 	bl	8004800 <HAL_GPIO_WritePin>
		g_time_passed =  HAL_GetTick() ;
 8001758:	f002 f8f0 	bl	800393c <HAL_GetTick>
 800175c:	4603      	mov	r3, r0
 800175e:	4a03      	ldr	r2, [pc, #12]	; (800176c <flash_led_d2+0x64>)
 8001760:	6013      	str	r3, [r2, #0]
		g_LED_D2_ON = 0;  //set D2 off
 8001762:	4b03      	ldr	r3, [pc, #12]	; (8001770 <flash_led_d2+0x68>)
 8001764:	2200      	movs	r2, #0
 8001766:	701a      	strb	r2, [r3, #0]
}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}
 800176c:	200002cc 	.word	0x200002cc
 8001770:	200002d4 	.word	0x200002d4
 8001774:	40020400 	.word	0x40020400

08001778 <ADC_Select_CH0>:
		  }
	  }
}

//digital sensore
void ADC_Select_CH0(void){
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800177e:	463b      	mov	r3, r7
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_0;
 800178a:	2300      	movs	r3, #0
 800178c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 800178e:	2301      	movs	r3, #1
 8001790:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001792:	2300      	movs	r3, #0
 8001794:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001796:	463b      	mov	r3, r7
 8001798:	4619      	mov	r1, r3
 800179a:	4806      	ldr	r0, [pc, #24]	; (80017b4 <ADC_Select_CH0+0x3c>)
 800179c:	f002 fac2 	bl	8003d24 <HAL_ADC_ConfigChannel>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <ADC_Select_CH0+0x32>
	{
		Error_Handler();
 80017a6:	f001 fcab 	bl	8003100 <Error_Handler>
	}


}
 80017aa:	bf00      	nop
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	200000c4 	.word	0x200000c4

080017b8 <ADC_Select_CH14>:
// photodiode
void ADC_Select_CH14(void){
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80017be:	463b      	mov	r3, r7
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	*/
	sConfig.Channel = ADC_CHANNEL_14;
 80017ca:	230e      	movs	r3, #14
 80017cc:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80017ce:	2301      	movs	r3, #1
 80017d0:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017d2:	463b      	mov	r3, r7
 80017d4:	4619      	mov	r1, r3
 80017d6:	4806      	ldr	r0, [pc, #24]	; (80017f0 <ADC_Select_CH14+0x38>)
 80017d8:	f002 faa4 	bl	8003d24 <HAL_ADC_ConfigChannel>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <ADC_Select_CH14+0x2e>
	{
		Error_Handler();
 80017e2:	f001 fc8d 	bl	8003100 <Error_Handler>
	}


}
 80017e6:	bf00      	nop
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	200000c4 	.word	0x200000c4

080017f4 <ADC_Select_CH9>:

//PV- Panel- ADC 1
void ADC_Select_CH9(void){
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80017fa:	463b      	mov	r3, r7
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	*/
	sConfig.Channel = ADC_CHANNEL_9;
 8001806:	2309      	movs	r3, #9
 8001808:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 800180a:	2301      	movs	r3, #1
 800180c:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800180e:	463b      	mov	r3, r7
 8001810:	4619      	mov	r1, r3
 8001812:	4806      	ldr	r0, [pc, #24]	; (800182c <ADC_Select_CH9+0x38>)
 8001814:	f002 fa86 	bl	8003d24 <HAL_ADC_ConfigChannel>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <ADC_Select_CH9+0x2e>
	{
		Error_Handler();
 800181e:	f001 fc6f 	bl	8003100 <Error_Handler>
	}
}
 8001822:	bf00      	nop
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	200000c4 	.word	0x200000c4

08001830 <ADC_Select_CH15>:

//PV - Panel - ADC2
void ADC_Select_CH15(void){
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001836:	463b      	mov	r3, r7
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	*/
	sConfig.Channel = ADC_CHANNEL_15;
 8001842:	230f      	movs	r3, #15
 8001844:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001846:	2301      	movs	r3, #1
 8001848:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800184a:	463b      	mov	r3, r7
 800184c:	4619      	mov	r1, r3
 800184e:	4806      	ldr	r0, [pc, #24]	; (8001868 <ADC_Select_CH15+0x38>)
 8001850:	f002 fa68 	bl	8003d24 <HAL_ADC_ConfigChannel>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <ADC_Select_CH15+0x2e>
	{
		Error_Handler();
 800185a:	f001 fc51 	bl	8003100 <Error_Handler>
	}
}
 800185e:	bf00      	nop
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	200000c4 	.word	0x200000c4
 800186c:	00000000 	.word	0x00000000

08001870 <get_adc_value_conver_to_lux>:
 * Function starts ADC CH14, connected to ouput of light diode
 * get the ADC value of diode
 */
double ip_diode = 0;
uint16_t lux_value = 0;
uint16_t get_adc_value_conver_to_lux(){
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
	ADC_Select_CH14() ;
 8001874:	f7ff ffa0 	bl	80017b8 <ADC_Select_CH14>
	HAL_ADC_Start(&hadc1);
 8001878:	482f      	ldr	r0, [pc, #188]	; (8001938 <get_adc_value_conver_to_lux+0xc8>)
 800187a:	f002 f8d3 	bl	8003a24 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) ;
 800187e:	f04f 31ff 	mov.w	r1, #4294967295
 8001882:	482d      	ldr	r0, [pc, #180]	; (8001938 <get_adc_value_conver_to_lux+0xc8>)
 8001884:	f002 f9b5 	bl	8003bf2 <HAL_ADC_PollForConversion>
	g_raw_lux_value = HAL_ADC_GetValue(&hadc1) ;
 8001888:	482b      	ldr	r0, [pc, #172]	; (8001938 <get_adc_value_conver_to_lux+0xc8>)
 800188a:	f002 fa3d 	bl	8003d08 <HAL_ADC_GetValue>
 800188e:	4603      	mov	r3, r0
 8001890:	4618      	mov	r0, r3
 8001892:	f7fe fe3f 	bl	8000514 <__aeabi_ui2d>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4928      	ldr	r1, [pc, #160]	; (800193c <get_adc_value_conver_to_lux+0xcc>)
 800189c:	e9c1 2300 	strd	r2, r3, [r1]
	HAL_ADC_Stop(&hadc1);
 80018a0:	4825      	ldr	r0, [pc, #148]	; (8001938 <get_adc_value_conver_to_lux+0xc8>)
 80018a2:	f002 f973 	bl	8003b8c <HAL_ADC_Stop>

	//scale adc value [0,99999] - For 30000 lux
//	g_raw_lux_value = g_raw_lux_value*(29999.0/4095.0) ;

	//make these into your own values
	g_raw_lux_value = g_raw_lux_value*(3.3/4095.0) ;
 80018a6:	4b25      	ldr	r3, [pc, #148]	; (800193c <get_adc_value_conver_to_lux+0xcc>)
 80018a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018ac:	a31c      	add	r3, pc, #112	; (adr r3, 8001920 <get_adc_value_conver_to_lux+0xb0>)
 80018ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b2:	f7fe fea9 	bl	8000608 <__aeabi_dmul>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	4920      	ldr	r1, [pc, #128]	; (800193c <get_adc_value_conver_to_lux+0xcc>)
 80018bc:	e9c1 2300 	strd	r2, r3, [r1]
	ip_diode = g_raw_lux_value/1200.0 ;
 80018c0:	4b1e      	ldr	r3, [pc, #120]	; (800193c <get_adc_value_conver_to_lux+0xcc>)
 80018c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	4b1d      	ldr	r3, [pc, #116]	; (8001940 <get_adc_value_conver_to_lux+0xd0>)
 80018cc:	f7fe ffc6 	bl	800085c <__aeabi_ddiv>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	491b      	ldr	r1, [pc, #108]	; (8001944 <get_adc_value_conver_to_lux+0xd4>)
 80018d6:	e9c1 2300 	strd	r2, r3, [r1]
	lux_value = pow((ip_diode/(0.085*pow(10,-6))),1/1.01) ;
 80018da:	4b1a      	ldr	r3, [pc, #104]	; (8001944 <get_adc_value_conver_to_lux+0xd4>)
 80018dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018e0:	a311      	add	r3, pc, #68	; (adr r3, 8001928 <get_adc_value_conver_to_lux+0xb8>)
 80018e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e6:	f7fe ffb9 	bl	800085c <__aeabi_ddiv>
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	ec43 2b17 	vmov	d7, r2, r3
 80018f2:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8001930 <get_adc_value_conver_to_lux+0xc0>
 80018f6:	eeb0 0a47 	vmov.f32	s0, s14
 80018fa:	eef0 0a67 	vmov.f32	s1, s15
 80018fe:	f006 fbe9 	bl	80080d4 <pow>
 8001902:	ec53 2b10 	vmov	r2, r3, d0
 8001906:	4610      	mov	r0, r2
 8001908:	4619      	mov	r1, r3
 800190a:	f7ff f92d 	bl	8000b68 <__aeabi_d2uiz>
 800190e:	4603      	mov	r3, r0
 8001910:	b29a      	uxth	r2, r3
 8001912:	4b0d      	ldr	r3, [pc, #52]	; (8001948 <get_adc_value_conver_to_lux+0xd8>)
 8001914:	801a      	strh	r2, [r3, #0]

//	return g_raw_lux_value ;
	return lux_value ;
 8001916:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <get_adc_value_conver_to_lux+0xd8>)
 8001918:	881b      	ldrh	r3, [r3, #0]
}
 800191a:	4618      	mov	r0, r3
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	e734d9b4 	.word	0xe734d9b4
 8001924:	3f4a680c 	.word	0x3f4a680c
 8001928:	d05394fe 	.word	0xd05394fe
 800192c:	3e76d127 	.word	0x3e76d127
 8001930:	1e6a7498 	.word	0x1e6a7498
 8001934:	3fefaee4 	.word	0x3fefaee4
 8001938:	200000c4 	.word	0x200000c4
 800193c:	20000228 	.word	0x20000228
 8001940:	4092c000 	.word	0x4092c000
 8001944:	20000360 	.word	0x20000360
 8001948:	20000368 	.word	0x20000368

0800194c <en_measurements_and_responses>:
 * This funtion performs the measurement for UR3: Environement measure.
 * It measures the ambient temperature, solar panel temperature and light intensity,
 * the board is exposed to.
 * Measurements and responses, transmitted to UART and LCD
 */
void en_measurements_and_responses(){
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af02      	add	r7, sp, #8


	if(g_EN_measure == 1){
 8001952:	4b41      	ldr	r3, [pc, #260]	; (8001a58 <en_measurements_and_responses+0x10c>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d14a      	bne.n	80019f0 <en_measurements_and_responses+0xa4>

	  // ignore bottom and left button press and SP command while measuring
	  if(g_bottom_button_pressed ==1 || g_SP_config_command_rcvd ==1 ||  g_left_button_pressed ==1){
 800195a:	4b40      	ldr	r3, [pc, #256]	; (8001a5c <en_measurements_and_responses+0x110>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d007      	beq.n	8001972 <en_measurements_and_responses+0x26>
 8001962:	4b3f      	ldr	r3, [pc, #252]	; (8001a60 <en_measurements_and_responses+0x114>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d003      	beq.n	8001972 <en_measurements_and_responses+0x26>
 800196a:	4b3e      	ldr	r3, [pc, #248]	; (8001a64 <en_measurements_and_responses+0x118>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d108      	bne.n	8001984 <en_measurements_and_responses+0x38>
		  g_bottom_button_pressed = 0 ;
 8001972:	4b3a      	ldr	r3, [pc, #232]	; (8001a5c <en_measurements_and_responses+0x110>)
 8001974:	2200      	movs	r2, #0
 8001976:	701a      	strb	r2, [r3, #0]
		  g_SP_config_command_rcvd = 0 ;
 8001978:	4b39      	ldr	r3, [pc, #228]	; (8001a60 <en_measurements_and_responses+0x114>)
 800197a:	2200      	movs	r2, #0
 800197c:	701a      	strb	r2, [r3, #0]
		  g_left_button_pressed = 0;
 800197e:	4b39      	ldr	r3, [pc, #228]	; (8001a64 <en_measurements_and_responses+0x118>)
 8001980:	2200      	movs	r2, #0
 8001982:	701a      	strb	r2, [r3, #0]
	  }
	  //ANALOGUE SENSOR CALIBRATION
	  g_temp_in_deg = get_adc_value_and_celsius_temperature() ;
 8001984:	f7ff fc04 	bl	8001190 <get_adc_value_and_celsius_temperature>
 8001988:	4603      	mov	r3, r0
 800198a:	461a      	mov	r2, r3
 800198c:	4b36      	ldr	r3, [pc, #216]	; (8001a68 <en_measurements_and_responses+0x11c>)
 800198e:	801a      	strh	r2, [r3, #0]
	  store_temp_in_string(g_temp_in_deg, g_temperature, LEN);
 8001990:	4b35      	ldr	r3, [pc, #212]	; (8001a68 <en_measurements_and_responses+0x11c>)
 8001992:	881b      	ldrh	r3, [r3, #0]
 8001994:	2203      	movs	r2, #3
 8001996:	4935      	ldr	r1, [pc, #212]	; (8001a6c <en_measurements_and_responses+0x120>)
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff fc53 	bl	8001244 <store_temp_in_string>

	  //PHOTODIOCE ouput
	  g_get_lxd_value = get_adc_value_conver_to_lux();
 800199e:	f7ff ff67 	bl	8001870 <get_adc_value_conver_to_lux>
 80019a2:	4603      	mov	r3, r0
 80019a4:	461a      	mov	r2, r3
 80019a6:	4b32      	ldr	r3, [pc, #200]	; (8001a70 <en_measurements_and_responses+0x124>)
 80019a8:	801a      	strh	r2, [r3, #0]
	  snprintf(g_lxd_value, sizeof(g_lxd_value), "%05d",g_get_lxd_value);
 80019aa:	4b31      	ldr	r3, [pc, #196]	; (8001a70 <en_measurements_and_responses+0x124>)
 80019ac:	881b      	ldrh	r3, [r3, #0]
 80019ae:	4a31      	ldr	r2, [pc, #196]	; (8001a74 <en_measurements_and_responses+0x128>)
 80019b0:	2106      	movs	r1, #6
 80019b2:	4831      	ldr	r0, [pc, #196]	; (8001a78 <en_measurements_and_responses+0x12c>)
 80019b4:	f005 ff0c 	bl	80077d0 <sniprintf>

	  // DIGITAL SENSOR CALIBRATION
	  g_lmt01_sens_temp =  (uint16_t)g_TO1_temp ;
 80019b8:	4b30      	ldr	r3, [pc, #192]	; (8001a7c <en_measurements_and_responses+0x130>)
 80019ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019be:	4610      	mov	r0, r2
 80019c0:	4619      	mov	r1, r3
 80019c2:	f7ff f8d1 	bl	8000b68 <__aeabi_d2uiz>
 80019c6:	4603      	mov	r3, r0
 80019c8:	b29a      	uxth	r2, r3
 80019ca:	4b2d      	ldr	r3, [pc, #180]	; (8001a80 <en_measurements_and_responses+0x134>)
 80019cc:	801a      	strh	r2, [r3, #0]
	  store_temp_in_string(g_lmt01_sens_temp, dig_sens_temp, LEN) ;
 80019ce:	4b2c      	ldr	r3, [pc, #176]	; (8001a80 <en_measurements_and_responses+0x134>)
 80019d0:	881b      	ldrh	r3, [r3, #0]
 80019d2:	2203      	movs	r2, #3
 80019d4:	492b      	ldr	r1, [pc, #172]	; (8001a84 <en_measurements_and_responses+0x138>)
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff fc34 	bl	8001244 <store_temp_in_string>

	  //re-prime system state update
	  if(g_transmit_system_state ==0){
 80019dc:	4b2a      	ldr	r3, [pc, #168]	; (8001a88 <en_measurements_and_responses+0x13c>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d102      	bne.n	80019ea <en_measurements_and_responses+0x9e>
		  g_transmit_system_state =1; //send the system state again
 80019e4:	4b28      	ldr	r3, [pc, #160]	; (8001a88 <en_measurements_and_responses+0x13c>)
 80019e6:	2201      	movs	r2, #1
 80019e8:	701a      	strb	r2, [r3, #0]

	  }

	  //Flash D3 LED -> put in function
	  flash_led_d3();
 80019ea:	f7ff fe55 	bl	8001698 <flash_led_d3>
		  HAL_UART_Transmit_IT(&huart2, (uint8_t*)system_state_transmit, 18);

	  }

	}
}
 80019ee:	e030      	b.n	8001a52 <en_measurements_and_responses+0x106>
	else if(g_EN_measure == 2){
 80019f0:	4b19      	ldr	r3, [pc, #100]	; (8001a58 <en_measurements_and_responses+0x10c>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d12c      	bne.n	8001a52 <en_measurements_and_responses+0x106>
		g_EN_measure = 0;
 80019f8:	4b17      	ldr	r3, [pc, #92]	; (8001a58 <en_measurements_and_responses+0x10c>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	701a      	strb	r2, [r3, #0]
		 Lcd_clear(&lcd);
 80019fe:	4823      	ldr	r0, [pc, #140]	; (8001a8c <en_measurements_and_responses+0x140>)
 8001a00:	f7ff fae2 	bl	8000fc8 <Lcd_clear>
		g_EN_measure_LCD_display =  1 ;
 8001a04:	4b22      	ldr	r3, [pc, #136]	; (8001a90 <en_measurements_and_responses+0x144>)
 8001a06:	2201      	movs	r2, #1
 8001a08:	701a      	strb	r2, [r3, #0]
		g_SP_measure_LCD_diplay = 0 ; //dont display SP measurements
 8001a0a:	4b22      	ldr	r3, [pc, #136]	; (8001a94 <en_measurements_and_responses+0x148>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET) ;
 8001a10:	2201      	movs	r2, #1
 8001a12:	2120      	movs	r1, #32
 8001a14:	4820      	ldr	r0, [pc, #128]	; (8001a98 <en_measurements_and_responses+0x14c>)
 8001a16:	f002 fef3 	bl	8004800 <HAL_GPIO_WritePin>
	  snprintf(system_state_transmit,sizeof(system_state_transmit),"&_%03d_%03d_%05d_*\n",g_temp_in_deg,g_lmt01_sens_temp, g_get_lxd_value );
 8001a1a:	4b13      	ldr	r3, [pc, #76]	; (8001a68 <en_measurements_and_responses+0x11c>)
 8001a1c:	881b      	ldrh	r3, [r3, #0]
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4b17      	ldr	r3, [pc, #92]	; (8001a80 <en_measurements_and_responses+0x134>)
 8001a22:	881b      	ldrh	r3, [r3, #0]
 8001a24:	461a      	mov	r2, r3
 8001a26:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <en_measurements_and_responses+0x124>)
 8001a28:	881b      	ldrh	r3, [r3, #0]
 8001a2a:	9301      	str	r3, [sp, #4]
 8001a2c:	9200      	str	r2, [sp, #0]
 8001a2e:	460b      	mov	r3, r1
 8001a30:	4a1a      	ldr	r2, [pc, #104]	; (8001a9c <en_measurements_and_responses+0x150>)
 8001a32:	2113      	movs	r1, #19
 8001a34:	481a      	ldr	r0, [pc, #104]	; (8001aa0 <en_measurements_and_responses+0x154>)
 8001a36:	f005 fecb 	bl	80077d0 <sniprintf>
	  if(g_transmit_system_state  == 1){
 8001a3a:	4b13      	ldr	r3, [pc, #76]	; (8001a88 <en_measurements_and_responses+0x13c>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d107      	bne.n	8001a52 <en_measurements_and_responses+0x106>
		  g_transmit_system_state = 0;
 8001a42:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <en_measurements_and_responses+0x13c>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit_IT(&huart2, (uint8_t*)system_state_transmit, 18);
 8001a48:	2212      	movs	r2, #18
 8001a4a:	4915      	ldr	r1, [pc, #84]	; (8001aa0 <en_measurements_and_responses+0x154>)
 8001a4c:	4815      	ldr	r0, [pc, #84]	; (8001aa4 <en_measurements_and_responses+0x158>)
 8001a4e:	f004 ff1e 	bl	800688e <HAL_UART_Transmit_IT>
}
 8001a52:	bf00      	nop
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	200002c7 	.word	0x200002c7
 8001a5c:	20000373 	.word	0x20000373
 8001a60:	200002d5 	.word	0x200002d5
 8001a64:	20000370 	.word	0x20000370
 8001a68:	20000218 	.word	0x20000218
 8001a6c:	2000021c 	.word	0x2000021c
 8001a70:	20000230 	.word	0x20000230
 8001a74:	08008f54 	.word	0x08008f54
 8001a78:	20000234 	.word	0x20000234
 8001a7c:	20000220 	.word	0x20000220
 8001a80:	2000035a 	.word	0x2000035a
 8001a84:	2000035c 	.word	0x2000035c
 8001a88:	20000011 	.word	0x20000011
 8001a8c:	20000304 	.word	0x20000304
 8001a90:	200002c8 	.word	0x200002c8
 8001a94:	200002d3 	.word	0x200002d3
 8001a98:	40020400 	.word	0x40020400
 8001a9c:	08008f5c 	.word	0x08008f5c
 8001aa0:	200002d8 	.word	0x200002d8
 8001aa4:	200001bc 	.word	0x200001bc

08001aa8 <sp_measurements_and_responses>:
/**
 * This funtion performs the measurement for UR2: Photocvoltaic measurements.
 * It measures the PV voltage, PV current, PV power and PV efficiency,
 * Measurements and responses, transmitted to UART and LCD
 */
void sp_measurements_and_responses(){
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af04      	add	r7, sp, #16
	  if(g_SP_measure == 1){
 8001aae:	4b82      	ldr	r3, [pc, #520]	; (8001cb8 <sp_measurements_and_responses+0x210>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	f040 80c7 	bne.w	8001c46 <sp_measurements_and_responses+0x19e>

		// ignore top button and left button press and EN command while measuring
		if(g_top_button_pressed ==1 || g_EN_config_command_rcvd ==1 || g_left_button_pressed ==1){
 8001ab8:	4b80      	ldr	r3, [pc, #512]	; (8001cbc <sp_measurements_and_responses+0x214>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d007      	beq.n	8001ad0 <sp_measurements_and_responses+0x28>
 8001ac0:	4b7f      	ldr	r3, [pc, #508]	; (8001cc0 <sp_measurements_and_responses+0x218>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d003      	beq.n	8001ad0 <sp_measurements_and_responses+0x28>
 8001ac8:	4b7e      	ldr	r3, [pc, #504]	; (8001cc4 <sp_measurements_and_responses+0x21c>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d108      	bne.n	8001ae2 <sp_measurements_and_responses+0x3a>
		  g_top_button_pressed = 0 ;
 8001ad0:	4b7a      	ldr	r3, [pc, #488]	; (8001cbc <sp_measurements_and_responses+0x214>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	701a      	strb	r2, [r3, #0]
		  g_EN_config_command_rcvd = 0;
 8001ad6:	4b7a      	ldr	r3, [pc, #488]	; (8001cc0 <sp_measurements_and_responses+0x218>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	701a      	strb	r2, [r3, #0]
		  g_left_button_pressed = 0;
 8001adc:	4b79      	ldr	r3, [pc, #484]	; (8001cc4 <sp_measurements_and_responses+0x21c>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	701a      	strb	r2, [r3, #0]
		}

		//reprime state transmission
		if(g_transmit_SP_system_state == 0){
 8001ae2:	4b79      	ldr	r3, [pc, #484]	; (8001cc8 <sp_measurements_and_responses+0x220>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d102      	bne.n	8001af0 <sp_measurements_and_responses+0x48>
			g_transmit_SP_system_state = 1;
 8001aea:	4b77      	ldr	r3, [pc, #476]	; (8001cc8 <sp_measurements_and_responses+0x220>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	701a      	strb	r2, [r3, #0]
		}
		//PV panel data points measure
		g_PV_vol1 = get_pv_panel_adc2_input() ; //Voc = Vsp
 8001af0:	f000 f97e 	bl	8001df0 <get_pv_panel_adc2_input>
 8001af4:	4603      	mov	r3, r0
 8001af6:	461a      	mov	r2, r3
 8001af8:	4b74      	ldr	r3, [pc, #464]	; (8001ccc <sp_measurements_and_responses+0x224>)
 8001afa:	801a      	strh	r2, [r3, #0]
		//*ADC input(2) Vb = V_var
		g_PV_vol2= get_pv_panel_adc1_input() ;
 8001afc:	f000 f918 	bl	8001d30 <get_pv_panel_adc1_input>
 8001b00:	4603      	mov	r3, r0
 8001b02:	461a      	mov	r2, r3
 8001b04:	4b72      	ldr	r3, [pc, #456]	; (8001cd0 <sp_measurements_and_responses+0x228>)
 8001b06:	801a      	strh	r2, [r3, #0]

		//GET VALUES
		//Voc measure - Voc, vpv
		if(g_PV_vol1 > g_prev_v_pv){
 8001b08:	4b70      	ldr	r3, [pc, #448]	; (8001ccc <sp_measurements_and_responses+0x224>)
 8001b0a:	881a      	ldrh	r2, [r3, #0]
 8001b0c:	4b71      	ldr	r3, [pc, #452]	; (8001cd4 <sp_measurements_and_responses+0x22c>)
 8001b0e:	881b      	ldrh	r3, [r3, #0]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d907      	bls.n	8001b24 <sp_measurements_and_responses+0x7c>
		  g_prev_v_pv = g_PV_vol1 ;
 8001b14:	4b6d      	ldr	r3, [pc, #436]	; (8001ccc <sp_measurements_and_responses+0x224>)
 8001b16:	881a      	ldrh	r2, [r3, #0]
 8001b18:	4b6e      	ldr	r3, [pc, #440]	; (8001cd4 <sp_measurements_and_responses+0x22c>)
 8001b1a:	801a      	strh	r2, [r3, #0]
		  //capture maximum open circuit voltage
		  g_v_oc_pv = g_PV_vol1 ;
 8001b1c:	4b6b      	ldr	r3, [pc, #428]	; (8001ccc <sp_measurements_and_responses+0x224>)
 8001b1e:	881a      	ldrh	r2, [r3, #0]
 8001b20:	4b6d      	ldr	r3, [pc, #436]	; (8001cd8 <sp_measurements_and_responses+0x230>)
 8001b22:	801a      	strh	r2, [r3, #0]
		}

		//curent measure - Isc, Ipv
		if(g_PV_vol1 - g_PV_vol2 >0){
 8001b24:	4b69      	ldr	r3, [pc, #420]	; (8001ccc <sp_measurements_and_responses+0x224>)
 8001b26:	881b      	ldrh	r3, [r3, #0]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	4b69      	ldr	r3, [pc, #420]	; (8001cd0 <sp_measurements_and_responses+0x228>)
 8001b2c:	881b      	ldrh	r3, [r3, #0]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	dd08      	ble.n	8001b46 <sp_measurements_and_responses+0x9e>
			g_i_pv = g_PV_vol1 - g_PV_vol2 ;
 8001b34:	4b65      	ldr	r3, [pc, #404]	; (8001ccc <sp_measurements_and_responses+0x224>)
 8001b36:	881a      	ldrh	r2, [r3, #0]
 8001b38:	4b65      	ldr	r3, [pc, #404]	; (8001cd0 <sp_measurements_and_responses+0x228>)
 8001b3a:	881b      	ldrh	r3, [r3, #0]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	4b66      	ldr	r3, [pc, #408]	; (8001cdc <sp_measurements_and_responses+0x234>)
 8001b42:	801a      	strh	r2, [r3, #0]
 8001b44:	e003      	b.n	8001b4e <sp_measurements_and_responses+0xa6>
		}
		else{
			g_i_pv = g_i_pv ; //dont update current
 8001b46:	4b65      	ldr	r3, [pc, #404]	; (8001cdc <sp_measurements_and_responses+0x234>)
 8001b48:	881a      	ldrh	r2, [r3, #0]
 8001b4a:	4b64      	ldr	r3, [pc, #400]	; (8001cdc <sp_measurements_and_responses+0x234>)
 8001b4c:	801a      	strh	r2, [r3, #0]
		}

		//power measure - multiply by 1000, to get result in mW
		g_p_pv = ( (g_PV_vol1 * g_i_pv)/1000000.0) *1000;
 8001b4e:	4b5f      	ldr	r3, [pc, #380]	; (8001ccc <sp_measurements_and_responses+0x224>)
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	461a      	mov	r2, r3
 8001b54:	4b61      	ldr	r3, [pc, #388]	; (8001cdc <sp_measurements_and_responses+0x234>)
 8001b56:	881b      	ldrh	r3, [r3, #0]
 8001b58:	fb02 f303 	mul.w	r3, r2, r3
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7fe fce9 	bl	8000534 <__aeabi_i2d>
 8001b62:	a353      	add	r3, pc, #332	; (adr r3, 8001cb0 <sp_measurements_and_responses+0x208>)
 8001b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b68:	f7fe fe78 	bl	800085c <__aeabi_ddiv>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	4610      	mov	r0, r2
 8001b72:	4619      	mov	r1, r3
 8001b74:	f04f 0200 	mov.w	r2, #0
 8001b78:	4b59      	ldr	r3, [pc, #356]	; (8001ce0 <sp_measurements_and_responses+0x238>)
 8001b7a:	f7fe fd45 	bl	8000608 <__aeabi_dmul>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
 8001b82:	4610      	mov	r0, r2
 8001b84:	4619      	mov	r1, r3
 8001b86:	f7fe ffef 	bl	8000b68 <__aeabi_d2uiz>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	4b55      	ldr	r3, [pc, #340]	; (8001ce4 <sp_measurements_and_responses+0x23c>)
 8001b90:	801a      	strh	r2, [r3, #0]


		/*mpp values measure using power -Pmpp, Vmpp, Impp*/
		//check is power increasing
		if(g_p_pv > g_prev_p_pv ){
 8001b92:	4b54      	ldr	r3, [pc, #336]	; (8001ce4 <sp_measurements_and_responses+0x23c>)
 8001b94:	881a      	ldrh	r2, [r3, #0]
 8001b96:	4b54      	ldr	r3, [pc, #336]	; (8001ce8 <sp_measurements_and_responses+0x240>)
 8001b98:	881b      	ldrh	r3, [r3, #0]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d90f      	bls.n	8001bbe <sp_measurements_and_responses+0x116>
			g_p_mpp = g_p_pv ;
 8001b9e:	4b51      	ldr	r3, [pc, #324]	; (8001ce4 <sp_measurements_and_responses+0x23c>)
 8001ba0:	881a      	ldrh	r2, [r3, #0]
 8001ba2:	4b52      	ldr	r3, [pc, #328]	; (8001cec <sp_measurements_and_responses+0x244>)
 8001ba4:	801a      	strh	r2, [r3, #0]
			g_v_mpp = g_PV_vol1 ;
 8001ba6:	4b49      	ldr	r3, [pc, #292]	; (8001ccc <sp_measurements_and_responses+0x224>)
 8001ba8:	881a      	ldrh	r2, [r3, #0]
 8001baa:	4b51      	ldr	r3, [pc, #324]	; (8001cf0 <sp_measurements_and_responses+0x248>)
 8001bac:	801a      	strh	r2, [r3, #0]
			g_i_mpp = g_i_pv ;
 8001bae:	4b4b      	ldr	r3, [pc, #300]	; (8001cdc <sp_measurements_and_responses+0x234>)
 8001bb0:	881a      	ldrh	r2, [r3, #0]
 8001bb2:	4b50      	ldr	r3, [pc, #320]	; (8001cf4 <sp_measurements_and_responses+0x24c>)
 8001bb4:	801a      	strh	r2, [r3, #0]
			g_prev_p_pv = g_p_pv ;
 8001bb6:	4b4b      	ldr	r3, [pc, #300]	; (8001ce4 <sp_measurements_and_responses+0x23c>)
 8001bb8:	881a      	ldrh	r2, [r3, #0]
 8001bba:	4b4b      	ldr	r3, [pc, #300]	; (8001ce8 <sp_measurements_and_responses+0x240>)
 8001bbc:	801a      	strh	r2, [r3, #0]
		}


		if(clear_lcd_display == 1){
 8001bbe:	4b4e      	ldr	r3, [pc, #312]	; (8001cf8 <sp_measurements_and_responses+0x250>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d105      	bne.n	8001bd2 <sp_measurements_and_responses+0x12a>
			clear_lcd_display = 0;
 8001bc6:	4b4c      	ldr	r3, [pc, #304]	; (8001cf8 <sp_measurements_and_responses+0x250>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	701a      	strb	r2, [r3, #0]
			Lcd_clear(&lcd);
 8001bcc:	484b      	ldr	r0, [pc, #300]	; (8001cfc <sp_measurements_and_responses+0x254>)
 8001bce:	f7ff f9fb 	bl	8000fc8 <Lcd_clear>
		}
		//LCD write - real-time measured Vpv (mV), Ipv (mA), Ppv (mW), Peff = 0 while measuring
		//few commands - (have 2 write commands, and reduce rate of sampling/real time value display)

		//update valus only every 30ms
		if(HAL_GetTick() - g_previous_time_of_lcd >=30){
 8001bd2:	f001 feb3 	bl	800393c <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	4b49      	ldr	r3, [pc, #292]	; (8001d00 <sp_measurements_and_responses+0x258>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b1d      	cmp	r3, #29
 8001be0:	d92e      	bls.n	8001c40 <sp_measurements_and_responses+0x198>
			//write to lcd - //row 1
			Lcd_cursor(&lcd, 0, 0) ;
 8001be2:	2200      	movs	r2, #0
 8001be4:	2100      	movs	r1, #0
 8001be6:	4845      	ldr	r0, [pc, #276]	; (8001cfc <sp_measurements_and_responses+0x254>)
 8001be8:	f7ff f9d4 	bl	8000f94 <Lcd_cursor>
			snprintf(g_panel_voltage_and_current, sizeof(g_panel_voltage_and_current),"V:%04dmV I:%03dmA",g_PV_vol1,g_i_pv);
 8001bec:	4b37      	ldr	r3, [pc, #220]	; (8001ccc <sp_measurements_and_responses+0x224>)
 8001bee:	881b      	ldrh	r3, [r3, #0]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4b3a      	ldr	r3, [pc, #232]	; (8001cdc <sp_measurements_and_responses+0x234>)
 8001bf4:	881b      	ldrh	r3, [r3, #0]
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	4a42      	ldr	r2, [pc, #264]	; (8001d04 <sp_measurements_and_responses+0x25c>)
 8001bfc:	2111      	movs	r1, #17
 8001bfe:	4842      	ldr	r0, [pc, #264]	; (8001d08 <sp_measurements_and_responses+0x260>)
 8001c00:	f005 fde6 	bl	80077d0 <sniprintf>
			Lcd_string(&lcd, g_panel_voltage_and_current);
 8001c04:	4940      	ldr	r1, [pc, #256]	; (8001d08 <sp_measurements_and_responses+0x260>)
 8001c06:	483d      	ldr	r0, [pc, #244]	; (8001cfc <sp_measurements_and_responses+0x254>)
 8001c08:	f7ff f9a4 	bl	8000f54 <Lcd_string>

			//2nd row
			Lcd_cursor(&lcd, 1, 0) ;
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	2101      	movs	r1, #1
 8001c10:	483a      	ldr	r0, [pc, #232]	; (8001cfc <sp_measurements_and_responses+0x254>)
 8001c12:	f7ff f9bf 	bl	8000f94 <Lcd_cursor>
			snprintf(g_panel_power_and_efficiency, sizeof(g_panel_power_and_efficiency),"P: %03dmW E:%03d%%",g_p_pv, g_pv_eff);
 8001c16:	4b33      	ldr	r3, [pc, #204]	; (8001ce4 <sp_measurements_and_responses+0x23c>)
 8001c18:	881b      	ldrh	r3, [r3, #0]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	4b3b      	ldr	r3, [pc, #236]	; (8001d0c <sp_measurements_and_responses+0x264>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	9300      	str	r3, [sp, #0]
 8001c22:	4613      	mov	r3, r2
 8001c24:	4a3a      	ldr	r2, [pc, #232]	; (8001d10 <sp_measurements_and_responses+0x268>)
 8001c26:	2111      	movs	r1, #17
 8001c28:	483a      	ldr	r0, [pc, #232]	; (8001d14 <sp_measurements_and_responses+0x26c>)
 8001c2a:	f005 fdd1 	bl	80077d0 <sniprintf>
			Lcd_string(&lcd, g_panel_power_and_efficiency);
 8001c2e:	4939      	ldr	r1, [pc, #228]	; (8001d14 <sp_measurements_and_responses+0x26c>)
 8001c30:	4832      	ldr	r0, [pc, #200]	; (8001cfc <sp_measurements_and_responses+0x254>)
 8001c32:	f7ff f98f 	bl	8000f54 <Lcd_string>

			g_previous_time_of_lcd = HAL_GetTick() ;
 8001c36:	f001 fe81 	bl	800393c <HAL_GetTick>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	4a30      	ldr	r2, [pc, #192]	; (8001d00 <sp_measurements_and_responses+0x258>)
 8001c3e:	6013      	str	r3, [r2, #0]
		}


		//Flash D2 LED
		flash_led_d2() ;
 8001c40:	f7ff fd62 	bl	8001708 <flash_led_d2>
			  //transmit over UART
			  HAL_UART_Transmit_IT(&huart2,(uint8_t*)system_state_SP_transmit, 21) ;

		  }
	  }
}
 8001c44:	e031      	b.n	8001caa <sp_measurements_and_responses+0x202>
	  else if(g_SP_measure == 2){
 8001c46:	4b1c      	ldr	r3, [pc, #112]	; (8001cb8 <sp_measurements_and_responses+0x210>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d12d      	bne.n	8001caa <sp_measurements_and_responses+0x202>
		  g_SP_measure = 0;
 8001c4e:	4b1a      	ldr	r3, [pc, #104]	; (8001cb8 <sp_measurements_and_responses+0x210>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	701a      	strb	r2, [r3, #0]
		  g_SP_measure_LCD_diplay =  1;
 8001c54:	4b30      	ldr	r3, [pc, #192]	; (8001d18 <sp_measurements_and_responses+0x270>)
 8001c56:	2201      	movs	r2, #1
 8001c58:	701a      	strb	r2, [r3, #0]
		  g_EN_measure_LCD_display = 0; //dont diplay EN measurements
 8001c5a:	4b30      	ldr	r3, [pc, #192]	; (8001d1c <sp_measurements_and_responses+0x274>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET) ;
 8001c60:	2201      	movs	r2, #1
 8001c62:	2110      	movs	r1, #16
 8001c64:	482e      	ldr	r0, [pc, #184]	; (8001d20 <sp_measurements_and_responses+0x278>)
 8001c66:	f002 fdcb 	bl	8004800 <HAL_GPIO_WritePin>
		  snprintf(system_state_SP_transmit,sizeof(system_state_SP_transmit), "&_%04d_%03d_%03d_%03d_*\n",g_v_mpp,g_i_mpp,g_p_mpp,g_pv_eff);
 8001c6a:	4b21      	ldr	r3, [pc, #132]	; (8001cf0 <sp_measurements_and_responses+0x248>)
 8001c6c:	881b      	ldrh	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	4b20      	ldr	r3, [pc, #128]	; (8001cf4 <sp_measurements_and_responses+0x24c>)
 8001c72:	881b      	ldrh	r3, [r3, #0]
 8001c74:	461a      	mov	r2, r3
 8001c76:	4b1d      	ldr	r3, [pc, #116]	; (8001cec <sp_measurements_and_responses+0x244>)
 8001c78:	881b      	ldrh	r3, [r3, #0]
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4b23      	ldr	r3, [pc, #140]	; (8001d0c <sp_measurements_and_responses+0x264>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	9302      	str	r3, [sp, #8]
 8001c82:	9101      	str	r1, [sp, #4]
 8001c84:	9200      	str	r2, [sp, #0]
 8001c86:	4603      	mov	r3, r0
 8001c88:	4a26      	ldr	r2, [pc, #152]	; (8001d24 <sp_measurements_and_responses+0x27c>)
 8001c8a:	2116      	movs	r1, #22
 8001c8c:	4826      	ldr	r0, [pc, #152]	; (8001d28 <sp_measurements_and_responses+0x280>)
 8001c8e:	f005 fd9f 	bl	80077d0 <sniprintf>
		  if(g_transmit_SP_system_state == 1){
 8001c92:	4b0d      	ldr	r3, [pc, #52]	; (8001cc8 <sp_measurements_and_responses+0x220>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d107      	bne.n	8001caa <sp_measurements_and_responses+0x202>
			  g_transmit_SP_system_state = 0 ;
 8001c9a:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <sp_measurements_and_responses+0x220>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit_IT(&huart2,(uint8_t*)system_state_SP_transmit, 21) ;
 8001ca0:	2215      	movs	r2, #21
 8001ca2:	4921      	ldr	r1, [pc, #132]	; (8001d28 <sp_measurements_and_responses+0x280>)
 8001ca4:	4821      	ldr	r0, [pc, #132]	; (8001d2c <sp_measurements_and_responses+0x284>)
 8001ca6:	f004 fdf2 	bl	800688e <HAL_UART_Transmit_IT>
}
 8001caa:	bf00      	nop
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	00000000 	.word	0x00000000
 8001cb4:	412e8480 	.word	0x412e8480
 8001cb8:	200002d2 	.word	0x200002d2
 8001cbc:	20000372 	.word	0x20000372
 8001cc0:	200002d1 	.word	0x200002d1
 8001cc4:	20000370 	.word	0x20000370
 8001cc8:	20000012 	.word	0x20000012
 8001ccc:	2000025e 	.word	0x2000025e
 8001cd0:	20000264 	.word	0x20000264
 8001cd4:	20000262 	.word	0x20000262
 8001cd8:	20000260 	.word	0x20000260
 8001cdc:	20000250 	.word	0x20000250
 8001ce0:	408f4000 	.word	0x408f4000
 8001ce4:	20000252 	.word	0x20000252
 8001ce8:	20000254 	.word	0x20000254
 8001cec:	2000025a 	.word	0x2000025a
 8001cf0:	20000256 	.word	0x20000256
 8001cf4:	20000258 	.word	0x20000258
 8001cf8:	20000014 	.word	0x20000014
 8001cfc:	20000304 	.word	0x20000304
 8001d00:	200002b0 	.word	0x200002b0
 8001d04:	08008f70 	.word	0x08008f70
 8001d08:	20000274 	.word	0x20000274
 8001d0c:	2000025c 	.word	0x2000025c
 8001d10:	08008f84 	.word	0x08008f84
 8001d14:	2000029c 	.word	0x2000029c
 8001d18:	200002d3 	.word	0x200002d3
 8001d1c:	200002c8 	.word	0x200002c8
 8001d20:	40020400 	.word	0x40020400
 8001d24:	08008f98 	.word	0x08008f98
 8001d28:	200002ec 	.word	0x200002ec
 8001d2c:	200001bc 	.word	0x200001bc

08001d30 <get_pv_panel_adc1_input>:
 * This function retrieves the ADC panel voltage,
 * across adc input 1
 * Gets the input voltage to the adc
 * Scales the voltage to the appropriate PV voltage
 */
uint16_t get_pv_panel_adc1_input(){
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
	//READ ADC VALUE
	ADC_Select_CH15() ;
 8001d34:	f7ff fd7c 	bl	8001830 <ADC_Select_CH15>
	HAL_ADC_Start(&hadc1);
 8001d38:	4829      	ldr	r0, [pc, #164]	; (8001de0 <get_pv_panel_adc1_input+0xb0>)
 8001d3a:	f001 fe73 	bl	8003a24 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) ;
 8001d3e:	f04f 31ff 	mov.w	r1, #4294967295
 8001d42:	4827      	ldr	r0, [pc, #156]	; (8001de0 <get_pv_panel_adc1_input+0xb0>)
 8001d44:	f001 ff55 	bl	8003bf2 <HAL_ADC_PollForConversion>
	g_v1_pv = HAL_ADC_GetValue(&hadc1) ;
 8001d48:	4825      	ldr	r0, [pc, #148]	; (8001de0 <get_pv_panel_adc1_input+0xb0>)
 8001d4a:	f001 ffdd 	bl	8003d08 <HAL_ADC_GetValue>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe fbdf 	bl	8000514 <__aeabi_ui2d>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	4922      	ldr	r1, [pc, #136]	; (8001de4 <get_pv_panel_adc1_input+0xb4>)
 8001d5c:	e9c1 2300 	strd	r2, r3, [r1]
	HAL_ADC_Stop(&hadc1);
 8001d60:	481f      	ldr	r0, [pc, #124]	; (8001de0 <get_pv_panel_adc1_input+0xb0>)
 8001d62:	f001 ff13 	bl	8003b8c <HAL_ADC_Stop>

	//get voltage (mv) - from ADC formula
	g_v1_pv = g_v1_pv*(3.3/4095.0) ;
 8001d66:	4b1f      	ldr	r3, [pc, #124]	; (8001de4 <get_pv_panel_adc1_input+0xb4>)
 8001d68:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d6c:	a318      	add	r3, pc, #96	; (adr r3, 8001dd0 <get_pv_panel_adc1_input+0xa0>)
 8001d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d72:	f7fe fc49 	bl	8000608 <__aeabi_dmul>
 8001d76:	4602      	mov	r2, r0
 8001d78:	460b      	mov	r3, r1
 8001d7a:	491a      	ldr	r1, [pc, #104]	; (8001de4 <get_pv_panel_adc1_input+0xb4>)
 8001d7c:	e9c1 2300 	strd	r2, r3, [r1]

	//scale voltage up to PV panel voltage (V)
	g_v1_pv = g_v1_pv*(99000.0/39000.0);
 8001d80:	4b18      	ldr	r3, [pc, #96]	; (8001de4 <get_pv_panel_adc1_input+0xb4>)
 8001d82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d86:	a314      	add	r3, pc, #80	; (adr r3, 8001dd8 <get_pv_panel_adc1_input+0xa8>)
 8001d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d8c:	f7fe fc3c 	bl	8000608 <__aeabi_dmul>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	4913      	ldr	r1, [pc, #76]	; (8001de4 <get_pv_panel_adc1_input+0xb4>)
 8001d96:	e9c1 2300 	strd	r2, r3, [r1]

	//multiply by 1000 to get voltage to mv
	g_v1_pv = g_v1_pv*1000;
 8001d9a:	4b12      	ldr	r3, [pc, #72]	; (8001de4 <get_pv_panel_adc1_input+0xb4>)
 8001d9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001da0:	f04f 0200 	mov.w	r2, #0
 8001da4:	4b10      	ldr	r3, [pc, #64]	; (8001de8 <get_pv_panel_adc1_input+0xb8>)
 8001da6:	f7fe fc2f 	bl	8000608 <__aeabi_dmul>
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	490d      	ldr	r1, [pc, #52]	; (8001de4 <get_pv_panel_adc1_input+0xb4>)
 8001db0:	e9c1 2300 	strd	r2, r3, [r1]

	return g_v1_pv ;
 8001db4:	4b0b      	ldr	r3, [pc, #44]	; (8001de4 <get_pv_panel_adc1_input+0xb4>)
 8001db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dba:	4610      	mov	r0, r2
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	f7fe fed3 	bl	8000b68 <__aeabi_d2uiz>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	b29b      	uxth	r3, r3
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	f3af 8000 	nop.w
 8001dd0:	e734d9b4 	.word	0xe734d9b4
 8001dd4:	3f4a680c 	.word	0x3f4a680c
 8001dd8:	ec4ec4ec 	.word	0xec4ec4ec
 8001ddc:	40044ec4 	.word	0x40044ec4
 8001de0:	200000c4 	.word	0x200000c4
 8001de4:	20000240 	.word	0x20000240
 8001de8:	408f4000 	.word	0x408f4000
 8001dec:	00000000 	.word	0x00000000

08001df0 <get_pv_panel_adc2_input>:
 * This function returns the adc panel voltage, across adc input
 * 2
 * Gets the input voltage to the adc
 * Scales the voltage to the appropriate PV voltage
 */
uint16_t get_pv_panel_adc2_input(){
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
	//read adc value
	ADC_Select_CH9() ;
 8001df4:	f7ff fcfe 	bl	80017f4 <ADC_Select_CH9>
	HAL_ADC_Start(&hadc1);
 8001df8:	4829      	ldr	r0, [pc, #164]	; (8001ea0 <get_pv_panel_adc2_input+0xb0>)
 8001dfa:	f001 fe13 	bl	8003a24 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) ;
 8001dfe:	f04f 31ff 	mov.w	r1, #4294967295
 8001e02:	4827      	ldr	r0, [pc, #156]	; (8001ea0 <get_pv_panel_adc2_input+0xb0>)
 8001e04:	f001 fef5 	bl	8003bf2 <HAL_ADC_PollForConversion>
	g_v2_pv = HAL_ADC_GetValue(&hadc1) ;
 8001e08:	4825      	ldr	r0, [pc, #148]	; (8001ea0 <get_pv_panel_adc2_input+0xb0>)
 8001e0a:	f001 ff7d 	bl	8003d08 <HAL_ADC_GetValue>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7fe fb7f 	bl	8000514 <__aeabi_ui2d>
 8001e16:	4602      	mov	r2, r0
 8001e18:	460b      	mov	r3, r1
 8001e1a:	4922      	ldr	r1, [pc, #136]	; (8001ea4 <get_pv_panel_adc2_input+0xb4>)
 8001e1c:	e9c1 2300 	strd	r2, r3, [r1]
	HAL_ADC_Stop(&hadc1);
 8001e20:	481f      	ldr	r0, [pc, #124]	; (8001ea0 <get_pv_panel_adc2_input+0xb0>)
 8001e22:	f001 feb3 	bl	8003b8c <HAL_ADC_Stop>

	//get voltage (mv) -from adc formula
	g_v2_pv = g_v2_pv*(3.3/4095.0) ;
 8001e26:	4b1f      	ldr	r3, [pc, #124]	; (8001ea4 <get_pv_panel_adc2_input+0xb4>)
 8001e28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e2c:	a318      	add	r3, pc, #96	; (adr r3, 8001e90 <get_pv_panel_adc2_input+0xa0>)
 8001e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e32:	f7fe fbe9 	bl	8000608 <__aeabi_dmul>
 8001e36:	4602      	mov	r2, r0
 8001e38:	460b      	mov	r3, r1
 8001e3a:	491a      	ldr	r1, [pc, #104]	; (8001ea4 <get_pv_panel_adc2_input+0xb4>)
 8001e3c:	e9c1 2300 	strd	r2, r3, [r1]

	//scale voltage up to PV panel voltage
	g_v2_pv = g_v2_pv*(99000.0/39000.0);
 8001e40:	4b18      	ldr	r3, [pc, #96]	; (8001ea4 <get_pv_panel_adc2_input+0xb4>)
 8001e42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e46:	a314      	add	r3, pc, #80	; (adr r3, 8001e98 <get_pv_panel_adc2_input+0xa8>)
 8001e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4c:	f7fe fbdc 	bl	8000608 <__aeabi_dmul>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	4913      	ldr	r1, [pc, #76]	; (8001ea4 <get_pv_panel_adc2_input+0xb4>)
 8001e56:	e9c1 2300 	strd	r2, r3, [r1]

	//multiply by 1000 to get voltage to mv
	g_v2_pv = g_v2_pv*1000;
 8001e5a:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <get_pv_panel_adc2_input+0xb4>)
 8001e5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e60:	f04f 0200 	mov.w	r2, #0
 8001e64:	4b10      	ldr	r3, [pc, #64]	; (8001ea8 <get_pv_panel_adc2_input+0xb8>)
 8001e66:	f7fe fbcf 	bl	8000608 <__aeabi_dmul>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	490d      	ldr	r1, [pc, #52]	; (8001ea4 <get_pv_panel_adc2_input+0xb4>)
 8001e70:	e9c1 2300 	strd	r2, r3, [r1]

	return g_v2_pv ;
 8001e74:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <get_pv_panel_adc2_input+0xb4>)
 8001e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e7a:	4610      	mov	r0, r2
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f7fe fe73 	bl	8000b68 <__aeabi_d2uiz>
 8001e82:	4603      	mov	r3, r0
 8001e84:	b29b      	uxth	r3, r3

}
 8001e86:	4618      	mov	r0, r3
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	f3af 8000 	nop.w
 8001e90:	e734d9b4 	.word	0xe734d9b4
 8001e94:	3f4a680c 	.word	0x3f4a680c
 8001e98:	ec4ec4ec 	.word	0xec4ec4ec
 8001e9c:	40044ec4 	.word	0x40044ec4
 8001ea0:	200000c4 	.word	0x200000c4
 8001ea4:	20000248 	.word	0x20000248
 8001ea8:	408f4000 	.word	0x408f4000

08001eac <lcd_Mode_1>:

/**
 * SP Measurement
 */
void lcd_Mode_1(){
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af02      	add	r7, sp, #8
	Lcd_clear(&lcd);
 8001eb2:	4818      	ldr	r0, [pc, #96]	; (8001f14 <lcd_Mode_1+0x68>)
 8001eb4:	f7ff f888 	bl	8000fc8 <Lcd_clear>

	//first row
	Lcd_cursor(&lcd, 0, 0) ;
 8001eb8:	2200      	movs	r2, #0
 8001eba:	2100      	movs	r1, #0
 8001ebc:	4815      	ldr	r0, [pc, #84]	; (8001f14 <lcd_Mode_1+0x68>)
 8001ebe:	f7ff f869 	bl	8000f94 <Lcd_cursor>
	snprintf(g_panel_voltage_and_current, sizeof(g_panel_voltage_and_current),"V:%04dmV I:%03dmA",g_v_mpp,g_i_mpp);
 8001ec2:	4b15      	ldr	r3, [pc, #84]	; (8001f18 <lcd_Mode_1+0x6c>)
 8001ec4:	881b      	ldrh	r3, [r3, #0]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	4b14      	ldr	r3, [pc, #80]	; (8001f1c <lcd_Mode_1+0x70>)
 8001eca:	881b      	ldrh	r3, [r3, #0]
 8001ecc:	9300      	str	r3, [sp, #0]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	4a13      	ldr	r2, [pc, #76]	; (8001f20 <lcd_Mode_1+0x74>)
 8001ed2:	2111      	movs	r1, #17
 8001ed4:	4813      	ldr	r0, [pc, #76]	; (8001f24 <lcd_Mode_1+0x78>)
 8001ed6:	f005 fc7b 	bl	80077d0 <sniprintf>
	Lcd_string(&lcd, g_panel_voltage_and_current);
 8001eda:	4912      	ldr	r1, [pc, #72]	; (8001f24 <lcd_Mode_1+0x78>)
 8001edc:	480d      	ldr	r0, [pc, #52]	; (8001f14 <lcd_Mode_1+0x68>)
 8001ede:	f7ff f839 	bl	8000f54 <Lcd_string>

	//2nd row
	Lcd_cursor(&lcd, 1, 0) ;
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	480b      	ldr	r0, [pc, #44]	; (8001f14 <lcd_Mode_1+0x68>)
 8001ee8:	f7ff f854 	bl	8000f94 <Lcd_cursor>
	snprintf(g_panel_power_and_efficiency, sizeof(g_panel_power_and_efficiency),"P: %03dmW E:%03d%%",g_p_mpp, g_pv_eff);
 8001eec:	4b0e      	ldr	r3, [pc, #56]	; (8001f28 <lcd_Mode_1+0x7c>)
 8001eee:	881b      	ldrh	r3, [r3, #0]
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4b0e      	ldr	r3, [pc, #56]	; (8001f2c <lcd_Mode_1+0x80>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	4a0d      	ldr	r2, [pc, #52]	; (8001f30 <lcd_Mode_1+0x84>)
 8001efc:	2111      	movs	r1, #17
 8001efe:	480d      	ldr	r0, [pc, #52]	; (8001f34 <lcd_Mode_1+0x88>)
 8001f00:	f005 fc66 	bl	80077d0 <sniprintf>
	Lcd_string(&lcd, g_panel_power_and_efficiency);
 8001f04:	490b      	ldr	r1, [pc, #44]	; (8001f34 <lcd_Mode_1+0x88>)
 8001f06:	4803      	ldr	r0, [pc, #12]	; (8001f14 <lcd_Mode_1+0x68>)
 8001f08:	f7ff f824 	bl	8000f54 <Lcd_string>

}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20000304 	.word	0x20000304
 8001f18:	20000256 	.word	0x20000256
 8001f1c:	20000258 	.word	0x20000258
 8001f20:	08008f70 	.word	0x08008f70
 8001f24:	20000274 	.word	0x20000274
 8001f28:	2000025a 	.word	0x2000025a
 8001f2c:	2000025c 	.word	0x2000025c
 8001f30:	08008f84 	.word	0x08008f84
 8001f34:	2000029c 	.word	0x2000029c

08001f38 <lcd_Mode_2>:

/**
 * EN measurements
 */
void lcd_Mode_2(){
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af02      	add	r7, sp, #8
	//clear current LCD contents
	Lcd_clear(&lcd);
 8001f3e:	4815      	ldr	r0, [pc, #84]	; (8001f94 <lcd_Mode_2+0x5c>)
 8001f40:	f7ff f842 	bl	8000fc8 <Lcd_clear>
	//first row
	Lcd_cursor(&lcd, 0, 0) ;
 8001f44:	2200      	movs	r2, #0
 8001f46:	2100      	movs	r1, #0
 8001f48:	4812      	ldr	r0, [pc, #72]	; (8001f94 <lcd_Mode_2+0x5c>)
 8001f4a:	f7ff f823 	bl	8000f94 <Lcd_cursor>
	snprintf(g_envir_measure_temperatures, sizeof(g_envir_measure_temperatures),"AMB:%03dC SP:%03dC",g_temp_in_deg,g_lmt01_sens_temp);
 8001f4e:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <lcd_Mode_2+0x60>)
 8001f50:	881b      	ldrh	r3, [r3, #0]
 8001f52:	461a      	mov	r2, r3
 8001f54:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <lcd_Mode_2+0x64>)
 8001f56:	881b      	ldrh	r3, [r3, #0]
 8001f58:	9300      	str	r3, [sp, #0]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	4a10      	ldr	r2, [pc, #64]	; (8001fa0 <lcd_Mode_2+0x68>)
 8001f5e:	2111      	movs	r1, #17
 8001f60:	4810      	ldr	r0, [pc, #64]	; (8001fa4 <lcd_Mode_2+0x6c>)
 8001f62:	f005 fc35 	bl	80077d0 <sniprintf>
	Lcd_string(&lcd, g_envir_measure_temperatures);
 8001f66:	490f      	ldr	r1, [pc, #60]	; (8001fa4 <lcd_Mode_2+0x6c>)
 8001f68:	480a      	ldr	r0, [pc, #40]	; (8001f94 <lcd_Mode_2+0x5c>)
 8001f6a:	f7fe fff3 	bl	8000f54 <Lcd_string>

	//scale lux value: [0: 30000]?
	Lcd_cursor(&lcd, 1,0);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2101      	movs	r1, #1
 8001f72:	4808      	ldr	r0, [pc, #32]	; (8001f94 <lcd_Mode_2+0x5c>)
 8001f74:	f7ff f80e 	bl	8000f94 <Lcd_cursor>
	snprintf(g_lcd_lux_val, sizeof(g_lcd_lux_val),"LUX:%05d",g_get_lxd_value);
 8001f78:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <lcd_Mode_2+0x70>)
 8001f7a:	881b      	ldrh	r3, [r3, #0]
 8001f7c:	4a0b      	ldr	r2, [pc, #44]	; (8001fac <lcd_Mode_2+0x74>)
 8001f7e:	210a      	movs	r1, #10
 8001f80:	480b      	ldr	r0, [pc, #44]	; (8001fb0 <lcd_Mode_2+0x78>)
 8001f82:	f005 fc25 	bl	80077d0 <sniprintf>
	Lcd_string(&lcd,g_lcd_lux_val);
 8001f86:	490a      	ldr	r1, [pc, #40]	; (8001fb0 <lcd_Mode_2+0x78>)
 8001f88:	4802      	ldr	r0, [pc, #8]	; (8001f94 <lcd_Mode_2+0x5c>)
 8001f8a:	f7fe ffe3 	bl	8000f54 <Lcd_string>
}
 8001f8e:	bf00      	nop
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	20000304 	.word	0x20000304
 8001f98:	20000218 	.word	0x20000218
 8001f9c:	2000035a 	.word	0x2000035a
 8001fa0:	08008fb4 	.word	0x08008fb4
 8001fa4:	20000288 	.word	0x20000288
 8001fa8:	20000230 	.word	0x20000230
 8001fac:	08008fc8 	.word	0x08008fc8
 8001fb0:	20000268 	.word	0x20000268

08001fb4 <lcd_Mode_3>:

/**
 * RTC measurements
 */
void lcd_Mode_3(){
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af02      	add	r7, sp, #8
	Lcd_clear(&lcd);
 8001fba:	4821      	ldr	r0, [pc, #132]	; (8002040 <lcd_Mode_3+0x8c>)
 8001fbc:	f7ff f804 	bl	8000fc8 <Lcd_clear>

	//display the updated time and date
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN) ;
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	4920      	ldr	r1, [pc, #128]	; (8002044 <lcd_Mode_3+0x90>)
 8001fc4:	4820      	ldr	r0, [pc, #128]	; (8002048 <lcd_Mode_3+0x94>)
 8001fc6:	f003 faf1 	bl	80055ac <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN) ;
 8001fca:	2200      	movs	r2, #0
 8001fcc:	491f      	ldr	r1, [pc, #124]	; (800204c <lcd_Mode_3+0x98>)
 8001fce:	481e      	ldr	r0, [pc, #120]	; (8002048 <lcd_Mode_3+0x94>)
 8001fd0:	f003 fbce 	bl	8005770 <HAL_RTC_GetDate>

	snprintf(g_date, sizeof(g_date),"%02d/%02d/20%02d",sDate.Date, sDate.Month,sDate.Year);
 8001fd4:	4b1d      	ldr	r3, [pc, #116]	; (800204c <lcd_Mode_3+0x98>)
 8001fd6:	789b      	ldrb	r3, [r3, #2]
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4b1c      	ldr	r3, [pc, #112]	; (800204c <lcd_Mode_3+0x98>)
 8001fdc:	785b      	ldrb	r3, [r3, #1]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	4b1a      	ldr	r3, [pc, #104]	; (800204c <lcd_Mode_3+0x98>)
 8001fe2:	78db      	ldrb	r3, [r3, #3]
 8001fe4:	9301      	str	r3, [sp, #4]
 8001fe6:	9200      	str	r2, [sp, #0]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	4a19      	ldr	r2, [pc, #100]	; (8002050 <lcd_Mode_3+0x9c>)
 8001fec:	210b      	movs	r1, #11
 8001fee:	4819      	ldr	r0, [pc, #100]	; (8002054 <lcd_Mode_3+0xa0>)
 8001ff0:	f005 fbee 	bl	80077d0 <sniprintf>
	snprintf(g_time, sizeof(g_time),"%02d:%02d:%02d",sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001ff4:	4b13      	ldr	r3, [pc, #76]	; (8002044 <lcd_Mode_3+0x90>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4b12      	ldr	r3, [pc, #72]	; (8002044 <lcd_Mode_3+0x90>)
 8001ffc:	785b      	ldrb	r3, [r3, #1]
 8001ffe:	461a      	mov	r2, r3
 8002000:	4b10      	ldr	r3, [pc, #64]	; (8002044 <lcd_Mode_3+0x90>)
 8002002:	789b      	ldrb	r3, [r3, #2]
 8002004:	9301      	str	r3, [sp, #4]
 8002006:	9200      	str	r2, [sp, #0]
 8002008:	460b      	mov	r3, r1
 800200a:	4a13      	ldr	r2, [pc, #76]	; (8002058 <lcd_Mode_3+0xa4>)
 800200c:	2109      	movs	r1, #9
 800200e:	4813      	ldr	r0, [pc, #76]	; (800205c <lcd_Mode_3+0xa8>)
 8002010:	f005 fbde 	bl	80077d0 <sniprintf>
	//display date
	Lcd_cursor(&lcd, 0, 0) ;
 8002014:	2200      	movs	r2, #0
 8002016:	2100      	movs	r1, #0
 8002018:	4809      	ldr	r0, [pc, #36]	; (8002040 <lcd_Mode_3+0x8c>)
 800201a:	f7fe ffbb 	bl	8000f94 <Lcd_cursor>
	Lcd_string(&lcd, g_date);
 800201e:	490d      	ldr	r1, [pc, #52]	; (8002054 <lcd_Mode_3+0xa0>)
 8002020:	4807      	ldr	r0, [pc, #28]	; (8002040 <lcd_Mode_3+0x8c>)
 8002022:	f7fe ff97 	bl	8000f54 <Lcd_string>

	//display time - second row
	Lcd_cursor(&lcd, 1, 0) ;
 8002026:	2200      	movs	r2, #0
 8002028:	2101      	movs	r1, #1
 800202a:	4805      	ldr	r0, [pc, #20]	; (8002040 <lcd_Mode_3+0x8c>)
 800202c:	f7fe ffb2 	bl	8000f94 <Lcd_cursor>
	Lcd_string(&lcd, g_time);
 8002030:	490a      	ldr	r1, [pc, #40]	; (800205c <lcd_Mode_3+0xa8>)
 8002032:	4803      	ldr	r0, [pc, #12]	; (8002040 <lcd_Mode_3+0x8c>)
 8002034:	f7fe ff8e 	bl	8000f54 <Lcd_string>
}
 8002038:	bf00      	nop
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	20000304 	.word	0x20000304
 8002044:	2000031c 	.word	0x2000031c
 8002048:	2000010c 	.word	0x2000010c
 800204c:	20000330 	.word	0x20000330
 8002050:	08008fd4 	.word	0x08008fd4
 8002054:	20000338 	.word	0x20000338
 8002058:	08008fe8 	.word	0x08008fe8
 800205c:	20000344 	.word	0x20000344

08002060 <change_lcd_display_mode>:
 * Changing the view is independent of the system ,and does not change any
 * state of the system
 */

uint8_t default_switch_mode = 1;
void change_lcd_display_mode(){
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af02      	add	r7, sp, #8
	//display default display mode
	if(g_lcd_default_mode == 1){
 8002066:	4b54      	ldr	r3, [pc, #336]	; (80021b8 <change_lcd_display_mode+0x158>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d15c      	bne.n	8002128 <change_lcd_display_mode+0xc8>

		g_lcd_default_mode = 0;
 800206e:	4b52      	ldr	r3, [pc, #328]	; (80021b8 <change_lcd_display_mode+0x158>)
 8002070:	2200      	movs	r2, #0
 8002072:	701a      	strb	r2, [r3, #0]

		//update the correspoding lcd mode
		g_lcd_mode =1 ;
 8002074:	4b51      	ldr	r3, [pc, #324]	; (80021bc <change_lcd_display_mode+0x15c>)
 8002076:	2201      	movs	r2, #1
 8002078:	701a      	strb	r2, [r3, #0]

		Lcd_clear(&lcd);
 800207a:	4851      	ldr	r0, [pc, #324]	; (80021c0 <change_lcd_display_mode+0x160>)
 800207c:	f7fe ffa4 	bl	8000fc8 <Lcd_clear>

		//first row
		Lcd_cursor(&lcd, 0, 0) ;
 8002080:	2200      	movs	r2, #0
 8002082:	2100      	movs	r1, #0
 8002084:	484e      	ldr	r0, [pc, #312]	; (80021c0 <change_lcd_display_mode+0x160>)
 8002086:	f7fe ff85 	bl	8000f94 <Lcd_cursor>
		snprintf(g_panel_voltage_and_current, sizeof(g_panel_voltage_and_current),"V:%04dmV I:%03dmA",g_v_mpp,g_i_mpp);
 800208a:	4b4e      	ldr	r3, [pc, #312]	; (80021c4 <change_lcd_display_mode+0x164>)
 800208c:	881b      	ldrh	r3, [r3, #0]
 800208e:	461a      	mov	r2, r3
 8002090:	4b4d      	ldr	r3, [pc, #308]	; (80021c8 <change_lcd_display_mode+0x168>)
 8002092:	881b      	ldrh	r3, [r3, #0]
 8002094:	9300      	str	r3, [sp, #0]
 8002096:	4613      	mov	r3, r2
 8002098:	4a4c      	ldr	r2, [pc, #304]	; (80021cc <change_lcd_display_mode+0x16c>)
 800209a:	2111      	movs	r1, #17
 800209c:	484c      	ldr	r0, [pc, #304]	; (80021d0 <change_lcd_display_mode+0x170>)
 800209e:	f005 fb97 	bl	80077d0 <sniprintf>
		Lcd_string(&lcd, g_panel_voltage_and_current);
 80020a2:	494b      	ldr	r1, [pc, #300]	; (80021d0 <change_lcd_display_mode+0x170>)
 80020a4:	4846      	ldr	r0, [pc, #280]	; (80021c0 <change_lcd_display_mode+0x160>)
 80020a6:	f7fe ff55 	bl	8000f54 <Lcd_string>

		//2nd row
		Lcd_cursor(&lcd, 1, 0) ;
 80020aa:	2200      	movs	r2, #0
 80020ac:	2101      	movs	r1, #1
 80020ae:	4844      	ldr	r0, [pc, #272]	; (80021c0 <change_lcd_display_mode+0x160>)
 80020b0:	f7fe ff70 	bl	8000f94 <Lcd_cursor>
		snprintf(g_panel_power_and_efficiency, sizeof(g_panel_power_and_efficiency),"P: %03dmW E:%03d%%",g_p_mpp, g_pv_eff);
 80020b4:	4b47      	ldr	r3, [pc, #284]	; (80021d4 <change_lcd_display_mode+0x174>)
 80020b6:	881b      	ldrh	r3, [r3, #0]
 80020b8:	461a      	mov	r2, r3
 80020ba:	4b47      	ldr	r3, [pc, #284]	; (80021d8 <change_lcd_display_mode+0x178>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	9300      	str	r3, [sp, #0]
 80020c0:	4613      	mov	r3, r2
 80020c2:	4a46      	ldr	r2, [pc, #280]	; (80021dc <change_lcd_display_mode+0x17c>)
 80020c4:	2111      	movs	r1, #17
 80020c6:	4846      	ldr	r0, [pc, #280]	; (80021e0 <change_lcd_display_mode+0x180>)
 80020c8:	f005 fb82 	bl	80077d0 <sniprintf>
		Lcd_string(&lcd, g_panel_power_and_efficiency);
 80020cc:	4944      	ldr	r1, [pc, #272]	; (80021e0 <change_lcd_display_mode+0x180>)
 80020ce:	483c      	ldr	r0, [pc, #240]	; (80021c0 <change_lcd_display_mode+0x160>)
 80020d0:	f7fe ff40 	bl	8000f54 <Lcd_string>

		//get default date and time
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80020d4:	2200      	movs	r2, #0
 80020d6:	4943      	ldr	r1, [pc, #268]	; (80021e4 <change_lcd_display_mode+0x184>)
 80020d8:	4843      	ldr	r0, [pc, #268]	; (80021e8 <change_lcd_display_mode+0x188>)
 80020da:	f003 fa67 	bl	80055ac <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN) ;
 80020de:	2200      	movs	r2, #0
 80020e0:	4942      	ldr	r1, [pc, #264]	; (80021ec <change_lcd_display_mode+0x18c>)
 80020e2:	4841      	ldr	r0, [pc, #260]	; (80021e8 <change_lcd_display_mode+0x188>)
 80020e4:	f003 fb44 	bl	8005770 <HAL_RTC_GetDate>

		snprintf(g_date, sizeof(g_date),"%02d/%02d/20%02d",sDate.Date, sDate.Month,sDate.Year);
 80020e8:	4b40      	ldr	r3, [pc, #256]	; (80021ec <change_lcd_display_mode+0x18c>)
 80020ea:	789b      	ldrb	r3, [r3, #2]
 80020ec:	4619      	mov	r1, r3
 80020ee:	4b3f      	ldr	r3, [pc, #252]	; (80021ec <change_lcd_display_mode+0x18c>)
 80020f0:	785b      	ldrb	r3, [r3, #1]
 80020f2:	461a      	mov	r2, r3
 80020f4:	4b3d      	ldr	r3, [pc, #244]	; (80021ec <change_lcd_display_mode+0x18c>)
 80020f6:	78db      	ldrb	r3, [r3, #3]
 80020f8:	9301      	str	r3, [sp, #4]
 80020fa:	9200      	str	r2, [sp, #0]
 80020fc:	460b      	mov	r3, r1
 80020fe:	4a3c      	ldr	r2, [pc, #240]	; (80021f0 <change_lcd_display_mode+0x190>)
 8002100:	210b      	movs	r1, #11
 8002102:	483c      	ldr	r0, [pc, #240]	; (80021f4 <change_lcd_display_mode+0x194>)
 8002104:	f005 fb64 	bl	80077d0 <sniprintf>
		snprintf(g_time, sizeof(g_time),"%02d:%02d:%02d",sTime.Hours, sTime.Minutes, sTime.Seconds);
 8002108:	4b36      	ldr	r3, [pc, #216]	; (80021e4 <change_lcd_display_mode+0x184>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	4619      	mov	r1, r3
 800210e:	4b35      	ldr	r3, [pc, #212]	; (80021e4 <change_lcd_display_mode+0x184>)
 8002110:	785b      	ldrb	r3, [r3, #1]
 8002112:	461a      	mov	r2, r3
 8002114:	4b33      	ldr	r3, [pc, #204]	; (80021e4 <change_lcd_display_mode+0x184>)
 8002116:	789b      	ldrb	r3, [r3, #2]
 8002118:	9301      	str	r3, [sp, #4]
 800211a:	9200      	str	r2, [sp, #0]
 800211c:	460b      	mov	r3, r1
 800211e:	4a36      	ldr	r2, [pc, #216]	; (80021f8 <change_lcd_display_mode+0x198>)
 8002120:	2109      	movs	r1, #9
 8002122:	4836      	ldr	r0, [pc, #216]	; (80021fc <change_lcd_display_mode+0x19c>)
 8002124:	f005 fb54 	bl	80077d0 <sniprintf>

	}


	//dont change lcd modes when updating the RTC
	if(g_update_RTC ==0){
 8002128:	4b35      	ldr	r3, [pc, #212]	; (8002200 <change_lcd_display_mode+0x1a0>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d102      	bne.n	8002136 <change_lcd_display_mode+0xd6>
		lcd_display_mode_change_on_button_press() ;
 8002130:	f000 f8b4 	bl	800229c <lcd_display_mode_change_on_button_press>
 8002134:	e006      	b.n	8002144 <change_lcd_display_mode+0xe4>

	}
	else{
		if(g_left_button_pressed == 1){
 8002136:	4b33      	ldr	r3, [pc, #204]	; (8002204 <change_lcd_display_mode+0x1a4>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d102      	bne.n	8002144 <change_lcd_display_mode+0xe4>
			g_left_button_pressed = 0 ; //if left button pressed when updating the RTC parameteers
 800213e:	4b31      	ldr	r3, [pc, #196]	; (8002204 <change_lcd_display_mode+0x1a4>)
 8002140:	2200      	movs	r2, #0
 8002142:	701a      	strb	r2, [r3, #0]
		}
	}


	if(display_result == 1){
 8002144:	4b30      	ldr	r3, [pc, #192]	; (8002208 <change_lcd_display_mode+0x1a8>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d120      	bne.n	800218e <change_lcd_display_mode+0x12e>
		display_result = 0;
 800214c:	4b2e      	ldr	r3, [pc, #184]	; (8002208 <change_lcd_display_mode+0x1a8>)
 800214e:	2200      	movs	r2, #0
 8002150:	701a      	strb	r2, [r3, #0]


		if(g_lcd_mode == 2){//display mode 2: EN measurement
 8002152:	4b1a      	ldr	r3, [pc, #104]	; (80021bc <change_lcd_display_mode+0x15c>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	2b02      	cmp	r3, #2
 8002158:	d105      	bne.n	8002166 <change_lcd_display_mode+0x106>
			display_result = 0; //display contents once only
 800215a:	4b2b      	ldr	r3, [pc, #172]	; (8002208 <change_lcd_display_mode+0x1a8>)
 800215c:	2200      	movs	r2, #0
 800215e:	701a      	strb	r2, [r3, #0]

			lcd_Mode_2() ;
 8002160:	f7ff feea 	bl	8001f38 <lcd_Mode_2>
		}

		change_between_dispplay_modes();
	}

}
 8002164:	e024      	b.n	80021b0 <change_lcd_display_mode+0x150>
		else if(g_lcd_mode == 1 ){//disply mode 1: SP measurements
 8002166:	4b15      	ldr	r3, [pc, #84]	; (80021bc <change_lcd_display_mode+0x15c>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d105      	bne.n	800217a <change_lcd_display_mode+0x11a>
			display_result = 0 ; //display content only once
 800216e:	4b26      	ldr	r3, [pc, #152]	; (8002208 <change_lcd_display_mode+0x1a8>)
 8002170:	2200      	movs	r2, #0
 8002172:	701a      	strb	r2, [r3, #0]
			lcd_Mode_1() ;
 8002174:	f7ff fe9a 	bl	8001eac <lcd_Mode_1>
}
 8002178:	e01a      	b.n	80021b0 <change_lcd_display_mode+0x150>
			if(g_lcd_mode == 3){ //display mode 3: RTC
 800217a:	4b10      	ldr	r3, [pc, #64]	; (80021bc <change_lcd_display_mode+0x15c>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	2b03      	cmp	r3, #3
 8002180:	d116      	bne.n	80021b0 <change_lcd_display_mode+0x150>
				display_result = 0 ; //display content only once
 8002182:	4b21      	ldr	r3, [pc, #132]	; (8002208 <change_lcd_display_mode+0x1a8>)
 8002184:	2200      	movs	r2, #0
 8002186:	701a      	strb	r2, [r3, #0]
				lcd_Mode_3();
 8002188:	f7ff ff14 	bl	8001fb4 <lcd_Mode_3>
}
 800218c:	e010      	b.n	80021b0 <change_lcd_display_mode+0x150>
	else if(display_result ==0 && g_lcd_mode == 4 ){
 800218e:	4b1e      	ldr	r3, [pc, #120]	; (8002208 <change_lcd_display_mode+0x1a8>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10c      	bne.n	80021b0 <change_lcd_display_mode+0x150>
 8002196:	4b09      	ldr	r3, [pc, #36]	; (80021bc <change_lcd_display_mode+0x15c>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	2b04      	cmp	r3, #4
 800219c:	d108      	bne.n	80021b0 <change_lcd_display_mode+0x150>
		if(default_switch_mode == 1){
 800219e:	4b1b      	ldr	r3, [pc, #108]	; (800220c <change_lcd_display_mode+0x1ac>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d102      	bne.n	80021ac <change_lcd_display_mode+0x14c>
			default_switch_mode = 0;
 80021a6:	4b19      	ldr	r3, [pc, #100]	; (800220c <change_lcd_display_mode+0x1ac>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	701a      	strb	r2, [r3, #0]
		change_between_dispplay_modes();
 80021ac:	f000 f830 	bl	8002210 <change_between_dispplay_modes>
}
 80021b0:	bf00      	nop
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	20000013 	.word	0x20000013
 80021bc:	20000302 	.word	0x20000302
 80021c0:	20000304 	.word	0x20000304
 80021c4:	20000256 	.word	0x20000256
 80021c8:	20000258 	.word	0x20000258
 80021cc:	08008f70 	.word	0x08008f70
 80021d0:	20000274 	.word	0x20000274
 80021d4:	2000025a 	.word	0x2000025a
 80021d8:	2000025c 	.word	0x2000025c
 80021dc:	08008f84 	.word	0x08008f84
 80021e0:	2000029c 	.word	0x2000029c
 80021e4:	2000031c 	.word	0x2000031c
 80021e8:	2000010c 	.word	0x2000010c
 80021ec:	20000330 	.word	0x20000330
 80021f0:	08008fd4 	.word	0x08008fd4
 80021f4:	20000338 	.word	0x20000338
 80021f8:	08008fe8 	.word	0x08008fe8
 80021fc:	20000344 	.word	0x20000344
 8002200:	20000334 	.word	0x20000334
 8002204:	20000370 	.word	0x20000370
 8002208:	20000303 	.word	0x20000303
 800220c:	20000030 	.word	0x20000030

08002210 <change_between_dispplay_modes>:

uint32_t time_passed_between_mode = 0 ;
uint8_t display_mode_x = 2; //start at mode 2

void change_between_dispplay_modes(){
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0

	if(HAL_GetTick()- time_passed_between_mode >= 2000 && display_mode_x == 1){
 8002214:	f001 fb92 	bl	800393c <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	4b1e      	ldr	r3, [pc, #120]	; (8002294 <change_between_dispplay_modes+0x84>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002224:	d309      	bcc.n	800223a <change_between_dispplay_modes+0x2a>
 8002226:	4b1c      	ldr	r3, [pc, #112]	; (8002298 <change_between_dispplay_modes+0x88>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d105      	bne.n	800223a <change_between_dispplay_modes+0x2a>
		display_mode_x = 2 ;
 800222e:	4b1a      	ldr	r3, [pc, #104]	; (8002298 <change_between_dispplay_modes+0x88>)
 8002230:	2202      	movs	r2, #2
 8002232:	701a      	strb	r2, [r3, #0]
//		time_passed_between_mode = HAL_GetTick() ;
		lcd_Mode_1() ;
 8002234:	f7ff fe3a 	bl	8001eac <lcd_Mode_1>
 8002238:	e011      	b.n	800225e <change_between_dispplay_modes+0x4e>

	}

	else if(HAL_GetTick()- time_passed_between_mode >=4000 && display_mode_x == 2){
 800223a:	f001 fb7f 	bl	800393c <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	4b14      	ldr	r3, [pc, #80]	; (8002294 <change_between_dispplay_modes+0x84>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800224a:	d308      	bcc.n	800225e <change_between_dispplay_modes+0x4e>
 800224c:	4b12      	ldr	r3, [pc, #72]	; (8002298 <change_between_dispplay_modes+0x88>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	2b02      	cmp	r3, #2
 8002252:	d104      	bne.n	800225e <change_between_dispplay_modes+0x4e>
		display_mode_x = 3 ;
 8002254:	4b10      	ldr	r3, [pc, #64]	; (8002298 <change_between_dispplay_modes+0x88>)
 8002256:	2203      	movs	r2, #3
 8002258:	701a      	strb	r2, [r3, #0]
//		time_passed_between_mode = HAL_GetTick() ;
		lcd_Mode_2();
 800225a:	f7ff fe6d 	bl	8001f38 <lcd_Mode_2>

	}

	if(HAL_GetTick()- time_passed_between_mode >=6000 && display_mode_x == 3){
 800225e:	f001 fb6d 	bl	800393c <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <change_between_dispplay_modes+0x84>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	f241 726f 	movw	r2, #5999	; 0x176f
 800226e:	4293      	cmp	r3, r2
 8002270:	d90d      	bls.n	800228e <change_between_dispplay_modes+0x7e>
 8002272:	4b09      	ldr	r3, [pc, #36]	; (8002298 <change_between_dispplay_modes+0x88>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b03      	cmp	r3, #3
 8002278:	d109      	bne.n	800228e <change_between_dispplay_modes+0x7e>
		display_mode_x= 1;
 800227a:	4b07      	ldr	r3, [pc, #28]	; (8002298 <change_between_dispplay_modes+0x88>)
 800227c:	2201      	movs	r2, #1
 800227e:	701a      	strb	r2, [r3, #0]
		time_passed_between_mode = HAL_GetTick() ;
 8002280:	f001 fb5c 	bl	800393c <HAL_GetTick>
 8002284:	4603      	mov	r3, r0
 8002286:	4a03      	ldr	r2, [pc, #12]	; (8002294 <change_between_dispplay_modes+0x84>)
 8002288:	6013      	str	r3, [r2, #0]
		lcd_Mode_3() ;
 800228a:	f7ff fe93 	bl	8001fb4 <lcd_Mode_3>
//		time_passed_between_mode = HAL_GetTick() ;
//		display_mode_x = 1 ;
//
//	}

}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	2000036c 	.word	0x2000036c
 8002298:	20000031 	.word	0x20000031

0800229c <lcd_display_mode_change_on_button_press>:
/**
 * This function works to change the LCD display modes when the left button is pressed
 */
void lcd_display_mode_change_on_button_press(){
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0

	//update state based on button press - DONT UPDATE ANYS STATES WHILE MEASURING
	if(g_left_button_pressed == 1 && g_EN_measure_LCD_display ==0 && g_SP_measure_LCD_diplay ==0 && g_SP_measure !=1 && g_EN_measure !=1){
 80022a0:	4b36      	ldr	r3, [pc, #216]	; (800237c <lcd_display_mode_change_on_button_press+0xe0>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d123      	bne.n	80022f0 <lcd_display_mode_change_on_button_press+0x54>
 80022a8:	4b35      	ldr	r3, [pc, #212]	; (8002380 <lcd_display_mode_change_on_button_press+0xe4>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d11f      	bne.n	80022f0 <lcd_display_mode_change_on_button_press+0x54>
 80022b0:	4b34      	ldr	r3, [pc, #208]	; (8002384 <lcd_display_mode_change_on_button_press+0xe8>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d11b      	bne.n	80022f0 <lcd_display_mode_change_on_button_press+0x54>
 80022b8:	4b33      	ldr	r3, [pc, #204]	; (8002388 <lcd_display_mode_change_on_button_press+0xec>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d017      	beq.n	80022f0 <lcd_display_mode_change_on_button_press+0x54>
 80022c0:	4b32      	ldr	r3, [pc, #200]	; (800238c <lcd_display_mode_change_on_button_press+0xf0>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d013      	beq.n	80022f0 <lcd_display_mode_change_on_button_press+0x54>

		//display/update lcd results
		display_result= 1 ;
 80022c8:	4b31      	ldr	r3, [pc, #196]	; (8002390 <lcd_display_mode_change_on_button_press+0xf4>)
 80022ca:	2201      	movs	r2, #1
 80022cc:	701a      	strb	r2, [r3, #0]

		g_left_button_pressed = 0;
 80022ce:	4b2b      	ldr	r3, [pc, #172]	; (800237c <lcd_display_mode_change_on_button_press+0xe0>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	701a      	strb	r2, [r3, #0]
		g_lcd_mode ++;
 80022d4:	4b2f      	ldr	r3, [pc, #188]	; (8002394 <lcd_display_mode_change_on_button_press+0xf8>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	3301      	adds	r3, #1
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	4b2d      	ldr	r3, [pc, #180]	; (8002394 <lcd_display_mode_change_on_button_press+0xf8>)
 80022de:	701a      	strb	r2, [r3, #0]

		//cycles between the mode
		if(g_lcd_mode>4){
 80022e0:	4b2c      	ldr	r3, [pc, #176]	; (8002394 <lcd_display_mode_change_on_button_press+0xf8>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	2b04      	cmp	r3, #4
 80022e6:	d944      	bls.n	8002372 <lcd_display_mode_change_on_button_press+0xd6>
			g_lcd_mode = 1 ;
 80022e8:	4b2a      	ldr	r3, [pc, #168]	; (8002394 <lcd_display_mode_change_on_button_press+0xf8>)
 80022ea:	2201      	movs	r2, #1
 80022ec:	701a      	strb	r2, [r3, #0]
		if(g_lcd_mode>4){
 80022ee:	e040      	b.n	8002372 <lcd_display_mode_change_on_button_press+0xd6>
		}
	}

	//update lcd state based on  EN stop command
	else if(g_left_button_pressed == 0 && g_EN_measure_LCD_display == 1 && g_SP_measure_LCD_diplay ==0  && g_SP_measure !=1 && g_EN_measure !=1 ){
 80022f0:	4b22      	ldr	r3, [pc, #136]	; (800237c <lcd_display_mode_change_on_button_press+0xe0>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d119      	bne.n	800232c <lcd_display_mode_change_on_button_press+0x90>
 80022f8:	4b21      	ldr	r3, [pc, #132]	; (8002380 <lcd_display_mode_change_on_button_press+0xe4>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d115      	bne.n	800232c <lcd_display_mode_change_on_button_press+0x90>
 8002300:	4b20      	ldr	r3, [pc, #128]	; (8002384 <lcd_display_mode_change_on_button_press+0xe8>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d111      	bne.n	800232c <lcd_display_mode_change_on_button_press+0x90>
 8002308:	4b1f      	ldr	r3, [pc, #124]	; (8002388 <lcd_display_mode_change_on_button_press+0xec>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d00d      	beq.n	800232c <lcd_display_mode_change_on_button_press+0x90>
 8002310:	4b1e      	ldr	r3, [pc, #120]	; (800238c <lcd_display_mode_change_on_button_press+0xf0>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d009      	beq.n	800232c <lcd_display_mode_change_on_button_press+0x90>
		g_EN_measure_LCD_display = 0 ;
 8002318:	4b19      	ldr	r3, [pc, #100]	; (8002380 <lcd_display_mode_change_on_button_press+0xe4>)
 800231a:	2200      	movs	r2, #0
 800231c:	701a      	strb	r2, [r3, #0]

		g_lcd_mode = 2; //display EN measurements
 800231e:	4b1d      	ldr	r3, [pc, #116]	; (8002394 <lcd_display_mode_change_on_button_press+0xf8>)
 8002320:	2202      	movs	r2, #2
 8002322:	701a      	strb	r2, [r3, #0]

		//display/update lcd results
		display_result= 1 ;
 8002324:	4b1a      	ldr	r3, [pc, #104]	; (8002390 <lcd_display_mode_change_on_button_press+0xf4>)
 8002326:	2201      	movs	r2, #1
 8002328:	701a      	strb	r2, [r3, #0]
 800232a:	e022      	b.n	8002372 <lcd_display_mode_change_on_button_press+0xd6>
	}

	//update LCD based on SP command
	else if(g_left_button_pressed ==0 && g_EN_measure_LCD_display== 0 && g_SP_measure_LCD_diplay== 1  && g_SP_measure !=1 && g_EN_measure !=1){
 800232c:	4b13      	ldr	r3, [pc, #76]	; (800237c <lcd_display_mode_change_on_button_press+0xe0>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d119      	bne.n	8002368 <lcd_display_mode_change_on_button_press+0xcc>
 8002334:	4b12      	ldr	r3, [pc, #72]	; (8002380 <lcd_display_mode_change_on_button_press+0xe4>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d115      	bne.n	8002368 <lcd_display_mode_change_on_button_press+0xcc>
 800233c:	4b11      	ldr	r3, [pc, #68]	; (8002384 <lcd_display_mode_change_on_button_press+0xe8>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d111      	bne.n	8002368 <lcd_display_mode_change_on_button_press+0xcc>
 8002344:	4b10      	ldr	r3, [pc, #64]	; (8002388 <lcd_display_mode_change_on_button_press+0xec>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d00d      	beq.n	8002368 <lcd_display_mode_change_on_button_press+0xcc>
 800234c:	4b0f      	ldr	r3, [pc, #60]	; (800238c <lcd_display_mode_change_on_button_press+0xf0>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d009      	beq.n	8002368 <lcd_display_mode_change_on_button_press+0xcc>
		g_SP_measure_LCD_diplay =0;
 8002354:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <lcd_display_mode_change_on_button_press+0xe8>)
 8002356:	2200      	movs	r2, #0
 8002358:	701a      	strb	r2, [r3, #0]

		g_lcd_mode = 1; //display SP measurements
 800235a:	4b0e      	ldr	r3, [pc, #56]	; (8002394 <lcd_display_mode_change_on_button_press+0xf8>)
 800235c:	2201      	movs	r2, #1
 800235e:	701a      	strb	r2, [r3, #0]

		//display/update lcd results
		display_result= 1 ;
 8002360:	4b0b      	ldr	r3, [pc, #44]	; (8002390 <lcd_display_mode_change_on_button_press+0xf4>)
 8002362:	2201      	movs	r2, #1
 8002364:	701a      	strb	r2, [r3, #0]
 8002366:	e004      	b.n	8002372 <lcd_display_mode_change_on_button_press+0xd6>
	}

	//otherwise dont update display maode
	else{
		g_lcd_mode = g_lcd_mode ;
 8002368:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <lcd_display_mode_change_on_button_press+0xf8>)
 800236a:	781a      	ldrb	r2, [r3, #0]
 800236c:	4b09      	ldr	r3, [pc, #36]	; (8002394 <lcd_display_mode_change_on_button_press+0xf8>)
 800236e:	701a      	strb	r2, [r3, #0]
	}

}
 8002370:	bf00      	nop
 8002372:	bf00      	nop
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	20000370 	.word	0x20000370
 8002380:	200002c8 	.word	0x200002c8
 8002384:	200002d3 	.word	0x200002d3
 8002388:	200002d2 	.word	0x200002d2
 800238c:	200002c7 	.word	0x200002c7
 8002390:	20000303 	.word	0x20000303
 8002394:	20000302 	.word	0x20000302

08002398 <RTC_date_and_time_update>:
 *The system is designed such that until all the parameters are set ,no other state is execessible.
 *Once the Menu state is entered. It can only be exited on when the left button is pressed. This restores normal system state functionality
 *The top and bottom measurements can be used to update /start or stop the measurement sequence
 */

void RTC_date_and_time_update(uint8_t paramx){
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af02      	add	r7, sp, #8
 800239e:	4603      	mov	r3, r0
 80023a0:	71fb      	strb	r3, [r7, #7]

	//IF UPDATING RTC VALUES - do not use top button and bottom button for measurement sequence

	if(paramx == 1){ //update date
 80023a2:	79fb      	ldrb	r3, [r7, #7]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d16d      	bne.n	8002484 <RTC_date_and_time_update+0xec>

		//top button pressed - increment date
		if(g_top_button_pressed== 1){
 80023a8:	4b6f      	ldr	r3, [pc, #444]	; (8002568 <RTC_date_and_time_update+0x1d0>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d131      	bne.n	8002414 <RTC_date_and_time_update+0x7c>
			sDate.Date++ ;
 80023b0:	4b6e      	ldr	r3, [pc, #440]	; (800256c <RTC_date_and_time_update+0x1d4>)
 80023b2:	789b      	ldrb	r3, [r3, #2]
 80023b4:	3301      	adds	r3, #1
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	4b6c      	ldr	r3, [pc, #432]	; (800256c <RTC_date_and_time_update+0x1d4>)
 80023ba:	709a      	strb	r2, [r3, #2]

			//oveflow
			if(sDate.Date > 30){
 80023bc:	4b6b      	ldr	r3, [pc, #428]	; (800256c <RTC_date_and_time_update+0x1d4>)
 80023be:	789b      	ldrb	r3, [r3, #2]
 80023c0:	2b1e      	cmp	r3, #30
 80023c2:	d902      	bls.n	80023ca <RTC_date_and_time_update+0x32>
				sDate.Date = 1 ;
 80023c4:	4b69      	ldr	r3, [pc, #420]	; (800256c <RTC_date_and_time_update+0x1d4>)
 80023c6:	2201      	movs	r2, #1
 80023c8:	709a      	strb	r2, [r3, #2]
			}

			g_top_button_pressed =0 ;
 80023ca:	4b67      	ldr	r3, [pc, #412]	; (8002568 <RTC_date_and_time_update+0x1d0>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	701a      	strb	r2, [r3, #0]

			//display date - first row
			snprintf(g_date, sizeof(g_date),"%02d/%02d/20%02d",sDate.Date, sDate.Month,sDate.Year);
 80023d0:	4b66      	ldr	r3, [pc, #408]	; (800256c <RTC_date_and_time_update+0x1d4>)
 80023d2:	789b      	ldrb	r3, [r3, #2]
 80023d4:	4619      	mov	r1, r3
 80023d6:	4b65      	ldr	r3, [pc, #404]	; (800256c <RTC_date_and_time_update+0x1d4>)
 80023d8:	785b      	ldrb	r3, [r3, #1]
 80023da:	461a      	mov	r2, r3
 80023dc:	4b63      	ldr	r3, [pc, #396]	; (800256c <RTC_date_and_time_update+0x1d4>)
 80023de:	78db      	ldrb	r3, [r3, #3]
 80023e0:	9301      	str	r3, [sp, #4]
 80023e2:	9200      	str	r2, [sp, #0]
 80023e4:	460b      	mov	r3, r1
 80023e6:	4a62      	ldr	r2, [pc, #392]	; (8002570 <RTC_date_and_time_update+0x1d8>)
 80023e8:	210b      	movs	r1, #11
 80023ea:	4862      	ldr	r0, [pc, #392]	; (8002574 <RTC_date_and_time_update+0x1dc>)
 80023ec:	f005 f9f0 	bl	80077d0 <sniprintf>
			Lcd_cursor(&lcd, 0, 0) ;
 80023f0:	2200      	movs	r2, #0
 80023f2:	2100      	movs	r1, #0
 80023f4:	4860      	ldr	r0, [pc, #384]	; (8002578 <RTC_date_and_time_update+0x1e0>)
 80023f6:	f7fe fdcd 	bl	8000f94 <Lcd_cursor>
			Lcd_string(&lcd, g_date);
 80023fa:	495e      	ldr	r1, [pc, #376]	; (8002574 <RTC_date_and_time_update+0x1dc>)
 80023fc:	485e      	ldr	r0, [pc, #376]	; (8002578 <RTC_date_and_time_update+0x1e0>)
 80023fe:	f7fe fda9 	bl	8000f54 <Lcd_string>

			Lcd_cursor(&lcd, 1, 0	) ;
 8002402:	2200      	movs	r2, #0
 8002404:	2101      	movs	r1, #1
 8002406:	485c      	ldr	r0, [pc, #368]	; (8002578 <RTC_date_and_time_update+0x1e0>)
 8002408:	f7fe fdc4 	bl	8000f94 <Lcd_cursor>
			Lcd_string(&lcd, g_time);
 800240c:	495b      	ldr	r1, [pc, #364]	; (800257c <RTC_date_and_time_update+0x1e4>)
 800240e:	485a      	ldr	r0, [pc, #360]	; (8002578 <RTC_date_and_time_update+0x1e0>)
 8002410:	f7fe fda0 	bl	8000f54 <Lcd_string>


		}

		//bottom button press -decrement date
		if(g_bottom_button_pressed== 1){
 8002414:	4b5a      	ldr	r3, [pc, #360]	; (8002580 <RTC_date_and_time_update+0x1e8>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b01      	cmp	r3, #1
 800241a:	f040 82c2 	bne.w	80029a2 <RTC_date_and_time_update+0x60a>
			sDate.Date-- ;
 800241e:	4b53      	ldr	r3, [pc, #332]	; (800256c <RTC_date_and_time_update+0x1d4>)
 8002420:	789b      	ldrb	r3, [r3, #2]
 8002422:	3b01      	subs	r3, #1
 8002424:	b2da      	uxtb	r2, r3
 8002426:	4b51      	ldr	r3, [pc, #324]	; (800256c <RTC_date_and_time_update+0x1d4>)
 8002428:	709a      	strb	r2, [r3, #2]

			//oveflow
			if(sDate.Date < 1){
 800242a:	4b50      	ldr	r3, [pc, #320]	; (800256c <RTC_date_and_time_update+0x1d4>)
 800242c:	789b      	ldrb	r3, [r3, #2]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d102      	bne.n	8002438 <RTC_date_and_time_update+0xa0>
				sDate.Date = 31 ;
 8002432:	4b4e      	ldr	r3, [pc, #312]	; (800256c <RTC_date_and_time_update+0x1d4>)
 8002434:	221f      	movs	r2, #31
 8002436:	709a      	strb	r2, [r3, #2]
			}

			//display date - first row
			snprintf(g_date, sizeof(g_date),"%02d/%02d/20%02d",sDate.Date, sDate.Month,sDate.Year);
 8002438:	4b4c      	ldr	r3, [pc, #304]	; (800256c <RTC_date_and_time_update+0x1d4>)
 800243a:	789b      	ldrb	r3, [r3, #2]
 800243c:	4619      	mov	r1, r3
 800243e:	4b4b      	ldr	r3, [pc, #300]	; (800256c <RTC_date_and_time_update+0x1d4>)
 8002440:	785b      	ldrb	r3, [r3, #1]
 8002442:	461a      	mov	r2, r3
 8002444:	4b49      	ldr	r3, [pc, #292]	; (800256c <RTC_date_and_time_update+0x1d4>)
 8002446:	78db      	ldrb	r3, [r3, #3]
 8002448:	9301      	str	r3, [sp, #4]
 800244a:	9200      	str	r2, [sp, #0]
 800244c:	460b      	mov	r3, r1
 800244e:	4a48      	ldr	r2, [pc, #288]	; (8002570 <RTC_date_and_time_update+0x1d8>)
 8002450:	210b      	movs	r1, #11
 8002452:	4848      	ldr	r0, [pc, #288]	; (8002574 <RTC_date_and_time_update+0x1dc>)
 8002454:	f005 f9bc 	bl	80077d0 <sniprintf>
			Lcd_cursor(&lcd, 0, 0) ;
 8002458:	2200      	movs	r2, #0
 800245a:	2100      	movs	r1, #0
 800245c:	4846      	ldr	r0, [pc, #280]	; (8002578 <RTC_date_and_time_update+0x1e0>)
 800245e:	f7fe fd99 	bl	8000f94 <Lcd_cursor>
			Lcd_string(&lcd, g_date);
 8002462:	4944      	ldr	r1, [pc, #272]	; (8002574 <RTC_date_and_time_update+0x1dc>)
 8002464:	4844      	ldr	r0, [pc, #272]	; (8002578 <RTC_date_and_time_update+0x1e0>)
 8002466:	f7fe fd75 	bl	8000f54 <Lcd_string>

			Lcd_cursor(&lcd, 1, 0) ;
 800246a:	2200      	movs	r2, #0
 800246c:	2101      	movs	r1, #1
 800246e:	4842      	ldr	r0, [pc, #264]	; (8002578 <RTC_date_and_time_update+0x1e0>)
 8002470:	f7fe fd90 	bl	8000f94 <Lcd_cursor>
			Lcd_string(&lcd, g_time);
 8002474:	4941      	ldr	r1, [pc, #260]	; (800257c <RTC_date_and_time_update+0x1e4>)
 8002476:	4840      	ldr	r0, [pc, #256]	; (8002578 <RTC_date_and_time_update+0x1e0>)
 8002478:	f7fe fd6c 	bl	8000f54 <Lcd_string>


			g_bottom_button_pressed =0 ;
 800247c:	4b40      	ldr	r3, [pc, #256]	; (8002580 <RTC_date_and_time_update+0x1e8>)
 800247e:	2200      	movs	r2, #0
 8002480:	701a      	strb	r2, [r3, #0]
		}

	}


}
 8002482:	e28e      	b.n	80029a2 <RTC_date_and_time_update+0x60a>
	else if(paramx == 2){ //update month
 8002484:	79fb      	ldrb	r3, [r7, #7]
 8002486:	2b02      	cmp	r3, #2
 8002488:	d17c      	bne.n	8002584 <RTC_date_and_time_update+0x1ec>
		if(g_top_button_pressed== 1){
 800248a:	4b37      	ldr	r3, [pc, #220]	; (8002568 <RTC_date_and_time_update+0x1d0>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d131      	bne.n	80024f6 <RTC_date_and_time_update+0x15e>
			sDate.Month++ ;
 8002492:	4b36      	ldr	r3, [pc, #216]	; (800256c <RTC_date_and_time_update+0x1d4>)
 8002494:	785b      	ldrb	r3, [r3, #1]
 8002496:	3301      	adds	r3, #1
 8002498:	b2da      	uxtb	r2, r3
 800249a:	4b34      	ldr	r3, [pc, #208]	; (800256c <RTC_date_and_time_update+0x1d4>)
 800249c:	705a      	strb	r2, [r3, #1]
			if(sDate.Month > 12){
 800249e:	4b33      	ldr	r3, [pc, #204]	; (800256c <RTC_date_and_time_update+0x1d4>)
 80024a0:	785b      	ldrb	r3, [r3, #1]
 80024a2:	2b0c      	cmp	r3, #12
 80024a4:	d902      	bls.n	80024ac <RTC_date_and_time_update+0x114>
				sDate.Month = 1 ;
 80024a6:	4b31      	ldr	r3, [pc, #196]	; (800256c <RTC_date_and_time_update+0x1d4>)
 80024a8:	2201      	movs	r2, #1
 80024aa:	705a      	strb	r2, [r3, #1]
			snprintf(g_date, sizeof(g_date),"%02d/%02d/20%02d",sDate.Date, sDate.Month,sDate.Year);
 80024ac:	4b2f      	ldr	r3, [pc, #188]	; (800256c <RTC_date_and_time_update+0x1d4>)
 80024ae:	789b      	ldrb	r3, [r3, #2]
 80024b0:	4619      	mov	r1, r3
 80024b2:	4b2e      	ldr	r3, [pc, #184]	; (800256c <RTC_date_and_time_update+0x1d4>)
 80024b4:	785b      	ldrb	r3, [r3, #1]
 80024b6:	461a      	mov	r2, r3
 80024b8:	4b2c      	ldr	r3, [pc, #176]	; (800256c <RTC_date_and_time_update+0x1d4>)
 80024ba:	78db      	ldrb	r3, [r3, #3]
 80024bc:	9301      	str	r3, [sp, #4]
 80024be:	9200      	str	r2, [sp, #0]
 80024c0:	460b      	mov	r3, r1
 80024c2:	4a2b      	ldr	r2, [pc, #172]	; (8002570 <RTC_date_and_time_update+0x1d8>)
 80024c4:	210b      	movs	r1, #11
 80024c6:	482b      	ldr	r0, [pc, #172]	; (8002574 <RTC_date_and_time_update+0x1dc>)
 80024c8:	f005 f982 	bl	80077d0 <sniprintf>
			Lcd_cursor(&lcd, 0, 0) ;
 80024cc:	2200      	movs	r2, #0
 80024ce:	2100      	movs	r1, #0
 80024d0:	4829      	ldr	r0, [pc, #164]	; (8002578 <RTC_date_and_time_update+0x1e0>)
 80024d2:	f7fe fd5f 	bl	8000f94 <Lcd_cursor>
			Lcd_string(&lcd, g_date);
 80024d6:	4927      	ldr	r1, [pc, #156]	; (8002574 <RTC_date_and_time_update+0x1dc>)
 80024d8:	4827      	ldr	r0, [pc, #156]	; (8002578 <RTC_date_and_time_update+0x1e0>)
 80024da:	f7fe fd3b 	bl	8000f54 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0) ;
 80024de:	2200      	movs	r2, #0
 80024e0:	2101      	movs	r1, #1
 80024e2:	4825      	ldr	r0, [pc, #148]	; (8002578 <RTC_date_and_time_update+0x1e0>)
 80024e4:	f7fe fd56 	bl	8000f94 <Lcd_cursor>
			Lcd_string(&lcd, g_time);
 80024e8:	4924      	ldr	r1, [pc, #144]	; (800257c <RTC_date_and_time_update+0x1e4>)
 80024ea:	4823      	ldr	r0, [pc, #140]	; (8002578 <RTC_date_and_time_update+0x1e0>)
 80024ec:	f7fe fd32 	bl	8000f54 <Lcd_string>
			g_top_button_pressed =0 ;
 80024f0:	4b1d      	ldr	r3, [pc, #116]	; (8002568 <RTC_date_and_time_update+0x1d0>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	701a      	strb	r2, [r3, #0]
		if(g_bottom_button_pressed== 1){
 80024f6:	4b22      	ldr	r3, [pc, #136]	; (8002580 <RTC_date_and_time_update+0x1e8>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	f040 8251 	bne.w	80029a2 <RTC_date_and_time_update+0x60a>
			sDate.Month-- ;
 8002500:	4b1a      	ldr	r3, [pc, #104]	; (800256c <RTC_date_and_time_update+0x1d4>)
 8002502:	785b      	ldrb	r3, [r3, #1]
 8002504:	3b01      	subs	r3, #1
 8002506:	b2da      	uxtb	r2, r3
 8002508:	4b18      	ldr	r3, [pc, #96]	; (800256c <RTC_date_and_time_update+0x1d4>)
 800250a:	705a      	strb	r2, [r3, #1]
			if(sDate.Month < 1){
 800250c:	4b17      	ldr	r3, [pc, #92]	; (800256c <RTC_date_and_time_update+0x1d4>)
 800250e:	785b      	ldrb	r3, [r3, #1]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d102      	bne.n	800251a <RTC_date_and_time_update+0x182>
				sDate.Month = 12 ;
 8002514:	4b15      	ldr	r3, [pc, #84]	; (800256c <RTC_date_and_time_update+0x1d4>)
 8002516:	220c      	movs	r2, #12
 8002518:	705a      	strb	r2, [r3, #1]
			snprintf(g_date, sizeof(g_date),"%02d/%02d/20%02d",sDate.Date, sDate.Month,sDate.Year);
 800251a:	4b14      	ldr	r3, [pc, #80]	; (800256c <RTC_date_and_time_update+0x1d4>)
 800251c:	789b      	ldrb	r3, [r3, #2]
 800251e:	4619      	mov	r1, r3
 8002520:	4b12      	ldr	r3, [pc, #72]	; (800256c <RTC_date_and_time_update+0x1d4>)
 8002522:	785b      	ldrb	r3, [r3, #1]
 8002524:	461a      	mov	r2, r3
 8002526:	4b11      	ldr	r3, [pc, #68]	; (800256c <RTC_date_and_time_update+0x1d4>)
 8002528:	78db      	ldrb	r3, [r3, #3]
 800252a:	9301      	str	r3, [sp, #4]
 800252c:	9200      	str	r2, [sp, #0]
 800252e:	460b      	mov	r3, r1
 8002530:	4a0f      	ldr	r2, [pc, #60]	; (8002570 <RTC_date_and_time_update+0x1d8>)
 8002532:	210b      	movs	r1, #11
 8002534:	480f      	ldr	r0, [pc, #60]	; (8002574 <RTC_date_and_time_update+0x1dc>)
 8002536:	f005 f94b 	bl	80077d0 <sniprintf>
			Lcd_cursor(&lcd, 0, 0) ;
 800253a:	2200      	movs	r2, #0
 800253c:	2100      	movs	r1, #0
 800253e:	480e      	ldr	r0, [pc, #56]	; (8002578 <RTC_date_and_time_update+0x1e0>)
 8002540:	f7fe fd28 	bl	8000f94 <Lcd_cursor>
			Lcd_string(&lcd, g_date);
 8002544:	490b      	ldr	r1, [pc, #44]	; (8002574 <RTC_date_and_time_update+0x1dc>)
 8002546:	480c      	ldr	r0, [pc, #48]	; (8002578 <RTC_date_and_time_update+0x1e0>)
 8002548:	f7fe fd04 	bl	8000f54 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0) ;
 800254c:	2200      	movs	r2, #0
 800254e:	2101      	movs	r1, #1
 8002550:	4809      	ldr	r0, [pc, #36]	; (8002578 <RTC_date_and_time_update+0x1e0>)
 8002552:	f7fe fd1f 	bl	8000f94 <Lcd_cursor>
			Lcd_string(&lcd, g_time);
 8002556:	4909      	ldr	r1, [pc, #36]	; (800257c <RTC_date_and_time_update+0x1e4>)
 8002558:	4807      	ldr	r0, [pc, #28]	; (8002578 <RTC_date_and_time_update+0x1e0>)
 800255a:	f7fe fcfb 	bl	8000f54 <Lcd_string>
			g_bottom_button_pressed =0 ;
 800255e:	4b08      	ldr	r3, [pc, #32]	; (8002580 <RTC_date_and_time_update+0x1e8>)
 8002560:	2200      	movs	r2, #0
 8002562:	701a      	strb	r2, [r3, #0]
}
 8002564:	e21d      	b.n	80029a2 <RTC_date_and_time_update+0x60a>
 8002566:	bf00      	nop
 8002568:	20000372 	.word	0x20000372
 800256c:	20000330 	.word	0x20000330
 8002570:	08008fd4 	.word	0x08008fd4
 8002574:	20000338 	.word	0x20000338
 8002578:	20000304 	.word	0x20000304
 800257c:	20000344 	.word	0x20000344
 8002580:	20000373 	.word	0x20000373
	else if(paramx == 3){ //update year -
 8002584:	79fb      	ldrb	r3, [r7, #7]
 8002586:	2b03      	cmp	r3, #3
 8002588:	d16d      	bne.n	8002666 <RTC_date_and_time_update+0x2ce>
		if(g_top_button_pressed== 1){
 800258a:	4b6f      	ldr	r3, [pc, #444]	; (8002748 <RTC_date_and_time_update+0x3b0>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d131      	bne.n	80025f6 <RTC_date_and_time_update+0x25e>
			sDate.Year++ ;
 8002592:	4b6e      	ldr	r3, [pc, #440]	; (800274c <RTC_date_and_time_update+0x3b4>)
 8002594:	78db      	ldrb	r3, [r3, #3]
 8002596:	3301      	adds	r3, #1
 8002598:	b2da      	uxtb	r2, r3
 800259a:	4b6c      	ldr	r3, [pc, #432]	; (800274c <RTC_date_and_time_update+0x3b4>)
 800259c:	70da      	strb	r2, [r3, #3]
			if(sDate.Year > 99){
 800259e:	4b6b      	ldr	r3, [pc, #428]	; (800274c <RTC_date_and_time_update+0x3b4>)
 80025a0:	78db      	ldrb	r3, [r3, #3]
 80025a2:	2b63      	cmp	r3, #99	; 0x63
 80025a4:	d902      	bls.n	80025ac <RTC_date_and_time_update+0x214>
				sDate.Year = 0 ;
 80025a6:	4b69      	ldr	r3, [pc, #420]	; (800274c <RTC_date_and_time_update+0x3b4>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	70da      	strb	r2, [r3, #3]
			snprintf(g_date, sizeof(g_date),"%02d/%02d/20%02d",sDate.Date, sDate.Month,sDate.Year);
 80025ac:	4b67      	ldr	r3, [pc, #412]	; (800274c <RTC_date_and_time_update+0x3b4>)
 80025ae:	789b      	ldrb	r3, [r3, #2]
 80025b0:	4619      	mov	r1, r3
 80025b2:	4b66      	ldr	r3, [pc, #408]	; (800274c <RTC_date_and_time_update+0x3b4>)
 80025b4:	785b      	ldrb	r3, [r3, #1]
 80025b6:	461a      	mov	r2, r3
 80025b8:	4b64      	ldr	r3, [pc, #400]	; (800274c <RTC_date_and_time_update+0x3b4>)
 80025ba:	78db      	ldrb	r3, [r3, #3]
 80025bc:	9301      	str	r3, [sp, #4]
 80025be:	9200      	str	r2, [sp, #0]
 80025c0:	460b      	mov	r3, r1
 80025c2:	4a63      	ldr	r2, [pc, #396]	; (8002750 <RTC_date_and_time_update+0x3b8>)
 80025c4:	210b      	movs	r1, #11
 80025c6:	4863      	ldr	r0, [pc, #396]	; (8002754 <RTC_date_and_time_update+0x3bc>)
 80025c8:	f005 f902 	bl	80077d0 <sniprintf>
			Lcd_cursor(&lcd, 0, 0) ;
 80025cc:	2200      	movs	r2, #0
 80025ce:	2100      	movs	r1, #0
 80025d0:	4861      	ldr	r0, [pc, #388]	; (8002758 <RTC_date_and_time_update+0x3c0>)
 80025d2:	f7fe fcdf 	bl	8000f94 <Lcd_cursor>
			Lcd_string(&lcd, g_date);
 80025d6:	495f      	ldr	r1, [pc, #380]	; (8002754 <RTC_date_and_time_update+0x3bc>)
 80025d8:	485f      	ldr	r0, [pc, #380]	; (8002758 <RTC_date_and_time_update+0x3c0>)
 80025da:	f7fe fcbb 	bl	8000f54 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0) ;
 80025de:	2200      	movs	r2, #0
 80025e0:	2101      	movs	r1, #1
 80025e2:	485d      	ldr	r0, [pc, #372]	; (8002758 <RTC_date_and_time_update+0x3c0>)
 80025e4:	f7fe fcd6 	bl	8000f94 <Lcd_cursor>
			Lcd_string(&lcd, g_time);
 80025e8:	495c      	ldr	r1, [pc, #368]	; (800275c <RTC_date_and_time_update+0x3c4>)
 80025ea:	485b      	ldr	r0, [pc, #364]	; (8002758 <RTC_date_and_time_update+0x3c0>)
 80025ec:	f7fe fcb2 	bl	8000f54 <Lcd_string>
			g_top_button_pressed =0 ;
 80025f0:	4b55      	ldr	r3, [pc, #340]	; (8002748 <RTC_date_and_time_update+0x3b0>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	701a      	strb	r2, [r3, #0]
		if(g_bottom_button_pressed== 1){
 80025f6:	4b5a      	ldr	r3, [pc, #360]	; (8002760 <RTC_date_and_time_update+0x3c8>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	f040 81d1 	bne.w	80029a2 <RTC_date_and_time_update+0x60a>
			sDate.Year-- ;
 8002600:	4b52      	ldr	r3, [pc, #328]	; (800274c <RTC_date_and_time_update+0x3b4>)
 8002602:	78db      	ldrb	r3, [r3, #3]
 8002604:	3b01      	subs	r3, #1
 8002606:	b2da      	uxtb	r2, r3
 8002608:	4b50      	ldr	r3, [pc, #320]	; (800274c <RTC_date_and_time_update+0x3b4>)
 800260a:	70da      	strb	r2, [r3, #3]
			if(sDate.Year < 1){
 800260c:	4b4f      	ldr	r3, [pc, #316]	; (800274c <RTC_date_and_time_update+0x3b4>)
 800260e:	78db      	ldrb	r3, [r3, #3]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d102      	bne.n	800261a <RTC_date_and_time_update+0x282>
				sDate.Year = 99 ;
 8002614:	4b4d      	ldr	r3, [pc, #308]	; (800274c <RTC_date_and_time_update+0x3b4>)
 8002616:	2263      	movs	r2, #99	; 0x63
 8002618:	70da      	strb	r2, [r3, #3]
			snprintf(g_date, sizeof(g_date),"%02d/%02d/20%02d",sDate.Date, sDate.Month,sDate.Year);
 800261a:	4b4c      	ldr	r3, [pc, #304]	; (800274c <RTC_date_and_time_update+0x3b4>)
 800261c:	789b      	ldrb	r3, [r3, #2]
 800261e:	4619      	mov	r1, r3
 8002620:	4b4a      	ldr	r3, [pc, #296]	; (800274c <RTC_date_and_time_update+0x3b4>)
 8002622:	785b      	ldrb	r3, [r3, #1]
 8002624:	461a      	mov	r2, r3
 8002626:	4b49      	ldr	r3, [pc, #292]	; (800274c <RTC_date_and_time_update+0x3b4>)
 8002628:	78db      	ldrb	r3, [r3, #3]
 800262a:	9301      	str	r3, [sp, #4]
 800262c:	9200      	str	r2, [sp, #0]
 800262e:	460b      	mov	r3, r1
 8002630:	4a47      	ldr	r2, [pc, #284]	; (8002750 <RTC_date_and_time_update+0x3b8>)
 8002632:	210b      	movs	r1, #11
 8002634:	4847      	ldr	r0, [pc, #284]	; (8002754 <RTC_date_and_time_update+0x3bc>)
 8002636:	f005 f8cb 	bl	80077d0 <sniprintf>
			Lcd_cursor(&lcd, 0, 0) ;
 800263a:	2200      	movs	r2, #0
 800263c:	2100      	movs	r1, #0
 800263e:	4846      	ldr	r0, [pc, #280]	; (8002758 <RTC_date_and_time_update+0x3c0>)
 8002640:	f7fe fca8 	bl	8000f94 <Lcd_cursor>
			Lcd_string(&lcd, g_date);
 8002644:	4943      	ldr	r1, [pc, #268]	; (8002754 <RTC_date_and_time_update+0x3bc>)
 8002646:	4844      	ldr	r0, [pc, #272]	; (8002758 <RTC_date_and_time_update+0x3c0>)
 8002648:	f7fe fc84 	bl	8000f54 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0) ;
 800264c:	2200      	movs	r2, #0
 800264e:	2101      	movs	r1, #1
 8002650:	4841      	ldr	r0, [pc, #260]	; (8002758 <RTC_date_and_time_update+0x3c0>)
 8002652:	f7fe fc9f 	bl	8000f94 <Lcd_cursor>
			Lcd_string(&lcd, g_time);
 8002656:	4941      	ldr	r1, [pc, #260]	; (800275c <RTC_date_and_time_update+0x3c4>)
 8002658:	483f      	ldr	r0, [pc, #252]	; (8002758 <RTC_date_and_time_update+0x3c0>)
 800265a:	f7fe fc7b 	bl	8000f54 <Lcd_string>
			g_bottom_button_pressed =0 ;
 800265e:	4b40      	ldr	r3, [pc, #256]	; (8002760 <RTC_date_and_time_update+0x3c8>)
 8002660:	2200      	movs	r2, #0
 8002662:	701a      	strb	r2, [r3, #0]
}
 8002664:	e19d      	b.n	80029a2 <RTC_date_and_time_update+0x60a>
	else if(paramx == 4){//update hour
 8002666:	79fb      	ldrb	r3, [r7, #7]
 8002668:	2b04      	cmp	r3, #4
 800266a:	d17f      	bne.n	800276c <RTC_date_and_time_update+0x3d4>
		if(g_top_button_pressed== 1){
 800266c:	4b36      	ldr	r3, [pc, #216]	; (8002748 <RTC_date_and_time_update+0x3b0>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d131      	bne.n	80026d8 <RTC_date_and_time_update+0x340>
			sTime.Hours++ ;
 8002674:	4b3b      	ldr	r3, [pc, #236]	; (8002764 <RTC_date_and_time_update+0x3cc>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	3301      	adds	r3, #1
 800267a:	b2da      	uxtb	r2, r3
 800267c:	4b39      	ldr	r3, [pc, #228]	; (8002764 <RTC_date_and_time_update+0x3cc>)
 800267e:	701a      	strb	r2, [r3, #0]
			if(sTime.Hours > 24){
 8002680:	4b38      	ldr	r3, [pc, #224]	; (8002764 <RTC_date_and_time_update+0x3cc>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b18      	cmp	r3, #24
 8002686:	d902      	bls.n	800268e <RTC_date_and_time_update+0x2f6>
				sTime.Hours = 1 ;
 8002688:	4b36      	ldr	r3, [pc, #216]	; (8002764 <RTC_date_and_time_update+0x3cc>)
 800268a:	2201      	movs	r2, #1
 800268c:	701a      	strb	r2, [r3, #0]
			g_top_button_pressed =0 ;
 800268e:	4b2e      	ldr	r3, [pc, #184]	; (8002748 <RTC_date_and_time_update+0x3b0>)
 8002690:	2200      	movs	r2, #0
 8002692:	701a      	strb	r2, [r3, #0]
			Lcd_cursor(&lcd, 0, 0) ;
 8002694:	2200      	movs	r2, #0
 8002696:	2100      	movs	r1, #0
 8002698:	482f      	ldr	r0, [pc, #188]	; (8002758 <RTC_date_and_time_update+0x3c0>)
 800269a:	f7fe fc7b 	bl	8000f94 <Lcd_cursor>
			Lcd_string(&lcd, g_date);
 800269e:	492d      	ldr	r1, [pc, #180]	; (8002754 <RTC_date_and_time_update+0x3bc>)
 80026a0:	482d      	ldr	r0, [pc, #180]	; (8002758 <RTC_date_and_time_update+0x3c0>)
 80026a2:	f7fe fc57 	bl	8000f54 <Lcd_string>
			snprintf(g_time, sizeof(g_time),"%02d:%02d:%02d",sTime.Hours, sTime.Minutes, sTime.Seconds);
 80026a6:	4b2f      	ldr	r3, [pc, #188]	; (8002764 <RTC_date_and_time_update+0x3cc>)
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	4619      	mov	r1, r3
 80026ac:	4b2d      	ldr	r3, [pc, #180]	; (8002764 <RTC_date_and_time_update+0x3cc>)
 80026ae:	785b      	ldrb	r3, [r3, #1]
 80026b0:	461a      	mov	r2, r3
 80026b2:	4b2c      	ldr	r3, [pc, #176]	; (8002764 <RTC_date_and_time_update+0x3cc>)
 80026b4:	789b      	ldrb	r3, [r3, #2]
 80026b6:	9301      	str	r3, [sp, #4]
 80026b8:	9200      	str	r2, [sp, #0]
 80026ba:	460b      	mov	r3, r1
 80026bc:	4a2a      	ldr	r2, [pc, #168]	; (8002768 <RTC_date_and_time_update+0x3d0>)
 80026be:	2109      	movs	r1, #9
 80026c0:	4826      	ldr	r0, [pc, #152]	; (800275c <RTC_date_and_time_update+0x3c4>)
 80026c2:	f005 f885 	bl	80077d0 <sniprintf>
			Lcd_cursor(&lcd, 1, 0) ;
 80026c6:	2200      	movs	r2, #0
 80026c8:	2101      	movs	r1, #1
 80026ca:	4823      	ldr	r0, [pc, #140]	; (8002758 <RTC_date_and_time_update+0x3c0>)
 80026cc:	f7fe fc62 	bl	8000f94 <Lcd_cursor>
			Lcd_string(&lcd, g_time);
 80026d0:	4922      	ldr	r1, [pc, #136]	; (800275c <RTC_date_and_time_update+0x3c4>)
 80026d2:	4821      	ldr	r0, [pc, #132]	; (8002758 <RTC_date_and_time_update+0x3c0>)
 80026d4:	f7fe fc3e 	bl	8000f54 <Lcd_string>
		if(g_bottom_button_pressed== 1){
 80026d8:	4b21      	ldr	r3, [pc, #132]	; (8002760 <RTC_date_and_time_update+0x3c8>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	f040 8160 	bne.w	80029a2 <RTC_date_and_time_update+0x60a>
			sTime.Hours-- ;
 80026e2:	4b20      	ldr	r3, [pc, #128]	; (8002764 <RTC_date_and_time_update+0x3cc>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	3b01      	subs	r3, #1
 80026e8:	b2da      	uxtb	r2, r3
 80026ea:	4b1e      	ldr	r3, [pc, #120]	; (8002764 <RTC_date_and_time_update+0x3cc>)
 80026ec:	701a      	strb	r2, [r3, #0]
			if(sTime.Hours < 1){
 80026ee:	4b1d      	ldr	r3, [pc, #116]	; (8002764 <RTC_date_and_time_update+0x3cc>)
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d102      	bne.n	80026fc <RTC_date_and_time_update+0x364>
				sTime.Hours = 24 ;
 80026f6:	4b1b      	ldr	r3, [pc, #108]	; (8002764 <RTC_date_and_time_update+0x3cc>)
 80026f8:	2218      	movs	r2, #24
 80026fa:	701a      	strb	r2, [r3, #0]
			Lcd_cursor(&lcd, 0, 0) ;
 80026fc:	2200      	movs	r2, #0
 80026fe:	2100      	movs	r1, #0
 8002700:	4815      	ldr	r0, [pc, #84]	; (8002758 <RTC_date_and_time_update+0x3c0>)
 8002702:	f7fe fc47 	bl	8000f94 <Lcd_cursor>
			Lcd_string(&lcd, g_date);
 8002706:	4913      	ldr	r1, [pc, #76]	; (8002754 <RTC_date_and_time_update+0x3bc>)
 8002708:	4813      	ldr	r0, [pc, #76]	; (8002758 <RTC_date_and_time_update+0x3c0>)
 800270a:	f7fe fc23 	bl	8000f54 <Lcd_string>
			snprintf(g_time, sizeof(g_time),"%02d:%02d:%02d",sTime.Hours, sTime.Minutes, sTime.Seconds);
 800270e:	4b15      	ldr	r3, [pc, #84]	; (8002764 <RTC_date_and_time_update+0x3cc>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	4619      	mov	r1, r3
 8002714:	4b13      	ldr	r3, [pc, #76]	; (8002764 <RTC_date_and_time_update+0x3cc>)
 8002716:	785b      	ldrb	r3, [r3, #1]
 8002718:	461a      	mov	r2, r3
 800271a:	4b12      	ldr	r3, [pc, #72]	; (8002764 <RTC_date_and_time_update+0x3cc>)
 800271c:	789b      	ldrb	r3, [r3, #2]
 800271e:	9301      	str	r3, [sp, #4]
 8002720:	9200      	str	r2, [sp, #0]
 8002722:	460b      	mov	r3, r1
 8002724:	4a10      	ldr	r2, [pc, #64]	; (8002768 <RTC_date_and_time_update+0x3d0>)
 8002726:	2109      	movs	r1, #9
 8002728:	480c      	ldr	r0, [pc, #48]	; (800275c <RTC_date_and_time_update+0x3c4>)
 800272a:	f005 f851 	bl	80077d0 <sniprintf>
			Lcd_cursor(&lcd, 1, 0) ;
 800272e:	2200      	movs	r2, #0
 8002730:	2101      	movs	r1, #1
 8002732:	4809      	ldr	r0, [pc, #36]	; (8002758 <RTC_date_and_time_update+0x3c0>)
 8002734:	f7fe fc2e 	bl	8000f94 <Lcd_cursor>
			Lcd_string(&lcd, g_time);
 8002738:	4908      	ldr	r1, [pc, #32]	; (800275c <RTC_date_and_time_update+0x3c4>)
 800273a:	4807      	ldr	r0, [pc, #28]	; (8002758 <RTC_date_and_time_update+0x3c0>)
 800273c:	f7fe fc0a 	bl	8000f54 <Lcd_string>
			g_bottom_button_pressed =0 ;
 8002740:	4b07      	ldr	r3, [pc, #28]	; (8002760 <RTC_date_and_time_update+0x3c8>)
 8002742:	2200      	movs	r2, #0
 8002744:	701a      	strb	r2, [r3, #0]
}
 8002746:	e12c      	b.n	80029a2 <RTC_date_and_time_update+0x60a>
 8002748:	20000372 	.word	0x20000372
 800274c:	20000330 	.word	0x20000330
 8002750:	08008fd4 	.word	0x08008fd4
 8002754:	20000338 	.word	0x20000338
 8002758:	20000304 	.word	0x20000304
 800275c:	20000344 	.word	0x20000344
 8002760:	20000373 	.word	0x20000373
 8002764:	2000031c 	.word	0x2000031c
 8002768:	08008fe8 	.word	0x08008fe8
	else if(paramx ==5){//update minutes
 800276c:	79fb      	ldrb	r3, [r7, #7]
 800276e:	2b05      	cmp	r3, #5
 8002770:	d16d      	bne.n	800284e <RTC_date_and_time_update+0x4b6>
		if(g_top_button_pressed== 1){
 8002772:	4b8e      	ldr	r3, [pc, #568]	; (80029ac <RTC_date_and_time_update+0x614>)
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d131      	bne.n	80027de <RTC_date_and_time_update+0x446>
			sTime.Minutes++ ;
 800277a:	4b8d      	ldr	r3, [pc, #564]	; (80029b0 <RTC_date_and_time_update+0x618>)
 800277c:	785b      	ldrb	r3, [r3, #1]
 800277e:	3301      	adds	r3, #1
 8002780:	b2da      	uxtb	r2, r3
 8002782:	4b8b      	ldr	r3, [pc, #556]	; (80029b0 <RTC_date_and_time_update+0x618>)
 8002784:	705a      	strb	r2, [r3, #1]
			if(sTime.Minutes > 60){
 8002786:	4b8a      	ldr	r3, [pc, #552]	; (80029b0 <RTC_date_and_time_update+0x618>)
 8002788:	785b      	ldrb	r3, [r3, #1]
 800278a:	2b3c      	cmp	r3, #60	; 0x3c
 800278c:	d902      	bls.n	8002794 <RTC_date_and_time_update+0x3fc>
				sTime.Minutes = 1 ;
 800278e:	4b88      	ldr	r3, [pc, #544]	; (80029b0 <RTC_date_and_time_update+0x618>)
 8002790:	2201      	movs	r2, #1
 8002792:	705a      	strb	r2, [r3, #1]
			Lcd_cursor(&lcd, 0, 0) ;
 8002794:	2200      	movs	r2, #0
 8002796:	2100      	movs	r1, #0
 8002798:	4886      	ldr	r0, [pc, #536]	; (80029b4 <RTC_date_and_time_update+0x61c>)
 800279a:	f7fe fbfb 	bl	8000f94 <Lcd_cursor>
			Lcd_string(&lcd, g_date);
 800279e:	4986      	ldr	r1, [pc, #536]	; (80029b8 <RTC_date_and_time_update+0x620>)
 80027a0:	4884      	ldr	r0, [pc, #528]	; (80029b4 <RTC_date_and_time_update+0x61c>)
 80027a2:	f7fe fbd7 	bl	8000f54 <Lcd_string>
			snprintf(g_time, sizeof(g_time),"%02d:%02d:%02d",sTime.Hours, sTime.Minutes, sTime.Seconds);
 80027a6:	4b82      	ldr	r3, [pc, #520]	; (80029b0 <RTC_date_and_time_update+0x618>)
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	4619      	mov	r1, r3
 80027ac:	4b80      	ldr	r3, [pc, #512]	; (80029b0 <RTC_date_and_time_update+0x618>)
 80027ae:	785b      	ldrb	r3, [r3, #1]
 80027b0:	461a      	mov	r2, r3
 80027b2:	4b7f      	ldr	r3, [pc, #508]	; (80029b0 <RTC_date_and_time_update+0x618>)
 80027b4:	789b      	ldrb	r3, [r3, #2]
 80027b6:	9301      	str	r3, [sp, #4]
 80027b8:	9200      	str	r2, [sp, #0]
 80027ba:	460b      	mov	r3, r1
 80027bc:	4a7f      	ldr	r2, [pc, #508]	; (80029bc <RTC_date_and_time_update+0x624>)
 80027be:	2109      	movs	r1, #9
 80027c0:	487f      	ldr	r0, [pc, #508]	; (80029c0 <RTC_date_and_time_update+0x628>)
 80027c2:	f005 f805 	bl	80077d0 <sniprintf>
			Lcd_cursor(&lcd, 1, 0) ;
 80027c6:	2200      	movs	r2, #0
 80027c8:	2101      	movs	r1, #1
 80027ca:	487a      	ldr	r0, [pc, #488]	; (80029b4 <RTC_date_and_time_update+0x61c>)
 80027cc:	f7fe fbe2 	bl	8000f94 <Lcd_cursor>
			Lcd_string(&lcd, g_time);
 80027d0:	497b      	ldr	r1, [pc, #492]	; (80029c0 <RTC_date_and_time_update+0x628>)
 80027d2:	4878      	ldr	r0, [pc, #480]	; (80029b4 <RTC_date_and_time_update+0x61c>)
 80027d4:	f7fe fbbe 	bl	8000f54 <Lcd_string>
			g_top_button_pressed =0 ;
 80027d8:	4b74      	ldr	r3, [pc, #464]	; (80029ac <RTC_date_and_time_update+0x614>)
 80027da:	2200      	movs	r2, #0
 80027dc:	701a      	strb	r2, [r3, #0]
		if(g_bottom_button_pressed== 1){
 80027de:	4b79      	ldr	r3, [pc, #484]	; (80029c4 <RTC_date_and_time_update+0x62c>)
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	f040 80dd 	bne.w	80029a2 <RTC_date_and_time_update+0x60a>
			sTime.Minutes-- ;
 80027e8:	4b71      	ldr	r3, [pc, #452]	; (80029b0 <RTC_date_and_time_update+0x618>)
 80027ea:	785b      	ldrb	r3, [r3, #1]
 80027ec:	3b01      	subs	r3, #1
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	4b6f      	ldr	r3, [pc, #444]	; (80029b0 <RTC_date_and_time_update+0x618>)
 80027f2:	705a      	strb	r2, [r3, #1]
			if(sTime.Minutes < 1){
 80027f4:	4b6e      	ldr	r3, [pc, #440]	; (80029b0 <RTC_date_and_time_update+0x618>)
 80027f6:	785b      	ldrb	r3, [r3, #1]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d102      	bne.n	8002802 <RTC_date_and_time_update+0x46a>
				sTime.Minutes = 60 ;
 80027fc:	4b6c      	ldr	r3, [pc, #432]	; (80029b0 <RTC_date_and_time_update+0x618>)
 80027fe:	223c      	movs	r2, #60	; 0x3c
 8002800:	705a      	strb	r2, [r3, #1]
			Lcd_cursor(&lcd, 0, 0) ;
 8002802:	2200      	movs	r2, #0
 8002804:	2100      	movs	r1, #0
 8002806:	486b      	ldr	r0, [pc, #428]	; (80029b4 <RTC_date_and_time_update+0x61c>)
 8002808:	f7fe fbc4 	bl	8000f94 <Lcd_cursor>
			Lcd_string(&lcd, g_date);
 800280c:	496a      	ldr	r1, [pc, #424]	; (80029b8 <RTC_date_and_time_update+0x620>)
 800280e:	4869      	ldr	r0, [pc, #420]	; (80029b4 <RTC_date_and_time_update+0x61c>)
 8002810:	f7fe fba0 	bl	8000f54 <Lcd_string>
			snprintf(g_time, sizeof(g_time),"%02d:%02d:%02d",sTime.Hours, sTime.Minutes, sTime.Seconds);
 8002814:	4b66      	ldr	r3, [pc, #408]	; (80029b0 <RTC_date_and_time_update+0x618>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	4619      	mov	r1, r3
 800281a:	4b65      	ldr	r3, [pc, #404]	; (80029b0 <RTC_date_and_time_update+0x618>)
 800281c:	785b      	ldrb	r3, [r3, #1]
 800281e:	461a      	mov	r2, r3
 8002820:	4b63      	ldr	r3, [pc, #396]	; (80029b0 <RTC_date_and_time_update+0x618>)
 8002822:	789b      	ldrb	r3, [r3, #2]
 8002824:	9301      	str	r3, [sp, #4]
 8002826:	9200      	str	r2, [sp, #0]
 8002828:	460b      	mov	r3, r1
 800282a:	4a64      	ldr	r2, [pc, #400]	; (80029bc <RTC_date_and_time_update+0x624>)
 800282c:	2109      	movs	r1, #9
 800282e:	4864      	ldr	r0, [pc, #400]	; (80029c0 <RTC_date_and_time_update+0x628>)
 8002830:	f004 ffce 	bl	80077d0 <sniprintf>
			Lcd_cursor(&lcd, 1, 0) ;
 8002834:	2200      	movs	r2, #0
 8002836:	2101      	movs	r1, #1
 8002838:	485e      	ldr	r0, [pc, #376]	; (80029b4 <RTC_date_and_time_update+0x61c>)
 800283a:	f7fe fbab 	bl	8000f94 <Lcd_cursor>
			Lcd_string(&lcd, g_time);
 800283e:	4960      	ldr	r1, [pc, #384]	; (80029c0 <RTC_date_and_time_update+0x628>)
 8002840:	485c      	ldr	r0, [pc, #368]	; (80029b4 <RTC_date_and_time_update+0x61c>)
 8002842:	f7fe fb87 	bl	8000f54 <Lcd_string>
			g_bottom_button_pressed =0 ;
 8002846:	4b5f      	ldr	r3, [pc, #380]	; (80029c4 <RTC_date_and_time_update+0x62c>)
 8002848:	2200      	movs	r2, #0
 800284a:	701a      	strb	r2, [r3, #0]
}
 800284c:	e0a9      	b.n	80029a2 <RTC_date_and_time_update+0x60a>
	else if(paramx == 6){//update seconds
 800284e:	79fb      	ldrb	r3, [r7, #7]
 8002850:	2b06      	cmp	r3, #6
 8002852:	d16c      	bne.n	800292e <RTC_date_and_time_update+0x596>
		if(g_top_button_pressed== 1){
 8002854:	4b55      	ldr	r3, [pc, #340]	; (80029ac <RTC_date_and_time_update+0x614>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d131      	bne.n	80028c0 <RTC_date_and_time_update+0x528>
			sTime.Seconds++ ;
 800285c:	4b54      	ldr	r3, [pc, #336]	; (80029b0 <RTC_date_and_time_update+0x618>)
 800285e:	789b      	ldrb	r3, [r3, #2]
 8002860:	3301      	adds	r3, #1
 8002862:	b2da      	uxtb	r2, r3
 8002864:	4b52      	ldr	r3, [pc, #328]	; (80029b0 <RTC_date_and_time_update+0x618>)
 8002866:	709a      	strb	r2, [r3, #2]
			if(sTime.Seconds > 60){
 8002868:	4b51      	ldr	r3, [pc, #324]	; (80029b0 <RTC_date_and_time_update+0x618>)
 800286a:	789b      	ldrb	r3, [r3, #2]
 800286c:	2b3c      	cmp	r3, #60	; 0x3c
 800286e:	d902      	bls.n	8002876 <RTC_date_and_time_update+0x4de>
				sTime.Seconds = 1 ;
 8002870:	4b4f      	ldr	r3, [pc, #316]	; (80029b0 <RTC_date_and_time_update+0x618>)
 8002872:	2201      	movs	r2, #1
 8002874:	709a      	strb	r2, [r3, #2]
			Lcd_cursor(&lcd, 0, 0) ;
 8002876:	2200      	movs	r2, #0
 8002878:	2100      	movs	r1, #0
 800287a:	484e      	ldr	r0, [pc, #312]	; (80029b4 <RTC_date_and_time_update+0x61c>)
 800287c:	f7fe fb8a 	bl	8000f94 <Lcd_cursor>
			Lcd_string(&lcd, g_date);
 8002880:	494d      	ldr	r1, [pc, #308]	; (80029b8 <RTC_date_and_time_update+0x620>)
 8002882:	484c      	ldr	r0, [pc, #304]	; (80029b4 <RTC_date_and_time_update+0x61c>)
 8002884:	f7fe fb66 	bl	8000f54 <Lcd_string>
			snprintf(g_time, sizeof(g_time),"%02d:%02d:%02d",sTime.Hours, sTime.Minutes, sTime.Seconds);
 8002888:	4b49      	ldr	r3, [pc, #292]	; (80029b0 <RTC_date_and_time_update+0x618>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	4619      	mov	r1, r3
 800288e:	4b48      	ldr	r3, [pc, #288]	; (80029b0 <RTC_date_and_time_update+0x618>)
 8002890:	785b      	ldrb	r3, [r3, #1]
 8002892:	461a      	mov	r2, r3
 8002894:	4b46      	ldr	r3, [pc, #280]	; (80029b0 <RTC_date_and_time_update+0x618>)
 8002896:	789b      	ldrb	r3, [r3, #2]
 8002898:	9301      	str	r3, [sp, #4]
 800289a:	9200      	str	r2, [sp, #0]
 800289c:	460b      	mov	r3, r1
 800289e:	4a47      	ldr	r2, [pc, #284]	; (80029bc <RTC_date_and_time_update+0x624>)
 80028a0:	2109      	movs	r1, #9
 80028a2:	4847      	ldr	r0, [pc, #284]	; (80029c0 <RTC_date_and_time_update+0x628>)
 80028a4:	f004 ff94 	bl	80077d0 <sniprintf>
			Lcd_cursor(&lcd, 1, 0) ;
 80028a8:	2200      	movs	r2, #0
 80028aa:	2101      	movs	r1, #1
 80028ac:	4841      	ldr	r0, [pc, #260]	; (80029b4 <RTC_date_and_time_update+0x61c>)
 80028ae:	f7fe fb71 	bl	8000f94 <Lcd_cursor>
			Lcd_string(&lcd, g_time);
 80028b2:	4943      	ldr	r1, [pc, #268]	; (80029c0 <RTC_date_and_time_update+0x628>)
 80028b4:	483f      	ldr	r0, [pc, #252]	; (80029b4 <RTC_date_and_time_update+0x61c>)
 80028b6:	f7fe fb4d 	bl	8000f54 <Lcd_string>
			g_top_button_pressed =0 ;
 80028ba:	4b3c      	ldr	r3, [pc, #240]	; (80029ac <RTC_date_and_time_update+0x614>)
 80028bc:	2200      	movs	r2, #0
 80028be:	701a      	strb	r2, [r3, #0]
		if(g_bottom_button_pressed== 1){
 80028c0:	4b40      	ldr	r3, [pc, #256]	; (80029c4 <RTC_date_and_time_update+0x62c>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d16c      	bne.n	80029a2 <RTC_date_and_time_update+0x60a>
			sTime.Seconds-- ;
 80028c8:	4b39      	ldr	r3, [pc, #228]	; (80029b0 <RTC_date_and_time_update+0x618>)
 80028ca:	789b      	ldrb	r3, [r3, #2]
 80028cc:	3b01      	subs	r3, #1
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	4b37      	ldr	r3, [pc, #220]	; (80029b0 <RTC_date_and_time_update+0x618>)
 80028d2:	709a      	strb	r2, [r3, #2]
			if(sTime.Seconds < 1){
 80028d4:	4b36      	ldr	r3, [pc, #216]	; (80029b0 <RTC_date_and_time_update+0x618>)
 80028d6:	789b      	ldrb	r3, [r3, #2]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d102      	bne.n	80028e2 <RTC_date_and_time_update+0x54a>
				sTime.Seconds = 60 ;
 80028dc:	4b34      	ldr	r3, [pc, #208]	; (80029b0 <RTC_date_and_time_update+0x618>)
 80028de:	223c      	movs	r2, #60	; 0x3c
 80028e0:	709a      	strb	r2, [r3, #2]
			Lcd_cursor(&lcd, 0, 0) ;
 80028e2:	2200      	movs	r2, #0
 80028e4:	2100      	movs	r1, #0
 80028e6:	4833      	ldr	r0, [pc, #204]	; (80029b4 <RTC_date_and_time_update+0x61c>)
 80028e8:	f7fe fb54 	bl	8000f94 <Lcd_cursor>
			Lcd_string(&lcd, g_date);
 80028ec:	4932      	ldr	r1, [pc, #200]	; (80029b8 <RTC_date_and_time_update+0x620>)
 80028ee:	4831      	ldr	r0, [pc, #196]	; (80029b4 <RTC_date_and_time_update+0x61c>)
 80028f0:	f7fe fb30 	bl	8000f54 <Lcd_string>
			snprintf(g_time, sizeof(g_time),"%02d:%02d:%02d",sTime.Hours, sTime.Minutes, sTime.Seconds);
 80028f4:	4b2e      	ldr	r3, [pc, #184]	; (80029b0 <RTC_date_and_time_update+0x618>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	4619      	mov	r1, r3
 80028fa:	4b2d      	ldr	r3, [pc, #180]	; (80029b0 <RTC_date_and_time_update+0x618>)
 80028fc:	785b      	ldrb	r3, [r3, #1]
 80028fe:	461a      	mov	r2, r3
 8002900:	4b2b      	ldr	r3, [pc, #172]	; (80029b0 <RTC_date_and_time_update+0x618>)
 8002902:	789b      	ldrb	r3, [r3, #2]
 8002904:	9301      	str	r3, [sp, #4]
 8002906:	9200      	str	r2, [sp, #0]
 8002908:	460b      	mov	r3, r1
 800290a:	4a2c      	ldr	r2, [pc, #176]	; (80029bc <RTC_date_and_time_update+0x624>)
 800290c:	2109      	movs	r1, #9
 800290e:	482c      	ldr	r0, [pc, #176]	; (80029c0 <RTC_date_and_time_update+0x628>)
 8002910:	f004 ff5e 	bl	80077d0 <sniprintf>
			Lcd_cursor(&lcd, 1, 0) ;
 8002914:	2200      	movs	r2, #0
 8002916:	2101      	movs	r1, #1
 8002918:	4826      	ldr	r0, [pc, #152]	; (80029b4 <RTC_date_and_time_update+0x61c>)
 800291a:	f7fe fb3b 	bl	8000f94 <Lcd_cursor>
			Lcd_string(&lcd, g_time);
 800291e:	4928      	ldr	r1, [pc, #160]	; (80029c0 <RTC_date_and_time_update+0x628>)
 8002920:	4824      	ldr	r0, [pc, #144]	; (80029b4 <RTC_date_and_time_update+0x61c>)
 8002922:	f7fe fb17 	bl	8000f54 <Lcd_string>
			g_bottom_button_pressed =0 ;
 8002926:	4b27      	ldr	r3, [pc, #156]	; (80029c4 <RTC_date_and_time_update+0x62c>)
 8002928:	2200      	movs	r2, #0
 800292a:	701a      	strb	r2, [r3, #0]
}
 800292c:	e039      	b.n	80029a2 <RTC_date_and_time_update+0x60a>
		if(paramx == 7){
 800292e:	79fb      	ldrb	r3, [r7, #7]
 8002930:	2b07      	cmp	r3, #7
 8002932:	d136      	bne.n	80029a2 <RTC_date_and_time_update+0x60a>
			g_update_RTC = 0 ; //done updating the RTC
 8002934:	4b24      	ldr	r3, [pc, #144]	; (80029c8 <RTC_date_and_time_update+0x630>)
 8002936:	2200      	movs	r2, #0
 8002938:	701a      	strb	r2, [r3, #0]
			set_RTC_date_and_time() ;
 800293a:	f000 f883 	bl	8002a44 <set_RTC_date_and_time>
			snprintf(g_date, sizeof(g_date),"%02d/%02d/20%02d",sDate.Date, sDate.Month,sDate.Year);
 800293e:	4b23      	ldr	r3, [pc, #140]	; (80029cc <RTC_date_and_time_update+0x634>)
 8002940:	789b      	ldrb	r3, [r3, #2]
 8002942:	4619      	mov	r1, r3
 8002944:	4b21      	ldr	r3, [pc, #132]	; (80029cc <RTC_date_and_time_update+0x634>)
 8002946:	785b      	ldrb	r3, [r3, #1]
 8002948:	461a      	mov	r2, r3
 800294a:	4b20      	ldr	r3, [pc, #128]	; (80029cc <RTC_date_and_time_update+0x634>)
 800294c:	78db      	ldrb	r3, [r3, #3]
 800294e:	9301      	str	r3, [sp, #4]
 8002950:	9200      	str	r2, [sp, #0]
 8002952:	460b      	mov	r3, r1
 8002954:	4a1e      	ldr	r2, [pc, #120]	; (80029d0 <RTC_date_and_time_update+0x638>)
 8002956:	210b      	movs	r1, #11
 8002958:	4817      	ldr	r0, [pc, #92]	; (80029b8 <RTC_date_and_time_update+0x620>)
 800295a:	f004 ff39 	bl	80077d0 <sniprintf>
			snprintf(g_time, sizeof(g_time),"%02d:%02d:%02d",sTime.Hours, sTime.Minutes, sTime.Seconds);
 800295e:	4b14      	ldr	r3, [pc, #80]	; (80029b0 <RTC_date_and_time_update+0x618>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	4619      	mov	r1, r3
 8002964:	4b12      	ldr	r3, [pc, #72]	; (80029b0 <RTC_date_and_time_update+0x618>)
 8002966:	785b      	ldrb	r3, [r3, #1]
 8002968:	461a      	mov	r2, r3
 800296a:	4b11      	ldr	r3, [pc, #68]	; (80029b0 <RTC_date_and_time_update+0x618>)
 800296c:	789b      	ldrb	r3, [r3, #2]
 800296e:	9301      	str	r3, [sp, #4]
 8002970:	9200      	str	r2, [sp, #0]
 8002972:	460b      	mov	r3, r1
 8002974:	4a11      	ldr	r2, [pc, #68]	; (80029bc <RTC_date_and_time_update+0x624>)
 8002976:	2109      	movs	r1, #9
 8002978:	4811      	ldr	r0, [pc, #68]	; (80029c0 <RTC_date_and_time_update+0x628>)
 800297a:	f004 ff29 	bl	80077d0 <sniprintf>
			Lcd_cursor(&lcd, 0, 0) ;
 800297e:	2200      	movs	r2, #0
 8002980:	2100      	movs	r1, #0
 8002982:	480c      	ldr	r0, [pc, #48]	; (80029b4 <RTC_date_and_time_update+0x61c>)
 8002984:	f7fe fb06 	bl	8000f94 <Lcd_cursor>
			Lcd_string(&lcd, g_date);
 8002988:	490b      	ldr	r1, [pc, #44]	; (80029b8 <RTC_date_and_time_update+0x620>)
 800298a:	480a      	ldr	r0, [pc, #40]	; (80029b4 <RTC_date_and_time_update+0x61c>)
 800298c:	f7fe fae2 	bl	8000f54 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0) ;
 8002990:	2200      	movs	r2, #0
 8002992:	2101      	movs	r1, #1
 8002994:	4807      	ldr	r0, [pc, #28]	; (80029b4 <RTC_date_and_time_update+0x61c>)
 8002996:	f7fe fafd 	bl	8000f94 <Lcd_cursor>
			Lcd_string(&lcd, g_time);
 800299a:	4909      	ldr	r1, [pc, #36]	; (80029c0 <RTC_date_and_time_update+0x628>)
 800299c:	4805      	ldr	r0, [pc, #20]	; (80029b4 <RTC_date_and_time_update+0x61c>)
 800299e:	f7fe fad9 	bl	8000f54 <Lcd_string>
}
 80029a2:	bf00      	nop
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	20000372 	.word	0x20000372
 80029b0:	2000031c 	.word	0x2000031c
 80029b4:	20000304 	.word	0x20000304
 80029b8:	20000338 	.word	0x20000338
 80029bc:	08008fe8 	.word	0x08008fe8
 80029c0:	20000344 	.word	0x20000344
 80029c4:	20000373 	.word	0x20000373
 80029c8:	20000334 	.word	0x20000334
 80029cc:	20000330 	.word	0x20000330
 80029d0:	08008fd4 	.word	0x08008fd4

080029d4 <g_clock_menu_set_and_parameter_update>:

void g_clock_menu_set_and_parameter_update(){
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
	if(g_middle_button_pressed == 1){
 80029d8:	4b15      	ldr	r3, [pc, #84]	; (8002a30 <g_clock_menu_set_and_parameter_update+0x5c>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d11c      	bne.n	8002a1a <g_clock_menu_set_and_parameter_update+0x46>
		g_middle_button_pressed = 0;
 80029e0:	4b13      	ldr	r3, [pc, #76]	; (8002a30 <g_clock_menu_set_and_parameter_update+0x5c>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	701a      	strb	r2, [r3, #0]

		//RTC menu
		if(g_update_RTC ==0){
 80029e6:	4b13      	ldr	r3, [pc, #76]	; (8002a34 <g_clock_menu_set_and_parameter_update+0x60>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d108      	bne.n	8002a00 <g_clock_menu_set_and_parameter_update+0x2c>
			g_update_RTC = 1;
 80029ee:	4b11      	ldr	r3, [pc, #68]	; (8002a34 <g_clock_menu_set_and_parameter_update+0x60>)
 80029f0:	2201      	movs	r2, #1
 80029f2:	701a      	strb	r2, [r3, #0]

			//set LCD in mode 3 - LCD parameter
			display_result = 1;
 80029f4:	4b10      	ldr	r3, [pc, #64]	; (8002a38 <g_clock_menu_set_and_parameter_update+0x64>)
 80029f6:	2201      	movs	r2, #1
 80029f8:	701a      	strb	r2, [r3, #0]

			g_lcd_mode = 3  ;
 80029fa:	4b10      	ldr	r3, [pc, #64]	; (8002a3c <g_clock_menu_set_and_parameter_update+0x68>)
 80029fc:	2203      	movs	r2, #3
 80029fe:	701a      	strb	r2, [r3, #0]
		}

		//increment parameter to update
		g_RTC_parameter++ ;
 8002a00:	4b0f      	ldr	r3, [pc, #60]	; (8002a40 <g_clock_menu_set_and_parameter_update+0x6c>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	3301      	adds	r3, #1
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	4b0d      	ldr	r3, [pc, #52]	; (8002a40 <g_clock_menu_set_and_parameter_update+0x6c>)
 8002a0a:	701a      	strb	r2, [r3, #0]

		if(g_RTC_parameter>7){
 8002a0c:	4b0c      	ldr	r3, [pc, #48]	; (8002a40 <g_clock_menu_set_and_parameter_update+0x6c>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	2b07      	cmp	r3, #7
 8002a12:	d902      	bls.n	8002a1a <g_clock_menu_set_and_parameter_update+0x46>
			g_RTC_parameter = 1; //cycle back to first parameter once RTC entered again
 8002a14:	4b0a      	ldr	r3, [pc, #40]	; (8002a40 <g_clock_menu_set_and_parameter_update+0x6c>)
 8002a16:	2201      	movs	r2, #1
 8002a18:	701a      	strb	r2, [r3, #0]
		}

	}

	//update parameters
	if(g_update_RTC == 1){
 8002a1a:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <g_clock_menu_set_and_parameter_update+0x60>)
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d104      	bne.n	8002a2c <g_clock_menu_set_and_parameter_update+0x58>
		RTC_date_and_time_update(g_RTC_parameter) ;
 8002a22:	4b07      	ldr	r3, [pc, #28]	; (8002a40 <g_clock_menu_set_and_parameter_update+0x6c>)
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff fcb6 	bl	8002398 <RTC_date_and_time_update>
	}

}
 8002a2c:	bf00      	nop
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	20000374 	.word	0x20000374
 8002a34:	20000334 	.word	0x20000334
 8002a38:	20000303 	.word	0x20000303
 8002a3c:	20000302 	.word	0x20000302
 8002a40:	20000335 	.word	0x20000335

08002a44 <set_RTC_date_and_time>:

/**
 * This function sets the updated time
 */
void set_RTC_date_and_time(){
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) ;
 8002a48:	2200      	movs	r2, #0
 8002a4a:	4905      	ldr	r1, [pc, #20]	; (8002a60 <set_RTC_date_and_time+0x1c>)
 8002a4c:	4805      	ldr	r0, [pc, #20]	; (8002a64 <set_RTC_date_and_time+0x20>)
 8002a4e:	f002 fd13 	bl	8005478 <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) ;
 8002a52:	2200      	movs	r2, #0
 8002a54:	4904      	ldr	r1, [pc, #16]	; (8002a68 <set_RTC_date_and_time+0x24>)
 8002a56:	4803      	ldr	r0, [pc, #12]	; (8002a64 <set_RTC_date_and_time+0x20>)
 8002a58:	f002 fe06 	bl	8005668 <HAL_RTC_SetDate>
}
 8002a5c:	bf00      	nop
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	2000031c 	.word	0x2000031c
 8002a64:	2000010c 	.word	0x2000010c
 8002a68:	20000330 	.word	0x20000330

08002a6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a6c:	b5b0      	push	{r4, r5, r7, lr}
 8002a6e:	b08a      	sub	sp, #40	; 0x28
 8002a70:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a72:	f000 fefd 	bl	8003870 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a76:	f000 f85f 	bl	8002b38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a7a:	f000 fa89 	bl	8002f90 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002a7e:	f000 fa5b 	bl	8002f38 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8002a82:	f000 f8c5 	bl	8002c10 <MX_ADC1_Init>
  MX_TIM2_Init();
 8002a86:	f000 f999 	bl	8002dbc <MX_TIM2_Init>
  MX_TIM3_Init();
 8002a8a:	f000 fa07 	bl	8002e9c <MX_TIM3_Init>
  MX_RTC_Init();
 8002a8e:	f000 f93b 	bl	8002d08 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(150);
 8002a92:	2096      	movs	r0, #150	; 0x96
 8002a94:	f000 ff5e 	bl	8003954 <HAL_Delay>
  HAL_UART_Transmit_IT(&huart2, (uint8_t*)studentNum, 13) ;
 8002a98:	220d      	movs	r2, #13
 8002a9a:	491e      	ldr	r1, [pc, #120]	; (8002b14 <main+0xa8>)
 8002a9c:	481e      	ldr	r0, [pc, #120]	; (8002b18 <main+0xac>)
 8002a9e:	f003 fef6 	bl	800688e <HAL_UART_Transmit_IT>

  HAL_UART_Receive_IT(&huart2, (uint8_t*)char_rcvd, 1) ;
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	491d      	ldr	r1, [pc, #116]	; (8002b1c <main+0xb0>)
 8002aa6:	481c      	ldr	r0, [pc, #112]	; (8002b18 <main+0xac>)
 8002aa8:	f003 ff36 	bl	8006918 <HAL_UART_Receive_IT>

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1)  ; // input to trigger interrupt - LMT01 sensor
 8002aac:	2100      	movs	r1, #0
 8002aae:	481c      	ldr	r0, [pc, #112]	; (8002b20 <main+0xb4>)
 8002ab0:	f003 f812 	bl	8005ad8 <HAL_TIM_IC_Start_IT>

  g_time_passed = HAL_GetTick() ; //snapshot of time
 8002ab4:	f000 ff42 	bl	800393c <HAL_GetTick>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	4a1a      	ldr	r2, [pc, #104]	; (8002b24 <main+0xb8>)
 8002abc:	6013      	str	r3, [r2, #0]

  //Write to LCD
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET) ;
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ac4:	4818      	ldr	r0, [pc, #96]	; (8002b28 <main+0xbc>)
 8002ac6:	f001 fe9b 	bl	8004800 <HAL_GPIO_WritePin>

  lcd = Lcd_create(ports, pins, GPIOB, GPIO_PIN_14, GPIOB, GPIO_PIN_2, LCD_4_BIT_MODE);
 8002aca:	4c18      	ldr	r4, [pc, #96]	; (8002b2c <main+0xc0>)
 8002acc:	4638      	mov	r0, r7
 8002ace:	2300      	movs	r3, #0
 8002ad0:	9303      	str	r3, [sp, #12]
 8002ad2:	2304      	movs	r3, #4
 8002ad4:	9302      	str	r3, [sp, #8]
 8002ad6:	4b14      	ldr	r3, [pc, #80]	; (8002b28 <main+0xbc>)
 8002ad8:	9301      	str	r3, [sp, #4]
 8002ada:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	4b11      	ldr	r3, [pc, #68]	; (8002b28 <main+0xbc>)
 8002ae2:	4a13      	ldr	r2, [pc, #76]	; (8002b30 <main+0xc4>)
 8002ae4:	4913      	ldr	r1, [pc, #76]	; (8002b34 <main+0xc8>)
 8002ae6:	f7fe f9e1 	bl	8000eac <Lcd_create>
 8002aea:	4625      	mov	r5, r4
 8002aec:	463c      	mov	r4, r7
 8002aee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002af0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002af2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002af6:	e885 0003 	stmia.w	r5, {r0, r1}
  Lcd_clear(&lcd);
 8002afa:	480c      	ldr	r0, [pc, #48]	; (8002b2c <main+0xc0>)
 8002afc:	f7fe fa64 	bl	8000fc8 <Lcd_clear>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //update system state based on input recvd
	  system_state_update() ;
 8002b00:	f7fe fc0a 	bl	8001318 <system_state_update>

	  //UR3: Evironment measure: measure Ta & measure Tb  (Put in Function)/Modularize
	  en_measurements_and_responses() ;
 8002b04:	f7fe ff22 	bl	800194c <en_measurements_and_responses>

	  //UR2: PV Module -(Put in Function)/Modularize
	  sp_measurements_and_responses();
 8002b08:	f7fe ffce 	bl	8001aa8 <sp_measurements_and_responses>

	  //update LCD - code runs seqeuntionally and lcd updates based on variable states above
	  change_lcd_display_mode();
 8002b0c:	f7ff faa8 	bl	8002060 <change_lcd_display_mode>
	  system_state_update() ;
 8002b10:	e7f6      	b.n	8002b00 <main+0x94>
 8002b12:	bf00      	nop
 8002b14:	20000000 	.word	0x20000000
 8002b18:	200001bc 	.word	0x200001bc
 8002b1c:	20000010 	.word	0x20000010
 8002b20:	2000012c 	.word	0x2000012c
 8002b24:	200002cc 	.word	0x200002cc
 8002b28:	40020400 	.word	0x40020400
 8002b2c:	20000304 	.word	0x20000304
 8002b30:	20000028 	.word	0x20000028
 8002b34:	20000018 	.word	0x20000018

08002b38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b094      	sub	sp, #80	; 0x50
 8002b3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b3e:	f107 0320 	add.w	r3, r7, #32
 8002b42:	2230      	movs	r2, #48	; 0x30
 8002b44:	2100      	movs	r1, #0
 8002b46:	4618      	mov	r0, r3
 8002b48:	f004 fe3a 	bl	80077c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b4c:	f107 030c 	add.w	r3, r7, #12
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	605a      	str	r2, [r3, #4]
 8002b56:	609a      	str	r2, [r3, #8]
 8002b58:	60da      	str	r2, [r3, #12]
 8002b5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	60bb      	str	r3, [r7, #8]
 8002b60:	4b29      	ldr	r3, [pc, #164]	; (8002c08 <SystemClock_Config+0xd0>)
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	4a28      	ldr	r2, [pc, #160]	; (8002c08 <SystemClock_Config+0xd0>)
 8002b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b6a:	6413      	str	r3, [r2, #64]	; 0x40
 8002b6c:	4b26      	ldr	r3, [pc, #152]	; (8002c08 <SystemClock_Config+0xd0>)
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b74:	60bb      	str	r3, [r7, #8]
 8002b76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b78:	2300      	movs	r3, #0
 8002b7a:	607b      	str	r3, [r7, #4]
 8002b7c:	4b23      	ldr	r3, [pc, #140]	; (8002c0c <SystemClock_Config+0xd4>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a22      	ldr	r2, [pc, #136]	; (8002c0c <SystemClock_Config+0xd4>)
 8002b82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b86:	6013      	str	r3, [r2, #0]
 8002b88:	4b20      	ldr	r3, [pc, #128]	; (8002c0c <SystemClock_Config+0xd4>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002b90:	607b      	str	r3, [r7, #4]
 8002b92:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002b94:	230a      	movs	r3, #10
 8002b96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b9c:	2310      	movs	r3, #16
 8002b9e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002bac:	2310      	movs	r3, #16
 8002bae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002bb0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002bb4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002bb6:	2304      	movs	r3, #4
 8002bb8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002bba:	2304      	movs	r3, #4
 8002bbc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bbe:	f107 0320 	add.w	r3, r7, #32
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f001 fe5a 	bl	800487c <HAL_RCC_OscConfig>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002bce:	f000 fa97 	bl	8003100 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bd2:	230f      	movs	r3, #15
 8002bd4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002bde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002be2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002be4:	2300      	movs	r3, #0
 8002be6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002be8:	f107 030c 	add.w	r3, r7, #12
 8002bec:	2102      	movs	r1, #2
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f002 f8bc 	bl	8004d6c <HAL_RCC_ClockConfig>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002bfa:	f000 fa81 	bl	8003100 <Error_Handler>
  }
}
 8002bfe:	bf00      	nop
 8002c00:	3750      	adds	r7, #80	; 0x50
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	40007000 	.word	0x40007000

08002c10 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002c16:	463b      	mov	r3, r7
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	605a      	str	r2, [r3, #4]
 8002c1e:	609a      	str	r2, [r3, #8]
 8002c20:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002c22:	4b36      	ldr	r3, [pc, #216]	; (8002cfc <MX_ADC1_Init+0xec>)
 8002c24:	4a36      	ldr	r2, [pc, #216]	; (8002d00 <MX_ADC1_Init+0xf0>)
 8002c26:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002c28:	4b34      	ldr	r3, [pc, #208]	; (8002cfc <MX_ADC1_Init+0xec>)
 8002c2a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c2e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002c30:	4b32      	ldr	r3, [pc, #200]	; (8002cfc <MX_ADC1_Init+0xec>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002c36:	4b31      	ldr	r3, [pc, #196]	; (8002cfc <MX_ADC1_Init+0xec>)
 8002c38:	2201      	movs	r2, #1
 8002c3a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002c3c:	4b2f      	ldr	r3, [pc, #188]	; (8002cfc <MX_ADC1_Init+0xec>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002c42:	4b2e      	ldr	r3, [pc, #184]	; (8002cfc <MX_ADC1_Init+0xec>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002c4a:	4b2c      	ldr	r3, [pc, #176]	; (8002cfc <MX_ADC1_Init+0xec>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002c50:	4b2a      	ldr	r3, [pc, #168]	; (8002cfc <MX_ADC1_Init+0xec>)
 8002c52:	4a2c      	ldr	r2, [pc, #176]	; (8002d04 <MX_ADC1_Init+0xf4>)
 8002c54:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c56:	4b29      	ldr	r3, [pc, #164]	; (8002cfc <MX_ADC1_Init+0xec>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8002c5c:	4b27      	ldr	r3, [pc, #156]	; (8002cfc <MX_ADC1_Init+0xec>)
 8002c5e:	2204      	movs	r2, #4
 8002c60:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002c62:	4b26      	ldr	r3, [pc, #152]	; (8002cfc <MX_ADC1_Init+0xec>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002c6a:	4b24      	ldr	r3, [pc, #144]	; (8002cfc <MX_ADC1_Init+0xec>)
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002c70:	4822      	ldr	r0, [pc, #136]	; (8002cfc <MX_ADC1_Init+0xec>)
 8002c72:	f000 fe93 	bl	800399c <HAL_ADC_Init>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002c7c:	f000 fa40 	bl	8003100 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002c80:	2300      	movs	r3, #0
 8002c82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002c84:	2301      	movs	r3, #1
 8002c86:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c8c:	463b      	mov	r3, r7
 8002c8e:	4619      	mov	r1, r3
 8002c90:	481a      	ldr	r0, [pc, #104]	; (8002cfc <MX_ADC1_Init+0xec>)
 8002c92:	f001 f847 	bl	8003d24 <HAL_ADC_ConfigChannel>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002c9c:	f000 fa30 	bl	8003100 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8002ca0:	230e      	movs	r3, #14
 8002ca2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ca8:	463b      	mov	r3, r7
 8002caa:	4619      	mov	r1, r3
 8002cac:	4813      	ldr	r0, [pc, #76]	; (8002cfc <MX_ADC1_Init+0xec>)
 8002cae:	f001 f839 	bl	8003d24 <HAL_ADC_ConfigChannel>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002cb8:	f000 fa22 	bl	8003100 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002cbc:	2309      	movs	r3, #9
 8002cbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002cc4:	463b      	mov	r3, r7
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	480c      	ldr	r0, [pc, #48]	; (8002cfc <MX_ADC1_Init+0xec>)
 8002cca:	f001 f82b 	bl	8003d24 <HAL_ADC_ConfigChannel>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002cd4:	f000 fa14 	bl	8003100 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002cd8:	230f      	movs	r3, #15
 8002cda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002cdc:	2304      	movs	r3, #4
 8002cde:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ce0:	463b      	mov	r3, r7
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	4805      	ldr	r0, [pc, #20]	; (8002cfc <MX_ADC1_Init+0xec>)
 8002ce6:	f001 f81d 	bl	8003d24 <HAL_ADC_ConfigChannel>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002cf0:	f000 fa06 	bl	8003100 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002cf4:	bf00      	nop
 8002cf6:	3710      	adds	r7, #16
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	200000c4 	.word	0x200000c4
 8002d00:	40012000 	.word	0x40012000
 8002d04:	0f000001 	.word	0x0f000001

08002d08 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002d0e:	1d3b      	adds	r3, r7, #4
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	605a      	str	r2, [r3, #4]
 8002d16:	609a      	str	r2, [r3, #8]
 8002d18:	60da      	str	r2, [r3, #12]
 8002d1a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002d20:	4b24      	ldr	r3, [pc, #144]	; (8002db4 <MX_RTC_Init+0xac>)
 8002d22:	4a25      	ldr	r2, [pc, #148]	; (8002db8 <MX_RTC_Init+0xb0>)
 8002d24:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002d26:	4b23      	ldr	r3, [pc, #140]	; (8002db4 <MX_RTC_Init+0xac>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002d2c:	4b21      	ldr	r3, [pc, #132]	; (8002db4 <MX_RTC_Init+0xac>)
 8002d2e:	227f      	movs	r2, #127	; 0x7f
 8002d30:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002d32:	4b20      	ldr	r3, [pc, #128]	; (8002db4 <MX_RTC_Init+0xac>)
 8002d34:	22ff      	movs	r2, #255	; 0xff
 8002d36:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002d38:	4b1e      	ldr	r3, [pc, #120]	; (8002db4 <MX_RTC_Init+0xac>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002d3e:	4b1d      	ldr	r3, [pc, #116]	; (8002db4 <MX_RTC_Init+0xac>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002d44:	4b1b      	ldr	r3, [pc, #108]	; (8002db4 <MX_RTC_Init+0xac>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002d4a:	481a      	ldr	r0, [pc, #104]	; (8002db4 <MX_RTC_Init+0xac>)
 8002d4c:	f002 fb1e 	bl	800538c <HAL_RTC_Init>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8002d56:	f000 f9d3 	bl	8003100 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x16;
 8002d5a:	2316      	movs	r3, #22
 8002d5c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x20;
 8002d5e:	2320      	movs	r3, #32
 8002d60:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002d62:	2300      	movs	r3, #0
 8002d64:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002d66:	2300      	movs	r3, #0
 8002d68:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002d6e:	1d3b      	adds	r3, r7, #4
 8002d70:	2201      	movs	r2, #1
 8002d72:	4619      	mov	r1, r3
 8002d74:	480f      	ldr	r0, [pc, #60]	; (8002db4 <MX_RTC_Init+0xac>)
 8002d76:	f002 fb7f 	bl	8005478 <HAL_RTC_SetTime>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8002d80:	f000 f9be 	bl	8003100 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 8002d84:	2304      	movs	r3, #4
 8002d86:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_SEPTEMBER;
 8002d88:	2309      	movs	r3, #9
 8002d8a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x19;
 8002d8c:	2319      	movs	r3, #25
 8002d8e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x24;
 8002d90:	2324      	movs	r3, #36	; 0x24
 8002d92:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002d94:	463b      	mov	r3, r7
 8002d96:	2201      	movs	r2, #1
 8002d98:	4619      	mov	r1, r3
 8002d9a:	4806      	ldr	r0, [pc, #24]	; (8002db4 <MX_RTC_Init+0xac>)
 8002d9c:	f002 fc64 	bl	8005668 <HAL_RTC_SetDate>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8002da6:	f000 f9ab 	bl	8003100 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002daa:	bf00      	nop
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	2000010c 	.word	0x2000010c
 8002db8:	40002800 	.word	0x40002800

08002dbc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b08a      	sub	sp, #40	; 0x28
 8002dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dc2:	f107 0318 	add.w	r3, r7, #24
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	601a      	str	r2, [r3, #0]
 8002dca:	605a      	str	r2, [r3, #4]
 8002dcc:	609a      	str	r2, [r3, #8]
 8002dce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dd0:	f107 0310 	add.w	r3, r7, #16
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002dda:	463b      	mov	r3, r7
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	605a      	str	r2, [r3, #4]
 8002de2:	609a      	str	r2, [r3, #8]
 8002de4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002de6:	4b2c      	ldr	r3, [pc, #176]	; (8002e98 <MX_TIM2_Init+0xdc>)
 8002de8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002dec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8002dee:	4b2a      	ldr	r3, [pc, #168]	; (8002e98 <MX_TIM2_Init+0xdc>)
 8002df0:	2253      	movs	r2, #83	; 0x53
 8002df2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002df4:	4b28      	ldr	r3, [pc, #160]	; (8002e98 <MX_TIM2_Init+0xdc>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002dfa:	4b27      	ldr	r3, [pc, #156]	; (8002e98 <MX_TIM2_Init+0xdc>)
 8002dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8002e00:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e02:	4b25      	ldr	r3, [pc, #148]	; (8002e98 <MX_TIM2_Init+0xdc>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e08:	4b23      	ldr	r3, [pc, #140]	; (8002e98 <MX_TIM2_Init+0xdc>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e0e:	4822      	ldr	r0, [pc, #136]	; (8002e98 <MX_TIM2_Init+0xdc>)
 8002e10:	f002 fdba 	bl	8005988 <HAL_TIM_Base_Init>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8002e1a:	f000 f971 	bl	8003100 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e22:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e24:	f107 0318 	add.w	r3, r7, #24
 8002e28:	4619      	mov	r1, r3
 8002e2a:	481b      	ldr	r0, [pc, #108]	; (8002e98 <MX_TIM2_Init+0xdc>)
 8002e2c:	f003 f912 	bl	8006054 <HAL_TIM_ConfigClockSource>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002e36:	f000 f963 	bl	8003100 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002e3a:	4817      	ldr	r0, [pc, #92]	; (8002e98 <MX_TIM2_Init+0xdc>)
 8002e3c:	f002 fdf3 	bl	8005a26 <HAL_TIM_IC_Init>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002e46:	f000 f95b 	bl	8003100 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e52:	f107 0310 	add.w	r3, r7, #16
 8002e56:	4619      	mov	r1, r3
 8002e58:	480f      	ldr	r0, [pc, #60]	; (8002e98 <MX_TIM2_Init+0xdc>)
 8002e5a:	f003 fc49 	bl	80066f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8002e64:	f000 f94c 	bl	8003100 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002e70:	2300      	movs	r3, #0
 8002e72:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002e74:	2300      	movs	r3, #0
 8002e76:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002e78:	463b      	mov	r3, r7
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4806      	ldr	r0, [pc, #24]	; (8002e98 <MX_TIM2_Init+0xdc>)
 8002e80:	f003 f84c 	bl	8005f1c <HAL_TIM_IC_ConfigChannel>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8002e8a:	f000 f939 	bl	8003100 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002e8e:	bf00      	nop
 8002e90:	3728      	adds	r7, #40	; 0x28
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	2000012c 	.word	0x2000012c

08002e9c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ea2:	f107 0308 	add.w	r3, r7, #8
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	605a      	str	r2, [r3, #4]
 8002eac:	609a      	str	r2, [r3, #8]
 8002eae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eb0:	463b      	mov	r3, r7
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002eb8:	4b1d      	ldr	r3, [pc, #116]	; (8002f30 <MX_TIM3_Init+0x94>)
 8002eba:	4a1e      	ldr	r2, [pc, #120]	; (8002f34 <MX_TIM3_Init+0x98>)
 8002ebc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002ebe:	4b1c      	ldr	r3, [pc, #112]	; (8002f30 <MX_TIM3_Init+0x94>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ec4:	4b1a      	ldr	r3, [pc, #104]	; (8002f30 <MX_TIM3_Init+0x94>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002eca:	4b19      	ldr	r3, [pc, #100]	; (8002f30 <MX_TIM3_Init+0x94>)
 8002ecc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ed0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ed2:	4b17      	ldr	r3, [pc, #92]	; (8002f30 <MX_TIM3_Init+0x94>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ed8:	4b15      	ldr	r3, [pc, #84]	; (8002f30 <MX_TIM3_Init+0x94>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002ede:	4814      	ldr	r0, [pc, #80]	; (8002f30 <MX_TIM3_Init+0x94>)
 8002ee0:	f002 fd52 	bl	8005988 <HAL_TIM_Base_Init>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002eea:	f000 f909 	bl	8003100 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002eee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ef2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002ef4:	f107 0308 	add.w	r3, r7, #8
 8002ef8:	4619      	mov	r1, r3
 8002efa:	480d      	ldr	r0, [pc, #52]	; (8002f30 <MX_TIM3_Init+0x94>)
 8002efc:	f003 f8aa 	bl	8006054 <HAL_TIM_ConfigClockSource>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002f06:	f000 f8fb 	bl	8003100 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f12:	463b      	mov	r3, r7
 8002f14:	4619      	mov	r1, r3
 8002f16:	4806      	ldr	r0, [pc, #24]	; (8002f30 <MX_TIM3_Init+0x94>)
 8002f18:	f003 fbea 	bl	80066f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002f22:	f000 f8ed 	bl	8003100 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002f26:	bf00      	nop
 8002f28:	3718      	adds	r7, #24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	20000174 	.word	0x20000174
 8002f34:	40000400 	.word	0x40000400

08002f38 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f3c:	4b12      	ldr	r3, [pc, #72]	; (8002f88 <MX_USART2_UART_Init+0x50>)
 8002f3e:	4a13      	ldr	r2, [pc, #76]	; (8002f8c <MX_USART2_UART_Init+0x54>)
 8002f40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f42:	4b11      	ldr	r3, [pc, #68]	; (8002f88 <MX_USART2_UART_Init+0x50>)
 8002f44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8002f4a:	4b0f      	ldr	r3, [pc, #60]	; (8002f88 <MX_USART2_UART_Init+0x50>)
 8002f4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f50:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f52:	4b0d      	ldr	r3, [pc, #52]	; (8002f88 <MX_USART2_UART_Init+0x50>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_ODD;
 8002f58:	4b0b      	ldr	r3, [pc, #44]	; (8002f88 <MX_USART2_UART_Init+0x50>)
 8002f5a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8002f5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f60:	4b09      	ldr	r3, [pc, #36]	; (8002f88 <MX_USART2_UART_Init+0x50>)
 8002f62:	220c      	movs	r2, #12
 8002f64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f66:	4b08      	ldr	r3, [pc, #32]	; (8002f88 <MX_USART2_UART_Init+0x50>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f6c:	4b06      	ldr	r3, [pc, #24]	; (8002f88 <MX_USART2_UART_Init+0x50>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f72:	4805      	ldr	r0, [pc, #20]	; (8002f88 <MX_USART2_UART_Init+0x50>)
 8002f74:	f003 fc3e 	bl	80067f4 <HAL_UART_Init>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8002f7e:	f000 f8bf 	bl	8003100 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f82:	bf00      	nop
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	200001bc 	.word	0x200001bc
 8002f8c:	40004400 	.word	0x40004400

08002f90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b08a      	sub	sp, #40	; 0x28
 8002f94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f96:	f107 0314 	add.w	r3, r7, #20
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	601a      	str	r2, [r3, #0]
 8002f9e:	605a      	str	r2, [r3, #4]
 8002fa0:	609a      	str	r2, [r3, #8]
 8002fa2:	60da      	str	r2, [r3, #12]
 8002fa4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	613b      	str	r3, [r7, #16]
 8002faa:	4b51      	ldr	r3, [pc, #324]	; (80030f0 <MX_GPIO_Init+0x160>)
 8002fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fae:	4a50      	ldr	r2, [pc, #320]	; (80030f0 <MX_GPIO_Init+0x160>)
 8002fb0:	f043 0304 	orr.w	r3, r3, #4
 8002fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fb6:	4b4e      	ldr	r3, [pc, #312]	; (80030f0 <MX_GPIO_Init+0x160>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fba:	f003 0304 	and.w	r3, r3, #4
 8002fbe:	613b      	str	r3, [r7, #16]
 8002fc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	60fb      	str	r3, [r7, #12]
 8002fc6:	4b4a      	ldr	r3, [pc, #296]	; (80030f0 <MX_GPIO_Init+0x160>)
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fca:	4a49      	ldr	r2, [pc, #292]	; (80030f0 <MX_GPIO_Init+0x160>)
 8002fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fd2:	4b47      	ldr	r3, [pc, #284]	; (80030f0 <MX_GPIO_Init+0x160>)
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fda:	60fb      	str	r3, [r7, #12]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60bb      	str	r3, [r7, #8]
 8002fe2:	4b43      	ldr	r3, [pc, #268]	; (80030f0 <MX_GPIO_Init+0x160>)
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe6:	4a42      	ldr	r2, [pc, #264]	; (80030f0 <MX_GPIO_Init+0x160>)
 8002fe8:	f043 0301 	orr.w	r3, r3, #1
 8002fec:	6313      	str	r3, [r2, #48]	; 0x30
 8002fee:	4b40      	ldr	r3, [pc, #256]	; (80030f0 <MX_GPIO_Init+0x160>)
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	60bb      	str	r3, [r7, #8]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	607b      	str	r3, [r7, #4]
 8002ffe:	4b3c      	ldr	r3, [pc, #240]	; (80030f0 <MX_GPIO_Init+0x160>)
 8003000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003002:	4a3b      	ldr	r2, [pc, #236]	; (80030f0 <MX_GPIO_Init+0x160>)
 8003004:	f043 0302 	orr.w	r3, r3, #2
 8003008:	6313      	str	r3, [r2, #48]	; 0x30
 800300a:	4b39      	ldr	r3, [pc, #228]	; (80030f0 <MX_GPIO_Init+0x160>)
 800300c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	607b      	str	r3, [r7, #4]
 8003014:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED_D5_Pin|DB5_Line_Pin|DB6_Line_Pin, GPIO_PIN_RESET);
 8003016:	2200      	movs	r2, #0
 8003018:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 800301c:	4835      	ldr	r0, [pc, #212]	; (80030f4 <MX_GPIO_Init+0x164>)
 800301e:	f001 fbef 	bl	8004800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, E_Line_Pin|LED_D4_Pin|DB4_Line_Pin|RS_Line_Pin
 8003022:	2200      	movs	r2, #0
 8003024:	f24d 4134 	movw	r1, #54324	; 0xd434
 8003028:	4833      	ldr	r0, [pc, #204]	; (80030f8 <MX_GPIO_Init+0x168>)
 800302a:	f001 fbe9 	bl	8004800 <HAL_GPIO_WritePin>
                          |R_W_Line_Pin|LED_D2_Pin|LED_D3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DB7_Line_GPIO_Port, DB7_Line_Pin, GPIO_PIN_RESET);
 800302e:	2200      	movs	r2, #0
 8003030:	2140      	movs	r1, #64	; 0x40
 8003032:	4832      	ldr	r0, [pc, #200]	; (80030fc <MX_GPIO_Init+0x16c>)
 8003034:	f001 fbe4 	bl	8004800 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD2_Pin LED_D5_Pin DB5_Line_Pin DB6_Line_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED_D5_Pin|DB5_Line_Pin|DB6_Line_Pin;
 8003038:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 800303c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800303e:	2301      	movs	r3, #1
 8003040:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003042:	2300      	movs	r3, #0
 8003044:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003046:	2300      	movs	r3, #0
 8003048:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800304a:	f107 0314 	add.w	r3, r7, #20
 800304e:	4619      	mov	r1, r3
 8003050:	4828      	ldr	r0, [pc, #160]	; (80030f4 <MX_GPIO_Init+0x164>)
 8003052:	f001 fa39 	bl	80044c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003056:	23c0      	movs	r3, #192	; 0xc0
 8003058:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800305a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800305e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003060:	2301      	movs	r3, #1
 8003062:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003064:	f107 0314 	add.w	r3, r7, #20
 8003068:	4619      	mov	r1, r3
 800306a:	4822      	ldr	r0, [pc, #136]	; (80030f4 <MX_GPIO_Init+0x164>)
 800306c:	f001 fa2c 	bl	80044c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : E_Line_Pin LED_D4_Pin DB4_Line_Pin RS_Line_Pin
                           R_W_Line_Pin LED_D2_Pin LED_D3_Pin */
  GPIO_InitStruct.Pin = E_Line_Pin|LED_D4_Pin|DB4_Line_Pin|RS_Line_Pin
 8003070:	f24d 4334 	movw	r3, #54324	; 0xd434
 8003074:	617b      	str	r3, [r7, #20]
                          |R_W_Line_Pin|LED_D2_Pin|LED_D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003076:	2301      	movs	r3, #1
 8003078:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307a:	2300      	movs	r3, #0
 800307c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800307e:	2300      	movs	r3, #0
 8003080:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003082:	f107 0314 	add.w	r3, r7, #20
 8003086:	4619      	mov	r1, r3
 8003088:	481b      	ldr	r0, [pc, #108]	; (80030f8 <MX_GPIO_Init+0x168>)
 800308a:	f001 fa1d 	bl	80044c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_8|GPIO_PIN_9;
 800308e:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8003092:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003094:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8003098:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800309a:	2301      	movs	r3, #1
 800309c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800309e:	f107 0314 	add.w	r3, r7, #20
 80030a2:	4619      	mov	r1, r3
 80030a4:	4814      	ldr	r0, [pc, #80]	; (80030f8 <MX_GPIO_Init+0x168>)
 80030a6:	f001 fa0f 	bl	80044c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DB7_Line_Pin */
  GPIO_InitStruct.Pin = DB7_Line_Pin;
 80030aa:	2340      	movs	r3, #64	; 0x40
 80030ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030ae:	2301      	movs	r3, #1
 80030b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b2:	2300      	movs	r3, #0
 80030b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b6:	2300      	movs	r3, #0
 80030b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DB7_Line_GPIO_Port, &GPIO_InitStruct);
 80030ba:	f107 0314 	add.w	r3, r7, #20
 80030be:	4619      	mov	r1, r3
 80030c0:	480e      	ldr	r0, [pc, #56]	; (80030fc <MX_GPIO_Init+0x16c>)
 80030c2:	f001 fa01 	bl	80044c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80030c6:	2200      	movs	r2, #0
 80030c8:	2100      	movs	r1, #0
 80030ca:	2017      	movs	r0, #23
 80030cc:	f001 f933 	bl	8004336 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80030d0:	2017      	movs	r0, #23
 80030d2:	f001 f94c 	bl	800436e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80030d6:	2200      	movs	r2, #0
 80030d8:	2100      	movs	r1, #0
 80030da:	2028      	movs	r0, #40	; 0x28
 80030dc:	f001 f92b 	bl	8004336 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80030e0:	2028      	movs	r0, #40	; 0x28
 80030e2:	f001 f944 	bl	800436e <HAL_NVIC_EnableIRQ>

}
 80030e6:	bf00      	nop
 80030e8:	3728      	adds	r7, #40	; 0x28
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	40023800 	.word	0x40023800
 80030f4:	40020000 	.word	0x40020000
 80030f8:	40020400 	.word	0x40020400
 80030fc:	40020800 	.word	0x40020800

08003100 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003104:	b672      	cpsid	i
}
 8003106:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003108:	e7fe      	b.n	8003108 <Error_Handler+0x8>
	...

0800310c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003112:	2300      	movs	r3, #0
 8003114:	607b      	str	r3, [r7, #4]
 8003116:	4b10      	ldr	r3, [pc, #64]	; (8003158 <HAL_MspInit+0x4c>)
 8003118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311a:	4a0f      	ldr	r2, [pc, #60]	; (8003158 <HAL_MspInit+0x4c>)
 800311c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003120:	6453      	str	r3, [r2, #68]	; 0x44
 8003122:	4b0d      	ldr	r3, [pc, #52]	; (8003158 <HAL_MspInit+0x4c>)
 8003124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800312a:	607b      	str	r3, [r7, #4]
 800312c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800312e:	2300      	movs	r3, #0
 8003130:	603b      	str	r3, [r7, #0]
 8003132:	4b09      	ldr	r3, [pc, #36]	; (8003158 <HAL_MspInit+0x4c>)
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	4a08      	ldr	r2, [pc, #32]	; (8003158 <HAL_MspInit+0x4c>)
 8003138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800313c:	6413      	str	r3, [r2, #64]	; 0x40
 800313e:	4b06      	ldr	r3, [pc, #24]	; (8003158 <HAL_MspInit+0x4c>)
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003146:	603b      	str	r3, [r7, #0]
 8003148:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800314a:	2007      	movs	r0, #7
 800314c:	f001 f8e8 	bl	8004320 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003150:	bf00      	nop
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	40023800 	.word	0x40023800

0800315c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b08c      	sub	sp, #48	; 0x30
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003164:	f107 031c 	add.w	r3, r7, #28
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	605a      	str	r2, [r3, #4]
 800316e:	609a      	str	r2, [r3, #8]
 8003170:	60da      	str	r2, [r3, #12]
 8003172:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a31      	ldr	r2, [pc, #196]	; (8003240 <HAL_ADC_MspInit+0xe4>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d15b      	bne.n	8003236 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800317e:	2300      	movs	r3, #0
 8003180:	61bb      	str	r3, [r7, #24]
 8003182:	4b30      	ldr	r3, [pc, #192]	; (8003244 <HAL_ADC_MspInit+0xe8>)
 8003184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003186:	4a2f      	ldr	r2, [pc, #188]	; (8003244 <HAL_ADC_MspInit+0xe8>)
 8003188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800318c:	6453      	str	r3, [r2, #68]	; 0x44
 800318e:	4b2d      	ldr	r3, [pc, #180]	; (8003244 <HAL_ADC_MspInit+0xe8>)
 8003190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003196:	61bb      	str	r3, [r7, #24]
 8003198:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800319a:	2300      	movs	r3, #0
 800319c:	617b      	str	r3, [r7, #20]
 800319e:	4b29      	ldr	r3, [pc, #164]	; (8003244 <HAL_ADC_MspInit+0xe8>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a2:	4a28      	ldr	r2, [pc, #160]	; (8003244 <HAL_ADC_MspInit+0xe8>)
 80031a4:	f043 0301 	orr.w	r3, r3, #1
 80031a8:	6313      	str	r3, [r2, #48]	; 0x30
 80031aa:	4b26      	ldr	r3, [pc, #152]	; (8003244 <HAL_ADC_MspInit+0xe8>)
 80031ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	617b      	str	r3, [r7, #20]
 80031b4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031b6:	2300      	movs	r3, #0
 80031b8:	613b      	str	r3, [r7, #16]
 80031ba:	4b22      	ldr	r3, [pc, #136]	; (8003244 <HAL_ADC_MspInit+0xe8>)
 80031bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031be:	4a21      	ldr	r2, [pc, #132]	; (8003244 <HAL_ADC_MspInit+0xe8>)
 80031c0:	f043 0304 	orr.w	r3, r3, #4
 80031c4:	6313      	str	r3, [r2, #48]	; 0x30
 80031c6:	4b1f      	ldr	r3, [pc, #124]	; (8003244 <HAL_ADC_MspInit+0xe8>)
 80031c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ca:	f003 0304 	and.w	r3, r3, #4
 80031ce:	613b      	str	r3, [r7, #16]
 80031d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031d2:	2300      	movs	r3, #0
 80031d4:	60fb      	str	r3, [r7, #12]
 80031d6:	4b1b      	ldr	r3, [pc, #108]	; (8003244 <HAL_ADC_MspInit+0xe8>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031da:	4a1a      	ldr	r2, [pc, #104]	; (8003244 <HAL_ADC_MspInit+0xe8>)
 80031dc:	f043 0302 	orr.w	r3, r3, #2
 80031e0:	6313      	str	r3, [r2, #48]	; 0x30
 80031e2:	4b18      	ldr	r3, [pc, #96]	; (8003244 <HAL_ADC_MspInit+0xe8>)
 80031e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80031ee:	2301      	movs	r3, #1
 80031f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031f2:	2303      	movs	r3, #3
 80031f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f6:	2300      	movs	r3, #0
 80031f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031fa:	f107 031c 	add.w	r3, r7, #28
 80031fe:	4619      	mov	r1, r3
 8003200:	4811      	ldr	r0, [pc, #68]	; (8003248 <HAL_ADC_MspInit+0xec>)
 8003202:	f001 f961 	bl	80044c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003206:	2330      	movs	r3, #48	; 0x30
 8003208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800320a:	2303      	movs	r3, #3
 800320c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320e:	2300      	movs	r3, #0
 8003210:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003212:	f107 031c 	add.w	r3, r7, #28
 8003216:	4619      	mov	r1, r3
 8003218:	480c      	ldr	r0, [pc, #48]	; (800324c <HAL_ADC_MspInit+0xf0>)
 800321a:	f001 f955 	bl	80044c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800321e:	2302      	movs	r3, #2
 8003220:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003222:	2303      	movs	r3, #3
 8003224:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003226:	2300      	movs	r3, #0
 8003228:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800322a:	f107 031c 	add.w	r3, r7, #28
 800322e:	4619      	mov	r1, r3
 8003230:	4807      	ldr	r0, [pc, #28]	; (8003250 <HAL_ADC_MspInit+0xf4>)
 8003232:	f001 f949 	bl	80044c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003236:	bf00      	nop
 8003238:	3730      	adds	r7, #48	; 0x30
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	40012000 	.word	0x40012000
 8003244:	40023800 	.word	0x40023800
 8003248:	40020000 	.word	0x40020000
 800324c:	40020800 	.word	0x40020800
 8003250:	40020400 	.word	0x40020400

08003254 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b088      	sub	sp, #32
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800325c:	f107 0308 	add.w	r3, r7, #8
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	605a      	str	r2, [r3, #4]
 8003266:	609a      	str	r2, [r3, #8]
 8003268:	60da      	str	r2, [r3, #12]
 800326a:	611a      	str	r2, [r3, #16]
 800326c:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a0c      	ldr	r2, [pc, #48]	; (80032a4 <HAL_RTC_MspInit+0x50>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d111      	bne.n	800329c <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003278:	2302      	movs	r3, #2
 800327a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800327c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003280:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003282:	f107 0308 	add.w	r3, r7, #8
 8003286:	4618      	mov	r0, r3
 8003288:	f001 ff90 	bl	80051ac <HAL_RCCEx_PeriphCLKConfig>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003292:	f7ff ff35 	bl	8003100 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003296:	4b04      	ldr	r3, [pc, #16]	; (80032a8 <HAL_RTC_MspInit+0x54>)
 8003298:	2201      	movs	r2, #1
 800329a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800329c:	bf00      	nop
 800329e:	3720      	adds	r7, #32
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	40002800 	.word	0x40002800
 80032a8:	42470e3c 	.word	0x42470e3c

080032ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b08a      	sub	sp, #40	; 0x28
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b4:	f107 0314 	add.w	r3, r7, #20
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	605a      	str	r2, [r3, #4]
 80032be:	609a      	str	r2, [r3, #8]
 80032c0:	60da      	str	r2, [r3, #12]
 80032c2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032cc:	d135      	bne.n	800333a <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032ce:	2300      	movs	r3, #0
 80032d0:	613b      	str	r3, [r7, #16]
 80032d2:	4b25      	ldr	r3, [pc, #148]	; (8003368 <HAL_TIM_Base_MspInit+0xbc>)
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	4a24      	ldr	r2, [pc, #144]	; (8003368 <HAL_TIM_Base_MspInit+0xbc>)
 80032d8:	f043 0301 	orr.w	r3, r3, #1
 80032dc:	6413      	str	r3, [r2, #64]	; 0x40
 80032de:	4b22      	ldr	r3, [pc, #136]	; (8003368 <HAL_TIM_Base_MspInit+0xbc>)
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	613b      	str	r3, [r7, #16]
 80032e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ea:	2300      	movs	r3, #0
 80032ec:	60fb      	str	r3, [r7, #12]
 80032ee:	4b1e      	ldr	r3, [pc, #120]	; (8003368 <HAL_TIM_Base_MspInit+0xbc>)
 80032f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f2:	4a1d      	ldr	r2, [pc, #116]	; (8003368 <HAL_TIM_Base_MspInit+0xbc>)
 80032f4:	f043 0301 	orr.w	r3, r3, #1
 80032f8:	6313      	str	r3, [r2, #48]	; 0x30
 80032fa:	4b1b      	ldr	r3, [pc, #108]	; (8003368 <HAL_TIM_Base_MspInit+0xbc>)
 80032fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	60fb      	str	r3, [r7, #12]
 8003304:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800330a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800330c:	2302      	movs	r3, #2
 800330e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003310:	2300      	movs	r3, #0
 8003312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003314:	2300      	movs	r3, #0
 8003316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003318:	2301      	movs	r3, #1
 800331a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800331c:	f107 0314 	add.w	r3, r7, #20
 8003320:	4619      	mov	r1, r3
 8003322:	4812      	ldr	r0, [pc, #72]	; (800336c <HAL_TIM_Base_MspInit+0xc0>)
 8003324:	f001 f8d0 	bl	80044c8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003328:	2200      	movs	r2, #0
 800332a:	2100      	movs	r1, #0
 800332c:	201c      	movs	r0, #28
 800332e:	f001 f802 	bl	8004336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003332:	201c      	movs	r0, #28
 8003334:	f001 f81b 	bl	800436e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003338:	e012      	b.n	8003360 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM3)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a0c      	ldr	r2, [pc, #48]	; (8003370 <HAL_TIM_Base_MspInit+0xc4>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d10d      	bne.n	8003360 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003344:	2300      	movs	r3, #0
 8003346:	60bb      	str	r3, [r7, #8]
 8003348:	4b07      	ldr	r3, [pc, #28]	; (8003368 <HAL_TIM_Base_MspInit+0xbc>)
 800334a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334c:	4a06      	ldr	r2, [pc, #24]	; (8003368 <HAL_TIM_Base_MspInit+0xbc>)
 800334e:	f043 0302 	orr.w	r3, r3, #2
 8003352:	6413      	str	r3, [r2, #64]	; 0x40
 8003354:	4b04      	ldr	r3, [pc, #16]	; (8003368 <HAL_TIM_Base_MspInit+0xbc>)
 8003356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	60bb      	str	r3, [r7, #8]
 800335e:	68bb      	ldr	r3, [r7, #8]
}
 8003360:	bf00      	nop
 8003362:	3728      	adds	r7, #40	; 0x28
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	40023800 	.word	0x40023800
 800336c:	40020000 	.word	0x40020000
 8003370:	40000400 	.word	0x40000400

08003374 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b08a      	sub	sp, #40	; 0x28
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800337c:	f107 0314 	add.w	r3, r7, #20
 8003380:	2200      	movs	r2, #0
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	605a      	str	r2, [r3, #4]
 8003386:	609a      	str	r2, [r3, #8]
 8003388:	60da      	str	r2, [r3, #12]
 800338a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a1d      	ldr	r2, [pc, #116]	; (8003408 <HAL_UART_MspInit+0x94>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d133      	bne.n	80033fe <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003396:	2300      	movs	r3, #0
 8003398:	613b      	str	r3, [r7, #16]
 800339a:	4b1c      	ldr	r3, [pc, #112]	; (800340c <HAL_UART_MspInit+0x98>)
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	4a1b      	ldr	r2, [pc, #108]	; (800340c <HAL_UART_MspInit+0x98>)
 80033a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033a4:	6413      	str	r3, [r2, #64]	; 0x40
 80033a6:	4b19      	ldr	r3, [pc, #100]	; (800340c <HAL_UART_MspInit+0x98>)
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ae:	613b      	str	r3, [r7, #16]
 80033b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033b2:	2300      	movs	r3, #0
 80033b4:	60fb      	str	r3, [r7, #12]
 80033b6:	4b15      	ldr	r3, [pc, #84]	; (800340c <HAL_UART_MspInit+0x98>)
 80033b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ba:	4a14      	ldr	r2, [pc, #80]	; (800340c <HAL_UART_MspInit+0x98>)
 80033bc:	f043 0301 	orr.w	r3, r3, #1
 80033c0:	6313      	str	r3, [r2, #48]	; 0x30
 80033c2:	4b12      	ldr	r3, [pc, #72]	; (800340c <HAL_UART_MspInit+0x98>)
 80033c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	60fb      	str	r3, [r7, #12]
 80033cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80033ce:	230c      	movs	r3, #12
 80033d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d2:	2302      	movs	r3, #2
 80033d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d6:	2300      	movs	r3, #0
 80033d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033da:	2303      	movs	r3, #3
 80033dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80033de:	2307      	movs	r3, #7
 80033e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033e2:	f107 0314 	add.w	r3, r7, #20
 80033e6:	4619      	mov	r1, r3
 80033e8:	4809      	ldr	r0, [pc, #36]	; (8003410 <HAL_UART_MspInit+0x9c>)
 80033ea:	f001 f86d 	bl	80044c8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80033ee:	2200      	movs	r2, #0
 80033f0:	2100      	movs	r1, #0
 80033f2:	2026      	movs	r0, #38	; 0x26
 80033f4:	f000 ff9f 	bl	8004336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80033f8:	2026      	movs	r0, #38	; 0x26
 80033fa:	f000 ffb8 	bl	800436e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80033fe:	bf00      	nop
 8003400:	3728      	adds	r7, #40	; 0x28
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	40004400 	.word	0x40004400
 800340c:	40023800 	.word	0x40023800
 8003410:	40020000 	.word	0x40020000

08003414 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003418:	e7fe      	b.n	8003418 <NMI_Handler+0x4>

0800341a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800341a:	b480      	push	{r7}
 800341c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800341e:	e7fe      	b.n	800341e <HardFault_Handler+0x4>

08003420 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003424:	e7fe      	b.n	8003424 <MemManage_Handler+0x4>

08003426 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003426:	b480      	push	{r7}
 8003428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800342a:	e7fe      	b.n	800342a <BusFault_Handler+0x4>

0800342c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003430:	e7fe      	b.n	8003430 <UsageFault_Handler+0x4>

08003432 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003432:	b480      	push	{r7}
 8003434:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003436:	bf00      	nop
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003444:	bf00      	nop
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr

0800344e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800344e:	b480      	push	{r7}
 8003450:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003452:	bf00      	nop
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003460:	f000 fa58 	bl	8003914 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003464:	bf00      	nop
 8003466:	bd80      	pop	{r7, pc}

08003468 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_8) != RESET){
 800346c:	4b8a      	ldr	r3, [pc, #552]	; (8003698 <EXTI9_5_IRQHandler+0x230>)
 800346e:	695b      	ldr	r3, [r3, #20]
 8003470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003474:	2b00      	cmp	r3, #0
 8003476:	d039      	beq.n	80034ec <EXTI9_5_IRQHandler+0x84>


		if(HAL_GetTick() - ticks_pressed >= 20){
 8003478:	f000 fa60 	bl	800393c <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	4b87      	ldr	r3, [pc, #540]	; (800369c <EXTI9_5_IRQHandler+0x234>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b13      	cmp	r3, #19
 8003486:	d92c      	bls.n	80034e2 <EXTI9_5_IRQHandler+0x7a>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == 0){
 8003488:	4b85      	ldr	r3, [pc, #532]	; (80036a0 <EXTI9_5_IRQHandler+0x238>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b01      	cmp	r3, #1
 8003490:	d112      	bne.n	80034b8 <EXTI9_5_IRQHandler+0x50>
 8003492:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003496:	4883      	ldr	r0, [pc, #524]	; (80036a4 <EXTI9_5_IRQHandler+0x23c>)
 8003498:	f001 f99a 	bl	80047d0 <HAL_GPIO_ReadPin>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10a      	bne.n	80034b8 <EXTI9_5_IRQHandler+0x50>
				button_state =0 ; // stable low reached
 80034a2:	4b7f      	ldr	r3, [pc, #508]	; (80036a0 <EXTI9_5_IRQHandler+0x238>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 80034a8:	f000 fa48 	bl	800393c <HAL_GetTick>
 80034ac:	4603      	mov	r3, r0
 80034ae:	4a7b      	ldr	r2, [pc, #492]	; (800369c <EXTI9_5_IRQHandler+0x234>)
 80034b0:	6013      	str	r3, [r2, #0]

				g_left_button_pressed =1;
 80034b2:	4b7d      	ldr	r3, [pc, #500]	; (80036a8 <EXTI9_5_IRQHandler+0x240>)
 80034b4:	2201      	movs	r2, #1
 80034b6:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOB ,GPIO_PIN_8) == 1 ){
 80034b8:	4b79      	ldr	r3, [pc, #484]	; (80036a0 <EXTI9_5_IRQHandler+0x238>)
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d10f      	bne.n	80034e2 <EXTI9_5_IRQHandler+0x7a>
 80034c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80034c6:	4877      	ldr	r0, [pc, #476]	; (80036a4 <EXTI9_5_IRQHandler+0x23c>)
 80034c8:	f001 f982 	bl	80047d0 <HAL_GPIO_ReadPin>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d107      	bne.n	80034e2 <EXTI9_5_IRQHandler+0x7a>
				ticks_pressed = HAL_GetTick() ;
 80034d2:	f000 fa33 	bl	800393c <HAL_GetTick>
 80034d6:	4603      	mov	r3, r0
 80034d8:	4a70      	ldr	r2, [pc, #448]	; (800369c <EXTI9_5_IRQHandler+0x234>)
 80034da:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 80034dc:	4b70      	ldr	r3, [pc, #448]	; (80036a0 <EXTI9_5_IRQHandler+0x238>)
 80034de:	2201      	movs	r2, #1
 80034e0:	701a      	strb	r2, [r3, #0]

			}
		}
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8) ;
 80034e2:	4b6d      	ldr	r3, [pc, #436]	; (8003698 <EXTI9_5_IRQHandler+0x230>)
 80034e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034e8:	615a      	str	r2, [r3, #20]
 80034ea:	e0c5      	b.n	8003678 <EXTI9_5_IRQHandler+0x210>
	}

	else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_9) != RESET){
 80034ec:	4b6a      	ldr	r3, [pc, #424]	; (8003698 <EXTI9_5_IRQHandler+0x230>)
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d039      	beq.n	800356c <EXTI9_5_IRQHandler+0x104>



		if(HAL_GetTick() - ticks_pressed >= 20){
 80034f8:	f000 fa20 	bl	800393c <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	4b67      	ldr	r3, [pc, #412]	; (800369c <EXTI9_5_IRQHandler+0x234>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b13      	cmp	r3, #19
 8003506:	d92c      	bls.n	8003562 <EXTI9_5_IRQHandler+0xfa>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0){
 8003508:	4b65      	ldr	r3, [pc, #404]	; (80036a0 <EXTI9_5_IRQHandler+0x238>)
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b01      	cmp	r3, #1
 8003510:	d112      	bne.n	8003538 <EXTI9_5_IRQHandler+0xd0>
 8003512:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003516:	4863      	ldr	r0, [pc, #396]	; (80036a4 <EXTI9_5_IRQHandler+0x23c>)
 8003518:	f001 f95a 	bl	80047d0 <HAL_GPIO_ReadPin>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10a      	bne.n	8003538 <EXTI9_5_IRQHandler+0xd0>
				button_state =0 ; // stable low reached
 8003522:	4b5f      	ldr	r3, [pc, #380]	; (80036a0 <EXTI9_5_IRQHandler+0x238>)
 8003524:	2200      	movs	r2, #0
 8003526:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 8003528:	f000 fa08 	bl	800393c <HAL_GetTick>
 800352c:	4603      	mov	r3, r0
 800352e:	4a5b      	ldr	r2, [pc, #364]	; (800369c <EXTI9_5_IRQHandler+0x234>)
 8003530:	6013      	str	r3, [r2, #0]

				g_top_button_pressed = 1 ;
 8003532:	4b5e      	ldr	r3, [pc, #376]	; (80036ac <EXTI9_5_IRQHandler+0x244>)
 8003534:	2201      	movs	r2, #1
 8003536:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOB ,GPIO_PIN_9) == 1 ){
 8003538:	4b59      	ldr	r3, [pc, #356]	; (80036a0 <EXTI9_5_IRQHandler+0x238>)
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10f      	bne.n	8003562 <EXTI9_5_IRQHandler+0xfa>
 8003542:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003546:	4857      	ldr	r0, [pc, #348]	; (80036a4 <EXTI9_5_IRQHandler+0x23c>)
 8003548:	f001 f942 	bl	80047d0 <HAL_GPIO_ReadPin>
 800354c:	4603      	mov	r3, r0
 800354e:	2b01      	cmp	r3, #1
 8003550:	d107      	bne.n	8003562 <EXTI9_5_IRQHandler+0xfa>
				ticks_pressed = HAL_GetTick() ;
 8003552:	f000 f9f3 	bl	800393c <HAL_GetTick>
 8003556:	4603      	mov	r3, r0
 8003558:	4a50      	ldr	r2, [pc, #320]	; (800369c <EXTI9_5_IRQHandler+0x234>)
 800355a:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 800355c:	4b50      	ldr	r3, [pc, #320]	; (80036a0 <EXTI9_5_IRQHandler+0x238>)
 800355e:	2201      	movs	r2, #1
 8003560:	701a      	strb	r2, [r3, #0]

			}
		}

		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_9) ;
 8003562:	4b4d      	ldr	r3, [pc, #308]	; (8003698 <EXTI9_5_IRQHandler+0x230>)
 8003564:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003568:	615a      	str	r2, [r3, #20]
 800356a:	e085      	b.n	8003678 <EXTI9_5_IRQHandler+0x210>

	}

	else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_6) != RESET){
 800356c:	4b4a      	ldr	r3, [pc, #296]	; (8003698 <EXTI9_5_IRQHandler+0x230>)
 800356e:	695b      	ldr	r3, [r3, #20]
 8003570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003574:	2b00      	cmp	r3, #0
 8003576:	d036      	beq.n	80035e6 <EXTI9_5_IRQHandler+0x17e>



		if(HAL_GetTick() - ticks_pressed >= 20){
 8003578:	f000 f9e0 	bl	800393c <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	4b47      	ldr	r3, [pc, #284]	; (800369c <EXTI9_5_IRQHandler+0x234>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b13      	cmp	r3, #19
 8003586:	d92a      	bls.n	80035de <EXTI9_5_IRQHandler+0x176>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 0){
 8003588:	4b45      	ldr	r3, [pc, #276]	; (80036a0 <EXTI9_5_IRQHandler+0x238>)
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b01      	cmp	r3, #1
 8003590:	d111      	bne.n	80035b6 <EXTI9_5_IRQHandler+0x14e>
 8003592:	2140      	movs	r1, #64	; 0x40
 8003594:	4846      	ldr	r0, [pc, #280]	; (80036b0 <EXTI9_5_IRQHandler+0x248>)
 8003596:	f001 f91b 	bl	80047d0 <HAL_GPIO_ReadPin>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10a      	bne.n	80035b6 <EXTI9_5_IRQHandler+0x14e>
				button_state =0 ; // stable low reached
 80035a0:	4b3f      	ldr	r3, [pc, #252]	; (80036a0 <EXTI9_5_IRQHandler+0x238>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 80035a6:	f000 f9c9 	bl	800393c <HAL_GetTick>
 80035aa:	4603      	mov	r3, r0
 80035ac:	4a3b      	ldr	r2, [pc, #236]	; (800369c <EXTI9_5_IRQHandler+0x234>)
 80035ae:	6013      	str	r3, [r2, #0]

				g_middle_button_pressed =1 ;
 80035b0:	4b40      	ldr	r3, [pc, #256]	; (80036b4 <EXTI9_5_IRQHandler+0x24c>)
 80035b2:	2201      	movs	r2, #1
 80035b4:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOA ,GPIO_PIN_6) == 1 ){
 80035b6:	4b3a      	ldr	r3, [pc, #232]	; (80036a0 <EXTI9_5_IRQHandler+0x238>)
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d10e      	bne.n	80035de <EXTI9_5_IRQHandler+0x176>
 80035c0:	2140      	movs	r1, #64	; 0x40
 80035c2:	483b      	ldr	r0, [pc, #236]	; (80036b0 <EXTI9_5_IRQHandler+0x248>)
 80035c4:	f001 f904 	bl	80047d0 <HAL_GPIO_ReadPin>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d107      	bne.n	80035de <EXTI9_5_IRQHandler+0x176>
				ticks_pressed = HAL_GetTick() ;
 80035ce:	f000 f9b5 	bl	800393c <HAL_GetTick>
 80035d2:	4603      	mov	r3, r0
 80035d4:	4a31      	ldr	r2, [pc, #196]	; (800369c <EXTI9_5_IRQHandler+0x234>)
 80035d6:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 80035d8:	4b31      	ldr	r3, [pc, #196]	; (80036a0 <EXTI9_5_IRQHandler+0x238>)
 80035da:	2201      	movs	r2, #1
 80035dc:	701a      	strb	r2, [r3, #0]

			}
		}


		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6) ;
 80035de:	4b2e      	ldr	r3, [pc, #184]	; (8003698 <EXTI9_5_IRQHandler+0x230>)
 80035e0:	2240      	movs	r2, #64	; 0x40
 80035e2:	615a      	str	r2, [r3, #20]
 80035e4:	e048      	b.n	8003678 <EXTI9_5_IRQHandler+0x210>

	}

	else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET){
 80035e6:	4b2c      	ldr	r3, [pc, #176]	; (8003698 <EXTI9_5_IRQHandler+0x230>)
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d036      	beq.n	8003660 <EXTI9_5_IRQHandler+0x1f8>




		if(HAL_GetTick() - ticks_pressed >= 20){
 80035f2:	f000 f9a3 	bl	800393c <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	4b28      	ldr	r3, [pc, #160]	; (800369c <EXTI9_5_IRQHandler+0x234>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b13      	cmp	r3, #19
 8003600:	d92a      	bls.n	8003658 <EXTI9_5_IRQHandler+0x1f0>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 0){
 8003602:	4b27      	ldr	r3, [pc, #156]	; (80036a0 <EXTI9_5_IRQHandler+0x238>)
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b01      	cmp	r3, #1
 800360a:	d111      	bne.n	8003630 <EXTI9_5_IRQHandler+0x1c8>
 800360c:	2180      	movs	r1, #128	; 0x80
 800360e:	4828      	ldr	r0, [pc, #160]	; (80036b0 <EXTI9_5_IRQHandler+0x248>)
 8003610:	f001 f8de 	bl	80047d0 <HAL_GPIO_ReadPin>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10a      	bne.n	8003630 <EXTI9_5_IRQHandler+0x1c8>
				button_state =0 ; // stable low reached
 800361a:	4b21      	ldr	r3, [pc, #132]	; (80036a0 <EXTI9_5_IRQHandler+0x238>)
 800361c:	2200      	movs	r2, #0
 800361e:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 8003620:	f000 f98c 	bl	800393c <HAL_GetTick>
 8003624:	4603      	mov	r3, r0
 8003626:	4a1d      	ldr	r2, [pc, #116]	; (800369c <EXTI9_5_IRQHandler+0x234>)
 8003628:	6013      	str	r3, [r2, #0]

				g_right_button_pressed = 1 ;
 800362a:	4b23      	ldr	r3, [pc, #140]	; (80036b8 <EXTI9_5_IRQHandler+0x250>)
 800362c:	2201      	movs	r2, #1
 800362e:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOA ,GPIO_PIN_7) == 1 ){
 8003630:	4b1b      	ldr	r3, [pc, #108]	; (80036a0 <EXTI9_5_IRQHandler+0x238>)
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d10e      	bne.n	8003658 <EXTI9_5_IRQHandler+0x1f0>
 800363a:	2180      	movs	r1, #128	; 0x80
 800363c:	481c      	ldr	r0, [pc, #112]	; (80036b0 <EXTI9_5_IRQHandler+0x248>)
 800363e:	f001 f8c7 	bl	80047d0 <HAL_GPIO_ReadPin>
 8003642:	4603      	mov	r3, r0
 8003644:	2b01      	cmp	r3, #1
 8003646:	d107      	bne.n	8003658 <EXTI9_5_IRQHandler+0x1f0>
				ticks_pressed = HAL_GetTick() ;
 8003648:	f000 f978 	bl	800393c <HAL_GetTick>
 800364c:	4603      	mov	r3, r0
 800364e:	4a13      	ldr	r2, [pc, #76]	; (800369c <EXTI9_5_IRQHandler+0x234>)
 8003650:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 8003652:	4b13      	ldr	r3, [pc, #76]	; (80036a0 <EXTI9_5_IRQHandler+0x238>)
 8003654:	2201      	movs	r2, #1
 8003656:	701a      	strb	r2, [r3, #0]

			}
		}
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7) ;
 8003658:	4b0f      	ldr	r3, [pc, #60]	; (8003698 <EXTI9_5_IRQHandler+0x230>)
 800365a:	2280      	movs	r2, #128	; 0x80
 800365c:	615a      	str	r2, [r3, #20]
 800365e:	e00b      	b.n	8003678 <EXTI9_5_IRQHandler+0x210>
	}

	else{

		if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET){
 8003660:	4b0d      	ldr	r3, [pc, #52]	; (8003698 <EXTI9_5_IRQHandler+0x230>)
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003668:	2b00      	cmp	r3, #0
 800366a:	d005      	beq.n	8003678 <EXTI9_5_IRQHandler+0x210>

			g_bottom_button_pressed = 1 ;
 800366c:	4b13      	ldr	r3, [pc, #76]	; (80036bc <EXTI9_5_IRQHandler+0x254>)
 800366e:	2201      	movs	r2, #1
 8003670:	701a      	strb	r2, [r3, #0]

			__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7) ;
 8003672:	4b09      	ldr	r3, [pc, #36]	; (8003698 <EXTI9_5_IRQHandler+0x230>)
 8003674:	2280      	movs	r2, #128	; 0x80
 8003676:	615a      	str	r2, [r3, #20]
		}
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8003678:	2040      	movs	r0, #64	; 0x40
 800367a:	f001 f8db 	bl	8004834 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800367e:	2080      	movs	r0, #128	; 0x80
 8003680:	f001 f8d8 	bl	8004834 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003684:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003688:	f001 f8d4 	bl	8004834 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800368c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003690:	f001 f8d0 	bl	8004834 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003694:	bf00      	nop
 8003696:	bd80      	pop	{r7, pc}
 8003698:	40013c00 	.word	0x40013c00
 800369c:	20000378 	.word	0x20000378
 80036a0:	20000032 	.word	0x20000032
 80036a4:	40020400 	.word	0x40020400
 80036a8:	20000370 	.word	0x20000370
 80036ac:	20000372 	.word	0x20000372
 80036b0:	40020000 	.word	0x40020000
 80036b4:	20000374 	.word	0x20000374
 80036b8:	20000371 	.word	0x20000371
 80036bc:	20000373 	.word	0x20000373

080036c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80036c4:	4802      	ldr	r0, [pc, #8]	; (80036d0 <TIM2_IRQHandler+0x10>)
 80036c6:	f002 fb21 	bl	8005d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80036ca:	bf00      	nop
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	2000012c 	.word	0x2000012c

080036d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80036d8:	4802      	ldr	r0, [pc, #8]	; (80036e4 <USART2_IRQHandler+0x10>)
 80036da:	f003 f94d 	bl	8006978 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80036de:	bf00      	nop
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	200001bc 	.word	0x200001bc

080036e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */


	if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_13) != RESET){
 80036ec:	4b22      	ldr	r3, [pc, #136]	; (8003778 <EXTI15_10_IRQHandler+0x90>)
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d038      	beq.n	800376a <EXTI15_10_IRQHandler+0x82>

		if(HAL_GetTick() - ticks_pressed >= 20){
 80036f8:	f000 f920 	bl	800393c <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	4b1f      	ldr	r3, [pc, #124]	; (800377c <EXTI15_10_IRQHandler+0x94>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b13      	cmp	r3, #19
 8003706:	d92c      	bls.n	8003762 <EXTI15_10_IRQHandler+0x7a>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 0){
 8003708:	4b1d      	ldr	r3, [pc, #116]	; (8003780 <EXTI15_10_IRQHandler+0x98>)
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b01      	cmp	r3, #1
 8003710:	d112      	bne.n	8003738 <EXTI15_10_IRQHandler+0x50>
 8003712:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003716:	481b      	ldr	r0, [pc, #108]	; (8003784 <EXTI15_10_IRQHandler+0x9c>)
 8003718:	f001 f85a 	bl	80047d0 <HAL_GPIO_ReadPin>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10a      	bne.n	8003738 <EXTI15_10_IRQHandler+0x50>
				button_state =0 ; // stable low reached
 8003722:	4b17      	ldr	r3, [pc, #92]	; (8003780 <EXTI15_10_IRQHandler+0x98>)
 8003724:	2200      	movs	r2, #0
 8003726:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 8003728:	f000 f908 	bl	800393c <HAL_GetTick>
 800372c:	4603      	mov	r3, r0
 800372e:	4a13      	ldr	r2, [pc, #76]	; (800377c <EXTI15_10_IRQHandler+0x94>)
 8003730:	6013      	str	r3, [r2, #0]

				g_bottom_button_pressed = 1 ;
 8003732:	4b15      	ldr	r3, [pc, #84]	; (8003788 <EXTI15_10_IRQHandler+0xa0>)
 8003734:	2201      	movs	r2, #1
 8003736:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOB ,GPIO_PIN_13) == 1 ){
 8003738:	4b11      	ldr	r3, [pc, #68]	; (8003780 <EXTI15_10_IRQHandler+0x98>)
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10f      	bne.n	8003762 <EXTI15_10_IRQHandler+0x7a>
 8003742:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003746:	480f      	ldr	r0, [pc, #60]	; (8003784 <EXTI15_10_IRQHandler+0x9c>)
 8003748:	f001 f842 	bl	80047d0 <HAL_GPIO_ReadPin>
 800374c:	4603      	mov	r3, r0
 800374e:	2b01      	cmp	r3, #1
 8003750:	d107      	bne.n	8003762 <EXTI15_10_IRQHandler+0x7a>
				ticks_pressed = HAL_GetTick() ;
 8003752:	f000 f8f3 	bl	800393c <HAL_GetTick>
 8003756:	4603      	mov	r3, r0
 8003758:	4a08      	ldr	r2, [pc, #32]	; (800377c <EXTI15_10_IRQHandler+0x94>)
 800375a:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 800375c:	4b08      	ldr	r3, [pc, #32]	; (8003780 <EXTI15_10_IRQHandler+0x98>)
 800375e:	2201      	movs	r2, #1
 8003760:	701a      	strb	r2, [r3, #0]

			}
		}

		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13) ;
 8003762:	4b05      	ldr	r3, [pc, #20]	; (8003778 <EXTI15_10_IRQHandler+0x90>)
 8003764:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003768:	615a      	str	r2, [r3, #20]
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800376a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800376e:	f001 f861 	bl	8004834 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003772:	bf00      	nop
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	40013c00 	.word	0x40013c00
 800377c:	20000378 	.word	0x20000378
 8003780:	20000032 	.word	0x20000032
 8003784:	40020400 	.word	0x40020400
 8003788:	20000373 	.word	0x20000373

0800378c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003794:	4a14      	ldr	r2, [pc, #80]	; (80037e8 <_sbrk+0x5c>)
 8003796:	4b15      	ldr	r3, [pc, #84]	; (80037ec <_sbrk+0x60>)
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037a0:	4b13      	ldr	r3, [pc, #76]	; (80037f0 <_sbrk+0x64>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d102      	bne.n	80037ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037a8:	4b11      	ldr	r3, [pc, #68]	; (80037f0 <_sbrk+0x64>)
 80037aa:	4a12      	ldr	r2, [pc, #72]	; (80037f4 <_sbrk+0x68>)
 80037ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037ae:	4b10      	ldr	r3, [pc, #64]	; (80037f0 <_sbrk+0x64>)
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4413      	add	r3, r2
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d207      	bcs.n	80037cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037bc:	f003 ffd6 	bl	800776c <__errno>
 80037c0:	4603      	mov	r3, r0
 80037c2:	220c      	movs	r2, #12
 80037c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037c6:	f04f 33ff 	mov.w	r3, #4294967295
 80037ca:	e009      	b.n	80037e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037cc:	4b08      	ldr	r3, [pc, #32]	; (80037f0 <_sbrk+0x64>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037d2:	4b07      	ldr	r3, [pc, #28]	; (80037f0 <_sbrk+0x64>)
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4413      	add	r3, r2
 80037da:	4a05      	ldr	r2, [pc, #20]	; (80037f0 <_sbrk+0x64>)
 80037dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80037de:	68fb      	ldr	r3, [r7, #12]
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3718      	adds	r7, #24
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	20020000 	.word	0x20020000
 80037ec:	00000400 	.word	0x00000400
 80037f0:	20000380 	.word	0x20000380
 80037f4:	20000398 	.word	0x20000398

080037f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80037fc:	4b06      	ldr	r3, [pc, #24]	; (8003818 <SystemInit+0x20>)
 80037fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003802:	4a05      	ldr	r2, [pc, #20]	; (8003818 <SystemInit+0x20>)
 8003804:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003808:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800380c:	bf00      	nop
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	e000ed00 	.word	0xe000ed00

0800381c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800381c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003854 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003820:	480d      	ldr	r0, [pc, #52]	; (8003858 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003822:	490e      	ldr	r1, [pc, #56]	; (800385c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003824:	4a0e      	ldr	r2, [pc, #56]	; (8003860 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003826:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003828:	e002      	b.n	8003830 <LoopCopyDataInit>

0800382a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800382a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800382c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800382e:	3304      	adds	r3, #4

08003830 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003830:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003832:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003834:	d3f9      	bcc.n	800382a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003836:	4a0b      	ldr	r2, [pc, #44]	; (8003864 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003838:	4c0b      	ldr	r4, [pc, #44]	; (8003868 <LoopFillZerobss+0x26>)
  movs r3, #0
 800383a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800383c:	e001      	b.n	8003842 <LoopFillZerobss>

0800383e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800383e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003840:	3204      	adds	r2, #4

08003842 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003842:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003844:	d3fb      	bcc.n	800383e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003846:	f7ff ffd7 	bl	80037f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800384a:	f003 ff95 	bl	8007778 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800384e:	f7ff f90d 	bl	8002a6c <main>
  bx  lr    
 8003852:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003854:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003858:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800385c:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8003860:	08009088 	.word	0x08009088
  ldr r2, =_sbss
 8003864:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8003868:	20000398 	.word	0x20000398

0800386c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800386c:	e7fe      	b.n	800386c <ADC_IRQHandler>
	...

08003870 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003874:	4b0e      	ldr	r3, [pc, #56]	; (80038b0 <HAL_Init+0x40>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a0d      	ldr	r2, [pc, #52]	; (80038b0 <HAL_Init+0x40>)
 800387a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800387e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003880:	4b0b      	ldr	r3, [pc, #44]	; (80038b0 <HAL_Init+0x40>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a0a      	ldr	r2, [pc, #40]	; (80038b0 <HAL_Init+0x40>)
 8003886:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800388a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800388c:	4b08      	ldr	r3, [pc, #32]	; (80038b0 <HAL_Init+0x40>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a07      	ldr	r2, [pc, #28]	; (80038b0 <HAL_Init+0x40>)
 8003892:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003896:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003898:	2003      	movs	r0, #3
 800389a:	f000 fd41 	bl	8004320 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800389e:	2000      	movs	r0, #0
 80038a0:	f000 f808 	bl	80038b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038a4:	f7ff fc32 	bl	800310c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	40023c00 	.word	0x40023c00

080038b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038bc:	4b12      	ldr	r3, [pc, #72]	; (8003908 <HAL_InitTick+0x54>)
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	4b12      	ldr	r3, [pc, #72]	; (800390c <HAL_InitTick+0x58>)
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	4619      	mov	r1, r3
 80038c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80038ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d2:	4618      	mov	r0, r3
 80038d4:	f000 fd59 	bl	800438a <HAL_SYSTICK_Config>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e00e      	b.n	8003900 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b0f      	cmp	r3, #15
 80038e6:	d80a      	bhi.n	80038fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038e8:	2200      	movs	r2, #0
 80038ea:	6879      	ldr	r1, [r7, #4]
 80038ec:	f04f 30ff 	mov.w	r0, #4294967295
 80038f0:	f000 fd21 	bl	8004336 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80038f4:	4a06      	ldr	r2, [pc, #24]	; (8003910 <HAL_InitTick+0x5c>)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
 80038fc:	e000      	b.n	8003900 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
}
 8003900:	4618      	mov	r0, r3
 8003902:	3708      	adds	r7, #8
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	20000034 	.word	0x20000034
 800390c:	2000003c 	.word	0x2000003c
 8003910:	20000038 	.word	0x20000038

08003914 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003918:	4b06      	ldr	r3, [pc, #24]	; (8003934 <HAL_IncTick+0x20>)
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	461a      	mov	r2, r3
 800391e:	4b06      	ldr	r3, [pc, #24]	; (8003938 <HAL_IncTick+0x24>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4413      	add	r3, r2
 8003924:	4a04      	ldr	r2, [pc, #16]	; (8003938 <HAL_IncTick+0x24>)
 8003926:	6013      	str	r3, [r2, #0]
}
 8003928:	bf00      	nop
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	2000003c 	.word	0x2000003c
 8003938:	20000384 	.word	0x20000384

0800393c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
  return uwTick;
 8003940:	4b03      	ldr	r3, [pc, #12]	; (8003950 <HAL_GetTick+0x14>)
 8003942:	681b      	ldr	r3, [r3, #0]
}
 8003944:	4618      	mov	r0, r3
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	20000384 	.word	0x20000384

08003954 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800395c:	f7ff ffee 	bl	800393c <HAL_GetTick>
 8003960:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800396c:	d005      	beq.n	800397a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800396e:	4b0a      	ldr	r3, [pc, #40]	; (8003998 <HAL_Delay+0x44>)
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	461a      	mov	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	4413      	add	r3, r2
 8003978:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800397a:	bf00      	nop
 800397c:	f7ff ffde 	bl	800393c <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	429a      	cmp	r2, r3
 800398a:	d8f7      	bhi.n	800397c <HAL_Delay+0x28>
  {
  }
}
 800398c:	bf00      	nop
 800398e:	bf00      	nop
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	2000003c 	.word	0x2000003c

0800399c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039a4:	2300      	movs	r3, #0
 80039a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e033      	b.n	8003a1a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d109      	bne.n	80039ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f7ff fbce 	bl	800315c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d2:	f003 0310 	and.w	r3, r3, #16
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d118      	bne.n	8003a0c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039de:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80039e2:	f023 0302 	bic.w	r3, r3, #2
 80039e6:	f043 0202 	orr.w	r2, r3, #2
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 faca 	bl	8003f88 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fe:	f023 0303 	bic.w	r3, r3, #3
 8003a02:	f043 0201 	orr.w	r2, r3, #1
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	641a      	str	r2, [r3, #64]	; 0x40
 8003a0a:	e001      	b.n	8003a10 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
	...

08003a24 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d101      	bne.n	8003a3e <HAL_ADC_Start+0x1a>
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	e097      	b.n	8003b6e <HAL_ADC_Start+0x14a>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f003 0301 	and.w	r3, r3, #1
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d018      	beq.n	8003a86 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	689a      	ldr	r2, [r3, #8]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f042 0201 	orr.w	r2, r2, #1
 8003a62:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003a64:	4b45      	ldr	r3, [pc, #276]	; (8003b7c <HAL_ADC_Start+0x158>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a45      	ldr	r2, [pc, #276]	; (8003b80 <HAL_ADC_Start+0x15c>)
 8003a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a6e:	0c9a      	lsrs	r2, r3, #18
 8003a70:	4613      	mov	r3, r2
 8003a72:	005b      	lsls	r3, r3, #1
 8003a74:	4413      	add	r3, r2
 8003a76:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003a78:	e002      	b.n	8003a80 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1f9      	bne.n	8003a7a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f003 0301 	and.w	r3, r3, #1
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d15f      	bne.n	8003b54 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a98:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003a9c:	f023 0301 	bic.w	r3, r3, #1
 8003aa0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d007      	beq.n	8003ac6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003abe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ace:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ad2:	d106      	bne.n	8003ae2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad8:	f023 0206 	bic.w	r2, r3, #6
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	645a      	str	r2, [r3, #68]	; 0x44
 8003ae0:	e002      	b.n	8003ae8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003af0:	4b24      	ldr	r3, [pc, #144]	; (8003b84 <HAL_ADC_Start+0x160>)
 8003af2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003afc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f003 031f 	and.w	r3, r3, #31
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10f      	bne.n	8003b2a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d129      	bne.n	8003b6c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689a      	ldr	r2, [r3, #8]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003b26:	609a      	str	r2, [r3, #8]
 8003b28:	e020      	b.n	8003b6c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a16      	ldr	r2, [pc, #88]	; (8003b88 <HAL_ADC_Start+0x164>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d11b      	bne.n	8003b6c <HAL_ADC_Start+0x148>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d114      	bne.n	8003b6c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003b50:	609a      	str	r2, [r3, #8]
 8003b52:	e00b      	b.n	8003b6c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b58:	f043 0210 	orr.w	r2, r3, #16
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b64:	f043 0201 	orr.w	r2, r3, #1
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3714      	adds	r7, #20
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	20000034 	.word	0x20000034
 8003b80:	431bde83 	.word	0x431bde83
 8003b84:	40012300 	.word	0x40012300
 8003b88:	40012000 	.word	0x40012000

08003b8c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d101      	bne.n	8003ba2 <HAL_ADC_Stop+0x16>
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	e021      	b.n	8003be6 <HAL_ADC_Stop+0x5a>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	689a      	ldr	r2, [r3, #8]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 0201 	bic.w	r2, r2, #1
 8003bb8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d109      	bne.n	8003bdc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bcc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003bd0:	f023 0301 	bic.w	r3, r3, #1
 8003bd4:	f043 0201 	orr.w	r2, r3, #1
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b084      	sub	sp, #16
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
 8003bfa:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c0e:	d113      	bne.n	8003c38 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003c1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c1e:	d10b      	bne.n	8003c38 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c24:	f043 0220 	orr.w	r2, r3, #32
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e063      	b.n	8003d00 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003c38:	f7ff fe80 	bl	800393c <HAL_GetTick>
 8003c3c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003c3e:	e021      	b.n	8003c84 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c46:	d01d      	beq.n	8003c84 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d007      	beq.n	8003c5e <HAL_ADC_PollForConversion+0x6c>
 8003c4e:	f7ff fe75 	bl	800393c <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	683a      	ldr	r2, [r7, #0]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d212      	bcs.n	8003c84 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0302 	and.w	r3, r3, #2
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d00b      	beq.n	8003c84 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c70:	f043 0204 	orr.w	r2, r3, #4
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e03d      	b.n	8003d00 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d1d6      	bne.n	8003c40 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f06f 0212 	mvn.w	r2, #18
 8003c9a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d123      	bne.n	8003cfe <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d11f      	bne.n	8003cfe <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d006      	beq.n	8003cda <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d111      	bne.n	8003cfe <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d105      	bne.n	8003cfe <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	f043 0201 	orr.w	r2, r3, #1
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
	...

08003d24 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d101      	bne.n	8003d40 <HAL_ADC_ConfigChannel+0x1c>
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	e113      	b.n	8003f68 <HAL_ADC_ConfigChannel+0x244>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2b09      	cmp	r3, #9
 8003d4e:	d925      	bls.n	8003d9c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68d9      	ldr	r1, [r3, #12]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	4613      	mov	r3, r2
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	4413      	add	r3, r2
 8003d64:	3b1e      	subs	r3, #30
 8003d66:	2207      	movs	r2, #7
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	43da      	mvns	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	400a      	ands	r2, r1
 8003d74:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68d9      	ldr	r1, [r3, #12]
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	689a      	ldr	r2, [r3, #8]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	4618      	mov	r0, r3
 8003d88:	4603      	mov	r3, r0
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	4403      	add	r3, r0
 8003d8e:	3b1e      	subs	r3, #30
 8003d90:	409a      	lsls	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	60da      	str	r2, [r3, #12]
 8003d9a:	e022      	b.n	8003de2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6919      	ldr	r1, [r3, #16]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	461a      	mov	r2, r3
 8003daa:	4613      	mov	r3, r2
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	4413      	add	r3, r2
 8003db0:	2207      	movs	r2, #7
 8003db2:	fa02 f303 	lsl.w	r3, r2, r3
 8003db6:	43da      	mvns	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	400a      	ands	r2, r1
 8003dbe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6919      	ldr	r1, [r3, #16]
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	689a      	ldr	r2, [r3, #8]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	4403      	add	r3, r0
 8003dd8:	409a      	lsls	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	2b06      	cmp	r3, #6
 8003de8:	d824      	bhi.n	8003e34 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685a      	ldr	r2, [r3, #4]
 8003df4:	4613      	mov	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4413      	add	r3, r2
 8003dfa:	3b05      	subs	r3, #5
 8003dfc:	221f      	movs	r2, #31
 8003dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003e02:	43da      	mvns	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	400a      	ands	r2, r1
 8003e0a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	4618      	mov	r0, r3
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	4413      	add	r3, r2
 8003e24:	3b05      	subs	r3, #5
 8003e26:	fa00 f203 	lsl.w	r2, r0, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	635a      	str	r2, [r3, #52]	; 0x34
 8003e32:	e04c      	b.n	8003ece <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	2b0c      	cmp	r3, #12
 8003e3a:	d824      	bhi.n	8003e86 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	685a      	ldr	r2, [r3, #4]
 8003e46:	4613      	mov	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	4413      	add	r3, r2
 8003e4c:	3b23      	subs	r3, #35	; 0x23
 8003e4e:	221f      	movs	r2, #31
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	43da      	mvns	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	400a      	ands	r2, r1
 8003e5c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685a      	ldr	r2, [r3, #4]
 8003e70:	4613      	mov	r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	4413      	add	r3, r2
 8003e76:	3b23      	subs	r3, #35	; 0x23
 8003e78:	fa00 f203 	lsl.w	r2, r0, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	430a      	orrs	r2, r1
 8003e82:	631a      	str	r2, [r3, #48]	; 0x30
 8003e84:	e023      	b.n	8003ece <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	4613      	mov	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4413      	add	r3, r2
 8003e96:	3b41      	subs	r3, #65	; 0x41
 8003e98:	221f      	movs	r2, #31
 8003e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9e:	43da      	mvns	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	400a      	ands	r2, r1
 8003ea6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	4613      	mov	r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	4413      	add	r3, r2
 8003ec0:	3b41      	subs	r3, #65	; 0x41
 8003ec2:	fa00 f203 	lsl.w	r2, r0, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ece:	4b29      	ldr	r3, [pc, #164]	; (8003f74 <HAL_ADC_ConfigChannel+0x250>)
 8003ed0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a28      	ldr	r2, [pc, #160]	; (8003f78 <HAL_ADC_ConfigChannel+0x254>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d10f      	bne.n	8003efc <HAL_ADC_ConfigChannel+0x1d8>
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2b12      	cmp	r3, #18
 8003ee2:	d10b      	bne.n	8003efc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a1d      	ldr	r2, [pc, #116]	; (8003f78 <HAL_ADC_ConfigChannel+0x254>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d12b      	bne.n	8003f5e <HAL_ADC_ConfigChannel+0x23a>
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a1c      	ldr	r2, [pc, #112]	; (8003f7c <HAL_ADC_ConfigChannel+0x258>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d003      	beq.n	8003f18 <HAL_ADC_ConfigChannel+0x1f4>
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2b11      	cmp	r3, #17
 8003f16:	d122      	bne.n	8003f5e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a11      	ldr	r2, [pc, #68]	; (8003f7c <HAL_ADC_ConfigChannel+0x258>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d111      	bne.n	8003f5e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003f3a:	4b11      	ldr	r3, [pc, #68]	; (8003f80 <HAL_ADC_ConfigChannel+0x25c>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a11      	ldr	r2, [pc, #68]	; (8003f84 <HAL_ADC_ConfigChannel+0x260>)
 8003f40:	fba2 2303 	umull	r2, r3, r2, r3
 8003f44:	0c9a      	lsrs	r2, r3, #18
 8003f46:	4613      	mov	r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	4413      	add	r3, r2
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003f50:	e002      	b.n	8003f58 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	3b01      	subs	r3, #1
 8003f56:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1f9      	bne.n	8003f52 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3714      	adds	r7, #20
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr
 8003f74:	40012300 	.word	0x40012300
 8003f78:	40012000 	.word	0x40012000
 8003f7c:	10000012 	.word	0x10000012
 8003f80:	20000034 	.word	0x20000034
 8003f84:	431bde83 	.word	0x431bde83

08003f88 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f90:	4b79      	ldr	r3, [pc, #484]	; (8004178 <ADC_Init+0x1f0>)
 8003f92:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	685a      	ldr	r2, [r3, #4]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	431a      	orrs	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	685a      	ldr	r2, [r3, #4]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fbc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6859      	ldr	r1, [r3, #4]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	021a      	lsls	r2, r3, #8
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003fe0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6859      	ldr	r1, [r3, #4]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689a      	ldr	r2, [r3, #8]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689a      	ldr	r2, [r3, #8]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004002:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	6899      	ldr	r1, [r3, #8]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68da      	ldr	r2, [r3, #12]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	430a      	orrs	r2, r1
 8004014:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401a:	4a58      	ldr	r2, [pc, #352]	; (800417c <ADC_Init+0x1f4>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d022      	beq.n	8004066 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	689a      	ldr	r2, [r3, #8]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800402e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6899      	ldr	r1, [r3, #8]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	430a      	orrs	r2, r1
 8004040:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	689a      	ldr	r2, [r3, #8]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004050:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	6899      	ldr	r1, [r3, #8]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	430a      	orrs	r2, r1
 8004062:	609a      	str	r2, [r3, #8]
 8004064:	e00f      	b.n	8004086 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	689a      	ldr	r2, [r3, #8]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004074:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	689a      	ldr	r2, [r3, #8]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004084:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	689a      	ldr	r2, [r3, #8]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f022 0202 	bic.w	r2, r2, #2
 8004094:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	6899      	ldr	r1, [r3, #8]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	7e1b      	ldrb	r3, [r3, #24]
 80040a0:	005a      	lsls	r2, r3, #1
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	430a      	orrs	r2, r1
 80040a8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d01b      	beq.n	80040ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685a      	ldr	r2, [r3, #4]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040c2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80040d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	6859      	ldr	r1, [r3, #4]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040de:	3b01      	subs	r3, #1
 80040e0:	035a      	lsls	r2, r3, #13
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	430a      	orrs	r2, r1
 80040e8:	605a      	str	r2, [r3, #4]
 80040ea:	e007      	b.n	80040fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800410a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	3b01      	subs	r3, #1
 8004118:	051a      	lsls	r2, r3, #20
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	430a      	orrs	r2, r1
 8004120:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	689a      	ldr	r2, [r3, #8]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004130:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	6899      	ldr	r1, [r3, #8]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800413e:	025a      	lsls	r2, r3, #9
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	430a      	orrs	r2, r1
 8004146:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	689a      	ldr	r2, [r3, #8]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004156:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	6899      	ldr	r1, [r3, #8]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	029a      	lsls	r2, r3, #10
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	430a      	orrs	r2, r1
 800416a:	609a      	str	r2, [r3, #8]
}
 800416c:	bf00      	nop
 800416e:	3714      	adds	r7, #20
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr
 8004178:	40012300 	.word	0x40012300
 800417c:	0f000001 	.word	0x0f000001

08004180 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f003 0307 	and.w	r3, r3, #7
 800418e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004190:	4b0c      	ldr	r3, [pc, #48]	; (80041c4 <__NVIC_SetPriorityGrouping+0x44>)
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004196:	68ba      	ldr	r2, [r7, #8]
 8004198:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800419c:	4013      	ands	r3, r2
 800419e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80041ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041b2:	4a04      	ldr	r2, [pc, #16]	; (80041c4 <__NVIC_SetPriorityGrouping+0x44>)
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	60d3      	str	r3, [r2, #12]
}
 80041b8:	bf00      	nop
 80041ba:	3714      	adds	r7, #20
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr
 80041c4:	e000ed00 	.word	0xe000ed00

080041c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041c8:	b480      	push	{r7}
 80041ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041cc:	4b04      	ldr	r3, [pc, #16]	; (80041e0 <__NVIC_GetPriorityGrouping+0x18>)
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	0a1b      	lsrs	r3, r3, #8
 80041d2:	f003 0307 	and.w	r3, r3, #7
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr
 80041e0:	e000ed00 	.word	0xe000ed00

080041e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	4603      	mov	r3, r0
 80041ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	db0b      	blt.n	800420e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041f6:	79fb      	ldrb	r3, [r7, #7]
 80041f8:	f003 021f 	and.w	r2, r3, #31
 80041fc:	4907      	ldr	r1, [pc, #28]	; (800421c <__NVIC_EnableIRQ+0x38>)
 80041fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004202:	095b      	lsrs	r3, r3, #5
 8004204:	2001      	movs	r0, #1
 8004206:	fa00 f202 	lsl.w	r2, r0, r2
 800420a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800420e:	bf00      	nop
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	e000e100 	.word	0xe000e100

08004220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	4603      	mov	r3, r0
 8004228:	6039      	str	r1, [r7, #0]
 800422a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800422c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004230:	2b00      	cmp	r3, #0
 8004232:	db0a      	blt.n	800424a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	b2da      	uxtb	r2, r3
 8004238:	490c      	ldr	r1, [pc, #48]	; (800426c <__NVIC_SetPriority+0x4c>)
 800423a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800423e:	0112      	lsls	r2, r2, #4
 8004240:	b2d2      	uxtb	r2, r2
 8004242:	440b      	add	r3, r1
 8004244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004248:	e00a      	b.n	8004260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	b2da      	uxtb	r2, r3
 800424e:	4908      	ldr	r1, [pc, #32]	; (8004270 <__NVIC_SetPriority+0x50>)
 8004250:	79fb      	ldrb	r3, [r7, #7]
 8004252:	f003 030f 	and.w	r3, r3, #15
 8004256:	3b04      	subs	r3, #4
 8004258:	0112      	lsls	r2, r2, #4
 800425a:	b2d2      	uxtb	r2, r2
 800425c:	440b      	add	r3, r1
 800425e:	761a      	strb	r2, [r3, #24]
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr
 800426c:	e000e100 	.word	0xe000e100
 8004270:	e000ed00 	.word	0xe000ed00

08004274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004274:	b480      	push	{r7}
 8004276:	b089      	sub	sp, #36	; 0x24
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f003 0307 	and.w	r3, r3, #7
 8004286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	f1c3 0307 	rsb	r3, r3, #7
 800428e:	2b04      	cmp	r3, #4
 8004290:	bf28      	it	cs
 8004292:	2304      	movcs	r3, #4
 8004294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	3304      	adds	r3, #4
 800429a:	2b06      	cmp	r3, #6
 800429c:	d902      	bls.n	80042a4 <NVIC_EncodePriority+0x30>
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	3b03      	subs	r3, #3
 80042a2:	e000      	b.n	80042a6 <NVIC_EncodePriority+0x32>
 80042a4:	2300      	movs	r3, #0
 80042a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042a8:	f04f 32ff 	mov.w	r2, #4294967295
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	fa02 f303 	lsl.w	r3, r2, r3
 80042b2:	43da      	mvns	r2, r3
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	401a      	ands	r2, r3
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042bc:	f04f 31ff 	mov.w	r1, #4294967295
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	fa01 f303 	lsl.w	r3, r1, r3
 80042c6:	43d9      	mvns	r1, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042cc:	4313      	orrs	r3, r2
         );
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3724      	adds	r7, #36	; 0x24
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
	...

080042dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	3b01      	subs	r3, #1
 80042e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042ec:	d301      	bcc.n	80042f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042ee:	2301      	movs	r3, #1
 80042f0:	e00f      	b.n	8004312 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042f2:	4a0a      	ldr	r2, [pc, #40]	; (800431c <SysTick_Config+0x40>)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	3b01      	subs	r3, #1
 80042f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042fa:	210f      	movs	r1, #15
 80042fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004300:	f7ff ff8e 	bl	8004220 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004304:	4b05      	ldr	r3, [pc, #20]	; (800431c <SysTick_Config+0x40>)
 8004306:	2200      	movs	r2, #0
 8004308:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800430a:	4b04      	ldr	r3, [pc, #16]	; (800431c <SysTick_Config+0x40>)
 800430c:	2207      	movs	r2, #7
 800430e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3708      	adds	r7, #8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	e000e010 	.word	0xe000e010

08004320 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f7ff ff29 	bl	8004180 <__NVIC_SetPriorityGrouping>
}
 800432e:	bf00      	nop
 8004330:	3708      	adds	r7, #8
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004336:	b580      	push	{r7, lr}
 8004338:	b086      	sub	sp, #24
 800433a:	af00      	add	r7, sp, #0
 800433c:	4603      	mov	r3, r0
 800433e:	60b9      	str	r1, [r7, #8]
 8004340:	607a      	str	r2, [r7, #4]
 8004342:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004344:	2300      	movs	r3, #0
 8004346:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004348:	f7ff ff3e 	bl	80041c8 <__NVIC_GetPriorityGrouping>
 800434c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	68b9      	ldr	r1, [r7, #8]
 8004352:	6978      	ldr	r0, [r7, #20]
 8004354:	f7ff ff8e 	bl	8004274 <NVIC_EncodePriority>
 8004358:	4602      	mov	r2, r0
 800435a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800435e:	4611      	mov	r1, r2
 8004360:	4618      	mov	r0, r3
 8004362:	f7ff ff5d 	bl	8004220 <__NVIC_SetPriority>
}
 8004366:	bf00      	nop
 8004368:	3718      	adds	r7, #24
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b082      	sub	sp, #8
 8004372:	af00      	add	r7, sp, #0
 8004374:	4603      	mov	r3, r0
 8004376:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800437c:	4618      	mov	r0, r3
 800437e:	f7ff ff31 	bl	80041e4 <__NVIC_EnableIRQ>
}
 8004382:	bf00      	nop
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800438a:	b580      	push	{r7, lr}
 800438c:	b082      	sub	sp, #8
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f7ff ffa2 	bl	80042dc <SysTick_Config>
 8004398:	4603      	mov	r3, r0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b084      	sub	sp, #16
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ae:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80043b0:	f7ff fac4 	bl	800393c <HAL_GetTick>
 80043b4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d008      	beq.n	80043d4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2280      	movs	r2, #128	; 0x80
 80043c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e052      	b.n	800447a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f022 0216 	bic.w	r2, r2, #22
 80043e2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	695a      	ldr	r2, [r3, #20]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043f2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d103      	bne.n	8004404 <HAL_DMA_Abort+0x62>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004400:	2b00      	cmp	r3, #0
 8004402:	d007      	beq.n	8004414 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f022 0208 	bic.w	r2, r2, #8
 8004412:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 0201 	bic.w	r2, r2, #1
 8004422:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004424:	e013      	b.n	800444e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004426:	f7ff fa89 	bl	800393c <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	2b05      	cmp	r3, #5
 8004432:	d90c      	bls.n	800444e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2220      	movs	r2, #32
 8004438:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2203      	movs	r2, #3
 800443e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e015      	b.n	800447a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1e4      	bne.n	8004426 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004460:	223f      	movs	r2, #63	; 0x3f
 8004462:	409a      	lsls	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004482:	b480      	push	{r7}
 8004484:	b083      	sub	sp, #12
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d004      	beq.n	80044a0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2280      	movs	r2, #128	; 0x80
 800449a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e00c      	b.n	80044ba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2205      	movs	r2, #5
 80044a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f022 0201 	bic.w	r2, r2, #1
 80044b6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
	...

080044c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b089      	sub	sp, #36	; 0x24
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80044d2:	2300      	movs	r3, #0
 80044d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80044d6:	2300      	movs	r3, #0
 80044d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80044da:	2300      	movs	r3, #0
 80044dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044de:	2300      	movs	r3, #0
 80044e0:	61fb      	str	r3, [r7, #28]
 80044e2:	e159      	b.n	8004798 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80044e4:	2201      	movs	r2, #1
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	4013      	ands	r3, r2
 80044f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	f040 8148 	bne.w	8004792 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f003 0303 	and.w	r3, r3, #3
 800450a:	2b01      	cmp	r3, #1
 800450c:	d005      	beq.n	800451a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004516:	2b02      	cmp	r3, #2
 8004518:	d130      	bne.n	800457c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	005b      	lsls	r3, r3, #1
 8004524:	2203      	movs	r2, #3
 8004526:	fa02 f303 	lsl.w	r3, r2, r3
 800452a:	43db      	mvns	r3, r3
 800452c:	69ba      	ldr	r2, [r7, #24]
 800452e:	4013      	ands	r3, r2
 8004530:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	68da      	ldr	r2, [r3, #12]
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	fa02 f303 	lsl.w	r3, r2, r3
 800453e:	69ba      	ldr	r2, [r7, #24]
 8004540:	4313      	orrs	r3, r2
 8004542:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	69ba      	ldr	r2, [r7, #24]
 8004548:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004550:	2201      	movs	r2, #1
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	fa02 f303 	lsl.w	r3, r2, r3
 8004558:	43db      	mvns	r3, r3
 800455a:	69ba      	ldr	r2, [r7, #24]
 800455c:	4013      	ands	r3, r2
 800455e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	091b      	lsrs	r3, r3, #4
 8004566:	f003 0201 	and.w	r2, r3, #1
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	fa02 f303 	lsl.w	r3, r2, r3
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	4313      	orrs	r3, r2
 8004574:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f003 0303 	and.w	r3, r3, #3
 8004584:	2b03      	cmp	r3, #3
 8004586:	d017      	beq.n	80045b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	005b      	lsls	r3, r3, #1
 8004592:	2203      	movs	r2, #3
 8004594:	fa02 f303 	lsl.w	r3, r2, r3
 8004598:	43db      	mvns	r3, r3
 800459a:	69ba      	ldr	r2, [r7, #24]
 800459c:	4013      	ands	r3, r2
 800459e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	689a      	ldr	r2, [r3, #8]
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	005b      	lsls	r3, r3, #1
 80045a8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f003 0303 	and.w	r3, r3, #3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d123      	bne.n	800460c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	08da      	lsrs	r2, r3, #3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	3208      	adds	r2, #8
 80045cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	f003 0307 	and.w	r3, r3, #7
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	220f      	movs	r2, #15
 80045dc:	fa02 f303 	lsl.w	r3, r2, r3
 80045e0:	43db      	mvns	r3, r3
 80045e2:	69ba      	ldr	r2, [r7, #24]
 80045e4:	4013      	ands	r3, r2
 80045e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	691a      	ldr	r2, [r3, #16]
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	f003 0307 	and.w	r3, r3, #7
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	fa02 f303 	lsl.w	r3, r2, r3
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	08da      	lsrs	r2, r3, #3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	3208      	adds	r2, #8
 8004606:	69b9      	ldr	r1, [r7, #24]
 8004608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	005b      	lsls	r3, r3, #1
 8004616:	2203      	movs	r2, #3
 8004618:	fa02 f303 	lsl.w	r3, r2, r3
 800461c:	43db      	mvns	r3, r3
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	4013      	ands	r3, r2
 8004622:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f003 0203 	and.w	r2, r3, #3
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	005b      	lsls	r3, r3, #1
 8004630:	fa02 f303 	lsl.w	r3, r2, r3
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	4313      	orrs	r3, r2
 8004638:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 80a2 	beq.w	8004792 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800464e:	2300      	movs	r3, #0
 8004650:	60fb      	str	r3, [r7, #12]
 8004652:	4b57      	ldr	r3, [pc, #348]	; (80047b0 <HAL_GPIO_Init+0x2e8>)
 8004654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004656:	4a56      	ldr	r2, [pc, #344]	; (80047b0 <HAL_GPIO_Init+0x2e8>)
 8004658:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800465c:	6453      	str	r3, [r2, #68]	; 0x44
 800465e:	4b54      	ldr	r3, [pc, #336]	; (80047b0 <HAL_GPIO_Init+0x2e8>)
 8004660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004666:	60fb      	str	r3, [r7, #12]
 8004668:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800466a:	4a52      	ldr	r2, [pc, #328]	; (80047b4 <HAL_GPIO_Init+0x2ec>)
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	089b      	lsrs	r3, r3, #2
 8004670:	3302      	adds	r3, #2
 8004672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004676:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	f003 0303 	and.w	r3, r3, #3
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	220f      	movs	r2, #15
 8004682:	fa02 f303 	lsl.w	r3, r2, r3
 8004686:	43db      	mvns	r3, r3
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	4013      	ands	r3, r2
 800468c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a49      	ldr	r2, [pc, #292]	; (80047b8 <HAL_GPIO_Init+0x2f0>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d019      	beq.n	80046ca <HAL_GPIO_Init+0x202>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a48      	ldr	r2, [pc, #288]	; (80047bc <HAL_GPIO_Init+0x2f4>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d013      	beq.n	80046c6 <HAL_GPIO_Init+0x1fe>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a47      	ldr	r2, [pc, #284]	; (80047c0 <HAL_GPIO_Init+0x2f8>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d00d      	beq.n	80046c2 <HAL_GPIO_Init+0x1fa>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a46      	ldr	r2, [pc, #280]	; (80047c4 <HAL_GPIO_Init+0x2fc>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d007      	beq.n	80046be <HAL_GPIO_Init+0x1f6>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a45      	ldr	r2, [pc, #276]	; (80047c8 <HAL_GPIO_Init+0x300>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d101      	bne.n	80046ba <HAL_GPIO_Init+0x1f2>
 80046b6:	2304      	movs	r3, #4
 80046b8:	e008      	b.n	80046cc <HAL_GPIO_Init+0x204>
 80046ba:	2307      	movs	r3, #7
 80046bc:	e006      	b.n	80046cc <HAL_GPIO_Init+0x204>
 80046be:	2303      	movs	r3, #3
 80046c0:	e004      	b.n	80046cc <HAL_GPIO_Init+0x204>
 80046c2:	2302      	movs	r3, #2
 80046c4:	e002      	b.n	80046cc <HAL_GPIO_Init+0x204>
 80046c6:	2301      	movs	r3, #1
 80046c8:	e000      	b.n	80046cc <HAL_GPIO_Init+0x204>
 80046ca:	2300      	movs	r3, #0
 80046cc:	69fa      	ldr	r2, [r7, #28]
 80046ce:	f002 0203 	and.w	r2, r2, #3
 80046d2:	0092      	lsls	r2, r2, #2
 80046d4:	4093      	lsls	r3, r2
 80046d6:	69ba      	ldr	r2, [r7, #24]
 80046d8:	4313      	orrs	r3, r2
 80046da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046dc:	4935      	ldr	r1, [pc, #212]	; (80047b4 <HAL_GPIO_Init+0x2ec>)
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	089b      	lsrs	r3, r3, #2
 80046e2:	3302      	adds	r3, #2
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80046ea:	4b38      	ldr	r3, [pc, #224]	; (80047cc <HAL_GPIO_Init+0x304>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	43db      	mvns	r3, r3
 80046f4:	69ba      	ldr	r2, [r7, #24]
 80046f6:	4013      	ands	r3, r2
 80046f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d003      	beq.n	800470e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004706:	69ba      	ldr	r2, [r7, #24]
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	4313      	orrs	r3, r2
 800470c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800470e:	4a2f      	ldr	r2, [pc, #188]	; (80047cc <HAL_GPIO_Init+0x304>)
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004714:	4b2d      	ldr	r3, [pc, #180]	; (80047cc <HAL_GPIO_Init+0x304>)
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	43db      	mvns	r3, r3
 800471e:	69ba      	ldr	r2, [r7, #24]
 8004720:	4013      	ands	r3, r2
 8004722:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d003      	beq.n	8004738 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004730:	69ba      	ldr	r2, [r7, #24]
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	4313      	orrs	r3, r2
 8004736:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004738:	4a24      	ldr	r2, [pc, #144]	; (80047cc <HAL_GPIO_Init+0x304>)
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800473e:	4b23      	ldr	r3, [pc, #140]	; (80047cc <HAL_GPIO_Init+0x304>)
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	43db      	mvns	r3, r3
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	4013      	ands	r3, r2
 800474c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	4313      	orrs	r3, r2
 8004760:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004762:	4a1a      	ldr	r2, [pc, #104]	; (80047cc <HAL_GPIO_Init+0x304>)
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004768:	4b18      	ldr	r3, [pc, #96]	; (80047cc <HAL_GPIO_Init+0x304>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	43db      	mvns	r3, r3
 8004772:	69ba      	ldr	r2, [r7, #24]
 8004774:	4013      	ands	r3, r2
 8004776:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d003      	beq.n	800478c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004784:	69ba      	ldr	r2, [r7, #24]
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	4313      	orrs	r3, r2
 800478a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800478c:	4a0f      	ldr	r2, [pc, #60]	; (80047cc <HAL_GPIO_Init+0x304>)
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	3301      	adds	r3, #1
 8004796:	61fb      	str	r3, [r7, #28]
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	2b0f      	cmp	r3, #15
 800479c:	f67f aea2 	bls.w	80044e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80047a0:	bf00      	nop
 80047a2:	bf00      	nop
 80047a4:	3724      	adds	r7, #36	; 0x24
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	40023800 	.word	0x40023800
 80047b4:	40013800 	.word	0x40013800
 80047b8:	40020000 	.word	0x40020000
 80047bc:	40020400 	.word	0x40020400
 80047c0:	40020800 	.word	0x40020800
 80047c4:	40020c00 	.word	0x40020c00
 80047c8:	40021000 	.word	0x40021000
 80047cc:	40013c00 	.word	0x40013c00

080047d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	460b      	mov	r3, r1
 80047da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	691a      	ldr	r2, [r3, #16]
 80047e0:	887b      	ldrh	r3, [r7, #2]
 80047e2:	4013      	ands	r3, r2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d002      	beq.n	80047ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80047e8:	2301      	movs	r3, #1
 80047ea:	73fb      	strb	r3, [r7, #15]
 80047ec:	e001      	b.n	80047f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80047ee:	2300      	movs	r3, #0
 80047f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80047f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3714      	adds	r7, #20
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	460b      	mov	r3, r1
 800480a:	807b      	strh	r3, [r7, #2]
 800480c:	4613      	mov	r3, r2
 800480e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004810:	787b      	ldrb	r3, [r7, #1]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d003      	beq.n	800481e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004816:	887a      	ldrh	r2, [r7, #2]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800481c:	e003      	b.n	8004826 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800481e:	887b      	ldrh	r3, [r7, #2]
 8004820:	041a      	lsls	r2, r3, #16
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	619a      	str	r2, [r3, #24]
}
 8004826:	bf00      	nop
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
	...

08004834 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	4603      	mov	r3, r0
 800483c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800483e:	4b08      	ldr	r3, [pc, #32]	; (8004860 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004840:	695a      	ldr	r2, [r3, #20]
 8004842:	88fb      	ldrh	r3, [r7, #6]
 8004844:	4013      	ands	r3, r2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d006      	beq.n	8004858 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800484a:	4a05      	ldr	r2, [pc, #20]	; (8004860 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800484c:	88fb      	ldrh	r3, [r7, #6]
 800484e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004850:	88fb      	ldrh	r3, [r7, #6]
 8004852:	4618      	mov	r0, r3
 8004854:	f000 f806 	bl	8004864 <HAL_GPIO_EXTI_Callback>
  }
}
 8004858:	bf00      	nop
 800485a:	3708      	adds	r7, #8
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	40013c00 	.word	0x40013c00

08004864 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	4603      	mov	r3, r0
 800486c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800486e:	bf00      	nop
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
	...

0800487c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b086      	sub	sp, #24
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e267      	b.n	8004d5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	2b00      	cmp	r3, #0
 8004898:	d075      	beq.n	8004986 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800489a:	4b88      	ldr	r3, [pc, #544]	; (8004abc <HAL_RCC_OscConfig+0x240>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f003 030c 	and.w	r3, r3, #12
 80048a2:	2b04      	cmp	r3, #4
 80048a4:	d00c      	beq.n	80048c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048a6:	4b85      	ldr	r3, [pc, #532]	; (8004abc <HAL_RCC_OscConfig+0x240>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048ae:	2b08      	cmp	r3, #8
 80048b0:	d112      	bne.n	80048d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048b2:	4b82      	ldr	r3, [pc, #520]	; (8004abc <HAL_RCC_OscConfig+0x240>)
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048be:	d10b      	bne.n	80048d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048c0:	4b7e      	ldr	r3, [pc, #504]	; (8004abc <HAL_RCC_OscConfig+0x240>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d05b      	beq.n	8004984 <HAL_RCC_OscConfig+0x108>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d157      	bne.n	8004984 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e242      	b.n	8004d5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048e0:	d106      	bne.n	80048f0 <HAL_RCC_OscConfig+0x74>
 80048e2:	4b76      	ldr	r3, [pc, #472]	; (8004abc <HAL_RCC_OscConfig+0x240>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a75      	ldr	r2, [pc, #468]	; (8004abc <HAL_RCC_OscConfig+0x240>)
 80048e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048ec:	6013      	str	r3, [r2, #0]
 80048ee:	e01d      	b.n	800492c <HAL_RCC_OscConfig+0xb0>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048f8:	d10c      	bne.n	8004914 <HAL_RCC_OscConfig+0x98>
 80048fa:	4b70      	ldr	r3, [pc, #448]	; (8004abc <HAL_RCC_OscConfig+0x240>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a6f      	ldr	r2, [pc, #444]	; (8004abc <HAL_RCC_OscConfig+0x240>)
 8004900:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004904:	6013      	str	r3, [r2, #0]
 8004906:	4b6d      	ldr	r3, [pc, #436]	; (8004abc <HAL_RCC_OscConfig+0x240>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a6c      	ldr	r2, [pc, #432]	; (8004abc <HAL_RCC_OscConfig+0x240>)
 800490c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004910:	6013      	str	r3, [r2, #0]
 8004912:	e00b      	b.n	800492c <HAL_RCC_OscConfig+0xb0>
 8004914:	4b69      	ldr	r3, [pc, #420]	; (8004abc <HAL_RCC_OscConfig+0x240>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a68      	ldr	r2, [pc, #416]	; (8004abc <HAL_RCC_OscConfig+0x240>)
 800491a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800491e:	6013      	str	r3, [r2, #0]
 8004920:	4b66      	ldr	r3, [pc, #408]	; (8004abc <HAL_RCC_OscConfig+0x240>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a65      	ldr	r2, [pc, #404]	; (8004abc <HAL_RCC_OscConfig+0x240>)
 8004926:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800492a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d013      	beq.n	800495c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004934:	f7ff f802 	bl	800393c <HAL_GetTick>
 8004938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800493a:	e008      	b.n	800494e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800493c:	f7fe fffe 	bl	800393c <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b64      	cmp	r3, #100	; 0x64
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e207      	b.n	8004d5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800494e:	4b5b      	ldr	r3, [pc, #364]	; (8004abc <HAL_RCC_OscConfig+0x240>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d0f0      	beq.n	800493c <HAL_RCC_OscConfig+0xc0>
 800495a:	e014      	b.n	8004986 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800495c:	f7fe ffee 	bl	800393c <HAL_GetTick>
 8004960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004962:	e008      	b.n	8004976 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004964:	f7fe ffea 	bl	800393c <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b64      	cmp	r3, #100	; 0x64
 8004970:	d901      	bls.n	8004976 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e1f3      	b.n	8004d5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004976:	4b51      	ldr	r3, [pc, #324]	; (8004abc <HAL_RCC_OscConfig+0x240>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1f0      	bne.n	8004964 <HAL_RCC_OscConfig+0xe8>
 8004982:	e000      	b.n	8004986 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004984:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b00      	cmp	r3, #0
 8004990:	d063      	beq.n	8004a5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004992:	4b4a      	ldr	r3, [pc, #296]	; (8004abc <HAL_RCC_OscConfig+0x240>)
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f003 030c 	and.w	r3, r3, #12
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00b      	beq.n	80049b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800499e:	4b47      	ldr	r3, [pc, #284]	; (8004abc <HAL_RCC_OscConfig+0x240>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049a6:	2b08      	cmp	r3, #8
 80049a8:	d11c      	bne.n	80049e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049aa:	4b44      	ldr	r3, [pc, #272]	; (8004abc <HAL_RCC_OscConfig+0x240>)
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d116      	bne.n	80049e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049b6:	4b41      	ldr	r3, [pc, #260]	; (8004abc <HAL_RCC_OscConfig+0x240>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0302 	and.w	r3, r3, #2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d005      	beq.n	80049ce <HAL_RCC_OscConfig+0x152>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d001      	beq.n	80049ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e1c7      	b.n	8004d5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049ce:	4b3b      	ldr	r3, [pc, #236]	; (8004abc <HAL_RCC_OscConfig+0x240>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	00db      	lsls	r3, r3, #3
 80049dc:	4937      	ldr	r1, [pc, #220]	; (8004abc <HAL_RCC_OscConfig+0x240>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049e2:	e03a      	b.n	8004a5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d020      	beq.n	8004a2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049ec:	4b34      	ldr	r3, [pc, #208]	; (8004ac0 <HAL_RCC_OscConfig+0x244>)
 80049ee:	2201      	movs	r2, #1
 80049f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f2:	f7fe ffa3 	bl	800393c <HAL_GetTick>
 80049f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049f8:	e008      	b.n	8004a0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049fa:	f7fe ff9f 	bl	800393c <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d901      	bls.n	8004a0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e1a8      	b.n	8004d5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a0c:	4b2b      	ldr	r3, [pc, #172]	; (8004abc <HAL_RCC_OscConfig+0x240>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0302 	and.w	r3, r3, #2
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d0f0      	beq.n	80049fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a18:	4b28      	ldr	r3, [pc, #160]	; (8004abc <HAL_RCC_OscConfig+0x240>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	00db      	lsls	r3, r3, #3
 8004a26:	4925      	ldr	r1, [pc, #148]	; (8004abc <HAL_RCC_OscConfig+0x240>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	600b      	str	r3, [r1, #0]
 8004a2c:	e015      	b.n	8004a5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a2e:	4b24      	ldr	r3, [pc, #144]	; (8004ac0 <HAL_RCC_OscConfig+0x244>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a34:	f7fe ff82 	bl	800393c <HAL_GetTick>
 8004a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a3a:	e008      	b.n	8004a4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a3c:	f7fe ff7e 	bl	800393c <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d901      	bls.n	8004a4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e187      	b.n	8004d5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a4e:	4b1b      	ldr	r3, [pc, #108]	; (8004abc <HAL_RCC_OscConfig+0x240>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1f0      	bne.n	8004a3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0308 	and.w	r3, r3, #8
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d036      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d016      	beq.n	8004a9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a6e:	4b15      	ldr	r3, [pc, #84]	; (8004ac4 <HAL_RCC_OscConfig+0x248>)
 8004a70:	2201      	movs	r2, #1
 8004a72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a74:	f7fe ff62 	bl	800393c <HAL_GetTick>
 8004a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a7a:	e008      	b.n	8004a8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a7c:	f7fe ff5e 	bl	800393c <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d901      	bls.n	8004a8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e167      	b.n	8004d5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a8e:	4b0b      	ldr	r3, [pc, #44]	; (8004abc <HAL_RCC_OscConfig+0x240>)
 8004a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d0f0      	beq.n	8004a7c <HAL_RCC_OscConfig+0x200>
 8004a9a:	e01b      	b.n	8004ad4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a9c:	4b09      	ldr	r3, [pc, #36]	; (8004ac4 <HAL_RCC_OscConfig+0x248>)
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aa2:	f7fe ff4b 	bl	800393c <HAL_GetTick>
 8004aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004aa8:	e00e      	b.n	8004ac8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004aaa:	f7fe ff47 	bl	800393c <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d907      	bls.n	8004ac8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e150      	b.n	8004d5e <HAL_RCC_OscConfig+0x4e2>
 8004abc:	40023800 	.word	0x40023800
 8004ac0:	42470000 	.word	0x42470000
 8004ac4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ac8:	4b88      	ldr	r3, [pc, #544]	; (8004cec <HAL_RCC_OscConfig+0x470>)
 8004aca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004acc:	f003 0302 	and.w	r3, r3, #2
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1ea      	bne.n	8004aaa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0304 	and.w	r3, r3, #4
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f000 8097 	beq.w	8004c10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ae6:	4b81      	ldr	r3, [pc, #516]	; (8004cec <HAL_RCC_OscConfig+0x470>)
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10f      	bne.n	8004b12 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004af2:	2300      	movs	r3, #0
 8004af4:	60bb      	str	r3, [r7, #8]
 8004af6:	4b7d      	ldr	r3, [pc, #500]	; (8004cec <HAL_RCC_OscConfig+0x470>)
 8004af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afa:	4a7c      	ldr	r2, [pc, #496]	; (8004cec <HAL_RCC_OscConfig+0x470>)
 8004afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b00:	6413      	str	r3, [r2, #64]	; 0x40
 8004b02:	4b7a      	ldr	r3, [pc, #488]	; (8004cec <HAL_RCC_OscConfig+0x470>)
 8004b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b0a:	60bb      	str	r3, [r7, #8]
 8004b0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b12:	4b77      	ldr	r3, [pc, #476]	; (8004cf0 <HAL_RCC_OscConfig+0x474>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d118      	bne.n	8004b50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b1e:	4b74      	ldr	r3, [pc, #464]	; (8004cf0 <HAL_RCC_OscConfig+0x474>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a73      	ldr	r2, [pc, #460]	; (8004cf0 <HAL_RCC_OscConfig+0x474>)
 8004b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b2a:	f7fe ff07 	bl	800393c <HAL_GetTick>
 8004b2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b30:	e008      	b.n	8004b44 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b32:	f7fe ff03 	bl	800393c <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d901      	bls.n	8004b44 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e10c      	b.n	8004d5e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b44:	4b6a      	ldr	r3, [pc, #424]	; (8004cf0 <HAL_RCC_OscConfig+0x474>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d0f0      	beq.n	8004b32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d106      	bne.n	8004b66 <HAL_RCC_OscConfig+0x2ea>
 8004b58:	4b64      	ldr	r3, [pc, #400]	; (8004cec <HAL_RCC_OscConfig+0x470>)
 8004b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5c:	4a63      	ldr	r2, [pc, #396]	; (8004cec <HAL_RCC_OscConfig+0x470>)
 8004b5e:	f043 0301 	orr.w	r3, r3, #1
 8004b62:	6713      	str	r3, [r2, #112]	; 0x70
 8004b64:	e01c      	b.n	8004ba0 <HAL_RCC_OscConfig+0x324>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	2b05      	cmp	r3, #5
 8004b6c:	d10c      	bne.n	8004b88 <HAL_RCC_OscConfig+0x30c>
 8004b6e:	4b5f      	ldr	r3, [pc, #380]	; (8004cec <HAL_RCC_OscConfig+0x470>)
 8004b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b72:	4a5e      	ldr	r2, [pc, #376]	; (8004cec <HAL_RCC_OscConfig+0x470>)
 8004b74:	f043 0304 	orr.w	r3, r3, #4
 8004b78:	6713      	str	r3, [r2, #112]	; 0x70
 8004b7a:	4b5c      	ldr	r3, [pc, #368]	; (8004cec <HAL_RCC_OscConfig+0x470>)
 8004b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b7e:	4a5b      	ldr	r2, [pc, #364]	; (8004cec <HAL_RCC_OscConfig+0x470>)
 8004b80:	f043 0301 	orr.w	r3, r3, #1
 8004b84:	6713      	str	r3, [r2, #112]	; 0x70
 8004b86:	e00b      	b.n	8004ba0 <HAL_RCC_OscConfig+0x324>
 8004b88:	4b58      	ldr	r3, [pc, #352]	; (8004cec <HAL_RCC_OscConfig+0x470>)
 8004b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b8c:	4a57      	ldr	r2, [pc, #348]	; (8004cec <HAL_RCC_OscConfig+0x470>)
 8004b8e:	f023 0301 	bic.w	r3, r3, #1
 8004b92:	6713      	str	r3, [r2, #112]	; 0x70
 8004b94:	4b55      	ldr	r3, [pc, #340]	; (8004cec <HAL_RCC_OscConfig+0x470>)
 8004b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b98:	4a54      	ldr	r2, [pc, #336]	; (8004cec <HAL_RCC_OscConfig+0x470>)
 8004b9a:	f023 0304 	bic.w	r3, r3, #4
 8004b9e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d015      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ba8:	f7fe fec8 	bl	800393c <HAL_GetTick>
 8004bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bae:	e00a      	b.n	8004bc6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bb0:	f7fe fec4 	bl	800393c <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e0cb      	b.n	8004d5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bc6:	4b49      	ldr	r3, [pc, #292]	; (8004cec <HAL_RCC_OscConfig+0x470>)
 8004bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bca:	f003 0302 	and.w	r3, r3, #2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d0ee      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x334>
 8004bd2:	e014      	b.n	8004bfe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bd4:	f7fe feb2 	bl	800393c <HAL_GetTick>
 8004bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bda:	e00a      	b.n	8004bf2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bdc:	f7fe feae 	bl	800393c <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e0b5      	b.n	8004d5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bf2:	4b3e      	ldr	r3, [pc, #248]	; (8004cec <HAL_RCC_OscConfig+0x470>)
 8004bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1ee      	bne.n	8004bdc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bfe:	7dfb      	ldrb	r3, [r7, #23]
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d105      	bne.n	8004c10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c04:	4b39      	ldr	r3, [pc, #228]	; (8004cec <HAL_RCC_OscConfig+0x470>)
 8004c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c08:	4a38      	ldr	r2, [pc, #224]	; (8004cec <HAL_RCC_OscConfig+0x470>)
 8004c0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c0e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	699b      	ldr	r3, [r3, #24]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f000 80a1 	beq.w	8004d5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c1a:	4b34      	ldr	r3, [pc, #208]	; (8004cec <HAL_RCC_OscConfig+0x470>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f003 030c 	and.w	r3, r3, #12
 8004c22:	2b08      	cmp	r3, #8
 8004c24:	d05c      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d141      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c2e:	4b31      	ldr	r3, [pc, #196]	; (8004cf4 <HAL_RCC_OscConfig+0x478>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c34:	f7fe fe82 	bl	800393c <HAL_GetTick>
 8004c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c3a:	e008      	b.n	8004c4e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c3c:	f7fe fe7e 	bl	800393c <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d901      	bls.n	8004c4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e087      	b.n	8004d5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c4e:	4b27      	ldr	r3, [pc, #156]	; (8004cec <HAL_RCC_OscConfig+0x470>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1f0      	bne.n	8004c3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	69da      	ldr	r2, [r3, #28]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	431a      	orrs	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c68:	019b      	lsls	r3, r3, #6
 8004c6a:	431a      	orrs	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c70:	085b      	lsrs	r3, r3, #1
 8004c72:	3b01      	subs	r3, #1
 8004c74:	041b      	lsls	r3, r3, #16
 8004c76:	431a      	orrs	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7c:	061b      	lsls	r3, r3, #24
 8004c7e:	491b      	ldr	r1, [pc, #108]	; (8004cec <HAL_RCC_OscConfig+0x470>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c84:	4b1b      	ldr	r3, [pc, #108]	; (8004cf4 <HAL_RCC_OscConfig+0x478>)
 8004c86:	2201      	movs	r2, #1
 8004c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c8a:	f7fe fe57 	bl	800393c <HAL_GetTick>
 8004c8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c90:	e008      	b.n	8004ca4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c92:	f7fe fe53 	bl	800393c <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d901      	bls.n	8004ca4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e05c      	b.n	8004d5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ca4:	4b11      	ldr	r3, [pc, #68]	; (8004cec <HAL_RCC_OscConfig+0x470>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d0f0      	beq.n	8004c92 <HAL_RCC_OscConfig+0x416>
 8004cb0:	e054      	b.n	8004d5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cb2:	4b10      	ldr	r3, [pc, #64]	; (8004cf4 <HAL_RCC_OscConfig+0x478>)
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cb8:	f7fe fe40 	bl	800393c <HAL_GetTick>
 8004cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cbe:	e008      	b.n	8004cd2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cc0:	f7fe fe3c 	bl	800393c <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d901      	bls.n	8004cd2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e045      	b.n	8004d5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cd2:	4b06      	ldr	r3, [pc, #24]	; (8004cec <HAL_RCC_OscConfig+0x470>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1f0      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x444>
 8004cde:	e03d      	b.n	8004d5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d107      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e038      	b.n	8004d5e <HAL_RCC_OscConfig+0x4e2>
 8004cec:	40023800 	.word	0x40023800
 8004cf0:	40007000 	.word	0x40007000
 8004cf4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004cf8:	4b1b      	ldr	r3, [pc, #108]	; (8004d68 <HAL_RCC_OscConfig+0x4ec>)
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d028      	beq.n	8004d58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d121      	bne.n	8004d58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d11a      	bne.n	8004d58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d28:	4013      	ands	r3, r2
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d111      	bne.n	8004d58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3e:	085b      	lsrs	r3, r3, #1
 8004d40:	3b01      	subs	r3, #1
 8004d42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d107      	bne.n	8004d58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d001      	beq.n	8004d5c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e000      	b.n	8004d5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3718      	adds	r7, #24
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	40023800 	.word	0x40023800

08004d6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d101      	bne.n	8004d80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e0cc      	b.n	8004f1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d80:	4b68      	ldr	r3, [pc, #416]	; (8004f24 <HAL_RCC_ClockConfig+0x1b8>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0307 	and.w	r3, r3, #7
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d90c      	bls.n	8004da8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d8e:	4b65      	ldr	r3, [pc, #404]	; (8004f24 <HAL_RCC_ClockConfig+0x1b8>)
 8004d90:	683a      	ldr	r2, [r7, #0]
 8004d92:	b2d2      	uxtb	r2, r2
 8004d94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d96:	4b63      	ldr	r3, [pc, #396]	; (8004f24 <HAL_RCC_ClockConfig+0x1b8>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0307 	and.w	r3, r3, #7
 8004d9e:	683a      	ldr	r2, [r7, #0]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d001      	beq.n	8004da8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e0b8      	b.n	8004f1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0302 	and.w	r3, r3, #2
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d020      	beq.n	8004df6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0304 	and.w	r3, r3, #4
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d005      	beq.n	8004dcc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004dc0:	4b59      	ldr	r3, [pc, #356]	; (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	4a58      	ldr	r2, [pc, #352]	; (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004dca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0308 	and.w	r3, r3, #8
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d005      	beq.n	8004de4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004dd8:	4b53      	ldr	r3, [pc, #332]	; (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	4a52      	ldr	r2, [pc, #328]	; (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004dde:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004de2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004de4:	4b50      	ldr	r3, [pc, #320]	; (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	494d      	ldr	r1, [pc, #308]	; (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d044      	beq.n	8004e8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d107      	bne.n	8004e1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e0a:	4b47      	ldr	r3, [pc, #284]	; (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d119      	bne.n	8004e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e07f      	b.n	8004f1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d003      	beq.n	8004e2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e26:	2b03      	cmp	r3, #3
 8004e28:	d107      	bne.n	8004e3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e2a:	4b3f      	ldr	r3, [pc, #252]	; (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d109      	bne.n	8004e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e06f      	b.n	8004f1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e3a:	4b3b      	ldr	r3, [pc, #236]	; (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e067      	b.n	8004f1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e4a:	4b37      	ldr	r3, [pc, #220]	; (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f023 0203 	bic.w	r2, r3, #3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	4934      	ldr	r1, [pc, #208]	; (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e5c:	f7fe fd6e 	bl	800393c <HAL_GetTick>
 8004e60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e62:	e00a      	b.n	8004e7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e64:	f7fe fd6a 	bl	800393c <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e04f      	b.n	8004f1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e7a:	4b2b      	ldr	r3, [pc, #172]	; (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f003 020c 	and.w	r2, r3, #12
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d1eb      	bne.n	8004e64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e8c:	4b25      	ldr	r3, [pc, #148]	; (8004f24 <HAL_RCC_ClockConfig+0x1b8>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0307 	and.w	r3, r3, #7
 8004e94:	683a      	ldr	r2, [r7, #0]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d20c      	bcs.n	8004eb4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e9a:	4b22      	ldr	r3, [pc, #136]	; (8004f24 <HAL_RCC_ClockConfig+0x1b8>)
 8004e9c:	683a      	ldr	r2, [r7, #0]
 8004e9e:	b2d2      	uxtb	r2, r2
 8004ea0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ea2:	4b20      	ldr	r3, [pc, #128]	; (8004f24 <HAL_RCC_ClockConfig+0x1b8>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0307 	and.w	r3, r3, #7
 8004eaa:	683a      	ldr	r2, [r7, #0]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d001      	beq.n	8004eb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e032      	b.n	8004f1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0304 	and.w	r3, r3, #4
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d008      	beq.n	8004ed2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ec0:	4b19      	ldr	r3, [pc, #100]	; (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	4916      	ldr	r1, [pc, #88]	; (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0308 	and.w	r3, r3, #8
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d009      	beq.n	8004ef2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ede:	4b12      	ldr	r3, [pc, #72]	; (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	00db      	lsls	r3, r3, #3
 8004eec:	490e      	ldr	r1, [pc, #56]	; (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ef2:	f000 f821 	bl	8004f38 <HAL_RCC_GetSysClockFreq>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	4b0b      	ldr	r3, [pc, #44]	; (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	091b      	lsrs	r3, r3, #4
 8004efe:	f003 030f 	and.w	r3, r3, #15
 8004f02:	490a      	ldr	r1, [pc, #40]	; (8004f2c <HAL_RCC_ClockConfig+0x1c0>)
 8004f04:	5ccb      	ldrb	r3, [r1, r3]
 8004f06:	fa22 f303 	lsr.w	r3, r2, r3
 8004f0a:	4a09      	ldr	r2, [pc, #36]	; (8004f30 <HAL_RCC_ClockConfig+0x1c4>)
 8004f0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f0e:	4b09      	ldr	r3, [pc, #36]	; (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7fe fcce 	bl	80038b4 <HAL_InitTick>

  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3710      	adds	r7, #16
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	40023c00 	.word	0x40023c00
 8004f28:	40023800 	.word	0x40023800
 8004f2c:	08008ffc 	.word	0x08008ffc
 8004f30:	20000034 	.word	0x20000034
 8004f34:	20000038 	.word	0x20000038

08004f38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f3c:	b094      	sub	sp, #80	; 0x50
 8004f3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f40:	2300      	movs	r3, #0
 8004f42:	647b      	str	r3, [r7, #68]	; 0x44
 8004f44:	2300      	movs	r3, #0
 8004f46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f48:	2300      	movs	r3, #0
 8004f4a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f50:	4b79      	ldr	r3, [pc, #484]	; (8005138 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f003 030c 	and.w	r3, r3, #12
 8004f58:	2b08      	cmp	r3, #8
 8004f5a:	d00d      	beq.n	8004f78 <HAL_RCC_GetSysClockFreq+0x40>
 8004f5c:	2b08      	cmp	r3, #8
 8004f5e:	f200 80e1 	bhi.w	8005124 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d002      	beq.n	8004f6c <HAL_RCC_GetSysClockFreq+0x34>
 8004f66:	2b04      	cmp	r3, #4
 8004f68:	d003      	beq.n	8004f72 <HAL_RCC_GetSysClockFreq+0x3a>
 8004f6a:	e0db      	b.n	8005124 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f6c:	4b73      	ldr	r3, [pc, #460]	; (800513c <HAL_RCC_GetSysClockFreq+0x204>)
 8004f6e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004f70:	e0db      	b.n	800512a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f72:	4b73      	ldr	r3, [pc, #460]	; (8005140 <HAL_RCC_GetSysClockFreq+0x208>)
 8004f74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f76:	e0d8      	b.n	800512a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f78:	4b6f      	ldr	r3, [pc, #444]	; (8005138 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f80:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f82:	4b6d      	ldr	r3, [pc, #436]	; (8005138 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d063      	beq.n	8005056 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f8e:	4b6a      	ldr	r3, [pc, #424]	; (8005138 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	099b      	lsrs	r3, r3, #6
 8004f94:	2200      	movs	r2, #0
 8004f96:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f98:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fa0:	633b      	str	r3, [r7, #48]	; 0x30
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	637b      	str	r3, [r7, #52]	; 0x34
 8004fa6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004faa:	4622      	mov	r2, r4
 8004fac:	462b      	mov	r3, r5
 8004fae:	f04f 0000 	mov.w	r0, #0
 8004fb2:	f04f 0100 	mov.w	r1, #0
 8004fb6:	0159      	lsls	r1, r3, #5
 8004fb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fbc:	0150      	lsls	r0, r2, #5
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	4621      	mov	r1, r4
 8004fc4:	1a51      	subs	r1, r2, r1
 8004fc6:	6139      	str	r1, [r7, #16]
 8004fc8:	4629      	mov	r1, r5
 8004fca:	eb63 0301 	sbc.w	r3, r3, r1
 8004fce:	617b      	str	r3, [r7, #20]
 8004fd0:	f04f 0200 	mov.w	r2, #0
 8004fd4:	f04f 0300 	mov.w	r3, #0
 8004fd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004fdc:	4659      	mov	r1, fp
 8004fde:	018b      	lsls	r3, r1, #6
 8004fe0:	4651      	mov	r1, sl
 8004fe2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004fe6:	4651      	mov	r1, sl
 8004fe8:	018a      	lsls	r2, r1, #6
 8004fea:	4651      	mov	r1, sl
 8004fec:	ebb2 0801 	subs.w	r8, r2, r1
 8004ff0:	4659      	mov	r1, fp
 8004ff2:	eb63 0901 	sbc.w	r9, r3, r1
 8004ff6:	f04f 0200 	mov.w	r2, #0
 8004ffa:	f04f 0300 	mov.w	r3, #0
 8004ffe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005002:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005006:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800500a:	4690      	mov	r8, r2
 800500c:	4699      	mov	r9, r3
 800500e:	4623      	mov	r3, r4
 8005010:	eb18 0303 	adds.w	r3, r8, r3
 8005014:	60bb      	str	r3, [r7, #8]
 8005016:	462b      	mov	r3, r5
 8005018:	eb49 0303 	adc.w	r3, r9, r3
 800501c:	60fb      	str	r3, [r7, #12]
 800501e:	f04f 0200 	mov.w	r2, #0
 8005022:	f04f 0300 	mov.w	r3, #0
 8005026:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800502a:	4629      	mov	r1, r5
 800502c:	024b      	lsls	r3, r1, #9
 800502e:	4621      	mov	r1, r4
 8005030:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005034:	4621      	mov	r1, r4
 8005036:	024a      	lsls	r2, r1, #9
 8005038:	4610      	mov	r0, r2
 800503a:	4619      	mov	r1, r3
 800503c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800503e:	2200      	movs	r2, #0
 8005040:	62bb      	str	r3, [r7, #40]	; 0x28
 8005042:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005044:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005048:	f7fb fdae 	bl	8000ba8 <__aeabi_uldivmod>
 800504c:	4602      	mov	r2, r0
 800504e:	460b      	mov	r3, r1
 8005050:	4613      	mov	r3, r2
 8005052:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005054:	e058      	b.n	8005108 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005056:	4b38      	ldr	r3, [pc, #224]	; (8005138 <HAL_RCC_GetSysClockFreq+0x200>)
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	099b      	lsrs	r3, r3, #6
 800505c:	2200      	movs	r2, #0
 800505e:	4618      	mov	r0, r3
 8005060:	4611      	mov	r1, r2
 8005062:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005066:	623b      	str	r3, [r7, #32]
 8005068:	2300      	movs	r3, #0
 800506a:	627b      	str	r3, [r7, #36]	; 0x24
 800506c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005070:	4642      	mov	r2, r8
 8005072:	464b      	mov	r3, r9
 8005074:	f04f 0000 	mov.w	r0, #0
 8005078:	f04f 0100 	mov.w	r1, #0
 800507c:	0159      	lsls	r1, r3, #5
 800507e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005082:	0150      	lsls	r0, r2, #5
 8005084:	4602      	mov	r2, r0
 8005086:	460b      	mov	r3, r1
 8005088:	4641      	mov	r1, r8
 800508a:	ebb2 0a01 	subs.w	sl, r2, r1
 800508e:	4649      	mov	r1, r9
 8005090:	eb63 0b01 	sbc.w	fp, r3, r1
 8005094:	f04f 0200 	mov.w	r2, #0
 8005098:	f04f 0300 	mov.w	r3, #0
 800509c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80050a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80050a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80050a8:	ebb2 040a 	subs.w	r4, r2, sl
 80050ac:	eb63 050b 	sbc.w	r5, r3, fp
 80050b0:	f04f 0200 	mov.w	r2, #0
 80050b4:	f04f 0300 	mov.w	r3, #0
 80050b8:	00eb      	lsls	r3, r5, #3
 80050ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050be:	00e2      	lsls	r2, r4, #3
 80050c0:	4614      	mov	r4, r2
 80050c2:	461d      	mov	r5, r3
 80050c4:	4643      	mov	r3, r8
 80050c6:	18e3      	adds	r3, r4, r3
 80050c8:	603b      	str	r3, [r7, #0]
 80050ca:	464b      	mov	r3, r9
 80050cc:	eb45 0303 	adc.w	r3, r5, r3
 80050d0:	607b      	str	r3, [r7, #4]
 80050d2:	f04f 0200 	mov.w	r2, #0
 80050d6:	f04f 0300 	mov.w	r3, #0
 80050da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80050de:	4629      	mov	r1, r5
 80050e0:	028b      	lsls	r3, r1, #10
 80050e2:	4621      	mov	r1, r4
 80050e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80050e8:	4621      	mov	r1, r4
 80050ea:	028a      	lsls	r2, r1, #10
 80050ec:	4610      	mov	r0, r2
 80050ee:	4619      	mov	r1, r3
 80050f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050f2:	2200      	movs	r2, #0
 80050f4:	61bb      	str	r3, [r7, #24]
 80050f6:	61fa      	str	r2, [r7, #28]
 80050f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050fc:	f7fb fd54 	bl	8000ba8 <__aeabi_uldivmod>
 8005100:	4602      	mov	r2, r0
 8005102:	460b      	mov	r3, r1
 8005104:	4613      	mov	r3, r2
 8005106:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005108:	4b0b      	ldr	r3, [pc, #44]	; (8005138 <HAL_RCC_GetSysClockFreq+0x200>)
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	0c1b      	lsrs	r3, r3, #16
 800510e:	f003 0303 	and.w	r3, r3, #3
 8005112:	3301      	adds	r3, #1
 8005114:	005b      	lsls	r3, r3, #1
 8005116:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005118:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800511a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800511c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005120:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005122:	e002      	b.n	800512a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005124:	4b05      	ldr	r3, [pc, #20]	; (800513c <HAL_RCC_GetSysClockFreq+0x204>)
 8005126:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005128:	bf00      	nop
    }
  }
  return sysclockfreq;
 800512a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800512c:	4618      	mov	r0, r3
 800512e:	3750      	adds	r7, #80	; 0x50
 8005130:	46bd      	mov	sp, r7
 8005132:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005136:	bf00      	nop
 8005138:	40023800 	.word	0x40023800
 800513c:	00f42400 	.word	0x00f42400
 8005140:	007a1200 	.word	0x007a1200

08005144 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005144:	b480      	push	{r7}
 8005146:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005148:	4b03      	ldr	r3, [pc, #12]	; (8005158 <HAL_RCC_GetHCLKFreq+0x14>)
 800514a:	681b      	ldr	r3, [r3, #0]
}
 800514c:	4618      	mov	r0, r3
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	20000034 	.word	0x20000034

0800515c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005160:	f7ff fff0 	bl	8005144 <HAL_RCC_GetHCLKFreq>
 8005164:	4602      	mov	r2, r0
 8005166:	4b05      	ldr	r3, [pc, #20]	; (800517c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	0a9b      	lsrs	r3, r3, #10
 800516c:	f003 0307 	and.w	r3, r3, #7
 8005170:	4903      	ldr	r1, [pc, #12]	; (8005180 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005172:	5ccb      	ldrb	r3, [r1, r3]
 8005174:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005178:	4618      	mov	r0, r3
 800517a:	bd80      	pop	{r7, pc}
 800517c:	40023800 	.word	0x40023800
 8005180:	0800900c 	.word	0x0800900c

08005184 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005188:	f7ff ffdc 	bl	8005144 <HAL_RCC_GetHCLKFreq>
 800518c:	4602      	mov	r2, r0
 800518e:	4b05      	ldr	r3, [pc, #20]	; (80051a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	0b5b      	lsrs	r3, r3, #13
 8005194:	f003 0307 	and.w	r3, r3, #7
 8005198:	4903      	ldr	r1, [pc, #12]	; (80051a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800519a:	5ccb      	ldrb	r3, [r1, r3]
 800519c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	40023800 	.word	0x40023800
 80051a8:	0800900c 	.word	0x0800900c

080051ac <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b086      	sub	sp, #24
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051b4:	2300      	movs	r3, #0
 80051b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80051b8:	2300      	movs	r3, #0
 80051ba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0301 	and.w	r3, r3, #1
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d105      	bne.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d038      	beq.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80051d4:	4b68      	ldr	r3, [pc, #416]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80051d6:	2200      	movs	r2, #0
 80051d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051da:	f7fe fbaf 	bl	800393c <HAL_GetTick>
 80051de:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051e0:	e008      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80051e2:	f7fe fbab 	bl	800393c <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d901      	bls.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e0bd      	b.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051f4:	4b61      	ldr	r3, [pc, #388]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d1f0      	bne.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	685a      	ldr	r2, [r3, #4]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	019b      	lsls	r3, r3, #6
 800520a:	431a      	orrs	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	071b      	lsls	r3, r3, #28
 8005212:	495a      	ldr	r1, [pc, #360]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005214:	4313      	orrs	r3, r2
 8005216:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800521a:	4b57      	ldr	r3, [pc, #348]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800521c:	2201      	movs	r2, #1
 800521e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005220:	f7fe fb8c 	bl	800393c <HAL_GetTick>
 8005224:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005226:	e008      	b.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005228:	f7fe fb88 	bl	800393c <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	2b02      	cmp	r3, #2
 8005234:	d901      	bls.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e09a      	b.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800523a:	4b50      	ldr	r3, [pc, #320]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d0f0      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0302 	and.w	r3, r3, #2
 800524e:	2b00      	cmp	r3, #0
 8005250:	f000 8083 	beq.w	800535a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005254:	2300      	movs	r3, #0
 8005256:	60fb      	str	r3, [r7, #12]
 8005258:	4b48      	ldr	r3, [pc, #288]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800525a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525c:	4a47      	ldr	r2, [pc, #284]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800525e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005262:	6413      	str	r3, [r2, #64]	; 0x40
 8005264:	4b45      	ldr	r3, [pc, #276]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800526c:	60fb      	str	r3, [r7, #12]
 800526e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005270:	4b43      	ldr	r3, [pc, #268]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a42      	ldr	r2, [pc, #264]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800527a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800527c:	f7fe fb5e 	bl	800393c <HAL_GetTick>
 8005280:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005282:	e008      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005284:	f7fe fb5a 	bl	800393c <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	2b02      	cmp	r3, #2
 8005290:	d901      	bls.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e06c      	b.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005296:	4b3a      	ldr	r3, [pc, #232]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d0f0      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80052a2:	4b36      	ldr	r3, [pc, #216]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052aa:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d02f      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052ba:	693a      	ldr	r2, [r7, #16]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d028      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052c0:	4b2e      	ldr	r3, [pc, #184]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052c8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80052ca:	4b2e      	ldr	r3, [pc, #184]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80052cc:	2201      	movs	r2, #1
 80052ce:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80052d0:	4b2c      	ldr	r3, [pc, #176]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80052d2:	2200      	movs	r2, #0
 80052d4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80052d6:	4a29      	ldr	r2, [pc, #164]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80052dc:	4b27      	ldr	r3, [pc, #156]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e0:	f003 0301 	and.w	r3, r3, #1
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d114      	bne.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80052e8:	f7fe fb28 	bl	800393c <HAL_GetTick>
 80052ec:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052ee:	e00a      	b.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052f0:	f7fe fb24 	bl	800393c <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80052fe:	4293      	cmp	r3, r2
 8005300:	d901      	bls.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e034      	b.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005306:	4b1d      	ldr	r3, [pc, #116]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	2b00      	cmp	r3, #0
 8005310:	d0ee      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800531a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800531e:	d10d      	bne.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005320:	4b16      	ldr	r3, [pc, #88]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005330:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005334:	4911      	ldr	r1, [pc, #68]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005336:	4313      	orrs	r3, r2
 8005338:	608b      	str	r3, [r1, #8]
 800533a:	e005      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800533c:	4b0f      	ldr	r3, [pc, #60]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	4a0e      	ldr	r2, [pc, #56]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005342:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005346:	6093      	str	r3, [r2, #8]
 8005348:	4b0c      	ldr	r3, [pc, #48]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800534a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005354:	4909      	ldr	r1, [pc, #36]	; (800537c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005356:	4313      	orrs	r3, r2
 8005358:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0308 	and.w	r3, r3, #8
 8005362:	2b00      	cmp	r3, #0
 8005364:	d003      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	7d1a      	ldrb	r2, [r3, #20]
 800536a:	4b07      	ldr	r3, [pc, #28]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800536c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	3718      	adds	r7, #24
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	42470068 	.word	0x42470068
 800537c:	40023800 	.word	0x40023800
 8005380:	40007000 	.word	0x40007000
 8005384:	42470e40 	.word	0x42470e40
 8005388:	424711e0 	.word	0x424711e0

0800538c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d101      	bne.n	80053a2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e066      	b.n	8005470 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	7f5b      	ldrb	r3, [r3, #29]
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d105      	bne.n	80053b8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f7fd ff4e 	bl	8003254 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2202      	movs	r2, #2
 80053bc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	22ca      	movs	r2, #202	; 0xca
 80053c4:	625a      	str	r2, [r3, #36]	; 0x24
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2253      	movs	r2, #83	; 0x53
 80053cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 fa45 	bl	800585e <RTC_EnterInitMode>
 80053d4:	4603      	mov	r3, r0
 80053d6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80053d8:	7bfb      	ldrb	r3, [r7, #15]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d12c      	bne.n	8005438 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	6812      	ldr	r2, [r2, #0]
 80053e8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80053ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053f0:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	6899      	ldr	r1, [r3, #8]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685a      	ldr	r2, [r3, #4]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	431a      	orrs	r2, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	695b      	ldr	r3, [r3, #20]
 8005406:	431a      	orrs	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	430a      	orrs	r2, r1
 800540e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	68d2      	ldr	r2, [r2, #12]
 8005418:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	6919      	ldr	r1, [r3, #16]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	041a      	lsls	r2, r3, #16
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	430a      	orrs	r2, r1
 800542c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 fa4c 	bl	80058cc <RTC_ExitInitMode>
 8005434:	4603      	mov	r3, r0
 8005436:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005438:	7bfb      	ldrb	r3, [r7, #15]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d113      	bne.n	8005466 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800544c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	699a      	ldr	r2, [r3, #24]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	430a      	orrs	r2, r1
 800545e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	22ff      	movs	r2, #255	; 0xff
 800546c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800546e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005470:	4618      	mov	r0, r3
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005478:	b590      	push	{r4, r7, lr}
 800547a:	b087      	sub	sp, #28
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005484:	2300      	movs	r3, #0
 8005486:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	7f1b      	ldrb	r3, [r3, #28]
 800548c:	2b01      	cmp	r3, #1
 800548e:	d101      	bne.n	8005494 <HAL_RTC_SetTime+0x1c>
 8005490:	2302      	movs	r3, #2
 8005492:	e087      	b.n	80055a4 <HAL_RTC_SetTime+0x12c>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2201      	movs	r2, #1
 8005498:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2202      	movs	r2, #2
 800549e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d126      	bne.n	80054f4 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d102      	bne.n	80054ba <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	2200      	movs	r2, #0
 80054b8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	4618      	mov	r0, r3
 80054c0:	f000 fa29 	bl	8005916 <RTC_ByteToBcd2>
 80054c4:	4603      	mov	r3, r0
 80054c6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	785b      	ldrb	r3, [r3, #1]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f000 fa22 	bl	8005916 <RTC_ByteToBcd2>
 80054d2:	4603      	mov	r3, r0
 80054d4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80054d6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	789b      	ldrb	r3, [r3, #2]
 80054dc:	4618      	mov	r0, r3
 80054de:	f000 fa1a 	bl	8005916 <RTC_ByteToBcd2>
 80054e2:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80054e4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	78db      	ldrb	r3, [r3, #3]
 80054ec:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80054ee:	4313      	orrs	r3, r2
 80054f0:	617b      	str	r3, [r7, #20]
 80054f2:	e018      	b.n	8005526 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d102      	bne.n	8005508 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	2200      	movs	r2, #0
 8005506:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	785b      	ldrb	r3, [r3, #1]
 8005512:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005514:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005516:	68ba      	ldr	r2, [r7, #8]
 8005518:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800551a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	78db      	ldrb	r3, [r3, #3]
 8005520:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005522:	4313      	orrs	r3, r2
 8005524:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	22ca      	movs	r2, #202	; 0xca
 800552c:	625a      	str	r2, [r3, #36]	; 0x24
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2253      	movs	r2, #83	; 0x53
 8005534:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f000 f991 	bl	800585e <RTC_EnterInitMode>
 800553c:	4603      	mov	r3, r0
 800553e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005540:	7cfb      	ldrb	r3, [r7, #19]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d120      	bne.n	8005588 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005550:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005554:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	689a      	ldr	r2, [r3, #8]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005564:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	6899      	ldr	r1, [r3, #8]
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	68da      	ldr	r2, [r3, #12]
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	431a      	orrs	r2, r3
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	430a      	orrs	r2, r1
 800557c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800557e:	68f8      	ldr	r0, [r7, #12]
 8005580:	f000 f9a4 	bl	80058cc <RTC_ExitInitMode>
 8005584:	4603      	mov	r3, r0
 8005586:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005588:	7cfb      	ldrb	r3, [r7, #19]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d102      	bne.n	8005594 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2201      	movs	r2, #1
 8005592:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	22ff      	movs	r2, #255	; 0xff
 800559a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	771a      	strb	r2, [r3, #28]

  return status;
 80055a2:	7cfb      	ldrb	r3, [r7, #19]
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	371c      	adds	r7, #28
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd90      	pop	{r4, r7, pc}

080055ac <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b086      	sub	sp, #24
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80055b8:	2300      	movs	r3, #0
 80055ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80055de:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80055e2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	0c1b      	lsrs	r3, r3, #16
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055ee:	b2da      	uxtb	r2, r3
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	0a1b      	lsrs	r3, r3, #8
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055fe:	b2da      	uxtb	r2, r3
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	b2db      	uxtb	r3, r3
 8005608:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800560c:	b2da      	uxtb	r2, r3
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	0d9b      	lsrs	r3, r3, #22
 8005616:	b2db      	uxtb	r3, r3
 8005618:	f003 0301 	and.w	r3, r3, #1
 800561c:	b2da      	uxtb	r2, r3
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d11a      	bne.n	800565e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	4618      	mov	r0, r3
 800562e:	f000 f98f 	bl	8005950 <RTC_Bcd2ToByte>
 8005632:	4603      	mov	r3, r0
 8005634:	461a      	mov	r2, r3
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	785b      	ldrb	r3, [r3, #1]
 800563e:	4618      	mov	r0, r3
 8005640:	f000 f986 	bl	8005950 <RTC_Bcd2ToByte>
 8005644:	4603      	mov	r3, r0
 8005646:	461a      	mov	r2, r3
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	789b      	ldrb	r3, [r3, #2]
 8005650:	4618      	mov	r0, r3
 8005652:	f000 f97d 	bl	8005950 <RTC_Bcd2ToByte>
 8005656:	4603      	mov	r3, r0
 8005658:	461a      	mov	r2, r3
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3718      	adds	r7, #24
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005668:	b590      	push	{r4, r7, lr}
 800566a:	b087      	sub	sp, #28
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005674:	2300      	movs	r3, #0
 8005676:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	7f1b      	ldrb	r3, [r3, #28]
 800567c:	2b01      	cmp	r3, #1
 800567e:	d101      	bne.n	8005684 <HAL_RTC_SetDate+0x1c>
 8005680:	2302      	movs	r3, #2
 8005682:	e071      	b.n	8005768 <HAL_RTC_SetDate+0x100>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2201      	movs	r2, #1
 8005688:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2202      	movs	r2, #2
 800568e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d10e      	bne.n	80056b4 <HAL_RTC_SetDate+0x4c>
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	785b      	ldrb	r3, [r3, #1]
 800569a:	f003 0310 	and.w	r3, r3, #16
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d008      	beq.n	80056b4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	785b      	ldrb	r3, [r3, #1]
 80056a6:	f023 0310 	bic.w	r3, r3, #16
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	330a      	adds	r3, #10
 80056ae:	b2da      	uxtb	r2, r3
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d11c      	bne.n	80056f4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	78db      	ldrb	r3, [r3, #3]
 80056be:	4618      	mov	r0, r3
 80056c0:	f000 f929 	bl	8005916 <RTC_ByteToBcd2>
 80056c4:	4603      	mov	r3, r0
 80056c6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	785b      	ldrb	r3, [r3, #1]
 80056cc:	4618      	mov	r0, r3
 80056ce:	f000 f922 	bl	8005916 <RTC_ByteToBcd2>
 80056d2:	4603      	mov	r3, r0
 80056d4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80056d6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	789b      	ldrb	r3, [r3, #2]
 80056dc:	4618      	mov	r0, r3
 80056de:	f000 f91a 	bl	8005916 <RTC_ByteToBcd2>
 80056e2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80056e4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80056ee:	4313      	orrs	r3, r2
 80056f0:	617b      	str	r3, [r7, #20]
 80056f2:	e00e      	b.n	8005712 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	78db      	ldrb	r3, [r3, #3]
 80056f8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	785b      	ldrb	r3, [r3, #1]
 80056fe:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005700:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005702:	68ba      	ldr	r2, [r7, #8]
 8005704:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005706:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800570e:	4313      	orrs	r3, r2
 8005710:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	22ca      	movs	r2, #202	; 0xca
 8005718:	625a      	str	r2, [r3, #36]	; 0x24
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2253      	movs	r2, #83	; 0x53
 8005720:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f000 f89b 	bl	800585e <RTC_EnterInitMode>
 8005728:	4603      	mov	r3, r0
 800572a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800572c:	7cfb      	ldrb	r3, [r7, #19]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d10c      	bne.n	800574c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800573c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005740:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005742:	68f8      	ldr	r0, [r7, #12]
 8005744:	f000 f8c2 	bl	80058cc <RTC_ExitInitMode>
 8005748:	4603      	mov	r3, r0
 800574a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800574c:	7cfb      	ldrb	r3, [r7, #19]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d102      	bne.n	8005758 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2201      	movs	r2, #1
 8005756:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	22ff      	movs	r2, #255	; 0xff
 800575e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2200      	movs	r2, #0
 8005764:	771a      	strb	r2, [r3, #28]

  return status;
 8005766:	7cfb      	ldrb	r3, [r7, #19]
}
 8005768:	4618      	mov	r0, r3
 800576a:	371c      	adds	r7, #28
 800576c:	46bd      	mov	sp, r7
 800576e:	bd90      	pop	{r4, r7, pc}

08005770 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800577c:	2300      	movs	r3, #0
 800577e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800578a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800578e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	0c1b      	lsrs	r3, r3, #16
 8005794:	b2da      	uxtb	r2, r3
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	0a1b      	lsrs	r3, r3, #8
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	f003 031f 	and.w	r3, r3, #31
 80057a4:	b2da      	uxtb	r2, r3
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057b2:	b2da      	uxtb	r2, r3
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	0b5b      	lsrs	r3, r3, #13
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	f003 0307 	and.w	r3, r3, #7
 80057c2:	b2da      	uxtb	r2, r3
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d11a      	bne.n	8005804 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	78db      	ldrb	r3, [r3, #3]
 80057d2:	4618      	mov	r0, r3
 80057d4:	f000 f8bc 	bl	8005950 <RTC_Bcd2ToByte>
 80057d8:	4603      	mov	r3, r0
 80057da:	461a      	mov	r2, r3
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	785b      	ldrb	r3, [r3, #1]
 80057e4:	4618      	mov	r0, r3
 80057e6:	f000 f8b3 	bl	8005950 <RTC_Bcd2ToByte>
 80057ea:	4603      	mov	r3, r0
 80057ec:	461a      	mov	r2, r3
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	789b      	ldrb	r3, [r3, #2]
 80057f6:	4618      	mov	r0, r3
 80057f8:	f000 f8aa 	bl	8005950 <RTC_Bcd2ToByte>
 80057fc:	4603      	mov	r3, r0
 80057fe:	461a      	mov	r2, r3
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3718      	adds	r7, #24
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}

0800580e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800580e:	b580      	push	{r7, lr}
 8005810:	b084      	sub	sp, #16
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005816:	2300      	movs	r3, #0
 8005818:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68da      	ldr	r2, [r3, #12]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005828:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800582a:	f7fe f887 	bl	800393c <HAL_GetTick>
 800582e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005830:	e009      	b.n	8005846 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005832:	f7fe f883 	bl	800393c <HAL_GetTick>
 8005836:	4602      	mov	r2, r0
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005840:	d901      	bls.n	8005846 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e007      	b.n	8005856 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	f003 0320 	and.w	r3, r3, #32
 8005850:	2b00      	cmp	r3, #0
 8005852:	d0ee      	beq.n	8005832 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3710      	adds	r7, #16
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800585e:	b580      	push	{r7, lr}
 8005860:	b084      	sub	sp, #16
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005866:	2300      	movs	r3, #0
 8005868:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800586a:	2300      	movs	r3, #0
 800586c:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005878:	2b00      	cmp	r3, #0
 800587a:	d122      	bne.n	80058c2 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68da      	ldr	r2, [r3, #12]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800588a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800588c:	f7fe f856 	bl	800393c <HAL_GetTick>
 8005890:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005892:	e00c      	b.n	80058ae <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005894:	f7fe f852 	bl	800393c <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058a2:	d904      	bls.n	80058ae <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2204      	movs	r2, #4
 80058a8:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d102      	bne.n	80058c2 <RTC_EnterInitMode+0x64>
 80058bc:	7bfb      	ldrb	r3, [r7, #15]
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d1e8      	bne.n	8005894 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80058c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3710      	adds	r7, #16
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058d4:	2300      	movs	r3, #0
 80058d6:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68da      	ldr	r2, [r3, #12]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058e6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f003 0320 	and.w	r3, r3, #32
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d10a      	bne.n	800590c <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f7ff ff89 	bl	800580e <HAL_RTC_WaitForSynchro>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d004      	beq.n	800590c <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2204      	movs	r2, #4
 8005906:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800590c:	7bfb      	ldrb	r3, [r7, #15]
}
 800590e:	4618      	mov	r0, r3
 8005910:	3710      	adds	r7, #16
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}

08005916 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005916:	b480      	push	{r7}
 8005918:	b085      	sub	sp, #20
 800591a:	af00      	add	r7, sp, #0
 800591c:	4603      	mov	r3, r0
 800591e:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8005920:	2300      	movs	r3, #0
 8005922:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8005924:	e005      	b.n	8005932 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005926:	7bfb      	ldrb	r3, [r7, #15]
 8005928:	3301      	adds	r3, #1
 800592a:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800592c:	79fb      	ldrb	r3, [r7, #7]
 800592e:	3b0a      	subs	r3, #10
 8005930:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005932:	79fb      	ldrb	r3, [r7, #7]
 8005934:	2b09      	cmp	r3, #9
 8005936:	d8f6      	bhi.n	8005926 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005938:	7bfb      	ldrb	r3, [r7, #15]
 800593a:	011b      	lsls	r3, r3, #4
 800593c:	b2da      	uxtb	r2, r3
 800593e:	79fb      	ldrb	r3, [r7, #7]
 8005940:	4313      	orrs	r3, r2
 8005942:	b2db      	uxtb	r3, r3
}
 8005944:	4618      	mov	r0, r3
 8005946:	3714      	adds	r7, #20
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
 8005956:	4603      	mov	r3, r0
 8005958:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800595a:	2300      	movs	r3, #0
 800595c:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800595e:	79fb      	ldrb	r3, [r7, #7]
 8005960:	091b      	lsrs	r3, r3, #4
 8005962:	b2db      	uxtb	r3, r3
 8005964:	461a      	mov	r2, r3
 8005966:	0092      	lsls	r2, r2, #2
 8005968:	4413      	add	r3, r2
 800596a:	005b      	lsls	r3, r3, #1
 800596c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800596e:	79fb      	ldrb	r3, [r7, #7]
 8005970:	f003 030f 	and.w	r3, r3, #15
 8005974:	b2da      	uxtb	r2, r3
 8005976:	7bfb      	ldrb	r3, [r7, #15]
 8005978:	4413      	add	r3, r2
 800597a:	b2db      	uxtb	r3, r3
}
 800597c:	4618      	mov	r0, r3
 800597e:	3714      	adds	r7, #20
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d101      	bne.n	800599a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e041      	b.n	8005a1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d106      	bne.n	80059b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f7fd fc7c 	bl	80032ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2202      	movs	r2, #2
 80059b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	3304      	adds	r3, #4
 80059c4:	4619      	mov	r1, r3
 80059c6:	4610      	mov	r0, r2
 80059c8:	f000 fc34 	bl	8006234 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3708      	adds	r7, #8
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}

08005a26 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b082      	sub	sp, #8
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d101      	bne.n	8005a38 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e041      	b.n	8005abc <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d106      	bne.n	8005a52 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 f839 	bl	8005ac4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2202      	movs	r2, #2
 8005a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	3304      	adds	r3, #4
 8005a62:	4619      	mov	r1, r3
 8005a64:	4610      	mov	r0, r2
 8005a66:	f000 fbe5 	bl	8006234 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2201      	movs	r2, #1
 8005a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2201      	movs	r2, #1
 8005a86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3708      	adds	r7, #8
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005acc:	bf00      	nop
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d104      	bne.n	8005af6 <HAL_TIM_IC_Start_IT+0x1e>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	e013      	b.n	8005b1e <HAL_TIM_IC_Start_IT+0x46>
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	2b04      	cmp	r3, #4
 8005afa:	d104      	bne.n	8005b06 <HAL_TIM_IC_Start_IT+0x2e>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	e00b      	b.n	8005b1e <HAL_TIM_IC_Start_IT+0x46>
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	2b08      	cmp	r3, #8
 8005b0a:	d104      	bne.n	8005b16 <HAL_TIM_IC_Start_IT+0x3e>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	e003      	b.n	8005b1e <HAL_TIM_IC_Start_IT+0x46>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d104      	bne.n	8005b30 <HAL_TIM_IC_Start_IT+0x58>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	e013      	b.n	8005b58 <HAL_TIM_IC_Start_IT+0x80>
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	2b04      	cmp	r3, #4
 8005b34:	d104      	bne.n	8005b40 <HAL_TIM_IC_Start_IT+0x68>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	e00b      	b.n	8005b58 <HAL_TIM_IC_Start_IT+0x80>
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	2b08      	cmp	r3, #8
 8005b44:	d104      	bne.n	8005b50 <HAL_TIM_IC_Start_IT+0x78>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	e003      	b.n	8005b58 <HAL_TIM_IC_Start_IT+0x80>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b5a:	7bbb      	ldrb	r3, [r7, #14]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d102      	bne.n	8005b66 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b60:	7b7b      	ldrb	r3, [r7, #13]
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d001      	beq.n	8005b6a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e0c2      	b.n	8005cf0 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d104      	bne.n	8005b7a <HAL_TIM_IC_Start_IT+0xa2>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2202      	movs	r2, #2
 8005b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b78:	e013      	b.n	8005ba2 <HAL_TIM_IC_Start_IT+0xca>
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	2b04      	cmp	r3, #4
 8005b7e:	d104      	bne.n	8005b8a <HAL_TIM_IC_Start_IT+0xb2>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2202      	movs	r2, #2
 8005b84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b88:	e00b      	b.n	8005ba2 <HAL_TIM_IC_Start_IT+0xca>
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	2b08      	cmp	r3, #8
 8005b8e:	d104      	bne.n	8005b9a <HAL_TIM_IC_Start_IT+0xc2>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2202      	movs	r2, #2
 8005b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b98:	e003      	b.n	8005ba2 <HAL_TIM_IC_Start_IT+0xca>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2202      	movs	r2, #2
 8005b9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d104      	bne.n	8005bb2 <HAL_TIM_IC_Start_IT+0xda>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2202      	movs	r2, #2
 8005bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bb0:	e013      	b.n	8005bda <HAL_TIM_IC_Start_IT+0x102>
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	2b04      	cmp	r3, #4
 8005bb6:	d104      	bne.n	8005bc2 <HAL_TIM_IC_Start_IT+0xea>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2202      	movs	r2, #2
 8005bbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005bc0:	e00b      	b.n	8005bda <HAL_TIM_IC_Start_IT+0x102>
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	2b08      	cmp	r3, #8
 8005bc6:	d104      	bne.n	8005bd2 <HAL_TIM_IC_Start_IT+0xfa>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2202      	movs	r2, #2
 8005bcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bd0:	e003      	b.n	8005bda <HAL_TIM_IC_Start_IT+0x102>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2202      	movs	r2, #2
 8005bd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	2b0c      	cmp	r3, #12
 8005bde:	d841      	bhi.n	8005c64 <HAL_TIM_IC_Start_IT+0x18c>
 8005be0:	a201      	add	r2, pc, #4	; (adr r2, 8005be8 <HAL_TIM_IC_Start_IT+0x110>)
 8005be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be6:	bf00      	nop
 8005be8:	08005c1d 	.word	0x08005c1d
 8005bec:	08005c65 	.word	0x08005c65
 8005bf0:	08005c65 	.word	0x08005c65
 8005bf4:	08005c65 	.word	0x08005c65
 8005bf8:	08005c2f 	.word	0x08005c2f
 8005bfc:	08005c65 	.word	0x08005c65
 8005c00:	08005c65 	.word	0x08005c65
 8005c04:	08005c65 	.word	0x08005c65
 8005c08:	08005c41 	.word	0x08005c41
 8005c0c:	08005c65 	.word	0x08005c65
 8005c10:	08005c65 	.word	0x08005c65
 8005c14:	08005c65 	.word	0x08005c65
 8005c18:	08005c53 	.word	0x08005c53
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68da      	ldr	r2, [r3, #12]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f042 0202 	orr.w	r2, r2, #2
 8005c2a:	60da      	str	r2, [r3, #12]
      break;
 8005c2c:	e01d      	b.n	8005c6a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68da      	ldr	r2, [r3, #12]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f042 0204 	orr.w	r2, r2, #4
 8005c3c:	60da      	str	r2, [r3, #12]
      break;
 8005c3e:	e014      	b.n	8005c6a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68da      	ldr	r2, [r3, #12]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f042 0208 	orr.w	r2, r2, #8
 8005c4e:	60da      	str	r2, [r3, #12]
      break;
 8005c50:	e00b      	b.n	8005c6a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68da      	ldr	r2, [r3, #12]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f042 0210 	orr.w	r2, r2, #16
 8005c60:	60da      	str	r2, [r3, #12]
      break;
 8005c62:	e002      	b.n	8005c6a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	73fb      	strb	r3, [r7, #15]
      break;
 8005c68:	bf00      	nop
  }

  if (status == HAL_OK)
 8005c6a:	7bfb      	ldrb	r3, [r7, #15]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d13e      	bne.n	8005cee <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2201      	movs	r2, #1
 8005c76:	6839      	ldr	r1, [r7, #0]
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f000 fd13 	bl	80066a4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a1d      	ldr	r2, [pc, #116]	; (8005cf8 <HAL_TIM_IC_Start_IT+0x220>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d018      	beq.n	8005cba <HAL_TIM_IC_Start_IT+0x1e2>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c90:	d013      	beq.n	8005cba <HAL_TIM_IC_Start_IT+0x1e2>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a19      	ldr	r2, [pc, #100]	; (8005cfc <HAL_TIM_IC_Start_IT+0x224>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d00e      	beq.n	8005cba <HAL_TIM_IC_Start_IT+0x1e2>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a17      	ldr	r2, [pc, #92]	; (8005d00 <HAL_TIM_IC_Start_IT+0x228>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d009      	beq.n	8005cba <HAL_TIM_IC_Start_IT+0x1e2>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a16      	ldr	r2, [pc, #88]	; (8005d04 <HAL_TIM_IC_Start_IT+0x22c>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d004      	beq.n	8005cba <HAL_TIM_IC_Start_IT+0x1e2>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a14      	ldr	r2, [pc, #80]	; (8005d08 <HAL_TIM_IC_Start_IT+0x230>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d111      	bne.n	8005cde <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	f003 0307 	and.w	r3, r3, #7
 8005cc4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	2b06      	cmp	r3, #6
 8005cca:	d010      	beq.n	8005cee <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f042 0201 	orr.w	r2, r2, #1
 8005cda:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cdc:	e007      	b.n	8005cee <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f042 0201 	orr.w	r2, r2, #1
 8005cec:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3710      	adds	r7, #16
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	40010000 	.word	0x40010000
 8005cfc:	40000400 	.word	0x40000400
 8005d00:	40000800 	.word	0x40000800
 8005d04:	40000c00 	.word	0x40000c00
 8005d08:	40014000 	.word	0x40014000

08005d0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	f003 0302 	and.w	r3, r3, #2
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	d122      	bne.n	8005d68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	f003 0302 	and.w	r3, r3, #2
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d11b      	bne.n	8005d68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f06f 0202 	mvn.w	r2, #2
 8005d38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	699b      	ldr	r3, [r3, #24]
 8005d46:	f003 0303 	and.w	r3, r3, #3
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d003      	beq.n	8005d56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f7fb fc40 	bl	80015d4 <HAL_TIM_IC_CaptureCallback>
 8005d54:	e005      	b.n	8005d62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 fa4d 	bl	80061f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f000 fa54 	bl	800620a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	f003 0304 	and.w	r3, r3, #4
 8005d72:	2b04      	cmp	r3, #4
 8005d74:	d122      	bne.n	8005dbc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	f003 0304 	and.w	r3, r3, #4
 8005d80:	2b04      	cmp	r3, #4
 8005d82:	d11b      	bne.n	8005dbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f06f 0204 	mvn.w	r2, #4
 8005d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2202      	movs	r2, #2
 8005d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d003      	beq.n	8005daa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f7fb fc16 	bl	80015d4 <HAL_TIM_IC_CaptureCallback>
 8005da8:	e005      	b.n	8005db6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 fa23 	bl	80061f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f000 fa2a 	bl	800620a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	f003 0308 	and.w	r3, r3, #8
 8005dc6:	2b08      	cmp	r3, #8
 8005dc8:	d122      	bne.n	8005e10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	f003 0308 	and.w	r3, r3, #8
 8005dd4:	2b08      	cmp	r3, #8
 8005dd6:	d11b      	bne.n	8005e10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f06f 0208 	mvn.w	r2, #8
 8005de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2204      	movs	r2, #4
 8005de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	69db      	ldr	r3, [r3, #28]
 8005dee:	f003 0303 	and.w	r3, r3, #3
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d003      	beq.n	8005dfe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f7fb fbec 	bl	80015d4 <HAL_TIM_IC_CaptureCallback>
 8005dfc:	e005      	b.n	8005e0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 f9f9 	bl	80061f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 fa00 	bl	800620a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	f003 0310 	and.w	r3, r3, #16
 8005e1a:	2b10      	cmp	r3, #16
 8005e1c:	d122      	bne.n	8005e64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	f003 0310 	and.w	r3, r3, #16
 8005e28:	2b10      	cmp	r3, #16
 8005e2a:	d11b      	bne.n	8005e64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f06f 0210 	mvn.w	r2, #16
 8005e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2208      	movs	r2, #8
 8005e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	69db      	ldr	r3, [r3, #28]
 8005e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d003      	beq.n	8005e52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f7fb fbc2 	bl	80015d4 <HAL_TIM_IC_CaptureCallback>
 8005e50:	e005      	b.n	8005e5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 f9cf 	bl	80061f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 f9d6 	bl	800620a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	f003 0301 	and.w	r3, r3, #1
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d10e      	bne.n	8005e90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	f003 0301 	and.w	r3, r3, #1
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d107      	bne.n	8005e90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f06f 0201 	mvn.w	r2, #1
 8005e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 f9a9 	bl	80061e2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e9a:	2b80      	cmp	r3, #128	; 0x80
 8005e9c:	d10e      	bne.n	8005ebc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ea8:	2b80      	cmp	r3, #128	; 0x80
 8005eaa:	d107      	bne.n	8005ebc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 fc92 	bl	80067e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec6:	2b40      	cmp	r3, #64	; 0x40
 8005ec8:	d10e      	bne.n	8005ee8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed4:	2b40      	cmp	r3, #64	; 0x40
 8005ed6:	d107      	bne.n	8005ee8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 f99b 	bl	800621e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	f003 0320 	and.w	r3, r3, #32
 8005ef2:	2b20      	cmp	r3, #32
 8005ef4:	d10e      	bne.n	8005f14 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	f003 0320 	and.w	r3, r3, #32
 8005f00:	2b20      	cmp	r3, #32
 8005f02:	d107      	bne.n	8005f14 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f06f 0220 	mvn.w	r2, #32
 8005f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 fc5c 	bl	80067cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f14:	bf00      	nop
 8005f16:	3708      	adds	r7, #8
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b086      	sub	sp, #24
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d101      	bne.n	8005f3a <HAL_TIM_IC_ConfigChannel+0x1e>
 8005f36:	2302      	movs	r3, #2
 8005f38:	e088      	b.n	800604c <HAL_TIM_IC_ConfigChannel+0x130>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d11b      	bne.n	8005f80 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6818      	ldr	r0, [r3, #0]
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	6819      	ldr	r1, [r3, #0]
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	685a      	ldr	r2, [r3, #4]
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	f000 f9ec 	bl	8006334 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	699a      	ldr	r2, [r3, #24]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f022 020c 	bic.w	r2, r2, #12
 8005f6a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	6999      	ldr	r1, [r3, #24]
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	689a      	ldr	r2, [r3, #8]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	430a      	orrs	r2, r1
 8005f7c:	619a      	str	r2, [r3, #24]
 8005f7e:	e060      	b.n	8006042 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2b04      	cmp	r3, #4
 8005f84:	d11c      	bne.n	8005fc0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6818      	ldr	r0, [r3, #0]
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	6819      	ldr	r1, [r3, #0]
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	685a      	ldr	r2, [r3, #4]
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	f000 fa64 	bl	8006462 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	699a      	ldr	r2, [r3, #24]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005fa8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	6999      	ldr	r1, [r3, #24]
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	021a      	lsls	r2, r3, #8
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	430a      	orrs	r2, r1
 8005fbc:	619a      	str	r2, [r3, #24]
 8005fbe:	e040      	b.n	8006042 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2b08      	cmp	r3, #8
 8005fc4:	d11b      	bne.n	8005ffe <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6818      	ldr	r0, [r3, #0]
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	6819      	ldr	r1, [r3, #0]
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	685a      	ldr	r2, [r3, #4]
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	f000 fab1 	bl	800653c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	69da      	ldr	r2, [r3, #28]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f022 020c 	bic.w	r2, r2, #12
 8005fe8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	69d9      	ldr	r1, [r3, #28]
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	689a      	ldr	r2, [r3, #8]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	430a      	orrs	r2, r1
 8005ffa:	61da      	str	r2, [r3, #28]
 8005ffc:	e021      	b.n	8006042 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2b0c      	cmp	r3, #12
 8006002:	d11c      	bne.n	800603e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6818      	ldr	r0, [r3, #0]
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	6819      	ldr	r1, [r3, #0]
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	685a      	ldr	r2, [r3, #4]
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	f000 face 	bl	80065b4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	69da      	ldr	r2, [r3, #28]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006026:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	69d9      	ldr	r1, [r3, #28]
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	021a      	lsls	r2, r3, #8
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	430a      	orrs	r2, r1
 800603a:	61da      	str	r2, [r3, #28]
 800603c:	e001      	b.n	8006042 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800604a:	7dfb      	ldrb	r3, [r7, #23]
}
 800604c:	4618      	mov	r0, r3
 800604e:	3718      	adds	r7, #24
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800605e:	2300      	movs	r3, #0
 8006060:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006068:	2b01      	cmp	r3, #1
 800606a:	d101      	bne.n	8006070 <HAL_TIM_ConfigClockSource+0x1c>
 800606c:	2302      	movs	r3, #2
 800606e:	e0b4      	b.n	80061da <HAL_TIM_ConfigClockSource+0x186>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2202      	movs	r2, #2
 800607c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800608e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006096:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	68ba      	ldr	r2, [r7, #8]
 800609e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060a8:	d03e      	beq.n	8006128 <HAL_TIM_ConfigClockSource+0xd4>
 80060aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060ae:	f200 8087 	bhi.w	80061c0 <HAL_TIM_ConfigClockSource+0x16c>
 80060b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060b6:	f000 8086 	beq.w	80061c6 <HAL_TIM_ConfigClockSource+0x172>
 80060ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060be:	d87f      	bhi.n	80061c0 <HAL_TIM_ConfigClockSource+0x16c>
 80060c0:	2b70      	cmp	r3, #112	; 0x70
 80060c2:	d01a      	beq.n	80060fa <HAL_TIM_ConfigClockSource+0xa6>
 80060c4:	2b70      	cmp	r3, #112	; 0x70
 80060c6:	d87b      	bhi.n	80061c0 <HAL_TIM_ConfigClockSource+0x16c>
 80060c8:	2b60      	cmp	r3, #96	; 0x60
 80060ca:	d050      	beq.n	800616e <HAL_TIM_ConfigClockSource+0x11a>
 80060cc:	2b60      	cmp	r3, #96	; 0x60
 80060ce:	d877      	bhi.n	80061c0 <HAL_TIM_ConfigClockSource+0x16c>
 80060d0:	2b50      	cmp	r3, #80	; 0x50
 80060d2:	d03c      	beq.n	800614e <HAL_TIM_ConfigClockSource+0xfa>
 80060d4:	2b50      	cmp	r3, #80	; 0x50
 80060d6:	d873      	bhi.n	80061c0 <HAL_TIM_ConfigClockSource+0x16c>
 80060d8:	2b40      	cmp	r3, #64	; 0x40
 80060da:	d058      	beq.n	800618e <HAL_TIM_ConfigClockSource+0x13a>
 80060dc:	2b40      	cmp	r3, #64	; 0x40
 80060de:	d86f      	bhi.n	80061c0 <HAL_TIM_ConfigClockSource+0x16c>
 80060e0:	2b30      	cmp	r3, #48	; 0x30
 80060e2:	d064      	beq.n	80061ae <HAL_TIM_ConfigClockSource+0x15a>
 80060e4:	2b30      	cmp	r3, #48	; 0x30
 80060e6:	d86b      	bhi.n	80061c0 <HAL_TIM_ConfigClockSource+0x16c>
 80060e8:	2b20      	cmp	r3, #32
 80060ea:	d060      	beq.n	80061ae <HAL_TIM_ConfigClockSource+0x15a>
 80060ec:	2b20      	cmp	r3, #32
 80060ee:	d867      	bhi.n	80061c0 <HAL_TIM_ConfigClockSource+0x16c>
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d05c      	beq.n	80061ae <HAL_TIM_ConfigClockSource+0x15a>
 80060f4:	2b10      	cmp	r3, #16
 80060f6:	d05a      	beq.n	80061ae <HAL_TIM_ConfigClockSource+0x15a>
 80060f8:	e062      	b.n	80061c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6818      	ldr	r0, [r3, #0]
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	6899      	ldr	r1, [r3, #8]
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	685a      	ldr	r2, [r3, #4]
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	f000 faab 	bl	8006664 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800611c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68ba      	ldr	r2, [r7, #8]
 8006124:	609a      	str	r2, [r3, #8]
      break;
 8006126:	e04f      	b.n	80061c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6818      	ldr	r0, [r3, #0]
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	6899      	ldr	r1, [r3, #8]
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	685a      	ldr	r2, [r3, #4]
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	f000 fa94 	bl	8006664 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	689a      	ldr	r2, [r3, #8]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800614a:	609a      	str	r2, [r3, #8]
      break;
 800614c:	e03c      	b.n	80061c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6818      	ldr	r0, [r3, #0]
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	6859      	ldr	r1, [r3, #4]
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	461a      	mov	r2, r3
 800615c:	f000 f952 	bl	8006404 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2150      	movs	r1, #80	; 0x50
 8006166:	4618      	mov	r0, r3
 8006168:	f000 fa61 	bl	800662e <TIM_ITRx_SetConfig>
      break;
 800616c:	e02c      	b.n	80061c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6818      	ldr	r0, [r3, #0]
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	6859      	ldr	r1, [r3, #4]
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	461a      	mov	r2, r3
 800617c:	f000 f9ae 	bl	80064dc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2160      	movs	r1, #96	; 0x60
 8006186:	4618      	mov	r0, r3
 8006188:	f000 fa51 	bl	800662e <TIM_ITRx_SetConfig>
      break;
 800618c:	e01c      	b.n	80061c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6818      	ldr	r0, [r3, #0]
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	6859      	ldr	r1, [r3, #4]
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	461a      	mov	r2, r3
 800619c:	f000 f932 	bl	8006404 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2140      	movs	r1, #64	; 0x40
 80061a6:	4618      	mov	r0, r3
 80061a8:	f000 fa41 	bl	800662e <TIM_ITRx_SetConfig>
      break;
 80061ac:	e00c      	b.n	80061c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4619      	mov	r1, r3
 80061b8:	4610      	mov	r0, r2
 80061ba:	f000 fa38 	bl	800662e <TIM_ITRx_SetConfig>
      break;
 80061be:	e003      	b.n	80061c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	73fb      	strb	r3, [r7, #15]
      break;
 80061c4:	e000      	b.n	80061c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80061c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80061d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3710      	adds	r7, #16
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}

080061e2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061e2:	b480      	push	{r7}
 80061e4:	b083      	sub	sp, #12
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80061ea:	bf00      	nop
 80061ec:	370c      	adds	r7, #12
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr

080061f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061f6:	b480      	push	{r7}
 80061f8:	b083      	sub	sp, #12
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061fe:	bf00      	nop
 8006200:	370c      	adds	r7, #12
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr

0800620a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800620a:	b480      	push	{r7}
 800620c:	b083      	sub	sp, #12
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006212:	bf00      	nop
 8006214:	370c      	adds	r7, #12
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr

0800621e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800621e:	b480      	push	{r7}
 8006220:	b083      	sub	sp, #12
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006226:	bf00      	nop
 8006228:	370c      	adds	r7, #12
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
	...

08006234 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006234:	b480      	push	{r7}
 8006236:	b085      	sub	sp, #20
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a34      	ldr	r2, [pc, #208]	; (8006318 <TIM_Base_SetConfig+0xe4>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d00f      	beq.n	800626c <TIM_Base_SetConfig+0x38>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006252:	d00b      	beq.n	800626c <TIM_Base_SetConfig+0x38>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a31      	ldr	r2, [pc, #196]	; (800631c <TIM_Base_SetConfig+0xe8>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d007      	beq.n	800626c <TIM_Base_SetConfig+0x38>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4a30      	ldr	r2, [pc, #192]	; (8006320 <TIM_Base_SetConfig+0xec>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d003      	beq.n	800626c <TIM_Base_SetConfig+0x38>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a2f      	ldr	r2, [pc, #188]	; (8006324 <TIM_Base_SetConfig+0xf0>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d108      	bne.n	800627e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006272:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	4313      	orrs	r3, r2
 800627c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a25      	ldr	r2, [pc, #148]	; (8006318 <TIM_Base_SetConfig+0xe4>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d01b      	beq.n	80062be <TIM_Base_SetConfig+0x8a>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800628c:	d017      	beq.n	80062be <TIM_Base_SetConfig+0x8a>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a22      	ldr	r2, [pc, #136]	; (800631c <TIM_Base_SetConfig+0xe8>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d013      	beq.n	80062be <TIM_Base_SetConfig+0x8a>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a21      	ldr	r2, [pc, #132]	; (8006320 <TIM_Base_SetConfig+0xec>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d00f      	beq.n	80062be <TIM_Base_SetConfig+0x8a>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a20      	ldr	r2, [pc, #128]	; (8006324 <TIM_Base_SetConfig+0xf0>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d00b      	beq.n	80062be <TIM_Base_SetConfig+0x8a>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a1f      	ldr	r2, [pc, #124]	; (8006328 <TIM_Base_SetConfig+0xf4>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d007      	beq.n	80062be <TIM_Base_SetConfig+0x8a>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a1e      	ldr	r2, [pc, #120]	; (800632c <TIM_Base_SetConfig+0xf8>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d003      	beq.n	80062be <TIM_Base_SetConfig+0x8a>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a1d      	ldr	r2, [pc, #116]	; (8006330 <TIM_Base_SetConfig+0xfc>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d108      	bne.n	80062d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	695b      	ldr	r3, [r3, #20]
 80062da:	4313      	orrs	r3, r2
 80062dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	689a      	ldr	r2, [r3, #8]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a08      	ldr	r2, [pc, #32]	; (8006318 <TIM_Base_SetConfig+0xe4>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d103      	bne.n	8006304 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	691a      	ldr	r2, [r3, #16]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	615a      	str	r2, [r3, #20]
}
 800630a:	bf00      	nop
 800630c:	3714      	adds	r7, #20
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	40010000 	.word	0x40010000
 800631c:	40000400 	.word	0x40000400
 8006320:	40000800 	.word	0x40000800
 8006324:	40000c00 	.word	0x40000c00
 8006328:	40014000 	.word	0x40014000
 800632c:	40014400 	.word	0x40014400
 8006330:	40014800 	.word	0x40014800

08006334 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006334:	b480      	push	{r7}
 8006336:	b087      	sub	sp, #28
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	607a      	str	r2, [r7, #4]
 8006340:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6a1b      	ldr	r3, [r3, #32]
 8006346:	f023 0201 	bic.w	r2, r3, #1
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	699b      	ldr	r3, [r3, #24]
 8006352:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6a1b      	ldr	r3, [r3, #32]
 8006358:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	4a24      	ldr	r2, [pc, #144]	; (80063f0 <TIM_TI1_SetConfig+0xbc>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d013      	beq.n	800638a <TIM_TI1_SetConfig+0x56>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006368:	d00f      	beq.n	800638a <TIM_TI1_SetConfig+0x56>
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	4a21      	ldr	r2, [pc, #132]	; (80063f4 <TIM_TI1_SetConfig+0xc0>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d00b      	beq.n	800638a <TIM_TI1_SetConfig+0x56>
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	4a20      	ldr	r2, [pc, #128]	; (80063f8 <TIM_TI1_SetConfig+0xc4>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d007      	beq.n	800638a <TIM_TI1_SetConfig+0x56>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	4a1f      	ldr	r2, [pc, #124]	; (80063fc <TIM_TI1_SetConfig+0xc8>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d003      	beq.n	800638a <TIM_TI1_SetConfig+0x56>
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	4a1e      	ldr	r2, [pc, #120]	; (8006400 <TIM_TI1_SetConfig+0xcc>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d101      	bne.n	800638e <TIM_TI1_SetConfig+0x5a>
 800638a:	2301      	movs	r3, #1
 800638c:	e000      	b.n	8006390 <TIM_TI1_SetConfig+0x5c>
 800638e:	2300      	movs	r3, #0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d008      	beq.n	80063a6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	f023 0303 	bic.w	r3, r3, #3
 800639a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800639c:	697a      	ldr	r2, [r7, #20]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	617b      	str	r3, [r7, #20]
 80063a4:	e003      	b.n	80063ae <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	f043 0301 	orr.w	r3, r3, #1
 80063ac:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	011b      	lsls	r3, r3, #4
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	697a      	ldr	r2, [r7, #20]
 80063be:	4313      	orrs	r3, r2
 80063c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	f023 030a 	bic.w	r3, r3, #10
 80063c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	f003 030a 	and.w	r3, r3, #10
 80063d0:	693a      	ldr	r2, [r7, #16]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	697a      	ldr	r2, [r7, #20]
 80063da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	693a      	ldr	r2, [r7, #16]
 80063e0:	621a      	str	r2, [r3, #32]
}
 80063e2:	bf00      	nop
 80063e4:	371c      	adds	r7, #28
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr
 80063ee:	bf00      	nop
 80063f0:	40010000 	.word	0x40010000
 80063f4:	40000400 	.word	0x40000400
 80063f8:	40000800 	.word	0x40000800
 80063fc:	40000c00 	.word	0x40000c00
 8006400:	40014000 	.word	0x40014000

08006404 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006404:	b480      	push	{r7}
 8006406:	b087      	sub	sp, #28
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6a1b      	ldr	r3, [r3, #32]
 8006414:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6a1b      	ldr	r3, [r3, #32]
 800641a:	f023 0201 	bic.w	r2, r3, #1
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800642e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	011b      	lsls	r3, r3, #4
 8006434:	693a      	ldr	r2, [r7, #16]
 8006436:	4313      	orrs	r3, r2
 8006438:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	f023 030a 	bic.w	r3, r3, #10
 8006440:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006442:	697a      	ldr	r2, [r7, #20]
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	4313      	orrs	r3, r2
 8006448:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	621a      	str	r2, [r3, #32]
}
 8006456:	bf00      	nop
 8006458:	371c      	adds	r7, #28
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr

08006462 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006462:	b480      	push	{r7}
 8006464:	b087      	sub	sp, #28
 8006466:	af00      	add	r7, sp, #0
 8006468:	60f8      	str	r0, [r7, #12]
 800646a:	60b9      	str	r1, [r7, #8]
 800646c:	607a      	str	r2, [r7, #4]
 800646e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6a1b      	ldr	r3, [r3, #32]
 8006474:	f023 0210 	bic.w	r2, r3, #16
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	699b      	ldr	r3, [r3, #24]
 8006480:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6a1b      	ldr	r3, [r3, #32]
 8006486:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800648e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	021b      	lsls	r3, r3, #8
 8006494:	697a      	ldr	r2, [r7, #20]
 8006496:	4313      	orrs	r3, r2
 8006498:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	031b      	lsls	r3, r3, #12
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	697a      	ldr	r2, [r7, #20]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80064b4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	011b      	lsls	r3, r3, #4
 80064ba:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80064be:	693a      	ldr	r2, [r7, #16]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	697a      	ldr	r2, [r7, #20]
 80064c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	693a      	ldr	r2, [r7, #16]
 80064ce:	621a      	str	r2, [r3, #32]
}
 80064d0:	bf00      	nop
 80064d2:	371c      	adds	r7, #28
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064dc:	b480      	push	{r7}
 80064de:	b087      	sub	sp, #28
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6a1b      	ldr	r3, [r3, #32]
 80064ec:	f023 0210 	bic.w	r2, r3, #16
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	699b      	ldr	r3, [r3, #24]
 80064f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6a1b      	ldr	r3, [r3, #32]
 80064fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006506:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	031b      	lsls	r3, r3, #12
 800650c:	697a      	ldr	r2, [r7, #20]
 800650e:	4313      	orrs	r3, r2
 8006510:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006518:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	011b      	lsls	r3, r3, #4
 800651e:	693a      	ldr	r2, [r7, #16]
 8006520:	4313      	orrs	r3, r2
 8006522:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	693a      	ldr	r2, [r7, #16]
 800652e:	621a      	str	r2, [r3, #32]
}
 8006530:	bf00      	nop
 8006532:	371c      	adds	r7, #28
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800653c:	b480      	push	{r7}
 800653e:	b087      	sub	sp, #28
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	607a      	str	r2, [r7, #4]
 8006548:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6a1b      	ldr	r3, [r3, #32]
 800654e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	69db      	ldr	r3, [r3, #28]
 800655a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6a1b      	ldr	r3, [r3, #32]
 8006560:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	f023 0303 	bic.w	r3, r3, #3
 8006568:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4313      	orrs	r3, r2
 8006570:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006578:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	011b      	lsls	r3, r3, #4
 800657e:	b2db      	uxtb	r3, r3
 8006580:	697a      	ldr	r2, [r7, #20]
 8006582:	4313      	orrs	r3, r2
 8006584:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800658c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	021b      	lsls	r3, r3, #8
 8006592:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006596:	693a      	ldr	r2, [r7, #16]
 8006598:	4313      	orrs	r3, r2
 800659a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	697a      	ldr	r2, [r7, #20]
 80065a0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	693a      	ldr	r2, [r7, #16]
 80065a6:	621a      	str	r2, [r3, #32]
}
 80065a8:	bf00      	nop
 80065aa:	371c      	adds	r7, #28
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b087      	sub	sp, #28
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	607a      	str	r2, [r7, #4]
 80065c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6a1b      	ldr	r3, [r3, #32]
 80065c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	69db      	ldr	r3, [r3, #28]
 80065d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6a1b      	ldr	r3, [r3, #32]
 80065d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065e0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	021b      	lsls	r3, r3, #8
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065f2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	031b      	lsls	r3, r3, #12
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	697a      	ldr	r2, [r7, #20]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006606:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	031b      	lsls	r3, r3, #12
 800660c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006610:	693a      	ldr	r2, [r7, #16]
 8006612:	4313      	orrs	r3, r2
 8006614:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	697a      	ldr	r2, [r7, #20]
 800661a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	693a      	ldr	r2, [r7, #16]
 8006620:	621a      	str	r2, [r3, #32]
}
 8006622:	bf00      	nop
 8006624:	371c      	adds	r7, #28
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr

0800662e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800662e:	b480      	push	{r7}
 8006630:	b085      	sub	sp, #20
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
 8006636:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006644:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006646:	683a      	ldr	r2, [r7, #0]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	4313      	orrs	r3, r2
 800664c:	f043 0307 	orr.w	r3, r3, #7
 8006650:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	609a      	str	r2, [r3, #8]
}
 8006658:	bf00      	nop
 800665a:	3714      	adds	r7, #20
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006664:	b480      	push	{r7}
 8006666:	b087      	sub	sp, #28
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	607a      	str	r2, [r7, #4]
 8006670:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800667e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	021a      	lsls	r2, r3, #8
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	431a      	orrs	r2, r3
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	4313      	orrs	r3, r2
 800668c:	697a      	ldr	r2, [r7, #20]
 800668e:	4313      	orrs	r3, r2
 8006690:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	697a      	ldr	r2, [r7, #20]
 8006696:	609a      	str	r2, [r3, #8]
}
 8006698:	bf00      	nop
 800669a:	371c      	adds	r7, #28
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b087      	sub	sp, #28
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	f003 031f 	and.w	r3, r3, #31
 80066b6:	2201      	movs	r2, #1
 80066b8:	fa02 f303 	lsl.w	r3, r2, r3
 80066bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6a1a      	ldr	r2, [r3, #32]
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	43db      	mvns	r3, r3
 80066c6:	401a      	ands	r2, r3
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6a1a      	ldr	r2, [r3, #32]
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	f003 031f 	and.w	r3, r3, #31
 80066d6:	6879      	ldr	r1, [r7, #4]
 80066d8:	fa01 f303 	lsl.w	r3, r1, r3
 80066dc:	431a      	orrs	r2, r3
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	621a      	str	r2, [r3, #32]
}
 80066e2:	bf00      	nop
 80066e4:	371c      	adds	r7, #28
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
	...

080066f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006700:	2b01      	cmp	r3, #1
 8006702:	d101      	bne.n	8006708 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006704:	2302      	movs	r3, #2
 8006706:	e050      	b.n	80067aa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2202      	movs	r2, #2
 8006714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800672e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	4313      	orrs	r3, r2
 8006738:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a1c      	ldr	r2, [pc, #112]	; (80067b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d018      	beq.n	800677e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006754:	d013      	beq.n	800677e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a18      	ldr	r2, [pc, #96]	; (80067bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d00e      	beq.n	800677e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a16      	ldr	r2, [pc, #88]	; (80067c0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d009      	beq.n	800677e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a15      	ldr	r2, [pc, #84]	; (80067c4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d004      	beq.n	800677e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a13      	ldr	r2, [pc, #76]	; (80067c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d10c      	bne.n	8006798 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006784:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	68ba      	ldr	r2, [r7, #8]
 800678c:	4313      	orrs	r3, r2
 800678e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	68ba      	ldr	r2, [r7, #8]
 8006796:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3714      	adds	r7, #20
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop
 80067b8:	40010000 	.word	0x40010000
 80067bc:	40000400 	.word	0x40000400
 80067c0:	40000800 	.word	0x40000800
 80067c4:	40000c00 	.word	0x40000c00
 80067c8:	40014000 	.word	0x40014000

080067cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067d4:	bf00      	nop
 80067d6:	370c      	adds	r7, #12
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr

080067e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80067e8:	bf00      	nop
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b082      	sub	sp, #8
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d101      	bne.n	8006806 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e03f      	b.n	8006886 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800680c:	b2db      	uxtb	r3, r3
 800680e:	2b00      	cmp	r3, #0
 8006810:	d106      	bne.n	8006820 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f7fc fdaa 	bl	8003374 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2224      	movs	r2, #36	; 0x24
 8006824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68da      	ldr	r2, [r3, #12]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006836:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 fd23 	bl	8007284 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	691a      	ldr	r2, [r3, #16]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800684c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	695a      	ldr	r2, [r3, #20]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800685c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68da      	ldr	r2, [r3, #12]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800686c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2220      	movs	r2, #32
 8006878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2220      	movs	r2, #32
 8006880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	3708      	adds	r7, #8
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}

0800688e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800688e:	b480      	push	{r7}
 8006890:	b085      	sub	sp, #20
 8006892:	af00      	add	r7, sp, #0
 8006894:	60f8      	str	r0, [r7, #12]
 8006896:	60b9      	str	r1, [r7, #8]
 8006898:	4613      	mov	r3, r2
 800689a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	2b20      	cmp	r3, #32
 80068a6:	d130      	bne.n	800690a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d002      	beq.n	80068b4 <HAL_UART_Transmit_IT+0x26>
 80068ae:	88fb      	ldrh	r3, [r7, #6]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d101      	bne.n	80068b8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e029      	b.n	800690c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d101      	bne.n	80068c6 <HAL_UART_Transmit_IT+0x38>
 80068c2:	2302      	movs	r3, #2
 80068c4:	e022      	b.n	800690c <HAL_UART_Transmit_IT+0x7e>
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2201      	movs	r2, #1
 80068ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	68ba      	ldr	r2, [r7, #8]
 80068d2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	88fa      	ldrh	r2, [r7, #6]
 80068d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	88fa      	ldrh	r2, [r7, #6]
 80068de:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2200      	movs	r2, #0
 80068e4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2221      	movs	r2, #33	; 0x21
 80068ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	68da      	ldr	r2, [r3, #12]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006904:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006906:	2300      	movs	r3, #0
 8006908:	e000      	b.n	800690c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800690a:	2302      	movs	r3, #2
  }
}
 800690c:	4618      	mov	r0, r3
 800690e:	3714      	adds	r7, #20
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	60f8      	str	r0, [r7, #12]
 8006920:	60b9      	str	r1, [r7, #8]
 8006922:	4613      	mov	r3, r2
 8006924:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800692c:	b2db      	uxtb	r3, r3
 800692e:	2b20      	cmp	r3, #32
 8006930:	d11d      	bne.n	800696e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d002      	beq.n	800693e <HAL_UART_Receive_IT+0x26>
 8006938:	88fb      	ldrh	r3, [r7, #6]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d101      	bne.n	8006942 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e016      	b.n	8006970 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006948:	2b01      	cmp	r3, #1
 800694a:	d101      	bne.n	8006950 <HAL_UART_Receive_IT+0x38>
 800694c:	2302      	movs	r3, #2
 800694e:	e00f      	b.n	8006970 <HAL_UART_Receive_IT+0x58>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2200      	movs	r2, #0
 800695c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800695e:	88fb      	ldrh	r3, [r7, #6]
 8006960:	461a      	mov	r2, r3
 8006962:	68b9      	ldr	r1, [r7, #8]
 8006964:	68f8      	ldr	r0, [r7, #12]
 8006966:	f000 fab5 	bl	8006ed4 <UART_Start_Receive_IT>
 800696a:	4603      	mov	r3, r0
 800696c:	e000      	b.n	8006970 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800696e:	2302      	movs	r3, #2
  }
}
 8006970:	4618      	mov	r0, r3
 8006972:	3710      	adds	r7, #16
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b0ba      	sub	sp, #232	; 0xe8
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	695b      	ldr	r3, [r3, #20]
 800699a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800699e:	2300      	movs	r3, #0
 80069a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80069a4:	2300      	movs	r3, #0
 80069a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80069aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069ae:	f003 030f 	and.w	r3, r3, #15
 80069b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80069b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d10f      	bne.n	80069de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80069be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069c2:	f003 0320 	and.w	r3, r3, #32
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d009      	beq.n	80069de <HAL_UART_IRQHandler+0x66>
 80069ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069ce:	f003 0320 	and.w	r3, r3, #32
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d003      	beq.n	80069de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 fb99 	bl	800710e <UART_Receive_IT>
      return;
 80069dc:	e256      	b.n	8006e8c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80069de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	f000 80de 	beq.w	8006ba4 <HAL_UART_IRQHandler+0x22c>
 80069e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069ec:	f003 0301 	and.w	r3, r3, #1
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d106      	bne.n	8006a02 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80069f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069f8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f000 80d1 	beq.w	8006ba4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a06:	f003 0301 	and.w	r3, r3, #1
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00b      	beq.n	8006a26 <HAL_UART_IRQHandler+0xae>
 8006a0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d005      	beq.n	8006a26 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1e:	f043 0201 	orr.w	r2, r3, #1
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a2a:	f003 0304 	and.w	r3, r3, #4
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00b      	beq.n	8006a4a <HAL_UART_IRQHandler+0xd2>
 8006a32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a36:	f003 0301 	and.w	r3, r3, #1
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d005      	beq.n	8006a4a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a42:	f043 0202 	orr.w	r2, r3, #2
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a4e:	f003 0302 	and.w	r3, r3, #2
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d00b      	beq.n	8006a6e <HAL_UART_IRQHandler+0xf6>
 8006a56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a5a:	f003 0301 	and.w	r3, r3, #1
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d005      	beq.n	8006a6e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a66:	f043 0204 	orr.w	r2, r3, #4
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a72:	f003 0308 	and.w	r3, r3, #8
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d011      	beq.n	8006a9e <HAL_UART_IRQHandler+0x126>
 8006a7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a7e:	f003 0320 	and.w	r3, r3, #32
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d105      	bne.n	8006a92 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006a86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a8a:	f003 0301 	and.w	r3, r3, #1
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d005      	beq.n	8006a9e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a96:	f043 0208 	orr.w	r2, r3, #8
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	f000 81ed 	beq.w	8006e82 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006aa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aac:	f003 0320 	and.w	r3, r3, #32
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d008      	beq.n	8006ac6 <HAL_UART_IRQHandler+0x14e>
 8006ab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ab8:	f003 0320 	and.w	r3, r3, #32
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d002      	beq.n	8006ac6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 fb24 	bl	800710e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	695b      	ldr	r3, [r3, #20]
 8006acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ad0:	2b40      	cmp	r3, #64	; 0x40
 8006ad2:	bf0c      	ite	eq
 8006ad4:	2301      	moveq	r3, #1
 8006ad6:	2300      	movne	r3, #0
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae2:	f003 0308 	and.w	r3, r3, #8
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d103      	bne.n	8006af2 <HAL_UART_IRQHandler+0x17a>
 8006aea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d04f      	beq.n	8006b92 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 fa2c 	bl	8006f50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b02:	2b40      	cmp	r3, #64	; 0x40
 8006b04:	d141      	bne.n	8006b8a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	3314      	adds	r3, #20
 8006b0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b14:	e853 3f00 	ldrex	r3, [r3]
 8006b18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006b1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	3314      	adds	r3, #20
 8006b2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006b32:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006b36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006b3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006b42:	e841 2300 	strex	r3, r2, [r1]
 8006b46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006b4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d1d9      	bne.n	8006b06 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d013      	beq.n	8006b82 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b5e:	4a7d      	ldr	r2, [pc, #500]	; (8006d54 <HAL_UART_IRQHandler+0x3dc>)
 8006b60:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b66:	4618      	mov	r0, r3
 8006b68:	f7fd fc8b 	bl	8004482 <HAL_DMA_Abort_IT>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d016      	beq.n	8006ba0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006b7c:	4610      	mov	r0, r2
 8006b7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b80:	e00e      	b.n	8006ba0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 f990 	bl	8006ea8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b88:	e00a      	b.n	8006ba0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 f98c 	bl	8006ea8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b90:	e006      	b.n	8006ba0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 f988 	bl	8006ea8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006b9e:	e170      	b.n	8006e82 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ba0:	bf00      	nop
    return;
 8006ba2:	e16e      	b.n	8006e82 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	f040 814a 	bne.w	8006e42 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bb2:	f003 0310 	and.w	r3, r3, #16
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	f000 8143 	beq.w	8006e42 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006bbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bc0:	f003 0310 	and.w	r3, r3, #16
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	f000 813c 	beq.w	8006e42 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006bca:	2300      	movs	r3, #0
 8006bcc:	60bb      	str	r3, [r7, #8]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	60bb      	str	r3, [r7, #8]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	60bb      	str	r3, [r7, #8]
 8006bde:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	695b      	ldr	r3, [r3, #20]
 8006be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bea:	2b40      	cmp	r3, #64	; 0x40
 8006bec:	f040 80b4 	bne.w	8006d58 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006bfc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	f000 8140 	beq.w	8006e86 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	f080 8139 	bcs.w	8006e86 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c1a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c20:	69db      	ldr	r3, [r3, #28]
 8006c22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c26:	f000 8088 	beq.w	8006d3a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	330c      	adds	r3, #12
 8006c30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c38:	e853 3f00 	ldrex	r3, [r3]
 8006c3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006c40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	330c      	adds	r3, #12
 8006c52:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006c56:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006c5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006c62:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006c66:	e841 2300 	strex	r3, r2, [r1]
 8006c6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006c6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1d9      	bne.n	8006c2a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	3314      	adds	r3, #20
 8006c7c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c80:	e853 3f00 	ldrex	r3, [r3]
 8006c84:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006c86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c88:	f023 0301 	bic.w	r3, r3, #1
 8006c8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	3314      	adds	r3, #20
 8006c96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006c9a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006c9e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006ca2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006ca6:	e841 2300 	strex	r3, r2, [r1]
 8006caa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006cac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d1e1      	bne.n	8006c76 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	3314      	adds	r3, #20
 8006cb8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006cbc:	e853 3f00 	ldrex	r3, [r3]
 8006cc0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006cc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	3314      	adds	r3, #20
 8006cd2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006cd6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006cd8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cda:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006cdc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006cde:	e841 2300 	strex	r3, r2, [r1]
 8006ce2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006ce4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d1e3      	bne.n	8006cb2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2220      	movs	r2, #32
 8006cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	330c      	adds	r3, #12
 8006cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d02:	e853 3f00 	ldrex	r3, [r3]
 8006d06:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006d08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d0a:	f023 0310 	bic.w	r3, r3, #16
 8006d0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	330c      	adds	r3, #12
 8006d18:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006d1c:	65ba      	str	r2, [r7, #88]	; 0x58
 8006d1e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006d22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006d24:	e841 2300 	strex	r3, r2, [r1]
 8006d28:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006d2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d1e3      	bne.n	8006cf8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d34:	4618      	mov	r0, r3
 8006d36:	f7fd fb34 	bl	80043a2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	1ad3      	subs	r3, r2, r3
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	4619      	mov	r1, r3
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 f8b6 	bl	8006ebc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d50:	e099      	b.n	8006e86 <HAL_UART_IRQHandler+0x50e>
 8006d52:	bf00      	nop
 8006d54:	08007017 	.word	0x08007017
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	1ad3      	subs	r3, r2, r3
 8006d64:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	f000 808b 	beq.w	8006e8a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006d74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	f000 8086 	beq.w	8006e8a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	330c      	adds	r3, #12
 8006d84:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d88:	e853 3f00 	ldrex	r3, [r3]
 8006d8c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	330c      	adds	r3, #12
 8006d9e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006da2:	647a      	str	r2, [r7, #68]	; 0x44
 8006da4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006da8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006daa:	e841 2300 	strex	r3, r2, [r1]
 8006dae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006db0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d1e3      	bne.n	8006d7e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	3314      	adds	r3, #20
 8006dbc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc0:	e853 3f00 	ldrex	r3, [r3]
 8006dc4:	623b      	str	r3, [r7, #32]
   return(result);
 8006dc6:	6a3b      	ldr	r3, [r7, #32]
 8006dc8:	f023 0301 	bic.w	r3, r3, #1
 8006dcc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	3314      	adds	r3, #20
 8006dd6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006dda:	633a      	str	r2, [r7, #48]	; 0x30
 8006ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006de0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006de2:	e841 2300 	strex	r3, r2, [r1]
 8006de6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d1e3      	bne.n	8006db6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2220      	movs	r2, #32
 8006df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	330c      	adds	r3, #12
 8006e02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	e853 3f00 	ldrex	r3, [r3]
 8006e0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f023 0310 	bic.w	r3, r3, #16
 8006e12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	330c      	adds	r3, #12
 8006e1c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006e20:	61fa      	str	r2, [r7, #28]
 8006e22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e24:	69b9      	ldr	r1, [r7, #24]
 8006e26:	69fa      	ldr	r2, [r7, #28]
 8006e28:	e841 2300 	strex	r3, r2, [r1]
 8006e2c:	617b      	str	r3, [r7, #20]
   return(result);
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d1e3      	bne.n	8006dfc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e38:	4619      	mov	r1, r3
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 f83e 	bl	8006ebc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006e40:	e023      	b.n	8006e8a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d009      	beq.n	8006e62 <HAL_UART_IRQHandler+0x4ea>
 8006e4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d003      	beq.n	8006e62 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 f8ef 	bl	800703e <UART_Transmit_IT>
    return;
 8006e60:	e014      	b.n	8006e8c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00e      	beq.n	8006e8c <HAL_UART_IRQHandler+0x514>
 8006e6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d008      	beq.n	8006e8c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 f92f 	bl	80070de <UART_EndTransmit_IT>
    return;
 8006e80:	e004      	b.n	8006e8c <HAL_UART_IRQHandler+0x514>
    return;
 8006e82:	bf00      	nop
 8006e84:	e002      	b.n	8006e8c <HAL_UART_IRQHandler+0x514>
      return;
 8006e86:	bf00      	nop
 8006e88:	e000      	b.n	8006e8c <HAL_UART_IRQHandler+0x514>
      return;
 8006e8a:	bf00      	nop
  }
}
 8006e8c:	37e8      	adds	r7, #232	; 0xe8
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop

08006e94 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006e9c:	bf00      	nop
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006eb0:	bf00      	nop
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ec8:	bf00      	nop
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b085      	sub	sp, #20
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	4613      	mov	r3, r2
 8006ee0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	68ba      	ldr	r2, [r7, #8]
 8006ee6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	88fa      	ldrh	r2, [r7, #6]
 8006eec:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	88fa      	ldrh	r2, [r7, #6]
 8006ef2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2222      	movs	r2, #34	; 0x22
 8006efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	691b      	ldr	r3, [r3, #16]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d007      	beq.n	8006f22 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68da      	ldr	r2, [r3, #12]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f20:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	695a      	ldr	r2, [r3, #20]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f042 0201 	orr.w	r2, r2, #1
 8006f30:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	68da      	ldr	r2, [r3, #12]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f042 0220 	orr.w	r2, r2, #32
 8006f40:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006f42:	2300      	movs	r3, #0
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3714      	adds	r7, #20
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b095      	sub	sp, #84	; 0x54
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	330c      	adds	r3, #12
 8006f5e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f62:	e853 3f00 	ldrex	r3, [r3]
 8006f66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	330c      	adds	r3, #12
 8006f76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f78:	643a      	str	r2, [r7, #64]	; 0x40
 8006f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f80:	e841 2300 	strex	r3, r2, [r1]
 8006f84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d1e5      	bne.n	8006f58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	3314      	adds	r3, #20
 8006f92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f94:	6a3b      	ldr	r3, [r7, #32]
 8006f96:	e853 3f00 	ldrex	r3, [r3]
 8006f9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	f023 0301 	bic.w	r3, r3, #1
 8006fa2:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	3314      	adds	r3, #20
 8006faa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fac:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006fae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fb4:	e841 2300 	strex	r3, r2, [r1]
 8006fb8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d1e5      	bne.n	8006f8c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d119      	bne.n	8006ffc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	330c      	adds	r3, #12
 8006fce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	e853 3f00 	ldrex	r3, [r3]
 8006fd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	f023 0310 	bic.w	r3, r3, #16
 8006fde:	647b      	str	r3, [r7, #68]	; 0x44
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	330c      	adds	r3, #12
 8006fe6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fe8:	61ba      	str	r2, [r7, #24]
 8006fea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fec:	6979      	ldr	r1, [r7, #20]
 8006fee:	69ba      	ldr	r2, [r7, #24]
 8006ff0:	e841 2300 	strex	r3, r2, [r1]
 8006ff4:	613b      	str	r3, [r7, #16]
   return(result);
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d1e5      	bne.n	8006fc8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2220      	movs	r2, #32
 8007000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	631a      	str	r2, [r3, #48]	; 0x30
}
 800700a:	bf00      	nop
 800700c:	3754      	adds	r7, #84	; 0x54
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr

08007016 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007016:	b580      	push	{r7, lr}
 8007018:	b084      	sub	sp, #16
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007022:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2200      	movs	r2, #0
 8007028:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2200      	movs	r2, #0
 800702e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007030:	68f8      	ldr	r0, [r7, #12]
 8007032:	f7ff ff39 	bl	8006ea8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007036:	bf00      	nop
 8007038:	3710      	adds	r7, #16
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}

0800703e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800703e:	b480      	push	{r7}
 8007040:	b085      	sub	sp, #20
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800704c:	b2db      	uxtb	r3, r3
 800704e:	2b21      	cmp	r3, #33	; 0x21
 8007050:	d13e      	bne.n	80070d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800705a:	d114      	bne.n	8007086 <UART_Transmit_IT+0x48>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	691b      	ldr	r3, [r3, #16]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d110      	bne.n	8007086 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6a1b      	ldr	r3, [r3, #32]
 8007068:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	881b      	ldrh	r3, [r3, #0]
 800706e:	461a      	mov	r2, r3
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007078:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6a1b      	ldr	r3, [r3, #32]
 800707e:	1c9a      	adds	r2, r3, #2
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	621a      	str	r2, [r3, #32]
 8007084:	e008      	b.n	8007098 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6a1b      	ldr	r3, [r3, #32]
 800708a:	1c59      	adds	r1, r3, #1
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	6211      	str	r1, [r2, #32]
 8007090:	781a      	ldrb	r2, [r3, #0]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800709c:	b29b      	uxth	r3, r3
 800709e:	3b01      	subs	r3, #1
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	4619      	mov	r1, r3
 80070a6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d10f      	bne.n	80070cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	68da      	ldr	r2, [r3, #12]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80070ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	68da      	ldr	r2, [r3, #12]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80070cc:	2300      	movs	r3, #0
 80070ce:	e000      	b.n	80070d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80070d0:	2302      	movs	r3, #2
  }
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3714      	adds	r7, #20
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr

080070de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80070de:	b580      	push	{r7, lr}
 80070e0:	b082      	sub	sp, #8
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	68da      	ldr	r2, [r3, #12]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2220      	movs	r2, #32
 80070fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f7ff fec8 	bl	8006e94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3708      	adds	r7, #8
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}

0800710e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800710e:	b580      	push	{r7, lr}
 8007110:	b08c      	sub	sp, #48	; 0x30
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800711c:	b2db      	uxtb	r3, r3
 800711e:	2b22      	cmp	r3, #34	; 0x22
 8007120:	f040 80ab 	bne.w	800727a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800712c:	d117      	bne.n	800715e <UART_Receive_IT+0x50>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	691b      	ldr	r3, [r3, #16]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d113      	bne.n	800715e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007136:	2300      	movs	r3, #0
 8007138:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800713e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	b29b      	uxth	r3, r3
 8007148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800714c:	b29a      	uxth	r2, r3
 800714e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007150:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007156:	1c9a      	adds	r2, r3, #2
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	629a      	str	r2, [r3, #40]	; 0x28
 800715c:	e026      	b.n	80071ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007162:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007164:	2300      	movs	r3, #0
 8007166:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007170:	d007      	beq.n	8007182 <UART_Receive_IT+0x74>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d10a      	bne.n	8007190 <UART_Receive_IT+0x82>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	691b      	ldr	r3, [r3, #16]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d106      	bne.n	8007190 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	b2da      	uxtb	r2, r3
 800718a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800718c:	701a      	strb	r2, [r3, #0]
 800718e:	e008      	b.n	80071a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	b2db      	uxtb	r3, r3
 8007198:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800719c:	b2da      	uxtb	r2, r3
 800719e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a6:	1c5a      	adds	r2, r3, #1
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	3b01      	subs	r3, #1
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	4619      	mov	r1, r3
 80071ba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d15a      	bne.n	8007276 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	68da      	ldr	r2, [r3, #12]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f022 0220 	bic.w	r2, r2, #32
 80071ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	68da      	ldr	r2, [r3, #12]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80071de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	695a      	ldr	r2, [r3, #20]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f022 0201 	bic.w	r2, r2, #1
 80071ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2220      	movs	r2, #32
 80071f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d135      	bne.n	800726c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	330c      	adds	r3, #12
 800720c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	e853 3f00 	ldrex	r3, [r3]
 8007214:	613b      	str	r3, [r7, #16]
   return(result);
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	f023 0310 	bic.w	r3, r3, #16
 800721c:	627b      	str	r3, [r7, #36]	; 0x24
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	330c      	adds	r3, #12
 8007224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007226:	623a      	str	r2, [r7, #32]
 8007228:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800722a:	69f9      	ldr	r1, [r7, #28]
 800722c:	6a3a      	ldr	r2, [r7, #32]
 800722e:	e841 2300 	strex	r3, r2, [r1]
 8007232:	61bb      	str	r3, [r7, #24]
   return(result);
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d1e5      	bne.n	8007206 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 0310 	and.w	r3, r3, #16
 8007244:	2b10      	cmp	r3, #16
 8007246:	d10a      	bne.n	800725e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007248:	2300      	movs	r3, #0
 800724a:	60fb      	str	r3, [r7, #12]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	60fb      	str	r3, [r7, #12]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	60fb      	str	r3, [r7, #12]
 800725c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007262:	4619      	mov	r1, r3
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f7ff fe29 	bl	8006ebc <HAL_UARTEx_RxEventCallback>
 800726a:	e002      	b.n	8007272 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f7f9 ff53 	bl	8001118 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007272:	2300      	movs	r3, #0
 8007274:	e002      	b.n	800727c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007276:	2300      	movs	r3, #0
 8007278:	e000      	b.n	800727c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800727a:	2302      	movs	r3, #2
  }
}
 800727c:	4618      	mov	r0, r3
 800727e:	3730      	adds	r7, #48	; 0x30
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007284:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007288:	b0c0      	sub	sp, #256	; 0x100
 800728a:	af00      	add	r7, sp, #0
 800728c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	691b      	ldr	r3, [r3, #16]
 8007298:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800729c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072a0:	68d9      	ldr	r1, [r3, #12]
 80072a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	ea40 0301 	orr.w	r3, r0, r1
 80072ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80072ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072b2:	689a      	ldr	r2, [r3, #8]
 80072b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	431a      	orrs	r2, r3
 80072bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072c0:	695b      	ldr	r3, [r3, #20]
 80072c2:	431a      	orrs	r2, r3
 80072c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072c8:	69db      	ldr	r3, [r3, #28]
 80072ca:	4313      	orrs	r3, r2
 80072cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80072d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	68db      	ldr	r3, [r3, #12]
 80072d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80072dc:	f021 010c 	bic.w	r1, r1, #12
 80072e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80072ea:	430b      	orrs	r3, r1
 80072ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80072ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	695b      	ldr	r3, [r3, #20]
 80072f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80072fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072fe:	6999      	ldr	r1, [r3, #24]
 8007300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	ea40 0301 	orr.w	r3, r0, r1
 800730a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800730c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	4b8f      	ldr	r3, [pc, #572]	; (8007550 <UART_SetConfig+0x2cc>)
 8007314:	429a      	cmp	r2, r3
 8007316:	d005      	beq.n	8007324 <UART_SetConfig+0xa0>
 8007318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	4b8d      	ldr	r3, [pc, #564]	; (8007554 <UART_SetConfig+0x2d0>)
 8007320:	429a      	cmp	r2, r3
 8007322:	d104      	bne.n	800732e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007324:	f7fd ff2e 	bl	8005184 <HAL_RCC_GetPCLK2Freq>
 8007328:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800732c:	e003      	b.n	8007336 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800732e:	f7fd ff15 	bl	800515c <HAL_RCC_GetPCLK1Freq>
 8007332:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800733a:	69db      	ldr	r3, [r3, #28]
 800733c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007340:	f040 810c 	bne.w	800755c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007344:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007348:	2200      	movs	r2, #0
 800734a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800734e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007352:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007356:	4622      	mov	r2, r4
 8007358:	462b      	mov	r3, r5
 800735a:	1891      	adds	r1, r2, r2
 800735c:	65b9      	str	r1, [r7, #88]	; 0x58
 800735e:	415b      	adcs	r3, r3
 8007360:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007362:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007366:	4621      	mov	r1, r4
 8007368:	eb12 0801 	adds.w	r8, r2, r1
 800736c:	4629      	mov	r1, r5
 800736e:	eb43 0901 	adc.w	r9, r3, r1
 8007372:	f04f 0200 	mov.w	r2, #0
 8007376:	f04f 0300 	mov.w	r3, #0
 800737a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800737e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007382:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007386:	4690      	mov	r8, r2
 8007388:	4699      	mov	r9, r3
 800738a:	4623      	mov	r3, r4
 800738c:	eb18 0303 	adds.w	r3, r8, r3
 8007390:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007394:	462b      	mov	r3, r5
 8007396:	eb49 0303 	adc.w	r3, r9, r3
 800739a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800739e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80073aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80073ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80073b2:	460b      	mov	r3, r1
 80073b4:	18db      	adds	r3, r3, r3
 80073b6:	653b      	str	r3, [r7, #80]	; 0x50
 80073b8:	4613      	mov	r3, r2
 80073ba:	eb42 0303 	adc.w	r3, r2, r3
 80073be:	657b      	str	r3, [r7, #84]	; 0x54
 80073c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80073c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80073c8:	f7f9 fbee 	bl	8000ba8 <__aeabi_uldivmod>
 80073cc:	4602      	mov	r2, r0
 80073ce:	460b      	mov	r3, r1
 80073d0:	4b61      	ldr	r3, [pc, #388]	; (8007558 <UART_SetConfig+0x2d4>)
 80073d2:	fba3 2302 	umull	r2, r3, r3, r2
 80073d6:	095b      	lsrs	r3, r3, #5
 80073d8:	011c      	lsls	r4, r3, #4
 80073da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073de:	2200      	movs	r2, #0
 80073e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80073e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80073e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80073ec:	4642      	mov	r2, r8
 80073ee:	464b      	mov	r3, r9
 80073f0:	1891      	adds	r1, r2, r2
 80073f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80073f4:	415b      	adcs	r3, r3
 80073f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80073fc:	4641      	mov	r1, r8
 80073fe:	eb12 0a01 	adds.w	sl, r2, r1
 8007402:	4649      	mov	r1, r9
 8007404:	eb43 0b01 	adc.w	fp, r3, r1
 8007408:	f04f 0200 	mov.w	r2, #0
 800740c:	f04f 0300 	mov.w	r3, #0
 8007410:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007414:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007418:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800741c:	4692      	mov	sl, r2
 800741e:	469b      	mov	fp, r3
 8007420:	4643      	mov	r3, r8
 8007422:	eb1a 0303 	adds.w	r3, sl, r3
 8007426:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800742a:	464b      	mov	r3, r9
 800742c:	eb4b 0303 	adc.w	r3, fp, r3
 8007430:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007440:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007444:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007448:	460b      	mov	r3, r1
 800744a:	18db      	adds	r3, r3, r3
 800744c:	643b      	str	r3, [r7, #64]	; 0x40
 800744e:	4613      	mov	r3, r2
 8007450:	eb42 0303 	adc.w	r3, r2, r3
 8007454:	647b      	str	r3, [r7, #68]	; 0x44
 8007456:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800745a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800745e:	f7f9 fba3 	bl	8000ba8 <__aeabi_uldivmod>
 8007462:	4602      	mov	r2, r0
 8007464:	460b      	mov	r3, r1
 8007466:	4611      	mov	r1, r2
 8007468:	4b3b      	ldr	r3, [pc, #236]	; (8007558 <UART_SetConfig+0x2d4>)
 800746a:	fba3 2301 	umull	r2, r3, r3, r1
 800746e:	095b      	lsrs	r3, r3, #5
 8007470:	2264      	movs	r2, #100	; 0x64
 8007472:	fb02 f303 	mul.w	r3, r2, r3
 8007476:	1acb      	subs	r3, r1, r3
 8007478:	00db      	lsls	r3, r3, #3
 800747a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800747e:	4b36      	ldr	r3, [pc, #216]	; (8007558 <UART_SetConfig+0x2d4>)
 8007480:	fba3 2302 	umull	r2, r3, r3, r2
 8007484:	095b      	lsrs	r3, r3, #5
 8007486:	005b      	lsls	r3, r3, #1
 8007488:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800748c:	441c      	add	r4, r3
 800748e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007492:	2200      	movs	r2, #0
 8007494:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007498:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800749c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80074a0:	4642      	mov	r2, r8
 80074a2:	464b      	mov	r3, r9
 80074a4:	1891      	adds	r1, r2, r2
 80074a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80074a8:	415b      	adcs	r3, r3
 80074aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80074b0:	4641      	mov	r1, r8
 80074b2:	1851      	adds	r1, r2, r1
 80074b4:	6339      	str	r1, [r7, #48]	; 0x30
 80074b6:	4649      	mov	r1, r9
 80074b8:	414b      	adcs	r3, r1
 80074ba:	637b      	str	r3, [r7, #52]	; 0x34
 80074bc:	f04f 0200 	mov.w	r2, #0
 80074c0:	f04f 0300 	mov.w	r3, #0
 80074c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80074c8:	4659      	mov	r1, fp
 80074ca:	00cb      	lsls	r3, r1, #3
 80074cc:	4651      	mov	r1, sl
 80074ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074d2:	4651      	mov	r1, sl
 80074d4:	00ca      	lsls	r2, r1, #3
 80074d6:	4610      	mov	r0, r2
 80074d8:	4619      	mov	r1, r3
 80074da:	4603      	mov	r3, r0
 80074dc:	4642      	mov	r2, r8
 80074de:	189b      	adds	r3, r3, r2
 80074e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80074e4:	464b      	mov	r3, r9
 80074e6:	460a      	mov	r2, r1
 80074e8:	eb42 0303 	adc.w	r3, r2, r3
 80074ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80074f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80074fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007500:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007504:	460b      	mov	r3, r1
 8007506:	18db      	adds	r3, r3, r3
 8007508:	62bb      	str	r3, [r7, #40]	; 0x28
 800750a:	4613      	mov	r3, r2
 800750c:	eb42 0303 	adc.w	r3, r2, r3
 8007510:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007512:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007516:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800751a:	f7f9 fb45 	bl	8000ba8 <__aeabi_uldivmod>
 800751e:	4602      	mov	r2, r0
 8007520:	460b      	mov	r3, r1
 8007522:	4b0d      	ldr	r3, [pc, #52]	; (8007558 <UART_SetConfig+0x2d4>)
 8007524:	fba3 1302 	umull	r1, r3, r3, r2
 8007528:	095b      	lsrs	r3, r3, #5
 800752a:	2164      	movs	r1, #100	; 0x64
 800752c:	fb01 f303 	mul.w	r3, r1, r3
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	00db      	lsls	r3, r3, #3
 8007534:	3332      	adds	r3, #50	; 0x32
 8007536:	4a08      	ldr	r2, [pc, #32]	; (8007558 <UART_SetConfig+0x2d4>)
 8007538:	fba2 2303 	umull	r2, r3, r2, r3
 800753c:	095b      	lsrs	r3, r3, #5
 800753e:	f003 0207 	and.w	r2, r3, #7
 8007542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4422      	add	r2, r4
 800754a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800754c:	e105      	b.n	800775a <UART_SetConfig+0x4d6>
 800754e:	bf00      	nop
 8007550:	40011000 	.word	0x40011000
 8007554:	40011400 	.word	0x40011400
 8007558:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800755c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007560:	2200      	movs	r2, #0
 8007562:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007566:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800756a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800756e:	4642      	mov	r2, r8
 8007570:	464b      	mov	r3, r9
 8007572:	1891      	adds	r1, r2, r2
 8007574:	6239      	str	r1, [r7, #32]
 8007576:	415b      	adcs	r3, r3
 8007578:	627b      	str	r3, [r7, #36]	; 0x24
 800757a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800757e:	4641      	mov	r1, r8
 8007580:	1854      	adds	r4, r2, r1
 8007582:	4649      	mov	r1, r9
 8007584:	eb43 0501 	adc.w	r5, r3, r1
 8007588:	f04f 0200 	mov.w	r2, #0
 800758c:	f04f 0300 	mov.w	r3, #0
 8007590:	00eb      	lsls	r3, r5, #3
 8007592:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007596:	00e2      	lsls	r2, r4, #3
 8007598:	4614      	mov	r4, r2
 800759a:	461d      	mov	r5, r3
 800759c:	4643      	mov	r3, r8
 800759e:	18e3      	adds	r3, r4, r3
 80075a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80075a4:	464b      	mov	r3, r9
 80075a6:	eb45 0303 	adc.w	r3, r5, r3
 80075aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80075ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80075ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80075be:	f04f 0200 	mov.w	r2, #0
 80075c2:	f04f 0300 	mov.w	r3, #0
 80075c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80075ca:	4629      	mov	r1, r5
 80075cc:	008b      	lsls	r3, r1, #2
 80075ce:	4621      	mov	r1, r4
 80075d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075d4:	4621      	mov	r1, r4
 80075d6:	008a      	lsls	r2, r1, #2
 80075d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80075dc:	f7f9 fae4 	bl	8000ba8 <__aeabi_uldivmod>
 80075e0:	4602      	mov	r2, r0
 80075e2:	460b      	mov	r3, r1
 80075e4:	4b60      	ldr	r3, [pc, #384]	; (8007768 <UART_SetConfig+0x4e4>)
 80075e6:	fba3 2302 	umull	r2, r3, r3, r2
 80075ea:	095b      	lsrs	r3, r3, #5
 80075ec:	011c      	lsls	r4, r3, #4
 80075ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075f2:	2200      	movs	r2, #0
 80075f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80075f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80075fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007600:	4642      	mov	r2, r8
 8007602:	464b      	mov	r3, r9
 8007604:	1891      	adds	r1, r2, r2
 8007606:	61b9      	str	r1, [r7, #24]
 8007608:	415b      	adcs	r3, r3
 800760a:	61fb      	str	r3, [r7, #28]
 800760c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007610:	4641      	mov	r1, r8
 8007612:	1851      	adds	r1, r2, r1
 8007614:	6139      	str	r1, [r7, #16]
 8007616:	4649      	mov	r1, r9
 8007618:	414b      	adcs	r3, r1
 800761a:	617b      	str	r3, [r7, #20]
 800761c:	f04f 0200 	mov.w	r2, #0
 8007620:	f04f 0300 	mov.w	r3, #0
 8007624:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007628:	4659      	mov	r1, fp
 800762a:	00cb      	lsls	r3, r1, #3
 800762c:	4651      	mov	r1, sl
 800762e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007632:	4651      	mov	r1, sl
 8007634:	00ca      	lsls	r2, r1, #3
 8007636:	4610      	mov	r0, r2
 8007638:	4619      	mov	r1, r3
 800763a:	4603      	mov	r3, r0
 800763c:	4642      	mov	r2, r8
 800763e:	189b      	adds	r3, r3, r2
 8007640:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007644:	464b      	mov	r3, r9
 8007646:	460a      	mov	r2, r1
 8007648:	eb42 0303 	adc.w	r3, r2, r3
 800764c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	67bb      	str	r3, [r7, #120]	; 0x78
 800765a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800765c:	f04f 0200 	mov.w	r2, #0
 8007660:	f04f 0300 	mov.w	r3, #0
 8007664:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007668:	4649      	mov	r1, r9
 800766a:	008b      	lsls	r3, r1, #2
 800766c:	4641      	mov	r1, r8
 800766e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007672:	4641      	mov	r1, r8
 8007674:	008a      	lsls	r2, r1, #2
 8007676:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800767a:	f7f9 fa95 	bl	8000ba8 <__aeabi_uldivmod>
 800767e:	4602      	mov	r2, r0
 8007680:	460b      	mov	r3, r1
 8007682:	4b39      	ldr	r3, [pc, #228]	; (8007768 <UART_SetConfig+0x4e4>)
 8007684:	fba3 1302 	umull	r1, r3, r3, r2
 8007688:	095b      	lsrs	r3, r3, #5
 800768a:	2164      	movs	r1, #100	; 0x64
 800768c:	fb01 f303 	mul.w	r3, r1, r3
 8007690:	1ad3      	subs	r3, r2, r3
 8007692:	011b      	lsls	r3, r3, #4
 8007694:	3332      	adds	r3, #50	; 0x32
 8007696:	4a34      	ldr	r2, [pc, #208]	; (8007768 <UART_SetConfig+0x4e4>)
 8007698:	fba2 2303 	umull	r2, r3, r2, r3
 800769c:	095b      	lsrs	r3, r3, #5
 800769e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80076a2:	441c      	add	r4, r3
 80076a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076a8:	2200      	movs	r2, #0
 80076aa:	673b      	str	r3, [r7, #112]	; 0x70
 80076ac:	677a      	str	r2, [r7, #116]	; 0x74
 80076ae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80076b2:	4642      	mov	r2, r8
 80076b4:	464b      	mov	r3, r9
 80076b6:	1891      	adds	r1, r2, r2
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	415b      	adcs	r3, r3
 80076bc:	60fb      	str	r3, [r7, #12]
 80076be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80076c2:	4641      	mov	r1, r8
 80076c4:	1851      	adds	r1, r2, r1
 80076c6:	6039      	str	r1, [r7, #0]
 80076c8:	4649      	mov	r1, r9
 80076ca:	414b      	adcs	r3, r1
 80076cc:	607b      	str	r3, [r7, #4]
 80076ce:	f04f 0200 	mov.w	r2, #0
 80076d2:	f04f 0300 	mov.w	r3, #0
 80076d6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80076da:	4659      	mov	r1, fp
 80076dc:	00cb      	lsls	r3, r1, #3
 80076de:	4651      	mov	r1, sl
 80076e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076e4:	4651      	mov	r1, sl
 80076e6:	00ca      	lsls	r2, r1, #3
 80076e8:	4610      	mov	r0, r2
 80076ea:	4619      	mov	r1, r3
 80076ec:	4603      	mov	r3, r0
 80076ee:	4642      	mov	r2, r8
 80076f0:	189b      	adds	r3, r3, r2
 80076f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80076f4:	464b      	mov	r3, r9
 80076f6:	460a      	mov	r2, r1
 80076f8:	eb42 0303 	adc.w	r3, r2, r3
 80076fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80076fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	663b      	str	r3, [r7, #96]	; 0x60
 8007708:	667a      	str	r2, [r7, #100]	; 0x64
 800770a:	f04f 0200 	mov.w	r2, #0
 800770e:	f04f 0300 	mov.w	r3, #0
 8007712:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007716:	4649      	mov	r1, r9
 8007718:	008b      	lsls	r3, r1, #2
 800771a:	4641      	mov	r1, r8
 800771c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007720:	4641      	mov	r1, r8
 8007722:	008a      	lsls	r2, r1, #2
 8007724:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007728:	f7f9 fa3e 	bl	8000ba8 <__aeabi_uldivmod>
 800772c:	4602      	mov	r2, r0
 800772e:	460b      	mov	r3, r1
 8007730:	4b0d      	ldr	r3, [pc, #52]	; (8007768 <UART_SetConfig+0x4e4>)
 8007732:	fba3 1302 	umull	r1, r3, r3, r2
 8007736:	095b      	lsrs	r3, r3, #5
 8007738:	2164      	movs	r1, #100	; 0x64
 800773a:	fb01 f303 	mul.w	r3, r1, r3
 800773e:	1ad3      	subs	r3, r2, r3
 8007740:	011b      	lsls	r3, r3, #4
 8007742:	3332      	adds	r3, #50	; 0x32
 8007744:	4a08      	ldr	r2, [pc, #32]	; (8007768 <UART_SetConfig+0x4e4>)
 8007746:	fba2 2303 	umull	r2, r3, r2, r3
 800774a:	095b      	lsrs	r3, r3, #5
 800774c:	f003 020f 	and.w	r2, r3, #15
 8007750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4422      	add	r2, r4
 8007758:	609a      	str	r2, [r3, #8]
}
 800775a:	bf00      	nop
 800775c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007760:	46bd      	mov	sp, r7
 8007762:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007766:	bf00      	nop
 8007768:	51eb851f 	.word	0x51eb851f

0800776c <__errno>:
 800776c:	4b01      	ldr	r3, [pc, #4]	; (8007774 <__errno+0x8>)
 800776e:	6818      	ldr	r0, [r3, #0]
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop
 8007774:	20000040 	.word	0x20000040

08007778 <__libc_init_array>:
 8007778:	b570      	push	{r4, r5, r6, lr}
 800777a:	4d0d      	ldr	r5, [pc, #52]	; (80077b0 <__libc_init_array+0x38>)
 800777c:	4c0d      	ldr	r4, [pc, #52]	; (80077b4 <__libc_init_array+0x3c>)
 800777e:	1b64      	subs	r4, r4, r5
 8007780:	10a4      	asrs	r4, r4, #2
 8007782:	2600      	movs	r6, #0
 8007784:	42a6      	cmp	r6, r4
 8007786:	d109      	bne.n	800779c <__libc_init_array+0x24>
 8007788:	4d0b      	ldr	r5, [pc, #44]	; (80077b8 <__libc_init_array+0x40>)
 800778a:	4c0c      	ldr	r4, [pc, #48]	; (80077bc <__libc_init_array+0x44>)
 800778c:	f001 fbbe 	bl	8008f0c <_init>
 8007790:	1b64      	subs	r4, r4, r5
 8007792:	10a4      	asrs	r4, r4, #2
 8007794:	2600      	movs	r6, #0
 8007796:	42a6      	cmp	r6, r4
 8007798:	d105      	bne.n	80077a6 <__libc_init_array+0x2e>
 800779a:	bd70      	pop	{r4, r5, r6, pc}
 800779c:	f855 3b04 	ldr.w	r3, [r5], #4
 80077a0:	4798      	blx	r3
 80077a2:	3601      	adds	r6, #1
 80077a4:	e7ee      	b.n	8007784 <__libc_init_array+0xc>
 80077a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80077aa:	4798      	blx	r3
 80077ac:	3601      	adds	r6, #1
 80077ae:	e7f2      	b.n	8007796 <__libc_init_array+0x1e>
 80077b0:	08009080 	.word	0x08009080
 80077b4:	08009080 	.word	0x08009080
 80077b8:	08009080 	.word	0x08009080
 80077bc:	08009084 	.word	0x08009084

080077c0 <memset>:
 80077c0:	4402      	add	r2, r0
 80077c2:	4603      	mov	r3, r0
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d100      	bne.n	80077ca <memset+0xa>
 80077c8:	4770      	bx	lr
 80077ca:	f803 1b01 	strb.w	r1, [r3], #1
 80077ce:	e7f9      	b.n	80077c4 <memset+0x4>

080077d0 <sniprintf>:
 80077d0:	b40c      	push	{r2, r3}
 80077d2:	b530      	push	{r4, r5, lr}
 80077d4:	4b17      	ldr	r3, [pc, #92]	; (8007834 <sniprintf+0x64>)
 80077d6:	1e0c      	subs	r4, r1, #0
 80077d8:	681d      	ldr	r5, [r3, #0]
 80077da:	b09d      	sub	sp, #116	; 0x74
 80077dc:	da08      	bge.n	80077f0 <sniprintf+0x20>
 80077de:	238b      	movs	r3, #139	; 0x8b
 80077e0:	602b      	str	r3, [r5, #0]
 80077e2:	f04f 30ff 	mov.w	r0, #4294967295
 80077e6:	b01d      	add	sp, #116	; 0x74
 80077e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80077ec:	b002      	add	sp, #8
 80077ee:	4770      	bx	lr
 80077f0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80077f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80077f8:	bf14      	ite	ne
 80077fa:	f104 33ff 	addne.w	r3, r4, #4294967295
 80077fe:	4623      	moveq	r3, r4
 8007800:	9304      	str	r3, [sp, #16]
 8007802:	9307      	str	r3, [sp, #28]
 8007804:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007808:	9002      	str	r0, [sp, #8]
 800780a:	9006      	str	r0, [sp, #24]
 800780c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007810:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007812:	ab21      	add	r3, sp, #132	; 0x84
 8007814:	a902      	add	r1, sp, #8
 8007816:	4628      	mov	r0, r5
 8007818:	9301      	str	r3, [sp, #4]
 800781a:	f000 f869 	bl	80078f0 <_svfiprintf_r>
 800781e:	1c43      	adds	r3, r0, #1
 8007820:	bfbc      	itt	lt
 8007822:	238b      	movlt	r3, #139	; 0x8b
 8007824:	602b      	strlt	r3, [r5, #0]
 8007826:	2c00      	cmp	r4, #0
 8007828:	d0dd      	beq.n	80077e6 <sniprintf+0x16>
 800782a:	9b02      	ldr	r3, [sp, #8]
 800782c:	2200      	movs	r2, #0
 800782e:	701a      	strb	r2, [r3, #0]
 8007830:	e7d9      	b.n	80077e6 <sniprintf+0x16>
 8007832:	bf00      	nop
 8007834:	20000040 	.word	0x20000040

08007838 <__ssputs_r>:
 8007838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800783c:	688e      	ldr	r6, [r1, #8]
 800783e:	429e      	cmp	r6, r3
 8007840:	4682      	mov	sl, r0
 8007842:	460c      	mov	r4, r1
 8007844:	4690      	mov	r8, r2
 8007846:	461f      	mov	r7, r3
 8007848:	d838      	bhi.n	80078bc <__ssputs_r+0x84>
 800784a:	898a      	ldrh	r2, [r1, #12]
 800784c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007850:	d032      	beq.n	80078b8 <__ssputs_r+0x80>
 8007852:	6825      	ldr	r5, [r4, #0]
 8007854:	6909      	ldr	r1, [r1, #16]
 8007856:	eba5 0901 	sub.w	r9, r5, r1
 800785a:	6965      	ldr	r5, [r4, #20]
 800785c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007860:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007864:	3301      	adds	r3, #1
 8007866:	444b      	add	r3, r9
 8007868:	106d      	asrs	r5, r5, #1
 800786a:	429d      	cmp	r5, r3
 800786c:	bf38      	it	cc
 800786e:	461d      	movcc	r5, r3
 8007870:	0553      	lsls	r3, r2, #21
 8007872:	d531      	bpl.n	80078d8 <__ssputs_r+0xa0>
 8007874:	4629      	mov	r1, r5
 8007876:	f000 fb63 	bl	8007f40 <_malloc_r>
 800787a:	4606      	mov	r6, r0
 800787c:	b950      	cbnz	r0, 8007894 <__ssputs_r+0x5c>
 800787e:	230c      	movs	r3, #12
 8007880:	f8ca 3000 	str.w	r3, [sl]
 8007884:	89a3      	ldrh	r3, [r4, #12]
 8007886:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800788a:	81a3      	strh	r3, [r4, #12]
 800788c:	f04f 30ff 	mov.w	r0, #4294967295
 8007890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007894:	6921      	ldr	r1, [r4, #16]
 8007896:	464a      	mov	r2, r9
 8007898:	f000 fabe 	bl	8007e18 <memcpy>
 800789c:	89a3      	ldrh	r3, [r4, #12]
 800789e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80078a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078a6:	81a3      	strh	r3, [r4, #12]
 80078a8:	6126      	str	r6, [r4, #16]
 80078aa:	6165      	str	r5, [r4, #20]
 80078ac:	444e      	add	r6, r9
 80078ae:	eba5 0509 	sub.w	r5, r5, r9
 80078b2:	6026      	str	r6, [r4, #0]
 80078b4:	60a5      	str	r5, [r4, #8]
 80078b6:	463e      	mov	r6, r7
 80078b8:	42be      	cmp	r6, r7
 80078ba:	d900      	bls.n	80078be <__ssputs_r+0x86>
 80078bc:	463e      	mov	r6, r7
 80078be:	6820      	ldr	r0, [r4, #0]
 80078c0:	4632      	mov	r2, r6
 80078c2:	4641      	mov	r1, r8
 80078c4:	f000 fab6 	bl	8007e34 <memmove>
 80078c8:	68a3      	ldr	r3, [r4, #8]
 80078ca:	1b9b      	subs	r3, r3, r6
 80078cc:	60a3      	str	r3, [r4, #8]
 80078ce:	6823      	ldr	r3, [r4, #0]
 80078d0:	4433      	add	r3, r6
 80078d2:	6023      	str	r3, [r4, #0]
 80078d4:	2000      	movs	r0, #0
 80078d6:	e7db      	b.n	8007890 <__ssputs_r+0x58>
 80078d8:	462a      	mov	r2, r5
 80078da:	f000 fba5 	bl	8008028 <_realloc_r>
 80078de:	4606      	mov	r6, r0
 80078e0:	2800      	cmp	r0, #0
 80078e2:	d1e1      	bne.n	80078a8 <__ssputs_r+0x70>
 80078e4:	6921      	ldr	r1, [r4, #16]
 80078e6:	4650      	mov	r0, sl
 80078e8:	f000 fabe 	bl	8007e68 <_free_r>
 80078ec:	e7c7      	b.n	800787e <__ssputs_r+0x46>
	...

080078f0 <_svfiprintf_r>:
 80078f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078f4:	4698      	mov	r8, r3
 80078f6:	898b      	ldrh	r3, [r1, #12]
 80078f8:	061b      	lsls	r3, r3, #24
 80078fa:	b09d      	sub	sp, #116	; 0x74
 80078fc:	4607      	mov	r7, r0
 80078fe:	460d      	mov	r5, r1
 8007900:	4614      	mov	r4, r2
 8007902:	d50e      	bpl.n	8007922 <_svfiprintf_r+0x32>
 8007904:	690b      	ldr	r3, [r1, #16]
 8007906:	b963      	cbnz	r3, 8007922 <_svfiprintf_r+0x32>
 8007908:	2140      	movs	r1, #64	; 0x40
 800790a:	f000 fb19 	bl	8007f40 <_malloc_r>
 800790e:	6028      	str	r0, [r5, #0]
 8007910:	6128      	str	r0, [r5, #16]
 8007912:	b920      	cbnz	r0, 800791e <_svfiprintf_r+0x2e>
 8007914:	230c      	movs	r3, #12
 8007916:	603b      	str	r3, [r7, #0]
 8007918:	f04f 30ff 	mov.w	r0, #4294967295
 800791c:	e0d1      	b.n	8007ac2 <_svfiprintf_r+0x1d2>
 800791e:	2340      	movs	r3, #64	; 0x40
 8007920:	616b      	str	r3, [r5, #20]
 8007922:	2300      	movs	r3, #0
 8007924:	9309      	str	r3, [sp, #36]	; 0x24
 8007926:	2320      	movs	r3, #32
 8007928:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800792c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007930:	2330      	movs	r3, #48	; 0x30
 8007932:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007adc <_svfiprintf_r+0x1ec>
 8007936:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800793a:	f04f 0901 	mov.w	r9, #1
 800793e:	4623      	mov	r3, r4
 8007940:	469a      	mov	sl, r3
 8007942:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007946:	b10a      	cbz	r2, 800794c <_svfiprintf_r+0x5c>
 8007948:	2a25      	cmp	r2, #37	; 0x25
 800794a:	d1f9      	bne.n	8007940 <_svfiprintf_r+0x50>
 800794c:	ebba 0b04 	subs.w	fp, sl, r4
 8007950:	d00b      	beq.n	800796a <_svfiprintf_r+0x7a>
 8007952:	465b      	mov	r3, fp
 8007954:	4622      	mov	r2, r4
 8007956:	4629      	mov	r1, r5
 8007958:	4638      	mov	r0, r7
 800795a:	f7ff ff6d 	bl	8007838 <__ssputs_r>
 800795e:	3001      	adds	r0, #1
 8007960:	f000 80aa 	beq.w	8007ab8 <_svfiprintf_r+0x1c8>
 8007964:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007966:	445a      	add	r2, fp
 8007968:	9209      	str	r2, [sp, #36]	; 0x24
 800796a:	f89a 3000 	ldrb.w	r3, [sl]
 800796e:	2b00      	cmp	r3, #0
 8007970:	f000 80a2 	beq.w	8007ab8 <_svfiprintf_r+0x1c8>
 8007974:	2300      	movs	r3, #0
 8007976:	f04f 32ff 	mov.w	r2, #4294967295
 800797a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800797e:	f10a 0a01 	add.w	sl, sl, #1
 8007982:	9304      	str	r3, [sp, #16]
 8007984:	9307      	str	r3, [sp, #28]
 8007986:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800798a:	931a      	str	r3, [sp, #104]	; 0x68
 800798c:	4654      	mov	r4, sl
 800798e:	2205      	movs	r2, #5
 8007990:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007994:	4851      	ldr	r0, [pc, #324]	; (8007adc <_svfiprintf_r+0x1ec>)
 8007996:	f7f8 fc2b 	bl	80001f0 <memchr>
 800799a:	9a04      	ldr	r2, [sp, #16]
 800799c:	b9d8      	cbnz	r0, 80079d6 <_svfiprintf_r+0xe6>
 800799e:	06d0      	lsls	r0, r2, #27
 80079a0:	bf44      	itt	mi
 80079a2:	2320      	movmi	r3, #32
 80079a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079a8:	0711      	lsls	r1, r2, #28
 80079aa:	bf44      	itt	mi
 80079ac:	232b      	movmi	r3, #43	; 0x2b
 80079ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079b2:	f89a 3000 	ldrb.w	r3, [sl]
 80079b6:	2b2a      	cmp	r3, #42	; 0x2a
 80079b8:	d015      	beq.n	80079e6 <_svfiprintf_r+0xf6>
 80079ba:	9a07      	ldr	r2, [sp, #28]
 80079bc:	4654      	mov	r4, sl
 80079be:	2000      	movs	r0, #0
 80079c0:	f04f 0c0a 	mov.w	ip, #10
 80079c4:	4621      	mov	r1, r4
 80079c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079ca:	3b30      	subs	r3, #48	; 0x30
 80079cc:	2b09      	cmp	r3, #9
 80079ce:	d94e      	bls.n	8007a6e <_svfiprintf_r+0x17e>
 80079d0:	b1b0      	cbz	r0, 8007a00 <_svfiprintf_r+0x110>
 80079d2:	9207      	str	r2, [sp, #28]
 80079d4:	e014      	b.n	8007a00 <_svfiprintf_r+0x110>
 80079d6:	eba0 0308 	sub.w	r3, r0, r8
 80079da:	fa09 f303 	lsl.w	r3, r9, r3
 80079de:	4313      	orrs	r3, r2
 80079e0:	9304      	str	r3, [sp, #16]
 80079e2:	46a2      	mov	sl, r4
 80079e4:	e7d2      	b.n	800798c <_svfiprintf_r+0x9c>
 80079e6:	9b03      	ldr	r3, [sp, #12]
 80079e8:	1d19      	adds	r1, r3, #4
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	9103      	str	r1, [sp, #12]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	bfbb      	ittet	lt
 80079f2:	425b      	neglt	r3, r3
 80079f4:	f042 0202 	orrlt.w	r2, r2, #2
 80079f8:	9307      	strge	r3, [sp, #28]
 80079fa:	9307      	strlt	r3, [sp, #28]
 80079fc:	bfb8      	it	lt
 80079fe:	9204      	strlt	r2, [sp, #16]
 8007a00:	7823      	ldrb	r3, [r4, #0]
 8007a02:	2b2e      	cmp	r3, #46	; 0x2e
 8007a04:	d10c      	bne.n	8007a20 <_svfiprintf_r+0x130>
 8007a06:	7863      	ldrb	r3, [r4, #1]
 8007a08:	2b2a      	cmp	r3, #42	; 0x2a
 8007a0a:	d135      	bne.n	8007a78 <_svfiprintf_r+0x188>
 8007a0c:	9b03      	ldr	r3, [sp, #12]
 8007a0e:	1d1a      	adds	r2, r3, #4
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	9203      	str	r2, [sp, #12]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	bfb8      	it	lt
 8007a18:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a1c:	3402      	adds	r4, #2
 8007a1e:	9305      	str	r3, [sp, #20]
 8007a20:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007aec <_svfiprintf_r+0x1fc>
 8007a24:	7821      	ldrb	r1, [r4, #0]
 8007a26:	2203      	movs	r2, #3
 8007a28:	4650      	mov	r0, sl
 8007a2a:	f7f8 fbe1 	bl	80001f0 <memchr>
 8007a2e:	b140      	cbz	r0, 8007a42 <_svfiprintf_r+0x152>
 8007a30:	2340      	movs	r3, #64	; 0x40
 8007a32:	eba0 000a 	sub.w	r0, r0, sl
 8007a36:	fa03 f000 	lsl.w	r0, r3, r0
 8007a3a:	9b04      	ldr	r3, [sp, #16]
 8007a3c:	4303      	orrs	r3, r0
 8007a3e:	3401      	adds	r4, #1
 8007a40:	9304      	str	r3, [sp, #16]
 8007a42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a46:	4826      	ldr	r0, [pc, #152]	; (8007ae0 <_svfiprintf_r+0x1f0>)
 8007a48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a4c:	2206      	movs	r2, #6
 8007a4e:	f7f8 fbcf 	bl	80001f0 <memchr>
 8007a52:	2800      	cmp	r0, #0
 8007a54:	d038      	beq.n	8007ac8 <_svfiprintf_r+0x1d8>
 8007a56:	4b23      	ldr	r3, [pc, #140]	; (8007ae4 <_svfiprintf_r+0x1f4>)
 8007a58:	bb1b      	cbnz	r3, 8007aa2 <_svfiprintf_r+0x1b2>
 8007a5a:	9b03      	ldr	r3, [sp, #12]
 8007a5c:	3307      	adds	r3, #7
 8007a5e:	f023 0307 	bic.w	r3, r3, #7
 8007a62:	3308      	adds	r3, #8
 8007a64:	9303      	str	r3, [sp, #12]
 8007a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a68:	4433      	add	r3, r6
 8007a6a:	9309      	str	r3, [sp, #36]	; 0x24
 8007a6c:	e767      	b.n	800793e <_svfiprintf_r+0x4e>
 8007a6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a72:	460c      	mov	r4, r1
 8007a74:	2001      	movs	r0, #1
 8007a76:	e7a5      	b.n	80079c4 <_svfiprintf_r+0xd4>
 8007a78:	2300      	movs	r3, #0
 8007a7a:	3401      	adds	r4, #1
 8007a7c:	9305      	str	r3, [sp, #20]
 8007a7e:	4619      	mov	r1, r3
 8007a80:	f04f 0c0a 	mov.w	ip, #10
 8007a84:	4620      	mov	r0, r4
 8007a86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a8a:	3a30      	subs	r2, #48	; 0x30
 8007a8c:	2a09      	cmp	r2, #9
 8007a8e:	d903      	bls.n	8007a98 <_svfiprintf_r+0x1a8>
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d0c5      	beq.n	8007a20 <_svfiprintf_r+0x130>
 8007a94:	9105      	str	r1, [sp, #20]
 8007a96:	e7c3      	b.n	8007a20 <_svfiprintf_r+0x130>
 8007a98:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a9c:	4604      	mov	r4, r0
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e7f0      	b.n	8007a84 <_svfiprintf_r+0x194>
 8007aa2:	ab03      	add	r3, sp, #12
 8007aa4:	9300      	str	r3, [sp, #0]
 8007aa6:	462a      	mov	r2, r5
 8007aa8:	4b0f      	ldr	r3, [pc, #60]	; (8007ae8 <_svfiprintf_r+0x1f8>)
 8007aaa:	a904      	add	r1, sp, #16
 8007aac:	4638      	mov	r0, r7
 8007aae:	f3af 8000 	nop.w
 8007ab2:	1c42      	adds	r2, r0, #1
 8007ab4:	4606      	mov	r6, r0
 8007ab6:	d1d6      	bne.n	8007a66 <_svfiprintf_r+0x176>
 8007ab8:	89ab      	ldrh	r3, [r5, #12]
 8007aba:	065b      	lsls	r3, r3, #25
 8007abc:	f53f af2c 	bmi.w	8007918 <_svfiprintf_r+0x28>
 8007ac0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ac2:	b01d      	add	sp, #116	; 0x74
 8007ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ac8:	ab03      	add	r3, sp, #12
 8007aca:	9300      	str	r3, [sp, #0]
 8007acc:	462a      	mov	r2, r5
 8007ace:	4b06      	ldr	r3, [pc, #24]	; (8007ae8 <_svfiprintf_r+0x1f8>)
 8007ad0:	a904      	add	r1, sp, #16
 8007ad2:	4638      	mov	r0, r7
 8007ad4:	f000 f87a 	bl	8007bcc <_printf_i>
 8007ad8:	e7eb      	b.n	8007ab2 <_svfiprintf_r+0x1c2>
 8007ada:	bf00      	nop
 8007adc:	08009014 	.word	0x08009014
 8007ae0:	0800901e 	.word	0x0800901e
 8007ae4:	00000000 	.word	0x00000000
 8007ae8:	08007839 	.word	0x08007839
 8007aec:	0800901a 	.word	0x0800901a

08007af0 <_printf_common>:
 8007af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007af4:	4616      	mov	r6, r2
 8007af6:	4699      	mov	r9, r3
 8007af8:	688a      	ldr	r2, [r1, #8]
 8007afa:	690b      	ldr	r3, [r1, #16]
 8007afc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b00:	4293      	cmp	r3, r2
 8007b02:	bfb8      	it	lt
 8007b04:	4613      	movlt	r3, r2
 8007b06:	6033      	str	r3, [r6, #0]
 8007b08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b0c:	4607      	mov	r7, r0
 8007b0e:	460c      	mov	r4, r1
 8007b10:	b10a      	cbz	r2, 8007b16 <_printf_common+0x26>
 8007b12:	3301      	adds	r3, #1
 8007b14:	6033      	str	r3, [r6, #0]
 8007b16:	6823      	ldr	r3, [r4, #0]
 8007b18:	0699      	lsls	r1, r3, #26
 8007b1a:	bf42      	ittt	mi
 8007b1c:	6833      	ldrmi	r3, [r6, #0]
 8007b1e:	3302      	addmi	r3, #2
 8007b20:	6033      	strmi	r3, [r6, #0]
 8007b22:	6825      	ldr	r5, [r4, #0]
 8007b24:	f015 0506 	ands.w	r5, r5, #6
 8007b28:	d106      	bne.n	8007b38 <_printf_common+0x48>
 8007b2a:	f104 0a19 	add.w	sl, r4, #25
 8007b2e:	68e3      	ldr	r3, [r4, #12]
 8007b30:	6832      	ldr	r2, [r6, #0]
 8007b32:	1a9b      	subs	r3, r3, r2
 8007b34:	42ab      	cmp	r3, r5
 8007b36:	dc26      	bgt.n	8007b86 <_printf_common+0x96>
 8007b38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007b3c:	1e13      	subs	r3, r2, #0
 8007b3e:	6822      	ldr	r2, [r4, #0]
 8007b40:	bf18      	it	ne
 8007b42:	2301      	movne	r3, #1
 8007b44:	0692      	lsls	r2, r2, #26
 8007b46:	d42b      	bmi.n	8007ba0 <_printf_common+0xb0>
 8007b48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b4c:	4649      	mov	r1, r9
 8007b4e:	4638      	mov	r0, r7
 8007b50:	47c0      	blx	r8
 8007b52:	3001      	adds	r0, #1
 8007b54:	d01e      	beq.n	8007b94 <_printf_common+0xa4>
 8007b56:	6823      	ldr	r3, [r4, #0]
 8007b58:	68e5      	ldr	r5, [r4, #12]
 8007b5a:	6832      	ldr	r2, [r6, #0]
 8007b5c:	f003 0306 	and.w	r3, r3, #6
 8007b60:	2b04      	cmp	r3, #4
 8007b62:	bf08      	it	eq
 8007b64:	1aad      	subeq	r5, r5, r2
 8007b66:	68a3      	ldr	r3, [r4, #8]
 8007b68:	6922      	ldr	r2, [r4, #16]
 8007b6a:	bf0c      	ite	eq
 8007b6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b70:	2500      	movne	r5, #0
 8007b72:	4293      	cmp	r3, r2
 8007b74:	bfc4      	itt	gt
 8007b76:	1a9b      	subgt	r3, r3, r2
 8007b78:	18ed      	addgt	r5, r5, r3
 8007b7a:	2600      	movs	r6, #0
 8007b7c:	341a      	adds	r4, #26
 8007b7e:	42b5      	cmp	r5, r6
 8007b80:	d11a      	bne.n	8007bb8 <_printf_common+0xc8>
 8007b82:	2000      	movs	r0, #0
 8007b84:	e008      	b.n	8007b98 <_printf_common+0xa8>
 8007b86:	2301      	movs	r3, #1
 8007b88:	4652      	mov	r2, sl
 8007b8a:	4649      	mov	r1, r9
 8007b8c:	4638      	mov	r0, r7
 8007b8e:	47c0      	blx	r8
 8007b90:	3001      	adds	r0, #1
 8007b92:	d103      	bne.n	8007b9c <_printf_common+0xac>
 8007b94:	f04f 30ff 	mov.w	r0, #4294967295
 8007b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b9c:	3501      	adds	r5, #1
 8007b9e:	e7c6      	b.n	8007b2e <_printf_common+0x3e>
 8007ba0:	18e1      	adds	r1, r4, r3
 8007ba2:	1c5a      	adds	r2, r3, #1
 8007ba4:	2030      	movs	r0, #48	; 0x30
 8007ba6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007baa:	4422      	add	r2, r4
 8007bac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007bb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007bb4:	3302      	adds	r3, #2
 8007bb6:	e7c7      	b.n	8007b48 <_printf_common+0x58>
 8007bb8:	2301      	movs	r3, #1
 8007bba:	4622      	mov	r2, r4
 8007bbc:	4649      	mov	r1, r9
 8007bbe:	4638      	mov	r0, r7
 8007bc0:	47c0      	blx	r8
 8007bc2:	3001      	adds	r0, #1
 8007bc4:	d0e6      	beq.n	8007b94 <_printf_common+0xa4>
 8007bc6:	3601      	adds	r6, #1
 8007bc8:	e7d9      	b.n	8007b7e <_printf_common+0x8e>
	...

08007bcc <_printf_i>:
 8007bcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007bd0:	7e0f      	ldrb	r7, [r1, #24]
 8007bd2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007bd4:	2f78      	cmp	r7, #120	; 0x78
 8007bd6:	4691      	mov	r9, r2
 8007bd8:	4680      	mov	r8, r0
 8007bda:	460c      	mov	r4, r1
 8007bdc:	469a      	mov	sl, r3
 8007bde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007be2:	d807      	bhi.n	8007bf4 <_printf_i+0x28>
 8007be4:	2f62      	cmp	r7, #98	; 0x62
 8007be6:	d80a      	bhi.n	8007bfe <_printf_i+0x32>
 8007be8:	2f00      	cmp	r7, #0
 8007bea:	f000 80d8 	beq.w	8007d9e <_printf_i+0x1d2>
 8007bee:	2f58      	cmp	r7, #88	; 0x58
 8007bf0:	f000 80a3 	beq.w	8007d3a <_printf_i+0x16e>
 8007bf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007bf8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007bfc:	e03a      	b.n	8007c74 <_printf_i+0xa8>
 8007bfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c02:	2b15      	cmp	r3, #21
 8007c04:	d8f6      	bhi.n	8007bf4 <_printf_i+0x28>
 8007c06:	a101      	add	r1, pc, #4	; (adr r1, 8007c0c <_printf_i+0x40>)
 8007c08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c0c:	08007c65 	.word	0x08007c65
 8007c10:	08007c79 	.word	0x08007c79
 8007c14:	08007bf5 	.word	0x08007bf5
 8007c18:	08007bf5 	.word	0x08007bf5
 8007c1c:	08007bf5 	.word	0x08007bf5
 8007c20:	08007bf5 	.word	0x08007bf5
 8007c24:	08007c79 	.word	0x08007c79
 8007c28:	08007bf5 	.word	0x08007bf5
 8007c2c:	08007bf5 	.word	0x08007bf5
 8007c30:	08007bf5 	.word	0x08007bf5
 8007c34:	08007bf5 	.word	0x08007bf5
 8007c38:	08007d85 	.word	0x08007d85
 8007c3c:	08007ca9 	.word	0x08007ca9
 8007c40:	08007d67 	.word	0x08007d67
 8007c44:	08007bf5 	.word	0x08007bf5
 8007c48:	08007bf5 	.word	0x08007bf5
 8007c4c:	08007da7 	.word	0x08007da7
 8007c50:	08007bf5 	.word	0x08007bf5
 8007c54:	08007ca9 	.word	0x08007ca9
 8007c58:	08007bf5 	.word	0x08007bf5
 8007c5c:	08007bf5 	.word	0x08007bf5
 8007c60:	08007d6f 	.word	0x08007d6f
 8007c64:	682b      	ldr	r3, [r5, #0]
 8007c66:	1d1a      	adds	r2, r3, #4
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	602a      	str	r2, [r5, #0]
 8007c6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c74:	2301      	movs	r3, #1
 8007c76:	e0a3      	b.n	8007dc0 <_printf_i+0x1f4>
 8007c78:	6820      	ldr	r0, [r4, #0]
 8007c7a:	6829      	ldr	r1, [r5, #0]
 8007c7c:	0606      	lsls	r6, r0, #24
 8007c7e:	f101 0304 	add.w	r3, r1, #4
 8007c82:	d50a      	bpl.n	8007c9a <_printf_i+0xce>
 8007c84:	680e      	ldr	r6, [r1, #0]
 8007c86:	602b      	str	r3, [r5, #0]
 8007c88:	2e00      	cmp	r6, #0
 8007c8a:	da03      	bge.n	8007c94 <_printf_i+0xc8>
 8007c8c:	232d      	movs	r3, #45	; 0x2d
 8007c8e:	4276      	negs	r6, r6
 8007c90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c94:	485e      	ldr	r0, [pc, #376]	; (8007e10 <_printf_i+0x244>)
 8007c96:	230a      	movs	r3, #10
 8007c98:	e019      	b.n	8007cce <_printf_i+0x102>
 8007c9a:	680e      	ldr	r6, [r1, #0]
 8007c9c:	602b      	str	r3, [r5, #0]
 8007c9e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007ca2:	bf18      	it	ne
 8007ca4:	b236      	sxthne	r6, r6
 8007ca6:	e7ef      	b.n	8007c88 <_printf_i+0xbc>
 8007ca8:	682b      	ldr	r3, [r5, #0]
 8007caa:	6820      	ldr	r0, [r4, #0]
 8007cac:	1d19      	adds	r1, r3, #4
 8007cae:	6029      	str	r1, [r5, #0]
 8007cb0:	0601      	lsls	r1, r0, #24
 8007cb2:	d501      	bpl.n	8007cb8 <_printf_i+0xec>
 8007cb4:	681e      	ldr	r6, [r3, #0]
 8007cb6:	e002      	b.n	8007cbe <_printf_i+0xf2>
 8007cb8:	0646      	lsls	r6, r0, #25
 8007cba:	d5fb      	bpl.n	8007cb4 <_printf_i+0xe8>
 8007cbc:	881e      	ldrh	r6, [r3, #0]
 8007cbe:	4854      	ldr	r0, [pc, #336]	; (8007e10 <_printf_i+0x244>)
 8007cc0:	2f6f      	cmp	r7, #111	; 0x6f
 8007cc2:	bf0c      	ite	eq
 8007cc4:	2308      	moveq	r3, #8
 8007cc6:	230a      	movne	r3, #10
 8007cc8:	2100      	movs	r1, #0
 8007cca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007cce:	6865      	ldr	r5, [r4, #4]
 8007cd0:	60a5      	str	r5, [r4, #8]
 8007cd2:	2d00      	cmp	r5, #0
 8007cd4:	bfa2      	ittt	ge
 8007cd6:	6821      	ldrge	r1, [r4, #0]
 8007cd8:	f021 0104 	bicge.w	r1, r1, #4
 8007cdc:	6021      	strge	r1, [r4, #0]
 8007cde:	b90e      	cbnz	r6, 8007ce4 <_printf_i+0x118>
 8007ce0:	2d00      	cmp	r5, #0
 8007ce2:	d04d      	beq.n	8007d80 <_printf_i+0x1b4>
 8007ce4:	4615      	mov	r5, r2
 8007ce6:	fbb6 f1f3 	udiv	r1, r6, r3
 8007cea:	fb03 6711 	mls	r7, r3, r1, r6
 8007cee:	5dc7      	ldrb	r7, [r0, r7]
 8007cf0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007cf4:	4637      	mov	r7, r6
 8007cf6:	42bb      	cmp	r3, r7
 8007cf8:	460e      	mov	r6, r1
 8007cfa:	d9f4      	bls.n	8007ce6 <_printf_i+0x11a>
 8007cfc:	2b08      	cmp	r3, #8
 8007cfe:	d10b      	bne.n	8007d18 <_printf_i+0x14c>
 8007d00:	6823      	ldr	r3, [r4, #0]
 8007d02:	07de      	lsls	r6, r3, #31
 8007d04:	d508      	bpl.n	8007d18 <_printf_i+0x14c>
 8007d06:	6923      	ldr	r3, [r4, #16]
 8007d08:	6861      	ldr	r1, [r4, #4]
 8007d0a:	4299      	cmp	r1, r3
 8007d0c:	bfde      	ittt	le
 8007d0e:	2330      	movle	r3, #48	; 0x30
 8007d10:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d14:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007d18:	1b52      	subs	r2, r2, r5
 8007d1a:	6122      	str	r2, [r4, #16]
 8007d1c:	f8cd a000 	str.w	sl, [sp]
 8007d20:	464b      	mov	r3, r9
 8007d22:	aa03      	add	r2, sp, #12
 8007d24:	4621      	mov	r1, r4
 8007d26:	4640      	mov	r0, r8
 8007d28:	f7ff fee2 	bl	8007af0 <_printf_common>
 8007d2c:	3001      	adds	r0, #1
 8007d2e:	d14c      	bne.n	8007dca <_printf_i+0x1fe>
 8007d30:	f04f 30ff 	mov.w	r0, #4294967295
 8007d34:	b004      	add	sp, #16
 8007d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d3a:	4835      	ldr	r0, [pc, #212]	; (8007e10 <_printf_i+0x244>)
 8007d3c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007d40:	6829      	ldr	r1, [r5, #0]
 8007d42:	6823      	ldr	r3, [r4, #0]
 8007d44:	f851 6b04 	ldr.w	r6, [r1], #4
 8007d48:	6029      	str	r1, [r5, #0]
 8007d4a:	061d      	lsls	r5, r3, #24
 8007d4c:	d514      	bpl.n	8007d78 <_printf_i+0x1ac>
 8007d4e:	07df      	lsls	r7, r3, #31
 8007d50:	bf44      	itt	mi
 8007d52:	f043 0320 	orrmi.w	r3, r3, #32
 8007d56:	6023      	strmi	r3, [r4, #0]
 8007d58:	b91e      	cbnz	r6, 8007d62 <_printf_i+0x196>
 8007d5a:	6823      	ldr	r3, [r4, #0]
 8007d5c:	f023 0320 	bic.w	r3, r3, #32
 8007d60:	6023      	str	r3, [r4, #0]
 8007d62:	2310      	movs	r3, #16
 8007d64:	e7b0      	b.n	8007cc8 <_printf_i+0xfc>
 8007d66:	6823      	ldr	r3, [r4, #0]
 8007d68:	f043 0320 	orr.w	r3, r3, #32
 8007d6c:	6023      	str	r3, [r4, #0]
 8007d6e:	2378      	movs	r3, #120	; 0x78
 8007d70:	4828      	ldr	r0, [pc, #160]	; (8007e14 <_printf_i+0x248>)
 8007d72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007d76:	e7e3      	b.n	8007d40 <_printf_i+0x174>
 8007d78:	0659      	lsls	r1, r3, #25
 8007d7a:	bf48      	it	mi
 8007d7c:	b2b6      	uxthmi	r6, r6
 8007d7e:	e7e6      	b.n	8007d4e <_printf_i+0x182>
 8007d80:	4615      	mov	r5, r2
 8007d82:	e7bb      	b.n	8007cfc <_printf_i+0x130>
 8007d84:	682b      	ldr	r3, [r5, #0]
 8007d86:	6826      	ldr	r6, [r4, #0]
 8007d88:	6961      	ldr	r1, [r4, #20]
 8007d8a:	1d18      	adds	r0, r3, #4
 8007d8c:	6028      	str	r0, [r5, #0]
 8007d8e:	0635      	lsls	r5, r6, #24
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	d501      	bpl.n	8007d98 <_printf_i+0x1cc>
 8007d94:	6019      	str	r1, [r3, #0]
 8007d96:	e002      	b.n	8007d9e <_printf_i+0x1d2>
 8007d98:	0670      	lsls	r0, r6, #25
 8007d9a:	d5fb      	bpl.n	8007d94 <_printf_i+0x1c8>
 8007d9c:	8019      	strh	r1, [r3, #0]
 8007d9e:	2300      	movs	r3, #0
 8007da0:	6123      	str	r3, [r4, #16]
 8007da2:	4615      	mov	r5, r2
 8007da4:	e7ba      	b.n	8007d1c <_printf_i+0x150>
 8007da6:	682b      	ldr	r3, [r5, #0]
 8007da8:	1d1a      	adds	r2, r3, #4
 8007daa:	602a      	str	r2, [r5, #0]
 8007dac:	681d      	ldr	r5, [r3, #0]
 8007dae:	6862      	ldr	r2, [r4, #4]
 8007db0:	2100      	movs	r1, #0
 8007db2:	4628      	mov	r0, r5
 8007db4:	f7f8 fa1c 	bl	80001f0 <memchr>
 8007db8:	b108      	cbz	r0, 8007dbe <_printf_i+0x1f2>
 8007dba:	1b40      	subs	r0, r0, r5
 8007dbc:	6060      	str	r0, [r4, #4]
 8007dbe:	6863      	ldr	r3, [r4, #4]
 8007dc0:	6123      	str	r3, [r4, #16]
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dc8:	e7a8      	b.n	8007d1c <_printf_i+0x150>
 8007dca:	6923      	ldr	r3, [r4, #16]
 8007dcc:	462a      	mov	r2, r5
 8007dce:	4649      	mov	r1, r9
 8007dd0:	4640      	mov	r0, r8
 8007dd2:	47d0      	blx	sl
 8007dd4:	3001      	adds	r0, #1
 8007dd6:	d0ab      	beq.n	8007d30 <_printf_i+0x164>
 8007dd8:	6823      	ldr	r3, [r4, #0]
 8007dda:	079b      	lsls	r3, r3, #30
 8007ddc:	d413      	bmi.n	8007e06 <_printf_i+0x23a>
 8007dde:	68e0      	ldr	r0, [r4, #12]
 8007de0:	9b03      	ldr	r3, [sp, #12]
 8007de2:	4298      	cmp	r0, r3
 8007de4:	bfb8      	it	lt
 8007de6:	4618      	movlt	r0, r3
 8007de8:	e7a4      	b.n	8007d34 <_printf_i+0x168>
 8007dea:	2301      	movs	r3, #1
 8007dec:	4632      	mov	r2, r6
 8007dee:	4649      	mov	r1, r9
 8007df0:	4640      	mov	r0, r8
 8007df2:	47d0      	blx	sl
 8007df4:	3001      	adds	r0, #1
 8007df6:	d09b      	beq.n	8007d30 <_printf_i+0x164>
 8007df8:	3501      	adds	r5, #1
 8007dfa:	68e3      	ldr	r3, [r4, #12]
 8007dfc:	9903      	ldr	r1, [sp, #12]
 8007dfe:	1a5b      	subs	r3, r3, r1
 8007e00:	42ab      	cmp	r3, r5
 8007e02:	dcf2      	bgt.n	8007dea <_printf_i+0x21e>
 8007e04:	e7eb      	b.n	8007dde <_printf_i+0x212>
 8007e06:	2500      	movs	r5, #0
 8007e08:	f104 0619 	add.w	r6, r4, #25
 8007e0c:	e7f5      	b.n	8007dfa <_printf_i+0x22e>
 8007e0e:	bf00      	nop
 8007e10:	08009025 	.word	0x08009025
 8007e14:	08009036 	.word	0x08009036

08007e18 <memcpy>:
 8007e18:	440a      	add	r2, r1
 8007e1a:	4291      	cmp	r1, r2
 8007e1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e20:	d100      	bne.n	8007e24 <memcpy+0xc>
 8007e22:	4770      	bx	lr
 8007e24:	b510      	push	{r4, lr}
 8007e26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e2e:	4291      	cmp	r1, r2
 8007e30:	d1f9      	bne.n	8007e26 <memcpy+0xe>
 8007e32:	bd10      	pop	{r4, pc}

08007e34 <memmove>:
 8007e34:	4288      	cmp	r0, r1
 8007e36:	b510      	push	{r4, lr}
 8007e38:	eb01 0402 	add.w	r4, r1, r2
 8007e3c:	d902      	bls.n	8007e44 <memmove+0x10>
 8007e3e:	4284      	cmp	r4, r0
 8007e40:	4623      	mov	r3, r4
 8007e42:	d807      	bhi.n	8007e54 <memmove+0x20>
 8007e44:	1e43      	subs	r3, r0, #1
 8007e46:	42a1      	cmp	r1, r4
 8007e48:	d008      	beq.n	8007e5c <memmove+0x28>
 8007e4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e52:	e7f8      	b.n	8007e46 <memmove+0x12>
 8007e54:	4402      	add	r2, r0
 8007e56:	4601      	mov	r1, r0
 8007e58:	428a      	cmp	r2, r1
 8007e5a:	d100      	bne.n	8007e5e <memmove+0x2a>
 8007e5c:	bd10      	pop	{r4, pc}
 8007e5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e66:	e7f7      	b.n	8007e58 <memmove+0x24>

08007e68 <_free_r>:
 8007e68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e6a:	2900      	cmp	r1, #0
 8007e6c:	d044      	beq.n	8007ef8 <_free_r+0x90>
 8007e6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e72:	9001      	str	r0, [sp, #4]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	f1a1 0404 	sub.w	r4, r1, #4
 8007e7a:	bfb8      	it	lt
 8007e7c:	18e4      	addlt	r4, r4, r3
 8007e7e:	f000 f913 	bl	80080a8 <__malloc_lock>
 8007e82:	4a1e      	ldr	r2, [pc, #120]	; (8007efc <_free_r+0x94>)
 8007e84:	9801      	ldr	r0, [sp, #4]
 8007e86:	6813      	ldr	r3, [r2, #0]
 8007e88:	b933      	cbnz	r3, 8007e98 <_free_r+0x30>
 8007e8a:	6063      	str	r3, [r4, #4]
 8007e8c:	6014      	str	r4, [r2, #0]
 8007e8e:	b003      	add	sp, #12
 8007e90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e94:	f000 b90e 	b.w	80080b4 <__malloc_unlock>
 8007e98:	42a3      	cmp	r3, r4
 8007e9a:	d908      	bls.n	8007eae <_free_r+0x46>
 8007e9c:	6825      	ldr	r5, [r4, #0]
 8007e9e:	1961      	adds	r1, r4, r5
 8007ea0:	428b      	cmp	r3, r1
 8007ea2:	bf01      	itttt	eq
 8007ea4:	6819      	ldreq	r1, [r3, #0]
 8007ea6:	685b      	ldreq	r3, [r3, #4]
 8007ea8:	1949      	addeq	r1, r1, r5
 8007eaa:	6021      	streq	r1, [r4, #0]
 8007eac:	e7ed      	b.n	8007e8a <_free_r+0x22>
 8007eae:	461a      	mov	r2, r3
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	b10b      	cbz	r3, 8007eb8 <_free_r+0x50>
 8007eb4:	42a3      	cmp	r3, r4
 8007eb6:	d9fa      	bls.n	8007eae <_free_r+0x46>
 8007eb8:	6811      	ldr	r1, [r2, #0]
 8007eba:	1855      	adds	r5, r2, r1
 8007ebc:	42a5      	cmp	r5, r4
 8007ebe:	d10b      	bne.n	8007ed8 <_free_r+0x70>
 8007ec0:	6824      	ldr	r4, [r4, #0]
 8007ec2:	4421      	add	r1, r4
 8007ec4:	1854      	adds	r4, r2, r1
 8007ec6:	42a3      	cmp	r3, r4
 8007ec8:	6011      	str	r1, [r2, #0]
 8007eca:	d1e0      	bne.n	8007e8e <_free_r+0x26>
 8007ecc:	681c      	ldr	r4, [r3, #0]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	6053      	str	r3, [r2, #4]
 8007ed2:	4421      	add	r1, r4
 8007ed4:	6011      	str	r1, [r2, #0]
 8007ed6:	e7da      	b.n	8007e8e <_free_r+0x26>
 8007ed8:	d902      	bls.n	8007ee0 <_free_r+0x78>
 8007eda:	230c      	movs	r3, #12
 8007edc:	6003      	str	r3, [r0, #0]
 8007ede:	e7d6      	b.n	8007e8e <_free_r+0x26>
 8007ee0:	6825      	ldr	r5, [r4, #0]
 8007ee2:	1961      	adds	r1, r4, r5
 8007ee4:	428b      	cmp	r3, r1
 8007ee6:	bf04      	itt	eq
 8007ee8:	6819      	ldreq	r1, [r3, #0]
 8007eea:	685b      	ldreq	r3, [r3, #4]
 8007eec:	6063      	str	r3, [r4, #4]
 8007eee:	bf04      	itt	eq
 8007ef0:	1949      	addeq	r1, r1, r5
 8007ef2:	6021      	streq	r1, [r4, #0]
 8007ef4:	6054      	str	r4, [r2, #4]
 8007ef6:	e7ca      	b.n	8007e8e <_free_r+0x26>
 8007ef8:	b003      	add	sp, #12
 8007efa:	bd30      	pop	{r4, r5, pc}
 8007efc:	20000388 	.word	0x20000388

08007f00 <sbrk_aligned>:
 8007f00:	b570      	push	{r4, r5, r6, lr}
 8007f02:	4e0e      	ldr	r6, [pc, #56]	; (8007f3c <sbrk_aligned+0x3c>)
 8007f04:	460c      	mov	r4, r1
 8007f06:	6831      	ldr	r1, [r6, #0]
 8007f08:	4605      	mov	r5, r0
 8007f0a:	b911      	cbnz	r1, 8007f12 <sbrk_aligned+0x12>
 8007f0c:	f000 f8bc 	bl	8008088 <_sbrk_r>
 8007f10:	6030      	str	r0, [r6, #0]
 8007f12:	4621      	mov	r1, r4
 8007f14:	4628      	mov	r0, r5
 8007f16:	f000 f8b7 	bl	8008088 <_sbrk_r>
 8007f1a:	1c43      	adds	r3, r0, #1
 8007f1c:	d00a      	beq.n	8007f34 <sbrk_aligned+0x34>
 8007f1e:	1cc4      	adds	r4, r0, #3
 8007f20:	f024 0403 	bic.w	r4, r4, #3
 8007f24:	42a0      	cmp	r0, r4
 8007f26:	d007      	beq.n	8007f38 <sbrk_aligned+0x38>
 8007f28:	1a21      	subs	r1, r4, r0
 8007f2a:	4628      	mov	r0, r5
 8007f2c:	f000 f8ac 	bl	8008088 <_sbrk_r>
 8007f30:	3001      	adds	r0, #1
 8007f32:	d101      	bne.n	8007f38 <sbrk_aligned+0x38>
 8007f34:	f04f 34ff 	mov.w	r4, #4294967295
 8007f38:	4620      	mov	r0, r4
 8007f3a:	bd70      	pop	{r4, r5, r6, pc}
 8007f3c:	2000038c 	.word	0x2000038c

08007f40 <_malloc_r>:
 8007f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f44:	1ccd      	adds	r5, r1, #3
 8007f46:	f025 0503 	bic.w	r5, r5, #3
 8007f4a:	3508      	adds	r5, #8
 8007f4c:	2d0c      	cmp	r5, #12
 8007f4e:	bf38      	it	cc
 8007f50:	250c      	movcc	r5, #12
 8007f52:	2d00      	cmp	r5, #0
 8007f54:	4607      	mov	r7, r0
 8007f56:	db01      	blt.n	8007f5c <_malloc_r+0x1c>
 8007f58:	42a9      	cmp	r1, r5
 8007f5a:	d905      	bls.n	8007f68 <_malloc_r+0x28>
 8007f5c:	230c      	movs	r3, #12
 8007f5e:	603b      	str	r3, [r7, #0]
 8007f60:	2600      	movs	r6, #0
 8007f62:	4630      	mov	r0, r6
 8007f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f68:	4e2e      	ldr	r6, [pc, #184]	; (8008024 <_malloc_r+0xe4>)
 8007f6a:	f000 f89d 	bl	80080a8 <__malloc_lock>
 8007f6e:	6833      	ldr	r3, [r6, #0]
 8007f70:	461c      	mov	r4, r3
 8007f72:	bb34      	cbnz	r4, 8007fc2 <_malloc_r+0x82>
 8007f74:	4629      	mov	r1, r5
 8007f76:	4638      	mov	r0, r7
 8007f78:	f7ff ffc2 	bl	8007f00 <sbrk_aligned>
 8007f7c:	1c43      	adds	r3, r0, #1
 8007f7e:	4604      	mov	r4, r0
 8007f80:	d14d      	bne.n	800801e <_malloc_r+0xde>
 8007f82:	6834      	ldr	r4, [r6, #0]
 8007f84:	4626      	mov	r6, r4
 8007f86:	2e00      	cmp	r6, #0
 8007f88:	d140      	bne.n	800800c <_malloc_r+0xcc>
 8007f8a:	6823      	ldr	r3, [r4, #0]
 8007f8c:	4631      	mov	r1, r6
 8007f8e:	4638      	mov	r0, r7
 8007f90:	eb04 0803 	add.w	r8, r4, r3
 8007f94:	f000 f878 	bl	8008088 <_sbrk_r>
 8007f98:	4580      	cmp	r8, r0
 8007f9a:	d13a      	bne.n	8008012 <_malloc_r+0xd2>
 8007f9c:	6821      	ldr	r1, [r4, #0]
 8007f9e:	3503      	adds	r5, #3
 8007fa0:	1a6d      	subs	r5, r5, r1
 8007fa2:	f025 0503 	bic.w	r5, r5, #3
 8007fa6:	3508      	adds	r5, #8
 8007fa8:	2d0c      	cmp	r5, #12
 8007faa:	bf38      	it	cc
 8007fac:	250c      	movcc	r5, #12
 8007fae:	4629      	mov	r1, r5
 8007fb0:	4638      	mov	r0, r7
 8007fb2:	f7ff ffa5 	bl	8007f00 <sbrk_aligned>
 8007fb6:	3001      	adds	r0, #1
 8007fb8:	d02b      	beq.n	8008012 <_malloc_r+0xd2>
 8007fba:	6823      	ldr	r3, [r4, #0]
 8007fbc:	442b      	add	r3, r5
 8007fbe:	6023      	str	r3, [r4, #0]
 8007fc0:	e00e      	b.n	8007fe0 <_malloc_r+0xa0>
 8007fc2:	6822      	ldr	r2, [r4, #0]
 8007fc4:	1b52      	subs	r2, r2, r5
 8007fc6:	d41e      	bmi.n	8008006 <_malloc_r+0xc6>
 8007fc8:	2a0b      	cmp	r2, #11
 8007fca:	d916      	bls.n	8007ffa <_malloc_r+0xba>
 8007fcc:	1961      	adds	r1, r4, r5
 8007fce:	42a3      	cmp	r3, r4
 8007fd0:	6025      	str	r5, [r4, #0]
 8007fd2:	bf18      	it	ne
 8007fd4:	6059      	strne	r1, [r3, #4]
 8007fd6:	6863      	ldr	r3, [r4, #4]
 8007fd8:	bf08      	it	eq
 8007fda:	6031      	streq	r1, [r6, #0]
 8007fdc:	5162      	str	r2, [r4, r5]
 8007fde:	604b      	str	r3, [r1, #4]
 8007fe0:	4638      	mov	r0, r7
 8007fe2:	f104 060b 	add.w	r6, r4, #11
 8007fe6:	f000 f865 	bl	80080b4 <__malloc_unlock>
 8007fea:	f026 0607 	bic.w	r6, r6, #7
 8007fee:	1d23      	adds	r3, r4, #4
 8007ff0:	1af2      	subs	r2, r6, r3
 8007ff2:	d0b6      	beq.n	8007f62 <_malloc_r+0x22>
 8007ff4:	1b9b      	subs	r3, r3, r6
 8007ff6:	50a3      	str	r3, [r4, r2]
 8007ff8:	e7b3      	b.n	8007f62 <_malloc_r+0x22>
 8007ffa:	6862      	ldr	r2, [r4, #4]
 8007ffc:	42a3      	cmp	r3, r4
 8007ffe:	bf0c      	ite	eq
 8008000:	6032      	streq	r2, [r6, #0]
 8008002:	605a      	strne	r2, [r3, #4]
 8008004:	e7ec      	b.n	8007fe0 <_malloc_r+0xa0>
 8008006:	4623      	mov	r3, r4
 8008008:	6864      	ldr	r4, [r4, #4]
 800800a:	e7b2      	b.n	8007f72 <_malloc_r+0x32>
 800800c:	4634      	mov	r4, r6
 800800e:	6876      	ldr	r6, [r6, #4]
 8008010:	e7b9      	b.n	8007f86 <_malloc_r+0x46>
 8008012:	230c      	movs	r3, #12
 8008014:	603b      	str	r3, [r7, #0]
 8008016:	4638      	mov	r0, r7
 8008018:	f000 f84c 	bl	80080b4 <__malloc_unlock>
 800801c:	e7a1      	b.n	8007f62 <_malloc_r+0x22>
 800801e:	6025      	str	r5, [r4, #0]
 8008020:	e7de      	b.n	8007fe0 <_malloc_r+0xa0>
 8008022:	bf00      	nop
 8008024:	20000388 	.word	0x20000388

08008028 <_realloc_r>:
 8008028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800802c:	4680      	mov	r8, r0
 800802e:	4614      	mov	r4, r2
 8008030:	460e      	mov	r6, r1
 8008032:	b921      	cbnz	r1, 800803e <_realloc_r+0x16>
 8008034:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008038:	4611      	mov	r1, r2
 800803a:	f7ff bf81 	b.w	8007f40 <_malloc_r>
 800803e:	b92a      	cbnz	r2, 800804c <_realloc_r+0x24>
 8008040:	f7ff ff12 	bl	8007e68 <_free_r>
 8008044:	4625      	mov	r5, r4
 8008046:	4628      	mov	r0, r5
 8008048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800804c:	f000 f838 	bl	80080c0 <_malloc_usable_size_r>
 8008050:	4284      	cmp	r4, r0
 8008052:	4607      	mov	r7, r0
 8008054:	d802      	bhi.n	800805c <_realloc_r+0x34>
 8008056:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800805a:	d812      	bhi.n	8008082 <_realloc_r+0x5a>
 800805c:	4621      	mov	r1, r4
 800805e:	4640      	mov	r0, r8
 8008060:	f7ff ff6e 	bl	8007f40 <_malloc_r>
 8008064:	4605      	mov	r5, r0
 8008066:	2800      	cmp	r0, #0
 8008068:	d0ed      	beq.n	8008046 <_realloc_r+0x1e>
 800806a:	42bc      	cmp	r4, r7
 800806c:	4622      	mov	r2, r4
 800806e:	4631      	mov	r1, r6
 8008070:	bf28      	it	cs
 8008072:	463a      	movcs	r2, r7
 8008074:	f7ff fed0 	bl	8007e18 <memcpy>
 8008078:	4631      	mov	r1, r6
 800807a:	4640      	mov	r0, r8
 800807c:	f7ff fef4 	bl	8007e68 <_free_r>
 8008080:	e7e1      	b.n	8008046 <_realloc_r+0x1e>
 8008082:	4635      	mov	r5, r6
 8008084:	e7df      	b.n	8008046 <_realloc_r+0x1e>
	...

08008088 <_sbrk_r>:
 8008088:	b538      	push	{r3, r4, r5, lr}
 800808a:	4d06      	ldr	r5, [pc, #24]	; (80080a4 <_sbrk_r+0x1c>)
 800808c:	2300      	movs	r3, #0
 800808e:	4604      	mov	r4, r0
 8008090:	4608      	mov	r0, r1
 8008092:	602b      	str	r3, [r5, #0]
 8008094:	f7fb fb7a 	bl	800378c <_sbrk>
 8008098:	1c43      	adds	r3, r0, #1
 800809a:	d102      	bne.n	80080a2 <_sbrk_r+0x1a>
 800809c:	682b      	ldr	r3, [r5, #0]
 800809e:	b103      	cbz	r3, 80080a2 <_sbrk_r+0x1a>
 80080a0:	6023      	str	r3, [r4, #0]
 80080a2:	bd38      	pop	{r3, r4, r5, pc}
 80080a4:	20000390 	.word	0x20000390

080080a8 <__malloc_lock>:
 80080a8:	4801      	ldr	r0, [pc, #4]	; (80080b0 <__malloc_lock+0x8>)
 80080aa:	f000 b811 	b.w	80080d0 <__retarget_lock_acquire_recursive>
 80080ae:	bf00      	nop
 80080b0:	20000394 	.word	0x20000394

080080b4 <__malloc_unlock>:
 80080b4:	4801      	ldr	r0, [pc, #4]	; (80080bc <__malloc_unlock+0x8>)
 80080b6:	f000 b80c 	b.w	80080d2 <__retarget_lock_release_recursive>
 80080ba:	bf00      	nop
 80080bc:	20000394 	.word	0x20000394

080080c0 <_malloc_usable_size_r>:
 80080c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080c4:	1f18      	subs	r0, r3, #4
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	bfbc      	itt	lt
 80080ca:	580b      	ldrlt	r3, [r1, r0]
 80080cc:	18c0      	addlt	r0, r0, r3
 80080ce:	4770      	bx	lr

080080d0 <__retarget_lock_acquire_recursive>:
 80080d0:	4770      	bx	lr

080080d2 <__retarget_lock_release_recursive>:
 80080d2:	4770      	bx	lr

080080d4 <pow>:
 80080d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080d6:	ed2d 8b02 	vpush	{d8}
 80080da:	eeb0 8a40 	vmov.f32	s16, s0
 80080de:	eef0 8a60 	vmov.f32	s17, s1
 80080e2:	ec55 4b11 	vmov	r4, r5, d1
 80080e6:	f000 f867 	bl	80081b8 <__ieee754_pow>
 80080ea:	4622      	mov	r2, r4
 80080ec:	462b      	mov	r3, r5
 80080ee:	4620      	mov	r0, r4
 80080f0:	4629      	mov	r1, r5
 80080f2:	ec57 6b10 	vmov	r6, r7, d0
 80080f6:	f7f8 fd21 	bl	8000b3c <__aeabi_dcmpun>
 80080fa:	2800      	cmp	r0, #0
 80080fc:	d13b      	bne.n	8008176 <pow+0xa2>
 80080fe:	ec51 0b18 	vmov	r0, r1, d8
 8008102:	2200      	movs	r2, #0
 8008104:	2300      	movs	r3, #0
 8008106:	f7f8 fce7 	bl	8000ad8 <__aeabi_dcmpeq>
 800810a:	b1b8      	cbz	r0, 800813c <pow+0x68>
 800810c:	2200      	movs	r2, #0
 800810e:	2300      	movs	r3, #0
 8008110:	4620      	mov	r0, r4
 8008112:	4629      	mov	r1, r5
 8008114:	f7f8 fce0 	bl	8000ad8 <__aeabi_dcmpeq>
 8008118:	2800      	cmp	r0, #0
 800811a:	d146      	bne.n	80081aa <pow+0xd6>
 800811c:	ec45 4b10 	vmov	d0, r4, r5
 8008120:	f000 fe63 	bl	8008dea <finite>
 8008124:	b338      	cbz	r0, 8008176 <pow+0xa2>
 8008126:	2200      	movs	r2, #0
 8008128:	2300      	movs	r3, #0
 800812a:	4620      	mov	r0, r4
 800812c:	4629      	mov	r1, r5
 800812e:	f7f8 fcdd 	bl	8000aec <__aeabi_dcmplt>
 8008132:	b300      	cbz	r0, 8008176 <pow+0xa2>
 8008134:	f7ff fb1a 	bl	800776c <__errno>
 8008138:	2322      	movs	r3, #34	; 0x22
 800813a:	e01b      	b.n	8008174 <pow+0xa0>
 800813c:	ec47 6b10 	vmov	d0, r6, r7
 8008140:	f000 fe53 	bl	8008dea <finite>
 8008144:	b9e0      	cbnz	r0, 8008180 <pow+0xac>
 8008146:	eeb0 0a48 	vmov.f32	s0, s16
 800814a:	eef0 0a68 	vmov.f32	s1, s17
 800814e:	f000 fe4c 	bl	8008dea <finite>
 8008152:	b1a8      	cbz	r0, 8008180 <pow+0xac>
 8008154:	ec45 4b10 	vmov	d0, r4, r5
 8008158:	f000 fe47 	bl	8008dea <finite>
 800815c:	b180      	cbz	r0, 8008180 <pow+0xac>
 800815e:	4632      	mov	r2, r6
 8008160:	463b      	mov	r3, r7
 8008162:	4630      	mov	r0, r6
 8008164:	4639      	mov	r1, r7
 8008166:	f7f8 fce9 	bl	8000b3c <__aeabi_dcmpun>
 800816a:	2800      	cmp	r0, #0
 800816c:	d0e2      	beq.n	8008134 <pow+0x60>
 800816e:	f7ff fafd 	bl	800776c <__errno>
 8008172:	2321      	movs	r3, #33	; 0x21
 8008174:	6003      	str	r3, [r0, #0]
 8008176:	ecbd 8b02 	vpop	{d8}
 800817a:	ec47 6b10 	vmov	d0, r6, r7
 800817e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008180:	2200      	movs	r2, #0
 8008182:	2300      	movs	r3, #0
 8008184:	4630      	mov	r0, r6
 8008186:	4639      	mov	r1, r7
 8008188:	f7f8 fca6 	bl	8000ad8 <__aeabi_dcmpeq>
 800818c:	2800      	cmp	r0, #0
 800818e:	d0f2      	beq.n	8008176 <pow+0xa2>
 8008190:	eeb0 0a48 	vmov.f32	s0, s16
 8008194:	eef0 0a68 	vmov.f32	s1, s17
 8008198:	f000 fe27 	bl	8008dea <finite>
 800819c:	2800      	cmp	r0, #0
 800819e:	d0ea      	beq.n	8008176 <pow+0xa2>
 80081a0:	ec45 4b10 	vmov	d0, r4, r5
 80081a4:	f000 fe21 	bl	8008dea <finite>
 80081a8:	e7c3      	b.n	8008132 <pow+0x5e>
 80081aa:	4f01      	ldr	r7, [pc, #4]	; (80081b0 <pow+0xdc>)
 80081ac:	2600      	movs	r6, #0
 80081ae:	e7e2      	b.n	8008176 <pow+0xa2>
 80081b0:	3ff00000 	.word	0x3ff00000
 80081b4:	00000000 	.word	0x00000000

080081b8 <__ieee754_pow>:
 80081b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081bc:	ed2d 8b06 	vpush	{d8-d10}
 80081c0:	b089      	sub	sp, #36	; 0x24
 80081c2:	ed8d 1b00 	vstr	d1, [sp]
 80081c6:	e9dd 2900 	ldrd	r2, r9, [sp]
 80081ca:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80081ce:	ea58 0102 	orrs.w	r1, r8, r2
 80081d2:	ec57 6b10 	vmov	r6, r7, d0
 80081d6:	d115      	bne.n	8008204 <__ieee754_pow+0x4c>
 80081d8:	19b3      	adds	r3, r6, r6
 80081da:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80081de:	4152      	adcs	r2, r2
 80081e0:	4299      	cmp	r1, r3
 80081e2:	4b89      	ldr	r3, [pc, #548]	; (8008408 <__ieee754_pow+0x250>)
 80081e4:	4193      	sbcs	r3, r2
 80081e6:	f080 84d2 	bcs.w	8008b8e <__ieee754_pow+0x9d6>
 80081ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081ee:	4630      	mov	r0, r6
 80081f0:	4639      	mov	r1, r7
 80081f2:	f7f8 f853 	bl	800029c <__adddf3>
 80081f6:	ec41 0b10 	vmov	d0, r0, r1
 80081fa:	b009      	add	sp, #36	; 0x24
 80081fc:	ecbd 8b06 	vpop	{d8-d10}
 8008200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008204:	4b81      	ldr	r3, [pc, #516]	; (800840c <__ieee754_pow+0x254>)
 8008206:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800820a:	429c      	cmp	r4, r3
 800820c:	ee10 aa10 	vmov	sl, s0
 8008210:	463d      	mov	r5, r7
 8008212:	dc06      	bgt.n	8008222 <__ieee754_pow+0x6a>
 8008214:	d101      	bne.n	800821a <__ieee754_pow+0x62>
 8008216:	2e00      	cmp	r6, #0
 8008218:	d1e7      	bne.n	80081ea <__ieee754_pow+0x32>
 800821a:	4598      	cmp	r8, r3
 800821c:	dc01      	bgt.n	8008222 <__ieee754_pow+0x6a>
 800821e:	d10f      	bne.n	8008240 <__ieee754_pow+0x88>
 8008220:	b172      	cbz	r2, 8008240 <__ieee754_pow+0x88>
 8008222:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8008226:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800822a:	ea55 050a 	orrs.w	r5, r5, sl
 800822e:	d1dc      	bne.n	80081ea <__ieee754_pow+0x32>
 8008230:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008234:	18db      	adds	r3, r3, r3
 8008236:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800823a:	4152      	adcs	r2, r2
 800823c:	429d      	cmp	r5, r3
 800823e:	e7d0      	b.n	80081e2 <__ieee754_pow+0x2a>
 8008240:	2d00      	cmp	r5, #0
 8008242:	da3b      	bge.n	80082bc <__ieee754_pow+0x104>
 8008244:	4b72      	ldr	r3, [pc, #456]	; (8008410 <__ieee754_pow+0x258>)
 8008246:	4598      	cmp	r8, r3
 8008248:	dc51      	bgt.n	80082ee <__ieee754_pow+0x136>
 800824a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800824e:	4598      	cmp	r8, r3
 8008250:	f340 84ac 	ble.w	8008bac <__ieee754_pow+0x9f4>
 8008254:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008258:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800825c:	2b14      	cmp	r3, #20
 800825e:	dd0f      	ble.n	8008280 <__ieee754_pow+0xc8>
 8008260:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008264:	fa22 f103 	lsr.w	r1, r2, r3
 8008268:	fa01 f303 	lsl.w	r3, r1, r3
 800826c:	4293      	cmp	r3, r2
 800826e:	f040 849d 	bne.w	8008bac <__ieee754_pow+0x9f4>
 8008272:	f001 0101 	and.w	r1, r1, #1
 8008276:	f1c1 0302 	rsb	r3, r1, #2
 800827a:	9304      	str	r3, [sp, #16]
 800827c:	b182      	cbz	r2, 80082a0 <__ieee754_pow+0xe8>
 800827e:	e05f      	b.n	8008340 <__ieee754_pow+0x188>
 8008280:	2a00      	cmp	r2, #0
 8008282:	d15b      	bne.n	800833c <__ieee754_pow+0x184>
 8008284:	f1c3 0314 	rsb	r3, r3, #20
 8008288:	fa48 f103 	asr.w	r1, r8, r3
 800828c:	fa01 f303 	lsl.w	r3, r1, r3
 8008290:	4543      	cmp	r3, r8
 8008292:	f040 8488 	bne.w	8008ba6 <__ieee754_pow+0x9ee>
 8008296:	f001 0101 	and.w	r1, r1, #1
 800829a:	f1c1 0302 	rsb	r3, r1, #2
 800829e:	9304      	str	r3, [sp, #16]
 80082a0:	4b5c      	ldr	r3, [pc, #368]	; (8008414 <__ieee754_pow+0x25c>)
 80082a2:	4598      	cmp	r8, r3
 80082a4:	d132      	bne.n	800830c <__ieee754_pow+0x154>
 80082a6:	f1b9 0f00 	cmp.w	r9, #0
 80082aa:	f280 8478 	bge.w	8008b9e <__ieee754_pow+0x9e6>
 80082ae:	4959      	ldr	r1, [pc, #356]	; (8008414 <__ieee754_pow+0x25c>)
 80082b0:	4632      	mov	r2, r6
 80082b2:	463b      	mov	r3, r7
 80082b4:	2000      	movs	r0, #0
 80082b6:	f7f8 fad1 	bl	800085c <__aeabi_ddiv>
 80082ba:	e79c      	b.n	80081f6 <__ieee754_pow+0x3e>
 80082bc:	2300      	movs	r3, #0
 80082be:	9304      	str	r3, [sp, #16]
 80082c0:	2a00      	cmp	r2, #0
 80082c2:	d13d      	bne.n	8008340 <__ieee754_pow+0x188>
 80082c4:	4b51      	ldr	r3, [pc, #324]	; (800840c <__ieee754_pow+0x254>)
 80082c6:	4598      	cmp	r8, r3
 80082c8:	d1ea      	bne.n	80082a0 <__ieee754_pow+0xe8>
 80082ca:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80082ce:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80082d2:	ea53 030a 	orrs.w	r3, r3, sl
 80082d6:	f000 845a 	beq.w	8008b8e <__ieee754_pow+0x9d6>
 80082da:	4b4f      	ldr	r3, [pc, #316]	; (8008418 <__ieee754_pow+0x260>)
 80082dc:	429c      	cmp	r4, r3
 80082de:	dd08      	ble.n	80082f2 <__ieee754_pow+0x13a>
 80082e0:	f1b9 0f00 	cmp.w	r9, #0
 80082e4:	f2c0 8457 	blt.w	8008b96 <__ieee754_pow+0x9de>
 80082e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082ec:	e783      	b.n	80081f6 <__ieee754_pow+0x3e>
 80082ee:	2302      	movs	r3, #2
 80082f0:	e7e5      	b.n	80082be <__ieee754_pow+0x106>
 80082f2:	f1b9 0f00 	cmp.w	r9, #0
 80082f6:	f04f 0000 	mov.w	r0, #0
 80082fa:	f04f 0100 	mov.w	r1, #0
 80082fe:	f6bf af7a 	bge.w	80081f6 <__ieee754_pow+0x3e>
 8008302:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008306:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800830a:	e774      	b.n	80081f6 <__ieee754_pow+0x3e>
 800830c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008310:	d106      	bne.n	8008320 <__ieee754_pow+0x168>
 8008312:	4632      	mov	r2, r6
 8008314:	463b      	mov	r3, r7
 8008316:	4630      	mov	r0, r6
 8008318:	4639      	mov	r1, r7
 800831a:	f7f8 f975 	bl	8000608 <__aeabi_dmul>
 800831e:	e76a      	b.n	80081f6 <__ieee754_pow+0x3e>
 8008320:	4b3e      	ldr	r3, [pc, #248]	; (800841c <__ieee754_pow+0x264>)
 8008322:	4599      	cmp	r9, r3
 8008324:	d10c      	bne.n	8008340 <__ieee754_pow+0x188>
 8008326:	2d00      	cmp	r5, #0
 8008328:	db0a      	blt.n	8008340 <__ieee754_pow+0x188>
 800832a:	ec47 6b10 	vmov	d0, r6, r7
 800832e:	b009      	add	sp, #36	; 0x24
 8008330:	ecbd 8b06 	vpop	{d8-d10}
 8008334:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008338:	f000 bc6c 	b.w	8008c14 <__ieee754_sqrt>
 800833c:	2300      	movs	r3, #0
 800833e:	9304      	str	r3, [sp, #16]
 8008340:	ec47 6b10 	vmov	d0, r6, r7
 8008344:	f000 fd48 	bl	8008dd8 <fabs>
 8008348:	ec51 0b10 	vmov	r0, r1, d0
 800834c:	f1ba 0f00 	cmp.w	sl, #0
 8008350:	d129      	bne.n	80083a6 <__ieee754_pow+0x1ee>
 8008352:	b124      	cbz	r4, 800835e <__ieee754_pow+0x1a6>
 8008354:	4b2f      	ldr	r3, [pc, #188]	; (8008414 <__ieee754_pow+0x25c>)
 8008356:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800835a:	429a      	cmp	r2, r3
 800835c:	d123      	bne.n	80083a6 <__ieee754_pow+0x1ee>
 800835e:	f1b9 0f00 	cmp.w	r9, #0
 8008362:	da05      	bge.n	8008370 <__ieee754_pow+0x1b8>
 8008364:	4602      	mov	r2, r0
 8008366:	460b      	mov	r3, r1
 8008368:	2000      	movs	r0, #0
 800836a:	492a      	ldr	r1, [pc, #168]	; (8008414 <__ieee754_pow+0x25c>)
 800836c:	f7f8 fa76 	bl	800085c <__aeabi_ddiv>
 8008370:	2d00      	cmp	r5, #0
 8008372:	f6bf af40 	bge.w	80081f6 <__ieee754_pow+0x3e>
 8008376:	9b04      	ldr	r3, [sp, #16]
 8008378:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800837c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008380:	4323      	orrs	r3, r4
 8008382:	d108      	bne.n	8008396 <__ieee754_pow+0x1de>
 8008384:	4602      	mov	r2, r0
 8008386:	460b      	mov	r3, r1
 8008388:	4610      	mov	r0, r2
 800838a:	4619      	mov	r1, r3
 800838c:	f7f7 ff84 	bl	8000298 <__aeabi_dsub>
 8008390:	4602      	mov	r2, r0
 8008392:	460b      	mov	r3, r1
 8008394:	e78f      	b.n	80082b6 <__ieee754_pow+0xfe>
 8008396:	9b04      	ldr	r3, [sp, #16]
 8008398:	2b01      	cmp	r3, #1
 800839a:	f47f af2c 	bne.w	80081f6 <__ieee754_pow+0x3e>
 800839e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80083a2:	4619      	mov	r1, r3
 80083a4:	e727      	b.n	80081f6 <__ieee754_pow+0x3e>
 80083a6:	0feb      	lsrs	r3, r5, #31
 80083a8:	3b01      	subs	r3, #1
 80083aa:	9306      	str	r3, [sp, #24]
 80083ac:	9a06      	ldr	r2, [sp, #24]
 80083ae:	9b04      	ldr	r3, [sp, #16]
 80083b0:	4313      	orrs	r3, r2
 80083b2:	d102      	bne.n	80083ba <__ieee754_pow+0x202>
 80083b4:	4632      	mov	r2, r6
 80083b6:	463b      	mov	r3, r7
 80083b8:	e7e6      	b.n	8008388 <__ieee754_pow+0x1d0>
 80083ba:	4b19      	ldr	r3, [pc, #100]	; (8008420 <__ieee754_pow+0x268>)
 80083bc:	4598      	cmp	r8, r3
 80083be:	f340 80fb 	ble.w	80085b8 <__ieee754_pow+0x400>
 80083c2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80083c6:	4598      	cmp	r8, r3
 80083c8:	4b13      	ldr	r3, [pc, #76]	; (8008418 <__ieee754_pow+0x260>)
 80083ca:	dd0c      	ble.n	80083e6 <__ieee754_pow+0x22e>
 80083cc:	429c      	cmp	r4, r3
 80083ce:	dc0f      	bgt.n	80083f0 <__ieee754_pow+0x238>
 80083d0:	f1b9 0f00 	cmp.w	r9, #0
 80083d4:	da0f      	bge.n	80083f6 <__ieee754_pow+0x23e>
 80083d6:	2000      	movs	r0, #0
 80083d8:	b009      	add	sp, #36	; 0x24
 80083da:	ecbd 8b06 	vpop	{d8-d10}
 80083de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083e2:	f000 bcf0 	b.w	8008dc6 <__math_oflow>
 80083e6:	429c      	cmp	r4, r3
 80083e8:	dbf2      	blt.n	80083d0 <__ieee754_pow+0x218>
 80083ea:	4b0a      	ldr	r3, [pc, #40]	; (8008414 <__ieee754_pow+0x25c>)
 80083ec:	429c      	cmp	r4, r3
 80083ee:	dd19      	ble.n	8008424 <__ieee754_pow+0x26c>
 80083f0:	f1b9 0f00 	cmp.w	r9, #0
 80083f4:	dcef      	bgt.n	80083d6 <__ieee754_pow+0x21e>
 80083f6:	2000      	movs	r0, #0
 80083f8:	b009      	add	sp, #36	; 0x24
 80083fa:	ecbd 8b06 	vpop	{d8-d10}
 80083fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008402:	f000 bcd7 	b.w	8008db4 <__math_uflow>
 8008406:	bf00      	nop
 8008408:	fff00000 	.word	0xfff00000
 800840c:	7ff00000 	.word	0x7ff00000
 8008410:	433fffff 	.word	0x433fffff
 8008414:	3ff00000 	.word	0x3ff00000
 8008418:	3fefffff 	.word	0x3fefffff
 800841c:	3fe00000 	.word	0x3fe00000
 8008420:	41e00000 	.word	0x41e00000
 8008424:	4b60      	ldr	r3, [pc, #384]	; (80085a8 <__ieee754_pow+0x3f0>)
 8008426:	2200      	movs	r2, #0
 8008428:	f7f7 ff36 	bl	8000298 <__aeabi_dsub>
 800842c:	a354      	add	r3, pc, #336	; (adr r3, 8008580 <__ieee754_pow+0x3c8>)
 800842e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008432:	4604      	mov	r4, r0
 8008434:	460d      	mov	r5, r1
 8008436:	f7f8 f8e7 	bl	8000608 <__aeabi_dmul>
 800843a:	a353      	add	r3, pc, #332	; (adr r3, 8008588 <__ieee754_pow+0x3d0>)
 800843c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008440:	4606      	mov	r6, r0
 8008442:	460f      	mov	r7, r1
 8008444:	4620      	mov	r0, r4
 8008446:	4629      	mov	r1, r5
 8008448:	f7f8 f8de 	bl	8000608 <__aeabi_dmul>
 800844c:	4b57      	ldr	r3, [pc, #348]	; (80085ac <__ieee754_pow+0x3f4>)
 800844e:	4682      	mov	sl, r0
 8008450:	468b      	mov	fp, r1
 8008452:	2200      	movs	r2, #0
 8008454:	4620      	mov	r0, r4
 8008456:	4629      	mov	r1, r5
 8008458:	f7f8 f8d6 	bl	8000608 <__aeabi_dmul>
 800845c:	4602      	mov	r2, r0
 800845e:	460b      	mov	r3, r1
 8008460:	a14b      	add	r1, pc, #300	; (adr r1, 8008590 <__ieee754_pow+0x3d8>)
 8008462:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008466:	f7f7 ff17 	bl	8000298 <__aeabi_dsub>
 800846a:	4622      	mov	r2, r4
 800846c:	462b      	mov	r3, r5
 800846e:	f7f8 f8cb 	bl	8000608 <__aeabi_dmul>
 8008472:	4602      	mov	r2, r0
 8008474:	460b      	mov	r3, r1
 8008476:	2000      	movs	r0, #0
 8008478:	494d      	ldr	r1, [pc, #308]	; (80085b0 <__ieee754_pow+0x3f8>)
 800847a:	f7f7 ff0d 	bl	8000298 <__aeabi_dsub>
 800847e:	4622      	mov	r2, r4
 8008480:	4680      	mov	r8, r0
 8008482:	4689      	mov	r9, r1
 8008484:	462b      	mov	r3, r5
 8008486:	4620      	mov	r0, r4
 8008488:	4629      	mov	r1, r5
 800848a:	f7f8 f8bd 	bl	8000608 <__aeabi_dmul>
 800848e:	4602      	mov	r2, r0
 8008490:	460b      	mov	r3, r1
 8008492:	4640      	mov	r0, r8
 8008494:	4649      	mov	r1, r9
 8008496:	f7f8 f8b7 	bl	8000608 <__aeabi_dmul>
 800849a:	a33f      	add	r3, pc, #252	; (adr r3, 8008598 <__ieee754_pow+0x3e0>)
 800849c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a0:	f7f8 f8b2 	bl	8000608 <__aeabi_dmul>
 80084a4:	4602      	mov	r2, r0
 80084a6:	460b      	mov	r3, r1
 80084a8:	4650      	mov	r0, sl
 80084aa:	4659      	mov	r1, fp
 80084ac:	f7f7 fef4 	bl	8000298 <__aeabi_dsub>
 80084b0:	4602      	mov	r2, r0
 80084b2:	460b      	mov	r3, r1
 80084b4:	4680      	mov	r8, r0
 80084b6:	4689      	mov	r9, r1
 80084b8:	4630      	mov	r0, r6
 80084ba:	4639      	mov	r1, r7
 80084bc:	f7f7 feee 	bl	800029c <__adddf3>
 80084c0:	2000      	movs	r0, #0
 80084c2:	4632      	mov	r2, r6
 80084c4:	463b      	mov	r3, r7
 80084c6:	4604      	mov	r4, r0
 80084c8:	460d      	mov	r5, r1
 80084ca:	f7f7 fee5 	bl	8000298 <__aeabi_dsub>
 80084ce:	4602      	mov	r2, r0
 80084d0:	460b      	mov	r3, r1
 80084d2:	4640      	mov	r0, r8
 80084d4:	4649      	mov	r1, r9
 80084d6:	f7f7 fedf 	bl	8000298 <__aeabi_dsub>
 80084da:	9b04      	ldr	r3, [sp, #16]
 80084dc:	9a06      	ldr	r2, [sp, #24]
 80084de:	3b01      	subs	r3, #1
 80084e0:	4313      	orrs	r3, r2
 80084e2:	4682      	mov	sl, r0
 80084e4:	468b      	mov	fp, r1
 80084e6:	f040 81e7 	bne.w	80088b8 <__ieee754_pow+0x700>
 80084ea:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80085a0 <__ieee754_pow+0x3e8>
 80084ee:	eeb0 8a47 	vmov.f32	s16, s14
 80084f2:	eef0 8a67 	vmov.f32	s17, s15
 80084f6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80084fa:	2600      	movs	r6, #0
 80084fc:	4632      	mov	r2, r6
 80084fe:	463b      	mov	r3, r7
 8008500:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008504:	f7f7 fec8 	bl	8000298 <__aeabi_dsub>
 8008508:	4622      	mov	r2, r4
 800850a:	462b      	mov	r3, r5
 800850c:	f7f8 f87c 	bl	8000608 <__aeabi_dmul>
 8008510:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008514:	4680      	mov	r8, r0
 8008516:	4689      	mov	r9, r1
 8008518:	4650      	mov	r0, sl
 800851a:	4659      	mov	r1, fp
 800851c:	f7f8 f874 	bl	8000608 <__aeabi_dmul>
 8008520:	4602      	mov	r2, r0
 8008522:	460b      	mov	r3, r1
 8008524:	4640      	mov	r0, r8
 8008526:	4649      	mov	r1, r9
 8008528:	f7f7 feb8 	bl	800029c <__adddf3>
 800852c:	4632      	mov	r2, r6
 800852e:	463b      	mov	r3, r7
 8008530:	4680      	mov	r8, r0
 8008532:	4689      	mov	r9, r1
 8008534:	4620      	mov	r0, r4
 8008536:	4629      	mov	r1, r5
 8008538:	f7f8 f866 	bl	8000608 <__aeabi_dmul>
 800853c:	460b      	mov	r3, r1
 800853e:	4604      	mov	r4, r0
 8008540:	460d      	mov	r5, r1
 8008542:	4602      	mov	r2, r0
 8008544:	4649      	mov	r1, r9
 8008546:	4640      	mov	r0, r8
 8008548:	f7f7 fea8 	bl	800029c <__adddf3>
 800854c:	4b19      	ldr	r3, [pc, #100]	; (80085b4 <__ieee754_pow+0x3fc>)
 800854e:	4299      	cmp	r1, r3
 8008550:	ec45 4b19 	vmov	d9, r4, r5
 8008554:	4606      	mov	r6, r0
 8008556:	460f      	mov	r7, r1
 8008558:	468b      	mov	fp, r1
 800855a:	f340 82f1 	ble.w	8008b40 <__ieee754_pow+0x988>
 800855e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008562:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008566:	4303      	orrs	r3, r0
 8008568:	f000 81e4 	beq.w	8008934 <__ieee754_pow+0x77c>
 800856c:	ec51 0b18 	vmov	r0, r1, d8
 8008570:	2200      	movs	r2, #0
 8008572:	2300      	movs	r3, #0
 8008574:	f7f8 faba 	bl	8000aec <__aeabi_dcmplt>
 8008578:	3800      	subs	r0, #0
 800857a:	bf18      	it	ne
 800857c:	2001      	movne	r0, #1
 800857e:	e72b      	b.n	80083d8 <__ieee754_pow+0x220>
 8008580:	60000000 	.word	0x60000000
 8008584:	3ff71547 	.word	0x3ff71547
 8008588:	f85ddf44 	.word	0xf85ddf44
 800858c:	3e54ae0b 	.word	0x3e54ae0b
 8008590:	55555555 	.word	0x55555555
 8008594:	3fd55555 	.word	0x3fd55555
 8008598:	652b82fe 	.word	0x652b82fe
 800859c:	3ff71547 	.word	0x3ff71547
 80085a0:	00000000 	.word	0x00000000
 80085a4:	bff00000 	.word	0xbff00000
 80085a8:	3ff00000 	.word	0x3ff00000
 80085ac:	3fd00000 	.word	0x3fd00000
 80085b0:	3fe00000 	.word	0x3fe00000
 80085b4:	408fffff 	.word	0x408fffff
 80085b8:	4bd5      	ldr	r3, [pc, #852]	; (8008910 <__ieee754_pow+0x758>)
 80085ba:	402b      	ands	r3, r5
 80085bc:	2200      	movs	r2, #0
 80085be:	b92b      	cbnz	r3, 80085cc <__ieee754_pow+0x414>
 80085c0:	4bd4      	ldr	r3, [pc, #848]	; (8008914 <__ieee754_pow+0x75c>)
 80085c2:	f7f8 f821 	bl	8000608 <__aeabi_dmul>
 80085c6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80085ca:	460c      	mov	r4, r1
 80085cc:	1523      	asrs	r3, r4, #20
 80085ce:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80085d2:	4413      	add	r3, r2
 80085d4:	9305      	str	r3, [sp, #20]
 80085d6:	4bd0      	ldr	r3, [pc, #832]	; (8008918 <__ieee754_pow+0x760>)
 80085d8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80085dc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80085e0:	429c      	cmp	r4, r3
 80085e2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80085e6:	dd08      	ble.n	80085fa <__ieee754_pow+0x442>
 80085e8:	4bcc      	ldr	r3, [pc, #816]	; (800891c <__ieee754_pow+0x764>)
 80085ea:	429c      	cmp	r4, r3
 80085ec:	f340 8162 	ble.w	80088b4 <__ieee754_pow+0x6fc>
 80085f0:	9b05      	ldr	r3, [sp, #20]
 80085f2:	3301      	adds	r3, #1
 80085f4:	9305      	str	r3, [sp, #20]
 80085f6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80085fa:	2400      	movs	r4, #0
 80085fc:	00e3      	lsls	r3, r4, #3
 80085fe:	9307      	str	r3, [sp, #28]
 8008600:	4bc7      	ldr	r3, [pc, #796]	; (8008920 <__ieee754_pow+0x768>)
 8008602:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008606:	ed93 7b00 	vldr	d7, [r3]
 800860a:	4629      	mov	r1, r5
 800860c:	ec53 2b17 	vmov	r2, r3, d7
 8008610:	eeb0 9a47 	vmov.f32	s18, s14
 8008614:	eef0 9a67 	vmov.f32	s19, s15
 8008618:	4682      	mov	sl, r0
 800861a:	f7f7 fe3d 	bl	8000298 <__aeabi_dsub>
 800861e:	4652      	mov	r2, sl
 8008620:	4606      	mov	r6, r0
 8008622:	460f      	mov	r7, r1
 8008624:	462b      	mov	r3, r5
 8008626:	ec51 0b19 	vmov	r0, r1, d9
 800862a:	f7f7 fe37 	bl	800029c <__adddf3>
 800862e:	4602      	mov	r2, r0
 8008630:	460b      	mov	r3, r1
 8008632:	2000      	movs	r0, #0
 8008634:	49bb      	ldr	r1, [pc, #748]	; (8008924 <__ieee754_pow+0x76c>)
 8008636:	f7f8 f911 	bl	800085c <__aeabi_ddiv>
 800863a:	ec41 0b1a 	vmov	d10, r0, r1
 800863e:	4602      	mov	r2, r0
 8008640:	460b      	mov	r3, r1
 8008642:	4630      	mov	r0, r6
 8008644:	4639      	mov	r1, r7
 8008646:	f7f7 ffdf 	bl	8000608 <__aeabi_dmul>
 800864a:	2300      	movs	r3, #0
 800864c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008650:	9302      	str	r3, [sp, #8]
 8008652:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008656:	46ab      	mov	fp, r5
 8008658:	106d      	asrs	r5, r5, #1
 800865a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800865e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008662:	ec41 0b18 	vmov	d8, r0, r1
 8008666:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800866a:	2200      	movs	r2, #0
 800866c:	4640      	mov	r0, r8
 800866e:	4649      	mov	r1, r9
 8008670:	4614      	mov	r4, r2
 8008672:	461d      	mov	r5, r3
 8008674:	f7f7 ffc8 	bl	8000608 <__aeabi_dmul>
 8008678:	4602      	mov	r2, r0
 800867a:	460b      	mov	r3, r1
 800867c:	4630      	mov	r0, r6
 800867e:	4639      	mov	r1, r7
 8008680:	f7f7 fe0a 	bl	8000298 <__aeabi_dsub>
 8008684:	ec53 2b19 	vmov	r2, r3, d9
 8008688:	4606      	mov	r6, r0
 800868a:	460f      	mov	r7, r1
 800868c:	4620      	mov	r0, r4
 800868e:	4629      	mov	r1, r5
 8008690:	f7f7 fe02 	bl	8000298 <__aeabi_dsub>
 8008694:	4602      	mov	r2, r0
 8008696:	460b      	mov	r3, r1
 8008698:	4650      	mov	r0, sl
 800869a:	4659      	mov	r1, fp
 800869c:	f7f7 fdfc 	bl	8000298 <__aeabi_dsub>
 80086a0:	4642      	mov	r2, r8
 80086a2:	464b      	mov	r3, r9
 80086a4:	f7f7 ffb0 	bl	8000608 <__aeabi_dmul>
 80086a8:	4602      	mov	r2, r0
 80086aa:	460b      	mov	r3, r1
 80086ac:	4630      	mov	r0, r6
 80086ae:	4639      	mov	r1, r7
 80086b0:	f7f7 fdf2 	bl	8000298 <__aeabi_dsub>
 80086b4:	ec53 2b1a 	vmov	r2, r3, d10
 80086b8:	f7f7 ffa6 	bl	8000608 <__aeabi_dmul>
 80086bc:	ec53 2b18 	vmov	r2, r3, d8
 80086c0:	ec41 0b19 	vmov	d9, r0, r1
 80086c4:	ec51 0b18 	vmov	r0, r1, d8
 80086c8:	f7f7 ff9e 	bl	8000608 <__aeabi_dmul>
 80086cc:	a37c      	add	r3, pc, #496	; (adr r3, 80088c0 <__ieee754_pow+0x708>)
 80086ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d2:	4604      	mov	r4, r0
 80086d4:	460d      	mov	r5, r1
 80086d6:	f7f7 ff97 	bl	8000608 <__aeabi_dmul>
 80086da:	a37b      	add	r3, pc, #492	; (adr r3, 80088c8 <__ieee754_pow+0x710>)
 80086dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e0:	f7f7 fddc 	bl	800029c <__adddf3>
 80086e4:	4622      	mov	r2, r4
 80086e6:	462b      	mov	r3, r5
 80086e8:	f7f7 ff8e 	bl	8000608 <__aeabi_dmul>
 80086ec:	a378      	add	r3, pc, #480	; (adr r3, 80088d0 <__ieee754_pow+0x718>)
 80086ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f2:	f7f7 fdd3 	bl	800029c <__adddf3>
 80086f6:	4622      	mov	r2, r4
 80086f8:	462b      	mov	r3, r5
 80086fa:	f7f7 ff85 	bl	8000608 <__aeabi_dmul>
 80086fe:	a376      	add	r3, pc, #472	; (adr r3, 80088d8 <__ieee754_pow+0x720>)
 8008700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008704:	f7f7 fdca 	bl	800029c <__adddf3>
 8008708:	4622      	mov	r2, r4
 800870a:	462b      	mov	r3, r5
 800870c:	f7f7 ff7c 	bl	8000608 <__aeabi_dmul>
 8008710:	a373      	add	r3, pc, #460	; (adr r3, 80088e0 <__ieee754_pow+0x728>)
 8008712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008716:	f7f7 fdc1 	bl	800029c <__adddf3>
 800871a:	4622      	mov	r2, r4
 800871c:	462b      	mov	r3, r5
 800871e:	f7f7 ff73 	bl	8000608 <__aeabi_dmul>
 8008722:	a371      	add	r3, pc, #452	; (adr r3, 80088e8 <__ieee754_pow+0x730>)
 8008724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008728:	f7f7 fdb8 	bl	800029c <__adddf3>
 800872c:	4622      	mov	r2, r4
 800872e:	4606      	mov	r6, r0
 8008730:	460f      	mov	r7, r1
 8008732:	462b      	mov	r3, r5
 8008734:	4620      	mov	r0, r4
 8008736:	4629      	mov	r1, r5
 8008738:	f7f7 ff66 	bl	8000608 <__aeabi_dmul>
 800873c:	4602      	mov	r2, r0
 800873e:	460b      	mov	r3, r1
 8008740:	4630      	mov	r0, r6
 8008742:	4639      	mov	r1, r7
 8008744:	f7f7 ff60 	bl	8000608 <__aeabi_dmul>
 8008748:	4642      	mov	r2, r8
 800874a:	4604      	mov	r4, r0
 800874c:	460d      	mov	r5, r1
 800874e:	464b      	mov	r3, r9
 8008750:	ec51 0b18 	vmov	r0, r1, d8
 8008754:	f7f7 fda2 	bl	800029c <__adddf3>
 8008758:	ec53 2b19 	vmov	r2, r3, d9
 800875c:	f7f7 ff54 	bl	8000608 <__aeabi_dmul>
 8008760:	4622      	mov	r2, r4
 8008762:	462b      	mov	r3, r5
 8008764:	f7f7 fd9a 	bl	800029c <__adddf3>
 8008768:	4642      	mov	r2, r8
 800876a:	4682      	mov	sl, r0
 800876c:	468b      	mov	fp, r1
 800876e:	464b      	mov	r3, r9
 8008770:	4640      	mov	r0, r8
 8008772:	4649      	mov	r1, r9
 8008774:	f7f7 ff48 	bl	8000608 <__aeabi_dmul>
 8008778:	4b6b      	ldr	r3, [pc, #428]	; (8008928 <__ieee754_pow+0x770>)
 800877a:	2200      	movs	r2, #0
 800877c:	4606      	mov	r6, r0
 800877e:	460f      	mov	r7, r1
 8008780:	f7f7 fd8c 	bl	800029c <__adddf3>
 8008784:	4652      	mov	r2, sl
 8008786:	465b      	mov	r3, fp
 8008788:	f7f7 fd88 	bl	800029c <__adddf3>
 800878c:	2000      	movs	r0, #0
 800878e:	4604      	mov	r4, r0
 8008790:	460d      	mov	r5, r1
 8008792:	4602      	mov	r2, r0
 8008794:	460b      	mov	r3, r1
 8008796:	4640      	mov	r0, r8
 8008798:	4649      	mov	r1, r9
 800879a:	f7f7 ff35 	bl	8000608 <__aeabi_dmul>
 800879e:	4b62      	ldr	r3, [pc, #392]	; (8008928 <__ieee754_pow+0x770>)
 80087a0:	4680      	mov	r8, r0
 80087a2:	4689      	mov	r9, r1
 80087a4:	2200      	movs	r2, #0
 80087a6:	4620      	mov	r0, r4
 80087a8:	4629      	mov	r1, r5
 80087aa:	f7f7 fd75 	bl	8000298 <__aeabi_dsub>
 80087ae:	4632      	mov	r2, r6
 80087b0:	463b      	mov	r3, r7
 80087b2:	f7f7 fd71 	bl	8000298 <__aeabi_dsub>
 80087b6:	4602      	mov	r2, r0
 80087b8:	460b      	mov	r3, r1
 80087ba:	4650      	mov	r0, sl
 80087bc:	4659      	mov	r1, fp
 80087be:	f7f7 fd6b 	bl	8000298 <__aeabi_dsub>
 80087c2:	ec53 2b18 	vmov	r2, r3, d8
 80087c6:	f7f7 ff1f 	bl	8000608 <__aeabi_dmul>
 80087ca:	4622      	mov	r2, r4
 80087cc:	4606      	mov	r6, r0
 80087ce:	460f      	mov	r7, r1
 80087d0:	462b      	mov	r3, r5
 80087d2:	ec51 0b19 	vmov	r0, r1, d9
 80087d6:	f7f7 ff17 	bl	8000608 <__aeabi_dmul>
 80087da:	4602      	mov	r2, r0
 80087dc:	460b      	mov	r3, r1
 80087de:	4630      	mov	r0, r6
 80087e0:	4639      	mov	r1, r7
 80087e2:	f7f7 fd5b 	bl	800029c <__adddf3>
 80087e6:	4606      	mov	r6, r0
 80087e8:	460f      	mov	r7, r1
 80087ea:	4602      	mov	r2, r0
 80087ec:	460b      	mov	r3, r1
 80087ee:	4640      	mov	r0, r8
 80087f0:	4649      	mov	r1, r9
 80087f2:	f7f7 fd53 	bl	800029c <__adddf3>
 80087f6:	a33e      	add	r3, pc, #248	; (adr r3, 80088f0 <__ieee754_pow+0x738>)
 80087f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fc:	2000      	movs	r0, #0
 80087fe:	4604      	mov	r4, r0
 8008800:	460d      	mov	r5, r1
 8008802:	f7f7 ff01 	bl	8000608 <__aeabi_dmul>
 8008806:	4642      	mov	r2, r8
 8008808:	ec41 0b18 	vmov	d8, r0, r1
 800880c:	464b      	mov	r3, r9
 800880e:	4620      	mov	r0, r4
 8008810:	4629      	mov	r1, r5
 8008812:	f7f7 fd41 	bl	8000298 <__aeabi_dsub>
 8008816:	4602      	mov	r2, r0
 8008818:	460b      	mov	r3, r1
 800881a:	4630      	mov	r0, r6
 800881c:	4639      	mov	r1, r7
 800881e:	f7f7 fd3b 	bl	8000298 <__aeabi_dsub>
 8008822:	a335      	add	r3, pc, #212	; (adr r3, 80088f8 <__ieee754_pow+0x740>)
 8008824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008828:	f7f7 feee 	bl	8000608 <__aeabi_dmul>
 800882c:	a334      	add	r3, pc, #208	; (adr r3, 8008900 <__ieee754_pow+0x748>)
 800882e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008832:	4606      	mov	r6, r0
 8008834:	460f      	mov	r7, r1
 8008836:	4620      	mov	r0, r4
 8008838:	4629      	mov	r1, r5
 800883a:	f7f7 fee5 	bl	8000608 <__aeabi_dmul>
 800883e:	4602      	mov	r2, r0
 8008840:	460b      	mov	r3, r1
 8008842:	4630      	mov	r0, r6
 8008844:	4639      	mov	r1, r7
 8008846:	f7f7 fd29 	bl	800029c <__adddf3>
 800884a:	9a07      	ldr	r2, [sp, #28]
 800884c:	4b37      	ldr	r3, [pc, #220]	; (800892c <__ieee754_pow+0x774>)
 800884e:	4413      	add	r3, r2
 8008850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008854:	f7f7 fd22 	bl	800029c <__adddf3>
 8008858:	4682      	mov	sl, r0
 800885a:	9805      	ldr	r0, [sp, #20]
 800885c:	468b      	mov	fp, r1
 800885e:	f7f7 fe69 	bl	8000534 <__aeabi_i2d>
 8008862:	9a07      	ldr	r2, [sp, #28]
 8008864:	4b32      	ldr	r3, [pc, #200]	; (8008930 <__ieee754_pow+0x778>)
 8008866:	4413      	add	r3, r2
 8008868:	e9d3 8900 	ldrd	r8, r9, [r3]
 800886c:	4606      	mov	r6, r0
 800886e:	460f      	mov	r7, r1
 8008870:	4652      	mov	r2, sl
 8008872:	465b      	mov	r3, fp
 8008874:	ec51 0b18 	vmov	r0, r1, d8
 8008878:	f7f7 fd10 	bl	800029c <__adddf3>
 800887c:	4642      	mov	r2, r8
 800887e:	464b      	mov	r3, r9
 8008880:	f7f7 fd0c 	bl	800029c <__adddf3>
 8008884:	4632      	mov	r2, r6
 8008886:	463b      	mov	r3, r7
 8008888:	f7f7 fd08 	bl	800029c <__adddf3>
 800888c:	2000      	movs	r0, #0
 800888e:	4632      	mov	r2, r6
 8008890:	463b      	mov	r3, r7
 8008892:	4604      	mov	r4, r0
 8008894:	460d      	mov	r5, r1
 8008896:	f7f7 fcff 	bl	8000298 <__aeabi_dsub>
 800889a:	4642      	mov	r2, r8
 800889c:	464b      	mov	r3, r9
 800889e:	f7f7 fcfb 	bl	8000298 <__aeabi_dsub>
 80088a2:	ec53 2b18 	vmov	r2, r3, d8
 80088a6:	f7f7 fcf7 	bl	8000298 <__aeabi_dsub>
 80088aa:	4602      	mov	r2, r0
 80088ac:	460b      	mov	r3, r1
 80088ae:	4650      	mov	r0, sl
 80088b0:	4659      	mov	r1, fp
 80088b2:	e610      	b.n	80084d6 <__ieee754_pow+0x31e>
 80088b4:	2401      	movs	r4, #1
 80088b6:	e6a1      	b.n	80085fc <__ieee754_pow+0x444>
 80088b8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8008908 <__ieee754_pow+0x750>
 80088bc:	e617      	b.n	80084ee <__ieee754_pow+0x336>
 80088be:	bf00      	nop
 80088c0:	4a454eef 	.word	0x4a454eef
 80088c4:	3fca7e28 	.word	0x3fca7e28
 80088c8:	93c9db65 	.word	0x93c9db65
 80088cc:	3fcd864a 	.word	0x3fcd864a
 80088d0:	a91d4101 	.word	0xa91d4101
 80088d4:	3fd17460 	.word	0x3fd17460
 80088d8:	518f264d 	.word	0x518f264d
 80088dc:	3fd55555 	.word	0x3fd55555
 80088e0:	db6fabff 	.word	0xdb6fabff
 80088e4:	3fdb6db6 	.word	0x3fdb6db6
 80088e8:	33333303 	.word	0x33333303
 80088ec:	3fe33333 	.word	0x3fe33333
 80088f0:	e0000000 	.word	0xe0000000
 80088f4:	3feec709 	.word	0x3feec709
 80088f8:	dc3a03fd 	.word	0xdc3a03fd
 80088fc:	3feec709 	.word	0x3feec709
 8008900:	145b01f5 	.word	0x145b01f5
 8008904:	be3e2fe0 	.word	0xbe3e2fe0
 8008908:	00000000 	.word	0x00000000
 800890c:	3ff00000 	.word	0x3ff00000
 8008910:	7ff00000 	.word	0x7ff00000
 8008914:	43400000 	.word	0x43400000
 8008918:	0003988e 	.word	0x0003988e
 800891c:	000bb679 	.word	0x000bb679
 8008920:	08009048 	.word	0x08009048
 8008924:	3ff00000 	.word	0x3ff00000
 8008928:	40080000 	.word	0x40080000
 800892c:	08009068 	.word	0x08009068
 8008930:	08009058 	.word	0x08009058
 8008934:	a3b5      	add	r3, pc, #724	; (adr r3, 8008c0c <__ieee754_pow+0xa54>)
 8008936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800893a:	4640      	mov	r0, r8
 800893c:	4649      	mov	r1, r9
 800893e:	f7f7 fcad 	bl	800029c <__adddf3>
 8008942:	4622      	mov	r2, r4
 8008944:	ec41 0b1a 	vmov	d10, r0, r1
 8008948:	462b      	mov	r3, r5
 800894a:	4630      	mov	r0, r6
 800894c:	4639      	mov	r1, r7
 800894e:	f7f7 fca3 	bl	8000298 <__aeabi_dsub>
 8008952:	4602      	mov	r2, r0
 8008954:	460b      	mov	r3, r1
 8008956:	ec51 0b1a 	vmov	r0, r1, d10
 800895a:	f7f8 f8e5 	bl	8000b28 <__aeabi_dcmpgt>
 800895e:	2800      	cmp	r0, #0
 8008960:	f47f ae04 	bne.w	800856c <__ieee754_pow+0x3b4>
 8008964:	4aa4      	ldr	r2, [pc, #656]	; (8008bf8 <__ieee754_pow+0xa40>)
 8008966:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800896a:	4293      	cmp	r3, r2
 800896c:	f340 8108 	ble.w	8008b80 <__ieee754_pow+0x9c8>
 8008970:	151b      	asrs	r3, r3, #20
 8008972:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008976:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800897a:	fa4a f303 	asr.w	r3, sl, r3
 800897e:	445b      	add	r3, fp
 8008980:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008984:	4e9d      	ldr	r6, [pc, #628]	; (8008bfc <__ieee754_pow+0xa44>)
 8008986:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800898a:	4116      	asrs	r6, r2
 800898c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008990:	2000      	movs	r0, #0
 8008992:	ea23 0106 	bic.w	r1, r3, r6
 8008996:	f1c2 0214 	rsb	r2, r2, #20
 800899a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800899e:	fa4a fa02 	asr.w	sl, sl, r2
 80089a2:	f1bb 0f00 	cmp.w	fp, #0
 80089a6:	4602      	mov	r2, r0
 80089a8:	460b      	mov	r3, r1
 80089aa:	4620      	mov	r0, r4
 80089ac:	4629      	mov	r1, r5
 80089ae:	bfb8      	it	lt
 80089b0:	f1ca 0a00 	rsblt	sl, sl, #0
 80089b4:	f7f7 fc70 	bl	8000298 <__aeabi_dsub>
 80089b8:	ec41 0b19 	vmov	d9, r0, r1
 80089bc:	4642      	mov	r2, r8
 80089be:	464b      	mov	r3, r9
 80089c0:	ec51 0b19 	vmov	r0, r1, d9
 80089c4:	f7f7 fc6a 	bl	800029c <__adddf3>
 80089c8:	a37b      	add	r3, pc, #492	; (adr r3, 8008bb8 <__ieee754_pow+0xa00>)
 80089ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ce:	2000      	movs	r0, #0
 80089d0:	4604      	mov	r4, r0
 80089d2:	460d      	mov	r5, r1
 80089d4:	f7f7 fe18 	bl	8000608 <__aeabi_dmul>
 80089d8:	ec53 2b19 	vmov	r2, r3, d9
 80089dc:	4606      	mov	r6, r0
 80089de:	460f      	mov	r7, r1
 80089e0:	4620      	mov	r0, r4
 80089e2:	4629      	mov	r1, r5
 80089e4:	f7f7 fc58 	bl	8000298 <__aeabi_dsub>
 80089e8:	4602      	mov	r2, r0
 80089ea:	460b      	mov	r3, r1
 80089ec:	4640      	mov	r0, r8
 80089ee:	4649      	mov	r1, r9
 80089f0:	f7f7 fc52 	bl	8000298 <__aeabi_dsub>
 80089f4:	a372      	add	r3, pc, #456	; (adr r3, 8008bc0 <__ieee754_pow+0xa08>)
 80089f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089fa:	f7f7 fe05 	bl	8000608 <__aeabi_dmul>
 80089fe:	a372      	add	r3, pc, #456	; (adr r3, 8008bc8 <__ieee754_pow+0xa10>)
 8008a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a04:	4680      	mov	r8, r0
 8008a06:	4689      	mov	r9, r1
 8008a08:	4620      	mov	r0, r4
 8008a0a:	4629      	mov	r1, r5
 8008a0c:	f7f7 fdfc 	bl	8000608 <__aeabi_dmul>
 8008a10:	4602      	mov	r2, r0
 8008a12:	460b      	mov	r3, r1
 8008a14:	4640      	mov	r0, r8
 8008a16:	4649      	mov	r1, r9
 8008a18:	f7f7 fc40 	bl	800029c <__adddf3>
 8008a1c:	4604      	mov	r4, r0
 8008a1e:	460d      	mov	r5, r1
 8008a20:	4602      	mov	r2, r0
 8008a22:	460b      	mov	r3, r1
 8008a24:	4630      	mov	r0, r6
 8008a26:	4639      	mov	r1, r7
 8008a28:	f7f7 fc38 	bl	800029c <__adddf3>
 8008a2c:	4632      	mov	r2, r6
 8008a2e:	463b      	mov	r3, r7
 8008a30:	4680      	mov	r8, r0
 8008a32:	4689      	mov	r9, r1
 8008a34:	f7f7 fc30 	bl	8000298 <__aeabi_dsub>
 8008a38:	4602      	mov	r2, r0
 8008a3a:	460b      	mov	r3, r1
 8008a3c:	4620      	mov	r0, r4
 8008a3e:	4629      	mov	r1, r5
 8008a40:	f7f7 fc2a 	bl	8000298 <__aeabi_dsub>
 8008a44:	4642      	mov	r2, r8
 8008a46:	4606      	mov	r6, r0
 8008a48:	460f      	mov	r7, r1
 8008a4a:	464b      	mov	r3, r9
 8008a4c:	4640      	mov	r0, r8
 8008a4e:	4649      	mov	r1, r9
 8008a50:	f7f7 fdda 	bl	8000608 <__aeabi_dmul>
 8008a54:	a35e      	add	r3, pc, #376	; (adr r3, 8008bd0 <__ieee754_pow+0xa18>)
 8008a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a5a:	4604      	mov	r4, r0
 8008a5c:	460d      	mov	r5, r1
 8008a5e:	f7f7 fdd3 	bl	8000608 <__aeabi_dmul>
 8008a62:	a35d      	add	r3, pc, #372	; (adr r3, 8008bd8 <__ieee754_pow+0xa20>)
 8008a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a68:	f7f7 fc16 	bl	8000298 <__aeabi_dsub>
 8008a6c:	4622      	mov	r2, r4
 8008a6e:	462b      	mov	r3, r5
 8008a70:	f7f7 fdca 	bl	8000608 <__aeabi_dmul>
 8008a74:	a35a      	add	r3, pc, #360	; (adr r3, 8008be0 <__ieee754_pow+0xa28>)
 8008a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a7a:	f7f7 fc0f 	bl	800029c <__adddf3>
 8008a7e:	4622      	mov	r2, r4
 8008a80:	462b      	mov	r3, r5
 8008a82:	f7f7 fdc1 	bl	8000608 <__aeabi_dmul>
 8008a86:	a358      	add	r3, pc, #352	; (adr r3, 8008be8 <__ieee754_pow+0xa30>)
 8008a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a8c:	f7f7 fc04 	bl	8000298 <__aeabi_dsub>
 8008a90:	4622      	mov	r2, r4
 8008a92:	462b      	mov	r3, r5
 8008a94:	f7f7 fdb8 	bl	8000608 <__aeabi_dmul>
 8008a98:	a355      	add	r3, pc, #340	; (adr r3, 8008bf0 <__ieee754_pow+0xa38>)
 8008a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a9e:	f7f7 fbfd 	bl	800029c <__adddf3>
 8008aa2:	4622      	mov	r2, r4
 8008aa4:	462b      	mov	r3, r5
 8008aa6:	f7f7 fdaf 	bl	8000608 <__aeabi_dmul>
 8008aaa:	4602      	mov	r2, r0
 8008aac:	460b      	mov	r3, r1
 8008aae:	4640      	mov	r0, r8
 8008ab0:	4649      	mov	r1, r9
 8008ab2:	f7f7 fbf1 	bl	8000298 <__aeabi_dsub>
 8008ab6:	4604      	mov	r4, r0
 8008ab8:	460d      	mov	r5, r1
 8008aba:	4602      	mov	r2, r0
 8008abc:	460b      	mov	r3, r1
 8008abe:	4640      	mov	r0, r8
 8008ac0:	4649      	mov	r1, r9
 8008ac2:	f7f7 fda1 	bl	8000608 <__aeabi_dmul>
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	ec41 0b19 	vmov	d9, r0, r1
 8008acc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008ad0:	4620      	mov	r0, r4
 8008ad2:	4629      	mov	r1, r5
 8008ad4:	f7f7 fbe0 	bl	8000298 <__aeabi_dsub>
 8008ad8:	4602      	mov	r2, r0
 8008ada:	460b      	mov	r3, r1
 8008adc:	ec51 0b19 	vmov	r0, r1, d9
 8008ae0:	f7f7 febc 	bl	800085c <__aeabi_ddiv>
 8008ae4:	4632      	mov	r2, r6
 8008ae6:	4604      	mov	r4, r0
 8008ae8:	460d      	mov	r5, r1
 8008aea:	463b      	mov	r3, r7
 8008aec:	4640      	mov	r0, r8
 8008aee:	4649      	mov	r1, r9
 8008af0:	f7f7 fd8a 	bl	8000608 <__aeabi_dmul>
 8008af4:	4632      	mov	r2, r6
 8008af6:	463b      	mov	r3, r7
 8008af8:	f7f7 fbd0 	bl	800029c <__adddf3>
 8008afc:	4602      	mov	r2, r0
 8008afe:	460b      	mov	r3, r1
 8008b00:	4620      	mov	r0, r4
 8008b02:	4629      	mov	r1, r5
 8008b04:	f7f7 fbc8 	bl	8000298 <__aeabi_dsub>
 8008b08:	4642      	mov	r2, r8
 8008b0a:	464b      	mov	r3, r9
 8008b0c:	f7f7 fbc4 	bl	8000298 <__aeabi_dsub>
 8008b10:	460b      	mov	r3, r1
 8008b12:	4602      	mov	r2, r0
 8008b14:	493a      	ldr	r1, [pc, #232]	; (8008c00 <__ieee754_pow+0xa48>)
 8008b16:	2000      	movs	r0, #0
 8008b18:	f7f7 fbbe 	bl	8000298 <__aeabi_dsub>
 8008b1c:	ec41 0b10 	vmov	d0, r0, r1
 8008b20:	ee10 3a90 	vmov	r3, s1
 8008b24:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008b28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b2c:	da2b      	bge.n	8008b86 <__ieee754_pow+0x9ce>
 8008b2e:	4650      	mov	r0, sl
 8008b30:	f000 f966 	bl	8008e00 <scalbn>
 8008b34:	ec51 0b10 	vmov	r0, r1, d0
 8008b38:	ec53 2b18 	vmov	r2, r3, d8
 8008b3c:	f7ff bbed 	b.w	800831a <__ieee754_pow+0x162>
 8008b40:	4b30      	ldr	r3, [pc, #192]	; (8008c04 <__ieee754_pow+0xa4c>)
 8008b42:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008b46:	429e      	cmp	r6, r3
 8008b48:	f77f af0c 	ble.w	8008964 <__ieee754_pow+0x7ac>
 8008b4c:	4b2e      	ldr	r3, [pc, #184]	; (8008c08 <__ieee754_pow+0xa50>)
 8008b4e:	440b      	add	r3, r1
 8008b50:	4303      	orrs	r3, r0
 8008b52:	d009      	beq.n	8008b68 <__ieee754_pow+0x9b0>
 8008b54:	ec51 0b18 	vmov	r0, r1, d8
 8008b58:	2200      	movs	r2, #0
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	f7f7 ffc6 	bl	8000aec <__aeabi_dcmplt>
 8008b60:	3800      	subs	r0, #0
 8008b62:	bf18      	it	ne
 8008b64:	2001      	movne	r0, #1
 8008b66:	e447      	b.n	80083f8 <__ieee754_pow+0x240>
 8008b68:	4622      	mov	r2, r4
 8008b6a:	462b      	mov	r3, r5
 8008b6c:	f7f7 fb94 	bl	8000298 <__aeabi_dsub>
 8008b70:	4642      	mov	r2, r8
 8008b72:	464b      	mov	r3, r9
 8008b74:	f7f7 ffce 	bl	8000b14 <__aeabi_dcmpge>
 8008b78:	2800      	cmp	r0, #0
 8008b7a:	f43f aef3 	beq.w	8008964 <__ieee754_pow+0x7ac>
 8008b7e:	e7e9      	b.n	8008b54 <__ieee754_pow+0x99c>
 8008b80:	f04f 0a00 	mov.w	sl, #0
 8008b84:	e71a      	b.n	80089bc <__ieee754_pow+0x804>
 8008b86:	ec51 0b10 	vmov	r0, r1, d0
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	e7d4      	b.n	8008b38 <__ieee754_pow+0x980>
 8008b8e:	491c      	ldr	r1, [pc, #112]	; (8008c00 <__ieee754_pow+0xa48>)
 8008b90:	2000      	movs	r0, #0
 8008b92:	f7ff bb30 	b.w	80081f6 <__ieee754_pow+0x3e>
 8008b96:	2000      	movs	r0, #0
 8008b98:	2100      	movs	r1, #0
 8008b9a:	f7ff bb2c 	b.w	80081f6 <__ieee754_pow+0x3e>
 8008b9e:	4630      	mov	r0, r6
 8008ba0:	4639      	mov	r1, r7
 8008ba2:	f7ff bb28 	b.w	80081f6 <__ieee754_pow+0x3e>
 8008ba6:	9204      	str	r2, [sp, #16]
 8008ba8:	f7ff bb7a 	b.w	80082a0 <__ieee754_pow+0xe8>
 8008bac:	2300      	movs	r3, #0
 8008bae:	f7ff bb64 	b.w	800827a <__ieee754_pow+0xc2>
 8008bb2:	bf00      	nop
 8008bb4:	f3af 8000 	nop.w
 8008bb8:	00000000 	.word	0x00000000
 8008bbc:	3fe62e43 	.word	0x3fe62e43
 8008bc0:	fefa39ef 	.word	0xfefa39ef
 8008bc4:	3fe62e42 	.word	0x3fe62e42
 8008bc8:	0ca86c39 	.word	0x0ca86c39
 8008bcc:	be205c61 	.word	0xbe205c61
 8008bd0:	72bea4d0 	.word	0x72bea4d0
 8008bd4:	3e663769 	.word	0x3e663769
 8008bd8:	c5d26bf1 	.word	0xc5d26bf1
 8008bdc:	3ebbbd41 	.word	0x3ebbbd41
 8008be0:	af25de2c 	.word	0xaf25de2c
 8008be4:	3f11566a 	.word	0x3f11566a
 8008be8:	16bebd93 	.word	0x16bebd93
 8008bec:	3f66c16c 	.word	0x3f66c16c
 8008bf0:	5555553e 	.word	0x5555553e
 8008bf4:	3fc55555 	.word	0x3fc55555
 8008bf8:	3fe00000 	.word	0x3fe00000
 8008bfc:	000fffff 	.word	0x000fffff
 8008c00:	3ff00000 	.word	0x3ff00000
 8008c04:	4090cbff 	.word	0x4090cbff
 8008c08:	3f6f3400 	.word	0x3f6f3400
 8008c0c:	652b82fe 	.word	0x652b82fe
 8008c10:	3c971547 	.word	0x3c971547

08008c14 <__ieee754_sqrt>:
 8008c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c18:	ec55 4b10 	vmov	r4, r5, d0
 8008c1c:	4e55      	ldr	r6, [pc, #340]	; (8008d74 <__ieee754_sqrt+0x160>)
 8008c1e:	43ae      	bics	r6, r5
 8008c20:	ee10 0a10 	vmov	r0, s0
 8008c24:	ee10 3a10 	vmov	r3, s0
 8008c28:	462a      	mov	r2, r5
 8008c2a:	4629      	mov	r1, r5
 8008c2c:	d110      	bne.n	8008c50 <__ieee754_sqrt+0x3c>
 8008c2e:	ee10 2a10 	vmov	r2, s0
 8008c32:	462b      	mov	r3, r5
 8008c34:	f7f7 fce8 	bl	8000608 <__aeabi_dmul>
 8008c38:	4602      	mov	r2, r0
 8008c3a:	460b      	mov	r3, r1
 8008c3c:	4620      	mov	r0, r4
 8008c3e:	4629      	mov	r1, r5
 8008c40:	f7f7 fb2c 	bl	800029c <__adddf3>
 8008c44:	4604      	mov	r4, r0
 8008c46:	460d      	mov	r5, r1
 8008c48:	ec45 4b10 	vmov	d0, r4, r5
 8008c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c50:	2d00      	cmp	r5, #0
 8008c52:	dc10      	bgt.n	8008c76 <__ieee754_sqrt+0x62>
 8008c54:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008c58:	4330      	orrs	r0, r6
 8008c5a:	d0f5      	beq.n	8008c48 <__ieee754_sqrt+0x34>
 8008c5c:	b15d      	cbz	r5, 8008c76 <__ieee754_sqrt+0x62>
 8008c5e:	ee10 2a10 	vmov	r2, s0
 8008c62:	462b      	mov	r3, r5
 8008c64:	ee10 0a10 	vmov	r0, s0
 8008c68:	f7f7 fb16 	bl	8000298 <__aeabi_dsub>
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	460b      	mov	r3, r1
 8008c70:	f7f7 fdf4 	bl	800085c <__aeabi_ddiv>
 8008c74:	e7e6      	b.n	8008c44 <__ieee754_sqrt+0x30>
 8008c76:	1512      	asrs	r2, r2, #20
 8008c78:	d074      	beq.n	8008d64 <__ieee754_sqrt+0x150>
 8008c7a:	07d4      	lsls	r4, r2, #31
 8008c7c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008c80:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8008c84:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008c88:	bf5e      	ittt	pl
 8008c8a:	0fda      	lsrpl	r2, r3, #31
 8008c8c:	005b      	lslpl	r3, r3, #1
 8008c8e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8008c92:	2400      	movs	r4, #0
 8008c94:	0fda      	lsrs	r2, r3, #31
 8008c96:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8008c9a:	107f      	asrs	r7, r7, #1
 8008c9c:	005b      	lsls	r3, r3, #1
 8008c9e:	2516      	movs	r5, #22
 8008ca0:	4620      	mov	r0, r4
 8008ca2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008ca6:	1886      	adds	r6, r0, r2
 8008ca8:	428e      	cmp	r6, r1
 8008caa:	bfde      	ittt	le
 8008cac:	1b89      	suble	r1, r1, r6
 8008cae:	18b0      	addle	r0, r6, r2
 8008cb0:	18a4      	addle	r4, r4, r2
 8008cb2:	0049      	lsls	r1, r1, #1
 8008cb4:	3d01      	subs	r5, #1
 8008cb6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8008cba:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8008cbe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008cc2:	d1f0      	bne.n	8008ca6 <__ieee754_sqrt+0x92>
 8008cc4:	462a      	mov	r2, r5
 8008cc6:	f04f 0e20 	mov.w	lr, #32
 8008cca:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008cce:	4281      	cmp	r1, r0
 8008cd0:	eb06 0c05 	add.w	ip, r6, r5
 8008cd4:	dc02      	bgt.n	8008cdc <__ieee754_sqrt+0xc8>
 8008cd6:	d113      	bne.n	8008d00 <__ieee754_sqrt+0xec>
 8008cd8:	459c      	cmp	ip, r3
 8008cda:	d811      	bhi.n	8008d00 <__ieee754_sqrt+0xec>
 8008cdc:	f1bc 0f00 	cmp.w	ip, #0
 8008ce0:	eb0c 0506 	add.w	r5, ip, r6
 8008ce4:	da43      	bge.n	8008d6e <__ieee754_sqrt+0x15a>
 8008ce6:	2d00      	cmp	r5, #0
 8008ce8:	db41      	blt.n	8008d6e <__ieee754_sqrt+0x15a>
 8008cea:	f100 0801 	add.w	r8, r0, #1
 8008cee:	1a09      	subs	r1, r1, r0
 8008cf0:	459c      	cmp	ip, r3
 8008cf2:	bf88      	it	hi
 8008cf4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8008cf8:	eba3 030c 	sub.w	r3, r3, ip
 8008cfc:	4432      	add	r2, r6
 8008cfe:	4640      	mov	r0, r8
 8008d00:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8008d04:	f1be 0e01 	subs.w	lr, lr, #1
 8008d08:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8008d0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008d10:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008d14:	d1db      	bne.n	8008cce <__ieee754_sqrt+0xba>
 8008d16:	430b      	orrs	r3, r1
 8008d18:	d006      	beq.n	8008d28 <__ieee754_sqrt+0x114>
 8008d1a:	1c50      	adds	r0, r2, #1
 8008d1c:	bf13      	iteet	ne
 8008d1e:	3201      	addne	r2, #1
 8008d20:	3401      	addeq	r4, #1
 8008d22:	4672      	moveq	r2, lr
 8008d24:	f022 0201 	bicne.w	r2, r2, #1
 8008d28:	1063      	asrs	r3, r4, #1
 8008d2a:	0852      	lsrs	r2, r2, #1
 8008d2c:	07e1      	lsls	r1, r4, #31
 8008d2e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008d32:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008d36:	bf48      	it	mi
 8008d38:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008d3c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008d40:	4614      	mov	r4, r2
 8008d42:	e781      	b.n	8008c48 <__ieee754_sqrt+0x34>
 8008d44:	0ad9      	lsrs	r1, r3, #11
 8008d46:	3815      	subs	r0, #21
 8008d48:	055b      	lsls	r3, r3, #21
 8008d4a:	2900      	cmp	r1, #0
 8008d4c:	d0fa      	beq.n	8008d44 <__ieee754_sqrt+0x130>
 8008d4e:	02cd      	lsls	r5, r1, #11
 8008d50:	d50a      	bpl.n	8008d68 <__ieee754_sqrt+0x154>
 8008d52:	f1c2 0420 	rsb	r4, r2, #32
 8008d56:	fa23 f404 	lsr.w	r4, r3, r4
 8008d5a:	1e55      	subs	r5, r2, #1
 8008d5c:	4093      	lsls	r3, r2
 8008d5e:	4321      	orrs	r1, r4
 8008d60:	1b42      	subs	r2, r0, r5
 8008d62:	e78a      	b.n	8008c7a <__ieee754_sqrt+0x66>
 8008d64:	4610      	mov	r0, r2
 8008d66:	e7f0      	b.n	8008d4a <__ieee754_sqrt+0x136>
 8008d68:	0049      	lsls	r1, r1, #1
 8008d6a:	3201      	adds	r2, #1
 8008d6c:	e7ef      	b.n	8008d4e <__ieee754_sqrt+0x13a>
 8008d6e:	4680      	mov	r8, r0
 8008d70:	e7bd      	b.n	8008cee <__ieee754_sqrt+0xda>
 8008d72:	bf00      	nop
 8008d74:	7ff00000 	.word	0x7ff00000

08008d78 <with_errno>:
 8008d78:	b570      	push	{r4, r5, r6, lr}
 8008d7a:	4604      	mov	r4, r0
 8008d7c:	460d      	mov	r5, r1
 8008d7e:	4616      	mov	r6, r2
 8008d80:	f7fe fcf4 	bl	800776c <__errno>
 8008d84:	4629      	mov	r1, r5
 8008d86:	6006      	str	r6, [r0, #0]
 8008d88:	4620      	mov	r0, r4
 8008d8a:	bd70      	pop	{r4, r5, r6, pc}

08008d8c <xflow>:
 8008d8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d8e:	4614      	mov	r4, r2
 8008d90:	461d      	mov	r5, r3
 8008d92:	b108      	cbz	r0, 8008d98 <xflow+0xc>
 8008d94:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008d98:	e9cd 2300 	strd	r2, r3, [sp]
 8008d9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008da0:	4620      	mov	r0, r4
 8008da2:	4629      	mov	r1, r5
 8008da4:	f7f7 fc30 	bl	8000608 <__aeabi_dmul>
 8008da8:	2222      	movs	r2, #34	; 0x22
 8008daa:	b003      	add	sp, #12
 8008dac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008db0:	f7ff bfe2 	b.w	8008d78 <with_errno>

08008db4 <__math_uflow>:
 8008db4:	b508      	push	{r3, lr}
 8008db6:	2200      	movs	r2, #0
 8008db8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008dbc:	f7ff ffe6 	bl	8008d8c <xflow>
 8008dc0:	ec41 0b10 	vmov	d0, r0, r1
 8008dc4:	bd08      	pop	{r3, pc}

08008dc6 <__math_oflow>:
 8008dc6:	b508      	push	{r3, lr}
 8008dc8:	2200      	movs	r2, #0
 8008dca:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8008dce:	f7ff ffdd 	bl	8008d8c <xflow>
 8008dd2:	ec41 0b10 	vmov	d0, r0, r1
 8008dd6:	bd08      	pop	{r3, pc}

08008dd8 <fabs>:
 8008dd8:	ec51 0b10 	vmov	r0, r1, d0
 8008ddc:	ee10 2a10 	vmov	r2, s0
 8008de0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008de4:	ec43 2b10 	vmov	d0, r2, r3
 8008de8:	4770      	bx	lr

08008dea <finite>:
 8008dea:	b082      	sub	sp, #8
 8008dec:	ed8d 0b00 	vstr	d0, [sp]
 8008df0:	9801      	ldr	r0, [sp, #4]
 8008df2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8008df6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008dfa:	0fc0      	lsrs	r0, r0, #31
 8008dfc:	b002      	add	sp, #8
 8008dfe:	4770      	bx	lr

08008e00 <scalbn>:
 8008e00:	b570      	push	{r4, r5, r6, lr}
 8008e02:	ec55 4b10 	vmov	r4, r5, d0
 8008e06:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008e0a:	4606      	mov	r6, r0
 8008e0c:	462b      	mov	r3, r5
 8008e0e:	b99a      	cbnz	r2, 8008e38 <scalbn+0x38>
 8008e10:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008e14:	4323      	orrs	r3, r4
 8008e16:	d036      	beq.n	8008e86 <scalbn+0x86>
 8008e18:	4b39      	ldr	r3, [pc, #228]	; (8008f00 <scalbn+0x100>)
 8008e1a:	4629      	mov	r1, r5
 8008e1c:	ee10 0a10 	vmov	r0, s0
 8008e20:	2200      	movs	r2, #0
 8008e22:	f7f7 fbf1 	bl	8000608 <__aeabi_dmul>
 8008e26:	4b37      	ldr	r3, [pc, #220]	; (8008f04 <scalbn+0x104>)
 8008e28:	429e      	cmp	r6, r3
 8008e2a:	4604      	mov	r4, r0
 8008e2c:	460d      	mov	r5, r1
 8008e2e:	da10      	bge.n	8008e52 <scalbn+0x52>
 8008e30:	a32b      	add	r3, pc, #172	; (adr r3, 8008ee0 <scalbn+0xe0>)
 8008e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e36:	e03a      	b.n	8008eae <scalbn+0xae>
 8008e38:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008e3c:	428a      	cmp	r2, r1
 8008e3e:	d10c      	bne.n	8008e5a <scalbn+0x5a>
 8008e40:	ee10 2a10 	vmov	r2, s0
 8008e44:	4620      	mov	r0, r4
 8008e46:	4629      	mov	r1, r5
 8008e48:	f7f7 fa28 	bl	800029c <__adddf3>
 8008e4c:	4604      	mov	r4, r0
 8008e4e:	460d      	mov	r5, r1
 8008e50:	e019      	b.n	8008e86 <scalbn+0x86>
 8008e52:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008e56:	460b      	mov	r3, r1
 8008e58:	3a36      	subs	r2, #54	; 0x36
 8008e5a:	4432      	add	r2, r6
 8008e5c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008e60:	428a      	cmp	r2, r1
 8008e62:	dd08      	ble.n	8008e76 <scalbn+0x76>
 8008e64:	2d00      	cmp	r5, #0
 8008e66:	a120      	add	r1, pc, #128	; (adr r1, 8008ee8 <scalbn+0xe8>)
 8008e68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e6c:	da1c      	bge.n	8008ea8 <scalbn+0xa8>
 8008e6e:	a120      	add	r1, pc, #128	; (adr r1, 8008ef0 <scalbn+0xf0>)
 8008e70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e74:	e018      	b.n	8008ea8 <scalbn+0xa8>
 8008e76:	2a00      	cmp	r2, #0
 8008e78:	dd08      	ble.n	8008e8c <scalbn+0x8c>
 8008e7a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008e7e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008e82:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008e86:	ec45 4b10 	vmov	d0, r4, r5
 8008e8a:	bd70      	pop	{r4, r5, r6, pc}
 8008e8c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008e90:	da19      	bge.n	8008ec6 <scalbn+0xc6>
 8008e92:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008e96:	429e      	cmp	r6, r3
 8008e98:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8008e9c:	dd0a      	ble.n	8008eb4 <scalbn+0xb4>
 8008e9e:	a112      	add	r1, pc, #72	; (adr r1, 8008ee8 <scalbn+0xe8>)
 8008ea0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d1e2      	bne.n	8008e6e <scalbn+0x6e>
 8008ea8:	a30f      	add	r3, pc, #60	; (adr r3, 8008ee8 <scalbn+0xe8>)
 8008eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eae:	f7f7 fbab 	bl	8000608 <__aeabi_dmul>
 8008eb2:	e7cb      	b.n	8008e4c <scalbn+0x4c>
 8008eb4:	a10a      	add	r1, pc, #40	; (adr r1, 8008ee0 <scalbn+0xe0>)
 8008eb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d0b8      	beq.n	8008e30 <scalbn+0x30>
 8008ebe:	a10e      	add	r1, pc, #56	; (adr r1, 8008ef8 <scalbn+0xf8>)
 8008ec0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ec4:	e7b4      	b.n	8008e30 <scalbn+0x30>
 8008ec6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008eca:	3236      	adds	r2, #54	; 0x36
 8008ecc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008ed0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008ed4:	4620      	mov	r0, r4
 8008ed6:	4b0c      	ldr	r3, [pc, #48]	; (8008f08 <scalbn+0x108>)
 8008ed8:	2200      	movs	r2, #0
 8008eda:	e7e8      	b.n	8008eae <scalbn+0xae>
 8008edc:	f3af 8000 	nop.w
 8008ee0:	c2f8f359 	.word	0xc2f8f359
 8008ee4:	01a56e1f 	.word	0x01a56e1f
 8008ee8:	8800759c 	.word	0x8800759c
 8008eec:	7e37e43c 	.word	0x7e37e43c
 8008ef0:	8800759c 	.word	0x8800759c
 8008ef4:	fe37e43c 	.word	0xfe37e43c
 8008ef8:	c2f8f359 	.word	0xc2f8f359
 8008efc:	81a56e1f 	.word	0x81a56e1f
 8008f00:	43500000 	.word	0x43500000
 8008f04:	ffff3cb0 	.word	0xffff3cb0
 8008f08:	3c900000 	.word	0x3c900000

08008f0c <_init>:
 8008f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f0e:	bf00      	nop
 8008f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f12:	bc08      	pop	{r3}
 8008f14:	469e      	mov	lr, r3
 8008f16:	4770      	bx	lr

08008f18 <_fini>:
 8008f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f1a:	bf00      	nop
 8008f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f1e:	bc08      	pop	{r3}
 8008f20:	469e      	mov	lr, r3
 8008f22:	4770      	bx	lr

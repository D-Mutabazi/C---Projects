
PV System Efficiency Monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046a0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08004840  08004840  00014840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004890  08004890  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08004890  08004890  00014890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004898  08004898  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004898  08004898  00014898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800489c  0800489c  0001489c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  080048a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  20000090  0800492c  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  0800492c  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a18c  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001946  00000000  00000000  0002a248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d8  00000000  00000000  0002bb90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000740  00000000  00000000  0002c368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016cd4  00000000  00000000  0002caa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a1cb  00000000  00000000  0004377c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091b45  00000000  00000000  0004d947  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000df48c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000241c  00000000  00000000  000df4dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004828 	.word	0x08004828

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	08004828 	.word	0x08004828

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2uiz>:
 800085c:	004a      	lsls	r2, r1, #1
 800085e:	d211      	bcs.n	8000884 <__aeabi_d2uiz+0x28>
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000864:	d211      	bcs.n	800088a <__aeabi_d2uiz+0x2e>
 8000866:	d50d      	bpl.n	8000884 <__aeabi_d2uiz+0x28>
 8000868:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d40e      	bmi.n	8000890 <__aeabi_d2uiz+0x34>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	fa23 f002 	lsr.w	r0, r3, r2
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800088e:	d102      	bne.n	8000896 <__aeabi_d2uiz+0x3a>
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	4770      	bx	lr
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	4770      	bx	lr

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295
 80008b0:	f000 b974 	b.w	8000b9c <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f000 f806 	bl	80008cc <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__udivmoddi4>:
 80008cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d0:	9d08      	ldr	r5, [sp, #32]
 80008d2:	4604      	mov	r4, r0
 80008d4:	468e      	mov	lr, r1
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d14d      	bne.n	8000976 <__udivmoddi4+0xaa>
 80008da:	428a      	cmp	r2, r1
 80008dc:	4694      	mov	ip, r2
 80008de:	d969      	bls.n	80009b4 <__udivmoddi4+0xe8>
 80008e0:	fab2 f282 	clz	r2, r2
 80008e4:	b152      	cbz	r2, 80008fc <__udivmoddi4+0x30>
 80008e6:	fa01 f302 	lsl.w	r3, r1, r2
 80008ea:	f1c2 0120 	rsb	r1, r2, #32
 80008ee:	fa20 f101 	lsr.w	r1, r0, r1
 80008f2:	fa0c fc02 	lsl.w	ip, ip, r2
 80008f6:	ea41 0e03 	orr.w	lr, r1, r3
 80008fa:	4094      	lsls	r4, r2
 80008fc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000900:	0c21      	lsrs	r1, r4, #16
 8000902:	fbbe f6f8 	udiv	r6, lr, r8
 8000906:	fa1f f78c 	uxth.w	r7, ip
 800090a:	fb08 e316 	mls	r3, r8, r6, lr
 800090e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000912:	fb06 f107 	mul.w	r1, r6, r7
 8000916:	4299      	cmp	r1, r3
 8000918:	d90a      	bls.n	8000930 <__udivmoddi4+0x64>
 800091a:	eb1c 0303 	adds.w	r3, ip, r3
 800091e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000922:	f080 811f 	bcs.w	8000b64 <__udivmoddi4+0x298>
 8000926:	4299      	cmp	r1, r3
 8000928:	f240 811c 	bls.w	8000b64 <__udivmoddi4+0x298>
 800092c:	3e02      	subs	r6, #2
 800092e:	4463      	add	r3, ip
 8000930:	1a5b      	subs	r3, r3, r1
 8000932:	b2a4      	uxth	r4, r4
 8000934:	fbb3 f0f8 	udiv	r0, r3, r8
 8000938:	fb08 3310 	mls	r3, r8, r0, r3
 800093c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000940:	fb00 f707 	mul.w	r7, r0, r7
 8000944:	42a7      	cmp	r7, r4
 8000946:	d90a      	bls.n	800095e <__udivmoddi4+0x92>
 8000948:	eb1c 0404 	adds.w	r4, ip, r4
 800094c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000950:	f080 810a 	bcs.w	8000b68 <__udivmoddi4+0x29c>
 8000954:	42a7      	cmp	r7, r4
 8000956:	f240 8107 	bls.w	8000b68 <__udivmoddi4+0x29c>
 800095a:	4464      	add	r4, ip
 800095c:	3802      	subs	r0, #2
 800095e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000962:	1be4      	subs	r4, r4, r7
 8000964:	2600      	movs	r6, #0
 8000966:	b11d      	cbz	r5, 8000970 <__udivmoddi4+0xa4>
 8000968:	40d4      	lsrs	r4, r2
 800096a:	2300      	movs	r3, #0
 800096c:	e9c5 4300 	strd	r4, r3, [r5]
 8000970:	4631      	mov	r1, r6
 8000972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000976:	428b      	cmp	r3, r1
 8000978:	d909      	bls.n	800098e <__udivmoddi4+0xc2>
 800097a:	2d00      	cmp	r5, #0
 800097c:	f000 80ef 	beq.w	8000b5e <__udivmoddi4+0x292>
 8000980:	2600      	movs	r6, #0
 8000982:	e9c5 0100 	strd	r0, r1, [r5]
 8000986:	4630      	mov	r0, r6
 8000988:	4631      	mov	r1, r6
 800098a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098e:	fab3 f683 	clz	r6, r3
 8000992:	2e00      	cmp	r6, #0
 8000994:	d14a      	bne.n	8000a2c <__udivmoddi4+0x160>
 8000996:	428b      	cmp	r3, r1
 8000998:	d302      	bcc.n	80009a0 <__udivmoddi4+0xd4>
 800099a:	4282      	cmp	r2, r0
 800099c:	f200 80f9 	bhi.w	8000b92 <__udivmoddi4+0x2c6>
 80009a0:	1a84      	subs	r4, r0, r2
 80009a2:	eb61 0303 	sbc.w	r3, r1, r3
 80009a6:	2001      	movs	r0, #1
 80009a8:	469e      	mov	lr, r3
 80009aa:	2d00      	cmp	r5, #0
 80009ac:	d0e0      	beq.n	8000970 <__udivmoddi4+0xa4>
 80009ae:	e9c5 4e00 	strd	r4, lr, [r5]
 80009b2:	e7dd      	b.n	8000970 <__udivmoddi4+0xa4>
 80009b4:	b902      	cbnz	r2, 80009b8 <__udivmoddi4+0xec>
 80009b6:	deff      	udf	#255	; 0xff
 80009b8:	fab2 f282 	clz	r2, r2
 80009bc:	2a00      	cmp	r2, #0
 80009be:	f040 8092 	bne.w	8000ae6 <__udivmoddi4+0x21a>
 80009c2:	eba1 010c 	sub.w	r1, r1, ip
 80009c6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009ca:	fa1f fe8c 	uxth.w	lr, ip
 80009ce:	2601      	movs	r6, #1
 80009d0:	0c20      	lsrs	r0, r4, #16
 80009d2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009d6:	fb07 1113 	mls	r1, r7, r3, r1
 80009da:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009de:	fb0e f003 	mul.w	r0, lr, r3
 80009e2:	4288      	cmp	r0, r1
 80009e4:	d908      	bls.n	80009f8 <__udivmoddi4+0x12c>
 80009e6:	eb1c 0101 	adds.w	r1, ip, r1
 80009ea:	f103 38ff 	add.w	r8, r3, #4294967295
 80009ee:	d202      	bcs.n	80009f6 <__udivmoddi4+0x12a>
 80009f0:	4288      	cmp	r0, r1
 80009f2:	f200 80cb 	bhi.w	8000b8c <__udivmoddi4+0x2c0>
 80009f6:	4643      	mov	r3, r8
 80009f8:	1a09      	subs	r1, r1, r0
 80009fa:	b2a4      	uxth	r4, r4
 80009fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a00:	fb07 1110 	mls	r1, r7, r0, r1
 8000a04:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a08:	fb0e fe00 	mul.w	lr, lr, r0
 8000a0c:	45a6      	cmp	lr, r4
 8000a0e:	d908      	bls.n	8000a22 <__udivmoddi4+0x156>
 8000a10:	eb1c 0404 	adds.w	r4, ip, r4
 8000a14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a18:	d202      	bcs.n	8000a20 <__udivmoddi4+0x154>
 8000a1a:	45a6      	cmp	lr, r4
 8000a1c:	f200 80bb 	bhi.w	8000b96 <__udivmoddi4+0x2ca>
 8000a20:	4608      	mov	r0, r1
 8000a22:	eba4 040e 	sub.w	r4, r4, lr
 8000a26:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a2a:	e79c      	b.n	8000966 <__udivmoddi4+0x9a>
 8000a2c:	f1c6 0720 	rsb	r7, r6, #32
 8000a30:	40b3      	lsls	r3, r6
 8000a32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a3a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a3e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a42:	431c      	orrs	r4, r3
 8000a44:	40f9      	lsrs	r1, r7
 8000a46:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a4a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a4e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a52:	0c20      	lsrs	r0, r4, #16
 8000a54:	fa1f fe8c 	uxth.w	lr, ip
 8000a58:	fb09 1118 	mls	r1, r9, r8, r1
 8000a5c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a60:	fb08 f00e 	mul.w	r0, r8, lr
 8000a64:	4288      	cmp	r0, r1
 8000a66:	fa02 f206 	lsl.w	r2, r2, r6
 8000a6a:	d90b      	bls.n	8000a84 <__udivmoddi4+0x1b8>
 8000a6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a74:	f080 8088 	bcs.w	8000b88 <__udivmoddi4+0x2bc>
 8000a78:	4288      	cmp	r0, r1
 8000a7a:	f240 8085 	bls.w	8000b88 <__udivmoddi4+0x2bc>
 8000a7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a82:	4461      	add	r1, ip
 8000a84:	1a09      	subs	r1, r1, r0
 8000a86:	b2a4      	uxth	r4, r4
 8000a88:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a8c:	fb09 1110 	mls	r1, r9, r0, r1
 8000a90:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a98:	458e      	cmp	lr, r1
 8000a9a:	d908      	bls.n	8000aae <__udivmoddi4+0x1e2>
 8000a9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000aa0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000aa4:	d26c      	bcs.n	8000b80 <__udivmoddi4+0x2b4>
 8000aa6:	458e      	cmp	lr, r1
 8000aa8:	d96a      	bls.n	8000b80 <__udivmoddi4+0x2b4>
 8000aaa:	3802      	subs	r0, #2
 8000aac:	4461      	add	r1, ip
 8000aae:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ab2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ab6:	eba1 010e 	sub.w	r1, r1, lr
 8000aba:	42a1      	cmp	r1, r4
 8000abc:	46c8      	mov	r8, r9
 8000abe:	46a6      	mov	lr, r4
 8000ac0:	d356      	bcc.n	8000b70 <__udivmoddi4+0x2a4>
 8000ac2:	d053      	beq.n	8000b6c <__udivmoddi4+0x2a0>
 8000ac4:	b15d      	cbz	r5, 8000ade <__udivmoddi4+0x212>
 8000ac6:	ebb3 0208 	subs.w	r2, r3, r8
 8000aca:	eb61 010e 	sbc.w	r1, r1, lr
 8000ace:	fa01 f707 	lsl.w	r7, r1, r7
 8000ad2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ad6:	40f1      	lsrs	r1, r6
 8000ad8:	431f      	orrs	r7, r3
 8000ada:	e9c5 7100 	strd	r7, r1, [r5]
 8000ade:	2600      	movs	r6, #0
 8000ae0:	4631      	mov	r1, r6
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	f1c2 0320 	rsb	r3, r2, #32
 8000aea:	40d8      	lsrs	r0, r3
 8000aec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000af0:	fa21 f303 	lsr.w	r3, r1, r3
 8000af4:	4091      	lsls	r1, r2
 8000af6:	4301      	orrs	r1, r0
 8000af8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000afc:	fa1f fe8c 	uxth.w	lr, ip
 8000b00:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b04:	fb07 3610 	mls	r6, r7, r0, r3
 8000b08:	0c0b      	lsrs	r3, r1, #16
 8000b0a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b0e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b12:	429e      	cmp	r6, r3
 8000b14:	fa04 f402 	lsl.w	r4, r4, r2
 8000b18:	d908      	bls.n	8000b2c <__udivmoddi4+0x260>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b22:	d22f      	bcs.n	8000b84 <__udivmoddi4+0x2b8>
 8000b24:	429e      	cmp	r6, r3
 8000b26:	d92d      	bls.n	8000b84 <__udivmoddi4+0x2b8>
 8000b28:	3802      	subs	r0, #2
 8000b2a:	4463      	add	r3, ip
 8000b2c:	1b9b      	subs	r3, r3, r6
 8000b2e:	b289      	uxth	r1, r1
 8000b30:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b34:	fb07 3316 	mls	r3, r7, r6, r3
 8000b38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b3c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b40:	428b      	cmp	r3, r1
 8000b42:	d908      	bls.n	8000b56 <__udivmoddi4+0x28a>
 8000b44:	eb1c 0101 	adds.w	r1, ip, r1
 8000b48:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b4c:	d216      	bcs.n	8000b7c <__udivmoddi4+0x2b0>
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d914      	bls.n	8000b7c <__udivmoddi4+0x2b0>
 8000b52:	3e02      	subs	r6, #2
 8000b54:	4461      	add	r1, ip
 8000b56:	1ac9      	subs	r1, r1, r3
 8000b58:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b5c:	e738      	b.n	80009d0 <__udivmoddi4+0x104>
 8000b5e:	462e      	mov	r6, r5
 8000b60:	4628      	mov	r0, r5
 8000b62:	e705      	b.n	8000970 <__udivmoddi4+0xa4>
 8000b64:	4606      	mov	r6, r0
 8000b66:	e6e3      	b.n	8000930 <__udivmoddi4+0x64>
 8000b68:	4618      	mov	r0, r3
 8000b6a:	e6f8      	b.n	800095e <__udivmoddi4+0x92>
 8000b6c:	454b      	cmp	r3, r9
 8000b6e:	d2a9      	bcs.n	8000ac4 <__udivmoddi4+0x1f8>
 8000b70:	ebb9 0802 	subs.w	r8, r9, r2
 8000b74:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b78:	3801      	subs	r0, #1
 8000b7a:	e7a3      	b.n	8000ac4 <__udivmoddi4+0x1f8>
 8000b7c:	4646      	mov	r6, r8
 8000b7e:	e7ea      	b.n	8000b56 <__udivmoddi4+0x28a>
 8000b80:	4620      	mov	r0, r4
 8000b82:	e794      	b.n	8000aae <__udivmoddi4+0x1e2>
 8000b84:	4640      	mov	r0, r8
 8000b86:	e7d1      	b.n	8000b2c <__udivmoddi4+0x260>
 8000b88:	46d0      	mov	r8, sl
 8000b8a:	e77b      	b.n	8000a84 <__udivmoddi4+0x1b8>
 8000b8c:	3b02      	subs	r3, #2
 8000b8e:	4461      	add	r1, ip
 8000b90:	e732      	b.n	80009f8 <__udivmoddi4+0x12c>
 8000b92:	4630      	mov	r0, r6
 8000b94:	e709      	b.n	80009aa <__udivmoddi4+0xde>
 8000b96:	4464      	add	r4, ip
 8000b98:	3802      	subs	r0, #2
 8000b9a:	e742      	b.n	8000a22 <__udivmoddi4+0x156>

08000b9c <__aeabi_idiv0>:
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]

	// char received - echo ;
	HAL_UART_Transmit_IT(huart, (uint8_t*)char_rcvd, 1) ;
 8000ba8:	2201      	movs	r2, #1
 8000baa:	4906      	ldr	r1, [pc, #24]	; (8000bc4 <HAL_UART_RxCpltCallback+0x24>)
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f002 fa2c 	bl	800300a <HAL_UART_Transmit_IT>

	//re-prime receiver
	HAL_UART_Receive_IT(huart, (uint8_t*)char_rcvd, 1) ;
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	4903      	ldr	r1, [pc, #12]	; (8000bc4 <HAL_UART_RxCpltCallback+0x24>)
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f002 fa6c 	bl	8003094 <HAL_UART_Receive_IT>

}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000010 	.word	0x20000010

08000bc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bcc:	f000 fd4c 	bl	8001668 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd0:	f000 f914 	bl	8000dfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bd4:	f000 f9fa 	bl	8000fcc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bd8:	f000 f9cc 	bl	8000f74 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000bdc:	f000 f978 	bl	8000ed0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(150);
 8000be0:	2096      	movs	r0, #150	; 0x96
 8000be2:	f000 fdb3 	bl	800174c <HAL_Delay>
  HAL_UART_Transmit_IT(&huart2, (uint8_t*)studentNum, 13) ;
 8000be6:	220d      	movs	r2, #13
 8000be8:	496f      	ldr	r1, [pc, #444]	; (8000da8 <main+0x1e0>)
 8000bea:	4870      	ldr	r0, [pc, #448]	; (8000dac <main+0x1e4>)
 8000bec:	f002 fa0d 	bl	800300a <HAL_UART_Transmit_IT>

  HAL_UART_Receive_IT(&huart2, (uint8_t*)char_rcvd, 1) ;
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	496f      	ldr	r1, [pc, #444]	; (8000db0 <main+0x1e8>)
 8000bf4:	486d      	ldr	r0, [pc, #436]	; (8000dac <main+0x1e4>)
 8000bf6:	f002 fa4d 	bl	8003094 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  // temp sens
	  HAL_ADC_Start(&hadc1) ;
 8000bfa:	486e      	ldr	r0, [pc, #440]	; (8000db4 <main+0x1ec>)
 8000bfc:	f000 fe0e 	bl	800181c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000c00:	f04f 31ff 	mov.w	r1, #4294967295
 8000c04:	486b      	ldr	r0, [pc, #428]	; (8000db4 <main+0x1ec>)
 8000c06:	f000 febd 	bl	8001984 <HAL_ADC_PollForConversion>
	  g_raw  = HAL_ADC_GetValue(&hadc1) ;
 8000c0a:	486a      	ldr	r0, [pc, #424]	; (8000db4 <main+0x1ec>)
 8000c0c:	f000 ff45 	bl	8001a9a <HAL_ADC_GetValue>
 8000c10:	4603      	mov	r3, r0
 8000c12:	b29a      	uxth	r2, r3
 8000c14:	4b68      	ldr	r3, [pc, #416]	; (8000db8 <main+0x1f0>)
 8000c16:	801a      	strh	r2, [r3, #0]

	  g_vin = g_raw*(3.3/4095.0) ; // input voltage
 8000c18:	4b67      	ldr	r3, [pc, #412]	; (8000db8 <main+0x1f0>)
 8000c1a:	881b      	ldrh	r3, [r3, #0]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff fdb3 	bl	8000788 <__aeabi_i2d>
 8000c22:	a35d      	add	r3, pc, #372	; (adr r3, 8000d98 <main+0x1d0>)
 8000c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c28:	f7ff fb32 	bl	8000290 <__aeabi_dmul>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	460b      	mov	r3, r1
 8000c30:	4962      	ldr	r1, [pc, #392]	; (8000dbc <main+0x1f4>)
 8000c32:	e9c1 2300 	strd	r2, r3, [r1]
	  g_temp = g_vin*100 - 273.15 ;
 8000c36:	4b61      	ldr	r3, [pc, #388]	; (8000dbc <main+0x1f4>)
 8000c38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c3c:	f04f 0200 	mov.w	r2, #0
 8000c40:	4b5f      	ldr	r3, [pc, #380]	; (8000dc0 <main+0x1f8>)
 8000c42:	f7ff fb25 	bl	8000290 <__aeabi_dmul>
 8000c46:	4602      	mov	r2, r0
 8000c48:	460b      	mov	r3, r1
 8000c4a:	4610      	mov	r0, r2
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	a354      	add	r3, pc, #336	; (adr r3, 8000da0 <main+0x1d8>)
 8000c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c54:	f7ff fc4a 	bl	80004ec <__aeabi_dsub>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	460b      	mov	r3, r1
 8000c5c:	4959      	ldr	r1, [pc, #356]	; (8000dc4 <main+0x1fc>)
 8000c5e:	e9c1 2300 	strd	r2, r3, [r1]
	  g_temp_in_deg = (uint16_t)g_temp ;
 8000c62:	4b58      	ldr	r3, [pc, #352]	; (8000dc4 <main+0x1fc>)
 8000c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c68:	4610      	mov	r0, r2
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	f7ff fdf6 	bl	800085c <__aeabi_d2uiz>
 8000c70:	4603      	mov	r3, r0
 8000c72:	b29a      	uxth	r2, r3
 8000c74:	4b54      	ldr	r3, [pc, #336]	; (8000dc8 <main+0x200>)
 8000c76:	801a      	strh	r2, [r3, #0]

	  g_temperature[0]  = (g_temp_in_deg/100) + 48 ;
 8000c78:	4b53      	ldr	r3, [pc, #332]	; (8000dc8 <main+0x200>)
 8000c7a:	881b      	ldrh	r3, [r3, #0]
 8000c7c:	4a53      	ldr	r2, [pc, #332]	; (8000dcc <main+0x204>)
 8000c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c82:	095b      	lsrs	r3, r3, #5
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	3330      	adds	r3, #48	; 0x30
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	4b50      	ldr	r3, [pc, #320]	; (8000dd0 <main+0x208>)
 8000c8e:	701a      	strb	r2, [r3, #0]
	  g_temperature[1] = (g_temp_in_deg - (g_temp_in_deg/100)*100 )/10 + 48 ;
 8000c90:	4b4d      	ldr	r3, [pc, #308]	; (8000dc8 <main+0x200>)
 8000c92:	881b      	ldrh	r3, [r3, #0]
 8000c94:	4619      	mov	r1, r3
 8000c96:	4b4c      	ldr	r3, [pc, #304]	; (8000dc8 <main+0x200>)
 8000c98:	881b      	ldrh	r3, [r3, #0]
 8000c9a:	4a4c      	ldr	r2, [pc, #304]	; (8000dcc <main+0x204>)
 8000c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000ca0:	095b      	lsrs	r3, r3, #5
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8000caa:	fb02 f303 	mul.w	r3, r2, r3
 8000cae:	440b      	add	r3, r1
 8000cb0:	4a48      	ldr	r2, [pc, #288]	; (8000dd4 <main+0x20c>)
 8000cb2:	fb82 1203 	smull	r1, r2, r2, r3
 8000cb6:	1092      	asrs	r2, r2, #2
 8000cb8:	17db      	asrs	r3, r3, #31
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	3330      	adds	r3, #48	; 0x30
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	4b43      	ldr	r3, [pc, #268]	; (8000dd0 <main+0x208>)
 8000cc4:	705a      	strb	r2, [r3, #1]
	  g_temperature[2] = (g_temp_in_deg - ((g_temp_in_deg/10)*10) ) + 48 ;
 8000cc6:	4b40      	ldr	r3, [pc, #256]	; (8000dc8 <main+0x200>)
 8000cc8:	881b      	ldrh	r3, [r3, #0]
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	4b3e      	ldr	r3, [pc, #248]	; (8000dc8 <main+0x200>)
 8000cce:	881b      	ldrh	r3, [r3, #0]
 8000cd0:	4941      	ldr	r1, [pc, #260]	; (8000dd8 <main+0x210>)
 8000cd2:	fba1 1303 	umull	r1, r3, r1, r3
 8000cd6:	08db      	lsrs	r3, r3, #3
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	4619      	mov	r1, r3
 8000cde:	0149      	lsls	r1, r1, #5
 8000ce0:	1ac9      	subs	r1, r1, r3
 8000ce2:	0089      	lsls	r1, r1, #2
 8000ce4:	1acb      	subs	r3, r1, r3
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	4413      	add	r3, r2
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	3330      	adds	r3, #48	; 0x30
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	4b37      	ldr	r3, [pc, #220]	; (8000dd0 <main+0x208>)
 8000cf4:	709a      	strb	r2, [r3, #2]

	  sprintf(g_msg, "%d\n", g_raw) ;
 8000cf6:	4b30      	ldr	r3, [pc, #192]	; (8000db8 <main+0x1f0>)
 8000cf8:	881b      	ldrh	r3, [r3, #0]
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	4937      	ldr	r1, [pc, #220]	; (8000ddc <main+0x214>)
 8000cfe:	4838      	ldr	r0, [pc, #224]	; (8000de0 <main+0x218>)
 8000d00:	f003 f924 	bl	8003f4c <siprintf>
	  HAL_UART_Transmit_IT(&huart2,(uint8_t*)g_msg, strlen(g_msg)) ;
 8000d04:	4836      	ldr	r0, [pc, #216]	; (8000de0 <main+0x218>)
 8000d06:	f7ff fa6b 	bl	80001e0 <strlen>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	b29b      	uxth	r3, r3
 8000d0e:	461a      	mov	r2, r3
 8000d10:	4933      	ldr	r1, [pc, #204]	; (8000de0 <main+0x218>)
 8000d12:	4826      	ldr	r0, [pc, #152]	; (8000dac <main+0x1e4>)
 8000d14:	f002 f979 	bl	800300a <HAL_UART_Transmit_IT>
	  HAL_Delay(100) ;
 8000d18:	2064      	movs	r0, #100	; 0x64
 8000d1a:	f000 fd17 	bl	800174c <HAL_Delay>


	  if(g_left_button_pressed == 1){
 8000d1e:	4b31      	ldr	r3, [pc, #196]	; (8000de4 <main+0x21c>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d107      	bne.n	8000d36 <main+0x16e>
		  g_left_button_pressed = 0 ;
 8000d26:	4b2f      	ldr	r3, [pc, #188]	; (8000de4 <main+0x21c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	701a      	strb	r2, [r3, #0]

		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5) ;
 8000d2c:	2120      	movs	r1, #32
 8000d2e:	482e      	ldr	r0, [pc, #184]	; (8000de8 <main+0x220>)
 8000d30:	f001 fc47 	bl	80025c2 <HAL_GPIO_TogglePin>
 8000d34:	e761      	b.n	8000bfa <main+0x32>
	  }

	  else if(g_right_button_pressed == 1){
 8000d36:	4b2d      	ldr	r3, [pc, #180]	; (8000dec <main+0x224>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d107      	bne.n	8000d4e <main+0x186>
		  g_right_button_pressed = 0;
 8000d3e:	4b2b      	ldr	r3, [pc, #172]	; (8000dec <main+0x224>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	701a      	strb	r2, [r3, #0]

		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5) ;
 8000d44:	2120      	movs	r1, #32
 8000d46:	4828      	ldr	r0, [pc, #160]	; (8000de8 <main+0x220>)
 8000d48:	f001 fc3b 	bl	80025c2 <HAL_GPIO_TogglePin>
 8000d4c:	e755      	b.n	8000bfa <main+0x32>

	  }

	  else if(g_middle_button_pressed == 1){
 8000d4e:	4b28      	ldr	r3, [pc, #160]	; (8000df0 <main+0x228>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d107      	bne.n	8000d66 <main+0x19e>
		  g_middle_button_pressed = 0 ;
 8000d56:	4b26      	ldr	r3, [pc, #152]	; (8000df0 <main+0x228>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	701a      	strb	r2, [r3, #0]

		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5) ;
 8000d5c:	2120      	movs	r1, #32
 8000d5e:	4822      	ldr	r0, [pc, #136]	; (8000de8 <main+0x220>)
 8000d60:	f001 fc2f 	bl	80025c2 <HAL_GPIO_TogglePin>
 8000d64:	e749      	b.n	8000bfa <main+0x32>

	  }

	  else if(g_top_button_pressed ==1 ){
 8000d66:	4b23      	ldr	r3, [pc, #140]	; (8000df4 <main+0x22c>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d107      	bne.n	8000d7e <main+0x1b6>
		  g_top_button_pressed = 0;
 8000d6e:	4b21      	ldr	r3, [pc, #132]	; (8000df4 <main+0x22c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	701a      	strb	r2, [r3, #0]

		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5) ;
 8000d74:	2120      	movs	r1, #32
 8000d76:	481c      	ldr	r0, [pc, #112]	; (8000de8 <main+0x220>)
 8000d78:	f001 fc23 	bl	80025c2 <HAL_GPIO_TogglePin>
 8000d7c:	e73d      	b.n	8000bfa <main+0x32>

	  }

	  else{
		  if(g_bottom_button_pressed == 1){
 8000d7e:	4b1e      	ldr	r3, [pc, #120]	; (8000df8 <main+0x230>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	f47f af39 	bne.w	8000bfa <main+0x32>
			  g_bottom_button_pressed = 0 ;
 8000d88:	4b1b      	ldr	r3, [pc, #108]	; (8000df8 <main+0x230>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	701a      	strb	r2, [r3, #0]

			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5) ;
 8000d8e:	2120      	movs	r1, #32
 8000d90:	4815      	ldr	r0, [pc, #84]	; (8000de8 <main+0x220>)
 8000d92:	f001 fc16 	bl	80025c2 <HAL_GPIO_TogglePin>
	  HAL_ADC_Start(&hadc1) ;
 8000d96:	e730      	b.n	8000bfa <main+0x32>
 8000d98:	e734d9b4 	.word	0xe734d9b4
 8000d9c:	3f4a680c 	.word	0x3f4a680c
 8000da0:	66666666 	.word	0x66666666
 8000da4:	40711266 	.word	0x40711266
 8000da8:	20000000 	.word	0x20000000
 8000dac:	200000f4 	.word	0x200000f4
 8000db0:	20000010 	.word	0x20000010
 8000db4:	200000ac 	.word	0x200000ac
 8000db8:	20000138 	.word	0x20000138
 8000dbc:	20000150 	.word	0x20000150
 8000dc0:	40590000 	.word	0x40590000
 8000dc4:	20000148 	.word	0x20000148
 8000dc8:	20000158 	.word	0x20000158
 8000dcc:	51eb851f 	.word	0x51eb851f
 8000dd0:	2000015c 	.word	0x2000015c
 8000dd4:	66666667 	.word	0x66666667
 8000dd8:	cccccccd 	.word	0xcccccccd
 8000ddc:	08004840 	.word	0x08004840
 8000de0:	2000013c 	.word	0x2000013c
 8000de4:	2000015f 	.word	0x2000015f
 8000de8:	40020000 	.word	0x40020000
 8000dec:	20000160 	.word	0x20000160
 8000df0:	20000163 	.word	0x20000163
 8000df4:	20000161 	.word	0x20000161
 8000df8:	20000162 	.word	0x20000162

08000dfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b094      	sub	sp, #80	; 0x50
 8000e00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e02:	f107 0320 	add.w	r3, r7, #32
 8000e06:	2230      	movs	r2, #48	; 0x30
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f003 f896 	bl	8003f3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e10:	f107 030c 	add.w	r3, r7, #12
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e20:	2300      	movs	r3, #0
 8000e22:	60bb      	str	r3, [r7, #8]
 8000e24:	4b28      	ldr	r3, [pc, #160]	; (8000ec8 <SystemClock_Config+0xcc>)
 8000e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e28:	4a27      	ldr	r2, [pc, #156]	; (8000ec8 <SystemClock_Config+0xcc>)
 8000e2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e30:	4b25      	ldr	r3, [pc, #148]	; (8000ec8 <SystemClock_Config+0xcc>)
 8000e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	4b22      	ldr	r3, [pc, #136]	; (8000ecc <SystemClock_Config+0xd0>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a21      	ldr	r2, [pc, #132]	; (8000ecc <SystemClock_Config+0xd0>)
 8000e46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e4a:	6013      	str	r3, [r2, #0]
 8000e4c:	4b1f      	ldr	r3, [pc, #124]	; (8000ecc <SystemClock_Config+0xd0>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e54:	607b      	str	r3, [r7, #4]
 8000e56:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e60:	2310      	movs	r3, #16
 8000e62:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e64:	2302      	movs	r3, #2
 8000e66:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000e6c:	2310      	movs	r3, #16
 8000e6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e70:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000e74:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e76:	2304      	movs	r3, #4
 8000e78:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e7a:	2304      	movs	r3, #4
 8000e7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e7e:	f107 0320 	add.w	r3, r7, #32
 8000e82:	4618      	mov	r0, r3
 8000e84:	f001 fbdc 	bl	8002640 <HAL_RCC_OscConfig>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e8e:	f000 f94f 	bl	8001130 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e92:	230f      	movs	r3, #15
 8000e94:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e96:	2302      	movs	r3, #2
 8000e98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ea8:	f107 030c 	add.w	r3, r7, #12
 8000eac:	2102      	movs	r1, #2
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f001 fe3e 	bl	8002b30 <HAL_RCC_ClockConfig>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000eba:	f000 f939 	bl	8001130 <Error_Handler>
  }
}
 8000ebe:	bf00      	nop
 8000ec0:	3750      	adds	r7, #80	; 0x50
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40007000 	.word	0x40007000

08000ed0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ed6:	463b      	mov	r3, r7
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ee2:	4b21      	ldr	r3, [pc, #132]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000ee4:	4a21      	ldr	r2, [pc, #132]	; (8000f6c <MX_ADC1_Init+0x9c>)
 8000ee6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ee8:	4b1f      	ldr	r3, [pc, #124]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000eea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000eee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ef0:	4b1d      	ldr	r3, [pc, #116]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ef6:	4b1c      	ldr	r3, [pc, #112]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000efc:	4b1a      	ldr	r3, [pc, #104]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f02:	4b19      	ldr	r3, [pc, #100]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f0a:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f10:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000f12:	4a17      	ldr	r2, [pc, #92]	; (8000f70 <MX_ADC1_Init+0xa0>)
 8000f14:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f16:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f2a:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f30:	480d      	ldr	r0, [pc, #52]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000f32:	f000 fc2f 	bl	8001794 <HAL_ADC_Init>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f3c:	f000 f8f8 	bl	8001130 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f44:	2301      	movs	r3, #1
 8000f46:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f4c:	463b      	mov	r3, r7
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4805      	ldr	r0, [pc, #20]	; (8000f68 <MX_ADC1_Init+0x98>)
 8000f52:	f000 fdaf 	bl	8001ab4 <HAL_ADC_ConfigChannel>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f5c:	f000 f8e8 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f60:	bf00      	nop
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	200000ac 	.word	0x200000ac
 8000f6c:	40012000 	.word	0x40012000
 8000f70:	0f000001 	.word	0x0f000001

08000f74 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f78:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <MX_USART2_UART_Init+0x50>)
 8000f7a:	4a13      	ldr	r2, [pc, #76]	; (8000fc8 <MX_USART2_UART_Init+0x54>)
 8000f7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f7e:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <MX_USART2_UART_Init+0x50>)
 8000f80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8000f86:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <MX_USART2_UART_Init+0x50>)
 8000f88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f8c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f8e:	4b0d      	ldr	r3, [pc, #52]	; (8000fc4 <MX_USART2_UART_Init+0x50>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_ODD;
 8000f94:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <MX_USART2_UART_Init+0x50>)
 8000f96:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000f9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f9c:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <MX_USART2_UART_Init+0x50>)
 8000f9e:	220c      	movs	r2, #12
 8000fa0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fa2:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <MX_USART2_UART_Init+0x50>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <MX_USART2_UART_Init+0x50>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fae:	4805      	ldr	r0, [pc, #20]	; (8000fc4 <MX_USART2_UART_Init+0x50>)
 8000fb0:	f001 ffde 	bl	8002f70 <HAL_UART_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8000fba:	f000 f8b9 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	200000f4 	.word	0x200000f4
 8000fc8:	40004400 	.word	0x40004400

08000fcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08a      	sub	sp, #40	; 0x28
 8000fd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd2:	f107 0314 	add.w	r3, r7, #20
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
 8000fde:	60da      	str	r2, [r3, #12]
 8000fe0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	613b      	str	r3, [r7, #16]
 8000fe6:	4b4e      	ldr	r3, [pc, #312]	; (8001120 <MX_GPIO_Init+0x154>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a4d      	ldr	r2, [pc, #308]	; (8001120 <MX_GPIO_Init+0x154>)
 8000fec:	f043 0304 	orr.w	r3, r3, #4
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b4b      	ldr	r3, [pc, #300]	; (8001120 <MX_GPIO_Init+0x154>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0304 	and.w	r3, r3, #4
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	4b47      	ldr	r3, [pc, #284]	; (8001120 <MX_GPIO_Init+0x154>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a46      	ldr	r2, [pc, #280]	; (8001120 <MX_GPIO_Init+0x154>)
 8001008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b44      	ldr	r3, [pc, #272]	; (8001120 <MX_GPIO_Init+0x154>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	4b40      	ldr	r3, [pc, #256]	; (8001120 <MX_GPIO_Init+0x154>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a3f      	ldr	r2, [pc, #252]	; (8001120 <MX_GPIO_Init+0x154>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b3d      	ldr	r3, [pc, #244]	; (8001120 <MX_GPIO_Init+0x154>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	607b      	str	r3, [r7, #4]
 800103a:	4b39      	ldr	r3, [pc, #228]	; (8001120 <MX_GPIO_Init+0x154>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a38      	ldr	r2, [pc, #224]	; (8001120 <MX_GPIO_Init+0x154>)
 8001040:	f043 0302 	orr.w	r3, r3, #2
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
 8001046:	4b36      	ldr	r3, [pc, #216]	; (8001120 <MX_GPIO_Init+0x154>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001058:	4832      	ldr	r0, [pc, #200]	; (8001124 <MX_GPIO_Init+0x158>)
 800105a:	f001 fa99 	bl	8002590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800105e:	2200      	movs	r2, #0
 8001060:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8001064:	4830      	ldr	r0, [pc, #192]	; (8001128 <MX_GPIO_Init+0x15c>)
 8001066:	f001 fa93 	bl	8002590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800106a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800106e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001070:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001074:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800107a:	f107 0314 	add.w	r3, r7, #20
 800107e:	4619      	mov	r1, r3
 8001080:	482a      	ldr	r0, [pc, #168]	; (800112c <MX_GPIO_Init+0x160>)
 8001082:	f001 f8e9 	bl	8002258 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_10;
 8001086:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800108a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108c:	2301      	movs	r3, #1
 800108e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001094:	2300      	movs	r3, #0
 8001096:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	4619      	mov	r1, r3
 800109e:	4821      	ldr	r0, [pc, #132]	; (8001124 <MX_GPIO_Init+0x158>)
 80010a0:	f001 f8da 	bl	8002258 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010a4:	23c0      	movs	r3, #192	; 0xc0
 80010a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80010a8:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80010ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010ae:	2301      	movs	r3, #1
 80010b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	4619      	mov	r1, r3
 80010b8:	481a      	ldr	r0, [pc, #104]	; (8001124 <MX_GPIO_Init+0x158>)
 80010ba:	f001 f8cd 	bl	8002258 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 80010be:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80010c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c4:	2301      	movs	r3, #1
 80010c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010cc:	2300      	movs	r3, #0
 80010ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	4619      	mov	r1, r3
 80010d6:	4814      	ldr	r0, [pc, #80]	; (8001128 <MX_GPIO_Init+0x15c>)
 80010d8:	f001 f8be 	bl	8002258 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80010e2:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80010e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010e8:	2301      	movs	r3, #1
 80010ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	4619      	mov	r1, r3
 80010f2:	480d      	ldr	r0, [pc, #52]	; (8001128 <MX_GPIO_Init+0x15c>)
 80010f4:	f001 f8b0 	bl	8002258 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80010f8:	2200      	movs	r2, #0
 80010fa:	2100      	movs	r1, #0
 80010fc:	2017      	movs	r0, #23
 80010fe:	f000 ffe2 	bl	80020c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001102:	2017      	movs	r0, #23
 8001104:	f000 fffb 	bl	80020fe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001108:	2200      	movs	r2, #0
 800110a:	2100      	movs	r1, #0
 800110c:	2028      	movs	r0, #40	; 0x28
 800110e:	f000 ffda 	bl	80020c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001112:	2028      	movs	r0, #40	; 0x28
 8001114:	f000 fff3 	bl	80020fe <HAL_NVIC_EnableIRQ>

}
 8001118:	bf00      	nop
 800111a:	3728      	adds	r7, #40	; 0x28
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40023800 	.word	0x40023800
 8001124:	40020000 	.word	0x40020000
 8001128:	40020400 	.word	0x40020400
 800112c:	40020800 	.word	0x40020800

08001130 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001134:	b672      	cpsid	i
}
 8001136:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001138:	e7fe      	b.n	8001138 <Error_Handler+0x8>
	...

0800113c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	607b      	str	r3, [r7, #4]
 8001146:	4b10      	ldr	r3, [pc, #64]	; (8001188 <HAL_MspInit+0x4c>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114a:	4a0f      	ldr	r2, [pc, #60]	; (8001188 <HAL_MspInit+0x4c>)
 800114c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001150:	6453      	str	r3, [r2, #68]	; 0x44
 8001152:	4b0d      	ldr	r3, [pc, #52]	; (8001188 <HAL_MspInit+0x4c>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	603b      	str	r3, [r7, #0]
 8001162:	4b09      	ldr	r3, [pc, #36]	; (8001188 <HAL_MspInit+0x4c>)
 8001164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001166:	4a08      	ldr	r2, [pc, #32]	; (8001188 <HAL_MspInit+0x4c>)
 8001168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800116c:	6413      	str	r3, [r2, #64]	; 0x40
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <HAL_MspInit+0x4c>)
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001176:	603b      	str	r3, [r7, #0]
 8001178:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800117a:	2007      	movs	r0, #7
 800117c:	f000 ff98 	bl	80020b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001180:	bf00      	nop
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40023800 	.word	0x40023800

0800118c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08a      	sub	sp, #40	; 0x28
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a17      	ldr	r2, [pc, #92]	; (8001208 <HAL_ADC_MspInit+0x7c>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d127      	bne.n	80011fe <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	4b16      	ldr	r3, [pc, #88]	; (800120c <HAL_ADC_MspInit+0x80>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b6:	4a15      	ldr	r2, [pc, #84]	; (800120c <HAL_ADC_MspInit+0x80>)
 80011b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011bc:	6453      	str	r3, [r2, #68]	; 0x44
 80011be:	4b13      	ldr	r3, [pc, #76]	; (800120c <HAL_ADC_MspInit+0x80>)
 80011c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011c6:	613b      	str	r3, [r7, #16]
 80011c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	4b0f      	ldr	r3, [pc, #60]	; (800120c <HAL_ADC_MspInit+0x80>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a0e      	ldr	r2, [pc, #56]	; (800120c <HAL_ADC_MspInit+0x80>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b0c      	ldr	r3, [pc, #48]	; (800120c <HAL_ADC_MspInit+0x80>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011e6:	2301      	movs	r3, #1
 80011e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ea:	2303      	movs	r3, #3
 80011ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	4619      	mov	r1, r3
 80011f8:	4805      	ldr	r0, [pc, #20]	; (8001210 <HAL_ADC_MspInit+0x84>)
 80011fa:	f001 f82d 	bl	8002258 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011fe:	bf00      	nop
 8001200:	3728      	adds	r7, #40	; 0x28
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40012000 	.word	0x40012000
 800120c:	40023800 	.word	0x40023800
 8001210:	40020000 	.word	0x40020000

08001214 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08a      	sub	sp, #40	; 0x28
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a1d      	ldr	r2, [pc, #116]	; (80012a8 <HAL_UART_MspInit+0x94>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d133      	bne.n	800129e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	613b      	str	r3, [r7, #16]
 800123a:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <HAL_UART_MspInit+0x98>)
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123e:	4a1b      	ldr	r2, [pc, #108]	; (80012ac <HAL_UART_MspInit+0x98>)
 8001240:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001244:	6413      	str	r3, [r2, #64]	; 0x40
 8001246:	4b19      	ldr	r3, [pc, #100]	; (80012ac <HAL_UART_MspInit+0x98>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124e:	613b      	str	r3, [r7, #16]
 8001250:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	4b15      	ldr	r3, [pc, #84]	; (80012ac <HAL_UART_MspInit+0x98>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	4a14      	ldr	r2, [pc, #80]	; (80012ac <HAL_UART_MspInit+0x98>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	6313      	str	r3, [r2, #48]	; 0x30
 8001262:	4b12      	ldr	r3, [pc, #72]	; (80012ac <HAL_UART_MspInit+0x98>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800126e:	230c      	movs	r3, #12
 8001270:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001272:	2302      	movs	r3, #2
 8001274:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127a:	2303      	movs	r3, #3
 800127c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800127e:	2307      	movs	r3, #7
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001282:	f107 0314 	add.w	r3, r7, #20
 8001286:	4619      	mov	r1, r3
 8001288:	4809      	ldr	r0, [pc, #36]	; (80012b0 <HAL_UART_MspInit+0x9c>)
 800128a:	f000 ffe5 	bl	8002258 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800128e:	2200      	movs	r2, #0
 8001290:	2100      	movs	r1, #0
 8001292:	2026      	movs	r0, #38	; 0x26
 8001294:	f000 ff17 	bl	80020c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001298:	2026      	movs	r0, #38	; 0x26
 800129a:	f000 ff30 	bl	80020fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800129e:	bf00      	nop
 80012a0:	3728      	adds	r7, #40	; 0x28
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40004400 	.word	0x40004400
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40020000 	.word	0x40020000

080012b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <NMI_Handler+0x4>

080012ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012be:	e7fe      	b.n	80012be <HardFault_Handler+0x4>

080012c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <MemManage_Handler+0x4>

080012c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ca:	e7fe      	b.n	80012ca <BusFault_Handler+0x4>

080012cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d0:	e7fe      	b.n	80012d0 <UsageFault_Handler+0x4>

080012d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001300:	f000 fa04 	bl	800170c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001304:	bf00      	nop
 8001306:	bd80      	pop	{r7, pc}

08001308 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_8) != RESET){
 800130c:	4b8a      	ldr	r3, [pc, #552]	; (8001538 <EXTI9_5_IRQHandler+0x230>)
 800130e:	695b      	ldr	r3, [r3, #20]
 8001310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001314:	2b00      	cmp	r3, #0
 8001316:	d039      	beq.n	800138c <EXTI9_5_IRQHandler+0x84>


		if(HAL_GetTick() - ticks_pressed >= 20){
 8001318:	f000 fa0c 	bl	8001734 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	4b87      	ldr	r3, [pc, #540]	; (800153c <EXTI9_5_IRQHandler+0x234>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b13      	cmp	r3, #19
 8001326:	d92c      	bls.n	8001382 <EXTI9_5_IRQHandler+0x7a>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == 0){
 8001328:	4b85      	ldr	r3, [pc, #532]	; (8001540 <EXTI9_5_IRQHandler+0x238>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	b2db      	uxtb	r3, r3
 800132e:	2b01      	cmp	r3, #1
 8001330:	d112      	bne.n	8001358 <EXTI9_5_IRQHandler+0x50>
 8001332:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001336:	4883      	ldr	r0, [pc, #524]	; (8001544 <EXTI9_5_IRQHandler+0x23c>)
 8001338:	f001 f912 	bl	8002560 <HAL_GPIO_ReadPin>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d10a      	bne.n	8001358 <EXTI9_5_IRQHandler+0x50>
				button_state =0 ; // stable low reached
 8001342:	4b7f      	ldr	r3, [pc, #508]	; (8001540 <EXTI9_5_IRQHandler+0x238>)
 8001344:	2200      	movs	r2, #0
 8001346:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 8001348:	f000 f9f4 	bl	8001734 <HAL_GetTick>
 800134c:	4603      	mov	r3, r0
 800134e:	4a7b      	ldr	r2, [pc, #492]	; (800153c <EXTI9_5_IRQHandler+0x234>)
 8001350:	6013      	str	r3, [r2, #0]

				g_left_button_pressed =1;
 8001352:	4b7d      	ldr	r3, [pc, #500]	; (8001548 <EXTI9_5_IRQHandler+0x240>)
 8001354:	2201      	movs	r2, #1
 8001356:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOB ,GPIO_PIN_8) == 1 ){
 8001358:	4b79      	ldr	r3, [pc, #484]	; (8001540 <EXTI9_5_IRQHandler+0x238>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	b2db      	uxtb	r3, r3
 800135e:	2b00      	cmp	r3, #0
 8001360:	d10f      	bne.n	8001382 <EXTI9_5_IRQHandler+0x7a>
 8001362:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001366:	4877      	ldr	r0, [pc, #476]	; (8001544 <EXTI9_5_IRQHandler+0x23c>)
 8001368:	f001 f8fa 	bl	8002560 <HAL_GPIO_ReadPin>
 800136c:	4603      	mov	r3, r0
 800136e:	2b01      	cmp	r3, #1
 8001370:	d107      	bne.n	8001382 <EXTI9_5_IRQHandler+0x7a>
				ticks_pressed = HAL_GetTick() ;
 8001372:	f000 f9df 	bl	8001734 <HAL_GetTick>
 8001376:	4603      	mov	r3, r0
 8001378:	4a70      	ldr	r2, [pc, #448]	; (800153c <EXTI9_5_IRQHandler+0x234>)
 800137a:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 800137c:	4b70      	ldr	r3, [pc, #448]	; (8001540 <EXTI9_5_IRQHandler+0x238>)
 800137e:	2201      	movs	r2, #1
 8001380:	701a      	strb	r2, [r3, #0]

			}
		}
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8) ;
 8001382:	4b6d      	ldr	r3, [pc, #436]	; (8001538 <EXTI9_5_IRQHandler+0x230>)
 8001384:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001388:	615a      	str	r2, [r3, #20]
 800138a:	e0c5      	b.n	8001518 <EXTI9_5_IRQHandler+0x210>
	}

	else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_9) != RESET){
 800138c:	4b6a      	ldr	r3, [pc, #424]	; (8001538 <EXTI9_5_IRQHandler+0x230>)
 800138e:	695b      	ldr	r3, [r3, #20]
 8001390:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001394:	2b00      	cmp	r3, #0
 8001396:	d039      	beq.n	800140c <EXTI9_5_IRQHandler+0x104>



		if(HAL_GetTick() - ticks_pressed >= 20){
 8001398:	f000 f9cc 	bl	8001734 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	4b67      	ldr	r3, [pc, #412]	; (800153c <EXTI9_5_IRQHandler+0x234>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b13      	cmp	r3, #19
 80013a6:	d92c      	bls.n	8001402 <EXTI9_5_IRQHandler+0xfa>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0){
 80013a8:	4b65      	ldr	r3, [pc, #404]	; (8001540 <EXTI9_5_IRQHandler+0x238>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d112      	bne.n	80013d8 <EXTI9_5_IRQHandler+0xd0>
 80013b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013b6:	4863      	ldr	r0, [pc, #396]	; (8001544 <EXTI9_5_IRQHandler+0x23c>)
 80013b8:	f001 f8d2 	bl	8002560 <HAL_GPIO_ReadPin>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d10a      	bne.n	80013d8 <EXTI9_5_IRQHandler+0xd0>
				button_state =0 ; // stable low reached
 80013c2:	4b5f      	ldr	r3, [pc, #380]	; (8001540 <EXTI9_5_IRQHandler+0x238>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 80013c8:	f000 f9b4 	bl	8001734 <HAL_GetTick>
 80013cc:	4603      	mov	r3, r0
 80013ce:	4a5b      	ldr	r2, [pc, #364]	; (800153c <EXTI9_5_IRQHandler+0x234>)
 80013d0:	6013      	str	r3, [r2, #0]

				g_top_button_pressed = 1 ;
 80013d2:	4b5e      	ldr	r3, [pc, #376]	; (800154c <EXTI9_5_IRQHandler+0x244>)
 80013d4:	2201      	movs	r2, #1
 80013d6:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOB ,GPIO_PIN_9) == 1 ){
 80013d8:	4b59      	ldr	r3, [pc, #356]	; (8001540 <EXTI9_5_IRQHandler+0x238>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d10f      	bne.n	8001402 <EXTI9_5_IRQHandler+0xfa>
 80013e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013e6:	4857      	ldr	r0, [pc, #348]	; (8001544 <EXTI9_5_IRQHandler+0x23c>)
 80013e8:	f001 f8ba 	bl	8002560 <HAL_GPIO_ReadPin>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d107      	bne.n	8001402 <EXTI9_5_IRQHandler+0xfa>
				ticks_pressed = HAL_GetTick() ;
 80013f2:	f000 f99f 	bl	8001734 <HAL_GetTick>
 80013f6:	4603      	mov	r3, r0
 80013f8:	4a50      	ldr	r2, [pc, #320]	; (800153c <EXTI9_5_IRQHandler+0x234>)
 80013fa:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 80013fc:	4b50      	ldr	r3, [pc, #320]	; (8001540 <EXTI9_5_IRQHandler+0x238>)
 80013fe:	2201      	movs	r2, #1
 8001400:	701a      	strb	r2, [r3, #0]

			}
		}

		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_9) ;
 8001402:	4b4d      	ldr	r3, [pc, #308]	; (8001538 <EXTI9_5_IRQHandler+0x230>)
 8001404:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001408:	615a      	str	r2, [r3, #20]
 800140a:	e085      	b.n	8001518 <EXTI9_5_IRQHandler+0x210>

	}

	else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_6) != RESET){
 800140c:	4b4a      	ldr	r3, [pc, #296]	; (8001538 <EXTI9_5_IRQHandler+0x230>)
 800140e:	695b      	ldr	r3, [r3, #20]
 8001410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001414:	2b00      	cmp	r3, #0
 8001416:	d036      	beq.n	8001486 <EXTI9_5_IRQHandler+0x17e>



		if(HAL_GetTick() - ticks_pressed >= 20){
 8001418:	f000 f98c 	bl	8001734 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	4b47      	ldr	r3, [pc, #284]	; (800153c <EXTI9_5_IRQHandler+0x234>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	2b13      	cmp	r3, #19
 8001426:	d92a      	bls.n	800147e <EXTI9_5_IRQHandler+0x176>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 0){
 8001428:	4b45      	ldr	r3, [pc, #276]	; (8001540 <EXTI9_5_IRQHandler+0x238>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b01      	cmp	r3, #1
 8001430:	d111      	bne.n	8001456 <EXTI9_5_IRQHandler+0x14e>
 8001432:	2140      	movs	r1, #64	; 0x40
 8001434:	4846      	ldr	r0, [pc, #280]	; (8001550 <EXTI9_5_IRQHandler+0x248>)
 8001436:	f001 f893 	bl	8002560 <HAL_GPIO_ReadPin>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d10a      	bne.n	8001456 <EXTI9_5_IRQHandler+0x14e>
				button_state =0 ; // stable low reached
 8001440:	4b3f      	ldr	r3, [pc, #252]	; (8001540 <EXTI9_5_IRQHandler+0x238>)
 8001442:	2200      	movs	r2, #0
 8001444:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 8001446:	f000 f975 	bl	8001734 <HAL_GetTick>
 800144a:	4603      	mov	r3, r0
 800144c:	4a3b      	ldr	r2, [pc, #236]	; (800153c <EXTI9_5_IRQHandler+0x234>)
 800144e:	6013      	str	r3, [r2, #0]

				g_middle_button_pressed =1 ;
 8001450:	4b40      	ldr	r3, [pc, #256]	; (8001554 <EXTI9_5_IRQHandler+0x24c>)
 8001452:	2201      	movs	r2, #1
 8001454:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOA ,GPIO_PIN_6) == 1 ){
 8001456:	4b3a      	ldr	r3, [pc, #232]	; (8001540 <EXTI9_5_IRQHandler+0x238>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	b2db      	uxtb	r3, r3
 800145c:	2b00      	cmp	r3, #0
 800145e:	d10e      	bne.n	800147e <EXTI9_5_IRQHandler+0x176>
 8001460:	2140      	movs	r1, #64	; 0x40
 8001462:	483b      	ldr	r0, [pc, #236]	; (8001550 <EXTI9_5_IRQHandler+0x248>)
 8001464:	f001 f87c 	bl	8002560 <HAL_GPIO_ReadPin>
 8001468:	4603      	mov	r3, r0
 800146a:	2b01      	cmp	r3, #1
 800146c:	d107      	bne.n	800147e <EXTI9_5_IRQHandler+0x176>
				ticks_pressed = HAL_GetTick() ;
 800146e:	f000 f961 	bl	8001734 <HAL_GetTick>
 8001472:	4603      	mov	r3, r0
 8001474:	4a31      	ldr	r2, [pc, #196]	; (800153c <EXTI9_5_IRQHandler+0x234>)
 8001476:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 8001478:	4b31      	ldr	r3, [pc, #196]	; (8001540 <EXTI9_5_IRQHandler+0x238>)
 800147a:	2201      	movs	r2, #1
 800147c:	701a      	strb	r2, [r3, #0]

			}
		}


		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6) ;
 800147e:	4b2e      	ldr	r3, [pc, #184]	; (8001538 <EXTI9_5_IRQHandler+0x230>)
 8001480:	2240      	movs	r2, #64	; 0x40
 8001482:	615a      	str	r2, [r3, #20]
 8001484:	e048      	b.n	8001518 <EXTI9_5_IRQHandler+0x210>

	}

	else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET){
 8001486:	4b2c      	ldr	r3, [pc, #176]	; (8001538 <EXTI9_5_IRQHandler+0x230>)
 8001488:	695b      	ldr	r3, [r3, #20]
 800148a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800148e:	2b00      	cmp	r3, #0
 8001490:	d036      	beq.n	8001500 <EXTI9_5_IRQHandler+0x1f8>




		if(HAL_GetTick() - ticks_pressed >= 20){
 8001492:	f000 f94f 	bl	8001734 <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	4b28      	ldr	r3, [pc, #160]	; (800153c <EXTI9_5_IRQHandler+0x234>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b13      	cmp	r3, #19
 80014a0:	d92a      	bls.n	80014f8 <EXTI9_5_IRQHandler+0x1f0>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 0){
 80014a2:	4b27      	ldr	r3, [pc, #156]	; (8001540 <EXTI9_5_IRQHandler+0x238>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d111      	bne.n	80014d0 <EXTI9_5_IRQHandler+0x1c8>
 80014ac:	2180      	movs	r1, #128	; 0x80
 80014ae:	4828      	ldr	r0, [pc, #160]	; (8001550 <EXTI9_5_IRQHandler+0x248>)
 80014b0:	f001 f856 	bl	8002560 <HAL_GPIO_ReadPin>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d10a      	bne.n	80014d0 <EXTI9_5_IRQHandler+0x1c8>
				button_state =0 ; // stable low reached
 80014ba:	4b21      	ldr	r3, [pc, #132]	; (8001540 <EXTI9_5_IRQHandler+0x238>)
 80014bc:	2200      	movs	r2, #0
 80014be:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 80014c0:	f000 f938 	bl	8001734 <HAL_GetTick>
 80014c4:	4603      	mov	r3, r0
 80014c6:	4a1d      	ldr	r2, [pc, #116]	; (800153c <EXTI9_5_IRQHandler+0x234>)
 80014c8:	6013      	str	r3, [r2, #0]

				g_right_button_pressed = 1 ;
 80014ca:	4b23      	ldr	r3, [pc, #140]	; (8001558 <EXTI9_5_IRQHandler+0x250>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOA ,GPIO_PIN_7) == 1 ){
 80014d0:	4b1b      	ldr	r3, [pc, #108]	; (8001540 <EXTI9_5_IRQHandler+0x238>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d10e      	bne.n	80014f8 <EXTI9_5_IRQHandler+0x1f0>
 80014da:	2180      	movs	r1, #128	; 0x80
 80014dc:	481c      	ldr	r0, [pc, #112]	; (8001550 <EXTI9_5_IRQHandler+0x248>)
 80014de:	f001 f83f 	bl	8002560 <HAL_GPIO_ReadPin>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d107      	bne.n	80014f8 <EXTI9_5_IRQHandler+0x1f0>
				ticks_pressed = HAL_GetTick() ;
 80014e8:	f000 f924 	bl	8001734 <HAL_GetTick>
 80014ec:	4603      	mov	r3, r0
 80014ee:	4a13      	ldr	r2, [pc, #76]	; (800153c <EXTI9_5_IRQHandler+0x234>)
 80014f0:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 80014f2:	4b13      	ldr	r3, [pc, #76]	; (8001540 <EXTI9_5_IRQHandler+0x238>)
 80014f4:	2201      	movs	r2, #1
 80014f6:	701a      	strb	r2, [r3, #0]

			}
		}
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7) ;
 80014f8:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <EXTI9_5_IRQHandler+0x230>)
 80014fa:	2280      	movs	r2, #128	; 0x80
 80014fc:	615a      	str	r2, [r3, #20]
 80014fe:	e00b      	b.n	8001518 <EXTI9_5_IRQHandler+0x210>
	}

	else{

		if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET){
 8001500:	4b0d      	ldr	r3, [pc, #52]	; (8001538 <EXTI9_5_IRQHandler+0x230>)
 8001502:	695b      	ldr	r3, [r3, #20]
 8001504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001508:	2b00      	cmp	r3, #0
 800150a:	d005      	beq.n	8001518 <EXTI9_5_IRQHandler+0x210>

			g_bottom_button_pressed = 1 ;
 800150c:	4b13      	ldr	r3, [pc, #76]	; (800155c <EXTI9_5_IRQHandler+0x254>)
 800150e:	2201      	movs	r2, #1
 8001510:	701a      	strb	r2, [r3, #0]

			__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7) ;
 8001512:	4b09      	ldr	r3, [pc, #36]	; (8001538 <EXTI9_5_IRQHandler+0x230>)
 8001514:	2280      	movs	r2, #128	; 0x80
 8001516:	615a      	str	r2, [r3, #20]
		}
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001518:	2040      	movs	r0, #64	; 0x40
 800151a:	f001 f86d 	bl	80025f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800151e:	2080      	movs	r0, #128	; 0x80
 8001520:	f001 f86a 	bl	80025f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001524:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001528:	f001 f866 	bl	80025f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800152c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001530:	f001 f862 	bl	80025f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001534:	bf00      	nop
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40013c00 	.word	0x40013c00
 800153c:	20000164 	.word	0x20000164
 8001540:	2000001a 	.word	0x2000001a
 8001544:	40020400 	.word	0x40020400
 8001548:	2000015f 	.word	0x2000015f
 800154c:	20000161 	.word	0x20000161
 8001550:	40020000 	.word	0x40020000
 8001554:	20000163 	.word	0x20000163
 8001558:	20000160 	.word	0x20000160
 800155c:	20000162 	.word	0x20000162

08001560 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001564:	4802      	ldr	r0, [pc, #8]	; (8001570 <USART2_IRQHandler+0x10>)
 8001566:	f001 fdc5 	bl	80030f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	200000f4 	.word	0x200000f4

08001574 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001578:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800157c:	f001 f83c 	bl	80025f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}

08001584 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800158c:	4a14      	ldr	r2, [pc, #80]	; (80015e0 <_sbrk+0x5c>)
 800158e:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <_sbrk+0x60>)
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001598:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <_sbrk+0x64>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d102      	bne.n	80015a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015a0:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <_sbrk+0x64>)
 80015a2:	4a12      	ldr	r2, [pc, #72]	; (80015ec <_sbrk+0x68>)
 80015a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015a6:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <_sbrk+0x64>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4413      	add	r3, r2
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d207      	bcs.n	80015c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015b4:	f002 fc98 	bl	8003ee8 <__errno>
 80015b8:	4603      	mov	r3, r0
 80015ba:	220c      	movs	r2, #12
 80015bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015be:	f04f 33ff 	mov.w	r3, #4294967295
 80015c2:	e009      	b.n	80015d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015c4:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <_sbrk+0x64>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ca:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <_sbrk+0x64>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4413      	add	r3, r2
 80015d2:	4a05      	ldr	r2, [pc, #20]	; (80015e8 <_sbrk+0x64>)
 80015d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015d6:	68fb      	ldr	r3, [r7, #12]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20020000 	.word	0x20020000
 80015e4:	00000400 	.word	0x00000400
 80015e8:	20000168 	.word	0x20000168
 80015ec:	20000180 	.word	0x20000180

080015f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <SystemInit+0x20>)
 80015f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015fa:	4a05      	ldr	r2, [pc, #20]	; (8001610 <SystemInit+0x20>)
 80015fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001600:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001614:	f8df d034 	ldr.w	sp, [pc, #52]	; 800164c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001618:	480d      	ldr	r0, [pc, #52]	; (8001650 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800161a:	490e      	ldr	r1, [pc, #56]	; (8001654 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800161c:	4a0e      	ldr	r2, [pc, #56]	; (8001658 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800161e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001620:	e002      	b.n	8001628 <LoopCopyDataInit>

08001622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001626:	3304      	adds	r3, #4

08001628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800162a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800162c:	d3f9      	bcc.n	8001622 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800162e:	4a0b      	ldr	r2, [pc, #44]	; (800165c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001630:	4c0b      	ldr	r4, [pc, #44]	; (8001660 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001634:	e001      	b.n	800163a <LoopFillZerobss>

08001636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001638:	3204      	adds	r2, #4

0800163a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800163a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800163c:	d3fb      	bcc.n	8001636 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800163e:	f7ff ffd7 	bl	80015f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001642:	f002 fc57 	bl	8003ef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001646:	f7ff fabf 	bl	8000bc8 <main>
  bx  lr    
 800164a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800164c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001650:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001654:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001658:	080048a0 	.word	0x080048a0
  ldr r2, =_sbss
 800165c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001660:	20000180 	.word	0x20000180

08001664 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001664:	e7fe      	b.n	8001664 <ADC_IRQHandler>
	...

08001668 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800166c:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <HAL_Init+0x40>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a0d      	ldr	r2, [pc, #52]	; (80016a8 <HAL_Init+0x40>)
 8001672:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001676:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001678:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <HAL_Init+0x40>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a0a      	ldr	r2, [pc, #40]	; (80016a8 <HAL_Init+0x40>)
 800167e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001682:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001684:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <HAL_Init+0x40>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a07      	ldr	r2, [pc, #28]	; (80016a8 <HAL_Init+0x40>)
 800168a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800168e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001690:	2003      	movs	r0, #3
 8001692:	f000 fd0d 	bl	80020b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001696:	2000      	movs	r0, #0
 8001698:	f000 f808 	bl	80016ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800169c:	f7ff fd4e 	bl	800113c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40023c00 	.word	0x40023c00

080016ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <HAL_InitTick+0x54>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4b12      	ldr	r3, [pc, #72]	; (8001704 <HAL_InitTick+0x58>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	4619      	mov	r1, r3
 80016be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ca:	4618      	mov	r0, r3
 80016cc:	f000 fd25 	bl	800211a <HAL_SYSTICK_Config>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e00e      	b.n	80016f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2b0f      	cmp	r3, #15
 80016de:	d80a      	bhi.n	80016f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016e0:	2200      	movs	r2, #0
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	f04f 30ff 	mov.w	r0, #4294967295
 80016e8:	f000 fced 	bl	80020c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016ec:	4a06      	ldr	r2, [pc, #24]	; (8001708 <HAL_InitTick+0x5c>)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016f2:	2300      	movs	r3, #0
 80016f4:	e000      	b.n	80016f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	2000001c 	.word	0x2000001c
 8001704:	20000024 	.word	0x20000024
 8001708:	20000020 	.word	0x20000020

0800170c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001710:	4b06      	ldr	r3, [pc, #24]	; (800172c <HAL_IncTick+0x20>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	461a      	mov	r2, r3
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <HAL_IncTick+0x24>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4413      	add	r3, r2
 800171c:	4a04      	ldr	r2, [pc, #16]	; (8001730 <HAL_IncTick+0x24>)
 800171e:	6013      	str	r3, [r2, #0]
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	20000024 	.word	0x20000024
 8001730:	2000016c 	.word	0x2000016c

08001734 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  return uwTick;
 8001738:	4b03      	ldr	r3, [pc, #12]	; (8001748 <HAL_GetTick+0x14>)
 800173a:	681b      	ldr	r3, [r3, #0]
}
 800173c:	4618      	mov	r0, r3
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	2000016c 	.word	0x2000016c

0800174c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001754:	f7ff ffee 	bl	8001734 <HAL_GetTick>
 8001758:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001764:	d005      	beq.n	8001772 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001766:	4b0a      	ldr	r3, [pc, #40]	; (8001790 <HAL_Delay+0x44>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	461a      	mov	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	4413      	add	r3, r2
 8001770:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001772:	bf00      	nop
 8001774:	f7ff ffde 	bl	8001734 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	429a      	cmp	r2, r3
 8001782:	d8f7      	bhi.n	8001774 <HAL_Delay+0x28>
  {
  }
}
 8001784:	bf00      	nop
 8001786:	bf00      	nop
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000024 	.word	0x20000024

08001794 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800179c:	2300      	movs	r3, #0
 800179e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d101      	bne.n	80017aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e033      	b.n	8001812 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d109      	bne.n	80017c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f7ff fcea 	bl	800118c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	f003 0310 	and.w	r3, r3, #16
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d118      	bne.n	8001804 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017da:	f023 0302 	bic.w	r3, r3, #2
 80017de:	f043 0202 	orr.w	r2, r3, #2
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f000 fa96 	bl	8001d18 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	f023 0303 	bic.w	r3, r3, #3
 80017fa:	f043 0201 	orr.w	r2, r3, #1
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	641a      	str	r2, [r3, #64]	; 0x40
 8001802:	e001      	b.n	8001808 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001810:	7bfb      	ldrb	r3, [r7, #15]
}
 8001812:	4618      	mov	r0, r3
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
	...

0800181c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001824:	2300      	movs	r3, #0
 8001826:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800182e:	2b01      	cmp	r3, #1
 8001830:	d101      	bne.n	8001836 <HAL_ADC_Start+0x1a>
 8001832:	2302      	movs	r3, #2
 8001834:	e097      	b.n	8001966 <HAL_ADC_Start+0x14a>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2201      	movs	r2, #1
 800183a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f003 0301 	and.w	r3, r3, #1
 8001848:	2b01      	cmp	r3, #1
 800184a:	d018      	beq.n	800187e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	689a      	ldr	r2, [r3, #8]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f042 0201 	orr.w	r2, r2, #1
 800185a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800185c:	4b45      	ldr	r3, [pc, #276]	; (8001974 <HAL_ADC_Start+0x158>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a45      	ldr	r2, [pc, #276]	; (8001978 <HAL_ADC_Start+0x15c>)
 8001862:	fba2 2303 	umull	r2, r3, r2, r3
 8001866:	0c9a      	lsrs	r2, r3, #18
 8001868:	4613      	mov	r3, r2
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	4413      	add	r3, r2
 800186e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001870:	e002      	b.n	8001878 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	3b01      	subs	r3, #1
 8001876:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1f9      	bne.n	8001872 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	2b01      	cmp	r3, #1
 800188a:	d15f      	bne.n	800194c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001890:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001894:	f023 0301 	bic.w	r3, r3, #1
 8001898:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d007      	beq.n	80018be <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018b6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018ca:	d106      	bne.n	80018da <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d0:	f023 0206 	bic.w	r2, r3, #6
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	645a      	str	r2, [r3, #68]	; 0x44
 80018d8:	e002      	b.n	80018e0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018e8:	4b24      	ldr	r3, [pc, #144]	; (800197c <HAL_ADC_Start+0x160>)
 80018ea:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80018f4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f003 031f 	and.w	r3, r3, #31
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d10f      	bne.n	8001922 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d129      	bne.n	8001964 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	689a      	ldr	r2, [r3, #8]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	e020      	b.n	8001964 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a16      	ldr	r2, [pc, #88]	; (8001980 <HAL_ADC_Start+0x164>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d11b      	bne.n	8001964 <HAL_ADC_Start+0x148>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d114      	bne.n	8001964 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	689a      	ldr	r2, [r3, #8]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001948:	609a      	str	r2, [r3, #8]
 800194a:	e00b      	b.n	8001964 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001950:	f043 0210 	orr.w	r2, r3, #16
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195c:	f043 0201 	orr.w	r2, r3, #1
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3714      	adds	r7, #20
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	2000001c 	.word	0x2000001c
 8001978:	431bde83 	.word	0x431bde83
 800197c:	40012300 	.word	0x40012300
 8001980:	40012000 	.word	0x40012000

08001984 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800198e:	2300      	movs	r3, #0
 8001990:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800199c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019a0:	d113      	bne.n	80019ca <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80019ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019b0:	d10b      	bne.n	80019ca <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	f043 0220 	orr.w	r2, r3, #32
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e063      	b.n	8001a92 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80019ca:	f7ff feb3 	bl	8001734 <HAL_GetTick>
 80019ce:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019d0:	e021      	b.n	8001a16 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d8:	d01d      	beq.n	8001a16 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d007      	beq.n	80019f0 <HAL_ADC_PollForConversion+0x6c>
 80019e0:	f7ff fea8 	bl	8001734 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d212      	bcs.n	8001a16 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d00b      	beq.n	8001a16 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	f043 0204 	orr.w	r2, r3, #4
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e03d      	b.n	8001a92 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d1d6      	bne.n	80019d2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f06f 0212 	mvn.w	r2, #18
 8001a2c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d123      	bne.n	8001a90 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d11f      	bne.n	8001a90 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a56:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d006      	beq.n	8001a6c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d111      	bne.n	8001a90 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d105      	bne.n	8001a90 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a88:	f043 0201 	orr.w	r2, r3, #1
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d101      	bne.n	8001ad0 <HAL_ADC_ConfigChannel+0x1c>
 8001acc:	2302      	movs	r3, #2
 8001ace:	e113      	b.n	8001cf8 <HAL_ADC_ConfigChannel+0x244>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2b09      	cmp	r3, #9
 8001ade:	d925      	bls.n	8001b2c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	68d9      	ldr	r1, [r3, #12]
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	461a      	mov	r2, r3
 8001aee:	4613      	mov	r3, r2
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	4413      	add	r3, r2
 8001af4:	3b1e      	subs	r3, #30
 8001af6:	2207      	movs	r2, #7
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43da      	mvns	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	400a      	ands	r2, r1
 8001b04:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68d9      	ldr	r1, [r3, #12]
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	4618      	mov	r0, r3
 8001b18:	4603      	mov	r3, r0
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	4403      	add	r3, r0
 8001b1e:	3b1e      	subs	r3, #30
 8001b20:	409a      	lsls	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	430a      	orrs	r2, r1
 8001b28:	60da      	str	r2, [r3, #12]
 8001b2a:	e022      	b.n	8001b72 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6919      	ldr	r1, [r3, #16]
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	4413      	add	r3, r2
 8001b40:	2207      	movs	r2, #7
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43da      	mvns	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	400a      	ands	r2, r1
 8001b4e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6919      	ldr	r1, [r3, #16]
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	689a      	ldr	r2, [r3, #8]
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	4618      	mov	r0, r3
 8001b62:	4603      	mov	r3, r0
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	4403      	add	r3, r0
 8001b68:	409a      	lsls	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2b06      	cmp	r3, #6
 8001b78:	d824      	bhi.n	8001bc4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685a      	ldr	r2, [r3, #4]
 8001b84:	4613      	mov	r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	3b05      	subs	r3, #5
 8001b8c:	221f      	movs	r2, #31
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	43da      	mvns	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	400a      	ands	r2, r1
 8001b9a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	4618      	mov	r0, r3
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685a      	ldr	r2, [r3, #4]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	4413      	add	r3, r2
 8001bb4:	3b05      	subs	r3, #5
 8001bb6:	fa00 f203 	lsl.w	r2, r0, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	635a      	str	r2, [r3, #52]	; 0x34
 8001bc2:	e04c      	b.n	8001c5e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b0c      	cmp	r3, #12
 8001bca:	d824      	bhi.n	8001c16 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685a      	ldr	r2, [r3, #4]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	4413      	add	r3, r2
 8001bdc:	3b23      	subs	r3, #35	; 0x23
 8001bde:	221f      	movs	r2, #31
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43da      	mvns	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	400a      	ands	r2, r1
 8001bec:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	4613      	mov	r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4413      	add	r3, r2
 8001c06:	3b23      	subs	r3, #35	; 0x23
 8001c08:	fa00 f203 	lsl.w	r2, r0, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	430a      	orrs	r2, r1
 8001c12:	631a      	str	r2, [r3, #48]	; 0x30
 8001c14:	e023      	b.n	8001c5e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	4613      	mov	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	4413      	add	r3, r2
 8001c26:	3b41      	subs	r3, #65	; 0x41
 8001c28:	221f      	movs	r2, #31
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43da      	mvns	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	400a      	ands	r2, r1
 8001c36:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	4618      	mov	r0, r3
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685a      	ldr	r2, [r3, #4]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	4413      	add	r3, r2
 8001c50:	3b41      	subs	r3, #65	; 0x41
 8001c52:	fa00 f203 	lsl.w	r2, r0, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c5e:	4b29      	ldr	r3, [pc, #164]	; (8001d04 <HAL_ADC_ConfigChannel+0x250>)
 8001c60:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a28      	ldr	r2, [pc, #160]	; (8001d08 <HAL_ADC_ConfigChannel+0x254>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d10f      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x1d8>
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b12      	cmp	r3, #18
 8001c72:	d10b      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a1d      	ldr	r2, [pc, #116]	; (8001d08 <HAL_ADC_ConfigChannel+0x254>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d12b      	bne.n	8001cee <HAL_ADC_ConfigChannel+0x23a>
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a1c      	ldr	r2, [pc, #112]	; (8001d0c <HAL_ADC_ConfigChannel+0x258>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d003      	beq.n	8001ca8 <HAL_ADC_ConfigChannel+0x1f4>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2b11      	cmp	r3, #17
 8001ca6:	d122      	bne.n	8001cee <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a11      	ldr	r2, [pc, #68]	; (8001d0c <HAL_ADC_ConfigChannel+0x258>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d111      	bne.n	8001cee <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cca:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <HAL_ADC_ConfigChannel+0x25c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a11      	ldr	r2, [pc, #68]	; (8001d14 <HAL_ADC_ConfigChannel+0x260>)
 8001cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd4:	0c9a      	lsrs	r2, r3, #18
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4413      	add	r3, r2
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ce0:	e002      	b.n	8001ce8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1f9      	bne.n	8001ce2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3714      	adds	r7, #20
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	40012300 	.word	0x40012300
 8001d08:	40012000 	.word	0x40012000
 8001d0c:	10000012 	.word	0x10000012
 8001d10:	2000001c 	.word	0x2000001c
 8001d14:	431bde83 	.word	0x431bde83

08001d18 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d20:	4b79      	ldr	r3, [pc, #484]	; (8001f08 <ADC_Init+0x1f0>)
 8001d22:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	685a      	ldr	r2, [r3, #4]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	431a      	orrs	r2, r3
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	685a      	ldr	r2, [r3, #4]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	6859      	ldr	r1, [r3, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	691b      	ldr	r3, [r3, #16]
 8001d58:	021a      	lsls	r2, r3, #8
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001d70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	6859      	ldr	r1, [r3, #4]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	430a      	orrs	r2, r1
 8001d82:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	689a      	ldr	r2, [r3, #8]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6899      	ldr	r1, [r3, #8]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	68da      	ldr	r2, [r3, #12]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	430a      	orrs	r2, r1
 8001da4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001daa:	4a58      	ldr	r2, [pc, #352]	; (8001f0c <ADC_Init+0x1f4>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d022      	beq.n	8001df6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	689a      	ldr	r2, [r3, #8]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001dbe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6899      	ldr	r1, [r3, #8]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001de0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	6899      	ldr	r1, [r3, #8]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	430a      	orrs	r2, r1
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	e00f      	b.n	8001e16 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e14:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 0202 	bic.w	r2, r2, #2
 8001e24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	6899      	ldr	r1, [r3, #8]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	7e1b      	ldrb	r3, [r3, #24]
 8001e30:	005a      	lsls	r2, r3, #1
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	430a      	orrs	r2, r1
 8001e38:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d01b      	beq.n	8001e7c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	685a      	ldr	r2, [r3, #4]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e52:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	685a      	ldr	r2, [r3, #4]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e62:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6859      	ldr	r1, [r3, #4]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	035a      	lsls	r2, r3, #13
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	430a      	orrs	r2, r1
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	e007      	b.n	8001e8c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e8a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	051a      	lsls	r2, r3, #20
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	689a      	ldr	r2, [r3, #8]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ec0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6899      	ldr	r1, [r3, #8]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ece:	025a      	lsls	r2, r3, #9
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	689a      	ldr	r2, [r3, #8]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ee6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6899      	ldr	r1, [r3, #8]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	029a      	lsls	r2, r3, #10
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	609a      	str	r2, [r3, #8]
}
 8001efc:	bf00      	nop
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	40012300 	.word	0x40012300
 8001f0c:	0f000001 	.word	0x0f000001

08001f10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f20:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <__NVIC_SetPriorityGrouping+0x44>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f26:	68ba      	ldr	r2, [r7, #8]
 8001f28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f42:	4a04      	ldr	r2, [pc, #16]	; (8001f54 <__NVIC_SetPriorityGrouping+0x44>)
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	60d3      	str	r3, [r2, #12]
}
 8001f48:	bf00      	nop
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	e000ed00 	.word	0xe000ed00

08001f58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f5c:	4b04      	ldr	r3, [pc, #16]	; (8001f70 <__NVIC_GetPriorityGrouping+0x18>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	0a1b      	lsrs	r3, r3, #8
 8001f62:	f003 0307 	and.w	r3, r3, #7
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	db0b      	blt.n	8001f9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f86:	79fb      	ldrb	r3, [r7, #7]
 8001f88:	f003 021f 	and.w	r2, r3, #31
 8001f8c:	4907      	ldr	r1, [pc, #28]	; (8001fac <__NVIC_EnableIRQ+0x38>)
 8001f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f92:	095b      	lsrs	r3, r3, #5
 8001f94:	2001      	movs	r0, #1
 8001f96:	fa00 f202 	lsl.w	r2, r0, r2
 8001f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	e000e100 	.word	0xe000e100

08001fb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	6039      	str	r1, [r7, #0]
 8001fba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	db0a      	blt.n	8001fda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	b2da      	uxtb	r2, r3
 8001fc8:	490c      	ldr	r1, [pc, #48]	; (8001ffc <__NVIC_SetPriority+0x4c>)
 8001fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fce:	0112      	lsls	r2, r2, #4
 8001fd0:	b2d2      	uxtb	r2, r2
 8001fd2:	440b      	add	r3, r1
 8001fd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fd8:	e00a      	b.n	8001ff0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	b2da      	uxtb	r2, r3
 8001fde:	4908      	ldr	r1, [pc, #32]	; (8002000 <__NVIC_SetPriority+0x50>)
 8001fe0:	79fb      	ldrb	r3, [r7, #7]
 8001fe2:	f003 030f 	and.w	r3, r3, #15
 8001fe6:	3b04      	subs	r3, #4
 8001fe8:	0112      	lsls	r2, r2, #4
 8001fea:	b2d2      	uxtb	r2, r2
 8001fec:	440b      	add	r3, r1
 8001fee:	761a      	strb	r2, [r3, #24]
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	e000e100 	.word	0xe000e100
 8002000:	e000ed00 	.word	0xe000ed00

08002004 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002004:	b480      	push	{r7}
 8002006:	b089      	sub	sp, #36	; 0x24
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	f1c3 0307 	rsb	r3, r3, #7
 800201e:	2b04      	cmp	r3, #4
 8002020:	bf28      	it	cs
 8002022:	2304      	movcs	r3, #4
 8002024:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	3304      	adds	r3, #4
 800202a:	2b06      	cmp	r3, #6
 800202c:	d902      	bls.n	8002034 <NVIC_EncodePriority+0x30>
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	3b03      	subs	r3, #3
 8002032:	e000      	b.n	8002036 <NVIC_EncodePriority+0x32>
 8002034:	2300      	movs	r3, #0
 8002036:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002038:	f04f 32ff 	mov.w	r2, #4294967295
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43da      	mvns	r2, r3
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	401a      	ands	r2, r3
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800204c:	f04f 31ff 	mov.w	r1, #4294967295
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	fa01 f303 	lsl.w	r3, r1, r3
 8002056:	43d9      	mvns	r1, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800205c:	4313      	orrs	r3, r2
         );
}
 800205e:	4618      	mov	r0, r3
 8002060:	3724      	adds	r7, #36	; 0x24
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
	...

0800206c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3b01      	subs	r3, #1
 8002078:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800207c:	d301      	bcc.n	8002082 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800207e:	2301      	movs	r3, #1
 8002080:	e00f      	b.n	80020a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002082:	4a0a      	ldr	r2, [pc, #40]	; (80020ac <SysTick_Config+0x40>)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3b01      	subs	r3, #1
 8002088:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800208a:	210f      	movs	r1, #15
 800208c:	f04f 30ff 	mov.w	r0, #4294967295
 8002090:	f7ff ff8e 	bl	8001fb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002094:	4b05      	ldr	r3, [pc, #20]	; (80020ac <SysTick_Config+0x40>)
 8002096:	2200      	movs	r2, #0
 8002098:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800209a:	4b04      	ldr	r3, [pc, #16]	; (80020ac <SysTick_Config+0x40>)
 800209c:	2207      	movs	r2, #7
 800209e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	e000e010 	.word	0xe000e010

080020b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f7ff ff29 	bl	8001f10 <__NVIC_SetPriorityGrouping>
}
 80020be:	bf00      	nop
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b086      	sub	sp, #24
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	4603      	mov	r3, r0
 80020ce:	60b9      	str	r1, [r7, #8]
 80020d0:	607a      	str	r2, [r7, #4]
 80020d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020d4:	2300      	movs	r3, #0
 80020d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020d8:	f7ff ff3e 	bl	8001f58 <__NVIC_GetPriorityGrouping>
 80020dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	68b9      	ldr	r1, [r7, #8]
 80020e2:	6978      	ldr	r0, [r7, #20]
 80020e4:	f7ff ff8e 	bl	8002004 <NVIC_EncodePriority>
 80020e8:	4602      	mov	r2, r0
 80020ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ee:	4611      	mov	r1, r2
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff ff5d 	bl	8001fb0 <__NVIC_SetPriority>
}
 80020f6:	bf00      	nop
 80020f8:	3718      	adds	r7, #24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b082      	sub	sp, #8
 8002102:	af00      	add	r7, sp, #0
 8002104:	4603      	mov	r3, r0
 8002106:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff ff31 	bl	8001f74 <__NVIC_EnableIRQ>
}
 8002112:	bf00      	nop
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b082      	sub	sp, #8
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7ff ffa2 	bl	800206c <SysTick_Config>
 8002128:	4603      	mov	r3, r0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b084      	sub	sp, #16
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002140:	f7ff faf8 	bl	8001734 <HAL_GetTick>
 8002144:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d008      	beq.n	8002164 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2280      	movs	r2, #128	; 0x80
 8002156:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e052      	b.n	800220a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f022 0216 	bic.w	r2, r2, #22
 8002172:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	695a      	ldr	r2, [r3, #20]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002182:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002188:	2b00      	cmp	r3, #0
 800218a:	d103      	bne.n	8002194 <HAL_DMA_Abort+0x62>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002190:	2b00      	cmp	r3, #0
 8002192:	d007      	beq.n	80021a4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 0208 	bic.w	r2, r2, #8
 80021a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f022 0201 	bic.w	r2, r2, #1
 80021b2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021b4:	e013      	b.n	80021de <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021b6:	f7ff fabd 	bl	8001734 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b05      	cmp	r3, #5
 80021c2:	d90c      	bls.n	80021de <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2220      	movs	r2, #32
 80021c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2203      	movs	r2, #3
 80021ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e015      	b.n	800220a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1e4      	bne.n	80021b6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f0:	223f      	movs	r2, #63	; 0x3f
 80021f2:	409a      	lsls	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002212:	b480      	push	{r7}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d004      	beq.n	8002230 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2280      	movs	r2, #128	; 0x80
 800222a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e00c      	b.n	800224a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2205      	movs	r2, #5
 8002234:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f022 0201 	bic.w	r2, r2, #1
 8002246:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
	...

08002258 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002258:	b480      	push	{r7}
 800225a:	b089      	sub	sp, #36	; 0x24
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002262:	2300      	movs	r3, #0
 8002264:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002266:	2300      	movs	r3, #0
 8002268:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800226a:	2300      	movs	r3, #0
 800226c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800226e:	2300      	movs	r3, #0
 8002270:	61fb      	str	r3, [r7, #28]
 8002272:	e159      	b.n	8002528 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002274:	2201      	movs	r2, #1
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	697a      	ldr	r2, [r7, #20]
 8002284:	4013      	ands	r3, r2
 8002286:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	429a      	cmp	r2, r3
 800228e:	f040 8148 	bne.w	8002522 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f003 0303 	and.w	r3, r3, #3
 800229a:	2b01      	cmp	r3, #1
 800229c:	d005      	beq.n	80022aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d130      	bne.n	800230c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	2203      	movs	r2, #3
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	43db      	mvns	r3, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4013      	ands	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	68da      	ldr	r2, [r3, #12]
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022e0:	2201      	movs	r2, #1
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4013      	ands	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	091b      	lsrs	r3, r3, #4
 80022f6:	f003 0201 	and.w	r2, r3, #1
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4313      	orrs	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f003 0303 	and.w	r3, r3, #3
 8002314:	2b03      	cmp	r3, #3
 8002316:	d017      	beq.n	8002348 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	2203      	movs	r2, #3
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4013      	ands	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4313      	orrs	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f003 0303 	and.w	r3, r3, #3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d123      	bne.n	800239c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	08da      	lsrs	r2, r3, #3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3208      	adds	r2, #8
 800235c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002360:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	220f      	movs	r2, #15
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4013      	ands	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	691a      	ldr	r2, [r3, #16]
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4313      	orrs	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	08da      	lsrs	r2, r3, #3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	3208      	adds	r2, #8
 8002396:	69b9      	ldr	r1, [r7, #24]
 8002398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	2203      	movs	r2, #3
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	43db      	mvns	r3, r3
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	4013      	ands	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f003 0203 	and.w	r2, r3, #3
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f000 80a2 	beq.w	8002522 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	4b57      	ldr	r3, [pc, #348]	; (8002540 <HAL_GPIO_Init+0x2e8>)
 80023e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e6:	4a56      	ldr	r2, [pc, #344]	; (8002540 <HAL_GPIO_Init+0x2e8>)
 80023e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023ec:	6453      	str	r3, [r2, #68]	; 0x44
 80023ee:	4b54      	ldr	r3, [pc, #336]	; (8002540 <HAL_GPIO_Init+0x2e8>)
 80023f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023fa:	4a52      	ldr	r2, [pc, #328]	; (8002544 <HAL_GPIO_Init+0x2ec>)
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	089b      	lsrs	r3, r3, #2
 8002400:	3302      	adds	r3, #2
 8002402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002406:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	220f      	movs	r2, #15
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	43db      	mvns	r3, r3
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	4013      	ands	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a49      	ldr	r2, [pc, #292]	; (8002548 <HAL_GPIO_Init+0x2f0>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d019      	beq.n	800245a <HAL_GPIO_Init+0x202>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a48      	ldr	r2, [pc, #288]	; (800254c <HAL_GPIO_Init+0x2f4>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d013      	beq.n	8002456 <HAL_GPIO_Init+0x1fe>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a47      	ldr	r2, [pc, #284]	; (8002550 <HAL_GPIO_Init+0x2f8>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d00d      	beq.n	8002452 <HAL_GPIO_Init+0x1fa>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a46      	ldr	r2, [pc, #280]	; (8002554 <HAL_GPIO_Init+0x2fc>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d007      	beq.n	800244e <HAL_GPIO_Init+0x1f6>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a45      	ldr	r2, [pc, #276]	; (8002558 <HAL_GPIO_Init+0x300>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d101      	bne.n	800244a <HAL_GPIO_Init+0x1f2>
 8002446:	2304      	movs	r3, #4
 8002448:	e008      	b.n	800245c <HAL_GPIO_Init+0x204>
 800244a:	2307      	movs	r3, #7
 800244c:	e006      	b.n	800245c <HAL_GPIO_Init+0x204>
 800244e:	2303      	movs	r3, #3
 8002450:	e004      	b.n	800245c <HAL_GPIO_Init+0x204>
 8002452:	2302      	movs	r3, #2
 8002454:	e002      	b.n	800245c <HAL_GPIO_Init+0x204>
 8002456:	2301      	movs	r3, #1
 8002458:	e000      	b.n	800245c <HAL_GPIO_Init+0x204>
 800245a:	2300      	movs	r3, #0
 800245c:	69fa      	ldr	r2, [r7, #28]
 800245e:	f002 0203 	and.w	r2, r2, #3
 8002462:	0092      	lsls	r2, r2, #2
 8002464:	4093      	lsls	r3, r2
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4313      	orrs	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800246c:	4935      	ldr	r1, [pc, #212]	; (8002544 <HAL_GPIO_Init+0x2ec>)
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	089b      	lsrs	r3, r3, #2
 8002472:	3302      	adds	r3, #2
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800247a:	4b38      	ldr	r3, [pc, #224]	; (800255c <HAL_GPIO_Init+0x304>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	43db      	mvns	r3, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4013      	ands	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	4313      	orrs	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800249e:	4a2f      	ldr	r2, [pc, #188]	; (800255c <HAL_GPIO_Init+0x304>)
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024a4:	4b2d      	ldr	r3, [pc, #180]	; (800255c <HAL_GPIO_Init+0x304>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	43db      	mvns	r3, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4013      	ands	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d003      	beq.n	80024c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024c8:	4a24      	ldr	r2, [pc, #144]	; (800255c <HAL_GPIO_Init+0x304>)
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024ce:	4b23      	ldr	r3, [pc, #140]	; (800255c <HAL_GPIO_Init+0x304>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	43db      	mvns	r3, r3
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	4013      	ands	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024f2:	4a1a      	ldr	r2, [pc, #104]	; (800255c <HAL_GPIO_Init+0x304>)
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024f8:	4b18      	ldr	r3, [pc, #96]	; (800255c <HAL_GPIO_Init+0x304>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	43db      	mvns	r3, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4013      	ands	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d003      	beq.n	800251c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	4313      	orrs	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800251c:	4a0f      	ldr	r2, [pc, #60]	; (800255c <HAL_GPIO_Init+0x304>)
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	3301      	adds	r3, #1
 8002526:	61fb      	str	r3, [r7, #28]
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	2b0f      	cmp	r3, #15
 800252c:	f67f aea2 	bls.w	8002274 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002530:	bf00      	nop
 8002532:	bf00      	nop
 8002534:	3724      	adds	r7, #36	; 0x24
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	40023800 	.word	0x40023800
 8002544:	40013800 	.word	0x40013800
 8002548:	40020000 	.word	0x40020000
 800254c:	40020400 	.word	0x40020400
 8002550:	40020800 	.word	0x40020800
 8002554:	40020c00 	.word	0x40020c00
 8002558:	40021000 	.word	0x40021000
 800255c:	40013c00 	.word	0x40013c00

08002560 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	460b      	mov	r3, r1
 800256a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	691a      	ldr	r2, [r3, #16]
 8002570:	887b      	ldrh	r3, [r7, #2]
 8002572:	4013      	ands	r3, r2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d002      	beq.n	800257e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002578:	2301      	movs	r3, #1
 800257a:	73fb      	strb	r3, [r7, #15]
 800257c:	e001      	b.n	8002582 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800257e:	2300      	movs	r3, #0
 8002580:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002582:	7bfb      	ldrb	r3, [r7, #15]
}
 8002584:	4618      	mov	r0, r3
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	460b      	mov	r3, r1
 800259a:	807b      	strh	r3, [r7, #2]
 800259c:	4613      	mov	r3, r2
 800259e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025a0:	787b      	ldrb	r3, [r7, #1]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025a6:	887a      	ldrh	r2, [r7, #2]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025ac:	e003      	b.n	80025b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025ae:	887b      	ldrh	r3, [r7, #2]
 80025b0:	041a      	lsls	r2, r3, #16
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	619a      	str	r2, [r3, #24]
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b085      	sub	sp, #20
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
 80025ca:	460b      	mov	r3, r1
 80025cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025d4:	887a      	ldrh	r2, [r7, #2]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	4013      	ands	r3, r2
 80025da:	041a      	lsls	r2, r3, #16
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	43d9      	mvns	r1, r3
 80025e0:	887b      	ldrh	r3, [r7, #2]
 80025e2:	400b      	ands	r3, r1
 80025e4:	431a      	orrs	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	619a      	str	r2, [r3, #24]
}
 80025ea:	bf00      	nop
 80025ec:	3714      	adds	r7, #20
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
	...

080025f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	4603      	mov	r3, r0
 8002600:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002602:	4b08      	ldr	r3, [pc, #32]	; (8002624 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002604:	695a      	ldr	r2, [r3, #20]
 8002606:	88fb      	ldrh	r3, [r7, #6]
 8002608:	4013      	ands	r3, r2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d006      	beq.n	800261c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800260e:	4a05      	ldr	r2, [pc, #20]	; (8002624 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002610:	88fb      	ldrh	r3, [r7, #6]
 8002612:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002614:	88fb      	ldrh	r3, [r7, #6]
 8002616:	4618      	mov	r0, r3
 8002618:	f000 f806 	bl	8002628 <HAL_GPIO_EXTI_Callback>
  }
}
 800261c:	bf00      	nop
 800261e:	3708      	adds	r7, #8
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40013c00 	.word	0x40013c00

08002628 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	4603      	mov	r3, r0
 8002630:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
	...

08002640 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e267      	b.n	8002b22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b00      	cmp	r3, #0
 800265c:	d075      	beq.n	800274a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800265e:	4b88      	ldr	r3, [pc, #544]	; (8002880 <HAL_RCC_OscConfig+0x240>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 030c 	and.w	r3, r3, #12
 8002666:	2b04      	cmp	r3, #4
 8002668:	d00c      	beq.n	8002684 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800266a:	4b85      	ldr	r3, [pc, #532]	; (8002880 <HAL_RCC_OscConfig+0x240>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002672:	2b08      	cmp	r3, #8
 8002674:	d112      	bne.n	800269c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002676:	4b82      	ldr	r3, [pc, #520]	; (8002880 <HAL_RCC_OscConfig+0x240>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800267e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002682:	d10b      	bne.n	800269c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002684:	4b7e      	ldr	r3, [pc, #504]	; (8002880 <HAL_RCC_OscConfig+0x240>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d05b      	beq.n	8002748 <HAL_RCC_OscConfig+0x108>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d157      	bne.n	8002748 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e242      	b.n	8002b22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026a4:	d106      	bne.n	80026b4 <HAL_RCC_OscConfig+0x74>
 80026a6:	4b76      	ldr	r3, [pc, #472]	; (8002880 <HAL_RCC_OscConfig+0x240>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a75      	ldr	r2, [pc, #468]	; (8002880 <HAL_RCC_OscConfig+0x240>)
 80026ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b0:	6013      	str	r3, [r2, #0]
 80026b2:	e01d      	b.n	80026f0 <HAL_RCC_OscConfig+0xb0>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026bc:	d10c      	bne.n	80026d8 <HAL_RCC_OscConfig+0x98>
 80026be:	4b70      	ldr	r3, [pc, #448]	; (8002880 <HAL_RCC_OscConfig+0x240>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a6f      	ldr	r2, [pc, #444]	; (8002880 <HAL_RCC_OscConfig+0x240>)
 80026c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026c8:	6013      	str	r3, [r2, #0]
 80026ca:	4b6d      	ldr	r3, [pc, #436]	; (8002880 <HAL_RCC_OscConfig+0x240>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a6c      	ldr	r2, [pc, #432]	; (8002880 <HAL_RCC_OscConfig+0x240>)
 80026d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	e00b      	b.n	80026f0 <HAL_RCC_OscConfig+0xb0>
 80026d8:	4b69      	ldr	r3, [pc, #420]	; (8002880 <HAL_RCC_OscConfig+0x240>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a68      	ldr	r2, [pc, #416]	; (8002880 <HAL_RCC_OscConfig+0x240>)
 80026de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026e2:	6013      	str	r3, [r2, #0]
 80026e4:	4b66      	ldr	r3, [pc, #408]	; (8002880 <HAL_RCC_OscConfig+0x240>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a65      	ldr	r2, [pc, #404]	; (8002880 <HAL_RCC_OscConfig+0x240>)
 80026ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d013      	beq.n	8002720 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f8:	f7ff f81c 	bl	8001734 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002700:	f7ff f818 	bl	8001734 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b64      	cmp	r3, #100	; 0x64
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e207      	b.n	8002b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002712:	4b5b      	ldr	r3, [pc, #364]	; (8002880 <HAL_RCC_OscConfig+0x240>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d0f0      	beq.n	8002700 <HAL_RCC_OscConfig+0xc0>
 800271e:	e014      	b.n	800274a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002720:	f7ff f808 	bl	8001734 <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002728:	f7ff f804 	bl	8001734 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b64      	cmp	r3, #100	; 0x64
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e1f3      	b.n	8002b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800273a:	4b51      	ldr	r3, [pc, #324]	; (8002880 <HAL_RCC_OscConfig+0x240>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1f0      	bne.n	8002728 <HAL_RCC_OscConfig+0xe8>
 8002746:	e000      	b.n	800274a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002748:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d063      	beq.n	800281e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002756:	4b4a      	ldr	r3, [pc, #296]	; (8002880 <HAL_RCC_OscConfig+0x240>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 030c 	and.w	r3, r3, #12
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00b      	beq.n	800277a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002762:	4b47      	ldr	r3, [pc, #284]	; (8002880 <HAL_RCC_OscConfig+0x240>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800276a:	2b08      	cmp	r3, #8
 800276c:	d11c      	bne.n	80027a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800276e:	4b44      	ldr	r3, [pc, #272]	; (8002880 <HAL_RCC_OscConfig+0x240>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d116      	bne.n	80027a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800277a:	4b41      	ldr	r3, [pc, #260]	; (8002880 <HAL_RCC_OscConfig+0x240>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d005      	beq.n	8002792 <HAL_RCC_OscConfig+0x152>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d001      	beq.n	8002792 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e1c7      	b.n	8002b22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002792:	4b3b      	ldr	r3, [pc, #236]	; (8002880 <HAL_RCC_OscConfig+0x240>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	4937      	ldr	r1, [pc, #220]	; (8002880 <HAL_RCC_OscConfig+0x240>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027a6:	e03a      	b.n	800281e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d020      	beq.n	80027f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027b0:	4b34      	ldr	r3, [pc, #208]	; (8002884 <HAL_RCC_OscConfig+0x244>)
 80027b2:	2201      	movs	r2, #1
 80027b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b6:	f7fe ffbd 	bl	8001734 <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027be:	f7fe ffb9 	bl	8001734 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e1a8      	b.n	8002b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d0:	4b2b      	ldr	r3, [pc, #172]	; (8002880 <HAL_RCC_OscConfig+0x240>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d0f0      	beq.n	80027be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027dc:	4b28      	ldr	r3, [pc, #160]	; (8002880 <HAL_RCC_OscConfig+0x240>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	00db      	lsls	r3, r3, #3
 80027ea:	4925      	ldr	r1, [pc, #148]	; (8002880 <HAL_RCC_OscConfig+0x240>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	600b      	str	r3, [r1, #0]
 80027f0:	e015      	b.n	800281e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027f2:	4b24      	ldr	r3, [pc, #144]	; (8002884 <HAL_RCC_OscConfig+0x244>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f8:	f7fe ff9c 	bl	8001734 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002800:	f7fe ff98 	bl	8001734 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e187      	b.n	8002b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002812:	4b1b      	ldr	r3, [pc, #108]	; (8002880 <HAL_RCC_OscConfig+0x240>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1f0      	bne.n	8002800 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0308 	and.w	r3, r3, #8
 8002826:	2b00      	cmp	r3, #0
 8002828:	d036      	beq.n	8002898 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d016      	beq.n	8002860 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002832:	4b15      	ldr	r3, [pc, #84]	; (8002888 <HAL_RCC_OscConfig+0x248>)
 8002834:	2201      	movs	r2, #1
 8002836:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002838:	f7fe ff7c 	bl	8001734 <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002840:	f7fe ff78 	bl	8001734 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e167      	b.n	8002b22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002852:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <HAL_RCC_OscConfig+0x240>)
 8002854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d0f0      	beq.n	8002840 <HAL_RCC_OscConfig+0x200>
 800285e:	e01b      	b.n	8002898 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002860:	4b09      	ldr	r3, [pc, #36]	; (8002888 <HAL_RCC_OscConfig+0x248>)
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002866:	f7fe ff65 	bl	8001734 <HAL_GetTick>
 800286a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800286c:	e00e      	b.n	800288c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800286e:	f7fe ff61 	bl	8001734 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d907      	bls.n	800288c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e150      	b.n	8002b22 <HAL_RCC_OscConfig+0x4e2>
 8002880:	40023800 	.word	0x40023800
 8002884:	42470000 	.word	0x42470000
 8002888:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800288c:	4b88      	ldr	r3, [pc, #544]	; (8002ab0 <HAL_RCC_OscConfig+0x470>)
 800288e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1ea      	bne.n	800286e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 8097 	beq.w	80029d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028a6:	2300      	movs	r3, #0
 80028a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028aa:	4b81      	ldr	r3, [pc, #516]	; (8002ab0 <HAL_RCC_OscConfig+0x470>)
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10f      	bne.n	80028d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028b6:	2300      	movs	r3, #0
 80028b8:	60bb      	str	r3, [r7, #8]
 80028ba:	4b7d      	ldr	r3, [pc, #500]	; (8002ab0 <HAL_RCC_OscConfig+0x470>)
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	4a7c      	ldr	r2, [pc, #496]	; (8002ab0 <HAL_RCC_OscConfig+0x470>)
 80028c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028c4:	6413      	str	r3, [r2, #64]	; 0x40
 80028c6:	4b7a      	ldr	r3, [pc, #488]	; (8002ab0 <HAL_RCC_OscConfig+0x470>)
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ce:	60bb      	str	r3, [r7, #8]
 80028d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028d2:	2301      	movs	r3, #1
 80028d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d6:	4b77      	ldr	r3, [pc, #476]	; (8002ab4 <HAL_RCC_OscConfig+0x474>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d118      	bne.n	8002914 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028e2:	4b74      	ldr	r3, [pc, #464]	; (8002ab4 <HAL_RCC_OscConfig+0x474>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a73      	ldr	r2, [pc, #460]	; (8002ab4 <HAL_RCC_OscConfig+0x474>)
 80028e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ee:	f7fe ff21 	bl	8001734 <HAL_GetTick>
 80028f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f4:	e008      	b.n	8002908 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f6:	f7fe ff1d 	bl	8001734 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e10c      	b.n	8002b22 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002908:	4b6a      	ldr	r3, [pc, #424]	; (8002ab4 <HAL_RCC_OscConfig+0x474>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002910:	2b00      	cmp	r3, #0
 8002912:	d0f0      	beq.n	80028f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d106      	bne.n	800292a <HAL_RCC_OscConfig+0x2ea>
 800291c:	4b64      	ldr	r3, [pc, #400]	; (8002ab0 <HAL_RCC_OscConfig+0x470>)
 800291e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002920:	4a63      	ldr	r2, [pc, #396]	; (8002ab0 <HAL_RCC_OscConfig+0x470>)
 8002922:	f043 0301 	orr.w	r3, r3, #1
 8002926:	6713      	str	r3, [r2, #112]	; 0x70
 8002928:	e01c      	b.n	8002964 <HAL_RCC_OscConfig+0x324>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	2b05      	cmp	r3, #5
 8002930:	d10c      	bne.n	800294c <HAL_RCC_OscConfig+0x30c>
 8002932:	4b5f      	ldr	r3, [pc, #380]	; (8002ab0 <HAL_RCC_OscConfig+0x470>)
 8002934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002936:	4a5e      	ldr	r2, [pc, #376]	; (8002ab0 <HAL_RCC_OscConfig+0x470>)
 8002938:	f043 0304 	orr.w	r3, r3, #4
 800293c:	6713      	str	r3, [r2, #112]	; 0x70
 800293e:	4b5c      	ldr	r3, [pc, #368]	; (8002ab0 <HAL_RCC_OscConfig+0x470>)
 8002940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002942:	4a5b      	ldr	r2, [pc, #364]	; (8002ab0 <HAL_RCC_OscConfig+0x470>)
 8002944:	f043 0301 	orr.w	r3, r3, #1
 8002948:	6713      	str	r3, [r2, #112]	; 0x70
 800294a:	e00b      	b.n	8002964 <HAL_RCC_OscConfig+0x324>
 800294c:	4b58      	ldr	r3, [pc, #352]	; (8002ab0 <HAL_RCC_OscConfig+0x470>)
 800294e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002950:	4a57      	ldr	r2, [pc, #348]	; (8002ab0 <HAL_RCC_OscConfig+0x470>)
 8002952:	f023 0301 	bic.w	r3, r3, #1
 8002956:	6713      	str	r3, [r2, #112]	; 0x70
 8002958:	4b55      	ldr	r3, [pc, #340]	; (8002ab0 <HAL_RCC_OscConfig+0x470>)
 800295a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800295c:	4a54      	ldr	r2, [pc, #336]	; (8002ab0 <HAL_RCC_OscConfig+0x470>)
 800295e:	f023 0304 	bic.w	r3, r3, #4
 8002962:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d015      	beq.n	8002998 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800296c:	f7fe fee2 	bl	8001734 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002972:	e00a      	b.n	800298a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002974:	f7fe fede 	bl	8001734 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002982:	4293      	cmp	r3, r2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e0cb      	b.n	8002b22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800298a:	4b49      	ldr	r3, [pc, #292]	; (8002ab0 <HAL_RCC_OscConfig+0x470>)
 800298c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d0ee      	beq.n	8002974 <HAL_RCC_OscConfig+0x334>
 8002996:	e014      	b.n	80029c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002998:	f7fe fecc 	bl	8001734 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800299e:	e00a      	b.n	80029b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029a0:	f7fe fec8 	bl	8001734 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e0b5      	b.n	8002b22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029b6:	4b3e      	ldr	r3, [pc, #248]	; (8002ab0 <HAL_RCC_OscConfig+0x470>)
 80029b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1ee      	bne.n	80029a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029c2:	7dfb      	ldrb	r3, [r7, #23]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d105      	bne.n	80029d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029c8:	4b39      	ldr	r3, [pc, #228]	; (8002ab0 <HAL_RCC_OscConfig+0x470>)
 80029ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029cc:	4a38      	ldr	r2, [pc, #224]	; (8002ab0 <HAL_RCC_OscConfig+0x470>)
 80029ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 80a1 	beq.w	8002b20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029de:	4b34      	ldr	r3, [pc, #208]	; (8002ab0 <HAL_RCC_OscConfig+0x470>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 030c 	and.w	r3, r3, #12
 80029e6:	2b08      	cmp	r3, #8
 80029e8:	d05c      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d141      	bne.n	8002a76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029f2:	4b31      	ldr	r3, [pc, #196]	; (8002ab8 <HAL_RCC_OscConfig+0x478>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f8:	f7fe fe9c 	bl	8001734 <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a00:	f7fe fe98 	bl	8001734 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e087      	b.n	8002b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a12:	4b27      	ldr	r3, [pc, #156]	; (8002ab0 <HAL_RCC_OscConfig+0x470>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1f0      	bne.n	8002a00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69da      	ldr	r2, [r3, #28]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	431a      	orrs	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2c:	019b      	lsls	r3, r3, #6
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a34:	085b      	lsrs	r3, r3, #1
 8002a36:	3b01      	subs	r3, #1
 8002a38:	041b      	lsls	r3, r3, #16
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a40:	061b      	lsls	r3, r3, #24
 8002a42:	491b      	ldr	r1, [pc, #108]	; (8002ab0 <HAL_RCC_OscConfig+0x470>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a48:	4b1b      	ldr	r3, [pc, #108]	; (8002ab8 <HAL_RCC_OscConfig+0x478>)
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a4e:	f7fe fe71 	bl	8001734 <HAL_GetTick>
 8002a52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a54:	e008      	b.n	8002a68 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a56:	f7fe fe6d 	bl	8001734 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e05c      	b.n	8002b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a68:	4b11      	ldr	r3, [pc, #68]	; (8002ab0 <HAL_RCC_OscConfig+0x470>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d0f0      	beq.n	8002a56 <HAL_RCC_OscConfig+0x416>
 8002a74:	e054      	b.n	8002b20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a76:	4b10      	ldr	r3, [pc, #64]	; (8002ab8 <HAL_RCC_OscConfig+0x478>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7c:	f7fe fe5a 	bl	8001734 <HAL_GetTick>
 8002a80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a82:	e008      	b.n	8002a96 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a84:	f7fe fe56 	bl	8001734 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e045      	b.n	8002b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a96:	4b06      	ldr	r3, [pc, #24]	; (8002ab0 <HAL_RCC_OscConfig+0x470>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1f0      	bne.n	8002a84 <HAL_RCC_OscConfig+0x444>
 8002aa2:	e03d      	b.n	8002b20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d107      	bne.n	8002abc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e038      	b.n	8002b22 <HAL_RCC_OscConfig+0x4e2>
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	40007000 	.word	0x40007000
 8002ab8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002abc:	4b1b      	ldr	r3, [pc, #108]	; (8002b2c <HAL_RCC_OscConfig+0x4ec>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d028      	beq.n	8002b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d121      	bne.n	8002b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d11a      	bne.n	8002b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002aec:	4013      	ands	r3, r2
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002af2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d111      	bne.n	8002b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b02:	085b      	lsrs	r3, r3, #1
 8002b04:	3b01      	subs	r3, #1
 8002b06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d107      	bne.n	8002b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d001      	beq.n	8002b20 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e000      	b.n	8002b22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3718      	adds	r7, #24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40023800 	.word	0x40023800

08002b30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d101      	bne.n	8002b44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e0cc      	b.n	8002cde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b44:	4b68      	ldr	r3, [pc, #416]	; (8002ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0307 	and.w	r3, r3, #7
 8002b4c:	683a      	ldr	r2, [r7, #0]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d90c      	bls.n	8002b6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b52:	4b65      	ldr	r3, [pc, #404]	; (8002ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	b2d2      	uxtb	r2, r2
 8002b58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b5a:	4b63      	ldr	r3, [pc, #396]	; (8002ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0307 	and.w	r3, r3, #7
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d001      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e0b8      	b.n	8002cde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d020      	beq.n	8002bba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d005      	beq.n	8002b90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b84:	4b59      	ldr	r3, [pc, #356]	; (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	4a58      	ldr	r2, [pc, #352]	; (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002b8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0308 	and.w	r3, r3, #8
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d005      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b9c:	4b53      	ldr	r3, [pc, #332]	; (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	4a52      	ldr	r2, [pc, #328]	; (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002ba2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ba6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ba8:	4b50      	ldr	r3, [pc, #320]	; (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	494d      	ldr	r1, [pc, #308]	; (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d044      	beq.n	8002c50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d107      	bne.n	8002bde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bce:	4b47      	ldr	r3, [pc, #284]	; (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d119      	bne.n	8002c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e07f      	b.n	8002cde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d003      	beq.n	8002bee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bea:	2b03      	cmp	r3, #3
 8002bec:	d107      	bne.n	8002bfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bee:	4b3f      	ldr	r3, [pc, #252]	; (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d109      	bne.n	8002c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e06f      	b.n	8002cde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bfe:	4b3b      	ldr	r3, [pc, #236]	; (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e067      	b.n	8002cde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c0e:	4b37      	ldr	r3, [pc, #220]	; (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f023 0203 	bic.w	r2, r3, #3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	4934      	ldr	r1, [pc, #208]	; (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c20:	f7fe fd88 	bl	8001734 <HAL_GetTick>
 8002c24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c26:	e00a      	b.n	8002c3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c28:	f7fe fd84 	bl	8001734 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e04f      	b.n	8002cde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c3e:	4b2b      	ldr	r3, [pc, #172]	; (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f003 020c 	and.w	r2, r3, #12
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d1eb      	bne.n	8002c28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c50:	4b25      	ldr	r3, [pc, #148]	; (8002ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0307 	and.w	r3, r3, #7
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d20c      	bcs.n	8002c78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c5e:	4b22      	ldr	r3, [pc, #136]	; (8002ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	b2d2      	uxtb	r2, r2
 8002c64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c66:	4b20      	ldr	r3, [pc, #128]	; (8002ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0307 	and.w	r3, r3, #7
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d001      	beq.n	8002c78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e032      	b.n	8002cde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0304 	and.w	r3, r3, #4
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d008      	beq.n	8002c96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c84:	4b19      	ldr	r3, [pc, #100]	; (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	4916      	ldr	r1, [pc, #88]	; (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0308 	and.w	r3, r3, #8
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d009      	beq.n	8002cb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ca2:	4b12      	ldr	r3, [pc, #72]	; (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	490e      	ldr	r1, [pc, #56]	; (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cb6:	f000 f821 	bl	8002cfc <HAL_RCC_GetSysClockFreq>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	4b0b      	ldr	r3, [pc, #44]	; (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	091b      	lsrs	r3, r3, #4
 8002cc2:	f003 030f 	and.w	r3, r3, #15
 8002cc6:	490a      	ldr	r1, [pc, #40]	; (8002cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8002cc8:	5ccb      	ldrb	r3, [r1, r3]
 8002cca:	fa22 f303 	lsr.w	r3, r2, r3
 8002cce:	4a09      	ldr	r2, [pc, #36]	; (8002cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002cd2:	4b09      	ldr	r3, [pc, #36]	; (8002cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7fe fce8 	bl	80016ac <HAL_InitTick>

  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40023c00 	.word	0x40023c00
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	08004844 	.word	0x08004844
 8002cf4:	2000001c 	.word	0x2000001c
 8002cf8:	20000020 	.word	0x20000020

08002cfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d00:	b094      	sub	sp, #80	; 0x50
 8002d02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d04:	2300      	movs	r3, #0
 8002d06:	647b      	str	r3, [r7, #68]	; 0x44
 8002d08:	2300      	movs	r3, #0
 8002d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002d10:	2300      	movs	r3, #0
 8002d12:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d14:	4b79      	ldr	r3, [pc, #484]	; (8002efc <HAL_RCC_GetSysClockFreq+0x200>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f003 030c 	and.w	r3, r3, #12
 8002d1c:	2b08      	cmp	r3, #8
 8002d1e:	d00d      	beq.n	8002d3c <HAL_RCC_GetSysClockFreq+0x40>
 8002d20:	2b08      	cmp	r3, #8
 8002d22:	f200 80e1 	bhi.w	8002ee8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d002      	beq.n	8002d30 <HAL_RCC_GetSysClockFreq+0x34>
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d003      	beq.n	8002d36 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d2e:	e0db      	b.n	8002ee8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d30:	4b73      	ldr	r3, [pc, #460]	; (8002f00 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d32:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002d34:	e0db      	b.n	8002eee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d36:	4b73      	ldr	r3, [pc, #460]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x208>)
 8002d38:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d3a:	e0d8      	b.n	8002eee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d3c:	4b6f      	ldr	r3, [pc, #444]	; (8002efc <HAL_RCC_GetSysClockFreq+0x200>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d44:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d46:	4b6d      	ldr	r3, [pc, #436]	; (8002efc <HAL_RCC_GetSysClockFreq+0x200>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d063      	beq.n	8002e1a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d52:	4b6a      	ldr	r3, [pc, #424]	; (8002efc <HAL_RCC_GetSysClockFreq+0x200>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	099b      	lsrs	r3, r3, #6
 8002d58:	2200      	movs	r2, #0
 8002d5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d5c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d64:	633b      	str	r3, [r7, #48]	; 0x30
 8002d66:	2300      	movs	r3, #0
 8002d68:	637b      	str	r3, [r7, #52]	; 0x34
 8002d6a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d6e:	4622      	mov	r2, r4
 8002d70:	462b      	mov	r3, r5
 8002d72:	f04f 0000 	mov.w	r0, #0
 8002d76:	f04f 0100 	mov.w	r1, #0
 8002d7a:	0159      	lsls	r1, r3, #5
 8002d7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d80:	0150      	lsls	r0, r2, #5
 8002d82:	4602      	mov	r2, r0
 8002d84:	460b      	mov	r3, r1
 8002d86:	4621      	mov	r1, r4
 8002d88:	1a51      	subs	r1, r2, r1
 8002d8a:	6139      	str	r1, [r7, #16]
 8002d8c:	4629      	mov	r1, r5
 8002d8e:	eb63 0301 	sbc.w	r3, r3, r1
 8002d92:	617b      	str	r3, [r7, #20]
 8002d94:	f04f 0200 	mov.w	r2, #0
 8002d98:	f04f 0300 	mov.w	r3, #0
 8002d9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002da0:	4659      	mov	r1, fp
 8002da2:	018b      	lsls	r3, r1, #6
 8002da4:	4651      	mov	r1, sl
 8002da6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002daa:	4651      	mov	r1, sl
 8002dac:	018a      	lsls	r2, r1, #6
 8002dae:	4651      	mov	r1, sl
 8002db0:	ebb2 0801 	subs.w	r8, r2, r1
 8002db4:	4659      	mov	r1, fp
 8002db6:	eb63 0901 	sbc.w	r9, r3, r1
 8002dba:	f04f 0200 	mov.w	r2, #0
 8002dbe:	f04f 0300 	mov.w	r3, #0
 8002dc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002dc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002dca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002dce:	4690      	mov	r8, r2
 8002dd0:	4699      	mov	r9, r3
 8002dd2:	4623      	mov	r3, r4
 8002dd4:	eb18 0303 	adds.w	r3, r8, r3
 8002dd8:	60bb      	str	r3, [r7, #8]
 8002dda:	462b      	mov	r3, r5
 8002ddc:	eb49 0303 	adc.w	r3, r9, r3
 8002de0:	60fb      	str	r3, [r7, #12]
 8002de2:	f04f 0200 	mov.w	r2, #0
 8002de6:	f04f 0300 	mov.w	r3, #0
 8002dea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002dee:	4629      	mov	r1, r5
 8002df0:	024b      	lsls	r3, r1, #9
 8002df2:	4621      	mov	r1, r4
 8002df4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002df8:	4621      	mov	r1, r4
 8002dfa:	024a      	lsls	r2, r1, #9
 8002dfc:	4610      	mov	r0, r2
 8002dfe:	4619      	mov	r1, r3
 8002e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e02:	2200      	movs	r2, #0
 8002e04:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e0c:	f7fd fd46 	bl	800089c <__aeabi_uldivmod>
 8002e10:	4602      	mov	r2, r0
 8002e12:	460b      	mov	r3, r1
 8002e14:	4613      	mov	r3, r2
 8002e16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e18:	e058      	b.n	8002ecc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e1a:	4b38      	ldr	r3, [pc, #224]	; (8002efc <HAL_RCC_GetSysClockFreq+0x200>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	099b      	lsrs	r3, r3, #6
 8002e20:	2200      	movs	r2, #0
 8002e22:	4618      	mov	r0, r3
 8002e24:	4611      	mov	r1, r2
 8002e26:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e2a:	623b      	str	r3, [r7, #32]
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e34:	4642      	mov	r2, r8
 8002e36:	464b      	mov	r3, r9
 8002e38:	f04f 0000 	mov.w	r0, #0
 8002e3c:	f04f 0100 	mov.w	r1, #0
 8002e40:	0159      	lsls	r1, r3, #5
 8002e42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e46:	0150      	lsls	r0, r2, #5
 8002e48:	4602      	mov	r2, r0
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	4641      	mov	r1, r8
 8002e4e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e52:	4649      	mov	r1, r9
 8002e54:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e58:	f04f 0200 	mov.w	r2, #0
 8002e5c:	f04f 0300 	mov.w	r3, #0
 8002e60:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e64:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e68:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e6c:	ebb2 040a 	subs.w	r4, r2, sl
 8002e70:	eb63 050b 	sbc.w	r5, r3, fp
 8002e74:	f04f 0200 	mov.w	r2, #0
 8002e78:	f04f 0300 	mov.w	r3, #0
 8002e7c:	00eb      	lsls	r3, r5, #3
 8002e7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e82:	00e2      	lsls	r2, r4, #3
 8002e84:	4614      	mov	r4, r2
 8002e86:	461d      	mov	r5, r3
 8002e88:	4643      	mov	r3, r8
 8002e8a:	18e3      	adds	r3, r4, r3
 8002e8c:	603b      	str	r3, [r7, #0]
 8002e8e:	464b      	mov	r3, r9
 8002e90:	eb45 0303 	adc.w	r3, r5, r3
 8002e94:	607b      	str	r3, [r7, #4]
 8002e96:	f04f 0200 	mov.w	r2, #0
 8002e9a:	f04f 0300 	mov.w	r3, #0
 8002e9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ea2:	4629      	mov	r1, r5
 8002ea4:	028b      	lsls	r3, r1, #10
 8002ea6:	4621      	mov	r1, r4
 8002ea8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002eac:	4621      	mov	r1, r4
 8002eae:	028a      	lsls	r2, r1, #10
 8002eb0:	4610      	mov	r0, r2
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	61bb      	str	r3, [r7, #24]
 8002eba:	61fa      	str	r2, [r7, #28]
 8002ebc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ec0:	f7fd fcec 	bl	800089c <__aeabi_uldivmod>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	4613      	mov	r3, r2
 8002eca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ecc:	4b0b      	ldr	r3, [pc, #44]	; (8002efc <HAL_RCC_GetSysClockFreq+0x200>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	0c1b      	lsrs	r3, r3, #16
 8002ed2:	f003 0303 	and.w	r3, r3, #3
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002edc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ee6:	e002      	b.n	8002eee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ee8:	4b05      	ldr	r3, [pc, #20]	; (8002f00 <HAL_RCC_GetSysClockFreq+0x204>)
 8002eea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002eec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3750      	adds	r7, #80	; 0x50
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002efa:	bf00      	nop
 8002efc:	40023800 	.word	0x40023800
 8002f00:	00f42400 	.word	0x00f42400
 8002f04:	007a1200 	.word	0x007a1200

08002f08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f0c:	4b03      	ldr	r3, [pc, #12]	; (8002f1c <HAL_RCC_GetHCLKFreq+0x14>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	2000001c 	.word	0x2000001c

08002f20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f24:	f7ff fff0 	bl	8002f08 <HAL_RCC_GetHCLKFreq>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	4b05      	ldr	r3, [pc, #20]	; (8002f40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	0a9b      	lsrs	r3, r3, #10
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	4903      	ldr	r1, [pc, #12]	; (8002f44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f36:	5ccb      	ldrb	r3, [r1, r3]
 8002f38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	40023800 	.word	0x40023800
 8002f44:	08004854 	.word	0x08004854

08002f48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f4c:	f7ff ffdc 	bl	8002f08 <HAL_RCC_GetHCLKFreq>
 8002f50:	4602      	mov	r2, r0
 8002f52:	4b05      	ldr	r3, [pc, #20]	; (8002f68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	0b5b      	lsrs	r3, r3, #13
 8002f58:	f003 0307 	and.w	r3, r3, #7
 8002f5c:	4903      	ldr	r1, [pc, #12]	; (8002f6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f5e:	5ccb      	ldrb	r3, [r1, r3]
 8002f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	08004854 	.word	0x08004854

08002f70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e03f      	b.n	8003002 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d106      	bne.n	8002f9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7fe f93c 	bl	8001214 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2224      	movs	r2, #36	; 0x24
 8002fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68da      	ldr	r2, [r3, #12]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 fd23 	bl	8003a00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	691a      	ldr	r2, [r3, #16]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	695a      	ldr	r2, [r3, #20]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fe8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2220      	movs	r2, #32
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800300a:	b480      	push	{r7}
 800300c:	b085      	sub	sp, #20
 800300e:	af00      	add	r7, sp, #0
 8003010:	60f8      	str	r0, [r7, #12]
 8003012:	60b9      	str	r1, [r7, #8]
 8003014:	4613      	mov	r3, r2
 8003016:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b20      	cmp	r3, #32
 8003022:	d130      	bne.n	8003086 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d002      	beq.n	8003030 <HAL_UART_Transmit_IT+0x26>
 800302a:	88fb      	ldrh	r3, [r7, #6]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d101      	bne.n	8003034 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e029      	b.n	8003088 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800303a:	2b01      	cmp	r3, #1
 800303c:	d101      	bne.n	8003042 <HAL_UART_Transmit_IT+0x38>
 800303e:	2302      	movs	r3, #2
 8003040:	e022      	b.n	8003088 <HAL_UART_Transmit_IT+0x7e>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	68ba      	ldr	r2, [r7, #8]
 800304e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	88fa      	ldrh	r2, [r7, #6]
 8003054:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	88fa      	ldrh	r2, [r7, #6]
 800305a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2221      	movs	r2, #33	; 0x21
 8003066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68da      	ldr	r2, [r3, #12]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003080:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003082:	2300      	movs	r3, #0
 8003084:	e000      	b.n	8003088 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003086:	2302      	movs	r3, #2
  }
}
 8003088:	4618      	mov	r0, r3
 800308a:	3714      	adds	r7, #20
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	4613      	mov	r3, r2
 80030a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b20      	cmp	r3, #32
 80030ac:	d11d      	bne.n	80030ea <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d002      	beq.n	80030ba <HAL_UART_Receive_IT+0x26>
 80030b4:	88fb      	ldrh	r3, [r7, #6]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e016      	b.n	80030ec <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d101      	bne.n	80030cc <HAL_UART_Receive_IT+0x38>
 80030c8:	2302      	movs	r3, #2
 80030ca:	e00f      	b.n	80030ec <HAL_UART_Receive_IT+0x58>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80030da:	88fb      	ldrh	r3, [r7, #6]
 80030dc:	461a      	mov	r2, r3
 80030de:	68b9      	ldr	r1, [r7, #8]
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f000 fab5 	bl	8003650 <UART_Start_Receive_IT>
 80030e6:	4603      	mov	r3, r0
 80030e8:	e000      	b.n	80030ec <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80030ea:	2302      	movs	r3, #2
  }
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3710      	adds	r7, #16
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b0ba      	sub	sp, #232	; 0xe8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800311a:	2300      	movs	r3, #0
 800311c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003120:	2300      	movs	r3, #0
 8003122:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800312a:	f003 030f 	and.w	r3, r3, #15
 800312e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003132:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003136:	2b00      	cmp	r3, #0
 8003138:	d10f      	bne.n	800315a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800313a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800313e:	f003 0320 	and.w	r3, r3, #32
 8003142:	2b00      	cmp	r3, #0
 8003144:	d009      	beq.n	800315a <HAL_UART_IRQHandler+0x66>
 8003146:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800314a:	f003 0320 	and.w	r3, r3, #32
 800314e:	2b00      	cmp	r3, #0
 8003150:	d003      	beq.n	800315a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 fb99 	bl	800388a <UART_Receive_IT>
      return;
 8003158:	e256      	b.n	8003608 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800315a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800315e:	2b00      	cmp	r3, #0
 8003160:	f000 80de 	beq.w	8003320 <HAL_UART_IRQHandler+0x22c>
 8003164:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	2b00      	cmp	r3, #0
 800316e:	d106      	bne.n	800317e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003174:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 80d1 	beq.w	8003320 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800317e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00b      	beq.n	80031a2 <HAL_UART_IRQHandler+0xae>
 800318a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800318e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003192:	2b00      	cmp	r3, #0
 8003194:	d005      	beq.n	80031a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	f043 0201 	orr.w	r2, r3, #1
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031a6:	f003 0304 	and.w	r3, r3, #4
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00b      	beq.n	80031c6 <HAL_UART_IRQHandler+0xd2>
 80031ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d005      	beq.n	80031c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	f043 0202 	orr.w	r2, r3, #2
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00b      	beq.n	80031ea <HAL_UART_IRQHandler+0xf6>
 80031d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d005      	beq.n	80031ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	f043 0204 	orr.w	r2, r3, #4
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80031ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031ee:	f003 0308 	and.w	r3, r3, #8
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d011      	beq.n	800321a <HAL_UART_IRQHandler+0x126>
 80031f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031fa:	f003 0320 	and.w	r3, r3, #32
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d105      	bne.n	800320e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003202:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	d005      	beq.n	800321a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	f043 0208 	orr.w	r2, r3, #8
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	2b00      	cmp	r3, #0
 8003220:	f000 81ed 	beq.w	80035fe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003228:	f003 0320 	and.w	r3, r3, #32
 800322c:	2b00      	cmp	r3, #0
 800322e:	d008      	beq.n	8003242 <HAL_UART_IRQHandler+0x14e>
 8003230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003234:	f003 0320 	and.w	r3, r3, #32
 8003238:	2b00      	cmp	r3, #0
 800323a:	d002      	beq.n	8003242 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 fb24 	bl	800388a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800324c:	2b40      	cmp	r3, #64	; 0x40
 800324e:	bf0c      	ite	eq
 8003250:	2301      	moveq	r3, #1
 8003252:	2300      	movne	r3, #0
 8003254:	b2db      	uxtb	r3, r3
 8003256:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	f003 0308 	and.w	r3, r3, #8
 8003262:	2b00      	cmp	r3, #0
 8003264:	d103      	bne.n	800326e <HAL_UART_IRQHandler+0x17a>
 8003266:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800326a:	2b00      	cmp	r3, #0
 800326c:	d04f      	beq.n	800330e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 fa2c 	bl	80036cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800327e:	2b40      	cmp	r3, #64	; 0x40
 8003280:	d141      	bne.n	8003306 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	3314      	adds	r3, #20
 8003288:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800328c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003290:	e853 3f00 	ldrex	r3, [r3]
 8003294:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003298:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800329c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	3314      	adds	r3, #20
 80032aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80032ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80032b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80032ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80032be:	e841 2300 	strex	r3, r2, [r1]
 80032c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80032c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1d9      	bne.n	8003282 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d013      	beq.n	80032fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032da:	4a7d      	ldr	r2, [pc, #500]	; (80034d0 <HAL_UART_IRQHandler+0x3dc>)
 80032dc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7fe ff95 	bl	8002212 <HAL_DMA_Abort_IT>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d016      	beq.n	800331c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032f8:	4610      	mov	r0, r2
 80032fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032fc:	e00e      	b.n	800331c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 f990 	bl	8003624 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003304:	e00a      	b.n	800331c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f98c 	bl	8003624 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800330c:	e006      	b.n	800331c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 f988 	bl	8003624 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800331a:	e170      	b.n	80035fe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800331c:	bf00      	nop
    return;
 800331e:	e16e      	b.n	80035fe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003324:	2b01      	cmp	r3, #1
 8003326:	f040 814a 	bne.w	80035be <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800332a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800332e:	f003 0310 	and.w	r3, r3, #16
 8003332:	2b00      	cmp	r3, #0
 8003334:	f000 8143 	beq.w	80035be <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800333c:	f003 0310 	and.w	r3, r3, #16
 8003340:	2b00      	cmp	r3, #0
 8003342:	f000 813c 	beq.w	80035be <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003346:	2300      	movs	r3, #0
 8003348:	60bb      	str	r3, [r7, #8]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	60bb      	str	r3, [r7, #8]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	60bb      	str	r3, [r7, #8]
 800335a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003366:	2b40      	cmp	r3, #64	; 0x40
 8003368:	f040 80b4 	bne.w	80034d4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003378:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 8140 	beq.w	8003602 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003386:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800338a:	429a      	cmp	r2, r3
 800338c:	f080 8139 	bcs.w	8003602 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003396:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033a2:	f000 8088 	beq.w	80034b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	330c      	adds	r3, #12
 80033ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80033b4:	e853 3f00 	ldrex	r3, [r3]
 80033b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80033bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	330c      	adds	r3, #12
 80033ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80033d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80033d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80033de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80033e2:	e841 2300 	strex	r3, r2, [r1]
 80033e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80033ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1d9      	bne.n	80033a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	3314      	adds	r3, #20
 80033f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033fc:	e853 3f00 	ldrex	r3, [r3]
 8003400:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003402:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003404:	f023 0301 	bic.w	r3, r3, #1
 8003408:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	3314      	adds	r3, #20
 8003412:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003416:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800341a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800341c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800341e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003422:	e841 2300 	strex	r3, r2, [r1]
 8003426:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003428:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1e1      	bne.n	80033f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	3314      	adds	r3, #20
 8003434:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003436:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003438:	e853 3f00 	ldrex	r3, [r3]
 800343c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800343e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003440:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003444:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	3314      	adds	r3, #20
 800344e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003452:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003454:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003456:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003458:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800345a:	e841 2300 	strex	r3, r2, [r1]
 800345e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003460:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1e3      	bne.n	800342e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2220      	movs	r2, #32
 800346a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	330c      	adds	r3, #12
 800347a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800347c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800347e:	e853 3f00 	ldrex	r3, [r3]
 8003482:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003484:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003486:	f023 0310 	bic.w	r3, r3, #16
 800348a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	330c      	adds	r3, #12
 8003494:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003498:	65ba      	str	r2, [r7, #88]	; 0x58
 800349a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800349c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800349e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80034a0:	e841 2300 	strex	r3, r2, [r1]
 80034a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80034a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1e3      	bne.n	8003474 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7fe fe3e 	bl	8002132 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034be:	b29b      	uxth	r3, r3
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	4619      	mov	r1, r3
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 f8b6 	bl	8003638 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80034cc:	e099      	b.n	8003602 <HAL_UART_IRQHandler+0x50e>
 80034ce:	bf00      	nop
 80034d0:	08003793 	.word	0x08003793
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034dc:	b29b      	uxth	r3, r3
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f000 808b 	beq.w	8003606 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80034f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f000 8086 	beq.w	8003606 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	330c      	adds	r3, #12
 8003500:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003504:	e853 3f00 	ldrex	r3, [r3]
 8003508:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800350a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800350c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003510:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	330c      	adds	r3, #12
 800351a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800351e:	647a      	str	r2, [r7, #68]	; 0x44
 8003520:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003522:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003524:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003526:	e841 2300 	strex	r3, r2, [r1]
 800352a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800352c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1e3      	bne.n	80034fa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	3314      	adds	r3, #20
 8003538:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353c:	e853 3f00 	ldrex	r3, [r3]
 8003540:	623b      	str	r3, [r7, #32]
   return(result);
 8003542:	6a3b      	ldr	r3, [r7, #32]
 8003544:	f023 0301 	bic.w	r3, r3, #1
 8003548:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	3314      	adds	r3, #20
 8003552:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003556:	633a      	str	r2, [r7, #48]	; 0x30
 8003558:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800355a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800355c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800355e:	e841 2300 	strex	r3, r2, [r1]
 8003562:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1e3      	bne.n	8003532 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2220      	movs	r2, #32
 800356e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	330c      	adds	r3, #12
 800357e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	e853 3f00 	ldrex	r3, [r3]
 8003586:	60fb      	str	r3, [r7, #12]
   return(result);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f023 0310 	bic.w	r3, r3, #16
 800358e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	330c      	adds	r3, #12
 8003598:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800359c:	61fa      	str	r2, [r7, #28]
 800359e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a0:	69b9      	ldr	r1, [r7, #24]
 80035a2:	69fa      	ldr	r2, [r7, #28]
 80035a4:	e841 2300 	strex	r3, r2, [r1]
 80035a8:	617b      	str	r3, [r7, #20]
   return(result);
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1e3      	bne.n	8003578 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80035b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80035b4:	4619      	mov	r1, r3
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 f83e 	bl	8003638 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80035bc:	e023      	b.n	8003606 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80035be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d009      	beq.n	80035de <HAL_UART_IRQHandler+0x4ea>
 80035ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f8ef 	bl	80037ba <UART_Transmit_IT>
    return;
 80035dc:	e014      	b.n	8003608 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80035de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00e      	beq.n	8003608 <HAL_UART_IRQHandler+0x514>
 80035ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d008      	beq.n	8003608 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 f92f 	bl	800385a <UART_EndTransmit_IT>
    return;
 80035fc:	e004      	b.n	8003608 <HAL_UART_IRQHandler+0x514>
    return;
 80035fe:	bf00      	nop
 8003600:	e002      	b.n	8003608 <HAL_UART_IRQHandler+0x514>
      return;
 8003602:	bf00      	nop
 8003604:	e000      	b.n	8003608 <HAL_UART_IRQHandler+0x514>
      return;
 8003606:	bf00      	nop
  }
}
 8003608:	37e8      	adds	r7, #232	; 0xe8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop

08003610 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	460b      	mov	r3, r1
 8003642:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003650:	b480      	push	{r7}
 8003652:	b085      	sub	sp, #20
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	4613      	mov	r3, r2
 800365c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	68ba      	ldr	r2, [r7, #8]
 8003662:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	88fa      	ldrh	r2, [r7, #6]
 8003668:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	88fa      	ldrh	r2, [r7, #6]
 800366e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2222      	movs	r2, #34	; 0x22
 800367a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d007      	beq.n	800369e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68da      	ldr	r2, [r3, #12]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800369c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	695a      	ldr	r2, [r3, #20]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f042 0201 	orr.w	r2, r2, #1
 80036ac:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68da      	ldr	r2, [r3, #12]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f042 0220 	orr.w	r2, r2, #32
 80036bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3714      	adds	r7, #20
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b095      	sub	sp, #84	; 0x54
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	330c      	adds	r3, #12
 80036da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036de:	e853 3f00 	ldrex	r3, [r3]
 80036e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80036e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80036ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	330c      	adds	r3, #12
 80036f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036f4:	643a      	str	r2, [r7, #64]	; 0x40
 80036f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80036fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036fc:	e841 2300 	strex	r3, r2, [r1]
 8003700:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1e5      	bne.n	80036d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	3314      	adds	r3, #20
 800370e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003710:	6a3b      	ldr	r3, [r7, #32]
 8003712:	e853 3f00 	ldrex	r3, [r3]
 8003716:	61fb      	str	r3, [r7, #28]
   return(result);
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	f023 0301 	bic.w	r3, r3, #1
 800371e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	3314      	adds	r3, #20
 8003726:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003728:	62fa      	str	r2, [r7, #44]	; 0x2c
 800372a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800372c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800372e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003730:	e841 2300 	strex	r3, r2, [r1]
 8003734:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1e5      	bne.n	8003708 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003740:	2b01      	cmp	r3, #1
 8003742:	d119      	bne.n	8003778 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	330c      	adds	r3, #12
 800374a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	e853 3f00 	ldrex	r3, [r3]
 8003752:	60bb      	str	r3, [r7, #8]
   return(result);
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	f023 0310 	bic.w	r3, r3, #16
 800375a:	647b      	str	r3, [r7, #68]	; 0x44
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	330c      	adds	r3, #12
 8003762:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003764:	61ba      	str	r2, [r7, #24]
 8003766:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003768:	6979      	ldr	r1, [r7, #20]
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	e841 2300 	strex	r3, r2, [r1]
 8003770:	613b      	str	r3, [r7, #16]
   return(result);
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1e5      	bne.n	8003744 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003786:	bf00      	nop
 8003788:	3754      	adds	r7, #84	; 0x54
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr

08003792 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b084      	sub	sp, #16
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f7ff ff39 	bl	8003624 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037b2:	bf00      	nop
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80037ba:	b480      	push	{r7}
 80037bc:	b085      	sub	sp, #20
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b21      	cmp	r3, #33	; 0x21
 80037cc:	d13e      	bne.n	800384c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037d6:	d114      	bne.n	8003802 <UART_Transmit_IT+0x48>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d110      	bne.n	8003802 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	881b      	ldrh	r3, [r3, #0]
 80037ea:	461a      	mov	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	1c9a      	adds	r2, r3, #2
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	621a      	str	r2, [r3, #32]
 8003800:	e008      	b.n	8003814 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	1c59      	adds	r1, r3, #1
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	6211      	str	r1, [r2, #32]
 800380c:	781a      	ldrb	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003818:	b29b      	uxth	r3, r3
 800381a:	3b01      	subs	r3, #1
 800381c:	b29b      	uxth	r3, r3
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	4619      	mov	r1, r3
 8003822:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10f      	bne.n	8003848 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68da      	ldr	r2, [r3, #12]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003836:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68da      	ldr	r2, [r3, #12]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003846:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003848:	2300      	movs	r3, #0
 800384a:	e000      	b.n	800384e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800384c:	2302      	movs	r3, #2
  }
}
 800384e:	4618      	mov	r0, r3
 8003850:	3714      	adds	r7, #20
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b082      	sub	sp, #8
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68da      	ldr	r2, [r3, #12]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003870:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2220      	movs	r2, #32
 8003876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7ff fec8 	bl	8003610 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b08c      	sub	sp, #48	; 0x30
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b22      	cmp	r3, #34	; 0x22
 800389c:	f040 80ab 	bne.w	80039f6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038a8:	d117      	bne.n	80038da <UART_Receive_IT+0x50>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d113      	bne.n	80038da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80038b2:	2300      	movs	r3, #0
 80038b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d2:	1c9a      	adds	r2, r3, #2
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	629a      	str	r2, [r3, #40]	; 0x28
 80038d8:	e026      	b.n	8003928 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038de:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80038e0:	2300      	movs	r3, #0
 80038e2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038ec:	d007      	beq.n	80038fe <UART_Receive_IT+0x74>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10a      	bne.n	800390c <UART_Receive_IT+0x82>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d106      	bne.n	800390c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	b2da      	uxtb	r2, r3
 8003906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003908:	701a      	strb	r2, [r3, #0]
 800390a:	e008      	b.n	800391e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	b2db      	uxtb	r3, r3
 8003914:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003918:	b2da      	uxtb	r2, r3
 800391a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800391c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003922:	1c5a      	adds	r2, r3, #1
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800392c:	b29b      	uxth	r3, r3
 800392e:	3b01      	subs	r3, #1
 8003930:	b29b      	uxth	r3, r3
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	4619      	mov	r1, r3
 8003936:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003938:	2b00      	cmp	r3, #0
 800393a:	d15a      	bne.n	80039f2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68da      	ldr	r2, [r3, #12]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 0220 	bic.w	r2, r2, #32
 800394a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68da      	ldr	r2, [r3, #12]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800395a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	695a      	ldr	r2, [r3, #20]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f022 0201 	bic.w	r2, r2, #1
 800396a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2220      	movs	r2, #32
 8003970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003978:	2b01      	cmp	r3, #1
 800397a:	d135      	bne.n	80039e8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	330c      	adds	r3, #12
 8003988:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	e853 3f00 	ldrex	r3, [r3]
 8003990:	613b      	str	r3, [r7, #16]
   return(result);
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	f023 0310 	bic.w	r3, r3, #16
 8003998:	627b      	str	r3, [r7, #36]	; 0x24
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	330c      	adds	r3, #12
 80039a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039a2:	623a      	str	r2, [r7, #32]
 80039a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a6:	69f9      	ldr	r1, [r7, #28]
 80039a8:	6a3a      	ldr	r2, [r7, #32]
 80039aa:	e841 2300 	strex	r3, r2, [r1]
 80039ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1e5      	bne.n	8003982 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0310 	and.w	r3, r3, #16
 80039c0:	2b10      	cmp	r3, #16
 80039c2:	d10a      	bne.n	80039da <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039c4:	2300      	movs	r3, #0
 80039c6:	60fb      	str	r3, [r7, #12]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	60fb      	str	r3, [r7, #12]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	60fb      	str	r3, [r7, #12]
 80039d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80039de:	4619      	mov	r1, r3
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f7ff fe29 	bl	8003638 <HAL_UARTEx_RxEventCallback>
 80039e6:	e002      	b.n	80039ee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f7fd f8d9 	bl	8000ba0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80039ee:	2300      	movs	r3, #0
 80039f0:	e002      	b.n	80039f8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80039f2:	2300      	movs	r3, #0
 80039f4:	e000      	b.n	80039f8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80039f6:	2302      	movs	r3, #2
  }
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3730      	adds	r7, #48	; 0x30
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a04:	b0c0      	sub	sp, #256	; 0x100
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a1c:	68d9      	ldr	r1, [r3, #12]
 8003a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	ea40 0301 	orr.w	r3, r0, r1
 8003a28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a2e:	689a      	ldr	r2, [r3, #8]
 8003a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	431a      	orrs	r2, r3
 8003a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a44:	69db      	ldr	r3, [r3, #28]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003a58:	f021 010c 	bic.w	r1, r1, #12
 8003a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003a66:	430b      	orrs	r3, r1
 8003a68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a7a:	6999      	ldr	r1, [r3, #24]
 8003a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	ea40 0301 	orr.w	r3, r0, r1
 8003a86:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	4b8f      	ldr	r3, [pc, #572]	; (8003ccc <UART_SetConfig+0x2cc>)
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d005      	beq.n	8003aa0 <UART_SetConfig+0xa0>
 8003a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	4b8d      	ldr	r3, [pc, #564]	; (8003cd0 <UART_SetConfig+0x2d0>)
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d104      	bne.n	8003aaa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003aa0:	f7ff fa52 	bl	8002f48 <HAL_RCC_GetPCLK2Freq>
 8003aa4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003aa8:	e003      	b.n	8003ab2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003aaa:	f7ff fa39 	bl	8002f20 <HAL_RCC_GetPCLK1Freq>
 8003aae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ab6:	69db      	ldr	r3, [r3, #28]
 8003ab8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003abc:	f040 810c 	bne.w	8003cd8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ac0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003aca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003ace:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003ad2:	4622      	mov	r2, r4
 8003ad4:	462b      	mov	r3, r5
 8003ad6:	1891      	adds	r1, r2, r2
 8003ad8:	65b9      	str	r1, [r7, #88]	; 0x58
 8003ada:	415b      	adcs	r3, r3
 8003adc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ade:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003ae2:	4621      	mov	r1, r4
 8003ae4:	eb12 0801 	adds.w	r8, r2, r1
 8003ae8:	4629      	mov	r1, r5
 8003aea:	eb43 0901 	adc.w	r9, r3, r1
 8003aee:	f04f 0200 	mov.w	r2, #0
 8003af2:	f04f 0300 	mov.w	r3, #0
 8003af6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003afa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003afe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b02:	4690      	mov	r8, r2
 8003b04:	4699      	mov	r9, r3
 8003b06:	4623      	mov	r3, r4
 8003b08:	eb18 0303 	adds.w	r3, r8, r3
 8003b0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003b10:	462b      	mov	r3, r5
 8003b12:	eb49 0303 	adc.w	r3, r9, r3
 8003b16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003b26:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003b2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003b2e:	460b      	mov	r3, r1
 8003b30:	18db      	adds	r3, r3, r3
 8003b32:	653b      	str	r3, [r7, #80]	; 0x50
 8003b34:	4613      	mov	r3, r2
 8003b36:	eb42 0303 	adc.w	r3, r2, r3
 8003b3a:	657b      	str	r3, [r7, #84]	; 0x54
 8003b3c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003b40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003b44:	f7fc feaa 	bl	800089c <__aeabi_uldivmod>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	4b61      	ldr	r3, [pc, #388]	; (8003cd4 <UART_SetConfig+0x2d4>)
 8003b4e:	fba3 2302 	umull	r2, r3, r3, r2
 8003b52:	095b      	lsrs	r3, r3, #5
 8003b54:	011c      	lsls	r4, r3, #4
 8003b56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b60:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003b64:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003b68:	4642      	mov	r2, r8
 8003b6a:	464b      	mov	r3, r9
 8003b6c:	1891      	adds	r1, r2, r2
 8003b6e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003b70:	415b      	adcs	r3, r3
 8003b72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003b78:	4641      	mov	r1, r8
 8003b7a:	eb12 0a01 	adds.w	sl, r2, r1
 8003b7e:	4649      	mov	r1, r9
 8003b80:	eb43 0b01 	adc.w	fp, r3, r1
 8003b84:	f04f 0200 	mov.w	r2, #0
 8003b88:	f04f 0300 	mov.w	r3, #0
 8003b8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b90:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b98:	4692      	mov	sl, r2
 8003b9a:	469b      	mov	fp, r3
 8003b9c:	4643      	mov	r3, r8
 8003b9e:	eb1a 0303 	adds.w	r3, sl, r3
 8003ba2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ba6:	464b      	mov	r3, r9
 8003ba8:	eb4b 0303 	adc.w	r3, fp, r3
 8003bac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003bbc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003bc0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	18db      	adds	r3, r3, r3
 8003bc8:	643b      	str	r3, [r7, #64]	; 0x40
 8003bca:	4613      	mov	r3, r2
 8003bcc:	eb42 0303 	adc.w	r3, r2, r3
 8003bd0:	647b      	str	r3, [r7, #68]	; 0x44
 8003bd2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003bd6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003bda:	f7fc fe5f 	bl	800089c <__aeabi_uldivmod>
 8003bde:	4602      	mov	r2, r0
 8003be0:	460b      	mov	r3, r1
 8003be2:	4611      	mov	r1, r2
 8003be4:	4b3b      	ldr	r3, [pc, #236]	; (8003cd4 <UART_SetConfig+0x2d4>)
 8003be6:	fba3 2301 	umull	r2, r3, r3, r1
 8003bea:	095b      	lsrs	r3, r3, #5
 8003bec:	2264      	movs	r2, #100	; 0x64
 8003bee:	fb02 f303 	mul.w	r3, r2, r3
 8003bf2:	1acb      	subs	r3, r1, r3
 8003bf4:	00db      	lsls	r3, r3, #3
 8003bf6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003bfa:	4b36      	ldr	r3, [pc, #216]	; (8003cd4 <UART_SetConfig+0x2d4>)
 8003bfc:	fba3 2302 	umull	r2, r3, r3, r2
 8003c00:	095b      	lsrs	r3, r3, #5
 8003c02:	005b      	lsls	r3, r3, #1
 8003c04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c08:	441c      	add	r4, r3
 8003c0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c14:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003c18:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003c1c:	4642      	mov	r2, r8
 8003c1e:	464b      	mov	r3, r9
 8003c20:	1891      	adds	r1, r2, r2
 8003c22:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c24:	415b      	adcs	r3, r3
 8003c26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003c2c:	4641      	mov	r1, r8
 8003c2e:	1851      	adds	r1, r2, r1
 8003c30:	6339      	str	r1, [r7, #48]	; 0x30
 8003c32:	4649      	mov	r1, r9
 8003c34:	414b      	adcs	r3, r1
 8003c36:	637b      	str	r3, [r7, #52]	; 0x34
 8003c38:	f04f 0200 	mov.w	r2, #0
 8003c3c:	f04f 0300 	mov.w	r3, #0
 8003c40:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003c44:	4659      	mov	r1, fp
 8003c46:	00cb      	lsls	r3, r1, #3
 8003c48:	4651      	mov	r1, sl
 8003c4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c4e:	4651      	mov	r1, sl
 8003c50:	00ca      	lsls	r2, r1, #3
 8003c52:	4610      	mov	r0, r2
 8003c54:	4619      	mov	r1, r3
 8003c56:	4603      	mov	r3, r0
 8003c58:	4642      	mov	r2, r8
 8003c5a:	189b      	adds	r3, r3, r2
 8003c5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c60:	464b      	mov	r3, r9
 8003c62:	460a      	mov	r2, r1
 8003c64:	eb42 0303 	adc.w	r3, r2, r3
 8003c68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003c78:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003c7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003c80:	460b      	mov	r3, r1
 8003c82:	18db      	adds	r3, r3, r3
 8003c84:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c86:	4613      	mov	r3, r2
 8003c88:	eb42 0303 	adc.w	r3, r2, r3
 8003c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c92:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003c96:	f7fc fe01 	bl	800089c <__aeabi_uldivmod>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	4b0d      	ldr	r3, [pc, #52]	; (8003cd4 <UART_SetConfig+0x2d4>)
 8003ca0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ca4:	095b      	lsrs	r3, r3, #5
 8003ca6:	2164      	movs	r1, #100	; 0x64
 8003ca8:	fb01 f303 	mul.w	r3, r1, r3
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	00db      	lsls	r3, r3, #3
 8003cb0:	3332      	adds	r3, #50	; 0x32
 8003cb2:	4a08      	ldr	r2, [pc, #32]	; (8003cd4 <UART_SetConfig+0x2d4>)
 8003cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb8:	095b      	lsrs	r3, r3, #5
 8003cba:	f003 0207 	and.w	r2, r3, #7
 8003cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4422      	add	r2, r4
 8003cc6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003cc8:	e105      	b.n	8003ed6 <UART_SetConfig+0x4d6>
 8003cca:	bf00      	nop
 8003ccc:	40011000 	.word	0x40011000
 8003cd0:	40011400 	.word	0x40011400
 8003cd4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003ce2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003ce6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003cea:	4642      	mov	r2, r8
 8003cec:	464b      	mov	r3, r9
 8003cee:	1891      	adds	r1, r2, r2
 8003cf0:	6239      	str	r1, [r7, #32]
 8003cf2:	415b      	adcs	r3, r3
 8003cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8003cf6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003cfa:	4641      	mov	r1, r8
 8003cfc:	1854      	adds	r4, r2, r1
 8003cfe:	4649      	mov	r1, r9
 8003d00:	eb43 0501 	adc.w	r5, r3, r1
 8003d04:	f04f 0200 	mov.w	r2, #0
 8003d08:	f04f 0300 	mov.w	r3, #0
 8003d0c:	00eb      	lsls	r3, r5, #3
 8003d0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d12:	00e2      	lsls	r2, r4, #3
 8003d14:	4614      	mov	r4, r2
 8003d16:	461d      	mov	r5, r3
 8003d18:	4643      	mov	r3, r8
 8003d1a:	18e3      	adds	r3, r4, r3
 8003d1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003d20:	464b      	mov	r3, r9
 8003d22:	eb45 0303 	adc.w	r3, r5, r3
 8003d26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d36:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d3a:	f04f 0200 	mov.w	r2, #0
 8003d3e:	f04f 0300 	mov.w	r3, #0
 8003d42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003d46:	4629      	mov	r1, r5
 8003d48:	008b      	lsls	r3, r1, #2
 8003d4a:	4621      	mov	r1, r4
 8003d4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d50:	4621      	mov	r1, r4
 8003d52:	008a      	lsls	r2, r1, #2
 8003d54:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003d58:	f7fc fda0 	bl	800089c <__aeabi_uldivmod>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	460b      	mov	r3, r1
 8003d60:	4b60      	ldr	r3, [pc, #384]	; (8003ee4 <UART_SetConfig+0x4e4>)
 8003d62:	fba3 2302 	umull	r2, r3, r3, r2
 8003d66:	095b      	lsrs	r3, r3, #5
 8003d68:	011c      	lsls	r4, r3, #4
 8003d6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d74:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003d78:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003d7c:	4642      	mov	r2, r8
 8003d7e:	464b      	mov	r3, r9
 8003d80:	1891      	adds	r1, r2, r2
 8003d82:	61b9      	str	r1, [r7, #24]
 8003d84:	415b      	adcs	r3, r3
 8003d86:	61fb      	str	r3, [r7, #28]
 8003d88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d8c:	4641      	mov	r1, r8
 8003d8e:	1851      	adds	r1, r2, r1
 8003d90:	6139      	str	r1, [r7, #16]
 8003d92:	4649      	mov	r1, r9
 8003d94:	414b      	adcs	r3, r1
 8003d96:	617b      	str	r3, [r7, #20]
 8003d98:	f04f 0200 	mov.w	r2, #0
 8003d9c:	f04f 0300 	mov.w	r3, #0
 8003da0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003da4:	4659      	mov	r1, fp
 8003da6:	00cb      	lsls	r3, r1, #3
 8003da8:	4651      	mov	r1, sl
 8003daa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dae:	4651      	mov	r1, sl
 8003db0:	00ca      	lsls	r2, r1, #3
 8003db2:	4610      	mov	r0, r2
 8003db4:	4619      	mov	r1, r3
 8003db6:	4603      	mov	r3, r0
 8003db8:	4642      	mov	r2, r8
 8003dba:	189b      	adds	r3, r3, r2
 8003dbc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003dc0:	464b      	mov	r3, r9
 8003dc2:	460a      	mov	r2, r1
 8003dc4:	eb42 0303 	adc.w	r3, r2, r3
 8003dc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003dd6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003dd8:	f04f 0200 	mov.w	r2, #0
 8003ddc:	f04f 0300 	mov.w	r3, #0
 8003de0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003de4:	4649      	mov	r1, r9
 8003de6:	008b      	lsls	r3, r1, #2
 8003de8:	4641      	mov	r1, r8
 8003dea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dee:	4641      	mov	r1, r8
 8003df0:	008a      	lsls	r2, r1, #2
 8003df2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003df6:	f7fc fd51 	bl	800089c <__aeabi_uldivmod>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	4b39      	ldr	r3, [pc, #228]	; (8003ee4 <UART_SetConfig+0x4e4>)
 8003e00:	fba3 1302 	umull	r1, r3, r3, r2
 8003e04:	095b      	lsrs	r3, r3, #5
 8003e06:	2164      	movs	r1, #100	; 0x64
 8003e08:	fb01 f303 	mul.w	r3, r1, r3
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	011b      	lsls	r3, r3, #4
 8003e10:	3332      	adds	r3, #50	; 0x32
 8003e12:	4a34      	ldr	r2, [pc, #208]	; (8003ee4 <UART_SetConfig+0x4e4>)
 8003e14:	fba2 2303 	umull	r2, r3, r2, r3
 8003e18:	095b      	lsrs	r3, r3, #5
 8003e1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e1e:	441c      	add	r4, r3
 8003e20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e24:	2200      	movs	r2, #0
 8003e26:	673b      	str	r3, [r7, #112]	; 0x70
 8003e28:	677a      	str	r2, [r7, #116]	; 0x74
 8003e2a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003e2e:	4642      	mov	r2, r8
 8003e30:	464b      	mov	r3, r9
 8003e32:	1891      	adds	r1, r2, r2
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	415b      	adcs	r3, r3
 8003e38:	60fb      	str	r3, [r7, #12]
 8003e3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e3e:	4641      	mov	r1, r8
 8003e40:	1851      	adds	r1, r2, r1
 8003e42:	6039      	str	r1, [r7, #0]
 8003e44:	4649      	mov	r1, r9
 8003e46:	414b      	adcs	r3, r1
 8003e48:	607b      	str	r3, [r7, #4]
 8003e4a:	f04f 0200 	mov.w	r2, #0
 8003e4e:	f04f 0300 	mov.w	r3, #0
 8003e52:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e56:	4659      	mov	r1, fp
 8003e58:	00cb      	lsls	r3, r1, #3
 8003e5a:	4651      	mov	r1, sl
 8003e5c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e60:	4651      	mov	r1, sl
 8003e62:	00ca      	lsls	r2, r1, #3
 8003e64:	4610      	mov	r0, r2
 8003e66:	4619      	mov	r1, r3
 8003e68:	4603      	mov	r3, r0
 8003e6a:	4642      	mov	r2, r8
 8003e6c:	189b      	adds	r3, r3, r2
 8003e6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e70:	464b      	mov	r3, r9
 8003e72:	460a      	mov	r2, r1
 8003e74:	eb42 0303 	adc.w	r3, r2, r3
 8003e78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	663b      	str	r3, [r7, #96]	; 0x60
 8003e84:	667a      	str	r2, [r7, #100]	; 0x64
 8003e86:	f04f 0200 	mov.w	r2, #0
 8003e8a:	f04f 0300 	mov.w	r3, #0
 8003e8e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003e92:	4649      	mov	r1, r9
 8003e94:	008b      	lsls	r3, r1, #2
 8003e96:	4641      	mov	r1, r8
 8003e98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e9c:	4641      	mov	r1, r8
 8003e9e:	008a      	lsls	r2, r1, #2
 8003ea0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003ea4:	f7fc fcfa 	bl	800089c <__aeabi_uldivmod>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	460b      	mov	r3, r1
 8003eac:	4b0d      	ldr	r3, [pc, #52]	; (8003ee4 <UART_SetConfig+0x4e4>)
 8003eae:	fba3 1302 	umull	r1, r3, r3, r2
 8003eb2:	095b      	lsrs	r3, r3, #5
 8003eb4:	2164      	movs	r1, #100	; 0x64
 8003eb6:	fb01 f303 	mul.w	r3, r1, r3
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	011b      	lsls	r3, r3, #4
 8003ebe:	3332      	adds	r3, #50	; 0x32
 8003ec0:	4a08      	ldr	r2, [pc, #32]	; (8003ee4 <UART_SetConfig+0x4e4>)
 8003ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec6:	095b      	lsrs	r3, r3, #5
 8003ec8:	f003 020f 	and.w	r2, r3, #15
 8003ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4422      	add	r2, r4
 8003ed4:	609a      	str	r2, [r3, #8]
}
 8003ed6:	bf00      	nop
 8003ed8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003edc:	46bd      	mov	sp, r7
 8003ede:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ee2:	bf00      	nop
 8003ee4:	51eb851f 	.word	0x51eb851f

08003ee8 <__errno>:
 8003ee8:	4b01      	ldr	r3, [pc, #4]	; (8003ef0 <__errno+0x8>)
 8003eea:	6818      	ldr	r0, [r3, #0]
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	20000028 	.word	0x20000028

08003ef4 <__libc_init_array>:
 8003ef4:	b570      	push	{r4, r5, r6, lr}
 8003ef6:	4d0d      	ldr	r5, [pc, #52]	; (8003f2c <__libc_init_array+0x38>)
 8003ef8:	4c0d      	ldr	r4, [pc, #52]	; (8003f30 <__libc_init_array+0x3c>)
 8003efa:	1b64      	subs	r4, r4, r5
 8003efc:	10a4      	asrs	r4, r4, #2
 8003efe:	2600      	movs	r6, #0
 8003f00:	42a6      	cmp	r6, r4
 8003f02:	d109      	bne.n	8003f18 <__libc_init_array+0x24>
 8003f04:	4d0b      	ldr	r5, [pc, #44]	; (8003f34 <__libc_init_array+0x40>)
 8003f06:	4c0c      	ldr	r4, [pc, #48]	; (8003f38 <__libc_init_array+0x44>)
 8003f08:	f000 fc8e 	bl	8004828 <_init>
 8003f0c:	1b64      	subs	r4, r4, r5
 8003f0e:	10a4      	asrs	r4, r4, #2
 8003f10:	2600      	movs	r6, #0
 8003f12:	42a6      	cmp	r6, r4
 8003f14:	d105      	bne.n	8003f22 <__libc_init_array+0x2e>
 8003f16:	bd70      	pop	{r4, r5, r6, pc}
 8003f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f1c:	4798      	blx	r3
 8003f1e:	3601      	adds	r6, #1
 8003f20:	e7ee      	b.n	8003f00 <__libc_init_array+0xc>
 8003f22:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f26:	4798      	blx	r3
 8003f28:	3601      	adds	r6, #1
 8003f2a:	e7f2      	b.n	8003f12 <__libc_init_array+0x1e>
 8003f2c:	08004898 	.word	0x08004898
 8003f30:	08004898 	.word	0x08004898
 8003f34:	08004898 	.word	0x08004898
 8003f38:	0800489c 	.word	0x0800489c

08003f3c <memset>:
 8003f3c:	4402      	add	r2, r0
 8003f3e:	4603      	mov	r3, r0
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d100      	bne.n	8003f46 <memset+0xa>
 8003f44:	4770      	bx	lr
 8003f46:	f803 1b01 	strb.w	r1, [r3], #1
 8003f4a:	e7f9      	b.n	8003f40 <memset+0x4>

08003f4c <siprintf>:
 8003f4c:	b40e      	push	{r1, r2, r3}
 8003f4e:	b500      	push	{lr}
 8003f50:	b09c      	sub	sp, #112	; 0x70
 8003f52:	ab1d      	add	r3, sp, #116	; 0x74
 8003f54:	9002      	str	r0, [sp, #8]
 8003f56:	9006      	str	r0, [sp, #24]
 8003f58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f5c:	4809      	ldr	r0, [pc, #36]	; (8003f84 <siprintf+0x38>)
 8003f5e:	9107      	str	r1, [sp, #28]
 8003f60:	9104      	str	r1, [sp, #16]
 8003f62:	4909      	ldr	r1, [pc, #36]	; (8003f88 <siprintf+0x3c>)
 8003f64:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f68:	9105      	str	r1, [sp, #20]
 8003f6a:	6800      	ldr	r0, [r0, #0]
 8003f6c:	9301      	str	r3, [sp, #4]
 8003f6e:	a902      	add	r1, sp, #8
 8003f70:	f000 f868 	bl	8004044 <_svfiprintf_r>
 8003f74:	9b02      	ldr	r3, [sp, #8]
 8003f76:	2200      	movs	r2, #0
 8003f78:	701a      	strb	r2, [r3, #0]
 8003f7a:	b01c      	add	sp, #112	; 0x70
 8003f7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f80:	b003      	add	sp, #12
 8003f82:	4770      	bx	lr
 8003f84:	20000028 	.word	0x20000028
 8003f88:	ffff0208 	.word	0xffff0208

08003f8c <__ssputs_r>:
 8003f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f90:	688e      	ldr	r6, [r1, #8]
 8003f92:	429e      	cmp	r6, r3
 8003f94:	4682      	mov	sl, r0
 8003f96:	460c      	mov	r4, r1
 8003f98:	4690      	mov	r8, r2
 8003f9a:	461f      	mov	r7, r3
 8003f9c:	d838      	bhi.n	8004010 <__ssputs_r+0x84>
 8003f9e:	898a      	ldrh	r2, [r1, #12]
 8003fa0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003fa4:	d032      	beq.n	800400c <__ssputs_r+0x80>
 8003fa6:	6825      	ldr	r5, [r4, #0]
 8003fa8:	6909      	ldr	r1, [r1, #16]
 8003faa:	eba5 0901 	sub.w	r9, r5, r1
 8003fae:	6965      	ldr	r5, [r4, #20]
 8003fb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003fb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003fb8:	3301      	adds	r3, #1
 8003fba:	444b      	add	r3, r9
 8003fbc:	106d      	asrs	r5, r5, #1
 8003fbe:	429d      	cmp	r5, r3
 8003fc0:	bf38      	it	cc
 8003fc2:	461d      	movcc	r5, r3
 8003fc4:	0553      	lsls	r3, r2, #21
 8003fc6:	d531      	bpl.n	800402c <__ssputs_r+0xa0>
 8003fc8:	4629      	mov	r1, r5
 8003fca:	f000 fb63 	bl	8004694 <_malloc_r>
 8003fce:	4606      	mov	r6, r0
 8003fd0:	b950      	cbnz	r0, 8003fe8 <__ssputs_r+0x5c>
 8003fd2:	230c      	movs	r3, #12
 8003fd4:	f8ca 3000 	str.w	r3, [sl]
 8003fd8:	89a3      	ldrh	r3, [r4, #12]
 8003fda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fde:	81a3      	strh	r3, [r4, #12]
 8003fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fe8:	6921      	ldr	r1, [r4, #16]
 8003fea:	464a      	mov	r2, r9
 8003fec:	f000 fabe 	bl	800456c <memcpy>
 8003ff0:	89a3      	ldrh	r3, [r4, #12]
 8003ff2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ffa:	81a3      	strh	r3, [r4, #12]
 8003ffc:	6126      	str	r6, [r4, #16]
 8003ffe:	6165      	str	r5, [r4, #20]
 8004000:	444e      	add	r6, r9
 8004002:	eba5 0509 	sub.w	r5, r5, r9
 8004006:	6026      	str	r6, [r4, #0]
 8004008:	60a5      	str	r5, [r4, #8]
 800400a:	463e      	mov	r6, r7
 800400c:	42be      	cmp	r6, r7
 800400e:	d900      	bls.n	8004012 <__ssputs_r+0x86>
 8004010:	463e      	mov	r6, r7
 8004012:	6820      	ldr	r0, [r4, #0]
 8004014:	4632      	mov	r2, r6
 8004016:	4641      	mov	r1, r8
 8004018:	f000 fab6 	bl	8004588 <memmove>
 800401c:	68a3      	ldr	r3, [r4, #8]
 800401e:	1b9b      	subs	r3, r3, r6
 8004020:	60a3      	str	r3, [r4, #8]
 8004022:	6823      	ldr	r3, [r4, #0]
 8004024:	4433      	add	r3, r6
 8004026:	6023      	str	r3, [r4, #0]
 8004028:	2000      	movs	r0, #0
 800402a:	e7db      	b.n	8003fe4 <__ssputs_r+0x58>
 800402c:	462a      	mov	r2, r5
 800402e:	f000 fba5 	bl	800477c <_realloc_r>
 8004032:	4606      	mov	r6, r0
 8004034:	2800      	cmp	r0, #0
 8004036:	d1e1      	bne.n	8003ffc <__ssputs_r+0x70>
 8004038:	6921      	ldr	r1, [r4, #16]
 800403a:	4650      	mov	r0, sl
 800403c:	f000 fabe 	bl	80045bc <_free_r>
 8004040:	e7c7      	b.n	8003fd2 <__ssputs_r+0x46>
	...

08004044 <_svfiprintf_r>:
 8004044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004048:	4698      	mov	r8, r3
 800404a:	898b      	ldrh	r3, [r1, #12]
 800404c:	061b      	lsls	r3, r3, #24
 800404e:	b09d      	sub	sp, #116	; 0x74
 8004050:	4607      	mov	r7, r0
 8004052:	460d      	mov	r5, r1
 8004054:	4614      	mov	r4, r2
 8004056:	d50e      	bpl.n	8004076 <_svfiprintf_r+0x32>
 8004058:	690b      	ldr	r3, [r1, #16]
 800405a:	b963      	cbnz	r3, 8004076 <_svfiprintf_r+0x32>
 800405c:	2140      	movs	r1, #64	; 0x40
 800405e:	f000 fb19 	bl	8004694 <_malloc_r>
 8004062:	6028      	str	r0, [r5, #0]
 8004064:	6128      	str	r0, [r5, #16]
 8004066:	b920      	cbnz	r0, 8004072 <_svfiprintf_r+0x2e>
 8004068:	230c      	movs	r3, #12
 800406a:	603b      	str	r3, [r7, #0]
 800406c:	f04f 30ff 	mov.w	r0, #4294967295
 8004070:	e0d1      	b.n	8004216 <_svfiprintf_r+0x1d2>
 8004072:	2340      	movs	r3, #64	; 0x40
 8004074:	616b      	str	r3, [r5, #20]
 8004076:	2300      	movs	r3, #0
 8004078:	9309      	str	r3, [sp, #36]	; 0x24
 800407a:	2320      	movs	r3, #32
 800407c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004080:	f8cd 800c 	str.w	r8, [sp, #12]
 8004084:	2330      	movs	r3, #48	; 0x30
 8004086:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004230 <_svfiprintf_r+0x1ec>
 800408a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800408e:	f04f 0901 	mov.w	r9, #1
 8004092:	4623      	mov	r3, r4
 8004094:	469a      	mov	sl, r3
 8004096:	f813 2b01 	ldrb.w	r2, [r3], #1
 800409a:	b10a      	cbz	r2, 80040a0 <_svfiprintf_r+0x5c>
 800409c:	2a25      	cmp	r2, #37	; 0x25
 800409e:	d1f9      	bne.n	8004094 <_svfiprintf_r+0x50>
 80040a0:	ebba 0b04 	subs.w	fp, sl, r4
 80040a4:	d00b      	beq.n	80040be <_svfiprintf_r+0x7a>
 80040a6:	465b      	mov	r3, fp
 80040a8:	4622      	mov	r2, r4
 80040aa:	4629      	mov	r1, r5
 80040ac:	4638      	mov	r0, r7
 80040ae:	f7ff ff6d 	bl	8003f8c <__ssputs_r>
 80040b2:	3001      	adds	r0, #1
 80040b4:	f000 80aa 	beq.w	800420c <_svfiprintf_r+0x1c8>
 80040b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80040ba:	445a      	add	r2, fp
 80040bc:	9209      	str	r2, [sp, #36]	; 0x24
 80040be:	f89a 3000 	ldrb.w	r3, [sl]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f000 80a2 	beq.w	800420c <_svfiprintf_r+0x1c8>
 80040c8:	2300      	movs	r3, #0
 80040ca:	f04f 32ff 	mov.w	r2, #4294967295
 80040ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040d2:	f10a 0a01 	add.w	sl, sl, #1
 80040d6:	9304      	str	r3, [sp, #16]
 80040d8:	9307      	str	r3, [sp, #28]
 80040da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80040de:	931a      	str	r3, [sp, #104]	; 0x68
 80040e0:	4654      	mov	r4, sl
 80040e2:	2205      	movs	r2, #5
 80040e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040e8:	4851      	ldr	r0, [pc, #324]	; (8004230 <_svfiprintf_r+0x1ec>)
 80040ea:	f7fc f881 	bl	80001f0 <memchr>
 80040ee:	9a04      	ldr	r2, [sp, #16]
 80040f0:	b9d8      	cbnz	r0, 800412a <_svfiprintf_r+0xe6>
 80040f2:	06d0      	lsls	r0, r2, #27
 80040f4:	bf44      	itt	mi
 80040f6:	2320      	movmi	r3, #32
 80040f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040fc:	0711      	lsls	r1, r2, #28
 80040fe:	bf44      	itt	mi
 8004100:	232b      	movmi	r3, #43	; 0x2b
 8004102:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004106:	f89a 3000 	ldrb.w	r3, [sl]
 800410a:	2b2a      	cmp	r3, #42	; 0x2a
 800410c:	d015      	beq.n	800413a <_svfiprintf_r+0xf6>
 800410e:	9a07      	ldr	r2, [sp, #28]
 8004110:	4654      	mov	r4, sl
 8004112:	2000      	movs	r0, #0
 8004114:	f04f 0c0a 	mov.w	ip, #10
 8004118:	4621      	mov	r1, r4
 800411a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800411e:	3b30      	subs	r3, #48	; 0x30
 8004120:	2b09      	cmp	r3, #9
 8004122:	d94e      	bls.n	80041c2 <_svfiprintf_r+0x17e>
 8004124:	b1b0      	cbz	r0, 8004154 <_svfiprintf_r+0x110>
 8004126:	9207      	str	r2, [sp, #28]
 8004128:	e014      	b.n	8004154 <_svfiprintf_r+0x110>
 800412a:	eba0 0308 	sub.w	r3, r0, r8
 800412e:	fa09 f303 	lsl.w	r3, r9, r3
 8004132:	4313      	orrs	r3, r2
 8004134:	9304      	str	r3, [sp, #16]
 8004136:	46a2      	mov	sl, r4
 8004138:	e7d2      	b.n	80040e0 <_svfiprintf_r+0x9c>
 800413a:	9b03      	ldr	r3, [sp, #12]
 800413c:	1d19      	adds	r1, r3, #4
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	9103      	str	r1, [sp, #12]
 8004142:	2b00      	cmp	r3, #0
 8004144:	bfbb      	ittet	lt
 8004146:	425b      	neglt	r3, r3
 8004148:	f042 0202 	orrlt.w	r2, r2, #2
 800414c:	9307      	strge	r3, [sp, #28]
 800414e:	9307      	strlt	r3, [sp, #28]
 8004150:	bfb8      	it	lt
 8004152:	9204      	strlt	r2, [sp, #16]
 8004154:	7823      	ldrb	r3, [r4, #0]
 8004156:	2b2e      	cmp	r3, #46	; 0x2e
 8004158:	d10c      	bne.n	8004174 <_svfiprintf_r+0x130>
 800415a:	7863      	ldrb	r3, [r4, #1]
 800415c:	2b2a      	cmp	r3, #42	; 0x2a
 800415e:	d135      	bne.n	80041cc <_svfiprintf_r+0x188>
 8004160:	9b03      	ldr	r3, [sp, #12]
 8004162:	1d1a      	adds	r2, r3, #4
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	9203      	str	r2, [sp, #12]
 8004168:	2b00      	cmp	r3, #0
 800416a:	bfb8      	it	lt
 800416c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004170:	3402      	adds	r4, #2
 8004172:	9305      	str	r3, [sp, #20]
 8004174:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004240 <_svfiprintf_r+0x1fc>
 8004178:	7821      	ldrb	r1, [r4, #0]
 800417a:	2203      	movs	r2, #3
 800417c:	4650      	mov	r0, sl
 800417e:	f7fc f837 	bl	80001f0 <memchr>
 8004182:	b140      	cbz	r0, 8004196 <_svfiprintf_r+0x152>
 8004184:	2340      	movs	r3, #64	; 0x40
 8004186:	eba0 000a 	sub.w	r0, r0, sl
 800418a:	fa03 f000 	lsl.w	r0, r3, r0
 800418e:	9b04      	ldr	r3, [sp, #16]
 8004190:	4303      	orrs	r3, r0
 8004192:	3401      	adds	r4, #1
 8004194:	9304      	str	r3, [sp, #16]
 8004196:	f814 1b01 	ldrb.w	r1, [r4], #1
 800419a:	4826      	ldr	r0, [pc, #152]	; (8004234 <_svfiprintf_r+0x1f0>)
 800419c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80041a0:	2206      	movs	r2, #6
 80041a2:	f7fc f825 	bl	80001f0 <memchr>
 80041a6:	2800      	cmp	r0, #0
 80041a8:	d038      	beq.n	800421c <_svfiprintf_r+0x1d8>
 80041aa:	4b23      	ldr	r3, [pc, #140]	; (8004238 <_svfiprintf_r+0x1f4>)
 80041ac:	bb1b      	cbnz	r3, 80041f6 <_svfiprintf_r+0x1b2>
 80041ae:	9b03      	ldr	r3, [sp, #12]
 80041b0:	3307      	adds	r3, #7
 80041b2:	f023 0307 	bic.w	r3, r3, #7
 80041b6:	3308      	adds	r3, #8
 80041b8:	9303      	str	r3, [sp, #12]
 80041ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041bc:	4433      	add	r3, r6
 80041be:	9309      	str	r3, [sp, #36]	; 0x24
 80041c0:	e767      	b.n	8004092 <_svfiprintf_r+0x4e>
 80041c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80041c6:	460c      	mov	r4, r1
 80041c8:	2001      	movs	r0, #1
 80041ca:	e7a5      	b.n	8004118 <_svfiprintf_r+0xd4>
 80041cc:	2300      	movs	r3, #0
 80041ce:	3401      	adds	r4, #1
 80041d0:	9305      	str	r3, [sp, #20]
 80041d2:	4619      	mov	r1, r3
 80041d4:	f04f 0c0a 	mov.w	ip, #10
 80041d8:	4620      	mov	r0, r4
 80041da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041de:	3a30      	subs	r2, #48	; 0x30
 80041e0:	2a09      	cmp	r2, #9
 80041e2:	d903      	bls.n	80041ec <_svfiprintf_r+0x1a8>
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d0c5      	beq.n	8004174 <_svfiprintf_r+0x130>
 80041e8:	9105      	str	r1, [sp, #20]
 80041ea:	e7c3      	b.n	8004174 <_svfiprintf_r+0x130>
 80041ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80041f0:	4604      	mov	r4, r0
 80041f2:	2301      	movs	r3, #1
 80041f4:	e7f0      	b.n	80041d8 <_svfiprintf_r+0x194>
 80041f6:	ab03      	add	r3, sp, #12
 80041f8:	9300      	str	r3, [sp, #0]
 80041fa:	462a      	mov	r2, r5
 80041fc:	4b0f      	ldr	r3, [pc, #60]	; (800423c <_svfiprintf_r+0x1f8>)
 80041fe:	a904      	add	r1, sp, #16
 8004200:	4638      	mov	r0, r7
 8004202:	f3af 8000 	nop.w
 8004206:	1c42      	adds	r2, r0, #1
 8004208:	4606      	mov	r6, r0
 800420a:	d1d6      	bne.n	80041ba <_svfiprintf_r+0x176>
 800420c:	89ab      	ldrh	r3, [r5, #12]
 800420e:	065b      	lsls	r3, r3, #25
 8004210:	f53f af2c 	bmi.w	800406c <_svfiprintf_r+0x28>
 8004214:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004216:	b01d      	add	sp, #116	; 0x74
 8004218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800421c:	ab03      	add	r3, sp, #12
 800421e:	9300      	str	r3, [sp, #0]
 8004220:	462a      	mov	r2, r5
 8004222:	4b06      	ldr	r3, [pc, #24]	; (800423c <_svfiprintf_r+0x1f8>)
 8004224:	a904      	add	r1, sp, #16
 8004226:	4638      	mov	r0, r7
 8004228:	f000 f87a 	bl	8004320 <_printf_i>
 800422c:	e7eb      	b.n	8004206 <_svfiprintf_r+0x1c2>
 800422e:	bf00      	nop
 8004230:	0800485c 	.word	0x0800485c
 8004234:	08004866 	.word	0x08004866
 8004238:	00000000 	.word	0x00000000
 800423c:	08003f8d 	.word	0x08003f8d
 8004240:	08004862 	.word	0x08004862

08004244 <_printf_common>:
 8004244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004248:	4616      	mov	r6, r2
 800424a:	4699      	mov	r9, r3
 800424c:	688a      	ldr	r2, [r1, #8]
 800424e:	690b      	ldr	r3, [r1, #16]
 8004250:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004254:	4293      	cmp	r3, r2
 8004256:	bfb8      	it	lt
 8004258:	4613      	movlt	r3, r2
 800425a:	6033      	str	r3, [r6, #0]
 800425c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004260:	4607      	mov	r7, r0
 8004262:	460c      	mov	r4, r1
 8004264:	b10a      	cbz	r2, 800426a <_printf_common+0x26>
 8004266:	3301      	adds	r3, #1
 8004268:	6033      	str	r3, [r6, #0]
 800426a:	6823      	ldr	r3, [r4, #0]
 800426c:	0699      	lsls	r1, r3, #26
 800426e:	bf42      	ittt	mi
 8004270:	6833      	ldrmi	r3, [r6, #0]
 8004272:	3302      	addmi	r3, #2
 8004274:	6033      	strmi	r3, [r6, #0]
 8004276:	6825      	ldr	r5, [r4, #0]
 8004278:	f015 0506 	ands.w	r5, r5, #6
 800427c:	d106      	bne.n	800428c <_printf_common+0x48>
 800427e:	f104 0a19 	add.w	sl, r4, #25
 8004282:	68e3      	ldr	r3, [r4, #12]
 8004284:	6832      	ldr	r2, [r6, #0]
 8004286:	1a9b      	subs	r3, r3, r2
 8004288:	42ab      	cmp	r3, r5
 800428a:	dc26      	bgt.n	80042da <_printf_common+0x96>
 800428c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004290:	1e13      	subs	r3, r2, #0
 8004292:	6822      	ldr	r2, [r4, #0]
 8004294:	bf18      	it	ne
 8004296:	2301      	movne	r3, #1
 8004298:	0692      	lsls	r2, r2, #26
 800429a:	d42b      	bmi.n	80042f4 <_printf_common+0xb0>
 800429c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042a0:	4649      	mov	r1, r9
 80042a2:	4638      	mov	r0, r7
 80042a4:	47c0      	blx	r8
 80042a6:	3001      	adds	r0, #1
 80042a8:	d01e      	beq.n	80042e8 <_printf_common+0xa4>
 80042aa:	6823      	ldr	r3, [r4, #0]
 80042ac:	68e5      	ldr	r5, [r4, #12]
 80042ae:	6832      	ldr	r2, [r6, #0]
 80042b0:	f003 0306 	and.w	r3, r3, #6
 80042b4:	2b04      	cmp	r3, #4
 80042b6:	bf08      	it	eq
 80042b8:	1aad      	subeq	r5, r5, r2
 80042ba:	68a3      	ldr	r3, [r4, #8]
 80042bc:	6922      	ldr	r2, [r4, #16]
 80042be:	bf0c      	ite	eq
 80042c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042c4:	2500      	movne	r5, #0
 80042c6:	4293      	cmp	r3, r2
 80042c8:	bfc4      	itt	gt
 80042ca:	1a9b      	subgt	r3, r3, r2
 80042cc:	18ed      	addgt	r5, r5, r3
 80042ce:	2600      	movs	r6, #0
 80042d0:	341a      	adds	r4, #26
 80042d2:	42b5      	cmp	r5, r6
 80042d4:	d11a      	bne.n	800430c <_printf_common+0xc8>
 80042d6:	2000      	movs	r0, #0
 80042d8:	e008      	b.n	80042ec <_printf_common+0xa8>
 80042da:	2301      	movs	r3, #1
 80042dc:	4652      	mov	r2, sl
 80042de:	4649      	mov	r1, r9
 80042e0:	4638      	mov	r0, r7
 80042e2:	47c0      	blx	r8
 80042e4:	3001      	adds	r0, #1
 80042e6:	d103      	bne.n	80042f0 <_printf_common+0xac>
 80042e8:	f04f 30ff 	mov.w	r0, #4294967295
 80042ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042f0:	3501      	adds	r5, #1
 80042f2:	e7c6      	b.n	8004282 <_printf_common+0x3e>
 80042f4:	18e1      	adds	r1, r4, r3
 80042f6:	1c5a      	adds	r2, r3, #1
 80042f8:	2030      	movs	r0, #48	; 0x30
 80042fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042fe:	4422      	add	r2, r4
 8004300:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004304:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004308:	3302      	adds	r3, #2
 800430a:	e7c7      	b.n	800429c <_printf_common+0x58>
 800430c:	2301      	movs	r3, #1
 800430e:	4622      	mov	r2, r4
 8004310:	4649      	mov	r1, r9
 8004312:	4638      	mov	r0, r7
 8004314:	47c0      	blx	r8
 8004316:	3001      	adds	r0, #1
 8004318:	d0e6      	beq.n	80042e8 <_printf_common+0xa4>
 800431a:	3601      	adds	r6, #1
 800431c:	e7d9      	b.n	80042d2 <_printf_common+0x8e>
	...

08004320 <_printf_i>:
 8004320:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004324:	7e0f      	ldrb	r7, [r1, #24]
 8004326:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004328:	2f78      	cmp	r7, #120	; 0x78
 800432a:	4691      	mov	r9, r2
 800432c:	4680      	mov	r8, r0
 800432e:	460c      	mov	r4, r1
 8004330:	469a      	mov	sl, r3
 8004332:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004336:	d807      	bhi.n	8004348 <_printf_i+0x28>
 8004338:	2f62      	cmp	r7, #98	; 0x62
 800433a:	d80a      	bhi.n	8004352 <_printf_i+0x32>
 800433c:	2f00      	cmp	r7, #0
 800433e:	f000 80d8 	beq.w	80044f2 <_printf_i+0x1d2>
 8004342:	2f58      	cmp	r7, #88	; 0x58
 8004344:	f000 80a3 	beq.w	800448e <_printf_i+0x16e>
 8004348:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800434c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004350:	e03a      	b.n	80043c8 <_printf_i+0xa8>
 8004352:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004356:	2b15      	cmp	r3, #21
 8004358:	d8f6      	bhi.n	8004348 <_printf_i+0x28>
 800435a:	a101      	add	r1, pc, #4	; (adr r1, 8004360 <_printf_i+0x40>)
 800435c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004360:	080043b9 	.word	0x080043b9
 8004364:	080043cd 	.word	0x080043cd
 8004368:	08004349 	.word	0x08004349
 800436c:	08004349 	.word	0x08004349
 8004370:	08004349 	.word	0x08004349
 8004374:	08004349 	.word	0x08004349
 8004378:	080043cd 	.word	0x080043cd
 800437c:	08004349 	.word	0x08004349
 8004380:	08004349 	.word	0x08004349
 8004384:	08004349 	.word	0x08004349
 8004388:	08004349 	.word	0x08004349
 800438c:	080044d9 	.word	0x080044d9
 8004390:	080043fd 	.word	0x080043fd
 8004394:	080044bb 	.word	0x080044bb
 8004398:	08004349 	.word	0x08004349
 800439c:	08004349 	.word	0x08004349
 80043a0:	080044fb 	.word	0x080044fb
 80043a4:	08004349 	.word	0x08004349
 80043a8:	080043fd 	.word	0x080043fd
 80043ac:	08004349 	.word	0x08004349
 80043b0:	08004349 	.word	0x08004349
 80043b4:	080044c3 	.word	0x080044c3
 80043b8:	682b      	ldr	r3, [r5, #0]
 80043ba:	1d1a      	adds	r2, r3, #4
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	602a      	str	r2, [r5, #0]
 80043c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043c8:	2301      	movs	r3, #1
 80043ca:	e0a3      	b.n	8004514 <_printf_i+0x1f4>
 80043cc:	6820      	ldr	r0, [r4, #0]
 80043ce:	6829      	ldr	r1, [r5, #0]
 80043d0:	0606      	lsls	r6, r0, #24
 80043d2:	f101 0304 	add.w	r3, r1, #4
 80043d6:	d50a      	bpl.n	80043ee <_printf_i+0xce>
 80043d8:	680e      	ldr	r6, [r1, #0]
 80043da:	602b      	str	r3, [r5, #0]
 80043dc:	2e00      	cmp	r6, #0
 80043de:	da03      	bge.n	80043e8 <_printf_i+0xc8>
 80043e0:	232d      	movs	r3, #45	; 0x2d
 80043e2:	4276      	negs	r6, r6
 80043e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043e8:	485e      	ldr	r0, [pc, #376]	; (8004564 <_printf_i+0x244>)
 80043ea:	230a      	movs	r3, #10
 80043ec:	e019      	b.n	8004422 <_printf_i+0x102>
 80043ee:	680e      	ldr	r6, [r1, #0]
 80043f0:	602b      	str	r3, [r5, #0]
 80043f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80043f6:	bf18      	it	ne
 80043f8:	b236      	sxthne	r6, r6
 80043fa:	e7ef      	b.n	80043dc <_printf_i+0xbc>
 80043fc:	682b      	ldr	r3, [r5, #0]
 80043fe:	6820      	ldr	r0, [r4, #0]
 8004400:	1d19      	adds	r1, r3, #4
 8004402:	6029      	str	r1, [r5, #0]
 8004404:	0601      	lsls	r1, r0, #24
 8004406:	d501      	bpl.n	800440c <_printf_i+0xec>
 8004408:	681e      	ldr	r6, [r3, #0]
 800440a:	e002      	b.n	8004412 <_printf_i+0xf2>
 800440c:	0646      	lsls	r6, r0, #25
 800440e:	d5fb      	bpl.n	8004408 <_printf_i+0xe8>
 8004410:	881e      	ldrh	r6, [r3, #0]
 8004412:	4854      	ldr	r0, [pc, #336]	; (8004564 <_printf_i+0x244>)
 8004414:	2f6f      	cmp	r7, #111	; 0x6f
 8004416:	bf0c      	ite	eq
 8004418:	2308      	moveq	r3, #8
 800441a:	230a      	movne	r3, #10
 800441c:	2100      	movs	r1, #0
 800441e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004422:	6865      	ldr	r5, [r4, #4]
 8004424:	60a5      	str	r5, [r4, #8]
 8004426:	2d00      	cmp	r5, #0
 8004428:	bfa2      	ittt	ge
 800442a:	6821      	ldrge	r1, [r4, #0]
 800442c:	f021 0104 	bicge.w	r1, r1, #4
 8004430:	6021      	strge	r1, [r4, #0]
 8004432:	b90e      	cbnz	r6, 8004438 <_printf_i+0x118>
 8004434:	2d00      	cmp	r5, #0
 8004436:	d04d      	beq.n	80044d4 <_printf_i+0x1b4>
 8004438:	4615      	mov	r5, r2
 800443a:	fbb6 f1f3 	udiv	r1, r6, r3
 800443e:	fb03 6711 	mls	r7, r3, r1, r6
 8004442:	5dc7      	ldrb	r7, [r0, r7]
 8004444:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004448:	4637      	mov	r7, r6
 800444a:	42bb      	cmp	r3, r7
 800444c:	460e      	mov	r6, r1
 800444e:	d9f4      	bls.n	800443a <_printf_i+0x11a>
 8004450:	2b08      	cmp	r3, #8
 8004452:	d10b      	bne.n	800446c <_printf_i+0x14c>
 8004454:	6823      	ldr	r3, [r4, #0]
 8004456:	07de      	lsls	r6, r3, #31
 8004458:	d508      	bpl.n	800446c <_printf_i+0x14c>
 800445a:	6923      	ldr	r3, [r4, #16]
 800445c:	6861      	ldr	r1, [r4, #4]
 800445e:	4299      	cmp	r1, r3
 8004460:	bfde      	ittt	le
 8004462:	2330      	movle	r3, #48	; 0x30
 8004464:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004468:	f105 35ff 	addle.w	r5, r5, #4294967295
 800446c:	1b52      	subs	r2, r2, r5
 800446e:	6122      	str	r2, [r4, #16]
 8004470:	f8cd a000 	str.w	sl, [sp]
 8004474:	464b      	mov	r3, r9
 8004476:	aa03      	add	r2, sp, #12
 8004478:	4621      	mov	r1, r4
 800447a:	4640      	mov	r0, r8
 800447c:	f7ff fee2 	bl	8004244 <_printf_common>
 8004480:	3001      	adds	r0, #1
 8004482:	d14c      	bne.n	800451e <_printf_i+0x1fe>
 8004484:	f04f 30ff 	mov.w	r0, #4294967295
 8004488:	b004      	add	sp, #16
 800448a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800448e:	4835      	ldr	r0, [pc, #212]	; (8004564 <_printf_i+0x244>)
 8004490:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004494:	6829      	ldr	r1, [r5, #0]
 8004496:	6823      	ldr	r3, [r4, #0]
 8004498:	f851 6b04 	ldr.w	r6, [r1], #4
 800449c:	6029      	str	r1, [r5, #0]
 800449e:	061d      	lsls	r5, r3, #24
 80044a0:	d514      	bpl.n	80044cc <_printf_i+0x1ac>
 80044a2:	07df      	lsls	r7, r3, #31
 80044a4:	bf44      	itt	mi
 80044a6:	f043 0320 	orrmi.w	r3, r3, #32
 80044aa:	6023      	strmi	r3, [r4, #0]
 80044ac:	b91e      	cbnz	r6, 80044b6 <_printf_i+0x196>
 80044ae:	6823      	ldr	r3, [r4, #0]
 80044b0:	f023 0320 	bic.w	r3, r3, #32
 80044b4:	6023      	str	r3, [r4, #0]
 80044b6:	2310      	movs	r3, #16
 80044b8:	e7b0      	b.n	800441c <_printf_i+0xfc>
 80044ba:	6823      	ldr	r3, [r4, #0]
 80044bc:	f043 0320 	orr.w	r3, r3, #32
 80044c0:	6023      	str	r3, [r4, #0]
 80044c2:	2378      	movs	r3, #120	; 0x78
 80044c4:	4828      	ldr	r0, [pc, #160]	; (8004568 <_printf_i+0x248>)
 80044c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80044ca:	e7e3      	b.n	8004494 <_printf_i+0x174>
 80044cc:	0659      	lsls	r1, r3, #25
 80044ce:	bf48      	it	mi
 80044d0:	b2b6      	uxthmi	r6, r6
 80044d2:	e7e6      	b.n	80044a2 <_printf_i+0x182>
 80044d4:	4615      	mov	r5, r2
 80044d6:	e7bb      	b.n	8004450 <_printf_i+0x130>
 80044d8:	682b      	ldr	r3, [r5, #0]
 80044da:	6826      	ldr	r6, [r4, #0]
 80044dc:	6961      	ldr	r1, [r4, #20]
 80044de:	1d18      	adds	r0, r3, #4
 80044e0:	6028      	str	r0, [r5, #0]
 80044e2:	0635      	lsls	r5, r6, #24
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	d501      	bpl.n	80044ec <_printf_i+0x1cc>
 80044e8:	6019      	str	r1, [r3, #0]
 80044ea:	e002      	b.n	80044f2 <_printf_i+0x1d2>
 80044ec:	0670      	lsls	r0, r6, #25
 80044ee:	d5fb      	bpl.n	80044e8 <_printf_i+0x1c8>
 80044f0:	8019      	strh	r1, [r3, #0]
 80044f2:	2300      	movs	r3, #0
 80044f4:	6123      	str	r3, [r4, #16]
 80044f6:	4615      	mov	r5, r2
 80044f8:	e7ba      	b.n	8004470 <_printf_i+0x150>
 80044fa:	682b      	ldr	r3, [r5, #0]
 80044fc:	1d1a      	adds	r2, r3, #4
 80044fe:	602a      	str	r2, [r5, #0]
 8004500:	681d      	ldr	r5, [r3, #0]
 8004502:	6862      	ldr	r2, [r4, #4]
 8004504:	2100      	movs	r1, #0
 8004506:	4628      	mov	r0, r5
 8004508:	f7fb fe72 	bl	80001f0 <memchr>
 800450c:	b108      	cbz	r0, 8004512 <_printf_i+0x1f2>
 800450e:	1b40      	subs	r0, r0, r5
 8004510:	6060      	str	r0, [r4, #4]
 8004512:	6863      	ldr	r3, [r4, #4]
 8004514:	6123      	str	r3, [r4, #16]
 8004516:	2300      	movs	r3, #0
 8004518:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800451c:	e7a8      	b.n	8004470 <_printf_i+0x150>
 800451e:	6923      	ldr	r3, [r4, #16]
 8004520:	462a      	mov	r2, r5
 8004522:	4649      	mov	r1, r9
 8004524:	4640      	mov	r0, r8
 8004526:	47d0      	blx	sl
 8004528:	3001      	adds	r0, #1
 800452a:	d0ab      	beq.n	8004484 <_printf_i+0x164>
 800452c:	6823      	ldr	r3, [r4, #0]
 800452e:	079b      	lsls	r3, r3, #30
 8004530:	d413      	bmi.n	800455a <_printf_i+0x23a>
 8004532:	68e0      	ldr	r0, [r4, #12]
 8004534:	9b03      	ldr	r3, [sp, #12]
 8004536:	4298      	cmp	r0, r3
 8004538:	bfb8      	it	lt
 800453a:	4618      	movlt	r0, r3
 800453c:	e7a4      	b.n	8004488 <_printf_i+0x168>
 800453e:	2301      	movs	r3, #1
 8004540:	4632      	mov	r2, r6
 8004542:	4649      	mov	r1, r9
 8004544:	4640      	mov	r0, r8
 8004546:	47d0      	blx	sl
 8004548:	3001      	adds	r0, #1
 800454a:	d09b      	beq.n	8004484 <_printf_i+0x164>
 800454c:	3501      	adds	r5, #1
 800454e:	68e3      	ldr	r3, [r4, #12]
 8004550:	9903      	ldr	r1, [sp, #12]
 8004552:	1a5b      	subs	r3, r3, r1
 8004554:	42ab      	cmp	r3, r5
 8004556:	dcf2      	bgt.n	800453e <_printf_i+0x21e>
 8004558:	e7eb      	b.n	8004532 <_printf_i+0x212>
 800455a:	2500      	movs	r5, #0
 800455c:	f104 0619 	add.w	r6, r4, #25
 8004560:	e7f5      	b.n	800454e <_printf_i+0x22e>
 8004562:	bf00      	nop
 8004564:	0800486d 	.word	0x0800486d
 8004568:	0800487e 	.word	0x0800487e

0800456c <memcpy>:
 800456c:	440a      	add	r2, r1
 800456e:	4291      	cmp	r1, r2
 8004570:	f100 33ff 	add.w	r3, r0, #4294967295
 8004574:	d100      	bne.n	8004578 <memcpy+0xc>
 8004576:	4770      	bx	lr
 8004578:	b510      	push	{r4, lr}
 800457a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800457e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004582:	4291      	cmp	r1, r2
 8004584:	d1f9      	bne.n	800457a <memcpy+0xe>
 8004586:	bd10      	pop	{r4, pc}

08004588 <memmove>:
 8004588:	4288      	cmp	r0, r1
 800458a:	b510      	push	{r4, lr}
 800458c:	eb01 0402 	add.w	r4, r1, r2
 8004590:	d902      	bls.n	8004598 <memmove+0x10>
 8004592:	4284      	cmp	r4, r0
 8004594:	4623      	mov	r3, r4
 8004596:	d807      	bhi.n	80045a8 <memmove+0x20>
 8004598:	1e43      	subs	r3, r0, #1
 800459a:	42a1      	cmp	r1, r4
 800459c:	d008      	beq.n	80045b0 <memmove+0x28>
 800459e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80045a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80045a6:	e7f8      	b.n	800459a <memmove+0x12>
 80045a8:	4402      	add	r2, r0
 80045aa:	4601      	mov	r1, r0
 80045ac:	428a      	cmp	r2, r1
 80045ae:	d100      	bne.n	80045b2 <memmove+0x2a>
 80045b0:	bd10      	pop	{r4, pc}
 80045b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80045b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80045ba:	e7f7      	b.n	80045ac <memmove+0x24>

080045bc <_free_r>:
 80045bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80045be:	2900      	cmp	r1, #0
 80045c0:	d044      	beq.n	800464c <_free_r+0x90>
 80045c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045c6:	9001      	str	r0, [sp, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f1a1 0404 	sub.w	r4, r1, #4
 80045ce:	bfb8      	it	lt
 80045d0:	18e4      	addlt	r4, r4, r3
 80045d2:	f000 f913 	bl	80047fc <__malloc_lock>
 80045d6:	4a1e      	ldr	r2, [pc, #120]	; (8004650 <_free_r+0x94>)
 80045d8:	9801      	ldr	r0, [sp, #4]
 80045da:	6813      	ldr	r3, [r2, #0]
 80045dc:	b933      	cbnz	r3, 80045ec <_free_r+0x30>
 80045de:	6063      	str	r3, [r4, #4]
 80045e0:	6014      	str	r4, [r2, #0]
 80045e2:	b003      	add	sp, #12
 80045e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80045e8:	f000 b90e 	b.w	8004808 <__malloc_unlock>
 80045ec:	42a3      	cmp	r3, r4
 80045ee:	d908      	bls.n	8004602 <_free_r+0x46>
 80045f0:	6825      	ldr	r5, [r4, #0]
 80045f2:	1961      	adds	r1, r4, r5
 80045f4:	428b      	cmp	r3, r1
 80045f6:	bf01      	itttt	eq
 80045f8:	6819      	ldreq	r1, [r3, #0]
 80045fa:	685b      	ldreq	r3, [r3, #4]
 80045fc:	1949      	addeq	r1, r1, r5
 80045fe:	6021      	streq	r1, [r4, #0]
 8004600:	e7ed      	b.n	80045de <_free_r+0x22>
 8004602:	461a      	mov	r2, r3
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	b10b      	cbz	r3, 800460c <_free_r+0x50>
 8004608:	42a3      	cmp	r3, r4
 800460a:	d9fa      	bls.n	8004602 <_free_r+0x46>
 800460c:	6811      	ldr	r1, [r2, #0]
 800460e:	1855      	adds	r5, r2, r1
 8004610:	42a5      	cmp	r5, r4
 8004612:	d10b      	bne.n	800462c <_free_r+0x70>
 8004614:	6824      	ldr	r4, [r4, #0]
 8004616:	4421      	add	r1, r4
 8004618:	1854      	adds	r4, r2, r1
 800461a:	42a3      	cmp	r3, r4
 800461c:	6011      	str	r1, [r2, #0]
 800461e:	d1e0      	bne.n	80045e2 <_free_r+0x26>
 8004620:	681c      	ldr	r4, [r3, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	6053      	str	r3, [r2, #4]
 8004626:	4421      	add	r1, r4
 8004628:	6011      	str	r1, [r2, #0]
 800462a:	e7da      	b.n	80045e2 <_free_r+0x26>
 800462c:	d902      	bls.n	8004634 <_free_r+0x78>
 800462e:	230c      	movs	r3, #12
 8004630:	6003      	str	r3, [r0, #0]
 8004632:	e7d6      	b.n	80045e2 <_free_r+0x26>
 8004634:	6825      	ldr	r5, [r4, #0]
 8004636:	1961      	adds	r1, r4, r5
 8004638:	428b      	cmp	r3, r1
 800463a:	bf04      	itt	eq
 800463c:	6819      	ldreq	r1, [r3, #0]
 800463e:	685b      	ldreq	r3, [r3, #4]
 8004640:	6063      	str	r3, [r4, #4]
 8004642:	bf04      	itt	eq
 8004644:	1949      	addeq	r1, r1, r5
 8004646:	6021      	streq	r1, [r4, #0]
 8004648:	6054      	str	r4, [r2, #4]
 800464a:	e7ca      	b.n	80045e2 <_free_r+0x26>
 800464c:	b003      	add	sp, #12
 800464e:	bd30      	pop	{r4, r5, pc}
 8004650:	20000170 	.word	0x20000170

08004654 <sbrk_aligned>:
 8004654:	b570      	push	{r4, r5, r6, lr}
 8004656:	4e0e      	ldr	r6, [pc, #56]	; (8004690 <sbrk_aligned+0x3c>)
 8004658:	460c      	mov	r4, r1
 800465a:	6831      	ldr	r1, [r6, #0]
 800465c:	4605      	mov	r5, r0
 800465e:	b911      	cbnz	r1, 8004666 <sbrk_aligned+0x12>
 8004660:	f000 f8bc 	bl	80047dc <_sbrk_r>
 8004664:	6030      	str	r0, [r6, #0]
 8004666:	4621      	mov	r1, r4
 8004668:	4628      	mov	r0, r5
 800466a:	f000 f8b7 	bl	80047dc <_sbrk_r>
 800466e:	1c43      	adds	r3, r0, #1
 8004670:	d00a      	beq.n	8004688 <sbrk_aligned+0x34>
 8004672:	1cc4      	adds	r4, r0, #3
 8004674:	f024 0403 	bic.w	r4, r4, #3
 8004678:	42a0      	cmp	r0, r4
 800467a:	d007      	beq.n	800468c <sbrk_aligned+0x38>
 800467c:	1a21      	subs	r1, r4, r0
 800467e:	4628      	mov	r0, r5
 8004680:	f000 f8ac 	bl	80047dc <_sbrk_r>
 8004684:	3001      	adds	r0, #1
 8004686:	d101      	bne.n	800468c <sbrk_aligned+0x38>
 8004688:	f04f 34ff 	mov.w	r4, #4294967295
 800468c:	4620      	mov	r0, r4
 800468e:	bd70      	pop	{r4, r5, r6, pc}
 8004690:	20000174 	.word	0x20000174

08004694 <_malloc_r>:
 8004694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004698:	1ccd      	adds	r5, r1, #3
 800469a:	f025 0503 	bic.w	r5, r5, #3
 800469e:	3508      	adds	r5, #8
 80046a0:	2d0c      	cmp	r5, #12
 80046a2:	bf38      	it	cc
 80046a4:	250c      	movcc	r5, #12
 80046a6:	2d00      	cmp	r5, #0
 80046a8:	4607      	mov	r7, r0
 80046aa:	db01      	blt.n	80046b0 <_malloc_r+0x1c>
 80046ac:	42a9      	cmp	r1, r5
 80046ae:	d905      	bls.n	80046bc <_malloc_r+0x28>
 80046b0:	230c      	movs	r3, #12
 80046b2:	603b      	str	r3, [r7, #0]
 80046b4:	2600      	movs	r6, #0
 80046b6:	4630      	mov	r0, r6
 80046b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046bc:	4e2e      	ldr	r6, [pc, #184]	; (8004778 <_malloc_r+0xe4>)
 80046be:	f000 f89d 	bl	80047fc <__malloc_lock>
 80046c2:	6833      	ldr	r3, [r6, #0]
 80046c4:	461c      	mov	r4, r3
 80046c6:	bb34      	cbnz	r4, 8004716 <_malloc_r+0x82>
 80046c8:	4629      	mov	r1, r5
 80046ca:	4638      	mov	r0, r7
 80046cc:	f7ff ffc2 	bl	8004654 <sbrk_aligned>
 80046d0:	1c43      	adds	r3, r0, #1
 80046d2:	4604      	mov	r4, r0
 80046d4:	d14d      	bne.n	8004772 <_malloc_r+0xde>
 80046d6:	6834      	ldr	r4, [r6, #0]
 80046d8:	4626      	mov	r6, r4
 80046da:	2e00      	cmp	r6, #0
 80046dc:	d140      	bne.n	8004760 <_malloc_r+0xcc>
 80046de:	6823      	ldr	r3, [r4, #0]
 80046e0:	4631      	mov	r1, r6
 80046e2:	4638      	mov	r0, r7
 80046e4:	eb04 0803 	add.w	r8, r4, r3
 80046e8:	f000 f878 	bl	80047dc <_sbrk_r>
 80046ec:	4580      	cmp	r8, r0
 80046ee:	d13a      	bne.n	8004766 <_malloc_r+0xd2>
 80046f0:	6821      	ldr	r1, [r4, #0]
 80046f2:	3503      	adds	r5, #3
 80046f4:	1a6d      	subs	r5, r5, r1
 80046f6:	f025 0503 	bic.w	r5, r5, #3
 80046fa:	3508      	adds	r5, #8
 80046fc:	2d0c      	cmp	r5, #12
 80046fe:	bf38      	it	cc
 8004700:	250c      	movcc	r5, #12
 8004702:	4629      	mov	r1, r5
 8004704:	4638      	mov	r0, r7
 8004706:	f7ff ffa5 	bl	8004654 <sbrk_aligned>
 800470a:	3001      	adds	r0, #1
 800470c:	d02b      	beq.n	8004766 <_malloc_r+0xd2>
 800470e:	6823      	ldr	r3, [r4, #0]
 8004710:	442b      	add	r3, r5
 8004712:	6023      	str	r3, [r4, #0]
 8004714:	e00e      	b.n	8004734 <_malloc_r+0xa0>
 8004716:	6822      	ldr	r2, [r4, #0]
 8004718:	1b52      	subs	r2, r2, r5
 800471a:	d41e      	bmi.n	800475a <_malloc_r+0xc6>
 800471c:	2a0b      	cmp	r2, #11
 800471e:	d916      	bls.n	800474e <_malloc_r+0xba>
 8004720:	1961      	adds	r1, r4, r5
 8004722:	42a3      	cmp	r3, r4
 8004724:	6025      	str	r5, [r4, #0]
 8004726:	bf18      	it	ne
 8004728:	6059      	strne	r1, [r3, #4]
 800472a:	6863      	ldr	r3, [r4, #4]
 800472c:	bf08      	it	eq
 800472e:	6031      	streq	r1, [r6, #0]
 8004730:	5162      	str	r2, [r4, r5]
 8004732:	604b      	str	r3, [r1, #4]
 8004734:	4638      	mov	r0, r7
 8004736:	f104 060b 	add.w	r6, r4, #11
 800473a:	f000 f865 	bl	8004808 <__malloc_unlock>
 800473e:	f026 0607 	bic.w	r6, r6, #7
 8004742:	1d23      	adds	r3, r4, #4
 8004744:	1af2      	subs	r2, r6, r3
 8004746:	d0b6      	beq.n	80046b6 <_malloc_r+0x22>
 8004748:	1b9b      	subs	r3, r3, r6
 800474a:	50a3      	str	r3, [r4, r2]
 800474c:	e7b3      	b.n	80046b6 <_malloc_r+0x22>
 800474e:	6862      	ldr	r2, [r4, #4]
 8004750:	42a3      	cmp	r3, r4
 8004752:	bf0c      	ite	eq
 8004754:	6032      	streq	r2, [r6, #0]
 8004756:	605a      	strne	r2, [r3, #4]
 8004758:	e7ec      	b.n	8004734 <_malloc_r+0xa0>
 800475a:	4623      	mov	r3, r4
 800475c:	6864      	ldr	r4, [r4, #4]
 800475e:	e7b2      	b.n	80046c6 <_malloc_r+0x32>
 8004760:	4634      	mov	r4, r6
 8004762:	6876      	ldr	r6, [r6, #4]
 8004764:	e7b9      	b.n	80046da <_malloc_r+0x46>
 8004766:	230c      	movs	r3, #12
 8004768:	603b      	str	r3, [r7, #0]
 800476a:	4638      	mov	r0, r7
 800476c:	f000 f84c 	bl	8004808 <__malloc_unlock>
 8004770:	e7a1      	b.n	80046b6 <_malloc_r+0x22>
 8004772:	6025      	str	r5, [r4, #0]
 8004774:	e7de      	b.n	8004734 <_malloc_r+0xa0>
 8004776:	bf00      	nop
 8004778:	20000170 	.word	0x20000170

0800477c <_realloc_r>:
 800477c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004780:	4680      	mov	r8, r0
 8004782:	4614      	mov	r4, r2
 8004784:	460e      	mov	r6, r1
 8004786:	b921      	cbnz	r1, 8004792 <_realloc_r+0x16>
 8004788:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800478c:	4611      	mov	r1, r2
 800478e:	f7ff bf81 	b.w	8004694 <_malloc_r>
 8004792:	b92a      	cbnz	r2, 80047a0 <_realloc_r+0x24>
 8004794:	f7ff ff12 	bl	80045bc <_free_r>
 8004798:	4625      	mov	r5, r4
 800479a:	4628      	mov	r0, r5
 800479c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047a0:	f000 f838 	bl	8004814 <_malloc_usable_size_r>
 80047a4:	4284      	cmp	r4, r0
 80047a6:	4607      	mov	r7, r0
 80047a8:	d802      	bhi.n	80047b0 <_realloc_r+0x34>
 80047aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80047ae:	d812      	bhi.n	80047d6 <_realloc_r+0x5a>
 80047b0:	4621      	mov	r1, r4
 80047b2:	4640      	mov	r0, r8
 80047b4:	f7ff ff6e 	bl	8004694 <_malloc_r>
 80047b8:	4605      	mov	r5, r0
 80047ba:	2800      	cmp	r0, #0
 80047bc:	d0ed      	beq.n	800479a <_realloc_r+0x1e>
 80047be:	42bc      	cmp	r4, r7
 80047c0:	4622      	mov	r2, r4
 80047c2:	4631      	mov	r1, r6
 80047c4:	bf28      	it	cs
 80047c6:	463a      	movcs	r2, r7
 80047c8:	f7ff fed0 	bl	800456c <memcpy>
 80047cc:	4631      	mov	r1, r6
 80047ce:	4640      	mov	r0, r8
 80047d0:	f7ff fef4 	bl	80045bc <_free_r>
 80047d4:	e7e1      	b.n	800479a <_realloc_r+0x1e>
 80047d6:	4635      	mov	r5, r6
 80047d8:	e7df      	b.n	800479a <_realloc_r+0x1e>
	...

080047dc <_sbrk_r>:
 80047dc:	b538      	push	{r3, r4, r5, lr}
 80047de:	4d06      	ldr	r5, [pc, #24]	; (80047f8 <_sbrk_r+0x1c>)
 80047e0:	2300      	movs	r3, #0
 80047e2:	4604      	mov	r4, r0
 80047e4:	4608      	mov	r0, r1
 80047e6:	602b      	str	r3, [r5, #0]
 80047e8:	f7fc fecc 	bl	8001584 <_sbrk>
 80047ec:	1c43      	adds	r3, r0, #1
 80047ee:	d102      	bne.n	80047f6 <_sbrk_r+0x1a>
 80047f0:	682b      	ldr	r3, [r5, #0]
 80047f2:	b103      	cbz	r3, 80047f6 <_sbrk_r+0x1a>
 80047f4:	6023      	str	r3, [r4, #0]
 80047f6:	bd38      	pop	{r3, r4, r5, pc}
 80047f8:	20000178 	.word	0x20000178

080047fc <__malloc_lock>:
 80047fc:	4801      	ldr	r0, [pc, #4]	; (8004804 <__malloc_lock+0x8>)
 80047fe:	f000 b811 	b.w	8004824 <__retarget_lock_acquire_recursive>
 8004802:	bf00      	nop
 8004804:	2000017c 	.word	0x2000017c

08004808 <__malloc_unlock>:
 8004808:	4801      	ldr	r0, [pc, #4]	; (8004810 <__malloc_unlock+0x8>)
 800480a:	f000 b80c 	b.w	8004826 <__retarget_lock_release_recursive>
 800480e:	bf00      	nop
 8004810:	2000017c 	.word	0x2000017c

08004814 <_malloc_usable_size_r>:
 8004814:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004818:	1f18      	subs	r0, r3, #4
 800481a:	2b00      	cmp	r3, #0
 800481c:	bfbc      	itt	lt
 800481e:	580b      	ldrlt	r3, [r1, r0]
 8004820:	18c0      	addlt	r0, r0, r3
 8004822:	4770      	bx	lr

08004824 <__retarget_lock_acquire_recursive>:
 8004824:	4770      	bx	lr

08004826 <__retarget_lock_release_recursive>:
 8004826:	4770      	bx	lr

08004828 <_init>:
 8004828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800482a:	bf00      	nop
 800482c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800482e:	bc08      	pop	{r3}
 8004830:	469e      	mov	lr, r3
 8004832:	4770      	bx	lr

08004834 <_fini>:
 8004834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004836:	bf00      	nop
 8004838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800483a:	bc08      	pop	{r3}
 800483c:	469e      	mov	lr, r3
 800483e:	4770      	bx	lr


PV System Efficiency Monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000526c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005404  08005404  00015404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800541c  0800541c  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  0800541c  0800541c  0001541c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005424  08005424  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005424  08005424  00015424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005428  08005428  00015428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  0800542c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  20000020  0800544c  00020020  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  0800544c  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f051  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e2d  00000000  00000000  0002f0a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  00030ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c90  00000000  00000000  00031c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001779c  00000000  00000000  00032898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f0db  00000000  00000000  0004a034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099e21  00000000  00000000  0005910f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f2f30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003920  00000000  00000000  000f2f80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000020 	.word	0x20000020
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080053ec 	.word	0x080053ec

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000024 	.word	0x20000024
 80001d4:	080053ec 	.word	0x080053ec

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <__aeabi_uldivmod>:
 80009b4:	b953      	cbnz	r3, 80009cc <__aeabi_uldivmod+0x18>
 80009b6:	b94a      	cbnz	r2, 80009cc <__aeabi_uldivmod+0x18>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	bf08      	it	eq
 80009bc:	2800      	cmpeq	r0, #0
 80009be:	bf1c      	itt	ne
 80009c0:	f04f 31ff 	movne.w	r1, #4294967295
 80009c4:	f04f 30ff 	movne.w	r0, #4294967295
 80009c8:	f000 b974 	b.w	8000cb4 <__aeabi_idiv0>
 80009cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d4:	f000 f806 	bl	80009e4 <__udivmoddi4>
 80009d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr

080009e4 <__udivmoddi4>:
 80009e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e8:	9d08      	ldr	r5, [sp, #32]
 80009ea:	4604      	mov	r4, r0
 80009ec:	468e      	mov	lr, r1
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d14d      	bne.n	8000a8e <__udivmoddi4+0xaa>
 80009f2:	428a      	cmp	r2, r1
 80009f4:	4694      	mov	ip, r2
 80009f6:	d969      	bls.n	8000acc <__udivmoddi4+0xe8>
 80009f8:	fab2 f282 	clz	r2, r2
 80009fc:	b152      	cbz	r2, 8000a14 <__udivmoddi4+0x30>
 80009fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000a02:	f1c2 0120 	rsb	r1, r2, #32
 8000a06:	fa20 f101 	lsr.w	r1, r0, r1
 8000a0a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a0e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a12:	4094      	lsls	r4, r2
 8000a14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a18:	0c21      	lsrs	r1, r4, #16
 8000a1a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a1e:	fa1f f78c 	uxth.w	r7, ip
 8000a22:	fb08 e316 	mls	r3, r8, r6, lr
 8000a26:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a2a:	fb06 f107 	mul.w	r1, r6, r7
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	d90a      	bls.n	8000a48 <__udivmoddi4+0x64>
 8000a32:	eb1c 0303 	adds.w	r3, ip, r3
 8000a36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a3a:	f080 811f 	bcs.w	8000c7c <__udivmoddi4+0x298>
 8000a3e:	4299      	cmp	r1, r3
 8000a40:	f240 811c 	bls.w	8000c7c <__udivmoddi4+0x298>
 8000a44:	3e02      	subs	r6, #2
 8000a46:	4463      	add	r3, ip
 8000a48:	1a5b      	subs	r3, r3, r1
 8000a4a:	b2a4      	uxth	r4, r4
 8000a4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a50:	fb08 3310 	mls	r3, r8, r0, r3
 8000a54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a58:	fb00 f707 	mul.w	r7, r0, r7
 8000a5c:	42a7      	cmp	r7, r4
 8000a5e:	d90a      	bls.n	8000a76 <__udivmoddi4+0x92>
 8000a60:	eb1c 0404 	adds.w	r4, ip, r4
 8000a64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a68:	f080 810a 	bcs.w	8000c80 <__udivmoddi4+0x29c>
 8000a6c:	42a7      	cmp	r7, r4
 8000a6e:	f240 8107 	bls.w	8000c80 <__udivmoddi4+0x29c>
 8000a72:	4464      	add	r4, ip
 8000a74:	3802      	subs	r0, #2
 8000a76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a7a:	1be4      	subs	r4, r4, r7
 8000a7c:	2600      	movs	r6, #0
 8000a7e:	b11d      	cbz	r5, 8000a88 <__udivmoddi4+0xa4>
 8000a80:	40d4      	lsrs	r4, r2
 8000a82:	2300      	movs	r3, #0
 8000a84:	e9c5 4300 	strd	r4, r3, [r5]
 8000a88:	4631      	mov	r1, r6
 8000a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8e:	428b      	cmp	r3, r1
 8000a90:	d909      	bls.n	8000aa6 <__udivmoddi4+0xc2>
 8000a92:	2d00      	cmp	r5, #0
 8000a94:	f000 80ef 	beq.w	8000c76 <__udivmoddi4+0x292>
 8000a98:	2600      	movs	r6, #0
 8000a9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000a9e:	4630      	mov	r0, r6
 8000aa0:	4631      	mov	r1, r6
 8000aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa6:	fab3 f683 	clz	r6, r3
 8000aaa:	2e00      	cmp	r6, #0
 8000aac:	d14a      	bne.n	8000b44 <__udivmoddi4+0x160>
 8000aae:	428b      	cmp	r3, r1
 8000ab0:	d302      	bcc.n	8000ab8 <__udivmoddi4+0xd4>
 8000ab2:	4282      	cmp	r2, r0
 8000ab4:	f200 80f9 	bhi.w	8000caa <__udivmoddi4+0x2c6>
 8000ab8:	1a84      	subs	r4, r0, r2
 8000aba:	eb61 0303 	sbc.w	r3, r1, r3
 8000abe:	2001      	movs	r0, #1
 8000ac0:	469e      	mov	lr, r3
 8000ac2:	2d00      	cmp	r5, #0
 8000ac4:	d0e0      	beq.n	8000a88 <__udivmoddi4+0xa4>
 8000ac6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000aca:	e7dd      	b.n	8000a88 <__udivmoddi4+0xa4>
 8000acc:	b902      	cbnz	r2, 8000ad0 <__udivmoddi4+0xec>
 8000ace:	deff      	udf	#255	; 0xff
 8000ad0:	fab2 f282 	clz	r2, r2
 8000ad4:	2a00      	cmp	r2, #0
 8000ad6:	f040 8092 	bne.w	8000bfe <__udivmoddi4+0x21a>
 8000ada:	eba1 010c 	sub.w	r1, r1, ip
 8000ade:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ae2:	fa1f fe8c 	uxth.w	lr, ip
 8000ae6:	2601      	movs	r6, #1
 8000ae8:	0c20      	lsrs	r0, r4, #16
 8000aea:	fbb1 f3f7 	udiv	r3, r1, r7
 8000aee:	fb07 1113 	mls	r1, r7, r3, r1
 8000af2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000af6:	fb0e f003 	mul.w	r0, lr, r3
 8000afa:	4288      	cmp	r0, r1
 8000afc:	d908      	bls.n	8000b10 <__udivmoddi4+0x12c>
 8000afe:	eb1c 0101 	adds.w	r1, ip, r1
 8000b02:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b06:	d202      	bcs.n	8000b0e <__udivmoddi4+0x12a>
 8000b08:	4288      	cmp	r0, r1
 8000b0a:	f200 80cb 	bhi.w	8000ca4 <__udivmoddi4+0x2c0>
 8000b0e:	4643      	mov	r3, r8
 8000b10:	1a09      	subs	r1, r1, r0
 8000b12:	b2a4      	uxth	r4, r4
 8000b14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b18:	fb07 1110 	mls	r1, r7, r0, r1
 8000b1c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b20:	fb0e fe00 	mul.w	lr, lr, r0
 8000b24:	45a6      	cmp	lr, r4
 8000b26:	d908      	bls.n	8000b3a <__udivmoddi4+0x156>
 8000b28:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b30:	d202      	bcs.n	8000b38 <__udivmoddi4+0x154>
 8000b32:	45a6      	cmp	lr, r4
 8000b34:	f200 80bb 	bhi.w	8000cae <__udivmoddi4+0x2ca>
 8000b38:	4608      	mov	r0, r1
 8000b3a:	eba4 040e 	sub.w	r4, r4, lr
 8000b3e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b42:	e79c      	b.n	8000a7e <__udivmoddi4+0x9a>
 8000b44:	f1c6 0720 	rsb	r7, r6, #32
 8000b48:	40b3      	lsls	r3, r6
 8000b4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b52:	fa20 f407 	lsr.w	r4, r0, r7
 8000b56:	fa01 f306 	lsl.w	r3, r1, r6
 8000b5a:	431c      	orrs	r4, r3
 8000b5c:	40f9      	lsrs	r1, r7
 8000b5e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b62:	fa00 f306 	lsl.w	r3, r0, r6
 8000b66:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b6a:	0c20      	lsrs	r0, r4, #16
 8000b6c:	fa1f fe8c 	uxth.w	lr, ip
 8000b70:	fb09 1118 	mls	r1, r9, r8, r1
 8000b74:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b78:	fb08 f00e 	mul.w	r0, r8, lr
 8000b7c:	4288      	cmp	r0, r1
 8000b7e:	fa02 f206 	lsl.w	r2, r2, r6
 8000b82:	d90b      	bls.n	8000b9c <__udivmoddi4+0x1b8>
 8000b84:	eb1c 0101 	adds.w	r1, ip, r1
 8000b88:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b8c:	f080 8088 	bcs.w	8000ca0 <__udivmoddi4+0x2bc>
 8000b90:	4288      	cmp	r0, r1
 8000b92:	f240 8085 	bls.w	8000ca0 <__udivmoddi4+0x2bc>
 8000b96:	f1a8 0802 	sub.w	r8, r8, #2
 8000b9a:	4461      	add	r1, ip
 8000b9c:	1a09      	subs	r1, r1, r0
 8000b9e:	b2a4      	uxth	r4, r4
 8000ba0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ba4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ba8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bac:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bb0:	458e      	cmp	lr, r1
 8000bb2:	d908      	bls.n	8000bc6 <__udivmoddi4+0x1e2>
 8000bb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bb8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bbc:	d26c      	bcs.n	8000c98 <__udivmoddi4+0x2b4>
 8000bbe:	458e      	cmp	lr, r1
 8000bc0:	d96a      	bls.n	8000c98 <__udivmoddi4+0x2b4>
 8000bc2:	3802      	subs	r0, #2
 8000bc4:	4461      	add	r1, ip
 8000bc6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bca:	fba0 9402 	umull	r9, r4, r0, r2
 8000bce:	eba1 010e 	sub.w	r1, r1, lr
 8000bd2:	42a1      	cmp	r1, r4
 8000bd4:	46c8      	mov	r8, r9
 8000bd6:	46a6      	mov	lr, r4
 8000bd8:	d356      	bcc.n	8000c88 <__udivmoddi4+0x2a4>
 8000bda:	d053      	beq.n	8000c84 <__udivmoddi4+0x2a0>
 8000bdc:	b15d      	cbz	r5, 8000bf6 <__udivmoddi4+0x212>
 8000bde:	ebb3 0208 	subs.w	r2, r3, r8
 8000be2:	eb61 010e 	sbc.w	r1, r1, lr
 8000be6:	fa01 f707 	lsl.w	r7, r1, r7
 8000bea:	fa22 f306 	lsr.w	r3, r2, r6
 8000bee:	40f1      	lsrs	r1, r6
 8000bf0:	431f      	orrs	r7, r3
 8000bf2:	e9c5 7100 	strd	r7, r1, [r5]
 8000bf6:	2600      	movs	r6, #0
 8000bf8:	4631      	mov	r1, r6
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	f1c2 0320 	rsb	r3, r2, #32
 8000c02:	40d8      	lsrs	r0, r3
 8000c04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c08:	fa21 f303 	lsr.w	r3, r1, r3
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4301      	orrs	r1, r0
 8000c10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c14:	fa1f fe8c 	uxth.w	lr, ip
 8000c18:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c1c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c20:	0c0b      	lsrs	r3, r1, #16
 8000c22:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c26:	fb00 f60e 	mul.w	r6, r0, lr
 8000c2a:	429e      	cmp	r6, r3
 8000c2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c30:	d908      	bls.n	8000c44 <__udivmoddi4+0x260>
 8000c32:	eb1c 0303 	adds.w	r3, ip, r3
 8000c36:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c3a:	d22f      	bcs.n	8000c9c <__udivmoddi4+0x2b8>
 8000c3c:	429e      	cmp	r6, r3
 8000c3e:	d92d      	bls.n	8000c9c <__udivmoddi4+0x2b8>
 8000c40:	3802      	subs	r0, #2
 8000c42:	4463      	add	r3, ip
 8000c44:	1b9b      	subs	r3, r3, r6
 8000c46:	b289      	uxth	r1, r1
 8000c48:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c4c:	fb07 3316 	mls	r3, r7, r6, r3
 8000c50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c54:	fb06 f30e 	mul.w	r3, r6, lr
 8000c58:	428b      	cmp	r3, r1
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x28a>
 8000c5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c60:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c64:	d216      	bcs.n	8000c94 <__udivmoddi4+0x2b0>
 8000c66:	428b      	cmp	r3, r1
 8000c68:	d914      	bls.n	8000c94 <__udivmoddi4+0x2b0>
 8000c6a:	3e02      	subs	r6, #2
 8000c6c:	4461      	add	r1, ip
 8000c6e:	1ac9      	subs	r1, r1, r3
 8000c70:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c74:	e738      	b.n	8000ae8 <__udivmoddi4+0x104>
 8000c76:	462e      	mov	r6, r5
 8000c78:	4628      	mov	r0, r5
 8000c7a:	e705      	b.n	8000a88 <__udivmoddi4+0xa4>
 8000c7c:	4606      	mov	r6, r0
 8000c7e:	e6e3      	b.n	8000a48 <__udivmoddi4+0x64>
 8000c80:	4618      	mov	r0, r3
 8000c82:	e6f8      	b.n	8000a76 <__udivmoddi4+0x92>
 8000c84:	454b      	cmp	r3, r9
 8000c86:	d2a9      	bcs.n	8000bdc <__udivmoddi4+0x1f8>
 8000c88:	ebb9 0802 	subs.w	r8, r9, r2
 8000c8c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c90:	3801      	subs	r0, #1
 8000c92:	e7a3      	b.n	8000bdc <__udivmoddi4+0x1f8>
 8000c94:	4646      	mov	r6, r8
 8000c96:	e7ea      	b.n	8000c6e <__udivmoddi4+0x28a>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	e794      	b.n	8000bc6 <__udivmoddi4+0x1e2>
 8000c9c:	4640      	mov	r0, r8
 8000c9e:	e7d1      	b.n	8000c44 <__udivmoddi4+0x260>
 8000ca0:	46d0      	mov	r8, sl
 8000ca2:	e77b      	b.n	8000b9c <__udivmoddi4+0x1b8>
 8000ca4:	3b02      	subs	r3, #2
 8000ca6:	4461      	add	r1, ip
 8000ca8:	e732      	b.n	8000b10 <__udivmoddi4+0x12c>
 8000caa:	4630      	mov	r0, r6
 8000cac:	e709      	b.n	8000ac2 <__udivmoddi4+0xde>
 8000cae:	4464      	add	r4, ip
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	e742      	b.n	8000b3a <__udivmoddi4+0x156>

08000cb4 <__aeabi_idiv0>:
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <HAL_UART_RxCpltCallback>:
void system_state_update() ;
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]

	g_system_config[g_byte_count] = char_rcvd[0] ;
 8000cc0:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <HAL_UART_RxCpltCallback+0x50>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <HAL_UART_RxCpltCallback+0x54>)
 8000cc8:	7819      	ldrb	r1, [r3, #0]
 8000cca:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <HAL_UART_RxCpltCallback+0x58>)
 8000ccc:	5499      	strb	r1, [r3, r2]
	g_byte_count++ ;
 8000cce:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <HAL_UART_RxCpltCallback+0x50>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <HAL_UART_RxCpltCallback+0x50>)
 8000cd8:	701a      	strb	r2, [r3, #0]

	if(char_rcvd[0] == '\n'){
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <HAL_UART_RxCpltCallback+0x54>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2b0a      	cmp	r3, #10
 8000ce0:	d109      	bne.n	8000cf6 <HAL_UART_RxCpltCallback+0x3e>
		if(g_byte_count == 7){
 8000ce2:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <HAL_UART_RxCpltCallback+0x50>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2b07      	cmp	r3, #7
 8000ce8:	d102      	bne.n	8000cf0 <HAL_UART_RxCpltCallback+0x38>
			g_config_command_rcvd = 1;
 8000cea:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <HAL_UART_RxCpltCallback+0x5c>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	701a      	strb	r2, [r3, #0]
		}

		g_byte_count =0 ;
 8000cf0:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <HAL_UART_RxCpltCallback+0x50>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	701a      	strb	r2, [r3, #0]
	}

	//re-prime receiver
	HAL_UART_Receive_IT(&huart2, (uint8_t*)char_rcvd, 1) ;
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	4904      	ldr	r1, [pc, #16]	; (8000d0c <HAL_UART_RxCpltCallback+0x54>)
 8000cfa:	4807      	ldr	r0, [pc, #28]	; (8000d18 <HAL_UART_RxCpltCallback+0x60>)
 8000cfc:	f003 fc20 	bl	8004540 <HAL_UART_Receive_IT>

}
 8000d00:	bf00      	nop
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000191 	.word	0x20000191
 8000d0c:	20000010 	.word	0x20000010
 8000d10:	20000180 	.word	0x20000180
 8000d14:	20000192 	.word	0x20000192
 8000d18:	20000114 	.word	0x20000114
 8000d1c:	00000000 	.word	0x00000000

08000d20 <get_adc_value_and_celsius_temperature>:
/**
 * function starts the adc, waits for conversion
 * Then converts value to degrees
 */

uint16_t get_adc_value_and_celsius_temperature(){
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0

	HAL_ADC_Start(&hadc1) ;
 8000d24:	4824      	ldr	r0, [pc, #144]	; (8000db8 <get_adc_value_and_celsius_temperature+0x98>)
 8000d26:	f001 f8b3 	bl	8001e90 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000d2a:	f04f 31ff 	mov.w	r1, #4294967295
 8000d2e:	4822      	ldr	r0, [pc, #136]	; (8000db8 <get_adc_value_and_celsius_temperature+0x98>)
 8000d30:	f001 f962 	bl	8001ff8 <HAL_ADC_PollForConversion>
	g_raw  = HAL_ADC_GetValue(&hadc1) ;
 8000d34:	4820      	ldr	r0, [pc, #128]	; (8000db8 <get_adc_value_and_celsius_temperature+0x98>)
 8000d36:	f001 f9ea 	bl	800210e <HAL_ADC_GetValue>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	b29a      	uxth	r2, r3
 8000d3e:	4b1f      	ldr	r3, [pc, #124]	; (8000dbc <get_adc_value_and_celsius_temperature+0x9c>)
 8000d40:	801a      	strh	r2, [r3, #0]

	g_vin = g_raw*(3.3/4095.0) ; // input voltage
 8000d42:	4b1e      	ldr	r3, [pc, #120]	; (8000dbc <get_adc_value_and_celsius_temperature+0x9c>)
 8000d44:	881b      	ldrh	r3, [r3, #0]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff fb98 	bl	800047c <__aeabi_i2d>
 8000d4c:	a316      	add	r3, pc, #88	; (adr r3, 8000da8 <get_adc_value_and_celsius_temperature+0x88>)
 8000d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d52:	f7ff fbfd 	bl	8000550 <__aeabi_dmul>
 8000d56:	4602      	mov	r2, r0
 8000d58:	460b      	mov	r3, r1
 8000d5a:	4919      	ldr	r1, [pc, #100]	; (8000dc0 <get_adc_value_and_celsius_temperature+0xa0>)
 8000d5c:	e9c1 2300 	strd	r2, r3, [r1]
	g_temp = g_vin*100 - 273.15 ; // cast to 16 bit uint
 8000d60:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <get_adc_value_and_celsius_temperature+0xa0>)
 8000d62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d66:	f04f 0200 	mov.w	r2, #0
 8000d6a:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <get_adc_value_and_celsius_temperature+0xa4>)
 8000d6c:	f7ff fbf0 	bl	8000550 <__aeabi_dmul>
 8000d70:	4602      	mov	r2, r0
 8000d72:	460b      	mov	r3, r1
 8000d74:	4610      	mov	r0, r2
 8000d76:	4619      	mov	r1, r3
 8000d78:	a30d      	add	r3, pc, #52	; (adr r3, 8000db0 <get_adc_value_and_celsius_temperature+0x90>)
 8000d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d7e:	f7ff fa2f 	bl	80001e0 <__aeabi_dsub>
 8000d82:	4602      	mov	r2, r0
 8000d84:	460b      	mov	r3, r1
 8000d86:	4910      	ldr	r1, [pc, #64]	; (8000dc8 <get_adc_value_and_celsius_temperature+0xa8>)
 8000d88:	e9c1 2300 	strd	r2, r3, [r1]

	return g_temp ;
 8000d8c:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <get_adc_value_and_celsius_temperature+0xa8>)
 8000d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d92:	4610      	mov	r0, r2
 8000d94:	4619      	mov	r1, r3
 8000d96:	f7ff fded 	bl	8000974 <__aeabi_d2uiz>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	b29b      	uxth	r3, r3
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	f3af 8000 	nop.w
 8000da8:	e734d9b4 	.word	0xe734d9b4
 8000dac:	3f4a680c 	.word	0x3f4a680c
 8000db0:	66666666 	.word	0x66666666
 8000db4:	40711266 	.word	0x40711266
 8000db8:	2000003c 	.word	0x2000003c
 8000dbc:	20000158 	.word	0x20000158
 8000dc0:	20000168 	.word	0x20000168
 8000dc4:	40590000 	.word	0x40590000
 8000dc8:	20000160 	.word	0x20000160

08000dcc <store_temp_in_string>:

void store_temp_in_string(uint16_t temperature, char temp[], int len){
 8000dcc:	b480      	push	{r7}
 8000dce:	b087      	sub	sp, #28
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
 8000dd8:	81fb      	strh	r3, [r7, #14]

	for(int i= 0 ; i < len ; i++){
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
 8000dde:	e04e      	b.n	8000e7e <store_temp_in_string+0xb2>
		switch(i){
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	d02f      	beq.n	8000e46 <store_temp_in_string+0x7a>
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	2b02      	cmp	r3, #2
 8000dea:	dc44      	bgt.n	8000e76 <store_temp_in_string+0xaa>
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d003      	beq.n	8000dfa <store_temp_in_string+0x2e>
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d00c      	beq.n	8000e12 <store_temp_in_string+0x46>
			case 2:
				temp[2] = (temperature - ((temperature/10)*10) ) + 48 ;

				break;
			default:
				break;
 8000df8:	e03d      	b.n	8000e76 <store_temp_in_string+0xaa>
				temp[0]  = (temperature/100) + 48 ;
 8000dfa:	89fb      	ldrh	r3, [r7, #14]
 8000dfc:	4a25      	ldr	r2, [pc, #148]	; (8000e94 <store_temp_in_string+0xc8>)
 8000dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8000e02:	095b      	lsrs	r3, r3, #5
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	3330      	adds	r3, #48	; 0x30
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	701a      	strb	r2, [r3, #0]
				break;
 8000e10:	e032      	b.n	8000e78 <store_temp_in_string+0xac>
				temp[1] = (temperature - (temperature/100)*100 )/10 + 48 ;
 8000e12:	89fa      	ldrh	r2, [r7, #14]
 8000e14:	89fb      	ldrh	r3, [r7, #14]
 8000e16:	491f      	ldr	r1, [pc, #124]	; (8000e94 <store_temp_in_string+0xc8>)
 8000e18:	fba1 1303 	umull	r1, r3, r1, r3
 8000e1c:	095b      	lsrs	r3, r3, #5
 8000e1e:	b29b      	uxth	r3, r3
 8000e20:	4619      	mov	r1, r3
 8000e22:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8000e26:	fb01 f303 	mul.w	r3, r1, r3
 8000e2a:	4413      	add	r3, r2
 8000e2c:	4a1a      	ldr	r2, [pc, #104]	; (8000e98 <store_temp_in_string+0xcc>)
 8000e2e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e32:	1092      	asrs	r2, r2, #2
 8000e34:	17db      	asrs	r3, r3, #31
 8000e36:	1ad3      	subs	r3, r2, r3
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	3230      	adds	r2, #48	; 0x30
 8000e40:	b2d2      	uxtb	r2, r2
 8000e42:	701a      	strb	r2, [r3, #0]
				break;
 8000e44:	e018      	b.n	8000e78 <store_temp_in_string+0xac>
				temp[2] = (temperature - ((temperature/10)*10) ) + 48 ;
 8000e46:	89fb      	ldrh	r3, [r7, #14]
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	89fb      	ldrh	r3, [r7, #14]
 8000e4c:	4913      	ldr	r1, [pc, #76]	; (8000e9c <store_temp_in_string+0xd0>)
 8000e4e:	fba1 1303 	umull	r1, r3, r1, r3
 8000e52:	08db      	lsrs	r3, r3, #3
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	4619      	mov	r1, r3
 8000e5a:	0149      	lsls	r1, r1, #5
 8000e5c:	1ac9      	subs	r1, r1, r3
 8000e5e:	0089      	lsls	r1, r1, #2
 8000e60:	1acb      	subs	r3, r1, r3
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	4413      	add	r3, r2
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	3302      	adds	r3, #2
 8000e6e:	3230      	adds	r2, #48	; 0x30
 8000e70:	b2d2      	uxtb	r2, r2
 8000e72:	701a      	strb	r2, [r3, #0]
				break;
 8000e74:	e000      	b.n	8000e78 <store_temp_in_string+0xac>
				break;
 8000e76:	bf00      	nop
	for(int i= 0 ; i < len ; i++){
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	617b      	str	r3, [r7, #20]
 8000e7e:	697a      	ldr	r2, [r7, #20]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	429a      	cmp	r2, r3
 8000e84:	dbac      	blt.n	8000de0 <store_temp_in_string+0x14>

		}
	}
}
 8000e86:	bf00      	nop
 8000e88:	bf00      	nop
 8000e8a:	371c      	adds	r7, #28
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	51eb851f 	.word	0x51eb851f
 8000e98:	66666667 	.word	0x66666667
 8000e9c:	cccccccd 	.word	0xcccccccd

08000ea0 <system_state_update>:

/**
 * This function will update the system state based on the received UART command
 * or top button press
 */
void system_state_update(){
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
	if(g_top_button_pressed  == 1 && g_config_command_rcvd ==0){
 8000ea4:	4b2c      	ldr	r3, [pc, #176]	; (8000f58 <system_state_update+0xb8>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d114      	bne.n	8000ed6 <system_state_update+0x36>
 8000eac:	4b2b      	ldr	r3, [pc, #172]	; (8000f5c <system_state_update+0xbc>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d110      	bne.n	8000ed6 <system_state_update+0x36>
		g_top_button_pressed = 0;
 8000eb4:	4b28      	ldr	r3, [pc, #160]	; (8000f58 <system_state_update+0xb8>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	701a      	strb	r2, [r3, #0]

		g_EN_measure++  ;
 8000eba:	4b29      	ldr	r3, [pc, #164]	; (8000f60 <system_state_update+0xc0>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	4b27      	ldr	r3, [pc, #156]	; (8000f60 <system_state_update+0xc0>)
 8000ec4:	701a      	strb	r2, [r3, #0]

		if(g_EN_measure >2 ){
 8000ec6:	4b26      	ldr	r3, [pc, #152]	; (8000f60 <system_state_update+0xc0>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	d93e      	bls.n	8000f4c <system_state_update+0xac>
			g_EN_measure = 1;
 8000ece:	4b24      	ldr	r3, [pc, #144]	; (8000f60 <system_state_update+0xc0>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	701a      	strb	r2, [r3, #0]
		if(g_EN_measure >2 ){
 8000ed4:	e03a      	b.n	8000f4c <system_state_update+0xac>
		}
	}
	else if(g_top_button_pressed ==0  && g_config_command_rcvd == 1){
 8000ed6:	4b20      	ldr	r3, [pc, #128]	; (8000f58 <system_state_update+0xb8>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d136      	bne.n	8000f4c <system_state_update+0xac>
 8000ede:	4b1f      	ldr	r3, [pc, #124]	; (8000f5c <system_state_update+0xbc>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d132      	bne.n	8000f4c <system_state_update+0xac>
		g_config_command_rcvd = 0;
 8000ee6:	4b1d      	ldr	r3, [pc, #116]	; (8000f5c <system_state_update+0xbc>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]
		if(g_system_config[0]== '&' && g_system_config[1 ]== '_' && g_system_config[2]=='E' && g_system_config[3] == 'N' &&g_system_config[4] =='_'&& g_system_config[5] =='*'){
 8000eec:	4b1d      	ldr	r3, [pc, #116]	; (8000f64 <system_state_update+0xc4>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b26      	cmp	r3, #38	; 0x26
 8000ef2:	d12b      	bne.n	8000f4c <system_state_update+0xac>
 8000ef4:	4b1b      	ldr	r3, [pc, #108]	; (8000f64 <system_state_update+0xc4>)
 8000ef6:	785b      	ldrb	r3, [r3, #1]
 8000ef8:	2b5f      	cmp	r3, #95	; 0x5f
 8000efa:	d127      	bne.n	8000f4c <system_state_update+0xac>
 8000efc:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <system_state_update+0xc4>)
 8000efe:	789b      	ldrb	r3, [r3, #2]
 8000f00:	2b45      	cmp	r3, #69	; 0x45
 8000f02:	d123      	bne.n	8000f4c <system_state_update+0xac>
 8000f04:	4b17      	ldr	r3, [pc, #92]	; (8000f64 <system_state_update+0xc4>)
 8000f06:	78db      	ldrb	r3, [r3, #3]
 8000f08:	2b4e      	cmp	r3, #78	; 0x4e
 8000f0a:	d11f      	bne.n	8000f4c <system_state_update+0xac>
 8000f0c:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <system_state_update+0xc4>)
 8000f0e:	791b      	ldrb	r3, [r3, #4]
 8000f10:	2b5f      	cmp	r3, #95	; 0x5f
 8000f12:	d11b      	bne.n	8000f4c <system_state_update+0xac>
 8000f14:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <system_state_update+0xc4>)
 8000f16:	795b      	ldrb	r3, [r3, #5]
 8000f18:	2b2a      	cmp	r3, #42	; 0x2a
 8000f1a:	d117      	bne.n	8000f4c <system_state_update+0xac>
			if(g_EN_measure == 0){
 8000f1c:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <system_state_update+0xc0>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d103      	bne.n	8000f2c <system_state_update+0x8c>
				g_EN_measure = 1;
 8000f24:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <system_state_update+0xc0>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	701a      	strb	r2, [r3, #0]
					g_EN_measure = 1;
				}
			}
		}
	}
}
 8000f2a:	e00f      	b.n	8000f4c <system_state_update+0xac>
			else if(g_EN_measure == 1){
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <system_state_update+0xc0>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d103      	bne.n	8000f3c <system_state_update+0x9c>
				g_EN_measure = 2;
 8000f34:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <system_state_update+0xc0>)
 8000f36:	2202      	movs	r2, #2
 8000f38:	701a      	strb	r2, [r3, #0]
}
 8000f3a:	e007      	b.n	8000f4c <system_state_update+0xac>
				if(g_EN_measure ==2){
 8000f3c:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <system_state_update+0xc0>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d103      	bne.n	8000f4c <system_state_update+0xac>
					g_EN_measure = 1;
 8000f44:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <system_state_update+0xc0>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	701a      	strb	r2, [r3, #0]
}
 8000f4a:	e7ff      	b.n	8000f4c <system_state_update+0xac>
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	200001c1 	.word	0x200001c1
 8000f5c:	20000192 	.word	0x20000192
 8000f60:	20000193 	.word	0x20000193
 8000f64:	20000180 	.word	0x20000180

08000f68 <HAL_TIM_IC_CaptureCallback>:
uint32_t g_time_between_pulses =  0;
uint8_t g_new_pulse = 0;
uint16_t g_lmt01_sens_temp =  0 ;
char dig_sens_temp[3] = {};
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
  if(htim->Instance == TIM2){
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f78:	d142      	bne.n	8001000 <HAL_TIM_IC_CaptureCallback+0x98>
	  g_new_pulse = 1;
 8000f7a:	4b25      	ldr	r3, [pc, #148]	; (8001010 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	701a      	strb	r2, [r3, #0]
	  g_time_between_pulses =  __HAL_TIM_GET_COUNTER(&htim2)  - current_value;  //Time between rising edges
 8000f80:	4b24      	ldr	r3, [pc, #144]	; (8001014 <HAL_TIM_IC_CaptureCallback+0xac>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f86:	4b24      	ldr	r3, [pc, #144]	; (8001018 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	4a23      	ldr	r2, [pc, #140]	; (800101c <HAL_TIM_IC_CaptureCallback+0xb4>)
 8000f8e:	6013      	str	r3, [r2, #0]

	  if( g_time_between_pulses<13){
 8000f90:	4b22      	ldr	r3, [pc, #136]	; (800101c <HAL_TIM_IC_CaptureCallback+0xb4>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2b0c      	cmp	r3, #12
 8000f96:	d80a      	bhi.n	8000fae <HAL_TIM_IC_CaptureCallback+0x46>
		  current_value = __HAL_TIM_GET_COUNTER(&htim2) ;
 8000f98:	4b1e      	ldr	r3, [pc, #120]	; (8001014 <HAL_TIM_IC_CaptureCallback+0xac>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f9e:	4a1e      	ldr	r2, [pc, #120]	; (8001018 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8000fa0:	6013      	str	r3, [r2, #0]
		  pulse_count++ ;
 8000fa2:	4b1f      	ldr	r3, [pc, #124]	; (8001020 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	4a1d      	ldr	r2, [pc, #116]	; (8001020 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000faa:	6013      	str	r3, [r2, #0]
		  g_TO1_temp = (pulse_count/4094.0)*256 - 50 ; //calculate new temp
		 current_value = __HAL_TIM_GET_COUNTER(&htim2) ;
		 pulse_count = 0;
	  }
  }
}
 8000fac:	e028      	b.n	8001000 <HAL_TIM_IC_CaptureCallback+0x98>
		  g_TO1_temp = (pulse_count/4094.0)*256 - 50 ; //calculate new temp
 8000fae:	4b1c      	ldr	r3, [pc, #112]	; (8001020 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fa52 	bl	800045c <__aeabi_ui2d>
 8000fb8:	a313      	add	r3, pc, #76	; (adr r3, 8001008 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fbe:	f7ff fbf1 	bl	80007a4 <__aeabi_ddiv>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	4610      	mov	r0, r2
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f04f 0200 	mov.w	r2, #0
 8000fce:	4b15      	ldr	r3, [pc, #84]	; (8001024 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000fd0:	f7ff fabe 	bl	8000550 <__aeabi_dmul>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	4610      	mov	r0, r2
 8000fda:	4619      	mov	r1, r3
 8000fdc:	f04f 0200 	mov.w	r2, #0
 8000fe0:	4b11      	ldr	r3, [pc, #68]	; (8001028 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000fe2:	f7ff f8fd 	bl	80001e0 <__aeabi_dsub>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	4910      	ldr	r1, [pc, #64]	; (800102c <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000fec:	e9c1 2300 	strd	r2, r3, [r1]
		 current_value = __HAL_TIM_GET_COUNTER(&htim2) ;
 8000ff0:	4b08      	ldr	r3, [pc, #32]	; (8001014 <HAL_TIM_IC_CaptureCallback+0xac>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff6:	4a08      	ldr	r2, [pc, #32]	; (8001018 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8000ff8:	6013      	str	r3, [r2, #0]
		 pulse_count = 0;
 8000ffa:	4b09      	ldr	r3, [pc, #36]	; (8001020 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	00000000 	.word	0x00000000
 800100c:	40affc00 	.word	0x40affc00
 8001010:	200001b8 	.word	0x200001b8
 8001014:	20000084 	.word	0x20000084
 8001018:	200001b0 	.word	0x200001b0
 800101c:	200001b4 	.word	0x200001b4
 8001020:	200001c8 	.word	0x200001c8
 8001024:	40700000 	.word	0x40700000
 8001028:	40490000 	.word	0x40490000
 800102c:	20000178 	.word	0x20000178

08001030 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001036:	f000 fe51 	bl	8001cdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800103a:	f000 f923 	bl	8001284 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800103e:	f000 fac7 	bl	80015d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001042:	f000 fa99 	bl	8001578 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001046:	f000 f987 	bl	8001358 <MX_ADC1_Init>
  MX_TIM2_Init();
 800104a:	f000 f9d7 	bl	80013fc <MX_TIM2_Init>
  MX_TIM3_Init();
 800104e:	f000 fa45 	bl	80014dc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(150);
 8001052:	2096      	movs	r0, #150	; 0x96
 8001054:	f000 feb4 	bl	8001dc0 <HAL_Delay>
  HAL_UART_Transmit_IT(&huart2, (uint8_t*)studentNum, 13) ;
 8001058:	220d      	movs	r2, #13
 800105a:	497b      	ldr	r1, [pc, #492]	; (8001248 <main+0x218>)
 800105c:	487b      	ldr	r0, [pc, #492]	; (800124c <main+0x21c>)
 800105e:	f003 fa2a 	bl	80044b6 <HAL_UART_Transmit_IT>

  HAL_UART_Receive_IT(&huart2, (uint8_t*)char_rcvd, 1) ;
 8001062:	2201      	movs	r2, #1
 8001064:	497a      	ldr	r1, [pc, #488]	; (8001250 <main+0x220>)
 8001066:	4879      	ldr	r0, [pc, #484]	; (800124c <main+0x21c>)
 8001068:	f003 fa6a 	bl	8004540 <HAL_UART_Receive_IT>

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1)  ; // input to trigger interrupt - LMT01 sensor
 800106c:	2100      	movs	r1, #0
 800106e:	4879      	ldr	r0, [pc, #484]	; (8001254 <main+0x224>)
 8001070:	f002 fb46 	bl	8003700 <HAL_TIM_IC_Start_IT>

  g_time_passed = HAL_GetTick() ; //snapshot of time
 8001074:	f000 fe98 	bl	8001da8 <HAL_GetTick>
 8001078:	4603      	mov	r3, r0
 800107a:	4a77      	ldr	r2, [pc, #476]	; (8001258 <main+0x228>)
 800107c:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  system_state_update() ;
 800107e:	f7ff ff0f 	bl	8000ea0 <system_state_update>

	  // measure Ta & measure Tb
	  if(g_EN_measure == 1){
 8001082:	4b76      	ldr	r3, [pc, #472]	; (800125c <main+0x22c>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d150      	bne.n	800112c <main+0xfc>

		  //ANALOGUE SENSOR CALIBRATION
		  g_temp_in_deg = get_adc_value_and_celsius_temperature() ;
 800108a:	f7ff fe49 	bl	8000d20 <get_adc_value_and_celsius_temperature>
 800108e:	4603      	mov	r3, r0
 8001090:	461a      	mov	r2, r3
 8001092:	4b73      	ldr	r3, [pc, #460]	; (8001260 <main+0x230>)
 8001094:	801a      	strh	r2, [r3, #0]
		  store_temp_in_string(g_temp_in_deg, g_temperature, LEN);
 8001096:	4b72      	ldr	r3, [pc, #456]	; (8001260 <main+0x230>)
 8001098:	881b      	ldrh	r3, [r3, #0]
 800109a:	2203      	movs	r2, #3
 800109c:	4971      	ldr	r1, [pc, #452]	; (8001264 <main+0x234>)
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff fe94 	bl	8000dcc <store_temp_in_string>

		  // DIGITAL SENSOR CALIBRATION
		  g_lmt01_sens_temp =  (uint16_t)g_TO1_temp ;
 80010a4:	4b70      	ldr	r3, [pc, #448]	; (8001268 <main+0x238>)
 80010a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010aa:	4610      	mov	r0, r2
 80010ac:	4619      	mov	r1, r3
 80010ae:	f7ff fc61 	bl	8000974 <__aeabi_d2uiz>
 80010b2:	4603      	mov	r3, r0
 80010b4:	b29a      	uxth	r2, r3
 80010b6:	4b6d      	ldr	r3, [pc, #436]	; (800126c <main+0x23c>)
 80010b8:	801a      	strh	r2, [r3, #0]
		  store_temp_in_string(g_lmt01_sens_temp, dig_sens_temp, LEN) ;
 80010ba:	4b6c      	ldr	r3, [pc, #432]	; (800126c <main+0x23c>)
 80010bc:	881b      	ldrh	r3, [r3, #0]
 80010be:	2203      	movs	r2, #3
 80010c0:	496b      	ldr	r1, [pc, #428]	; (8001270 <main+0x240>)
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff fe82 	bl	8000dcc <store_temp_in_string>

		  //re-prime system state update
		  g_transmit_system_state =1; //send the system state again
 80010c8:	4b6a      	ldr	r3, [pc, #424]	; (8001274 <main+0x244>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	701a      	strb	r2, [r3, #0]

		  if(HAL_GetTick() - g_time_passed >= 50 && g_LED_D2_ON == 0){
 80010ce:	f000 fe6b 	bl	8001da8 <HAL_GetTick>
 80010d2:	4602      	mov	r2, r0
 80010d4:	4b60      	ldr	r3, [pc, #384]	; (8001258 <main+0x228>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	2b31      	cmp	r3, #49	; 0x31
 80010dc:	d90c      	bls.n	80010f8 <main+0xc8>
 80010de:	4b66      	ldr	r3, [pc, #408]	; (8001278 <main+0x248>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d108      	bne.n	80010f8 <main+0xc8>
			  g_LED_D2_ON = 1; // set D2 on
 80010e6:	4b64      	ldr	r3, [pc, #400]	; (8001278 <main+0x248>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET) ;
 80010ec:	2200      	movs	r2, #0
 80010ee:	2120      	movs	r1, #32
 80010f0:	4862      	ldr	r0, [pc, #392]	; (800127c <main+0x24c>)
 80010f2:	f001 fd87 	bl	8002c04 <HAL_GPIO_WritePin>
 80010f6:	e0a5      	b.n	8001244 <main+0x214>

		  }
		  else if(HAL_GetTick() - g_time_passed >= 100 && g_LED_D2_ON == 1){
 80010f8:	f000 fe56 	bl	8001da8 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	4b56      	ldr	r3, [pc, #344]	; (8001258 <main+0x228>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	2b63      	cmp	r3, #99	; 0x63
 8001106:	d9ba      	bls.n	800107e <main+0x4e>
 8001108:	4b5b      	ldr	r3, [pc, #364]	; (8001278 <main+0x248>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d1b6      	bne.n	800107e <main+0x4e>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET) ;
 8001110:	2201      	movs	r2, #1
 8001112:	2120      	movs	r1, #32
 8001114:	4859      	ldr	r0, [pc, #356]	; (800127c <main+0x24c>)
 8001116:	f001 fd75 	bl	8002c04 <HAL_GPIO_WritePin>
			  g_time_passed =  HAL_GetTick() ;
 800111a:	f000 fe45 	bl	8001da8 <HAL_GetTick>
 800111e:	4603      	mov	r3, r0
 8001120:	4a4d      	ldr	r2, [pc, #308]	; (8001258 <main+0x228>)
 8001122:	6013      	str	r3, [r2, #0]
			  g_LED_D2_ON = 0;  //set D2 off
 8001124:	4b54      	ldr	r3, [pc, #336]	; (8001278 <main+0x248>)
 8001126:	2200      	movs	r2, #0
 8001128:	701a      	strb	r2, [r3, #0]
 800112a:	e7a8      	b.n	800107e <main+0x4e>

		  }

	  }
	  else if(g_EN_measure == 2){
 800112c:	4b4b      	ldr	r3, [pc, #300]	; (800125c <main+0x22c>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b02      	cmp	r3, #2
 8001132:	d1a4      	bne.n	800107e <main+0x4e>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET) ;
 8001134:	2201      	movs	r2, #1
 8001136:	2120      	movs	r1, #32
 8001138:	4850      	ldr	r0, [pc, #320]	; (800127c <main+0x24c>)
 800113a:	f001 fd63 	bl	8002c04 <HAL_GPIO_WritePin>


		  for(int i = 0; i < 17 ; i++){
 800113e:	2300      	movs	r3, #0
 8001140:	607b      	str	r3, [r7, #4]
 8001142:	e06f      	b.n	8001224 <main+0x1f4>
			  switch(i){
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b0f      	cmp	r3, #15
 8001148:	d868      	bhi.n	800121c <main+0x1ec>
 800114a:	a201      	add	r2, pc, #4	; (adr r2, 8001150 <main+0x120>)
 800114c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001150:	08001191 	.word	0x08001191
 8001154:	08001199 	.word	0x08001199
 8001158:	080011a1 	.word	0x080011a1
 800115c:	080011ab 	.word	0x080011ab
 8001160:	080011b5 	.word	0x080011b5
 8001164:	080011bf 	.word	0x080011bf
 8001168:	080011c7 	.word	0x080011c7
 800116c:	080011d1 	.word	0x080011d1
 8001170:	080011db 	.word	0x080011db
 8001174:	080011e5 	.word	0x080011e5
 8001178:	080011ed 	.word	0x080011ed
 800117c:	080011f5 	.word	0x080011f5
 8001180:	080011fd 	.word	0x080011fd
 8001184:	08001205 	.word	0x08001205
 8001188:	0800120d 	.word	0x0800120d
 800118c:	08001215 	.word	0x08001215
			  case 0:
				  system_state_transmit[0] = '&' ;
 8001190:	4b3b      	ldr	r3, [pc, #236]	; (8001280 <main+0x250>)
 8001192:	2226      	movs	r2, #38	; 0x26
 8001194:	701a      	strb	r2, [r3, #0]
				  break ;
 8001196:	e042      	b.n	800121e <main+0x1ee>
			  case 1:
				  system_state_transmit[1] = '_' ;
 8001198:	4b39      	ldr	r3, [pc, #228]	; (8001280 <main+0x250>)
 800119a:	225f      	movs	r2, #95	; 0x5f
 800119c:	705a      	strb	r2, [r3, #1]

				  break;
 800119e:	e03e      	b.n	800121e <main+0x1ee>
			  case 2:
				  system_state_transmit[2] = g_temperature[0] ;
 80011a0:	4b30      	ldr	r3, [pc, #192]	; (8001264 <main+0x234>)
 80011a2:	781a      	ldrb	r2, [r3, #0]
 80011a4:	4b36      	ldr	r3, [pc, #216]	; (8001280 <main+0x250>)
 80011a6:	709a      	strb	r2, [r3, #2]

				  break;
 80011a8:	e039      	b.n	800121e <main+0x1ee>
			  case 3:
				  system_state_transmit[3] = g_temperature[1] ;
 80011aa:	4b2e      	ldr	r3, [pc, #184]	; (8001264 <main+0x234>)
 80011ac:	785a      	ldrb	r2, [r3, #1]
 80011ae:	4b34      	ldr	r3, [pc, #208]	; (8001280 <main+0x250>)
 80011b0:	70da      	strb	r2, [r3, #3]

				  break;
 80011b2:	e034      	b.n	800121e <main+0x1ee>
			  case 4:
				  system_state_transmit[4] = g_temperature[2] ;
 80011b4:	4b2b      	ldr	r3, [pc, #172]	; (8001264 <main+0x234>)
 80011b6:	789a      	ldrb	r2, [r3, #2]
 80011b8:	4b31      	ldr	r3, [pc, #196]	; (8001280 <main+0x250>)
 80011ba:	711a      	strb	r2, [r3, #4]

				  break;
 80011bc:	e02f      	b.n	800121e <main+0x1ee>
			  case 5:
				  system_state_transmit[5] = '_' ;
 80011be:	4b30      	ldr	r3, [pc, #192]	; (8001280 <main+0x250>)
 80011c0:	225f      	movs	r2, #95	; 0x5f
 80011c2:	715a      	strb	r2, [r3, #5]

				  break;
 80011c4:	e02b      	b.n	800121e <main+0x1ee>
			  case 6:
				  system_state_transmit[6] = dig_sens_temp[0] ;
 80011c6:	4b2a      	ldr	r3, [pc, #168]	; (8001270 <main+0x240>)
 80011c8:	781a      	ldrb	r2, [r3, #0]
 80011ca:	4b2d      	ldr	r3, [pc, #180]	; (8001280 <main+0x250>)
 80011cc:	719a      	strb	r2, [r3, #6]

				  break;
 80011ce:	e026      	b.n	800121e <main+0x1ee>
			  case 7:
				  system_state_transmit[7] = dig_sens_temp[1] ;
 80011d0:	4b27      	ldr	r3, [pc, #156]	; (8001270 <main+0x240>)
 80011d2:	785a      	ldrb	r2, [r3, #1]
 80011d4:	4b2a      	ldr	r3, [pc, #168]	; (8001280 <main+0x250>)
 80011d6:	71da      	strb	r2, [r3, #7]

				  break;
 80011d8:	e021      	b.n	800121e <main+0x1ee>
			  case 8:
				  system_state_transmit[8] = dig_sens_temp[2] ;
 80011da:	4b25      	ldr	r3, [pc, #148]	; (8001270 <main+0x240>)
 80011dc:	789a      	ldrb	r2, [r3, #2]
 80011de:	4b28      	ldr	r3, [pc, #160]	; (8001280 <main+0x250>)
 80011e0:	721a      	strb	r2, [r3, #8]

				  break;
 80011e2:	e01c      	b.n	800121e <main+0x1ee>
			  case 9:
				  system_state_transmit[9] = '_' ;
 80011e4:	4b26      	ldr	r3, [pc, #152]	; (8001280 <main+0x250>)
 80011e6:	225f      	movs	r2, #95	; 0x5f
 80011e8:	725a      	strb	r2, [r3, #9]

				  break;
 80011ea:	e018      	b.n	800121e <main+0x1ee>
			  case 10:
				  system_state_transmit[10] = '0' ;
 80011ec:	4b24      	ldr	r3, [pc, #144]	; (8001280 <main+0x250>)
 80011ee:	2230      	movs	r2, #48	; 0x30
 80011f0:	729a      	strb	r2, [r3, #10]

				  break;
 80011f2:	e014      	b.n	800121e <main+0x1ee>
			  case 11:
				  system_state_transmit[11] = '0' ;
 80011f4:	4b22      	ldr	r3, [pc, #136]	; (8001280 <main+0x250>)
 80011f6:	2230      	movs	r2, #48	; 0x30
 80011f8:	72da      	strb	r2, [r3, #11]

				  break;
 80011fa:	e010      	b.n	800121e <main+0x1ee>
			  case 12:
				  system_state_transmit[12] = '0' ;
 80011fc:	4b20      	ldr	r3, [pc, #128]	; (8001280 <main+0x250>)
 80011fe:	2230      	movs	r2, #48	; 0x30
 8001200:	731a      	strb	r2, [r3, #12]

				  break;
 8001202:	e00c      	b.n	800121e <main+0x1ee>
			  case 13:
				  system_state_transmit[13] = '_' ;
 8001204:	4b1e      	ldr	r3, [pc, #120]	; (8001280 <main+0x250>)
 8001206:	225f      	movs	r2, #95	; 0x5f
 8001208:	735a      	strb	r2, [r3, #13]

				  break;
 800120a:	e008      	b.n	800121e <main+0x1ee>
			  case 14:
				  system_state_transmit[14] = '*' ;
 800120c:	4b1c      	ldr	r3, [pc, #112]	; (8001280 <main+0x250>)
 800120e:	222a      	movs	r2, #42	; 0x2a
 8001210:	739a      	strb	r2, [r3, #14]

				  break;
 8001212:	e004      	b.n	800121e <main+0x1ee>
			  case 15:
				  system_state_transmit[15] = '\n' ;
 8001214:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <main+0x250>)
 8001216:	220a      	movs	r2, #10
 8001218:	73da      	strb	r2, [r3, #15]

				  break;
 800121a:	e000      	b.n	800121e <main+0x1ee>
			  default:
				  break;
 800121c:	bf00      	nop
		  for(int i = 0; i < 17 ; i++){
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	3301      	adds	r3, #1
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2b10      	cmp	r3, #16
 8001228:	dd8c      	ble.n	8001144 <main+0x114>
			  }
		  }
		  // Transmit system state via the UART
		  if(g_transmit_system_state  == 1){
 800122a:	4b12      	ldr	r3, [pc, #72]	; (8001274 <main+0x244>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	2b01      	cmp	r3, #1
 8001230:	f47f af25 	bne.w	800107e <main+0x4e>
			  g_transmit_system_state = 0;
 8001234:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <main+0x244>)
 8001236:	2200      	movs	r2, #0
 8001238:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit_IT(&huart2, (uint8_t*)system_state_transmit, 16);
 800123a:	2210      	movs	r2, #16
 800123c:	4910      	ldr	r1, [pc, #64]	; (8001280 <main+0x250>)
 800123e:	4803      	ldr	r0, [pc, #12]	; (800124c <main+0x21c>)
 8001240:	f003 f939 	bl	80044b6 <HAL_UART_Transmit_IT>
	  system_state_update() ;
 8001244:	e71b      	b.n	800107e <main+0x4e>
 8001246:	bf00      	nop
 8001248:	20000000 	.word	0x20000000
 800124c:	20000114 	.word	0x20000114
 8001250:	20000010 	.word	0x20000010
 8001254:	20000084 	.word	0x20000084
 8001258:	20000194 	.word	0x20000194
 800125c:	20000193 	.word	0x20000193
 8001260:	20000170 	.word	0x20000170
 8001264:	20000174 	.word	0x20000174
 8001268:	20000178 	.word	0x20000178
 800126c:	200001ba 	.word	0x200001ba
 8001270:	200001bc 	.word	0x200001bc
 8001274:	20000011 	.word	0x20000011
 8001278:	20000198 	.word	0x20000198
 800127c:	40020400 	.word	0x40020400
 8001280:	2000019c 	.word	0x2000019c

08001284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b094      	sub	sp, #80	; 0x50
 8001288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800128a:	f107 0320 	add.w	r3, r7, #32
 800128e:	2230      	movs	r2, #48	; 0x30
 8001290:	2100      	movs	r1, #0
 8001292:	4618      	mov	r0, r3
 8001294:	f004 f8a2 	bl	80053dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001298:	f107 030c 	add.w	r3, r7, #12
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a8:	2300      	movs	r3, #0
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	4b28      	ldr	r3, [pc, #160]	; (8001350 <SystemClock_Config+0xcc>)
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	4a27      	ldr	r2, [pc, #156]	; (8001350 <SystemClock_Config+0xcc>)
 80012b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b6:	6413      	str	r3, [r2, #64]	; 0x40
 80012b8:	4b25      	ldr	r3, [pc, #148]	; (8001350 <SystemClock_Config+0xcc>)
 80012ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012c4:	2300      	movs	r3, #0
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	4b22      	ldr	r3, [pc, #136]	; (8001354 <SystemClock_Config+0xd0>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a21      	ldr	r2, [pc, #132]	; (8001354 <SystemClock_Config+0xd0>)
 80012ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012d2:	6013      	str	r3, [r2, #0]
 80012d4:	4b1f      	ldr	r3, [pc, #124]	; (8001354 <SystemClock_Config+0xd0>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012e0:	2302      	movs	r3, #2
 80012e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012e4:	2301      	movs	r3, #1
 80012e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012e8:	2310      	movs	r3, #16
 80012ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ec:	2302      	movs	r3, #2
 80012ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012f0:	2300      	movs	r3, #0
 80012f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80012f4:	2310      	movs	r3, #16
 80012f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80012f8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80012fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80012fe:	2304      	movs	r3, #4
 8001300:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001302:	2304      	movs	r3, #4
 8001304:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001306:	f107 0320 	add.w	r3, r7, #32
 800130a:	4618      	mov	r0, r3
 800130c:	f001 fcb8 	bl	8002c80 <HAL_RCC_OscConfig>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001316:	f000 fa0d 	bl	8001734 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800131a:	230f      	movs	r3, #15
 800131c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800131e:	2302      	movs	r3, #2
 8001320:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001322:	2300      	movs	r3, #0
 8001324:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001326:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800132a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800132c:	2300      	movs	r3, #0
 800132e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001330:	f107 030c 	add.w	r3, r7, #12
 8001334:	2102      	movs	r1, #2
 8001336:	4618      	mov	r0, r3
 8001338:	f001 ff1a 	bl	8003170 <HAL_RCC_ClockConfig>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001342:	f000 f9f7 	bl	8001734 <Error_Handler>
  }
}
 8001346:	bf00      	nop
 8001348:	3750      	adds	r7, #80	; 0x50
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40023800 	.word	0x40023800
 8001354:	40007000 	.word	0x40007000

08001358 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800135e:	463b      	mov	r3, r7
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800136a:	4b21      	ldr	r3, [pc, #132]	; (80013f0 <MX_ADC1_Init+0x98>)
 800136c:	4a21      	ldr	r2, [pc, #132]	; (80013f4 <MX_ADC1_Init+0x9c>)
 800136e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001370:	4b1f      	ldr	r3, [pc, #124]	; (80013f0 <MX_ADC1_Init+0x98>)
 8001372:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001376:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001378:	4b1d      	ldr	r3, [pc, #116]	; (80013f0 <MX_ADC1_Init+0x98>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800137e:	4b1c      	ldr	r3, [pc, #112]	; (80013f0 <MX_ADC1_Init+0x98>)
 8001380:	2200      	movs	r2, #0
 8001382:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001384:	4b1a      	ldr	r3, [pc, #104]	; (80013f0 <MX_ADC1_Init+0x98>)
 8001386:	2200      	movs	r2, #0
 8001388:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800138a:	4b19      	ldr	r3, [pc, #100]	; (80013f0 <MX_ADC1_Init+0x98>)
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001392:	4b17      	ldr	r3, [pc, #92]	; (80013f0 <MX_ADC1_Init+0x98>)
 8001394:	2200      	movs	r2, #0
 8001396:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001398:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <MX_ADC1_Init+0x98>)
 800139a:	4a17      	ldr	r2, [pc, #92]	; (80013f8 <MX_ADC1_Init+0xa0>)
 800139c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800139e:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <MX_ADC1_Init+0x98>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80013a4:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <MX_ADC1_Init+0x98>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013aa:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <MX_ADC1_Init+0x98>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013b2:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <MX_ADC1_Init+0x98>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013b8:	480d      	ldr	r0, [pc, #52]	; (80013f0 <MX_ADC1_Init+0x98>)
 80013ba:	f000 fd25 	bl	8001e08 <HAL_ADC_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80013c4:	f000 f9b6 	bl	8001734 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80013cc:	2301      	movs	r3, #1
 80013ce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013d0:	2300      	movs	r3, #0
 80013d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013d4:	463b      	mov	r3, r7
 80013d6:	4619      	mov	r1, r3
 80013d8:	4805      	ldr	r0, [pc, #20]	; (80013f0 <MX_ADC1_Init+0x98>)
 80013da:	f000 fea5 	bl	8002128 <HAL_ADC_ConfigChannel>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80013e4:	f000 f9a6 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013e8:	bf00      	nop
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	2000003c 	.word	0x2000003c
 80013f4:	40012000 	.word	0x40012000
 80013f8:	0f000001 	.word	0x0f000001

080013fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	; 0x28
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001402:	f107 0318 	add.w	r3, r7, #24
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001410:	f107 0310 	add.w	r3, r7, #16
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800141a:	463b      	mov	r3, r7
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001426:	4b2c      	ldr	r3, [pc, #176]	; (80014d8 <MX_TIM2_Init+0xdc>)
 8001428:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800142c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 800142e:	4b2a      	ldr	r3, [pc, #168]	; (80014d8 <MX_TIM2_Init+0xdc>)
 8001430:	2253      	movs	r2, #83	; 0x53
 8001432:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001434:	4b28      	ldr	r3, [pc, #160]	; (80014d8 <MX_TIM2_Init+0xdc>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800143a:	4b27      	ldr	r3, [pc, #156]	; (80014d8 <MX_TIM2_Init+0xdc>)
 800143c:	f04f 32ff 	mov.w	r2, #4294967295
 8001440:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001442:	4b25      	ldr	r3, [pc, #148]	; (80014d8 <MX_TIM2_Init+0xdc>)
 8001444:	2200      	movs	r2, #0
 8001446:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001448:	4b23      	ldr	r3, [pc, #140]	; (80014d8 <MX_TIM2_Init+0xdc>)
 800144a:	2200      	movs	r2, #0
 800144c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800144e:	4822      	ldr	r0, [pc, #136]	; (80014d8 <MX_TIM2_Init+0xdc>)
 8001450:	f002 f8ae 	bl	80035b0 <HAL_TIM_Base_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800145a:	f000 f96b 	bl	8001734 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800145e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001462:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001464:	f107 0318 	add.w	r3, r7, #24
 8001468:	4619      	mov	r1, r3
 800146a:	481b      	ldr	r0, [pc, #108]	; (80014d8 <MX_TIM2_Init+0xdc>)
 800146c:	f002 fc06 	bl	8003c7c <HAL_TIM_ConfigClockSource>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001476:	f000 f95d 	bl	8001734 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800147a:	4817      	ldr	r0, [pc, #92]	; (80014d8 <MX_TIM2_Init+0xdc>)
 800147c:	f002 f8e7 	bl	800364e <HAL_TIM_IC_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001486:	f000 f955 	bl	8001734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148a:	2300      	movs	r3, #0
 800148c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800148e:	2300      	movs	r3, #0
 8001490:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001492:	f107 0310 	add.w	r3, r7, #16
 8001496:	4619      	mov	r1, r3
 8001498:	480f      	ldr	r0, [pc, #60]	; (80014d8 <MX_TIM2_Init+0xdc>)
 800149a:	f002 ff3d 	bl	8004318 <HAL_TIMEx_MasterConfigSynchronization>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80014a4:	f000 f946 	bl	8001734 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014a8:	2300      	movs	r3, #0
 80014aa:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014ac:	2301      	movs	r3, #1
 80014ae:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014b0:	2300      	movs	r3, #0
 80014b2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80014b8:	463b      	mov	r3, r7
 80014ba:	2200      	movs	r2, #0
 80014bc:	4619      	mov	r1, r3
 80014be:	4806      	ldr	r0, [pc, #24]	; (80014d8 <MX_TIM2_Init+0xdc>)
 80014c0:	f002 fb40 	bl	8003b44 <HAL_TIM_IC_ConfigChannel>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80014ca:	f000 f933 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014ce:	bf00      	nop
 80014d0:	3728      	adds	r7, #40	; 0x28
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20000084 	.word	0x20000084

080014dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014e2:	f107 0308 	add.w	r3, r7, #8
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f0:	463b      	mov	r3, r7
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014f8:	4b1d      	ldr	r3, [pc, #116]	; (8001570 <MX_TIM3_Init+0x94>)
 80014fa:	4a1e      	ldr	r2, [pc, #120]	; (8001574 <MX_TIM3_Init+0x98>)
 80014fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80014fe:	4b1c      	ldr	r3, [pc, #112]	; (8001570 <MX_TIM3_Init+0x94>)
 8001500:	2200      	movs	r2, #0
 8001502:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001504:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <MX_TIM3_Init+0x94>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800150a:	4b19      	ldr	r3, [pc, #100]	; (8001570 <MX_TIM3_Init+0x94>)
 800150c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001510:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001512:	4b17      	ldr	r3, [pc, #92]	; (8001570 <MX_TIM3_Init+0x94>)
 8001514:	2200      	movs	r2, #0
 8001516:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001518:	4b15      	ldr	r3, [pc, #84]	; (8001570 <MX_TIM3_Init+0x94>)
 800151a:	2200      	movs	r2, #0
 800151c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800151e:	4814      	ldr	r0, [pc, #80]	; (8001570 <MX_TIM3_Init+0x94>)
 8001520:	f002 f846 	bl	80035b0 <HAL_TIM_Base_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800152a:	f000 f903 	bl	8001734 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800152e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001532:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001534:	f107 0308 	add.w	r3, r7, #8
 8001538:	4619      	mov	r1, r3
 800153a:	480d      	ldr	r0, [pc, #52]	; (8001570 <MX_TIM3_Init+0x94>)
 800153c:	f002 fb9e 	bl	8003c7c <HAL_TIM_ConfigClockSource>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001546:	f000 f8f5 	bl	8001734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800154a:	2300      	movs	r3, #0
 800154c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800154e:	2300      	movs	r3, #0
 8001550:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001552:	463b      	mov	r3, r7
 8001554:	4619      	mov	r1, r3
 8001556:	4806      	ldr	r0, [pc, #24]	; (8001570 <MX_TIM3_Init+0x94>)
 8001558:	f002 fede 	bl	8004318 <HAL_TIMEx_MasterConfigSynchronization>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001562:	f000 f8e7 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001566:	bf00      	nop
 8001568:	3718      	adds	r7, #24
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	200000cc 	.word	0x200000cc
 8001574:	40000400 	.word	0x40000400

08001578 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800157c:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <MX_USART2_UART_Init+0x50>)
 800157e:	4a13      	ldr	r2, [pc, #76]	; (80015cc <MX_USART2_UART_Init+0x54>)
 8001580:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001582:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <MX_USART2_UART_Init+0x50>)
 8001584:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001588:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800158a:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <MX_USART2_UART_Init+0x50>)
 800158c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001590:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001592:	4b0d      	ldr	r3, [pc, #52]	; (80015c8 <MX_USART2_UART_Init+0x50>)
 8001594:	2200      	movs	r2, #0
 8001596:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_ODD;
 8001598:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <MX_USART2_UART_Init+0x50>)
 800159a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800159e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015a0:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <MX_USART2_UART_Init+0x50>)
 80015a2:	220c      	movs	r2, #12
 80015a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015a6:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <MX_USART2_UART_Init+0x50>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <MX_USART2_UART_Init+0x50>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015b2:	4805      	ldr	r0, [pc, #20]	; (80015c8 <MX_USART2_UART_Init+0x50>)
 80015b4:	f002 ff32 	bl	800441c <HAL_UART_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 80015be:	f000 f8b9 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000114 	.word	0x20000114
 80015cc:	40004400 	.word	0x40004400

080015d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08a      	sub	sp, #40	; 0x28
 80015d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]
 80015e2:	60da      	str	r2, [r3, #12]
 80015e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	4b4e      	ldr	r3, [pc, #312]	; (8001724 <MX_GPIO_Init+0x154>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a4d      	ldr	r2, [pc, #308]	; (8001724 <MX_GPIO_Init+0x154>)
 80015f0:	f043 0304 	orr.w	r3, r3, #4
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b4b      	ldr	r3, [pc, #300]	; (8001724 <MX_GPIO_Init+0x154>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f003 0304 	and.w	r3, r3, #4
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	4b47      	ldr	r3, [pc, #284]	; (8001724 <MX_GPIO_Init+0x154>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a46      	ldr	r2, [pc, #280]	; (8001724 <MX_GPIO_Init+0x154>)
 800160c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b44      	ldr	r3, [pc, #272]	; (8001724 <MX_GPIO_Init+0x154>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	4b40      	ldr	r3, [pc, #256]	; (8001724 <MX_GPIO_Init+0x154>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4a3f      	ldr	r2, [pc, #252]	; (8001724 <MX_GPIO_Init+0x154>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4b3d      	ldr	r3, [pc, #244]	; (8001724 <MX_GPIO_Init+0x154>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	60bb      	str	r3, [r7, #8]
 8001638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	607b      	str	r3, [r7, #4]
 800163e:	4b39      	ldr	r3, [pc, #228]	; (8001724 <MX_GPIO_Init+0x154>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	4a38      	ldr	r2, [pc, #224]	; (8001724 <MX_GPIO_Init+0x154>)
 8001644:	f043 0302 	orr.w	r3, r3, #2
 8001648:	6313      	str	r3, [r2, #48]	; 0x30
 800164a:	4b36      	ldr	r3, [pc, #216]	; (8001724 <MX_GPIO_Init+0x154>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	607b      	str	r3, [r7, #4]
 8001654:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8001656:	2200      	movs	r2, #0
 8001658:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800165c:	4832      	ldr	r0, [pc, #200]	; (8001728 <MX_GPIO_Init+0x158>)
 800165e:	f001 fad1 	bl	8002c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001662:	2200      	movs	r2, #0
 8001664:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8001668:	4830      	ldr	r0, [pc, #192]	; (800172c <MX_GPIO_Init+0x15c>)
 800166a:	f001 facb 	bl	8002c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800166e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001672:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001674:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001678:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	4619      	mov	r1, r3
 8001684:	482a      	ldr	r0, [pc, #168]	; (8001730 <MX_GPIO_Init+0x160>)
 8001686:	f001 f921 	bl	80028cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_10;
 800168a:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800168e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001690:	2301      	movs	r3, #1
 8001692:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001698:	2300      	movs	r3, #0
 800169a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	4619      	mov	r1, r3
 80016a2:	4821      	ldr	r0, [pc, #132]	; (8001728 <MX_GPIO_Init+0x158>)
 80016a4:	f001 f912 	bl	80028cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016a8:	23c0      	movs	r3, #192	; 0xc0
 80016aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80016ac:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80016b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016b2:	2301      	movs	r3, #1
 80016b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b6:	f107 0314 	add.w	r3, r7, #20
 80016ba:	4619      	mov	r1, r3
 80016bc:	481a      	ldr	r0, [pc, #104]	; (8001728 <MX_GPIO_Init+0x158>)
 80016be:	f001 f905 	bl	80028cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 80016c2:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80016c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c8:	2301      	movs	r3, #1
 80016ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d0:	2300      	movs	r3, #0
 80016d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	4619      	mov	r1, r3
 80016da:	4814      	ldr	r0, [pc, #80]	; (800172c <MX_GPIO_Init+0x15c>)
 80016dc:	f001 f8f6 	bl	80028cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80016e6:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80016ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016ec:	2301      	movs	r3, #1
 80016ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f0:	f107 0314 	add.w	r3, r7, #20
 80016f4:	4619      	mov	r1, r3
 80016f6:	480d      	ldr	r0, [pc, #52]	; (800172c <MX_GPIO_Init+0x15c>)
 80016f8:	f001 f8e8 	bl	80028cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80016fc:	2200      	movs	r2, #0
 80016fe:	2100      	movs	r1, #0
 8001700:	2017      	movs	r0, #23
 8001702:	f001 f81a 	bl	800273a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001706:	2017      	movs	r0, #23
 8001708:	f001 f833 	bl	8002772 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800170c:	2200      	movs	r2, #0
 800170e:	2100      	movs	r1, #0
 8001710:	2028      	movs	r0, #40	; 0x28
 8001712:	f001 f812 	bl	800273a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001716:	2028      	movs	r0, #40	; 0x28
 8001718:	f001 f82b 	bl	8002772 <HAL_NVIC_EnableIRQ>

}
 800171c:	bf00      	nop
 800171e:	3728      	adds	r7, #40	; 0x28
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40023800 	.word	0x40023800
 8001728:	40020000 	.word	0x40020000
 800172c:	40020400 	.word	0x40020400
 8001730:	40020800 	.word	0x40020800

08001734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001738:	b672      	cpsid	i
}
 800173a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800173c:	e7fe      	b.n	800173c <Error_Handler+0x8>
	...

08001740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	607b      	str	r3, [r7, #4]
 800174a:	4b10      	ldr	r3, [pc, #64]	; (800178c <HAL_MspInit+0x4c>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174e:	4a0f      	ldr	r2, [pc, #60]	; (800178c <HAL_MspInit+0x4c>)
 8001750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001754:	6453      	str	r3, [r2, #68]	; 0x44
 8001756:	4b0d      	ldr	r3, [pc, #52]	; (800178c <HAL_MspInit+0x4c>)
 8001758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	603b      	str	r3, [r7, #0]
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <HAL_MspInit+0x4c>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	4a08      	ldr	r2, [pc, #32]	; (800178c <HAL_MspInit+0x4c>)
 800176c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001770:	6413      	str	r3, [r2, #64]	; 0x40
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_MspInit+0x4c>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177a:	603b      	str	r3, [r7, #0]
 800177c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800177e:	2007      	movs	r0, #7
 8001780:	f000 ffd0 	bl	8002724 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001784:	bf00      	nop
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40023800 	.word	0x40023800

08001790 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08a      	sub	sp, #40	; 0x28
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a17      	ldr	r2, [pc, #92]	; (800180c <HAL_ADC_MspInit+0x7c>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d127      	bne.n	8001802 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	613b      	str	r3, [r7, #16]
 80017b6:	4b16      	ldr	r3, [pc, #88]	; (8001810 <HAL_ADC_MspInit+0x80>)
 80017b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ba:	4a15      	ldr	r2, [pc, #84]	; (8001810 <HAL_ADC_MspInit+0x80>)
 80017bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c0:	6453      	str	r3, [r2, #68]	; 0x44
 80017c2:	4b13      	ldr	r3, [pc, #76]	; (8001810 <HAL_ADC_MspInit+0x80>)
 80017c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ca:	613b      	str	r3, [r7, #16]
 80017cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <HAL_ADC_MspInit+0x80>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	4a0e      	ldr	r2, [pc, #56]	; (8001810 <HAL_ADC_MspInit+0x80>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	6313      	str	r3, [r2, #48]	; 0x30
 80017de:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <HAL_ADC_MspInit+0x80>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017ea:	2301      	movs	r3, #1
 80017ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017ee:	2303      	movs	r3, #3
 80017f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f6:	f107 0314 	add.w	r3, r7, #20
 80017fa:	4619      	mov	r1, r3
 80017fc:	4805      	ldr	r0, [pc, #20]	; (8001814 <HAL_ADC_MspInit+0x84>)
 80017fe:	f001 f865 	bl	80028cc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001802:	bf00      	nop
 8001804:	3728      	adds	r7, #40	; 0x28
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40012000 	.word	0x40012000
 8001810:	40023800 	.word	0x40023800
 8001814:	40020000 	.word	0x40020000

08001818 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b08a      	sub	sp, #40	; 0x28
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001838:	d135      	bne.n	80018a6 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	613b      	str	r3, [r7, #16]
 800183e:	4b25      	ldr	r3, [pc, #148]	; (80018d4 <HAL_TIM_Base_MspInit+0xbc>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	4a24      	ldr	r2, [pc, #144]	; (80018d4 <HAL_TIM_Base_MspInit+0xbc>)
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	6413      	str	r3, [r2, #64]	; 0x40
 800184a:	4b22      	ldr	r3, [pc, #136]	; (80018d4 <HAL_TIM_Base_MspInit+0xbc>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	613b      	str	r3, [r7, #16]
 8001854:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	4b1e      	ldr	r3, [pc, #120]	; (80018d4 <HAL_TIM_Base_MspInit+0xbc>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	4a1d      	ldr	r2, [pc, #116]	; (80018d4 <HAL_TIM_Base_MspInit+0xbc>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	6313      	str	r3, [r2, #48]	; 0x30
 8001866:	4b1b      	ldr	r3, [pc, #108]	; (80018d4 <HAL_TIM_Base_MspInit+0xbc>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001872:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001876:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001878:	2302      	movs	r3, #2
 800187a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187c:	2300      	movs	r3, #0
 800187e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001880:	2300      	movs	r3, #0
 8001882:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001884:	2301      	movs	r3, #1
 8001886:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001888:	f107 0314 	add.w	r3, r7, #20
 800188c:	4619      	mov	r1, r3
 800188e:	4812      	ldr	r0, [pc, #72]	; (80018d8 <HAL_TIM_Base_MspInit+0xc0>)
 8001890:	f001 f81c 	bl	80028cc <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001894:	2200      	movs	r2, #0
 8001896:	2100      	movs	r1, #0
 8001898:	201c      	movs	r0, #28
 800189a:	f000 ff4e 	bl	800273a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800189e:	201c      	movs	r0, #28
 80018a0:	f000 ff67 	bl	8002772 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80018a4:	e012      	b.n	80018cc <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM3)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a0c      	ldr	r2, [pc, #48]	; (80018dc <HAL_TIM_Base_MspInit+0xc4>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d10d      	bne.n	80018cc <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018b0:	2300      	movs	r3, #0
 80018b2:	60bb      	str	r3, [r7, #8]
 80018b4:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <HAL_TIM_Base_MspInit+0xbc>)
 80018b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b8:	4a06      	ldr	r2, [pc, #24]	; (80018d4 <HAL_TIM_Base_MspInit+0xbc>)
 80018ba:	f043 0302 	orr.w	r3, r3, #2
 80018be:	6413      	str	r3, [r2, #64]	; 0x40
 80018c0:	4b04      	ldr	r3, [pc, #16]	; (80018d4 <HAL_TIM_Base_MspInit+0xbc>)
 80018c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c4:	f003 0302 	and.w	r3, r3, #2
 80018c8:	60bb      	str	r3, [r7, #8]
 80018ca:	68bb      	ldr	r3, [r7, #8]
}
 80018cc:	bf00      	nop
 80018ce:	3728      	adds	r7, #40	; 0x28
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40023800 	.word	0x40023800
 80018d8:	40020000 	.word	0x40020000
 80018dc:	40000400 	.word	0x40000400

080018e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08a      	sub	sp, #40	; 0x28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a1d      	ldr	r2, [pc, #116]	; (8001974 <HAL_UART_MspInit+0x94>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d133      	bne.n	800196a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	613b      	str	r3, [r7, #16]
 8001906:	4b1c      	ldr	r3, [pc, #112]	; (8001978 <HAL_UART_MspInit+0x98>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	4a1b      	ldr	r2, [pc, #108]	; (8001978 <HAL_UART_MspInit+0x98>)
 800190c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001910:	6413      	str	r3, [r2, #64]	; 0x40
 8001912:	4b19      	ldr	r3, [pc, #100]	; (8001978 <HAL_UART_MspInit+0x98>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191a:	613b      	str	r3, [r7, #16]
 800191c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	4b15      	ldr	r3, [pc, #84]	; (8001978 <HAL_UART_MspInit+0x98>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	4a14      	ldr	r2, [pc, #80]	; (8001978 <HAL_UART_MspInit+0x98>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	6313      	str	r3, [r2, #48]	; 0x30
 800192e:	4b12      	ldr	r3, [pc, #72]	; (8001978 <HAL_UART_MspInit+0x98>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800193a:	230c      	movs	r3, #12
 800193c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193e:	2302      	movs	r3, #2
 8001940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001946:	2303      	movs	r3, #3
 8001948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800194a:	2307      	movs	r3, #7
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194e:	f107 0314 	add.w	r3, r7, #20
 8001952:	4619      	mov	r1, r3
 8001954:	4809      	ldr	r0, [pc, #36]	; (800197c <HAL_UART_MspInit+0x9c>)
 8001956:	f000 ffb9 	bl	80028cc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800195a:	2200      	movs	r2, #0
 800195c:	2100      	movs	r1, #0
 800195e:	2026      	movs	r0, #38	; 0x26
 8001960:	f000 feeb 	bl	800273a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001964:	2026      	movs	r0, #38	; 0x26
 8001966:	f000 ff04 	bl	8002772 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800196a:	bf00      	nop
 800196c:	3728      	adds	r7, #40	; 0x28
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40004400 	.word	0x40004400
 8001978:	40023800 	.word	0x40023800
 800197c:	40020000 	.word	0x40020000

08001980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001984:	e7fe      	b.n	8001984 <NMI_Handler+0x4>

08001986 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800198a:	e7fe      	b.n	800198a <HardFault_Handler+0x4>

0800198c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001990:	e7fe      	b.n	8001990 <MemManage_Handler+0x4>

08001992 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001996:	e7fe      	b.n	8001996 <BusFault_Handler+0x4>

08001998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800199c:	e7fe      	b.n	800199c <UsageFault_Handler+0x4>

0800199e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ba:	b480      	push	{r7}
 80019bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019cc:	f000 f9d8 	bl	8001d80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019d0:	bf00      	nop
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_8) != RESET){
 80019d8:	4b8a      	ldr	r3, [pc, #552]	; (8001c04 <EXTI9_5_IRQHandler+0x230>)
 80019da:	695b      	ldr	r3, [r3, #20]
 80019dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d039      	beq.n	8001a58 <EXTI9_5_IRQHandler+0x84>


		if(HAL_GetTick() - ticks_pressed >= 20){
 80019e4:	f000 f9e0 	bl	8001da8 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	4b87      	ldr	r3, [pc, #540]	; (8001c08 <EXTI9_5_IRQHandler+0x234>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b13      	cmp	r3, #19
 80019f2:	d92c      	bls.n	8001a4e <EXTI9_5_IRQHandler+0x7a>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == 0){
 80019f4:	4b85      	ldr	r3, [pc, #532]	; (8001c0c <EXTI9_5_IRQHandler+0x238>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d112      	bne.n	8001a24 <EXTI9_5_IRQHandler+0x50>
 80019fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a02:	4883      	ldr	r0, [pc, #524]	; (8001c10 <EXTI9_5_IRQHandler+0x23c>)
 8001a04:	f001 f8e6 	bl	8002bd4 <HAL_GPIO_ReadPin>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d10a      	bne.n	8001a24 <EXTI9_5_IRQHandler+0x50>
				button_state =0 ; // stable low reached
 8001a0e:	4b7f      	ldr	r3, [pc, #508]	; (8001c0c <EXTI9_5_IRQHandler+0x238>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 8001a14:	f000 f9c8 	bl	8001da8 <HAL_GetTick>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	4a7b      	ldr	r2, [pc, #492]	; (8001c08 <EXTI9_5_IRQHandler+0x234>)
 8001a1c:	6013      	str	r3, [r2, #0]

				g_left_button_pressed =1;
 8001a1e:	4b7d      	ldr	r3, [pc, #500]	; (8001c14 <EXTI9_5_IRQHandler+0x240>)
 8001a20:	2201      	movs	r2, #1
 8001a22:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOB ,GPIO_PIN_8) == 1 ){
 8001a24:	4b79      	ldr	r3, [pc, #484]	; (8001c0c <EXTI9_5_IRQHandler+0x238>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10f      	bne.n	8001a4e <EXTI9_5_IRQHandler+0x7a>
 8001a2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a32:	4877      	ldr	r0, [pc, #476]	; (8001c10 <EXTI9_5_IRQHandler+0x23c>)
 8001a34:	f001 f8ce 	bl	8002bd4 <HAL_GPIO_ReadPin>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d107      	bne.n	8001a4e <EXTI9_5_IRQHandler+0x7a>
				ticks_pressed = HAL_GetTick() ;
 8001a3e:	f000 f9b3 	bl	8001da8 <HAL_GetTick>
 8001a42:	4603      	mov	r3, r0
 8001a44:	4a70      	ldr	r2, [pc, #448]	; (8001c08 <EXTI9_5_IRQHandler+0x234>)
 8001a46:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 8001a48:	4b70      	ldr	r3, [pc, #448]	; (8001c0c <EXTI9_5_IRQHandler+0x238>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	701a      	strb	r2, [r3, #0]

			}
		}
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8) ;
 8001a4e:	4b6d      	ldr	r3, [pc, #436]	; (8001c04 <EXTI9_5_IRQHandler+0x230>)
 8001a50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a54:	615a      	str	r2, [r3, #20]
 8001a56:	e0c5      	b.n	8001be4 <EXTI9_5_IRQHandler+0x210>
	}

	else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_9) != RESET){
 8001a58:	4b6a      	ldr	r3, [pc, #424]	; (8001c04 <EXTI9_5_IRQHandler+0x230>)
 8001a5a:	695b      	ldr	r3, [r3, #20]
 8001a5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d039      	beq.n	8001ad8 <EXTI9_5_IRQHandler+0x104>



		if(HAL_GetTick() - ticks_pressed >= 20){
 8001a64:	f000 f9a0 	bl	8001da8 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	4b67      	ldr	r3, [pc, #412]	; (8001c08 <EXTI9_5_IRQHandler+0x234>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b13      	cmp	r3, #19
 8001a72:	d92c      	bls.n	8001ace <EXTI9_5_IRQHandler+0xfa>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0){
 8001a74:	4b65      	ldr	r3, [pc, #404]	; (8001c0c <EXTI9_5_IRQHandler+0x238>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d112      	bne.n	8001aa4 <EXTI9_5_IRQHandler+0xd0>
 8001a7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a82:	4863      	ldr	r0, [pc, #396]	; (8001c10 <EXTI9_5_IRQHandler+0x23c>)
 8001a84:	f001 f8a6 	bl	8002bd4 <HAL_GPIO_ReadPin>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d10a      	bne.n	8001aa4 <EXTI9_5_IRQHandler+0xd0>
				button_state =0 ; // stable low reached
 8001a8e:	4b5f      	ldr	r3, [pc, #380]	; (8001c0c <EXTI9_5_IRQHandler+0x238>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 8001a94:	f000 f988 	bl	8001da8 <HAL_GetTick>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	4a5b      	ldr	r2, [pc, #364]	; (8001c08 <EXTI9_5_IRQHandler+0x234>)
 8001a9c:	6013      	str	r3, [r2, #0]

				g_top_button_pressed = 1 ;
 8001a9e:	4b5e      	ldr	r3, [pc, #376]	; (8001c18 <EXTI9_5_IRQHandler+0x244>)
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOB ,GPIO_PIN_9) == 1 ){
 8001aa4:	4b59      	ldr	r3, [pc, #356]	; (8001c0c <EXTI9_5_IRQHandler+0x238>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d10f      	bne.n	8001ace <EXTI9_5_IRQHandler+0xfa>
 8001aae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ab2:	4857      	ldr	r0, [pc, #348]	; (8001c10 <EXTI9_5_IRQHandler+0x23c>)
 8001ab4:	f001 f88e 	bl	8002bd4 <HAL_GPIO_ReadPin>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d107      	bne.n	8001ace <EXTI9_5_IRQHandler+0xfa>
				ticks_pressed = HAL_GetTick() ;
 8001abe:	f000 f973 	bl	8001da8 <HAL_GetTick>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	4a50      	ldr	r2, [pc, #320]	; (8001c08 <EXTI9_5_IRQHandler+0x234>)
 8001ac6:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 8001ac8:	4b50      	ldr	r3, [pc, #320]	; (8001c0c <EXTI9_5_IRQHandler+0x238>)
 8001aca:	2201      	movs	r2, #1
 8001acc:	701a      	strb	r2, [r3, #0]

			}
		}

		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_9) ;
 8001ace:	4b4d      	ldr	r3, [pc, #308]	; (8001c04 <EXTI9_5_IRQHandler+0x230>)
 8001ad0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ad4:	615a      	str	r2, [r3, #20]
 8001ad6:	e085      	b.n	8001be4 <EXTI9_5_IRQHandler+0x210>

	}

	else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_6) != RESET){
 8001ad8:	4b4a      	ldr	r3, [pc, #296]	; (8001c04 <EXTI9_5_IRQHandler+0x230>)
 8001ada:	695b      	ldr	r3, [r3, #20]
 8001adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d036      	beq.n	8001b52 <EXTI9_5_IRQHandler+0x17e>



		if(HAL_GetTick() - ticks_pressed >= 20){
 8001ae4:	f000 f960 	bl	8001da8 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	4b47      	ldr	r3, [pc, #284]	; (8001c08 <EXTI9_5_IRQHandler+0x234>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b13      	cmp	r3, #19
 8001af2:	d92a      	bls.n	8001b4a <EXTI9_5_IRQHandler+0x176>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 0){
 8001af4:	4b45      	ldr	r3, [pc, #276]	; (8001c0c <EXTI9_5_IRQHandler+0x238>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d111      	bne.n	8001b22 <EXTI9_5_IRQHandler+0x14e>
 8001afe:	2140      	movs	r1, #64	; 0x40
 8001b00:	4846      	ldr	r0, [pc, #280]	; (8001c1c <EXTI9_5_IRQHandler+0x248>)
 8001b02:	f001 f867 	bl	8002bd4 <HAL_GPIO_ReadPin>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d10a      	bne.n	8001b22 <EXTI9_5_IRQHandler+0x14e>
				button_state =0 ; // stable low reached
 8001b0c:	4b3f      	ldr	r3, [pc, #252]	; (8001c0c <EXTI9_5_IRQHandler+0x238>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 8001b12:	f000 f949 	bl	8001da8 <HAL_GetTick>
 8001b16:	4603      	mov	r3, r0
 8001b18:	4a3b      	ldr	r2, [pc, #236]	; (8001c08 <EXTI9_5_IRQHandler+0x234>)
 8001b1a:	6013      	str	r3, [r2, #0]

				g_middle_button_pressed =1 ;
 8001b1c:	4b40      	ldr	r3, [pc, #256]	; (8001c20 <EXTI9_5_IRQHandler+0x24c>)
 8001b1e:	2201      	movs	r2, #1
 8001b20:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOA ,GPIO_PIN_6) == 1 ){
 8001b22:	4b3a      	ldr	r3, [pc, #232]	; (8001c0c <EXTI9_5_IRQHandler+0x238>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d10e      	bne.n	8001b4a <EXTI9_5_IRQHandler+0x176>
 8001b2c:	2140      	movs	r1, #64	; 0x40
 8001b2e:	483b      	ldr	r0, [pc, #236]	; (8001c1c <EXTI9_5_IRQHandler+0x248>)
 8001b30:	f001 f850 	bl	8002bd4 <HAL_GPIO_ReadPin>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d107      	bne.n	8001b4a <EXTI9_5_IRQHandler+0x176>
				ticks_pressed = HAL_GetTick() ;
 8001b3a:	f000 f935 	bl	8001da8 <HAL_GetTick>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	4a31      	ldr	r2, [pc, #196]	; (8001c08 <EXTI9_5_IRQHandler+0x234>)
 8001b42:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 8001b44:	4b31      	ldr	r3, [pc, #196]	; (8001c0c <EXTI9_5_IRQHandler+0x238>)
 8001b46:	2201      	movs	r2, #1
 8001b48:	701a      	strb	r2, [r3, #0]

			}
		}


		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6) ;
 8001b4a:	4b2e      	ldr	r3, [pc, #184]	; (8001c04 <EXTI9_5_IRQHandler+0x230>)
 8001b4c:	2240      	movs	r2, #64	; 0x40
 8001b4e:	615a      	str	r2, [r3, #20]
 8001b50:	e048      	b.n	8001be4 <EXTI9_5_IRQHandler+0x210>

	}

	else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET){
 8001b52:	4b2c      	ldr	r3, [pc, #176]	; (8001c04 <EXTI9_5_IRQHandler+0x230>)
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d036      	beq.n	8001bcc <EXTI9_5_IRQHandler+0x1f8>




		if(HAL_GetTick() - ticks_pressed >= 20){
 8001b5e:	f000 f923 	bl	8001da8 <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	4b28      	ldr	r3, [pc, #160]	; (8001c08 <EXTI9_5_IRQHandler+0x234>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b13      	cmp	r3, #19
 8001b6c:	d92a      	bls.n	8001bc4 <EXTI9_5_IRQHandler+0x1f0>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 0){
 8001b6e:	4b27      	ldr	r3, [pc, #156]	; (8001c0c <EXTI9_5_IRQHandler+0x238>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d111      	bne.n	8001b9c <EXTI9_5_IRQHandler+0x1c8>
 8001b78:	2180      	movs	r1, #128	; 0x80
 8001b7a:	4828      	ldr	r0, [pc, #160]	; (8001c1c <EXTI9_5_IRQHandler+0x248>)
 8001b7c:	f001 f82a 	bl	8002bd4 <HAL_GPIO_ReadPin>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d10a      	bne.n	8001b9c <EXTI9_5_IRQHandler+0x1c8>
				button_state =0 ; // stable low reached
 8001b86:	4b21      	ldr	r3, [pc, #132]	; (8001c0c <EXTI9_5_IRQHandler+0x238>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 8001b8c:	f000 f90c 	bl	8001da8 <HAL_GetTick>
 8001b90:	4603      	mov	r3, r0
 8001b92:	4a1d      	ldr	r2, [pc, #116]	; (8001c08 <EXTI9_5_IRQHandler+0x234>)
 8001b94:	6013      	str	r3, [r2, #0]

				g_right_button_pressed = 1 ;
 8001b96:	4b23      	ldr	r3, [pc, #140]	; (8001c24 <EXTI9_5_IRQHandler+0x250>)
 8001b98:	2201      	movs	r2, #1
 8001b9a:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOA ,GPIO_PIN_7) == 1 ){
 8001b9c:	4b1b      	ldr	r3, [pc, #108]	; (8001c0c <EXTI9_5_IRQHandler+0x238>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d10e      	bne.n	8001bc4 <EXTI9_5_IRQHandler+0x1f0>
 8001ba6:	2180      	movs	r1, #128	; 0x80
 8001ba8:	481c      	ldr	r0, [pc, #112]	; (8001c1c <EXTI9_5_IRQHandler+0x248>)
 8001baa:	f001 f813 	bl	8002bd4 <HAL_GPIO_ReadPin>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d107      	bne.n	8001bc4 <EXTI9_5_IRQHandler+0x1f0>
				ticks_pressed = HAL_GetTick() ;
 8001bb4:	f000 f8f8 	bl	8001da8 <HAL_GetTick>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	4a13      	ldr	r2, [pc, #76]	; (8001c08 <EXTI9_5_IRQHandler+0x234>)
 8001bbc:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 8001bbe:	4b13      	ldr	r3, [pc, #76]	; (8001c0c <EXTI9_5_IRQHandler+0x238>)
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	701a      	strb	r2, [r3, #0]

			}
		}
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7) ;
 8001bc4:	4b0f      	ldr	r3, [pc, #60]	; (8001c04 <EXTI9_5_IRQHandler+0x230>)
 8001bc6:	2280      	movs	r2, #128	; 0x80
 8001bc8:	615a      	str	r2, [r3, #20]
 8001bca:	e00b      	b.n	8001be4 <EXTI9_5_IRQHandler+0x210>
	}

	else{

		if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET){
 8001bcc:	4b0d      	ldr	r3, [pc, #52]	; (8001c04 <EXTI9_5_IRQHandler+0x230>)
 8001bce:	695b      	ldr	r3, [r3, #20]
 8001bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d005      	beq.n	8001be4 <EXTI9_5_IRQHandler+0x210>

			g_bottom_button_pressed = 1 ;
 8001bd8:	4b13      	ldr	r3, [pc, #76]	; (8001c28 <EXTI9_5_IRQHandler+0x254>)
 8001bda:	2201      	movs	r2, #1
 8001bdc:	701a      	strb	r2, [r3, #0]

			__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7) ;
 8001bde:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <EXTI9_5_IRQHandler+0x230>)
 8001be0:	2280      	movs	r2, #128	; 0x80
 8001be2:	615a      	str	r2, [r3, #20]
		}
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001be4:	2040      	movs	r0, #64	; 0x40
 8001be6:	f001 f827 	bl	8002c38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001bea:	2080      	movs	r0, #128	; 0x80
 8001bec:	f001 f824 	bl	8002c38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001bf0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001bf4:	f001 f820 	bl	8002c38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001bf8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001bfc:	f001 f81c 	bl	8002c38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c00:	bf00      	nop
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40013c00 	.word	0x40013c00
 8001c08:	200001c4 	.word	0x200001c4
 8001c0c:	20000012 	.word	0x20000012
 8001c10:	40020400 	.word	0x40020400
 8001c14:	200001bf 	.word	0x200001bf
 8001c18:	200001c1 	.word	0x200001c1
 8001c1c:	40020000 	.word	0x40020000
 8001c20:	200001c3 	.word	0x200001c3
 8001c24:	200001c0 	.word	0x200001c0
 8001c28:	200001c2 	.word	0x200001c2

08001c2c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c30:	4802      	ldr	r0, [pc, #8]	; (8001c3c <TIM2_IRQHandler+0x10>)
 8001c32:	f001 fe7f 	bl	8003934 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000084 	.word	0x20000084

08001c40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c44:	4802      	ldr	r0, [pc, #8]	; (8001c50 <USART2_IRQHandler+0x10>)
 8001c46:	f002 fcab 	bl	80045a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20000114 	.word	0x20000114

08001c54 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001c58:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c5c:	f000 ffec 	bl	8002c38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c60:	bf00      	nop
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c68:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <SystemInit+0x20>)
 8001c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c6e:	4a05      	ldr	r2, [pc, #20]	; (8001c84 <SystemInit+0x20>)
 8001c70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cc0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c8c:	480d      	ldr	r0, [pc, #52]	; (8001cc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c8e:	490e      	ldr	r1, [pc, #56]	; (8001cc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c90:	4a0e      	ldr	r2, [pc, #56]	; (8001ccc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c94:	e002      	b.n	8001c9c <LoopCopyDataInit>

08001c96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c9a:	3304      	adds	r3, #4

08001c9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ca0:	d3f9      	bcc.n	8001c96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ca2:	4a0b      	ldr	r2, [pc, #44]	; (8001cd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ca4:	4c0b      	ldr	r4, [pc, #44]	; (8001cd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ca6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ca8:	e001      	b.n	8001cae <LoopFillZerobss>

08001caa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001caa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cac:	3204      	adds	r2, #4

08001cae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cb0:	d3fb      	bcc.n	8001caa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cb2:	f7ff ffd7 	bl	8001c64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cb6:	f003 fb6d 	bl	8005394 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cba:	f7ff f9b9 	bl	8001030 <main>
  bx  lr    
 8001cbe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cc8:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001ccc:	0800542c 	.word	0x0800542c
  ldr r2, =_sbss
 8001cd0:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001cd4:	200001d0 	.word	0x200001d0

08001cd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cd8:	e7fe      	b.n	8001cd8 <ADC_IRQHandler>
	...

08001cdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ce0:	4b0e      	ldr	r3, [pc, #56]	; (8001d1c <HAL_Init+0x40>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a0d      	ldr	r2, [pc, #52]	; (8001d1c <HAL_Init+0x40>)
 8001ce6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cec:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <HAL_Init+0x40>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a0a      	ldr	r2, [pc, #40]	; (8001d1c <HAL_Init+0x40>)
 8001cf2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cf6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cf8:	4b08      	ldr	r3, [pc, #32]	; (8001d1c <HAL_Init+0x40>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a07      	ldr	r2, [pc, #28]	; (8001d1c <HAL_Init+0x40>)
 8001cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d04:	2003      	movs	r0, #3
 8001d06:	f000 fd0d 	bl	8002724 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d0a:	2000      	movs	r0, #0
 8001d0c:	f000 f808 	bl	8001d20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d10:	f7ff fd16 	bl	8001740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40023c00 	.word	0x40023c00

08001d20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d28:	4b12      	ldr	r3, [pc, #72]	; (8001d74 <HAL_InitTick+0x54>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	4b12      	ldr	r3, [pc, #72]	; (8001d78 <HAL_InitTick+0x58>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	4619      	mov	r1, r3
 8001d32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f000 fd25 	bl	800278e <HAL_SYSTICK_Config>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e00e      	b.n	8001d6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b0f      	cmp	r3, #15
 8001d52:	d80a      	bhi.n	8001d6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d54:	2200      	movs	r2, #0
 8001d56:	6879      	ldr	r1, [r7, #4]
 8001d58:	f04f 30ff 	mov.w	r0, #4294967295
 8001d5c:	f000 fced 	bl	800273a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d60:	4a06      	ldr	r2, [pc, #24]	; (8001d7c <HAL_InitTick+0x5c>)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
 8001d68:	e000      	b.n	8001d6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	20000014 	.word	0x20000014
 8001d78:	2000001c 	.word	0x2000001c
 8001d7c:	20000018 	.word	0x20000018

08001d80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d84:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <HAL_IncTick+0x20>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <HAL_IncTick+0x24>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4413      	add	r3, r2
 8001d90:	4a04      	ldr	r2, [pc, #16]	; (8001da4 <HAL_IncTick+0x24>)
 8001d92:	6013      	str	r3, [r2, #0]
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	2000001c 	.word	0x2000001c
 8001da4:	200001cc 	.word	0x200001cc

08001da8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  return uwTick;
 8001dac:	4b03      	ldr	r3, [pc, #12]	; (8001dbc <HAL_GetTick+0x14>)
 8001dae:	681b      	ldr	r3, [r3, #0]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	200001cc 	.word	0x200001cc

08001dc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dc8:	f7ff ffee 	bl	8001da8 <HAL_GetTick>
 8001dcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dd8:	d005      	beq.n	8001de6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dda:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <HAL_Delay+0x44>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	461a      	mov	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4413      	add	r3, r2
 8001de4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001de6:	bf00      	nop
 8001de8:	f7ff ffde 	bl	8001da8 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d8f7      	bhi.n	8001de8 <HAL_Delay+0x28>
  {
  }
}
 8001df8:	bf00      	nop
 8001dfa:	bf00      	nop
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	2000001c 	.word	0x2000001c

08001e08 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e10:	2300      	movs	r3, #0
 8001e12:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e033      	b.n	8001e86 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d109      	bne.n	8001e3a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff fcb2 	bl	8001790 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	f003 0310 	and.w	r3, r3, #16
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d118      	bne.n	8001e78 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e4e:	f023 0302 	bic.w	r3, r3, #2
 8001e52:	f043 0202 	orr.w	r2, r3, #2
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 fa96 	bl	800238c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	f023 0303 	bic.w	r3, r3, #3
 8001e6e:	f043 0201 	orr.w	r2, r3, #1
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	641a      	str	r2, [r3, #64]	; 0x40
 8001e76:	e001      	b.n	8001e7c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
	...

08001e90 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d101      	bne.n	8001eaa <HAL_ADC_Start+0x1a>
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	e097      	b.n	8001fda <HAL_ADC_Start+0x14a>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d018      	beq.n	8001ef2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	689a      	ldr	r2, [r3, #8]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f042 0201 	orr.w	r2, r2, #1
 8001ece:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ed0:	4b45      	ldr	r3, [pc, #276]	; (8001fe8 <HAL_ADC_Start+0x158>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a45      	ldr	r2, [pc, #276]	; (8001fec <HAL_ADC_Start+0x15c>)
 8001ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eda:	0c9a      	lsrs	r2, r3, #18
 8001edc:	4613      	mov	r3, r2
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	4413      	add	r3, r2
 8001ee2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001ee4:	e002      	b.n	8001eec <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1f9      	bne.n	8001ee6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d15f      	bne.n	8001fc0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f04:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f08:	f023 0301 	bic.w	r3, r3, #1
 8001f0c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d007      	beq.n	8001f32 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f2a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f3e:	d106      	bne.n	8001f4e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f44:	f023 0206 	bic.w	r2, r3, #6
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	645a      	str	r2, [r3, #68]	; 0x44
 8001f4c:	e002      	b.n	8001f54 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f5c:	4b24      	ldr	r3, [pc, #144]	; (8001ff0 <HAL_ADC_Start+0x160>)
 8001f5e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001f68:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f003 031f 	and.w	r3, r3, #31
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d10f      	bne.n	8001f96 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d129      	bne.n	8001fd8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	689a      	ldr	r2, [r3, #8]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	e020      	b.n	8001fd8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a16      	ldr	r2, [pc, #88]	; (8001ff4 <HAL_ADC_Start+0x164>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d11b      	bne.n	8001fd8 <HAL_ADC_Start+0x148>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d114      	bne.n	8001fd8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001fbc:	609a      	str	r2, [r3, #8]
 8001fbe:	e00b      	b.n	8001fd8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc4:	f043 0210 	orr.w	r2, r3, #16
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd0:	f043 0201 	orr.w	r2, r3, #1
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3714      	adds	r7, #20
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	20000014 	.word	0x20000014
 8001fec:	431bde83 	.word	0x431bde83
 8001ff0:	40012300 	.word	0x40012300
 8001ff4:	40012000 	.word	0x40012000

08001ff8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002002:	2300      	movs	r3, #0
 8002004:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002010:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002014:	d113      	bne.n	800203e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002020:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002024:	d10b      	bne.n	800203e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	f043 0220 	orr.w	r2, r3, #32
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e063      	b.n	8002106 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800203e:	f7ff feb3 	bl	8001da8 <HAL_GetTick>
 8002042:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002044:	e021      	b.n	800208a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800204c:	d01d      	beq.n	800208a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d007      	beq.n	8002064 <HAL_ADC_PollForConversion+0x6c>
 8002054:	f7ff fea8 	bl	8001da8 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	429a      	cmp	r2, r3
 8002062:	d212      	bcs.n	800208a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b02      	cmp	r3, #2
 8002070:	d00b      	beq.n	800208a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	f043 0204 	orr.w	r2, r3, #4
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e03d      	b.n	8002106 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b02      	cmp	r3, #2
 8002096:	d1d6      	bne.n	8002046 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f06f 0212 	mvn.w	r2, #18
 80020a0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d123      	bne.n	8002104 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d11f      	bne.n	8002104 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ca:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d006      	beq.n	80020e0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d111      	bne.n	8002104 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d105      	bne.n	8002104 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	f043 0201 	orr.w	r2, r3, #1
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800210e:	b480      	push	{r7}
 8002110:	b083      	sub	sp, #12
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800211c:	4618      	mov	r0, r3
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002132:	2300      	movs	r3, #0
 8002134:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800213c:	2b01      	cmp	r3, #1
 800213e:	d101      	bne.n	8002144 <HAL_ADC_ConfigChannel+0x1c>
 8002140:	2302      	movs	r3, #2
 8002142:	e113      	b.n	800236c <HAL_ADC_ConfigChannel+0x244>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2b09      	cmp	r3, #9
 8002152:	d925      	bls.n	80021a0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68d9      	ldr	r1, [r3, #12]
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	b29b      	uxth	r3, r3
 8002160:	461a      	mov	r2, r3
 8002162:	4613      	mov	r3, r2
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	4413      	add	r3, r2
 8002168:	3b1e      	subs	r3, #30
 800216a:	2207      	movs	r2, #7
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	43da      	mvns	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	400a      	ands	r2, r1
 8002178:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68d9      	ldr	r1, [r3, #12]
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	b29b      	uxth	r3, r3
 800218a:	4618      	mov	r0, r3
 800218c:	4603      	mov	r3, r0
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	4403      	add	r3, r0
 8002192:	3b1e      	subs	r3, #30
 8002194:	409a      	lsls	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	430a      	orrs	r2, r1
 800219c:	60da      	str	r2, [r3, #12]
 800219e:	e022      	b.n	80021e6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6919      	ldr	r1, [r3, #16]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	461a      	mov	r2, r3
 80021ae:	4613      	mov	r3, r2
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	4413      	add	r3, r2
 80021b4:	2207      	movs	r2, #7
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	43da      	mvns	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	400a      	ands	r2, r1
 80021c2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6919      	ldr	r1, [r3, #16]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	689a      	ldr	r2, [r3, #8]
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	4618      	mov	r0, r3
 80021d6:	4603      	mov	r3, r0
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	4403      	add	r3, r0
 80021dc:	409a      	lsls	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2b06      	cmp	r3, #6
 80021ec:	d824      	bhi.n	8002238 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	4613      	mov	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4413      	add	r3, r2
 80021fe:	3b05      	subs	r3, #5
 8002200:	221f      	movs	r2, #31
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43da      	mvns	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	400a      	ands	r2, r1
 800220e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	b29b      	uxth	r3, r3
 800221c:	4618      	mov	r0, r3
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	4613      	mov	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	3b05      	subs	r3, #5
 800222a:	fa00 f203 	lsl.w	r2, r0, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	430a      	orrs	r2, r1
 8002234:	635a      	str	r2, [r3, #52]	; 0x34
 8002236:	e04c      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2b0c      	cmp	r3, #12
 800223e:	d824      	bhi.n	800228a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	4613      	mov	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4413      	add	r3, r2
 8002250:	3b23      	subs	r3, #35	; 0x23
 8002252:	221f      	movs	r2, #31
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	43da      	mvns	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	400a      	ands	r2, r1
 8002260:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	b29b      	uxth	r3, r3
 800226e:	4618      	mov	r0, r3
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	4613      	mov	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	3b23      	subs	r3, #35	; 0x23
 800227c:	fa00 f203 	lsl.w	r2, r0, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	430a      	orrs	r2, r1
 8002286:	631a      	str	r2, [r3, #48]	; 0x30
 8002288:	e023      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685a      	ldr	r2, [r3, #4]
 8002294:	4613      	mov	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	4413      	add	r3, r2
 800229a:	3b41      	subs	r3, #65	; 0x41
 800229c:	221f      	movs	r2, #31
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	43da      	mvns	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	400a      	ands	r2, r1
 80022aa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	4618      	mov	r0, r3
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685a      	ldr	r2, [r3, #4]
 80022be:	4613      	mov	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	4413      	add	r3, r2
 80022c4:	3b41      	subs	r3, #65	; 0x41
 80022c6:	fa00 f203 	lsl.w	r2, r0, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	430a      	orrs	r2, r1
 80022d0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022d2:	4b29      	ldr	r3, [pc, #164]	; (8002378 <HAL_ADC_ConfigChannel+0x250>)
 80022d4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a28      	ldr	r2, [pc, #160]	; (800237c <HAL_ADC_ConfigChannel+0x254>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d10f      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x1d8>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2b12      	cmp	r3, #18
 80022e6:	d10b      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a1d      	ldr	r2, [pc, #116]	; (800237c <HAL_ADC_ConfigChannel+0x254>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d12b      	bne.n	8002362 <HAL_ADC_ConfigChannel+0x23a>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a1c      	ldr	r2, [pc, #112]	; (8002380 <HAL_ADC_ConfigChannel+0x258>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d003      	beq.n	800231c <HAL_ADC_ConfigChannel+0x1f4>
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2b11      	cmp	r3, #17
 800231a:	d122      	bne.n	8002362 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a11      	ldr	r2, [pc, #68]	; (8002380 <HAL_ADC_ConfigChannel+0x258>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d111      	bne.n	8002362 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800233e:	4b11      	ldr	r3, [pc, #68]	; (8002384 <HAL_ADC_ConfigChannel+0x25c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a11      	ldr	r2, [pc, #68]	; (8002388 <HAL_ADC_ConfigChannel+0x260>)
 8002344:	fba2 2303 	umull	r2, r3, r2, r3
 8002348:	0c9a      	lsrs	r2, r3, #18
 800234a:	4613      	mov	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4413      	add	r3, r2
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002354:	e002      	b.n	800235c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	3b01      	subs	r3, #1
 800235a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1f9      	bne.n	8002356 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	3714      	adds	r7, #20
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	40012300 	.word	0x40012300
 800237c:	40012000 	.word	0x40012000
 8002380:	10000012 	.word	0x10000012
 8002384:	20000014 	.word	0x20000014
 8002388:	431bde83 	.word	0x431bde83

0800238c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002394:	4b79      	ldr	r3, [pc, #484]	; (800257c <ADC_Init+0x1f0>)
 8002396:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	431a      	orrs	r2, r3
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6859      	ldr	r1, [r3, #4]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	021a      	lsls	r2, r3, #8
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80023e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6859      	ldr	r1, [r3, #4]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	430a      	orrs	r2, r1
 80023f6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002406:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6899      	ldr	r1, [r3, #8]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68da      	ldr	r2, [r3, #12]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	430a      	orrs	r2, r1
 8002418:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241e:	4a58      	ldr	r2, [pc, #352]	; (8002580 <ADC_Init+0x1f4>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d022      	beq.n	800246a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	689a      	ldr	r2, [r3, #8]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002432:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	6899      	ldr	r1, [r3, #8]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	430a      	orrs	r2, r1
 8002444:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002454:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6899      	ldr	r1, [r3, #8]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	430a      	orrs	r2, r1
 8002466:	609a      	str	r2, [r3, #8]
 8002468:	e00f      	b.n	800248a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002478:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002488:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 0202 	bic.w	r2, r2, #2
 8002498:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	6899      	ldr	r1, [r3, #8]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	7e1b      	ldrb	r3, [r3, #24]
 80024a4:	005a      	lsls	r2, r3, #1
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	430a      	orrs	r2, r1
 80024ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d01b      	beq.n	80024f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	685a      	ldr	r2, [r3, #4]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80024d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6859      	ldr	r1, [r3, #4]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e2:	3b01      	subs	r3, #1
 80024e4:	035a      	lsls	r2, r3, #13
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	430a      	orrs	r2, r1
 80024ec:	605a      	str	r2, [r3, #4]
 80024ee:	e007      	b.n	8002500 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800250e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	3b01      	subs	r3, #1
 800251c:	051a      	lsls	r2, r3, #20
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	430a      	orrs	r2, r1
 8002524:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002534:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	6899      	ldr	r1, [r3, #8]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002542:	025a      	lsls	r2, r3, #9
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	430a      	orrs	r2, r1
 800254a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	689a      	ldr	r2, [r3, #8]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800255a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6899      	ldr	r1, [r3, #8]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	029a      	lsls	r2, r3, #10
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	430a      	orrs	r2, r1
 800256e:	609a      	str	r2, [r3, #8]
}
 8002570:	bf00      	nop
 8002572:	3714      	adds	r7, #20
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	40012300 	.word	0x40012300
 8002580:	0f000001 	.word	0x0f000001

08002584 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002594:	4b0c      	ldr	r3, [pc, #48]	; (80025c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025a0:	4013      	ands	r3, r2
 80025a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025b6:	4a04      	ldr	r2, [pc, #16]	; (80025c8 <__NVIC_SetPriorityGrouping+0x44>)
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	60d3      	str	r3, [r2, #12]
}
 80025bc:	bf00      	nop
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	e000ed00 	.word	0xe000ed00

080025cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025d0:	4b04      	ldr	r3, [pc, #16]	; (80025e4 <__NVIC_GetPriorityGrouping+0x18>)
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	0a1b      	lsrs	r3, r3, #8
 80025d6:	f003 0307 	and.w	r3, r3, #7
}
 80025da:	4618      	mov	r0, r3
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	e000ed00 	.word	0xe000ed00

080025e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4603      	mov	r3, r0
 80025f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	db0b      	blt.n	8002612 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025fa:	79fb      	ldrb	r3, [r7, #7]
 80025fc:	f003 021f 	and.w	r2, r3, #31
 8002600:	4907      	ldr	r1, [pc, #28]	; (8002620 <__NVIC_EnableIRQ+0x38>)
 8002602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002606:	095b      	lsrs	r3, r3, #5
 8002608:	2001      	movs	r0, #1
 800260a:	fa00 f202 	lsl.w	r2, r0, r2
 800260e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	e000e100 	.word	0xe000e100

08002624 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	4603      	mov	r3, r0
 800262c:	6039      	str	r1, [r7, #0]
 800262e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002634:	2b00      	cmp	r3, #0
 8002636:	db0a      	blt.n	800264e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	b2da      	uxtb	r2, r3
 800263c:	490c      	ldr	r1, [pc, #48]	; (8002670 <__NVIC_SetPriority+0x4c>)
 800263e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002642:	0112      	lsls	r2, r2, #4
 8002644:	b2d2      	uxtb	r2, r2
 8002646:	440b      	add	r3, r1
 8002648:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800264c:	e00a      	b.n	8002664 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	b2da      	uxtb	r2, r3
 8002652:	4908      	ldr	r1, [pc, #32]	; (8002674 <__NVIC_SetPriority+0x50>)
 8002654:	79fb      	ldrb	r3, [r7, #7]
 8002656:	f003 030f 	and.w	r3, r3, #15
 800265a:	3b04      	subs	r3, #4
 800265c:	0112      	lsls	r2, r2, #4
 800265e:	b2d2      	uxtb	r2, r2
 8002660:	440b      	add	r3, r1
 8002662:	761a      	strb	r2, [r3, #24]
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr
 8002670:	e000e100 	.word	0xe000e100
 8002674:	e000ed00 	.word	0xe000ed00

08002678 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002678:	b480      	push	{r7}
 800267a:	b089      	sub	sp, #36	; 0x24
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f003 0307 	and.w	r3, r3, #7
 800268a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	f1c3 0307 	rsb	r3, r3, #7
 8002692:	2b04      	cmp	r3, #4
 8002694:	bf28      	it	cs
 8002696:	2304      	movcs	r3, #4
 8002698:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	3304      	adds	r3, #4
 800269e:	2b06      	cmp	r3, #6
 80026a0:	d902      	bls.n	80026a8 <NVIC_EncodePriority+0x30>
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	3b03      	subs	r3, #3
 80026a6:	e000      	b.n	80026aa <NVIC_EncodePriority+0x32>
 80026a8:	2300      	movs	r3, #0
 80026aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026ac:	f04f 32ff 	mov.w	r2, #4294967295
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	43da      	mvns	r2, r3
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	401a      	ands	r2, r3
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026c0:	f04f 31ff 	mov.w	r1, #4294967295
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ca:	43d9      	mvns	r1, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d0:	4313      	orrs	r3, r2
         );
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3724      	adds	r7, #36	; 0x24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
	...

080026e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	3b01      	subs	r3, #1
 80026ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026f0:	d301      	bcc.n	80026f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026f2:	2301      	movs	r3, #1
 80026f4:	e00f      	b.n	8002716 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026f6:	4a0a      	ldr	r2, [pc, #40]	; (8002720 <SysTick_Config+0x40>)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3b01      	subs	r3, #1
 80026fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026fe:	210f      	movs	r1, #15
 8002700:	f04f 30ff 	mov.w	r0, #4294967295
 8002704:	f7ff ff8e 	bl	8002624 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002708:	4b05      	ldr	r3, [pc, #20]	; (8002720 <SysTick_Config+0x40>)
 800270a:	2200      	movs	r2, #0
 800270c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800270e:	4b04      	ldr	r3, [pc, #16]	; (8002720 <SysTick_Config+0x40>)
 8002710:	2207      	movs	r2, #7
 8002712:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	e000e010 	.word	0xe000e010

08002724 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f7ff ff29 	bl	8002584 <__NVIC_SetPriorityGrouping>
}
 8002732:	bf00      	nop
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800273a:	b580      	push	{r7, lr}
 800273c:	b086      	sub	sp, #24
 800273e:	af00      	add	r7, sp, #0
 8002740:	4603      	mov	r3, r0
 8002742:	60b9      	str	r1, [r7, #8]
 8002744:	607a      	str	r2, [r7, #4]
 8002746:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002748:	2300      	movs	r3, #0
 800274a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800274c:	f7ff ff3e 	bl	80025cc <__NVIC_GetPriorityGrouping>
 8002750:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	68b9      	ldr	r1, [r7, #8]
 8002756:	6978      	ldr	r0, [r7, #20]
 8002758:	f7ff ff8e 	bl	8002678 <NVIC_EncodePriority>
 800275c:	4602      	mov	r2, r0
 800275e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002762:	4611      	mov	r1, r2
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff ff5d 	bl	8002624 <__NVIC_SetPriority>
}
 800276a:	bf00      	nop
 800276c:	3718      	adds	r7, #24
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b082      	sub	sp, #8
 8002776:	af00      	add	r7, sp, #0
 8002778:	4603      	mov	r3, r0
 800277a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800277c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff ff31 	bl	80025e8 <__NVIC_EnableIRQ>
}
 8002786:	bf00      	nop
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b082      	sub	sp, #8
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7ff ffa2 	bl	80026e0 <SysTick_Config>
 800279c:	4603      	mov	r3, r0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b084      	sub	sp, #16
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80027b4:	f7ff faf8 	bl	8001da8 <HAL_GetTick>
 80027b8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d008      	beq.n	80027d8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2280      	movs	r2, #128	; 0x80
 80027ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e052      	b.n	800287e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 0216 	bic.w	r2, r2, #22
 80027e6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	695a      	ldr	r2, [r3, #20]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027f6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d103      	bne.n	8002808 <HAL_DMA_Abort+0x62>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002804:	2b00      	cmp	r3, #0
 8002806:	d007      	beq.n	8002818 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f022 0208 	bic.w	r2, r2, #8
 8002816:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 0201 	bic.w	r2, r2, #1
 8002826:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002828:	e013      	b.n	8002852 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800282a:	f7ff fabd 	bl	8001da8 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b05      	cmp	r3, #5
 8002836:	d90c      	bls.n	8002852 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2220      	movs	r2, #32
 800283c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2203      	movs	r2, #3
 8002842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e015      	b.n	800287e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1e4      	bne.n	800282a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002864:	223f      	movs	r2, #63	; 0x3f
 8002866:	409a      	lsls	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d004      	beq.n	80028a4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2280      	movs	r2, #128	; 0x80
 800289e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e00c      	b.n	80028be <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2205      	movs	r2, #5
 80028a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f022 0201 	bic.w	r2, r2, #1
 80028ba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
	...

080028cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b089      	sub	sp, #36	; 0x24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028d6:	2300      	movs	r3, #0
 80028d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028da:	2300      	movs	r3, #0
 80028dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028de:	2300      	movs	r3, #0
 80028e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028e2:	2300      	movs	r3, #0
 80028e4:	61fb      	str	r3, [r7, #28]
 80028e6:	e159      	b.n	8002b9c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028e8:	2201      	movs	r2, #1
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	4013      	ands	r3, r2
 80028fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	429a      	cmp	r2, r3
 8002902:	f040 8148 	bne.w	8002b96 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f003 0303 	and.w	r3, r3, #3
 800290e:	2b01      	cmp	r3, #1
 8002910:	d005      	beq.n	800291e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800291a:	2b02      	cmp	r3, #2
 800291c:	d130      	bne.n	8002980 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	2203      	movs	r2, #3
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	43db      	mvns	r3, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4013      	ands	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	68da      	ldr	r2, [r3, #12]
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	4313      	orrs	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002954:	2201      	movs	r2, #1
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	43db      	mvns	r3, r3
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	4013      	ands	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	091b      	lsrs	r3, r3, #4
 800296a:	f003 0201 	and.w	r2, r3, #1
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	4313      	orrs	r3, r2
 8002978:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f003 0303 	and.w	r3, r3, #3
 8002988:	2b03      	cmp	r3, #3
 800298a:	d017      	beq.n	80029bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	2203      	movs	r2, #3
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	43db      	mvns	r3, r3
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	4013      	ands	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f003 0303 	and.w	r3, r3, #3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d123      	bne.n	8002a10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	08da      	lsrs	r2, r3, #3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	3208      	adds	r2, #8
 80029d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	220f      	movs	r2, #15
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	43db      	mvns	r3, r3
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	4013      	ands	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	691a      	ldr	r2, [r3, #16]
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	08da      	lsrs	r2, r3, #3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	3208      	adds	r2, #8
 8002a0a:	69b9      	ldr	r1, [r7, #24]
 8002a0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	2203      	movs	r2, #3
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	43db      	mvns	r3, r3
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	4013      	ands	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f003 0203 	and.w	r2, r3, #3
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 80a2 	beq.w	8002b96 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	60fb      	str	r3, [r7, #12]
 8002a56:	4b57      	ldr	r3, [pc, #348]	; (8002bb4 <HAL_GPIO_Init+0x2e8>)
 8002a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5a:	4a56      	ldr	r2, [pc, #344]	; (8002bb4 <HAL_GPIO_Init+0x2e8>)
 8002a5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a60:	6453      	str	r3, [r2, #68]	; 0x44
 8002a62:	4b54      	ldr	r3, [pc, #336]	; (8002bb4 <HAL_GPIO_Init+0x2e8>)
 8002a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a6e:	4a52      	ldr	r2, [pc, #328]	; (8002bb8 <HAL_GPIO_Init+0x2ec>)
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	089b      	lsrs	r3, r3, #2
 8002a74:	3302      	adds	r3, #2
 8002a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	f003 0303 	and.w	r3, r3, #3
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	220f      	movs	r2, #15
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a49      	ldr	r2, [pc, #292]	; (8002bbc <HAL_GPIO_Init+0x2f0>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d019      	beq.n	8002ace <HAL_GPIO_Init+0x202>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a48      	ldr	r2, [pc, #288]	; (8002bc0 <HAL_GPIO_Init+0x2f4>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d013      	beq.n	8002aca <HAL_GPIO_Init+0x1fe>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a47      	ldr	r2, [pc, #284]	; (8002bc4 <HAL_GPIO_Init+0x2f8>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d00d      	beq.n	8002ac6 <HAL_GPIO_Init+0x1fa>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a46      	ldr	r2, [pc, #280]	; (8002bc8 <HAL_GPIO_Init+0x2fc>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d007      	beq.n	8002ac2 <HAL_GPIO_Init+0x1f6>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a45      	ldr	r2, [pc, #276]	; (8002bcc <HAL_GPIO_Init+0x300>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d101      	bne.n	8002abe <HAL_GPIO_Init+0x1f2>
 8002aba:	2304      	movs	r3, #4
 8002abc:	e008      	b.n	8002ad0 <HAL_GPIO_Init+0x204>
 8002abe:	2307      	movs	r3, #7
 8002ac0:	e006      	b.n	8002ad0 <HAL_GPIO_Init+0x204>
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e004      	b.n	8002ad0 <HAL_GPIO_Init+0x204>
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	e002      	b.n	8002ad0 <HAL_GPIO_Init+0x204>
 8002aca:	2301      	movs	r3, #1
 8002acc:	e000      	b.n	8002ad0 <HAL_GPIO_Init+0x204>
 8002ace:	2300      	movs	r3, #0
 8002ad0:	69fa      	ldr	r2, [r7, #28]
 8002ad2:	f002 0203 	and.w	r2, r2, #3
 8002ad6:	0092      	lsls	r2, r2, #2
 8002ad8:	4093      	lsls	r3, r2
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ae0:	4935      	ldr	r1, [pc, #212]	; (8002bb8 <HAL_GPIO_Init+0x2ec>)
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	089b      	lsrs	r3, r3, #2
 8002ae6:	3302      	adds	r3, #2
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aee:	4b38      	ldr	r3, [pc, #224]	; (8002bd0 <HAL_GPIO_Init+0x304>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	43db      	mvns	r3, r3
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	4013      	ands	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b12:	4a2f      	ldr	r2, [pc, #188]	; (8002bd0 <HAL_GPIO_Init+0x304>)
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b18:	4b2d      	ldr	r3, [pc, #180]	; (8002bd0 <HAL_GPIO_Init+0x304>)
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	43db      	mvns	r3, r3
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	4013      	ands	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d003      	beq.n	8002b3c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b3c:	4a24      	ldr	r2, [pc, #144]	; (8002bd0 <HAL_GPIO_Init+0x304>)
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b42:	4b23      	ldr	r3, [pc, #140]	; (8002bd0 <HAL_GPIO_Init+0x304>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b66:	4a1a      	ldr	r2, [pc, #104]	; (8002bd0 <HAL_GPIO_Init+0x304>)
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b6c:	4b18      	ldr	r3, [pc, #96]	; (8002bd0 <HAL_GPIO_Init+0x304>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	43db      	mvns	r3, r3
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d003      	beq.n	8002b90 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b90:	4a0f      	ldr	r2, [pc, #60]	; (8002bd0 <HAL_GPIO_Init+0x304>)
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	3301      	adds	r3, #1
 8002b9a:	61fb      	str	r3, [r7, #28]
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	2b0f      	cmp	r3, #15
 8002ba0:	f67f aea2 	bls.w	80028e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ba4:	bf00      	nop
 8002ba6:	bf00      	nop
 8002ba8:	3724      	adds	r7, #36	; 0x24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	40023800 	.word	0x40023800
 8002bb8:	40013800 	.word	0x40013800
 8002bbc:	40020000 	.word	0x40020000
 8002bc0:	40020400 	.word	0x40020400
 8002bc4:	40020800 	.word	0x40020800
 8002bc8:	40020c00 	.word	0x40020c00
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	40013c00 	.word	0x40013c00

08002bd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	460b      	mov	r3, r1
 8002bde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	691a      	ldr	r2, [r3, #16]
 8002be4:	887b      	ldrh	r3, [r7, #2]
 8002be6:	4013      	ands	r3, r2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d002      	beq.n	8002bf2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002bec:	2301      	movs	r3, #1
 8002bee:	73fb      	strb	r3, [r7, #15]
 8002bf0:	e001      	b.n	8002bf6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3714      	adds	r7, #20
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	807b      	strh	r3, [r7, #2]
 8002c10:	4613      	mov	r3, r2
 8002c12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c14:	787b      	ldrb	r3, [r7, #1]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d003      	beq.n	8002c22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c1a:	887a      	ldrh	r2, [r7, #2]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c20:	e003      	b.n	8002c2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c22:	887b      	ldrh	r3, [r7, #2]
 8002c24:	041a      	lsls	r2, r3, #16
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	619a      	str	r2, [r3, #24]
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
	...

08002c38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	4603      	mov	r3, r0
 8002c40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002c42:	4b08      	ldr	r3, [pc, #32]	; (8002c64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c44:	695a      	ldr	r2, [r3, #20]
 8002c46:	88fb      	ldrh	r3, [r7, #6]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d006      	beq.n	8002c5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c4e:	4a05      	ldr	r2, [pc, #20]	; (8002c64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c50:	88fb      	ldrh	r3, [r7, #6]
 8002c52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c54:	88fb      	ldrh	r3, [r7, #6]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f000 f806 	bl	8002c68 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c5c:	bf00      	nop
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40013c00 	.word	0x40013c00

08002c68 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	4603      	mov	r3, r0
 8002c70:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002c72:	bf00      	nop
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
	...

08002c80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b086      	sub	sp, #24
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e267      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d075      	beq.n	8002d8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c9e:	4b88      	ldr	r3, [pc, #544]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 030c 	and.w	r3, r3, #12
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	d00c      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002caa:	4b85      	ldr	r3, [pc, #532]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cb2:	2b08      	cmp	r3, #8
 8002cb4:	d112      	bne.n	8002cdc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cb6:	4b82      	ldr	r3, [pc, #520]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cc2:	d10b      	bne.n	8002cdc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc4:	4b7e      	ldr	r3, [pc, #504]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d05b      	beq.n	8002d88 <HAL_RCC_OscConfig+0x108>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d157      	bne.n	8002d88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e242      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ce4:	d106      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x74>
 8002ce6:	4b76      	ldr	r3, [pc, #472]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a75      	ldr	r2, [pc, #468]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf0:	6013      	str	r3, [r2, #0]
 8002cf2:	e01d      	b.n	8002d30 <HAL_RCC_OscConfig+0xb0>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cfc:	d10c      	bne.n	8002d18 <HAL_RCC_OscConfig+0x98>
 8002cfe:	4b70      	ldr	r3, [pc, #448]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a6f      	ldr	r2, [pc, #444]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002d04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d08:	6013      	str	r3, [r2, #0]
 8002d0a:	4b6d      	ldr	r3, [pc, #436]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a6c      	ldr	r2, [pc, #432]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d14:	6013      	str	r3, [r2, #0]
 8002d16:	e00b      	b.n	8002d30 <HAL_RCC_OscConfig+0xb0>
 8002d18:	4b69      	ldr	r3, [pc, #420]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a68      	ldr	r2, [pc, #416]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002d1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d22:	6013      	str	r3, [r2, #0]
 8002d24:	4b66      	ldr	r3, [pc, #408]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a65      	ldr	r2, [pc, #404]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002d2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d013      	beq.n	8002d60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d38:	f7ff f836 	bl	8001da8 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d40:	f7ff f832 	bl	8001da8 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b64      	cmp	r3, #100	; 0x64
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e207      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d52:	4b5b      	ldr	r3, [pc, #364]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d0f0      	beq.n	8002d40 <HAL_RCC_OscConfig+0xc0>
 8002d5e:	e014      	b.n	8002d8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d60:	f7ff f822 	bl	8001da8 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d68:	f7ff f81e 	bl	8001da8 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b64      	cmp	r3, #100	; 0x64
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e1f3      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d7a:	4b51      	ldr	r3, [pc, #324]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1f0      	bne.n	8002d68 <HAL_RCC_OscConfig+0xe8>
 8002d86:	e000      	b.n	8002d8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d063      	beq.n	8002e5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d96:	4b4a      	ldr	r3, [pc, #296]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 030c 	and.w	r3, r3, #12
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00b      	beq.n	8002dba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002da2:	4b47      	ldr	r3, [pc, #284]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002daa:	2b08      	cmp	r3, #8
 8002dac:	d11c      	bne.n	8002de8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dae:	4b44      	ldr	r3, [pc, #272]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d116      	bne.n	8002de8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dba:	4b41      	ldr	r3, [pc, #260]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d005      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x152>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d001      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e1c7      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd2:	4b3b      	ldr	r3, [pc, #236]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	4937      	ldr	r1, [pc, #220]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002de6:	e03a      	b.n	8002e5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d020      	beq.n	8002e32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002df0:	4b34      	ldr	r3, [pc, #208]	; (8002ec4 <HAL_RCC_OscConfig+0x244>)
 8002df2:	2201      	movs	r2, #1
 8002df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df6:	f7fe ffd7 	bl	8001da8 <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dfc:	e008      	b.n	8002e10 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dfe:	f7fe ffd3 	bl	8001da8 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e1a8      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e10:	4b2b      	ldr	r3, [pc, #172]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d0f0      	beq.n	8002dfe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e1c:	4b28      	ldr	r3, [pc, #160]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	4925      	ldr	r1, [pc, #148]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	600b      	str	r3, [r1, #0]
 8002e30:	e015      	b.n	8002e5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e32:	4b24      	ldr	r3, [pc, #144]	; (8002ec4 <HAL_RCC_OscConfig+0x244>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e38:	f7fe ffb6 	bl	8001da8 <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e40:	f7fe ffb2 	bl	8001da8 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e187      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e52:	4b1b      	ldr	r3, [pc, #108]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1f0      	bne.n	8002e40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0308 	and.w	r3, r3, #8
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d036      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d016      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e72:	4b15      	ldr	r3, [pc, #84]	; (8002ec8 <HAL_RCC_OscConfig+0x248>)
 8002e74:	2201      	movs	r2, #1
 8002e76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e78:	f7fe ff96 	bl	8001da8 <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e80:	f7fe ff92 	bl	8001da8 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e167      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e92:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002e94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d0f0      	beq.n	8002e80 <HAL_RCC_OscConfig+0x200>
 8002e9e:	e01b      	b.n	8002ed8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ea0:	4b09      	ldr	r3, [pc, #36]	; (8002ec8 <HAL_RCC_OscConfig+0x248>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ea6:	f7fe ff7f 	bl	8001da8 <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eac:	e00e      	b.n	8002ecc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eae:	f7fe ff7b 	bl	8001da8 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d907      	bls.n	8002ecc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e150      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	42470000 	.word	0x42470000
 8002ec8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ecc:	4b88      	ldr	r3, [pc, #544]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002ece:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1ea      	bne.n	8002eae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0304 	and.w	r3, r3, #4
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 8097 	beq.w	8003014 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eea:	4b81      	ldr	r3, [pc, #516]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10f      	bne.n	8002f16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60bb      	str	r3, [r7, #8]
 8002efa:	4b7d      	ldr	r3, [pc, #500]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	4a7c      	ldr	r2, [pc, #496]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f04:	6413      	str	r3, [r2, #64]	; 0x40
 8002f06:	4b7a      	ldr	r3, [pc, #488]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0e:	60bb      	str	r3, [r7, #8]
 8002f10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f12:	2301      	movs	r3, #1
 8002f14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f16:	4b77      	ldr	r3, [pc, #476]	; (80030f4 <HAL_RCC_OscConfig+0x474>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d118      	bne.n	8002f54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f22:	4b74      	ldr	r3, [pc, #464]	; (80030f4 <HAL_RCC_OscConfig+0x474>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a73      	ldr	r2, [pc, #460]	; (80030f4 <HAL_RCC_OscConfig+0x474>)
 8002f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f2e:	f7fe ff3b 	bl	8001da8 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f34:	e008      	b.n	8002f48 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f36:	f7fe ff37 	bl	8001da8 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e10c      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f48:	4b6a      	ldr	r3, [pc, #424]	; (80030f4 <HAL_RCC_OscConfig+0x474>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d0f0      	beq.n	8002f36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d106      	bne.n	8002f6a <HAL_RCC_OscConfig+0x2ea>
 8002f5c:	4b64      	ldr	r3, [pc, #400]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f60:	4a63      	ldr	r2, [pc, #396]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f62:	f043 0301 	orr.w	r3, r3, #1
 8002f66:	6713      	str	r3, [r2, #112]	; 0x70
 8002f68:	e01c      	b.n	8002fa4 <HAL_RCC_OscConfig+0x324>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	2b05      	cmp	r3, #5
 8002f70:	d10c      	bne.n	8002f8c <HAL_RCC_OscConfig+0x30c>
 8002f72:	4b5f      	ldr	r3, [pc, #380]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f76:	4a5e      	ldr	r2, [pc, #376]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f78:	f043 0304 	orr.w	r3, r3, #4
 8002f7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f7e:	4b5c      	ldr	r3, [pc, #368]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f82:	4a5b      	ldr	r2, [pc, #364]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f84:	f043 0301 	orr.w	r3, r3, #1
 8002f88:	6713      	str	r3, [r2, #112]	; 0x70
 8002f8a:	e00b      	b.n	8002fa4 <HAL_RCC_OscConfig+0x324>
 8002f8c:	4b58      	ldr	r3, [pc, #352]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f90:	4a57      	ldr	r2, [pc, #348]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f92:	f023 0301 	bic.w	r3, r3, #1
 8002f96:	6713      	str	r3, [r2, #112]	; 0x70
 8002f98:	4b55      	ldr	r3, [pc, #340]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9c:	4a54      	ldr	r2, [pc, #336]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f9e:	f023 0304 	bic.w	r3, r3, #4
 8002fa2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d015      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fac:	f7fe fefc 	bl	8001da8 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fb2:	e00a      	b.n	8002fca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fb4:	f7fe fef8 	bl	8001da8 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e0cb      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fca:	4b49      	ldr	r3, [pc, #292]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d0ee      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x334>
 8002fd6:	e014      	b.n	8003002 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fd8:	f7fe fee6 	bl	8001da8 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fde:	e00a      	b.n	8002ff6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fe0:	f7fe fee2 	bl	8001da8 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e0b5      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ff6:	4b3e      	ldr	r3, [pc, #248]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1ee      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003002:	7dfb      	ldrb	r3, [r7, #23]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d105      	bne.n	8003014 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003008:	4b39      	ldr	r3, [pc, #228]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 800300a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300c:	4a38      	ldr	r2, [pc, #224]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 800300e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003012:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	2b00      	cmp	r3, #0
 800301a:	f000 80a1 	beq.w	8003160 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800301e:	4b34      	ldr	r3, [pc, #208]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 030c 	and.w	r3, r3, #12
 8003026:	2b08      	cmp	r3, #8
 8003028:	d05c      	beq.n	80030e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	2b02      	cmp	r3, #2
 8003030:	d141      	bne.n	80030b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003032:	4b31      	ldr	r3, [pc, #196]	; (80030f8 <HAL_RCC_OscConfig+0x478>)
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003038:	f7fe feb6 	bl	8001da8 <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003040:	f7fe feb2 	bl	8001da8 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e087      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003052:	4b27      	ldr	r3, [pc, #156]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1f0      	bne.n	8003040 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69da      	ldr	r2, [r3, #28]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	431a      	orrs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306c:	019b      	lsls	r3, r3, #6
 800306e:	431a      	orrs	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003074:	085b      	lsrs	r3, r3, #1
 8003076:	3b01      	subs	r3, #1
 8003078:	041b      	lsls	r3, r3, #16
 800307a:	431a      	orrs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003080:	061b      	lsls	r3, r3, #24
 8003082:	491b      	ldr	r1, [pc, #108]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 8003084:	4313      	orrs	r3, r2
 8003086:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003088:	4b1b      	ldr	r3, [pc, #108]	; (80030f8 <HAL_RCC_OscConfig+0x478>)
 800308a:	2201      	movs	r2, #1
 800308c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800308e:	f7fe fe8b 	bl	8001da8 <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003094:	e008      	b.n	80030a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003096:	f7fe fe87 	bl	8001da8 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e05c      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030a8:	4b11      	ldr	r3, [pc, #68]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d0f0      	beq.n	8003096 <HAL_RCC_OscConfig+0x416>
 80030b4:	e054      	b.n	8003160 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030b6:	4b10      	ldr	r3, [pc, #64]	; (80030f8 <HAL_RCC_OscConfig+0x478>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030bc:	f7fe fe74 	bl	8001da8 <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030c4:	f7fe fe70 	bl	8001da8 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e045      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030d6:	4b06      	ldr	r3, [pc, #24]	; (80030f0 <HAL_RCC_OscConfig+0x470>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1f0      	bne.n	80030c4 <HAL_RCC_OscConfig+0x444>
 80030e2:	e03d      	b.n	8003160 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d107      	bne.n	80030fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e038      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
 80030f0:	40023800 	.word	0x40023800
 80030f4:	40007000 	.word	0x40007000
 80030f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030fc:	4b1b      	ldr	r3, [pc, #108]	; (800316c <HAL_RCC_OscConfig+0x4ec>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d028      	beq.n	800315c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003114:	429a      	cmp	r2, r3
 8003116:	d121      	bne.n	800315c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003122:	429a      	cmp	r2, r3
 8003124:	d11a      	bne.n	800315c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800312c:	4013      	ands	r3, r2
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003132:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003134:	4293      	cmp	r3, r2
 8003136:	d111      	bne.n	800315c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003142:	085b      	lsrs	r3, r3, #1
 8003144:	3b01      	subs	r3, #1
 8003146:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003148:	429a      	cmp	r2, r3
 800314a:	d107      	bne.n	800315c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003156:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003158:	429a      	cmp	r2, r3
 800315a:	d001      	beq.n	8003160 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e000      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3718      	adds	r7, #24
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	40023800 	.word	0x40023800

08003170 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d101      	bne.n	8003184 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e0cc      	b.n	800331e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003184:	4b68      	ldr	r3, [pc, #416]	; (8003328 <HAL_RCC_ClockConfig+0x1b8>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	683a      	ldr	r2, [r7, #0]
 800318e:	429a      	cmp	r2, r3
 8003190:	d90c      	bls.n	80031ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003192:	4b65      	ldr	r3, [pc, #404]	; (8003328 <HAL_RCC_ClockConfig+0x1b8>)
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	b2d2      	uxtb	r2, r2
 8003198:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800319a:	4b63      	ldr	r3, [pc, #396]	; (8003328 <HAL_RCC_ClockConfig+0x1b8>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0307 	and.w	r3, r3, #7
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d001      	beq.n	80031ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e0b8      	b.n	800331e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d020      	beq.n	80031fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0304 	and.w	r3, r3, #4
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d005      	beq.n	80031d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031c4:	4b59      	ldr	r3, [pc, #356]	; (800332c <HAL_RCC_ClockConfig+0x1bc>)
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	4a58      	ldr	r2, [pc, #352]	; (800332c <HAL_RCC_ClockConfig+0x1bc>)
 80031ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0308 	and.w	r3, r3, #8
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d005      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031dc:	4b53      	ldr	r3, [pc, #332]	; (800332c <HAL_RCC_ClockConfig+0x1bc>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	4a52      	ldr	r2, [pc, #328]	; (800332c <HAL_RCC_ClockConfig+0x1bc>)
 80031e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031e8:	4b50      	ldr	r3, [pc, #320]	; (800332c <HAL_RCC_ClockConfig+0x1bc>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	494d      	ldr	r1, [pc, #308]	; (800332c <HAL_RCC_ClockConfig+0x1bc>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	d044      	beq.n	8003290 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d107      	bne.n	800321e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800320e:	4b47      	ldr	r3, [pc, #284]	; (800332c <HAL_RCC_ClockConfig+0x1bc>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d119      	bne.n	800324e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e07f      	b.n	800331e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	2b02      	cmp	r3, #2
 8003224:	d003      	beq.n	800322e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800322a:	2b03      	cmp	r3, #3
 800322c:	d107      	bne.n	800323e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800322e:	4b3f      	ldr	r3, [pc, #252]	; (800332c <HAL_RCC_ClockConfig+0x1bc>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d109      	bne.n	800324e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e06f      	b.n	800331e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800323e:	4b3b      	ldr	r3, [pc, #236]	; (800332c <HAL_RCC_ClockConfig+0x1bc>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e067      	b.n	800331e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800324e:	4b37      	ldr	r3, [pc, #220]	; (800332c <HAL_RCC_ClockConfig+0x1bc>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f023 0203 	bic.w	r2, r3, #3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	4934      	ldr	r1, [pc, #208]	; (800332c <HAL_RCC_ClockConfig+0x1bc>)
 800325c:	4313      	orrs	r3, r2
 800325e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003260:	f7fe fda2 	bl	8001da8 <HAL_GetTick>
 8003264:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003266:	e00a      	b.n	800327e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003268:	f7fe fd9e 	bl	8001da8 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	f241 3288 	movw	r2, #5000	; 0x1388
 8003276:	4293      	cmp	r3, r2
 8003278:	d901      	bls.n	800327e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e04f      	b.n	800331e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800327e:	4b2b      	ldr	r3, [pc, #172]	; (800332c <HAL_RCC_ClockConfig+0x1bc>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f003 020c 	and.w	r2, r3, #12
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	429a      	cmp	r2, r3
 800328e:	d1eb      	bne.n	8003268 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003290:	4b25      	ldr	r3, [pc, #148]	; (8003328 <HAL_RCC_ClockConfig+0x1b8>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0307 	and.w	r3, r3, #7
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	429a      	cmp	r2, r3
 800329c:	d20c      	bcs.n	80032b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800329e:	4b22      	ldr	r3, [pc, #136]	; (8003328 <HAL_RCC_ClockConfig+0x1b8>)
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	b2d2      	uxtb	r2, r2
 80032a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032a6:	4b20      	ldr	r3, [pc, #128]	; (8003328 <HAL_RCC_ClockConfig+0x1b8>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0307 	and.w	r3, r3, #7
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d001      	beq.n	80032b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e032      	b.n	800331e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0304 	and.w	r3, r3, #4
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d008      	beq.n	80032d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032c4:	4b19      	ldr	r3, [pc, #100]	; (800332c <HAL_RCC_ClockConfig+0x1bc>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	4916      	ldr	r1, [pc, #88]	; (800332c <HAL_RCC_ClockConfig+0x1bc>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0308 	and.w	r3, r3, #8
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d009      	beq.n	80032f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032e2:	4b12      	ldr	r3, [pc, #72]	; (800332c <HAL_RCC_ClockConfig+0x1bc>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	490e      	ldr	r1, [pc, #56]	; (800332c <HAL_RCC_ClockConfig+0x1bc>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032f6:	f000 f821 	bl	800333c <HAL_RCC_GetSysClockFreq>
 80032fa:	4602      	mov	r2, r0
 80032fc:	4b0b      	ldr	r3, [pc, #44]	; (800332c <HAL_RCC_ClockConfig+0x1bc>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	091b      	lsrs	r3, r3, #4
 8003302:	f003 030f 	and.w	r3, r3, #15
 8003306:	490a      	ldr	r1, [pc, #40]	; (8003330 <HAL_RCC_ClockConfig+0x1c0>)
 8003308:	5ccb      	ldrb	r3, [r1, r3]
 800330a:	fa22 f303 	lsr.w	r3, r2, r3
 800330e:	4a09      	ldr	r2, [pc, #36]	; (8003334 <HAL_RCC_ClockConfig+0x1c4>)
 8003310:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003312:	4b09      	ldr	r3, [pc, #36]	; (8003338 <HAL_RCC_ClockConfig+0x1c8>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f7fe fd02 	bl	8001d20 <HAL_InitTick>

  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	40023c00 	.word	0x40023c00
 800332c:	40023800 	.word	0x40023800
 8003330:	08005404 	.word	0x08005404
 8003334:	20000014 	.word	0x20000014
 8003338:	20000018 	.word	0x20000018

0800333c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800333c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003340:	b094      	sub	sp, #80	; 0x50
 8003342:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003344:	2300      	movs	r3, #0
 8003346:	647b      	str	r3, [r7, #68]	; 0x44
 8003348:	2300      	movs	r3, #0
 800334a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800334c:	2300      	movs	r3, #0
 800334e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003350:	2300      	movs	r3, #0
 8003352:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003354:	4b79      	ldr	r3, [pc, #484]	; (800353c <HAL_RCC_GetSysClockFreq+0x200>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f003 030c 	and.w	r3, r3, #12
 800335c:	2b08      	cmp	r3, #8
 800335e:	d00d      	beq.n	800337c <HAL_RCC_GetSysClockFreq+0x40>
 8003360:	2b08      	cmp	r3, #8
 8003362:	f200 80e1 	bhi.w	8003528 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003366:	2b00      	cmp	r3, #0
 8003368:	d002      	beq.n	8003370 <HAL_RCC_GetSysClockFreq+0x34>
 800336a:	2b04      	cmp	r3, #4
 800336c:	d003      	beq.n	8003376 <HAL_RCC_GetSysClockFreq+0x3a>
 800336e:	e0db      	b.n	8003528 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003370:	4b73      	ldr	r3, [pc, #460]	; (8003540 <HAL_RCC_GetSysClockFreq+0x204>)
 8003372:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003374:	e0db      	b.n	800352e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003376:	4b73      	ldr	r3, [pc, #460]	; (8003544 <HAL_RCC_GetSysClockFreq+0x208>)
 8003378:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800337a:	e0d8      	b.n	800352e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800337c:	4b6f      	ldr	r3, [pc, #444]	; (800353c <HAL_RCC_GetSysClockFreq+0x200>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003384:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003386:	4b6d      	ldr	r3, [pc, #436]	; (800353c <HAL_RCC_GetSysClockFreq+0x200>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d063      	beq.n	800345a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003392:	4b6a      	ldr	r3, [pc, #424]	; (800353c <HAL_RCC_GetSysClockFreq+0x200>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	099b      	lsrs	r3, r3, #6
 8003398:	2200      	movs	r2, #0
 800339a:	63bb      	str	r3, [r7, #56]	; 0x38
 800339c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800339e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033a4:	633b      	str	r3, [r7, #48]	; 0x30
 80033a6:	2300      	movs	r3, #0
 80033a8:	637b      	str	r3, [r7, #52]	; 0x34
 80033aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80033ae:	4622      	mov	r2, r4
 80033b0:	462b      	mov	r3, r5
 80033b2:	f04f 0000 	mov.w	r0, #0
 80033b6:	f04f 0100 	mov.w	r1, #0
 80033ba:	0159      	lsls	r1, r3, #5
 80033bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033c0:	0150      	lsls	r0, r2, #5
 80033c2:	4602      	mov	r2, r0
 80033c4:	460b      	mov	r3, r1
 80033c6:	4621      	mov	r1, r4
 80033c8:	1a51      	subs	r1, r2, r1
 80033ca:	6139      	str	r1, [r7, #16]
 80033cc:	4629      	mov	r1, r5
 80033ce:	eb63 0301 	sbc.w	r3, r3, r1
 80033d2:	617b      	str	r3, [r7, #20]
 80033d4:	f04f 0200 	mov.w	r2, #0
 80033d8:	f04f 0300 	mov.w	r3, #0
 80033dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033e0:	4659      	mov	r1, fp
 80033e2:	018b      	lsls	r3, r1, #6
 80033e4:	4651      	mov	r1, sl
 80033e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033ea:	4651      	mov	r1, sl
 80033ec:	018a      	lsls	r2, r1, #6
 80033ee:	4651      	mov	r1, sl
 80033f0:	ebb2 0801 	subs.w	r8, r2, r1
 80033f4:	4659      	mov	r1, fp
 80033f6:	eb63 0901 	sbc.w	r9, r3, r1
 80033fa:	f04f 0200 	mov.w	r2, #0
 80033fe:	f04f 0300 	mov.w	r3, #0
 8003402:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003406:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800340a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800340e:	4690      	mov	r8, r2
 8003410:	4699      	mov	r9, r3
 8003412:	4623      	mov	r3, r4
 8003414:	eb18 0303 	adds.w	r3, r8, r3
 8003418:	60bb      	str	r3, [r7, #8]
 800341a:	462b      	mov	r3, r5
 800341c:	eb49 0303 	adc.w	r3, r9, r3
 8003420:	60fb      	str	r3, [r7, #12]
 8003422:	f04f 0200 	mov.w	r2, #0
 8003426:	f04f 0300 	mov.w	r3, #0
 800342a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800342e:	4629      	mov	r1, r5
 8003430:	024b      	lsls	r3, r1, #9
 8003432:	4621      	mov	r1, r4
 8003434:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003438:	4621      	mov	r1, r4
 800343a:	024a      	lsls	r2, r1, #9
 800343c:	4610      	mov	r0, r2
 800343e:	4619      	mov	r1, r3
 8003440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003442:	2200      	movs	r2, #0
 8003444:	62bb      	str	r3, [r7, #40]	; 0x28
 8003446:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003448:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800344c:	f7fd fab2 	bl	80009b4 <__aeabi_uldivmod>
 8003450:	4602      	mov	r2, r0
 8003452:	460b      	mov	r3, r1
 8003454:	4613      	mov	r3, r2
 8003456:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003458:	e058      	b.n	800350c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800345a:	4b38      	ldr	r3, [pc, #224]	; (800353c <HAL_RCC_GetSysClockFreq+0x200>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	099b      	lsrs	r3, r3, #6
 8003460:	2200      	movs	r2, #0
 8003462:	4618      	mov	r0, r3
 8003464:	4611      	mov	r1, r2
 8003466:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800346a:	623b      	str	r3, [r7, #32]
 800346c:	2300      	movs	r3, #0
 800346e:	627b      	str	r3, [r7, #36]	; 0x24
 8003470:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003474:	4642      	mov	r2, r8
 8003476:	464b      	mov	r3, r9
 8003478:	f04f 0000 	mov.w	r0, #0
 800347c:	f04f 0100 	mov.w	r1, #0
 8003480:	0159      	lsls	r1, r3, #5
 8003482:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003486:	0150      	lsls	r0, r2, #5
 8003488:	4602      	mov	r2, r0
 800348a:	460b      	mov	r3, r1
 800348c:	4641      	mov	r1, r8
 800348e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003492:	4649      	mov	r1, r9
 8003494:	eb63 0b01 	sbc.w	fp, r3, r1
 8003498:	f04f 0200 	mov.w	r2, #0
 800349c:	f04f 0300 	mov.w	r3, #0
 80034a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80034a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80034a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80034ac:	ebb2 040a 	subs.w	r4, r2, sl
 80034b0:	eb63 050b 	sbc.w	r5, r3, fp
 80034b4:	f04f 0200 	mov.w	r2, #0
 80034b8:	f04f 0300 	mov.w	r3, #0
 80034bc:	00eb      	lsls	r3, r5, #3
 80034be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034c2:	00e2      	lsls	r2, r4, #3
 80034c4:	4614      	mov	r4, r2
 80034c6:	461d      	mov	r5, r3
 80034c8:	4643      	mov	r3, r8
 80034ca:	18e3      	adds	r3, r4, r3
 80034cc:	603b      	str	r3, [r7, #0]
 80034ce:	464b      	mov	r3, r9
 80034d0:	eb45 0303 	adc.w	r3, r5, r3
 80034d4:	607b      	str	r3, [r7, #4]
 80034d6:	f04f 0200 	mov.w	r2, #0
 80034da:	f04f 0300 	mov.w	r3, #0
 80034de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034e2:	4629      	mov	r1, r5
 80034e4:	028b      	lsls	r3, r1, #10
 80034e6:	4621      	mov	r1, r4
 80034e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034ec:	4621      	mov	r1, r4
 80034ee:	028a      	lsls	r2, r1, #10
 80034f0:	4610      	mov	r0, r2
 80034f2:	4619      	mov	r1, r3
 80034f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034f6:	2200      	movs	r2, #0
 80034f8:	61bb      	str	r3, [r7, #24]
 80034fa:	61fa      	str	r2, [r7, #28]
 80034fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003500:	f7fd fa58 	bl	80009b4 <__aeabi_uldivmod>
 8003504:	4602      	mov	r2, r0
 8003506:	460b      	mov	r3, r1
 8003508:	4613      	mov	r3, r2
 800350a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800350c:	4b0b      	ldr	r3, [pc, #44]	; (800353c <HAL_RCC_GetSysClockFreq+0x200>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	0c1b      	lsrs	r3, r3, #16
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	3301      	adds	r3, #1
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800351c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800351e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003520:	fbb2 f3f3 	udiv	r3, r2, r3
 8003524:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003526:	e002      	b.n	800352e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003528:	4b05      	ldr	r3, [pc, #20]	; (8003540 <HAL_RCC_GetSysClockFreq+0x204>)
 800352a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800352c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800352e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003530:	4618      	mov	r0, r3
 8003532:	3750      	adds	r7, #80	; 0x50
 8003534:	46bd      	mov	sp, r7
 8003536:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800353a:	bf00      	nop
 800353c:	40023800 	.word	0x40023800
 8003540:	00f42400 	.word	0x00f42400
 8003544:	007a1200 	.word	0x007a1200

08003548 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800354c:	4b03      	ldr	r3, [pc, #12]	; (800355c <HAL_RCC_GetHCLKFreq+0x14>)
 800354e:	681b      	ldr	r3, [r3, #0]
}
 8003550:	4618      	mov	r0, r3
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	20000014 	.word	0x20000014

08003560 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003564:	f7ff fff0 	bl	8003548 <HAL_RCC_GetHCLKFreq>
 8003568:	4602      	mov	r2, r0
 800356a:	4b05      	ldr	r3, [pc, #20]	; (8003580 <HAL_RCC_GetPCLK1Freq+0x20>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	0a9b      	lsrs	r3, r3, #10
 8003570:	f003 0307 	and.w	r3, r3, #7
 8003574:	4903      	ldr	r1, [pc, #12]	; (8003584 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003576:	5ccb      	ldrb	r3, [r1, r3]
 8003578:	fa22 f303 	lsr.w	r3, r2, r3
}
 800357c:	4618      	mov	r0, r3
 800357e:	bd80      	pop	{r7, pc}
 8003580:	40023800 	.word	0x40023800
 8003584:	08005414 	.word	0x08005414

08003588 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800358c:	f7ff ffdc 	bl	8003548 <HAL_RCC_GetHCLKFreq>
 8003590:	4602      	mov	r2, r0
 8003592:	4b05      	ldr	r3, [pc, #20]	; (80035a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	0b5b      	lsrs	r3, r3, #13
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	4903      	ldr	r1, [pc, #12]	; (80035ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800359e:	5ccb      	ldrb	r3, [r1, r3]
 80035a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40023800 	.word	0x40023800
 80035ac:	08005414 	.word	0x08005414

080035b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e041      	b.n	8003646 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d106      	bne.n	80035dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f7fe f91e 	bl	8001818 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2202      	movs	r2, #2
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3304      	adds	r3, #4
 80035ec:	4619      	mov	r1, r3
 80035ee:	4610      	mov	r0, r2
 80035f0:	f000 fc34 	bl	8003e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b082      	sub	sp, #8
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d101      	bne.n	8003660 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e041      	b.n	80036e4 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2b00      	cmp	r3, #0
 800366a:	d106      	bne.n	800367a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 f839 	bl	80036ec <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2202      	movs	r2, #2
 800367e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	3304      	adds	r3, #4
 800368a:	4619      	mov	r1, r3
 800368c:	4610      	mov	r0, r2
 800368e:	f000 fbe5 	bl	8003e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3708      	adds	r7, #8
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800370a:	2300      	movs	r3, #0
 800370c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d104      	bne.n	800371e <HAL_TIM_IC_Start_IT+0x1e>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800371a:	b2db      	uxtb	r3, r3
 800371c:	e013      	b.n	8003746 <HAL_TIM_IC_Start_IT+0x46>
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	2b04      	cmp	r3, #4
 8003722:	d104      	bne.n	800372e <HAL_TIM_IC_Start_IT+0x2e>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800372a:	b2db      	uxtb	r3, r3
 800372c:	e00b      	b.n	8003746 <HAL_TIM_IC_Start_IT+0x46>
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	2b08      	cmp	r3, #8
 8003732:	d104      	bne.n	800373e <HAL_TIM_IC_Start_IT+0x3e>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800373a:	b2db      	uxtb	r3, r3
 800373c:	e003      	b.n	8003746 <HAL_TIM_IC_Start_IT+0x46>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003744:	b2db      	uxtb	r3, r3
 8003746:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d104      	bne.n	8003758 <HAL_TIM_IC_Start_IT+0x58>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003754:	b2db      	uxtb	r3, r3
 8003756:	e013      	b.n	8003780 <HAL_TIM_IC_Start_IT+0x80>
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	2b04      	cmp	r3, #4
 800375c:	d104      	bne.n	8003768 <HAL_TIM_IC_Start_IT+0x68>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003764:	b2db      	uxtb	r3, r3
 8003766:	e00b      	b.n	8003780 <HAL_TIM_IC_Start_IT+0x80>
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	2b08      	cmp	r3, #8
 800376c:	d104      	bne.n	8003778 <HAL_TIM_IC_Start_IT+0x78>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003774:	b2db      	uxtb	r3, r3
 8003776:	e003      	b.n	8003780 <HAL_TIM_IC_Start_IT+0x80>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800377e:	b2db      	uxtb	r3, r3
 8003780:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003782:	7bbb      	ldrb	r3, [r7, #14]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d102      	bne.n	800378e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003788:	7b7b      	ldrb	r3, [r7, #13]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d001      	beq.n	8003792 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e0c2      	b.n	8003918 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d104      	bne.n	80037a2 <HAL_TIM_IC_Start_IT+0xa2>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2202      	movs	r2, #2
 800379c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037a0:	e013      	b.n	80037ca <HAL_TIM_IC_Start_IT+0xca>
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	2b04      	cmp	r3, #4
 80037a6:	d104      	bne.n	80037b2 <HAL_TIM_IC_Start_IT+0xb2>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2202      	movs	r2, #2
 80037ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037b0:	e00b      	b.n	80037ca <HAL_TIM_IC_Start_IT+0xca>
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	2b08      	cmp	r3, #8
 80037b6:	d104      	bne.n	80037c2 <HAL_TIM_IC_Start_IT+0xc2>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2202      	movs	r2, #2
 80037bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037c0:	e003      	b.n	80037ca <HAL_TIM_IC_Start_IT+0xca>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2202      	movs	r2, #2
 80037c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d104      	bne.n	80037da <HAL_TIM_IC_Start_IT+0xda>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2202      	movs	r2, #2
 80037d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037d8:	e013      	b.n	8003802 <HAL_TIM_IC_Start_IT+0x102>
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	2b04      	cmp	r3, #4
 80037de:	d104      	bne.n	80037ea <HAL_TIM_IC_Start_IT+0xea>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2202      	movs	r2, #2
 80037e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037e8:	e00b      	b.n	8003802 <HAL_TIM_IC_Start_IT+0x102>
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	2b08      	cmp	r3, #8
 80037ee:	d104      	bne.n	80037fa <HAL_TIM_IC_Start_IT+0xfa>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2202      	movs	r2, #2
 80037f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037f8:	e003      	b.n	8003802 <HAL_TIM_IC_Start_IT+0x102>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2202      	movs	r2, #2
 80037fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	2b0c      	cmp	r3, #12
 8003806:	d841      	bhi.n	800388c <HAL_TIM_IC_Start_IT+0x18c>
 8003808:	a201      	add	r2, pc, #4	; (adr r2, 8003810 <HAL_TIM_IC_Start_IT+0x110>)
 800380a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800380e:	bf00      	nop
 8003810:	08003845 	.word	0x08003845
 8003814:	0800388d 	.word	0x0800388d
 8003818:	0800388d 	.word	0x0800388d
 800381c:	0800388d 	.word	0x0800388d
 8003820:	08003857 	.word	0x08003857
 8003824:	0800388d 	.word	0x0800388d
 8003828:	0800388d 	.word	0x0800388d
 800382c:	0800388d 	.word	0x0800388d
 8003830:	08003869 	.word	0x08003869
 8003834:	0800388d 	.word	0x0800388d
 8003838:	0800388d 	.word	0x0800388d
 800383c:	0800388d 	.word	0x0800388d
 8003840:	0800387b 	.word	0x0800387b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68da      	ldr	r2, [r3, #12]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f042 0202 	orr.w	r2, r2, #2
 8003852:	60da      	str	r2, [r3, #12]
      break;
 8003854:	e01d      	b.n	8003892 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68da      	ldr	r2, [r3, #12]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f042 0204 	orr.w	r2, r2, #4
 8003864:	60da      	str	r2, [r3, #12]
      break;
 8003866:	e014      	b.n	8003892 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68da      	ldr	r2, [r3, #12]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f042 0208 	orr.w	r2, r2, #8
 8003876:	60da      	str	r2, [r3, #12]
      break;
 8003878:	e00b      	b.n	8003892 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68da      	ldr	r2, [r3, #12]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f042 0210 	orr.w	r2, r2, #16
 8003888:	60da      	str	r2, [r3, #12]
      break;
 800388a:	e002      	b.n	8003892 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	73fb      	strb	r3, [r7, #15]
      break;
 8003890:	bf00      	nop
  }

  if (status == HAL_OK)
 8003892:	7bfb      	ldrb	r3, [r7, #15]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d13e      	bne.n	8003916 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2201      	movs	r2, #1
 800389e:	6839      	ldr	r1, [r7, #0]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f000 fd13 	bl	80042cc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a1d      	ldr	r2, [pc, #116]	; (8003920 <HAL_TIM_IC_Start_IT+0x220>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d018      	beq.n	80038e2 <HAL_TIM_IC_Start_IT+0x1e2>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038b8:	d013      	beq.n	80038e2 <HAL_TIM_IC_Start_IT+0x1e2>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a19      	ldr	r2, [pc, #100]	; (8003924 <HAL_TIM_IC_Start_IT+0x224>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d00e      	beq.n	80038e2 <HAL_TIM_IC_Start_IT+0x1e2>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a17      	ldr	r2, [pc, #92]	; (8003928 <HAL_TIM_IC_Start_IT+0x228>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d009      	beq.n	80038e2 <HAL_TIM_IC_Start_IT+0x1e2>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a16      	ldr	r2, [pc, #88]	; (800392c <HAL_TIM_IC_Start_IT+0x22c>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d004      	beq.n	80038e2 <HAL_TIM_IC_Start_IT+0x1e2>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a14      	ldr	r2, [pc, #80]	; (8003930 <HAL_TIM_IC_Start_IT+0x230>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d111      	bne.n	8003906 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f003 0307 	and.w	r3, r3, #7
 80038ec:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	2b06      	cmp	r3, #6
 80038f2:	d010      	beq.n	8003916 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f042 0201 	orr.w	r2, r2, #1
 8003902:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003904:	e007      	b.n	8003916 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f042 0201 	orr.w	r2, r2, #1
 8003914:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003916:	7bfb      	ldrb	r3, [r7, #15]
}
 8003918:	4618      	mov	r0, r3
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	40010000 	.word	0x40010000
 8003924:	40000400 	.word	0x40000400
 8003928:	40000800 	.word	0x40000800
 800392c:	40000c00 	.word	0x40000c00
 8003930:	40014000 	.word	0x40014000

08003934 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b02      	cmp	r3, #2
 8003948:	d122      	bne.n	8003990 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b02      	cmp	r3, #2
 8003956:	d11b      	bne.n	8003990 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f06f 0202 	mvn.w	r2, #2
 8003960:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2201      	movs	r2, #1
 8003966:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	f003 0303 	and.w	r3, r3, #3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d003      	beq.n	800397e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7fd faf6 	bl	8000f68 <HAL_TIM_IC_CaptureCallback>
 800397c:	e005      	b.n	800398a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 fa4d 	bl	8003e1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 fa54 	bl	8003e32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	f003 0304 	and.w	r3, r3, #4
 800399a:	2b04      	cmp	r3, #4
 800399c:	d122      	bne.n	80039e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	f003 0304 	and.w	r3, r3, #4
 80039a8:	2b04      	cmp	r3, #4
 80039aa:	d11b      	bne.n	80039e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f06f 0204 	mvn.w	r2, #4
 80039b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2202      	movs	r2, #2
 80039ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d003      	beq.n	80039d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7fd facc 	bl	8000f68 <HAL_TIM_IC_CaptureCallback>
 80039d0:	e005      	b.n	80039de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 fa23 	bl	8003e1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 fa2a 	bl	8003e32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	f003 0308 	and.w	r3, r3, #8
 80039ee:	2b08      	cmp	r3, #8
 80039f0:	d122      	bne.n	8003a38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	f003 0308 	and.w	r3, r3, #8
 80039fc:	2b08      	cmp	r3, #8
 80039fe:	d11b      	bne.n	8003a38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f06f 0208 	mvn.w	r2, #8
 8003a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2204      	movs	r2, #4
 8003a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	f003 0303 	and.w	r3, r3, #3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7fd faa2 	bl	8000f68 <HAL_TIM_IC_CaptureCallback>
 8003a24:	e005      	b.n	8003a32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f9f9 	bl	8003e1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 fa00 	bl	8003e32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	f003 0310 	and.w	r3, r3, #16
 8003a42:	2b10      	cmp	r3, #16
 8003a44:	d122      	bne.n	8003a8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	f003 0310 	and.w	r3, r3, #16
 8003a50:	2b10      	cmp	r3, #16
 8003a52:	d11b      	bne.n	8003a8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f06f 0210 	mvn.w	r2, #16
 8003a5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2208      	movs	r2, #8
 8003a62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d003      	beq.n	8003a7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7fd fa78 	bl	8000f68 <HAL_TIM_IC_CaptureCallback>
 8003a78:	e005      	b.n	8003a86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 f9cf 	bl	8003e1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 f9d6 	bl	8003e32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d10e      	bne.n	8003ab8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d107      	bne.n	8003ab8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f06f 0201 	mvn.w	r2, #1
 8003ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f9a9 	bl	8003e0a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac2:	2b80      	cmp	r3, #128	; 0x80
 8003ac4:	d10e      	bne.n	8003ae4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad0:	2b80      	cmp	r3, #128	; 0x80
 8003ad2:	d107      	bne.n	8003ae4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 fc92 	bl	8004408 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aee:	2b40      	cmp	r3, #64	; 0x40
 8003af0:	d10e      	bne.n	8003b10 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003afc:	2b40      	cmp	r3, #64	; 0x40
 8003afe:	d107      	bne.n	8003b10 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 f99b 	bl	8003e46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	f003 0320 	and.w	r3, r3, #32
 8003b1a:	2b20      	cmp	r3, #32
 8003b1c:	d10e      	bne.n	8003b3c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	f003 0320 	and.w	r3, r3, #32
 8003b28:	2b20      	cmp	r3, #32
 8003b2a:	d107      	bne.n	8003b3c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f06f 0220 	mvn.w	r2, #32
 8003b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 fc5c 	bl	80043f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b3c:	bf00      	nop
 8003b3e:	3708      	adds	r7, #8
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b50:	2300      	movs	r3, #0
 8003b52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d101      	bne.n	8003b62 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003b5e:	2302      	movs	r3, #2
 8003b60:	e088      	b.n	8003c74 <HAL_TIM_IC_ConfigChannel+0x130>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d11b      	bne.n	8003ba8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6818      	ldr	r0, [r3, #0]
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	6819      	ldr	r1, [r3, #0]
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	685a      	ldr	r2, [r3, #4]
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	f000 f9ec 	bl	8003f5c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	699a      	ldr	r2, [r3, #24]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f022 020c 	bic.w	r2, r2, #12
 8003b92:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6999      	ldr	r1, [r3, #24]
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	689a      	ldr	r2, [r3, #8]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	619a      	str	r2, [r3, #24]
 8003ba6:	e060      	b.n	8003c6a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b04      	cmp	r3, #4
 8003bac:	d11c      	bne.n	8003be8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6818      	ldr	r0, [r3, #0]
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	6819      	ldr	r1, [r3, #0]
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	685a      	ldr	r2, [r3, #4]
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	f000 fa64 	bl	800408a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	699a      	ldr	r2, [r3, #24]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003bd0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	6999      	ldr	r1, [r3, #24]
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	021a      	lsls	r2, r3, #8
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	619a      	str	r2, [r3, #24]
 8003be6:	e040      	b.n	8003c6a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b08      	cmp	r3, #8
 8003bec:	d11b      	bne.n	8003c26 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6818      	ldr	r0, [r3, #0]
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	6819      	ldr	r1, [r3, #0]
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	685a      	ldr	r2, [r3, #4]
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	f000 fab1 	bl	8004164 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	69da      	ldr	r2, [r3, #28]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f022 020c 	bic.w	r2, r2, #12
 8003c10:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	69d9      	ldr	r1, [r3, #28]
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	689a      	ldr	r2, [r3, #8]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	430a      	orrs	r2, r1
 8003c22:	61da      	str	r2, [r3, #28]
 8003c24:	e021      	b.n	8003c6a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b0c      	cmp	r3, #12
 8003c2a:	d11c      	bne.n	8003c66 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6818      	ldr	r0, [r3, #0]
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	6819      	ldr	r1, [r3, #0]
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	685a      	ldr	r2, [r3, #4]
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	f000 face 	bl	80041dc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	69da      	ldr	r2, [r3, #28]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003c4e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	69d9      	ldr	r1, [r3, #28]
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	021a      	lsls	r2, r3, #8
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	430a      	orrs	r2, r1
 8003c62:	61da      	str	r2, [r3, #28]
 8003c64:	e001      	b.n	8003c6a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c72:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3718      	adds	r7, #24
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c86:	2300      	movs	r3, #0
 8003c88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d101      	bne.n	8003c98 <HAL_TIM_ConfigClockSource+0x1c>
 8003c94:	2302      	movs	r3, #2
 8003c96:	e0b4      	b.n	8003e02 <HAL_TIM_ConfigClockSource+0x186>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003cb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cbe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68ba      	ldr	r2, [r7, #8]
 8003cc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cd0:	d03e      	beq.n	8003d50 <HAL_TIM_ConfigClockSource+0xd4>
 8003cd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cd6:	f200 8087 	bhi.w	8003de8 <HAL_TIM_ConfigClockSource+0x16c>
 8003cda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cde:	f000 8086 	beq.w	8003dee <HAL_TIM_ConfigClockSource+0x172>
 8003ce2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ce6:	d87f      	bhi.n	8003de8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ce8:	2b70      	cmp	r3, #112	; 0x70
 8003cea:	d01a      	beq.n	8003d22 <HAL_TIM_ConfigClockSource+0xa6>
 8003cec:	2b70      	cmp	r3, #112	; 0x70
 8003cee:	d87b      	bhi.n	8003de8 <HAL_TIM_ConfigClockSource+0x16c>
 8003cf0:	2b60      	cmp	r3, #96	; 0x60
 8003cf2:	d050      	beq.n	8003d96 <HAL_TIM_ConfigClockSource+0x11a>
 8003cf4:	2b60      	cmp	r3, #96	; 0x60
 8003cf6:	d877      	bhi.n	8003de8 <HAL_TIM_ConfigClockSource+0x16c>
 8003cf8:	2b50      	cmp	r3, #80	; 0x50
 8003cfa:	d03c      	beq.n	8003d76 <HAL_TIM_ConfigClockSource+0xfa>
 8003cfc:	2b50      	cmp	r3, #80	; 0x50
 8003cfe:	d873      	bhi.n	8003de8 <HAL_TIM_ConfigClockSource+0x16c>
 8003d00:	2b40      	cmp	r3, #64	; 0x40
 8003d02:	d058      	beq.n	8003db6 <HAL_TIM_ConfigClockSource+0x13a>
 8003d04:	2b40      	cmp	r3, #64	; 0x40
 8003d06:	d86f      	bhi.n	8003de8 <HAL_TIM_ConfigClockSource+0x16c>
 8003d08:	2b30      	cmp	r3, #48	; 0x30
 8003d0a:	d064      	beq.n	8003dd6 <HAL_TIM_ConfigClockSource+0x15a>
 8003d0c:	2b30      	cmp	r3, #48	; 0x30
 8003d0e:	d86b      	bhi.n	8003de8 <HAL_TIM_ConfigClockSource+0x16c>
 8003d10:	2b20      	cmp	r3, #32
 8003d12:	d060      	beq.n	8003dd6 <HAL_TIM_ConfigClockSource+0x15a>
 8003d14:	2b20      	cmp	r3, #32
 8003d16:	d867      	bhi.n	8003de8 <HAL_TIM_ConfigClockSource+0x16c>
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d05c      	beq.n	8003dd6 <HAL_TIM_ConfigClockSource+0x15a>
 8003d1c:	2b10      	cmp	r3, #16
 8003d1e:	d05a      	beq.n	8003dd6 <HAL_TIM_ConfigClockSource+0x15a>
 8003d20:	e062      	b.n	8003de8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6818      	ldr	r0, [r3, #0]
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	6899      	ldr	r1, [r3, #8]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	f000 faab 	bl	800428c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68ba      	ldr	r2, [r7, #8]
 8003d4c:	609a      	str	r2, [r3, #8]
      break;
 8003d4e:	e04f      	b.n	8003df0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6818      	ldr	r0, [r3, #0]
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	6899      	ldr	r1, [r3, #8]
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685a      	ldr	r2, [r3, #4]
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	f000 fa94 	bl	800428c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	689a      	ldr	r2, [r3, #8]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d72:	609a      	str	r2, [r3, #8]
      break;
 8003d74:	e03c      	b.n	8003df0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6818      	ldr	r0, [r3, #0]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	6859      	ldr	r1, [r3, #4]
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	461a      	mov	r2, r3
 8003d84:	f000 f952 	bl	800402c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2150      	movs	r1, #80	; 0x50
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 fa61 	bl	8004256 <TIM_ITRx_SetConfig>
      break;
 8003d94:	e02c      	b.n	8003df0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6818      	ldr	r0, [r3, #0]
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	6859      	ldr	r1, [r3, #4]
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	461a      	mov	r2, r3
 8003da4:	f000 f9ae 	bl	8004104 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2160      	movs	r1, #96	; 0x60
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 fa51 	bl	8004256 <TIM_ITRx_SetConfig>
      break;
 8003db4:	e01c      	b.n	8003df0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6818      	ldr	r0, [r3, #0]
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	6859      	ldr	r1, [r3, #4]
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	f000 f932 	bl	800402c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2140      	movs	r1, #64	; 0x40
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f000 fa41 	bl	8004256 <TIM_ITRx_SetConfig>
      break;
 8003dd4:	e00c      	b.n	8003df0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4619      	mov	r1, r3
 8003de0:	4610      	mov	r0, r2
 8003de2:	f000 fa38 	bl	8004256 <TIM_ITRx_SetConfig>
      break;
 8003de6:	e003      	b.n	8003df0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	73fb      	strb	r3, [r7, #15]
      break;
 8003dec:	e000      	b.n	8003df0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003dee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b083      	sub	sp, #12
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003e12:	bf00      	nop
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr

08003e1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b083      	sub	sp, #12
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e26:	bf00      	nop
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e32:	b480      	push	{r7}
 8003e34:	b083      	sub	sp, #12
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e3a:	bf00      	nop
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e46:	b480      	push	{r7}
 8003e48:	b083      	sub	sp, #12
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e4e:	bf00      	nop
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
	...

08003e5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a34      	ldr	r2, [pc, #208]	; (8003f40 <TIM_Base_SetConfig+0xe4>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d00f      	beq.n	8003e94 <TIM_Base_SetConfig+0x38>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e7a:	d00b      	beq.n	8003e94 <TIM_Base_SetConfig+0x38>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a31      	ldr	r2, [pc, #196]	; (8003f44 <TIM_Base_SetConfig+0xe8>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d007      	beq.n	8003e94 <TIM_Base_SetConfig+0x38>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a30      	ldr	r2, [pc, #192]	; (8003f48 <TIM_Base_SetConfig+0xec>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d003      	beq.n	8003e94 <TIM_Base_SetConfig+0x38>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a2f      	ldr	r2, [pc, #188]	; (8003f4c <TIM_Base_SetConfig+0xf0>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d108      	bne.n	8003ea6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a25      	ldr	r2, [pc, #148]	; (8003f40 <TIM_Base_SetConfig+0xe4>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d01b      	beq.n	8003ee6 <TIM_Base_SetConfig+0x8a>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb4:	d017      	beq.n	8003ee6 <TIM_Base_SetConfig+0x8a>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a22      	ldr	r2, [pc, #136]	; (8003f44 <TIM_Base_SetConfig+0xe8>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d013      	beq.n	8003ee6 <TIM_Base_SetConfig+0x8a>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a21      	ldr	r2, [pc, #132]	; (8003f48 <TIM_Base_SetConfig+0xec>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d00f      	beq.n	8003ee6 <TIM_Base_SetConfig+0x8a>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a20      	ldr	r2, [pc, #128]	; (8003f4c <TIM_Base_SetConfig+0xf0>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d00b      	beq.n	8003ee6 <TIM_Base_SetConfig+0x8a>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a1f      	ldr	r2, [pc, #124]	; (8003f50 <TIM_Base_SetConfig+0xf4>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d007      	beq.n	8003ee6 <TIM_Base_SetConfig+0x8a>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a1e      	ldr	r2, [pc, #120]	; (8003f54 <TIM_Base_SetConfig+0xf8>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d003      	beq.n	8003ee6 <TIM_Base_SetConfig+0x8a>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a1d      	ldr	r2, [pc, #116]	; (8003f58 <TIM_Base_SetConfig+0xfc>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d108      	bne.n	8003ef8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	689a      	ldr	r2, [r3, #8]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a08      	ldr	r2, [pc, #32]	; (8003f40 <TIM_Base_SetConfig+0xe4>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d103      	bne.n	8003f2c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	691a      	ldr	r2, [r3, #16]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	615a      	str	r2, [r3, #20]
}
 8003f32:	bf00      	nop
 8003f34:	3714      	adds	r7, #20
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	40010000 	.word	0x40010000
 8003f44:	40000400 	.word	0x40000400
 8003f48:	40000800 	.word	0x40000800
 8003f4c:	40000c00 	.word	0x40000c00
 8003f50:	40014000 	.word	0x40014000
 8003f54:	40014400 	.word	0x40014400
 8003f58:	40014800 	.word	0x40014800

08003f5c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b087      	sub	sp, #28
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
 8003f68:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	f023 0201 	bic.w	r2, r3, #1
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6a1b      	ldr	r3, [r3, #32]
 8003f80:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	4a24      	ldr	r2, [pc, #144]	; (8004018 <TIM_TI1_SetConfig+0xbc>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d013      	beq.n	8003fb2 <TIM_TI1_SetConfig+0x56>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f90:	d00f      	beq.n	8003fb2 <TIM_TI1_SetConfig+0x56>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	4a21      	ldr	r2, [pc, #132]	; (800401c <TIM_TI1_SetConfig+0xc0>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d00b      	beq.n	8003fb2 <TIM_TI1_SetConfig+0x56>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	4a20      	ldr	r2, [pc, #128]	; (8004020 <TIM_TI1_SetConfig+0xc4>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d007      	beq.n	8003fb2 <TIM_TI1_SetConfig+0x56>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	4a1f      	ldr	r2, [pc, #124]	; (8004024 <TIM_TI1_SetConfig+0xc8>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d003      	beq.n	8003fb2 <TIM_TI1_SetConfig+0x56>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	4a1e      	ldr	r2, [pc, #120]	; (8004028 <TIM_TI1_SetConfig+0xcc>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d101      	bne.n	8003fb6 <TIM_TI1_SetConfig+0x5a>
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e000      	b.n	8003fb8 <TIM_TI1_SetConfig+0x5c>
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d008      	beq.n	8003fce <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f023 0303 	bic.w	r3, r3, #3
 8003fc2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003fc4:	697a      	ldr	r2, [r7, #20]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	617b      	str	r3, [r7, #20]
 8003fcc:	e003      	b.n	8003fd6 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f043 0301 	orr.w	r3, r3, #1
 8003fd4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fdc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	011b      	lsls	r3, r3, #4
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	f023 030a 	bic.w	r3, r3, #10
 8003ff0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	f003 030a 	and.w	r3, r3, #10
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	621a      	str	r2, [r3, #32]
}
 800400a:	bf00      	nop
 800400c:	371c      	adds	r7, #28
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	40010000 	.word	0x40010000
 800401c:	40000400 	.word	0x40000400
 8004020:	40000800 	.word	0x40000800
 8004024:	40000c00 	.word	0x40000c00
 8004028:	40014000 	.word	0x40014000

0800402c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800402c:	b480      	push	{r7}
 800402e:	b087      	sub	sp, #28
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6a1b      	ldr	r3, [r3, #32]
 800403c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	f023 0201 	bic.w	r2, r3, #1
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004056:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	011b      	lsls	r3, r3, #4
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	4313      	orrs	r3, r2
 8004060:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f023 030a 	bic.w	r3, r3, #10
 8004068:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	4313      	orrs	r3, r2
 8004070:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	621a      	str	r2, [r3, #32]
}
 800407e:	bf00      	nop
 8004080:	371c      	adds	r7, #28
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800408a:	b480      	push	{r7}
 800408c:	b087      	sub	sp, #28
 800408e:	af00      	add	r7, sp, #0
 8004090:	60f8      	str	r0, [r7, #12]
 8004092:	60b9      	str	r1, [r7, #8]
 8004094:	607a      	str	r2, [r7, #4]
 8004096:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6a1b      	ldr	r3, [r3, #32]
 800409c:	f023 0210 	bic.w	r2, r3, #16
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	021b      	lsls	r3, r3, #8
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	4313      	orrs	r3, r2
 80040c0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	031b      	lsls	r3, r3, #12
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040dc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	011b      	lsls	r3, r3, #4
 80040e2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	697a      	ldr	r2, [r7, #20]
 80040f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	621a      	str	r2, [r3, #32]
}
 80040f8:	bf00      	nop
 80040fa:	371c      	adds	r7, #28
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004104:	b480      	push	{r7}
 8004106:	b087      	sub	sp, #28
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6a1b      	ldr	r3, [r3, #32]
 8004114:	f023 0210 	bic.w	r2, r3, #16
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800412e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	031b      	lsls	r3, r3, #12
 8004134:	697a      	ldr	r2, [r7, #20]
 8004136:	4313      	orrs	r3, r2
 8004138:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004140:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	011b      	lsls	r3, r3, #4
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	4313      	orrs	r3, r2
 800414a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	621a      	str	r2, [r3, #32]
}
 8004158:	bf00      	nop
 800415a:	371c      	adds	r7, #28
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004164:	b480      	push	{r7}
 8004166:	b087      	sub	sp, #28
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
 8004170:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6a1b      	ldr	r3, [r3, #32]
 8004188:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	f023 0303 	bic.w	r3, r3, #3
 8004190:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4313      	orrs	r3, r2
 8004198:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041a0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	011b      	lsls	r3, r3, #4
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80041b4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	021b      	lsls	r3, r3, #8
 80041ba:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	621a      	str	r2, [r3, #32]
}
 80041d0:	bf00      	nop
 80041d2:	371c      	adds	r7, #28
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80041dc:	b480      	push	{r7}
 80041de:	b087      	sub	sp, #28
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
 80041e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004208:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	021b      	lsls	r3, r3, #8
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	4313      	orrs	r3, r2
 8004212:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800421a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	031b      	lsls	r3, r3, #12
 8004220:	b29b      	uxth	r3, r3
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	4313      	orrs	r3, r2
 8004226:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800422e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	031b      	lsls	r3, r3, #12
 8004234:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	4313      	orrs	r3, r2
 800423c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	621a      	str	r2, [r3, #32]
}
 800424a:	bf00      	nop
 800424c:	371c      	adds	r7, #28
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004256:	b480      	push	{r7}
 8004258:	b085      	sub	sp, #20
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
 800425e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800426c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	4313      	orrs	r3, r2
 8004274:	f043 0307 	orr.w	r3, r3, #7
 8004278:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	609a      	str	r2, [r3, #8]
}
 8004280:	bf00      	nop
 8004282:	3714      	adds	r7, #20
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800428c:	b480      	push	{r7}
 800428e:	b087      	sub	sp, #28
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
 8004298:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	021a      	lsls	r2, r3, #8
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	431a      	orrs	r2, r3
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	609a      	str	r2, [r3, #8]
}
 80042c0:	bf00      	nop
 80042c2:	371c      	adds	r7, #28
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b087      	sub	sp, #28
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	f003 031f 	and.w	r3, r3, #31
 80042de:	2201      	movs	r2, #1
 80042e0:	fa02 f303 	lsl.w	r3, r2, r3
 80042e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6a1a      	ldr	r2, [r3, #32]
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	43db      	mvns	r3, r3
 80042ee:	401a      	ands	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6a1a      	ldr	r2, [r3, #32]
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	f003 031f 	and.w	r3, r3, #31
 80042fe:	6879      	ldr	r1, [r7, #4]
 8004300:	fa01 f303 	lsl.w	r3, r1, r3
 8004304:	431a      	orrs	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	621a      	str	r2, [r3, #32]
}
 800430a:	bf00      	nop
 800430c:	371c      	adds	r7, #28
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
	...

08004318 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004328:	2b01      	cmp	r3, #1
 800432a:	d101      	bne.n	8004330 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800432c:	2302      	movs	r3, #2
 800432e:	e050      	b.n	80043d2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2202      	movs	r2, #2
 800433c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004356:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	4313      	orrs	r3, r2
 8004360:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a1c      	ldr	r2, [pc, #112]	; (80043e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d018      	beq.n	80043a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800437c:	d013      	beq.n	80043a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a18      	ldr	r2, [pc, #96]	; (80043e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d00e      	beq.n	80043a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a16      	ldr	r2, [pc, #88]	; (80043e8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d009      	beq.n	80043a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a15      	ldr	r2, [pc, #84]	; (80043ec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d004      	beq.n	80043a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a13      	ldr	r2, [pc, #76]	; (80043f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d10c      	bne.n	80043c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	68ba      	ldr	r2, [r7, #8]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68ba      	ldr	r2, [r7, #8]
 80043be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3714      	adds	r7, #20
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	40010000 	.word	0x40010000
 80043e4:	40000400 	.word	0x40000400
 80043e8:	40000800 	.word	0x40000800
 80043ec:	40000c00 	.word	0x40000c00
 80043f0:	40014000 	.word	0x40014000

080043f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e03f      	b.n	80044ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d106      	bne.n	8004448 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f7fd fa4c 	bl	80018e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2224      	movs	r2, #36	; 0x24
 800444c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68da      	ldr	r2, [r3, #12]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800445e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f000 fd23 	bl	8004eac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	691a      	ldr	r2, [r3, #16]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004474:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	695a      	ldr	r2, [r3, #20]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004484:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68da      	ldr	r2, [r3, #12]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004494:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2220      	movs	r2, #32
 80044a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2220      	movs	r2, #32
 80044a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3708      	adds	r7, #8
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b085      	sub	sp, #20
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	60f8      	str	r0, [r7, #12]
 80044be:	60b9      	str	r1, [r7, #8]
 80044c0:	4613      	mov	r3, r2
 80044c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	2b20      	cmp	r3, #32
 80044ce:	d130      	bne.n	8004532 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d002      	beq.n	80044dc <HAL_UART_Transmit_IT+0x26>
 80044d6:	88fb      	ldrh	r3, [r7, #6]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d101      	bne.n	80044e0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e029      	b.n	8004534 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d101      	bne.n	80044ee <HAL_UART_Transmit_IT+0x38>
 80044ea:	2302      	movs	r3, #2
 80044ec:	e022      	b.n	8004534 <HAL_UART_Transmit_IT+0x7e>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	88fa      	ldrh	r2, [r7, #6]
 8004500:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	88fa      	ldrh	r2, [r7, #6]
 8004506:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2221      	movs	r2, #33	; 0x21
 8004512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68da      	ldr	r2, [r3, #12]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800452c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800452e:	2300      	movs	r3, #0
 8004530:	e000      	b.n	8004534 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004532:	2302      	movs	r3, #2
  }
}
 8004534:	4618      	mov	r0, r3
 8004536:	3714      	adds	r7, #20
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	4613      	mov	r3, r2
 800454c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b20      	cmp	r3, #32
 8004558:	d11d      	bne.n	8004596 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d002      	beq.n	8004566 <HAL_UART_Receive_IT+0x26>
 8004560:	88fb      	ldrh	r3, [r7, #6]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e016      	b.n	8004598 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004570:	2b01      	cmp	r3, #1
 8004572:	d101      	bne.n	8004578 <HAL_UART_Receive_IT+0x38>
 8004574:	2302      	movs	r3, #2
 8004576:	e00f      	b.n	8004598 <HAL_UART_Receive_IT+0x58>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004586:	88fb      	ldrh	r3, [r7, #6]
 8004588:	461a      	mov	r2, r3
 800458a:	68b9      	ldr	r1, [r7, #8]
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f000 fab5 	bl	8004afc <UART_Start_Receive_IT>
 8004592:	4603      	mov	r3, r0
 8004594:	e000      	b.n	8004598 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004596:	2302      	movs	r3, #2
  }
}
 8004598:	4618      	mov	r0, r3
 800459a:	3710      	adds	r7, #16
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b0ba      	sub	sp, #232	; 0xe8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80045c6:	2300      	movs	r3, #0
 80045c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80045cc:	2300      	movs	r3, #0
 80045ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80045d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045d6:	f003 030f 	and.w	r3, r3, #15
 80045da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80045de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d10f      	bne.n	8004606 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ea:	f003 0320 	and.w	r3, r3, #32
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d009      	beq.n	8004606 <HAL_UART_IRQHandler+0x66>
 80045f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045f6:	f003 0320 	and.w	r3, r3, #32
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d003      	beq.n	8004606 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 fb99 	bl	8004d36 <UART_Receive_IT>
      return;
 8004604:	e256      	b.n	8004ab4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004606:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 80de 	beq.w	80047cc <HAL_UART_IRQHandler+0x22c>
 8004610:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	2b00      	cmp	r3, #0
 800461a:	d106      	bne.n	800462a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800461c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004620:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004624:	2b00      	cmp	r3, #0
 8004626:	f000 80d1 	beq.w	80047cc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800462a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00b      	beq.n	800464e <HAL_UART_IRQHandler+0xae>
 8004636:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800463a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800463e:	2b00      	cmp	r3, #0
 8004640:	d005      	beq.n	800464e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004646:	f043 0201 	orr.w	r2, r3, #1
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800464e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004652:	f003 0304 	and.w	r3, r3, #4
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00b      	beq.n	8004672 <HAL_UART_IRQHandler+0xd2>
 800465a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b00      	cmp	r3, #0
 8004664:	d005      	beq.n	8004672 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466a:	f043 0202 	orr.w	r2, r3, #2
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00b      	beq.n	8004696 <HAL_UART_IRQHandler+0xf6>
 800467e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d005      	beq.n	8004696 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	f043 0204 	orr.w	r2, r3, #4
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800469a:	f003 0308 	and.w	r3, r3, #8
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d011      	beq.n	80046c6 <HAL_UART_IRQHandler+0x126>
 80046a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046a6:	f003 0320 	and.w	r3, r3, #32
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d105      	bne.n	80046ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80046ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d005      	beq.n	80046c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046be:	f043 0208 	orr.w	r2, r3, #8
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f000 81ed 	beq.w	8004aaa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046d4:	f003 0320 	and.w	r3, r3, #32
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d008      	beq.n	80046ee <HAL_UART_IRQHandler+0x14e>
 80046dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046e0:	f003 0320 	and.w	r3, r3, #32
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d002      	beq.n	80046ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 fb24 	bl	8004d36 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f8:	2b40      	cmp	r3, #64	; 0x40
 80046fa:	bf0c      	ite	eq
 80046fc:	2301      	moveq	r3, #1
 80046fe:	2300      	movne	r3, #0
 8004700:	b2db      	uxtb	r3, r3
 8004702:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470a:	f003 0308 	and.w	r3, r3, #8
 800470e:	2b00      	cmp	r3, #0
 8004710:	d103      	bne.n	800471a <HAL_UART_IRQHandler+0x17a>
 8004712:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004716:	2b00      	cmp	r3, #0
 8004718:	d04f      	beq.n	80047ba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 fa2c 	bl	8004b78 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800472a:	2b40      	cmp	r3, #64	; 0x40
 800472c:	d141      	bne.n	80047b2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	3314      	adds	r3, #20
 8004734:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004738:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800473c:	e853 3f00 	ldrex	r3, [r3]
 8004740:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004744:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004748:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800474c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	3314      	adds	r3, #20
 8004756:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800475a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800475e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004762:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004766:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800476a:	e841 2300 	strex	r3, r2, [r1]
 800476e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004772:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1d9      	bne.n	800472e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477e:	2b00      	cmp	r3, #0
 8004780:	d013      	beq.n	80047aa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004786:	4a7d      	ldr	r2, [pc, #500]	; (800497c <HAL_UART_IRQHandler+0x3dc>)
 8004788:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478e:	4618      	mov	r0, r3
 8004790:	f7fe f879 	bl	8002886 <HAL_DMA_Abort_IT>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d016      	beq.n	80047c8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800479e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80047a4:	4610      	mov	r0, r2
 80047a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047a8:	e00e      	b.n	80047c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f990 	bl	8004ad0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b0:	e00a      	b.n	80047c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f98c 	bl	8004ad0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b8:	e006      	b.n	80047c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 f988 	bl	8004ad0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80047c6:	e170      	b.n	8004aaa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047c8:	bf00      	nop
    return;
 80047ca:	e16e      	b.n	8004aaa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	f040 814a 	bne.w	8004a6a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80047d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047da:	f003 0310 	and.w	r3, r3, #16
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f000 8143 	beq.w	8004a6a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80047e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047e8:	f003 0310 	and.w	r3, r3, #16
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f000 813c 	beq.w	8004a6a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047f2:	2300      	movs	r3, #0
 80047f4:	60bb      	str	r3, [r7, #8]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	60bb      	str	r3, [r7, #8]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	60bb      	str	r3, [r7, #8]
 8004806:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004812:	2b40      	cmp	r3, #64	; 0x40
 8004814:	f040 80b4 	bne.w	8004980 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004824:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 8140 	beq.w	8004aae <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004832:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004836:	429a      	cmp	r2, r3
 8004838:	f080 8139 	bcs.w	8004aae <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004842:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004848:	69db      	ldr	r3, [r3, #28]
 800484a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800484e:	f000 8088 	beq.w	8004962 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	330c      	adds	r3, #12
 8004858:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800485c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004860:	e853 3f00 	ldrex	r3, [r3]
 8004864:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004868:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800486c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004870:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	330c      	adds	r3, #12
 800487a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800487e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004882:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004886:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800488a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800488e:	e841 2300 	strex	r3, r2, [r1]
 8004892:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004896:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1d9      	bne.n	8004852 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	3314      	adds	r3, #20
 80048a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048a8:	e853 3f00 	ldrex	r3, [r3]
 80048ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80048ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048b0:	f023 0301 	bic.w	r3, r3, #1
 80048b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	3314      	adds	r3, #20
 80048be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80048c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80048c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80048ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80048ce:	e841 2300 	strex	r3, r2, [r1]
 80048d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80048d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1e1      	bne.n	800489e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	3314      	adds	r3, #20
 80048e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048e4:	e853 3f00 	ldrex	r3, [r3]
 80048e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80048ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	3314      	adds	r3, #20
 80048fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80048fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004900:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004902:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004904:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004906:	e841 2300 	strex	r3, r2, [r1]
 800490a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800490c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1e3      	bne.n	80048da <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2220      	movs	r2, #32
 8004916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	330c      	adds	r3, #12
 8004926:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004928:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800492a:	e853 3f00 	ldrex	r3, [r3]
 800492e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004930:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004932:	f023 0310 	bic.w	r3, r3, #16
 8004936:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	330c      	adds	r3, #12
 8004940:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004944:	65ba      	str	r2, [r7, #88]	; 0x58
 8004946:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004948:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800494a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800494c:	e841 2300 	strex	r3, r2, [r1]
 8004950:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004952:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1e3      	bne.n	8004920 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495c:	4618      	mov	r0, r3
 800495e:	f7fd ff22 	bl	80027a6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800496a:	b29b      	uxth	r3, r3
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	b29b      	uxth	r3, r3
 8004970:	4619      	mov	r1, r3
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 f8b6 	bl	8004ae4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004978:	e099      	b.n	8004aae <HAL_UART_IRQHandler+0x50e>
 800497a:	bf00      	nop
 800497c:	08004c3f 	.word	0x08004c3f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004988:	b29b      	uxth	r3, r3
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004994:	b29b      	uxth	r3, r3
 8004996:	2b00      	cmp	r3, #0
 8004998:	f000 808b 	beq.w	8004ab2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800499c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f000 8086 	beq.w	8004ab2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	330c      	adds	r3, #12
 80049ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b0:	e853 3f00 	ldrex	r3, [r3]
 80049b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80049b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	330c      	adds	r3, #12
 80049c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80049ca:	647a      	str	r2, [r7, #68]	; 0x44
 80049cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80049d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049d2:	e841 2300 	strex	r3, r2, [r1]
 80049d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80049d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1e3      	bne.n	80049a6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	3314      	adds	r3, #20
 80049e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e8:	e853 3f00 	ldrex	r3, [r3]
 80049ec:	623b      	str	r3, [r7, #32]
   return(result);
 80049ee:	6a3b      	ldr	r3, [r7, #32]
 80049f0:	f023 0301 	bic.w	r3, r3, #1
 80049f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	3314      	adds	r3, #20
 80049fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004a02:	633a      	str	r2, [r7, #48]	; 0x30
 8004a04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a0a:	e841 2300 	strex	r3, r2, [r1]
 8004a0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1e3      	bne.n	80049de <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2220      	movs	r2, #32
 8004a1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	330c      	adds	r3, #12
 8004a2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	e853 3f00 	ldrex	r3, [r3]
 8004a32:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f023 0310 	bic.w	r3, r3, #16
 8004a3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	330c      	adds	r3, #12
 8004a44:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004a48:	61fa      	str	r2, [r7, #28]
 8004a4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a4c:	69b9      	ldr	r1, [r7, #24]
 8004a4e:	69fa      	ldr	r2, [r7, #28]
 8004a50:	e841 2300 	strex	r3, r2, [r1]
 8004a54:	617b      	str	r3, [r7, #20]
   return(result);
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1e3      	bne.n	8004a24 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a60:	4619      	mov	r1, r3
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f83e 	bl	8004ae4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a68:	e023      	b.n	8004ab2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d009      	beq.n	8004a8a <HAL_UART_IRQHandler+0x4ea>
 8004a76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d003      	beq.n	8004a8a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 f8ef 	bl	8004c66 <UART_Transmit_IT>
    return;
 8004a88:	e014      	b.n	8004ab4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00e      	beq.n	8004ab4 <HAL_UART_IRQHandler+0x514>
 8004a96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d008      	beq.n	8004ab4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 f92f 	bl	8004d06 <UART_EndTransmit_IT>
    return;
 8004aa8:	e004      	b.n	8004ab4 <HAL_UART_IRQHandler+0x514>
    return;
 8004aaa:	bf00      	nop
 8004aac:	e002      	b.n	8004ab4 <HAL_UART_IRQHandler+0x514>
      return;
 8004aae:	bf00      	nop
 8004ab0:	e000      	b.n	8004ab4 <HAL_UART_IRQHandler+0x514>
      return;
 8004ab2:	bf00      	nop
  }
}
 8004ab4:	37e8      	adds	r7, #232	; 0xe8
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop

08004abc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	460b      	mov	r3, r1
 8004aee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	4613      	mov	r3, r2
 8004b08:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	88fa      	ldrh	r2, [r7, #6]
 8004b14:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	88fa      	ldrh	r2, [r7, #6]
 8004b1a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2222      	movs	r2, #34	; 0x22
 8004b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d007      	beq.n	8004b4a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68da      	ldr	r2, [r3, #12]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b48:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	695a      	ldr	r2, [r3, #20]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f042 0201 	orr.w	r2, r2, #1
 8004b58:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68da      	ldr	r2, [r3, #12]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f042 0220 	orr.w	r2, r2, #32
 8004b68:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3714      	adds	r7, #20
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b095      	sub	sp, #84	; 0x54
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	330c      	adds	r3, #12
 8004b86:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b8a:	e853 3f00 	ldrex	r3, [r3]
 8004b8e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b92:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	330c      	adds	r3, #12
 8004b9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ba0:	643a      	str	r2, [r7, #64]	; 0x40
 8004ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ba6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ba8:	e841 2300 	strex	r3, r2, [r1]
 8004bac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1e5      	bne.n	8004b80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	3314      	adds	r3, #20
 8004bba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bbc:	6a3b      	ldr	r3, [r7, #32]
 8004bbe:	e853 3f00 	ldrex	r3, [r3]
 8004bc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	f023 0301 	bic.w	r3, r3, #1
 8004bca:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	3314      	adds	r3, #20
 8004bd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bd4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004bd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bdc:	e841 2300 	strex	r3, r2, [r1]
 8004be0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1e5      	bne.n	8004bb4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d119      	bne.n	8004c24 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	330c      	adds	r3, #12
 8004bf6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	e853 3f00 	ldrex	r3, [r3]
 8004bfe:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	f023 0310 	bic.w	r3, r3, #16
 8004c06:	647b      	str	r3, [r7, #68]	; 0x44
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	330c      	adds	r3, #12
 8004c0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c10:	61ba      	str	r2, [r7, #24]
 8004c12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c14:	6979      	ldr	r1, [r7, #20]
 8004c16:	69ba      	ldr	r2, [r7, #24]
 8004c18:	e841 2300 	strex	r3, r2, [r1]
 8004c1c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1e5      	bne.n	8004bf0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2220      	movs	r2, #32
 8004c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004c32:	bf00      	nop
 8004c34:	3754      	adds	r7, #84	; 0x54
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr

08004c3e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b084      	sub	sp, #16
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f7ff ff39 	bl	8004ad0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c5e:	bf00      	nop
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}

08004c66 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c66:	b480      	push	{r7}
 8004c68:	b085      	sub	sp, #20
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b21      	cmp	r3, #33	; 0x21
 8004c78:	d13e      	bne.n	8004cf8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c82:	d114      	bne.n	8004cae <UART_Transmit_IT+0x48>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d110      	bne.n	8004cae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a1b      	ldr	r3, [r3, #32]
 8004c90:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	881b      	ldrh	r3, [r3, #0]
 8004c96:	461a      	mov	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ca0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	1c9a      	adds	r2, r3, #2
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	621a      	str	r2, [r3, #32]
 8004cac:	e008      	b.n	8004cc0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	1c59      	adds	r1, r3, #1
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	6211      	str	r1, [r2, #32]
 8004cb8:	781a      	ldrb	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	4619      	mov	r1, r3
 8004cce:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10f      	bne.n	8004cf4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68da      	ldr	r2, [r3, #12]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ce2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68da      	ldr	r2, [r3, #12]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cf2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	e000      	b.n	8004cfa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004cf8:	2302      	movs	r3, #2
  }
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3714      	adds	r7, #20
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr

08004d06 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b082      	sub	sp, #8
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68da      	ldr	r2, [r3, #12]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d1c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2220      	movs	r2, #32
 8004d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f7ff fec8 	bl	8004abc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3708      	adds	r7, #8
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b08c      	sub	sp, #48	; 0x30
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b22      	cmp	r3, #34	; 0x22
 8004d48:	f040 80ab 	bne.w	8004ea2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d54:	d117      	bne.n	8004d86 <UART_Receive_IT+0x50>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d113      	bne.n	8004d86 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d66:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d78:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d7e:	1c9a      	adds	r2, r3, #2
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	629a      	str	r2, [r3, #40]	; 0x28
 8004d84:	e026      	b.n	8004dd4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d98:	d007      	beq.n	8004daa <UART_Receive_IT+0x74>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10a      	bne.n	8004db8 <UART_Receive_IT+0x82>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d106      	bne.n	8004db8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	b2da      	uxtb	r2, r3
 8004db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db4:	701a      	strb	r2, [r3, #0]
 8004db6:	e008      	b.n	8004dca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dc4:	b2da      	uxtb	r2, r3
 8004dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dce:	1c5a      	adds	r2, r3, #1
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	4619      	mov	r1, r3
 8004de2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d15a      	bne.n	8004e9e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68da      	ldr	r2, [r3, #12]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f022 0220 	bic.w	r2, r2, #32
 8004df6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68da      	ldr	r2, [r3, #12]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	695a      	ldr	r2, [r3, #20]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f022 0201 	bic.w	r2, r2, #1
 8004e16:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d135      	bne.n	8004e94 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	330c      	adds	r3, #12
 8004e34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	e853 3f00 	ldrex	r3, [r3]
 8004e3c:	613b      	str	r3, [r7, #16]
   return(result);
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	f023 0310 	bic.w	r3, r3, #16
 8004e44:	627b      	str	r3, [r7, #36]	; 0x24
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	330c      	adds	r3, #12
 8004e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e4e:	623a      	str	r2, [r7, #32]
 8004e50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e52:	69f9      	ldr	r1, [r7, #28]
 8004e54:	6a3a      	ldr	r2, [r7, #32]
 8004e56:	e841 2300 	strex	r3, r2, [r1]
 8004e5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1e5      	bne.n	8004e2e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0310 	and.w	r3, r3, #16
 8004e6c:	2b10      	cmp	r3, #16
 8004e6e:	d10a      	bne.n	8004e86 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e70:	2300      	movs	r3, #0
 8004e72:	60fb      	str	r3, [r7, #12]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	60fb      	str	r3, [r7, #12]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	60fb      	str	r3, [r7, #12]
 8004e84:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f7ff fe29 	bl	8004ae4 <HAL_UARTEx_RxEventCallback>
 8004e92:	e002      	b.n	8004e9a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f7fb ff0f 	bl	8000cb8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	e002      	b.n	8004ea4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	e000      	b.n	8004ea4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004ea2:	2302      	movs	r3, #2
  }
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3730      	adds	r7, #48	; 0x30
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004eac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004eb0:	b0c0      	sub	sp, #256	; 0x100
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ec8:	68d9      	ldr	r1, [r3, #12]
 8004eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	ea40 0301 	orr.w	r3, r0, r1
 8004ed4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eda:	689a      	ldr	r2, [r3, #8]
 8004edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	431a      	orrs	r2, r3
 8004ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	431a      	orrs	r2, r3
 8004eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ef0:	69db      	ldr	r3, [r3, #28]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004f04:	f021 010c 	bic.w	r1, r1, #12
 8004f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f12:	430b      	orrs	r3, r1
 8004f14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f26:	6999      	ldr	r1, [r3, #24]
 8004f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	ea40 0301 	orr.w	r3, r0, r1
 8004f32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	4b8f      	ldr	r3, [pc, #572]	; (8005178 <UART_SetConfig+0x2cc>)
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d005      	beq.n	8004f4c <UART_SetConfig+0xa0>
 8004f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	4b8d      	ldr	r3, [pc, #564]	; (800517c <UART_SetConfig+0x2d0>)
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d104      	bne.n	8004f56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f4c:	f7fe fb1c 	bl	8003588 <HAL_RCC_GetPCLK2Freq>
 8004f50:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004f54:	e003      	b.n	8004f5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f56:	f7fe fb03 	bl	8003560 <HAL_RCC_GetPCLK1Freq>
 8004f5a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f62:	69db      	ldr	r3, [r3, #28]
 8004f64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f68:	f040 810c 	bne.w	8005184 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f70:	2200      	movs	r2, #0
 8004f72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004f76:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004f7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004f7e:	4622      	mov	r2, r4
 8004f80:	462b      	mov	r3, r5
 8004f82:	1891      	adds	r1, r2, r2
 8004f84:	65b9      	str	r1, [r7, #88]	; 0x58
 8004f86:	415b      	adcs	r3, r3
 8004f88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004f8e:	4621      	mov	r1, r4
 8004f90:	eb12 0801 	adds.w	r8, r2, r1
 8004f94:	4629      	mov	r1, r5
 8004f96:	eb43 0901 	adc.w	r9, r3, r1
 8004f9a:	f04f 0200 	mov.w	r2, #0
 8004f9e:	f04f 0300 	mov.w	r3, #0
 8004fa2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004fa6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004faa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004fae:	4690      	mov	r8, r2
 8004fb0:	4699      	mov	r9, r3
 8004fb2:	4623      	mov	r3, r4
 8004fb4:	eb18 0303 	adds.w	r3, r8, r3
 8004fb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004fbc:	462b      	mov	r3, r5
 8004fbe:	eb49 0303 	adc.w	r3, r9, r3
 8004fc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004fd2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004fd6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004fda:	460b      	mov	r3, r1
 8004fdc:	18db      	adds	r3, r3, r3
 8004fde:	653b      	str	r3, [r7, #80]	; 0x50
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	eb42 0303 	adc.w	r3, r2, r3
 8004fe6:	657b      	str	r3, [r7, #84]	; 0x54
 8004fe8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004fec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004ff0:	f7fb fce0 	bl	80009b4 <__aeabi_uldivmod>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	4b61      	ldr	r3, [pc, #388]	; (8005180 <UART_SetConfig+0x2d4>)
 8004ffa:	fba3 2302 	umull	r2, r3, r3, r2
 8004ffe:	095b      	lsrs	r3, r3, #5
 8005000:	011c      	lsls	r4, r3, #4
 8005002:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005006:	2200      	movs	r2, #0
 8005008:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800500c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005010:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005014:	4642      	mov	r2, r8
 8005016:	464b      	mov	r3, r9
 8005018:	1891      	adds	r1, r2, r2
 800501a:	64b9      	str	r1, [r7, #72]	; 0x48
 800501c:	415b      	adcs	r3, r3
 800501e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005020:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005024:	4641      	mov	r1, r8
 8005026:	eb12 0a01 	adds.w	sl, r2, r1
 800502a:	4649      	mov	r1, r9
 800502c:	eb43 0b01 	adc.w	fp, r3, r1
 8005030:	f04f 0200 	mov.w	r2, #0
 8005034:	f04f 0300 	mov.w	r3, #0
 8005038:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800503c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005040:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005044:	4692      	mov	sl, r2
 8005046:	469b      	mov	fp, r3
 8005048:	4643      	mov	r3, r8
 800504a:	eb1a 0303 	adds.w	r3, sl, r3
 800504e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005052:	464b      	mov	r3, r9
 8005054:	eb4b 0303 	adc.w	r3, fp, r3
 8005058:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800505c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005068:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800506c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005070:	460b      	mov	r3, r1
 8005072:	18db      	adds	r3, r3, r3
 8005074:	643b      	str	r3, [r7, #64]	; 0x40
 8005076:	4613      	mov	r3, r2
 8005078:	eb42 0303 	adc.w	r3, r2, r3
 800507c:	647b      	str	r3, [r7, #68]	; 0x44
 800507e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005082:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005086:	f7fb fc95 	bl	80009b4 <__aeabi_uldivmod>
 800508a:	4602      	mov	r2, r0
 800508c:	460b      	mov	r3, r1
 800508e:	4611      	mov	r1, r2
 8005090:	4b3b      	ldr	r3, [pc, #236]	; (8005180 <UART_SetConfig+0x2d4>)
 8005092:	fba3 2301 	umull	r2, r3, r3, r1
 8005096:	095b      	lsrs	r3, r3, #5
 8005098:	2264      	movs	r2, #100	; 0x64
 800509a:	fb02 f303 	mul.w	r3, r2, r3
 800509e:	1acb      	subs	r3, r1, r3
 80050a0:	00db      	lsls	r3, r3, #3
 80050a2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80050a6:	4b36      	ldr	r3, [pc, #216]	; (8005180 <UART_SetConfig+0x2d4>)
 80050a8:	fba3 2302 	umull	r2, r3, r3, r2
 80050ac:	095b      	lsrs	r3, r3, #5
 80050ae:	005b      	lsls	r3, r3, #1
 80050b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80050b4:	441c      	add	r4, r3
 80050b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050ba:	2200      	movs	r2, #0
 80050bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050c0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80050c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80050c8:	4642      	mov	r2, r8
 80050ca:	464b      	mov	r3, r9
 80050cc:	1891      	adds	r1, r2, r2
 80050ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80050d0:	415b      	adcs	r3, r3
 80050d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80050d8:	4641      	mov	r1, r8
 80050da:	1851      	adds	r1, r2, r1
 80050dc:	6339      	str	r1, [r7, #48]	; 0x30
 80050de:	4649      	mov	r1, r9
 80050e0:	414b      	adcs	r3, r1
 80050e2:	637b      	str	r3, [r7, #52]	; 0x34
 80050e4:	f04f 0200 	mov.w	r2, #0
 80050e8:	f04f 0300 	mov.w	r3, #0
 80050ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80050f0:	4659      	mov	r1, fp
 80050f2:	00cb      	lsls	r3, r1, #3
 80050f4:	4651      	mov	r1, sl
 80050f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050fa:	4651      	mov	r1, sl
 80050fc:	00ca      	lsls	r2, r1, #3
 80050fe:	4610      	mov	r0, r2
 8005100:	4619      	mov	r1, r3
 8005102:	4603      	mov	r3, r0
 8005104:	4642      	mov	r2, r8
 8005106:	189b      	adds	r3, r3, r2
 8005108:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800510c:	464b      	mov	r3, r9
 800510e:	460a      	mov	r2, r1
 8005110:	eb42 0303 	adc.w	r3, r2, r3
 8005114:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005124:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005128:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800512c:	460b      	mov	r3, r1
 800512e:	18db      	adds	r3, r3, r3
 8005130:	62bb      	str	r3, [r7, #40]	; 0x28
 8005132:	4613      	mov	r3, r2
 8005134:	eb42 0303 	adc.w	r3, r2, r3
 8005138:	62fb      	str	r3, [r7, #44]	; 0x2c
 800513a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800513e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005142:	f7fb fc37 	bl	80009b4 <__aeabi_uldivmod>
 8005146:	4602      	mov	r2, r0
 8005148:	460b      	mov	r3, r1
 800514a:	4b0d      	ldr	r3, [pc, #52]	; (8005180 <UART_SetConfig+0x2d4>)
 800514c:	fba3 1302 	umull	r1, r3, r3, r2
 8005150:	095b      	lsrs	r3, r3, #5
 8005152:	2164      	movs	r1, #100	; 0x64
 8005154:	fb01 f303 	mul.w	r3, r1, r3
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	00db      	lsls	r3, r3, #3
 800515c:	3332      	adds	r3, #50	; 0x32
 800515e:	4a08      	ldr	r2, [pc, #32]	; (8005180 <UART_SetConfig+0x2d4>)
 8005160:	fba2 2303 	umull	r2, r3, r2, r3
 8005164:	095b      	lsrs	r3, r3, #5
 8005166:	f003 0207 	and.w	r2, r3, #7
 800516a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4422      	add	r2, r4
 8005172:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005174:	e105      	b.n	8005382 <UART_SetConfig+0x4d6>
 8005176:	bf00      	nop
 8005178:	40011000 	.word	0x40011000
 800517c:	40011400 	.word	0x40011400
 8005180:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005184:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005188:	2200      	movs	r2, #0
 800518a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800518e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005192:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005196:	4642      	mov	r2, r8
 8005198:	464b      	mov	r3, r9
 800519a:	1891      	adds	r1, r2, r2
 800519c:	6239      	str	r1, [r7, #32]
 800519e:	415b      	adcs	r3, r3
 80051a0:	627b      	str	r3, [r7, #36]	; 0x24
 80051a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80051a6:	4641      	mov	r1, r8
 80051a8:	1854      	adds	r4, r2, r1
 80051aa:	4649      	mov	r1, r9
 80051ac:	eb43 0501 	adc.w	r5, r3, r1
 80051b0:	f04f 0200 	mov.w	r2, #0
 80051b4:	f04f 0300 	mov.w	r3, #0
 80051b8:	00eb      	lsls	r3, r5, #3
 80051ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051be:	00e2      	lsls	r2, r4, #3
 80051c0:	4614      	mov	r4, r2
 80051c2:	461d      	mov	r5, r3
 80051c4:	4643      	mov	r3, r8
 80051c6:	18e3      	adds	r3, r4, r3
 80051c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80051cc:	464b      	mov	r3, r9
 80051ce:	eb45 0303 	adc.w	r3, r5, r3
 80051d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80051d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80051e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80051e6:	f04f 0200 	mov.w	r2, #0
 80051ea:	f04f 0300 	mov.w	r3, #0
 80051ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80051f2:	4629      	mov	r1, r5
 80051f4:	008b      	lsls	r3, r1, #2
 80051f6:	4621      	mov	r1, r4
 80051f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051fc:	4621      	mov	r1, r4
 80051fe:	008a      	lsls	r2, r1, #2
 8005200:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005204:	f7fb fbd6 	bl	80009b4 <__aeabi_uldivmod>
 8005208:	4602      	mov	r2, r0
 800520a:	460b      	mov	r3, r1
 800520c:	4b60      	ldr	r3, [pc, #384]	; (8005390 <UART_SetConfig+0x4e4>)
 800520e:	fba3 2302 	umull	r2, r3, r3, r2
 8005212:	095b      	lsrs	r3, r3, #5
 8005214:	011c      	lsls	r4, r3, #4
 8005216:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800521a:	2200      	movs	r2, #0
 800521c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005220:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005224:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005228:	4642      	mov	r2, r8
 800522a:	464b      	mov	r3, r9
 800522c:	1891      	adds	r1, r2, r2
 800522e:	61b9      	str	r1, [r7, #24]
 8005230:	415b      	adcs	r3, r3
 8005232:	61fb      	str	r3, [r7, #28]
 8005234:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005238:	4641      	mov	r1, r8
 800523a:	1851      	adds	r1, r2, r1
 800523c:	6139      	str	r1, [r7, #16]
 800523e:	4649      	mov	r1, r9
 8005240:	414b      	adcs	r3, r1
 8005242:	617b      	str	r3, [r7, #20]
 8005244:	f04f 0200 	mov.w	r2, #0
 8005248:	f04f 0300 	mov.w	r3, #0
 800524c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005250:	4659      	mov	r1, fp
 8005252:	00cb      	lsls	r3, r1, #3
 8005254:	4651      	mov	r1, sl
 8005256:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800525a:	4651      	mov	r1, sl
 800525c:	00ca      	lsls	r2, r1, #3
 800525e:	4610      	mov	r0, r2
 8005260:	4619      	mov	r1, r3
 8005262:	4603      	mov	r3, r0
 8005264:	4642      	mov	r2, r8
 8005266:	189b      	adds	r3, r3, r2
 8005268:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800526c:	464b      	mov	r3, r9
 800526e:	460a      	mov	r2, r1
 8005270:	eb42 0303 	adc.w	r3, r2, r3
 8005274:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	67bb      	str	r3, [r7, #120]	; 0x78
 8005282:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005284:	f04f 0200 	mov.w	r2, #0
 8005288:	f04f 0300 	mov.w	r3, #0
 800528c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005290:	4649      	mov	r1, r9
 8005292:	008b      	lsls	r3, r1, #2
 8005294:	4641      	mov	r1, r8
 8005296:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800529a:	4641      	mov	r1, r8
 800529c:	008a      	lsls	r2, r1, #2
 800529e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80052a2:	f7fb fb87 	bl	80009b4 <__aeabi_uldivmod>
 80052a6:	4602      	mov	r2, r0
 80052a8:	460b      	mov	r3, r1
 80052aa:	4b39      	ldr	r3, [pc, #228]	; (8005390 <UART_SetConfig+0x4e4>)
 80052ac:	fba3 1302 	umull	r1, r3, r3, r2
 80052b0:	095b      	lsrs	r3, r3, #5
 80052b2:	2164      	movs	r1, #100	; 0x64
 80052b4:	fb01 f303 	mul.w	r3, r1, r3
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	011b      	lsls	r3, r3, #4
 80052bc:	3332      	adds	r3, #50	; 0x32
 80052be:	4a34      	ldr	r2, [pc, #208]	; (8005390 <UART_SetConfig+0x4e4>)
 80052c0:	fba2 2303 	umull	r2, r3, r2, r3
 80052c4:	095b      	lsrs	r3, r3, #5
 80052c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052ca:	441c      	add	r4, r3
 80052cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052d0:	2200      	movs	r2, #0
 80052d2:	673b      	str	r3, [r7, #112]	; 0x70
 80052d4:	677a      	str	r2, [r7, #116]	; 0x74
 80052d6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80052da:	4642      	mov	r2, r8
 80052dc:	464b      	mov	r3, r9
 80052de:	1891      	adds	r1, r2, r2
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	415b      	adcs	r3, r3
 80052e4:	60fb      	str	r3, [r7, #12]
 80052e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052ea:	4641      	mov	r1, r8
 80052ec:	1851      	adds	r1, r2, r1
 80052ee:	6039      	str	r1, [r7, #0]
 80052f0:	4649      	mov	r1, r9
 80052f2:	414b      	adcs	r3, r1
 80052f4:	607b      	str	r3, [r7, #4]
 80052f6:	f04f 0200 	mov.w	r2, #0
 80052fa:	f04f 0300 	mov.w	r3, #0
 80052fe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005302:	4659      	mov	r1, fp
 8005304:	00cb      	lsls	r3, r1, #3
 8005306:	4651      	mov	r1, sl
 8005308:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800530c:	4651      	mov	r1, sl
 800530e:	00ca      	lsls	r2, r1, #3
 8005310:	4610      	mov	r0, r2
 8005312:	4619      	mov	r1, r3
 8005314:	4603      	mov	r3, r0
 8005316:	4642      	mov	r2, r8
 8005318:	189b      	adds	r3, r3, r2
 800531a:	66bb      	str	r3, [r7, #104]	; 0x68
 800531c:	464b      	mov	r3, r9
 800531e:	460a      	mov	r2, r1
 8005320:	eb42 0303 	adc.w	r3, r2, r3
 8005324:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	663b      	str	r3, [r7, #96]	; 0x60
 8005330:	667a      	str	r2, [r7, #100]	; 0x64
 8005332:	f04f 0200 	mov.w	r2, #0
 8005336:	f04f 0300 	mov.w	r3, #0
 800533a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800533e:	4649      	mov	r1, r9
 8005340:	008b      	lsls	r3, r1, #2
 8005342:	4641      	mov	r1, r8
 8005344:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005348:	4641      	mov	r1, r8
 800534a:	008a      	lsls	r2, r1, #2
 800534c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005350:	f7fb fb30 	bl	80009b4 <__aeabi_uldivmod>
 8005354:	4602      	mov	r2, r0
 8005356:	460b      	mov	r3, r1
 8005358:	4b0d      	ldr	r3, [pc, #52]	; (8005390 <UART_SetConfig+0x4e4>)
 800535a:	fba3 1302 	umull	r1, r3, r3, r2
 800535e:	095b      	lsrs	r3, r3, #5
 8005360:	2164      	movs	r1, #100	; 0x64
 8005362:	fb01 f303 	mul.w	r3, r1, r3
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	011b      	lsls	r3, r3, #4
 800536a:	3332      	adds	r3, #50	; 0x32
 800536c:	4a08      	ldr	r2, [pc, #32]	; (8005390 <UART_SetConfig+0x4e4>)
 800536e:	fba2 2303 	umull	r2, r3, r2, r3
 8005372:	095b      	lsrs	r3, r3, #5
 8005374:	f003 020f 	and.w	r2, r3, #15
 8005378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4422      	add	r2, r4
 8005380:	609a      	str	r2, [r3, #8]
}
 8005382:	bf00      	nop
 8005384:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005388:	46bd      	mov	sp, r7
 800538a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800538e:	bf00      	nop
 8005390:	51eb851f 	.word	0x51eb851f

08005394 <__libc_init_array>:
 8005394:	b570      	push	{r4, r5, r6, lr}
 8005396:	4d0d      	ldr	r5, [pc, #52]	; (80053cc <__libc_init_array+0x38>)
 8005398:	4c0d      	ldr	r4, [pc, #52]	; (80053d0 <__libc_init_array+0x3c>)
 800539a:	1b64      	subs	r4, r4, r5
 800539c:	10a4      	asrs	r4, r4, #2
 800539e:	2600      	movs	r6, #0
 80053a0:	42a6      	cmp	r6, r4
 80053a2:	d109      	bne.n	80053b8 <__libc_init_array+0x24>
 80053a4:	4d0b      	ldr	r5, [pc, #44]	; (80053d4 <__libc_init_array+0x40>)
 80053a6:	4c0c      	ldr	r4, [pc, #48]	; (80053d8 <__libc_init_array+0x44>)
 80053a8:	f000 f820 	bl	80053ec <_init>
 80053ac:	1b64      	subs	r4, r4, r5
 80053ae:	10a4      	asrs	r4, r4, #2
 80053b0:	2600      	movs	r6, #0
 80053b2:	42a6      	cmp	r6, r4
 80053b4:	d105      	bne.n	80053c2 <__libc_init_array+0x2e>
 80053b6:	bd70      	pop	{r4, r5, r6, pc}
 80053b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80053bc:	4798      	blx	r3
 80053be:	3601      	adds	r6, #1
 80053c0:	e7ee      	b.n	80053a0 <__libc_init_array+0xc>
 80053c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80053c6:	4798      	blx	r3
 80053c8:	3601      	adds	r6, #1
 80053ca:	e7f2      	b.n	80053b2 <__libc_init_array+0x1e>
 80053cc:	08005424 	.word	0x08005424
 80053d0:	08005424 	.word	0x08005424
 80053d4:	08005424 	.word	0x08005424
 80053d8:	08005428 	.word	0x08005428

080053dc <memset>:
 80053dc:	4402      	add	r2, r0
 80053de:	4603      	mov	r3, r0
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d100      	bne.n	80053e6 <memset+0xa>
 80053e4:	4770      	bx	lr
 80053e6:	f803 1b01 	strb.w	r1, [r3], #1
 80053ea:	e7f9      	b.n	80053e0 <memset+0x4>

080053ec <_init>:
 80053ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ee:	bf00      	nop
 80053f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053f2:	bc08      	pop	{r3}
 80053f4:	469e      	mov	lr, r3
 80053f6:	4770      	bx	lr

080053f8 <_fini>:
 80053f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053fa:	bf00      	nop
 80053fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053fe:	bc08      	pop	{r3}
 8005400:	469e      	mov	lr, r3
 8005402:	4770      	bx	lr

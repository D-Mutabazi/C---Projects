
PV System Efficiency Monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064f0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08006690  08006690  00016690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006734  08006734  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08006734  08006734  00016734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800673c  0800673c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800673c  0800673c  0001673c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006740  08006740  00016740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08006744  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  20000088  080067c8  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  080067c8  00020258  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb93  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002147  00000000  00000000  0002fc47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  00031d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d40  00000000  00000000  00032b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001806e  00000000  00000000  000338d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000104ed  00000000  00000000  0004b946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a8f2  00000000  00000000  0005be33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f6725  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004010  00000000  00000000  000f6778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006678 	.word	0x08006678

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	08006678 	.word	0x08006678

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b974 	b.w	8000d6c <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	468e      	mov	lr, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14d      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4694      	mov	ip, r2
 8000aae:	d969      	bls.n	8000b84 <__udivmoddi4+0xe8>
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	b152      	cbz	r2, 8000acc <__udivmoddi4+0x30>
 8000ab6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aba:	f1c2 0120 	rsb	r1, r2, #32
 8000abe:	fa20 f101 	lsr.w	r1, r0, r1
 8000ac2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aca:	4094      	lsls	r4, r2
 8000acc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad0:	0c21      	lsrs	r1, r4, #16
 8000ad2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ad6:	fa1f f78c 	uxth.w	r7, ip
 8000ada:	fb08 e316 	mls	r3, r8, r6, lr
 8000ade:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ae2:	fb06 f107 	mul.w	r1, r6, r7
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f106 30ff 	add.w	r0, r6, #4294967295
 8000af2:	f080 811f 	bcs.w	8000d34 <__udivmoddi4+0x298>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 811c 	bls.w	8000d34 <__udivmoddi4+0x298>
 8000afc:	3e02      	subs	r6, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a5b      	subs	r3, r3, r1
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b08:	fb08 3310 	mls	r3, r8, r0, r3
 8000b0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b10:	fb00 f707 	mul.w	r7, r0, r7
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	d90a      	bls.n	8000b2e <__udivmoddi4+0x92>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b20:	f080 810a 	bcs.w	8000d38 <__udivmoddi4+0x29c>
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	f240 8107 	bls.w	8000d38 <__udivmoddi4+0x29c>
 8000b2a:	4464      	add	r4, ip
 8000b2c:	3802      	subs	r0, #2
 8000b2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b32:	1be4      	subs	r4, r4, r7
 8000b34:	2600      	movs	r6, #0
 8000b36:	b11d      	cbz	r5, 8000b40 <__udivmoddi4+0xa4>
 8000b38:	40d4      	lsrs	r4, r2
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d909      	bls.n	8000b5e <__udivmoddi4+0xc2>
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	f000 80ef 	beq.w	8000d2e <__udivmoddi4+0x292>
 8000b50:	2600      	movs	r6, #0
 8000b52:	e9c5 0100 	strd	r0, r1, [r5]
 8000b56:	4630      	mov	r0, r6
 8000b58:	4631      	mov	r1, r6
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	fab3 f683 	clz	r6, r3
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	d14a      	bne.n	8000bfc <__udivmoddi4+0x160>
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d302      	bcc.n	8000b70 <__udivmoddi4+0xd4>
 8000b6a:	4282      	cmp	r2, r0
 8000b6c:	f200 80f9 	bhi.w	8000d62 <__udivmoddi4+0x2c6>
 8000b70:	1a84      	subs	r4, r0, r2
 8000b72:	eb61 0303 	sbc.w	r3, r1, r3
 8000b76:	2001      	movs	r0, #1
 8000b78:	469e      	mov	lr, r3
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d0e0      	beq.n	8000b40 <__udivmoddi4+0xa4>
 8000b7e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b82:	e7dd      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000b84:	b902      	cbnz	r2, 8000b88 <__udivmoddi4+0xec>
 8000b86:	deff      	udf	#255	; 0xff
 8000b88:	fab2 f282 	clz	r2, r2
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	f040 8092 	bne.w	8000cb6 <__udivmoddi4+0x21a>
 8000b92:	eba1 010c 	sub.w	r1, r1, ip
 8000b96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b9a:	fa1f fe8c 	uxth.w	lr, ip
 8000b9e:	2601      	movs	r6, #1
 8000ba0:	0c20      	lsrs	r0, r4, #16
 8000ba2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ba6:	fb07 1113 	mls	r1, r7, r3, r1
 8000baa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bae:	fb0e f003 	mul.w	r0, lr, r3
 8000bb2:	4288      	cmp	r0, r1
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0x12c>
 8000bb6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bba:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x12a>
 8000bc0:	4288      	cmp	r0, r1
 8000bc2:	f200 80cb 	bhi.w	8000d5c <__udivmoddi4+0x2c0>
 8000bc6:	4643      	mov	r3, r8
 8000bc8:	1a09      	subs	r1, r1, r0
 8000bca:	b2a4      	uxth	r4, r4
 8000bcc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bd0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bd4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bdc:	45a6      	cmp	lr, r4
 8000bde:	d908      	bls.n	8000bf2 <__udivmoddi4+0x156>
 8000be0:	eb1c 0404 	adds.w	r4, ip, r4
 8000be4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000be8:	d202      	bcs.n	8000bf0 <__udivmoddi4+0x154>
 8000bea:	45a6      	cmp	lr, r4
 8000bec:	f200 80bb 	bhi.w	8000d66 <__udivmoddi4+0x2ca>
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	eba4 040e 	sub.w	r4, r4, lr
 8000bf6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bfa:	e79c      	b.n	8000b36 <__udivmoddi4+0x9a>
 8000bfc:	f1c6 0720 	rsb	r7, r6, #32
 8000c00:	40b3      	lsls	r3, r6
 8000c02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c12:	431c      	orrs	r4, r3
 8000c14:	40f9      	lsrs	r1, r7
 8000c16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c22:	0c20      	lsrs	r0, r4, #16
 8000c24:	fa1f fe8c 	uxth.w	lr, ip
 8000c28:	fb09 1118 	mls	r1, r9, r8, r1
 8000c2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c30:	fb08 f00e 	mul.w	r0, r8, lr
 8000c34:	4288      	cmp	r0, r1
 8000c36:	fa02 f206 	lsl.w	r2, r2, r6
 8000c3a:	d90b      	bls.n	8000c54 <__udivmoddi4+0x1b8>
 8000c3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c44:	f080 8088 	bcs.w	8000d58 <__udivmoddi4+0x2bc>
 8000c48:	4288      	cmp	r0, r1
 8000c4a:	f240 8085 	bls.w	8000d58 <__udivmoddi4+0x2bc>
 8000c4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c52:	4461      	add	r1, ip
 8000c54:	1a09      	subs	r1, r1, r0
 8000c56:	b2a4      	uxth	r4, r4
 8000c58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c68:	458e      	cmp	lr, r1
 8000c6a:	d908      	bls.n	8000c7e <__udivmoddi4+0x1e2>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c74:	d26c      	bcs.n	8000d50 <__udivmoddi4+0x2b4>
 8000c76:	458e      	cmp	lr, r1
 8000c78:	d96a      	bls.n	8000d50 <__udivmoddi4+0x2b4>
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	4461      	add	r1, ip
 8000c7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c82:	fba0 9402 	umull	r9, r4, r0, r2
 8000c86:	eba1 010e 	sub.w	r1, r1, lr
 8000c8a:	42a1      	cmp	r1, r4
 8000c8c:	46c8      	mov	r8, r9
 8000c8e:	46a6      	mov	lr, r4
 8000c90:	d356      	bcc.n	8000d40 <__udivmoddi4+0x2a4>
 8000c92:	d053      	beq.n	8000d3c <__udivmoddi4+0x2a0>
 8000c94:	b15d      	cbz	r5, 8000cae <__udivmoddi4+0x212>
 8000c96:	ebb3 0208 	subs.w	r2, r3, r8
 8000c9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000ca2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ca6:	40f1      	lsrs	r1, r6
 8000ca8:	431f      	orrs	r7, r3
 8000caa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cae:	2600      	movs	r6, #0
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	f1c2 0320 	rsb	r3, r2, #32
 8000cba:	40d8      	lsrs	r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cc4:	4091      	lsls	r1, r2
 8000cc6:	4301      	orrs	r1, r0
 8000cc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ccc:	fa1f fe8c 	uxth.w	lr, ip
 8000cd0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cd4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cd8:	0c0b      	lsrs	r3, r1, #16
 8000cda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cde:	fb00 f60e 	mul.w	r6, r0, lr
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x260>
 8000cea:	eb1c 0303 	adds.w	r3, ip, r3
 8000cee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cf2:	d22f      	bcs.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf4:	429e      	cmp	r6, r3
 8000cf6:	d92d      	bls.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1b9b      	subs	r3, r3, r6
 8000cfe:	b289      	uxth	r1, r1
 8000d00:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d04:	fb07 3316 	mls	r3, r7, r6, r3
 8000d08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d0c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d10:	428b      	cmp	r3, r1
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x28a>
 8000d14:	eb1c 0101 	adds.w	r1, ip, r1
 8000d18:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d1c:	d216      	bcs.n	8000d4c <__udivmoddi4+0x2b0>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d914      	bls.n	8000d4c <__udivmoddi4+0x2b0>
 8000d22:	3e02      	subs	r6, #2
 8000d24:	4461      	add	r1, ip
 8000d26:	1ac9      	subs	r1, r1, r3
 8000d28:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d2c:	e738      	b.n	8000ba0 <__udivmoddi4+0x104>
 8000d2e:	462e      	mov	r6, r5
 8000d30:	4628      	mov	r0, r5
 8000d32:	e705      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000d34:	4606      	mov	r6, r0
 8000d36:	e6e3      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d38:	4618      	mov	r0, r3
 8000d3a:	e6f8      	b.n	8000b2e <__udivmoddi4+0x92>
 8000d3c:	454b      	cmp	r3, r9
 8000d3e:	d2a9      	bcs.n	8000c94 <__udivmoddi4+0x1f8>
 8000d40:	ebb9 0802 	subs.w	r8, r9, r2
 8000d44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d48:	3801      	subs	r0, #1
 8000d4a:	e7a3      	b.n	8000c94 <__udivmoddi4+0x1f8>
 8000d4c:	4646      	mov	r6, r8
 8000d4e:	e7ea      	b.n	8000d26 <__udivmoddi4+0x28a>
 8000d50:	4620      	mov	r0, r4
 8000d52:	e794      	b.n	8000c7e <__udivmoddi4+0x1e2>
 8000d54:	4640      	mov	r0, r8
 8000d56:	e7d1      	b.n	8000cfc <__udivmoddi4+0x260>
 8000d58:	46d0      	mov	r8, sl
 8000d5a:	e77b      	b.n	8000c54 <__udivmoddi4+0x1b8>
 8000d5c:	3b02      	subs	r3, #2
 8000d5e:	4461      	add	r1, ip
 8000d60:	e732      	b.n	8000bc8 <__udivmoddi4+0x12c>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e709      	b.n	8000b7a <__udivmoddi4+0xde>
 8000d66:	4464      	add	r4, ip
 8000d68:	3802      	subs	r0, #2
 8000d6a:	e742      	b.n	8000bf2 <__udivmoddi4+0x156>

08000d6c <__aeabi_idiv0>:
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop

08000d70 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000d70:	b5b0      	push	{r4, r5, r7, lr}
 8000d72:	b08a      	sub	sp, #40	; 0x28
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
 8000d7c:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000d7e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000d82:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8000d86:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000d8a:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d8e:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000d90:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000d92:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000da0:	f107 0310 	add.w	r3, r7, #16
 8000da4:	4618      	mov	r0, r3
 8000da6:	f000 f80e 	bl	8000dc6 <Lcd_init>

	return lcd;
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	461d      	mov	r5, r3
 8000dae:	f107 0410 	add.w	r4, r7, #16
 8000db2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000db4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000db6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000dba:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000dbe:	68f8      	ldr	r0, [r7, #12]
 8000dc0:	3728      	adds	r7, #40	; 0x28
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bdb0      	pop	{r4, r5, r7, pc}

08000dc6 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b082      	sub	sp, #8
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	7d9b      	ldrb	r3, [r3, #22]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d10c      	bne.n	8000df0 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8000dd6:	2133      	movs	r1, #51	; 0x33
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f000 f86f 	bl	8000ebc <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000dde:	2132      	movs	r1, #50	; 0x32
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f000 f86b 	bl	8000ebc <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000de6:	2128      	movs	r1, #40	; 0x28
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f000 f867 	bl	8000ebc <lcd_write_command>
 8000dee:	e003      	b.n	8000df8 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000df0:	2138      	movs	r1, #56	; 0x38
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f000 f862 	bl	8000ebc <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000df8:	2101      	movs	r1, #1
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f000 f85e 	bl	8000ebc <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000e00:	210c      	movs	r1, #12
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f000 f85a 	bl	8000ebc <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000e08:	2106      	movs	r1, #6
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f000 f856 	bl	8000ebc <lcd_write_command>
}
 8000e10:	bf00      	nop
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8000e22:	f107 030c 	add.w	r3, r7, #12
 8000e26:	683a      	ldr	r2, [r7, #0]
 8000e28:	4906      	ldr	r1, [pc, #24]	; (8000e44 <Lcd_int+0x2c>)
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f004 ffb6 	bl	8005d9c <siprintf>

	Lcd_string(lcd, buffer);
 8000e30:	f107 030c 	add.w	r3, r7, #12
 8000e34:	4619      	mov	r1, r3
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f000 f806 	bl	8000e48 <Lcd_string>
}
 8000e3c:	bf00      	nop
 8000e3e:	3718      	adds	r7, #24
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	08006690 	.word	0x08006690

08000e48 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000e48:	b590      	push	{r4, r7, lr}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]

	for(uint8_t i = 0; i < strlen(string); i++)
 8000e52:	2300      	movs	r3, #0
 8000e54:	73fb      	strb	r3, [r7, #15]
 8000e56:	e00a      	b.n	8000e6e <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
 8000e5a:	683a      	ldr	r2, [r7, #0]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	4619      	mov	r1, r3
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f000 f858 	bl	8000f18 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000e68:	7bfb      	ldrb	r3, [r7, #15]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	73fb      	strb	r3, [r7, #15]
 8000e6e:	7bfc      	ldrb	r4, [r7, #15]
 8000e70:	6838      	ldr	r0, [r7, #0]
 8000e72:	f7ff f9b5 	bl	80001e0 <strlen>
 8000e76:	4603      	mov	r3, r0
 8000e78:	429c      	cmp	r4, r3
 8000e7a:	d3ed      	bcc.n	8000e58 <Lcd_string+0x10>
	}
}
 8000e7c:	bf00      	nop
 8000e7e:	bf00      	nop
 8000e80:	3714      	adds	r7, #20
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd90      	pop	{r4, r7, pc}
	...

08000e88 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	460b      	mov	r3, r1
 8000e92:	70fb      	strb	r3, [r7, #3]
 8000e94:	4613      	mov	r3, r2
 8000e96:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000e98:	78fb      	ldrb	r3, [r7, #3]
 8000e9a:	4a07      	ldr	r2, [pc, #28]	; (8000eb8 <Lcd_cursor+0x30>)
 8000e9c:	5cd2      	ldrb	r2, [r2, r3]
 8000e9e:	78bb      	ldrb	r3, [r7, #2]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	3b80      	subs	r3, #128	; 0x80
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f000 f806 	bl	8000ebc <lcd_write_command>
	#endif
}
 8000eb0:	bf00      	nop
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	080066e4 	.word	0x080066e4

08000ebc <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6898      	ldr	r0, [r3, #8]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	899b      	ldrh	r3, [r3, #12]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	f002 fb68 	bl	80035a8 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	7d9b      	ldrb	r3, [r3, #22]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d111      	bne.n	8000f04 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8000ee0:	78fb      	ldrb	r3, [r7, #3]
 8000ee2:	091b      	lsrs	r3, r3, #4
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	2204      	movs	r2, #4
 8000ee8:	4619      	mov	r1, r3
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f000 f842 	bl	8000f74 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8000ef0:	78fb      	ldrb	r3, [r7, #3]
 8000ef2:	f003 030f 	and.w	r3, r3, #15
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	2204      	movs	r2, #4
 8000efa:	4619      	mov	r1, r3
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f000 f839 	bl	8000f74 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8000f02:	e005      	b.n	8000f10 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000f04:	78fb      	ldrb	r3, [r7, #3]
 8000f06:	2208      	movs	r2, #8
 8000f08:	4619      	mov	r1, r3
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f000 f832 	bl	8000f74 <lcd_write>
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	460b      	mov	r3, r1
 8000f22:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6898      	ldr	r0, [r3, #8]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	899b      	ldrh	r3, [r3, #12]
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	4619      	mov	r1, r3
 8000f30:	f002 fb3a 	bl	80035a8 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	7d9b      	ldrb	r3, [r3, #22]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d111      	bne.n	8000f60 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000f3c:	78fb      	ldrb	r3, [r7, #3]
 8000f3e:	091b      	lsrs	r3, r3, #4
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2204      	movs	r2, #4
 8000f44:	4619      	mov	r1, r3
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f000 f814 	bl	8000f74 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8000f4c:	78fb      	ldrb	r3, [r7, #3]
 8000f4e:	f003 030f 	and.w	r3, r3, #15
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	2204      	movs	r2, #4
 8000f56:	4619      	mov	r1, r3
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f000 f80b 	bl	8000f74 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8000f5e:	e005      	b.n	8000f6c <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000f60:	78fb      	ldrb	r3, [r7, #3]
 8000f62:	2208      	movs	r2, #8
 8000f64:	4619      	mov	r1, r3
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f000 f804 	bl	8000f74 <lcd_write>
}
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	70fb      	strb	r3, [r7, #3]
 8000f80:	4613      	mov	r3, r2
 8000f82:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000f84:	2300      	movs	r3, #0
 8000f86:	73fb      	strb	r3, [r7, #15]
 8000f88:	e019      	b.n	8000fbe <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	4413      	add	r3, r2
 8000f94:	6818      	ldr	r0, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	685a      	ldr	r2, [r3, #4]
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	4413      	add	r3, r2
 8000fa0:	8819      	ldrh	r1, [r3, #0]
 8000fa2:	78fa      	ldrb	r2, [r7, #3]
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
 8000fa6:	fa42 f303 	asr.w	r3, r2, r3
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	f003 0301 	and.w	r3, r3, #1
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	f002 faf8 	bl	80035a8 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8000fb8:	7bfb      	ldrb	r3, [r7, #15]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	73fb      	strb	r3, [r7, #15]
 8000fbe:	7bfa      	ldrb	r2, [r7, #15]
 8000fc0:	78bb      	ldrb	r3, [r7, #2]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d3e1      	bcc.n	8000f8a <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6918      	ldr	r0, [r3, #16]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	8a9b      	ldrh	r3, [r3, #20]
 8000fce:	2201      	movs	r2, #1
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	f002 fae9 	bl	80035a8 <HAL_GPIO_WritePin>
	DELAY(1);
 8000fd6:	2001      	movs	r0, #1
 8000fd8:	f001 fb90 	bl	80026fc <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6918      	ldr	r0, [r3, #16]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	8a9b      	ldrh	r3, [r3, #20]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	f002 fade 	bl	80035a8 <HAL_GPIO_WritePin>
}
 8000fec:	bf00      	nop
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <HAL_UART_RxCpltCallback>:
uint16_t get_adc_value_conver_to_lux();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]

	g_system_config[g_byte_count] = char_rcvd[0] ;
 8000ffc:	4b14      	ldr	r3, [pc, #80]	; (8001050 <HAL_UART_RxCpltCallback+0x5c>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	461a      	mov	r2, r3
 8001002:	4b14      	ldr	r3, [pc, #80]	; (8001054 <HAL_UART_RxCpltCallback+0x60>)
 8001004:	7819      	ldrb	r1, [r3, #0]
 8001006:	4b14      	ldr	r3, [pc, #80]	; (8001058 <HAL_UART_RxCpltCallback+0x64>)
 8001008:	5499      	strb	r1, [r3, r2]
	g_byte_count++ ;
 800100a:	4b11      	ldr	r3, [pc, #68]	; (8001050 <HAL_UART_RxCpltCallback+0x5c>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	3301      	adds	r3, #1
 8001010:	b2da      	uxtb	r2, r3
 8001012:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <HAL_UART_RxCpltCallback+0x5c>)
 8001014:	701a      	strb	r2, [r3, #0]

	if(char_rcvd[0] == '\n'){
 8001016:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <HAL_UART_RxCpltCallback+0x60>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b0a      	cmp	r3, #10
 800101c:	d10f      	bne.n	800103e <HAL_UART_RxCpltCallback+0x4a>
		if(g_byte_count == 7){
 800101e:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <HAL_UART_RxCpltCallback+0x5c>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	2b07      	cmp	r3, #7
 8001024:	d103      	bne.n	800102e <HAL_UART_RxCpltCallback+0x3a>
			g_config_command_rcvd = 1;
 8001026:	4b0d      	ldr	r3, [pc, #52]	; (800105c <HAL_UART_RxCpltCallback+0x68>)
 8001028:	2201      	movs	r2, #1
 800102a:	701a      	strb	r2, [r3, #0]
 800102c:	e004      	b.n	8001038 <HAL_UART_RxCpltCallback+0x44>
			// check for SP or EN command recvd
		}
		else{
			// remove for next DEMO
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)"Invalid command sent\n", 21);
 800102e:	2215      	movs	r2, #21
 8001030:	490b      	ldr	r1, [pc, #44]	; (8001060 <HAL_UART_RxCpltCallback+0x6c>)
 8001032:	480c      	ldr	r0, [pc, #48]	; (8001064 <HAL_UART_RxCpltCallback+0x70>)
 8001034:	f003 ff11 	bl	8004e5a <HAL_UART_Transmit_IT>
			// DO NOTHING: NO STATE UPDATE IN THE CASE OF COMMAND NOT IN THE APPROPRIATE ORDER
		}

		g_byte_count =0 ;
 8001038:	4b05      	ldr	r3, [pc, #20]	; (8001050 <HAL_UART_RxCpltCallback+0x5c>)
 800103a:	2200      	movs	r2, #0
 800103c:	701a      	strb	r2, [r3, #0]
	}

	//re-prime receiver
	HAL_UART_Receive_IT(&huart2, (uint8_t*)char_rcvd, 1) ;
 800103e:	2201      	movs	r2, #1
 8001040:	4904      	ldr	r1, [pc, #16]	; (8001054 <HAL_UART_RxCpltCallback+0x60>)
 8001042:	4808      	ldr	r0, [pc, #32]	; (8001064 <HAL_UART_RxCpltCallback+0x70>)
 8001044:	f003 ff4e 	bl	8004ee4 <HAL_UART_Receive_IT>

}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000201 	.word	0x20000201
 8001054:	20000010 	.word	0x20000010
 8001058:	200001f0 	.word	0x200001f0
 800105c:	20000202 	.word	0x20000202
 8001060:	08006694 	.word	0x08006694
 8001064:	2000017c 	.word	0x2000017c

08001068 <get_adc_value_and_celsius_temperature>:
/**
 * function starts the adc, waits for conversion
 * Then converts value to degrees
 */

uint16_t get_adc_value_and_celsius_temperature(){
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0

	//select adc channel 0
	ADC_Select_CH0() ;
 800106c:	f000 fb4e 	bl	800170c <ADC_Select_CH0>
	HAL_ADC_Start(&hadc1) ;
 8001070:	4825      	ldr	r0, [pc, #148]	; (8001108 <get_adc_value_and_celsius_temperature+0xa0>)
 8001072:	f001 fbab 	bl	80027cc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001076:	f04f 31ff 	mov.w	r1, #4294967295
 800107a:	4823      	ldr	r0, [pc, #140]	; (8001108 <get_adc_value_and_celsius_temperature+0xa0>)
 800107c:	f001 fc8d 	bl	800299a <HAL_ADC_PollForConversion>
	g_raw  = HAL_ADC_GetValue(&hadc1) ;
 8001080:	4821      	ldr	r0, [pc, #132]	; (8001108 <get_adc_value_and_celsius_temperature+0xa0>)
 8001082:	f001 fd15 	bl	8002ab0 <HAL_ADC_GetValue>
 8001086:	4603      	mov	r3, r0
 8001088:	b29a      	uxth	r2, r3
 800108a:	4b20      	ldr	r3, [pc, #128]	; (800110c <get_adc_value_and_celsius_temperature+0xa4>)
 800108c:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1) ;  //stop adc
 800108e:	481e      	ldr	r0, [pc, #120]	; (8001108 <get_adc_value_and_celsius_temperature+0xa0>)
 8001090:	f001 fc50 	bl	8002934 <HAL_ADC_Stop>

	g_vin = g_raw*(3.3/4095.0) ; // input voltage
 8001094:	4b1d      	ldr	r3, [pc, #116]	; (800110c <get_adc_value_and_celsius_temperature+0xa4>)
 8001096:	881b      	ldrh	r3, [r3, #0]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff fa4b 	bl	8000534 <__aeabi_i2d>
 800109e:	a316      	add	r3, pc, #88	; (adr r3, 80010f8 <get_adc_value_and_celsius_temperature+0x90>)
 80010a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a4:	f7ff fab0 	bl	8000608 <__aeabi_dmul>
 80010a8:	4602      	mov	r2, r0
 80010aa:	460b      	mov	r3, r1
 80010ac:	4918      	ldr	r1, [pc, #96]	; (8001110 <get_adc_value_and_celsius_temperature+0xa8>)
 80010ae:	e9c1 2300 	strd	r2, r3, [r1]
	g_temp = g_vin*100 - 273.15 ; // cast to 16 bit uint
 80010b2:	4b17      	ldr	r3, [pc, #92]	; (8001110 <get_adc_value_and_celsius_temperature+0xa8>)
 80010b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010b8:	f04f 0200 	mov.w	r2, #0
 80010bc:	4b15      	ldr	r3, [pc, #84]	; (8001114 <get_adc_value_and_celsius_temperature+0xac>)
 80010be:	f7ff faa3 	bl	8000608 <__aeabi_dmul>
 80010c2:	4602      	mov	r2, r0
 80010c4:	460b      	mov	r3, r1
 80010c6:	4610      	mov	r0, r2
 80010c8:	4619      	mov	r1, r3
 80010ca:	a30d      	add	r3, pc, #52	; (adr r3, 8001100 <get_adc_value_and_celsius_temperature+0x98>)
 80010cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d0:	f7ff f8e2 	bl	8000298 <__aeabi_dsub>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	490f      	ldr	r1, [pc, #60]	; (8001118 <get_adc_value_and_celsius_temperature+0xb0>)
 80010da:	e9c1 2300 	strd	r2, r3, [r1]

	return g_temp ;
 80010de:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <get_adc_value_and_celsius_temperature+0xb0>)
 80010e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e4:	4610      	mov	r0, r2
 80010e6:	4619      	mov	r1, r3
 80010e8:	f7ff fca0 	bl	8000a2c <__aeabi_d2uiz>
 80010ec:	4603      	mov	r3, r0
 80010ee:	b29b      	uxth	r3, r3
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	f3af 8000 	nop.w
 80010f8:	e734d9b4 	.word	0xe734d9b4
 80010fc:	3f4a680c 	.word	0x3f4a680c
 8001100:	66666666 	.word	0x66666666
 8001104:	40711266 	.word	0x40711266
 8001108:	200000a4 	.word	0x200000a4
 800110c:	200001c0 	.word	0x200001c0
 8001110:	200001d0 	.word	0x200001d0
 8001114:	40590000 	.word	0x40590000
 8001118:	200001c8 	.word	0x200001c8

0800111c <store_temp_in_string>:

void store_temp_in_string(uint16_t temperature, char temp[], int len){
 800111c:	b480      	push	{r7}
 800111e:	b087      	sub	sp, #28
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
 8001128:	81fb      	strh	r3, [r7, #14]

	for(int i= 0 ; i < len ; i++){
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
 800112e:	e04e      	b.n	80011ce <store_temp_in_string+0xb2>
		switch(i){
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	2b02      	cmp	r3, #2
 8001134:	d02f      	beq.n	8001196 <store_temp_in_string+0x7a>
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	2b02      	cmp	r3, #2
 800113a:	dc44      	bgt.n	80011c6 <store_temp_in_string+0xaa>
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <store_temp_in_string+0x2e>
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d00c      	beq.n	8001162 <store_temp_in_string+0x46>
			case 2:
				temp[2] = (temperature - ((temperature/10)*10) ) + 48 ;

				break;
			default:
				break;
 8001148:	e03d      	b.n	80011c6 <store_temp_in_string+0xaa>
				temp[0]  = (temperature/100) + 48 ;
 800114a:	89fb      	ldrh	r3, [r7, #14]
 800114c:	4a25      	ldr	r2, [pc, #148]	; (80011e4 <store_temp_in_string+0xc8>)
 800114e:	fba2 2303 	umull	r2, r3, r2, r3
 8001152:	095b      	lsrs	r3, r3, #5
 8001154:	b29b      	uxth	r3, r3
 8001156:	b2db      	uxtb	r3, r3
 8001158:	3330      	adds	r3, #48	; 0x30
 800115a:	b2da      	uxtb	r2, r3
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	701a      	strb	r2, [r3, #0]
				break;
 8001160:	e032      	b.n	80011c8 <store_temp_in_string+0xac>
				temp[1] = (temperature - (temperature/100)*100 )/10 + 48 ;
 8001162:	89fa      	ldrh	r2, [r7, #14]
 8001164:	89fb      	ldrh	r3, [r7, #14]
 8001166:	491f      	ldr	r1, [pc, #124]	; (80011e4 <store_temp_in_string+0xc8>)
 8001168:	fba1 1303 	umull	r1, r3, r1, r3
 800116c:	095b      	lsrs	r3, r3, #5
 800116e:	b29b      	uxth	r3, r3
 8001170:	4619      	mov	r1, r3
 8001172:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001176:	fb01 f303 	mul.w	r3, r1, r3
 800117a:	4413      	add	r3, r2
 800117c:	4a1a      	ldr	r2, [pc, #104]	; (80011e8 <store_temp_in_string+0xcc>)
 800117e:	fb82 1203 	smull	r1, r2, r2, r3
 8001182:	1092      	asrs	r2, r2, #2
 8001184:	17db      	asrs	r3, r3, #31
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	b2da      	uxtb	r2, r3
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	3301      	adds	r3, #1
 800118e:	3230      	adds	r2, #48	; 0x30
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	701a      	strb	r2, [r3, #0]
				break;
 8001194:	e018      	b.n	80011c8 <store_temp_in_string+0xac>
				temp[2] = (temperature - ((temperature/10)*10) ) + 48 ;
 8001196:	89fb      	ldrh	r3, [r7, #14]
 8001198:	b2da      	uxtb	r2, r3
 800119a:	89fb      	ldrh	r3, [r7, #14]
 800119c:	4913      	ldr	r1, [pc, #76]	; (80011ec <store_temp_in_string+0xd0>)
 800119e:	fba1 1303 	umull	r1, r3, r1, r3
 80011a2:	08db      	lsrs	r3, r3, #3
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	4619      	mov	r1, r3
 80011aa:	0149      	lsls	r1, r1, #5
 80011ac:	1ac9      	subs	r1, r1, r3
 80011ae:	0089      	lsls	r1, r1, #2
 80011b0:	1acb      	subs	r3, r1, r3
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	4413      	add	r3, r2
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	3302      	adds	r3, #2
 80011be:	3230      	adds	r2, #48	; 0x30
 80011c0:	b2d2      	uxtb	r2, r2
 80011c2:	701a      	strb	r2, [r3, #0]
				break;
 80011c4:	e000      	b.n	80011c8 <store_temp_in_string+0xac>
				break;
 80011c6:	bf00      	nop
	for(int i= 0 ; i < len ; i++){
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	3301      	adds	r3, #1
 80011cc:	617b      	str	r3, [r7, #20]
 80011ce:	697a      	ldr	r2, [r7, #20]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	dbac      	blt.n	8001130 <store_temp_in_string+0x14>

		}
	}
}
 80011d6:	bf00      	nop
 80011d8:	bf00      	nop
 80011da:	371c      	adds	r7, #28
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	51eb851f 	.word	0x51eb851f
 80011e8:	66666667 	.word	0x66666667
 80011ec:	cccccccd 	.word	0xcccccccd

080011f0 <system_state_update>:

/**
 * This function will update the system state based on the received UART command
 * or top button press
 */
void system_state_update(){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0

	//CHECK FOR TYPE OF MEASUREMENT
	if( g_config_command_rcvd == 1){
 80011f4:	4b87      	ldr	r3, [pc, #540]	; (8001414 <system_state_update+0x224>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d125      	bne.n	8001248 <system_state_update+0x58>
		g_config_command_rcvd = 0;
 80011fc:	4b85      	ldr	r3, [pc, #532]	; (8001414 <system_state_update+0x224>)
 80011fe:	2200      	movs	r2, #0
 8001200:	701a      	strb	r2, [r3, #0]

		if( g_system_config[2]=='E' && g_system_config[3] == 'N'){
 8001202:	4b85      	ldr	r3, [pc, #532]	; (8001418 <system_state_update+0x228>)
 8001204:	789b      	ldrb	r3, [r3, #2]
 8001206:	2b45      	cmp	r3, #69	; 0x45
 8001208:	d10a      	bne.n	8001220 <system_state_update+0x30>
 800120a:	4b83      	ldr	r3, [pc, #524]	; (8001418 <system_state_update+0x228>)
 800120c:	78db      	ldrb	r3, [r3, #3]
 800120e:	2b4e      	cmp	r3, #78	; 0x4e
 8001210:	d106      	bne.n	8001220 <system_state_update+0x30>
			// EN measure comand
			g_EN_config_command_rcvd =1 ;
 8001212:	4b82      	ldr	r3, [pc, #520]	; (800141c <system_state_update+0x22c>)
 8001214:	2201      	movs	r2, #1
 8001216:	701a      	strb	r2, [r3, #0]
			//stop SP measure
			g_SP_config_command_rcvd =0 ;
 8001218:	4b81      	ldr	r3, [pc, #516]	; (8001420 <system_state_update+0x230>)
 800121a:	2200      	movs	r2, #0
 800121c:	701a      	strb	r2, [r3, #0]
 800121e:	e013      	b.n	8001248 <system_state_update+0x58>

		}

		else if(g_system_config[2]=='S' && g_system_config[3] == 'P'){
 8001220:	4b7d      	ldr	r3, [pc, #500]	; (8001418 <system_state_update+0x228>)
 8001222:	789b      	ldrb	r3, [r3, #2]
 8001224:	2b53      	cmp	r3, #83	; 0x53
 8001226:	d10a      	bne.n	800123e <system_state_update+0x4e>
 8001228:	4b7b      	ldr	r3, [pc, #492]	; (8001418 <system_state_update+0x228>)
 800122a:	78db      	ldrb	r3, [r3, #3]
 800122c:	2b50      	cmp	r3, #80	; 0x50
 800122e:	d106      	bne.n	800123e <system_state_update+0x4e>
			// SP command
			g_SP_config_command_rcvd =1 ;
 8001230:	4b7b      	ldr	r3, [pc, #492]	; (8001420 <system_state_update+0x230>)
 8001232:	2201      	movs	r2, #1
 8001234:	701a      	strb	r2, [r3, #0]
			//stop EN command
			g_EN_config_command_rcvd =0;
 8001236:	4b79      	ldr	r3, [pc, #484]	; (800141c <system_state_update+0x22c>)
 8001238:	2200      	movs	r2, #0
 800123a:	701a      	strb	r2, [r3, #0]
 800123c:	e004      	b.n	8001248 <system_state_update+0x58>

		}

		else{
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)"Invalid Command\n", 16);
 800123e:	2210      	movs	r2, #16
 8001240:	4978      	ldr	r1, [pc, #480]	; (8001424 <system_state_update+0x234>)
 8001242:	4879      	ldr	r0, [pc, #484]	; (8001428 <system_state_update+0x238>)
 8001244:	f003 fe09 	bl	8004e5a <HAL_UART_Transmit_IT>
		}
	}

	// Environment Measure - And not measuring SP
	if(g_top_button_pressed  == 1 && g_EN_config_command_rcvd ==0 && g_SP_config_command_rcvd ==0 && (g_SP_measure == 0 || g_SP_measure ==2)){
 8001248:	4b78      	ldr	r3, [pc, #480]	; (800142c <system_state_update+0x23c>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d120      	bne.n	8001292 <system_state_update+0xa2>
 8001250:	4b72      	ldr	r3, [pc, #456]	; (800141c <system_state_update+0x22c>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d11c      	bne.n	8001292 <system_state_update+0xa2>
 8001258:	4b71      	ldr	r3, [pc, #452]	; (8001420 <system_state_update+0x230>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d118      	bne.n	8001292 <system_state_update+0xa2>
 8001260:	4b73      	ldr	r3, [pc, #460]	; (8001430 <system_state_update+0x240>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d003      	beq.n	8001270 <system_state_update+0x80>
 8001268:	4b71      	ldr	r3, [pc, #452]	; (8001430 <system_state_update+0x240>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b02      	cmp	r3, #2
 800126e:	d110      	bne.n	8001292 <system_state_update+0xa2>
		g_top_button_pressed = 0;
 8001270:	4b6e      	ldr	r3, [pc, #440]	; (800142c <system_state_update+0x23c>)
 8001272:	2200      	movs	r2, #0
 8001274:	701a      	strb	r2, [r3, #0]

		g_EN_measure++  ;
 8001276:	4b6f      	ldr	r3, [pc, #444]	; (8001434 <system_state_update+0x244>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	3301      	adds	r3, #1
 800127c:	b2da      	uxtb	r2, r3
 800127e:	4b6d      	ldr	r3, [pc, #436]	; (8001434 <system_state_update+0x244>)
 8001280:	701a      	strb	r2, [r3, #0]

		if(g_EN_measure >2 ){
 8001282:	4b6c      	ldr	r3, [pc, #432]	; (8001434 <system_state_update+0x244>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2b02      	cmp	r3, #2
 8001288:	d954      	bls.n	8001334 <system_state_update+0x144>
			g_EN_measure = 1;
 800128a:	4b6a      	ldr	r3, [pc, #424]	; (8001434 <system_state_update+0x244>)
 800128c:	2201      	movs	r2, #1
 800128e:	701a      	strb	r2, [r3, #0]
		if(g_EN_measure >2 ){
 8001290:	e050      	b.n	8001334 <system_state_update+0x144>
		}
	}
	else if(g_top_button_pressed ==0  && g_EN_config_command_rcvd == 1 && g_SP_config_command_rcvd ==0  && (g_SP_measure == 0 || g_SP_measure ==2)){
 8001292:	4b66      	ldr	r3, [pc, #408]	; (800142c <system_state_update+0x23c>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d14c      	bne.n	8001334 <system_state_update+0x144>
 800129a:	4b60      	ldr	r3, [pc, #384]	; (800141c <system_state_update+0x22c>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d148      	bne.n	8001334 <system_state_update+0x144>
 80012a2:	4b5f      	ldr	r3, [pc, #380]	; (8001420 <system_state_update+0x230>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d144      	bne.n	8001334 <system_state_update+0x144>
 80012aa:	4b61      	ldr	r3, [pc, #388]	; (8001430 <system_state_update+0x240>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <system_state_update+0xca>
 80012b2:	4b5f      	ldr	r3, [pc, #380]	; (8001430 <system_state_update+0x240>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d13c      	bne.n	8001334 <system_state_update+0x144>
		g_EN_config_command_rcvd = 0;
 80012ba:	4b58      	ldr	r3, [pc, #352]	; (800141c <system_state_update+0x22c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	701a      	strb	r2, [r3, #0]
		if(g_system_config[0]== '&' && g_system_config[1 ]== '_' && g_system_config[2]=='E' && g_system_config[3] == 'N' &&g_system_config[4] =='_'&& g_system_config[5] =='*' &&  g_system_config[6] =='\n' ){
 80012c0:	4b55      	ldr	r3, [pc, #340]	; (8001418 <system_state_update+0x228>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2b26      	cmp	r3, #38	; 0x26
 80012c6:	d12f      	bne.n	8001328 <system_state_update+0x138>
 80012c8:	4b53      	ldr	r3, [pc, #332]	; (8001418 <system_state_update+0x228>)
 80012ca:	785b      	ldrb	r3, [r3, #1]
 80012cc:	2b5f      	cmp	r3, #95	; 0x5f
 80012ce:	d12b      	bne.n	8001328 <system_state_update+0x138>
 80012d0:	4b51      	ldr	r3, [pc, #324]	; (8001418 <system_state_update+0x228>)
 80012d2:	789b      	ldrb	r3, [r3, #2]
 80012d4:	2b45      	cmp	r3, #69	; 0x45
 80012d6:	d127      	bne.n	8001328 <system_state_update+0x138>
 80012d8:	4b4f      	ldr	r3, [pc, #316]	; (8001418 <system_state_update+0x228>)
 80012da:	78db      	ldrb	r3, [r3, #3]
 80012dc:	2b4e      	cmp	r3, #78	; 0x4e
 80012de:	d123      	bne.n	8001328 <system_state_update+0x138>
 80012e0:	4b4d      	ldr	r3, [pc, #308]	; (8001418 <system_state_update+0x228>)
 80012e2:	791b      	ldrb	r3, [r3, #4]
 80012e4:	2b5f      	cmp	r3, #95	; 0x5f
 80012e6:	d11f      	bne.n	8001328 <system_state_update+0x138>
 80012e8:	4b4b      	ldr	r3, [pc, #300]	; (8001418 <system_state_update+0x228>)
 80012ea:	795b      	ldrb	r3, [r3, #5]
 80012ec:	2b2a      	cmp	r3, #42	; 0x2a
 80012ee:	d11b      	bne.n	8001328 <system_state_update+0x138>
 80012f0:	4b49      	ldr	r3, [pc, #292]	; (8001418 <system_state_update+0x228>)
 80012f2:	799b      	ldrb	r3, [r3, #6]
 80012f4:	2b0a      	cmp	r3, #10
 80012f6:	d117      	bne.n	8001328 <system_state_update+0x138>
			if(g_EN_measure == 0){
 80012f8:	4b4e      	ldr	r3, [pc, #312]	; (8001434 <system_state_update+0x244>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d103      	bne.n	8001308 <system_state_update+0x118>
				g_EN_measure = 1;
 8001300:	4b4c      	ldr	r3, [pc, #304]	; (8001434 <system_state_update+0x244>)
 8001302:	2201      	movs	r2, #1
 8001304:	701a      	strb	r2, [r3, #0]
			if(g_EN_measure == 0){
 8001306:	e014      	b.n	8001332 <system_state_update+0x142>
			}
			else if(g_EN_measure == 1){
 8001308:	4b4a      	ldr	r3, [pc, #296]	; (8001434 <system_state_update+0x244>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d103      	bne.n	8001318 <system_state_update+0x128>
				g_EN_measure = 2;
 8001310:	4b48      	ldr	r3, [pc, #288]	; (8001434 <system_state_update+0x244>)
 8001312:	2202      	movs	r2, #2
 8001314:	701a      	strb	r2, [r3, #0]
			if(g_EN_measure == 0){
 8001316:	e00c      	b.n	8001332 <system_state_update+0x142>

			}
			else{
				if(g_EN_measure ==2){
 8001318:	4b46      	ldr	r3, [pc, #280]	; (8001434 <system_state_update+0x244>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b02      	cmp	r3, #2
 800131e:	d108      	bne.n	8001332 <system_state_update+0x142>
					g_EN_measure = 1;
 8001320:	4b44      	ldr	r3, [pc, #272]	; (8001434 <system_state_update+0x244>)
 8001322:	2201      	movs	r2, #1
 8001324:	701a      	strb	r2, [r3, #0]
			if(g_EN_measure == 0){
 8001326:	e004      	b.n	8001332 <system_state_update+0x142>
				}
			}
		}
		//else block to not update g_EN_measure if incorrent command revcd
		else{
			g_EN_measure =  g_EN_measure ;
 8001328:	4b42      	ldr	r3, [pc, #264]	; (8001434 <system_state_update+0x244>)
 800132a:	781a      	ldrb	r2, [r3, #0]
 800132c:	4b41      	ldr	r3, [pc, #260]	; (8001434 <system_state_update+0x244>)
 800132e:	701a      	strb	r2, [r3, #0]
 8001330:	e000      	b.n	8001334 <system_state_update+0x144>
			if(g_EN_measure == 0){
 8001332:	bf00      	nop
	}



	//SP Measure
	if(g_bottom_button_pressed  == 1  && g_EN_config_command_rcvd == 0 && g_SP_config_command_rcvd ==0  && (g_EN_measure == 0 || g_EN_measure ==2)){
 8001334:	4b40      	ldr	r3, [pc, #256]	; (8001438 <system_state_update+0x248>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d120      	bne.n	800137e <system_state_update+0x18e>
 800133c:	4b37      	ldr	r3, [pc, #220]	; (800141c <system_state_update+0x22c>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d11c      	bne.n	800137e <system_state_update+0x18e>
 8001344:	4b36      	ldr	r3, [pc, #216]	; (8001420 <system_state_update+0x230>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d118      	bne.n	800137e <system_state_update+0x18e>
 800134c:	4b39      	ldr	r3, [pc, #228]	; (8001434 <system_state_update+0x244>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d003      	beq.n	800135c <system_state_update+0x16c>
 8001354:	4b37      	ldr	r3, [pc, #220]	; (8001434 <system_state_update+0x244>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b02      	cmp	r3, #2
 800135a:	d110      	bne.n	800137e <system_state_update+0x18e>
			g_bottom_button_pressed = 0;
 800135c:	4b36      	ldr	r3, [pc, #216]	; (8001438 <system_state_update+0x248>)
 800135e:	2200      	movs	r2, #0
 8001360:	701a      	strb	r2, [r3, #0]

			g_SP_measure++  ;
 8001362:	4b33      	ldr	r3, [pc, #204]	; (8001430 <system_state_update+0x240>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	3301      	adds	r3, #1
 8001368:	b2da      	uxtb	r2, r3
 800136a:	4b31      	ldr	r3, [pc, #196]	; (8001430 <system_state_update+0x240>)
 800136c:	701a      	strb	r2, [r3, #0]

			if(g_SP_measure >2 ){
 800136e:	4b30      	ldr	r3, [pc, #192]	; (8001430 <system_state_update+0x240>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b02      	cmp	r3, #2
 8001374:	d968      	bls.n	8001448 <system_state_update+0x258>
				g_SP_measure = 1;
 8001376:	4b2e      	ldr	r3, [pc, #184]	; (8001430 <system_state_update+0x240>)
 8001378:	2201      	movs	r2, #1
 800137a:	701a      	strb	r2, [r3, #0]
			if(g_SP_measure >2 ){
 800137c:	e064      	b.n	8001448 <system_state_update+0x258>
			}
		}
		else if(g_bottom_button_pressed ==0  && g_EN_config_command_rcvd == 0 && g_SP_config_command_rcvd ==1 && (g_EN_measure == 0 || g_EN_measure ==2)){
 800137e:	4b2e      	ldr	r3, [pc, #184]	; (8001438 <system_state_update+0x248>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d160      	bne.n	8001448 <system_state_update+0x258>
 8001386:	4b25      	ldr	r3, [pc, #148]	; (800141c <system_state_update+0x22c>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d15c      	bne.n	8001448 <system_state_update+0x258>
 800138e:	4b24      	ldr	r3, [pc, #144]	; (8001420 <system_state_update+0x230>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d158      	bne.n	8001448 <system_state_update+0x258>
 8001396:	4b27      	ldr	r3, [pc, #156]	; (8001434 <system_state_update+0x244>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d003      	beq.n	80013a6 <system_state_update+0x1b6>
 800139e:	4b25      	ldr	r3, [pc, #148]	; (8001434 <system_state_update+0x244>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d150      	bne.n	8001448 <system_state_update+0x258>
			g_SP_config_command_rcvd = 0;
 80013a6:	4b1e      	ldr	r3, [pc, #120]	; (8001420 <system_state_update+0x230>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	701a      	strb	r2, [r3, #0]
			if(g_system_config[0]== '&' && g_system_config[1 ]== '_' && g_system_config[2]=='S' && g_system_config[3] == 'P' &&g_system_config[4] =='_'&& g_system_config[5] =='*' &&  g_system_config[6] =='\n' ){
 80013ac:	4b1a      	ldr	r3, [pc, #104]	; (8001418 <system_state_update+0x228>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b26      	cmp	r3, #38	; 0x26
 80013b2:	d143      	bne.n	800143c <system_state_update+0x24c>
 80013b4:	4b18      	ldr	r3, [pc, #96]	; (8001418 <system_state_update+0x228>)
 80013b6:	785b      	ldrb	r3, [r3, #1]
 80013b8:	2b5f      	cmp	r3, #95	; 0x5f
 80013ba:	d13f      	bne.n	800143c <system_state_update+0x24c>
 80013bc:	4b16      	ldr	r3, [pc, #88]	; (8001418 <system_state_update+0x228>)
 80013be:	789b      	ldrb	r3, [r3, #2]
 80013c0:	2b53      	cmp	r3, #83	; 0x53
 80013c2:	d13b      	bne.n	800143c <system_state_update+0x24c>
 80013c4:	4b14      	ldr	r3, [pc, #80]	; (8001418 <system_state_update+0x228>)
 80013c6:	78db      	ldrb	r3, [r3, #3]
 80013c8:	2b50      	cmp	r3, #80	; 0x50
 80013ca:	d137      	bne.n	800143c <system_state_update+0x24c>
 80013cc:	4b12      	ldr	r3, [pc, #72]	; (8001418 <system_state_update+0x228>)
 80013ce:	791b      	ldrb	r3, [r3, #4]
 80013d0:	2b5f      	cmp	r3, #95	; 0x5f
 80013d2:	d133      	bne.n	800143c <system_state_update+0x24c>
 80013d4:	4b10      	ldr	r3, [pc, #64]	; (8001418 <system_state_update+0x228>)
 80013d6:	795b      	ldrb	r3, [r3, #5]
 80013d8:	2b2a      	cmp	r3, #42	; 0x2a
 80013da:	d12f      	bne.n	800143c <system_state_update+0x24c>
 80013dc:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <system_state_update+0x228>)
 80013de:	799b      	ldrb	r3, [r3, #6]
 80013e0:	2b0a      	cmp	r3, #10
 80013e2:	d12b      	bne.n	800143c <system_state_update+0x24c>
				if(g_SP_measure == 0){
 80013e4:	4b12      	ldr	r3, [pc, #72]	; (8001430 <system_state_update+0x240>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d103      	bne.n	80013f4 <system_state_update+0x204>
					g_SP_measure = 1;
 80013ec:	4b10      	ldr	r3, [pc, #64]	; (8001430 <system_state_update+0x240>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	701a      	strb	r2, [r3, #0]
				if(g_SP_measure == 0){
 80013f2:	e028      	b.n	8001446 <system_state_update+0x256>
				}
				else if(g_SP_measure == 1){
 80013f4:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <system_state_update+0x240>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d103      	bne.n	8001404 <system_state_update+0x214>
					g_SP_measure = 2;
 80013fc:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <system_state_update+0x240>)
 80013fe:	2202      	movs	r2, #2
 8001400:	701a      	strb	r2, [r3, #0]
				if(g_SP_measure == 0){
 8001402:	e020      	b.n	8001446 <system_state_update+0x256>

				}
				else{
					if(g_SP_measure ==2){
 8001404:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <system_state_update+0x240>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b02      	cmp	r3, #2
 800140a:	d11c      	bne.n	8001446 <system_state_update+0x256>
						g_SP_measure = 1;
 800140c:	4b08      	ldr	r3, [pc, #32]	; (8001430 <system_state_update+0x240>)
 800140e:	2201      	movs	r2, #1
 8001410:	701a      	strb	r2, [r3, #0]
				if(g_SP_measure == 0){
 8001412:	e018      	b.n	8001446 <system_state_update+0x256>
 8001414:	20000202 	.word	0x20000202
 8001418:	200001f0 	.word	0x200001f0
 800141c:	20000209 	.word	0x20000209
 8001420:	2000020c 	.word	0x2000020c
 8001424:	080066ac 	.word	0x080066ac
 8001428:	2000017c 	.word	0x2000017c
 800142c:	20000235 	.word	0x20000235
 8001430:	2000020a 	.word	0x2000020a
 8001434:	20000203 	.word	0x20000203
 8001438:	20000236 	.word	0x20000236
					}
				}
			}
			//else block to not update g_EN_measure if incorrent command revcd
			else{
				g_SP_measure =  g_SP_measure ;
 800143c:	4b03      	ldr	r3, [pc, #12]	; (800144c <system_state_update+0x25c>)
 800143e:	781a      	ldrb	r2, [r3, #0]
 8001440:	4b02      	ldr	r3, [pc, #8]	; (800144c <system_state_update+0x25c>)
 8001442:	701a      	strb	r2, [r3, #0]
			}
		}
}
 8001444:	e000      	b.n	8001448 <system_state_update+0x258>
				if(g_SP_measure == 0){
 8001446:	bf00      	nop
}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}
 800144c:	2000020a 	.word	0x2000020a

08001450 <HAL_TIM_IC_CaptureCallback>:
uint8_t g_new_pulse = 0;
uint16_t g_lmt01_sens_temp =  0 ;
char dig_sens_temp[3] = {};

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
  if(htim->Instance == TIM2){
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001460:	d142      	bne.n	80014e8 <HAL_TIM_IC_CaptureCallback+0x98>
	  g_new_pulse = 1;
 8001462:	4b23      	ldr	r3, [pc, #140]	; (80014f0 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8001464:	2201      	movs	r2, #1
 8001466:	701a      	strb	r2, [r3, #0]
	  g_time_between_pulses =  __HAL_TIM_GET_COUNTER(&htim2)  - current_value;  //Time between rising edges
 8001468:	4b22      	ldr	r3, [pc, #136]	; (80014f4 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800146e:	4b22      	ldr	r3, [pc, #136]	; (80014f8 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	4a21      	ldr	r2, [pc, #132]	; (80014fc <HAL_TIM_IC_CaptureCallback+0xac>)
 8001476:	6013      	str	r3, [r2, #0]

	  if( g_time_between_pulses<13){
 8001478:	4b20      	ldr	r3, [pc, #128]	; (80014fc <HAL_TIM_IC_CaptureCallback+0xac>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2b0c      	cmp	r3, #12
 800147e:	d80a      	bhi.n	8001496 <HAL_TIM_IC_CaptureCallback+0x46>
		  current_value = __HAL_TIM_GET_COUNTER(&htim2) ;
 8001480:	4b1c      	ldr	r3, [pc, #112]	; (80014f4 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001486:	4a1c      	ldr	r2, [pc, #112]	; (80014f8 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8001488:	6013      	str	r3, [r2, #0]
		  pulse_count++ ;
 800148a:	4b1d      	ldr	r3, [pc, #116]	; (8001500 <HAL_TIM_IC_CaptureCallback+0xb0>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	3301      	adds	r3, #1
 8001490:	4a1b      	ldr	r2, [pc, #108]	; (8001500 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001492:	6013      	str	r3, [r2, #0]
		  g_TO1_temp = (pulse_count/4096.0)*256 - 50 ; //calculate new temp - BUG Fixed: 4094 changed to 4096
		 current_value = __HAL_TIM_GET_COUNTER(&htim2) ;
		 pulse_count = 0;
	  }
  }
}
 8001494:	e028      	b.n	80014e8 <HAL_TIM_IC_CaptureCallback+0x98>
		  g_TO1_temp = (pulse_count/4096.0)*256 - 50 ; //calculate new temp - BUG Fixed: 4094 changed to 4096
 8001496:	4b1a      	ldr	r3, [pc, #104]	; (8001500 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff f83a 	bl	8000514 <__aeabi_ui2d>
 80014a0:	f04f 0200 	mov.w	r2, #0
 80014a4:	4b17      	ldr	r3, [pc, #92]	; (8001504 <HAL_TIM_IC_CaptureCallback+0xb4>)
 80014a6:	f7ff f9d9 	bl	800085c <__aeabi_ddiv>
 80014aa:	4602      	mov	r2, r0
 80014ac:	460b      	mov	r3, r1
 80014ae:	4610      	mov	r0, r2
 80014b0:	4619      	mov	r1, r3
 80014b2:	f04f 0200 	mov.w	r2, #0
 80014b6:	4b14      	ldr	r3, [pc, #80]	; (8001508 <HAL_TIM_IC_CaptureCallback+0xb8>)
 80014b8:	f7ff f8a6 	bl	8000608 <__aeabi_dmul>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	4610      	mov	r0, r2
 80014c2:	4619      	mov	r1, r3
 80014c4:	f04f 0200 	mov.w	r2, #0
 80014c8:	4b10      	ldr	r3, [pc, #64]	; (800150c <HAL_TIM_IC_CaptureCallback+0xbc>)
 80014ca:	f7fe fee5 	bl	8000298 <__aeabi_dsub>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	490f      	ldr	r1, [pc, #60]	; (8001510 <HAL_TIM_IC_CaptureCallback+0xc0>)
 80014d4:	e9c1 2300 	strd	r2, r3, [r1]
		 current_value = __HAL_TIM_GET_COUNTER(&htim2) ;
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014de:	4a06      	ldr	r2, [pc, #24]	; (80014f8 <HAL_TIM_IC_CaptureCallback+0xa8>)
 80014e0:	6013      	str	r3, [r2, #0]
		 pulse_count = 0;
 80014e2:	4b07      	ldr	r3, [pc, #28]	; (8001500 <HAL_TIM_IC_CaptureCallback+0xb0>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
}
 80014e8:	bf00      	nop
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	2000022c 	.word	0x2000022c
 80014f4:	200000ec 	.word	0x200000ec
 80014f8:	20000224 	.word	0x20000224
 80014fc:	20000228 	.word	0x20000228
 8001500:	2000023c 	.word	0x2000023c
 8001504:	40b00000 	.word	0x40b00000
 8001508:	40700000 	.word	0x40700000
 800150c:	40490000 	.word	0x40490000
 8001510:	200001e0 	.word	0x200001e0

08001514 <flash_led_d3>:

/**
 * Function flashed LED D3 at specified interval of 50 ms
 */
void flash_led_d3(){
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - g_time_passed >= 50 && g_LED_D3_ON == 0){
 8001518:	f001 f8e4 	bl	80026e4 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	4b16      	ldr	r3, [pc, #88]	; (8001578 <flash_led_d3+0x64>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b31      	cmp	r3, #49	; 0x31
 8001526:	d90c      	bls.n	8001542 <flash_led_d3+0x2e>
 8001528:	4b14      	ldr	r3, [pc, #80]	; (800157c <flash_led_d3+0x68>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d108      	bne.n	8001542 <flash_led_d3+0x2e>
		g_LED_D3_ON = 1; // set D2 on
 8001530:	4b12      	ldr	r3, [pc, #72]	; (800157c <flash_led_d3+0x68>)
 8001532:	2201      	movs	r2, #1
 8001534:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET) ;
 8001536:	2200      	movs	r2, #0
 8001538:	2120      	movs	r1, #32
 800153a:	4811      	ldr	r0, [pc, #68]	; (8001580 <flash_led_d3+0x6c>)
 800153c:	f002 f834 	bl	80035a8 <HAL_GPIO_WritePin>
		g_time_passed =  HAL_GetTick() ;
		g_LED_D3_ON = 0;  //set D2 off

	}

}
 8001540:	e018      	b.n	8001574 <flash_led_d3+0x60>
	else if(HAL_GetTick() - g_time_passed >= 100 && g_LED_D3_ON == 1){
 8001542:	f001 f8cf 	bl	80026e4 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <flash_led_d3+0x64>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b63      	cmp	r3, #99	; 0x63
 8001550:	d910      	bls.n	8001574 <flash_led_d3+0x60>
 8001552:	4b0a      	ldr	r3, [pc, #40]	; (800157c <flash_led_d3+0x68>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d10c      	bne.n	8001574 <flash_led_d3+0x60>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET) ;
 800155a:	2201      	movs	r2, #1
 800155c:	2120      	movs	r1, #32
 800155e:	4808      	ldr	r0, [pc, #32]	; (8001580 <flash_led_d3+0x6c>)
 8001560:	f002 f822 	bl	80035a8 <HAL_GPIO_WritePin>
		g_time_passed =  HAL_GetTick() ;
 8001564:	f001 f8be 	bl	80026e4 <HAL_GetTick>
 8001568:	4603      	mov	r3, r0
 800156a:	4a03      	ldr	r2, [pc, #12]	; (8001578 <flash_led_d3+0x64>)
 800156c:	6013      	str	r3, [r2, #0]
		g_LED_D3_ON = 0;  //set D2 off
 800156e:	4b03      	ldr	r3, [pc, #12]	; (800157c <flash_led_d3+0x68>)
 8001570:	2200      	movs	r2, #0
 8001572:	701a      	strb	r2, [r3, #0]
}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000204 	.word	0x20000204
 800157c:	20000208 	.word	0x20000208
 8001580:	40020400 	.word	0x40020400

08001584 <flash_led_d2>:

/**
 * Function flashed LED D2 at specified interval of 100 ms
 */
void flash_led_d2(){
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - g_time_passed >= 100 && g_LED_D2_ON == 0){
 8001588:	f001 f8ac 	bl	80026e4 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <flash_led_d2+0x64>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b63      	cmp	r3, #99	; 0x63
 8001596:	d90c      	bls.n	80015b2 <flash_led_d2+0x2e>
 8001598:	4b14      	ldr	r3, [pc, #80]	; (80015ec <flash_led_d2+0x68>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d108      	bne.n	80015b2 <flash_led_d2+0x2e>
		g_LED_D2_ON = 1; // set D2 on
 80015a0:	4b12      	ldr	r3, [pc, #72]	; (80015ec <flash_led_d2+0x68>)
 80015a2:	2201      	movs	r2, #1
 80015a4:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET) ;
 80015a6:	2200      	movs	r2, #0
 80015a8:	2110      	movs	r1, #16
 80015aa:	4811      	ldr	r0, [pc, #68]	; (80015f0 <flash_led_d2+0x6c>)
 80015ac:	f001 fffc 	bl	80035a8 <HAL_GPIO_WritePin>
		g_time_passed =  HAL_GetTick() ;
		g_LED_D2_ON = 0;  //set D2 off

	}

}
 80015b0:	e018      	b.n	80015e4 <flash_led_d2+0x60>
	else if(HAL_GetTick() - g_time_passed >= 200 && g_LED_D2_ON == 1){
 80015b2:	f001 f897 	bl	80026e4 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <flash_led_d2+0x64>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2bc7      	cmp	r3, #199	; 0xc7
 80015c0:	d910      	bls.n	80015e4 <flash_led_d2+0x60>
 80015c2:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <flash_led_d2+0x68>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d10c      	bne.n	80015e4 <flash_led_d2+0x60>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET) ;
 80015ca:	2201      	movs	r2, #1
 80015cc:	2110      	movs	r1, #16
 80015ce:	4808      	ldr	r0, [pc, #32]	; (80015f0 <flash_led_d2+0x6c>)
 80015d0:	f001 ffea 	bl	80035a8 <HAL_GPIO_WritePin>
		g_time_passed =  HAL_GetTick() ;
 80015d4:	f001 f886 	bl	80026e4 <HAL_GetTick>
 80015d8:	4603      	mov	r3, r0
 80015da:	4a03      	ldr	r2, [pc, #12]	; (80015e8 <flash_led_d2+0x64>)
 80015dc:	6013      	str	r3, [r2, #0]
		g_LED_D2_ON = 0;  //set D2 off
 80015de:	4b03      	ldr	r3, [pc, #12]	; (80015ec <flash_led_d2+0x68>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	701a      	strb	r2, [r3, #0]
}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20000204 	.word	0x20000204
 80015ec:	2000020b 	.word	0x2000020b
 80015f0:	40020400 	.word	0x40020400

080015f4 <store_system_state_in_buffer>:

void store_system_state_in_buffer(char analog_temp[], char dig_temp[],char lux_value[],char system_state[], uint8_t len_of_sys_arr ){
 80015f4:	b480      	push	{r7}
 80015f6:	b087      	sub	sp, #28
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
 8001600:	603b      	str	r3, [r7, #0]
	  for(int i = 0; i < len_of_sys_arr ; i++){
 8001602:	2300      	movs	r3, #0
 8001604:	617b      	str	r3, [r7, #20]
 8001606:	e072      	b.n	80016ee <store_system_state_in_buffer+0xfa>
		  switch(i){
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	2b0f      	cmp	r3, #15
 800160c:	d86b      	bhi.n	80016e6 <store_system_state_in_buffer+0xf2>
 800160e:	a201      	add	r2, pc, #4	; (adr r2, 8001614 <store_system_state_in_buffer+0x20>)
 8001610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001614:	08001655 	.word	0x08001655
 8001618:	0800165d 	.word	0x0800165d
 800161c:	08001665 	.word	0x08001665
 8001620:	0800166f 	.word	0x0800166f
 8001624:	08001679 	.word	0x08001679
 8001628:	08001683 	.word	0x08001683
 800162c:	0800168b 	.word	0x0800168b
 8001630:	08001695 	.word	0x08001695
 8001634:	0800169f 	.word	0x0800169f
 8001638:	080016a9 	.word	0x080016a9
 800163c:	080016b1 	.word	0x080016b1
 8001640:	080016bb 	.word	0x080016bb
 8001644:	080016c5 	.word	0x080016c5
 8001648:	080016cf 	.word	0x080016cf
 800164c:	080016d7 	.word	0x080016d7
 8001650:	080016df 	.word	0x080016df
		  case 0:
			  system_state_transmit[0] = '&' ;
 8001654:	4b2c      	ldr	r3, [pc, #176]	; (8001708 <store_system_state_in_buffer+0x114>)
 8001656:	2226      	movs	r2, #38	; 0x26
 8001658:	701a      	strb	r2, [r3, #0]
			  break ;
 800165a:	e045      	b.n	80016e8 <store_system_state_in_buffer+0xf4>
		  case 1:
			  system_state_transmit[1] = '_' ;
 800165c:	4b2a      	ldr	r3, [pc, #168]	; (8001708 <store_system_state_in_buffer+0x114>)
 800165e:	225f      	movs	r2, #95	; 0x5f
 8001660:	705a      	strb	r2, [r3, #1]

			  break;
 8001662:	e041      	b.n	80016e8 <store_system_state_in_buffer+0xf4>
		  case 2:
			  system_state_transmit[2] = analog_temp[0] ;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	781a      	ldrb	r2, [r3, #0]
 8001668:	4b27      	ldr	r3, [pc, #156]	; (8001708 <store_system_state_in_buffer+0x114>)
 800166a:	709a      	strb	r2, [r3, #2]

			  break;
 800166c:	e03c      	b.n	80016e8 <store_system_state_in_buffer+0xf4>
		  case 3:
			  system_state_transmit[3] = analog_temp[1] ;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	785a      	ldrb	r2, [r3, #1]
 8001672:	4b25      	ldr	r3, [pc, #148]	; (8001708 <store_system_state_in_buffer+0x114>)
 8001674:	70da      	strb	r2, [r3, #3]

			  break;
 8001676:	e037      	b.n	80016e8 <store_system_state_in_buffer+0xf4>
		  case 4:
			  system_state_transmit[4] = analog_temp[2] ;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	789a      	ldrb	r2, [r3, #2]
 800167c:	4b22      	ldr	r3, [pc, #136]	; (8001708 <store_system_state_in_buffer+0x114>)
 800167e:	711a      	strb	r2, [r3, #4]

			  break;
 8001680:	e032      	b.n	80016e8 <store_system_state_in_buffer+0xf4>
		  case 5:
			  system_state_transmit[5] = '_' ;
 8001682:	4b21      	ldr	r3, [pc, #132]	; (8001708 <store_system_state_in_buffer+0x114>)
 8001684:	225f      	movs	r2, #95	; 0x5f
 8001686:	715a      	strb	r2, [r3, #5]

			  break;
 8001688:	e02e      	b.n	80016e8 <store_system_state_in_buffer+0xf4>
		  case 6:
			  system_state_transmit[6] = dig_temp[0] ;
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	781a      	ldrb	r2, [r3, #0]
 800168e:	4b1e      	ldr	r3, [pc, #120]	; (8001708 <store_system_state_in_buffer+0x114>)
 8001690:	719a      	strb	r2, [r3, #6]

			  break;
 8001692:	e029      	b.n	80016e8 <store_system_state_in_buffer+0xf4>
		  case 7:
			  system_state_transmit[7] = dig_temp[1] ;
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	785a      	ldrb	r2, [r3, #1]
 8001698:	4b1b      	ldr	r3, [pc, #108]	; (8001708 <store_system_state_in_buffer+0x114>)
 800169a:	71da      	strb	r2, [r3, #7]

			  break;
 800169c:	e024      	b.n	80016e8 <store_system_state_in_buffer+0xf4>
		  case 8:
			  system_state_transmit[8] = dig_temp[2] ;
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	789a      	ldrb	r2, [r3, #2]
 80016a2:	4b19      	ldr	r3, [pc, #100]	; (8001708 <store_system_state_in_buffer+0x114>)
 80016a4:	721a      	strb	r2, [r3, #8]

			  break;
 80016a6:	e01f      	b.n	80016e8 <store_system_state_in_buffer+0xf4>
		  case 9:
			  system_state_transmit[9] = '_' ;
 80016a8:	4b17      	ldr	r3, [pc, #92]	; (8001708 <store_system_state_in_buffer+0x114>)
 80016aa:	225f      	movs	r2, #95	; 0x5f
 80016ac:	725a      	strb	r2, [r3, #9]

			  break;
 80016ae:	e01b      	b.n	80016e8 <store_system_state_in_buffer+0xf4>
		  case 10:
			  system_state_transmit[10] = lux_value[0] ;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	781a      	ldrb	r2, [r3, #0]
 80016b4:	4b14      	ldr	r3, [pc, #80]	; (8001708 <store_system_state_in_buffer+0x114>)
 80016b6:	729a      	strb	r2, [r3, #10]

			  break;
 80016b8:	e016      	b.n	80016e8 <store_system_state_in_buffer+0xf4>
		  case 11:
			  system_state_transmit[11] = lux_value[1] ;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	785a      	ldrb	r2, [r3, #1]
 80016be:	4b12      	ldr	r3, [pc, #72]	; (8001708 <store_system_state_in_buffer+0x114>)
 80016c0:	72da      	strb	r2, [r3, #11]

			  break;
 80016c2:	e011      	b.n	80016e8 <store_system_state_in_buffer+0xf4>
		  case 12:
			  system_state_transmit[12] = lux_value[2] ;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	789a      	ldrb	r2, [r3, #2]
 80016c8:	4b0f      	ldr	r3, [pc, #60]	; (8001708 <store_system_state_in_buffer+0x114>)
 80016ca:	731a      	strb	r2, [r3, #12]

			  break;
 80016cc:	e00c      	b.n	80016e8 <store_system_state_in_buffer+0xf4>
		  case 13:
			  system_state_transmit[13] = '_' ;
 80016ce:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <store_system_state_in_buffer+0x114>)
 80016d0:	225f      	movs	r2, #95	; 0x5f
 80016d2:	735a      	strb	r2, [r3, #13]

			  break;
 80016d4:	e008      	b.n	80016e8 <store_system_state_in_buffer+0xf4>
		  case 14:
			  system_state_transmit[14] = '*' ;
 80016d6:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <store_system_state_in_buffer+0x114>)
 80016d8:	222a      	movs	r2, #42	; 0x2a
 80016da:	739a      	strb	r2, [r3, #14]

			  break;
 80016dc:	e004      	b.n	80016e8 <store_system_state_in_buffer+0xf4>
		  case 15:
			  system_state_transmit[15] = '\n' ;
 80016de:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <store_system_state_in_buffer+0x114>)
 80016e0:	220a      	movs	r2, #10
 80016e2:	73da      	strb	r2, [r3, #15]

			  break;
 80016e4:	e000      	b.n	80016e8 <store_system_state_in_buffer+0xf4>
		  default:
			  break;
 80016e6:	bf00      	nop
	  for(int i = 0; i < len_of_sys_arr ; i++){
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	3301      	adds	r3, #1
 80016ec:	617b      	str	r3, [r7, #20]
 80016ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016f2:	697a      	ldr	r2, [r7, #20]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	db87      	blt.n	8001608 <store_system_state_in_buffer+0x14>
		  }
	  }
}
 80016f8:	bf00      	nop
 80016fa:	bf00      	nop
 80016fc:	371c      	adds	r7, #28
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	20000210 	.word	0x20000210

0800170c <ADC_Select_CH0>:

//digital sensore
void ADC_Select_CH0(void){
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001712:	463b      	mov	r3, r7
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_0;
 800171e:	2300      	movs	r3, #0
 8001720:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001722:	2301      	movs	r3, #1
 8001724:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001726:	2300      	movs	r3, #0
 8001728:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800172a:	463b      	mov	r3, r7
 800172c:	4619      	mov	r1, r3
 800172e:	4806      	ldr	r0, [pc, #24]	; (8001748 <ADC_Select_CH0+0x3c>)
 8001730:	f001 f9cc 	bl	8002acc <HAL_ADC_ConfigChannel>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <ADC_Select_CH0+0x32>
	{
		Error_Handler();
 800173a:	f000 fbe1 	bl	8001f00 <Error_Handler>
	}


}
 800173e:	bf00      	nop
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	200000a4 	.word	0x200000a4

0800174c <ADC_Select_CH14>:
// photodiode
void ADC_Select_CH14(void){
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001752:	463b      	mov	r3, r7
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	*/
	sConfig.Channel = ADC_CHANNEL_14;
 800175e:	230e      	movs	r3, #14
 8001760:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001762:	2301      	movs	r3, #1
 8001764:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001766:	463b      	mov	r3, r7
 8001768:	4619      	mov	r1, r3
 800176a:	4806      	ldr	r0, [pc, #24]	; (8001784 <ADC_Select_CH14+0x38>)
 800176c:	f001 f9ae 	bl	8002acc <HAL_ADC_ConfigChannel>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <ADC_Select_CH14+0x2e>
	{
		Error_Handler();
 8001776:	f000 fbc3 	bl	8001f00 <Error_Handler>
	}


}
 800177a:	bf00      	nop
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	200000a4 	.word	0x200000a4

08001788 <get_adc_value_conver_to_lux>:

/**
 * Function starts ADC CH14, connected to ouput of light diode
 * get the ADC value of diode
 */
uint16_t get_adc_value_conver_to_lux(){
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
	ADC_Select_CH14() ;
 800178c:	f7ff ffde 	bl	800174c <ADC_Select_CH14>
	HAL_ADC_Start(&hadc1);
 8001790:	4817      	ldr	r0, [pc, #92]	; (80017f0 <get_adc_value_conver_to_lux+0x68>)
 8001792:	f001 f81b 	bl	80027cc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) ;
 8001796:	f04f 31ff 	mov.w	r1, #4294967295
 800179a:	4815      	ldr	r0, [pc, #84]	; (80017f0 <get_adc_value_conver_to_lux+0x68>)
 800179c:	f001 f8fd 	bl	800299a <HAL_ADC_PollForConversion>
	g_raw_lux_value = HAL_ADC_GetValue(&hadc1) ;
 80017a0:	4813      	ldr	r0, [pc, #76]	; (80017f0 <get_adc_value_conver_to_lux+0x68>)
 80017a2:	f001 f985 	bl	8002ab0 <HAL_ADC_GetValue>
 80017a6:	4603      	mov	r3, r0
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <get_adc_value_conver_to_lux+0x6c>)
 80017ac:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 80017ae:	4810      	ldr	r0, [pc, #64]	; (80017f0 <get_adc_value_conver_to_lux+0x68>)
 80017b0:	f001 f8c0 	bl	8002934 <HAL_ADC_Stop>

	//scale adc value [0,999]
	g_raw_lux_value = g_raw_lux_value*(999.0/4095.0) ;
 80017b4:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <get_adc_value_conver_to_lux+0x6c>)
 80017b6:	881b      	ldrh	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7fe febb 	bl	8000534 <__aeabi_i2d>
 80017be:	a30a      	add	r3, pc, #40	; (adr r3, 80017e8 <get_adc_value_conver_to_lux+0x60>)
 80017c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c4:	f7fe ff20 	bl	8000608 <__aeabi_dmul>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	4610      	mov	r0, r2
 80017ce:	4619      	mov	r1, r3
 80017d0:	f7ff f92c 	bl	8000a2c <__aeabi_d2uiz>
 80017d4:	4603      	mov	r3, r0
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <get_adc_value_conver_to_lux+0x6c>)
 80017da:	801a      	strh	r2, [r3, #0]

	return g_raw_lux_value ;
 80017dc:	4b05      	ldr	r3, [pc, #20]	; (80017f4 <get_adc_value_conver_to_lux+0x6c>)
 80017de:	881b      	ldrh	r3, [r3, #0]

}
 80017e0:	4618      	mov	r0, r3
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	f3af 8000 	nop.w
 80017e8:	9f39f39f 	.word	0x9f39f39f
 80017ec:	3fcf39f3 	.word	0x3fcf39f3
 80017f0:	200000a4 	.word	0x200000a4
 80017f4:	200001e8 	.word	0x200001e8

080017f8 <en_measurements_and_responses>:
 * This funtion performs the measurement for UR3: Environement measure.
 * It measures the ambient temperature, solar panel temperature and light intensity,
 * the board is exposed to.
 * Measurements and responses, transmitted to UART and LCD
 */
void en_measurements_and_responses(){
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af02      	add	r7, sp, #8

	if(g_EN_measure == 1){
 80017fe:	4b34      	ldr	r3, [pc, #208]	; (80018d0 <en_measurements_and_responses+0xd8>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d143      	bne.n	800188e <en_measurements_and_responses+0x96>

	  // ignore bottom button press and SP command while measuring
	  if(g_bottom_button_pressed ==1 || g_SP_config_command_rcvd ==1){
 8001806:	4b33      	ldr	r3, [pc, #204]	; (80018d4 <en_measurements_and_responses+0xdc>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d003      	beq.n	8001816 <en_measurements_and_responses+0x1e>
 800180e:	4b32      	ldr	r3, [pc, #200]	; (80018d8 <en_measurements_and_responses+0xe0>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d105      	bne.n	8001822 <en_measurements_and_responses+0x2a>
		  g_bottom_button_pressed = 0 ;
 8001816:	4b2f      	ldr	r3, [pc, #188]	; (80018d4 <en_measurements_and_responses+0xdc>)
 8001818:	2200      	movs	r2, #0
 800181a:	701a      	strb	r2, [r3, #0]
		  g_SP_config_command_rcvd = 0 ;
 800181c:	4b2e      	ldr	r3, [pc, #184]	; (80018d8 <en_measurements_and_responses+0xe0>)
 800181e:	2200      	movs	r2, #0
 8001820:	701a      	strb	r2, [r3, #0]
	  }
	  //ANALOGUE SENSOR CALIBRATION
	  g_temp_in_deg = get_adc_value_and_celsius_temperature() ;
 8001822:	f7ff fc21 	bl	8001068 <get_adc_value_and_celsius_temperature>
 8001826:	4603      	mov	r3, r0
 8001828:	461a      	mov	r2, r3
 800182a:	4b2c      	ldr	r3, [pc, #176]	; (80018dc <en_measurements_and_responses+0xe4>)
 800182c:	801a      	strh	r2, [r3, #0]
	  store_temp_in_string(g_temp_in_deg, g_temperature, LEN);
 800182e:	4b2b      	ldr	r3, [pc, #172]	; (80018dc <en_measurements_and_responses+0xe4>)
 8001830:	881b      	ldrh	r3, [r3, #0]
 8001832:	2203      	movs	r2, #3
 8001834:	492a      	ldr	r1, [pc, #168]	; (80018e0 <en_measurements_and_responses+0xe8>)
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff fc70 	bl	800111c <store_temp_in_string>

	  //PHOTODIOCE ouput
	  g_get_lxd_value = get_adc_value_conver_to_lux();
 800183c:	f7ff ffa4 	bl	8001788 <get_adc_value_conver_to_lux>
 8001840:	4603      	mov	r3, r0
 8001842:	461a      	mov	r2, r3
 8001844:	4b27      	ldr	r3, [pc, #156]	; (80018e4 <en_measurements_and_responses+0xec>)
 8001846:	801a      	strh	r2, [r3, #0]
	  store_temp_in_string(g_get_lxd_value, g_lxd_value, LEN);
 8001848:	4b26      	ldr	r3, [pc, #152]	; (80018e4 <en_measurements_and_responses+0xec>)
 800184a:	881b      	ldrh	r3, [r3, #0]
 800184c:	2203      	movs	r2, #3
 800184e:	4926      	ldr	r1, [pc, #152]	; (80018e8 <en_measurements_and_responses+0xf0>)
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff fc63 	bl	800111c <store_temp_in_string>

	  // DIGITAL SENSOR CALIBRATION
	  g_lmt01_sens_temp =  (uint16_t)g_TO1_temp ;
 8001856:	4b25      	ldr	r3, [pc, #148]	; (80018ec <en_measurements_and_responses+0xf4>)
 8001858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185c:	4610      	mov	r0, r2
 800185e:	4619      	mov	r1, r3
 8001860:	f7ff f8e4 	bl	8000a2c <__aeabi_d2uiz>
 8001864:	4603      	mov	r3, r0
 8001866:	b29a      	uxth	r2, r3
 8001868:	4b21      	ldr	r3, [pc, #132]	; (80018f0 <en_measurements_and_responses+0xf8>)
 800186a:	801a      	strh	r2, [r3, #0]
	  store_temp_in_string(g_lmt01_sens_temp, dig_sens_temp, LEN) ;
 800186c:	4b20      	ldr	r3, [pc, #128]	; (80018f0 <en_measurements_and_responses+0xf8>)
 800186e:	881b      	ldrh	r3, [r3, #0]
 8001870:	2203      	movs	r2, #3
 8001872:	4920      	ldr	r1, [pc, #128]	; (80018f4 <en_measurements_and_responses+0xfc>)
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff fc51 	bl	800111c <store_temp_in_string>

	  //re-prime system state update
	  if(g_transmit_system_state ==0){
 800187a:	4b1f      	ldr	r3, [pc, #124]	; (80018f8 <en_measurements_and_responses+0x100>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d102      	bne.n	8001888 <en_measurements_and_responses+0x90>
		  g_transmit_system_state =1; //send the system state again
 8001882:	4b1d      	ldr	r3, [pc, #116]	; (80018f8 <en_measurements_and_responses+0x100>)
 8001884:	2201      	movs	r2, #1
 8001886:	701a      	strb	r2, [r3, #0]

	  }

	  //Flash D3 LED -> put in function
	  flash_led_d3();
 8001888:	f7ff fe44 	bl	8001514 <flash_led_d3>
		  //Write Results to LCD

	  }

	}
}
 800188c:	e01c      	b.n	80018c8 <en_measurements_and_responses+0xd0>
	else if(g_EN_measure == 2){
 800188e:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <en_measurements_and_responses+0xd8>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b02      	cmp	r3, #2
 8001894:	d118      	bne.n	80018c8 <en_measurements_and_responses+0xd0>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET) ;
 8001896:	2201      	movs	r2, #1
 8001898:	2120      	movs	r1, #32
 800189a:	4818      	ldr	r0, [pc, #96]	; (80018fc <en_measurements_and_responses+0x104>)
 800189c:	f001 fe84 	bl	80035a8 <HAL_GPIO_WritePin>
	  store_system_state_in_buffer(g_temperature, dig_sens_temp,g_lxd_value,  system_state_transmit, 17) ;
 80018a0:	2311      	movs	r3, #17
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	4b16      	ldr	r3, [pc, #88]	; (8001900 <en_measurements_and_responses+0x108>)
 80018a6:	4a10      	ldr	r2, [pc, #64]	; (80018e8 <en_measurements_and_responses+0xf0>)
 80018a8:	4912      	ldr	r1, [pc, #72]	; (80018f4 <en_measurements_and_responses+0xfc>)
 80018aa:	480d      	ldr	r0, [pc, #52]	; (80018e0 <en_measurements_and_responses+0xe8>)
 80018ac:	f7ff fea2 	bl	80015f4 <store_system_state_in_buffer>
	  if(g_transmit_system_state  == 1){
 80018b0:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <en_measurements_and_responses+0x100>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d107      	bne.n	80018c8 <en_measurements_and_responses+0xd0>
		  g_transmit_system_state = 0;
 80018b8:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <en_measurements_and_responses+0x100>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit_IT(&huart2, (uint8_t*)system_state_transmit, 16);
 80018be:	2210      	movs	r2, #16
 80018c0:	490f      	ldr	r1, [pc, #60]	; (8001900 <en_measurements_and_responses+0x108>)
 80018c2:	4810      	ldr	r0, [pc, #64]	; (8001904 <en_measurements_and_responses+0x10c>)
 80018c4:	f003 fac9 	bl	8004e5a <HAL_UART_Transmit_IT>
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000203 	.word	0x20000203
 80018d4:	20000236 	.word	0x20000236
 80018d8:	2000020c 	.word	0x2000020c
 80018dc:	200001d8 	.word	0x200001d8
 80018e0:	200001dc 	.word	0x200001dc
 80018e4:	200001ea 	.word	0x200001ea
 80018e8:	200001ec 	.word	0x200001ec
 80018ec:	200001e0 	.word	0x200001e0
 80018f0:	2000022e 	.word	0x2000022e
 80018f4:	20000230 	.word	0x20000230
 80018f8:	20000011 	.word	0x20000011
 80018fc:	40020400 	.word	0x40020400
 8001900:	20000210 	.word	0x20000210
 8001904:	2000017c 	.word	0x2000017c

08001908 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001908:	b5b0      	push	{r4, r5, r7, lr}
 800190a:	b098      	sub	sp, #96	; 0x60
 800190c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800190e:	f000 fe83 	bl	8002618 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001912:	f000 f8af 	bl	8001a74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001916:	f000 fa3b 	bl	8001d90 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800191a:	f000 fa0d 	bl	8001d38 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800191e:	f000 f913 	bl	8001b48 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001922:	f000 f94b 	bl	8001bbc <MX_TIM2_Init>
  MX_TIM3_Init();
 8001926:	f000 f9b9 	bl	8001c9c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(150);
 800192a:	2096      	movs	r0, #150	; 0x96
 800192c:	f000 fee6 	bl	80026fc <HAL_Delay>
  HAL_UART_Transmit_IT(&huart2, (uint8_t*)studentNum, 13) ;
 8001930:	220d      	movs	r2, #13
 8001932:	4944      	ldr	r1, [pc, #272]	; (8001a44 <main+0x13c>)
 8001934:	4844      	ldr	r0, [pc, #272]	; (8001a48 <main+0x140>)
 8001936:	f003 fa90 	bl	8004e5a <HAL_UART_Transmit_IT>

  HAL_UART_Receive_IT(&huart2, (uint8_t*)char_rcvd, 1) ;
 800193a:	2201      	movs	r2, #1
 800193c:	4943      	ldr	r1, [pc, #268]	; (8001a4c <main+0x144>)
 800193e:	4842      	ldr	r0, [pc, #264]	; (8001a48 <main+0x140>)
 8001940:	f003 fad0 	bl	8004ee4 <HAL_UART_Receive_IT>

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1)  ; // input to trigger interrupt - LMT01 sensor
 8001944:	2100      	movs	r1, #0
 8001946:	4842      	ldr	r0, [pc, #264]	; (8001a50 <main+0x148>)
 8001948:	f002 fbac 	bl	80040a4 <HAL_TIM_IC_Start_IT>

  g_time_passed = HAL_GetTick() ; //snapshot of time
 800194c:	f000 feca 	bl	80026e4 <HAL_GetTick>
 8001950:	4603      	mov	r3, r0
 8001952:	4a40      	ldr	r2, [pc, #256]	; (8001a54 <main+0x14c>)
 8001954:	6013      	str	r3, [r2, #0]

  //Write to LCD
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET) ;
 8001956:	2200      	movs	r2, #0
 8001958:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800195c:	483e      	ldr	r0, [pc, #248]	; (8001a58 <main+0x150>)
 800195e:	f001 fe23 	bl	80035a8 <HAL_GPIO_WritePin>
  Lcd_PortType ports[] = { GPIOB, GPIOA, GPIOA, GPIOC };
 8001962:	4b3e      	ldr	r3, [pc, #248]	; (8001a5c <main+0x154>)
 8001964:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001968:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800196a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Lcd_PinType pins[] = {GPIO_PIN_12, GPIO_PIN_11, GPIO_PIN_12, GPIO_PIN_6};
 800196e:	4a3c      	ldr	r2, [pc, #240]	; (8001a60 <main+0x158>)
 8001970:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001974:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001978:	e883 0003 	stmia.w	r3, {r0, r1}
  Lcd_HandleTypeDef lcd;
  // Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
  lcd = Lcd_create(ports, pins, GPIOB, GPIO_PIN_14, GPIOB, GPIO_PIN_2, LCD_4_BIT_MODE);
 800197c:	4638      	mov	r0, r7
 800197e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001982:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001986:	2300      	movs	r3, #0
 8001988:	9303      	str	r3, [sp, #12]
 800198a:	2304      	movs	r3, #4
 800198c:	9302      	str	r3, [sp, #8]
 800198e:	4b32      	ldr	r3, [pc, #200]	; (8001a58 <main+0x150>)
 8001990:	9301      	str	r3, [sp, #4]
 8001992:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	4b2f      	ldr	r3, [pc, #188]	; (8001a58 <main+0x150>)
 800199a:	f7ff f9e9 	bl	8000d70 <Lcd_create>
 800199e:	f107 041c 	add.w	r4, r7, #28
 80019a2:	463d      	mov	r5, r7
 80019a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019a8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80019ac:	e884 0003 	stmia.w	r4, {r0, r1}
  Lcd_cursor(&lcd, 0,3);
 80019b0:	f107 031c 	add.w	r3, r7, #28
 80019b4:	2203      	movs	r2, #3
 80019b6:	2100      	movs	r1, #0
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff fa65 	bl	8000e88 <Lcd_cursor>
  Lcd_string(&lcd, "Too SAUCY!");
 80019be:	f107 031c 	add.w	r3, r7, #28
 80019c2:	4928      	ldr	r1, [pc, #160]	; (8001a64 <main+0x15c>)
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff fa3f 	bl	8000e48 <Lcd_string>
  for ( int x = 1; x <= 10 ; x++ ){
 80019ca:	2301      	movs	r3, #1
 80019cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019ce:	e013      	b.n	80019f8 <main+0xf0>
	Lcd_cursor(&lcd, 1,7);
 80019d0:	f107 031c 	add.w	r3, r7, #28
 80019d4:	2207      	movs	r2, #7
 80019d6:	2101      	movs	r1, #1
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff fa55 	bl	8000e88 <Lcd_cursor>
	Lcd_int(&lcd, x);
 80019de:	f107 031c 	add.w	r3, r7, #28
 80019e2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff fa17 	bl	8000e18 <Lcd_int>
	HAL_Delay (1000);
 80019ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019ee:	f000 fe85 	bl	80026fc <HAL_Delay>
  for ( int x = 1; x <= 10 ; x++ ){
 80019f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019f4:	3301      	adds	r3, #1
 80019f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019fa:	2b0a      	cmp	r3, #10
 80019fc:	dde8      	ble.n	80019d0 <main+0xc8>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  system_state_update() ;
 80019fe:	f7ff fbf7 	bl	80011f0 <system_state_update>

	  //UR3: Evironment measure: measure Ta & measure Tb  (Put in Function)/Modularize
	  en_measurements_and_responses() ;
 8001a02:	f7ff fef9 	bl	80017f8 <en_measurements_and_responses>

	  //UR2: PV Module -(Put in Function)/Modularize
	  if(g_SP_measure == 1){
 8001a06:	4b18      	ldr	r3, [pc, #96]	; (8001a68 <main+0x160>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d110      	bne.n	8001a30 <main+0x128>
		  // ignore top button press and EN command while measuring
		  if(g_top_button_pressed ==1 || g_EN_config_command_rcvd ==1){
 8001a0e:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <main+0x164>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d003      	beq.n	8001a1e <main+0x116>
 8001a16:	4b16      	ldr	r3, [pc, #88]	; (8001a70 <main+0x168>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d105      	bne.n	8001a2a <main+0x122>
			  g_top_button_pressed = 0 ;
 8001a1e:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <main+0x164>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]
			  g_EN_config_command_rcvd = 0;
 8001a24:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <main+0x168>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	701a      	strb	r2, [r3, #0]
		  }
		  //Flash D2 LED
		  flash_led_d2() ;
 8001a2a:	f7ff fdab 	bl	8001584 <flash_led_d2>
 8001a2e:	e7e6      	b.n	80019fe <main+0xf6>
	  }

	  else if(g_SP_measure == 2){
 8001a30:	4b0d      	ldr	r3, [pc, #52]	; (8001a68 <main+0x160>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d1e2      	bne.n	80019fe <main+0xf6>
		  //set LED D2
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET) ;
 8001a38:	2201      	movs	r2, #1
 8001a3a:	2110      	movs	r1, #16
 8001a3c:	4806      	ldr	r0, [pc, #24]	; (8001a58 <main+0x150>)
 8001a3e:	f001 fdb3 	bl	80035a8 <HAL_GPIO_WritePin>
	  system_state_update() ;
 8001a42:	e7dc      	b.n	80019fe <main+0xf6>
 8001a44:	20000000 	.word	0x20000000
 8001a48:	2000017c 	.word	0x2000017c
 8001a4c:	20000010 	.word	0x20000010
 8001a50:	200000ec 	.word	0x200000ec
 8001a54:	20000204 	.word	0x20000204
 8001a58:	40020400 	.word	0x40020400
 8001a5c:	080066cc 	.word	0x080066cc
 8001a60:	080066dc 	.word	0x080066dc
 8001a64:	080066c0 	.word	0x080066c0
 8001a68:	2000020a 	.word	0x2000020a
 8001a6c:	20000235 	.word	0x20000235
 8001a70:	20000209 	.word	0x20000209

08001a74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b094      	sub	sp, #80	; 0x50
 8001a78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a7a:	f107 0320 	add.w	r3, r7, #32
 8001a7e:	2230      	movs	r2, #48	; 0x30
 8001a80:	2100      	movs	r1, #0
 8001a82:	4618      	mov	r0, r3
 8001a84:	f004 f982 	bl	8005d8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a88:	f107 030c 	add.w	r3, r7, #12
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a98:	2300      	movs	r3, #0
 8001a9a:	60bb      	str	r3, [r7, #8]
 8001a9c:	4b28      	ldr	r3, [pc, #160]	; (8001b40 <SystemClock_Config+0xcc>)
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa0:	4a27      	ldr	r2, [pc, #156]	; (8001b40 <SystemClock_Config+0xcc>)
 8001aa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa6:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa8:	4b25      	ldr	r3, [pc, #148]	; (8001b40 <SystemClock_Config+0xcc>)
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab0:	60bb      	str	r3, [r7, #8]
 8001ab2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	607b      	str	r3, [r7, #4]
 8001ab8:	4b22      	ldr	r3, [pc, #136]	; (8001b44 <SystemClock_Config+0xd0>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a21      	ldr	r2, [pc, #132]	; (8001b44 <SystemClock_Config+0xd0>)
 8001abe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ac2:	6013      	str	r3, [r2, #0]
 8001ac4:	4b1f      	ldr	r3, [pc, #124]	; (8001b44 <SystemClock_Config+0xd0>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001acc:	607b      	str	r3, [r7, #4]
 8001ace:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ad8:	2310      	movs	r3, #16
 8001ada:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001adc:	2302      	movs	r3, #2
 8001ade:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001ae4:	2310      	movs	r3, #16
 8001ae6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001ae8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001aec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001aee:	2304      	movs	r3, #4
 8001af0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001af2:	2304      	movs	r3, #4
 8001af4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001af6:	f107 0320 	add.w	r3, r7, #32
 8001afa:	4618      	mov	r0, r3
 8001afc:	f001 fd92 	bl	8003624 <HAL_RCC_OscConfig>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001b06:	f000 f9fb 	bl	8001f00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b0a:	230f      	movs	r3, #15
 8001b0c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b1a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b20:	f107 030c 	add.w	r3, r7, #12
 8001b24:	2102      	movs	r1, #2
 8001b26:	4618      	mov	r0, r3
 8001b28:	f001 fff4 	bl	8003b14 <HAL_RCC_ClockConfig>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001b32:	f000 f9e5 	bl	8001f00 <Error_Handler>
  }
}
 8001b36:	bf00      	nop
 8001b38:	3750      	adds	r7, #80	; 0x50
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40007000 	.word	0x40007000

08001b48 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001b4c:	4b18      	ldr	r3, [pc, #96]	; (8001bb0 <MX_ADC1_Init+0x68>)
 8001b4e:	4a19      	ldr	r2, [pc, #100]	; (8001bb4 <MX_ADC1_Init+0x6c>)
 8001b50:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b52:	4b17      	ldr	r3, [pc, #92]	; (8001bb0 <MX_ADC1_Init+0x68>)
 8001b54:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b58:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b5a:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <MX_ADC1_Init+0x68>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001b60:	4b13      	ldr	r3, [pc, #76]	; (8001bb0 <MX_ADC1_Init+0x68>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b66:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <MX_ADC1_Init+0x68>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b6c:	4b10      	ldr	r3, [pc, #64]	; (8001bb0 <MX_ADC1_Init+0x68>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b74:	4b0e      	ldr	r3, [pc, #56]	; (8001bb0 <MX_ADC1_Init+0x68>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b7a:	4b0d      	ldr	r3, [pc, #52]	; (8001bb0 <MX_ADC1_Init+0x68>)
 8001b7c:	4a0e      	ldr	r2, [pc, #56]	; (8001bb8 <MX_ADC1_Init+0x70>)
 8001b7e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b80:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <MX_ADC1_Init+0x68>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b86:	4b0a      	ldr	r3, [pc, #40]	; (8001bb0 <MX_ADC1_Init+0x68>)
 8001b88:	2201      	movs	r2, #1
 8001b8a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b8c:	4b08      	ldr	r3, [pc, #32]	; (8001bb0 <MX_ADC1_Init+0x68>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b94:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <MX_ADC1_Init+0x68>)
 8001b96:	2201      	movs	r2, #1
 8001b98:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b9a:	4805      	ldr	r0, [pc, #20]	; (8001bb0 <MX_ADC1_Init+0x68>)
 8001b9c:	f000 fdd2 	bl	8002744 <HAL_ADC_Init>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_ADC1_Init+0x62>
  {
    Error_Handler();
 8001ba6:	f000 f9ab 	bl	8001f00 <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	200000a4 	.word	0x200000a4
 8001bb4:	40012000 	.word	0x40012000
 8001bb8:	0f000001 	.word	0x0f000001

08001bbc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08a      	sub	sp, #40	; 0x28
 8001bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bc2:	f107 0318 	add.w	r3, r7, #24
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	605a      	str	r2, [r3, #4]
 8001bcc:	609a      	str	r2, [r3, #8]
 8001bce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bd0:	f107 0310 	add.w	r3, r7, #16
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001bda:	463b      	mov	r3, r7
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001be6:	4b2c      	ldr	r3, [pc, #176]	; (8001c98 <MX_TIM2_Init+0xdc>)
 8001be8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001bee:	4b2a      	ldr	r3, [pc, #168]	; (8001c98 <MX_TIM2_Init+0xdc>)
 8001bf0:	2253      	movs	r2, #83	; 0x53
 8001bf2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf4:	4b28      	ldr	r3, [pc, #160]	; (8001c98 <MX_TIM2_Init+0xdc>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001bfa:	4b27      	ldr	r3, [pc, #156]	; (8001c98 <MX_TIM2_Init+0xdc>)
 8001bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001c00:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c02:	4b25      	ldr	r3, [pc, #148]	; (8001c98 <MX_TIM2_Init+0xdc>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c08:	4b23      	ldr	r3, [pc, #140]	; (8001c98 <MX_TIM2_Init+0xdc>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c0e:	4822      	ldr	r0, [pc, #136]	; (8001c98 <MX_TIM2_Init+0xdc>)
 8001c10:	f002 f9a0 	bl	8003f54 <HAL_TIM_Base_Init>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001c1a:	f000 f971 	bl	8001f00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c22:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c24:	f107 0318 	add.w	r3, r7, #24
 8001c28:	4619      	mov	r1, r3
 8001c2a:	481b      	ldr	r0, [pc, #108]	; (8001c98 <MX_TIM2_Init+0xdc>)
 8001c2c:	f002 fcf8 	bl	8004620 <HAL_TIM_ConfigClockSource>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001c36:	f000 f963 	bl	8001f00 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001c3a:	4817      	ldr	r0, [pc, #92]	; (8001c98 <MX_TIM2_Init+0xdc>)
 8001c3c:	f002 f9d9 	bl	8003ff2 <HAL_TIM_IC_Init>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001c46:	f000 f95b 	bl	8001f00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c52:	f107 0310 	add.w	r3, r7, #16
 8001c56:	4619      	mov	r1, r3
 8001c58:	480f      	ldr	r0, [pc, #60]	; (8001c98 <MX_TIM2_Init+0xdc>)
 8001c5a:	f003 f82f 	bl	8004cbc <HAL_TIMEx_MasterConfigSynchronization>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001c64:	f000 f94c 	bl	8001f00 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001c70:	2300      	movs	r3, #0
 8001c72:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001c78:	463b      	mov	r3, r7
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4806      	ldr	r0, [pc, #24]	; (8001c98 <MX_TIM2_Init+0xdc>)
 8001c80:	f002 fc32 	bl	80044e8 <HAL_TIM_IC_ConfigChannel>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001c8a:	f000 f939 	bl	8001f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c8e:	bf00      	nop
 8001c90:	3728      	adds	r7, #40	; 0x28
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	200000ec 	.word	0x200000ec

08001c9c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ca2:	f107 0308 	add.w	r3, r7, #8
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	605a      	str	r2, [r3, #4]
 8001cac:	609a      	str	r2, [r3, #8]
 8001cae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cb0:	463b      	mov	r3, r7
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cb8:	4b1d      	ldr	r3, [pc, #116]	; (8001d30 <MX_TIM3_Init+0x94>)
 8001cba:	4a1e      	ldr	r2, [pc, #120]	; (8001d34 <MX_TIM3_Init+0x98>)
 8001cbc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001cbe:	4b1c      	ldr	r3, [pc, #112]	; (8001d30 <MX_TIM3_Init+0x94>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cc4:	4b1a      	ldr	r3, [pc, #104]	; (8001d30 <MX_TIM3_Init+0x94>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001cca:	4b19      	ldr	r3, [pc, #100]	; (8001d30 <MX_TIM3_Init+0x94>)
 8001ccc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cd0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cd2:	4b17      	ldr	r3, [pc, #92]	; (8001d30 <MX_TIM3_Init+0x94>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cd8:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <MX_TIM3_Init+0x94>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001cde:	4814      	ldr	r0, [pc, #80]	; (8001d30 <MX_TIM3_Init+0x94>)
 8001ce0:	f002 f938 	bl	8003f54 <HAL_TIM_Base_Init>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001cea:	f000 f909 	bl	8001f00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cf2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001cf4:	f107 0308 	add.w	r3, r7, #8
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	480d      	ldr	r0, [pc, #52]	; (8001d30 <MX_TIM3_Init+0x94>)
 8001cfc:	f002 fc90 	bl	8004620 <HAL_TIM_ConfigClockSource>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001d06:	f000 f8fb 	bl	8001f00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d12:	463b      	mov	r3, r7
 8001d14:	4619      	mov	r1, r3
 8001d16:	4806      	ldr	r0, [pc, #24]	; (8001d30 <MX_TIM3_Init+0x94>)
 8001d18:	f002 ffd0 	bl	8004cbc <HAL_TIMEx_MasterConfigSynchronization>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001d22:	f000 f8ed 	bl	8001f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d26:	bf00      	nop
 8001d28:	3718      	adds	r7, #24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20000134 	.word	0x20000134
 8001d34:	40000400 	.word	0x40000400

08001d38 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d3c:	4b12      	ldr	r3, [pc, #72]	; (8001d88 <MX_USART2_UART_Init+0x50>)
 8001d3e:	4a13      	ldr	r2, [pc, #76]	; (8001d8c <MX_USART2_UART_Init+0x54>)
 8001d40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d42:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <MX_USART2_UART_Init+0x50>)
 8001d44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001d4a:	4b0f      	ldr	r3, [pc, #60]	; (8001d88 <MX_USART2_UART_Init+0x50>)
 8001d4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d50:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d52:	4b0d      	ldr	r3, [pc, #52]	; (8001d88 <MX_USART2_UART_Init+0x50>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_ODD;
 8001d58:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <MX_USART2_UART_Init+0x50>)
 8001d5a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001d5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d60:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <MX_USART2_UART_Init+0x50>)
 8001d62:	220c      	movs	r2, #12
 8001d64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d66:	4b08      	ldr	r3, [pc, #32]	; (8001d88 <MX_USART2_UART_Init+0x50>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d6c:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <MX_USART2_UART_Init+0x50>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d72:	4805      	ldr	r0, [pc, #20]	; (8001d88 <MX_USART2_UART_Init+0x50>)
 8001d74:	f003 f824 	bl	8004dc0 <HAL_UART_Init>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8001d7e:	f000 f8bf 	bl	8001f00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	2000017c 	.word	0x2000017c
 8001d8c:	40004400 	.word	0x40004400

08001d90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08a      	sub	sp, #40	; 0x28
 8001d94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d96:	f107 0314 	add.w	r3, r7, #20
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	605a      	str	r2, [r3, #4]
 8001da0:	609a      	str	r2, [r3, #8]
 8001da2:	60da      	str	r2, [r3, #12]
 8001da4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	613b      	str	r3, [r7, #16]
 8001daa:	4b51      	ldr	r3, [pc, #324]	; (8001ef0 <MX_GPIO_Init+0x160>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	4a50      	ldr	r2, [pc, #320]	; (8001ef0 <MX_GPIO_Init+0x160>)
 8001db0:	f043 0304 	orr.w	r3, r3, #4
 8001db4:	6313      	str	r3, [r2, #48]	; 0x30
 8001db6:	4b4e      	ldr	r3, [pc, #312]	; (8001ef0 <MX_GPIO_Init+0x160>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	f003 0304 	and.w	r3, r3, #4
 8001dbe:	613b      	str	r3, [r7, #16]
 8001dc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	4b4a      	ldr	r3, [pc, #296]	; (8001ef0 <MX_GPIO_Init+0x160>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	4a49      	ldr	r2, [pc, #292]	; (8001ef0 <MX_GPIO_Init+0x160>)
 8001dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd2:	4b47      	ldr	r3, [pc, #284]	; (8001ef0 <MX_GPIO_Init+0x160>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	60bb      	str	r3, [r7, #8]
 8001de2:	4b43      	ldr	r3, [pc, #268]	; (8001ef0 <MX_GPIO_Init+0x160>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	4a42      	ldr	r2, [pc, #264]	; (8001ef0 <MX_GPIO_Init+0x160>)
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	6313      	str	r3, [r2, #48]	; 0x30
 8001dee:	4b40      	ldr	r3, [pc, #256]	; (8001ef0 <MX_GPIO_Init+0x160>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	607b      	str	r3, [r7, #4]
 8001dfe:	4b3c      	ldr	r3, [pc, #240]	; (8001ef0 <MX_GPIO_Init+0x160>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	4a3b      	ldr	r2, [pc, #236]	; (8001ef0 <MX_GPIO_Init+0x160>)
 8001e04:	f043 0302 	orr.w	r3, r3, #2
 8001e08:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0a:	4b39      	ldr	r3, [pc, #228]	; (8001ef0 <MX_GPIO_Init+0x160>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	607b      	str	r3, [r7, #4]
 8001e14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED_D5_Pin|DB5_Line_Pin|DB6_Line_Pin, GPIO_PIN_RESET);
 8001e16:	2200      	movs	r2, #0
 8001e18:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8001e1c:	4835      	ldr	r0, [pc, #212]	; (8001ef4 <MX_GPIO_Init+0x164>)
 8001e1e:	f001 fbc3 	bl	80035a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, E_Line_Pin|LED_D4_Pin|DB4_Line_Pin|RS_Line_Pin
 8001e22:	2200      	movs	r2, #0
 8001e24:	f24d 4134 	movw	r1, #54324	; 0xd434
 8001e28:	4833      	ldr	r0, [pc, #204]	; (8001ef8 <MX_GPIO_Init+0x168>)
 8001e2a:	f001 fbbd 	bl	80035a8 <HAL_GPIO_WritePin>
                          |R_W_Line_Pin|LED_D2_Pin|LED_D3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DB7_Line_GPIO_Port, DB7_Line_Pin, GPIO_PIN_RESET);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	2140      	movs	r1, #64	; 0x40
 8001e32:	4832      	ldr	r0, [pc, #200]	; (8001efc <MX_GPIO_Init+0x16c>)
 8001e34:	f001 fbb8 	bl	80035a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD2_Pin LED_D5_Pin DB5_Line_Pin DB6_Line_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED_D5_Pin|DB5_Line_Pin|DB6_Line_Pin;
 8001e38:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 8001e3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e46:	2300      	movs	r3, #0
 8001e48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4a:	f107 0314 	add.w	r3, r7, #20
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4828      	ldr	r0, [pc, #160]	; (8001ef4 <MX_GPIO_Init+0x164>)
 8001e52:	f001 fa0d 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e56:	23c0      	movs	r3, #192	; 0xc0
 8001e58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001e5a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001e5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e60:	2301      	movs	r3, #1
 8001e62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e64:	f107 0314 	add.w	r3, r7, #20
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4822      	ldr	r0, [pc, #136]	; (8001ef4 <MX_GPIO_Init+0x164>)
 8001e6c:	f001 fa00 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pins : E_Line_Pin LED_D4_Pin DB4_Line_Pin RS_Line_Pin
                           R_W_Line_Pin LED_D2_Pin LED_D3_Pin */
  GPIO_InitStruct.Pin = E_Line_Pin|LED_D4_Pin|DB4_Line_Pin|RS_Line_Pin
 8001e70:	f24d 4334 	movw	r3, #54324	; 0xd434
 8001e74:	617b      	str	r3, [r7, #20]
                          |R_W_Line_Pin|LED_D2_Pin|LED_D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e76:	2301      	movs	r3, #1
 8001e78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e82:	f107 0314 	add.w	r3, r7, #20
 8001e86:	4619      	mov	r1, r3
 8001e88:	481b      	ldr	r0, [pc, #108]	; (8001ef8 <MX_GPIO_Init+0x168>)
 8001e8a:	f001 f9f1 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_8|GPIO_PIN_9;
 8001e8e:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8001e92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001e94:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001e98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e9e:	f107 0314 	add.w	r3, r7, #20
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4814      	ldr	r0, [pc, #80]	; (8001ef8 <MX_GPIO_Init+0x168>)
 8001ea6:	f001 f9e3 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pin : DB7_Line_Pin */
  GPIO_InitStruct.Pin = DB7_Line_Pin;
 8001eaa:	2340      	movs	r3, #64	; 0x40
 8001eac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DB7_Line_GPIO_Port, &GPIO_InitStruct);
 8001eba:	f107 0314 	add.w	r3, r7, #20
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	480e      	ldr	r0, [pc, #56]	; (8001efc <MX_GPIO_Init+0x16c>)
 8001ec2:	f001 f9d5 	bl	8003270 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	2100      	movs	r1, #0
 8001eca:	2017      	movs	r0, #23
 8001ecc:	f001 f907 	bl	80030de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001ed0:	2017      	movs	r0, #23
 8001ed2:	f001 f920 	bl	8003116 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	2100      	movs	r1, #0
 8001eda:	2028      	movs	r0, #40	; 0x28
 8001edc:	f001 f8ff 	bl	80030de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ee0:	2028      	movs	r0, #40	; 0x28
 8001ee2:	f001 f918 	bl	8003116 <HAL_NVIC_EnableIRQ>

}
 8001ee6:	bf00      	nop
 8001ee8:	3728      	adds	r7, #40	; 0x28
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	40020000 	.word	0x40020000
 8001ef8:	40020400 	.word	0x40020400
 8001efc:	40020800 	.word	0x40020800

08001f00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f04:	b672      	cpsid	i
}
 8001f06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f08:	e7fe      	b.n	8001f08 <Error_Handler+0x8>
	...

08001f0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	607b      	str	r3, [r7, #4]
 8001f16:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <HAL_MspInit+0x4c>)
 8001f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1a:	4a0f      	ldr	r2, [pc, #60]	; (8001f58 <HAL_MspInit+0x4c>)
 8001f1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f20:	6453      	str	r3, [r2, #68]	; 0x44
 8001f22:	4b0d      	ldr	r3, [pc, #52]	; (8001f58 <HAL_MspInit+0x4c>)
 8001f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f2a:	607b      	str	r3, [r7, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	603b      	str	r3, [r7, #0]
 8001f32:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <HAL_MspInit+0x4c>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	4a08      	ldr	r2, [pc, #32]	; (8001f58 <HAL_MspInit+0x4c>)
 8001f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f3e:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <HAL_MspInit+0x4c>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f46:	603b      	str	r3, [r7, #0]
 8001f48:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f4a:	2007      	movs	r0, #7
 8001f4c:	f001 f8bc 	bl	80030c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f50:	bf00      	nop
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40023800 	.word	0x40023800

08001f5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b08c      	sub	sp, #48	; 0x30
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f64:	f107 031c 	add.w	r3, r7, #28
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	605a      	str	r2, [r3, #4]
 8001f6e:	609a      	str	r2, [r3, #8]
 8001f70:	60da      	str	r2, [r3, #12]
 8001f72:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a31      	ldr	r2, [pc, #196]	; (8002040 <HAL_ADC_MspInit+0xe4>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d15b      	bne.n	8002036 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61bb      	str	r3, [r7, #24]
 8001f82:	4b30      	ldr	r3, [pc, #192]	; (8002044 <HAL_ADC_MspInit+0xe8>)
 8001f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f86:	4a2f      	ldr	r2, [pc, #188]	; (8002044 <HAL_ADC_MspInit+0xe8>)
 8001f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f8e:	4b2d      	ldr	r3, [pc, #180]	; (8002044 <HAL_ADC_MspInit+0xe8>)
 8001f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f96:	61bb      	str	r3, [r7, #24]
 8001f98:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	617b      	str	r3, [r7, #20]
 8001f9e:	4b29      	ldr	r3, [pc, #164]	; (8002044 <HAL_ADC_MspInit+0xe8>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	4a28      	ldr	r2, [pc, #160]	; (8002044 <HAL_ADC_MspInit+0xe8>)
 8001fa4:	f043 0301 	orr.w	r3, r3, #1
 8001fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001faa:	4b26      	ldr	r3, [pc, #152]	; (8002044 <HAL_ADC_MspInit+0xe8>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	617b      	str	r3, [r7, #20]
 8001fb4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	613b      	str	r3, [r7, #16]
 8001fba:	4b22      	ldr	r3, [pc, #136]	; (8002044 <HAL_ADC_MspInit+0xe8>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	4a21      	ldr	r2, [pc, #132]	; (8002044 <HAL_ADC_MspInit+0xe8>)
 8001fc0:	f043 0304 	orr.w	r3, r3, #4
 8001fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc6:	4b1f      	ldr	r3, [pc, #124]	; (8002044 <HAL_ADC_MspInit+0xe8>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	f003 0304 	and.w	r3, r3, #4
 8001fce:	613b      	str	r3, [r7, #16]
 8001fd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	4b1b      	ldr	r3, [pc, #108]	; (8002044 <HAL_ADC_MspInit+0xe8>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	4a1a      	ldr	r2, [pc, #104]	; (8002044 <HAL_ADC_MspInit+0xe8>)
 8001fdc:	f043 0302 	orr.w	r3, r3, #2
 8001fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe2:	4b18      	ldr	r3, [pc, #96]	; (8002044 <HAL_ADC_MspInit+0xe8>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ffa:	f107 031c 	add.w	r3, r7, #28
 8001ffe:	4619      	mov	r1, r3
 8002000:	4811      	ldr	r0, [pc, #68]	; (8002048 <HAL_ADC_MspInit+0xec>)
 8002002:	f001 f935 	bl	8003270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002006:	2330      	movs	r3, #48	; 0x30
 8002008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800200a:	2303      	movs	r3, #3
 800200c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200e:	2300      	movs	r3, #0
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002012:	f107 031c 	add.w	r3, r7, #28
 8002016:	4619      	mov	r1, r3
 8002018:	480c      	ldr	r0, [pc, #48]	; (800204c <HAL_ADC_MspInit+0xf0>)
 800201a:	f001 f929 	bl	8003270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800201e:	2302      	movs	r3, #2
 8002020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002022:	2303      	movs	r3, #3
 8002024:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002026:	2300      	movs	r3, #0
 8002028:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800202a:	f107 031c 	add.w	r3, r7, #28
 800202e:	4619      	mov	r1, r3
 8002030:	4807      	ldr	r0, [pc, #28]	; (8002050 <HAL_ADC_MspInit+0xf4>)
 8002032:	f001 f91d 	bl	8003270 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002036:	bf00      	nop
 8002038:	3730      	adds	r7, #48	; 0x30
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40012000 	.word	0x40012000
 8002044:	40023800 	.word	0x40023800
 8002048:	40020000 	.word	0x40020000
 800204c:	40020800 	.word	0x40020800
 8002050:	40020400 	.word	0x40020400

08002054 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b08a      	sub	sp, #40	; 0x28
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205c:	f107 0314 	add.w	r3, r7, #20
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002074:	d135      	bne.n	80020e2 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	613b      	str	r3, [r7, #16]
 800207a:	4b25      	ldr	r3, [pc, #148]	; (8002110 <HAL_TIM_Base_MspInit+0xbc>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	4a24      	ldr	r2, [pc, #144]	; (8002110 <HAL_TIM_Base_MspInit+0xbc>)
 8002080:	f043 0301 	orr.w	r3, r3, #1
 8002084:	6413      	str	r3, [r2, #64]	; 0x40
 8002086:	4b22      	ldr	r3, [pc, #136]	; (8002110 <HAL_TIM_Base_MspInit+0xbc>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	613b      	str	r3, [r7, #16]
 8002090:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	4b1e      	ldr	r3, [pc, #120]	; (8002110 <HAL_TIM_Base_MspInit+0xbc>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	4a1d      	ldr	r2, [pc, #116]	; (8002110 <HAL_TIM_Base_MspInit+0xbc>)
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	6313      	str	r3, [r2, #48]	; 0x30
 80020a2:	4b1b      	ldr	r3, [pc, #108]	; (8002110 <HAL_TIM_Base_MspInit+0xbc>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80020ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b4:	2302      	movs	r3, #2
 80020b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020bc:	2300      	movs	r3, #0
 80020be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020c0:	2301      	movs	r3, #1
 80020c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c4:	f107 0314 	add.w	r3, r7, #20
 80020c8:	4619      	mov	r1, r3
 80020ca:	4812      	ldr	r0, [pc, #72]	; (8002114 <HAL_TIM_Base_MspInit+0xc0>)
 80020cc:	f001 f8d0 	bl	8003270 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80020d0:	2200      	movs	r2, #0
 80020d2:	2100      	movs	r1, #0
 80020d4:	201c      	movs	r0, #28
 80020d6:	f001 f802 	bl	80030de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020da:	201c      	movs	r0, #28
 80020dc:	f001 f81b 	bl	8003116 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80020e0:	e012      	b.n	8002108 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM3)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a0c      	ldr	r2, [pc, #48]	; (8002118 <HAL_TIM_Base_MspInit+0xc4>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d10d      	bne.n	8002108 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020ec:	2300      	movs	r3, #0
 80020ee:	60bb      	str	r3, [r7, #8]
 80020f0:	4b07      	ldr	r3, [pc, #28]	; (8002110 <HAL_TIM_Base_MspInit+0xbc>)
 80020f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f4:	4a06      	ldr	r2, [pc, #24]	; (8002110 <HAL_TIM_Base_MspInit+0xbc>)
 80020f6:	f043 0302 	orr.w	r3, r3, #2
 80020fa:	6413      	str	r3, [r2, #64]	; 0x40
 80020fc:	4b04      	ldr	r3, [pc, #16]	; (8002110 <HAL_TIM_Base_MspInit+0xbc>)
 80020fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	60bb      	str	r3, [r7, #8]
 8002106:	68bb      	ldr	r3, [r7, #8]
}
 8002108:	bf00      	nop
 800210a:	3728      	adds	r7, #40	; 0x28
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40023800 	.word	0x40023800
 8002114:	40020000 	.word	0x40020000
 8002118:	40000400 	.word	0x40000400

0800211c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b08a      	sub	sp, #40	; 0x28
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002124:	f107 0314 	add.w	r3, r7, #20
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	605a      	str	r2, [r3, #4]
 800212e:	609a      	str	r2, [r3, #8]
 8002130:	60da      	str	r2, [r3, #12]
 8002132:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a1d      	ldr	r2, [pc, #116]	; (80021b0 <HAL_UART_MspInit+0x94>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d133      	bne.n	80021a6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	613b      	str	r3, [r7, #16]
 8002142:	4b1c      	ldr	r3, [pc, #112]	; (80021b4 <HAL_UART_MspInit+0x98>)
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	4a1b      	ldr	r2, [pc, #108]	; (80021b4 <HAL_UART_MspInit+0x98>)
 8002148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800214c:	6413      	str	r3, [r2, #64]	; 0x40
 800214e:	4b19      	ldr	r3, [pc, #100]	; (80021b4 <HAL_UART_MspInit+0x98>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002156:	613b      	str	r3, [r7, #16]
 8002158:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	60fb      	str	r3, [r7, #12]
 800215e:	4b15      	ldr	r3, [pc, #84]	; (80021b4 <HAL_UART_MspInit+0x98>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	4a14      	ldr	r2, [pc, #80]	; (80021b4 <HAL_UART_MspInit+0x98>)
 8002164:	f043 0301 	orr.w	r3, r3, #1
 8002168:	6313      	str	r3, [r2, #48]	; 0x30
 800216a:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <HAL_UART_MspInit+0x98>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002176:	230c      	movs	r3, #12
 8002178:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217a:	2302      	movs	r3, #2
 800217c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217e:	2300      	movs	r3, #0
 8002180:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002182:	2303      	movs	r3, #3
 8002184:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002186:	2307      	movs	r3, #7
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800218a:	f107 0314 	add.w	r3, r7, #20
 800218e:	4619      	mov	r1, r3
 8002190:	4809      	ldr	r0, [pc, #36]	; (80021b8 <HAL_UART_MspInit+0x9c>)
 8002192:	f001 f86d 	bl	8003270 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002196:	2200      	movs	r2, #0
 8002198:	2100      	movs	r1, #0
 800219a:	2026      	movs	r0, #38	; 0x26
 800219c:	f000 ff9f 	bl	80030de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80021a0:	2026      	movs	r0, #38	; 0x26
 80021a2:	f000 ffb8 	bl	8003116 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80021a6:	bf00      	nop
 80021a8:	3728      	adds	r7, #40	; 0x28
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40004400 	.word	0x40004400
 80021b4:	40023800 	.word	0x40023800
 80021b8:	40020000 	.word	0x40020000

080021bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021c0:	e7fe      	b.n	80021c0 <NMI_Handler+0x4>

080021c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021c2:	b480      	push	{r7}
 80021c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021c6:	e7fe      	b.n	80021c6 <HardFault_Handler+0x4>

080021c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021cc:	e7fe      	b.n	80021cc <MemManage_Handler+0x4>

080021ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021ce:	b480      	push	{r7}
 80021d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021d2:	e7fe      	b.n	80021d2 <BusFault_Handler+0x4>

080021d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021d8:	e7fe      	b.n	80021d8 <UsageFault_Handler+0x4>

080021da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021da:	b480      	push	{r7}
 80021dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021de:	bf00      	nop
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021ec:	bf00      	nop
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021f6:	b480      	push	{r7}
 80021f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021fa:	bf00      	nop
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002208:	f000 fa58 	bl	80026bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800220c:	bf00      	nop
 800220e:	bd80      	pop	{r7, pc}

08002210 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_8) != RESET){
 8002214:	4b8a      	ldr	r3, [pc, #552]	; (8002440 <EXTI9_5_IRQHandler+0x230>)
 8002216:	695b      	ldr	r3, [r3, #20]
 8002218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221c:	2b00      	cmp	r3, #0
 800221e:	d039      	beq.n	8002294 <EXTI9_5_IRQHandler+0x84>


		if(HAL_GetTick() - ticks_pressed >= 20){
 8002220:	f000 fa60 	bl	80026e4 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	4b87      	ldr	r3, [pc, #540]	; (8002444 <EXTI9_5_IRQHandler+0x234>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b13      	cmp	r3, #19
 800222e:	d92c      	bls.n	800228a <EXTI9_5_IRQHandler+0x7a>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == 0){
 8002230:	4b85      	ldr	r3, [pc, #532]	; (8002448 <EXTI9_5_IRQHandler+0x238>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b01      	cmp	r3, #1
 8002238:	d112      	bne.n	8002260 <EXTI9_5_IRQHandler+0x50>
 800223a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800223e:	4883      	ldr	r0, [pc, #524]	; (800244c <EXTI9_5_IRQHandler+0x23c>)
 8002240:	f001 f99a 	bl	8003578 <HAL_GPIO_ReadPin>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10a      	bne.n	8002260 <EXTI9_5_IRQHandler+0x50>
				button_state =0 ; // stable low reached
 800224a:	4b7f      	ldr	r3, [pc, #508]	; (8002448 <EXTI9_5_IRQHandler+0x238>)
 800224c:	2200      	movs	r2, #0
 800224e:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 8002250:	f000 fa48 	bl	80026e4 <HAL_GetTick>
 8002254:	4603      	mov	r3, r0
 8002256:	4a7b      	ldr	r2, [pc, #492]	; (8002444 <EXTI9_5_IRQHandler+0x234>)
 8002258:	6013      	str	r3, [r2, #0]

				g_left_button_pressed =1;
 800225a:	4b7d      	ldr	r3, [pc, #500]	; (8002450 <EXTI9_5_IRQHandler+0x240>)
 800225c:	2201      	movs	r2, #1
 800225e:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOB ,GPIO_PIN_8) == 1 ){
 8002260:	4b79      	ldr	r3, [pc, #484]	; (8002448 <EXTI9_5_IRQHandler+0x238>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10f      	bne.n	800228a <EXTI9_5_IRQHandler+0x7a>
 800226a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800226e:	4877      	ldr	r0, [pc, #476]	; (800244c <EXTI9_5_IRQHandler+0x23c>)
 8002270:	f001 f982 	bl	8003578 <HAL_GPIO_ReadPin>
 8002274:	4603      	mov	r3, r0
 8002276:	2b01      	cmp	r3, #1
 8002278:	d107      	bne.n	800228a <EXTI9_5_IRQHandler+0x7a>
				ticks_pressed = HAL_GetTick() ;
 800227a:	f000 fa33 	bl	80026e4 <HAL_GetTick>
 800227e:	4603      	mov	r3, r0
 8002280:	4a70      	ldr	r2, [pc, #448]	; (8002444 <EXTI9_5_IRQHandler+0x234>)
 8002282:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 8002284:	4b70      	ldr	r3, [pc, #448]	; (8002448 <EXTI9_5_IRQHandler+0x238>)
 8002286:	2201      	movs	r2, #1
 8002288:	701a      	strb	r2, [r3, #0]

			}
		}
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8) ;
 800228a:	4b6d      	ldr	r3, [pc, #436]	; (8002440 <EXTI9_5_IRQHandler+0x230>)
 800228c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002290:	615a      	str	r2, [r3, #20]
 8002292:	e0c5      	b.n	8002420 <EXTI9_5_IRQHandler+0x210>
	}

	else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_9) != RESET){
 8002294:	4b6a      	ldr	r3, [pc, #424]	; (8002440 <EXTI9_5_IRQHandler+0x230>)
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800229c:	2b00      	cmp	r3, #0
 800229e:	d039      	beq.n	8002314 <EXTI9_5_IRQHandler+0x104>



		if(HAL_GetTick() - ticks_pressed >= 20){
 80022a0:	f000 fa20 	bl	80026e4 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	4b67      	ldr	r3, [pc, #412]	; (8002444 <EXTI9_5_IRQHandler+0x234>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b13      	cmp	r3, #19
 80022ae:	d92c      	bls.n	800230a <EXTI9_5_IRQHandler+0xfa>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0){
 80022b0:	4b65      	ldr	r3, [pc, #404]	; (8002448 <EXTI9_5_IRQHandler+0x238>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d112      	bne.n	80022e0 <EXTI9_5_IRQHandler+0xd0>
 80022ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022be:	4863      	ldr	r0, [pc, #396]	; (800244c <EXTI9_5_IRQHandler+0x23c>)
 80022c0:	f001 f95a 	bl	8003578 <HAL_GPIO_ReadPin>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10a      	bne.n	80022e0 <EXTI9_5_IRQHandler+0xd0>
				button_state =0 ; // stable low reached
 80022ca:	4b5f      	ldr	r3, [pc, #380]	; (8002448 <EXTI9_5_IRQHandler+0x238>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 80022d0:	f000 fa08 	bl	80026e4 <HAL_GetTick>
 80022d4:	4603      	mov	r3, r0
 80022d6:	4a5b      	ldr	r2, [pc, #364]	; (8002444 <EXTI9_5_IRQHandler+0x234>)
 80022d8:	6013      	str	r3, [r2, #0]

				g_top_button_pressed = 1 ;
 80022da:	4b5e      	ldr	r3, [pc, #376]	; (8002454 <EXTI9_5_IRQHandler+0x244>)
 80022dc:	2201      	movs	r2, #1
 80022de:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOB ,GPIO_PIN_9) == 1 ){
 80022e0:	4b59      	ldr	r3, [pc, #356]	; (8002448 <EXTI9_5_IRQHandler+0x238>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10f      	bne.n	800230a <EXTI9_5_IRQHandler+0xfa>
 80022ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022ee:	4857      	ldr	r0, [pc, #348]	; (800244c <EXTI9_5_IRQHandler+0x23c>)
 80022f0:	f001 f942 	bl	8003578 <HAL_GPIO_ReadPin>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d107      	bne.n	800230a <EXTI9_5_IRQHandler+0xfa>
				ticks_pressed = HAL_GetTick() ;
 80022fa:	f000 f9f3 	bl	80026e4 <HAL_GetTick>
 80022fe:	4603      	mov	r3, r0
 8002300:	4a50      	ldr	r2, [pc, #320]	; (8002444 <EXTI9_5_IRQHandler+0x234>)
 8002302:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 8002304:	4b50      	ldr	r3, [pc, #320]	; (8002448 <EXTI9_5_IRQHandler+0x238>)
 8002306:	2201      	movs	r2, #1
 8002308:	701a      	strb	r2, [r3, #0]

			}
		}

		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_9) ;
 800230a:	4b4d      	ldr	r3, [pc, #308]	; (8002440 <EXTI9_5_IRQHandler+0x230>)
 800230c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002310:	615a      	str	r2, [r3, #20]
 8002312:	e085      	b.n	8002420 <EXTI9_5_IRQHandler+0x210>

	}

	else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_6) != RESET){
 8002314:	4b4a      	ldr	r3, [pc, #296]	; (8002440 <EXTI9_5_IRQHandler+0x230>)
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800231c:	2b00      	cmp	r3, #0
 800231e:	d036      	beq.n	800238e <EXTI9_5_IRQHandler+0x17e>



		if(HAL_GetTick() - ticks_pressed >= 20){
 8002320:	f000 f9e0 	bl	80026e4 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	4b47      	ldr	r3, [pc, #284]	; (8002444 <EXTI9_5_IRQHandler+0x234>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b13      	cmp	r3, #19
 800232e:	d92a      	bls.n	8002386 <EXTI9_5_IRQHandler+0x176>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 0){
 8002330:	4b45      	ldr	r3, [pc, #276]	; (8002448 <EXTI9_5_IRQHandler+0x238>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b01      	cmp	r3, #1
 8002338:	d111      	bne.n	800235e <EXTI9_5_IRQHandler+0x14e>
 800233a:	2140      	movs	r1, #64	; 0x40
 800233c:	4846      	ldr	r0, [pc, #280]	; (8002458 <EXTI9_5_IRQHandler+0x248>)
 800233e:	f001 f91b 	bl	8003578 <HAL_GPIO_ReadPin>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d10a      	bne.n	800235e <EXTI9_5_IRQHandler+0x14e>
				button_state =0 ; // stable low reached
 8002348:	4b3f      	ldr	r3, [pc, #252]	; (8002448 <EXTI9_5_IRQHandler+0x238>)
 800234a:	2200      	movs	r2, #0
 800234c:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 800234e:	f000 f9c9 	bl	80026e4 <HAL_GetTick>
 8002352:	4603      	mov	r3, r0
 8002354:	4a3b      	ldr	r2, [pc, #236]	; (8002444 <EXTI9_5_IRQHandler+0x234>)
 8002356:	6013      	str	r3, [r2, #0]

				g_middle_button_pressed =1 ;
 8002358:	4b40      	ldr	r3, [pc, #256]	; (800245c <EXTI9_5_IRQHandler+0x24c>)
 800235a:	2201      	movs	r2, #1
 800235c:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOA ,GPIO_PIN_6) == 1 ){
 800235e:	4b3a      	ldr	r3, [pc, #232]	; (8002448 <EXTI9_5_IRQHandler+0x238>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b00      	cmp	r3, #0
 8002366:	d10e      	bne.n	8002386 <EXTI9_5_IRQHandler+0x176>
 8002368:	2140      	movs	r1, #64	; 0x40
 800236a:	483b      	ldr	r0, [pc, #236]	; (8002458 <EXTI9_5_IRQHandler+0x248>)
 800236c:	f001 f904 	bl	8003578 <HAL_GPIO_ReadPin>
 8002370:	4603      	mov	r3, r0
 8002372:	2b01      	cmp	r3, #1
 8002374:	d107      	bne.n	8002386 <EXTI9_5_IRQHandler+0x176>
				ticks_pressed = HAL_GetTick() ;
 8002376:	f000 f9b5 	bl	80026e4 <HAL_GetTick>
 800237a:	4603      	mov	r3, r0
 800237c:	4a31      	ldr	r2, [pc, #196]	; (8002444 <EXTI9_5_IRQHandler+0x234>)
 800237e:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 8002380:	4b31      	ldr	r3, [pc, #196]	; (8002448 <EXTI9_5_IRQHandler+0x238>)
 8002382:	2201      	movs	r2, #1
 8002384:	701a      	strb	r2, [r3, #0]

			}
		}


		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6) ;
 8002386:	4b2e      	ldr	r3, [pc, #184]	; (8002440 <EXTI9_5_IRQHandler+0x230>)
 8002388:	2240      	movs	r2, #64	; 0x40
 800238a:	615a      	str	r2, [r3, #20]
 800238c:	e048      	b.n	8002420 <EXTI9_5_IRQHandler+0x210>

	}

	else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET){
 800238e:	4b2c      	ldr	r3, [pc, #176]	; (8002440 <EXTI9_5_IRQHandler+0x230>)
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002396:	2b00      	cmp	r3, #0
 8002398:	d036      	beq.n	8002408 <EXTI9_5_IRQHandler+0x1f8>




		if(HAL_GetTick() - ticks_pressed >= 20){
 800239a:	f000 f9a3 	bl	80026e4 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	4b28      	ldr	r3, [pc, #160]	; (8002444 <EXTI9_5_IRQHandler+0x234>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b13      	cmp	r3, #19
 80023a8:	d92a      	bls.n	8002400 <EXTI9_5_IRQHandler+0x1f0>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 0){
 80023aa:	4b27      	ldr	r3, [pc, #156]	; (8002448 <EXTI9_5_IRQHandler+0x238>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d111      	bne.n	80023d8 <EXTI9_5_IRQHandler+0x1c8>
 80023b4:	2180      	movs	r1, #128	; 0x80
 80023b6:	4828      	ldr	r0, [pc, #160]	; (8002458 <EXTI9_5_IRQHandler+0x248>)
 80023b8:	f001 f8de 	bl	8003578 <HAL_GPIO_ReadPin>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10a      	bne.n	80023d8 <EXTI9_5_IRQHandler+0x1c8>
				button_state =0 ; // stable low reached
 80023c2:	4b21      	ldr	r3, [pc, #132]	; (8002448 <EXTI9_5_IRQHandler+0x238>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 80023c8:	f000 f98c 	bl	80026e4 <HAL_GetTick>
 80023cc:	4603      	mov	r3, r0
 80023ce:	4a1d      	ldr	r2, [pc, #116]	; (8002444 <EXTI9_5_IRQHandler+0x234>)
 80023d0:	6013      	str	r3, [r2, #0]

				g_right_button_pressed = 1 ;
 80023d2:	4b23      	ldr	r3, [pc, #140]	; (8002460 <EXTI9_5_IRQHandler+0x250>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOA ,GPIO_PIN_7) == 1 ){
 80023d8:	4b1b      	ldr	r3, [pc, #108]	; (8002448 <EXTI9_5_IRQHandler+0x238>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10e      	bne.n	8002400 <EXTI9_5_IRQHandler+0x1f0>
 80023e2:	2180      	movs	r1, #128	; 0x80
 80023e4:	481c      	ldr	r0, [pc, #112]	; (8002458 <EXTI9_5_IRQHandler+0x248>)
 80023e6:	f001 f8c7 	bl	8003578 <HAL_GPIO_ReadPin>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d107      	bne.n	8002400 <EXTI9_5_IRQHandler+0x1f0>
				ticks_pressed = HAL_GetTick() ;
 80023f0:	f000 f978 	bl	80026e4 <HAL_GetTick>
 80023f4:	4603      	mov	r3, r0
 80023f6:	4a13      	ldr	r2, [pc, #76]	; (8002444 <EXTI9_5_IRQHandler+0x234>)
 80023f8:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 80023fa:	4b13      	ldr	r3, [pc, #76]	; (8002448 <EXTI9_5_IRQHandler+0x238>)
 80023fc:	2201      	movs	r2, #1
 80023fe:	701a      	strb	r2, [r3, #0]

			}
		}
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7) ;
 8002400:	4b0f      	ldr	r3, [pc, #60]	; (8002440 <EXTI9_5_IRQHandler+0x230>)
 8002402:	2280      	movs	r2, #128	; 0x80
 8002404:	615a      	str	r2, [r3, #20]
 8002406:	e00b      	b.n	8002420 <EXTI9_5_IRQHandler+0x210>
	}

	else{

		if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET){
 8002408:	4b0d      	ldr	r3, [pc, #52]	; (8002440 <EXTI9_5_IRQHandler+0x230>)
 800240a:	695b      	ldr	r3, [r3, #20]
 800240c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002410:	2b00      	cmp	r3, #0
 8002412:	d005      	beq.n	8002420 <EXTI9_5_IRQHandler+0x210>

			g_bottom_button_pressed = 1 ;
 8002414:	4b13      	ldr	r3, [pc, #76]	; (8002464 <EXTI9_5_IRQHandler+0x254>)
 8002416:	2201      	movs	r2, #1
 8002418:	701a      	strb	r2, [r3, #0]

			__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7) ;
 800241a:	4b09      	ldr	r3, [pc, #36]	; (8002440 <EXTI9_5_IRQHandler+0x230>)
 800241c:	2280      	movs	r2, #128	; 0x80
 800241e:	615a      	str	r2, [r3, #20]
		}
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002420:	2040      	movs	r0, #64	; 0x40
 8002422:	f001 f8db 	bl	80035dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002426:	2080      	movs	r0, #128	; 0x80
 8002428:	f001 f8d8 	bl	80035dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800242c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002430:	f001 f8d4 	bl	80035dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002434:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002438:	f001 f8d0 	bl	80035dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800243c:	bf00      	nop
 800243e:	bd80      	pop	{r7, pc}
 8002440:	40013c00 	.word	0x40013c00
 8002444:	20000238 	.word	0x20000238
 8002448:	20000012 	.word	0x20000012
 800244c:	40020400 	.word	0x40020400
 8002450:	20000233 	.word	0x20000233
 8002454:	20000235 	.word	0x20000235
 8002458:	40020000 	.word	0x40020000
 800245c:	20000237 	.word	0x20000237
 8002460:	20000234 	.word	0x20000234
 8002464:	20000236 	.word	0x20000236

08002468 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800246c:	4802      	ldr	r0, [pc, #8]	; (8002478 <TIM2_IRQHandler+0x10>)
 800246e:	f001 ff33 	bl	80042d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	200000ec 	.word	0x200000ec

0800247c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002480:	4802      	ldr	r0, [pc, #8]	; (800248c <USART2_IRQHandler+0x10>)
 8002482:	f002 fd5f 	bl	8004f44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	2000017c 	.word	0x2000017c

08002490 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */


	if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_13) != RESET){
 8002494:	4b22      	ldr	r3, [pc, #136]	; (8002520 <EXTI15_10_IRQHandler+0x90>)
 8002496:	695b      	ldr	r3, [r3, #20]
 8002498:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d038      	beq.n	8002512 <EXTI15_10_IRQHandler+0x82>

		if(HAL_GetTick() - ticks_pressed >= 20){
 80024a0:	f000 f920 	bl	80026e4 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	4b1f      	ldr	r3, [pc, #124]	; (8002524 <EXTI15_10_IRQHandler+0x94>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b13      	cmp	r3, #19
 80024ae:	d92c      	bls.n	800250a <EXTI15_10_IRQHandler+0x7a>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 0){
 80024b0:	4b1d      	ldr	r3, [pc, #116]	; (8002528 <EXTI15_10_IRQHandler+0x98>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d112      	bne.n	80024e0 <EXTI15_10_IRQHandler+0x50>
 80024ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024be:	481b      	ldr	r0, [pc, #108]	; (800252c <EXTI15_10_IRQHandler+0x9c>)
 80024c0:	f001 f85a 	bl	8003578 <HAL_GPIO_ReadPin>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10a      	bne.n	80024e0 <EXTI15_10_IRQHandler+0x50>
				button_state =0 ; // stable low reached
 80024ca:	4b17      	ldr	r3, [pc, #92]	; (8002528 <EXTI15_10_IRQHandler+0x98>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 80024d0:	f000 f908 	bl	80026e4 <HAL_GetTick>
 80024d4:	4603      	mov	r3, r0
 80024d6:	4a13      	ldr	r2, [pc, #76]	; (8002524 <EXTI15_10_IRQHandler+0x94>)
 80024d8:	6013      	str	r3, [r2, #0]

				g_bottom_button_pressed = 1 ;
 80024da:	4b15      	ldr	r3, [pc, #84]	; (8002530 <EXTI15_10_IRQHandler+0xa0>)
 80024dc:	2201      	movs	r2, #1
 80024de:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOB ,GPIO_PIN_13) == 1 ){
 80024e0:	4b11      	ldr	r3, [pc, #68]	; (8002528 <EXTI15_10_IRQHandler+0x98>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10f      	bne.n	800250a <EXTI15_10_IRQHandler+0x7a>
 80024ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024ee:	480f      	ldr	r0, [pc, #60]	; (800252c <EXTI15_10_IRQHandler+0x9c>)
 80024f0:	f001 f842 	bl	8003578 <HAL_GPIO_ReadPin>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d107      	bne.n	800250a <EXTI15_10_IRQHandler+0x7a>
				ticks_pressed = HAL_GetTick() ;
 80024fa:	f000 f8f3 	bl	80026e4 <HAL_GetTick>
 80024fe:	4603      	mov	r3, r0
 8002500:	4a08      	ldr	r2, [pc, #32]	; (8002524 <EXTI15_10_IRQHandler+0x94>)
 8002502:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 8002504:	4b08      	ldr	r3, [pc, #32]	; (8002528 <EXTI15_10_IRQHandler+0x98>)
 8002506:	2201      	movs	r2, #1
 8002508:	701a      	strb	r2, [r3, #0]

			}
		}

		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13) ;
 800250a:	4b05      	ldr	r3, [pc, #20]	; (8002520 <EXTI15_10_IRQHandler+0x90>)
 800250c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002510:	615a      	str	r2, [r3, #20]
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002512:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002516:	f001 f861 	bl	80035dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800251a:	bf00      	nop
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40013c00 	.word	0x40013c00
 8002524:	20000238 	.word	0x20000238
 8002528:	20000012 	.word	0x20000012
 800252c:	40020400 	.word	0x40020400
 8002530:	20000236 	.word	0x20000236

08002534 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800253c:	4a14      	ldr	r2, [pc, #80]	; (8002590 <_sbrk+0x5c>)
 800253e:	4b15      	ldr	r3, [pc, #84]	; (8002594 <_sbrk+0x60>)
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002548:	4b13      	ldr	r3, [pc, #76]	; (8002598 <_sbrk+0x64>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d102      	bne.n	8002556 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002550:	4b11      	ldr	r3, [pc, #68]	; (8002598 <_sbrk+0x64>)
 8002552:	4a12      	ldr	r2, [pc, #72]	; (800259c <_sbrk+0x68>)
 8002554:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002556:	4b10      	ldr	r3, [pc, #64]	; (8002598 <_sbrk+0x64>)
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4413      	add	r3, r2
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	429a      	cmp	r2, r3
 8002562:	d207      	bcs.n	8002574 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002564:	f003 fbe8 	bl	8005d38 <__errno>
 8002568:	4603      	mov	r3, r0
 800256a:	220c      	movs	r2, #12
 800256c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800256e:	f04f 33ff 	mov.w	r3, #4294967295
 8002572:	e009      	b.n	8002588 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002574:	4b08      	ldr	r3, [pc, #32]	; (8002598 <_sbrk+0x64>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800257a:	4b07      	ldr	r3, [pc, #28]	; (8002598 <_sbrk+0x64>)
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4413      	add	r3, r2
 8002582:	4a05      	ldr	r2, [pc, #20]	; (8002598 <_sbrk+0x64>)
 8002584:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002586:	68fb      	ldr	r3, [r7, #12]
}
 8002588:	4618      	mov	r0, r3
 800258a:	3718      	adds	r7, #24
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	20020000 	.word	0x20020000
 8002594:	00000400 	.word	0x00000400
 8002598:	20000240 	.word	0x20000240
 800259c:	20000258 	.word	0x20000258

080025a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025a4:	4b06      	ldr	r3, [pc, #24]	; (80025c0 <SystemInit+0x20>)
 80025a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025aa:	4a05      	ldr	r2, [pc, #20]	; (80025c0 <SystemInit+0x20>)
 80025ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025b4:	bf00      	nop
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	e000ed00 	.word	0xe000ed00

080025c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80025c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025c8:	480d      	ldr	r0, [pc, #52]	; (8002600 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025ca:	490e      	ldr	r1, [pc, #56]	; (8002604 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025cc:	4a0e      	ldr	r2, [pc, #56]	; (8002608 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025d0:	e002      	b.n	80025d8 <LoopCopyDataInit>

080025d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025d6:	3304      	adds	r3, #4

080025d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025dc:	d3f9      	bcc.n	80025d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025de:	4a0b      	ldr	r2, [pc, #44]	; (800260c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025e0:	4c0b      	ldr	r4, [pc, #44]	; (8002610 <LoopFillZerobss+0x26>)
  movs r3, #0
 80025e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025e4:	e001      	b.n	80025ea <LoopFillZerobss>

080025e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025e8:	3204      	adds	r2, #4

080025ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025ec:	d3fb      	bcc.n	80025e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025ee:	f7ff ffd7 	bl	80025a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025f2:	f003 fba7 	bl	8005d44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025f6:	f7ff f987 	bl	8001908 <main>
  bx  lr    
 80025fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80025fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002600:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002604:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8002608:	08006744 	.word	0x08006744
  ldr r2, =_sbss
 800260c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002610:	20000258 	.word	0x20000258

08002614 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002614:	e7fe      	b.n	8002614 <ADC_IRQHandler>
	...

08002618 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800261c:	4b0e      	ldr	r3, [pc, #56]	; (8002658 <HAL_Init+0x40>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a0d      	ldr	r2, [pc, #52]	; (8002658 <HAL_Init+0x40>)
 8002622:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002626:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002628:	4b0b      	ldr	r3, [pc, #44]	; (8002658 <HAL_Init+0x40>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a0a      	ldr	r2, [pc, #40]	; (8002658 <HAL_Init+0x40>)
 800262e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002632:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002634:	4b08      	ldr	r3, [pc, #32]	; (8002658 <HAL_Init+0x40>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a07      	ldr	r2, [pc, #28]	; (8002658 <HAL_Init+0x40>)
 800263a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800263e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002640:	2003      	movs	r0, #3
 8002642:	f000 fd41 	bl	80030c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002646:	2000      	movs	r0, #0
 8002648:	f000 f808 	bl	800265c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800264c:	f7ff fc5e 	bl	8001f0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	40023c00 	.word	0x40023c00

0800265c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002664:	4b12      	ldr	r3, [pc, #72]	; (80026b0 <HAL_InitTick+0x54>)
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	4b12      	ldr	r3, [pc, #72]	; (80026b4 <HAL_InitTick+0x58>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	4619      	mov	r1, r3
 800266e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002672:	fbb3 f3f1 	udiv	r3, r3, r1
 8002676:	fbb2 f3f3 	udiv	r3, r2, r3
 800267a:	4618      	mov	r0, r3
 800267c:	f000 fd59 	bl	8003132 <HAL_SYSTICK_Config>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e00e      	b.n	80026a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b0f      	cmp	r3, #15
 800268e:	d80a      	bhi.n	80026a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002690:	2200      	movs	r2, #0
 8002692:	6879      	ldr	r1, [r7, #4]
 8002694:	f04f 30ff 	mov.w	r0, #4294967295
 8002698:	f000 fd21 	bl	80030de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800269c:	4a06      	ldr	r2, [pc, #24]	; (80026b8 <HAL_InitTick+0x5c>)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
 80026a4:	e000      	b.n	80026a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	20000014 	.word	0x20000014
 80026b4:	2000001c 	.word	0x2000001c
 80026b8:	20000018 	.word	0x20000018

080026bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026c0:	4b06      	ldr	r3, [pc, #24]	; (80026dc <HAL_IncTick+0x20>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	461a      	mov	r2, r3
 80026c6:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <HAL_IncTick+0x24>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4413      	add	r3, r2
 80026cc:	4a04      	ldr	r2, [pc, #16]	; (80026e0 <HAL_IncTick+0x24>)
 80026ce:	6013      	str	r3, [r2, #0]
}
 80026d0:	bf00      	nop
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	2000001c 	.word	0x2000001c
 80026e0:	20000244 	.word	0x20000244

080026e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  return uwTick;
 80026e8:	4b03      	ldr	r3, [pc, #12]	; (80026f8 <HAL_GetTick+0x14>)
 80026ea:	681b      	ldr	r3, [r3, #0]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	20000244 	.word	0x20000244

080026fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002704:	f7ff ffee 	bl	80026e4 <HAL_GetTick>
 8002708:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002714:	d005      	beq.n	8002722 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002716:	4b0a      	ldr	r3, [pc, #40]	; (8002740 <HAL_Delay+0x44>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	461a      	mov	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	4413      	add	r3, r2
 8002720:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002722:	bf00      	nop
 8002724:	f7ff ffde 	bl	80026e4 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	429a      	cmp	r2, r3
 8002732:	d8f7      	bhi.n	8002724 <HAL_Delay+0x28>
  {
  }
}
 8002734:	bf00      	nop
 8002736:	bf00      	nop
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	2000001c 	.word	0x2000001c

08002744 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800274c:	2300      	movs	r3, #0
 800274e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e033      	b.n	80027c2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	2b00      	cmp	r3, #0
 8002760:	d109      	bne.n	8002776 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7ff fbfa 	bl	8001f5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277a:	f003 0310 	and.w	r3, r3, #16
 800277e:	2b00      	cmp	r3, #0
 8002780:	d118      	bne.n	80027b4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800278a:	f023 0302 	bic.w	r3, r3, #2
 800278e:	f043 0202 	orr.w	r2, r3, #2
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 faca 	bl	8002d30 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	f023 0303 	bic.w	r3, r3, #3
 80027aa:	f043 0201 	orr.w	r2, r3, #1
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	641a      	str	r2, [r3, #64]	; 0x40
 80027b2:	e001      	b.n	80027b8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80027c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
	...

080027cc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80027d4:	2300      	movs	r3, #0
 80027d6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d101      	bne.n	80027e6 <HAL_ADC_Start+0x1a>
 80027e2:	2302      	movs	r3, #2
 80027e4:	e097      	b.n	8002916 <HAL_ADC_Start+0x14a>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d018      	beq.n	800282e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689a      	ldr	r2, [r3, #8]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f042 0201 	orr.w	r2, r2, #1
 800280a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800280c:	4b45      	ldr	r3, [pc, #276]	; (8002924 <HAL_ADC_Start+0x158>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a45      	ldr	r2, [pc, #276]	; (8002928 <HAL_ADC_Start+0x15c>)
 8002812:	fba2 2303 	umull	r2, r3, r2, r3
 8002816:	0c9a      	lsrs	r2, r3, #18
 8002818:	4613      	mov	r3, r2
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	4413      	add	r3, r2
 800281e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002820:	e002      	b.n	8002828 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	3b01      	subs	r3, #1
 8002826:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1f9      	bne.n	8002822 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	2b01      	cmp	r3, #1
 800283a:	d15f      	bne.n	80028fc <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002840:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002844:	f023 0301 	bic.w	r3, r3, #1
 8002848:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800285a:	2b00      	cmp	r3, #0
 800285c:	d007      	beq.n	800286e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002866:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800287a:	d106      	bne.n	800288a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002880:	f023 0206 	bic.w	r2, r3, #6
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	645a      	str	r2, [r3, #68]	; 0x44
 8002888:	e002      	b.n	8002890 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002898:	4b24      	ldr	r3, [pc, #144]	; (800292c <HAL_ADC_Start+0x160>)
 800289a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80028a4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f003 031f 	and.w	r3, r3, #31
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d10f      	bne.n	80028d2 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d129      	bne.n	8002914 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689a      	ldr	r2, [r3, #8]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80028ce:	609a      	str	r2, [r3, #8]
 80028d0:	e020      	b.n	8002914 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a16      	ldr	r2, [pc, #88]	; (8002930 <HAL_ADC_Start+0x164>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d11b      	bne.n	8002914 <HAL_ADC_Start+0x148>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d114      	bne.n	8002914 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80028f8:	609a      	str	r2, [r3, #8]
 80028fa:	e00b      	b.n	8002914 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002900:	f043 0210 	orr.w	r2, r3, #16
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290c:	f043 0201 	orr.w	r2, r3, #1
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3714      	adds	r7, #20
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	20000014 	.word	0x20000014
 8002928:	431bde83 	.word	0x431bde83
 800292c:	40012300 	.word	0x40012300
 8002930:	40012000 	.word	0x40012000

08002934 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002942:	2b01      	cmp	r3, #1
 8002944:	d101      	bne.n	800294a <HAL_ADC_Stop+0x16>
 8002946:	2302      	movs	r3, #2
 8002948:	e021      	b.n	800298e <HAL_ADC_Stop+0x5a>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2201      	movs	r2, #1
 800294e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 0201 	bic.w	r2, r2, #1
 8002960:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	2b00      	cmp	r3, #0
 800296e:	d109      	bne.n	8002984 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002974:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002978:	f023 0301 	bic.w	r3, r3, #1
 800297c:	f043 0201 	orr.w	r2, r3, #1
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr

0800299a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b084      	sub	sp, #16
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
 80029a2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80029a4:	2300      	movs	r3, #0
 80029a6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029b6:	d113      	bne.n	80029e0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80029c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029c6:	d10b      	bne.n	80029e0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029cc:	f043 0220 	orr.w	r2, r3, #32
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e063      	b.n	8002aa8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80029e0:	f7ff fe80 	bl	80026e4 <HAL_GetTick>
 80029e4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80029e6:	e021      	b.n	8002a2c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ee:	d01d      	beq.n	8002a2c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d007      	beq.n	8002a06 <HAL_ADC_PollForConversion+0x6c>
 80029f6:	f7ff fe75 	bl	80026e4 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d212      	bcs.n	8002a2c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d00b      	beq.n	8002a2c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a18:	f043 0204 	orr.w	r2, r3, #4
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e03d      	b.n	8002aa8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d1d6      	bne.n	80029e8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f06f 0212 	mvn.w	r2, #18
 8002a42:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a48:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d123      	bne.n	8002aa6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d11f      	bne.n	8002aa6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d006      	beq.n	8002a82 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d111      	bne.n	8002aa6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d105      	bne.n	8002aa6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	f043 0201 	orr.w	r2, r3, #1
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
	...

08002acc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d101      	bne.n	8002ae8 <HAL_ADC_ConfigChannel+0x1c>
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	e113      	b.n	8002d10 <HAL_ADC_ConfigChannel+0x244>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2b09      	cmp	r3, #9
 8002af6:	d925      	bls.n	8002b44 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68d9      	ldr	r1, [r3, #12]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	461a      	mov	r2, r3
 8002b06:	4613      	mov	r3, r2
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	4413      	add	r3, r2
 8002b0c:	3b1e      	subs	r3, #30
 8002b0e:	2207      	movs	r2, #7
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	43da      	mvns	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	400a      	ands	r2, r1
 8002b1c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68d9      	ldr	r1, [r3, #12]
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	4618      	mov	r0, r3
 8002b30:	4603      	mov	r3, r0
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	4403      	add	r3, r0
 8002b36:	3b1e      	subs	r3, #30
 8002b38:	409a      	lsls	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	60da      	str	r2, [r3, #12]
 8002b42:	e022      	b.n	8002b8a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6919      	ldr	r1, [r3, #16]
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	461a      	mov	r2, r3
 8002b52:	4613      	mov	r3, r2
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	4413      	add	r3, r2
 8002b58:	2207      	movs	r2, #7
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	43da      	mvns	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	400a      	ands	r2, r1
 8002b66:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6919      	ldr	r1, [r3, #16]
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	689a      	ldr	r2, [r3, #8]
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	4618      	mov	r0, r3
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	4403      	add	r3, r0
 8002b80:	409a      	lsls	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	430a      	orrs	r2, r1
 8002b88:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b06      	cmp	r3, #6
 8002b90:	d824      	bhi.n	8002bdc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	3b05      	subs	r3, #5
 8002ba4:	221f      	movs	r2, #31
 8002ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8002baa:	43da      	mvns	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	400a      	ands	r2, r1
 8002bb2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685a      	ldr	r2, [r3, #4]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4413      	add	r3, r2
 8002bcc:	3b05      	subs	r3, #5
 8002bce:	fa00 f203 	lsl.w	r2, r0, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	635a      	str	r2, [r3, #52]	; 0x34
 8002bda:	e04c      	b.n	8002c76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	2b0c      	cmp	r3, #12
 8002be2:	d824      	bhi.n	8002c2e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685a      	ldr	r2, [r3, #4]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	3b23      	subs	r3, #35	; 0x23
 8002bf6:	221f      	movs	r2, #31
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	43da      	mvns	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	400a      	ands	r2, r1
 8002c04:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	4618      	mov	r0, r3
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685a      	ldr	r2, [r3, #4]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	3b23      	subs	r3, #35	; 0x23
 8002c20:	fa00 f203 	lsl.w	r2, r0, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	631a      	str	r2, [r3, #48]	; 0x30
 8002c2c:	e023      	b.n	8002c76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	4413      	add	r3, r2
 8002c3e:	3b41      	subs	r3, #65	; 0x41
 8002c40:	221f      	movs	r2, #31
 8002c42:	fa02 f303 	lsl.w	r3, r2, r3
 8002c46:	43da      	mvns	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	400a      	ands	r2, r1
 8002c4e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	685a      	ldr	r2, [r3, #4]
 8002c62:	4613      	mov	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4413      	add	r3, r2
 8002c68:	3b41      	subs	r3, #65	; 0x41
 8002c6a:	fa00 f203 	lsl.w	r2, r0, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	430a      	orrs	r2, r1
 8002c74:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c76:	4b29      	ldr	r3, [pc, #164]	; (8002d1c <HAL_ADC_ConfigChannel+0x250>)
 8002c78:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a28      	ldr	r2, [pc, #160]	; (8002d20 <HAL_ADC_ConfigChannel+0x254>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d10f      	bne.n	8002ca4 <HAL_ADC_ConfigChannel+0x1d8>
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2b12      	cmp	r3, #18
 8002c8a:	d10b      	bne.n	8002ca4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a1d      	ldr	r2, [pc, #116]	; (8002d20 <HAL_ADC_ConfigChannel+0x254>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d12b      	bne.n	8002d06 <HAL_ADC_ConfigChannel+0x23a>
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a1c      	ldr	r2, [pc, #112]	; (8002d24 <HAL_ADC_ConfigChannel+0x258>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d003      	beq.n	8002cc0 <HAL_ADC_ConfigChannel+0x1f4>
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2b11      	cmp	r3, #17
 8002cbe:	d122      	bne.n	8002d06 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a11      	ldr	r2, [pc, #68]	; (8002d24 <HAL_ADC_ConfigChannel+0x258>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d111      	bne.n	8002d06 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ce2:	4b11      	ldr	r3, [pc, #68]	; (8002d28 <HAL_ADC_ConfigChannel+0x25c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a11      	ldr	r2, [pc, #68]	; (8002d2c <HAL_ADC_ConfigChannel+0x260>)
 8002ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cec:	0c9a      	lsrs	r2, r3, #18
 8002cee:	4613      	mov	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4413      	add	r3, r2
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002cf8:	e002      	b.n	8002d00 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1f9      	bne.n	8002cfa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3714      	adds	r7, #20
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr
 8002d1c:	40012300 	.word	0x40012300
 8002d20:	40012000 	.word	0x40012000
 8002d24:	10000012 	.word	0x10000012
 8002d28:	20000014 	.word	0x20000014
 8002d2c:	431bde83 	.word	0x431bde83

08002d30 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d38:	4b79      	ldr	r3, [pc, #484]	; (8002f20 <ADC_Init+0x1f0>)
 8002d3a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	431a      	orrs	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	6859      	ldr	r1, [r3, #4]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	021a      	lsls	r2, r3, #8
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	685a      	ldr	r2, [r3, #4]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002d88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	6859      	ldr	r1, [r3, #4]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	689a      	ldr	r2, [r3, #8]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002daa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6899      	ldr	r1, [r3, #8]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68da      	ldr	r2, [r3, #12]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc2:	4a58      	ldr	r2, [pc, #352]	; (8002f24 <ADC_Init+0x1f4>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d022      	beq.n	8002e0e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002dd6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6899      	ldr	r1, [r3, #8]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002df8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6899      	ldr	r1, [r3, #8]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	609a      	str	r2, [r3, #8]
 8002e0c:	e00f      	b.n	8002e2e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e2c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 0202 	bic.w	r2, r2, #2
 8002e3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6899      	ldr	r1, [r3, #8]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	7e1b      	ldrb	r3, [r3, #24]
 8002e48:	005a      	lsls	r2, r3, #1
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d01b      	beq.n	8002e94 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	685a      	ldr	r2, [r3, #4]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e6a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	685a      	ldr	r2, [r3, #4]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002e7a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6859      	ldr	r1, [r3, #4]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e86:	3b01      	subs	r3, #1
 8002e88:	035a      	lsls	r2, r3, #13
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	605a      	str	r2, [r3, #4]
 8002e92:	e007      	b.n	8002ea4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	685a      	ldr	r2, [r3, #4]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ea2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002eb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	051a      	lsls	r2, r3, #20
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ed8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6899      	ldr	r1, [r3, #8]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ee6:	025a      	lsls	r2, r3, #9
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689a      	ldr	r2, [r3, #8]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002efe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6899      	ldr	r1, [r3, #8]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	029a      	lsls	r2, r3, #10
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	609a      	str	r2, [r3, #8]
}
 8002f14:	bf00      	nop
 8002f16:	3714      	adds	r7, #20
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr
 8002f20:	40012300 	.word	0x40012300
 8002f24:	0f000001 	.word	0x0f000001

08002f28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f38:	4b0c      	ldr	r3, [pc, #48]	; (8002f6c <__NVIC_SetPriorityGrouping+0x44>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f3e:	68ba      	ldr	r2, [r7, #8]
 8002f40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f44:	4013      	ands	r3, r2
 8002f46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f5a:	4a04      	ldr	r2, [pc, #16]	; (8002f6c <__NVIC_SetPriorityGrouping+0x44>)
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	60d3      	str	r3, [r2, #12]
}
 8002f60:	bf00      	nop
 8002f62:	3714      	adds	r7, #20
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	e000ed00 	.word	0xe000ed00

08002f70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f74:	4b04      	ldr	r3, [pc, #16]	; (8002f88 <__NVIC_GetPriorityGrouping+0x18>)
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	0a1b      	lsrs	r3, r3, #8
 8002f7a:	f003 0307 	and.w	r3, r3, #7
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr
 8002f88:	e000ed00 	.word	0xe000ed00

08002f8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	4603      	mov	r3, r0
 8002f94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	db0b      	blt.n	8002fb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f9e:	79fb      	ldrb	r3, [r7, #7]
 8002fa0:	f003 021f 	and.w	r2, r3, #31
 8002fa4:	4907      	ldr	r1, [pc, #28]	; (8002fc4 <__NVIC_EnableIRQ+0x38>)
 8002fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002faa:	095b      	lsrs	r3, r3, #5
 8002fac:	2001      	movs	r0, #1
 8002fae:	fa00 f202 	lsl.w	r2, r0, r2
 8002fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fb6:	bf00      	nop
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	e000e100 	.word	0xe000e100

08002fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	4603      	mov	r3, r0
 8002fd0:	6039      	str	r1, [r7, #0]
 8002fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	db0a      	blt.n	8002ff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	b2da      	uxtb	r2, r3
 8002fe0:	490c      	ldr	r1, [pc, #48]	; (8003014 <__NVIC_SetPriority+0x4c>)
 8002fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe6:	0112      	lsls	r2, r2, #4
 8002fe8:	b2d2      	uxtb	r2, r2
 8002fea:	440b      	add	r3, r1
 8002fec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ff0:	e00a      	b.n	8003008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	4908      	ldr	r1, [pc, #32]	; (8003018 <__NVIC_SetPriority+0x50>)
 8002ff8:	79fb      	ldrb	r3, [r7, #7]
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	3b04      	subs	r3, #4
 8003000:	0112      	lsls	r2, r2, #4
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	440b      	add	r3, r1
 8003006:	761a      	strb	r2, [r3, #24]
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	e000e100 	.word	0xe000e100
 8003018:	e000ed00 	.word	0xe000ed00

0800301c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800301c:	b480      	push	{r7}
 800301e:	b089      	sub	sp, #36	; 0x24
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	f1c3 0307 	rsb	r3, r3, #7
 8003036:	2b04      	cmp	r3, #4
 8003038:	bf28      	it	cs
 800303a:	2304      	movcs	r3, #4
 800303c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	3304      	adds	r3, #4
 8003042:	2b06      	cmp	r3, #6
 8003044:	d902      	bls.n	800304c <NVIC_EncodePriority+0x30>
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	3b03      	subs	r3, #3
 800304a:	e000      	b.n	800304e <NVIC_EncodePriority+0x32>
 800304c:	2300      	movs	r3, #0
 800304e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003050:	f04f 32ff 	mov.w	r2, #4294967295
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	43da      	mvns	r2, r3
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	401a      	ands	r2, r3
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003064:	f04f 31ff 	mov.w	r1, #4294967295
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	fa01 f303 	lsl.w	r3, r1, r3
 800306e:	43d9      	mvns	r1, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003074:	4313      	orrs	r3, r2
         );
}
 8003076:	4618      	mov	r0, r3
 8003078:	3724      	adds	r7, #36	; 0x24
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
	...

08003084 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	3b01      	subs	r3, #1
 8003090:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003094:	d301      	bcc.n	800309a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003096:	2301      	movs	r3, #1
 8003098:	e00f      	b.n	80030ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800309a:	4a0a      	ldr	r2, [pc, #40]	; (80030c4 <SysTick_Config+0x40>)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	3b01      	subs	r3, #1
 80030a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030a2:	210f      	movs	r1, #15
 80030a4:	f04f 30ff 	mov.w	r0, #4294967295
 80030a8:	f7ff ff8e 	bl	8002fc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030ac:	4b05      	ldr	r3, [pc, #20]	; (80030c4 <SysTick_Config+0x40>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030b2:	4b04      	ldr	r3, [pc, #16]	; (80030c4 <SysTick_Config+0x40>)
 80030b4:	2207      	movs	r2, #7
 80030b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	e000e010 	.word	0xe000e010

080030c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f7ff ff29 	bl	8002f28 <__NVIC_SetPriorityGrouping>
}
 80030d6:	bf00      	nop
 80030d8:	3708      	adds	r7, #8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030de:	b580      	push	{r7, lr}
 80030e0:	b086      	sub	sp, #24
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	4603      	mov	r3, r0
 80030e6:	60b9      	str	r1, [r7, #8]
 80030e8:	607a      	str	r2, [r7, #4]
 80030ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030ec:	2300      	movs	r3, #0
 80030ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030f0:	f7ff ff3e 	bl	8002f70 <__NVIC_GetPriorityGrouping>
 80030f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	68b9      	ldr	r1, [r7, #8]
 80030fa:	6978      	ldr	r0, [r7, #20]
 80030fc:	f7ff ff8e 	bl	800301c <NVIC_EncodePriority>
 8003100:	4602      	mov	r2, r0
 8003102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003106:	4611      	mov	r1, r2
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff ff5d 	bl	8002fc8 <__NVIC_SetPriority>
}
 800310e:	bf00      	nop
 8003110:	3718      	adds	r7, #24
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b082      	sub	sp, #8
 800311a:	af00      	add	r7, sp, #0
 800311c:	4603      	mov	r3, r0
 800311e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff ff31 	bl	8002f8c <__NVIC_EnableIRQ>
}
 800312a:	bf00      	nop
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b082      	sub	sp, #8
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f7ff ffa2 	bl	8003084 <SysTick_Config>
 8003140:	4603      	mov	r3, r0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b084      	sub	sp, #16
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003156:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003158:	f7ff fac4 	bl	80026e4 <HAL_GetTick>
 800315c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b02      	cmp	r3, #2
 8003168:	d008      	beq.n	800317c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2280      	movs	r2, #128	; 0x80
 800316e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e052      	b.n	8003222 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 0216 	bic.w	r2, r2, #22
 800318a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	695a      	ldr	r2, [r3, #20]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800319a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d103      	bne.n	80031ac <HAL_DMA_Abort+0x62>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d007      	beq.n	80031bc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 0208 	bic.w	r2, r2, #8
 80031ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 0201 	bic.w	r2, r2, #1
 80031ca:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031cc:	e013      	b.n	80031f6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031ce:	f7ff fa89 	bl	80026e4 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b05      	cmp	r3, #5
 80031da:	d90c      	bls.n	80031f6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2220      	movs	r2, #32
 80031e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2203      	movs	r2, #3
 80031e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e015      	b.n	8003222 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1e4      	bne.n	80031ce <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003208:	223f      	movs	r2, #63	; 0x3f
 800320a:	409a      	lsls	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800322a:	b480      	push	{r7}
 800322c:	b083      	sub	sp, #12
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d004      	beq.n	8003248 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2280      	movs	r2, #128	; 0x80
 8003242:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e00c      	b.n	8003262 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2205      	movs	r2, #5
 800324c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 0201 	bic.w	r2, r2, #1
 800325e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
	...

08003270 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003270:	b480      	push	{r7}
 8003272:	b089      	sub	sp, #36	; 0x24
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800327a:	2300      	movs	r3, #0
 800327c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800327e:	2300      	movs	r3, #0
 8003280:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003282:	2300      	movs	r3, #0
 8003284:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003286:	2300      	movs	r3, #0
 8003288:	61fb      	str	r3, [r7, #28]
 800328a:	e159      	b.n	8003540 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800328c:	2201      	movs	r2, #1
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	4013      	ands	r3, r2
 800329e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	f040 8148 	bne.w	800353a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f003 0303 	and.w	r3, r3, #3
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d005      	beq.n	80032c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d130      	bne.n	8003324 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	2203      	movs	r2, #3
 80032ce:	fa02 f303 	lsl.w	r3, r2, r3
 80032d2:	43db      	mvns	r3, r3
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	4013      	ands	r3, r2
 80032d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	68da      	ldr	r2, [r3, #12]
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	fa02 f303 	lsl.w	r3, r2, r3
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032f8:	2201      	movs	r2, #1
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003300:	43db      	mvns	r3, r3
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	4013      	ands	r3, r2
 8003306:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	091b      	lsrs	r3, r3, #4
 800330e:	f003 0201 	and.w	r2, r3, #1
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	4313      	orrs	r3, r2
 800331c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f003 0303 	and.w	r3, r3, #3
 800332c:	2b03      	cmp	r3, #3
 800332e:	d017      	beq.n	8003360 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	2203      	movs	r2, #3
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	43db      	mvns	r3, r3
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	4013      	ands	r3, r2
 8003346:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	689a      	ldr	r2, [r3, #8]
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	4313      	orrs	r3, r2
 8003358:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f003 0303 	and.w	r3, r3, #3
 8003368:	2b02      	cmp	r3, #2
 800336a:	d123      	bne.n	80033b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	08da      	lsrs	r2, r3, #3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	3208      	adds	r2, #8
 8003374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003378:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	220f      	movs	r2, #15
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	43db      	mvns	r3, r3
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	4013      	ands	r3, r2
 800338e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	691a      	ldr	r2, [r3, #16]
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	f003 0307 	and.w	r3, r3, #7
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	08da      	lsrs	r2, r3, #3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	3208      	adds	r2, #8
 80033ae:	69b9      	ldr	r1, [r7, #24]
 80033b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	2203      	movs	r2, #3
 80033c0:	fa02 f303 	lsl.w	r3, r2, r3
 80033c4:	43db      	mvns	r3, r3
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	4013      	ands	r3, r2
 80033ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f003 0203 	and.w	r2, r3, #3
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	4313      	orrs	r3, r2
 80033e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f000 80a2 	beq.w	800353a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033f6:	2300      	movs	r3, #0
 80033f8:	60fb      	str	r3, [r7, #12]
 80033fa:	4b57      	ldr	r3, [pc, #348]	; (8003558 <HAL_GPIO_Init+0x2e8>)
 80033fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033fe:	4a56      	ldr	r2, [pc, #344]	; (8003558 <HAL_GPIO_Init+0x2e8>)
 8003400:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003404:	6453      	str	r3, [r2, #68]	; 0x44
 8003406:	4b54      	ldr	r3, [pc, #336]	; (8003558 <HAL_GPIO_Init+0x2e8>)
 8003408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800340e:	60fb      	str	r3, [r7, #12]
 8003410:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003412:	4a52      	ldr	r2, [pc, #328]	; (800355c <HAL_GPIO_Init+0x2ec>)
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	089b      	lsrs	r3, r3, #2
 8003418:	3302      	adds	r3, #2
 800341a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800341e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	f003 0303 	and.w	r3, r3, #3
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	220f      	movs	r2, #15
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	43db      	mvns	r3, r3
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	4013      	ands	r3, r2
 8003434:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a49      	ldr	r2, [pc, #292]	; (8003560 <HAL_GPIO_Init+0x2f0>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d019      	beq.n	8003472 <HAL_GPIO_Init+0x202>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a48      	ldr	r2, [pc, #288]	; (8003564 <HAL_GPIO_Init+0x2f4>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d013      	beq.n	800346e <HAL_GPIO_Init+0x1fe>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a47      	ldr	r2, [pc, #284]	; (8003568 <HAL_GPIO_Init+0x2f8>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d00d      	beq.n	800346a <HAL_GPIO_Init+0x1fa>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a46      	ldr	r2, [pc, #280]	; (800356c <HAL_GPIO_Init+0x2fc>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d007      	beq.n	8003466 <HAL_GPIO_Init+0x1f6>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a45      	ldr	r2, [pc, #276]	; (8003570 <HAL_GPIO_Init+0x300>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d101      	bne.n	8003462 <HAL_GPIO_Init+0x1f2>
 800345e:	2304      	movs	r3, #4
 8003460:	e008      	b.n	8003474 <HAL_GPIO_Init+0x204>
 8003462:	2307      	movs	r3, #7
 8003464:	e006      	b.n	8003474 <HAL_GPIO_Init+0x204>
 8003466:	2303      	movs	r3, #3
 8003468:	e004      	b.n	8003474 <HAL_GPIO_Init+0x204>
 800346a:	2302      	movs	r3, #2
 800346c:	e002      	b.n	8003474 <HAL_GPIO_Init+0x204>
 800346e:	2301      	movs	r3, #1
 8003470:	e000      	b.n	8003474 <HAL_GPIO_Init+0x204>
 8003472:	2300      	movs	r3, #0
 8003474:	69fa      	ldr	r2, [r7, #28]
 8003476:	f002 0203 	and.w	r2, r2, #3
 800347a:	0092      	lsls	r2, r2, #2
 800347c:	4093      	lsls	r3, r2
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	4313      	orrs	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003484:	4935      	ldr	r1, [pc, #212]	; (800355c <HAL_GPIO_Init+0x2ec>)
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	089b      	lsrs	r3, r3, #2
 800348a:	3302      	adds	r3, #2
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003492:	4b38      	ldr	r3, [pc, #224]	; (8003574 <HAL_GPIO_Init+0x304>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	43db      	mvns	r3, r3
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	4013      	ands	r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034b6:	4a2f      	ldr	r2, [pc, #188]	; (8003574 <HAL_GPIO_Init+0x304>)
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034bc:	4b2d      	ldr	r3, [pc, #180]	; (8003574 <HAL_GPIO_Init+0x304>)
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	43db      	mvns	r3, r3
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	4013      	ands	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d003      	beq.n	80034e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	4313      	orrs	r3, r2
 80034de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034e0:	4a24      	ldr	r2, [pc, #144]	; (8003574 <HAL_GPIO_Init+0x304>)
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034e6:	4b23      	ldr	r3, [pc, #140]	; (8003574 <HAL_GPIO_Init+0x304>)
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	43db      	mvns	r3, r3
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	4013      	ands	r3, r2
 80034f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	4313      	orrs	r3, r2
 8003508:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800350a:	4a1a      	ldr	r2, [pc, #104]	; (8003574 <HAL_GPIO_Init+0x304>)
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003510:	4b18      	ldr	r3, [pc, #96]	; (8003574 <HAL_GPIO_Init+0x304>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	43db      	mvns	r3, r3
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	4013      	ands	r3, r2
 800351e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d003      	beq.n	8003534 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	4313      	orrs	r3, r2
 8003532:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003534:	4a0f      	ldr	r2, [pc, #60]	; (8003574 <HAL_GPIO_Init+0x304>)
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	3301      	adds	r3, #1
 800353e:	61fb      	str	r3, [r7, #28]
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	2b0f      	cmp	r3, #15
 8003544:	f67f aea2 	bls.w	800328c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003548:	bf00      	nop
 800354a:	bf00      	nop
 800354c:	3724      	adds	r7, #36	; 0x24
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	40023800 	.word	0x40023800
 800355c:	40013800 	.word	0x40013800
 8003560:	40020000 	.word	0x40020000
 8003564:	40020400 	.word	0x40020400
 8003568:	40020800 	.word	0x40020800
 800356c:	40020c00 	.word	0x40020c00
 8003570:	40021000 	.word	0x40021000
 8003574:	40013c00 	.word	0x40013c00

08003578 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	460b      	mov	r3, r1
 8003582:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	691a      	ldr	r2, [r3, #16]
 8003588:	887b      	ldrh	r3, [r7, #2]
 800358a:	4013      	ands	r3, r2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d002      	beq.n	8003596 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003590:	2301      	movs	r3, #1
 8003592:	73fb      	strb	r3, [r7, #15]
 8003594:	e001      	b.n	800359a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003596:	2300      	movs	r3, #0
 8003598:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800359a:	7bfb      	ldrb	r3, [r7, #15]
}
 800359c:	4618      	mov	r0, r3
 800359e:	3714      	adds	r7, #20
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	460b      	mov	r3, r1
 80035b2:	807b      	strh	r3, [r7, #2]
 80035b4:	4613      	mov	r3, r2
 80035b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035b8:	787b      	ldrb	r3, [r7, #1]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d003      	beq.n	80035c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035be:	887a      	ldrh	r2, [r7, #2]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035c4:	e003      	b.n	80035ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035c6:	887b      	ldrh	r3, [r7, #2]
 80035c8:	041a      	lsls	r2, r3, #16
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	619a      	str	r2, [r3, #24]
}
 80035ce:	bf00      	nop
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
	...

080035dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	4603      	mov	r3, r0
 80035e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80035e6:	4b08      	ldr	r3, [pc, #32]	; (8003608 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035e8:	695a      	ldr	r2, [r3, #20]
 80035ea:	88fb      	ldrh	r3, [r7, #6]
 80035ec:	4013      	ands	r3, r2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d006      	beq.n	8003600 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035f2:	4a05      	ldr	r2, [pc, #20]	; (8003608 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035f4:	88fb      	ldrh	r3, [r7, #6]
 80035f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035f8:	88fb      	ldrh	r3, [r7, #6]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f000 f806 	bl	800360c <HAL_GPIO_EXTI_Callback>
  }
}
 8003600:	bf00      	nop
 8003602:	3708      	adds	r7, #8
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	40013c00 	.word	0x40013c00

0800360c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	4603      	mov	r3, r0
 8003614:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003616:	bf00      	nop
 8003618:	370c      	adds	r7, #12
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
	...

08003624 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e267      	b.n	8003b06 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b00      	cmp	r3, #0
 8003640:	d075      	beq.n	800372e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003642:	4b88      	ldr	r3, [pc, #544]	; (8003864 <HAL_RCC_OscConfig+0x240>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f003 030c 	and.w	r3, r3, #12
 800364a:	2b04      	cmp	r3, #4
 800364c:	d00c      	beq.n	8003668 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800364e:	4b85      	ldr	r3, [pc, #532]	; (8003864 <HAL_RCC_OscConfig+0x240>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003656:	2b08      	cmp	r3, #8
 8003658:	d112      	bne.n	8003680 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800365a:	4b82      	ldr	r3, [pc, #520]	; (8003864 <HAL_RCC_OscConfig+0x240>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003662:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003666:	d10b      	bne.n	8003680 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003668:	4b7e      	ldr	r3, [pc, #504]	; (8003864 <HAL_RCC_OscConfig+0x240>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d05b      	beq.n	800372c <HAL_RCC_OscConfig+0x108>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d157      	bne.n	800372c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e242      	b.n	8003b06 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003688:	d106      	bne.n	8003698 <HAL_RCC_OscConfig+0x74>
 800368a:	4b76      	ldr	r3, [pc, #472]	; (8003864 <HAL_RCC_OscConfig+0x240>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a75      	ldr	r2, [pc, #468]	; (8003864 <HAL_RCC_OscConfig+0x240>)
 8003690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003694:	6013      	str	r3, [r2, #0]
 8003696:	e01d      	b.n	80036d4 <HAL_RCC_OscConfig+0xb0>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036a0:	d10c      	bne.n	80036bc <HAL_RCC_OscConfig+0x98>
 80036a2:	4b70      	ldr	r3, [pc, #448]	; (8003864 <HAL_RCC_OscConfig+0x240>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a6f      	ldr	r2, [pc, #444]	; (8003864 <HAL_RCC_OscConfig+0x240>)
 80036a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036ac:	6013      	str	r3, [r2, #0]
 80036ae:	4b6d      	ldr	r3, [pc, #436]	; (8003864 <HAL_RCC_OscConfig+0x240>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a6c      	ldr	r2, [pc, #432]	; (8003864 <HAL_RCC_OscConfig+0x240>)
 80036b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036b8:	6013      	str	r3, [r2, #0]
 80036ba:	e00b      	b.n	80036d4 <HAL_RCC_OscConfig+0xb0>
 80036bc:	4b69      	ldr	r3, [pc, #420]	; (8003864 <HAL_RCC_OscConfig+0x240>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a68      	ldr	r2, [pc, #416]	; (8003864 <HAL_RCC_OscConfig+0x240>)
 80036c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036c6:	6013      	str	r3, [r2, #0]
 80036c8:	4b66      	ldr	r3, [pc, #408]	; (8003864 <HAL_RCC_OscConfig+0x240>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a65      	ldr	r2, [pc, #404]	; (8003864 <HAL_RCC_OscConfig+0x240>)
 80036ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d013      	beq.n	8003704 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036dc:	f7ff f802 	bl	80026e4 <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036e4:	f7fe fffe 	bl	80026e4 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b64      	cmp	r3, #100	; 0x64
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e207      	b.n	8003b06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036f6:	4b5b      	ldr	r3, [pc, #364]	; (8003864 <HAL_RCC_OscConfig+0x240>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d0f0      	beq.n	80036e4 <HAL_RCC_OscConfig+0xc0>
 8003702:	e014      	b.n	800372e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003704:	f7fe ffee 	bl	80026e4 <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800370a:	e008      	b.n	800371e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800370c:	f7fe ffea 	bl	80026e4 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b64      	cmp	r3, #100	; 0x64
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e1f3      	b.n	8003b06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800371e:	4b51      	ldr	r3, [pc, #324]	; (8003864 <HAL_RCC_OscConfig+0x240>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1f0      	bne.n	800370c <HAL_RCC_OscConfig+0xe8>
 800372a:	e000      	b.n	800372e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800372c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d063      	beq.n	8003802 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800373a:	4b4a      	ldr	r3, [pc, #296]	; (8003864 <HAL_RCC_OscConfig+0x240>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f003 030c 	and.w	r3, r3, #12
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00b      	beq.n	800375e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003746:	4b47      	ldr	r3, [pc, #284]	; (8003864 <HAL_RCC_OscConfig+0x240>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800374e:	2b08      	cmp	r3, #8
 8003750:	d11c      	bne.n	800378c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003752:	4b44      	ldr	r3, [pc, #272]	; (8003864 <HAL_RCC_OscConfig+0x240>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d116      	bne.n	800378c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800375e:	4b41      	ldr	r3, [pc, #260]	; (8003864 <HAL_RCC_OscConfig+0x240>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d005      	beq.n	8003776 <HAL_RCC_OscConfig+0x152>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d001      	beq.n	8003776 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e1c7      	b.n	8003b06 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003776:	4b3b      	ldr	r3, [pc, #236]	; (8003864 <HAL_RCC_OscConfig+0x240>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	4937      	ldr	r1, [pc, #220]	; (8003864 <HAL_RCC_OscConfig+0x240>)
 8003786:	4313      	orrs	r3, r2
 8003788:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800378a:	e03a      	b.n	8003802 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d020      	beq.n	80037d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003794:	4b34      	ldr	r3, [pc, #208]	; (8003868 <HAL_RCC_OscConfig+0x244>)
 8003796:	2201      	movs	r2, #1
 8003798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800379a:	f7fe ffa3 	bl	80026e4 <HAL_GetTick>
 800379e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037a0:	e008      	b.n	80037b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037a2:	f7fe ff9f 	bl	80026e4 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e1a8      	b.n	8003b06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b4:	4b2b      	ldr	r3, [pc, #172]	; (8003864 <HAL_RCC_OscConfig+0x240>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d0f0      	beq.n	80037a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c0:	4b28      	ldr	r3, [pc, #160]	; (8003864 <HAL_RCC_OscConfig+0x240>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	4925      	ldr	r1, [pc, #148]	; (8003864 <HAL_RCC_OscConfig+0x240>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	600b      	str	r3, [r1, #0]
 80037d4:	e015      	b.n	8003802 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037d6:	4b24      	ldr	r3, [pc, #144]	; (8003868 <HAL_RCC_OscConfig+0x244>)
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037dc:	f7fe ff82 	bl	80026e4 <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037e4:	f7fe ff7e 	bl	80026e4 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e187      	b.n	8003b06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037f6:	4b1b      	ldr	r3, [pc, #108]	; (8003864 <HAL_RCC_OscConfig+0x240>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1f0      	bne.n	80037e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0308 	and.w	r3, r3, #8
 800380a:	2b00      	cmp	r3, #0
 800380c:	d036      	beq.n	800387c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d016      	beq.n	8003844 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003816:	4b15      	ldr	r3, [pc, #84]	; (800386c <HAL_RCC_OscConfig+0x248>)
 8003818:	2201      	movs	r2, #1
 800381a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800381c:	f7fe ff62 	bl	80026e4 <HAL_GetTick>
 8003820:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003822:	e008      	b.n	8003836 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003824:	f7fe ff5e 	bl	80026e4 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b02      	cmp	r3, #2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e167      	b.n	8003b06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003836:	4b0b      	ldr	r3, [pc, #44]	; (8003864 <HAL_RCC_OscConfig+0x240>)
 8003838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d0f0      	beq.n	8003824 <HAL_RCC_OscConfig+0x200>
 8003842:	e01b      	b.n	800387c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003844:	4b09      	ldr	r3, [pc, #36]	; (800386c <HAL_RCC_OscConfig+0x248>)
 8003846:	2200      	movs	r2, #0
 8003848:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800384a:	f7fe ff4b 	bl	80026e4 <HAL_GetTick>
 800384e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003850:	e00e      	b.n	8003870 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003852:	f7fe ff47 	bl	80026e4 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	2b02      	cmp	r3, #2
 800385e:	d907      	bls.n	8003870 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e150      	b.n	8003b06 <HAL_RCC_OscConfig+0x4e2>
 8003864:	40023800 	.word	0x40023800
 8003868:	42470000 	.word	0x42470000
 800386c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003870:	4b88      	ldr	r3, [pc, #544]	; (8003a94 <HAL_RCC_OscConfig+0x470>)
 8003872:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1ea      	bne.n	8003852 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0304 	and.w	r3, r3, #4
 8003884:	2b00      	cmp	r3, #0
 8003886:	f000 8097 	beq.w	80039b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800388a:	2300      	movs	r3, #0
 800388c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800388e:	4b81      	ldr	r3, [pc, #516]	; (8003a94 <HAL_RCC_OscConfig+0x470>)
 8003890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10f      	bne.n	80038ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800389a:	2300      	movs	r3, #0
 800389c:	60bb      	str	r3, [r7, #8]
 800389e:	4b7d      	ldr	r3, [pc, #500]	; (8003a94 <HAL_RCC_OscConfig+0x470>)
 80038a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a2:	4a7c      	ldr	r2, [pc, #496]	; (8003a94 <HAL_RCC_OscConfig+0x470>)
 80038a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038a8:	6413      	str	r3, [r2, #64]	; 0x40
 80038aa:	4b7a      	ldr	r3, [pc, #488]	; (8003a94 <HAL_RCC_OscConfig+0x470>)
 80038ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b2:	60bb      	str	r3, [r7, #8]
 80038b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038b6:	2301      	movs	r3, #1
 80038b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ba:	4b77      	ldr	r3, [pc, #476]	; (8003a98 <HAL_RCC_OscConfig+0x474>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d118      	bne.n	80038f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038c6:	4b74      	ldr	r3, [pc, #464]	; (8003a98 <HAL_RCC_OscConfig+0x474>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a73      	ldr	r2, [pc, #460]	; (8003a98 <HAL_RCC_OscConfig+0x474>)
 80038cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038d2:	f7fe ff07 	bl	80026e4 <HAL_GetTick>
 80038d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038d8:	e008      	b.n	80038ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038da:	f7fe ff03 	bl	80026e4 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d901      	bls.n	80038ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e10c      	b.n	8003b06 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ec:	4b6a      	ldr	r3, [pc, #424]	; (8003a98 <HAL_RCC_OscConfig+0x474>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d0f0      	beq.n	80038da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d106      	bne.n	800390e <HAL_RCC_OscConfig+0x2ea>
 8003900:	4b64      	ldr	r3, [pc, #400]	; (8003a94 <HAL_RCC_OscConfig+0x470>)
 8003902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003904:	4a63      	ldr	r2, [pc, #396]	; (8003a94 <HAL_RCC_OscConfig+0x470>)
 8003906:	f043 0301 	orr.w	r3, r3, #1
 800390a:	6713      	str	r3, [r2, #112]	; 0x70
 800390c:	e01c      	b.n	8003948 <HAL_RCC_OscConfig+0x324>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	2b05      	cmp	r3, #5
 8003914:	d10c      	bne.n	8003930 <HAL_RCC_OscConfig+0x30c>
 8003916:	4b5f      	ldr	r3, [pc, #380]	; (8003a94 <HAL_RCC_OscConfig+0x470>)
 8003918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391a:	4a5e      	ldr	r2, [pc, #376]	; (8003a94 <HAL_RCC_OscConfig+0x470>)
 800391c:	f043 0304 	orr.w	r3, r3, #4
 8003920:	6713      	str	r3, [r2, #112]	; 0x70
 8003922:	4b5c      	ldr	r3, [pc, #368]	; (8003a94 <HAL_RCC_OscConfig+0x470>)
 8003924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003926:	4a5b      	ldr	r2, [pc, #364]	; (8003a94 <HAL_RCC_OscConfig+0x470>)
 8003928:	f043 0301 	orr.w	r3, r3, #1
 800392c:	6713      	str	r3, [r2, #112]	; 0x70
 800392e:	e00b      	b.n	8003948 <HAL_RCC_OscConfig+0x324>
 8003930:	4b58      	ldr	r3, [pc, #352]	; (8003a94 <HAL_RCC_OscConfig+0x470>)
 8003932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003934:	4a57      	ldr	r2, [pc, #348]	; (8003a94 <HAL_RCC_OscConfig+0x470>)
 8003936:	f023 0301 	bic.w	r3, r3, #1
 800393a:	6713      	str	r3, [r2, #112]	; 0x70
 800393c:	4b55      	ldr	r3, [pc, #340]	; (8003a94 <HAL_RCC_OscConfig+0x470>)
 800393e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003940:	4a54      	ldr	r2, [pc, #336]	; (8003a94 <HAL_RCC_OscConfig+0x470>)
 8003942:	f023 0304 	bic.w	r3, r3, #4
 8003946:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d015      	beq.n	800397c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003950:	f7fe fec8 	bl	80026e4 <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003956:	e00a      	b.n	800396e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003958:	f7fe fec4 	bl	80026e4 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	f241 3288 	movw	r2, #5000	; 0x1388
 8003966:	4293      	cmp	r3, r2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e0cb      	b.n	8003b06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800396e:	4b49      	ldr	r3, [pc, #292]	; (8003a94 <HAL_RCC_OscConfig+0x470>)
 8003970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d0ee      	beq.n	8003958 <HAL_RCC_OscConfig+0x334>
 800397a:	e014      	b.n	80039a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800397c:	f7fe feb2 	bl	80026e4 <HAL_GetTick>
 8003980:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003982:	e00a      	b.n	800399a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003984:	f7fe feae 	bl	80026e4 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003992:	4293      	cmp	r3, r2
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e0b5      	b.n	8003b06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800399a:	4b3e      	ldr	r3, [pc, #248]	; (8003a94 <HAL_RCC_OscConfig+0x470>)
 800399c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1ee      	bne.n	8003984 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039a6:	7dfb      	ldrb	r3, [r7, #23]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d105      	bne.n	80039b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039ac:	4b39      	ldr	r3, [pc, #228]	; (8003a94 <HAL_RCC_OscConfig+0x470>)
 80039ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b0:	4a38      	ldr	r2, [pc, #224]	; (8003a94 <HAL_RCC_OscConfig+0x470>)
 80039b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f000 80a1 	beq.w	8003b04 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039c2:	4b34      	ldr	r3, [pc, #208]	; (8003a94 <HAL_RCC_OscConfig+0x470>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f003 030c 	and.w	r3, r3, #12
 80039ca:	2b08      	cmp	r3, #8
 80039cc:	d05c      	beq.n	8003a88 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d141      	bne.n	8003a5a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039d6:	4b31      	ldr	r3, [pc, #196]	; (8003a9c <HAL_RCC_OscConfig+0x478>)
 80039d8:	2200      	movs	r2, #0
 80039da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039dc:	f7fe fe82 	bl	80026e4 <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039e2:	e008      	b.n	80039f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039e4:	f7fe fe7e 	bl	80026e4 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e087      	b.n	8003b06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039f6:	4b27      	ldr	r3, [pc, #156]	; (8003a94 <HAL_RCC_OscConfig+0x470>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1f0      	bne.n	80039e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	69da      	ldr	r2, [r3, #28]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	431a      	orrs	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a10:	019b      	lsls	r3, r3, #6
 8003a12:	431a      	orrs	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a18:	085b      	lsrs	r3, r3, #1
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	041b      	lsls	r3, r3, #16
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a24:	061b      	lsls	r3, r3, #24
 8003a26:	491b      	ldr	r1, [pc, #108]	; (8003a94 <HAL_RCC_OscConfig+0x470>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a2c:	4b1b      	ldr	r3, [pc, #108]	; (8003a9c <HAL_RCC_OscConfig+0x478>)
 8003a2e:	2201      	movs	r2, #1
 8003a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a32:	f7fe fe57 	bl	80026e4 <HAL_GetTick>
 8003a36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a38:	e008      	b.n	8003a4c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a3a:	f7fe fe53 	bl	80026e4 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d901      	bls.n	8003a4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e05c      	b.n	8003b06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a4c:	4b11      	ldr	r3, [pc, #68]	; (8003a94 <HAL_RCC_OscConfig+0x470>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0f0      	beq.n	8003a3a <HAL_RCC_OscConfig+0x416>
 8003a58:	e054      	b.n	8003b04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a5a:	4b10      	ldr	r3, [pc, #64]	; (8003a9c <HAL_RCC_OscConfig+0x478>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a60:	f7fe fe40 	bl	80026e4 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a68:	f7fe fe3c 	bl	80026e4 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e045      	b.n	8003b06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a7a:	4b06      	ldr	r3, [pc, #24]	; (8003a94 <HAL_RCC_OscConfig+0x470>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1f0      	bne.n	8003a68 <HAL_RCC_OscConfig+0x444>
 8003a86:	e03d      	b.n	8003b04 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d107      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e038      	b.n	8003b06 <HAL_RCC_OscConfig+0x4e2>
 8003a94:	40023800 	.word	0x40023800
 8003a98:	40007000 	.word	0x40007000
 8003a9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003aa0:	4b1b      	ldr	r3, [pc, #108]	; (8003b10 <HAL_RCC_OscConfig+0x4ec>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d028      	beq.n	8003b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d121      	bne.n	8003b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d11a      	bne.n	8003b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ad6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d111      	bne.n	8003b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae6:	085b      	lsrs	r3, r3, #1
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d107      	bne.n	8003b00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d001      	beq.n	8003b04 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e000      	b.n	8003b06 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3718      	adds	r7, #24
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	40023800 	.word	0x40023800

08003b14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d101      	bne.n	8003b28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e0cc      	b.n	8003cc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b28:	4b68      	ldr	r3, [pc, #416]	; (8003ccc <HAL_RCC_ClockConfig+0x1b8>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0307 	and.w	r3, r3, #7
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d90c      	bls.n	8003b50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b36:	4b65      	ldr	r3, [pc, #404]	; (8003ccc <HAL_RCC_ClockConfig+0x1b8>)
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	b2d2      	uxtb	r2, r2
 8003b3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b3e:	4b63      	ldr	r3, [pc, #396]	; (8003ccc <HAL_RCC_ClockConfig+0x1b8>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0307 	and.w	r3, r3, #7
 8003b46:	683a      	ldr	r2, [r7, #0]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d001      	beq.n	8003b50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e0b8      	b.n	8003cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0302 	and.w	r3, r3, #2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d020      	beq.n	8003b9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0304 	and.w	r3, r3, #4
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d005      	beq.n	8003b74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b68:	4b59      	ldr	r3, [pc, #356]	; (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	4a58      	ldr	r2, [pc, #352]	; (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0308 	and.w	r3, r3, #8
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d005      	beq.n	8003b8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b80:	4b53      	ldr	r3, [pc, #332]	; (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	4a52      	ldr	r2, [pc, #328]	; (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b8c:	4b50      	ldr	r3, [pc, #320]	; (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	494d      	ldr	r1, [pc, #308]	; (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d044      	beq.n	8003c34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d107      	bne.n	8003bc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bb2:	4b47      	ldr	r3, [pc, #284]	; (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d119      	bne.n	8003bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e07f      	b.n	8003cc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d003      	beq.n	8003bd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bce:	2b03      	cmp	r3, #3
 8003bd0:	d107      	bne.n	8003be2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bd2:	4b3f      	ldr	r3, [pc, #252]	; (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d109      	bne.n	8003bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e06f      	b.n	8003cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003be2:	4b3b      	ldr	r3, [pc, #236]	; (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e067      	b.n	8003cc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bf2:	4b37      	ldr	r3, [pc, #220]	; (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f023 0203 	bic.w	r2, r3, #3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	4934      	ldr	r1, [pc, #208]	; (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c04:	f7fe fd6e 	bl	80026e4 <HAL_GetTick>
 8003c08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c0a:	e00a      	b.n	8003c22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c0c:	f7fe fd6a 	bl	80026e4 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e04f      	b.n	8003cc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c22:	4b2b      	ldr	r3, [pc, #172]	; (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f003 020c 	and.w	r2, r3, #12
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d1eb      	bne.n	8003c0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c34:	4b25      	ldr	r3, [pc, #148]	; (8003ccc <HAL_RCC_ClockConfig+0x1b8>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0307 	and.w	r3, r3, #7
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d20c      	bcs.n	8003c5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c42:	4b22      	ldr	r3, [pc, #136]	; (8003ccc <HAL_RCC_ClockConfig+0x1b8>)
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	b2d2      	uxtb	r2, r2
 8003c48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c4a:	4b20      	ldr	r3, [pc, #128]	; (8003ccc <HAL_RCC_ClockConfig+0x1b8>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0307 	and.w	r3, r3, #7
 8003c52:	683a      	ldr	r2, [r7, #0]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d001      	beq.n	8003c5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e032      	b.n	8003cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0304 	and.w	r3, r3, #4
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d008      	beq.n	8003c7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c68:	4b19      	ldr	r3, [pc, #100]	; (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	4916      	ldr	r1, [pc, #88]	; (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0308 	and.w	r3, r3, #8
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d009      	beq.n	8003c9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c86:	4b12      	ldr	r3, [pc, #72]	; (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	00db      	lsls	r3, r3, #3
 8003c94:	490e      	ldr	r1, [pc, #56]	; (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c9a:	f000 f821 	bl	8003ce0 <HAL_RCC_GetSysClockFreq>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	4b0b      	ldr	r3, [pc, #44]	; (8003cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	091b      	lsrs	r3, r3, #4
 8003ca6:	f003 030f 	and.w	r3, r3, #15
 8003caa:	490a      	ldr	r1, [pc, #40]	; (8003cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003cac:	5ccb      	ldrb	r3, [r1, r3]
 8003cae:	fa22 f303 	lsr.w	r3, r2, r3
 8003cb2:	4a09      	ldr	r2, [pc, #36]	; (8003cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003cb6:	4b09      	ldr	r3, [pc, #36]	; (8003cdc <HAL_RCC_ClockConfig+0x1c8>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7fe fcce 	bl	800265c <HAL_InitTick>

  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	40023c00 	.word	0x40023c00
 8003cd0:	40023800 	.word	0x40023800
 8003cd4:	080066e8 	.word	0x080066e8
 8003cd8:	20000014 	.word	0x20000014
 8003cdc:	20000018 	.word	0x20000018

08003ce0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ce0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ce4:	b094      	sub	sp, #80	; 0x50
 8003ce6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	647b      	str	r3, [r7, #68]	; 0x44
 8003cec:	2300      	movs	r3, #0
 8003cee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cf8:	4b79      	ldr	r3, [pc, #484]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f003 030c 	and.w	r3, r3, #12
 8003d00:	2b08      	cmp	r3, #8
 8003d02:	d00d      	beq.n	8003d20 <HAL_RCC_GetSysClockFreq+0x40>
 8003d04:	2b08      	cmp	r3, #8
 8003d06:	f200 80e1 	bhi.w	8003ecc <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d002      	beq.n	8003d14 <HAL_RCC_GetSysClockFreq+0x34>
 8003d0e:	2b04      	cmp	r3, #4
 8003d10:	d003      	beq.n	8003d1a <HAL_RCC_GetSysClockFreq+0x3a>
 8003d12:	e0db      	b.n	8003ecc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d14:	4b73      	ldr	r3, [pc, #460]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d16:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003d18:	e0db      	b.n	8003ed2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d1a:	4b73      	ldr	r3, [pc, #460]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x208>)
 8003d1c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d1e:	e0d8      	b.n	8003ed2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d20:	4b6f      	ldr	r3, [pc, #444]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d28:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d2a:	4b6d      	ldr	r3, [pc, #436]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d063      	beq.n	8003dfe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d36:	4b6a      	ldr	r3, [pc, #424]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	099b      	lsrs	r3, r3, #6
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d40:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d48:	633b      	str	r3, [r7, #48]	; 0x30
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	637b      	str	r3, [r7, #52]	; 0x34
 8003d4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003d52:	4622      	mov	r2, r4
 8003d54:	462b      	mov	r3, r5
 8003d56:	f04f 0000 	mov.w	r0, #0
 8003d5a:	f04f 0100 	mov.w	r1, #0
 8003d5e:	0159      	lsls	r1, r3, #5
 8003d60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d64:	0150      	lsls	r0, r2, #5
 8003d66:	4602      	mov	r2, r0
 8003d68:	460b      	mov	r3, r1
 8003d6a:	4621      	mov	r1, r4
 8003d6c:	1a51      	subs	r1, r2, r1
 8003d6e:	6139      	str	r1, [r7, #16]
 8003d70:	4629      	mov	r1, r5
 8003d72:	eb63 0301 	sbc.w	r3, r3, r1
 8003d76:	617b      	str	r3, [r7, #20]
 8003d78:	f04f 0200 	mov.w	r2, #0
 8003d7c:	f04f 0300 	mov.w	r3, #0
 8003d80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d84:	4659      	mov	r1, fp
 8003d86:	018b      	lsls	r3, r1, #6
 8003d88:	4651      	mov	r1, sl
 8003d8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d8e:	4651      	mov	r1, sl
 8003d90:	018a      	lsls	r2, r1, #6
 8003d92:	4651      	mov	r1, sl
 8003d94:	ebb2 0801 	subs.w	r8, r2, r1
 8003d98:	4659      	mov	r1, fp
 8003d9a:	eb63 0901 	sbc.w	r9, r3, r1
 8003d9e:	f04f 0200 	mov.w	r2, #0
 8003da2:	f04f 0300 	mov.w	r3, #0
 8003da6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003daa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003db2:	4690      	mov	r8, r2
 8003db4:	4699      	mov	r9, r3
 8003db6:	4623      	mov	r3, r4
 8003db8:	eb18 0303 	adds.w	r3, r8, r3
 8003dbc:	60bb      	str	r3, [r7, #8]
 8003dbe:	462b      	mov	r3, r5
 8003dc0:	eb49 0303 	adc.w	r3, r9, r3
 8003dc4:	60fb      	str	r3, [r7, #12]
 8003dc6:	f04f 0200 	mov.w	r2, #0
 8003dca:	f04f 0300 	mov.w	r3, #0
 8003dce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003dd2:	4629      	mov	r1, r5
 8003dd4:	024b      	lsls	r3, r1, #9
 8003dd6:	4621      	mov	r1, r4
 8003dd8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ddc:	4621      	mov	r1, r4
 8003dde:	024a      	lsls	r2, r1, #9
 8003de0:	4610      	mov	r0, r2
 8003de2:	4619      	mov	r1, r3
 8003de4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003de6:	2200      	movs	r2, #0
 8003de8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003dec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003df0:	f7fc fe3c 	bl	8000a6c <__aeabi_uldivmod>
 8003df4:	4602      	mov	r2, r0
 8003df6:	460b      	mov	r3, r1
 8003df8:	4613      	mov	r3, r2
 8003dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dfc:	e058      	b.n	8003eb0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dfe:	4b38      	ldr	r3, [pc, #224]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	099b      	lsrs	r3, r3, #6
 8003e04:	2200      	movs	r2, #0
 8003e06:	4618      	mov	r0, r3
 8003e08:	4611      	mov	r1, r2
 8003e0a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e0e:	623b      	str	r3, [r7, #32]
 8003e10:	2300      	movs	r3, #0
 8003e12:	627b      	str	r3, [r7, #36]	; 0x24
 8003e14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e18:	4642      	mov	r2, r8
 8003e1a:	464b      	mov	r3, r9
 8003e1c:	f04f 0000 	mov.w	r0, #0
 8003e20:	f04f 0100 	mov.w	r1, #0
 8003e24:	0159      	lsls	r1, r3, #5
 8003e26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e2a:	0150      	lsls	r0, r2, #5
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	460b      	mov	r3, r1
 8003e30:	4641      	mov	r1, r8
 8003e32:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e36:	4649      	mov	r1, r9
 8003e38:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e3c:	f04f 0200 	mov.w	r2, #0
 8003e40:	f04f 0300 	mov.w	r3, #0
 8003e44:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e48:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e4c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e50:	ebb2 040a 	subs.w	r4, r2, sl
 8003e54:	eb63 050b 	sbc.w	r5, r3, fp
 8003e58:	f04f 0200 	mov.w	r2, #0
 8003e5c:	f04f 0300 	mov.w	r3, #0
 8003e60:	00eb      	lsls	r3, r5, #3
 8003e62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e66:	00e2      	lsls	r2, r4, #3
 8003e68:	4614      	mov	r4, r2
 8003e6a:	461d      	mov	r5, r3
 8003e6c:	4643      	mov	r3, r8
 8003e6e:	18e3      	adds	r3, r4, r3
 8003e70:	603b      	str	r3, [r7, #0]
 8003e72:	464b      	mov	r3, r9
 8003e74:	eb45 0303 	adc.w	r3, r5, r3
 8003e78:	607b      	str	r3, [r7, #4]
 8003e7a:	f04f 0200 	mov.w	r2, #0
 8003e7e:	f04f 0300 	mov.w	r3, #0
 8003e82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e86:	4629      	mov	r1, r5
 8003e88:	028b      	lsls	r3, r1, #10
 8003e8a:	4621      	mov	r1, r4
 8003e8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e90:	4621      	mov	r1, r4
 8003e92:	028a      	lsls	r2, r1, #10
 8003e94:	4610      	mov	r0, r2
 8003e96:	4619      	mov	r1, r3
 8003e98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	61bb      	str	r3, [r7, #24]
 8003e9e:	61fa      	str	r2, [r7, #28]
 8003ea0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ea4:	f7fc fde2 	bl	8000a6c <__aeabi_uldivmod>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	460b      	mov	r3, r1
 8003eac:	4613      	mov	r3, r2
 8003eae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003eb0:	4b0b      	ldr	r3, [pc, #44]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	0c1b      	lsrs	r3, r3, #16
 8003eb6:	f003 0303 	and.w	r3, r3, #3
 8003eba:	3301      	adds	r3, #1
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003ec0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ec2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003eca:	e002      	b.n	8003ed2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ecc:	4b05      	ldr	r3, [pc, #20]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ece:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ed0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ed2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3750      	adds	r7, #80	; 0x50
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ede:	bf00      	nop
 8003ee0:	40023800 	.word	0x40023800
 8003ee4:	00f42400 	.word	0x00f42400
 8003ee8:	007a1200 	.word	0x007a1200

08003eec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ef0:	4b03      	ldr	r3, [pc, #12]	; (8003f00 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	20000014 	.word	0x20000014

08003f04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f08:	f7ff fff0 	bl	8003eec <HAL_RCC_GetHCLKFreq>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	4b05      	ldr	r3, [pc, #20]	; (8003f24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	0a9b      	lsrs	r3, r3, #10
 8003f14:	f003 0307 	and.w	r3, r3, #7
 8003f18:	4903      	ldr	r1, [pc, #12]	; (8003f28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f1a:	5ccb      	ldrb	r3, [r1, r3]
 8003f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	40023800 	.word	0x40023800
 8003f28:	080066f8 	.word	0x080066f8

08003f2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f30:	f7ff ffdc 	bl	8003eec <HAL_RCC_GetHCLKFreq>
 8003f34:	4602      	mov	r2, r0
 8003f36:	4b05      	ldr	r3, [pc, #20]	; (8003f4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	0b5b      	lsrs	r3, r3, #13
 8003f3c:	f003 0307 	and.w	r3, r3, #7
 8003f40:	4903      	ldr	r1, [pc, #12]	; (8003f50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f42:	5ccb      	ldrb	r3, [r1, r3]
 8003f44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	40023800 	.word	0x40023800
 8003f50:	080066f8 	.word	0x080066f8

08003f54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e041      	b.n	8003fea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d106      	bne.n	8003f80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f7fe f86a 	bl	8002054 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2202      	movs	r2, #2
 8003f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	3304      	adds	r3, #4
 8003f90:	4619      	mov	r1, r3
 8003f92:	4610      	mov	r0, r2
 8003f94:	f000 fc34 	bl	8004800 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3708      	adds	r7, #8
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b082      	sub	sp, #8
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d101      	bne.n	8004004 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e041      	b.n	8004088 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800400a:	b2db      	uxtb	r3, r3
 800400c:	2b00      	cmp	r3, #0
 800400e:	d106      	bne.n	800401e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 f839 	bl	8004090 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2202      	movs	r2, #2
 8004022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	3304      	adds	r3, #4
 800402e:	4619      	mov	r1, r3
 8004030:	4610      	mov	r0, r2
 8004032:	f000 fbe5 	bl	8004800 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2201      	movs	r2, #1
 800406a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3708      	adds	r7, #8
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040ae:	2300      	movs	r3, #0
 80040b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d104      	bne.n	80040c2 <HAL_TIM_IC_Start_IT+0x1e>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	e013      	b.n	80040ea <HAL_TIM_IC_Start_IT+0x46>
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	2b04      	cmp	r3, #4
 80040c6:	d104      	bne.n	80040d2 <HAL_TIM_IC_Start_IT+0x2e>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	e00b      	b.n	80040ea <HAL_TIM_IC_Start_IT+0x46>
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	2b08      	cmp	r3, #8
 80040d6:	d104      	bne.n	80040e2 <HAL_TIM_IC_Start_IT+0x3e>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	e003      	b.n	80040ea <HAL_TIM_IC_Start_IT+0x46>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d104      	bne.n	80040fc <HAL_TIM_IC_Start_IT+0x58>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	e013      	b.n	8004124 <HAL_TIM_IC_Start_IT+0x80>
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	2b04      	cmp	r3, #4
 8004100:	d104      	bne.n	800410c <HAL_TIM_IC_Start_IT+0x68>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004108:	b2db      	uxtb	r3, r3
 800410a:	e00b      	b.n	8004124 <HAL_TIM_IC_Start_IT+0x80>
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	2b08      	cmp	r3, #8
 8004110:	d104      	bne.n	800411c <HAL_TIM_IC_Start_IT+0x78>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004118:	b2db      	uxtb	r3, r3
 800411a:	e003      	b.n	8004124 <HAL_TIM_IC_Start_IT+0x80>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004122:	b2db      	uxtb	r3, r3
 8004124:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004126:	7bbb      	ldrb	r3, [r7, #14]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d102      	bne.n	8004132 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800412c:	7b7b      	ldrb	r3, [r7, #13]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d001      	beq.n	8004136 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e0c2      	b.n	80042bc <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d104      	bne.n	8004146 <HAL_TIM_IC_Start_IT+0xa2>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2202      	movs	r2, #2
 8004140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004144:	e013      	b.n	800416e <HAL_TIM_IC_Start_IT+0xca>
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	2b04      	cmp	r3, #4
 800414a:	d104      	bne.n	8004156 <HAL_TIM_IC_Start_IT+0xb2>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2202      	movs	r2, #2
 8004150:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004154:	e00b      	b.n	800416e <HAL_TIM_IC_Start_IT+0xca>
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	2b08      	cmp	r3, #8
 800415a:	d104      	bne.n	8004166 <HAL_TIM_IC_Start_IT+0xc2>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2202      	movs	r2, #2
 8004160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004164:	e003      	b.n	800416e <HAL_TIM_IC_Start_IT+0xca>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2202      	movs	r2, #2
 800416a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d104      	bne.n	800417e <HAL_TIM_IC_Start_IT+0xda>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2202      	movs	r2, #2
 8004178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800417c:	e013      	b.n	80041a6 <HAL_TIM_IC_Start_IT+0x102>
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	2b04      	cmp	r3, #4
 8004182:	d104      	bne.n	800418e <HAL_TIM_IC_Start_IT+0xea>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2202      	movs	r2, #2
 8004188:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800418c:	e00b      	b.n	80041a6 <HAL_TIM_IC_Start_IT+0x102>
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	2b08      	cmp	r3, #8
 8004192:	d104      	bne.n	800419e <HAL_TIM_IC_Start_IT+0xfa>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2202      	movs	r2, #2
 8004198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800419c:	e003      	b.n	80041a6 <HAL_TIM_IC_Start_IT+0x102>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2202      	movs	r2, #2
 80041a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	2b0c      	cmp	r3, #12
 80041aa:	d841      	bhi.n	8004230 <HAL_TIM_IC_Start_IT+0x18c>
 80041ac:	a201      	add	r2, pc, #4	; (adr r2, 80041b4 <HAL_TIM_IC_Start_IT+0x110>)
 80041ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b2:	bf00      	nop
 80041b4:	080041e9 	.word	0x080041e9
 80041b8:	08004231 	.word	0x08004231
 80041bc:	08004231 	.word	0x08004231
 80041c0:	08004231 	.word	0x08004231
 80041c4:	080041fb 	.word	0x080041fb
 80041c8:	08004231 	.word	0x08004231
 80041cc:	08004231 	.word	0x08004231
 80041d0:	08004231 	.word	0x08004231
 80041d4:	0800420d 	.word	0x0800420d
 80041d8:	08004231 	.word	0x08004231
 80041dc:	08004231 	.word	0x08004231
 80041e0:	08004231 	.word	0x08004231
 80041e4:	0800421f 	.word	0x0800421f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68da      	ldr	r2, [r3, #12]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f042 0202 	orr.w	r2, r2, #2
 80041f6:	60da      	str	r2, [r3, #12]
      break;
 80041f8:	e01d      	b.n	8004236 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68da      	ldr	r2, [r3, #12]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f042 0204 	orr.w	r2, r2, #4
 8004208:	60da      	str	r2, [r3, #12]
      break;
 800420a:	e014      	b.n	8004236 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68da      	ldr	r2, [r3, #12]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f042 0208 	orr.w	r2, r2, #8
 800421a:	60da      	str	r2, [r3, #12]
      break;
 800421c:	e00b      	b.n	8004236 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68da      	ldr	r2, [r3, #12]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f042 0210 	orr.w	r2, r2, #16
 800422c:	60da      	str	r2, [r3, #12]
      break;
 800422e:	e002      	b.n	8004236 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	73fb      	strb	r3, [r7, #15]
      break;
 8004234:	bf00      	nop
  }

  if (status == HAL_OK)
 8004236:	7bfb      	ldrb	r3, [r7, #15]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d13e      	bne.n	80042ba <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2201      	movs	r2, #1
 8004242:	6839      	ldr	r1, [r7, #0]
 8004244:	4618      	mov	r0, r3
 8004246:	f000 fd13 	bl	8004c70 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a1d      	ldr	r2, [pc, #116]	; (80042c4 <HAL_TIM_IC_Start_IT+0x220>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d018      	beq.n	8004286 <HAL_TIM_IC_Start_IT+0x1e2>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800425c:	d013      	beq.n	8004286 <HAL_TIM_IC_Start_IT+0x1e2>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a19      	ldr	r2, [pc, #100]	; (80042c8 <HAL_TIM_IC_Start_IT+0x224>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d00e      	beq.n	8004286 <HAL_TIM_IC_Start_IT+0x1e2>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a17      	ldr	r2, [pc, #92]	; (80042cc <HAL_TIM_IC_Start_IT+0x228>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d009      	beq.n	8004286 <HAL_TIM_IC_Start_IT+0x1e2>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a16      	ldr	r2, [pc, #88]	; (80042d0 <HAL_TIM_IC_Start_IT+0x22c>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d004      	beq.n	8004286 <HAL_TIM_IC_Start_IT+0x1e2>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a14      	ldr	r2, [pc, #80]	; (80042d4 <HAL_TIM_IC_Start_IT+0x230>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d111      	bne.n	80042aa <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f003 0307 	and.w	r3, r3, #7
 8004290:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	2b06      	cmp	r3, #6
 8004296:	d010      	beq.n	80042ba <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f042 0201 	orr.w	r2, r2, #1
 80042a6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042a8:	e007      	b.n	80042ba <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f042 0201 	orr.w	r2, r2, #1
 80042b8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80042ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3710      	adds	r7, #16
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	40010000 	.word	0x40010000
 80042c8:	40000400 	.word	0x40000400
 80042cc:	40000800 	.word	0x40000800
 80042d0:	40000c00 	.word	0x40000c00
 80042d4:	40014000 	.word	0x40014000

080042d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d122      	bne.n	8004334 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d11b      	bne.n	8004334 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f06f 0202 	mvn.w	r2, #2
 8004304:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	f003 0303 	and.w	r3, r3, #3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d003      	beq.n	8004322 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f7fd f898 	bl	8001450 <HAL_TIM_IC_CaptureCallback>
 8004320:	e005      	b.n	800432e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 fa4d 	bl	80047c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 fa54 	bl	80047d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	f003 0304 	and.w	r3, r3, #4
 800433e:	2b04      	cmp	r3, #4
 8004340:	d122      	bne.n	8004388 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	f003 0304 	and.w	r3, r3, #4
 800434c:	2b04      	cmp	r3, #4
 800434e:	d11b      	bne.n	8004388 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f06f 0204 	mvn.w	r2, #4
 8004358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2202      	movs	r2, #2
 800435e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800436a:	2b00      	cmp	r3, #0
 800436c:	d003      	beq.n	8004376 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f7fd f86e 	bl	8001450 <HAL_TIM_IC_CaptureCallback>
 8004374:	e005      	b.n	8004382 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 fa23 	bl	80047c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 fa2a 	bl	80047d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	f003 0308 	and.w	r3, r3, #8
 8004392:	2b08      	cmp	r3, #8
 8004394:	d122      	bne.n	80043dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	f003 0308 	and.w	r3, r3, #8
 80043a0:	2b08      	cmp	r3, #8
 80043a2:	d11b      	bne.n	80043dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f06f 0208 	mvn.w	r2, #8
 80043ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2204      	movs	r2, #4
 80043b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	f003 0303 	and.w	r3, r3, #3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d003      	beq.n	80043ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f7fd f844 	bl	8001450 <HAL_TIM_IC_CaptureCallback>
 80043c8:	e005      	b.n	80043d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f9f9 	bl	80047c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 fa00 	bl	80047d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	f003 0310 	and.w	r3, r3, #16
 80043e6:	2b10      	cmp	r3, #16
 80043e8:	d122      	bne.n	8004430 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	f003 0310 	and.w	r3, r3, #16
 80043f4:	2b10      	cmp	r3, #16
 80043f6:	d11b      	bne.n	8004430 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f06f 0210 	mvn.w	r2, #16
 8004400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2208      	movs	r2, #8
 8004406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	69db      	ldr	r3, [r3, #28]
 800440e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004412:	2b00      	cmp	r3, #0
 8004414:	d003      	beq.n	800441e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f7fd f81a 	bl	8001450 <HAL_TIM_IC_CaptureCallback>
 800441c:	e005      	b.n	800442a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 f9cf 	bl	80047c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 f9d6 	bl	80047d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b01      	cmp	r3, #1
 800443c:	d10e      	bne.n	800445c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	f003 0301 	and.w	r3, r3, #1
 8004448:	2b01      	cmp	r3, #1
 800444a:	d107      	bne.n	800445c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f06f 0201 	mvn.w	r2, #1
 8004454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f9a9 	bl	80047ae <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004466:	2b80      	cmp	r3, #128	; 0x80
 8004468:	d10e      	bne.n	8004488 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004474:	2b80      	cmp	r3, #128	; 0x80
 8004476:	d107      	bne.n	8004488 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 fc92 	bl	8004dac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004492:	2b40      	cmp	r3, #64	; 0x40
 8004494:	d10e      	bne.n	80044b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a0:	2b40      	cmp	r3, #64	; 0x40
 80044a2:	d107      	bne.n	80044b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f99b 	bl	80047ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	f003 0320 	and.w	r3, r3, #32
 80044be:	2b20      	cmp	r3, #32
 80044c0:	d10e      	bne.n	80044e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	f003 0320 	and.w	r3, r3, #32
 80044cc:	2b20      	cmp	r3, #32
 80044ce:	d107      	bne.n	80044e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f06f 0220 	mvn.w	r2, #32
 80044d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 fc5c 	bl	8004d98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044e0:	bf00      	nop
 80044e2:	3708      	adds	r7, #8
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b086      	sub	sp, #24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044f4:	2300      	movs	r3, #0
 80044f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d101      	bne.n	8004506 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004502:	2302      	movs	r3, #2
 8004504:	e088      	b.n	8004618 <HAL_TIM_IC_ConfigChannel+0x130>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2201      	movs	r2, #1
 800450a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d11b      	bne.n	800454c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6818      	ldr	r0, [r3, #0]
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	6819      	ldr	r1, [r3, #0]
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	685a      	ldr	r2, [r3, #4]
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	f000 f9ec 	bl	8004900 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	699a      	ldr	r2, [r3, #24]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f022 020c 	bic.w	r2, r2, #12
 8004536:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	6999      	ldr	r1, [r3, #24]
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	689a      	ldr	r2, [r3, #8]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	430a      	orrs	r2, r1
 8004548:	619a      	str	r2, [r3, #24]
 800454a:	e060      	b.n	800460e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2b04      	cmp	r3, #4
 8004550:	d11c      	bne.n	800458c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6818      	ldr	r0, [r3, #0]
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	6819      	ldr	r1, [r3, #0]
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	685a      	ldr	r2, [r3, #4]
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	f000 fa64 	bl	8004a2e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	699a      	ldr	r2, [r3, #24]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004574:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	6999      	ldr	r1, [r3, #24]
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	021a      	lsls	r2, r3, #8
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	619a      	str	r2, [r3, #24]
 800458a:	e040      	b.n	800460e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b08      	cmp	r3, #8
 8004590:	d11b      	bne.n	80045ca <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6818      	ldr	r0, [r3, #0]
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	6819      	ldr	r1, [r3, #0]
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	f000 fab1 	bl	8004b08 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	69da      	ldr	r2, [r3, #28]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f022 020c 	bic.w	r2, r2, #12
 80045b4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	69d9      	ldr	r1, [r3, #28]
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	689a      	ldr	r2, [r3, #8]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	430a      	orrs	r2, r1
 80045c6:	61da      	str	r2, [r3, #28]
 80045c8:	e021      	b.n	800460e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b0c      	cmp	r3, #12
 80045ce:	d11c      	bne.n	800460a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6818      	ldr	r0, [r3, #0]
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	6819      	ldr	r1, [r3, #0]
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	685a      	ldr	r2, [r3, #4]
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	f000 face 	bl	8004b80 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	69da      	ldr	r2, [r3, #28]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80045f2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	69d9      	ldr	r1, [r3, #28]
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	021a      	lsls	r2, r3, #8
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	430a      	orrs	r2, r1
 8004606:	61da      	str	r2, [r3, #28]
 8004608:	e001      	b.n	800460e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004616:	7dfb      	ldrb	r3, [r7, #23]
}
 8004618:	4618      	mov	r0, r3
 800461a:	3718      	adds	r7, #24
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800462a:	2300      	movs	r3, #0
 800462c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004634:	2b01      	cmp	r3, #1
 8004636:	d101      	bne.n	800463c <HAL_TIM_ConfigClockSource+0x1c>
 8004638:	2302      	movs	r3, #2
 800463a:	e0b4      	b.n	80047a6 <HAL_TIM_ConfigClockSource+0x186>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2202      	movs	r2, #2
 8004648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800465a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004662:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004674:	d03e      	beq.n	80046f4 <HAL_TIM_ConfigClockSource+0xd4>
 8004676:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800467a:	f200 8087 	bhi.w	800478c <HAL_TIM_ConfigClockSource+0x16c>
 800467e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004682:	f000 8086 	beq.w	8004792 <HAL_TIM_ConfigClockSource+0x172>
 8004686:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800468a:	d87f      	bhi.n	800478c <HAL_TIM_ConfigClockSource+0x16c>
 800468c:	2b70      	cmp	r3, #112	; 0x70
 800468e:	d01a      	beq.n	80046c6 <HAL_TIM_ConfigClockSource+0xa6>
 8004690:	2b70      	cmp	r3, #112	; 0x70
 8004692:	d87b      	bhi.n	800478c <HAL_TIM_ConfigClockSource+0x16c>
 8004694:	2b60      	cmp	r3, #96	; 0x60
 8004696:	d050      	beq.n	800473a <HAL_TIM_ConfigClockSource+0x11a>
 8004698:	2b60      	cmp	r3, #96	; 0x60
 800469a:	d877      	bhi.n	800478c <HAL_TIM_ConfigClockSource+0x16c>
 800469c:	2b50      	cmp	r3, #80	; 0x50
 800469e:	d03c      	beq.n	800471a <HAL_TIM_ConfigClockSource+0xfa>
 80046a0:	2b50      	cmp	r3, #80	; 0x50
 80046a2:	d873      	bhi.n	800478c <HAL_TIM_ConfigClockSource+0x16c>
 80046a4:	2b40      	cmp	r3, #64	; 0x40
 80046a6:	d058      	beq.n	800475a <HAL_TIM_ConfigClockSource+0x13a>
 80046a8:	2b40      	cmp	r3, #64	; 0x40
 80046aa:	d86f      	bhi.n	800478c <HAL_TIM_ConfigClockSource+0x16c>
 80046ac:	2b30      	cmp	r3, #48	; 0x30
 80046ae:	d064      	beq.n	800477a <HAL_TIM_ConfigClockSource+0x15a>
 80046b0:	2b30      	cmp	r3, #48	; 0x30
 80046b2:	d86b      	bhi.n	800478c <HAL_TIM_ConfigClockSource+0x16c>
 80046b4:	2b20      	cmp	r3, #32
 80046b6:	d060      	beq.n	800477a <HAL_TIM_ConfigClockSource+0x15a>
 80046b8:	2b20      	cmp	r3, #32
 80046ba:	d867      	bhi.n	800478c <HAL_TIM_ConfigClockSource+0x16c>
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d05c      	beq.n	800477a <HAL_TIM_ConfigClockSource+0x15a>
 80046c0:	2b10      	cmp	r3, #16
 80046c2:	d05a      	beq.n	800477a <HAL_TIM_ConfigClockSource+0x15a>
 80046c4:	e062      	b.n	800478c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6818      	ldr	r0, [r3, #0]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	6899      	ldr	r1, [r3, #8]
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	685a      	ldr	r2, [r3, #4]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	f000 faab 	bl	8004c30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68ba      	ldr	r2, [r7, #8]
 80046f0:	609a      	str	r2, [r3, #8]
      break;
 80046f2:	e04f      	b.n	8004794 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6818      	ldr	r0, [r3, #0]
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	6899      	ldr	r1, [r3, #8]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	685a      	ldr	r2, [r3, #4]
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	f000 fa94 	bl	8004c30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	689a      	ldr	r2, [r3, #8]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004716:	609a      	str	r2, [r3, #8]
      break;
 8004718:	e03c      	b.n	8004794 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6818      	ldr	r0, [r3, #0]
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	6859      	ldr	r1, [r3, #4]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	461a      	mov	r2, r3
 8004728:	f000 f952 	bl	80049d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2150      	movs	r1, #80	; 0x50
 8004732:	4618      	mov	r0, r3
 8004734:	f000 fa61 	bl	8004bfa <TIM_ITRx_SetConfig>
      break;
 8004738:	e02c      	b.n	8004794 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6818      	ldr	r0, [r3, #0]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	6859      	ldr	r1, [r3, #4]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	461a      	mov	r2, r3
 8004748:	f000 f9ae 	bl	8004aa8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2160      	movs	r1, #96	; 0x60
 8004752:	4618      	mov	r0, r3
 8004754:	f000 fa51 	bl	8004bfa <TIM_ITRx_SetConfig>
      break;
 8004758:	e01c      	b.n	8004794 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6818      	ldr	r0, [r3, #0]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	6859      	ldr	r1, [r3, #4]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	461a      	mov	r2, r3
 8004768:	f000 f932 	bl	80049d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2140      	movs	r1, #64	; 0x40
 8004772:	4618      	mov	r0, r3
 8004774:	f000 fa41 	bl	8004bfa <TIM_ITRx_SetConfig>
      break;
 8004778:	e00c      	b.n	8004794 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4619      	mov	r1, r3
 8004784:	4610      	mov	r0, r2
 8004786:	f000 fa38 	bl	8004bfa <TIM_ITRx_SetConfig>
      break;
 800478a:	e003      	b.n	8004794 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	73fb      	strb	r3, [r7, #15]
      break;
 8004790:	e000      	b.n	8004794 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004792:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b083      	sub	sp, #12
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80047b6:	bf00      	nop
 80047b8:	370c      	adds	r7, #12
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr

080047c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047c2:	b480      	push	{r7}
 80047c4:	b083      	sub	sp, #12
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047ca:	bf00      	nop
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr

080047d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047d6:	b480      	push	{r7}
 80047d8:	b083      	sub	sp, #12
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047de:	bf00      	nop
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr

080047ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047ea:	b480      	push	{r7}
 80047ec:	b083      	sub	sp, #12
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047f2:	bf00      	nop
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
	...

08004800 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a34      	ldr	r2, [pc, #208]	; (80048e4 <TIM_Base_SetConfig+0xe4>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d00f      	beq.n	8004838 <TIM_Base_SetConfig+0x38>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800481e:	d00b      	beq.n	8004838 <TIM_Base_SetConfig+0x38>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a31      	ldr	r2, [pc, #196]	; (80048e8 <TIM_Base_SetConfig+0xe8>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d007      	beq.n	8004838 <TIM_Base_SetConfig+0x38>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a30      	ldr	r2, [pc, #192]	; (80048ec <TIM_Base_SetConfig+0xec>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d003      	beq.n	8004838 <TIM_Base_SetConfig+0x38>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a2f      	ldr	r2, [pc, #188]	; (80048f0 <TIM_Base_SetConfig+0xf0>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d108      	bne.n	800484a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800483e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	4313      	orrs	r3, r2
 8004848:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a25      	ldr	r2, [pc, #148]	; (80048e4 <TIM_Base_SetConfig+0xe4>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d01b      	beq.n	800488a <TIM_Base_SetConfig+0x8a>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004858:	d017      	beq.n	800488a <TIM_Base_SetConfig+0x8a>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a22      	ldr	r2, [pc, #136]	; (80048e8 <TIM_Base_SetConfig+0xe8>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d013      	beq.n	800488a <TIM_Base_SetConfig+0x8a>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a21      	ldr	r2, [pc, #132]	; (80048ec <TIM_Base_SetConfig+0xec>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d00f      	beq.n	800488a <TIM_Base_SetConfig+0x8a>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a20      	ldr	r2, [pc, #128]	; (80048f0 <TIM_Base_SetConfig+0xf0>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d00b      	beq.n	800488a <TIM_Base_SetConfig+0x8a>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a1f      	ldr	r2, [pc, #124]	; (80048f4 <TIM_Base_SetConfig+0xf4>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d007      	beq.n	800488a <TIM_Base_SetConfig+0x8a>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a1e      	ldr	r2, [pc, #120]	; (80048f8 <TIM_Base_SetConfig+0xf8>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d003      	beq.n	800488a <TIM_Base_SetConfig+0x8a>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a1d      	ldr	r2, [pc, #116]	; (80048fc <TIM_Base_SetConfig+0xfc>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d108      	bne.n	800489c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004890:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	4313      	orrs	r3, r2
 800489a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	689a      	ldr	r2, [r3, #8]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a08      	ldr	r2, [pc, #32]	; (80048e4 <TIM_Base_SetConfig+0xe4>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d103      	bne.n	80048d0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	691a      	ldr	r2, [r3, #16]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	615a      	str	r2, [r3, #20]
}
 80048d6:	bf00      	nop
 80048d8:	3714      	adds	r7, #20
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	40010000 	.word	0x40010000
 80048e8:	40000400 	.word	0x40000400
 80048ec:	40000800 	.word	0x40000800
 80048f0:	40000c00 	.word	0x40000c00
 80048f4:	40014000 	.word	0x40014000
 80048f8:	40014400 	.word	0x40014400
 80048fc:	40014800 	.word	0x40014800

08004900 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004900:	b480      	push	{r7}
 8004902:	b087      	sub	sp, #28
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]
 800490c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	f023 0201 	bic.w	r2, r3, #1
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	4a24      	ldr	r2, [pc, #144]	; (80049bc <TIM_TI1_SetConfig+0xbc>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d013      	beq.n	8004956 <TIM_TI1_SetConfig+0x56>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004934:	d00f      	beq.n	8004956 <TIM_TI1_SetConfig+0x56>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	4a21      	ldr	r2, [pc, #132]	; (80049c0 <TIM_TI1_SetConfig+0xc0>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d00b      	beq.n	8004956 <TIM_TI1_SetConfig+0x56>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	4a20      	ldr	r2, [pc, #128]	; (80049c4 <TIM_TI1_SetConfig+0xc4>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d007      	beq.n	8004956 <TIM_TI1_SetConfig+0x56>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	4a1f      	ldr	r2, [pc, #124]	; (80049c8 <TIM_TI1_SetConfig+0xc8>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d003      	beq.n	8004956 <TIM_TI1_SetConfig+0x56>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	4a1e      	ldr	r2, [pc, #120]	; (80049cc <TIM_TI1_SetConfig+0xcc>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d101      	bne.n	800495a <TIM_TI1_SetConfig+0x5a>
 8004956:	2301      	movs	r3, #1
 8004958:	e000      	b.n	800495c <TIM_TI1_SetConfig+0x5c>
 800495a:	2300      	movs	r3, #0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d008      	beq.n	8004972 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	f023 0303 	bic.w	r3, r3, #3
 8004966:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4313      	orrs	r3, r2
 800496e:	617b      	str	r3, [r7, #20]
 8004970:	e003      	b.n	800497a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	f043 0301 	orr.w	r3, r3, #1
 8004978:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004980:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	011b      	lsls	r3, r3, #4
 8004986:	b2db      	uxtb	r3, r3
 8004988:	697a      	ldr	r2, [r7, #20]
 800498a:	4313      	orrs	r3, r2
 800498c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	f023 030a 	bic.w	r3, r3, #10
 8004994:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	f003 030a 	and.w	r3, r3, #10
 800499c:	693a      	ldr	r2, [r7, #16]
 800499e:	4313      	orrs	r3, r2
 80049a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	697a      	ldr	r2, [r7, #20]
 80049a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	621a      	str	r2, [r3, #32]
}
 80049ae:	bf00      	nop
 80049b0:	371c      	adds	r7, #28
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	40010000 	.word	0x40010000
 80049c0:	40000400 	.word	0x40000400
 80049c4:	40000800 	.word	0x40000800
 80049c8:	40000c00 	.word	0x40000c00
 80049cc:	40014000 	.word	0x40014000

080049d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b087      	sub	sp, #28
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6a1b      	ldr	r3, [r3, #32]
 80049e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	f023 0201 	bic.w	r2, r3, #1
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	011b      	lsls	r3, r3, #4
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	f023 030a 	bic.w	r3, r3, #10
 8004a0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a0e:	697a      	ldr	r2, [r7, #20]
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	621a      	str	r2, [r3, #32]
}
 8004a22:	bf00      	nop
 8004a24:	371c      	adds	r7, #28
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr

08004a2e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	b087      	sub	sp, #28
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	60f8      	str	r0, [r7, #12]
 8004a36:	60b9      	str	r1, [r7, #8]
 8004a38:	607a      	str	r2, [r7, #4]
 8004a3a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6a1b      	ldr	r3, [r3, #32]
 8004a40:	f023 0210 	bic.w	r2, r3, #16
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a5a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	021b      	lsls	r3, r3, #8
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	031b      	lsls	r3, r3, #12
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a80:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	011b      	lsls	r3, r3, #4
 8004a86:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	621a      	str	r2, [r3, #32]
}
 8004a9c:	bf00      	nop
 8004a9e:	371c      	adds	r7, #28
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b087      	sub	sp, #28
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
 8004ab8:	f023 0210 	bic.w	r2, r3, #16
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ad2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	031b      	lsls	r3, r3, #12
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ae4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	011b      	lsls	r3, r3, #4
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	621a      	str	r2, [r3, #32]
}
 8004afc:	bf00      	nop
 8004afe:	371c      	adds	r7, #28
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b087      	sub	sp, #28
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	607a      	str	r2, [r7, #4]
 8004b14:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	69db      	ldr	r3, [r3, #28]
 8004b26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6a1b      	ldr	r3, [r3, #32]
 8004b2c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	f023 0303 	bic.w	r3, r3, #3
 8004b34:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b44:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	011b      	lsls	r3, r3, #4
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004b58:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	021b      	lsls	r3, r3, #8
 8004b5e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	621a      	str	r2, [r3, #32]
}
 8004b74:	bf00      	nop
 8004b76:	371c      	adds	r7, #28
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b087      	sub	sp, #28
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	607a      	str	r2, [r7, #4]
 8004b8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6a1b      	ldr	r3, [r3, #32]
 8004b92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	69db      	ldr	r3, [r3, #28]
 8004b9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6a1b      	ldr	r3, [r3, #32]
 8004ba4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	021b      	lsls	r3, r3, #8
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004bbe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	031b      	lsls	r3, r3, #12
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004bd2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	031b      	lsls	r3, r3, #12
 8004bd8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004bdc:	693a      	ldr	r2, [r7, #16]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	697a      	ldr	r2, [r7, #20]
 8004be6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	693a      	ldr	r2, [r7, #16]
 8004bec:	621a      	str	r2, [r3, #32]
}
 8004bee:	bf00      	nop
 8004bf0:	371c      	adds	r7, #28
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b085      	sub	sp, #20
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
 8004c02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c12:	683a      	ldr	r2, [r7, #0]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	f043 0307 	orr.w	r3, r3, #7
 8004c1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	609a      	str	r2, [r3, #8]
}
 8004c24:	bf00      	nop
 8004c26:	3714      	adds	r7, #20
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b087      	sub	sp, #28
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
 8004c3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	021a      	lsls	r2, r3, #8
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	431a      	orrs	r2, r3
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	609a      	str	r2, [r3, #8]
}
 8004c64:	bf00      	nop
 8004c66:	371c      	adds	r7, #28
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b087      	sub	sp, #28
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	f003 031f 	and.w	r3, r3, #31
 8004c82:	2201      	movs	r2, #1
 8004c84:	fa02 f303 	lsl.w	r3, r2, r3
 8004c88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6a1a      	ldr	r2, [r3, #32]
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	43db      	mvns	r3, r3
 8004c92:	401a      	ands	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6a1a      	ldr	r2, [r3, #32]
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	f003 031f 	and.w	r3, r3, #31
 8004ca2:	6879      	ldr	r1, [r7, #4]
 8004ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ca8:	431a      	orrs	r2, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	621a      	str	r2, [r3, #32]
}
 8004cae:	bf00      	nop
 8004cb0:	371c      	adds	r7, #28
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
	...

08004cbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d101      	bne.n	8004cd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	e050      	b.n	8004d76 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2202      	movs	r2, #2
 8004ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a1c      	ldr	r2, [pc, #112]	; (8004d84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d018      	beq.n	8004d4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d20:	d013      	beq.n	8004d4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a18      	ldr	r2, [pc, #96]	; (8004d88 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d00e      	beq.n	8004d4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a16      	ldr	r2, [pc, #88]	; (8004d8c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d009      	beq.n	8004d4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a15      	ldr	r2, [pc, #84]	; (8004d90 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d004      	beq.n	8004d4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a13      	ldr	r2, [pc, #76]	; (8004d94 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d10c      	bne.n	8004d64 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68ba      	ldr	r2, [r7, #8]
 8004d62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3714      	adds	r7, #20
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	40010000 	.word	0x40010000
 8004d88:	40000400 	.word	0x40000400
 8004d8c:	40000800 	.word	0x40000800
 8004d90:	40000c00 	.word	0x40000c00
 8004d94:	40014000 	.word	0x40014000

08004d98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d101      	bne.n	8004dd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e03f      	b.n	8004e52 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d106      	bne.n	8004dec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f7fd f998 	bl	800211c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2224      	movs	r2, #36	; 0x24
 8004df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68da      	ldr	r2, [r3, #12]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 fd23 	bl	8005850 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	691a      	ldr	r2, [r3, #16]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	695a      	ldr	r2, [r3, #20]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68da      	ldr	r2, [r3, #12]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2220      	movs	r2, #32
 8004e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2220      	movs	r2, #32
 8004e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3708      	adds	r7, #8
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}

08004e5a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b085      	sub	sp, #20
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	60f8      	str	r0, [r7, #12]
 8004e62:	60b9      	str	r1, [r7, #8]
 8004e64:	4613      	mov	r3, r2
 8004e66:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	2b20      	cmp	r3, #32
 8004e72:	d130      	bne.n	8004ed6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d002      	beq.n	8004e80 <HAL_UART_Transmit_IT+0x26>
 8004e7a:	88fb      	ldrh	r3, [r7, #6]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d101      	bne.n	8004e84 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e029      	b.n	8004ed8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d101      	bne.n	8004e92 <HAL_UART_Transmit_IT+0x38>
 8004e8e:	2302      	movs	r3, #2
 8004e90:	e022      	b.n	8004ed8 <HAL_UART_Transmit_IT+0x7e>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	68ba      	ldr	r2, [r7, #8]
 8004e9e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	88fa      	ldrh	r2, [r7, #6]
 8004ea4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	88fa      	ldrh	r2, [r7, #6]
 8004eaa:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2221      	movs	r2, #33	; 0x21
 8004eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68da      	ldr	r2, [r3, #12]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ed0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	e000      	b.n	8004ed8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004ed6:	2302      	movs	r3, #2
  }
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3714      	adds	r7, #20
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	2b20      	cmp	r3, #32
 8004efc:	d11d      	bne.n	8004f3a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d002      	beq.n	8004f0a <HAL_UART_Receive_IT+0x26>
 8004f04:	88fb      	ldrh	r3, [r7, #6]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e016      	b.n	8004f3c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d101      	bne.n	8004f1c <HAL_UART_Receive_IT+0x38>
 8004f18:	2302      	movs	r3, #2
 8004f1a:	e00f      	b.n	8004f3c <HAL_UART_Receive_IT+0x58>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004f2a:	88fb      	ldrh	r3, [r7, #6]
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	68b9      	ldr	r1, [r7, #8]
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f000 fab5 	bl	80054a0 <UART_Start_Receive_IT>
 8004f36:	4603      	mov	r3, r0
 8004f38:	e000      	b.n	8004f3c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004f3a:	2302      	movs	r3, #2
  }
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3710      	adds	r7, #16
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b0ba      	sub	sp, #232	; 0xe8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004f70:	2300      	movs	r3, #0
 8004f72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f7a:	f003 030f 	and.w	r3, r3, #15
 8004f7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004f82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d10f      	bne.n	8004faa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f8e:	f003 0320 	and.w	r3, r3, #32
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d009      	beq.n	8004faa <HAL_UART_IRQHandler+0x66>
 8004f96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f9a:	f003 0320 	and.w	r3, r3, #32
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d003      	beq.n	8004faa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 fb99 	bl	80056da <UART_Receive_IT>
      return;
 8004fa8:	e256      	b.n	8005458 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004faa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	f000 80de 	beq.w	8005170 <HAL_UART_IRQHandler+0x22c>
 8004fb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d106      	bne.n	8004fce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004fc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fc4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f000 80d1 	beq.w	8005170 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00b      	beq.n	8004ff2 <HAL_UART_IRQHandler+0xae>
 8004fda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d005      	beq.n	8004ff2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fea:	f043 0201 	orr.w	r2, r3, #1
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ff6:	f003 0304 	and.w	r3, r3, #4
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00b      	beq.n	8005016 <HAL_UART_IRQHandler+0xd2>
 8004ffe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005002:	f003 0301 	and.w	r3, r3, #1
 8005006:	2b00      	cmp	r3, #0
 8005008:	d005      	beq.n	8005016 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500e:	f043 0202 	orr.w	r2, r3, #2
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800501a:	f003 0302 	and.w	r3, r3, #2
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00b      	beq.n	800503a <HAL_UART_IRQHandler+0xf6>
 8005022:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	2b00      	cmp	r3, #0
 800502c:	d005      	beq.n	800503a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005032:	f043 0204 	orr.w	r2, r3, #4
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800503a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800503e:	f003 0308 	and.w	r3, r3, #8
 8005042:	2b00      	cmp	r3, #0
 8005044:	d011      	beq.n	800506a <HAL_UART_IRQHandler+0x126>
 8005046:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800504a:	f003 0320 	and.w	r3, r3, #32
 800504e:	2b00      	cmp	r3, #0
 8005050:	d105      	bne.n	800505e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005052:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	2b00      	cmp	r3, #0
 800505c:	d005      	beq.n	800506a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005062:	f043 0208 	orr.w	r2, r3, #8
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506e:	2b00      	cmp	r3, #0
 8005070:	f000 81ed 	beq.w	800544e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005078:	f003 0320 	and.w	r3, r3, #32
 800507c:	2b00      	cmp	r3, #0
 800507e:	d008      	beq.n	8005092 <HAL_UART_IRQHandler+0x14e>
 8005080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005084:	f003 0320 	and.w	r3, r3, #32
 8005088:	2b00      	cmp	r3, #0
 800508a:	d002      	beq.n	8005092 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 fb24 	bl	80056da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	695b      	ldr	r3, [r3, #20]
 8005098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800509c:	2b40      	cmp	r3, #64	; 0x40
 800509e:	bf0c      	ite	eq
 80050a0:	2301      	moveq	r3, #1
 80050a2:	2300      	movne	r3, #0
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ae:	f003 0308 	and.w	r3, r3, #8
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d103      	bne.n	80050be <HAL_UART_IRQHandler+0x17a>
 80050b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d04f      	beq.n	800515e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 fa2c 	bl	800551c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ce:	2b40      	cmp	r3, #64	; 0x40
 80050d0:	d141      	bne.n	8005156 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	3314      	adds	r3, #20
 80050d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050e0:	e853 3f00 	ldrex	r3, [r3]
 80050e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80050e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80050ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	3314      	adds	r3, #20
 80050fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80050fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005102:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005106:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800510a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800510e:	e841 2300 	strex	r3, r2, [r1]
 8005112:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005116:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1d9      	bne.n	80050d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005122:	2b00      	cmp	r3, #0
 8005124:	d013      	beq.n	800514e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512a:	4a7d      	ldr	r2, [pc, #500]	; (8005320 <HAL_UART_IRQHandler+0x3dc>)
 800512c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005132:	4618      	mov	r0, r3
 8005134:	f7fe f879 	bl	800322a <HAL_DMA_Abort_IT>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d016      	beq.n	800516c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005142:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005148:	4610      	mov	r0, r2
 800514a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800514c:	e00e      	b.n	800516c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 f990 	bl	8005474 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005154:	e00a      	b.n	800516c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 f98c 	bl	8005474 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800515c:	e006      	b.n	800516c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 f988 	bl	8005474 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800516a:	e170      	b.n	800544e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800516c:	bf00      	nop
    return;
 800516e:	e16e      	b.n	800544e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005174:	2b01      	cmp	r3, #1
 8005176:	f040 814a 	bne.w	800540e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800517a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800517e:	f003 0310 	and.w	r3, r3, #16
 8005182:	2b00      	cmp	r3, #0
 8005184:	f000 8143 	beq.w	800540e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800518c:	f003 0310 	and.w	r3, r3, #16
 8005190:	2b00      	cmp	r3, #0
 8005192:	f000 813c 	beq.w	800540e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005196:	2300      	movs	r3, #0
 8005198:	60bb      	str	r3, [r7, #8]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	60bb      	str	r3, [r7, #8]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	60bb      	str	r3, [r7, #8]
 80051aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b6:	2b40      	cmp	r3, #64	; 0x40
 80051b8:	f040 80b4 	bne.w	8005324 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80051c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	f000 8140 	beq.w	8005452 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80051d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80051da:	429a      	cmp	r2, r3
 80051dc:	f080 8139 	bcs.w	8005452 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80051e6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ec:	69db      	ldr	r3, [r3, #28]
 80051ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051f2:	f000 8088 	beq.w	8005306 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	330c      	adds	r3, #12
 80051fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005200:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005204:	e853 3f00 	ldrex	r3, [r3]
 8005208:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800520c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005210:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005214:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	330c      	adds	r3, #12
 800521e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005222:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005226:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800522e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005232:	e841 2300 	strex	r3, r2, [r1]
 8005236:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800523a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1d9      	bne.n	80051f6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	3314      	adds	r3, #20
 8005248:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800524a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800524c:	e853 3f00 	ldrex	r3, [r3]
 8005250:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005252:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005254:	f023 0301 	bic.w	r3, r3, #1
 8005258:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	3314      	adds	r3, #20
 8005262:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005266:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800526a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800526e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005272:	e841 2300 	strex	r3, r2, [r1]
 8005276:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005278:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1e1      	bne.n	8005242 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	3314      	adds	r3, #20
 8005284:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005286:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005288:	e853 3f00 	ldrex	r3, [r3]
 800528c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800528e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005290:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005294:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	3314      	adds	r3, #20
 800529e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80052a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80052a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80052a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80052aa:	e841 2300 	strex	r3, r2, [r1]
 80052ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80052b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1e3      	bne.n	800527e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2220      	movs	r2, #32
 80052ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	330c      	adds	r3, #12
 80052ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052ce:	e853 3f00 	ldrex	r3, [r3]
 80052d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80052d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052d6:	f023 0310 	bic.w	r3, r3, #16
 80052da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	330c      	adds	r3, #12
 80052e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80052e8:	65ba      	str	r2, [r7, #88]	; 0x58
 80052ea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80052ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052f0:	e841 2300 	strex	r3, r2, [r1]
 80052f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80052f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d1e3      	bne.n	80052c4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005300:	4618      	mov	r0, r3
 8005302:	f7fd ff22 	bl	800314a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800530e:	b29b      	uxth	r3, r3
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	b29b      	uxth	r3, r3
 8005314:	4619      	mov	r1, r3
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 f8b6 	bl	8005488 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800531c:	e099      	b.n	8005452 <HAL_UART_IRQHandler+0x50e>
 800531e:	bf00      	nop
 8005320:	080055e3 	.word	0x080055e3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800532c:	b29b      	uxth	r3, r3
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005338:	b29b      	uxth	r3, r3
 800533a:	2b00      	cmp	r3, #0
 800533c:	f000 808b 	beq.w	8005456 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005340:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005344:	2b00      	cmp	r3, #0
 8005346:	f000 8086 	beq.w	8005456 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	330c      	adds	r3, #12
 8005350:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005354:	e853 3f00 	ldrex	r3, [r3]
 8005358:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800535a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800535c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005360:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	330c      	adds	r3, #12
 800536a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800536e:	647a      	str	r2, [r7, #68]	; 0x44
 8005370:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005372:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005374:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005376:	e841 2300 	strex	r3, r2, [r1]
 800537a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800537c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1e3      	bne.n	800534a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	3314      	adds	r3, #20
 8005388:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800538a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538c:	e853 3f00 	ldrex	r3, [r3]
 8005390:	623b      	str	r3, [r7, #32]
   return(result);
 8005392:	6a3b      	ldr	r3, [r7, #32]
 8005394:	f023 0301 	bic.w	r3, r3, #1
 8005398:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	3314      	adds	r3, #20
 80053a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80053a6:	633a      	str	r2, [r7, #48]	; 0x30
 80053a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053ae:	e841 2300 	strex	r3, r2, [r1]
 80053b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80053b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1e3      	bne.n	8005382 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2220      	movs	r2, #32
 80053be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	330c      	adds	r3, #12
 80053ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	e853 3f00 	ldrex	r3, [r3]
 80053d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f023 0310 	bic.w	r3, r3, #16
 80053de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	330c      	adds	r3, #12
 80053e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80053ec:	61fa      	str	r2, [r7, #28]
 80053ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f0:	69b9      	ldr	r1, [r7, #24]
 80053f2:	69fa      	ldr	r2, [r7, #28]
 80053f4:	e841 2300 	strex	r3, r2, [r1]
 80053f8:	617b      	str	r3, [r7, #20]
   return(result);
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1e3      	bne.n	80053c8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005400:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005404:	4619      	mov	r1, r3
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 f83e 	bl	8005488 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800540c:	e023      	b.n	8005456 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800540e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005416:	2b00      	cmp	r3, #0
 8005418:	d009      	beq.n	800542e <HAL_UART_IRQHandler+0x4ea>
 800541a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800541e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005422:	2b00      	cmp	r3, #0
 8005424:	d003      	beq.n	800542e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f8ef 	bl	800560a <UART_Transmit_IT>
    return;
 800542c:	e014      	b.n	8005458 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800542e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00e      	beq.n	8005458 <HAL_UART_IRQHandler+0x514>
 800543a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800543e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005442:	2b00      	cmp	r3, #0
 8005444:	d008      	beq.n	8005458 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 f92f 	bl	80056aa <UART_EndTransmit_IT>
    return;
 800544c:	e004      	b.n	8005458 <HAL_UART_IRQHandler+0x514>
    return;
 800544e:	bf00      	nop
 8005450:	e002      	b.n	8005458 <HAL_UART_IRQHandler+0x514>
      return;
 8005452:	bf00      	nop
 8005454:	e000      	b.n	8005458 <HAL_UART_IRQHandler+0x514>
      return;
 8005456:	bf00      	nop
  }
}
 8005458:	37e8      	adds	r7, #232	; 0xe8
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop

08005460 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005468:	bf00      	nop
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800547c:	bf00      	nop
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	460b      	mov	r3, r1
 8005492:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005494:	bf00      	nop
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	4613      	mov	r3, r2
 80054ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	88fa      	ldrh	r2, [r7, #6]
 80054b8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	88fa      	ldrh	r2, [r7, #6]
 80054be:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2222      	movs	r2, #34	; 0x22
 80054ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d007      	beq.n	80054ee <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68da      	ldr	r2, [r3, #12]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054ec:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	695a      	ldr	r2, [r3, #20]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f042 0201 	orr.w	r2, r2, #1
 80054fc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68da      	ldr	r2, [r3, #12]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f042 0220 	orr.w	r2, r2, #32
 800550c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	3714      	adds	r7, #20
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800551c:	b480      	push	{r7}
 800551e:	b095      	sub	sp, #84	; 0x54
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	330c      	adds	r3, #12
 800552a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800552e:	e853 3f00 	ldrex	r3, [r3]
 8005532:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005536:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800553a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	330c      	adds	r3, #12
 8005542:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005544:	643a      	str	r2, [r7, #64]	; 0x40
 8005546:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005548:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800554a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800554c:	e841 2300 	strex	r3, r2, [r1]
 8005550:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005554:	2b00      	cmp	r3, #0
 8005556:	d1e5      	bne.n	8005524 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	3314      	adds	r3, #20
 800555e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005560:	6a3b      	ldr	r3, [r7, #32]
 8005562:	e853 3f00 	ldrex	r3, [r3]
 8005566:	61fb      	str	r3, [r7, #28]
   return(result);
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	f023 0301 	bic.w	r3, r3, #1
 800556e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	3314      	adds	r3, #20
 8005576:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005578:	62fa      	str	r2, [r7, #44]	; 0x2c
 800557a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800557e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005580:	e841 2300 	strex	r3, r2, [r1]
 8005584:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005588:	2b00      	cmp	r3, #0
 800558a:	d1e5      	bne.n	8005558 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005590:	2b01      	cmp	r3, #1
 8005592:	d119      	bne.n	80055c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	330c      	adds	r3, #12
 800559a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	e853 3f00 	ldrex	r3, [r3]
 80055a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	f023 0310 	bic.w	r3, r3, #16
 80055aa:	647b      	str	r3, [r7, #68]	; 0x44
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	330c      	adds	r3, #12
 80055b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055b4:	61ba      	str	r2, [r7, #24]
 80055b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b8:	6979      	ldr	r1, [r7, #20]
 80055ba:	69ba      	ldr	r2, [r7, #24]
 80055bc:	e841 2300 	strex	r3, r2, [r1]
 80055c0:	613b      	str	r3, [r7, #16]
   return(result);
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1e5      	bne.n	8005594 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2220      	movs	r2, #32
 80055cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80055d6:	bf00      	nop
 80055d8:	3754      	adds	r7, #84	; 0x54
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr

080055e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b084      	sub	sp, #16
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055fc:	68f8      	ldr	r0, [r7, #12]
 80055fe:	f7ff ff39 	bl	8005474 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005602:	bf00      	nop
 8005604:	3710      	adds	r7, #16
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}

0800560a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800560a:	b480      	push	{r7}
 800560c:	b085      	sub	sp, #20
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b21      	cmp	r3, #33	; 0x21
 800561c:	d13e      	bne.n	800569c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005626:	d114      	bne.n	8005652 <UART_Transmit_IT+0x48>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d110      	bne.n	8005652 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a1b      	ldr	r3, [r3, #32]
 8005634:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	881b      	ldrh	r3, [r3, #0]
 800563a:	461a      	mov	r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005644:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	1c9a      	adds	r2, r3, #2
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	621a      	str	r2, [r3, #32]
 8005650:	e008      	b.n	8005664 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	1c59      	adds	r1, r3, #1
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	6211      	str	r1, [r2, #32]
 800565c:	781a      	ldrb	r2, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005668:	b29b      	uxth	r3, r3
 800566a:	3b01      	subs	r3, #1
 800566c:	b29b      	uxth	r3, r3
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	4619      	mov	r1, r3
 8005672:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005674:	2b00      	cmp	r3, #0
 8005676:	d10f      	bne.n	8005698 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68da      	ldr	r2, [r3, #12]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005686:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68da      	ldr	r2, [r3, #12]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005696:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005698:	2300      	movs	r3, #0
 800569a:	e000      	b.n	800569e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800569c:	2302      	movs	r3, #2
  }
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3714      	adds	r7, #20
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80056aa:	b580      	push	{r7, lr}
 80056ac:	b082      	sub	sp, #8
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68da      	ldr	r2, [r3, #12]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2220      	movs	r2, #32
 80056c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f7ff fec8 	bl	8005460 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3708      	adds	r7, #8
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}

080056da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80056da:	b580      	push	{r7, lr}
 80056dc:	b08c      	sub	sp, #48	; 0x30
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	2b22      	cmp	r3, #34	; 0x22
 80056ec:	f040 80ab 	bne.w	8005846 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056f8:	d117      	bne.n	800572a <UART_Receive_IT+0x50>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d113      	bne.n	800572a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005702:	2300      	movs	r3, #0
 8005704:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800570a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	b29b      	uxth	r3, r3
 8005714:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005718:	b29a      	uxth	r2, r3
 800571a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005722:	1c9a      	adds	r2, r3, #2
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	629a      	str	r2, [r3, #40]	; 0x28
 8005728:	e026      	b.n	8005778 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800572e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005730:	2300      	movs	r3, #0
 8005732:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800573c:	d007      	beq.n	800574e <UART_Receive_IT+0x74>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d10a      	bne.n	800575c <UART_Receive_IT+0x82>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d106      	bne.n	800575c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	b2da      	uxtb	r2, r3
 8005756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005758:	701a      	strb	r2, [r3, #0]
 800575a:	e008      	b.n	800576e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	b2db      	uxtb	r3, r3
 8005764:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005768:	b2da      	uxtb	r2, r3
 800576a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800576c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005772:	1c5a      	adds	r2, r3, #1
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800577c:	b29b      	uxth	r3, r3
 800577e:	3b01      	subs	r3, #1
 8005780:	b29b      	uxth	r3, r3
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	4619      	mov	r1, r3
 8005786:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005788:	2b00      	cmp	r3, #0
 800578a:	d15a      	bne.n	8005842 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68da      	ldr	r2, [r3, #12]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f022 0220 	bic.w	r2, r2, #32
 800579a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68da      	ldr	r2, [r3, #12]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	695a      	ldr	r2, [r3, #20]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f022 0201 	bic.w	r2, r2, #1
 80057ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2220      	movs	r2, #32
 80057c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d135      	bne.n	8005838 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	330c      	adds	r3, #12
 80057d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	e853 3f00 	ldrex	r3, [r3]
 80057e0:	613b      	str	r3, [r7, #16]
   return(result);
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	f023 0310 	bic.w	r3, r3, #16
 80057e8:	627b      	str	r3, [r7, #36]	; 0x24
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	330c      	adds	r3, #12
 80057f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057f2:	623a      	str	r2, [r7, #32]
 80057f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f6:	69f9      	ldr	r1, [r7, #28]
 80057f8:	6a3a      	ldr	r2, [r7, #32]
 80057fa:	e841 2300 	strex	r3, r2, [r1]
 80057fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1e5      	bne.n	80057d2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0310 	and.w	r3, r3, #16
 8005810:	2b10      	cmp	r3, #16
 8005812:	d10a      	bne.n	800582a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005814:	2300      	movs	r3, #0
 8005816:	60fb      	str	r3, [r7, #12]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	60fb      	str	r3, [r7, #12]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	60fb      	str	r3, [r7, #12]
 8005828:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800582e:	4619      	mov	r1, r3
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f7ff fe29 	bl	8005488 <HAL_UARTEx_RxEventCallback>
 8005836:	e002      	b.n	800583e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f7fb fbdb 	bl	8000ff4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800583e:	2300      	movs	r3, #0
 8005840:	e002      	b.n	8005848 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005842:	2300      	movs	r3, #0
 8005844:	e000      	b.n	8005848 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005846:	2302      	movs	r3, #2
  }
}
 8005848:	4618      	mov	r0, r3
 800584a:	3730      	adds	r7, #48	; 0x30
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005854:	b0c0      	sub	sp, #256	; 0x100
 8005856:	af00      	add	r7, sp, #0
 8005858:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800585c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800586c:	68d9      	ldr	r1, [r3, #12]
 800586e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	ea40 0301 	orr.w	r3, r0, r1
 8005878:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800587a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800587e:	689a      	ldr	r2, [r3, #8]
 8005880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	431a      	orrs	r2, r3
 8005888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	431a      	orrs	r2, r3
 8005890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005894:	69db      	ldr	r3, [r3, #28]
 8005896:	4313      	orrs	r3, r2
 8005898:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800589c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80058a8:	f021 010c 	bic.w	r1, r1, #12
 80058ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80058b6:	430b      	orrs	r3, r1
 80058b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80058c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ca:	6999      	ldr	r1, [r3, #24]
 80058cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	ea40 0301 	orr.w	r3, r0, r1
 80058d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	4b8f      	ldr	r3, [pc, #572]	; (8005b1c <UART_SetConfig+0x2cc>)
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d005      	beq.n	80058f0 <UART_SetConfig+0xa0>
 80058e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	4b8d      	ldr	r3, [pc, #564]	; (8005b20 <UART_SetConfig+0x2d0>)
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d104      	bne.n	80058fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80058f0:	f7fe fb1c 	bl	8003f2c <HAL_RCC_GetPCLK2Freq>
 80058f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80058f8:	e003      	b.n	8005902 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80058fa:	f7fe fb03 	bl	8003f04 <HAL_RCC_GetPCLK1Freq>
 80058fe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005906:	69db      	ldr	r3, [r3, #28]
 8005908:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800590c:	f040 810c 	bne.w	8005b28 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005910:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005914:	2200      	movs	r2, #0
 8005916:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800591a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800591e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005922:	4622      	mov	r2, r4
 8005924:	462b      	mov	r3, r5
 8005926:	1891      	adds	r1, r2, r2
 8005928:	65b9      	str	r1, [r7, #88]	; 0x58
 800592a:	415b      	adcs	r3, r3
 800592c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800592e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005932:	4621      	mov	r1, r4
 8005934:	eb12 0801 	adds.w	r8, r2, r1
 8005938:	4629      	mov	r1, r5
 800593a:	eb43 0901 	adc.w	r9, r3, r1
 800593e:	f04f 0200 	mov.w	r2, #0
 8005942:	f04f 0300 	mov.w	r3, #0
 8005946:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800594a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800594e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005952:	4690      	mov	r8, r2
 8005954:	4699      	mov	r9, r3
 8005956:	4623      	mov	r3, r4
 8005958:	eb18 0303 	adds.w	r3, r8, r3
 800595c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005960:	462b      	mov	r3, r5
 8005962:	eb49 0303 	adc.w	r3, r9, r3
 8005966:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800596a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005976:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800597a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800597e:	460b      	mov	r3, r1
 8005980:	18db      	adds	r3, r3, r3
 8005982:	653b      	str	r3, [r7, #80]	; 0x50
 8005984:	4613      	mov	r3, r2
 8005986:	eb42 0303 	adc.w	r3, r2, r3
 800598a:	657b      	str	r3, [r7, #84]	; 0x54
 800598c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005990:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005994:	f7fb f86a 	bl	8000a6c <__aeabi_uldivmod>
 8005998:	4602      	mov	r2, r0
 800599a:	460b      	mov	r3, r1
 800599c:	4b61      	ldr	r3, [pc, #388]	; (8005b24 <UART_SetConfig+0x2d4>)
 800599e:	fba3 2302 	umull	r2, r3, r3, r2
 80059a2:	095b      	lsrs	r3, r3, #5
 80059a4:	011c      	lsls	r4, r3, #4
 80059a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059aa:	2200      	movs	r2, #0
 80059ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80059b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80059b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80059b8:	4642      	mov	r2, r8
 80059ba:	464b      	mov	r3, r9
 80059bc:	1891      	adds	r1, r2, r2
 80059be:	64b9      	str	r1, [r7, #72]	; 0x48
 80059c0:	415b      	adcs	r3, r3
 80059c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80059c8:	4641      	mov	r1, r8
 80059ca:	eb12 0a01 	adds.w	sl, r2, r1
 80059ce:	4649      	mov	r1, r9
 80059d0:	eb43 0b01 	adc.w	fp, r3, r1
 80059d4:	f04f 0200 	mov.w	r2, #0
 80059d8:	f04f 0300 	mov.w	r3, #0
 80059dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80059e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80059e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059e8:	4692      	mov	sl, r2
 80059ea:	469b      	mov	fp, r3
 80059ec:	4643      	mov	r3, r8
 80059ee:	eb1a 0303 	adds.w	r3, sl, r3
 80059f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80059f6:	464b      	mov	r3, r9
 80059f8:	eb4b 0303 	adc.w	r3, fp, r3
 80059fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a0c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005a10:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005a14:	460b      	mov	r3, r1
 8005a16:	18db      	adds	r3, r3, r3
 8005a18:	643b      	str	r3, [r7, #64]	; 0x40
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	eb42 0303 	adc.w	r3, r2, r3
 8005a20:	647b      	str	r3, [r7, #68]	; 0x44
 8005a22:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005a26:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005a2a:	f7fb f81f 	bl	8000a6c <__aeabi_uldivmod>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	460b      	mov	r3, r1
 8005a32:	4611      	mov	r1, r2
 8005a34:	4b3b      	ldr	r3, [pc, #236]	; (8005b24 <UART_SetConfig+0x2d4>)
 8005a36:	fba3 2301 	umull	r2, r3, r3, r1
 8005a3a:	095b      	lsrs	r3, r3, #5
 8005a3c:	2264      	movs	r2, #100	; 0x64
 8005a3e:	fb02 f303 	mul.w	r3, r2, r3
 8005a42:	1acb      	subs	r3, r1, r3
 8005a44:	00db      	lsls	r3, r3, #3
 8005a46:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005a4a:	4b36      	ldr	r3, [pc, #216]	; (8005b24 <UART_SetConfig+0x2d4>)
 8005a4c:	fba3 2302 	umull	r2, r3, r3, r2
 8005a50:	095b      	lsrs	r3, r3, #5
 8005a52:	005b      	lsls	r3, r3, #1
 8005a54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a58:	441c      	add	r4, r3
 8005a5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a64:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005a68:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005a6c:	4642      	mov	r2, r8
 8005a6e:	464b      	mov	r3, r9
 8005a70:	1891      	adds	r1, r2, r2
 8005a72:	63b9      	str	r1, [r7, #56]	; 0x38
 8005a74:	415b      	adcs	r3, r3
 8005a76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005a7c:	4641      	mov	r1, r8
 8005a7e:	1851      	adds	r1, r2, r1
 8005a80:	6339      	str	r1, [r7, #48]	; 0x30
 8005a82:	4649      	mov	r1, r9
 8005a84:	414b      	adcs	r3, r1
 8005a86:	637b      	str	r3, [r7, #52]	; 0x34
 8005a88:	f04f 0200 	mov.w	r2, #0
 8005a8c:	f04f 0300 	mov.w	r3, #0
 8005a90:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005a94:	4659      	mov	r1, fp
 8005a96:	00cb      	lsls	r3, r1, #3
 8005a98:	4651      	mov	r1, sl
 8005a9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a9e:	4651      	mov	r1, sl
 8005aa0:	00ca      	lsls	r2, r1, #3
 8005aa2:	4610      	mov	r0, r2
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	4642      	mov	r2, r8
 8005aaa:	189b      	adds	r3, r3, r2
 8005aac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ab0:	464b      	mov	r3, r9
 8005ab2:	460a      	mov	r2, r1
 8005ab4:	eb42 0303 	adc.w	r3, r2, r3
 8005ab8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005ac8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005acc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	18db      	adds	r3, r3, r3
 8005ad4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ad6:	4613      	mov	r3, r2
 8005ad8:	eb42 0303 	adc.w	r3, r2, r3
 8005adc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ade:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005ae2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005ae6:	f7fa ffc1 	bl	8000a6c <__aeabi_uldivmod>
 8005aea:	4602      	mov	r2, r0
 8005aec:	460b      	mov	r3, r1
 8005aee:	4b0d      	ldr	r3, [pc, #52]	; (8005b24 <UART_SetConfig+0x2d4>)
 8005af0:	fba3 1302 	umull	r1, r3, r3, r2
 8005af4:	095b      	lsrs	r3, r3, #5
 8005af6:	2164      	movs	r1, #100	; 0x64
 8005af8:	fb01 f303 	mul.w	r3, r1, r3
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	00db      	lsls	r3, r3, #3
 8005b00:	3332      	adds	r3, #50	; 0x32
 8005b02:	4a08      	ldr	r2, [pc, #32]	; (8005b24 <UART_SetConfig+0x2d4>)
 8005b04:	fba2 2303 	umull	r2, r3, r2, r3
 8005b08:	095b      	lsrs	r3, r3, #5
 8005b0a:	f003 0207 	and.w	r2, r3, #7
 8005b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4422      	add	r2, r4
 8005b16:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b18:	e105      	b.n	8005d26 <UART_SetConfig+0x4d6>
 8005b1a:	bf00      	nop
 8005b1c:	40011000 	.word	0x40011000
 8005b20:	40011400 	.word	0x40011400
 8005b24:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005b32:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005b36:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005b3a:	4642      	mov	r2, r8
 8005b3c:	464b      	mov	r3, r9
 8005b3e:	1891      	adds	r1, r2, r2
 8005b40:	6239      	str	r1, [r7, #32]
 8005b42:	415b      	adcs	r3, r3
 8005b44:	627b      	str	r3, [r7, #36]	; 0x24
 8005b46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b4a:	4641      	mov	r1, r8
 8005b4c:	1854      	adds	r4, r2, r1
 8005b4e:	4649      	mov	r1, r9
 8005b50:	eb43 0501 	adc.w	r5, r3, r1
 8005b54:	f04f 0200 	mov.w	r2, #0
 8005b58:	f04f 0300 	mov.w	r3, #0
 8005b5c:	00eb      	lsls	r3, r5, #3
 8005b5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b62:	00e2      	lsls	r2, r4, #3
 8005b64:	4614      	mov	r4, r2
 8005b66:	461d      	mov	r5, r3
 8005b68:	4643      	mov	r3, r8
 8005b6a:	18e3      	adds	r3, r4, r3
 8005b6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005b70:	464b      	mov	r3, r9
 8005b72:	eb45 0303 	adc.w	r3, r5, r3
 8005b76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005b86:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b8a:	f04f 0200 	mov.w	r2, #0
 8005b8e:	f04f 0300 	mov.w	r3, #0
 8005b92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005b96:	4629      	mov	r1, r5
 8005b98:	008b      	lsls	r3, r1, #2
 8005b9a:	4621      	mov	r1, r4
 8005b9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ba0:	4621      	mov	r1, r4
 8005ba2:	008a      	lsls	r2, r1, #2
 8005ba4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005ba8:	f7fa ff60 	bl	8000a6c <__aeabi_uldivmod>
 8005bac:	4602      	mov	r2, r0
 8005bae:	460b      	mov	r3, r1
 8005bb0:	4b60      	ldr	r3, [pc, #384]	; (8005d34 <UART_SetConfig+0x4e4>)
 8005bb2:	fba3 2302 	umull	r2, r3, r3, r2
 8005bb6:	095b      	lsrs	r3, r3, #5
 8005bb8:	011c      	lsls	r4, r3, #4
 8005bba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005bc4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005bc8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005bcc:	4642      	mov	r2, r8
 8005bce:	464b      	mov	r3, r9
 8005bd0:	1891      	adds	r1, r2, r2
 8005bd2:	61b9      	str	r1, [r7, #24]
 8005bd4:	415b      	adcs	r3, r3
 8005bd6:	61fb      	str	r3, [r7, #28]
 8005bd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bdc:	4641      	mov	r1, r8
 8005bde:	1851      	adds	r1, r2, r1
 8005be0:	6139      	str	r1, [r7, #16]
 8005be2:	4649      	mov	r1, r9
 8005be4:	414b      	adcs	r3, r1
 8005be6:	617b      	str	r3, [r7, #20]
 8005be8:	f04f 0200 	mov.w	r2, #0
 8005bec:	f04f 0300 	mov.w	r3, #0
 8005bf0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005bf4:	4659      	mov	r1, fp
 8005bf6:	00cb      	lsls	r3, r1, #3
 8005bf8:	4651      	mov	r1, sl
 8005bfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bfe:	4651      	mov	r1, sl
 8005c00:	00ca      	lsls	r2, r1, #3
 8005c02:	4610      	mov	r0, r2
 8005c04:	4619      	mov	r1, r3
 8005c06:	4603      	mov	r3, r0
 8005c08:	4642      	mov	r2, r8
 8005c0a:	189b      	adds	r3, r3, r2
 8005c0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c10:	464b      	mov	r3, r9
 8005c12:	460a      	mov	r2, r1
 8005c14:	eb42 0303 	adc.w	r3, r2, r3
 8005c18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c26:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005c28:	f04f 0200 	mov.w	r2, #0
 8005c2c:	f04f 0300 	mov.w	r3, #0
 8005c30:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005c34:	4649      	mov	r1, r9
 8005c36:	008b      	lsls	r3, r1, #2
 8005c38:	4641      	mov	r1, r8
 8005c3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c3e:	4641      	mov	r1, r8
 8005c40:	008a      	lsls	r2, r1, #2
 8005c42:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005c46:	f7fa ff11 	bl	8000a6c <__aeabi_uldivmod>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	4b39      	ldr	r3, [pc, #228]	; (8005d34 <UART_SetConfig+0x4e4>)
 8005c50:	fba3 1302 	umull	r1, r3, r3, r2
 8005c54:	095b      	lsrs	r3, r3, #5
 8005c56:	2164      	movs	r1, #100	; 0x64
 8005c58:	fb01 f303 	mul.w	r3, r1, r3
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	011b      	lsls	r3, r3, #4
 8005c60:	3332      	adds	r3, #50	; 0x32
 8005c62:	4a34      	ldr	r2, [pc, #208]	; (8005d34 <UART_SetConfig+0x4e4>)
 8005c64:	fba2 2303 	umull	r2, r3, r2, r3
 8005c68:	095b      	lsrs	r3, r3, #5
 8005c6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c6e:	441c      	add	r4, r3
 8005c70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c74:	2200      	movs	r2, #0
 8005c76:	673b      	str	r3, [r7, #112]	; 0x70
 8005c78:	677a      	str	r2, [r7, #116]	; 0x74
 8005c7a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005c7e:	4642      	mov	r2, r8
 8005c80:	464b      	mov	r3, r9
 8005c82:	1891      	adds	r1, r2, r2
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	415b      	adcs	r3, r3
 8005c88:	60fb      	str	r3, [r7, #12]
 8005c8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c8e:	4641      	mov	r1, r8
 8005c90:	1851      	adds	r1, r2, r1
 8005c92:	6039      	str	r1, [r7, #0]
 8005c94:	4649      	mov	r1, r9
 8005c96:	414b      	adcs	r3, r1
 8005c98:	607b      	str	r3, [r7, #4]
 8005c9a:	f04f 0200 	mov.w	r2, #0
 8005c9e:	f04f 0300 	mov.w	r3, #0
 8005ca2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005ca6:	4659      	mov	r1, fp
 8005ca8:	00cb      	lsls	r3, r1, #3
 8005caa:	4651      	mov	r1, sl
 8005cac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cb0:	4651      	mov	r1, sl
 8005cb2:	00ca      	lsls	r2, r1, #3
 8005cb4:	4610      	mov	r0, r2
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	4603      	mov	r3, r0
 8005cba:	4642      	mov	r2, r8
 8005cbc:	189b      	adds	r3, r3, r2
 8005cbe:	66bb      	str	r3, [r7, #104]	; 0x68
 8005cc0:	464b      	mov	r3, r9
 8005cc2:	460a      	mov	r2, r1
 8005cc4:	eb42 0303 	adc.w	r3, r2, r3
 8005cc8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	663b      	str	r3, [r7, #96]	; 0x60
 8005cd4:	667a      	str	r2, [r7, #100]	; 0x64
 8005cd6:	f04f 0200 	mov.w	r2, #0
 8005cda:	f04f 0300 	mov.w	r3, #0
 8005cde:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005ce2:	4649      	mov	r1, r9
 8005ce4:	008b      	lsls	r3, r1, #2
 8005ce6:	4641      	mov	r1, r8
 8005ce8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cec:	4641      	mov	r1, r8
 8005cee:	008a      	lsls	r2, r1, #2
 8005cf0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005cf4:	f7fa feba 	bl	8000a6c <__aeabi_uldivmod>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	4b0d      	ldr	r3, [pc, #52]	; (8005d34 <UART_SetConfig+0x4e4>)
 8005cfe:	fba3 1302 	umull	r1, r3, r3, r2
 8005d02:	095b      	lsrs	r3, r3, #5
 8005d04:	2164      	movs	r1, #100	; 0x64
 8005d06:	fb01 f303 	mul.w	r3, r1, r3
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	011b      	lsls	r3, r3, #4
 8005d0e:	3332      	adds	r3, #50	; 0x32
 8005d10:	4a08      	ldr	r2, [pc, #32]	; (8005d34 <UART_SetConfig+0x4e4>)
 8005d12:	fba2 2303 	umull	r2, r3, r2, r3
 8005d16:	095b      	lsrs	r3, r3, #5
 8005d18:	f003 020f 	and.w	r2, r3, #15
 8005d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4422      	add	r2, r4
 8005d24:	609a      	str	r2, [r3, #8]
}
 8005d26:	bf00      	nop
 8005d28:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d32:	bf00      	nop
 8005d34:	51eb851f 	.word	0x51eb851f

08005d38 <__errno>:
 8005d38:	4b01      	ldr	r3, [pc, #4]	; (8005d40 <__errno+0x8>)
 8005d3a:	6818      	ldr	r0, [r3, #0]
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	20000020 	.word	0x20000020

08005d44 <__libc_init_array>:
 8005d44:	b570      	push	{r4, r5, r6, lr}
 8005d46:	4d0d      	ldr	r5, [pc, #52]	; (8005d7c <__libc_init_array+0x38>)
 8005d48:	4c0d      	ldr	r4, [pc, #52]	; (8005d80 <__libc_init_array+0x3c>)
 8005d4a:	1b64      	subs	r4, r4, r5
 8005d4c:	10a4      	asrs	r4, r4, #2
 8005d4e:	2600      	movs	r6, #0
 8005d50:	42a6      	cmp	r6, r4
 8005d52:	d109      	bne.n	8005d68 <__libc_init_array+0x24>
 8005d54:	4d0b      	ldr	r5, [pc, #44]	; (8005d84 <__libc_init_array+0x40>)
 8005d56:	4c0c      	ldr	r4, [pc, #48]	; (8005d88 <__libc_init_array+0x44>)
 8005d58:	f000 fc8e 	bl	8006678 <_init>
 8005d5c:	1b64      	subs	r4, r4, r5
 8005d5e:	10a4      	asrs	r4, r4, #2
 8005d60:	2600      	movs	r6, #0
 8005d62:	42a6      	cmp	r6, r4
 8005d64:	d105      	bne.n	8005d72 <__libc_init_array+0x2e>
 8005d66:	bd70      	pop	{r4, r5, r6, pc}
 8005d68:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d6c:	4798      	blx	r3
 8005d6e:	3601      	adds	r6, #1
 8005d70:	e7ee      	b.n	8005d50 <__libc_init_array+0xc>
 8005d72:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d76:	4798      	blx	r3
 8005d78:	3601      	adds	r6, #1
 8005d7a:	e7f2      	b.n	8005d62 <__libc_init_array+0x1e>
 8005d7c:	0800673c 	.word	0x0800673c
 8005d80:	0800673c 	.word	0x0800673c
 8005d84:	0800673c 	.word	0x0800673c
 8005d88:	08006740 	.word	0x08006740

08005d8c <memset>:
 8005d8c:	4402      	add	r2, r0
 8005d8e:	4603      	mov	r3, r0
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d100      	bne.n	8005d96 <memset+0xa>
 8005d94:	4770      	bx	lr
 8005d96:	f803 1b01 	strb.w	r1, [r3], #1
 8005d9a:	e7f9      	b.n	8005d90 <memset+0x4>

08005d9c <siprintf>:
 8005d9c:	b40e      	push	{r1, r2, r3}
 8005d9e:	b500      	push	{lr}
 8005da0:	b09c      	sub	sp, #112	; 0x70
 8005da2:	ab1d      	add	r3, sp, #116	; 0x74
 8005da4:	9002      	str	r0, [sp, #8]
 8005da6:	9006      	str	r0, [sp, #24]
 8005da8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005dac:	4809      	ldr	r0, [pc, #36]	; (8005dd4 <siprintf+0x38>)
 8005dae:	9107      	str	r1, [sp, #28]
 8005db0:	9104      	str	r1, [sp, #16]
 8005db2:	4909      	ldr	r1, [pc, #36]	; (8005dd8 <siprintf+0x3c>)
 8005db4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005db8:	9105      	str	r1, [sp, #20]
 8005dba:	6800      	ldr	r0, [r0, #0]
 8005dbc:	9301      	str	r3, [sp, #4]
 8005dbe:	a902      	add	r1, sp, #8
 8005dc0:	f000 f868 	bl	8005e94 <_svfiprintf_r>
 8005dc4:	9b02      	ldr	r3, [sp, #8]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	701a      	strb	r2, [r3, #0]
 8005dca:	b01c      	add	sp, #112	; 0x70
 8005dcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005dd0:	b003      	add	sp, #12
 8005dd2:	4770      	bx	lr
 8005dd4:	20000020 	.word	0x20000020
 8005dd8:	ffff0208 	.word	0xffff0208

08005ddc <__ssputs_r>:
 8005ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005de0:	688e      	ldr	r6, [r1, #8]
 8005de2:	429e      	cmp	r6, r3
 8005de4:	4682      	mov	sl, r0
 8005de6:	460c      	mov	r4, r1
 8005de8:	4690      	mov	r8, r2
 8005dea:	461f      	mov	r7, r3
 8005dec:	d838      	bhi.n	8005e60 <__ssputs_r+0x84>
 8005dee:	898a      	ldrh	r2, [r1, #12]
 8005df0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005df4:	d032      	beq.n	8005e5c <__ssputs_r+0x80>
 8005df6:	6825      	ldr	r5, [r4, #0]
 8005df8:	6909      	ldr	r1, [r1, #16]
 8005dfa:	eba5 0901 	sub.w	r9, r5, r1
 8005dfe:	6965      	ldr	r5, [r4, #20]
 8005e00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005e08:	3301      	adds	r3, #1
 8005e0a:	444b      	add	r3, r9
 8005e0c:	106d      	asrs	r5, r5, #1
 8005e0e:	429d      	cmp	r5, r3
 8005e10:	bf38      	it	cc
 8005e12:	461d      	movcc	r5, r3
 8005e14:	0553      	lsls	r3, r2, #21
 8005e16:	d531      	bpl.n	8005e7c <__ssputs_r+0xa0>
 8005e18:	4629      	mov	r1, r5
 8005e1a:	f000 fb63 	bl	80064e4 <_malloc_r>
 8005e1e:	4606      	mov	r6, r0
 8005e20:	b950      	cbnz	r0, 8005e38 <__ssputs_r+0x5c>
 8005e22:	230c      	movs	r3, #12
 8005e24:	f8ca 3000 	str.w	r3, [sl]
 8005e28:	89a3      	ldrh	r3, [r4, #12]
 8005e2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e2e:	81a3      	strh	r3, [r4, #12]
 8005e30:	f04f 30ff 	mov.w	r0, #4294967295
 8005e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e38:	6921      	ldr	r1, [r4, #16]
 8005e3a:	464a      	mov	r2, r9
 8005e3c:	f000 fabe 	bl	80063bc <memcpy>
 8005e40:	89a3      	ldrh	r3, [r4, #12]
 8005e42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005e46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e4a:	81a3      	strh	r3, [r4, #12]
 8005e4c:	6126      	str	r6, [r4, #16]
 8005e4e:	6165      	str	r5, [r4, #20]
 8005e50:	444e      	add	r6, r9
 8005e52:	eba5 0509 	sub.w	r5, r5, r9
 8005e56:	6026      	str	r6, [r4, #0]
 8005e58:	60a5      	str	r5, [r4, #8]
 8005e5a:	463e      	mov	r6, r7
 8005e5c:	42be      	cmp	r6, r7
 8005e5e:	d900      	bls.n	8005e62 <__ssputs_r+0x86>
 8005e60:	463e      	mov	r6, r7
 8005e62:	6820      	ldr	r0, [r4, #0]
 8005e64:	4632      	mov	r2, r6
 8005e66:	4641      	mov	r1, r8
 8005e68:	f000 fab6 	bl	80063d8 <memmove>
 8005e6c:	68a3      	ldr	r3, [r4, #8]
 8005e6e:	1b9b      	subs	r3, r3, r6
 8005e70:	60a3      	str	r3, [r4, #8]
 8005e72:	6823      	ldr	r3, [r4, #0]
 8005e74:	4433      	add	r3, r6
 8005e76:	6023      	str	r3, [r4, #0]
 8005e78:	2000      	movs	r0, #0
 8005e7a:	e7db      	b.n	8005e34 <__ssputs_r+0x58>
 8005e7c:	462a      	mov	r2, r5
 8005e7e:	f000 fba5 	bl	80065cc <_realloc_r>
 8005e82:	4606      	mov	r6, r0
 8005e84:	2800      	cmp	r0, #0
 8005e86:	d1e1      	bne.n	8005e4c <__ssputs_r+0x70>
 8005e88:	6921      	ldr	r1, [r4, #16]
 8005e8a:	4650      	mov	r0, sl
 8005e8c:	f000 fabe 	bl	800640c <_free_r>
 8005e90:	e7c7      	b.n	8005e22 <__ssputs_r+0x46>
	...

08005e94 <_svfiprintf_r>:
 8005e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e98:	4698      	mov	r8, r3
 8005e9a:	898b      	ldrh	r3, [r1, #12]
 8005e9c:	061b      	lsls	r3, r3, #24
 8005e9e:	b09d      	sub	sp, #116	; 0x74
 8005ea0:	4607      	mov	r7, r0
 8005ea2:	460d      	mov	r5, r1
 8005ea4:	4614      	mov	r4, r2
 8005ea6:	d50e      	bpl.n	8005ec6 <_svfiprintf_r+0x32>
 8005ea8:	690b      	ldr	r3, [r1, #16]
 8005eaa:	b963      	cbnz	r3, 8005ec6 <_svfiprintf_r+0x32>
 8005eac:	2140      	movs	r1, #64	; 0x40
 8005eae:	f000 fb19 	bl	80064e4 <_malloc_r>
 8005eb2:	6028      	str	r0, [r5, #0]
 8005eb4:	6128      	str	r0, [r5, #16]
 8005eb6:	b920      	cbnz	r0, 8005ec2 <_svfiprintf_r+0x2e>
 8005eb8:	230c      	movs	r3, #12
 8005eba:	603b      	str	r3, [r7, #0]
 8005ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec0:	e0d1      	b.n	8006066 <_svfiprintf_r+0x1d2>
 8005ec2:	2340      	movs	r3, #64	; 0x40
 8005ec4:	616b      	str	r3, [r5, #20]
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	9309      	str	r3, [sp, #36]	; 0x24
 8005eca:	2320      	movs	r3, #32
 8005ecc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ed0:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ed4:	2330      	movs	r3, #48	; 0x30
 8005ed6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006080 <_svfiprintf_r+0x1ec>
 8005eda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ede:	f04f 0901 	mov.w	r9, #1
 8005ee2:	4623      	mov	r3, r4
 8005ee4:	469a      	mov	sl, r3
 8005ee6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005eea:	b10a      	cbz	r2, 8005ef0 <_svfiprintf_r+0x5c>
 8005eec:	2a25      	cmp	r2, #37	; 0x25
 8005eee:	d1f9      	bne.n	8005ee4 <_svfiprintf_r+0x50>
 8005ef0:	ebba 0b04 	subs.w	fp, sl, r4
 8005ef4:	d00b      	beq.n	8005f0e <_svfiprintf_r+0x7a>
 8005ef6:	465b      	mov	r3, fp
 8005ef8:	4622      	mov	r2, r4
 8005efa:	4629      	mov	r1, r5
 8005efc:	4638      	mov	r0, r7
 8005efe:	f7ff ff6d 	bl	8005ddc <__ssputs_r>
 8005f02:	3001      	adds	r0, #1
 8005f04:	f000 80aa 	beq.w	800605c <_svfiprintf_r+0x1c8>
 8005f08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f0a:	445a      	add	r2, fp
 8005f0c:	9209      	str	r2, [sp, #36]	; 0x24
 8005f0e:	f89a 3000 	ldrb.w	r3, [sl]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	f000 80a2 	beq.w	800605c <_svfiprintf_r+0x1c8>
 8005f18:	2300      	movs	r3, #0
 8005f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f22:	f10a 0a01 	add.w	sl, sl, #1
 8005f26:	9304      	str	r3, [sp, #16]
 8005f28:	9307      	str	r3, [sp, #28]
 8005f2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f2e:	931a      	str	r3, [sp, #104]	; 0x68
 8005f30:	4654      	mov	r4, sl
 8005f32:	2205      	movs	r2, #5
 8005f34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f38:	4851      	ldr	r0, [pc, #324]	; (8006080 <_svfiprintf_r+0x1ec>)
 8005f3a:	f7fa f959 	bl	80001f0 <memchr>
 8005f3e:	9a04      	ldr	r2, [sp, #16]
 8005f40:	b9d8      	cbnz	r0, 8005f7a <_svfiprintf_r+0xe6>
 8005f42:	06d0      	lsls	r0, r2, #27
 8005f44:	bf44      	itt	mi
 8005f46:	2320      	movmi	r3, #32
 8005f48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f4c:	0711      	lsls	r1, r2, #28
 8005f4e:	bf44      	itt	mi
 8005f50:	232b      	movmi	r3, #43	; 0x2b
 8005f52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f56:	f89a 3000 	ldrb.w	r3, [sl]
 8005f5a:	2b2a      	cmp	r3, #42	; 0x2a
 8005f5c:	d015      	beq.n	8005f8a <_svfiprintf_r+0xf6>
 8005f5e:	9a07      	ldr	r2, [sp, #28]
 8005f60:	4654      	mov	r4, sl
 8005f62:	2000      	movs	r0, #0
 8005f64:	f04f 0c0a 	mov.w	ip, #10
 8005f68:	4621      	mov	r1, r4
 8005f6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f6e:	3b30      	subs	r3, #48	; 0x30
 8005f70:	2b09      	cmp	r3, #9
 8005f72:	d94e      	bls.n	8006012 <_svfiprintf_r+0x17e>
 8005f74:	b1b0      	cbz	r0, 8005fa4 <_svfiprintf_r+0x110>
 8005f76:	9207      	str	r2, [sp, #28]
 8005f78:	e014      	b.n	8005fa4 <_svfiprintf_r+0x110>
 8005f7a:	eba0 0308 	sub.w	r3, r0, r8
 8005f7e:	fa09 f303 	lsl.w	r3, r9, r3
 8005f82:	4313      	orrs	r3, r2
 8005f84:	9304      	str	r3, [sp, #16]
 8005f86:	46a2      	mov	sl, r4
 8005f88:	e7d2      	b.n	8005f30 <_svfiprintf_r+0x9c>
 8005f8a:	9b03      	ldr	r3, [sp, #12]
 8005f8c:	1d19      	adds	r1, r3, #4
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	9103      	str	r1, [sp, #12]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	bfbb      	ittet	lt
 8005f96:	425b      	neglt	r3, r3
 8005f98:	f042 0202 	orrlt.w	r2, r2, #2
 8005f9c:	9307      	strge	r3, [sp, #28]
 8005f9e:	9307      	strlt	r3, [sp, #28]
 8005fa0:	bfb8      	it	lt
 8005fa2:	9204      	strlt	r2, [sp, #16]
 8005fa4:	7823      	ldrb	r3, [r4, #0]
 8005fa6:	2b2e      	cmp	r3, #46	; 0x2e
 8005fa8:	d10c      	bne.n	8005fc4 <_svfiprintf_r+0x130>
 8005faa:	7863      	ldrb	r3, [r4, #1]
 8005fac:	2b2a      	cmp	r3, #42	; 0x2a
 8005fae:	d135      	bne.n	800601c <_svfiprintf_r+0x188>
 8005fb0:	9b03      	ldr	r3, [sp, #12]
 8005fb2:	1d1a      	adds	r2, r3, #4
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	9203      	str	r2, [sp, #12]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	bfb8      	it	lt
 8005fbc:	f04f 33ff 	movlt.w	r3, #4294967295
 8005fc0:	3402      	adds	r4, #2
 8005fc2:	9305      	str	r3, [sp, #20]
 8005fc4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006090 <_svfiprintf_r+0x1fc>
 8005fc8:	7821      	ldrb	r1, [r4, #0]
 8005fca:	2203      	movs	r2, #3
 8005fcc:	4650      	mov	r0, sl
 8005fce:	f7fa f90f 	bl	80001f0 <memchr>
 8005fd2:	b140      	cbz	r0, 8005fe6 <_svfiprintf_r+0x152>
 8005fd4:	2340      	movs	r3, #64	; 0x40
 8005fd6:	eba0 000a 	sub.w	r0, r0, sl
 8005fda:	fa03 f000 	lsl.w	r0, r3, r0
 8005fde:	9b04      	ldr	r3, [sp, #16]
 8005fe0:	4303      	orrs	r3, r0
 8005fe2:	3401      	adds	r4, #1
 8005fe4:	9304      	str	r3, [sp, #16]
 8005fe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fea:	4826      	ldr	r0, [pc, #152]	; (8006084 <_svfiprintf_r+0x1f0>)
 8005fec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ff0:	2206      	movs	r2, #6
 8005ff2:	f7fa f8fd 	bl	80001f0 <memchr>
 8005ff6:	2800      	cmp	r0, #0
 8005ff8:	d038      	beq.n	800606c <_svfiprintf_r+0x1d8>
 8005ffa:	4b23      	ldr	r3, [pc, #140]	; (8006088 <_svfiprintf_r+0x1f4>)
 8005ffc:	bb1b      	cbnz	r3, 8006046 <_svfiprintf_r+0x1b2>
 8005ffe:	9b03      	ldr	r3, [sp, #12]
 8006000:	3307      	adds	r3, #7
 8006002:	f023 0307 	bic.w	r3, r3, #7
 8006006:	3308      	adds	r3, #8
 8006008:	9303      	str	r3, [sp, #12]
 800600a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800600c:	4433      	add	r3, r6
 800600e:	9309      	str	r3, [sp, #36]	; 0x24
 8006010:	e767      	b.n	8005ee2 <_svfiprintf_r+0x4e>
 8006012:	fb0c 3202 	mla	r2, ip, r2, r3
 8006016:	460c      	mov	r4, r1
 8006018:	2001      	movs	r0, #1
 800601a:	e7a5      	b.n	8005f68 <_svfiprintf_r+0xd4>
 800601c:	2300      	movs	r3, #0
 800601e:	3401      	adds	r4, #1
 8006020:	9305      	str	r3, [sp, #20]
 8006022:	4619      	mov	r1, r3
 8006024:	f04f 0c0a 	mov.w	ip, #10
 8006028:	4620      	mov	r0, r4
 800602a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800602e:	3a30      	subs	r2, #48	; 0x30
 8006030:	2a09      	cmp	r2, #9
 8006032:	d903      	bls.n	800603c <_svfiprintf_r+0x1a8>
 8006034:	2b00      	cmp	r3, #0
 8006036:	d0c5      	beq.n	8005fc4 <_svfiprintf_r+0x130>
 8006038:	9105      	str	r1, [sp, #20]
 800603a:	e7c3      	b.n	8005fc4 <_svfiprintf_r+0x130>
 800603c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006040:	4604      	mov	r4, r0
 8006042:	2301      	movs	r3, #1
 8006044:	e7f0      	b.n	8006028 <_svfiprintf_r+0x194>
 8006046:	ab03      	add	r3, sp, #12
 8006048:	9300      	str	r3, [sp, #0]
 800604a:	462a      	mov	r2, r5
 800604c:	4b0f      	ldr	r3, [pc, #60]	; (800608c <_svfiprintf_r+0x1f8>)
 800604e:	a904      	add	r1, sp, #16
 8006050:	4638      	mov	r0, r7
 8006052:	f3af 8000 	nop.w
 8006056:	1c42      	adds	r2, r0, #1
 8006058:	4606      	mov	r6, r0
 800605a:	d1d6      	bne.n	800600a <_svfiprintf_r+0x176>
 800605c:	89ab      	ldrh	r3, [r5, #12]
 800605e:	065b      	lsls	r3, r3, #25
 8006060:	f53f af2c 	bmi.w	8005ebc <_svfiprintf_r+0x28>
 8006064:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006066:	b01d      	add	sp, #116	; 0x74
 8006068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800606c:	ab03      	add	r3, sp, #12
 800606e:	9300      	str	r3, [sp, #0]
 8006070:	462a      	mov	r2, r5
 8006072:	4b06      	ldr	r3, [pc, #24]	; (800608c <_svfiprintf_r+0x1f8>)
 8006074:	a904      	add	r1, sp, #16
 8006076:	4638      	mov	r0, r7
 8006078:	f000 f87a 	bl	8006170 <_printf_i>
 800607c:	e7eb      	b.n	8006056 <_svfiprintf_r+0x1c2>
 800607e:	bf00      	nop
 8006080:	08006700 	.word	0x08006700
 8006084:	0800670a 	.word	0x0800670a
 8006088:	00000000 	.word	0x00000000
 800608c:	08005ddd 	.word	0x08005ddd
 8006090:	08006706 	.word	0x08006706

08006094 <_printf_common>:
 8006094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006098:	4616      	mov	r6, r2
 800609a:	4699      	mov	r9, r3
 800609c:	688a      	ldr	r2, [r1, #8]
 800609e:	690b      	ldr	r3, [r1, #16]
 80060a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060a4:	4293      	cmp	r3, r2
 80060a6:	bfb8      	it	lt
 80060a8:	4613      	movlt	r3, r2
 80060aa:	6033      	str	r3, [r6, #0]
 80060ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060b0:	4607      	mov	r7, r0
 80060b2:	460c      	mov	r4, r1
 80060b4:	b10a      	cbz	r2, 80060ba <_printf_common+0x26>
 80060b6:	3301      	adds	r3, #1
 80060b8:	6033      	str	r3, [r6, #0]
 80060ba:	6823      	ldr	r3, [r4, #0]
 80060bc:	0699      	lsls	r1, r3, #26
 80060be:	bf42      	ittt	mi
 80060c0:	6833      	ldrmi	r3, [r6, #0]
 80060c2:	3302      	addmi	r3, #2
 80060c4:	6033      	strmi	r3, [r6, #0]
 80060c6:	6825      	ldr	r5, [r4, #0]
 80060c8:	f015 0506 	ands.w	r5, r5, #6
 80060cc:	d106      	bne.n	80060dc <_printf_common+0x48>
 80060ce:	f104 0a19 	add.w	sl, r4, #25
 80060d2:	68e3      	ldr	r3, [r4, #12]
 80060d4:	6832      	ldr	r2, [r6, #0]
 80060d6:	1a9b      	subs	r3, r3, r2
 80060d8:	42ab      	cmp	r3, r5
 80060da:	dc26      	bgt.n	800612a <_printf_common+0x96>
 80060dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060e0:	1e13      	subs	r3, r2, #0
 80060e2:	6822      	ldr	r2, [r4, #0]
 80060e4:	bf18      	it	ne
 80060e6:	2301      	movne	r3, #1
 80060e8:	0692      	lsls	r2, r2, #26
 80060ea:	d42b      	bmi.n	8006144 <_printf_common+0xb0>
 80060ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060f0:	4649      	mov	r1, r9
 80060f2:	4638      	mov	r0, r7
 80060f4:	47c0      	blx	r8
 80060f6:	3001      	adds	r0, #1
 80060f8:	d01e      	beq.n	8006138 <_printf_common+0xa4>
 80060fa:	6823      	ldr	r3, [r4, #0]
 80060fc:	68e5      	ldr	r5, [r4, #12]
 80060fe:	6832      	ldr	r2, [r6, #0]
 8006100:	f003 0306 	and.w	r3, r3, #6
 8006104:	2b04      	cmp	r3, #4
 8006106:	bf08      	it	eq
 8006108:	1aad      	subeq	r5, r5, r2
 800610a:	68a3      	ldr	r3, [r4, #8]
 800610c:	6922      	ldr	r2, [r4, #16]
 800610e:	bf0c      	ite	eq
 8006110:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006114:	2500      	movne	r5, #0
 8006116:	4293      	cmp	r3, r2
 8006118:	bfc4      	itt	gt
 800611a:	1a9b      	subgt	r3, r3, r2
 800611c:	18ed      	addgt	r5, r5, r3
 800611e:	2600      	movs	r6, #0
 8006120:	341a      	adds	r4, #26
 8006122:	42b5      	cmp	r5, r6
 8006124:	d11a      	bne.n	800615c <_printf_common+0xc8>
 8006126:	2000      	movs	r0, #0
 8006128:	e008      	b.n	800613c <_printf_common+0xa8>
 800612a:	2301      	movs	r3, #1
 800612c:	4652      	mov	r2, sl
 800612e:	4649      	mov	r1, r9
 8006130:	4638      	mov	r0, r7
 8006132:	47c0      	blx	r8
 8006134:	3001      	adds	r0, #1
 8006136:	d103      	bne.n	8006140 <_printf_common+0xac>
 8006138:	f04f 30ff 	mov.w	r0, #4294967295
 800613c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006140:	3501      	adds	r5, #1
 8006142:	e7c6      	b.n	80060d2 <_printf_common+0x3e>
 8006144:	18e1      	adds	r1, r4, r3
 8006146:	1c5a      	adds	r2, r3, #1
 8006148:	2030      	movs	r0, #48	; 0x30
 800614a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800614e:	4422      	add	r2, r4
 8006150:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006154:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006158:	3302      	adds	r3, #2
 800615a:	e7c7      	b.n	80060ec <_printf_common+0x58>
 800615c:	2301      	movs	r3, #1
 800615e:	4622      	mov	r2, r4
 8006160:	4649      	mov	r1, r9
 8006162:	4638      	mov	r0, r7
 8006164:	47c0      	blx	r8
 8006166:	3001      	adds	r0, #1
 8006168:	d0e6      	beq.n	8006138 <_printf_common+0xa4>
 800616a:	3601      	adds	r6, #1
 800616c:	e7d9      	b.n	8006122 <_printf_common+0x8e>
	...

08006170 <_printf_i>:
 8006170:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006174:	7e0f      	ldrb	r7, [r1, #24]
 8006176:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006178:	2f78      	cmp	r7, #120	; 0x78
 800617a:	4691      	mov	r9, r2
 800617c:	4680      	mov	r8, r0
 800617e:	460c      	mov	r4, r1
 8006180:	469a      	mov	sl, r3
 8006182:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006186:	d807      	bhi.n	8006198 <_printf_i+0x28>
 8006188:	2f62      	cmp	r7, #98	; 0x62
 800618a:	d80a      	bhi.n	80061a2 <_printf_i+0x32>
 800618c:	2f00      	cmp	r7, #0
 800618e:	f000 80d8 	beq.w	8006342 <_printf_i+0x1d2>
 8006192:	2f58      	cmp	r7, #88	; 0x58
 8006194:	f000 80a3 	beq.w	80062de <_printf_i+0x16e>
 8006198:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800619c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80061a0:	e03a      	b.n	8006218 <_printf_i+0xa8>
 80061a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80061a6:	2b15      	cmp	r3, #21
 80061a8:	d8f6      	bhi.n	8006198 <_printf_i+0x28>
 80061aa:	a101      	add	r1, pc, #4	; (adr r1, 80061b0 <_printf_i+0x40>)
 80061ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061b0:	08006209 	.word	0x08006209
 80061b4:	0800621d 	.word	0x0800621d
 80061b8:	08006199 	.word	0x08006199
 80061bc:	08006199 	.word	0x08006199
 80061c0:	08006199 	.word	0x08006199
 80061c4:	08006199 	.word	0x08006199
 80061c8:	0800621d 	.word	0x0800621d
 80061cc:	08006199 	.word	0x08006199
 80061d0:	08006199 	.word	0x08006199
 80061d4:	08006199 	.word	0x08006199
 80061d8:	08006199 	.word	0x08006199
 80061dc:	08006329 	.word	0x08006329
 80061e0:	0800624d 	.word	0x0800624d
 80061e4:	0800630b 	.word	0x0800630b
 80061e8:	08006199 	.word	0x08006199
 80061ec:	08006199 	.word	0x08006199
 80061f0:	0800634b 	.word	0x0800634b
 80061f4:	08006199 	.word	0x08006199
 80061f8:	0800624d 	.word	0x0800624d
 80061fc:	08006199 	.word	0x08006199
 8006200:	08006199 	.word	0x08006199
 8006204:	08006313 	.word	0x08006313
 8006208:	682b      	ldr	r3, [r5, #0]
 800620a:	1d1a      	adds	r2, r3, #4
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	602a      	str	r2, [r5, #0]
 8006210:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006214:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006218:	2301      	movs	r3, #1
 800621a:	e0a3      	b.n	8006364 <_printf_i+0x1f4>
 800621c:	6820      	ldr	r0, [r4, #0]
 800621e:	6829      	ldr	r1, [r5, #0]
 8006220:	0606      	lsls	r6, r0, #24
 8006222:	f101 0304 	add.w	r3, r1, #4
 8006226:	d50a      	bpl.n	800623e <_printf_i+0xce>
 8006228:	680e      	ldr	r6, [r1, #0]
 800622a:	602b      	str	r3, [r5, #0]
 800622c:	2e00      	cmp	r6, #0
 800622e:	da03      	bge.n	8006238 <_printf_i+0xc8>
 8006230:	232d      	movs	r3, #45	; 0x2d
 8006232:	4276      	negs	r6, r6
 8006234:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006238:	485e      	ldr	r0, [pc, #376]	; (80063b4 <_printf_i+0x244>)
 800623a:	230a      	movs	r3, #10
 800623c:	e019      	b.n	8006272 <_printf_i+0x102>
 800623e:	680e      	ldr	r6, [r1, #0]
 8006240:	602b      	str	r3, [r5, #0]
 8006242:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006246:	bf18      	it	ne
 8006248:	b236      	sxthne	r6, r6
 800624a:	e7ef      	b.n	800622c <_printf_i+0xbc>
 800624c:	682b      	ldr	r3, [r5, #0]
 800624e:	6820      	ldr	r0, [r4, #0]
 8006250:	1d19      	adds	r1, r3, #4
 8006252:	6029      	str	r1, [r5, #0]
 8006254:	0601      	lsls	r1, r0, #24
 8006256:	d501      	bpl.n	800625c <_printf_i+0xec>
 8006258:	681e      	ldr	r6, [r3, #0]
 800625a:	e002      	b.n	8006262 <_printf_i+0xf2>
 800625c:	0646      	lsls	r6, r0, #25
 800625e:	d5fb      	bpl.n	8006258 <_printf_i+0xe8>
 8006260:	881e      	ldrh	r6, [r3, #0]
 8006262:	4854      	ldr	r0, [pc, #336]	; (80063b4 <_printf_i+0x244>)
 8006264:	2f6f      	cmp	r7, #111	; 0x6f
 8006266:	bf0c      	ite	eq
 8006268:	2308      	moveq	r3, #8
 800626a:	230a      	movne	r3, #10
 800626c:	2100      	movs	r1, #0
 800626e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006272:	6865      	ldr	r5, [r4, #4]
 8006274:	60a5      	str	r5, [r4, #8]
 8006276:	2d00      	cmp	r5, #0
 8006278:	bfa2      	ittt	ge
 800627a:	6821      	ldrge	r1, [r4, #0]
 800627c:	f021 0104 	bicge.w	r1, r1, #4
 8006280:	6021      	strge	r1, [r4, #0]
 8006282:	b90e      	cbnz	r6, 8006288 <_printf_i+0x118>
 8006284:	2d00      	cmp	r5, #0
 8006286:	d04d      	beq.n	8006324 <_printf_i+0x1b4>
 8006288:	4615      	mov	r5, r2
 800628a:	fbb6 f1f3 	udiv	r1, r6, r3
 800628e:	fb03 6711 	mls	r7, r3, r1, r6
 8006292:	5dc7      	ldrb	r7, [r0, r7]
 8006294:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006298:	4637      	mov	r7, r6
 800629a:	42bb      	cmp	r3, r7
 800629c:	460e      	mov	r6, r1
 800629e:	d9f4      	bls.n	800628a <_printf_i+0x11a>
 80062a0:	2b08      	cmp	r3, #8
 80062a2:	d10b      	bne.n	80062bc <_printf_i+0x14c>
 80062a4:	6823      	ldr	r3, [r4, #0]
 80062a6:	07de      	lsls	r6, r3, #31
 80062a8:	d508      	bpl.n	80062bc <_printf_i+0x14c>
 80062aa:	6923      	ldr	r3, [r4, #16]
 80062ac:	6861      	ldr	r1, [r4, #4]
 80062ae:	4299      	cmp	r1, r3
 80062b0:	bfde      	ittt	le
 80062b2:	2330      	movle	r3, #48	; 0x30
 80062b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80062b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80062bc:	1b52      	subs	r2, r2, r5
 80062be:	6122      	str	r2, [r4, #16]
 80062c0:	f8cd a000 	str.w	sl, [sp]
 80062c4:	464b      	mov	r3, r9
 80062c6:	aa03      	add	r2, sp, #12
 80062c8:	4621      	mov	r1, r4
 80062ca:	4640      	mov	r0, r8
 80062cc:	f7ff fee2 	bl	8006094 <_printf_common>
 80062d0:	3001      	adds	r0, #1
 80062d2:	d14c      	bne.n	800636e <_printf_i+0x1fe>
 80062d4:	f04f 30ff 	mov.w	r0, #4294967295
 80062d8:	b004      	add	sp, #16
 80062da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062de:	4835      	ldr	r0, [pc, #212]	; (80063b4 <_printf_i+0x244>)
 80062e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80062e4:	6829      	ldr	r1, [r5, #0]
 80062e6:	6823      	ldr	r3, [r4, #0]
 80062e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80062ec:	6029      	str	r1, [r5, #0]
 80062ee:	061d      	lsls	r5, r3, #24
 80062f0:	d514      	bpl.n	800631c <_printf_i+0x1ac>
 80062f2:	07df      	lsls	r7, r3, #31
 80062f4:	bf44      	itt	mi
 80062f6:	f043 0320 	orrmi.w	r3, r3, #32
 80062fa:	6023      	strmi	r3, [r4, #0]
 80062fc:	b91e      	cbnz	r6, 8006306 <_printf_i+0x196>
 80062fe:	6823      	ldr	r3, [r4, #0]
 8006300:	f023 0320 	bic.w	r3, r3, #32
 8006304:	6023      	str	r3, [r4, #0]
 8006306:	2310      	movs	r3, #16
 8006308:	e7b0      	b.n	800626c <_printf_i+0xfc>
 800630a:	6823      	ldr	r3, [r4, #0]
 800630c:	f043 0320 	orr.w	r3, r3, #32
 8006310:	6023      	str	r3, [r4, #0]
 8006312:	2378      	movs	r3, #120	; 0x78
 8006314:	4828      	ldr	r0, [pc, #160]	; (80063b8 <_printf_i+0x248>)
 8006316:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800631a:	e7e3      	b.n	80062e4 <_printf_i+0x174>
 800631c:	0659      	lsls	r1, r3, #25
 800631e:	bf48      	it	mi
 8006320:	b2b6      	uxthmi	r6, r6
 8006322:	e7e6      	b.n	80062f2 <_printf_i+0x182>
 8006324:	4615      	mov	r5, r2
 8006326:	e7bb      	b.n	80062a0 <_printf_i+0x130>
 8006328:	682b      	ldr	r3, [r5, #0]
 800632a:	6826      	ldr	r6, [r4, #0]
 800632c:	6961      	ldr	r1, [r4, #20]
 800632e:	1d18      	adds	r0, r3, #4
 8006330:	6028      	str	r0, [r5, #0]
 8006332:	0635      	lsls	r5, r6, #24
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	d501      	bpl.n	800633c <_printf_i+0x1cc>
 8006338:	6019      	str	r1, [r3, #0]
 800633a:	e002      	b.n	8006342 <_printf_i+0x1d2>
 800633c:	0670      	lsls	r0, r6, #25
 800633e:	d5fb      	bpl.n	8006338 <_printf_i+0x1c8>
 8006340:	8019      	strh	r1, [r3, #0]
 8006342:	2300      	movs	r3, #0
 8006344:	6123      	str	r3, [r4, #16]
 8006346:	4615      	mov	r5, r2
 8006348:	e7ba      	b.n	80062c0 <_printf_i+0x150>
 800634a:	682b      	ldr	r3, [r5, #0]
 800634c:	1d1a      	adds	r2, r3, #4
 800634e:	602a      	str	r2, [r5, #0]
 8006350:	681d      	ldr	r5, [r3, #0]
 8006352:	6862      	ldr	r2, [r4, #4]
 8006354:	2100      	movs	r1, #0
 8006356:	4628      	mov	r0, r5
 8006358:	f7f9 ff4a 	bl	80001f0 <memchr>
 800635c:	b108      	cbz	r0, 8006362 <_printf_i+0x1f2>
 800635e:	1b40      	subs	r0, r0, r5
 8006360:	6060      	str	r0, [r4, #4]
 8006362:	6863      	ldr	r3, [r4, #4]
 8006364:	6123      	str	r3, [r4, #16]
 8006366:	2300      	movs	r3, #0
 8006368:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800636c:	e7a8      	b.n	80062c0 <_printf_i+0x150>
 800636e:	6923      	ldr	r3, [r4, #16]
 8006370:	462a      	mov	r2, r5
 8006372:	4649      	mov	r1, r9
 8006374:	4640      	mov	r0, r8
 8006376:	47d0      	blx	sl
 8006378:	3001      	adds	r0, #1
 800637a:	d0ab      	beq.n	80062d4 <_printf_i+0x164>
 800637c:	6823      	ldr	r3, [r4, #0]
 800637e:	079b      	lsls	r3, r3, #30
 8006380:	d413      	bmi.n	80063aa <_printf_i+0x23a>
 8006382:	68e0      	ldr	r0, [r4, #12]
 8006384:	9b03      	ldr	r3, [sp, #12]
 8006386:	4298      	cmp	r0, r3
 8006388:	bfb8      	it	lt
 800638a:	4618      	movlt	r0, r3
 800638c:	e7a4      	b.n	80062d8 <_printf_i+0x168>
 800638e:	2301      	movs	r3, #1
 8006390:	4632      	mov	r2, r6
 8006392:	4649      	mov	r1, r9
 8006394:	4640      	mov	r0, r8
 8006396:	47d0      	blx	sl
 8006398:	3001      	adds	r0, #1
 800639a:	d09b      	beq.n	80062d4 <_printf_i+0x164>
 800639c:	3501      	adds	r5, #1
 800639e:	68e3      	ldr	r3, [r4, #12]
 80063a0:	9903      	ldr	r1, [sp, #12]
 80063a2:	1a5b      	subs	r3, r3, r1
 80063a4:	42ab      	cmp	r3, r5
 80063a6:	dcf2      	bgt.n	800638e <_printf_i+0x21e>
 80063a8:	e7eb      	b.n	8006382 <_printf_i+0x212>
 80063aa:	2500      	movs	r5, #0
 80063ac:	f104 0619 	add.w	r6, r4, #25
 80063b0:	e7f5      	b.n	800639e <_printf_i+0x22e>
 80063b2:	bf00      	nop
 80063b4:	08006711 	.word	0x08006711
 80063b8:	08006722 	.word	0x08006722

080063bc <memcpy>:
 80063bc:	440a      	add	r2, r1
 80063be:	4291      	cmp	r1, r2
 80063c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80063c4:	d100      	bne.n	80063c8 <memcpy+0xc>
 80063c6:	4770      	bx	lr
 80063c8:	b510      	push	{r4, lr}
 80063ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063d2:	4291      	cmp	r1, r2
 80063d4:	d1f9      	bne.n	80063ca <memcpy+0xe>
 80063d6:	bd10      	pop	{r4, pc}

080063d8 <memmove>:
 80063d8:	4288      	cmp	r0, r1
 80063da:	b510      	push	{r4, lr}
 80063dc:	eb01 0402 	add.w	r4, r1, r2
 80063e0:	d902      	bls.n	80063e8 <memmove+0x10>
 80063e2:	4284      	cmp	r4, r0
 80063e4:	4623      	mov	r3, r4
 80063e6:	d807      	bhi.n	80063f8 <memmove+0x20>
 80063e8:	1e43      	subs	r3, r0, #1
 80063ea:	42a1      	cmp	r1, r4
 80063ec:	d008      	beq.n	8006400 <memmove+0x28>
 80063ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80063f6:	e7f8      	b.n	80063ea <memmove+0x12>
 80063f8:	4402      	add	r2, r0
 80063fa:	4601      	mov	r1, r0
 80063fc:	428a      	cmp	r2, r1
 80063fe:	d100      	bne.n	8006402 <memmove+0x2a>
 8006400:	bd10      	pop	{r4, pc}
 8006402:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006406:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800640a:	e7f7      	b.n	80063fc <memmove+0x24>

0800640c <_free_r>:
 800640c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800640e:	2900      	cmp	r1, #0
 8006410:	d044      	beq.n	800649c <_free_r+0x90>
 8006412:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006416:	9001      	str	r0, [sp, #4]
 8006418:	2b00      	cmp	r3, #0
 800641a:	f1a1 0404 	sub.w	r4, r1, #4
 800641e:	bfb8      	it	lt
 8006420:	18e4      	addlt	r4, r4, r3
 8006422:	f000 f913 	bl	800664c <__malloc_lock>
 8006426:	4a1e      	ldr	r2, [pc, #120]	; (80064a0 <_free_r+0x94>)
 8006428:	9801      	ldr	r0, [sp, #4]
 800642a:	6813      	ldr	r3, [r2, #0]
 800642c:	b933      	cbnz	r3, 800643c <_free_r+0x30>
 800642e:	6063      	str	r3, [r4, #4]
 8006430:	6014      	str	r4, [r2, #0]
 8006432:	b003      	add	sp, #12
 8006434:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006438:	f000 b90e 	b.w	8006658 <__malloc_unlock>
 800643c:	42a3      	cmp	r3, r4
 800643e:	d908      	bls.n	8006452 <_free_r+0x46>
 8006440:	6825      	ldr	r5, [r4, #0]
 8006442:	1961      	adds	r1, r4, r5
 8006444:	428b      	cmp	r3, r1
 8006446:	bf01      	itttt	eq
 8006448:	6819      	ldreq	r1, [r3, #0]
 800644a:	685b      	ldreq	r3, [r3, #4]
 800644c:	1949      	addeq	r1, r1, r5
 800644e:	6021      	streq	r1, [r4, #0]
 8006450:	e7ed      	b.n	800642e <_free_r+0x22>
 8006452:	461a      	mov	r2, r3
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	b10b      	cbz	r3, 800645c <_free_r+0x50>
 8006458:	42a3      	cmp	r3, r4
 800645a:	d9fa      	bls.n	8006452 <_free_r+0x46>
 800645c:	6811      	ldr	r1, [r2, #0]
 800645e:	1855      	adds	r5, r2, r1
 8006460:	42a5      	cmp	r5, r4
 8006462:	d10b      	bne.n	800647c <_free_r+0x70>
 8006464:	6824      	ldr	r4, [r4, #0]
 8006466:	4421      	add	r1, r4
 8006468:	1854      	adds	r4, r2, r1
 800646a:	42a3      	cmp	r3, r4
 800646c:	6011      	str	r1, [r2, #0]
 800646e:	d1e0      	bne.n	8006432 <_free_r+0x26>
 8006470:	681c      	ldr	r4, [r3, #0]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	6053      	str	r3, [r2, #4]
 8006476:	4421      	add	r1, r4
 8006478:	6011      	str	r1, [r2, #0]
 800647a:	e7da      	b.n	8006432 <_free_r+0x26>
 800647c:	d902      	bls.n	8006484 <_free_r+0x78>
 800647e:	230c      	movs	r3, #12
 8006480:	6003      	str	r3, [r0, #0]
 8006482:	e7d6      	b.n	8006432 <_free_r+0x26>
 8006484:	6825      	ldr	r5, [r4, #0]
 8006486:	1961      	adds	r1, r4, r5
 8006488:	428b      	cmp	r3, r1
 800648a:	bf04      	itt	eq
 800648c:	6819      	ldreq	r1, [r3, #0]
 800648e:	685b      	ldreq	r3, [r3, #4]
 8006490:	6063      	str	r3, [r4, #4]
 8006492:	bf04      	itt	eq
 8006494:	1949      	addeq	r1, r1, r5
 8006496:	6021      	streq	r1, [r4, #0]
 8006498:	6054      	str	r4, [r2, #4]
 800649a:	e7ca      	b.n	8006432 <_free_r+0x26>
 800649c:	b003      	add	sp, #12
 800649e:	bd30      	pop	{r4, r5, pc}
 80064a0:	20000248 	.word	0x20000248

080064a4 <sbrk_aligned>:
 80064a4:	b570      	push	{r4, r5, r6, lr}
 80064a6:	4e0e      	ldr	r6, [pc, #56]	; (80064e0 <sbrk_aligned+0x3c>)
 80064a8:	460c      	mov	r4, r1
 80064aa:	6831      	ldr	r1, [r6, #0]
 80064ac:	4605      	mov	r5, r0
 80064ae:	b911      	cbnz	r1, 80064b6 <sbrk_aligned+0x12>
 80064b0:	f000 f8bc 	bl	800662c <_sbrk_r>
 80064b4:	6030      	str	r0, [r6, #0]
 80064b6:	4621      	mov	r1, r4
 80064b8:	4628      	mov	r0, r5
 80064ba:	f000 f8b7 	bl	800662c <_sbrk_r>
 80064be:	1c43      	adds	r3, r0, #1
 80064c0:	d00a      	beq.n	80064d8 <sbrk_aligned+0x34>
 80064c2:	1cc4      	adds	r4, r0, #3
 80064c4:	f024 0403 	bic.w	r4, r4, #3
 80064c8:	42a0      	cmp	r0, r4
 80064ca:	d007      	beq.n	80064dc <sbrk_aligned+0x38>
 80064cc:	1a21      	subs	r1, r4, r0
 80064ce:	4628      	mov	r0, r5
 80064d0:	f000 f8ac 	bl	800662c <_sbrk_r>
 80064d4:	3001      	adds	r0, #1
 80064d6:	d101      	bne.n	80064dc <sbrk_aligned+0x38>
 80064d8:	f04f 34ff 	mov.w	r4, #4294967295
 80064dc:	4620      	mov	r0, r4
 80064de:	bd70      	pop	{r4, r5, r6, pc}
 80064e0:	2000024c 	.word	0x2000024c

080064e4 <_malloc_r>:
 80064e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064e8:	1ccd      	adds	r5, r1, #3
 80064ea:	f025 0503 	bic.w	r5, r5, #3
 80064ee:	3508      	adds	r5, #8
 80064f0:	2d0c      	cmp	r5, #12
 80064f2:	bf38      	it	cc
 80064f4:	250c      	movcc	r5, #12
 80064f6:	2d00      	cmp	r5, #0
 80064f8:	4607      	mov	r7, r0
 80064fa:	db01      	blt.n	8006500 <_malloc_r+0x1c>
 80064fc:	42a9      	cmp	r1, r5
 80064fe:	d905      	bls.n	800650c <_malloc_r+0x28>
 8006500:	230c      	movs	r3, #12
 8006502:	603b      	str	r3, [r7, #0]
 8006504:	2600      	movs	r6, #0
 8006506:	4630      	mov	r0, r6
 8006508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800650c:	4e2e      	ldr	r6, [pc, #184]	; (80065c8 <_malloc_r+0xe4>)
 800650e:	f000 f89d 	bl	800664c <__malloc_lock>
 8006512:	6833      	ldr	r3, [r6, #0]
 8006514:	461c      	mov	r4, r3
 8006516:	bb34      	cbnz	r4, 8006566 <_malloc_r+0x82>
 8006518:	4629      	mov	r1, r5
 800651a:	4638      	mov	r0, r7
 800651c:	f7ff ffc2 	bl	80064a4 <sbrk_aligned>
 8006520:	1c43      	adds	r3, r0, #1
 8006522:	4604      	mov	r4, r0
 8006524:	d14d      	bne.n	80065c2 <_malloc_r+0xde>
 8006526:	6834      	ldr	r4, [r6, #0]
 8006528:	4626      	mov	r6, r4
 800652a:	2e00      	cmp	r6, #0
 800652c:	d140      	bne.n	80065b0 <_malloc_r+0xcc>
 800652e:	6823      	ldr	r3, [r4, #0]
 8006530:	4631      	mov	r1, r6
 8006532:	4638      	mov	r0, r7
 8006534:	eb04 0803 	add.w	r8, r4, r3
 8006538:	f000 f878 	bl	800662c <_sbrk_r>
 800653c:	4580      	cmp	r8, r0
 800653e:	d13a      	bne.n	80065b6 <_malloc_r+0xd2>
 8006540:	6821      	ldr	r1, [r4, #0]
 8006542:	3503      	adds	r5, #3
 8006544:	1a6d      	subs	r5, r5, r1
 8006546:	f025 0503 	bic.w	r5, r5, #3
 800654a:	3508      	adds	r5, #8
 800654c:	2d0c      	cmp	r5, #12
 800654e:	bf38      	it	cc
 8006550:	250c      	movcc	r5, #12
 8006552:	4629      	mov	r1, r5
 8006554:	4638      	mov	r0, r7
 8006556:	f7ff ffa5 	bl	80064a4 <sbrk_aligned>
 800655a:	3001      	adds	r0, #1
 800655c:	d02b      	beq.n	80065b6 <_malloc_r+0xd2>
 800655e:	6823      	ldr	r3, [r4, #0]
 8006560:	442b      	add	r3, r5
 8006562:	6023      	str	r3, [r4, #0]
 8006564:	e00e      	b.n	8006584 <_malloc_r+0xa0>
 8006566:	6822      	ldr	r2, [r4, #0]
 8006568:	1b52      	subs	r2, r2, r5
 800656a:	d41e      	bmi.n	80065aa <_malloc_r+0xc6>
 800656c:	2a0b      	cmp	r2, #11
 800656e:	d916      	bls.n	800659e <_malloc_r+0xba>
 8006570:	1961      	adds	r1, r4, r5
 8006572:	42a3      	cmp	r3, r4
 8006574:	6025      	str	r5, [r4, #0]
 8006576:	bf18      	it	ne
 8006578:	6059      	strne	r1, [r3, #4]
 800657a:	6863      	ldr	r3, [r4, #4]
 800657c:	bf08      	it	eq
 800657e:	6031      	streq	r1, [r6, #0]
 8006580:	5162      	str	r2, [r4, r5]
 8006582:	604b      	str	r3, [r1, #4]
 8006584:	4638      	mov	r0, r7
 8006586:	f104 060b 	add.w	r6, r4, #11
 800658a:	f000 f865 	bl	8006658 <__malloc_unlock>
 800658e:	f026 0607 	bic.w	r6, r6, #7
 8006592:	1d23      	adds	r3, r4, #4
 8006594:	1af2      	subs	r2, r6, r3
 8006596:	d0b6      	beq.n	8006506 <_malloc_r+0x22>
 8006598:	1b9b      	subs	r3, r3, r6
 800659a:	50a3      	str	r3, [r4, r2]
 800659c:	e7b3      	b.n	8006506 <_malloc_r+0x22>
 800659e:	6862      	ldr	r2, [r4, #4]
 80065a0:	42a3      	cmp	r3, r4
 80065a2:	bf0c      	ite	eq
 80065a4:	6032      	streq	r2, [r6, #0]
 80065a6:	605a      	strne	r2, [r3, #4]
 80065a8:	e7ec      	b.n	8006584 <_malloc_r+0xa0>
 80065aa:	4623      	mov	r3, r4
 80065ac:	6864      	ldr	r4, [r4, #4]
 80065ae:	e7b2      	b.n	8006516 <_malloc_r+0x32>
 80065b0:	4634      	mov	r4, r6
 80065b2:	6876      	ldr	r6, [r6, #4]
 80065b4:	e7b9      	b.n	800652a <_malloc_r+0x46>
 80065b6:	230c      	movs	r3, #12
 80065b8:	603b      	str	r3, [r7, #0]
 80065ba:	4638      	mov	r0, r7
 80065bc:	f000 f84c 	bl	8006658 <__malloc_unlock>
 80065c0:	e7a1      	b.n	8006506 <_malloc_r+0x22>
 80065c2:	6025      	str	r5, [r4, #0]
 80065c4:	e7de      	b.n	8006584 <_malloc_r+0xa0>
 80065c6:	bf00      	nop
 80065c8:	20000248 	.word	0x20000248

080065cc <_realloc_r>:
 80065cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065d0:	4680      	mov	r8, r0
 80065d2:	4614      	mov	r4, r2
 80065d4:	460e      	mov	r6, r1
 80065d6:	b921      	cbnz	r1, 80065e2 <_realloc_r+0x16>
 80065d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065dc:	4611      	mov	r1, r2
 80065de:	f7ff bf81 	b.w	80064e4 <_malloc_r>
 80065e2:	b92a      	cbnz	r2, 80065f0 <_realloc_r+0x24>
 80065e4:	f7ff ff12 	bl	800640c <_free_r>
 80065e8:	4625      	mov	r5, r4
 80065ea:	4628      	mov	r0, r5
 80065ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065f0:	f000 f838 	bl	8006664 <_malloc_usable_size_r>
 80065f4:	4284      	cmp	r4, r0
 80065f6:	4607      	mov	r7, r0
 80065f8:	d802      	bhi.n	8006600 <_realloc_r+0x34>
 80065fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80065fe:	d812      	bhi.n	8006626 <_realloc_r+0x5a>
 8006600:	4621      	mov	r1, r4
 8006602:	4640      	mov	r0, r8
 8006604:	f7ff ff6e 	bl	80064e4 <_malloc_r>
 8006608:	4605      	mov	r5, r0
 800660a:	2800      	cmp	r0, #0
 800660c:	d0ed      	beq.n	80065ea <_realloc_r+0x1e>
 800660e:	42bc      	cmp	r4, r7
 8006610:	4622      	mov	r2, r4
 8006612:	4631      	mov	r1, r6
 8006614:	bf28      	it	cs
 8006616:	463a      	movcs	r2, r7
 8006618:	f7ff fed0 	bl	80063bc <memcpy>
 800661c:	4631      	mov	r1, r6
 800661e:	4640      	mov	r0, r8
 8006620:	f7ff fef4 	bl	800640c <_free_r>
 8006624:	e7e1      	b.n	80065ea <_realloc_r+0x1e>
 8006626:	4635      	mov	r5, r6
 8006628:	e7df      	b.n	80065ea <_realloc_r+0x1e>
	...

0800662c <_sbrk_r>:
 800662c:	b538      	push	{r3, r4, r5, lr}
 800662e:	4d06      	ldr	r5, [pc, #24]	; (8006648 <_sbrk_r+0x1c>)
 8006630:	2300      	movs	r3, #0
 8006632:	4604      	mov	r4, r0
 8006634:	4608      	mov	r0, r1
 8006636:	602b      	str	r3, [r5, #0]
 8006638:	f7fb ff7c 	bl	8002534 <_sbrk>
 800663c:	1c43      	adds	r3, r0, #1
 800663e:	d102      	bne.n	8006646 <_sbrk_r+0x1a>
 8006640:	682b      	ldr	r3, [r5, #0]
 8006642:	b103      	cbz	r3, 8006646 <_sbrk_r+0x1a>
 8006644:	6023      	str	r3, [r4, #0]
 8006646:	bd38      	pop	{r3, r4, r5, pc}
 8006648:	20000250 	.word	0x20000250

0800664c <__malloc_lock>:
 800664c:	4801      	ldr	r0, [pc, #4]	; (8006654 <__malloc_lock+0x8>)
 800664e:	f000 b811 	b.w	8006674 <__retarget_lock_acquire_recursive>
 8006652:	bf00      	nop
 8006654:	20000254 	.word	0x20000254

08006658 <__malloc_unlock>:
 8006658:	4801      	ldr	r0, [pc, #4]	; (8006660 <__malloc_unlock+0x8>)
 800665a:	f000 b80c 	b.w	8006676 <__retarget_lock_release_recursive>
 800665e:	bf00      	nop
 8006660:	20000254 	.word	0x20000254

08006664 <_malloc_usable_size_r>:
 8006664:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006668:	1f18      	subs	r0, r3, #4
 800666a:	2b00      	cmp	r3, #0
 800666c:	bfbc      	itt	lt
 800666e:	580b      	ldrlt	r3, [r1, r0]
 8006670:	18c0      	addlt	r0, r0, r3
 8006672:	4770      	bx	lr

08006674 <__retarget_lock_acquire_recursive>:
 8006674:	4770      	bx	lr

08006676 <__retarget_lock_release_recursive>:
 8006676:	4770      	bx	lr

08006678 <_init>:
 8006678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800667a:	bf00      	nop
 800667c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800667e:	bc08      	pop	{r3}
 8006680:	469e      	mov	lr, r3
 8006682:	4770      	bx	lr

08006684 <_fini>:
 8006684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006686:	bf00      	nop
 8006688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800668a:	bc08      	pop	{r3}
 800668c:	469e      	mov	lr, r3
 800668e:	4770      	bx	lr

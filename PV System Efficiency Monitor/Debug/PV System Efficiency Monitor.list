
PV System Efficiency Monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007aec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08007c90  08007c90  00017c90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007df0  08007df0  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  08007df0  08007df0  00017df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007df8  08007df8  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007df8  08007df8  00017df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007dfc  08007dfc  00017dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08007e00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  200000a8  08007ea4  000200a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000358  08007ea4  00020358  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff97  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000216f  00000000  00000000  0003006b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e20  00000000  00000000  000321e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d58  00000000  00000000  00033000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001821c  00000000  00000000  00033d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001075d  00000000  00000000  0004bf74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b3c3  00000000  00000000  0005c6d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f7a94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004414  00000000  00000000  000f7ae4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a8 	.word	0x200000a8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007c74 	.word	0x08007c74

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000ac 	.word	0x200000ac
 80001dc:	08007c74 	.word	0x08007c74

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000eac:	b5b0      	push	{r4, r5, r7, lr}
 8000eae:	b08a      	sub	sp, #40	; 0x28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
 8000eb8:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000eba:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000ebe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8000ec2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000ec6:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000eca:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000ecc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000ece:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000edc:	f107 0310 	add.w	r3, r7, #16
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f000 f80e 	bl	8000f02 <Lcd_init>

	return lcd;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	461d      	mov	r5, r3
 8000eea:	f107 0410 	add.w	r4, r7, #16
 8000eee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ef0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ef2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ef6:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000efa:	68f8      	ldr	r0, [r7, #12]
 8000efc:	3728      	adds	r7, #40	; 0x28
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bdb0      	pop	{r4, r5, r7, pc}

08000f02 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	7d9b      	ldrb	r3, [r3, #22]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d10c      	bne.n	8000f2c <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8000f12:	2133      	movs	r1, #51	; 0x33
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f000 f863 	bl	8000fe0 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000f1a:	2132      	movs	r1, #50	; 0x32
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f000 f85f 	bl	8000fe0 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000f22:	2128      	movs	r1, #40	; 0x28
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f000 f85b 	bl	8000fe0 <lcd_write_command>
 8000f2a:	e003      	b.n	8000f34 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000f2c:	2138      	movs	r1, #56	; 0x38
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f000 f856 	bl	8000fe0 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000f34:	2101      	movs	r1, #1
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f000 f852 	bl	8000fe0 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000f3c:	210c      	movs	r1, #12
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f000 f84e 	bl	8000fe0 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000f44:	2106      	movs	r1, #6
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f000 f84a 	bl	8000fe0 <lcd_write_command>
}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000f54:	b590      	push	{r4, r7, lr}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]

	for(uint8_t i = 0; i < strlen(string); i++)
 8000f5e:	2300      	movs	r3, #0
 8000f60:	73fb      	strb	r3, [r7, #15]
 8000f62:	e00a      	b.n	8000f7a <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000f64:	7bfb      	ldrb	r3, [r7, #15]
 8000f66:	683a      	ldr	r2, [r7, #0]
 8000f68:	4413      	add	r3, r2
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f000 f864 	bl	800103c <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	3301      	adds	r3, #1
 8000f78:	73fb      	strb	r3, [r7, #15]
 8000f7a:	7bfc      	ldrb	r4, [r7, #15]
 8000f7c:	6838      	ldr	r0, [r7, #0]
 8000f7e:	f7ff f92f 	bl	80001e0 <strlen>
 8000f82:	4603      	mov	r3, r0
 8000f84:	429c      	cmp	r4, r3
 8000f86:	d3ed      	bcc.n	8000f64 <Lcd_string+0x10>
	}
}
 8000f88:	bf00      	nop
 8000f8a:	bf00      	nop
 8000f8c:	3714      	adds	r7, #20
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd90      	pop	{r4, r7, pc}
	...

08000f94 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	70fb      	strb	r3, [r7, #3]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000fa4:	78fb      	ldrb	r3, [r7, #3]
 8000fa6:	4a07      	ldr	r2, [pc, #28]	; (8000fc4 <Lcd_cursor+0x30>)
 8000fa8:	5cd2      	ldrb	r2, [r2, r3]
 8000faa:	78bb      	ldrb	r3, [r7, #2]
 8000fac:	4413      	add	r3, r2
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	3b80      	subs	r3, #128	; 0x80
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f000 f812 	bl	8000fe0 <lcd_write_command>
	#endif
}
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	08007d70 	.word	0x08007d70

08000fc8 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f000 f804 	bl	8000fe0 <lcd_write_command>
}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	460b      	mov	r3, r1
 8000fea:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6898      	ldr	r0, [r3, #8]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	899b      	ldrh	r3, [r3, #12]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	f002 fea4 	bl	8003d44 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	7d9b      	ldrb	r3, [r3, #22]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d111      	bne.n	8001028 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8001004:	78fb      	ldrb	r3, [r7, #3]
 8001006:	091b      	lsrs	r3, r3, #4
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2204      	movs	r2, #4
 800100c:	4619      	mov	r1, r3
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f000 f842 	bl	8001098 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8001014:	78fb      	ldrb	r3, [r7, #3]
 8001016:	f003 030f 	and.w	r3, r3, #15
 800101a:	b2db      	uxtb	r3, r3
 800101c:	2204      	movs	r2, #4
 800101e:	4619      	mov	r1, r3
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f000 f839 	bl	8001098 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8001026:	e005      	b.n	8001034 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8001028:	78fb      	ldrb	r3, [r7, #3]
 800102a:	2208      	movs	r2, #8
 800102c:	4619      	mov	r1, r3
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f000 f832 	bl	8001098 <lcd_write>
}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <lcd_write_data>:
/**
 * Write a byte to the data register
 */

void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6898      	ldr	r0, [r3, #8]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	899b      	ldrh	r3, [r3, #12]
 8001050:	2201      	movs	r2, #1
 8001052:	4619      	mov	r1, r3
 8001054:	f002 fe76 	bl	8003d44 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	7d9b      	ldrb	r3, [r3, #22]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d111      	bne.n	8001084 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8001060:	78fb      	ldrb	r3, [r7, #3]
 8001062:	091b      	lsrs	r3, r3, #4
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2204      	movs	r2, #4
 8001068:	4619      	mov	r1, r3
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f000 f814 	bl	8001098 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8001070:	78fb      	ldrb	r3, [r7, #3]
 8001072:	f003 030f 	and.w	r3, r3, #15
 8001076:	b2db      	uxtb	r3, r3
 8001078:	2204      	movs	r2, #4
 800107a:	4619      	mov	r1, r3
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f000 f80b 	bl	8001098 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8001082:	e005      	b.n	8001090 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8001084:	78fb      	ldrb	r3, [r7, #3]
 8001086:	2208      	movs	r2, #8
 8001088:	4619      	mov	r1, r3
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f000 f804 	bl	8001098 <lcd_write>
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <lcd_write>:
 */

uint8_t set_enable = 0;
uint32_t previous_time = 0;
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	460b      	mov	r3, r1
 80010a2:	70fb      	strb	r3, [r7, #3]
 80010a4:	4613      	mov	r3, r2
 80010a6:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 80010a8:	2300      	movs	r3, #0
 80010aa:	73fb      	strb	r3, [r7, #15]
 80010ac:	e019      	b.n	80010e2 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	4413      	add	r3, r2
 80010b8:	6818      	ldr	r0, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	685a      	ldr	r2, [r3, #4]
 80010be:	7bfb      	ldrb	r3, [r7, #15]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	4413      	add	r3, r2
 80010c4:	8819      	ldrh	r1, [r3, #0]
 80010c6:	78fa      	ldrb	r2, [r7, #3]
 80010c8:	7bfb      	ldrb	r3, [r7, #15]
 80010ca:	fa42 f303 	asr.w	r3, r2, r3
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	461a      	mov	r2, r3
 80010d8:	f002 fe34 	bl	8003d44 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
 80010de:	3301      	adds	r3, #1
 80010e0:	73fb      	strb	r3, [r7, #15]
 80010e2:	7bfa      	ldrb	r2, [r7, #15]
 80010e4:	78bb      	ldrb	r3, [r7, #2]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d3e1      	bcc.n	80010ae <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6918      	ldr	r0, [r3, #16]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	8a9b      	ldrh	r3, [r3, #20]
 80010f2:	2201      	movs	r2, #1
 80010f4:	4619      	mov	r1, r3
 80010f6:	f002 fe25 	bl	8003d44 <HAL_GPIO_WritePin>
	DELAY(1);
 80010fa:	2001      	movs	r0, #1
 80010fc:	f001 fecc 	bl	8002e98 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6918      	ldr	r0, [r3, #16]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	8a9b      	ldrh	r3, [r3, #20]
 8001108:	2200      	movs	r2, #0
 800110a:	4619      	mov	r1, r3
 800110c:	f002 fe1a 	bl	8003d44 <HAL_GPIO_WritePin>
//        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); // E = 0
//        set_enable = 1;
//        previous_time = HAL_GetTick() ;
//    }

}
 8001110:	bf00      	nop
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <HAL_UART_RxCpltCallback>:
void change_lcd_display_mode();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]

	g_system_config[g_byte_count] = char_rcvd[0] ;
 8001120:	4b14      	ldr	r3, [pc, #80]	; (8001174 <HAL_UART_RxCpltCallback+0x5c>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	461a      	mov	r2, r3
 8001126:	4b14      	ldr	r3, [pc, #80]	; (8001178 <HAL_UART_RxCpltCallback+0x60>)
 8001128:	7819      	ldrb	r1, [r3, #0]
 800112a:	4b14      	ldr	r3, [pc, #80]	; (800117c <HAL_UART_RxCpltCallback+0x64>)
 800112c:	5499      	strb	r1, [r3, r2]
	g_byte_count++ ;
 800112e:	4b11      	ldr	r3, [pc, #68]	; (8001174 <HAL_UART_RxCpltCallback+0x5c>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	3301      	adds	r3, #1
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <HAL_UART_RxCpltCallback+0x5c>)
 8001138:	701a      	strb	r2, [r3, #0]

	if(char_rcvd[0] == '\n'){
 800113a:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <HAL_UART_RxCpltCallback+0x60>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b0a      	cmp	r3, #10
 8001140:	d10f      	bne.n	8001162 <HAL_UART_RxCpltCallback+0x4a>
		if(g_byte_count == 7){
 8001142:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <HAL_UART_RxCpltCallback+0x5c>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b07      	cmp	r3, #7
 8001148:	d103      	bne.n	8001152 <HAL_UART_RxCpltCallback+0x3a>
			g_config_command_rcvd = 1;
 800114a:	4b0d      	ldr	r3, [pc, #52]	; (8001180 <HAL_UART_RxCpltCallback+0x68>)
 800114c:	2201      	movs	r2, #1
 800114e:	701a      	strb	r2, [r3, #0]
 8001150:	e004      	b.n	800115c <HAL_UART_RxCpltCallback+0x44>
			// check for SP or EN command recvd
		}
		else{
			// remove for next DEMO
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)"Invalid command sent\n", 21);
 8001152:	2215      	movs	r2, #21
 8001154:	490b      	ldr	r1, [pc, #44]	; (8001184 <HAL_UART_RxCpltCallback+0x6c>)
 8001156:	480c      	ldr	r0, [pc, #48]	; (8001188 <HAL_UART_RxCpltCallback+0x70>)
 8001158:	f004 fa4d 	bl	80055f6 <HAL_UART_Transmit_IT>
			// DO NOTHING: NO STATE UPDATE IN THE CASE OF COMMAND NOT IN THE APPROPRIATE ORDER
		}

		g_byte_count =0 ;
 800115c:	4b05      	ldr	r3, [pc, #20]	; (8001174 <HAL_UART_RxCpltCallback+0x5c>)
 800115e:	2200      	movs	r2, #0
 8001160:	701a      	strb	r2, [r3, #0]
	}

	//re-prime receiver
	HAL_UART_Receive_IT(&huart2, (uint8_t*)char_rcvd, 1) ;
 8001162:	2201      	movs	r2, #1
 8001164:	4904      	ldr	r1, [pc, #16]	; (8001178 <HAL_UART_RxCpltCallback+0x60>)
 8001166:	4808      	ldr	r0, [pc, #32]	; (8001188 <HAL_UART_RxCpltCallback+0x70>)
 8001168:	f004 fa8a 	bl	8005680 <HAL_UART_Receive_IT>

}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	200002c1 	.word	0x200002c1
 8001178:	20000010 	.word	0x20000010
 800117c:	200002b0 	.word	0x200002b0
 8001180:	200002c2 	.word	0x200002c2
 8001184:	08007c90 	.word	0x08007c90
 8001188:	2000019c 	.word	0x2000019c
 800118c:	00000000 	.word	0x00000000

08001190 <get_adc_value_and_celsius_temperature>:
/**
 * function starts the adc, waits for conversion
 * Then converts value to degrees
 */

uint16_t get_adc_value_and_celsius_temperature(){
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0

	//select adc channel 0
	ADC_Select_CH0() ;
 8001194:	f000 faca 	bl	800172c <ADC_Select_CH0>
	HAL_ADC_Start(&hadc1) ;
 8001198:	4825      	ldr	r0, [pc, #148]	; (8001230 <get_adc_value_and_celsius_temperature+0xa0>)
 800119a:	f001 fee5 	bl	8002f68 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800119e:	f04f 31ff 	mov.w	r1, #4294967295
 80011a2:	4823      	ldr	r0, [pc, #140]	; (8001230 <get_adc_value_and_celsius_temperature+0xa0>)
 80011a4:	f001 ffc7 	bl	8003136 <HAL_ADC_PollForConversion>
	g_raw  = HAL_ADC_GetValue(&hadc1) ;
 80011a8:	4821      	ldr	r0, [pc, #132]	; (8001230 <get_adc_value_and_celsius_temperature+0xa0>)
 80011aa:	f002 f84f 	bl	800324c <HAL_ADC_GetValue>
 80011ae:	4603      	mov	r3, r0
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	4b20      	ldr	r3, [pc, #128]	; (8001234 <get_adc_value_and_celsius_temperature+0xa4>)
 80011b4:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1) ;  //stop adc
 80011b6:	481e      	ldr	r0, [pc, #120]	; (8001230 <get_adc_value_and_celsius_temperature+0xa0>)
 80011b8:	f001 ff8a 	bl	80030d0 <HAL_ADC_Stop>

	g_vin = g_raw*(3.3/4095.0) ; // input voltage
 80011bc:	4b1d      	ldr	r3, [pc, #116]	; (8001234 <get_adc_value_and_celsius_temperature+0xa4>)
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff f9b7 	bl	8000534 <__aeabi_i2d>
 80011c6:	a316      	add	r3, pc, #88	; (adr r3, 8001220 <get_adc_value_and_celsius_temperature+0x90>)
 80011c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011cc:	f7ff fa1c 	bl	8000608 <__aeabi_dmul>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	4918      	ldr	r1, [pc, #96]	; (8001238 <get_adc_value_and_celsius_temperature+0xa8>)
 80011d6:	e9c1 2300 	strd	r2, r3, [r1]
	g_temp = g_vin*100 - 273.15 ; // cast to 16 bit uint
 80011da:	4b17      	ldr	r3, [pc, #92]	; (8001238 <get_adc_value_and_celsius_temperature+0xa8>)
 80011dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011e0:	f04f 0200 	mov.w	r2, #0
 80011e4:	4b15      	ldr	r3, [pc, #84]	; (800123c <get_adc_value_and_celsius_temperature+0xac>)
 80011e6:	f7ff fa0f 	bl	8000608 <__aeabi_dmul>
 80011ea:	4602      	mov	r2, r0
 80011ec:	460b      	mov	r3, r1
 80011ee:	4610      	mov	r0, r2
 80011f0:	4619      	mov	r1, r3
 80011f2:	a30d      	add	r3, pc, #52	; (adr r3, 8001228 <get_adc_value_and_celsius_temperature+0x98>)
 80011f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f8:	f7ff f84e 	bl	8000298 <__aeabi_dsub>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	490f      	ldr	r1, [pc, #60]	; (8001240 <get_adc_value_and_celsius_temperature+0xb0>)
 8001202:	e9c1 2300 	strd	r2, r3, [r1]

	return g_temp ;
 8001206:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <get_adc_value_and_celsius_temperature+0xb0>)
 8001208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120c:	4610      	mov	r0, r2
 800120e:	4619      	mov	r1, r3
 8001210:	f7ff fcaa 	bl	8000b68 <__aeabi_d2uiz>
 8001214:	4603      	mov	r3, r0
 8001216:	b29b      	uxth	r3, r3
}
 8001218:	4618      	mov	r0, r3
 800121a:	bd80      	pop	{r7, pc}
 800121c:	f3af 8000 	nop.w
 8001220:	e734d9b4 	.word	0xe734d9b4
 8001224:	3f4a680c 	.word	0x3f4a680c
 8001228:	66666666 	.word	0x66666666
 800122c:	40711266 	.word	0x40711266
 8001230:	200000c4 	.word	0x200000c4
 8001234:	200001e0 	.word	0x200001e0
 8001238:	200001f0 	.word	0x200001f0
 800123c:	40590000 	.word	0x40590000
 8001240:	200001e8 	.word	0x200001e8

08001244 <store_temp_in_string>:

void store_temp_in_string(uint16_t temperature, char temp[], int len){
 8001244:	b480      	push	{r7}
 8001246:	b087      	sub	sp, #28
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
 8001250:	81fb      	strh	r3, [r7, #14]

	for(int i= 0 ; i < len ; i++){
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
 8001256:	e04e      	b.n	80012f6 <store_temp_in_string+0xb2>
		switch(i){
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	2b02      	cmp	r3, #2
 800125c:	d02f      	beq.n	80012be <store_temp_in_string+0x7a>
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	2b02      	cmp	r3, #2
 8001262:	dc44      	bgt.n	80012ee <store_temp_in_string+0xaa>
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <store_temp_in_string+0x2e>
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d00c      	beq.n	800128a <store_temp_in_string+0x46>
			case 2:
				temp[2] = (temperature - ((temperature/10)*10) ) + 48 ;

				break;
			default:
				break;
 8001270:	e03d      	b.n	80012ee <store_temp_in_string+0xaa>
				temp[0]  = (temperature/100) + 48 ;
 8001272:	89fb      	ldrh	r3, [r7, #14]
 8001274:	4a25      	ldr	r2, [pc, #148]	; (800130c <store_temp_in_string+0xc8>)
 8001276:	fba2 2303 	umull	r2, r3, r2, r3
 800127a:	095b      	lsrs	r3, r3, #5
 800127c:	b29b      	uxth	r3, r3
 800127e:	b2db      	uxtb	r3, r3
 8001280:	3330      	adds	r3, #48	; 0x30
 8001282:	b2da      	uxtb	r2, r3
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	701a      	strb	r2, [r3, #0]
				break;
 8001288:	e032      	b.n	80012f0 <store_temp_in_string+0xac>
				temp[1] = (temperature - (temperature/100)*100 )/10 + 48 ;
 800128a:	89fa      	ldrh	r2, [r7, #14]
 800128c:	89fb      	ldrh	r3, [r7, #14]
 800128e:	491f      	ldr	r1, [pc, #124]	; (800130c <store_temp_in_string+0xc8>)
 8001290:	fba1 1303 	umull	r1, r3, r1, r3
 8001294:	095b      	lsrs	r3, r3, #5
 8001296:	b29b      	uxth	r3, r3
 8001298:	4619      	mov	r1, r3
 800129a:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800129e:	fb01 f303 	mul.w	r3, r1, r3
 80012a2:	4413      	add	r3, r2
 80012a4:	4a1a      	ldr	r2, [pc, #104]	; (8001310 <store_temp_in_string+0xcc>)
 80012a6:	fb82 1203 	smull	r1, r2, r2, r3
 80012aa:	1092      	asrs	r2, r2, #2
 80012ac:	17db      	asrs	r3, r3, #31
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	3301      	adds	r3, #1
 80012b6:	3230      	adds	r2, #48	; 0x30
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	701a      	strb	r2, [r3, #0]
				break;
 80012bc:	e018      	b.n	80012f0 <store_temp_in_string+0xac>
				temp[2] = (temperature - ((temperature/10)*10) ) + 48 ;
 80012be:	89fb      	ldrh	r3, [r7, #14]
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	89fb      	ldrh	r3, [r7, #14]
 80012c4:	4913      	ldr	r1, [pc, #76]	; (8001314 <store_temp_in_string+0xd0>)
 80012c6:	fba1 1303 	umull	r1, r3, r1, r3
 80012ca:	08db      	lsrs	r3, r3, #3
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	4619      	mov	r1, r3
 80012d2:	0149      	lsls	r1, r1, #5
 80012d4:	1ac9      	subs	r1, r1, r3
 80012d6:	0089      	lsls	r1, r1, #2
 80012d8:	1acb      	subs	r3, r1, r3
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	4413      	add	r3, r2
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	3302      	adds	r3, #2
 80012e6:	3230      	adds	r2, #48	; 0x30
 80012e8:	b2d2      	uxtb	r2, r2
 80012ea:	701a      	strb	r2, [r3, #0]
				break;
 80012ec:	e000      	b.n	80012f0 <store_temp_in_string+0xac>
				break;
 80012ee:	bf00      	nop
	for(int i= 0 ; i < len ; i++){
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	3301      	adds	r3, #1
 80012f4:	617b      	str	r3, [r7, #20]
 80012f6:	697a      	ldr	r2, [r7, #20]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	dbac      	blt.n	8001258 <store_temp_in_string+0x14>

		}
	}
}
 80012fe:	bf00      	nop
 8001300:	bf00      	nop
 8001302:	371c      	adds	r7, #28
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	51eb851f 	.word	0x51eb851f
 8001310:	66666667 	.word	0x66666667
 8001314:	cccccccd 	.word	0xcccccccd

08001318 <system_state_update>:

/**
 * This function will update the system state based on the received UART command
 * or top button press
 */
void system_state_update(){
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0

	//CHECK FOR TYPE OF MEASUREMENT
	if( g_config_command_rcvd == 1){
 800131c:	4b86      	ldr	r3, [pc, #536]	; (8001538 <system_state_update+0x220>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d125      	bne.n	8001370 <system_state_update+0x58>
		g_config_command_rcvd = 0;
 8001324:	4b84      	ldr	r3, [pc, #528]	; (8001538 <system_state_update+0x220>)
 8001326:	2200      	movs	r2, #0
 8001328:	701a      	strb	r2, [r3, #0]


		if( g_system_config[2]=='E' && g_system_config[3] == 'N'){
 800132a:	4b84      	ldr	r3, [pc, #528]	; (800153c <system_state_update+0x224>)
 800132c:	789b      	ldrb	r3, [r3, #2]
 800132e:	2b45      	cmp	r3, #69	; 0x45
 8001330:	d10a      	bne.n	8001348 <system_state_update+0x30>
 8001332:	4b82      	ldr	r3, [pc, #520]	; (800153c <system_state_update+0x224>)
 8001334:	78db      	ldrb	r3, [r3, #3]
 8001336:	2b4e      	cmp	r3, #78	; 0x4e
 8001338:	d106      	bne.n	8001348 <system_state_update+0x30>
			// EN measure comand
			g_EN_config_command_rcvd =1 ;
 800133a:	4b81      	ldr	r3, [pc, #516]	; (8001540 <system_state_update+0x228>)
 800133c:	2201      	movs	r2, #1
 800133e:	701a      	strb	r2, [r3, #0]
			//stop SP measure
			g_SP_config_command_rcvd =0 ;
 8001340:	4b80      	ldr	r3, [pc, #512]	; (8001544 <system_state_update+0x22c>)
 8001342:	2200      	movs	r2, #0
 8001344:	701a      	strb	r2, [r3, #0]
 8001346:	e013      	b.n	8001370 <system_state_update+0x58>

		}

		else if(g_system_config[2]=='S' && g_system_config[3] == 'P'){
 8001348:	4b7c      	ldr	r3, [pc, #496]	; (800153c <system_state_update+0x224>)
 800134a:	789b      	ldrb	r3, [r3, #2]
 800134c:	2b53      	cmp	r3, #83	; 0x53
 800134e:	d10a      	bne.n	8001366 <system_state_update+0x4e>
 8001350:	4b7a      	ldr	r3, [pc, #488]	; (800153c <system_state_update+0x224>)
 8001352:	78db      	ldrb	r3, [r3, #3]
 8001354:	2b50      	cmp	r3, #80	; 0x50
 8001356:	d106      	bne.n	8001366 <system_state_update+0x4e>
			// SP command
			g_SP_config_command_rcvd =1 ;
 8001358:	4b7a      	ldr	r3, [pc, #488]	; (8001544 <system_state_update+0x22c>)
 800135a:	2201      	movs	r2, #1
 800135c:	701a      	strb	r2, [r3, #0]
			//stop EN command
			g_EN_config_command_rcvd =0;
 800135e:	4b78      	ldr	r3, [pc, #480]	; (8001540 <system_state_update+0x228>)
 8001360:	2200      	movs	r2, #0
 8001362:	701a      	strb	r2, [r3, #0]
 8001364:	e004      	b.n	8001370 <system_state_update+0x58>

		}

		else{
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)"Invalid Command\n", 16);
 8001366:	2210      	movs	r2, #16
 8001368:	4977      	ldr	r1, [pc, #476]	; (8001548 <system_state_update+0x230>)
 800136a:	4878      	ldr	r0, [pc, #480]	; (800154c <system_state_update+0x234>)
 800136c:	f004 f943 	bl	80055f6 <HAL_UART_Transmit_IT>
		}
	}

	// Environment Measure - And not measuring SP
	if(g_top_button_pressed  == 1 && g_EN_config_command_rcvd ==0 && g_SP_config_command_rcvd ==0 && (g_SP_measure == 0 || g_SP_measure ==2)){
 8001370:	4b77      	ldr	r3, [pc, #476]	; (8001550 <system_state_update+0x238>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d120      	bne.n	80013ba <system_state_update+0xa2>
 8001378:	4b71      	ldr	r3, [pc, #452]	; (8001540 <system_state_update+0x228>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d11c      	bne.n	80013ba <system_state_update+0xa2>
 8001380:	4b70      	ldr	r3, [pc, #448]	; (8001544 <system_state_update+0x22c>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d118      	bne.n	80013ba <system_state_update+0xa2>
 8001388:	4b72      	ldr	r3, [pc, #456]	; (8001554 <system_state_update+0x23c>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d003      	beq.n	8001398 <system_state_update+0x80>
 8001390:	4b70      	ldr	r3, [pc, #448]	; (8001554 <system_state_update+0x23c>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b02      	cmp	r3, #2
 8001396:	d110      	bne.n	80013ba <system_state_update+0xa2>
		g_top_button_pressed = 0;
 8001398:	4b6d      	ldr	r3, [pc, #436]	; (8001550 <system_state_update+0x238>)
 800139a:	2200      	movs	r2, #0
 800139c:	701a      	strb	r2, [r3, #0]

		g_EN_measure++  ;
 800139e:	4b6e      	ldr	r3, [pc, #440]	; (8001558 <system_state_update+0x240>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	3301      	adds	r3, #1
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	4b6c      	ldr	r3, [pc, #432]	; (8001558 <system_state_update+0x240>)
 80013a8:	701a      	strb	r2, [r3, #0]

		if(g_EN_measure >2 ){
 80013aa:	4b6b      	ldr	r3, [pc, #428]	; (8001558 <system_state_update+0x240>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d954      	bls.n	800145c <system_state_update+0x144>
			g_EN_measure = 1;
 80013b2:	4b69      	ldr	r3, [pc, #420]	; (8001558 <system_state_update+0x240>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	701a      	strb	r2, [r3, #0]
		if(g_EN_measure >2 ){
 80013b8:	e050      	b.n	800145c <system_state_update+0x144>
		}
	}
	else if(g_top_button_pressed ==0  && g_EN_config_command_rcvd == 1 && g_SP_config_command_rcvd ==0  && (g_SP_measure == 0 || g_SP_measure ==2)){
 80013ba:	4b65      	ldr	r3, [pc, #404]	; (8001550 <system_state_update+0x238>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d14c      	bne.n	800145c <system_state_update+0x144>
 80013c2:	4b5f      	ldr	r3, [pc, #380]	; (8001540 <system_state_update+0x228>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d148      	bne.n	800145c <system_state_update+0x144>
 80013ca:	4b5e      	ldr	r3, [pc, #376]	; (8001544 <system_state_update+0x22c>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d144      	bne.n	800145c <system_state_update+0x144>
 80013d2:	4b60      	ldr	r3, [pc, #384]	; (8001554 <system_state_update+0x23c>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <system_state_update+0xca>
 80013da:	4b5e      	ldr	r3, [pc, #376]	; (8001554 <system_state_update+0x23c>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d13c      	bne.n	800145c <system_state_update+0x144>
		g_EN_config_command_rcvd = 0;
 80013e2:	4b57      	ldr	r3, [pc, #348]	; (8001540 <system_state_update+0x228>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	701a      	strb	r2, [r3, #0]

		if(g_system_config[0]== '&' && g_system_config[1 ]== '_' && g_system_config[2]=='E' && g_system_config[3] == 'N' &&g_system_config[4] =='_'&& g_system_config[5] =='*' &&  g_system_config[6] =='\n' ){
 80013e8:	4b54      	ldr	r3, [pc, #336]	; (800153c <system_state_update+0x224>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b26      	cmp	r3, #38	; 0x26
 80013ee:	d12f      	bne.n	8001450 <system_state_update+0x138>
 80013f0:	4b52      	ldr	r3, [pc, #328]	; (800153c <system_state_update+0x224>)
 80013f2:	785b      	ldrb	r3, [r3, #1]
 80013f4:	2b5f      	cmp	r3, #95	; 0x5f
 80013f6:	d12b      	bne.n	8001450 <system_state_update+0x138>
 80013f8:	4b50      	ldr	r3, [pc, #320]	; (800153c <system_state_update+0x224>)
 80013fa:	789b      	ldrb	r3, [r3, #2]
 80013fc:	2b45      	cmp	r3, #69	; 0x45
 80013fe:	d127      	bne.n	8001450 <system_state_update+0x138>
 8001400:	4b4e      	ldr	r3, [pc, #312]	; (800153c <system_state_update+0x224>)
 8001402:	78db      	ldrb	r3, [r3, #3]
 8001404:	2b4e      	cmp	r3, #78	; 0x4e
 8001406:	d123      	bne.n	8001450 <system_state_update+0x138>
 8001408:	4b4c      	ldr	r3, [pc, #304]	; (800153c <system_state_update+0x224>)
 800140a:	791b      	ldrb	r3, [r3, #4]
 800140c:	2b5f      	cmp	r3, #95	; 0x5f
 800140e:	d11f      	bne.n	8001450 <system_state_update+0x138>
 8001410:	4b4a      	ldr	r3, [pc, #296]	; (800153c <system_state_update+0x224>)
 8001412:	795b      	ldrb	r3, [r3, #5]
 8001414:	2b2a      	cmp	r3, #42	; 0x2a
 8001416:	d11b      	bne.n	8001450 <system_state_update+0x138>
 8001418:	4b48      	ldr	r3, [pc, #288]	; (800153c <system_state_update+0x224>)
 800141a:	799b      	ldrb	r3, [r3, #6]
 800141c:	2b0a      	cmp	r3, #10
 800141e:	d117      	bne.n	8001450 <system_state_update+0x138>
			if(g_EN_measure == 0){
 8001420:	4b4d      	ldr	r3, [pc, #308]	; (8001558 <system_state_update+0x240>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d103      	bne.n	8001430 <system_state_update+0x118>
				g_EN_measure = 1;
 8001428:	4b4b      	ldr	r3, [pc, #300]	; (8001558 <system_state_update+0x240>)
 800142a:	2201      	movs	r2, #1
 800142c:	701a      	strb	r2, [r3, #0]
			if(g_EN_measure == 0){
 800142e:	e014      	b.n	800145a <system_state_update+0x142>
			}
			else if(g_EN_measure == 1){
 8001430:	4b49      	ldr	r3, [pc, #292]	; (8001558 <system_state_update+0x240>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d103      	bne.n	8001440 <system_state_update+0x128>
				g_EN_measure = 2;
 8001438:	4b47      	ldr	r3, [pc, #284]	; (8001558 <system_state_update+0x240>)
 800143a:	2202      	movs	r2, #2
 800143c:	701a      	strb	r2, [r3, #0]
			if(g_EN_measure == 0){
 800143e:	e00c      	b.n	800145a <system_state_update+0x142>

			}
			else{
				if(g_EN_measure ==2){
 8001440:	4b45      	ldr	r3, [pc, #276]	; (8001558 <system_state_update+0x240>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b02      	cmp	r3, #2
 8001446:	d108      	bne.n	800145a <system_state_update+0x142>
					g_EN_measure = 1;
 8001448:	4b43      	ldr	r3, [pc, #268]	; (8001558 <system_state_update+0x240>)
 800144a:	2201      	movs	r2, #1
 800144c:	701a      	strb	r2, [r3, #0]
			if(g_EN_measure == 0){
 800144e:	e004      	b.n	800145a <system_state_update+0x142>
				}
			}
		}
		//else block to not update g_EN_measure if incorrent command revcd
		else{
			g_EN_measure =  g_EN_measure ;
 8001450:	4b41      	ldr	r3, [pc, #260]	; (8001558 <system_state_update+0x240>)
 8001452:	781a      	ldrb	r2, [r3, #0]
 8001454:	4b40      	ldr	r3, [pc, #256]	; (8001558 <system_state_update+0x240>)
 8001456:	701a      	strb	r2, [r3, #0]
 8001458:	e000      	b.n	800145c <system_state_update+0x144>
			if(g_EN_measure == 0){
 800145a:	bf00      	nop
		}
	}


	//SP Measure
	if(g_bottom_button_pressed  == 1  && g_EN_config_command_rcvd == 0 && g_SP_config_command_rcvd ==0  && (g_EN_measure == 0 || g_EN_measure ==2)){
 800145c:	4b3f      	ldr	r3, [pc, #252]	; (800155c <system_state_update+0x244>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d123      	bne.n	80014ac <system_state_update+0x194>
 8001464:	4b36      	ldr	r3, [pc, #216]	; (8001540 <system_state_update+0x228>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d11f      	bne.n	80014ac <system_state_update+0x194>
 800146c:	4b35      	ldr	r3, [pc, #212]	; (8001544 <system_state_update+0x22c>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d11b      	bne.n	80014ac <system_state_update+0x194>
 8001474:	4b38      	ldr	r3, [pc, #224]	; (8001558 <system_state_update+0x240>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d003      	beq.n	8001484 <system_state_update+0x16c>
 800147c:	4b36      	ldr	r3, [pc, #216]	; (8001558 <system_state_update+0x240>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b02      	cmp	r3, #2
 8001482:	d113      	bne.n	80014ac <system_state_update+0x194>
			//clear lcd display after EN measurement
			Lcd_clear(&lcd); //to remove EN measure values
 8001484:	4836      	ldr	r0, [pc, #216]	; (8001560 <system_state_update+0x248>)
 8001486:	f7ff fd9f 	bl	8000fc8 <Lcd_clear>
			g_bottom_button_pressed = 0;
 800148a:	4b34      	ldr	r3, [pc, #208]	; (800155c <system_state_update+0x244>)
 800148c:	2200      	movs	r2, #0
 800148e:	701a      	strb	r2, [r3, #0]

			g_SP_measure++  ;
 8001490:	4b30      	ldr	r3, [pc, #192]	; (8001554 <system_state_update+0x23c>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	3301      	adds	r3, #1
 8001496:	b2da      	uxtb	r2, r3
 8001498:	4b2e      	ldr	r3, [pc, #184]	; (8001554 <system_state_update+0x23c>)
 800149a:	701a      	strb	r2, [r3, #0]

			if(g_SP_measure >2 ){
 800149c:	4b2d      	ldr	r3, [pc, #180]	; (8001554 <system_state_update+0x23c>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d96d      	bls.n	8001580 <system_state_update+0x268>
				g_SP_measure = 1;
 80014a4:	4b2b      	ldr	r3, [pc, #172]	; (8001554 <system_state_update+0x23c>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	701a      	strb	r2, [r3, #0]
			if(g_SP_measure >2 ){
 80014aa:	e069      	b.n	8001580 <system_state_update+0x268>
			}
		}
		else if(g_bottom_button_pressed ==0  && g_EN_config_command_rcvd == 0 && g_SP_config_command_rcvd ==1 && (g_EN_measure == 0 || g_EN_measure ==2)){
 80014ac:	4b2b      	ldr	r3, [pc, #172]	; (800155c <system_state_update+0x244>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d165      	bne.n	8001580 <system_state_update+0x268>
 80014b4:	4b22      	ldr	r3, [pc, #136]	; (8001540 <system_state_update+0x228>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d161      	bne.n	8001580 <system_state_update+0x268>
 80014bc:	4b21      	ldr	r3, [pc, #132]	; (8001544 <system_state_update+0x22c>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d15d      	bne.n	8001580 <system_state_update+0x268>
 80014c4:	4b24      	ldr	r3, [pc, #144]	; (8001558 <system_state_update+0x240>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d003      	beq.n	80014d4 <system_state_update+0x1bc>
 80014cc:	4b22      	ldr	r3, [pc, #136]	; (8001558 <system_state_update+0x240>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d155      	bne.n	8001580 <system_state_update+0x268>

			//clear lcd display after EN measurement
			Lcd_clear(&lcd); //to remove EN measure values
 80014d4:	4822      	ldr	r0, [pc, #136]	; (8001560 <system_state_update+0x248>)
 80014d6:	f7ff fd77 	bl	8000fc8 <Lcd_clear>

			g_SP_config_command_rcvd = 0;
 80014da:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <system_state_update+0x22c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	701a      	strb	r2, [r3, #0]

			if(g_system_config[0]== '&' && g_system_config[1 ]== '_' && g_system_config[2]=='S' && g_system_config[3] == 'P' &&g_system_config[4] =='_'&& g_system_config[5] =='*' &&  g_system_config[6] =='\n' ){
 80014e0:	4b16      	ldr	r3, [pc, #88]	; (800153c <system_state_update+0x224>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b26      	cmp	r3, #38	; 0x26
 80014e6:	d145      	bne.n	8001574 <system_state_update+0x25c>
 80014e8:	4b14      	ldr	r3, [pc, #80]	; (800153c <system_state_update+0x224>)
 80014ea:	785b      	ldrb	r3, [r3, #1]
 80014ec:	2b5f      	cmp	r3, #95	; 0x5f
 80014ee:	d141      	bne.n	8001574 <system_state_update+0x25c>
 80014f0:	4b12      	ldr	r3, [pc, #72]	; (800153c <system_state_update+0x224>)
 80014f2:	789b      	ldrb	r3, [r3, #2]
 80014f4:	2b53      	cmp	r3, #83	; 0x53
 80014f6:	d13d      	bne.n	8001574 <system_state_update+0x25c>
 80014f8:	4b10      	ldr	r3, [pc, #64]	; (800153c <system_state_update+0x224>)
 80014fa:	78db      	ldrb	r3, [r3, #3]
 80014fc:	2b50      	cmp	r3, #80	; 0x50
 80014fe:	d139      	bne.n	8001574 <system_state_update+0x25c>
 8001500:	4b0e      	ldr	r3, [pc, #56]	; (800153c <system_state_update+0x224>)
 8001502:	791b      	ldrb	r3, [r3, #4]
 8001504:	2b5f      	cmp	r3, #95	; 0x5f
 8001506:	d135      	bne.n	8001574 <system_state_update+0x25c>
 8001508:	4b0c      	ldr	r3, [pc, #48]	; (800153c <system_state_update+0x224>)
 800150a:	795b      	ldrb	r3, [r3, #5]
 800150c:	2b2a      	cmp	r3, #42	; 0x2a
 800150e:	d131      	bne.n	8001574 <system_state_update+0x25c>
 8001510:	4b0a      	ldr	r3, [pc, #40]	; (800153c <system_state_update+0x224>)
 8001512:	799b      	ldrb	r3, [r3, #6]
 8001514:	2b0a      	cmp	r3, #10
 8001516:	d12d      	bne.n	8001574 <system_state_update+0x25c>
				if(g_SP_measure == 0){
 8001518:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <system_state_update+0x23c>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d103      	bne.n	8001528 <system_state_update+0x210>
					g_SP_measure = 1;
 8001520:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <system_state_update+0x23c>)
 8001522:	2201      	movs	r2, #1
 8001524:	701a      	strb	r2, [r3, #0]
				if(g_SP_measure == 0){
 8001526:	e02a      	b.n	800157e <system_state_update+0x266>
				}
				else if(g_SP_measure == 1){
 8001528:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <system_state_update+0x23c>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d119      	bne.n	8001564 <system_state_update+0x24c>
					g_SP_measure = 2;
 8001530:	4b08      	ldr	r3, [pc, #32]	; (8001554 <system_state_update+0x23c>)
 8001532:	2202      	movs	r2, #2
 8001534:	701a      	strb	r2, [r3, #0]
				if(g_SP_measure == 0){
 8001536:	e022      	b.n	800157e <system_state_update+0x266>
 8001538:	200002c2 	.word	0x200002c2
 800153c:	200002b0 	.word	0x200002b0
 8001540:	200002cd 	.word	0x200002cd
 8001544:	200002d1 	.word	0x200002d1
 8001548:	08007ca8 	.word	0x08007ca8
 800154c:	2000019c 	.word	0x2000019c
 8001550:	20000334 	.word	0x20000334
 8001554:	200002ce 	.word	0x200002ce
 8001558:	200002c3 	.word	0x200002c3
 800155c:	20000335 	.word	0x20000335
 8001560:	20000300 	.word	0x20000300

				}
				else{
					if(g_SP_measure ==2){
 8001564:	4b07      	ldr	r3, [pc, #28]	; (8001584 <system_state_update+0x26c>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b02      	cmp	r3, #2
 800156a:	d108      	bne.n	800157e <system_state_update+0x266>
						g_SP_measure = 1;
 800156c:	4b05      	ldr	r3, [pc, #20]	; (8001584 <system_state_update+0x26c>)
 800156e:	2201      	movs	r2, #1
 8001570:	701a      	strb	r2, [r3, #0]
				if(g_SP_measure == 0){
 8001572:	e004      	b.n	800157e <system_state_update+0x266>
					}
				}
			}
			//else block to not update g_EN_measure if incorrent command revcd
			else{
				g_SP_measure =  g_SP_measure ;
 8001574:	4b03      	ldr	r3, [pc, #12]	; (8001584 <system_state_update+0x26c>)
 8001576:	781a      	ldrb	r2, [r3, #0]
 8001578:	4b02      	ldr	r3, [pc, #8]	; (8001584 <system_state_update+0x26c>)
 800157a:	701a      	strb	r2, [r3, #0]
			}
		}
}
 800157c:	e000      	b.n	8001580 <system_state_update+0x268>
				if(g_SP_measure == 0){
 800157e:	bf00      	nop
}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}
 8001584:	200002ce 	.word	0x200002ce

08001588 <HAL_TIM_IC_CaptureCallback>:
uint8_t g_new_pulse = 0;
uint16_t g_lmt01_sens_temp =  0 ;
char dig_sens_temp[3] = {};

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
  if(htim->Instance == TIM2){
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001598:	d142      	bne.n	8001620 <HAL_TIM_IC_CaptureCallback+0x98>
	  g_new_pulse = 1;
 800159a:	4b23      	ldr	r3, [pc, #140]	; (8001628 <HAL_TIM_IC_CaptureCallback+0xa0>)
 800159c:	2201      	movs	r2, #1
 800159e:	701a      	strb	r2, [r3, #0]
	  g_time_between_pulses =  __HAL_TIM_GET_COUNTER(&htim2)  - current_value;  //Time between rising edges
 80015a0:	4b22      	ldr	r3, [pc, #136]	; (800162c <HAL_TIM_IC_CaptureCallback+0xa4>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015a6:	4b22      	ldr	r3, [pc, #136]	; (8001630 <HAL_TIM_IC_CaptureCallback+0xa8>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	4a21      	ldr	r2, [pc, #132]	; (8001634 <HAL_TIM_IC_CaptureCallback+0xac>)
 80015ae:	6013      	str	r3, [r2, #0]

	  if( g_time_between_pulses<13){
 80015b0:	4b20      	ldr	r3, [pc, #128]	; (8001634 <HAL_TIM_IC_CaptureCallback+0xac>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b0c      	cmp	r3, #12
 80015b6:	d80a      	bhi.n	80015ce <HAL_TIM_IC_CaptureCallback+0x46>
		  current_value = __HAL_TIM_GET_COUNTER(&htim2) ;
 80015b8:	4b1c      	ldr	r3, [pc, #112]	; (800162c <HAL_TIM_IC_CaptureCallback+0xa4>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015be:	4a1c      	ldr	r2, [pc, #112]	; (8001630 <HAL_TIM_IC_CaptureCallback+0xa8>)
 80015c0:	6013      	str	r3, [r2, #0]
		  pulse_count++ ;
 80015c2:	4b1d      	ldr	r3, [pc, #116]	; (8001638 <HAL_TIM_IC_CaptureCallback+0xb0>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	3301      	adds	r3, #1
 80015c8:	4a1b      	ldr	r2, [pc, #108]	; (8001638 <HAL_TIM_IC_CaptureCallback+0xb0>)
 80015ca:	6013      	str	r3, [r2, #0]
		  g_TO1_temp = (pulse_count/4096.0)*256 - 50 ; //calculate new temp - BUG Fixed: 4094 changed to 4096
		 current_value = __HAL_TIM_GET_COUNTER(&htim2) ;
		 pulse_count = 0;
	  }
  }
}
 80015cc:	e028      	b.n	8001620 <HAL_TIM_IC_CaptureCallback+0x98>
		  g_TO1_temp = (pulse_count/4096.0)*256 - 50 ; //calculate new temp - BUG Fixed: 4094 changed to 4096
 80015ce:	4b1a      	ldr	r3, [pc, #104]	; (8001638 <HAL_TIM_IC_CaptureCallback+0xb0>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7fe ff9e 	bl	8000514 <__aeabi_ui2d>
 80015d8:	f04f 0200 	mov.w	r2, #0
 80015dc:	4b17      	ldr	r3, [pc, #92]	; (800163c <HAL_TIM_IC_CaptureCallback+0xb4>)
 80015de:	f7ff f93d 	bl	800085c <__aeabi_ddiv>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	4610      	mov	r0, r2
 80015e8:	4619      	mov	r1, r3
 80015ea:	f04f 0200 	mov.w	r2, #0
 80015ee:	4b14      	ldr	r3, [pc, #80]	; (8001640 <HAL_TIM_IC_CaptureCallback+0xb8>)
 80015f0:	f7ff f80a 	bl	8000608 <__aeabi_dmul>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	4610      	mov	r0, r2
 80015fa:	4619      	mov	r1, r3
 80015fc:	f04f 0200 	mov.w	r2, #0
 8001600:	4b10      	ldr	r3, [pc, #64]	; (8001644 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8001602:	f7fe fe49 	bl	8000298 <__aeabi_dsub>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	490f      	ldr	r1, [pc, #60]	; (8001648 <HAL_TIM_IC_CaptureCallback+0xc0>)
 800160c:	e9c1 2300 	strd	r2, r3, [r1]
		 current_value = __HAL_TIM_GET_COUNTER(&htim2) ;
 8001610:	4b06      	ldr	r3, [pc, #24]	; (800162c <HAL_TIM_IC_CaptureCallback+0xa4>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001616:	4a06      	ldr	r2, [pc, #24]	; (8001630 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8001618:	6013      	str	r3, [r2, #0]
		 pulse_count = 0;
 800161a:	4b07      	ldr	r3, [pc, #28]	; (8001638 <HAL_TIM_IC_CaptureCallback+0xb0>)
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
}
 8001620:	bf00      	nop
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000320 	.word	0x20000320
 800162c:	2000010c 	.word	0x2000010c
 8001630:	20000318 	.word	0x20000318
 8001634:	2000031c 	.word	0x2000031c
 8001638:	2000033c 	.word	0x2000033c
 800163c:	40b00000 	.word	0x40b00000
 8001640:	40700000 	.word	0x40700000
 8001644:	40490000 	.word	0x40490000
 8001648:	20000200 	.word	0x20000200

0800164c <flash_led_d3>:

/**
 * Function flashed LED D3 at specified interval of 50 ms
 */
void flash_led_d3(){
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - g_time_passed >= 50 && g_LED_D3_ON == 0){
 8001650:	f001 fc16 	bl	8002e80 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	4b16      	ldr	r3, [pc, #88]	; (80016b0 <flash_led_d3+0x64>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b31      	cmp	r3, #49	; 0x31
 800165e:	d90c      	bls.n	800167a <flash_led_d3+0x2e>
 8001660:	4b14      	ldr	r3, [pc, #80]	; (80016b4 <flash_led_d3+0x68>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d108      	bne.n	800167a <flash_led_d3+0x2e>
		g_LED_D3_ON = 1; // set D2 on
 8001668:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <flash_led_d3+0x68>)
 800166a:	2201      	movs	r2, #1
 800166c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET) ;
 800166e:	2200      	movs	r2, #0
 8001670:	2120      	movs	r1, #32
 8001672:	4811      	ldr	r0, [pc, #68]	; (80016b8 <flash_led_d3+0x6c>)
 8001674:	f002 fb66 	bl	8003d44 <HAL_GPIO_WritePin>
		g_time_passed =  HAL_GetTick() ;
		g_LED_D3_ON = 0;  //set D2 off

	}

}
 8001678:	e018      	b.n	80016ac <flash_led_d3+0x60>
	else if(HAL_GetTick() - g_time_passed >= 100 && g_LED_D3_ON == 1){
 800167a:	f001 fc01 	bl	8002e80 <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <flash_led_d3+0x64>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b63      	cmp	r3, #99	; 0x63
 8001688:	d910      	bls.n	80016ac <flash_led_d3+0x60>
 800168a:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <flash_led_d3+0x68>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d10c      	bne.n	80016ac <flash_led_d3+0x60>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET) ;
 8001692:	2201      	movs	r2, #1
 8001694:	2120      	movs	r1, #32
 8001696:	4808      	ldr	r0, [pc, #32]	; (80016b8 <flash_led_d3+0x6c>)
 8001698:	f002 fb54 	bl	8003d44 <HAL_GPIO_WritePin>
		g_time_passed =  HAL_GetTick() ;
 800169c:	f001 fbf0 	bl	8002e80 <HAL_GetTick>
 80016a0:	4603      	mov	r3, r0
 80016a2:	4a03      	ldr	r2, [pc, #12]	; (80016b0 <flash_led_d3+0x64>)
 80016a4:	6013      	str	r3, [r2, #0]
		g_LED_D3_ON = 0;  //set D2 off
 80016a6:	4b03      	ldr	r3, [pc, #12]	; (80016b4 <flash_led_d3+0x68>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	701a      	strb	r2, [r3, #0]
}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	200002c8 	.word	0x200002c8
 80016b4:	200002cc 	.word	0x200002cc
 80016b8:	40020400 	.word	0x40020400

080016bc <flash_led_d2>:

/**
 * Function flashed LED D2 at specified interval of 100 ms
 */
void flash_led_d2(){
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - g_time_passed >= 100 && g_LED_D2_ON == 0){
 80016c0:	f001 fbde 	bl	8002e80 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	4b16      	ldr	r3, [pc, #88]	; (8001720 <flash_led_d2+0x64>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b63      	cmp	r3, #99	; 0x63
 80016ce:	d90c      	bls.n	80016ea <flash_led_d2+0x2e>
 80016d0:	4b14      	ldr	r3, [pc, #80]	; (8001724 <flash_led_d2+0x68>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d108      	bne.n	80016ea <flash_led_d2+0x2e>
		g_LED_D2_ON = 1; // set D2 on
 80016d8:	4b12      	ldr	r3, [pc, #72]	; (8001724 <flash_led_d2+0x68>)
 80016da:	2201      	movs	r2, #1
 80016dc:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET) ;
 80016de:	2200      	movs	r2, #0
 80016e0:	2110      	movs	r1, #16
 80016e2:	4811      	ldr	r0, [pc, #68]	; (8001728 <flash_led_d2+0x6c>)
 80016e4:	f002 fb2e 	bl	8003d44 <HAL_GPIO_WritePin>
		g_time_passed =  HAL_GetTick() ;
		g_LED_D2_ON = 0;  //set D2 off

	}

}
 80016e8:	e018      	b.n	800171c <flash_led_d2+0x60>
	else if(HAL_GetTick() - g_time_passed >= 200 && g_LED_D2_ON == 1){
 80016ea:	f001 fbc9 	bl	8002e80 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <flash_led_d2+0x64>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2bc7      	cmp	r3, #199	; 0xc7
 80016f8:	d910      	bls.n	800171c <flash_led_d2+0x60>
 80016fa:	4b0a      	ldr	r3, [pc, #40]	; (8001724 <flash_led_d2+0x68>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d10c      	bne.n	800171c <flash_led_d2+0x60>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET) ;
 8001702:	2201      	movs	r2, #1
 8001704:	2110      	movs	r1, #16
 8001706:	4808      	ldr	r0, [pc, #32]	; (8001728 <flash_led_d2+0x6c>)
 8001708:	f002 fb1c 	bl	8003d44 <HAL_GPIO_WritePin>
		g_time_passed =  HAL_GetTick() ;
 800170c:	f001 fbb8 	bl	8002e80 <HAL_GetTick>
 8001710:	4603      	mov	r3, r0
 8001712:	4a03      	ldr	r2, [pc, #12]	; (8001720 <flash_led_d2+0x64>)
 8001714:	6013      	str	r3, [r2, #0]
		g_LED_D2_ON = 0;  //set D2 off
 8001716:	4b03      	ldr	r3, [pc, #12]	; (8001724 <flash_led_d2+0x68>)
 8001718:	2200      	movs	r2, #0
 800171a:	701a      	strb	r2, [r3, #0]
}
 800171c:	bf00      	nop
 800171e:	bd80      	pop	{r7, pc}
 8001720:	200002c8 	.word	0x200002c8
 8001724:	200002d0 	.word	0x200002d0
 8001728:	40020400 	.word	0x40020400

0800172c <ADC_Select_CH0>:
		  }
	  }
}

//digital sensore
void ADC_Select_CH0(void){
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001732:	463b      	mov	r3, r7
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_0;
 800173e:	2300      	movs	r3, #0
 8001740:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001742:	2301      	movs	r3, #1
 8001744:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001746:	2300      	movs	r3, #0
 8001748:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800174a:	463b      	mov	r3, r7
 800174c:	4619      	mov	r1, r3
 800174e:	4806      	ldr	r0, [pc, #24]	; (8001768 <ADC_Select_CH0+0x3c>)
 8001750:	f001 fd8a 	bl	8003268 <HAL_ADC_ConfigChannel>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <ADC_Select_CH0+0x32>
	{
		Error_Handler();
 800175a:	f000 ff9f 	bl	800269c <Error_Handler>
	}


}
 800175e:	bf00      	nop
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	200000c4 	.word	0x200000c4

0800176c <ADC_Select_CH14>:
// photodiode
void ADC_Select_CH14(void){
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001772:	463b      	mov	r3, r7
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	*/
	sConfig.Channel = ADC_CHANNEL_14;
 800177e:	230e      	movs	r3, #14
 8001780:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001782:	2301      	movs	r3, #1
 8001784:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001786:	463b      	mov	r3, r7
 8001788:	4619      	mov	r1, r3
 800178a:	4806      	ldr	r0, [pc, #24]	; (80017a4 <ADC_Select_CH14+0x38>)
 800178c:	f001 fd6c 	bl	8003268 <HAL_ADC_ConfigChannel>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <ADC_Select_CH14+0x2e>
	{
		Error_Handler();
 8001796:	f000 ff81 	bl	800269c <Error_Handler>
	}


}
 800179a:	bf00      	nop
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	200000c4 	.word	0x200000c4

080017a8 <ADC_Select_CH9>:

//PV- Panel- ADC 1
void ADC_Select_CH9(void){
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80017ae:	463b      	mov	r3, r7
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	*/
	sConfig.Channel = ADC_CHANNEL_9;
 80017ba:	2309      	movs	r3, #9
 80017bc:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80017be:	2301      	movs	r3, #1
 80017c0:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017c2:	463b      	mov	r3, r7
 80017c4:	4619      	mov	r1, r3
 80017c6:	4806      	ldr	r0, [pc, #24]	; (80017e0 <ADC_Select_CH9+0x38>)
 80017c8:	f001 fd4e 	bl	8003268 <HAL_ADC_ConfigChannel>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <ADC_Select_CH9+0x2e>
	{
		Error_Handler();
 80017d2:	f000 ff63 	bl	800269c <Error_Handler>
	}
}
 80017d6:	bf00      	nop
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	200000c4 	.word	0x200000c4

080017e4 <ADC_Select_CH15>:

//PV - Panel - ADC2
void ADC_Select_CH15(void){
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80017ea:	463b      	mov	r3, r7
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	*/
	sConfig.Channel = ADC_CHANNEL_15;
 80017f6:	230f      	movs	r3, #15
 80017f8:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80017fa:	2301      	movs	r3, #1
 80017fc:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017fe:	463b      	mov	r3, r7
 8001800:	4619      	mov	r1, r3
 8001802:	4806      	ldr	r0, [pc, #24]	; (800181c <ADC_Select_CH15+0x38>)
 8001804:	f001 fd30 	bl	8003268 <HAL_ADC_ConfigChannel>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <ADC_Select_CH15+0x2e>
	{
		Error_Handler();
 800180e:	f000 ff45 	bl	800269c <Error_Handler>
	}
}
 8001812:	bf00      	nop
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	200000c4 	.word	0x200000c4

08001820 <get_adc_value_conver_to_lux>:
 * Function starts ADC CH14, connected to ouput of light diode
 * get the ADC value of diode
 */
double ip_diode = 0;
uint16_t lux_value = 0;
uint16_t get_adc_value_conver_to_lux(){
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
	ADC_Select_CH14() ;
 8001824:	f7ff ffa2 	bl	800176c <ADC_Select_CH14>
	HAL_ADC_Start(&hadc1);
 8001828:	482f      	ldr	r0, [pc, #188]	; (80018e8 <get_adc_value_conver_to_lux+0xc8>)
 800182a:	f001 fb9d 	bl	8002f68 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) ;
 800182e:	f04f 31ff 	mov.w	r1, #4294967295
 8001832:	482d      	ldr	r0, [pc, #180]	; (80018e8 <get_adc_value_conver_to_lux+0xc8>)
 8001834:	f001 fc7f 	bl	8003136 <HAL_ADC_PollForConversion>
	g_raw_lux_value = HAL_ADC_GetValue(&hadc1) ;
 8001838:	482b      	ldr	r0, [pc, #172]	; (80018e8 <get_adc_value_conver_to_lux+0xc8>)
 800183a:	f001 fd07 	bl	800324c <HAL_ADC_GetValue>
 800183e:	4603      	mov	r3, r0
 8001840:	4618      	mov	r0, r3
 8001842:	f7fe fe67 	bl	8000514 <__aeabi_ui2d>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4928      	ldr	r1, [pc, #160]	; (80018ec <get_adc_value_conver_to_lux+0xcc>)
 800184c:	e9c1 2300 	strd	r2, r3, [r1]
	HAL_ADC_Stop(&hadc1);
 8001850:	4825      	ldr	r0, [pc, #148]	; (80018e8 <get_adc_value_conver_to_lux+0xc8>)
 8001852:	f001 fc3d 	bl	80030d0 <HAL_ADC_Stop>

	//scale adc value [0,99999] - For 30000 lux
//	g_raw_lux_value = g_raw_lux_value*(29999.0/4095.0) ;

	//make these into your own values
	g_raw_lux_value = g_raw_lux_value*(3.3/4095.0) ;
 8001856:	4b25      	ldr	r3, [pc, #148]	; (80018ec <get_adc_value_conver_to_lux+0xcc>)
 8001858:	e9d3 0100 	ldrd	r0, r1, [r3]
 800185c:	a31c      	add	r3, pc, #112	; (adr r3, 80018d0 <get_adc_value_conver_to_lux+0xb0>)
 800185e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001862:	f7fe fed1 	bl	8000608 <__aeabi_dmul>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	4920      	ldr	r1, [pc, #128]	; (80018ec <get_adc_value_conver_to_lux+0xcc>)
 800186c:	e9c1 2300 	strd	r2, r3, [r1]
	ip_diode = g_raw_lux_value/1200.0 ;
 8001870:	4b1e      	ldr	r3, [pc, #120]	; (80018ec <get_adc_value_conver_to_lux+0xcc>)
 8001872:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001876:	f04f 0200 	mov.w	r2, #0
 800187a:	4b1d      	ldr	r3, [pc, #116]	; (80018f0 <get_adc_value_conver_to_lux+0xd0>)
 800187c:	f7fe ffee 	bl	800085c <__aeabi_ddiv>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	491b      	ldr	r1, [pc, #108]	; (80018f4 <get_adc_value_conver_to_lux+0xd4>)
 8001886:	e9c1 2300 	strd	r2, r3, [r1]
	lux_value = pow((ip_diode/(0.085*pow(10,-6))),1/1.01) ;
 800188a:	4b1a      	ldr	r3, [pc, #104]	; (80018f4 <get_adc_value_conver_to_lux+0xd4>)
 800188c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001890:	a311      	add	r3, pc, #68	; (adr r3, 80018d8 <get_adc_value_conver_to_lux+0xb8>)
 8001892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001896:	f7fe ffe1 	bl	800085c <__aeabi_ddiv>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	ec43 2b17 	vmov	d7, r2, r3
 80018a2:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 80018e0 <get_adc_value_conver_to_lux+0xc0>
 80018a6:	eeb0 0a47 	vmov.f32	s0, s14
 80018aa:	eef0 0a67 	vmov.f32	s1, s15
 80018ae:	f005 fac5 	bl	8006e3c <pow>
 80018b2:	ec53 2b10 	vmov	r2, r3, d0
 80018b6:	4610      	mov	r0, r2
 80018b8:	4619      	mov	r1, r3
 80018ba:	f7ff f955 	bl	8000b68 <__aeabi_d2uiz>
 80018be:	4603      	mov	r3, r0
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	4b0d      	ldr	r3, [pc, #52]	; (80018f8 <get_adc_value_conver_to_lux+0xd8>)
 80018c4:	801a      	strh	r2, [r3, #0]

//	return g_raw_lux_value ;
	return lux_value ;
 80018c6:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <get_adc_value_conver_to_lux+0xd8>)
 80018c8:	881b      	ldrh	r3, [r3, #0]
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	e734d9b4 	.word	0xe734d9b4
 80018d4:	3f4a680c 	.word	0x3f4a680c
 80018d8:	d05394fe 	.word	0xd05394fe
 80018dc:	3e76d127 	.word	0x3e76d127
 80018e0:	1e6a7498 	.word	0x1e6a7498
 80018e4:	3fefaee4 	.word	0x3fefaee4
 80018e8:	200000c4 	.word	0x200000c4
 80018ec:	20000208 	.word	0x20000208
 80018f0:	4092c000 	.word	0x4092c000
 80018f4:	20000328 	.word	0x20000328
 80018f8:	20000330 	.word	0x20000330

080018fc <en_measurements_and_responses>:
 * This funtion performs the measurement for UR3: Environement measure.
 * It measures the ambient temperature, solar panel temperature and light intensity,
 * the board is exposed to.
 * Measurements and responses, transmitted to UART and LCD
 */
void en_measurements_and_responses(){
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af02      	add	r7, sp, #8

	if(g_EN_measure == 1){
 8001902:	4b41      	ldr	r3, [pc, #260]	; (8001a08 <en_measurements_and_responses+0x10c>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d14a      	bne.n	80019a0 <en_measurements_and_responses+0xa4>

	  // ignore bottom and left button press and SP command while measuring
	  if(g_bottom_button_pressed ==1 || g_SP_config_command_rcvd ==1 ||  g_left_button_pressed ==1){
 800190a:	4b40      	ldr	r3, [pc, #256]	; (8001a0c <en_measurements_and_responses+0x110>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d007      	beq.n	8001922 <en_measurements_and_responses+0x26>
 8001912:	4b3f      	ldr	r3, [pc, #252]	; (8001a10 <en_measurements_and_responses+0x114>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d003      	beq.n	8001922 <en_measurements_and_responses+0x26>
 800191a:	4b3e      	ldr	r3, [pc, #248]	; (8001a14 <en_measurements_and_responses+0x118>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d108      	bne.n	8001934 <en_measurements_and_responses+0x38>
		  g_bottom_button_pressed = 0 ;
 8001922:	4b3a      	ldr	r3, [pc, #232]	; (8001a0c <en_measurements_and_responses+0x110>)
 8001924:	2200      	movs	r2, #0
 8001926:	701a      	strb	r2, [r3, #0]
		  g_SP_config_command_rcvd = 0 ;
 8001928:	4b39      	ldr	r3, [pc, #228]	; (8001a10 <en_measurements_and_responses+0x114>)
 800192a:	2200      	movs	r2, #0
 800192c:	701a      	strb	r2, [r3, #0]
		  g_left_button_pressed = 0;
 800192e:	4b39      	ldr	r3, [pc, #228]	; (8001a14 <en_measurements_and_responses+0x118>)
 8001930:	2200      	movs	r2, #0
 8001932:	701a      	strb	r2, [r3, #0]
	  }
	  //ANALOGUE SENSOR CALIBRATION
	  g_temp_in_deg = get_adc_value_and_celsius_temperature() ;
 8001934:	f7ff fc2c 	bl	8001190 <get_adc_value_and_celsius_temperature>
 8001938:	4603      	mov	r3, r0
 800193a:	461a      	mov	r2, r3
 800193c:	4b36      	ldr	r3, [pc, #216]	; (8001a18 <en_measurements_and_responses+0x11c>)
 800193e:	801a      	strh	r2, [r3, #0]
	  store_temp_in_string(g_temp_in_deg, g_temperature, LEN);
 8001940:	4b35      	ldr	r3, [pc, #212]	; (8001a18 <en_measurements_and_responses+0x11c>)
 8001942:	881b      	ldrh	r3, [r3, #0]
 8001944:	2203      	movs	r2, #3
 8001946:	4935      	ldr	r1, [pc, #212]	; (8001a1c <en_measurements_and_responses+0x120>)
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff fc7b 	bl	8001244 <store_temp_in_string>

	  //PHOTODIOCE ouput
	  g_get_lxd_value = get_adc_value_conver_to_lux();
 800194e:	f7ff ff67 	bl	8001820 <get_adc_value_conver_to_lux>
 8001952:	4603      	mov	r3, r0
 8001954:	461a      	mov	r2, r3
 8001956:	4b32      	ldr	r3, [pc, #200]	; (8001a20 <en_measurements_and_responses+0x124>)
 8001958:	801a      	strh	r2, [r3, #0]
	  snprintf(g_lxd_value, sizeof(g_lxd_value), "%05d",g_get_lxd_value);
 800195a:	4b31      	ldr	r3, [pc, #196]	; (8001a20 <en_measurements_and_responses+0x124>)
 800195c:	881b      	ldrh	r3, [r3, #0]
 800195e:	4a31      	ldr	r2, [pc, #196]	; (8001a24 <en_measurements_and_responses+0x128>)
 8001960:	2106      	movs	r1, #6
 8001962:	4831      	ldr	r0, [pc, #196]	; (8001a28 <en_measurements_and_responses+0x12c>)
 8001964:	f004 fde8 	bl	8006538 <sniprintf>
//	  store_temp_in_string(g_get_lxd_value, g_lxd_value, 5);

	  // DIGITAL SENSOR CALIBRATION
	  g_lmt01_sens_temp =  (uint16_t)g_TO1_temp ;
 8001968:	4b30      	ldr	r3, [pc, #192]	; (8001a2c <en_measurements_and_responses+0x130>)
 800196a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196e:	4610      	mov	r0, r2
 8001970:	4619      	mov	r1, r3
 8001972:	f7ff f8f9 	bl	8000b68 <__aeabi_d2uiz>
 8001976:	4603      	mov	r3, r0
 8001978:	b29a      	uxth	r2, r3
 800197a:	4b2d      	ldr	r3, [pc, #180]	; (8001a30 <en_measurements_and_responses+0x134>)
 800197c:	801a      	strh	r2, [r3, #0]
	  store_temp_in_string(g_lmt01_sens_temp, dig_sens_temp, LEN) ;
 800197e:	4b2c      	ldr	r3, [pc, #176]	; (8001a30 <en_measurements_and_responses+0x134>)
 8001980:	881b      	ldrh	r3, [r3, #0]
 8001982:	2203      	movs	r2, #3
 8001984:	492b      	ldr	r1, [pc, #172]	; (8001a34 <en_measurements_and_responses+0x138>)
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff fc5c 	bl	8001244 <store_temp_in_string>

	  //re-prime system state update
	  if(g_transmit_system_state ==0){
 800198c:	4b2a      	ldr	r3, [pc, #168]	; (8001a38 <en_measurements_and_responses+0x13c>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d102      	bne.n	800199a <en_measurements_and_responses+0x9e>
		  g_transmit_system_state =1; //send the system state again
 8001994:	4b28      	ldr	r3, [pc, #160]	; (8001a38 <en_measurements_and_responses+0x13c>)
 8001996:	2201      	movs	r2, #1
 8001998:	701a      	strb	r2, [r3, #0]

	  }

	  //Flash D3 LED -> put in function
	  flash_led_d3();
 800199a:	f7ff fe57 	bl	800164c <flash_led_d3>
		  HAL_UART_Transmit_IT(&huart2, (uint8_t*)system_state_transmit, 18);

	  }

	}
}
 800199e:	e030      	b.n	8001a02 <en_measurements_and_responses+0x106>
	else if(g_EN_measure == 2){
 80019a0:	4b19      	ldr	r3, [pc, #100]	; (8001a08 <en_measurements_and_responses+0x10c>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d12c      	bne.n	8001a02 <en_measurements_and_responses+0x106>
		g_EN_measure = 0;
 80019a8:	4b17      	ldr	r3, [pc, #92]	; (8001a08 <en_measurements_and_responses+0x10c>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	701a      	strb	r2, [r3, #0]
		 Lcd_clear(&lcd);
 80019ae:	4823      	ldr	r0, [pc, #140]	; (8001a3c <en_measurements_and_responses+0x140>)
 80019b0:	f7ff fb0a 	bl	8000fc8 <Lcd_clear>
		g_EN_measure_LCD_display =  1 ;
 80019b4:	4b22      	ldr	r3, [pc, #136]	; (8001a40 <en_measurements_and_responses+0x144>)
 80019b6:	2201      	movs	r2, #1
 80019b8:	701a      	strb	r2, [r3, #0]
		g_SP_measure_LCD_diplay = 0 ; //dont display SP measurements
 80019ba:	4b22      	ldr	r3, [pc, #136]	; (8001a44 <en_measurements_and_responses+0x148>)
 80019bc:	2200      	movs	r2, #0
 80019be:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET) ;
 80019c0:	2201      	movs	r2, #1
 80019c2:	2120      	movs	r1, #32
 80019c4:	4820      	ldr	r0, [pc, #128]	; (8001a48 <en_measurements_and_responses+0x14c>)
 80019c6:	f002 f9bd 	bl	8003d44 <HAL_GPIO_WritePin>
	  snprintf(system_state_transmit,sizeof(system_state_transmit),"&_%03d_%03d_%05d_*\n",g_temp_in_deg,g_lmt01_sens_temp, g_get_lxd_value );
 80019ca:	4b13      	ldr	r3, [pc, #76]	; (8001a18 <en_measurements_and_responses+0x11c>)
 80019cc:	881b      	ldrh	r3, [r3, #0]
 80019ce:	4619      	mov	r1, r3
 80019d0:	4b17      	ldr	r3, [pc, #92]	; (8001a30 <en_measurements_and_responses+0x134>)
 80019d2:	881b      	ldrh	r3, [r3, #0]
 80019d4:	461a      	mov	r2, r3
 80019d6:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <en_measurements_and_responses+0x124>)
 80019d8:	881b      	ldrh	r3, [r3, #0]
 80019da:	9301      	str	r3, [sp, #4]
 80019dc:	9200      	str	r2, [sp, #0]
 80019de:	460b      	mov	r3, r1
 80019e0:	4a1a      	ldr	r2, [pc, #104]	; (8001a4c <en_measurements_and_responses+0x150>)
 80019e2:	2113      	movs	r1, #19
 80019e4:	481a      	ldr	r0, [pc, #104]	; (8001a50 <en_measurements_and_responses+0x154>)
 80019e6:	f004 fda7 	bl	8006538 <sniprintf>
	  if(g_transmit_system_state  == 1){
 80019ea:	4b13      	ldr	r3, [pc, #76]	; (8001a38 <en_measurements_and_responses+0x13c>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d107      	bne.n	8001a02 <en_measurements_and_responses+0x106>
		  g_transmit_system_state = 0;
 80019f2:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <en_measurements_and_responses+0x13c>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit_IT(&huart2, (uint8_t*)system_state_transmit, 18);
 80019f8:	2212      	movs	r2, #18
 80019fa:	4915      	ldr	r1, [pc, #84]	; (8001a50 <en_measurements_and_responses+0x154>)
 80019fc:	4815      	ldr	r0, [pc, #84]	; (8001a54 <en_measurements_and_responses+0x158>)
 80019fe:	f003 fdfa 	bl	80055f6 <HAL_UART_Transmit_IT>
}
 8001a02:	bf00      	nop
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	200002c3 	.word	0x200002c3
 8001a0c:	20000335 	.word	0x20000335
 8001a10:	200002d1 	.word	0x200002d1
 8001a14:	20000332 	.word	0x20000332
 8001a18:	200001f8 	.word	0x200001f8
 8001a1c:	200001fc 	.word	0x200001fc
 8001a20:	20000210 	.word	0x20000210
 8001a24:	08007cbc 	.word	0x08007cbc
 8001a28:	20000214 	.word	0x20000214
 8001a2c:	20000200 	.word	0x20000200
 8001a30:	20000322 	.word	0x20000322
 8001a34:	20000324 	.word	0x20000324
 8001a38:	20000011 	.word	0x20000011
 8001a3c:	20000300 	.word	0x20000300
 8001a40:	200002c4 	.word	0x200002c4
 8001a44:	200002cf 	.word	0x200002cf
 8001a48:	40020400 	.word	0x40020400
 8001a4c:	08007cc4 	.word	0x08007cc4
 8001a50:	200002d4 	.word	0x200002d4
 8001a54:	2000019c 	.word	0x2000019c

08001a58 <get_pv_panel_adc1_input>:
 * This function retrieves the ADC panel voltage,
 * across adc input 1
 * Gets the input voltage to the adc
 * Scales the voltage to the appropriate PV voltage
 */
uint16_t get_pv_panel_adc1_input(){
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
	//READ ADC VALUE
	ADC_Select_CH15() ;
 8001a5c:	f7ff fec2 	bl	80017e4 <ADC_Select_CH15>
	HAL_ADC_Start(&hadc1);
 8001a60:	4829      	ldr	r0, [pc, #164]	; (8001b08 <get_pv_panel_adc1_input+0xb0>)
 8001a62:	f001 fa81 	bl	8002f68 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) ;
 8001a66:	f04f 31ff 	mov.w	r1, #4294967295
 8001a6a:	4827      	ldr	r0, [pc, #156]	; (8001b08 <get_pv_panel_adc1_input+0xb0>)
 8001a6c:	f001 fb63 	bl	8003136 <HAL_ADC_PollForConversion>
	g_v1_pv = HAL_ADC_GetValue(&hadc1) ;
 8001a70:	4825      	ldr	r0, [pc, #148]	; (8001b08 <get_pv_panel_adc1_input+0xb0>)
 8001a72:	f001 fbeb 	bl	800324c <HAL_ADC_GetValue>
 8001a76:	4603      	mov	r3, r0
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7fe fd4b 	bl	8000514 <__aeabi_ui2d>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	4922      	ldr	r1, [pc, #136]	; (8001b0c <get_pv_panel_adc1_input+0xb4>)
 8001a84:	e9c1 2300 	strd	r2, r3, [r1]
	HAL_ADC_Stop(&hadc1);
 8001a88:	481f      	ldr	r0, [pc, #124]	; (8001b08 <get_pv_panel_adc1_input+0xb0>)
 8001a8a:	f001 fb21 	bl	80030d0 <HAL_ADC_Stop>

	//get voltage (mv) - from ADC formula
	g_v1_pv = g_v1_pv*(3.3/4095.0) ;
 8001a8e:	4b1f      	ldr	r3, [pc, #124]	; (8001b0c <get_pv_panel_adc1_input+0xb4>)
 8001a90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a94:	a318      	add	r3, pc, #96	; (adr r3, 8001af8 <get_pv_panel_adc1_input+0xa0>)
 8001a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9a:	f7fe fdb5 	bl	8000608 <__aeabi_dmul>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	491a      	ldr	r1, [pc, #104]	; (8001b0c <get_pv_panel_adc1_input+0xb4>)
 8001aa4:	e9c1 2300 	strd	r2, r3, [r1]

	//scale voltage up to PV panel voltage (V)
	g_v1_pv = g_v1_pv*(99000.0/39000.0);
 8001aa8:	4b18      	ldr	r3, [pc, #96]	; (8001b0c <get_pv_panel_adc1_input+0xb4>)
 8001aaa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001aae:	a314      	add	r3, pc, #80	; (adr r3, 8001b00 <get_pv_panel_adc1_input+0xa8>)
 8001ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab4:	f7fe fda8 	bl	8000608 <__aeabi_dmul>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	4913      	ldr	r1, [pc, #76]	; (8001b0c <get_pv_panel_adc1_input+0xb4>)
 8001abe:	e9c1 2300 	strd	r2, r3, [r1]

	//multiply by 1000 to get voltage to mv
	g_v1_pv = g_v1_pv*1000;
 8001ac2:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <get_pv_panel_adc1_input+0xb4>)
 8001ac4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ac8:	f04f 0200 	mov.w	r2, #0
 8001acc:	4b10      	ldr	r3, [pc, #64]	; (8001b10 <get_pv_panel_adc1_input+0xb8>)
 8001ace:	f7fe fd9b 	bl	8000608 <__aeabi_dmul>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	490d      	ldr	r1, [pc, #52]	; (8001b0c <get_pv_panel_adc1_input+0xb4>)
 8001ad8:	e9c1 2300 	strd	r2, r3, [r1]

	return g_v1_pv ;
 8001adc:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <get_pv_panel_adc1_input+0xb4>)
 8001ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae2:	4610      	mov	r0, r2
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	f7ff f83f 	bl	8000b68 <__aeabi_d2uiz>
 8001aea:	4603      	mov	r3, r0
 8001aec:	b29b      	uxth	r3, r3
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	f3af 8000 	nop.w
 8001af8:	e734d9b4 	.word	0xe734d9b4
 8001afc:	3f4a680c 	.word	0x3f4a680c
 8001b00:	ec4ec4ec 	.word	0xec4ec4ec
 8001b04:	40044ec4 	.word	0x40044ec4
 8001b08:	200000c4 	.word	0x200000c4
 8001b0c:	20000220 	.word	0x20000220
 8001b10:	408f4000 	.word	0x408f4000
 8001b14:	00000000 	.word	0x00000000

08001b18 <get_pv_panel_adc2_input>:
 * This function returns the adc panel voltage, across adc input
 * 2
 * Gets the input voltage to the adc
 * Scales the voltage to the appropriate PV voltage
 */
uint16_t get_pv_panel_adc2_input(){
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
	//read adc value
	ADC_Select_CH9() ;
 8001b1c:	f7ff fe44 	bl	80017a8 <ADC_Select_CH9>
	HAL_ADC_Start(&hadc1);
 8001b20:	4829      	ldr	r0, [pc, #164]	; (8001bc8 <get_pv_panel_adc2_input+0xb0>)
 8001b22:	f001 fa21 	bl	8002f68 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) ;
 8001b26:	f04f 31ff 	mov.w	r1, #4294967295
 8001b2a:	4827      	ldr	r0, [pc, #156]	; (8001bc8 <get_pv_panel_adc2_input+0xb0>)
 8001b2c:	f001 fb03 	bl	8003136 <HAL_ADC_PollForConversion>
	g_v2_pv = HAL_ADC_GetValue(&hadc1) ;
 8001b30:	4825      	ldr	r0, [pc, #148]	; (8001bc8 <get_pv_panel_adc2_input+0xb0>)
 8001b32:	f001 fb8b 	bl	800324c <HAL_ADC_GetValue>
 8001b36:	4603      	mov	r3, r0
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7fe fceb 	bl	8000514 <__aeabi_ui2d>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	4922      	ldr	r1, [pc, #136]	; (8001bcc <get_pv_panel_adc2_input+0xb4>)
 8001b44:	e9c1 2300 	strd	r2, r3, [r1]
	HAL_ADC_Stop(&hadc1);
 8001b48:	481f      	ldr	r0, [pc, #124]	; (8001bc8 <get_pv_panel_adc2_input+0xb0>)
 8001b4a:	f001 fac1 	bl	80030d0 <HAL_ADC_Stop>

	//get voltage (mv) -from adc formula
	g_v2_pv = g_v2_pv*(3.3/4095.0) ;
 8001b4e:	4b1f      	ldr	r3, [pc, #124]	; (8001bcc <get_pv_panel_adc2_input+0xb4>)
 8001b50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b54:	a318      	add	r3, pc, #96	; (adr r3, 8001bb8 <get_pv_panel_adc2_input+0xa0>)
 8001b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5a:	f7fe fd55 	bl	8000608 <__aeabi_dmul>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	491a      	ldr	r1, [pc, #104]	; (8001bcc <get_pv_panel_adc2_input+0xb4>)
 8001b64:	e9c1 2300 	strd	r2, r3, [r1]

	//scale voltage up to PV panel voltage
	g_v2_pv = g_v2_pv*(99000.0/39000.0);
 8001b68:	4b18      	ldr	r3, [pc, #96]	; (8001bcc <get_pv_panel_adc2_input+0xb4>)
 8001b6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b6e:	a314      	add	r3, pc, #80	; (adr r3, 8001bc0 <get_pv_panel_adc2_input+0xa8>)
 8001b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b74:	f7fe fd48 	bl	8000608 <__aeabi_dmul>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	4913      	ldr	r1, [pc, #76]	; (8001bcc <get_pv_panel_adc2_input+0xb4>)
 8001b7e:	e9c1 2300 	strd	r2, r3, [r1]

	//multiply by 1000 to get voltage to mv
	g_v2_pv = g_v2_pv*1000;
 8001b82:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <get_pv_panel_adc2_input+0xb4>)
 8001b84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b88:	f04f 0200 	mov.w	r2, #0
 8001b8c:	4b10      	ldr	r3, [pc, #64]	; (8001bd0 <get_pv_panel_adc2_input+0xb8>)
 8001b8e:	f7fe fd3b 	bl	8000608 <__aeabi_dmul>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	490d      	ldr	r1, [pc, #52]	; (8001bcc <get_pv_panel_adc2_input+0xb4>)
 8001b98:	e9c1 2300 	strd	r2, r3, [r1]

	return g_v2_pv ;
 8001b9c:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <get_pv_panel_adc2_input+0xb4>)
 8001b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	f7fe ffdf 	bl	8000b68 <__aeabi_d2uiz>
 8001baa:	4603      	mov	r3, r0
 8001bac:	b29b      	uxth	r3, r3

}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	f3af 8000 	nop.w
 8001bb8:	e734d9b4 	.word	0xe734d9b4
 8001bbc:	3f4a680c 	.word	0x3f4a680c
 8001bc0:	ec4ec4ec 	.word	0xec4ec4ec
 8001bc4:	40044ec4 	.word	0x40044ec4
 8001bc8:	200000c4 	.word	0x200000c4
 8001bcc:	20000228 	.word	0x20000228
 8001bd0:	408f4000 	.word	0x408f4000

08001bd4 <change_lcd_display_mode>:
 * by altering the display mode on the LCD.
 * Changing the view is independent of the system ,and does not change any
 * state of the system
 */

void change_lcd_display_mode(){
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
	//display default display mode
	if(g_lcd_default_mode == 1){
 8001bd8:	4ba0      	ldr	r3, [pc, #640]	; (8001e5c <change_lcd_display_mode+0x288>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d145      	bne.n	8001c6c <change_lcd_display_mode+0x98>

		g_lcd_default_mode = 0;
 8001be0:	4b9e      	ldr	r3, [pc, #632]	; (8001e5c <change_lcd_display_mode+0x288>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	701a      	strb	r2, [r3, #0]

		Lcd_clear(&lcd);
 8001be6:	489e      	ldr	r0, [pc, #632]	; (8001e60 <change_lcd_display_mode+0x28c>)
 8001be8:	f7ff f9ee 	bl	8000fc8 <Lcd_clear>

		Lcd_cursor(&lcd, 0, 0) ;
 8001bec:	2200      	movs	r2, #0
 8001bee:	2100      	movs	r1, #0
 8001bf0:	489b      	ldr	r0, [pc, #620]	; (8001e60 <change_lcd_display_mode+0x28c>)
 8001bf2:	f7ff f9cf 	bl	8000f94 <Lcd_cursor>
		snprintf(g_panel_voltage, sizeof(g_panel_voltage),"V:%04dmV",g_v_mpp);
 8001bf6:	4b9b      	ldr	r3, [pc, #620]	; (8001e64 <change_lcd_display_mode+0x290>)
 8001bf8:	881b      	ldrh	r3, [r3, #0]
 8001bfa:	4a9b      	ldr	r2, [pc, #620]	; (8001e68 <change_lcd_display_mode+0x294>)
 8001bfc:	2109      	movs	r1, #9
 8001bfe:	489b      	ldr	r0, [pc, #620]	; (8001e6c <change_lcd_display_mode+0x298>)
 8001c00:	f004 fc9a 	bl	8006538 <sniprintf>
		Lcd_string(&lcd, g_panel_voltage);
 8001c04:	4999      	ldr	r1, [pc, #612]	; (8001e6c <change_lcd_display_mode+0x298>)
 8001c06:	4896      	ldr	r0, [pc, #600]	; (8001e60 <change_lcd_display_mode+0x28c>)
 8001c08:	f7ff f9a4 	bl	8000f54 <Lcd_string>

		Lcd_cursor(&lcd, 0, 9) ;
 8001c0c:	2209      	movs	r2, #9
 8001c0e:	2100      	movs	r1, #0
 8001c10:	4893      	ldr	r0, [pc, #588]	; (8001e60 <change_lcd_display_mode+0x28c>)
 8001c12:	f7ff f9bf 	bl	8000f94 <Lcd_cursor>
		snprintf(g_panel_current, sizeof(g_panel_voltage),"I:%03dmA",g_i_mpp);
 8001c16:	4b96      	ldr	r3, [pc, #600]	; (8001e70 <change_lcd_display_mode+0x29c>)
 8001c18:	881b      	ldrh	r3, [r3, #0]
 8001c1a:	4a96      	ldr	r2, [pc, #600]	; (8001e74 <change_lcd_display_mode+0x2a0>)
 8001c1c:	2109      	movs	r1, #9
 8001c1e:	4896      	ldr	r0, [pc, #600]	; (8001e78 <change_lcd_display_mode+0x2a4>)
 8001c20:	f004 fc8a 	bl	8006538 <sniprintf>
		Lcd_string(&lcd, g_panel_current);
 8001c24:	4994      	ldr	r1, [pc, #592]	; (8001e78 <change_lcd_display_mode+0x2a4>)
 8001c26:	488e      	ldr	r0, [pc, #568]	; (8001e60 <change_lcd_display_mode+0x28c>)
 8001c28:	f7ff f994 	bl	8000f54 <Lcd_string>

		Lcd_cursor(&lcd, 1, 0) ;
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	2101      	movs	r1, #1
 8001c30:	488b      	ldr	r0, [pc, #556]	; (8001e60 <change_lcd_display_mode+0x28c>)
 8001c32:	f7ff f9af 	bl	8000f94 <Lcd_cursor>
		snprintf(g_panel_power, sizeof(g_panel_voltage),"P: %03dmW",g_p_mpp);
 8001c36:	4b91      	ldr	r3, [pc, #580]	; (8001e7c <change_lcd_display_mode+0x2a8>)
 8001c38:	881b      	ldrh	r3, [r3, #0]
 8001c3a:	4a91      	ldr	r2, [pc, #580]	; (8001e80 <change_lcd_display_mode+0x2ac>)
 8001c3c:	2109      	movs	r1, #9
 8001c3e:	4891      	ldr	r0, [pc, #580]	; (8001e84 <change_lcd_display_mode+0x2b0>)
 8001c40:	f004 fc7a 	bl	8006538 <sniprintf>
		Lcd_string(&lcd, g_panel_power);
 8001c44:	498f      	ldr	r1, [pc, #572]	; (8001e84 <change_lcd_display_mode+0x2b0>)
 8001c46:	4886      	ldr	r0, [pc, #536]	; (8001e60 <change_lcd_display_mode+0x28c>)
 8001c48:	f7ff f984 	bl	8000f54 <Lcd_string>

		Lcd_cursor(&lcd, 1, 9) ;
 8001c4c:	2209      	movs	r2, #9
 8001c4e:	2101      	movs	r1, #1
 8001c50:	4883      	ldr	r0, [pc, #524]	; (8001e60 <change_lcd_display_mode+0x28c>)
 8001c52:	f7ff f99f 	bl	8000f94 <Lcd_cursor>
		snprintf(g_panel_eff, sizeof(g_panel_voltage),"E:%03d%%",g_pv_eff);
 8001c56:	4b8c      	ldr	r3, [pc, #560]	; (8001e88 <change_lcd_display_mode+0x2b4>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	4a8c      	ldr	r2, [pc, #560]	; (8001e8c <change_lcd_display_mode+0x2b8>)
 8001c5c:	2109      	movs	r1, #9
 8001c5e:	488c      	ldr	r0, [pc, #560]	; (8001e90 <change_lcd_display_mode+0x2bc>)
 8001c60:	f004 fc6a 	bl	8006538 <sniprintf>
		Lcd_string(&lcd, g_panel_eff);
 8001c64:	498a      	ldr	r1, [pc, #552]	; (8001e90 <change_lcd_display_mode+0x2bc>)
 8001c66:	487e      	ldr	r0, [pc, #504]	; (8001e60 <change_lcd_display_mode+0x28c>)
 8001c68:	f7ff f974 	bl	8000f54 <Lcd_string>
	}


	//update state based on button press - DONT UPDATE ANYS STATES WHILE MEASURING
	if(g_left_button_pressed == 1 && g_EN_measure_LCD_display ==0 && g_SP_measure_LCD_diplay ==0 && g_SP_measure !=1 && g_EN_measure !=1){
 8001c6c:	4b89      	ldr	r3, [pc, #548]	; (8001e94 <change_lcd_display_mode+0x2c0>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d123      	bne.n	8001cbc <change_lcd_display_mode+0xe8>
 8001c74:	4b88      	ldr	r3, [pc, #544]	; (8001e98 <change_lcd_display_mode+0x2c4>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d11f      	bne.n	8001cbc <change_lcd_display_mode+0xe8>
 8001c7c:	4b87      	ldr	r3, [pc, #540]	; (8001e9c <change_lcd_display_mode+0x2c8>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d11b      	bne.n	8001cbc <change_lcd_display_mode+0xe8>
 8001c84:	4b86      	ldr	r3, [pc, #536]	; (8001ea0 <change_lcd_display_mode+0x2cc>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d017      	beq.n	8001cbc <change_lcd_display_mode+0xe8>
 8001c8c:	4b85      	ldr	r3, [pc, #532]	; (8001ea4 <change_lcd_display_mode+0x2d0>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d013      	beq.n	8001cbc <change_lcd_display_mode+0xe8>

		//display/update lcd results
		display_result= 1 ;
 8001c94:	4b84      	ldr	r3, [pc, #528]	; (8001ea8 <change_lcd_display_mode+0x2d4>)
 8001c96:	2201      	movs	r2, #1
 8001c98:	701a      	strb	r2, [r3, #0]

		g_left_button_pressed = 0;
 8001c9a:	4b7e      	ldr	r3, [pc, #504]	; (8001e94 <change_lcd_display_mode+0x2c0>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	701a      	strb	r2, [r3, #0]
		g_lcd_mode ++;
 8001ca0:	4b82      	ldr	r3, [pc, #520]	; (8001eac <change_lcd_display_mode+0x2d8>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	4b80      	ldr	r3, [pc, #512]	; (8001eac <change_lcd_display_mode+0x2d8>)
 8001caa:	701a      	strb	r2, [r3, #0]

		if(g_lcd_mode>2){
 8001cac:	4b7f      	ldr	r3, [pc, #508]	; (8001eac <change_lcd_display_mode+0x2d8>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d943      	bls.n	8001d3c <change_lcd_display_mode+0x168>
			g_lcd_mode = 1 ;
 8001cb4:	4b7d      	ldr	r3, [pc, #500]	; (8001eac <change_lcd_display_mode+0x2d8>)
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	701a      	strb	r2, [r3, #0]
		if(g_lcd_mode>2){
 8001cba:	e03f      	b.n	8001d3c <change_lcd_display_mode+0x168>
		}
	}

	//update lcd state based on  EN stop command
	else if(g_left_button_pressed == 0 && g_EN_measure_LCD_display == 1 && g_SP_measure_LCD_diplay ==0  && g_SP_measure !=1 && g_EN_measure !=1 ){
 8001cbc:	4b75      	ldr	r3, [pc, #468]	; (8001e94 <change_lcd_display_mode+0x2c0>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d119      	bne.n	8001cf8 <change_lcd_display_mode+0x124>
 8001cc4:	4b74      	ldr	r3, [pc, #464]	; (8001e98 <change_lcd_display_mode+0x2c4>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d115      	bne.n	8001cf8 <change_lcd_display_mode+0x124>
 8001ccc:	4b73      	ldr	r3, [pc, #460]	; (8001e9c <change_lcd_display_mode+0x2c8>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d111      	bne.n	8001cf8 <change_lcd_display_mode+0x124>
 8001cd4:	4b72      	ldr	r3, [pc, #456]	; (8001ea0 <change_lcd_display_mode+0x2cc>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d00d      	beq.n	8001cf8 <change_lcd_display_mode+0x124>
 8001cdc:	4b71      	ldr	r3, [pc, #452]	; (8001ea4 <change_lcd_display_mode+0x2d0>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d009      	beq.n	8001cf8 <change_lcd_display_mode+0x124>
		g_EN_measure_LCD_display = 0 ;
 8001ce4:	4b6c      	ldr	r3, [pc, #432]	; (8001e98 <change_lcd_display_mode+0x2c4>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	701a      	strb	r2, [r3, #0]

		g_lcd_mode = 1; //display EN measurements
 8001cea:	4b70      	ldr	r3, [pc, #448]	; (8001eac <change_lcd_display_mode+0x2d8>)
 8001cec:	2201      	movs	r2, #1
 8001cee:	701a      	strb	r2, [r3, #0]

		//display/update lcd results
		display_result= 1 ;
 8001cf0:	4b6d      	ldr	r3, [pc, #436]	; (8001ea8 <change_lcd_display_mode+0x2d4>)
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	701a      	strb	r2, [r3, #0]
 8001cf6:	e021      	b.n	8001d3c <change_lcd_display_mode+0x168>
	}

	//update LCD based on SP command
	else if(g_left_button_pressed ==0 && g_EN_measure_LCD_display== 0 && g_SP_measure_LCD_diplay== 1  && g_SP_measure !=1 && g_EN_measure !=1){
 8001cf8:	4b66      	ldr	r3, [pc, #408]	; (8001e94 <change_lcd_display_mode+0x2c0>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d119      	bne.n	8001d34 <change_lcd_display_mode+0x160>
 8001d00:	4b65      	ldr	r3, [pc, #404]	; (8001e98 <change_lcd_display_mode+0x2c4>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d115      	bne.n	8001d34 <change_lcd_display_mode+0x160>
 8001d08:	4b64      	ldr	r3, [pc, #400]	; (8001e9c <change_lcd_display_mode+0x2c8>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d111      	bne.n	8001d34 <change_lcd_display_mode+0x160>
 8001d10:	4b63      	ldr	r3, [pc, #396]	; (8001ea0 <change_lcd_display_mode+0x2cc>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d00d      	beq.n	8001d34 <change_lcd_display_mode+0x160>
 8001d18:	4b62      	ldr	r3, [pc, #392]	; (8001ea4 <change_lcd_display_mode+0x2d0>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d009      	beq.n	8001d34 <change_lcd_display_mode+0x160>
		g_SP_measure_LCD_diplay =0;
 8001d20:	4b5e      	ldr	r3, [pc, #376]	; (8001e9c <change_lcd_display_mode+0x2c8>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	701a      	strb	r2, [r3, #0]

		g_lcd_mode = 2; //display SP measurements
 8001d26:	4b61      	ldr	r3, [pc, #388]	; (8001eac <change_lcd_display_mode+0x2d8>)
 8001d28:	2202      	movs	r2, #2
 8001d2a:	701a      	strb	r2, [r3, #0]

		//display/update lcd results
		display_result= 1 ;
 8001d2c:	4b5e      	ldr	r3, [pc, #376]	; (8001ea8 <change_lcd_display_mode+0x2d4>)
 8001d2e:	2201      	movs	r2, #1
 8001d30:	701a      	strb	r2, [r3, #0]
 8001d32:	e003      	b.n	8001d3c <change_lcd_display_mode+0x168>
	}

	//otherwise dont update display maode
	else{
		g_lcd_mode = g_lcd_mode ;
 8001d34:	4b5d      	ldr	r3, [pc, #372]	; (8001eac <change_lcd_display_mode+0x2d8>)
 8001d36:	781a      	ldrb	r2, [r3, #0]
 8001d38:	4b5c      	ldr	r3, [pc, #368]	; (8001eac <change_lcd_display_mode+0x2d8>)
 8001d3a:	701a      	strb	r2, [r3, #0]
//		g_left_button_pressed = 0; //dont update left button press  (this is causing left button press not to be registered)
	}

	if(display_result == 1){
 8001d3c:	4b5a      	ldr	r3, [pc, #360]	; (8001ea8 <change_lcd_display_mode+0x2d4>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	f040 8088 	bne.w	8001e56 <change_lcd_display_mode+0x282>
		display_result = 0;
 8001d46:	4b58      	ldr	r3, [pc, #352]	; (8001ea8 <change_lcd_display_mode+0x2d4>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	701a      	strb	r2, [r3, #0]


		if(g_lcd_mode == 1){//display mode 1: EN measurement
 8001d4c:	4b57      	ldr	r3, [pc, #348]	; (8001eac <change_lcd_display_mode+0x2d8>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d136      	bne.n	8001dc2 <change_lcd_display_mode+0x1ee>
			display_result = 0; //display contents once only
 8001d54:	4b54      	ldr	r3, [pc, #336]	; (8001ea8 <change_lcd_display_mode+0x2d4>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	701a      	strb	r2, [r3, #0]
			//clear current LCD contents
			Lcd_clear(&lcd);
 8001d5a:	4841      	ldr	r0, [pc, #260]	; (8001e60 <change_lcd_display_mode+0x28c>)
 8001d5c:	f7ff f934 	bl	8000fc8 <Lcd_clear>
			//Write Results to LCD
			Lcd_cursor(&lcd, 0,0);
 8001d60:	2200      	movs	r2, #0
 8001d62:	2100      	movs	r1, #0
 8001d64:	483e      	ldr	r0, [pc, #248]	; (8001e60 <change_lcd_display_mode+0x28c>)
 8001d66:	f7ff f915 	bl	8000f94 <Lcd_cursor>
			snprintf(g_lcd_amb_val, sizeof(g_lcd_amb_val),"AMB:%03dC",g_temp_in_deg);
 8001d6a:	4b51      	ldr	r3, [pc, #324]	; (8001eb0 <change_lcd_display_mode+0x2dc>)
 8001d6c:	881b      	ldrh	r3, [r3, #0]
 8001d6e:	4a51      	ldr	r2, [pc, #324]	; (8001eb4 <change_lcd_display_mode+0x2e0>)
 8001d70:	2109      	movs	r1, #9
 8001d72:	4851      	ldr	r0, [pc, #324]	; (8001eb8 <change_lcd_display_mode+0x2e4>)
 8001d74:	f004 fbe0 	bl	8006538 <sniprintf>
			Lcd_string(&lcd, g_lcd_amb_val);
 8001d78:	494f      	ldr	r1, [pc, #316]	; (8001eb8 <change_lcd_display_mode+0x2e4>)
 8001d7a:	4839      	ldr	r0, [pc, #228]	; (8001e60 <change_lcd_display_mode+0x28c>)
 8001d7c:	f7ff f8ea 	bl	8000f54 <Lcd_string>

			Lcd_cursor(&lcd, 0,9);
 8001d80:	2209      	movs	r2, #9
 8001d82:	2100      	movs	r1, #0
 8001d84:	4836      	ldr	r0, [pc, #216]	; (8001e60 <change_lcd_display_mode+0x28c>)
 8001d86:	f7ff f905 	bl	8000f94 <Lcd_cursor>
			snprintf(g_lcd_sb_val, sizeof(g_lcd_sb_val),"SP:%03dC",g_lmt01_sens_temp);
 8001d8a:	4b4c      	ldr	r3, [pc, #304]	; (8001ebc <change_lcd_display_mode+0x2e8>)
 8001d8c:	881b      	ldrh	r3, [r3, #0]
 8001d8e:	4a4c      	ldr	r2, [pc, #304]	; (8001ec0 <change_lcd_display_mode+0x2ec>)
 8001d90:	2108      	movs	r1, #8
 8001d92:	484c      	ldr	r0, [pc, #304]	; (8001ec4 <change_lcd_display_mode+0x2f0>)
 8001d94:	f004 fbd0 	bl	8006538 <sniprintf>
			Lcd_string(&lcd, g_lcd_sb_val);
 8001d98:	494a      	ldr	r1, [pc, #296]	; (8001ec4 <change_lcd_display_mode+0x2f0>)
 8001d9a:	4831      	ldr	r0, [pc, #196]	; (8001e60 <change_lcd_display_mode+0x28c>)
 8001d9c:	f7ff f8da 	bl	8000f54 <Lcd_string>

			//scale lux value: [0: 30000]?
			Lcd_cursor(&lcd, 1,0);
 8001da0:	2200      	movs	r2, #0
 8001da2:	2101      	movs	r1, #1
 8001da4:	482e      	ldr	r0, [pc, #184]	; (8001e60 <change_lcd_display_mode+0x28c>)
 8001da6:	f7ff f8f5 	bl	8000f94 <Lcd_cursor>
			snprintf(g_lcd_lux_val, sizeof(g_lcd_lux_val),"LUX:%05d",g_get_lxd_value);
 8001daa:	4b47      	ldr	r3, [pc, #284]	; (8001ec8 <change_lcd_display_mode+0x2f4>)
 8001dac:	881b      	ldrh	r3, [r3, #0]
 8001dae:	4a47      	ldr	r2, [pc, #284]	; (8001ecc <change_lcd_display_mode+0x2f8>)
 8001db0:	210a      	movs	r1, #10
 8001db2:	4847      	ldr	r0, [pc, #284]	; (8001ed0 <change_lcd_display_mode+0x2fc>)
 8001db4:	f004 fbc0 	bl	8006538 <sniprintf>
			Lcd_string(&lcd,g_lcd_lux_val);
 8001db8:	4945      	ldr	r1, [pc, #276]	; (8001ed0 <change_lcd_display_mode+0x2fc>)
 8001dba:	4829      	ldr	r0, [pc, #164]	; (8001e60 <change_lcd_display_mode+0x28c>)
 8001dbc:	f7ff f8ca 	bl	8000f54 <Lcd_string>
			Lcd_string(&lcd, g_panel_eff);
		}

	}

}
 8001dc0:	e049      	b.n	8001e56 <change_lcd_display_mode+0x282>
		else if(g_lcd_mode == 2 ){//disply mode 2: SP measurements
 8001dc2:	4b3a      	ldr	r3, [pc, #232]	; (8001eac <change_lcd_display_mode+0x2d8>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d145      	bne.n	8001e56 <change_lcd_display_mode+0x282>
			display_result = 0 ; //display content only once
 8001dca:	4b37      	ldr	r3, [pc, #220]	; (8001ea8 <change_lcd_display_mode+0x2d4>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	701a      	strb	r2, [r3, #0]
			Lcd_clear(&lcd);
 8001dd0:	4823      	ldr	r0, [pc, #140]	; (8001e60 <change_lcd_display_mode+0x28c>)
 8001dd2:	f7ff f8f9 	bl	8000fc8 <Lcd_clear>
			Lcd_cursor(&lcd, 0, 0) ;
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	2100      	movs	r1, #0
 8001dda:	4821      	ldr	r0, [pc, #132]	; (8001e60 <change_lcd_display_mode+0x28c>)
 8001ddc:	f7ff f8da 	bl	8000f94 <Lcd_cursor>
			snprintf(g_panel_voltage, sizeof(g_panel_voltage),"V:%04dmV",g_v_mpp);
 8001de0:	4b20      	ldr	r3, [pc, #128]	; (8001e64 <change_lcd_display_mode+0x290>)
 8001de2:	881b      	ldrh	r3, [r3, #0]
 8001de4:	4a20      	ldr	r2, [pc, #128]	; (8001e68 <change_lcd_display_mode+0x294>)
 8001de6:	2109      	movs	r1, #9
 8001de8:	4820      	ldr	r0, [pc, #128]	; (8001e6c <change_lcd_display_mode+0x298>)
 8001dea:	f004 fba5 	bl	8006538 <sniprintf>
			Lcd_string(&lcd, g_panel_voltage);
 8001dee:	491f      	ldr	r1, [pc, #124]	; (8001e6c <change_lcd_display_mode+0x298>)
 8001df0:	481b      	ldr	r0, [pc, #108]	; (8001e60 <change_lcd_display_mode+0x28c>)
 8001df2:	f7ff f8af 	bl	8000f54 <Lcd_string>
			Lcd_cursor(&lcd, 0, 9) ;
 8001df6:	2209      	movs	r2, #9
 8001df8:	2100      	movs	r1, #0
 8001dfa:	4819      	ldr	r0, [pc, #100]	; (8001e60 <change_lcd_display_mode+0x28c>)
 8001dfc:	f7ff f8ca 	bl	8000f94 <Lcd_cursor>
			snprintf(g_panel_current, sizeof(g_panel_voltage),"I:%03dmA",g_i_mpp);
 8001e00:	4b1b      	ldr	r3, [pc, #108]	; (8001e70 <change_lcd_display_mode+0x29c>)
 8001e02:	881b      	ldrh	r3, [r3, #0]
 8001e04:	4a1b      	ldr	r2, [pc, #108]	; (8001e74 <change_lcd_display_mode+0x2a0>)
 8001e06:	2109      	movs	r1, #9
 8001e08:	481b      	ldr	r0, [pc, #108]	; (8001e78 <change_lcd_display_mode+0x2a4>)
 8001e0a:	f004 fb95 	bl	8006538 <sniprintf>
			Lcd_string(&lcd, g_panel_current);
 8001e0e:	491a      	ldr	r1, [pc, #104]	; (8001e78 <change_lcd_display_mode+0x2a4>)
 8001e10:	4813      	ldr	r0, [pc, #76]	; (8001e60 <change_lcd_display_mode+0x28c>)
 8001e12:	f7ff f89f 	bl	8000f54 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0) ;
 8001e16:	2200      	movs	r2, #0
 8001e18:	2101      	movs	r1, #1
 8001e1a:	4811      	ldr	r0, [pc, #68]	; (8001e60 <change_lcd_display_mode+0x28c>)
 8001e1c:	f7ff f8ba 	bl	8000f94 <Lcd_cursor>
			snprintf(g_panel_power, sizeof(g_panel_voltage),"P: %03dmW",g_p_mpp);
 8001e20:	4b16      	ldr	r3, [pc, #88]	; (8001e7c <change_lcd_display_mode+0x2a8>)
 8001e22:	881b      	ldrh	r3, [r3, #0]
 8001e24:	4a16      	ldr	r2, [pc, #88]	; (8001e80 <change_lcd_display_mode+0x2ac>)
 8001e26:	2109      	movs	r1, #9
 8001e28:	4816      	ldr	r0, [pc, #88]	; (8001e84 <change_lcd_display_mode+0x2b0>)
 8001e2a:	f004 fb85 	bl	8006538 <sniprintf>
			Lcd_string(&lcd, g_panel_power);
 8001e2e:	4915      	ldr	r1, [pc, #84]	; (8001e84 <change_lcd_display_mode+0x2b0>)
 8001e30:	480b      	ldr	r0, [pc, #44]	; (8001e60 <change_lcd_display_mode+0x28c>)
 8001e32:	f7ff f88f 	bl	8000f54 <Lcd_string>
			Lcd_cursor(&lcd, 1, 9) ;
 8001e36:	2209      	movs	r2, #9
 8001e38:	2101      	movs	r1, #1
 8001e3a:	4809      	ldr	r0, [pc, #36]	; (8001e60 <change_lcd_display_mode+0x28c>)
 8001e3c:	f7ff f8aa 	bl	8000f94 <Lcd_cursor>
			snprintf(g_panel_eff, sizeof(g_panel_voltage),"E:%03d%%",g_pv_eff);
 8001e40:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <change_lcd_display_mode+0x2b4>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	4a11      	ldr	r2, [pc, #68]	; (8001e8c <change_lcd_display_mode+0x2b8>)
 8001e46:	2109      	movs	r1, #9
 8001e48:	4811      	ldr	r0, [pc, #68]	; (8001e90 <change_lcd_display_mode+0x2bc>)
 8001e4a:	f004 fb75 	bl	8006538 <sniprintf>
			Lcd_string(&lcd, g_panel_eff);
 8001e4e:	4910      	ldr	r1, [pc, #64]	; (8001e90 <change_lcd_display_mode+0x2bc>)
 8001e50:	4803      	ldr	r0, [pc, #12]	; (8001e60 <change_lcd_display_mode+0x28c>)
 8001e52:	f7ff f87f 	bl	8000f54 <Lcd_string>
}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	20000013 	.word	0x20000013
 8001e60:	20000300 	.word	0x20000300
 8001e64:	20000236 	.word	0x20000236
 8001e68:	08007cd8 	.word	0x08007cd8
 8001e6c:	20000268 	.word	0x20000268
 8001e70:	20000238 	.word	0x20000238
 8001e74:	08007ce4 	.word	0x08007ce4
 8001e78:	20000274 	.word	0x20000274
 8001e7c:	2000023a 	.word	0x2000023a
 8001e80:	08007cf0 	.word	0x08007cf0
 8001e84:	20000278 	.word	0x20000278
 8001e88:	2000023c 	.word	0x2000023c
 8001e8c:	08007cfc 	.word	0x08007cfc
 8001e90:	200002a8 	.word	0x200002a8
 8001e94:	20000332 	.word	0x20000332
 8001e98:	200002c4 	.word	0x200002c4
 8001e9c:	200002cf 	.word	0x200002cf
 8001ea0:	200002ce 	.word	0x200002ce
 8001ea4:	200002c3 	.word	0x200002c3
 8001ea8:	200002ff 	.word	0x200002ff
 8001eac:	200002fe 	.word	0x200002fe
 8001eb0:	200001f8 	.word	0x200001f8
 8001eb4:	08007d08 	.word	0x08007d08
 8001eb8:	20000248 	.word	0x20000248
 8001ebc:	20000322 	.word	0x20000322
 8001ec0:	08007d14 	.word	0x08007d14
 8001ec4:	20000254 	.word	0x20000254
 8001ec8:	20000210 	.word	0x20000210
 8001ecc:	08007d20 	.word	0x08007d20
 8001ed0:	2000025c 	.word	0x2000025c
 8001ed4:	00000000 	.word	0x00000000

08001ed8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ed8:	b5b0      	push	{r4, r5, r7, lr}
 8001eda:	b08a      	sub	sp, #40	; 0x28
 8001edc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ede:	f000 ff69 	bl	8002db4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ee2:	f000 f995 	bl	8002210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ee6:	f000 fb21 	bl	800252c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001eea:	f000 faf3 	bl	80024d4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001eee:	f000 f9f9 	bl	80022e4 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001ef2:	f000 fa31 	bl	8002358 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001ef6:	f000 fa9f 	bl	8002438 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(150);
 8001efa:	2096      	movs	r0, #150	; 0x96
 8001efc:	f000 ffcc 	bl	8002e98 <HAL_Delay>
  HAL_UART_Transmit_IT(&huart2, (uint8_t*)studentNum, 13) ;
 8001f00:	220d      	movs	r2, #13
 8001f02:	499f      	ldr	r1, [pc, #636]	; (8002180 <main+0x2a8>)
 8001f04:	489f      	ldr	r0, [pc, #636]	; (8002184 <main+0x2ac>)
 8001f06:	f003 fb76 	bl	80055f6 <HAL_UART_Transmit_IT>

  HAL_UART_Receive_IT(&huart2, (uint8_t*)char_rcvd, 1) ;
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	499e      	ldr	r1, [pc, #632]	; (8002188 <main+0x2b0>)
 8001f0e:	489d      	ldr	r0, [pc, #628]	; (8002184 <main+0x2ac>)
 8001f10:	f003 fbb6 	bl	8005680 <HAL_UART_Receive_IT>

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1)  ; // input to trigger interrupt - LMT01 sensor
 8001f14:	2100      	movs	r1, #0
 8001f16:	489d      	ldr	r0, [pc, #628]	; (800218c <main+0x2b4>)
 8001f18:	f002 fc92 	bl	8004840 <HAL_TIM_IC_Start_IT>

  g_time_passed = HAL_GetTick() ; //snapshot of time
 8001f1c:	f000 ffb0 	bl	8002e80 <HAL_GetTick>
 8001f20:	4603      	mov	r3, r0
 8001f22:	4a9b      	ldr	r2, [pc, #620]	; (8002190 <main+0x2b8>)
 8001f24:	6013      	str	r3, [r2, #0]

  //Write to LCD
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET) ;
 8001f26:	2200      	movs	r2, #0
 8001f28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f2c:	4899      	ldr	r0, [pc, #612]	; (8002194 <main+0x2bc>)
 8001f2e:	f001 ff09 	bl	8003d44 <HAL_GPIO_WritePin>

  lcd = Lcd_create(ports, pins, GPIOB, GPIO_PIN_14, GPIOB, GPIO_PIN_2, LCD_4_BIT_MODE);
 8001f32:	4c99      	ldr	r4, [pc, #612]	; (8002198 <main+0x2c0>)
 8001f34:	4638      	mov	r0, r7
 8001f36:	2300      	movs	r3, #0
 8001f38:	9303      	str	r3, [sp, #12]
 8001f3a:	2304      	movs	r3, #4
 8001f3c:	9302      	str	r3, [sp, #8]
 8001f3e:	4b95      	ldr	r3, [pc, #596]	; (8002194 <main+0x2bc>)
 8001f40:	9301      	str	r3, [sp, #4]
 8001f42:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	4b92      	ldr	r3, [pc, #584]	; (8002194 <main+0x2bc>)
 8001f4a:	4a94      	ldr	r2, [pc, #592]	; (800219c <main+0x2c4>)
 8001f4c:	4994      	ldr	r1, [pc, #592]	; (80021a0 <main+0x2c8>)
 8001f4e:	f7fe ffad 	bl	8000eac <Lcd_create>
 8001f52:	4625      	mov	r5, r4
 8001f54:	463c      	mov	r4, r7
 8001f56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f5e:	e885 0003 	stmia.w	r5, {r0, r1}
  Lcd_clear(&lcd);
 8001f62:	488d      	ldr	r0, [pc, #564]	; (8002198 <main+0x2c0>)
 8001f64:	f7ff f830 	bl	8000fc8 <Lcd_clear>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  system_state_update() ;
 8001f68:	f7ff f9d6 	bl	8001318 <system_state_update>

	  //UR3: Evironment measure: measure Ta & measure Tb  (Put in Function)/Modularize
	  en_measurements_and_responses() ;
 8001f6c:	f7ff fcc6 	bl	80018fc <en_measurements_and_responses>

	  //UR2: PV Module -(Put in Function)/Modularize
	  if(g_SP_measure == 1){
 8001f70:	4b8c      	ldr	r3, [pc, #560]	; (80021a4 <main+0x2cc>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	f040 80c7 	bne.w	8002108 <main+0x230>

		// ignore top button and left button press and EN command while measuring
		if(g_top_button_pressed ==1 || g_EN_config_command_rcvd ==1 || g_left_button_pressed ==1){
 8001f7a:	4b8b      	ldr	r3, [pc, #556]	; (80021a8 <main+0x2d0>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d007      	beq.n	8001f92 <main+0xba>
 8001f82:	4b8a      	ldr	r3, [pc, #552]	; (80021ac <main+0x2d4>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d003      	beq.n	8001f92 <main+0xba>
 8001f8a:	4b89      	ldr	r3, [pc, #548]	; (80021b0 <main+0x2d8>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d108      	bne.n	8001fa4 <main+0xcc>
		  g_top_button_pressed = 0 ;
 8001f92:	4b85      	ldr	r3, [pc, #532]	; (80021a8 <main+0x2d0>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	701a      	strb	r2, [r3, #0]
		  g_EN_config_command_rcvd = 0;
 8001f98:	4b84      	ldr	r3, [pc, #528]	; (80021ac <main+0x2d4>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	701a      	strb	r2, [r3, #0]
		  g_left_button_pressed = 0;
 8001f9e:	4b84      	ldr	r3, [pc, #528]	; (80021b0 <main+0x2d8>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	701a      	strb	r2, [r3, #0]
		}

		//reprime state transmission
		if(g_transmit_SP_system_state == 0){
 8001fa4:	4b83      	ldr	r3, [pc, #524]	; (80021b4 <main+0x2dc>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d102      	bne.n	8001fb2 <main+0xda>
			g_transmit_SP_system_state = 1;
 8001fac:	4b81      	ldr	r3, [pc, #516]	; (80021b4 <main+0x2dc>)
 8001fae:	2201      	movs	r2, #1
 8001fb0:	701a      	strb	r2, [r3, #0]
		}
		//PV panel data points measure
		g_PV_vol1 = get_pv_panel_adc2_input() ; //Voc = Vsp
 8001fb2:	f7ff fdb1 	bl	8001b18 <get_pv_panel_adc2_input>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	461a      	mov	r2, r3
 8001fba:	4b7f      	ldr	r3, [pc, #508]	; (80021b8 <main+0x2e0>)
 8001fbc:	801a      	strh	r2, [r3, #0]
		//*ADC input(2) Vb = V_var
		g_PV_vol2= get_pv_panel_adc1_input() ;
 8001fbe:	f7ff fd4b 	bl	8001a58 <get_pv_panel_adc1_input>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	4b7d      	ldr	r3, [pc, #500]	; (80021bc <main+0x2e4>)
 8001fc8:	801a      	strh	r2, [r3, #0]

		//GET VALUES
		//Voc measure - Voc, vpv
		if(g_PV_vol1 > g_prev_v_pv){
 8001fca:	4b7b      	ldr	r3, [pc, #492]	; (80021b8 <main+0x2e0>)
 8001fcc:	881a      	ldrh	r2, [r3, #0]
 8001fce:	4b7c      	ldr	r3, [pc, #496]	; (80021c0 <main+0x2e8>)
 8001fd0:	881b      	ldrh	r3, [r3, #0]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d907      	bls.n	8001fe6 <main+0x10e>
		  g_prev_v_pv = g_PV_vol1 ;
 8001fd6:	4b78      	ldr	r3, [pc, #480]	; (80021b8 <main+0x2e0>)
 8001fd8:	881a      	ldrh	r2, [r3, #0]
 8001fda:	4b79      	ldr	r3, [pc, #484]	; (80021c0 <main+0x2e8>)
 8001fdc:	801a      	strh	r2, [r3, #0]
		  //capture maximum open circuit voltage
		  g_v_oc_pv = g_PV_vol1 ;
 8001fde:	4b76      	ldr	r3, [pc, #472]	; (80021b8 <main+0x2e0>)
 8001fe0:	881a      	ldrh	r2, [r3, #0]
 8001fe2:	4b78      	ldr	r3, [pc, #480]	; (80021c4 <main+0x2ec>)
 8001fe4:	801a      	strh	r2, [r3, #0]
		}

		//curent measure - Isc, Ipv
		if(g_PV_vol1 - g_PV_vol2 >0){
 8001fe6:	4b74      	ldr	r3, [pc, #464]	; (80021b8 <main+0x2e0>)
 8001fe8:	881b      	ldrh	r3, [r3, #0]
 8001fea:	461a      	mov	r2, r3
 8001fec:	4b73      	ldr	r3, [pc, #460]	; (80021bc <main+0x2e4>)
 8001fee:	881b      	ldrh	r3, [r3, #0]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	dd08      	ble.n	8002008 <main+0x130>
			g_i_pv = g_PV_vol1 - g_PV_vol2 ;
 8001ff6:	4b70      	ldr	r3, [pc, #448]	; (80021b8 <main+0x2e0>)
 8001ff8:	881a      	ldrh	r2, [r3, #0]
 8001ffa:	4b70      	ldr	r3, [pc, #448]	; (80021bc <main+0x2e4>)
 8001ffc:	881b      	ldrh	r3, [r3, #0]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	b29a      	uxth	r2, r3
 8002002:	4b71      	ldr	r3, [pc, #452]	; (80021c8 <main+0x2f0>)
 8002004:	801a      	strh	r2, [r3, #0]
 8002006:	e003      	b.n	8002010 <main+0x138>
		}
		else{
			g_i_pv = g_i_pv ; //dont update current
 8002008:	4b6f      	ldr	r3, [pc, #444]	; (80021c8 <main+0x2f0>)
 800200a:	881a      	ldrh	r2, [r3, #0]
 800200c:	4b6e      	ldr	r3, [pc, #440]	; (80021c8 <main+0x2f0>)
 800200e:	801a      	strh	r2, [r3, #0]
		}

		//power measure - multiply by 1000, to get result in mW
		g_p_pv = ( (g_PV_vol1 * g_i_pv)/1000000.0) *1000;
 8002010:	4b69      	ldr	r3, [pc, #420]	; (80021b8 <main+0x2e0>)
 8002012:	881b      	ldrh	r3, [r3, #0]
 8002014:	461a      	mov	r2, r3
 8002016:	4b6c      	ldr	r3, [pc, #432]	; (80021c8 <main+0x2f0>)
 8002018:	881b      	ldrh	r3, [r3, #0]
 800201a:	fb02 f303 	mul.w	r3, r2, r3
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe fa88 	bl	8000534 <__aeabi_i2d>
 8002024:	a354      	add	r3, pc, #336	; (adr r3, 8002178 <main+0x2a0>)
 8002026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202a:	f7fe fc17 	bl	800085c <__aeabi_ddiv>
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	4610      	mov	r0, r2
 8002034:	4619      	mov	r1, r3
 8002036:	f04f 0200 	mov.w	r2, #0
 800203a:	4b64      	ldr	r3, [pc, #400]	; (80021cc <main+0x2f4>)
 800203c:	f7fe fae4 	bl	8000608 <__aeabi_dmul>
 8002040:	4602      	mov	r2, r0
 8002042:	460b      	mov	r3, r1
 8002044:	4610      	mov	r0, r2
 8002046:	4619      	mov	r1, r3
 8002048:	f7fe fd8e 	bl	8000b68 <__aeabi_d2uiz>
 800204c:	4603      	mov	r3, r0
 800204e:	b29a      	uxth	r2, r3
 8002050:	4b5f      	ldr	r3, [pc, #380]	; (80021d0 <main+0x2f8>)
 8002052:	801a      	strh	r2, [r3, #0]


		/*mpp values measure using power -Pmpp, Vmpp, Impp*/
		//check is power increasing
		if(g_p_pv > g_prev_p_pv ){
 8002054:	4b5e      	ldr	r3, [pc, #376]	; (80021d0 <main+0x2f8>)
 8002056:	881a      	ldrh	r2, [r3, #0]
 8002058:	4b5e      	ldr	r3, [pc, #376]	; (80021d4 <main+0x2fc>)
 800205a:	881b      	ldrh	r3, [r3, #0]
 800205c:	429a      	cmp	r2, r3
 800205e:	d90f      	bls.n	8002080 <main+0x1a8>
			g_p_mpp = g_p_pv ;
 8002060:	4b5b      	ldr	r3, [pc, #364]	; (80021d0 <main+0x2f8>)
 8002062:	881a      	ldrh	r2, [r3, #0]
 8002064:	4b5c      	ldr	r3, [pc, #368]	; (80021d8 <main+0x300>)
 8002066:	801a      	strh	r2, [r3, #0]
			g_v_mpp = g_PV_vol1 ;
 8002068:	4b53      	ldr	r3, [pc, #332]	; (80021b8 <main+0x2e0>)
 800206a:	881a      	ldrh	r2, [r3, #0]
 800206c:	4b5b      	ldr	r3, [pc, #364]	; (80021dc <main+0x304>)
 800206e:	801a      	strh	r2, [r3, #0]
			g_i_mpp = g_i_pv ;
 8002070:	4b55      	ldr	r3, [pc, #340]	; (80021c8 <main+0x2f0>)
 8002072:	881a      	ldrh	r2, [r3, #0]
 8002074:	4b5a      	ldr	r3, [pc, #360]	; (80021e0 <main+0x308>)
 8002076:	801a      	strh	r2, [r3, #0]
			g_prev_p_pv = g_p_pv ;
 8002078:	4b55      	ldr	r3, [pc, #340]	; (80021d0 <main+0x2f8>)
 800207a:	881a      	ldrh	r2, [r3, #0]
 800207c:	4b55      	ldr	r3, [pc, #340]	; (80021d4 <main+0x2fc>)
 800207e:	801a      	strh	r2, [r3, #0]
		}


		if(clear_lcd_display == 1){
 8002080:	4b58      	ldr	r3, [pc, #352]	; (80021e4 <main+0x30c>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d105      	bne.n	8002094 <main+0x1bc>
			clear_lcd_display = 0;
 8002088:	4b56      	ldr	r3, [pc, #344]	; (80021e4 <main+0x30c>)
 800208a:	2200      	movs	r2, #0
 800208c:	701a      	strb	r2, [r3, #0]
			Lcd_clear(&lcd);
 800208e:	4842      	ldr	r0, [pc, #264]	; (8002198 <main+0x2c0>)
 8002090:	f7fe ff9a 	bl	8000fc8 <Lcd_clear>
		}
		//LCD write - real-time measured Vpv (mV), Ipv (mA), Ppv (mW), Peff = 0 while measuring
		//few commands - (have 2 write commands, and reduce rate of sampling/real time value display)

		//update valus only every 30ms
		if(HAL_GetTick() - g_previous_time_of_lcd >=30){
 8002094:	f000 fef4 	bl	8002e80 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	4b53      	ldr	r3, [pc, #332]	; (80021e8 <main+0x310>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b1d      	cmp	r3, #29
 80020a2:	d92e      	bls.n	8002102 <main+0x22a>
			//write to lcd - //row 1
			Lcd_cursor(&lcd, 0, 0) ;
 80020a4:	2200      	movs	r2, #0
 80020a6:	2100      	movs	r1, #0
 80020a8:	483b      	ldr	r0, [pc, #236]	; (8002198 <main+0x2c0>)
 80020aa:	f7fe ff73 	bl	8000f94 <Lcd_cursor>
			snprintf(g_panel_voltage_and_current, sizeof(g_panel_voltage_and_current),"V:%04dmV I:%03dmA",g_PV_vol1,g_i_pv);
 80020ae:	4b42      	ldr	r3, [pc, #264]	; (80021b8 <main+0x2e0>)
 80020b0:	881b      	ldrh	r3, [r3, #0]
 80020b2:	461a      	mov	r2, r3
 80020b4:	4b44      	ldr	r3, [pc, #272]	; (80021c8 <main+0x2f0>)
 80020b6:	881b      	ldrh	r3, [r3, #0]
 80020b8:	9300      	str	r3, [sp, #0]
 80020ba:	4613      	mov	r3, r2
 80020bc:	4a4b      	ldr	r2, [pc, #300]	; (80021ec <main+0x314>)
 80020be:	2111      	movs	r1, #17
 80020c0:	484b      	ldr	r0, [pc, #300]	; (80021f0 <main+0x318>)
 80020c2:	f004 fa39 	bl	8006538 <sniprintf>
			Lcd_string(&lcd, g_panel_voltage_and_current);
 80020c6:	494a      	ldr	r1, [pc, #296]	; (80021f0 <main+0x318>)
 80020c8:	4833      	ldr	r0, [pc, #204]	; (8002198 <main+0x2c0>)
 80020ca:	f7fe ff43 	bl	8000f54 <Lcd_string>

			//2nd row
			Lcd_cursor(&lcd, 1, 0) ;
 80020ce:	2200      	movs	r2, #0
 80020d0:	2101      	movs	r1, #1
 80020d2:	4831      	ldr	r0, [pc, #196]	; (8002198 <main+0x2c0>)
 80020d4:	f7fe ff5e 	bl	8000f94 <Lcd_cursor>
			snprintf(g_panel_power_and_efficiency, sizeof(g_panel_power_and_efficiency),"P: %03dmW E:%03d%%",g_p_pv, g_pv_eff);
 80020d8:	4b3d      	ldr	r3, [pc, #244]	; (80021d0 <main+0x2f8>)
 80020da:	881b      	ldrh	r3, [r3, #0]
 80020dc:	461a      	mov	r2, r3
 80020de:	4b45      	ldr	r3, [pc, #276]	; (80021f4 <main+0x31c>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	9300      	str	r3, [sp, #0]
 80020e4:	4613      	mov	r3, r2
 80020e6:	4a44      	ldr	r2, [pc, #272]	; (80021f8 <main+0x320>)
 80020e8:	2111      	movs	r1, #17
 80020ea:	4844      	ldr	r0, [pc, #272]	; (80021fc <main+0x324>)
 80020ec:	f004 fa24 	bl	8006538 <sniprintf>
			Lcd_string(&lcd, g_panel_power_and_efficiency);
 80020f0:	4942      	ldr	r1, [pc, #264]	; (80021fc <main+0x324>)
 80020f2:	4829      	ldr	r0, [pc, #164]	; (8002198 <main+0x2c0>)
 80020f4:	f7fe ff2e 	bl	8000f54 <Lcd_string>

			g_previous_time_of_lcd = HAL_GetTick() ;
 80020f8:	f000 fec2 	bl	8002e80 <HAL_GetTick>
 80020fc:	4603      	mov	r3, r0
 80020fe:	4a3a      	ldr	r2, [pc, #232]	; (80021e8 <main+0x310>)
 8002100:	6013      	str	r3, [r2, #0]
		}


		//Flash D2 LED
		flash_led_d2() ;
 8002102:	f7ff fadb 	bl	80016bc <flash_led_d2>
 8002106:	e031      	b.n	800216c <main+0x294>
	  }

	  else if(g_SP_measure == 2){
 8002108:	4b26      	ldr	r3, [pc, #152]	; (80021a4 <main+0x2cc>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b02      	cmp	r3, #2
 800210e:	d12d      	bne.n	800216c <main+0x294>
		  //enter this state once
		  g_SP_measure = 0;
 8002110:	4b24      	ldr	r3, [pc, #144]	; (80021a4 <main+0x2cc>)
 8002112:	2200      	movs	r2, #0
 8002114:	701a      	strb	r2, [r3, #0]

		  //clear lcd
//		  Lcd_clear(&lcd);
		  //update LCD mode to SP measurements

		  g_SP_measure_LCD_diplay =  1;
 8002116:	4b3a      	ldr	r3, [pc, #232]	; (8002200 <main+0x328>)
 8002118:	2201      	movs	r2, #1
 800211a:	701a      	strb	r2, [r3, #0]
		  g_EN_measure_LCD_display = 0; //dont diplay EN measurements
 800211c:	4b39      	ldr	r3, [pc, #228]	; (8002204 <main+0x32c>)
 800211e:	2200      	movs	r2, #0
 8002120:	701a      	strb	r2, [r3, #0]

		  //set LED D2
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET) ;
 8002122:	2201      	movs	r2, #1
 8002124:	2110      	movs	r1, #16
 8002126:	481b      	ldr	r0, [pc, #108]	; (8002194 <main+0x2bc>)
 8002128:	f001 fe0c 	bl	8003d44 <HAL_GPIO_WritePin>
		  snprintf(system_state_SP_transmit,sizeof(system_state_SP_transmit), "&_%04d_%03d_%03d_%03d_*\n",g_v_mpp,g_i_mpp,g_p_mpp,g_pv_eff);
 800212c:	4b2b      	ldr	r3, [pc, #172]	; (80021dc <main+0x304>)
 800212e:	881b      	ldrh	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	4b2b      	ldr	r3, [pc, #172]	; (80021e0 <main+0x308>)
 8002134:	881b      	ldrh	r3, [r3, #0]
 8002136:	461a      	mov	r2, r3
 8002138:	4b27      	ldr	r3, [pc, #156]	; (80021d8 <main+0x300>)
 800213a:	881b      	ldrh	r3, [r3, #0]
 800213c:	4619      	mov	r1, r3
 800213e:	4b2d      	ldr	r3, [pc, #180]	; (80021f4 <main+0x31c>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	9302      	str	r3, [sp, #8]
 8002144:	9101      	str	r1, [sp, #4]
 8002146:	9200      	str	r2, [sp, #0]
 8002148:	4603      	mov	r3, r0
 800214a:	4a2f      	ldr	r2, [pc, #188]	; (8002208 <main+0x330>)
 800214c:	2116      	movs	r1, #22
 800214e:	482f      	ldr	r0, [pc, #188]	; (800220c <main+0x334>)
 8002150:	f004 f9f2 	bl	8006538 <sniprintf>
		  //transmit system SP response
		  if(g_transmit_SP_system_state == 1){
 8002154:	4b17      	ldr	r3, [pc, #92]	; (80021b4 <main+0x2dc>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d107      	bne.n	800216c <main+0x294>

			  g_transmit_SP_system_state = 0 ;
 800215c:	4b15      	ldr	r3, [pc, #84]	; (80021b4 <main+0x2dc>)
 800215e:	2200      	movs	r2, #0
 8002160:	701a      	strb	r2, [r3, #0]
			  //transmit over UART
			  HAL_UART_Transmit_IT(&huart2,(uint8_t*)system_state_SP_transmit, 21) ;
 8002162:	2215      	movs	r2, #21
 8002164:	4929      	ldr	r1, [pc, #164]	; (800220c <main+0x334>)
 8002166:	4807      	ldr	r0, [pc, #28]	; (8002184 <main+0x2ac>)
 8002168:	f003 fa45 	bl	80055f6 <HAL_UART_Transmit_IT>

		  }
	  }

	  //update LCD - code runs seqeuntionally and lcd updates based on variable states above
	  change_lcd_display_mode();
 800216c:	f7ff fd32 	bl	8001bd4 <change_lcd_display_mode>
	  system_state_update() ;
 8002170:	e6fa      	b.n	8001f68 <main+0x90>
 8002172:	bf00      	nop
 8002174:	f3af 8000 	nop.w
 8002178:	00000000 	.word	0x00000000
 800217c:	412e8480 	.word	0x412e8480
 8002180:	20000000 	.word	0x20000000
 8002184:	2000019c 	.word	0x2000019c
 8002188:	20000010 	.word	0x20000010
 800218c:	2000010c 	.word	0x2000010c
 8002190:	200002c8 	.word	0x200002c8
 8002194:	40020400 	.word	0x40020400
 8002198:	20000300 	.word	0x20000300
 800219c:	20000028 	.word	0x20000028
 80021a0:	20000018 	.word	0x20000018
 80021a4:	200002ce 	.word	0x200002ce
 80021a8:	20000334 	.word	0x20000334
 80021ac:	200002cd 	.word	0x200002cd
 80021b0:	20000332 	.word	0x20000332
 80021b4:	20000012 	.word	0x20000012
 80021b8:	2000023e 	.word	0x2000023e
 80021bc:	20000244 	.word	0x20000244
 80021c0:	20000242 	.word	0x20000242
 80021c4:	20000240 	.word	0x20000240
 80021c8:	20000230 	.word	0x20000230
 80021cc:	408f4000 	.word	0x408f4000
 80021d0:	20000232 	.word	0x20000232
 80021d4:	20000234 	.word	0x20000234
 80021d8:	2000023a 	.word	0x2000023a
 80021dc:	20000236 	.word	0x20000236
 80021e0:	20000238 	.word	0x20000238
 80021e4:	20000014 	.word	0x20000014
 80021e8:	200002a4 	.word	0x200002a4
 80021ec:	08007d2c 	.word	0x08007d2c
 80021f0:	2000027c 	.word	0x2000027c
 80021f4:	2000023c 	.word	0x2000023c
 80021f8:	08007d40 	.word	0x08007d40
 80021fc:	20000290 	.word	0x20000290
 8002200:	200002cf 	.word	0x200002cf
 8002204:	200002c4 	.word	0x200002c4
 8002208:	08007d54 	.word	0x08007d54
 800220c:	200002e8 	.word	0x200002e8

08002210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b094      	sub	sp, #80	; 0x50
 8002214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002216:	f107 0320 	add.w	r3, r7, #32
 800221a:	2230      	movs	r2, #48	; 0x30
 800221c:	2100      	movs	r1, #0
 800221e:	4618      	mov	r0, r3
 8002220:	f004 f982 	bl	8006528 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002224:	f107 030c 	add.w	r3, r7, #12
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	60da      	str	r2, [r3, #12]
 8002232:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002234:	2300      	movs	r3, #0
 8002236:	60bb      	str	r3, [r7, #8]
 8002238:	4b28      	ldr	r3, [pc, #160]	; (80022dc <SystemClock_Config+0xcc>)
 800223a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223c:	4a27      	ldr	r2, [pc, #156]	; (80022dc <SystemClock_Config+0xcc>)
 800223e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002242:	6413      	str	r3, [r2, #64]	; 0x40
 8002244:	4b25      	ldr	r3, [pc, #148]	; (80022dc <SystemClock_Config+0xcc>)
 8002246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224c:	60bb      	str	r3, [r7, #8]
 800224e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002250:	2300      	movs	r3, #0
 8002252:	607b      	str	r3, [r7, #4]
 8002254:	4b22      	ldr	r3, [pc, #136]	; (80022e0 <SystemClock_Config+0xd0>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a21      	ldr	r2, [pc, #132]	; (80022e0 <SystemClock_Config+0xd0>)
 800225a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800225e:	6013      	str	r3, [r2, #0]
 8002260:	4b1f      	ldr	r3, [pc, #124]	; (80022e0 <SystemClock_Config+0xd0>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002268:	607b      	str	r3, [r7, #4]
 800226a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800226c:	2302      	movs	r3, #2
 800226e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002270:	2301      	movs	r3, #1
 8002272:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002274:	2310      	movs	r3, #16
 8002276:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002278:	2302      	movs	r3, #2
 800227a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800227c:	2300      	movs	r3, #0
 800227e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002280:	2310      	movs	r3, #16
 8002282:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002284:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002288:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800228a:	2304      	movs	r3, #4
 800228c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800228e:	2304      	movs	r3, #4
 8002290:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002292:	f107 0320 	add.w	r3, r7, #32
 8002296:	4618      	mov	r0, r3
 8002298:	f001 fd92 	bl	8003dc0 <HAL_RCC_OscConfig>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80022a2:	f000 f9fb 	bl	800269c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022a6:	230f      	movs	r3, #15
 80022a8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022aa:	2302      	movs	r3, #2
 80022ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022b8:	2300      	movs	r3, #0
 80022ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022bc:	f107 030c 	add.w	r3, r7, #12
 80022c0:	2102      	movs	r1, #2
 80022c2:	4618      	mov	r0, r3
 80022c4:	f001 fff4 	bl	80042b0 <HAL_RCC_ClockConfig>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80022ce:	f000 f9e5 	bl	800269c <Error_Handler>
  }
}
 80022d2:	bf00      	nop
 80022d4:	3750      	adds	r7, #80	; 0x50
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	40023800 	.word	0x40023800
 80022e0:	40007000 	.word	0x40007000

080022e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80022e8:	4b18      	ldr	r3, [pc, #96]	; (800234c <MX_ADC1_Init+0x68>)
 80022ea:	4a19      	ldr	r2, [pc, #100]	; (8002350 <MX_ADC1_Init+0x6c>)
 80022ec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80022ee:	4b17      	ldr	r3, [pc, #92]	; (800234c <MX_ADC1_Init+0x68>)
 80022f0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80022f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80022f6:	4b15      	ldr	r3, [pc, #84]	; (800234c <MX_ADC1_Init+0x68>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80022fc:	4b13      	ldr	r3, [pc, #76]	; (800234c <MX_ADC1_Init+0x68>)
 80022fe:	2201      	movs	r2, #1
 8002300:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002302:	4b12      	ldr	r3, [pc, #72]	; (800234c <MX_ADC1_Init+0x68>)
 8002304:	2200      	movs	r2, #0
 8002306:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002308:	4b10      	ldr	r3, [pc, #64]	; (800234c <MX_ADC1_Init+0x68>)
 800230a:	2200      	movs	r2, #0
 800230c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002310:	4b0e      	ldr	r3, [pc, #56]	; (800234c <MX_ADC1_Init+0x68>)
 8002312:	2200      	movs	r2, #0
 8002314:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002316:	4b0d      	ldr	r3, [pc, #52]	; (800234c <MX_ADC1_Init+0x68>)
 8002318:	4a0e      	ldr	r2, [pc, #56]	; (8002354 <MX_ADC1_Init+0x70>)
 800231a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800231c:	4b0b      	ldr	r3, [pc, #44]	; (800234c <MX_ADC1_Init+0x68>)
 800231e:	2200      	movs	r2, #0
 8002320:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002322:	4b0a      	ldr	r3, [pc, #40]	; (800234c <MX_ADC1_Init+0x68>)
 8002324:	2201      	movs	r2, #1
 8002326:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002328:	4b08      	ldr	r3, [pc, #32]	; (800234c <MX_ADC1_Init+0x68>)
 800232a:	2200      	movs	r2, #0
 800232c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002330:	4b06      	ldr	r3, [pc, #24]	; (800234c <MX_ADC1_Init+0x68>)
 8002332:	2201      	movs	r2, #1
 8002334:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002336:	4805      	ldr	r0, [pc, #20]	; (800234c <MX_ADC1_Init+0x68>)
 8002338:	f000 fdd2 	bl	8002ee0 <HAL_ADC_Init>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <MX_ADC1_Init+0x62>
  {
    Error_Handler();
 8002342:	f000 f9ab 	bl	800269c <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	200000c4 	.word	0x200000c4
 8002350:	40012000 	.word	0x40012000
 8002354:	0f000001 	.word	0x0f000001

08002358 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b08a      	sub	sp, #40	; 0x28
 800235c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800235e:	f107 0318 	add.w	r3, r7, #24
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	605a      	str	r2, [r3, #4]
 8002368:	609a      	str	r2, [r3, #8]
 800236a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800236c:	f107 0310 	add.w	r3, r7, #16
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002376:	463b      	mov	r3, r7
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	605a      	str	r2, [r3, #4]
 800237e:	609a      	str	r2, [r3, #8]
 8002380:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002382:	4b2c      	ldr	r3, [pc, #176]	; (8002434 <MX_TIM2_Init+0xdc>)
 8002384:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002388:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 800238a:	4b2a      	ldr	r3, [pc, #168]	; (8002434 <MX_TIM2_Init+0xdc>)
 800238c:	2253      	movs	r2, #83	; 0x53
 800238e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002390:	4b28      	ldr	r3, [pc, #160]	; (8002434 <MX_TIM2_Init+0xdc>)
 8002392:	2200      	movs	r2, #0
 8002394:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002396:	4b27      	ldr	r3, [pc, #156]	; (8002434 <MX_TIM2_Init+0xdc>)
 8002398:	f04f 32ff 	mov.w	r2, #4294967295
 800239c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800239e:	4b25      	ldr	r3, [pc, #148]	; (8002434 <MX_TIM2_Init+0xdc>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023a4:	4b23      	ldr	r3, [pc, #140]	; (8002434 <MX_TIM2_Init+0xdc>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80023aa:	4822      	ldr	r0, [pc, #136]	; (8002434 <MX_TIM2_Init+0xdc>)
 80023ac:	f002 f9a0 	bl	80046f0 <HAL_TIM_Base_Init>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80023b6:	f000 f971 	bl	800269c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023be:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80023c0:	f107 0318 	add.w	r3, r7, #24
 80023c4:	4619      	mov	r1, r3
 80023c6:	481b      	ldr	r0, [pc, #108]	; (8002434 <MX_TIM2_Init+0xdc>)
 80023c8:	f002 fcf8 	bl	8004dbc <HAL_TIM_ConfigClockSource>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80023d2:	f000 f963 	bl	800269c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80023d6:	4817      	ldr	r0, [pc, #92]	; (8002434 <MX_TIM2_Init+0xdc>)
 80023d8:	f002 f9d9 	bl	800478e <HAL_TIM_IC_Init>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80023e2:	f000 f95b 	bl	800269c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023e6:	2300      	movs	r3, #0
 80023e8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023ea:	2300      	movs	r3, #0
 80023ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023ee:	f107 0310 	add.w	r3, r7, #16
 80023f2:	4619      	mov	r1, r3
 80023f4:	480f      	ldr	r0, [pc, #60]	; (8002434 <MX_TIM2_Init+0xdc>)
 80023f6:	f003 f82f 	bl	8005458 <HAL_TIMEx_MasterConfigSynchronization>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8002400:	f000 f94c 	bl	800269c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002404:	2300      	movs	r3, #0
 8002406:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002408:	2301      	movs	r3, #1
 800240a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800240c:	2300      	movs	r3, #0
 800240e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002410:	2300      	movs	r3, #0
 8002412:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002414:	463b      	mov	r3, r7
 8002416:	2200      	movs	r2, #0
 8002418:	4619      	mov	r1, r3
 800241a:	4806      	ldr	r0, [pc, #24]	; (8002434 <MX_TIM2_Init+0xdc>)
 800241c:	f002 fc32 	bl	8004c84 <HAL_TIM_IC_ConfigChannel>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8002426:	f000 f939 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800242a:	bf00      	nop
 800242c:	3728      	adds	r7, #40	; 0x28
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	2000010c 	.word	0x2000010c

08002438 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800243e:	f107 0308 	add.w	r3, r7, #8
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	605a      	str	r2, [r3, #4]
 8002448:	609a      	str	r2, [r3, #8]
 800244a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800244c:	463b      	mov	r3, r7
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002454:	4b1d      	ldr	r3, [pc, #116]	; (80024cc <MX_TIM3_Init+0x94>)
 8002456:	4a1e      	ldr	r2, [pc, #120]	; (80024d0 <MX_TIM3_Init+0x98>)
 8002458:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800245a:	4b1c      	ldr	r3, [pc, #112]	; (80024cc <MX_TIM3_Init+0x94>)
 800245c:	2200      	movs	r2, #0
 800245e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002460:	4b1a      	ldr	r3, [pc, #104]	; (80024cc <MX_TIM3_Init+0x94>)
 8002462:	2200      	movs	r2, #0
 8002464:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002466:	4b19      	ldr	r3, [pc, #100]	; (80024cc <MX_TIM3_Init+0x94>)
 8002468:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800246c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800246e:	4b17      	ldr	r3, [pc, #92]	; (80024cc <MX_TIM3_Init+0x94>)
 8002470:	2200      	movs	r2, #0
 8002472:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002474:	4b15      	ldr	r3, [pc, #84]	; (80024cc <MX_TIM3_Init+0x94>)
 8002476:	2200      	movs	r2, #0
 8002478:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800247a:	4814      	ldr	r0, [pc, #80]	; (80024cc <MX_TIM3_Init+0x94>)
 800247c:	f002 f938 	bl	80046f0 <HAL_TIM_Base_Init>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002486:	f000 f909 	bl	800269c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800248a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800248e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002490:	f107 0308 	add.w	r3, r7, #8
 8002494:	4619      	mov	r1, r3
 8002496:	480d      	ldr	r0, [pc, #52]	; (80024cc <MX_TIM3_Init+0x94>)
 8002498:	f002 fc90 	bl	8004dbc <HAL_TIM_ConfigClockSource>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80024a2:	f000 f8fb 	bl	800269c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024a6:	2300      	movs	r3, #0
 80024a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024aa:	2300      	movs	r3, #0
 80024ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80024ae:	463b      	mov	r3, r7
 80024b0:	4619      	mov	r1, r3
 80024b2:	4806      	ldr	r0, [pc, #24]	; (80024cc <MX_TIM3_Init+0x94>)
 80024b4:	f002 ffd0 	bl	8005458 <HAL_TIMEx_MasterConfigSynchronization>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80024be:	f000 f8ed 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80024c2:	bf00      	nop
 80024c4:	3718      	adds	r7, #24
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	20000154 	.word	0x20000154
 80024d0:	40000400 	.word	0x40000400

080024d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024d8:	4b12      	ldr	r3, [pc, #72]	; (8002524 <MX_USART2_UART_Init+0x50>)
 80024da:	4a13      	ldr	r2, [pc, #76]	; (8002528 <MX_USART2_UART_Init+0x54>)
 80024dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80024de:	4b11      	ldr	r3, [pc, #68]	; (8002524 <MX_USART2_UART_Init+0x50>)
 80024e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80024e6:	4b0f      	ldr	r3, [pc, #60]	; (8002524 <MX_USART2_UART_Init+0x50>)
 80024e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80024ec:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024ee:	4b0d      	ldr	r3, [pc, #52]	; (8002524 <MX_USART2_UART_Init+0x50>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_ODD;
 80024f4:	4b0b      	ldr	r3, [pc, #44]	; (8002524 <MX_USART2_UART_Init+0x50>)
 80024f6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80024fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024fc:	4b09      	ldr	r3, [pc, #36]	; (8002524 <MX_USART2_UART_Init+0x50>)
 80024fe:	220c      	movs	r2, #12
 8002500:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002502:	4b08      	ldr	r3, [pc, #32]	; (8002524 <MX_USART2_UART_Init+0x50>)
 8002504:	2200      	movs	r2, #0
 8002506:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002508:	4b06      	ldr	r3, [pc, #24]	; (8002524 <MX_USART2_UART_Init+0x50>)
 800250a:	2200      	movs	r2, #0
 800250c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800250e:	4805      	ldr	r0, [pc, #20]	; (8002524 <MX_USART2_UART_Init+0x50>)
 8002510:	f003 f824 	bl	800555c <HAL_UART_Init>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 800251a:	f000 f8bf 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800251e:	bf00      	nop
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	2000019c 	.word	0x2000019c
 8002528:	40004400 	.word	0x40004400

0800252c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b08a      	sub	sp, #40	; 0x28
 8002530:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002532:	f107 0314 	add.w	r3, r7, #20
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	605a      	str	r2, [r3, #4]
 800253c:	609a      	str	r2, [r3, #8]
 800253e:	60da      	str	r2, [r3, #12]
 8002540:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	613b      	str	r3, [r7, #16]
 8002546:	4b51      	ldr	r3, [pc, #324]	; (800268c <MX_GPIO_Init+0x160>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	4a50      	ldr	r2, [pc, #320]	; (800268c <MX_GPIO_Init+0x160>)
 800254c:	f043 0304 	orr.w	r3, r3, #4
 8002550:	6313      	str	r3, [r2, #48]	; 0x30
 8002552:	4b4e      	ldr	r3, [pc, #312]	; (800268c <MX_GPIO_Init+0x160>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	f003 0304 	and.w	r3, r3, #4
 800255a:	613b      	str	r3, [r7, #16]
 800255c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	4b4a      	ldr	r3, [pc, #296]	; (800268c <MX_GPIO_Init+0x160>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	4a49      	ldr	r2, [pc, #292]	; (800268c <MX_GPIO_Init+0x160>)
 8002568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800256c:	6313      	str	r3, [r2, #48]	; 0x30
 800256e:	4b47      	ldr	r3, [pc, #284]	; (800268c <MX_GPIO_Init+0x160>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	60bb      	str	r3, [r7, #8]
 800257e:	4b43      	ldr	r3, [pc, #268]	; (800268c <MX_GPIO_Init+0x160>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	4a42      	ldr	r2, [pc, #264]	; (800268c <MX_GPIO_Init+0x160>)
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	6313      	str	r3, [r2, #48]	; 0x30
 800258a:	4b40      	ldr	r3, [pc, #256]	; (800268c <MX_GPIO_Init+0x160>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	60bb      	str	r3, [r7, #8]
 8002594:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	607b      	str	r3, [r7, #4]
 800259a:	4b3c      	ldr	r3, [pc, #240]	; (800268c <MX_GPIO_Init+0x160>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	4a3b      	ldr	r2, [pc, #236]	; (800268c <MX_GPIO_Init+0x160>)
 80025a0:	f043 0302 	orr.w	r3, r3, #2
 80025a4:	6313      	str	r3, [r2, #48]	; 0x30
 80025a6:	4b39      	ldr	r3, [pc, #228]	; (800268c <MX_GPIO_Init+0x160>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	607b      	str	r3, [r7, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED_D5_Pin|DB5_Line_Pin|DB6_Line_Pin, GPIO_PIN_RESET);
 80025b2:	2200      	movs	r2, #0
 80025b4:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 80025b8:	4835      	ldr	r0, [pc, #212]	; (8002690 <MX_GPIO_Init+0x164>)
 80025ba:	f001 fbc3 	bl	8003d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, E_Line_Pin|LED_D4_Pin|DB4_Line_Pin|RS_Line_Pin
 80025be:	2200      	movs	r2, #0
 80025c0:	f24d 4134 	movw	r1, #54324	; 0xd434
 80025c4:	4833      	ldr	r0, [pc, #204]	; (8002694 <MX_GPIO_Init+0x168>)
 80025c6:	f001 fbbd 	bl	8003d44 <HAL_GPIO_WritePin>
                          |R_W_Line_Pin|LED_D2_Pin|LED_D3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DB7_Line_GPIO_Port, DB7_Line_Pin, GPIO_PIN_RESET);
 80025ca:	2200      	movs	r2, #0
 80025cc:	2140      	movs	r1, #64	; 0x40
 80025ce:	4832      	ldr	r0, [pc, #200]	; (8002698 <MX_GPIO_Init+0x16c>)
 80025d0:	f001 fbb8 	bl	8003d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD2_Pin LED_D5_Pin DB5_Line_Pin DB6_Line_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED_D5_Pin|DB5_Line_Pin|DB6_Line_Pin;
 80025d4:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 80025d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025da:	2301      	movs	r3, #1
 80025dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025de:	2300      	movs	r3, #0
 80025e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e2:	2300      	movs	r3, #0
 80025e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e6:	f107 0314 	add.w	r3, r7, #20
 80025ea:	4619      	mov	r1, r3
 80025ec:	4828      	ldr	r0, [pc, #160]	; (8002690 <MX_GPIO_Init+0x164>)
 80025ee:	f001 fa0d 	bl	8003a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025f2:	23c0      	movs	r3, #192	; 0xc0
 80025f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80025f6:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80025fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025fc:	2301      	movs	r3, #1
 80025fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002600:	f107 0314 	add.w	r3, r7, #20
 8002604:	4619      	mov	r1, r3
 8002606:	4822      	ldr	r0, [pc, #136]	; (8002690 <MX_GPIO_Init+0x164>)
 8002608:	f001 fa00 	bl	8003a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : E_Line_Pin LED_D4_Pin DB4_Line_Pin RS_Line_Pin
                           R_W_Line_Pin LED_D2_Pin LED_D3_Pin */
  GPIO_InitStruct.Pin = E_Line_Pin|LED_D4_Pin|DB4_Line_Pin|RS_Line_Pin
 800260c:	f24d 4334 	movw	r3, #54324	; 0xd434
 8002610:	617b      	str	r3, [r7, #20]
                          |R_W_Line_Pin|LED_D2_Pin|LED_D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002612:	2301      	movs	r3, #1
 8002614:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002616:	2300      	movs	r3, #0
 8002618:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800261a:	2300      	movs	r3, #0
 800261c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800261e:	f107 0314 	add.w	r3, r7, #20
 8002622:	4619      	mov	r1, r3
 8002624:	481b      	ldr	r0, [pc, #108]	; (8002694 <MX_GPIO_Init+0x168>)
 8002626:	f001 f9f1 	bl	8003a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_8|GPIO_PIN_9;
 800262a:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 800262e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002630:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002634:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002636:	2301      	movs	r3, #1
 8002638:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800263a:	f107 0314 	add.w	r3, r7, #20
 800263e:	4619      	mov	r1, r3
 8002640:	4814      	ldr	r0, [pc, #80]	; (8002694 <MX_GPIO_Init+0x168>)
 8002642:	f001 f9e3 	bl	8003a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : DB7_Line_Pin */
  GPIO_InitStruct.Pin = DB7_Line_Pin;
 8002646:	2340      	movs	r3, #64	; 0x40
 8002648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800264a:	2301      	movs	r3, #1
 800264c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264e:	2300      	movs	r3, #0
 8002650:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002652:	2300      	movs	r3, #0
 8002654:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DB7_Line_GPIO_Port, &GPIO_InitStruct);
 8002656:	f107 0314 	add.w	r3, r7, #20
 800265a:	4619      	mov	r1, r3
 800265c:	480e      	ldr	r0, [pc, #56]	; (8002698 <MX_GPIO_Init+0x16c>)
 800265e:	f001 f9d5 	bl	8003a0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002662:	2200      	movs	r2, #0
 8002664:	2100      	movs	r1, #0
 8002666:	2017      	movs	r0, #23
 8002668:	f001 f907 	bl	800387a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800266c:	2017      	movs	r0, #23
 800266e:	f001 f920 	bl	80038b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002672:	2200      	movs	r2, #0
 8002674:	2100      	movs	r1, #0
 8002676:	2028      	movs	r0, #40	; 0x28
 8002678:	f001 f8ff 	bl	800387a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800267c:	2028      	movs	r0, #40	; 0x28
 800267e:	f001 f918 	bl	80038b2 <HAL_NVIC_EnableIRQ>

}
 8002682:	bf00      	nop
 8002684:	3728      	adds	r7, #40	; 0x28
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40023800 	.word	0x40023800
 8002690:	40020000 	.word	0x40020000
 8002694:	40020400 	.word	0x40020400
 8002698:	40020800 	.word	0x40020800

0800269c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026a0:	b672      	cpsid	i
}
 80026a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026a4:	e7fe      	b.n	80026a4 <Error_Handler+0x8>
	...

080026a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ae:	2300      	movs	r3, #0
 80026b0:	607b      	str	r3, [r7, #4]
 80026b2:	4b10      	ldr	r3, [pc, #64]	; (80026f4 <HAL_MspInit+0x4c>)
 80026b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b6:	4a0f      	ldr	r2, [pc, #60]	; (80026f4 <HAL_MspInit+0x4c>)
 80026b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026bc:	6453      	str	r3, [r2, #68]	; 0x44
 80026be:	4b0d      	ldr	r3, [pc, #52]	; (80026f4 <HAL_MspInit+0x4c>)
 80026c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026c6:	607b      	str	r3, [r7, #4]
 80026c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	603b      	str	r3, [r7, #0]
 80026ce:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <HAL_MspInit+0x4c>)
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	4a08      	ldr	r2, [pc, #32]	; (80026f4 <HAL_MspInit+0x4c>)
 80026d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026d8:	6413      	str	r3, [r2, #64]	; 0x40
 80026da:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <HAL_MspInit+0x4c>)
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e2:	603b      	str	r3, [r7, #0]
 80026e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80026e6:	2007      	movs	r0, #7
 80026e8:	f001 f8bc 	bl	8003864 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026ec:	bf00      	nop
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40023800 	.word	0x40023800

080026f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b08c      	sub	sp, #48	; 0x30
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002700:	f107 031c 	add.w	r3, r7, #28
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	605a      	str	r2, [r3, #4]
 800270a:	609a      	str	r2, [r3, #8]
 800270c:	60da      	str	r2, [r3, #12]
 800270e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a31      	ldr	r2, [pc, #196]	; (80027dc <HAL_ADC_MspInit+0xe4>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d15b      	bne.n	80027d2 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800271a:	2300      	movs	r3, #0
 800271c:	61bb      	str	r3, [r7, #24]
 800271e:	4b30      	ldr	r3, [pc, #192]	; (80027e0 <HAL_ADC_MspInit+0xe8>)
 8002720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002722:	4a2f      	ldr	r2, [pc, #188]	; (80027e0 <HAL_ADC_MspInit+0xe8>)
 8002724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002728:	6453      	str	r3, [r2, #68]	; 0x44
 800272a:	4b2d      	ldr	r3, [pc, #180]	; (80027e0 <HAL_ADC_MspInit+0xe8>)
 800272c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002732:	61bb      	str	r3, [r7, #24]
 8002734:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	617b      	str	r3, [r7, #20]
 800273a:	4b29      	ldr	r3, [pc, #164]	; (80027e0 <HAL_ADC_MspInit+0xe8>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273e:	4a28      	ldr	r2, [pc, #160]	; (80027e0 <HAL_ADC_MspInit+0xe8>)
 8002740:	f043 0301 	orr.w	r3, r3, #1
 8002744:	6313      	str	r3, [r2, #48]	; 0x30
 8002746:	4b26      	ldr	r3, [pc, #152]	; (80027e0 <HAL_ADC_MspInit+0xe8>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	617b      	str	r3, [r7, #20]
 8002750:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002752:	2300      	movs	r3, #0
 8002754:	613b      	str	r3, [r7, #16]
 8002756:	4b22      	ldr	r3, [pc, #136]	; (80027e0 <HAL_ADC_MspInit+0xe8>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275a:	4a21      	ldr	r2, [pc, #132]	; (80027e0 <HAL_ADC_MspInit+0xe8>)
 800275c:	f043 0304 	orr.w	r3, r3, #4
 8002760:	6313      	str	r3, [r2, #48]	; 0x30
 8002762:	4b1f      	ldr	r3, [pc, #124]	; (80027e0 <HAL_ADC_MspInit+0xe8>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	f003 0304 	and.w	r3, r3, #4
 800276a:	613b      	str	r3, [r7, #16]
 800276c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800276e:	2300      	movs	r3, #0
 8002770:	60fb      	str	r3, [r7, #12]
 8002772:	4b1b      	ldr	r3, [pc, #108]	; (80027e0 <HAL_ADC_MspInit+0xe8>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	4a1a      	ldr	r2, [pc, #104]	; (80027e0 <HAL_ADC_MspInit+0xe8>)
 8002778:	f043 0302 	orr.w	r3, r3, #2
 800277c:	6313      	str	r3, [r2, #48]	; 0x30
 800277e:	4b18      	ldr	r3, [pc, #96]	; (80027e0 <HAL_ADC_MspInit+0xe8>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800278a:	2301      	movs	r3, #1
 800278c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800278e:	2303      	movs	r3, #3
 8002790:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002792:	2300      	movs	r3, #0
 8002794:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002796:	f107 031c 	add.w	r3, r7, #28
 800279a:	4619      	mov	r1, r3
 800279c:	4811      	ldr	r0, [pc, #68]	; (80027e4 <HAL_ADC_MspInit+0xec>)
 800279e:	f001 f935 	bl	8003a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80027a2:	2330      	movs	r3, #48	; 0x30
 80027a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027a6:	2303      	movs	r3, #3
 80027a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027aa:	2300      	movs	r3, #0
 80027ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027ae:	f107 031c 	add.w	r3, r7, #28
 80027b2:	4619      	mov	r1, r3
 80027b4:	480c      	ldr	r0, [pc, #48]	; (80027e8 <HAL_ADC_MspInit+0xf0>)
 80027b6:	f001 f929 	bl	8003a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80027ba:	2302      	movs	r3, #2
 80027bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027be:	2303      	movs	r3, #3
 80027c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c2:	2300      	movs	r3, #0
 80027c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027c6:	f107 031c 	add.w	r3, r7, #28
 80027ca:	4619      	mov	r1, r3
 80027cc:	4807      	ldr	r0, [pc, #28]	; (80027ec <HAL_ADC_MspInit+0xf4>)
 80027ce:	f001 f91d 	bl	8003a0c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80027d2:	bf00      	nop
 80027d4:	3730      	adds	r7, #48	; 0x30
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40012000 	.word	0x40012000
 80027e0:	40023800 	.word	0x40023800
 80027e4:	40020000 	.word	0x40020000
 80027e8:	40020800 	.word	0x40020800
 80027ec:	40020400 	.word	0x40020400

080027f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b08a      	sub	sp, #40	; 0x28
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f8:	f107 0314 	add.w	r3, r7, #20
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	605a      	str	r2, [r3, #4]
 8002802:	609a      	str	r2, [r3, #8]
 8002804:	60da      	str	r2, [r3, #12]
 8002806:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002810:	d135      	bne.n	800287e <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	613b      	str	r3, [r7, #16]
 8002816:	4b25      	ldr	r3, [pc, #148]	; (80028ac <HAL_TIM_Base_MspInit+0xbc>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	4a24      	ldr	r2, [pc, #144]	; (80028ac <HAL_TIM_Base_MspInit+0xbc>)
 800281c:	f043 0301 	orr.w	r3, r3, #1
 8002820:	6413      	str	r3, [r2, #64]	; 0x40
 8002822:	4b22      	ldr	r3, [pc, #136]	; (80028ac <HAL_TIM_Base_MspInit+0xbc>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	613b      	str	r3, [r7, #16]
 800282c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800282e:	2300      	movs	r3, #0
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	4b1e      	ldr	r3, [pc, #120]	; (80028ac <HAL_TIM_Base_MspInit+0xbc>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	4a1d      	ldr	r2, [pc, #116]	; (80028ac <HAL_TIM_Base_MspInit+0xbc>)
 8002838:	f043 0301 	orr.w	r3, r3, #1
 800283c:	6313      	str	r3, [r2, #48]	; 0x30
 800283e:	4b1b      	ldr	r3, [pc, #108]	; (80028ac <HAL_TIM_Base_MspInit+0xbc>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800284a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800284e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002850:	2302      	movs	r3, #2
 8002852:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002854:	2300      	movs	r3, #0
 8002856:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002858:	2300      	movs	r3, #0
 800285a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800285c:	2301      	movs	r3, #1
 800285e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002860:	f107 0314 	add.w	r3, r7, #20
 8002864:	4619      	mov	r1, r3
 8002866:	4812      	ldr	r0, [pc, #72]	; (80028b0 <HAL_TIM_Base_MspInit+0xc0>)
 8002868:	f001 f8d0 	bl	8003a0c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800286c:	2200      	movs	r2, #0
 800286e:	2100      	movs	r1, #0
 8002870:	201c      	movs	r0, #28
 8002872:	f001 f802 	bl	800387a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002876:	201c      	movs	r0, #28
 8002878:	f001 f81b 	bl	80038b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800287c:	e012      	b.n	80028a4 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM3)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a0c      	ldr	r2, [pc, #48]	; (80028b4 <HAL_TIM_Base_MspInit+0xc4>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d10d      	bne.n	80028a4 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002888:	2300      	movs	r3, #0
 800288a:	60bb      	str	r3, [r7, #8]
 800288c:	4b07      	ldr	r3, [pc, #28]	; (80028ac <HAL_TIM_Base_MspInit+0xbc>)
 800288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002890:	4a06      	ldr	r2, [pc, #24]	; (80028ac <HAL_TIM_Base_MspInit+0xbc>)
 8002892:	f043 0302 	orr.w	r3, r3, #2
 8002896:	6413      	str	r3, [r2, #64]	; 0x40
 8002898:	4b04      	ldr	r3, [pc, #16]	; (80028ac <HAL_TIM_Base_MspInit+0xbc>)
 800289a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	60bb      	str	r3, [r7, #8]
 80028a2:	68bb      	ldr	r3, [r7, #8]
}
 80028a4:	bf00      	nop
 80028a6:	3728      	adds	r7, #40	; 0x28
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40023800 	.word	0x40023800
 80028b0:	40020000 	.word	0x40020000
 80028b4:	40000400 	.word	0x40000400

080028b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b08a      	sub	sp, #40	; 0x28
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c0:	f107 0314 	add.w	r3, r7, #20
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	605a      	str	r2, [r3, #4]
 80028ca:	609a      	str	r2, [r3, #8]
 80028cc:	60da      	str	r2, [r3, #12]
 80028ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a1d      	ldr	r2, [pc, #116]	; (800294c <HAL_UART_MspInit+0x94>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d133      	bne.n	8002942 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	613b      	str	r3, [r7, #16]
 80028de:	4b1c      	ldr	r3, [pc, #112]	; (8002950 <HAL_UART_MspInit+0x98>)
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	4a1b      	ldr	r2, [pc, #108]	; (8002950 <HAL_UART_MspInit+0x98>)
 80028e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028e8:	6413      	str	r3, [r2, #64]	; 0x40
 80028ea:	4b19      	ldr	r3, [pc, #100]	; (8002950 <HAL_UART_MspInit+0x98>)
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f2:	613b      	str	r3, [r7, #16]
 80028f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	60fb      	str	r3, [r7, #12]
 80028fa:	4b15      	ldr	r3, [pc, #84]	; (8002950 <HAL_UART_MspInit+0x98>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	4a14      	ldr	r2, [pc, #80]	; (8002950 <HAL_UART_MspInit+0x98>)
 8002900:	f043 0301 	orr.w	r3, r3, #1
 8002904:	6313      	str	r3, [r2, #48]	; 0x30
 8002906:	4b12      	ldr	r3, [pc, #72]	; (8002950 <HAL_UART_MspInit+0x98>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002912:	230c      	movs	r3, #12
 8002914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002916:	2302      	movs	r3, #2
 8002918:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291a:	2300      	movs	r3, #0
 800291c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800291e:	2303      	movs	r3, #3
 8002920:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002922:	2307      	movs	r3, #7
 8002924:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002926:	f107 0314 	add.w	r3, r7, #20
 800292a:	4619      	mov	r1, r3
 800292c:	4809      	ldr	r0, [pc, #36]	; (8002954 <HAL_UART_MspInit+0x9c>)
 800292e:	f001 f86d 	bl	8003a0c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002932:	2200      	movs	r2, #0
 8002934:	2100      	movs	r1, #0
 8002936:	2026      	movs	r0, #38	; 0x26
 8002938:	f000 ff9f 	bl	800387a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800293c:	2026      	movs	r0, #38	; 0x26
 800293e:	f000 ffb8 	bl	80038b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002942:	bf00      	nop
 8002944:	3728      	adds	r7, #40	; 0x28
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	40004400 	.word	0x40004400
 8002950:	40023800 	.word	0x40023800
 8002954:	40020000 	.word	0x40020000

08002958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800295c:	e7fe      	b.n	800295c <NMI_Handler+0x4>

0800295e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800295e:	b480      	push	{r7}
 8002960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002962:	e7fe      	b.n	8002962 <HardFault_Handler+0x4>

08002964 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002968:	e7fe      	b.n	8002968 <MemManage_Handler+0x4>

0800296a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800296a:	b480      	push	{r7}
 800296c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800296e:	e7fe      	b.n	800296e <BusFault_Handler+0x4>

08002970 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002974:	e7fe      	b.n	8002974 <UsageFault_Handler+0x4>

08002976 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002976:	b480      	push	{r7}
 8002978:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800297a:	bf00      	nop
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002988:	bf00      	nop
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr

08002992 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002992:	b480      	push	{r7}
 8002994:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002996:	bf00      	nop
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029a4:	f000 fa58 	bl	8002e58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029a8:	bf00      	nop
 80029aa:	bd80      	pop	{r7, pc}

080029ac <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_8) != RESET){
 80029b0:	4b8a      	ldr	r3, [pc, #552]	; (8002bdc <EXTI9_5_IRQHandler+0x230>)
 80029b2:	695b      	ldr	r3, [r3, #20]
 80029b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d039      	beq.n	8002a30 <EXTI9_5_IRQHandler+0x84>


		if(HAL_GetTick() - ticks_pressed >= 20){
 80029bc:	f000 fa60 	bl	8002e80 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	4b87      	ldr	r3, [pc, #540]	; (8002be0 <EXTI9_5_IRQHandler+0x234>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b13      	cmp	r3, #19
 80029ca:	d92c      	bls.n	8002a26 <EXTI9_5_IRQHandler+0x7a>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == 0){
 80029cc:	4b85      	ldr	r3, [pc, #532]	; (8002be4 <EXTI9_5_IRQHandler+0x238>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d112      	bne.n	80029fc <EXTI9_5_IRQHandler+0x50>
 80029d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029da:	4883      	ldr	r0, [pc, #524]	; (8002be8 <EXTI9_5_IRQHandler+0x23c>)
 80029dc:	f001 f99a 	bl	8003d14 <HAL_GPIO_ReadPin>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10a      	bne.n	80029fc <EXTI9_5_IRQHandler+0x50>
				button_state =0 ; // stable low reached
 80029e6:	4b7f      	ldr	r3, [pc, #508]	; (8002be4 <EXTI9_5_IRQHandler+0x238>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 80029ec:	f000 fa48 	bl	8002e80 <HAL_GetTick>
 80029f0:	4603      	mov	r3, r0
 80029f2:	4a7b      	ldr	r2, [pc, #492]	; (8002be0 <EXTI9_5_IRQHandler+0x234>)
 80029f4:	6013      	str	r3, [r2, #0]

				g_left_button_pressed =1;
 80029f6:	4b7d      	ldr	r3, [pc, #500]	; (8002bec <EXTI9_5_IRQHandler+0x240>)
 80029f8:	2201      	movs	r2, #1
 80029fa:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOB ,GPIO_PIN_8) == 1 ){
 80029fc:	4b79      	ldr	r3, [pc, #484]	; (8002be4 <EXTI9_5_IRQHandler+0x238>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10f      	bne.n	8002a26 <EXTI9_5_IRQHandler+0x7a>
 8002a06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a0a:	4877      	ldr	r0, [pc, #476]	; (8002be8 <EXTI9_5_IRQHandler+0x23c>)
 8002a0c:	f001 f982 	bl	8003d14 <HAL_GPIO_ReadPin>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d107      	bne.n	8002a26 <EXTI9_5_IRQHandler+0x7a>
				ticks_pressed = HAL_GetTick() ;
 8002a16:	f000 fa33 	bl	8002e80 <HAL_GetTick>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	4a70      	ldr	r2, [pc, #448]	; (8002be0 <EXTI9_5_IRQHandler+0x234>)
 8002a1e:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 8002a20:	4b70      	ldr	r3, [pc, #448]	; (8002be4 <EXTI9_5_IRQHandler+0x238>)
 8002a22:	2201      	movs	r2, #1
 8002a24:	701a      	strb	r2, [r3, #0]

			}
		}
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8) ;
 8002a26:	4b6d      	ldr	r3, [pc, #436]	; (8002bdc <EXTI9_5_IRQHandler+0x230>)
 8002a28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a2c:	615a      	str	r2, [r3, #20]
 8002a2e:	e0c5      	b.n	8002bbc <EXTI9_5_IRQHandler+0x210>
	}

	else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_9) != RESET){
 8002a30:	4b6a      	ldr	r3, [pc, #424]	; (8002bdc <EXTI9_5_IRQHandler+0x230>)
 8002a32:	695b      	ldr	r3, [r3, #20]
 8002a34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d039      	beq.n	8002ab0 <EXTI9_5_IRQHandler+0x104>



		if(HAL_GetTick() - ticks_pressed >= 20){
 8002a3c:	f000 fa20 	bl	8002e80 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	4b67      	ldr	r3, [pc, #412]	; (8002be0 <EXTI9_5_IRQHandler+0x234>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	2b13      	cmp	r3, #19
 8002a4a:	d92c      	bls.n	8002aa6 <EXTI9_5_IRQHandler+0xfa>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0){
 8002a4c:	4b65      	ldr	r3, [pc, #404]	; (8002be4 <EXTI9_5_IRQHandler+0x238>)
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d112      	bne.n	8002a7c <EXTI9_5_IRQHandler+0xd0>
 8002a56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a5a:	4863      	ldr	r0, [pc, #396]	; (8002be8 <EXTI9_5_IRQHandler+0x23c>)
 8002a5c:	f001 f95a 	bl	8003d14 <HAL_GPIO_ReadPin>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10a      	bne.n	8002a7c <EXTI9_5_IRQHandler+0xd0>
				button_state =0 ; // stable low reached
 8002a66:	4b5f      	ldr	r3, [pc, #380]	; (8002be4 <EXTI9_5_IRQHandler+0x238>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 8002a6c:	f000 fa08 	bl	8002e80 <HAL_GetTick>
 8002a70:	4603      	mov	r3, r0
 8002a72:	4a5b      	ldr	r2, [pc, #364]	; (8002be0 <EXTI9_5_IRQHandler+0x234>)
 8002a74:	6013      	str	r3, [r2, #0]

				g_top_button_pressed = 1 ;
 8002a76:	4b5e      	ldr	r3, [pc, #376]	; (8002bf0 <EXTI9_5_IRQHandler+0x244>)
 8002a78:	2201      	movs	r2, #1
 8002a7a:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOB ,GPIO_PIN_9) == 1 ){
 8002a7c:	4b59      	ldr	r3, [pc, #356]	; (8002be4 <EXTI9_5_IRQHandler+0x238>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10f      	bne.n	8002aa6 <EXTI9_5_IRQHandler+0xfa>
 8002a86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a8a:	4857      	ldr	r0, [pc, #348]	; (8002be8 <EXTI9_5_IRQHandler+0x23c>)
 8002a8c:	f001 f942 	bl	8003d14 <HAL_GPIO_ReadPin>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d107      	bne.n	8002aa6 <EXTI9_5_IRQHandler+0xfa>
				ticks_pressed = HAL_GetTick() ;
 8002a96:	f000 f9f3 	bl	8002e80 <HAL_GetTick>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	4a50      	ldr	r2, [pc, #320]	; (8002be0 <EXTI9_5_IRQHandler+0x234>)
 8002a9e:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 8002aa0:	4b50      	ldr	r3, [pc, #320]	; (8002be4 <EXTI9_5_IRQHandler+0x238>)
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	701a      	strb	r2, [r3, #0]

			}
		}

		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_9) ;
 8002aa6:	4b4d      	ldr	r3, [pc, #308]	; (8002bdc <EXTI9_5_IRQHandler+0x230>)
 8002aa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aac:	615a      	str	r2, [r3, #20]
 8002aae:	e085      	b.n	8002bbc <EXTI9_5_IRQHandler+0x210>

	}

	else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_6) != RESET){
 8002ab0:	4b4a      	ldr	r3, [pc, #296]	; (8002bdc <EXTI9_5_IRQHandler+0x230>)
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d036      	beq.n	8002b2a <EXTI9_5_IRQHandler+0x17e>



		if(HAL_GetTick() - ticks_pressed >= 20){
 8002abc:	f000 f9e0 	bl	8002e80 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	4b47      	ldr	r3, [pc, #284]	; (8002be0 <EXTI9_5_IRQHandler+0x234>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b13      	cmp	r3, #19
 8002aca:	d92a      	bls.n	8002b22 <EXTI9_5_IRQHandler+0x176>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 0){
 8002acc:	4b45      	ldr	r3, [pc, #276]	; (8002be4 <EXTI9_5_IRQHandler+0x238>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d111      	bne.n	8002afa <EXTI9_5_IRQHandler+0x14e>
 8002ad6:	2140      	movs	r1, #64	; 0x40
 8002ad8:	4846      	ldr	r0, [pc, #280]	; (8002bf4 <EXTI9_5_IRQHandler+0x248>)
 8002ada:	f001 f91b 	bl	8003d14 <HAL_GPIO_ReadPin>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d10a      	bne.n	8002afa <EXTI9_5_IRQHandler+0x14e>
				button_state =0 ; // stable low reached
 8002ae4:	4b3f      	ldr	r3, [pc, #252]	; (8002be4 <EXTI9_5_IRQHandler+0x238>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 8002aea:	f000 f9c9 	bl	8002e80 <HAL_GetTick>
 8002aee:	4603      	mov	r3, r0
 8002af0:	4a3b      	ldr	r2, [pc, #236]	; (8002be0 <EXTI9_5_IRQHandler+0x234>)
 8002af2:	6013      	str	r3, [r2, #0]

				g_middle_button_pressed =1 ;
 8002af4:	4b40      	ldr	r3, [pc, #256]	; (8002bf8 <EXTI9_5_IRQHandler+0x24c>)
 8002af6:	2201      	movs	r2, #1
 8002af8:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOA ,GPIO_PIN_6) == 1 ){
 8002afa:	4b3a      	ldr	r3, [pc, #232]	; (8002be4 <EXTI9_5_IRQHandler+0x238>)
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d10e      	bne.n	8002b22 <EXTI9_5_IRQHandler+0x176>
 8002b04:	2140      	movs	r1, #64	; 0x40
 8002b06:	483b      	ldr	r0, [pc, #236]	; (8002bf4 <EXTI9_5_IRQHandler+0x248>)
 8002b08:	f001 f904 	bl	8003d14 <HAL_GPIO_ReadPin>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d107      	bne.n	8002b22 <EXTI9_5_IRQHandler+0x176>
				ticks_pressed = HAL_GetTick() ;
 8002b12:	f000 f9b5 	bl	8002e80 <HAL_GetTick>
 8002b16:	4603      	mov	r3, r0
 8002b18:	4a31      	ldr	r2, [pc, #196]	; (8002be0 <EXTI9_5_IRQHandler+0x234>)
 8002b1a:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 8002b1c:	4b31      	ldr	r3, [pc, #196]	; (8002be4 <EXTI9_5_IRQHandler+0x238>)
 8002b1e:	2201      	movs	r2, #1
 8002b20:	701a      	strb	r2, [r3, #0]

			}
		}


		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6) ;
 8002b22:	4b2e      	ldr	r3, [pc, #184]	; (8002bdc <EXTI9_5_IRQHandler+0x230>)
 8002b24:	2240      	movs	r2, #64	; 0x40
 8002b26:	615a      	str	r2, [r3, #20]
 8002b28:	e048      	b.n	8002bbc <EXTI9_5_IRQHandler+0x210>

	}

	else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET){
 8002b2a:	4b2c      	ldr	r3, [pc, #176]	; (8002bdc <EXTI9_5_IRQHandler+0x230>)
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d036      	beq.n	8002ba4 <EXTI9_5_IRQHandler+0x1f8>




		if(HAL_GetTick() - ticks_pressed >= 20){
 8002b36:	f000 f9a3 	bl	8002e80 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	4b28      	ldr	r3, [pc, #160]	; (8002be0 <EXTI9_5_IRQHandler+0x234>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b13      	cmp	r3, #19
 8002b44:	d92a      	bls.n	8002b9c <EXTI9_5_IRQHandler+0x1f0>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 0){
 8002b46:	4b27      	ldr	r3, [pc, #156]	; (8002be4 <EXTI9_5_IRQHandler+0x238>)
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d111      	bne.n	8002b74 <EXTI9_5_IRQHandler+0x1c8>
 8002b50:	2180      	movs	r1, #128	; 0x80
 8002b52:	4828      	ldr	r0, [pc, #160]	; (8002bf4 <EXTI9_5_IRQHandler+0x248>)
 8002b54:	f001 f8de 	bl	8003d14 <HAL_GPIO_ReadPin>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10a      	bne.n	8002b74 <EXTI9_5_IRQHandler+0x1c8>
				button_state =0 ; // stable low reached
 8002b5e:	4b21      	ldr	r3, [pc, #132]	; (8002be4 <EXTI9_5_IRQHandler+0x238>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 8002b64:	f000 f98c 	bl	8002e80 <HAL_GetTick>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	4a1d      	ldr	r2, [pc, #116]	; (8002be0 <EXTI9_5_IRQHandler+0x234>)
 8002b6c:	6013      	str	r3, [r2, #0]

				g_right_button_pressed = 1 ;
 8002b6e:	4b23      	ldr	r3, [pc, #140]	; (8002bfc <EXTI9_5_IRQHandler+0x250>)
 8002b70:	2201      	movs	r2, #1
 8002b72:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOA ,GPIO_PIN_7) == 1 ){
 8002b74:	4b1b      	ldr	r3, [pc, #108]	; (8002be4 <EXTI9_5_IRQHandler+0x238>)
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10e      	bne.n	8002b9c <EXTI9_5_IRQHandler+0x1f0>
 8002b7e:	2180      	movs	r1, #128	; 0x80
 8002b80:	481c      	ldr	r0, [pc, #112]	; (8002bf4 <EXTI9_5_IRQHandler+0x248>)
 8002b82:	f001 f8c7 	bl	8003d14 <HAL_GPIO_ReadPin>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d107      	bne.n	8002b9c <EXTI9_5_IRQHandler+0x1f0>
				ticks_pressed = HAL_GetTick() ;
 8002b8c:	f000 f978 	bl	8002e80 <HAL_GetTick>
 8002b90:	4603      	mov	r3, r0
 8002b92:	4a13      	ldr	r2, [pc, #76]	; (8002be0 <EXTI9_5_IRQHandler+0x234>)
 8002b94:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 8002b96:	4b13      	ldr	r3, [pc, #76]	; (8002be4 <EXTI9_5_IRQHandler+0x238>)
 8002b98:	2201      	movs	r2, #1
 8002b9a:	701a      	strb	r2, [r3, #0]

			}
		}
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7) ;
 8002b9c:	4b0f      	ldr	r3, [pc, #60]	; (8002bdc <EXTI9_5_IRQHandler+0x230>)
 8002b9e:	2280      	movs	r2, #128	; 0x80
 8002ba0:	615a      	str	r2, [r3, #20]
 8002ba2:	e00b      	b.n	8002bbc <EXTI9_5_IRQHandler+0x210>
	}

	else{

		if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET){
 8002ba4:	4b0d      	ldr	r3, [pc, #52]	; (8002bdc <EXTI9_5_IRQHandler+0x230>)
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d005      	beq.n	8002bbc <EXTI9_5_IRQHandler+0x210>

			g_bottom_button_pressed = 1 ;
 8002bb0:	4b13      	ldr	r3, [pc, #76]	; (8002c00 <EXTI9_5_IRQHandler+0x254>)
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	701a      	strb	r2, [r3, #0]

			__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7) ;
 8002bb6:	4b09      	ldr	r3, [pc, #36]	; (8002bdc <EXTI9_5_IRQHandler+0x230>)
 8002bb8:	2280      	movs	r2, #128	; 0x80
 8002bba:	615a      	str	r2, [r3, #20]
		}
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002bbc:	2040      	movs	r0, #64	; 0x40
 8002bbe:	f001 f8db 	bl	8003d78 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002bc2:	2080      	movs	r0, #128	; 0x80
 8002bc4:	f001 f8d8 	bl	8003d78 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002bc8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002bcc:	f001 f8d4 	bl	8003d78 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002bd0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002bd4:	f001 f8d0 	bl	8003d78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002bd8:	bf00      	nop
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40013c00 	.word	0x40013c00
 8002be0:	20000338 	.word	0x20000338
 8002be4:	20000030 	.word	0x20000030
 8002be8:	40020400 	.word	0x40020400
 8002bec:	20000332 	.word	0x20000332
 8002bf0:	20000334 	.word	0x20000334
 8002bf4:	40020000 	.word	0x40020000
 8002bf8:	20000336 	.word	0x20000336
 8002bfc:	20000333 	.word	0x20000333
 8002c00:	20000335 	.word	0x20000335

08002c04 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c08:	4802      	ldr	r0, [pc, #8]	; (8002c14 <TIM2_IRQHandler+0x10>)
 8002c0a:	f001 ff33 	bl	8004a74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c0e:	bf00      	nop
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	2000010c 	.word	0x2000010c

08002c18 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002c1c:	4802      	ldr	r0, [pc, #8]	; (8002c28 <USART2_IRQHandler+0x10>)
 8002c1e:	f002 fd5f 	bl	80056e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002c22:	bf00      	nop
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	2000019c 	.word	0x2000019c

08002c2c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */


	if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_13) != RESET){
 8002c30:	4b22      	ldr	r3, [pc, #136]	; (8002cbc <EXTI15_10_IRQHandler+0x90>)
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d038      	beq.n	8002cae <EXTI15_10_IRQHandler+0x82>

		if(HAL_GetTick() - ticks_pressed >= 20){
 8002c3c:	f000 f920 	bl	8002e80 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	4b1f      	ldr	r3, [pc, #124]	; (8002cc0 <EXTI15_10_IRQHandler+0x94>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b13      	cmp	r3, #19
 8002c4a:	d92c      	bls.n	8002ca6 <EXTI15_10_IRQHandler+0x7a>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 0){
 8002c4c:	4b1d      	ldr	r3, [pc, #116]	; (8002cc4 <EXTI15_10_IRQHandler+0x98>)
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d112      	bne.n	8002c7c <EXTI15_10_IRQHandler+0x50>
 8002c56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c5a:	481b      	ldr	r0, [pc, #108]	; (8002cc8 <EXTI15_10_IRQHandler+0x9c>)
 8002c5c:	f001 f85a 	bl	8003d14 <HAL_GPIO_ReadPin>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10a      	bne.n	8002c7c <EXTI15_10_IRQHandler+0x50>
				button_state =0 ; // stable low reached
 8002c66:	4b17      	ldr	r3, [pc, #92]	; (8002cc4 <EXTI15_10_IRQHandler+0x98>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 8002c6c:	f000 f908 	bl	8002e80 <HAL_GetTick>
 8002c70:	4603      	mov	r3, r0
 8002c72:	4a13      	ldr	r2, [pc, #76]	; (8002cc0 <EXTI15_10_IRQHandler+0x94>)
 8002c74:	6013      	str	r3, [r2, #0]

				g_bottom_button_pressed = 1 ;
 8002c76:	4b15      	ldr	r3, [pc, #84]	; (8002ccc <EXTI15_10_IRQHandler+0xa0>)
 8002c78:	2201      	movs	r2, #1
 8002c7a:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOB ,GPIO_PIN_13) == 1 ){
 8002c7c:	4b11      	ldr	r3, [pc, #68]	; (8002cc4 <EXTI15_10_IRQHandler+0x98>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10f      	bne.n	8002ca6 <EXTI15_10_IRQHandler+0x7a>
 8002c86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c8a:	480f      	ldr	r0, [pc, #60]	; (8002cc8 <EXTI15_10_IRQHandler+0x9c>)
 8002c8c:	f001 f842 	bl	8003d14 <HAL_GPIO_ReadPin>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d107      	bne.n	8002ca6 <EXTI15_10_IRQHandler+0x7a>
				ticks_pressed = HAL_GetTick() ;
 8002c96:	f000 f8f3 	bl	8002e80 <HAL_GetTick>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	4a08      	ldr	r2, [pc, #32]	; (8002cc0 <EXTI15_10_IRQHandler+0x94>)
 8002c9e:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 8002ca0:	4b08      	ldr	r3, [pc, #32]	; (8002cc4 <EXTI15_10_IRQHandler+0x98>)
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	701a      	strb	r2, [r3, #0]

			}
		}

		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13) ;
 8002ca6:	4b05      	ldr	r3, [pc, #20]	; (8002cbc <EXTI15_10_IRQHandler+0x90>)
 8002ca8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cac:	615a      	str	r2, [r3, #20]
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002cae:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002cb2:	f001 f861 	bl	8003d78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002cb6:	bf00      	nop
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	40013c00 	.word	0x40013c00
 8002cc0:	20000338 	.word	0x20000338
 8002cc4:	20000030 	.word	0x20000030
 8002cc8:	40020400 	.word	0x40020400
 8002ccc:	20000335 	.word	0x20000335

08002cd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cd8:	4a14      	ldr	r2, [pc, #80]	; (8002d2c <_sbrk+0x5c>)
 8002cda:	4b15      	ldr	r3, [pc, #84]	; (8002d30 <_sbrk+0x60>)
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ce4:	4b13      	ldr	r3, [pc, #76]	; (8002d34 <_sbrk+0x64>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d102      	bne.n	8002cf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cec:	4b11      	ldr	r3, [pc, #68]	; (8002d34 <_sbrk+0x64>)
 8002cee:	4a12      	ldr	r2, [pc, #72]	; (8002d38 <_sbrk+0x68>)
 8002cf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cf2:	4b10      	ldr	r3, [pc, #64]	; (8002d34 <_sbrk+0x64>)
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d207      	bcs.n	8002d10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d00:	f003 fbe8 	bl	80064d4 <__errno>
 8002d04:	4603      	mov	r3, r0
 8002d06:	220c      	movs	r2, #12
 8002d08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d0e:	e009      	b.n	8002d24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d10:	4b08      	ldr	r3, [pc, #32]	; (8002d34 <_sbrk+0x64>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d16:	4b07      	ldr	r3, [pc, #28]	; (8002d34 <_sbrk+0x64>)
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	4a05      	ldr	r2, [pc, #20]	; (8002d34 <_sbrk+0x64>)
 8002d20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d22:	68fb      	ldr	r3, [r7, #12]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3718      	adds	r7, #24
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	20020000 	.word	0x20020000
 8002d30:	00000400 	.word	0x00000400
 8002d34:	20000340 	.word	0x20000340
 8002d38:	20000358 	.word	0x20000358

08002d3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d40:	4b06      	ldr	r3, [pc, #24]	; (8002d5c <SystemInit+0x20>)
 8002d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d46:	4a05      	ldr	r2, [pc, #20]	; (8002d5c <SystemInit+0x20>)
 8002d48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d50:	bf00      	nop
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	e000ed00 	.word	0xe000ed00

08002d60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d64:	480d      	ldr	r0, [pc, #52]	; (8002d9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d66:	490e      	ldr	r1, [pc, #56]	; (8002da0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d68:	4a0e      	ldr	r2, [pc, #56]	; (8002da4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d6c:	e002      	b.n	8002d74 <LoopCopyDataInit>

08002d6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d72:	3304      	adds	r3, #4

08002d74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d78:	d3f9      	bcc.n	8002d6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d7a:	4a0b      	ldr	r2, [pc, #44]	; (8002da8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d7c:	4c0b      	ldr	r4, [pc, #44]	; (8002dac <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d80:	e001      	b.n	8002d86 <LoopFillZerobss>

08002d82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d84:	3204      	adds	r2, #4

08002d86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d88:	d3fb      	bcc.n	8002d82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d8a:	f7ff ffd7 	bl	8002d3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d8e:	f003 fba7 	bl	80064e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d92:	f7ff f8a1 	bl	8001ed8 <main>
  bx  lr    
 8002d96:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002da0:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8002da4:	08007e00 	.word	0x08007e00
  ldr r2, =_sbss
 8002da8:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8002dac:	20000358 	.word	0x20000358

08002db0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002db0:	e7fe      	b.n	8002db0 <ADC_IRQHandler>
	...

08002db4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002db8:	4b0e      	ldr	r3, [pc, #56]	; (8002df4 <HAL_Init+0x40>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a0d      	ldr	r2, [pc, #52]	; (8002df4 <HAL_Init+0x40>)
 8002dbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002dc4:	4b0b      	ldr	r3, [pc, #44]	; (8002df4 <HAL_Init+0x40>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a0a      	ldr	r2, [pc, #40]	; (8002df4 <HAL_Init+0x40>)
 8002dca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dd0:	4b08      	ldr	r3, [pc, #32]	; (8002df4 <HAL_Init+0x40>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a07      	ldr	r2, [pc, #28]	; (8002df4 <HAL_Init+0x40>)
 8002dd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ddc:	2003      	movs	r0, #3
 8002dde:	f000 fd41 	bl	8003864 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002de2:	2000      	movs	r0, #0
 8002de4:	f000 f808 	bl	8002df8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002de8:	f7ff fc5e 	bl	80026a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40023c00 	.word	0x40023c00

08002df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e00:	4b12      	ldr	r3, [pc, #72]	; (8002e4c <HAL_InitTick+0x54>)
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	4b12      	ldr	r3, [pc, #72]	; (8002e50 <HAL_InitTick+0x58>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	4619      	mov	r1, r3
 8002e0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e16:	4618      	mov	r0, r3
 8002e18:	f000 fd59 	bl	80038ce <HAL_SYSTICK_Config>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e00e      	b.n	8002e44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b0f      	cmp	r3, #15
 8002e2a:	d80a      	bhi.n	8002e42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	f04f 30ff 	mov.w	r0, #4294967295
 8002e34:	f000 fd21 	bl	800387a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e38:	4a06      	ldr	r2, [pc, #24]	; (8002e54 <HAL_InitTick+0x5c>)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	e000      	b.n	8002e44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	20000034 	.word	0x20000034
 8002e50:	2000003c 	.word	0x2000003c
 8002e54:	20000038 	.word	0x20000038

08002e58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e5c:	4b06      	ldr	r3, [pc, #24]	; (8002e78 <HAL_IncTick+0x20>)
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	461a      	mov	r2, r3
 8002e62:	4b06      	ldr	r3, [pc, #24]	; (8002e7c <HAL_IncTick+0x24>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4413      	add	r3, r2
 8002e68:	4a04      	ldr	r2, [pc, #16]	; (8002e7c <HAL_IncTick+0x24>)
 8002e6a:	6013      	str	r3, [r2, #0]
}
 8002e6c:	bf00      	nop
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	2000003c 	.word	0x2000003c
 8002e7c:	20000344 	.word	0x20000344

08002e80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
  return uwTick;
 8002e84:	4b03      	ldr	r3, [pc, #12]	; (8002e94 <HAL_GetTick+0x14>)
 8002e86:	681b      	ldr	r3, [r3, #0]
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	20000344 	.word	0x20000344

08002e98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ea0:	f7ff ffee 	bl	8002e80 <HAL_GetTick>
 8002ea4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb0:	d005      	beq.n	8002ebe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002eb2:	4b0a      	ldr	r3, [pc, #40]	; (8002edc <HAL_Delay+0x44>)
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	4413      	add	r3, r2
 8002ebc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ebe:	bf00      	nop
 8002ec0:	f7ff ffde 	bl	8002e80 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d8f7      	bhi.n	8002ec0 <HAL_Delay+0x28>
  {
  }
}
 8002ed0:	bf00      	nop
 8002ed2:	bf00      	nop
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	2000003c 	.word	0x2000003c

08002ee0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e033      	b.n	8002f5e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d109      	bne.n	8002f12 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7ff fbfa 	bl	80026f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	f003 0310 	and.w	r3, r3, #16
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d118      	bne.n	8002f50 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f26:	f023 0302 	bic.w	r3, r3, #2
 8002f2a:	f043 0202 	orr.w	r2, r3, #2
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 faca 	bl	80034cc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	f023 0303 	bic.w	r3, r3, #3
 8002f46:	f043 0201 	orr.w	r2, r3, #1
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	641a      	str	r2, [r3, #64]	; 0x40
 8002f4e:	e001      	b.n	8002f54 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
	...

08002f68 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002f70:	2300      	movs	r3, #0
 8002f72:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d101      	bne.n	8002f82 <HAL_ADC_Start+0x1a>
 8002f7e:	2302      	movs	r3, #2
 8002f80:	e097      	b.n	80030b2 <HAL_ADC_Start+0x14a>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2201      	movs	r2, #1
 8002f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d018      	beq.n	8002fca <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689a      	ldr	r2, [r3, #8]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f042 0201 	orr.w	r2, r2, #1
 8002fa6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002fa8:	4b45      	ldr	r3, [pc, #276]	; (80030c0 <HAL_ADC_Start+0x158>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a45      	ldr	r2, [pc, #276]	; (80030c4 <HAL_ADC_Start+0x15c>)
 8002fae:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb2:	0c9a      	lsrs	r2, r3, #18
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	4413      	add	r3, r2
 8002fba:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002fbc:	e002      	b.n	8002fc4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1f9      	bne.n	8002fbe <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d15f      	bne.n	8003098 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fdc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002fe0:	f023 0301 	bic.w	r3, r3, #1
 8002fe4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d007      	beq.n	800300a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003002:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003016:	d106      	bne.n	8003026 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301c:	f023 0206 	bic.w	r2, r3, #6
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	645a      	str	r2, [r3, #68]	; 0x44
 8003024:	e002      	b.n	800302c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003034:	4b24      	ldr	r3, [pc, #144]	; (80030c8 <HAL_ADC_Start+0x160>)
 8003036:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003040:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f003 031f 	and.w	r3, r3, #31
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10f      	bne.n	800306e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d129      	bne.n	80030b0 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689a      	ldr	r2, [r3, #8]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800306a:	609a      	str	r2, [r3, #8]
 800306c:	e020      	b.n	80030b0 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a16      	ldr	r2, [pc, #88]	; (80030cc <HAL_ADC_Start+0x164>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d11b      	bne.n	80030b0 <HAL_ADC_Start+0x148>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d114      	bne.n	80030b0 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003094:	609a      	str	r2, [r3, #8]
 8003096:	e00b      	b.n	80030b0 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309c:	f043 0210 	orr.w	r2, r3, #16
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a8:	f043 0201 	orr.w	r2, r3, #1
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3714      	adds	r7, #20
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	20000034 	.word	0x20000034
 80030c4:	431bde83 	.word	0x431bde83
 80030c8:	40012300 	.word	0x40012300
 80030cc:	40012000 	.word	0x40012000

080030d0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d101      	bne.n	80030e6 <HAL_ADC_Stop+0x16>
 80030e2:	2302      	movs	r3, #2
 80030e4:	e021      	b.n	800312a <HAL_ADC_Stop+0x5a>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 0201 	bic.w	r2, r2, #1
 80030fc:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f003 0301 	and.w	r3, r3, #1
 8003108:	2b00      	cmp	r3, #0
 800310a:	d109      	bne.n	8003120 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003110:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003114:	f023 0301 	bic.w	r3, r3, #1
 8003118:	f043 0201 	orr.w	r2, r3, #1
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr

08003136 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b084      	sub	sp, #16
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
 800313e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003140:	2300      	movs	r3, #0
 8003142:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800314e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003152:	d113      	bne.n	800317c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800315e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003162:	d10b      	bne.n	800317c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003168:	f043 0220 	orr.w	r2, r3, #32
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e063      	b.n	8003244 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800317c:	f7ff fe80 	bl	8002e80 <HAL_GetTick>
 8003180:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003182:	e021      	b.n	80031c8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800318a:	d01d      	beq.n	80031c8 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d007      	beq.n	80031a2 <HAL_ADC_PollForConversion+0x6c>
 8003192:	f7ff fe75 	bl	8002e80 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d212      	bcs.n	80031c8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d00b      	beq.n	80031c8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b4:	f043 0204 	orr.w	r2, r3, #4
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e03d      	b.n	8003244 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d1d6      	bne.n	8003184 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f06f 0212 	mvn.w	r2, #18
 80031de:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d123      	bne.n	8003242 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d11f      	bne.n	8003242 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003208:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800320c:	2b00      	cmp	r3, #0
 800320e:	d006      	beq.n	800321e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800321a:	2b00      	cmp	r3, #0
 800321c:	d111      	bne.n	8003242 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d105      	bne.n	8003242 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	f043 0201 	orr.w	r2, r3, #1
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800325a:	4618      	mov	r0, r3
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
	...

08003268 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003272:	2300      	movs	r3, #0
 8003274:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800327c:	2b01      	cmp	r3, #1
 800327e:	d101      	bne.n	8003284 <HAL_ADC_ConfigChannel+0x1c>
 8003280:	2302      	movs	r3, #2
 8003282:	e113      	b.n	80034ac <HAL_ADC_ConfigChannel+0x244>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2b09      	cmp	r3, #9
 8003292:	d925      	bls.n	80032e0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68d9      	ldr	r1, [r3, #12]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	b29b      	uxth	r3, r3
 80032a0:	461a      	mov	r2, r3
 80032a2:	4613      	mov	r3, r2
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	4413      	add	r3, r2
 80032a8:	3b1e      	subs	r3, #30
 80032aa:	2207      	movs	r2, #7
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	43da      	mvns	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	400a      	ands	r2, r1
 80032b8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68d9      	ldr	r1, [r3, #12]
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	689a      	ldr	r2, [r3, #8]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	4618      	mov	r0, r3
 80032cc:	4603      	mov	r3, r0
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	4403      	add	r3, r0
 80032d2:	3b1e      	subs	r3, #30
 80032d4:	409a      	lsls	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	430a      	orrs	r2, r1
 80032dc:	60da      	str	r2, [r3, #12]
 80032de:	e022      	b.n	8003326 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6919      	ldr	r1, [r3, #16]
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	461a      	mov	r2, r3
 80032ee:	4613      	mov	r3, r2
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	4413      	add	r3, r2
 80032f4:	2207      	movs	r2, #7
 80032f6:	fa02 f303 	lsl.w	r3, r2, r3
 80032fa:	43da      	mvns	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	400a      	ands	r2, r1
 8003302:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6919      	ldr	r1, [r3, #16]
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	689a      	ldr	r2, [r3, #8]
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	b29b      	uxth	r3, r3
 8003314:	4618      	mov	r0, r3
 8003316:	4603      	mov	r3, r0
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	4403      	add	r3, r0
 800331c:	409a      	lsls	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	430a      	orrs	r2, r1
 8003324:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	2b06      	cmp	r3, #6
 800332c:	d824      	bhi.n	8003378 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	4613      	mov	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4413      	add	r3, r2
 800333e:	3b05      	subs	r3, #5
 8003340:	221f      	movs	r2, #31
 8003342:	fa02 f303 	lsl.w	r3, r2, r3
 8003346:	43da      	mvns	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	400a      	ands	r2, r1
 800334e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	b29b      	uxth	r3, r3
 800335c:	4618      	mov	r0, r3
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	4613      	mov	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4413      	add	r3, r2
 8003368:	3b05      	subs	r3, #5
 800336a:	fa00 f203 	lsl.w	r2, r0, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	430a      	orrs	r2, r1
 8003374:	635a      	str	r2, [r3, #52]	; 0x34
 8003376:	e04c      	b.n	8003412 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	2b0c      	cmp	r3, #12
 800337e:	d824      	bhi.n	80033ca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685a      	ldr	r2, [r3, #4]
 800338a:	4613      	mov	r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	4413      	add	r3, r2
 8003390:	3b23      	subs	r3, #35	; 0x23
 8003392:	221f      	movs	r2, #31
 8003394:	fa02 f303 	lsl.w	r3, r2, r3
 8003398:	43da      	mvns	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	400a      	ands	r2, r1
 80033a0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	4618      	mov	r0, r3
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	4613      	mov	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4413      	add	r3, r2
 80033ba:	3b23      	subs	r3, #35	; 0x23
 80033bc:	fa00 f203 	lsl.w	r2, r0, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	430a      	orrs	r2, r1
 80033c6:	631a      	str	r2, [r3, #48]	; 0x30
 80033c8:	e023      	b.n	8003412 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	4613      	mov	r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	4413      	add	r3, r2
 80033da:	3b41      	subs	r3, #65	; 0x41
 80033dc:	221f      	movs	r2, #31
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	43da      	mvns	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	400a      	ands	r2, r1
 80033ea:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	4618      	mov	r0, r3
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	4613      	mov	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	4413      	add	r3, r2
 8003404:	3b41      	subs	r3, #65	; 0x41
 8003406:	fa00 f203 	lsl.w	r2, r0, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	430a      	orrs	r2, r1
 8003410:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003412:	4b29      	ldr	r3, [pc, #164]	; (80034b8 <HAL_ADC_ConfigChannel+0x250>)
 8003414:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a28      	ldr	r2, [pc, #160]	; (80034bc <HAL_ADC_ConfigChannel+0x254>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d10f      	bne.n	8003440 <HAL_ADC_ConfigChannel+0x1d8>
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2b12      	cmp	r3, #18
 8003426:	d10b      	bne.n	8003440 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a1d      	ldr	r2, [pc, #116]	; (80034bc <HAL_ADC_ConfigChannel+0x254>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d12b      	bne.n	80034a2 <HAL_ADC_ConfigChannel+0x23a>
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a1c      	ldr	r2, [pc, #112]	; (80034c0 <HAL_ADC_ConfigChannel+0x258>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d003      	beq.n	800345c <HAL_ADC_ConfigChannel+0x1f4>
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2b11      	cmp	r3, #17
 800345a:	d122      	bne.n	80034a2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a11      	ldr	r2, [pc, #68]	; (80034c0 <HAL_ADC_ConfigChannel+0x258>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d111      	bne.n	80034a2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800347e:	4b11      	ldr	r3, [pc, #68]	; (80034c4 <HAL_ADC_ConfigChannel+0x25c>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a11      	ldr	r2, [pc, #68]	; (80034c8 <HAL_ADC_ConfigChannel+0x260>)
 8003484:	fba2 2303 	umull	r2, r3, r2, r3
 8003488:	0c9a      	lsrs	r2, r3, #18
 800348a:	4613      	mov	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4413      	add	r3, r2
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003494:	e002      	b.n	800349c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	3b01      	subs	r3, #1
 800349a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1f9      	bne.n	8003496 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3714      	adds	r7, #20
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr
 80034b8:	40012300 	.word	0x40012300
 80034bc:	40012000 	.word	0x40012000
 80034c0:	10000012 	.word	0x10000012
 80034c4:	20000034 	.word	0x20000034
 80034c8:	431bde83 	.word	0x431bde83

080034cc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034d4:	4b79      	ldr	r3, [pc, #484]	; (80036bc <ADC_Init+0x1f0>)
 80034d6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	431a      	orrs	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003500:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6859      	ldr	r1, [r3, #4]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	021a      	lsls	r2, r3, #8
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	430a      	orrs	r2, r1
 8003514:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	685a      	ldr	r2, [r3, #4]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003524:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	6859      	ldr	r1, [r3, #4]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	430a      	orrs	r2, r1
 8003536:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689a      	ldr	r2, [r3, #8]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003546:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6899      	ldr	r1, [r3, #8]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	68da      	ldr	r2, [r3, #12]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355e:	4a58      	ldr	r2, [pc, #352]	; (80036c0 <ADC_Init+0x1f4>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d022      	beq.n	80035aa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689a      	ldr	r2, [r3, #8]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003572:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6899      	ldr	r1, [r3, #8]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	689a      	ldr	r2, [r3, #8]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003594:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	6899      	ldr	r1, [r3, #8]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	430a      	orrs	r2, r1
 80035a6:	609a      	str	r2, [r3, #8]
 80035a8:	e00f      	b.n	80035ca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689a      	ldr	r2, [r3, #8]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80035c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	689a      	ldr	r2, [r3, #8]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 0202 	bic.w	r2, r2, #2
 80035d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6899      	ldr	r1, [r3, #8]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	7e1b      	ldrb	r3, [r3, #24]
 80035e4:	005a      	lsls	r2, r3, #1
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d01b      	beq.n	8003630 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003606:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	685a      	ldr	r2, [r3, #4]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003616:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6859      	ldr	r1, [r3, #4]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003622:	3b01      	subs	r3, #1
 8003624:	035a      	lsls	r2, r3, #13
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	430a      	orrs	r2, r1
 800362c:	605a      	str	r2, [r3, #4]
 800362e:	e007      	b.n	8003640 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685a      	ldr	r2, [r3, #4]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800363e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800364e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	3b01      	subs	r3, #1
 800365c:	051a      	lsls	r2, r3, #20
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	430a      	orrs	r2, r1
 8003664:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003674:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	6899      	ldr	r1, [r3, #8]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003682:	025a      	lsls	r2, r3, #9
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	430a      	orrs	r2, r1
 800368a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689a      	ldr	r2, [r3, #8]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800369a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6899      	ldr	r1, [r3, #8]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	029a      	lsls	r2, r3, #10
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	430a      	orrs	r2, r1
 80036ae:	609a      	str	r2, [r3, #8]
}
 80036b0:	bf00      	nop
 80036b2:	3714      	adds	r7, #20
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	40012300 	.word	0x40012300
 80036c0:	0f000001 	.word	0x0f000001

080036c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f003 0307 	and.w	r3, r3, #7
 80036d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036d4:	4b0c      	ldr	r3, [pc, #48]	; (8003708 <__NVIC_SetPriorityGrouping+0x44>)
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036da:	68ba      	ldr	r2, [r7, #8]
 80036dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036e0:	4013      	ands	r3, r2
 80036e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036f6:	4a04      	ldr	r2, [pc, #16]	; (8003708 <__NVIC_SetPriorityGrouping+0x44>)
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	60d3      	str	r3, [r2, #12]
}
 80036fc:	bf00      	nop
 80036fe:	3714      	adds	r7, #20
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr
 8003708:	e000ed00 	.word	0xe000ed00

0800370c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003710:	4b04      	ldr	r3, [pc, #16]	; (8003724 <__NVIC_GetPriorityGrouping+0x18>)
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	0a1b      	lsrs	r3, r3, #8
 8003716:	f003 0307 	and.w	r3, r3, #7
}
 800371a:	4618      	mov	r0, r3
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	e000ed00 	.word	0xe000ed00

08003728 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	4603      	mov	r3, r0
 8003730:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003736:	2b00      	cmp	r3, #0
 8003738:	db0b      	blt.n	8003752 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800373a:	79fb      	ldrb	r3, [r7, #7]
 800373c:	f003 021f 	and.w	r2, r3, #31
 8003740:	4907      	ldr	r1, [pc, #28]	; (8003760 <__NVIC_EnableIRQ+0x38>)
 8003742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003746:	095b      	lsrs	r3, r3, #5
 8003748:	2001      	movs	r0, #1
 800374a:	fa00 f202 	lsl.w	r2, r0, r2
 800374e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003752:	bf00      	nop
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	e000e100 	.word	0xe000e100

08003764 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	4603      	mov	r3, r0
 800376c:	6039      	str	r1, [r7, #0]
 800376e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003774:	2b00      	cmp	r3, #0
 8003776:	db0a      	blt.n	800378e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	b2da      	uxtb	r2, r3
 800377c:	490c      	ldr	r1, [pc, #48]	; (80037b0 <__NVIC_SetPriority+0x4c>)
 800377e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003782:	0112      	lsls	r2, r2, #4
 8003784:	b2d2      	uxtb	r2, r2
 8003786:	440b      	add	r3, r1
 8003788:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800378c:	e00a      	b.n	80037a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	b2da      	uxtb	r2, r3
 8003792:	4908      	ldr	r1, [pc, #32]	; (80037b4 <__NVIC_SetPriority+0x50>)
 8003794:	79fb      	ldrb	r3, [r7, #7]
 8003796:	f003 030f 	and.w	r3, r3, #15
 800379a:	3b04      	subs	r3, #4
 800379c:	0112      	lsls	r2, r2, #4
 800379e:	b2d2      	uxtb	r2, r2
 80037a0:	440b      	add	r3, r1
 80037a2:	761a      	strb	r2, [r3, #24]
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr
 80037b0:	e000e100 	.word	0xe000e100
 80037b4:	e000ed00 	.word	0xe000ed00

080037b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b089      	sub	sp, #36	; 0x24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f003 0307 	and.w	r3, r3, #7
 80037ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	f1c3 0307 	rsb	r3, r3, #7
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	bf28      	it	cs
 80037d6:	2304      	movcs	r3, #4
 80037d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	3304      	adds	r3, #4
 80037de:	2b06      	cmp	r3, #6
 80037e0:	d902      	bls.n	80037e8 <NVIC_EncodePriority+0x30>
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	3b03      	subs	r3, #3
 80037e6:	e000      	b.n	80037ea <NVIC_EncodePriority+0x32>
 80037e8:	2300      	movs	r3, #0
 80037ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037ec:	f04f 32ff 	mov.w	r2, #4294967295
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	fa02 f303 	lsl.w	r3, r2, r3
 80037f6:	43da      	mvns	r2, r3
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	401a      	ands	r2, r3
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003800:	f04f 31ff 	mov.w	r1, #4294967295
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	fa01 f303 	lsl.w	r3, r1, r3
 800380a:	43d9      	mvns	r1, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003810:	4313      	orrs	r3, r2
         );
}
 8003812:	4618      	mov	r0, r3
 8003814:	3724      	adds	r7, #36	; 0x24
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
	...

08003820 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	3b01      	subs	r3, #1
 800382c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003830:	d301      	bcc.n	8003836 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003832:	2301      	movs	r3, #1
 8003834:	e00f      	b.n	8003856 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003836:	4a0a      	ldr	r2, [pc, #40]	; (8003860 <SysTick_Config+0x40>)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	3b01      	subs	r3, #1
 800383c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800383e:	210f      	movs	r1, #15
 8003840:	f04f 30ff 	mov.w	r0, #4294967295
 8003844:	f7ff ff8e 	bl	8003764 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003848:	4b05      	ldr	r3, [pc, #20]	; (8003860 <SysTick_Config+0x40>)
 800384a:	2200      	movs	r2, #0
 800384c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800384e:	4b04      	ldr	r3, [pc, #16]	; (8003860 <SysTick_Config+0x40>)
 8003850:	2207      	movs	r2, #7
 8003852:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	e000e010 	.word	0xe000e010

08003864 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f7ff ff29 	bl	80036c4 <__NVIC_SetPriorityGrouping>
}
 8003872:	bf00      	nop
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800387a:	b580      	push	{r7, lr}
 800387c:	b086      	sub	sp, #24
 800387e:	af00      	add	r7, sp, #0
 8003880:	4603      	mov	r3, r0
 8003882:	60b9      	str	r1, [r7, #8]
 8003884:	607a      	str	r2, [r7, #4]
 8003886:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003888:	2300      	movs	r3, #0
 800388a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800388c:	f7ff ff3e 	bl	800370c <__NVIC_GetPriorityGrouping>
 8003890:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	68b9      	ldr	r1, [r7, #8]
 8003896:	6978      	ldr	r0, [r7, #20]
 8003898:	f7ff ff8e 	bl	80037b8 <NVIC_EncodePriority>
 800389c:	4602      	mov	r2, r0
 800389e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038a2:	4611      	mov	r1, r2
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7ff ff5d 	bl	8003764 <__NVIC_SetPriority>
}
 80038aa:	bf00      	nop
 80038ac:	3718      	adds	r7, #24
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b082      	sub	sp, #8
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	4603      	mov	r3, r0
 80038ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7ff ff31 	bl	8003728 <__NVIC_EnableIRQ>
}
 80038c6:	bf00      	nop
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b082      	sub	sp, #8
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f7ff ffa2 	bl	8003820 <SysTick_Config>
 80038dc:	4603      	mov	r3, r0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b084      	sub	sp, #16
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80038f4:	f7ff fac4 	bl	8002e80 <HAL_GetTick>
 80038f8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d008      	beq.n	8003918 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2280      	movs	r2, #128	; 0x80
 800390a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e052      	b.n	80039be <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 0216 	bic.w	r2, r2, #22
 8003926:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	695a      	ldr	r2, [r3, #20]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003936:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393c:	2b00      	cmp	r3, #0
 800393e:	d103      	bne.n	8003948 <HAL_DMA_Abort+0x62>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003944:	2b00      	cmp	r3, #0
 8003946:	d007      	beq.n	8003958 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 0208 	bic.w	r2, r2, #8
 8003956:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f022 0201 	bic.w	r2, r2, #1
 8003966:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003968:	e013      	b.n	8003992 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800396a:	f7ff fa89 	bl	8002e80 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2b05      	cmp	r3, #5
 8003976:	d90c      	bls.n	8003992 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2220      	movs	r2, #32
 800397c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2203      	movs	r2, #3
 8003982:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e015      	b.n	80039be <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1e4      	bne.n	800396a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a4:	223f      	movs	r2, #63	; 0x3f
 80039a6:	409a      	lsls	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039c6:	b480      	push	{r7}
 80039c8:	b083      	sub	sp, #12
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d004      	beq.n	80039e4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2280      	movs	r2, #128	; 0x80
 80039de:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e00c      	b.n	80039fe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2205      	movs	r2, #5
 80039e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0201 	bic.w	r2, r2, #1
 80039fa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
	...

08003a0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b089      	sub	sp, #36	; 0x24
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a16:	2300      	movs	r3, #0
 8003a18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a22:	2300      	movs	r3, #0
 8003a24:	61fb      	str	r3, [r7, #28]
 8003a26:	e159      	b.n	8003cdc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a28:	2201      	movs	r2, #1
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	4013      	ands	r3, r2
 8003a3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	f040 8148 	bne.w	8003cd6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f003 0303 	and.w	r3, r3, #3
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d005      	beq.n	8003a5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d130      	bne.n	8003ac0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	2203      	movs	r2, #3
 8003a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6e:	43db      	mvns	r3, r3
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	4013      	ands	r3, r2
 8003a74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	68da      	ldr	r2, [r3, #12]
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a94:	2201      	movs	r2, #1
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9c:	43db      	mvns	r3, r3
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	091b      	lsrs	r3, r3, #4
 8003aaa:	f003 0201 	and.w	r2, r3, #1
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f003 0303 	and.w	r3, r3, #3
 8003ac8:	2b03      	cmp	r3, #3
 8003aca:	d017      	beq.n	8003afc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	2203      	movs	r2, #3
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	43db      	mvns	r3, r3
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	005b      	lsls	r3, r3, #1
 8003aec:	fa02 f303 	lsl.w	r3, r2, r3
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f003 0303 	and.w	r3, r3, #3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d123      	bne.n	8003b50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	08da      	lsrs	r2, r3, #3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	3208      	adds	r2, #8
 8003b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	f003 0307 	and.w	r3, r3, #7
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	220f      	movs	r2, #15
 8003b20:	fa02 f303 	lsl.w	r3, r2, r3
 8003b24:	43db      	mvns	r3, r3
 8003b26:	69ba      	ldr	r2, [r7, #24]
 8003b28:	4013      	ands	r3, r2
 8003b2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	691a      	ldr	r2, [r3, #16]
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	f003 0307 	and.w	r3, r3, #7
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	08da      	lsrs	r2, r3, #3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	3208      	adds	r2, #8
 8003b4a:	69b9      	ldr	r1, [r7, #24]
 8003b4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	005b      	lsls	r3, r3, #1
 8003b5a:	2203      	movs	r2, #3
 8003b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b60:	43db      	mvns	r3, r3
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	4013      	ands	r3, r2
 8003b66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f003 0203 	and.w	r2, r3, #3
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	fa02 f303 	lsl.w	r3, r2, r3
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f000 80a2 	beq.w	8003cd6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b92:	2300      	movs	r3, #0
 8003b94:	60fb      	str	r3, [r7, #12]
 8003b96:	4b57      	ldr	r3, [pc, #348]	; (8003cf4 <HAL_GPIO_Init+0x2e8>)
 8003b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9a:	4a56      	ldr	r2, [pc, #344]	; (8003cf4 <HAL_GPIO_Init+0x2e8>)
 8003b9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ba0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ba2:	4b54      	ldr	r3, [pc, #336]	; (8003cf4 <HAL_GPIO_Init+0x2e8>)
 8003ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003baa:	60fb      	str	r3, [r7, #12]
 8003bac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bae:	4a52      	ldr	r2, [pc, #328]	; (8003cf8 <HAL_GPIO_Init+0x2ec>)
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	089b      	lsrs	r3, r3, #2
 8003bb4:	3302      	adds	r3, #2
 8003bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	f003 0303 	and.w	r3, r3, #3
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	220f      	movs	r2, #15
 8003bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bca:	43db      	mvns	r3, r3
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	4013      	ands	r3, r2
 8003bd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a49      	ldr	r2, [pc, #292]	; (8003cfc <HAL_GPIO_Init+0x2f0>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d019      	beq.n	8003c0e <HAL_GPIO_Init+0x202>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a48      	ldr	r2, [pc, #288]	; (8003d00 <HAL_GPIO_Init+0x2f4>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d013      	beq.n	8003c0a <HAL_GPIO_Init+0x1fe>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a47      	ldr	r2, [pc, #284]	; (8003d04 <HAL_GPIO_Init+0x2f8>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d00d      	beq.n	8003c06 <HAL_GPIO_Init+0x1fa>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a46      	ldr	r2, [pc, #280]	; (8003d08 <HAL_GPIO_Init+0x2fc>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d007      	beq.n	8003c02 <HAL_GPIO_Init+0x1f6>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a45      	ldr	r2, [pc, #276]	; (8003d0c <HAL_GPIO_Init+0x300>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d101      	bne.n	8003bfe <HAL_GPIO_Init+0x1f2>
 8003bfa:	2304      	movs	r3, #4
 8003bfc:	e008      	b.n	8003c10 <HAL_GPIO_Init+0x204>
 8003bfe:	2307      	movs	r3, #7
 8003c00:	e006      	b.n	8003c10 <HAL_GPIO_Init+0x204>
 8003c02:	2303      	movs	r3, #3
 8003c04:	e004      	b.n	8003c10 <HAL_GPIO_Init+0x204>
 8003c06:	2302      	movs	r3, #2
 8003c08:	e002      	b.n	8003c10 <HAL_GPIO_Init+0x204>
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e000      	b.n	8003c10 <HAL_GPIO_Init+0x204>
 8003c0e:	2300      	movs	r3, #0
 8003c10:	69fa      	ldr	r2, [r7, #28]
 8003c12:	f002 0203 	and.w	r2, r2, #3
 8003c16:	0092      	lsls	r2, r2, #2
 8003c18:	4093      	lsls	r3, r2
 8003c1a:	69ba      	ldr	r2, [r7, #24]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c20:	4935      	ldr	r1, [pc, #212]	; (8003cf8 <HAL_GPIO_Init+0x2ec>)
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	089b      	lsrs	r3, r3, #2
 8003c26:	3302      	adds	r3, #2
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c2e:	4b38      	ldr	r3, [pc, #224]	; (8003d10 <HAL_GPIO_Init+0x304>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	43db      	mvns	r3, r3
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d003      	beq.n	8003c52 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c52:	4a2f      	ldr	r2, [pc, #188]	; (8003d10 <HAL_GPIO_Init+0x304>)
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c58:	4b2d      	ldr	r3, [pc, #180]	; (8003d10 <HAL_GPIO_Init+0x304>)
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	43db      	mvns	r3, r3
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	4013      	ands	r3, r2
 8003c66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d003      	beq.n	8003c7c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c7c:	4a24      	ldr	r2, [pc, #144]	; (8003d10 <HAL_GPIO_Init+0x304>)
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c82:	4b23      	ldr	r3, [pc, #140]	; (8003d10 <HAL_GPIO_Init+0x304>)
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	43db      	mvns	r3, r3
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	4013      	ands	r3, r2
 8003c90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d003      	beq.n	8003ca6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ca6:	4a1a      	ldr	r2, [pc, #104]	; (8003d10 <HAL_GPIO_Init+0x304>)
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cac:	4b18      	ldr	r3, [pc, #96]	; (8003d10 <HAL_GPIO_Init+0x304>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	43db      	mvns	r3, r3
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d003      	beq.n	8003cd0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003cd0:	4a0f      	ldr	r2, [pc, #60]	; (8003d10 <HAL_GPIO_Init+0x304>)
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	61fb      	str	r3, [r7, #28]
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	2b0f      	cmp	r3, #15
 8003ce0:	f67f aea2 	bls.w	8003a28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ce4:	bf00      	nop
 8003ce6:	bf00      	nop
 8003ce8:	3724      	adds	r7, #36	; 0x24
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	40023800 	.word	0x40023800
 8003cf8:	40013800 	.word	0x40013800
 8003cfc:	40020000 	.word	0x40020000
 8003d00:	40020400 	.word	0x40020400
 8003d04:	40020800 	.word	0x40020800
 8003d08:	40020c00 	.word	0x40020c00
 8003d0c:	40021000 	.word	0x40021000
 8003d10:	40013c00 	.word	0x40013c00

08003d14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	691a      	ldr	r2, [r3, #16]
 8003d24:	887b      	ldrh	r3, [r7, #2]
 8003d26:	4013      	ands	r3, r2
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d002      	beq.n	8003d32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	73fb      	strb	r3, [r7, #15]
 8003d30:	e001      	b.n	8003d36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d32:	2300      	movs	r3, #0
 8003d34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3714      	adds	r7, #20
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	807b      	strh	r3, [r7, #2]
 8003d50:	4613      	mov	r3, r2
 8003d52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d54:	787b      	ldrb	r3, [r7, #1]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d003      	beq.n	8003d62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d5a:	887a      	ldrh	r2, [r7, #2]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d60:	e003      	b.n	8003d6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d62:	887b      	ldrh	r3, [r7, #2]
 8003d64:	041a      	lsls	r2, r3, #16
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	619a      	str	r2, [r3, #24]
}
 8003d6a:	bf00      	nop
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
	...

08003d78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	4603      	mov	r3, r0
 8003d80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003d82:	4b08      	ldr	r3, [pc, #32]	; (8003da4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d84:	695a      	ldr	r2, [r3, #20]
 8003d86:	88fb      	ldrh	r3, [r7, #6]
 8003d88:	4013      	ands	r3, r2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d006      	beq.n	8003d9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d8e:	4a05      	ldr	r2, [pc, #20]	; (8003da4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d90:	88fb      	ldrh	r3, [r7, #6]
 8003d92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d94:	88fb      	ldrh	r3, [r7, #6]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 f806 	bl	8003da8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d9c:	bf00      	nop
 8003d9e:	3708      	adds	r7, #8
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	40013c00 	.word	0x40013c00

08003da8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	4603      	mov	r3, r0
 8003db0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003db2:	bf00      	nop
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
	...

08003dc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e267      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d075      	beq.n	8003eca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dde:	4b88      	ldr	r3, [pc, #544]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f003 030c 	and.w	r3, r3, #12
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	d00c      	beq.n	8003e04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dea:	4b85      	ldr	r3, [pc, #532]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003df2:	2b08      	cmp	r3, #8
 8003df4:	d112      	bne.n	8003e1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003df6:	4b82      	ldr	r3, [pc, #520]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e02:	d10b      	bne.n	8003e1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e04:	4b7e      	ldr	r3, [pc, #504]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d05b      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x108>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d157      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e242      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e24:	d106      	bne.n	8003e34 <HAL_RCC_OscConfig+0x74>
 8003e26:	4b76      	ldr	r3, [pc, #472]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a75      	ldr	r2, [pc, #468]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e30:	6013      	str	r3, [r2, #0]
 8003e32:	e01d      	b.n	8003e70 <HAL_RCC_OscConfig+0xb0>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e3c:	d10c      	bne.n	8003e58 <HAL_RCC_OscConfig+0x98>
 8003e3e:	4b70      	ldr	r3, [pc, #448]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a6f      	ldr	r2, [pc, #444]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e48:	6013      	str	r3, [r2, #0]
 8003e4a:	4b6d      	ldr	r3, [pc, #436]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a6c      	ldr	r2, [pc, #432]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e54:	6013      	str	r3, [r2, #0]
 8003e56:	e00b      	b.n	8003e70 <HAL_RCC_OscConfig+0xb0>
 8003e58:	4b69      	ldr	r3, [pc, #420]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a68      	ldr	r2, [pc, #416]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e62:	6013      	str	r3, [r2, #0]
 8003e64:	4b66      	ldr	r3, [pc, #408]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a65      	ldr	r2, [pc, #404]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d013      	beq.n	8003ea0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e78:	f7ff f802 	bl	8002e80 <HAL_GetTick>
 8003e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e7e:	e008      	b.n	8003e92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e80:	f7fe fffe 	bl	8002e80 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b64      	cmp	r3, #100	; 0x64
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e207      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e92:	4b5b      	ldr	r3, [pc, #364]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d0f0      	beq.n	8003e80 <HAL_RCC_OscConfig+0xc0>
 8003e9e:	e014      	b.n	8003eca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea0:	f7fe ffee 	bl	8002e80 <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ea6:	e008      	b.n	8003eba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ea8:	f7fe ffea 	bl	8002e80 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b64      	cmp	r3, #100	; 0x64
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e1f3      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eba:	4b51      	ldr	r3, [pc, #324]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1f0      	bne.n	8003ea8 <HAL_RCC_OscConfig+0xe8>
 8003ec6:	e000      	b.n	8003eca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ec8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d063      	beq.n	8003f9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ed6:	4b4a      	ldr	r3, [pc, #296]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 030c 	and.w	r3, r3, #12
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00b      	beq.n	8003efa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ee2:	4b47      	ldr	r3, [pc, #284]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003eea:	2b08      	cmp	r3, #8
 8003eec:	d11c      	bne.n	8003f28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eee:	4b44      	ldr	r3, [pc, #272]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d116      	bne.n	8003f28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003efa:	4b41      	ldr	r3, [pc, #260]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d005      	beq.n	8003f12 <HAL_RCC_OscConfig+0x152>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d001      	beq.n	8003f12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e1c7      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f12:	4b3b      	ldr	r3, [pc, #236]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	4937      	ldr	r1, [pc, #220]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f26:	e03a      	b.n	8003f9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d020      	beq.n	8003f72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f30:	4b34      	ldr	r3, [pc, #208]	; (8004004 <HAL_RCC_OscConfig+0x244>)
 8003f32:	2201      	movs	r2, #1
 8003f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f36:	f7fe ffa3 	bl	8002e80 <HAL_GetTick>
 8003f3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f3c:	e008      	b.n	8003f50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f3e:	f7fe ff9f 	bl	8002e80 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d901      	bls.n	8003f50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e1a8      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f50:	4b2b      	ldr	r3, [pc, #172]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d0f0      	beq.n	8003f3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f5c:	4b28      	ldr	r3, [pc, #160]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	00db      	lsls	r3, r3, #3
 8003f6a:	4925      	ldr	r1, [pc, #148]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	600b      	str	r3, [r1, #0]
 8003f70:	e015      	b.n	8003f9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f72:	4b24      	ldr	r3, [pc, #144]	; (8004004 <HAL_RCC_OscConfig+0x244>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f78:	f7fe ff82 	bl	8002e80 <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f7e:	e008      	b.n	8003f92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f80:	f7fe ff7e 	bl	8002e80 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e187      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f92:	4b1b      	ldr	r3, [pc, #108]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1f0      	bne.n	8003f80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0308 	and.w	r3, r3, #8
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d036      	beq.n	8004018 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d016      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fb2:	4b15      	ldr	r3, [pc, #84]	; (8004008 <HAL_RCC_OscConfig+0x248>)
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb8:	f7fe ff62 	bl	8002e80 <HAL_GetTick>
 8003fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fbe:	e008      	b.n	8003fd2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fc0:	f7fe ff5e 	bl	8002e80 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e167      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fd2:	4b0b      	ldr	r3, [pc, #44]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003fd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d0f0      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x200>
 8003fde:	e01b      	b.n	8004018 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fe0:	4b09      	ldr	r3, [pc, #36]	; (8004008 <HAL_RCC_OscConfig+0x248>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fe6:	f7fe ff4b 	bl	8002e80 <HAL_GetTick>
 8003fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fec:	e00e      	b.n	800400c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fee:	f7fe ff47 	bl	8002e80 <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d907      	bls.n	800400c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e150      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
 8004000:	40023800 	.word	0x40023800
 8004004:	42470000 	.word	0x42470000
 8004008:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800400c:	4b88      	ldr	r3, [pc, #544]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 800400e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004010:	f003 0302 	and.w	r3, r3, #2
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1ea      	bne.n	8003fee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0304 	and.w	r3, r3, #4
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 8097 	beq.w	8004154 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004026:	2300      	movs	r3, #0
 8004028:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800402a:	4b81      	ldr	r3, [pc, #516]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 800402c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d10f      	bne.n	8004056 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004036:	2300      	movs	r3, #0
 8004038:	60bb      	str	r3, [r7, #8]
 800403a:	4b7d      	ldr	r3, [pc, #500]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403e:	4a7c      	ldr	r2, [pc, #496]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 8004040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004044:	6413      	str	r3, [r2, #64]	; 0x40
 8004046:	4b7a      	ldr	r3, [pc, #488]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 8004048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800404e:	60bb      	str	r3, [r7, #8]
 8004050:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004052:	2301      	movs	r3, #1
 8004054:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004056:	4b77      	ldr	r3, [pc, #476]	; (8004234 <HAL_RCC_OscConfig+0x474>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405e:	2b00      	cmp	r3, #0
 8004060:	d118      	bne.n	8004094 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004062:	4b74      	ldr	r3, [pc, #464]	; (8004234 <HAL_RCC_OscConfig+0x474>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a73      	ldr	r2, [pc, #460]	; (8004234 <HAL_RCC_OscConfig+0x474>)
 8004068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800406c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800406e:	f7fe ff07 	bl	8002e80 <HAL_GetTick>
 8004072:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004074:	e008      	b.n	8004088 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004076:	f7fe ff03 	bl	8002e80 <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	2b02      	cmp	r3, #2
 8004082:	d901      	bls.n	8004088 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e10c      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004088:	4b6a      	ldr	r3, [pc, #424]	; (8004234 <HAL_RCC_OscConfig+0x474>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004090:	2b00      	cmp	r3, #0
 8004092:	d0f0      	beq.n	8004076 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d106      	bne.n	80040aa <HAL_RCC_OscConfig+0x2ea>
 800409c:	4b64      	ldr	r3, [pc, #400]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 800409e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a0:	4a63      	ldr	r2, [pc, #396]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 80040a2:	f043 0301 	orr.w	r3, r3, #1
 80040a6:	6713      	str	r3, [r2, #112]	; 0x70
 80040a8:	e01c      	b.n	80040e4 <HAL_RCC_OscConfig+0x324>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	2b05      	cmp	r3, #5
 80040b0:	d10c      	bne.n	80040cc <HAL_RCC_OscConfig+0x30c>
 80040b2:	4b5f      	ldr	r3, [pc, #380]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 80040b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b6:	4a5e      	ldr	r2, [pc, #376]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 80040b8:	f043 0304 	orr.w	r3, r3, #4
 80040bc:	6713      	str	r3, [r2, #112]	; 0x70
 80040be:	4b5c      	ldr	r3, [pc, #368]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 80040c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c2:	4a5b      	ldr	r2, [pc, #364]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 80040c4:	f043 0301 	orr.w	r3, r3, #1
 80040c8:	6713      	str	r3, [r2, #112]	; 0x70
 80040ca:	e00b      	b.n	80040e4 <HAL_RCC_OscConfig+0x324>
 80040cc:	4b58      	ldr	r3, [pc, #352]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 80040ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d0:	4a57      	ldr	r2, [pc, #348]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 80040d2:	f023 0301 	bic.w	r3, r3, #1
 80040d6:	6713      	str	r3, [r2, #112]	; 0x70
 80040d8:	4b55      	ldr	r3, [pc, #340]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 80040da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040dc:	4a54      	ldr	r2, [pc, #336]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 80040de:	f023 0304 	bic.w	r3, r3, #4
 80040e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d015      	beq.n	8004118 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ec:	f7fe fec8 	bl	8002e80 <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040f2:	e00a      	b.n	800410a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040f4:	f7fe fec4 	bl	8002e80 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004102:	4293      	cmp	r3, r2
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e0cb      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800410a:	4b49      	ldr	r3, [pc, #292]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 800410c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d0ee      	beq.n	80040f4 <HAL_RCC_OscConfig+0x334>
 8004116:	e014      	b.n	8004142 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004118:	f7fe feb2 	bl	8002e80 <HAL_GetTick>
 800411c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800411e:	e00a      	b.n	8004136 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004120:	f7fe feae 	bl	8002e80 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	f241 3288 	movw	r2, #5000	; 0x1388
 800412e:	4293      	cmp	r3, r2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e0b5      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004136:	4b3e      	ldr	r3, [pc, #248]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 8004138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1ee      	bne.n	8004120 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004142:	7dfb      	ldrb	r3, [r7, #23]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d105      	bne.n	8004154 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004148:	4b39      	ldr	r3, [pc, #228]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 800414a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414c:	4a38      	ldr	r2, [pc, #224]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 800414e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004152:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	2b00      	cmp	r3, #0
 800415a:	f000 80a1 	beq.w	80042a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800415e:	4b34      	ldr	r3, [pc, #208]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f003 030c 	and.w	r3, r3, #12
 8004166:	2b08      	cmp	r3, #8
 8004168:	d05c      	beq.n	8004224 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	2b02      	cmp	r3, #2
 8004170:	d141      	bne.n	80041f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004172:	4b31      	ldr	r3, [pc, #196]	; (8004238 <HAL_RCC_OscConfig+0x478>)
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004178:	f7fe fe82 	bl	8002e80 <HAL_GetTick>
 800417c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800417e:	e008      	b.n	8004192 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004180:	f7fe fe7e 	bl	8002e80 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e087      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004192:	4b27      	ldr	r3, [pc, #156]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1f0      	bne.n	8004180 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	69da      	ldr	r2, [r3, #28]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	431a      	orrs	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ac:	019b      	lsls	r3, r3, #6
 80041ae:	431a      	orrs	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b4:	085b      	lsrs	r3, r3, #1
 80041b6:	3b01      	subs	r3, #1
 80041b8:	041b      	lsls	r3, r3, #16
 80041ba:	431a      	orrs	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c0:	061b      	lsls	r3, r3, #24
 80041c2:	491b      	ldr	r1, [pc, #108]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041c8:	4b1b      	ldr	r3, [pc, #108]	; (8004238 <HAL_RCC_OscConfig+0x478>)
 80041ca:	2201      	movs	r2, #1
 80041cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ce:	f7fe fe57 	bl	8002e80 <HAL_GetTick>
 80041d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041d4:	e008      	b.n	80041e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041d6:	f7fe fe53 	bl	8002e80 <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d901      	bls.n	80041e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e05c      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041e8:	4b11      	ldr	r3, [pc, #68]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d0f0      	beq.n	80041d6 <HAL_RCC_OscConfig+0x416>
 80041f4:	e054      	b.n	80042a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041f6:	4b10      	ldr	r3, [pc, #64]	; (8004238 <HAL_RCC_OscConfig+0x478>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041fc:	f7fe fe40 	bl	8002e80 <HAL_GetTick>
 8004200:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004202:	e008      	b.n	8004216 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004204:	f7fe fe3c 	bl	8002e80 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b02      	cmp	r3, #2
 8004210:	d901      	bls.n	8004216 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e045      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004216:	4b06      	ldr	r3, [pc, #24]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1f0      	bne.n	8004204 <HAL_RCC_OscConfig+0x444>
 8004222:	e03d      	b.n	80042a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d107      	bne.n	800423c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e038      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
 8004230:	40023800 	.word	0x40023800
 8004234:	40007000 	.word	0x40007000
 8004238:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800423c:	4b1b      	ldr	r3, [pc, #108]	; (80042ac <HAL_RCC_OscConfig+0x4ec>)
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d028      	beq.n	800429c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004254:	429a      	cmp	r2, r3
 8004256:	d121      	bne.n	800429c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004262:	429a      	cmp	r2, r3
 8004264:	d11a      	bne.n	800429c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800426c:	4013      	ands	r3, r2
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004272:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004274:	4293      	cmp	r3, r2
 8004276:	d111      	bne.n	800429c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004282:	085b      	lsrs	r3, r3, #1
 8004284:	3b01      	subs	r3, #1
 8004286:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004288:	429a      	cmp	r2, r3
 800428a:	d107      	bne.n	800429c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004296:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004298:	429a      	cmp	r2, r3
 800429a:	d001      	beq.n	80042a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e000      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3718      	adds	r7, #24
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	40023800 	.word	0x40023800

080042b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d101      	bne.n	80042c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e0cc      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042c4:	4b68      	ldr	r3, [pc, #416]	; (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0307 	and.w	r3, r3, #7
 80042cc:	683a      	ldr	r2, [r7, #0]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d90c      	bls.n	80042ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042d2:	4b65      	ldr	r3, [pc, #404]	; (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	b2d2      	uxtb	r2, r2
 80042d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042da:	4b63      	ldr	r3, [pc, #396]	; (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0307 	and.w	r3, r3, #7
 80042e2:	683a      	ldr	r2, [r7, #0]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d001      	beq.n	80042ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e0b8      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d020      	beq.n	800433a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	2b00      	cmp	r3, #0
 8004302:	d005      	beq.n	8004310 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004304:	4b59      	ldr	r3, [pc, #356]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	4a58      	ldr	r2, [pc, #352]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 800430a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800430e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0308 	and.w	r3, r3, #8
 8004318:	2b00      	cmp	r3, #0
 800431a:	d005      	beq.n	8004328 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800431c:	4b53      	ldr	r3, [pc, #332]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	4a52      	ldr	r2, [pc, #328]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004322:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004326:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004328:	4b50      	ldr	r3, [pc, #320]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	494d      	ldr	r1, [pc, #308]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004336:	4313      	orrs	r3, r2
 8004338:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	2b00      	cmp	r3, #0
 8004344:	d044      	beq.n	80043d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d107      	bne.n	800435e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800434e:	4b47      	ldr	r3, [pc, #284]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d119      	bne.n	800438e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e07f      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	2b02      	cmp	r3, #2
 8004364:	d003      	beq.n	800436e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800436a:	2b03      	cmp	r3, #3
 800436c:	d107      	bne.n	800437e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800436e:	4b3f      	ldr	r3, [pc, #252]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d109      	bne.n	800438e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e06f      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800437e:	4b3b      	ldr	r3, [pc, #236]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e067      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800438e:	4b37      	ldr	r3, [pc, #220]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f023 0203 	bic.w	r2, r3, #3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	4934      	ldr	r1, [pc, #208]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 800439c:	4313      	orrs	r3, r2
 800439e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043a0:	f7fe fd6e 	bl	8002e80 <HAL_GetTick>
 80043a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043a6:	e00a      	b.n	80043be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043a8:	f7fe fd6a 	bl	8002e80 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e04f      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043be:	4b2b      	ldr	r3, [pc, #172]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 020c 	and.w	r2, r3, #12
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d1eb      	bne.n	80043a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043d0:	4b25      	ldr	r3, [pc, #148]	; (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0307 	and.w	r3, r3, #7
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d20c      	bcs.n	80043f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043de:	4b22      	ldr	r3, [pc, #136]	; (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	b2d2      	uxtb	r2, r2
 80043e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043e6:	4b20      	ldr	r3, [pc, #128]	; (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0307 	and.w	r3, r3, #7
 80043ee:	683a      	ldr	r2, [r7, #0]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d001      	beq.n	80043f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e032      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0304 	and.w	r3, r3, #4
 8004400:	2b00      	cmp	r3, #0
 8004402:	d008      	beq.n	8004416 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004404:	4b19      	ldr	r3, [pc, #100]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	4916      	ldr	r1, [pc, #88]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004412:	4313      	orrs	r3, r2
 8004414:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0308 	and.w	r3, r3, #8
 800441e:	2b00      	cmp	r3, #0
 8004420:	d009      	beq.n	8004436 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004422:	4b12      	ldr	r3, [pc, #72]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	00db      	lsls	r3, r3, #3
 8004430:	490e      	ldr	r1, [pc, #56]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004432:	4313      	orrs	r3, r2
 8004434:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004436:	f000 f821 	bl	800447c <HAL_RCC_GetSysClockFreq>
 800443a:	4602      	mov	r2, r0
 800443c:	4b0b      	ldr	r3, [pc, #44]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	091b      	lsrs	r3, r3, #4
 8004442:	f003 030f 	and.w	r3, r3, #15
 8004446:	490a      	ldr	r1, [pc, #40]	; (8004470 <HAL_RCC_ClockConfig+0x1c0>)
 8004448:	5ccb      	ldrb	r3, [r1, r3]
 800444a:	fa22 f303 	lsr.w	r3, r2, r3
 800444e:	4a09      	ldr	r2, [pc, #36]	; (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 8004450:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004452:	4b09      	ldr	r3, [pc, #36]	; (8004478 <HAL_RCC_ClockConfig+0x1c8>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4618      	mov	r0, r3
 8004458:	f7fe fcce 	bl	8002df8 <HAL_InitTick>

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	40023c00 	.word	0x40023c00
 800446c:	40023800 	.word	0x40023800
 8004470:	08007d74 	.word	0x08007d74
 8004474:	20000034 	.word	0x20000034
 8004478:	20000038 	.word	0x20000038

0800447c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800447c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004480:	b094      	sub	sp, #80	; 0x50
 8004482:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004484:	2300      	movs	r3, #0
 8004486:	647b      	str	r3, [r7, #68]	; 0x44
 8004488:	2300      	movs	r3, #0
 800448a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800448c:	2300      	movs	r3, #0
 800448e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004490:	2300      	movs	r3, #0
 8004492:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004494:	4b79      	ldr	r3, [pc, #484]	; (800467c <HAL_RCC_GetSysClockFreq+0x200>)
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f003 030c 	and.w	r3, r3, #12
 800449c:	2b08      	cmp	r3, #8
 800449e:	d00d      	beq.n	80044bc <HAL_RCC_GetSysClockFreq+0x40>
 80044a0:	2b08      	cmp	r3, #8
 80044a2:	f200 80e1 	bhi.w	8004668 <HAL_RCC_GetSysClockFreq+0x1ec>
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d002      	beq.n	80044b0 <HAL_RCC_GetSysClockFreq+0x34>
 80044aa:	2b04      	cmp	r3, #4
 80044ac:	d003      	beq.n	80044b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80044ae:	e0db      	b.n	8004668 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044b0:	4b73      	ldr	r3, [pc, #460]	; (8004680 <HAL_RCC_GetSysClockFreq+0x204>)
 80044b2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80044b4:	e0db      	b.n	800466e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044b6:	4b73      	ldr	r3, [pc, #460]	; (8004684 <HAL_RCC_GetSysClockFreq+0x208>)
 80044b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044ba:	e0d8      	b.n	800466e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044bc:	4b6f      	ldr	r3, [pc, #444]	; (800467c <HAL_RCC_GetSysClockFreq+0x200>)
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044c4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044c6:	4b6d      	ldr	r3, [pc, #436]	; (800467c <HAL_RCC_GetSysClockFreq+0x200>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d063      	beq.n	800459a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044d2:	4b6a      	ldr	r3, [pc, #424]	; (800467c <HAL_RCC_GetSysClockFreq+0x200>)
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	099b      	lsrs	r3, r3, #6
 80044d8:	2200      	movs	r2, #0
 80044da:	63bb      	str	r3, [r7, #56]	; 0x38
 80044dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80044de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044e4:	633b      	str	r3, [r7, #48]	; 0x30
 80044e6:	2300      	movs	r3, #0
 80044e8:	637b      	str	r3, [r7, #52]	; 0x34
 80044ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80044ee:	4622      	mov	r2, r4
 80044f0:	462b      	mov	r3, r5
 80044f2:	f04f 0000 	mov.w	r0, #0
 80044f6:	f04f 0100 	mov.w	r1, #0
 80044fa:	0159      	lsls	r1, r3, #5
 80044fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004500:	0150      	lsls	r0, r2, #5
 8004502:	4602      	mov	r2, r0
 8004504:	460b      	mov	r3, r1
 8004506:	4621      	mov	r1, r4
 8004508:	1a51      	subs	r1, r2, r1
 800450a:	6139      	str	r1, [r7, #16]
 800450c:	4629      	mov	r1, r5
 800450e:	eb63 0301 	sbc.w	r3, r3, r1
 8004512:	617b      	str	r3, [r7, #20]
 8004514:	f04f 0200 	mov.w	r2, #0
 8004518:	f04f 0300 	mov.w	r3, #0
 800451c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004520:	4659      	mov	r1, fp
 8004522:	018b      	lsls	r3, r1, #6
 8004524:	4651      	mov	r1, sl
 8004526:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800452a:	4651      	mov	r1, sl
 800452c:	018a      	lsls	r2, r1, #6
 800452e:	4651      	mov	r1, sl
 8004530:	ebb2 0801 	subs.w	r8, r2, r1
 8004534:	4659      	mov	r1, fp
 8004536:	eb63 0901 	sbc.w	r9, r3, r1
 800453a:	f04f 0200 	mov.w	r2, #0
 800453e:	f04f 0300 	mov.w	r3, #0
 8004542:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004546:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800454a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800454e:	4690      	mov	r8, r2
 8004550:	4699      	mov	r9, r3
 8004552:	4623      	mov	r3, r4
 8004554:	eb18 0303 	adds.w	r3, r8, r3
 8004558:	60bb      	str	r3, [r7, #8]
 800455a:	462b      	mov	r3, r5
 800455c:	eb49 0303 	adc.w	r3, r9, r3
 8004560:	60fb      	str	r3, [r7, #12]
 8004562:	f04f 0200 	mov.w	r2, #0
 8004566:	f04f 0300 	mov.w	r3, #0
 800456a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800456e:	4629      	mov	r1, r5
 8004570:	024b      	lsls	r3, r1, #9
 8004572:	4621      	mov	r1, r4
 8004574:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004578:	4621      	mov	r1, r4
 800457a:	024a      	lsls	r2, r1, #9
 800457c:	4610      	mov	r0, r2
 800457e:	4619      	mov	r1, r3
 8004580:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004582:	2200      	movs	r2, #0
 8004584:	62bb      	str	r3, [r7, #40]	; 0x28
 8004586:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004588:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800458c:	f7fc fb0c 	bl	8000ba8 <__aeabi_uldivmod>
 8004590:	4602      	mov	r2, r0
 8004592:	460b      	mov	r3, r1
 8004594:	4613      	mov	r3, r2
 8004596:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004598:	e058      	b.n	800464c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800459a:	4b38      	ldr	r3, [pc, #224]	; (800467c <HAL_RCC_GetSysClockFreq+0x200>)
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	099b      	lsrs	r3, r3, #6
 80045a0:	2200      	movs	r2, #0
 80045a2:	4618      	mov	r0, r3
 80045a4:	4611      	mov	r1, r2
 80045a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80045aa:	623b      	str	r3, [r7, #32]
 80045ac:	2300      	movs	r3, #0
 80045ae:	627b      	str	r3, [r7, #36]	; 0x24
 80045b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80045b4:	4642      	mov	r2, r8
 80045b6:	464b      	mov	r3, r9
 80045b8:	f04f 0000 	mov.w	r0, #0
 80045bc:	f04f 0100 	mov.w	r1, #0
 80045c0:	0159      	lsls	r1, r3, #5
 80045c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045c6:	0150      	lsls	r0, r2, #5
 80045c8:	4602      	mov	r2, r0
 80045ca:	460b      	mov	r3, r1
 80045cc:	4641      	mov	r1, r8
 80045ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80045d2:	4649      	mov	r1, r9
 80045d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80045d8:	f04f 0200 	mov.w	r2, #0
 80045dc:	f04f 0300 	mov.w	r3, #0
 80045e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80045e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80045e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80045ec:	ebb2 040a 	subs.w	r4, r2, sl
 80045f0:	eb63 050b 	sbc.w	r5, r3, fp
 80045f4:	f04f 0200 	mov.w	r2, #0
 80045f8:	f04f 0300 	mov.w	r3, #0
 80045fc:	00eb      	lsls	r3, r5, #3
 80045fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004602:	00e2      	lsls	r2, r4, #3
 8004604:	4614      	mov	r4, r2
 8004606:	461d      	mov	r5, r3
 8004608:	4643      	mov	r3, r8
 800460a:	18e3      	adds	r3, r4, r3
 800460c:	603b      	str	r3, [r7, #0]
 800460e:	464b      	mov	r3, r9
 8004610:	eb45 0303 	adc.w	r3, r5, r3
 8004614:	607b      	str	r3, [r7, #4]
 8004616:	f04f 0200 	mov.w	r2, #0
 800461a:	f04f 0300 	mov.w	r3, #0
 800461e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004622:	4629      	mov	r1, r5
 8004624:	028b      	lsls	r3, r1, #10
 8004626:	4621      	mov	r1, r4
 8004628:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800462c:	4621      	mov	r1, r4
 800462e:	028a      	lsls	r2, r1, #10
 8004630:	4610      	mov	r0, r2
 8004632:	4619      	mov	r1, r3
 8004634:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004636:	2200      	movs	r2, #0
 8004638:	61bb      	str	r3, [r7, #24]
 800463a:	61fa      	str	r2, [r7, #28]
 800463c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004640:	f7fc fab2 	bl	8000ba8 <__aeabi_uldivmod>
 8004644:	4602      	mov	r2, r0
 8004646:	460b      	mov	r3, r1
 8004648:	4613      	mov	r3, r2
 800464a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800464c:	4b0b      	ldr	r3, [pc, #44]	; (800467c <HAL_RCC_GetSysClockFreq+0x200>)
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	0c1b      	lsrs	r3, r3, #16
 8004652:	f003 0303 	and.w	r3, r3, #3
 8004656:	3301      	adds	r3, #1
 8004658:	005b      	lsls	r3, r3, #1
 800465a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800465c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800465e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004660:	fbb2 f3f3 	udiv	r3, r2, r3
 8004664:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004666:	e002      	b.n	800466e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004668:	4b05      	ldr	r3, [pc, #20]	; (8004680 <HAL_RCC_GetSysClockFreq+0x204>)
 800466a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800466c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800466e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004670:	4618      	mov	r0, r3
 8004672:	3750      	adds	r7, #80	; 0x50
 8004674:	46bd      	mov	sp, r7
 8004676:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800467a:	bf00      	nop
 800467c:	40023800 	.word	0x40023800
 8004680:	00f42400 	.word	0x00f42400
 8004684:	007a1200 	.word	0x007a1200

08004688 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004688:	b480      	push	{r7}
 800468a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800468c:	4b03      	ldr	r3, [pc, #12]	; (800469c <HAL_RCC_GetHCLKFreq+0x14>)
 800468e:	681b      	ldr	r3, [r3, #0]
}
 8004690:	4618      	mov	r0, r3
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	20000034 	.word	0x20000034

080046a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80046a4:	f7ff fff0 	bl	8004688 <HAL_RCC_GetHCLKFreq>
 80046a8:	4602      	mov	r2, r0
 80046aa:	4b05      	ldr	r3, [pc, #20]	; (80046c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	0a9b      	lsrs	r3, r3, #10
 80046b0:	f003 0307 	and.w	r3, r3, #7
 80046b4:	4903      	ldr	r1, [pc, #12]	; (80046c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046b6:	5ccb      	ldrb	r3, [r1, r3]
 80046b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046bc:	4618      	mov	r0, r3
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	40023800 	.word	0x40023800
 80046c4:	08007d84 	.word	0x08007d84

080046c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80046cc:	f7ff ffdc 	bl	8004688 <HAL_RCC_GetHCLKFreq>
 80046d0:	4602      	mov	r2, r0
 80046d2:	4b05      	ldr	r3, [pc, #20]	; (80046e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	0b5b      	lsrs	r3, r3, #13
 80046d8:	f003 0307 	and.w	r3, r3, #7
 80046dc:	4903      	ldr	r1, [pc, #12]	; (80046ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80046de:	5ccb      	ldrb	r3, [r1, r3]
 80046e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	40023800 	.word	0x40023800
 80046ec:	08007d84 	.word	0x08007d84

080046f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e041      	b.n	8004786 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d106      	bne.n	800471c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f7fe f86a 	bl	80027f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	3304      	adds	r3, #4
 800472c:	4619      	mov	r1, r3
 800472e:	4610      	mov	r0, r2
 8004730:	f000 fc34 	bl	8004f9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800478e:	b580      	push	{r7, lr}
 8004790:	b082      	sub	sp, #8
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d101      	bne.n	80047a0 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e041      	b.n	8004824 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d106      	bne.n	80047ba <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 f839 	bl	800482c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2202      	movs	r2, #2
 80047be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	3304      	adds	r3, #4
 80047ca:	4619      	mov	r1, r3
 80047cc:	4610      	mov	r0, r2
 80047ce:	f000 fbe5 	bl	8004f9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2201      	movs	r2, #1
 80047f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	3708      	adds	r7, #8
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004834:	bf00      	nop
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800484a:	2300      	movs	r3, #0
 800484c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d104      	bne.n	800485e <HAL_TIM_IC_Start_IT+0x1e>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800485a:	b2db      	uxtb	r3, r3
 800485c:	e013      	b.n	8004886 <HAL_TIM_IC_Start_IT+0x46>
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	2b04      	cmp	r3, #4
 8004862:	d104      	bne.n	800486e <HAL_TIM_IC_Start_IT+0x2e>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800486a:	b2db      	uxtb	r3, r3
 800486c:	e00b      	b.n	8004886 <HAL_TIM_IC_Start_IT+0x46>
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	2b08      	cmp	r3, #8
 8004872:	d104      	bne.n	800487e <HAL_TIM_IC_Start_IT+0x3e>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800487a:	b2db      	uxtb	r3, r3
 800487c:	e003      	b.n	8004886 <HAL_TIM_IC_Start_IT+0x46>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004884:	b2db      	uxtb	r3, r3
 8004886:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d104      	bne.n	8004898 <HAL_TIM_IC_Start_IT+0x58>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004894:	b2db      	uxtb	r3, r3
 8004896:	e013      	b.n	80048c0 <HAL_TIM_IC_Start_IT+0x80>
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	2b04      	cmp	r3, #4
 800489c:	d104      	bne.n	80048a8 <HAL_TIM_IC_Start_IT+0x68>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	e00b      	b.n	80048c0 <HAL_TIM_IC_Start_IT+0x80>
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	2b08      	cmp	r3, #8
 80048ac:	d104      	bne.n	80048b8 <HAL_TIM_IC_Start_IT+0x78>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	e003      	b.n	80048c0 <HAL_TIM_IC_Start_IT+0x80>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80048c2:	7bbb      	ldrb	r3, [r7, #14]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d102      	bne.n	80048ce <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80048c8:	7b7b      	ldrb	r3, [r7, #13]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d001      	beq.n	80048d2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e0c2      	b.n	8004a58 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d104      	bne.n	80048e2 <HAL_TIM_IC_Start_IT+0xa2>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2202      	movs	r2, #2
 80048dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048e0:	e013      	b.n	800490a <HAL_TIM_IC_Start_IT+0xca>
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	2b04      	cmp	r3, #4
 80048e6:	d104      	bne.n	80048f2 <HAL_TIM_IC_Start_IT+0xb2>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2202      	movs	r2, #2
 80048ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048f0:	e00b      	b.n	800490a <HAL_TIM_IC_Start_IT+0xca>
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	2b08      	cmp	r3, #8
 80048f6:	d104      	bne.n	8004902 <HAL_TIM_IC_Start_IT+0xc2>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2202      	movs	r2, #2
 80048fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004900:	e003      	b.n	800490a <HAL_TIM_IC_Start_IT+0xca>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2202      	movs	r2, #2
 8004906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d104      	bne.n	800491a <HAL_TIM_IC_Start_IT+0xda>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2202      	movs	r2, #2
 8004914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004918:	e013      	b.n	8004942 <HAL_TIM_IC_Start_IT+0x102>
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2b04      	cmp	r3, #4
 800491e:	d104      	bne.n	800492a <HAL_TIM_IC_Start_IT+0xea>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004928:	e00b      	b.n	8004942 <HAL_TIM_IC_Start_IT+0x102>
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	2b08      	cmp	r3, #8
 800492e:	d104      	bne.n	800493a <HAL_TIM_IC_Start_IT+0xfa>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2202      	movs	r2, #2
 8004934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004938:	e003      	b.n	8004942 <HAL_TIM_IC_Start_IT+0x102>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2202      	movs	r2, #2
 800493e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	2b0c      	cmp	r3, #12
 8004946:	d841      	bhi.n	80049cc <HAL_TIM_IC_Start_IT+0x18c>
 8004948:	a201      	add	r2, pc, #4	; (adr r2, 8004950 <HAL_TIM_IC_Start_IT+0x110>)
 800494a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800494e:	bf00      	nop
 8004950:	08004985 	.word	0x08004985
 8004954:	080049cd 	.word	0x080049cd
 8004958:	080049cd 	.word	0x080049cd
 800495c:	080049cd 	.word	0x080049cd
 8004960:	08004997 	.word	0x08004997
 8004964:	080049cd 	.word	0x080049cd
 8004968:	080049cd 	.word	0x080049cd
 800496c:	080049cd 	.word	0x080049cd
 8004970:	080049a9 	.word	0x080049a9
 8004974:	080049cd 	.word	0x080049cd
 8004978:	080049cd 	.word	0x080049cd
 800497c:	080049cd 	.word	0x080049cd
 8004980:	080049bb 	.word	0x080049bb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68da      	ldr	r2, [r3, #12]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f042 0202 	orr.w	r2, r2, #2
 8004992:	60da      	str	r2, [r3, #12]
      break;
 8004994:	e01d      	b.n	80049d2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68da      	ldr	r2, [r3, #12]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f042 0204 	orr.w	r2, r2, #4
 80049a4:	60da      	str	r2, [r3, #12]
      break;
 80049a6:	e014      	b.n	80049d2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68da      	ldr	r2, [r3, #12]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f042 0208 	orr.w	r2, r2, #8
 80049b6:	60da      	str	r2, [r3, #12]
      break;
 80049b8:	e00b      	b.n	80049d2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68da      	ldr	r2, [r3, #12]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f042 0210 	orr.w	r2, r2, #16
 80049c8:	60da      	str	r2, [r3, #12]
      break;
 80049ca:	e002      	b.n	80049d2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	73fb      	strb	r3, [r7, #15]
      break;
 80049d0:	bf00      	nop
  }

  if (status == HAL_OK)
 80049d2:	7bfb      	ldrb	r3, [r7, #15]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d13e      	bne.n	8004a56 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2201      	movs	r2, #1
 80049de:	6839      	ldr	r1, [r7, #0]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f000 fd13 	bl	800540c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a1d      	ldr	r2, [pc, #116]	; (8004a60 <HAL_TIM_IC_Start_IT+0x220>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d018      	beq.n	8004a22 <HAL_TIM_IC_Start_IT+0x1e2>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049f8:	d013      	beq.n	8004a22 <HAL_TIM_IC_Start_IT+0x1e2>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a19      	ldr	r2, [pc, #100]	; (8004a64 <HAL_TIM_IC_Start_IT+0x224>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d00e      	beq.n	8004a22 <HAL_TIM_IC_Start_IT+0x1e2>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a17      	ldr	r2, [pc, #92]	; (8004a68 <HAL_TIM_IC_Start_IT+0x228>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d009      	beq.n	8004a22 <HAL_TIM_IC_Start_IT+0x1e2>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a16      	ldr	r2, [pc, #88]	; (8004a6c <HAL_TIM_IC_Start_IT+0x22c>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d004      	beq.n	8004a22 <HAL_TIM_IC_Start_IT+0x1e2>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a14      	ldr	r2, [pc, #80]	; (8004a70 <HAL_TIM_IC_Start_IT+0x230>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d111      	bne.n	8004a46 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f003 0307 	and.w	r3, r3, #7
 8004a2c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	2b06      	cmp	r3, #6
 8004a32:	d010      	beq.n	8004a56 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f042 0201 	orr.w	r2, r2, #1
 8004a42:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a44:	e007      	b.n	8004a56 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f042 0201 	orr.w	r2, r2, #1
 8004a54:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3710      	adds	r7, #16
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	40010000 	.word	0x40010000
 8004a64:	40000400 	.word	0x40000400
 8004a68:	40000800 	.word	0x40000800
 8004a6c:	40000c00 	.word	0x40000c00
 8004a70:	40014000 	.word	0x40014000

08004a74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d122      	bne.n	8004ad0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	f003 0302 	and.w	r3, r3, #2
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d11b      	bne.n	8004ad0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f06f 0202 	mvn.w	r2, #2
 8004aa0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	f003 0303 	and.w	r3, r3, #3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d003      	beq.n	8004abe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f7fc fd66 	bl	8001588 <HAL_TIM_IC_CaptureCallback>
 8004abc:	e005      	b.n	8004aca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 fa4d 	bl	8004f5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 fa54 	bl	8004f72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	f003 0304 	and.w	r3, r3, #4
 8004ada:	2b04      	cmp	r3, #4
 8004adc:	d122      	bne.n	8004b24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	f003 0304 	and.w	r3, r3, #4
 8004ae8:	2b04      	cmp	r3, #4
 8004aea:	d11b      	bne.n	8004b24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f06f 0204 	mvn.w	r2, #4
 8004af4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2202      	movs	r2, #2
 8004afa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d003      	beq.n	8004b12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f7fc fd3c 	bl	8001588 <HAL_TIM_IC_CaptureCallback>
 8004b10:	e005      	b.n	8004b1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 fa23 	bl	8004f5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 fa2a 	bl	8004f72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	f003 0308 	and.w	r3, r3, #8
 8004b2e:	2b08      	cmp	r3, #8
 8004b30:	d122      	bne.n	8004b78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	f003 0308 	and.w	r3, r3, #8
 8004b3c:	2b08      	cmp	r3, #8
 8004b3e:	d11b      	bne.n	8004b78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f06f 0208 	mvn.w	r2, #8
 8004b48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2204      	movs	r2, #4
 8004b4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	69db      	ldr	r3, [r3, #28]
 8004b56:	f003 0303 	and.w	r3, r3, #3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d003      	beq.n	8004b66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f7fc fd12 	bl	8001588 <HAL_TIM_IC_CaptureCallback>
 8004b64:	e005      	b.n	8004b72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f9f9 	bl	8004f5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f000 fa00 	bl	8004f72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	f003 0310 	and.w	r3, r3, #16
 8004b82:	2b10      	cmp	r3, #16
 8004b84:	d122      	bne.n	8004bcc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	f003 0310 	and.w	r3, r3, #16
 8004b90:	2b10      	cmp	r3, #16
 8004b92:	d11b      	bne.n	8004bcc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f06f 0210 	mvn.w	r2, #16
 8004b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2208      	movs	r2, #8
 8004ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	69db      	ldr	r3, [r3, #28]
 8004baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d003      	beq.n	8004bba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f7fc fce8 	bl	8001588 <HAL_TIM_IC_CaptureCallback>
 8004bb8:	e005      	b.n	8004bc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f9cf 	bl	8004f5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 f9d6 	bl	8004f72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d10e      	bne.n	8004bf8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	f003 0301 	and.w	r3, r3, #1
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d107      	bne.n	8004bf8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f06f 0201 	mvn.w	r2, #1
 8004bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 f9a9 	bl	8004f4a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c02:	2b80      	cmp	r3, #128	; 0x80
 8004c04:	d10e      	bne.n	8004c24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c10:	2b80      	cmp	r3, #128	; 0x80
 8004c12:	d107      	bne.n	8004c24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 fc92 	bl	8005548 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2e:	2b40      	cmp	r3, #64	; 0x40
 8004c30:	d10e      	bne.n	8004c50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3c:	2b40      	cmp	r3, #64	; 0x40
 8004c3e:	d107      	bne.n	8004c50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 f99b 	bl	8004f86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	f003 0320 	and.w	r3, r3, #32
 8004c5a:	2b20      	cmp	r3, #32
 8004c5c:	d10e      	bne.n	8004c7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	f003 0320 	and.w	r3, r3, #32
 8004c68:	2b20      	cmp	r3, #32
 8004c6a:	d107      	bne.n	8004c7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f06f 0220 	mvn.w	r2, #32
 8004c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 fc5c 	bl	8005534 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c7c:	bf00      	nop
 8004c7e:	3708      	adds	r7, #8
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b086      	sub	sp, #24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c90:	2300      	movs	r3, #0
 8004c92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d101      	bne.n	8004ca2 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004c9e:	2302      	movs	r3, #2
 8004ca0:	e088      	b.n	8004db4 <HAL_TIM_IC_ConfigChannel+0x130>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d11b      	bne.n	8004ce8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6818      	ldr	r0, [r3, #0]
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	6819      	ldr	r1, [r3, #0]
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	685a      	ldr	r2, [r3, #4]
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	f000 f9ec 	bl	800509c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	699a      	ldr	r2, [r3, #24]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f022 020c 	bic.w	r2, r2, #12
 8004cd2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6999      	ldr	r1, [r3, #24]
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	689a      	ldr	r2, [r3, #8]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	619a      	str	r2, [r3, #24]
 8004ce6:	e060      	b.n	8004daa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2b04      	cmp	r3, #4
 8004cec:	d11c      	bne.n	8004d28 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6818      	ldr	r0, [r3, #0]
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	6819      	ldr	r1, [r3, #0]
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	685a      	ldr	r2, [r3, #4]
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	f000 fa64 	bl	80051ca <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	699a      	ldr	r2, [r3, #24]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004d10:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	6999      	ldr	r1, [r3, #24]
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	021a      	lsls	r2, r3, #8
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	430a      	orrs	r2, r1
 8004d24:	619a      	str	r2, [r3, #24]
 8004d26:	e040      	b.n	8004daa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2b08      	cmp	r3, #8
 8004d2c:	d11b      	bne.n	8004d66 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6818      	ldr	r0, [r3, #0]
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	6819      	ldr	r1, [r3, #0]
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	685a      	ldr	r2, [r3, #4]
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	f000 fab1 	bl	80052a4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	69da      	ldr	r2, [r3, #28]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f022 020c 	bic.w	r2, r2, #12
 8004d50:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	69d9      	ldr	r1, [r3, #28]
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	689a      	ldr	r2, [r3, #8]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	61da      	str	r2, [r3, #28]
 8004d64:	e021      	b.n	8004daa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2b0c      	cmp	r3, #12
 8004d6a:	d11c      	bne.n	8004da6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6818      	ldr	r0, [r3, #0]
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	6819      	ldr	r1, [r3, #0]
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	685a      	ldr	r2, [r3, #4]
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	f000 face 	bl	800531c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	69da      	ldr	r2, [r3, #28]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004d8e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	69d9      	ldr	r1, [r3, #28]
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	021a      	lsls	r2, r3, #8
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	430a      	orrs	r2, r1
 8004da2:	61da      	str	r2, [r3, #28]
 8004da4:	e001      	b.n	8004daa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004db2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3718      	adds	r7, #24
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d101      	bne.n	8004dd8 <HAL_TIM_ConfigClockSource+0x1c>
 8004dd4:	2302      	movs	r3, #2
 8004dd6:	e0b4      	b.n	8004f42 <HAL_TIM_ConfigClockSource+0x186>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2202      	movs	r2, #2
 8004de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004df6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dfe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68ba      	ldr	r2, [r7, #8]
 8004e06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e10:	d03e      	beq.n	8004e90 <HAL_TIM_ConfigClockSource+0xd4>
 8004e12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e16:	f200 8087 	bhi.w	8004f28 <HAL_TIM_ConfigClockSource+0x16c>
 8004e1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e1e:	f000 8086 	beq.w	8004f2e <HAL_TIM_ConfigClockSource+0x172>
 8004e22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e26:	d87f      	bhi.n	8004f28 <HAL_TIM_ConfigClockSource+0x16c>
 8004e28:	2b70      	cmp	r3, #112	; 0x70
 8004e2a:	d01a      	beq.n	8004e62 <HAL_TIM_ConfigClockSource+0xa6>
 8004e2c:	2b70      	cmp	r3, #112	; 0x70
 8004e2e:	d87b      	bhi.n	8004f28 <HAL_TIM_ConfigClockSource+0x16c>
 8004e30:	2b60      	cmp	r3, #96	; 0x60
 8004e32:	d050      	beq.n	8004ed6 <HAL_TIM_ConfigClockSource+0x11a>
 8004e34:	2b60      	cmp	r3, #96	; 0x60
 8004e36:	d877      	bhi.n	8004f28 <HAL_TIM_ConfigClockSource+0x16c>
 8004e38:	2b50      	cmp	r3, #80	; 0x50
 8004e3a:	d03c      	beq.n	8004eb6 <HAL_TIM_ConfigClockSource+0xfa>
 8004e3c:	2b50      	cmp	r3, #80	; 0x50
 8004e3e:	d873      	bhi.n	8004f28 <HAL_TIM_ConfigClockSource+0x16c>
 8004e40:	2b40      	cmp	r3, #64	; 0x40
 8004e42:	d058      	beq.n	8004ef6 <HAL_TIM_ConfigClockSource+0x13a>
 8004e44:	2b40      	cmp	r3, #64	; 0x40
 8004e46:	d86f      	bhi.n	8004f28 <HAL_TIM_ConfigClockSource+0x16c>
 8004e48:	2b30      	cmp	r3, #48	; 0x30
 8004e4a:	d064      	beq.n	8004f16 <HAL_TIM_ConfigClockSource+0x15a>
 8004e4c:	2b30      	cmp	r3, #48	; 0x30
 8004e4e:	d86b      	bhi.n	8004f28 <HAL_TIM_ConfigClockSource+0x16c>
 8004e50:	2b20      	cmp	r3, #32
 8004e52:	d060      	beq.n	8004f16 <HAL_TIM_ConfigClockSource+0x15a>
 8004e54:	2b20      	cmp	r3, #32
 8004e56:	d867      	bhi.n	8004f28 <HAL_TIM_ConfigClockSource+0x16c>
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d05c      	beq.n	8004f16 <HAL_TIM_ConfigClockSource+0x15a>
 8004e5c:	2b10      	cmp	r3, #16
 8004e5e:	d05a      	beq.n	8004f16 <HAL_TIM_ConfigClockSource+0x15a>
 8004e60:	e062      	b.n	8004f28 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6818      	ldr	r0, [r3, #0]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	6899      	ldr	r1, [r3, #8]
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	685a      	ldr	r2, [r3, #4]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	f000 faab 	bl	80053cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68ba      	ldr	r2, [r7, #8]
 8004e8c:	609a      	str	r2, [r3, #8]
      break;
 8004e8e:	e04f      	b.n	8004f30 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6818      	ldr	r0, [r3, #0]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	6899      	ldr	r1, [r3, #8]
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	685a      	ldr	r2, [r3, #4]
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	f000 fa94 	bl	80053cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	689a      	ldr	r2, [r3, #8]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004eb2:	609a      	str	r2, [r3, #8]
      break;
 8004eb4:	e03c      	b.n	8004f30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6818      	ldr	r0, [r3, #0]
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	6859      	ldr	r1, [r3, #4]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	f000 f952 	bl	800516c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2150      	movs	r1, #80	; 0x50
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f000 fa61 	bl	8005396 <TIM_ITRx_SetConfig>
      break;
 8004ed4:	e02c      	b.n	8004f30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6818      	ldr	r0, [r3, #0]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	6859      	ldr	r1, [r3, #4]
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	f000 f9ae 	bl	8005244 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2160      	movs	r1, #96	; 0x60
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f000 fa51 	bl	8005396 <TIM_ITRx_SetConfig>
      break;
 8004ef4:	e01c      	b.n	8004f30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6818      	ldr	r0, [r3, #0]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	6859      	ldr	r1, [r3, #4]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	461a      	mov	r2, r3
 8004f04:	f000 f932 	bl	800516c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2140      	movs	r1, #64	; 0x40
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f000 fa41 	bl	8005396 <TIM_ITRx_SetConfig>
      break;
 8004f14:	e00c      	b.n	8004f30 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4619      	mov	r1, r3
 8004f20:	4610      	mov	r0, r2
 8004f22:	f000 fa38 	bl	8005396 <TIM_ITRx_SetConfig>
      break;
 8004f26:	e003      	b.n	8004f30 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f2c:	e000      	b.n	8004f30 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3710      	adds	r7, #16
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}

08004f4a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b083      	sub	sp, #12
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004f52:	bf00      	nop
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f5e:	b480      	push	{r7}
 8004f60:	b083      	sub	sp, #12
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f66:	bf00      	nop
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr

08004f72 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b083      	sub	sp, #12
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f7a:	bf00      	nop
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b083      	sub	sp, #12
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f8e:	bf00      	nop
 8004f90:	370c      	adds	r7, #12
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
	...

08004f9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a34      	ldr	r2, [pc, #208]	; (8005080 <TIM_Base_SetConfig+0xe4>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d00f      	beq.n	8004fd4 <TIM_Base_SetConfig+0x38>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fba:	d00b      	beq.n	8004fd4 <TIM_Base_SetConfig+0x38>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a31      	ldr	r2, [pc, #196]	; (8005084 <TIM_Base_SetConfig+0xe8>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d007      	beq.n	8004fd4 <TIM_Base_SetConfig+0x38>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a30      	ldr	r2, [pc, #192]	; (8005088 <TIM_Base_SetConfig+0xec>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d003      	beq.n	8004fd4 <TIM_Base_SetConfig+0x38>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a2f      	ldr	r2, [pc, #188]	; (800508c <TIM_Base_SetConfig+0xf0>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d108      	bne.n	8004fe6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a25      	ldr	r2, [pc, #148]	; (8005080 <TIM_Base_SetConfig+0xe4>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d01b      	beq.n	8005026 <TIM_Base_SetConfig+0x8a>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ff4:	d017      	beq.n	8005026 <TIM_Base_SetConfig+0x8a>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a22      	ldr	r2, [pc, #136]	; (8005084 <TIM_Base_SetConfig+0xe8>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d013      	beq.n	8005026 <TIM_Base_SetConfig+0x8a>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a21      	ldr	r2, [pc, #132]	; (8005088 <TIM_Base_SetConfig+0xec>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d00f      	beq.n	8005026 <TIM_Base_SetConfig+0x8a>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a20      	ldr	r2, [pc, #128]	; (800508c <TIM_Base_SetConfig+0xf0>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d00b      	beq.n	8005026 <TIM_Base_SetConfig+0x8a>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a1f      	ldr	r2, [pc, #124]	; (8005090 <TIM_Base_SetConfig+0xf4>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d007      	beq.n	8005026 <TIM_Base_SetConfig+0x8a>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a1e      	ldr	r2, [pc, #120]	; (8005094 <TIM_Base_SetConfig+0xf8>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d003      	beq.n	8005026 <TIM_Base_SetConfig+0x8a>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a1d      	ldr	r2, [pc, #116]	; (8005098 <TIM_Base_SetConfig+0xfc>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d108      	bne.n	8005038 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800502c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	4313      	orrs	r3, r2
 8005036:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	4313      	orrs	r3, r2
 8005044:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	689a      	ldr	r2, [r3, #8]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a08      	ldr	r2, [pc, #32]	; (8005080 <TIM_Base_SetConfig+0xe4>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d103      	bne.n	800506c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	691a      	ldr	r2, [r3, #16]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	615a      	str	r2, [r3, #20]
}
 8005072:	bf00      	nop
 8005074:	3714      	adds	r7, #20
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	40010000 	.word	0x40010000
 8005084:	40000400 	.word	0x40000400
 8005088:	40000800 	.word	0x40000800
 800508c:	40000c00 	.word	0x40000c00
 8005090:	40014000 	.word	0x40014000
 8005094:	40014400 	.word	0x40014400
 8005098:	40014800 	.word	0x40014800

0800509c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800509c:	b480      	push	{r7}
 800509e:	b087      	sub	sp, #28
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	607a      	str	r2, [r7, #4]
 80050a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	f023 0201 	bic.w	r2, r3, #1
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6a1b      	ldr	r3, [r3, #32]
 80050c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	4a24      	ldr	r2, [pc, #144]	; (8005158 <TIM_TI1_SetConfig+0xbc>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d013      	beq.n	80050f2 <TIM_TI1_SetConfig+0x56>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d0:	d00f      	beq.n	80050f2 <TIM_TI1_SetConfig+0x56>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	4a21      	ldr	r2, [pc, #132]	; (800515c <TIM_TI1_SetConfig+0xc0>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d00b      	beq.n	80050f2 <TIM_TI1_SetConfig+0x56>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	4a20      	ldr	r2, [pc, #128]	; (8005160 <TIM_TI1_SetConfig+0xc4>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d007      	beq.n	80050f2 <TIM_TI1_SetConfig+0x56>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	4a1f      	ldr	r2, [pc, #124]	; (8005164 <TIM_TI1_SetConfig+0xc8>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d003      	beq.n	80050f2 <TIM_TI1_SetConfig+0x56>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	4a1e      	ldr	r2, [pc, #120]	; (8005168 <TIM_TI1_SetConfig+0xcc>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d101      	bne.n	80050f6 <TIM_TI1_SetConfig+0x5a>
 80050f2:	2301      	movs	r3, #1
 80050f4:	e000      	b.n	80050f8 <TIM_TI1_SetConfig+0x5c>
 80050f6:	2300      	movs	r3, #0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d008      	beq.n	800510e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	f023 0303 	bic.w	r3, r3, #3
 8005102:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4313      	orrs	r3, r2
 800510a:	617b      	str	r3, [r7, #20]
 800510c:	e003      	b.n	8005116 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	f043 0301 	orr.w	r3, r3, #1
 8005114:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800511c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	011b      	lsls	r3, r3, #4
 8005122:	b2db      	uxtb	r3, r3
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	4313      	orrs	r3, r2
 8005128:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	f023 030a 	bic.w	r3, r3, #10
 8005130:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	f003 030a 	and.w	r3, r3, #10
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	4313      	orrs	r3, r2
 800513c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	621a      	str	r2, [r3, #32]
}
 800514a:	bf00      	nop
 800514c:	371c      	adds	r7, #28
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	40010000 	.word	0x40010000
 800515c:	40000400 	.word	0x40000400
 8005160:	40000800 	.word	0x40000800
 8005164:	40000c00 	.word	0x40000c00
 8005168:	40014000 	.word	0x40014000

0800516c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800516c:	b480      	push	{r7}
 800516e:	b087      	sub	sp, #28
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6a1b      	ldr	r3, [r3, #32]
 800517c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	f023 0201 	bic.w	r2, r3, #1
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005196:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	011b      	lsls	r3, r3, #4
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	4313      	orrs	r3, r2
 80051a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f023 030a 	bic.w	r3, r3, #10
 80051a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	621a      	str	r2, [r3, #32]
}
 80051be:	bf00      	nop
 80051c0:	371c      	adds	r7, #28
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr

080051ca <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80051ca:	b480      	push	{r7}
 80051cc:	b087      	sub	sp, #28
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	60f8      	str	r0, [r7, #12]
 80051d2:	60b9      	str	r1, [r7, #8]
 80051d4:	607a      	str	r2, [r7, #4]
 80051d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6a1b      	ldr	r3, [r3, #32]
 80051dc:	f023 0210 	bic.w	r2, r3, #16
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6a1b      	ldr	r3, [r3, #32]
 80051ee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051f6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	021b      	lsls	r3, r3, #8
 80051fc:	697a      	ldr	r2, [r7, #20]
 80051fe:	4313      	orrs	r3, r2
 8005200:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005208:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	031b      	lsls	r3, r3, #12
 800520e:	b29b      	uxth	r3, r3
 8005210:	697a      	ldr	r2, [r7, #20]
 8005212:	4313      	orrs	r3, r2
 8005214:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800521c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	011b      	lsls	r3, r3, #4
 8005222:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005226:	693a      	ldr	r2, [r7, #16]
 8005228:	4313      	orrs	r3, r2
 800522a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	621a      	str	r2, [r3, #32]
}
 8005238:	bf00      	nop
 800523a:	371c      	adds	r7, #28
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005244:	b480      	push	{r7}
 8005246:	b087      	sub	sp, #28
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6a1b      	ldr	r3, [r3, #32]
 8005254:	f023 0210 	bic.w	r2, r3, #16
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	699b      	ldr	r3, [r3, #24]
 8005260:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800526e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	031b      	lsls	r3, r3, #12
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	4313      	orrs	r3, r2
 8005278:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005280:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	011b      	lsls	r3, r3, #4
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	4313      	orrs	r3, r2
 800528a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	693a      	ldr	r2, [r7, #16]
 8005296:	621a      	str	r2, [r3, #32]
}
 8005298:	bf00      	nop
 800529a:	371c      	adds	r7, #28
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b087      	sub	sp, #28
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	607a      	str	r2, [r7, #4]
 80052b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	69db      	ldr	r3, [r3, #28]
 80052c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6a1b      	ldr	r3, [r3, #32]
 80052c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	f023 0303 	bic.w	r3, r3, #3
 80052d0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80052d2:	697a      	ldr	r2, [r7, #20]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052e0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	011b      	lsls	r3, r3, #4
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80052f4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	021b      	lsls	r3, r3, #8
 80052fa:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80052fe:	693a      	ldr	r2, [r7, #16]
 8005300:	4313      	orrs	r3, r2
 8005302:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	621a      	str	r2, [r3, #32]
}
 8005310:	bf00      	nop
 8005312:	371c      	adds	r7, #28
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800531c:	b480      	push	{r7}
 800531e:	b087      	sub	sp, #28
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	607a      	str	r2, [r7, #4]
 8005328:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6a1b      	ldr	r3, [r3, #32]
 800532e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	69db      	ldr	r3, [r3, #28]
 800533a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005348:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	021b      	lsls	r3, r3, #8
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	4313      	orrs	r3, r2
 8005352:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800535a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	031b      	lsls	r3, r3, #12
 8005360:	b29b      	uxth	r3, r3
 8005362:	697a      	ldr	r2, [r7, #20]
 8005364:	4313      	orrs	r3, r2
 8005366:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800536e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	031b      	lsls	r3, r3, #12
 8005374:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	4313      	orrs	r3, r2
 800537c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	693a      	ldr	r2, [r7, #16]
 8005388:	621a      	str	r2, [r3, #32]
}
 800538a:	bf00      	nop
 800538c:	371c      	adds	r7, #28
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005396:	b480      	push	{r7}
 8005398:	b085      	sub	sp, #20
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
 800539e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053ae:	683a      	ldr	r2, [r7, #0]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	f043 0307 	orr.w	r3, r3, #7
 80053b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	609a      	str	r2, [r3, #8]
}
 80053c0:	bf00      	nop
 80053c2:	3714      	adds	r7, #20
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b087      	sub	sp, #28
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
 80053d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	021a      	lsls	r2, r3, #8
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	431a      	orrs	r2, r3
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	697a      	ldr	r2, [r7, #20]
 80053fe:	609a      	str	r2, [r3, #8]
}
 8005400:	bf00      	nop
 8005402:	371c      	adds	r7, #28
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800540c:	b480      	push	{r7}
 800540e:	b087      	sub	sp, #28
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	f003 031f 	and.w	r3, r3, #31
 800541e:	2201      	movs	r2, #1
 8005420:	fa02 f303 	lsl.w	r3, r2, r3
 8005424:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6a1a      	ldr	r2, [r3, #32]
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	43db      	mvns	r3, r3
 800542e:	401a      	ands	r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6a1a      	ldr	r2, [r3, #32]
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	f003 031f 	and.w	r3, r3, #31
 800543e:	6879      	ldr	r1, [r7, #4]
 8005440:	fa01 f303 	lsl.w	r3, r1, r3
 8005444:	431a      	orrs	r2, r3
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	621a      	str	r2, [r3, #32]
}
 800544a:	bf00      	nop
 800544c:	371c      	adds	r7, #28
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
	...

08005458 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005468:	2b01      	cmp	r3, #1
 800546a:	d101      	bne.n	8005470 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800546c:	2302      	movs	r3, #2
 800546e:	e050      	b.n	8005512 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2202      	movs	r2, #2
 800547c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005496:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	4313      	orrs	r3, r2
 80054a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a1c      	ldr	r2, [pc, #112]	; (8005520 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d018      	beq.n	80054e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054bc:	d013      	beq.n	80054e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a18      	ldr	r2, [pc, #96]	; (8005524 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d00e      	beq.n	80054e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a16      	ldr	r2, [pc, #88]	; (8005528 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d009      	beq.n	80054e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a15      	ldr	r2, [pc, #84]	; (800552c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d004      	beq.n	80054e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a13      	ldr	r2, [pc, #76]	; (8005530 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d10c      	bne.n	8005500 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	68ba      	ldr	r2, [r7, #8]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68ba      	ldr	r2, [r7, #8]
 80054fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3714      	adds	r7, #20
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	40010000 	.word	0x40010000
 8005524:	40000400 	.word	0x40000400
 8005528:	40000800 	.word	0x40000800
 800552c:	40000c00 	.word	0x40000c00
 8005530:	40014000 	.word	0x40014000

08005534 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005550:	bf00      	nop
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d101      	bne.n	800556e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e03f      	b.n	80055ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	d106      	bne.n	8005588 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f7fd f998 	bl	80028b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2224      	movs	r2, #36	; 0x24
 800558c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68da      	ldr	r2, [r3, #12]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800559e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 fd23 	bl	8005fec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	691a      	ldr	r2, [r3, #16]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	695a      	ldr	r2, [r3, #20]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68da      	ldr	r2, [r3, #12]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2220      	movs	r2, #32
 80055e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2220      	movs	r2, #32
 80055e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3708      	adds	r7, #8
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80055f6:	b480      	push	{r7}
 80055f8:	b085      	sub	sp, #20
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	60f8      	str	r0, [r7, #12]
 80055fe:	60b9      	str	r1, [r7, #8]
 8005600:	4613      	mov	r3, r2
 8005602:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800560a:	b2db      	uxtb	r3, r3
 800560c:	2b20      	cmp	r3, #32
 800560e:	d130      	bne.n	8005672 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d002      	beq.n	800561c <HAL_UART_Transmit_IT+0x26>
 8005616:	88fb      	ldrh	r3, [r7, #6]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d101      	bne.n	8005620 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e029      	b.n	8005674 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005626:	2b01      	cmp	r3, #1
 8005628:	d101      	bne.n	800562e <HAL_UART_Transmit_IT+0x38>
 800562a:	2302      	movs	r3, #2
 800562c:	e022      	b.n	8005674 <HAL_UART_Transmit_IT+0x7e>
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	68ba      	ldr	r2, [r7, #8]
 800563a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	88fa      	ldrh	r2, [r7, #6]
 8005640:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	88fa      	ldrh	r2, [r7, #6]
 8005646:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2221      	movs	r2, #33	; 0x21
 8005652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68da      	ldr	r2, [r3, #12]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800566c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800566e:	2300      	movs	r3, #0
 8005670:	e000      	b.n	8005674 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005672:	2302      	movs	r3, #2
  }
}
 8005674:	4618      	mov	r0, r3
 8005676:	3714      	adds	r7, #20
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	4613      	mov	r3, r2
 800568c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b20      	cmp	r3, #32
 8005698:	d11d      	bne.n	80056d6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d002      	beq.n	80056a6 <HAL_UART_Receive_IT+0x26>
 80056a0:	88fb      	ldrh	r3, [r7, #6]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d101      	bne.n	80056aa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e016      	b.n	80056d8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d101      	bne.n	80056b8 <HAL_UART_Receive_IT+0x38>
 80056b4:	2302      	movs	r3, #2
 80056b6:	e00f      	b.n	80056d8 <HAL_UART_Receive_IT+0x58>
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80056c6:	88fb      	ldrh	r3, [r7, #6]
 80056c8:	461a      	mov	r2, r3
 80056ca:	68b9      	ldr	r1, [r7, #8]
 80056cc:	68f8      	ldr	r0, [r7, #12]
 80056ce:	f000 fab5 	bl	8005c3c <UART_Start_Receive_IT>
 80056d2:	4603      	mov	r3, r0
 80056d4:	e000      	b.n	80056d8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80056d6:	2302      	movs	r3, #2
  }
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3710      	adds	r7, #16
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b0ba      	sub	sp, #232	; 0xe8
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005706:	2300      	movs	r3, #0
 8005708:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800570c:	2300      	movs	r3, #0
 800570e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005716:	f003 030f 	and.w	r3, r3, #15
 800571a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800571e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005722:	2b00      	cmp	r3, #0
 8005724:	d10f      	bne.n	8005746 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800572a:	f003 0320 	and.w	r3, r3, #32
 800572e:	2b00      	cmp	r3, #0
 8005730:	d009      	beq.n	8005746 <HAL_UART_IRQHandler+0x66>
 8005732:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005736:	f003 0320 	and.w	r3, r3, #32
 800573a:	2b00      	cmp	r3, #0
 800573c:	d003      	beq.n	8005746 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 fb99 	bl	8005e76 <UART_Receive_IT>
      return;
 8005744:	e256      	b.n	8005bf4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005746:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800574a:	2b00      	cmp	r3, #0
 800574c:	f000 80de 	beq.w	800590c <HAL_UART_IRQHandler+0x22c>
 8005750:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005754:	f003 0301 	and.w	r3, r3, #1
 8005758:	2b00      	cmp	r3, #0
 800575a:	d106      	bne.n	800576a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800575c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005760:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005764:	2b00      	cmp	r3, #0
 8005766:	f000 80d1 	beq.w	800590c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800576a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800576e:	f003 0301 	and.w	r3, r3, #1
 8005772:	2b00      	cmp	r3, #0
 8005774:	d00b      	beq.n	800578e <HAL_UART_IRQHandler+0xae>
 8005776:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800577a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800577e:	2b00      	cmp	r3, #0
 8005780:	d005      	beq.n	800578e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005786:	f043 0201 	orr.w	r2, r3, #1
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800578e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005792:	f003 0304 	and.w	r3, r3, #4
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00b      	beq.n	80057b2 <HAL_UART_IRQHandler+0xd2>
 800579a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800579e:	f003 0301 	and.w	r3, r3, #1
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d005      	beq.n	80057b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057aa:	f043 0202 	orr.w	r2, r3, #2
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057b6:	f003 0302 	and.w	r3, r3, #2
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00b      	beq.n	80057d6 <HAL_UART_IRQHandler+0xf6>
 80057be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057c2:	f003 0301 	and.w	r3, r3, #1
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d005      	beq.n	80057d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ce:	f043 0204 	orr.w	r2, r3, #4
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80057d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057da:	f003 0308 	and.w	r3, r3, #8
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d011      	beq.n	8005806 <HAL_UART_IRQHandler+0x126>
 80057e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057e6:	f003 0320 	and.w	r3, r3, #32
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d105      	bne.n	80057fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80057ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057f2:	f003 0301 	and.w	r3, r3, #1
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d005      	beq.n	8005806 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fe:	f043 0208 	orr.w	r2, r3, #8
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580a:	2b00      	cmp	r3, #0
 800580c:	f000 81ed 	beq.w	8005bea <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005814:	f003 0320 	and.w	r3, r3, #32
 8005818:	2b00      	cmp	r3, #0
 800581a:	d008      	beq.n	800582e <HAL_UART_IRQHandler+0x14e>
 800581c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005820:	f003 0320 	and.w	r3, r3, #32
 8005824:	2b00      	cmp	r3, #0
 8005826:	d002      	beq.n	800582e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 fb24 	bl	8005e76 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	695b      	ldr	r3, [r3, #20]
 8005834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005838:	2b40      	cmp	r3, #64	; 0x40
 800583a:	bf0c      	ite	eq
 800583c:	2301      	moveq	r3, #1
 800583e:	2300      	movne	r3, #0
 8005840:	b2db      	uxtb	r3, r3
 8005842:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584a:	f003 0308 	and.w	r3, r3, #8
 800584e:	2b00      	cmp	r3, #0
 8005850:	d103      	bne.n	800585a <HAL_UART_IRQHandler+0x17a>
 8005852:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005856:	2b00      	cmp	r3, #0
 8005858:	d04f      	beq.n	80058fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 fa2c 	bl	8005cb8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800586a:	2b40      	cmp	r3, #64	; 0x40
 800586c:	d141      	bne.n	80058f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	3314      	adds	r3, #20
 8005874:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005878:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800587c:	e853 3f00 	ldrex	r3, [r3]
 8005880:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005884:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005888:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800588c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	3314      	adds	r3, #20
 8005896:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800589a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800589e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80058a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80058aa:	e841 2300 	strex	r3, r2, [r1]
 80058ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80058b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d1d9      	bne.n	800586e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d013      	beq.n	80058ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c6:	4a7d      	ldr	r2, [pc, #500]	; (8005abc <HAL_UART_IRQHandler+0x3dc>)
 80058c8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7fe f879 	bl	80039c6 <HAL_DMA_Abort_IT>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d016      	beq.n	8005908 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80058e4:	4610      	mov	r0, r2
 80058e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058e8:	e00e      	b.n	8005908 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 f990 	bl	8005c10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058f0:	e00a      	b.n	8005908 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 f98c 	bl	8005c10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058f8:	e006      	b.n	8005908 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f988 	bl	8005c10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005906:	e170      	b.n	8005bea <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005908:	bf00      	nop
    return;
 800590a:	e16e      	b.n	8005bea <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005910:	2b01      	cmp	r3, #1
 8005912:	f040 814a 	bne.w	8005baa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800591a:	f003 0310 	and.w	r3, r3, #16
 800591e:	2b00      	cmp	r3, #0
 8005920:	f000 8143 	beq.w	8005baa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005928:	f003 0310 	and.w	r3, r3, #16
 800592c:	2b00      	cmp	r3, #0
 800592e:	f000 813c 	beq.w	8005baa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005932:	2300      	movs	r3, #0
 8005934:	60bb      	str	r3, [r7, #8]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	60bb      	str	r3, [r7, #8]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	60bb      	str	r3, [r7, #8]
 8005946:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005952:	2b40      	cmp	r3, #64	; 0x40
 8005954:	f040 80b4 	bne.w	8005ac0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005964:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005968:	2b00      	cmp	r3, #0
 800596a:	f000 8140 	beq.w	8005bee <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005972:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005976:	429a      	cmp	r2, r3
 8005978:	f080 8139 	bcs.w	8005bee <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005982:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005988:	69db      	ldr	r3, [r3, #28]
 800598a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800598e:	f000 8088 	beq.w	8005aa2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	330c      	adds	r3, #12
 8005998:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80059a0:	e853 3f00 	ldrex	r3, [r3]
 80059a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80059a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	330c      	adds	r3, #12
 80059ba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80059be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80059c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80059ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80059ce:	e841 2300 	strex	r3, r2, [r1]
 80059d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80059d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1d9      	bne.n	8005992 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	3314      	adds	r3, #20
 80059e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059e8:	e853 3f00 	ldrex	r3, [r3]
 80059ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80059ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059f0:	f023 0301 	bic.w	r3, r3, #1
 80059f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	3314      	adds	r3, #20
 80059fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005a02:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005a06:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a08:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005a0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005a0e:	e841 2300 	strex	r3, r2, [r1]
 8005a12:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005a14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d1e1      	bne.n	80059de <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	3314      	adds	r3, #20
 8005a20:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a24:	e853 3f00 	ldrex	r3, [r3]
 8005a28:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005a2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	3314      	adds	r3, #20
 8005a3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005a3e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005a40:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a42:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005a44:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005a46:	e841 2300 	strex	r3, r2, [r1]
 8005a4a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005a4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1e3      	bne.n	8005a1a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2220      	movs	r2, #32
 8005a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	330c      	adds	r3, #12
 8005a66:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a6a:	e853 3f00 	ldrex	r3, [r3]
 8005a6e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005a70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a72:	f023 0310 	bic.w	r3, r3, #16
 8005a76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	330c      	adds	r3, #12
 8005a80:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005a84:	65ba      	str	r2, [r7, #88]	; 0x58
 8005a86:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a88:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a8c:	e841 2300 	strex	r3, r2, [r1]
 8005a90:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005a92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d1e3      	bne.n	8005a60 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f7fd ff22 	bl	80038e6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 f8b6 	bl	8005c24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ab8:	e099      	b.n	8005bee <HAL_UART_IRQHandler+0x50e>
 8005aba:	bf00      	nop
 8005abc:	08005d7f 	.word	0x08005d7f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	f000 808b 	beq.w	8005bf2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005adc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f000 8086 	beq.w	8005bf2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	330c      	adds	r3, #12
 8005aec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af0:	e853 3f00 	ldrex	r3, [r3]
 8005af4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005af8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005afc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	330c      	adds	r3, #12
 8005b06:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005b0a:	647a      	str	r2, [r7, #68]	; 0x44
 8005b0c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b12:	e841 2300 	strex	r3, r2, [r1]
 8005b16:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1e3      	bne.n	8005ae6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	3314      	adds	r3, #20
 8005b24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b28:	e853 3f00 	ldrex	r3, [r3]
 8005b2c:	623b      	str	r3, [r7, #32]
   return(result);
 8005b2e:	6a3b      	ldr	r3, [r7, #32]
 8005b30:	f023 0301 	bic.w	r3, r3, #1
 8005b34:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	3314      	adds	r3, #20
 8005b3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005b42:	633a      	str	r2, [r7, #48]	; 0x30
 8005b44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b4a:	e841 2300 	strex	r3, r2, [r1]
 8005b4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d1e3      	bne.n	8005b1e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2220      	movs	r2, #32
 8005b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	330c      	adds	r3, #12
 8005b6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	e853 3f00 	ldrex	r3, [r3]
 8005b72:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f023 0310 	bic.w	r3, r3, #16
 8005b7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	330c      	adds	r3, #12
 8005b84:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005b88:	61fa      	str	r2, [r7, #28]
 8005b8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8c:	69b9      	ldr	r1, [r7, #24]
 8005b8e:	69fa      	ldr	r2, [r7, #28]
 8005b90:	e841 2300 	strex	r3, r2, [r1]
 8005b94:	617b      	str	r3, [r7, #20]
   return(result);
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d1e3      	bne.n	8005b64 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 f83e 	bl	8005c24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ba8:	e023      	b.n	8005bf2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d009      	beq.n	8005bca <HAL_UART_IRQHandler+0x4ea>
 8005bb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d003      	beq.n	8005bca <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 f8ef 	bl	8005da6 <UART_Transmit_IT>
    return;
 8005bc8:	e014      	b.n	8005bf4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00e      	beq.n	8005bf4 <HAL_UART_IRQHandler+0x514>
 8005bd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d008      	beq.n	8005bf4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f92f 	bl	8005e46 <UART_EndTransmit_IT>
    return;
 8005be8:	e004      	b.n	8005bf4 <HAL_UART_IRQHandler+0x514>
    return;
 8005bea:	bf00      	nop
 8005bec:	e002      	b.n	8005bf4 <HAL_UART_IRQHandler+0x514>
      return;
 8005bee:	bf00      	nop
 8005bf0:	e000      	b.n	8005bf4 <HAL_UART_IRQHandler+0x514>
      return;
 8005bf2:	bf00      	nop
  }
}
 8005bf4:	37e8      	adds	r7, #232	; 0xe8
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop

08005bfc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005c04:	bf00      	nop
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005c18:	bf00      	nop
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c30:	bf00      	nop
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	4613      	mov	r3, r2
 8005c48:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	68ba      	ldr	r2, [r7, #8]
 8005c4e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	88fa      	ldrh	r2, [r7, #6]
 8005c54:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	88fa      	ldrh	r2, [r7, #6]
 8005c5a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2222      	movs	r2, #34	; 0x22
 8005c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d007      	beq.n	8005c8a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68da      	ldr	r2, [r3, #12]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c88:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	695a      	ldr	r2, [r3, #20]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f042 0201 	orr.w	r2, r2, #1
 8005c98:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68da      	ldr	r2, [r3, #12]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f042 0220 	orr.w	r2, r2, #32
 8005ca8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3714      	adds	r7, #20
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b095      	sub	sp, #84	; 0x54
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	330c      	adds	r3, #12
 8005cc6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cca:	e853 3f00 	ldrex	r3, [r3]
 8005cce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	330c      	adds	r3, #12
 8005cde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ce0:	643a      	str	r2, [r7, #64]	; 0x40
 8005ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ce6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ce8:	e841 2300 	strex	r3, r2, [r1]
 8005cec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d1e5      	bne.n	8005cc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	3314      	adds	r3, #20
 8005cfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfc:	6a3b      	ldr	r3, [r7, #32]
 8005cfe:	e853 3f00 	ldrex	r3, [r3]
 8005d02:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	f023 0301 	bic.w	r3, r3, #1
 8005d0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	3314      	adds	r3, #20
 8005d12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d14:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d1c:	e841 2300 	strex	r3, r2, [r1]
 8005d20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d1e5      	bne.n	8005cf4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d119      	bne.n	8005d64 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	330c      	adds	r3, #12
 8005d36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	e853 3f00 	ldrex	r3, [r3]
 8005d3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	f023 0310 	bic.w	r3, r3, #16
 8005d46:	647b      	str	r3, [r7, #68]	; 0x44
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	330c      	adds	r3, #12
 8005d4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d50:	61ba      	str	r2, [r7, #24]
 8005d52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d54:	6979      	ldr	r1, [r7, #20]
 8005d56:	69ba      	ldr	r2, [r7, #24]
 8005d58:	e841 2300 	strex	r3, r2, [r1]
 8005d5c:	613b      	str	r3, [r7, #16]
   return(result);
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1e5      	bne.n	8005d30 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2220      	movs	r2, #32
 8005d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005d72:	bf00      	nop
 8005d74:	3754      	adds	r7, #84	; 0x54
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr

08005d7e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b084      	sub	sp, #16
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2200      	movs	r2, #0
 8005d96:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d98:	68f8      	ldr	r0, [r7, #12]
 8005d9a:	f7ff ff39 	bl	8005c10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d9e:	bf00      	nop
 8005da0:	3710      	adds	r7, #16
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}

08005da6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005da6:	b480      	push	{r7}
 8005da8:	b085      	sub	sp, #20
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b21      	cmp	r3, #33	; 0x21
 8005db8:	d13e      	bne.n	8005e38 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dc2:	d114      	bne.n	8005dee <UART_Transmit_IT+0x48>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d110      	bne.n	8005dee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a1b      	ldr	r3, [r3, #32]
 8005dd0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	881b      	ldrh	r3, [r3, #0]
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005de0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a1b      	ldr	r3, [r3, #32]
 8005de6:	1c9a      	adds	r2, r3, #2
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	621a      	str	r2, [r3, #32]
 8005dec:	e008      	b.n	8005e00 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	1c59      	adds	r1, r3, #1
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	6211      	str	r1, [r2, #32]
 8005df8:	781a      	ldrb	r2, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	3b01      	subs	r3, #1
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d10f      	bne.n	8005e34 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68da      	ldr	r2, [r3, #12]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e22:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68da      	ldr	r2, [r3, #12]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e32:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005e34:	2300      	movs	r3, #0
 8005e36:	e000      	b.n	8005e3a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005e38:	2302      	movs	r3, #2
  }
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3714      	adds	r7, #20
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr

08005e46 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b082      	sub	sp, #8
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68da      	ldr	r2, [r3, #12]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e5c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2220      	movs	r2, #32
 8005e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f7ff fec8 	bl	8005bfc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3708      	adds	r7, #8
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b08c      	sub	sp, #48	; 0x30
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	2b22      	cmp	r3, #34	; 0x22
 8005e88:	f040 80ab 	bne.w	8005fe2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e94:	d117      	bne.n	8005ec6 <UART_Receive_IT+0x50>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d113      	bne.n	8005ec6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eb4:	b29a      	uxth	r2, r3
 8005eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ebe:	1c9a      	adds	r2, r3, #2
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	629a      	str	r2, [r3, #40]	; 0x28
 8005ec4:	e026      	b.n	8005f14 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ed8:	d007      	beq.n	8005eea <UART_Receive_IT+0x74>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d10a      	bne.n	8005ef8 <UART_Receive_IT+0x82>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d106      	bne.n	8005ef8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	b2da      	uxtb	r2, r3
 8005ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef4:	701a      	strb	r2, [r3, #0]
 8005ef6:	e008      	b.n	8005f0a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f04:	b2da      	uxtb	r2, r3
 8005f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f08:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0e:	1c5a      	adds	r2, r3, #1
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	4619      	mov	r1, r3
 8005f22:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d15a      	bne.n	8005fde <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68da      	ldr	r2, [r3, #12]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f022 0220 	bic.w	r2, r2, #32
 8005f36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68da      	ldr	r2, [r3, #12]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	695a      	ldr	r2, [r3, #20]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f022 0201 	bic.w	r2, r2, #1
 8005f56:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2220      	movs	r2, #32
 8005f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d135      	bne.n	8005fd4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	330c      	adds	r3, #12
 8005f74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	e853 3f00 	ldrex	r3, [r3]
 8005f7c:	613b      	str	r3, [r7, #16]
   return(result);
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	f023 0310 	bic.w	r3, r3, #16
 8005f84:	627b      	str	r3, [r7, #36]	; 0x24
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	330c      	adds	r3, #12
 8005f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f8e:	623a      	str	r2, [r7, #32]
 8005f90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f92:	69f9      	ldr	r1, [r7, #28]
 8005f94:	6a3a      	ldr	r2, [r7, #32]
 8005f96:	e841 2300 	strex	r3, r2, [r1]
 8005f9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1e5      	bne.n	8005f6e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 0310 	and.w	r3, r3, #16
 8005fac:	2b10      	cmp	r3, #16
 8005fae:	d10a      	bne.n	8005fc6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	60fb      	str	r3, [r7, #12]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	60fb      	str	r3, [r7, #12]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	60fb      	str	r3, [r7, #12]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005fca:	4619      	mov	r1, r3
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f7ff fe29 	bl	8005c24 <HAL_UARTEx_RxEventCallback>
 8005fd2:	e002      	b.n	8005fda <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f7fb f89f 	bl	8001118 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	e002      	b.n	8005fe4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	e000      	b.n	8005fe4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005fe2:	2302      	movs	r3, #2
  }
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3730      	adds	r7, #48	; 0x30
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ff0:	b0c0      	sub	sp, #256	; 0x100
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006008:	68d9      	ldr	r1, [r3, #12]
 800600a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	ea40 0301 	orr.w	r3, r0, r1
 8006014:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800601a:	689a      	ldr	r2, [r3, #8]
 800601c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	431a      	orrs	r2, r3
 8006024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006028:	695b      	ldr	r3, [r3, #20]
 800602a:	431a      	orrs	r2, r3
 800602c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006030:	69db      	ldr	r3, [r3, #28]
 8006032:	4313      	orrs	r3, r2
 8006034:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006044:	f021 010c 	bic.w	r1, r1, #12
 8006048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006052:	430b      	orrs	r3, r1
 8006054:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006066:	6999      	ldr	r1, [r3, #24]
 8006068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	ea40 0301 	orr.w	r3, r0, r1
 8006072:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	4b8f      	ldr	r3, [pc, #572]	; (80062b8 <UART_SetConfig+0x2cc>)
 800607c:	429a      	cmp	r2, r3
 800607e:	d005      	beq.n	800608c <UART_SetConfig+0xa0>
 8006080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	4b8d      	ldr	r3, [pc, #564]	; (80062bc <UART_SetConfig+0x2d0>)
 8006088:	429a      	cmp	r2, r3
 800608a:	d104      	bne.n	8006096 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800608c:	f7fe fb1c 	bl	80046c8 <HAL_RCC_GetPCLK2Freq>
 8006090:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006094:	e003      	b.n	800609e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006096:	f7fe fb03 	bl	80046a0 <HAL_RCC_GetPCLK1Freq>
 800609a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800609e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060a2:	69db      	ldr	r3, [r3, #28]
 80060a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060a8:	f040 810c 	bne.w	80062c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80060ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060b0:	2200      	movs	r2, #0
 80060b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80060b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80060ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80060be:	4622      	mov	r2, r4
 80060c0:	462b      	mov	r3, r5
 80060c2:	1891      	adds	r1, r2, r2
 80060c4:	65b9      	str	r1, [r7, #88]	; 0x58
 80060c6:	415b      	adcs	r3, r3
 80060c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80060ce:	4621      	mov	r1, r4
 80060d0:	eb12 0801 	adds.w	r8, r2, r1
 80060d4:	4629      	mov	r1, r5
 80060d6:	eb43 0901 	adc.w	r9, r3, r1
 80060da:	f04f 0200 	mov.w	r2, #0
 80060de:	f04f 0300 	mov.w	r3, #0
 80060e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80060ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80060ee:	4690      	mov	r8, r2
 80060f0:	4699      	mov	r9, r3
 80060f2:	4623      	mov	r3, r4
 80060f4:	eb18 0303 	adds.w	r3, r8, r3
 80060f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80060fc:	462b      	mov	r3, r5
 80060fe:	eb49 0303 	adc.w	r3, r9, r3
 8006102:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006112:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006116:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800611a:	460b      	mov	r3, r1
 800611c:	18db      	adds	r3, r3, r3
 800611e:	653b      	str	r3, [r7, #80]	; 0x50
 8006120:	4613      	mov	r3, r2
 8006122:	eb42 0303 	adc.w	r3, r2, r3
 8006126:	657b      	str	r3, [r7, #84]	; 0x54
 8006128:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800612c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006130:	f7fa fd3a 	bl	8000ba8 <__aeabi_uldivmod>
 8006134:	4602      	mov	r2, r0
 8006136:	460b      	mov	r3, r1
 8006138:	4b61      	ldr	r3, [pc, #388]	; (80062c0 <UART_SetConfig+0x2d4>)
 800613a:	fba3 2302 	umull	r2, r3, r3, r2
 800613e:	095b      	lsrs	r3, r3, #5
 8006140:	011c      	lsls	r4, r3, #4
 8006142:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006146:	2200      	movs	r2, #0
 8006148:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800614c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006150:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006154:	4642      	mov	r2, r8
 8006156:	464b      	mov	r3, r9
 8006158:	1891      	adds	r1, r2, r2
 800615a:	64b9      	str	r1, [r7, #72]	; 0x48
 800615c:	415b      	adcs	r3, r3
 800615e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006160:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006164:	4641      	mov	r1, r8
 8006166:	eb12 0a01 	adds.w	sl, r2, r1
 800616a:	4649      	mov	r1, r9
 800616c:	eb43 0b01 	adc.w	fp, r3, r1
 8006170:	f04f 0200 	mov.w	r2, #0
 8006174:	f04f 0300 	mov.w	r3, #0
 8006178:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800617c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006180:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006184:	4692      	mov	sl, r2
 8006186:	469b      	mov	fp, r3
 8006188:	4643      	mov	r3, r8
 800618a:	eb1a 0303 	adds.w	r3, sl, r3
 800618e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006192:	464b      	mov	r3, r9
 8006194:	eb4b 0303 	adc.w	r3, fp, r3
 8006198:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800619c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80061ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80061b0:	460b      	mov	r3, r1
 80061b2:	18db      	adds	r3, r3, r3
 80061b4:	643b      	str	r3, [r7, #64]	; 0x40
 80061b6:	4613      	mov	r3, r2
 80061b8:	eb42 0303 	adc.w	r3, r2, r3
 80061bc:	647b      	str	r3, [r7, #68]	; 0x44
 80061be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80061c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80061c6:	f7fa fcef 	bl	8000ba8 <__aeabi_uldivmod>
 80061ca:	4602      	mov	r2, r0
 80061cc:	460b      	mov	r3, r1
 80061ce:	4611      	mov	r1, r2
 80061d0:	4b3b      	ldr	r3, [pc, #236]	; (80062c0 <UART_SetConfig+0x2d4>)
 80061d2:	fba3 2301 	umull	r2, r3, r3, r1
 80061d6:	095b      	lsrs	r3, r3, #5
 80061d8:	2264      	movs	r2, #100	; 0x64
 80061da:	fb02 f303 	mul.w	r3, r2, r3
 80061de:	1acb      	subs	r3, r1, r3
 80061e0:	00db      	lsls	r3, r3, #3
 80061e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80061e6:	4b36      	ldr	r3, [pc, #216]	; (80062c0 <UART_SetConfig+0x2d4>)
 80061e8:	fba3 2302 	umull	r2, r3, r3, r2
 80061ec:	095b      	lsrs	r3, r3, #5
 80061ee:	005b      	lsls	r3, r3, #1
 80061f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80061f4:	441c      	add	r4, r3
 80061f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061fa:	2200      	movs	r2, #0
 80061fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006200:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006204:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006208:	4642      	mov	r2, r8
 800620a:	464b      	mov	r3, r9
 800620c:	1891      	adds	r1, r2, r2
 800620e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006210:	415b      	adcs	r3, r3
 8006212:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006214:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006218:	4641      	mov	r1, r8
 800621a:	1851      	adds	r1, r2, r1
 800621c:	6339      	str	r1, [r7, #48]	; 0x30
 800621e:	4649      	mov	r1, r9
 8006220:	414b      	adcs	r3, r1
 8006222:	637b      	str	r3, [r7, #52]	; 0x34
 8006224:	f04f 0200 	mov.w	r2, #0
 8006228:	f04f 0300 	mov.w	r3, #0
 800622c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006230:	4659      	mov	r1, fp
 8006232:	00cb      	lsls	r3, r1, #3
 8006234:	4651      	mov	r1, sl
 8006236:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800623a:	4651      	mov	r1, sl
 800623c:	00ca      	lsls	r2, r1, #3
 800623e:	4610      	mov	r0, r2
 8006240:	4619      	mov	r1, r3
 8006242:	4603      	mov	r3, r0
 8006244:	4642      	mov	r2, r8
 8006246:	189b      	adds	r3, r3, r2
 8006248:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800624c:	464b      	mov	r3, r9
 800624e:	460a      	mov	r2, r1
 8006250:	eb42 0303 	adc.w	r3, r2, r3
 8006254:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006264:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006268:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800626c:	460b      	mov	r3, r1
 800626e:	18db      	adds	r3, r3, r3
 8006270:	62bb      	str	r3, [r7, #40]	; 0x28
 8006272:	4613      	mov	r3, r2
 8006274:	eb42 0303 	adc.w	r3, r2, r3
 8006278:	62fb      	str	r3, [r7, #44]	; 0x2c
 800627a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800627e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006282:	f7fa fc91 	bl	8000ba8 <__aeabi_uldivmod>
 8006286:	4602      	mov	r2, r0
 8006288:	460b      	mov	r3, r1
 800628a:	4b0d      	ldr	r3, [pc, #52]	; (80062c0 <UART_SetConfig+0x2d4>)
 800628c:	fba3 1302 	umull	r1, r3, r3, r2
 8006290:	095b      	lsrs	r3, r3, #5
 8006292:	2164      	movs	r1, #100	; 0x64
 8006294:	fb01 f303 	mul.w	r3, r1, r3
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	00db      	lsls	r3, r3, #3
 800629c:	3332      	adds	r3, #50	; 0x32
 800629e:	4a08      	ldr	r2, [pc, #32]	; (80062c0 <UART_SetConfig+0x2d4>)
 80062a0:	fba2 2303 	umull	r2, r3, r2, r3
 80062a4:	095b      	lsrs	r3, r3, #5
 80062a6:	f003 0207 	and.w	r2, r3, #7
 80062aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4422      	add	r2, r4
 80062b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80062b4:	e105      	b.n	80064c2 <UART_SetConfig+0x4d6>
 80062b6:	bf00      	nop
 80062b8:	40011000 	.word	0x40011000
 80062bc:	40011400 	.word	0x40011400
 80062c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062c8:	2200      	movs	r2, #0
 80062ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80062ce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80062d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80062d6:	4642      	mov	r2, r8
 80062d8:	464b      	mov	r3, r9
 80062da:	1891      	adds	r1, r2, r2
 80062dc:	6239      	str	r1, [r7, #32]
 80062de:	415b      	adcs	r3, r3
 80062e0:	627b      	str	r3, [r7, #36]	; 0x24
 80062e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80062e6:	4641      	mov	r1, r8
 80062e8:	1854      	adds	r4, r2, r1
 80062ea:	4649      	mov	r1, r9
 80062ec:	eb43 0501 	adc.w	r5, r3, r1
 80062f0:	f04f 0200 	mov.w	r2, #0
 80062f4:	f04f 0300 	mov.w	r3, #0
 80062f8:	00eb      	lsls	r3, r5, #3
 80062fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062fe:	00e2      	lsls	r2, r4, #3
 8006300:	4614      	mov	r4, r2
 8006302:	461d      	mov	r5, r3
 8006304:	4643      	mov	r3, r8
 8006306:	18e3      	adds	r3, r4, r3
 8006308:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800630c:	464b      	mov	r3, r9
 800630e:	eb45 0303 	adc.w	r3, r5, r3
 8006312:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006322:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006326:	f04f 0200 	mov.w	r2, #0
 800632a:	f04f 0300 	mov.w	r3, #0
 800632e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006332:	4629      	mov	r1, r5
 8006334:	008b      	lsls	r3, r1, #2
 8006336:	4621      	mov	r1, r4
 8006338:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800633c:	4621      	mov	r1, r4
 800633e:	008a      	lsls	r2, r1, #2
 8006340:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006344:	f7fa fc30 	bl	8000ba8 <__aeabi_uldivmod>
 8006348:	4602      	mov	r2, r0
 800634a:	460b      	mov	r3, r1
 800634c:	4b60      	ldr	r3, [pc, #384]	; (80064d0 <UART_SetConfig+0x4e4>)
 800634e:	fba3 2302 	umull	r2, r3, r3, r2
 8006352:	095b      	lsrs	r3, r3, #5
 8006354:	011c      	lsls	r4, r3, #4
 8006356:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800635a:	2200      	movs	r2, #0
 800635c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006360:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006364:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006368:	4642      	mov	r2, r8
 800636a:	464b      	mov	r3, r9
 800636c:	1891      	adds	r1, r2, r2
 800636e:	61b9      	str	r1, [r7, #24]
 8006370:	415b      	adcs	r3, r3
 8006372:	61fb      	str	r3, [r7, #28]
 8006374:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006378:	4641      	mov	r1, r8
 800637a:	1851      	adds	r1, r2, r1
 800637c:	6139      	str	r1, [r7, #16]
 800637e:	4649      	mov	r1, r9
 8006380:	414b      	adcs	r3, r1
 8006382:	617b      	str	r3, [r7, #20]
 8006384:	f04f 0200 	mov.w	r2, #0
 8006388:	f04f 0300 	mov.w	r3, #0
 800638c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006390:	4659      	mov	r1, fp
 8006392:	00cb      	lsls	r3, r1, #3
 8006394:	4651      	mov	r1, sl
 8006396:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800639a:	4651      	mov	r1, sl
 800639c:	00ca      	lsls	r2, r1, #3
 800639e:	4610      	mov	r0, r2
 80063a0:	4619      	mov	r1, r3
 80063a2:	4603      	mov	r3, r0
 80063a4:	4642      	mov	r2, r8
 80063a6:	189b      	adds	r3, r3, r2
 80063a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80063ac:	464b      	mov	r3, r9
 80063ae:	460a      	mov	r2, r1
 80063b0:	eb42 0303 	adc.w	r3, r2, r3
 80063b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80063b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80063c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80063c4:	f04f 0200 	mov.w	r2, #0
 80063c8:	f04f 0300 	mov.w	r3, #0
 80063cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80063d0:	4649      	mov	r1, r9
 80063d2:	008b      	lsls	r3, r1, #2
 80063d4:	4641      	mov	r1, r8
 80063d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063da:	4641      	mov	r1, r8
 80063dc:	008a      	lsls	r2, r1, #2
 80063de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80063e2:	f7fa fbe1 	bl	8000ba8 <__aeabi_uldivmod>
 80063e6:	4602      	mov	r2, r0
 80063e8:	460b      	mov	r3, r1
 80063ea:	4b39      	ldr	r3, [pc, #228]	; (80064d0 <UART_SetConfig+0x4e4>)
 80063ec:	fba3 1302 	umull	r1, r3, r3, r2
 80063f0:	095b      	lsrs	r3, r3, #5
 80063f2:	2164      	movs	r1, #100	; 0x64
 80063f4:	fb01 f303 	mul.w	r3, r1, r3
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	011b      	lsls	r3, r3, #4
 80063fc:	3332      	adds	r3, #50	; 0x32
 80063fe:	4a34      	ldr	r2, [pc, #208]	; (80064d0 <UART_SetConfig+0x4e4>)
 8006400:	fba2 2303 	umull	r2, r3, r2, r3
 8006404:	095b      	lsrs	r3, r3, #5
 8006406:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800640a:	441c      	add	r4, r3
 800640c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006410:	2200      	movs	r2, #0
 8006412:	673b      	str	r3, [r7, #112]	; 0x70
 8006414:	677a      	str	r2, [r7, #116]	; 0x74
 8006416:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800641a:	4642      	mov	r2, r8
 800641c:	464b      	mov	r3, r9
 800641e:	1891      	adds	r1, r2, r2
 8006420:	60b9      	str	r1, [r7, #8]
 8006422:	415b      	adcs	r3, r3
 8006424:	60fb      	str	r3, [r7, #12]
 8006426:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800642a:	4641      	mov	r1, r8
 800642c:	1851      	adds	r1, r2, r1
 800642e:	6039      	str	r1, [r7, #0]
 8006430:	4649      	mov	r1, r9
 8006432:	414b      	adcs	r3, r1
 8006434:	607b      	str	r3, [r7, #4]
 8006436:	f04f 0200 	mov.w	r2, #0
 800643a:	f04f 0300 	mov.w	r3, #0
 800643e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006442:	4659      	mov	r1, fp
 8006444:	00cb      	lsls	r3, r1, #3
 8006446:	4651      	mov	r1, sl
 8006448:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800644c:	4651      	mov	r1, sl
 800644e:	00ca      	lsls	r2, r1, #3
 8006450:	4610      	mov	r0, r2
 8006452:	4619      	mov	r1, r3
 8006454:	4603      	mov	r3, r0
 8006456:	4642      	mov	r2, r8
 8006458:	189b      	adds	r3, r3, r2
 800645a:	66bb      	str	r3, [r7, #104]	; 0x68
 800645c:	464b      	mov	r3, r9
 800645e:	460a      	mov	r2, r1
 8006460:	eb42 0303 	adc.w	r3, r2, r3
 8006464:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	663b      	str	r3, [r7, #96]	; 0x60
 8006470:	667a      	str	r2, [r7, #100]	; 0x64
 8006472:	f04f 0200 	mov.w	r2, #0
 8006476:	f04f 0300 	mov.w	r3, #0
 800647a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800647e:	4649      	mov	r1, r9
 8006480:	008b      	lsls	r3, r1, #2
 8006482:	4641      	mov	r1, r8
 8006484:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006488:	4641      	mov	r1, r8
 800648a:	008a      	lsls	r2, r1, #2
 800648c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006490:	f7fa fb8a 	bl	8000ba8 <__aeabi_uldivmod>
 8006494:	4602      	mov	r2, r0
 8006496:	460b      	mov	r3, r1
 8006498:	4b0d      	ldr	r3, [pc, #52]	; (80064d0 <UART_SetConfig+0x4e4>)
 800649a:	fba3 1302 	umull	r1, r3, r3, r2
 800649e:	095b      	lsrs	r3, r3, #5
 80064a0:	2164      	movs	r1, #100	; 0x64
 80064a2:	fb01 f303 	mul.w	r3, r1, r3
 80064a6:	1ad3      	subs	r3, r2, r3
 80064a8:	011b      	lsls	r3, r3, #4
 80064aa:	3332      	adds	r3, #50	; 0x32
 80064ac:	4a08      	ldr	r2, [pc, #32]	; (80064d0 <UART_SetConfig+0x4e4>)
 80064ae:	fba2 2303 	umull	r2, r3, r2, r3
 80064b2:	095b      	lsrs	r3, r3, #5
 80064b4:	f003 020f 	and.w	r2, r3, #15
 80064b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4422      	add	r2, r4
 80064c0:	609a      	str	r2, [r3, #8]
}
 80064c2:	bf00      	nop
 80064c4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80064c8:	46bd      	mov	sp, r7
 80064ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064ce:	bf00      	nop
 80064d0:	51eb851f 	.word	0x51eb851f

080064d4 <__errno>:
 80064d4:	4b01      	ldr	r3, [pc, #4]	; (80064dc <__errno+0x8>)
 80064d6:	6818      	ldr	r0, [r3, #0]
 80064d8:	4770      	bx	lr
 80064da:	bf00      	nop
 80064dc:	20000040 	.word	0x20000040

080064e0 <__libc_init_array>:
 80064e0:	b570      	push	{r4, r5, r6, lr}
 80064e2:	4d0d      	ldr	r5, [pc, #52]	; (8006518 <__libc_init_array+0x38>)
 80064e4:	4c0d      	ldr	r4, [pc, #52]	; (800651c <__libc_init_array+0x3c>)
 80064e6:	1b64      	subs	r4, r4, r5
 80064e8:	10a4      	asrs	r4, r4, #2
 80064ea:	2600      	movs	r6, #0
 80064ec:	42a6      	cmp	r6, r4
 80064ee:	d109      	bne.n	8006504 <__libc_init_array+0x24>
 80064f0:	4d0b      	ldr	r5, [pc, #44]	; (8006520 <__libc_init_array+0x40>)
 80064f2:	4c0c      	ldr	r4, [pc, #48]	; (8006524 <__libc_init_array+0x44>)
 80064f4:	f001 fbbe 	bl	8007c74 <_init>
 80064f8:	1b64      	subs	r4, r4, r5
 80064fa:	10a4      	asrs	r4, r4, #2
 80064fc:	2600      	movs	r6, #0
 80064fe:	42a6      	cmp	r6, r4
 8006500:	d105      	bne.n	800650e <__libc_init_array+0x2e>
 8006502:	bd70      	pop	{r4, r5, r6, pc}
 8006504:	f855 3b04 	ldr.w	r3, [r5], #4
 8006508:	4798      	blx	r3
 800650a:	3601      	adds	r6, #1
 800650c:	e7ee      	b.n	80064ec <__libc_init_array+0xc>
 800650e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006512:	4798      	blx	r3
 8006514:	3601      	adds	r6, #1
 8006516:	e7f2      	b.n	80064fe <__libc_init_array+0x1e>
 8006518:	08007df8 	.word	0x08007df8
 800651c:	08007df8 	.word	0x08007df8
 8006520:	08007df8 	.word	0x08007df8
 8006524:	08007dfc 	.word	0x08007dfc

08006528 <memset>:
 8006528:	4402      	add	r2, r0
 800652a:	4603      	mov	r3, r0
 800652c:	4293      	cmp	r3, r2
 800652e:	d100      	bne.n	8006532 <memset+0xa>
 8006530:	4770      	bx	lr
 8006532:	f803 1b01 	strb.w	r1, [r3], #1
 8006536:	e7f9      	b.n	800652c <memset+0x4>

08006538 <sniprintf>:
 8006538:	b40c      	push	{r2, r3}
 800653a:	b530      	push	{r4, r5, lr}
 800653c:	4b17      	ldr	r3, [pc, #92]	; (800659c <sniprintf+0x64>)
 800653e:	1e0c      	subs	r4, r1, #0
 8006540:	681d      	ldr	r5, [r3, #0]
 8006542:	b09d      	sub	sp, #116	; 0x74
 8006544:	da08      	bge.n	8006558 <sniprintf+0x20>
 8006546:	238b      	movs	r3, #139	; 0x8b
 8006548:	602b      	str	r3, [r5, #0]
 800654a:	f04f 30ff 	mov.w	r0, #4294967295
 800654e:	b01d      	add	sp, #116	; 0x74
 8006550:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006554:	b002      	add	sp, #8
 8006556:	4770      	bx	lr
 8006558:	f44f 7302 	mov.w	r3, #520	; 0x208
 800655c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006560:	bf14      	ite	ne
 8006562:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006566:	4623      	moveq	r3, r4
 8006568:	9304      	str	r3, [sp, #16]
 800656a:	9307      	str	r3, [sp, #28]
 800656c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006570:	9002      	str	r0, [sp, #8]
 8006572:	9006      	str	r0, [sp, #24]
 8006574:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006578:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800657a:	ab21      	add	r3, sp, #132	; 0x84
 800657c:	a902      	add	r1, sp, #8
 800657e:	4628      	mov	r0, r5
 8006580:	9301      	str	r3, [sp, #4]
 8006582:	f000 f869 	bl	8006658 <_svfiprintf_r>
 8006586:	1c43      	adds	r3, r0, #1
 8006588:	bfbc      	itt	lt
 800658a:	238b      	movlt	r3, #139	; 0x8b
 800658c:	602b      	strlt	r3, [r5, #0]
 800658e:	2c00      	cmp	r4, #0
 8006590:	d0dd      	beq.n	800654e <sniprintf+0x16>
 8006592:	9b02      	ldr	r3, [sp, #8]
 8006594:	2200      	movs	r2, #0
 8006596:	701a      	strb	r2, [r3, #0]
 8006598:	e7d9      	b.n	800654e <sniprintf+0x16>
 800659a:	bf00      	nop
 800659c:	20000040 	.word	0x20000040

080065a0 <__ssputs_r>:
 80065a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065a4:	688e      	ldr	r6, [r1, #8]
 80065a6:	429e      	cmp	r6, r3
 80065a8:	4682      	mov	sl, r0
 80065aa:	460c      	mov	r4, r1
 80065ac:	4690      	mov	r8, r2
 80065ae:	461f      	mov	r7, r3
 80065b0:	d838      	bhi.n	8006624 <__ssputs_r+0x84>
 80065b2:	898a      	ldrh	r2, [r1, #12]
 80065b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80065b8:	d032      	beq.n	8006620 <__ssputs_r+0x80>
 80065ba:	6825      	ldr	r5, [r4, #0]
 80065bc:	6909      	ldr	r1, [r1, #16]
 80065be:	eba5 0901 	sub.w	r9, r5, r1
 80065c2:	6965      	ldr	r5, [r4, #20]
 80065c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80065c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80065cc:	3301      	adds	r3, #1
 80065ce:	444b      	add	r3, r9
 80065d0:	106d      	asrs	r5, r5, #1
 80065d2:	429d      	cmp	r5, r3
 80065d4:	bf38      	it	cc
 80065d6:	461d      	movcc	r5, r3
 80065d8:	0553      	lsls	r3, r2, #21
 80065da:	d531      	bpl.n	8006640 <__ssputs_r+0xa0>
 80065dc:	4629      	mov	r1, r5
 80065de:	f000 fb63 	bl	8006ca8 <_malloc_r>
 80065e2:	4606      	mov	r6, r0
 80065e4:	b950      	cbnz	r0, 80065fc <__ssputs_r+0x5c>
 80065e6:	230c      	movs	r3, #12
 80065e8:	f8ca 3000 	str.w	r3, [sl]
 80065ec:	89a3      	ldrh	r3, [r4, #12]
 80065ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065f2:	81a3      	strh	r3, [r4, #12]
 80065f4:	f04f 30ff 	mov.w	r0, #4294967295
 80065f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065fc:	6921      	ldr	r1, [r4, #16]
 80065fe:	464a      	mov	r2, r9
 8006600:	f000 fabe 	bl	8006b80 <memcpy>
 8006604:	89a3      	ldrh	r3, [r4, #12]
 8006606:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800660a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800660e:	81a3      	strh	r3, [r4, #12]
 8006610:	6126      	str	r6, [r4, #16]
 8006612:	6165      	str	r5, [r4, #20]
 8006614:	444e      	add	r6, r9
 8006616:	eba5 0509 	sub.w	r5, r5, r9
 800661a:	6026      	str	r6, [r4, #0]
 800661c:	60a5      	str	r5, [r4, #8]
 800661e:	463e      	mov	r6, r7
 8006620:	42be      	cmp	r6, r7
 8006622:	d900      	bls.n	8006626 <__ssputs_r+0x86>
 8006624:	463e      	mov	r6, r7
 8006626:	6820      	ldr	r0, [r4, #0]
 8006628:	4632      	mov	r2, r6
 800662a:	4641      	mov	r1, r8
 800662c:	f000 fab6 	bl	8006b9c <memmove>
 8006630:	68a3      	ldr	r3, [r4, #8]
 8006632:	1b9b      	subs	r3, r3, r6
 8006634:	60a3      	str	r3, [r4, #8]
 8006636:	6823      	ldr	r3, [r4, #0]
 8006638:	4433      	add	r3, r6
 800663a:	6023      	str	r3, [r4, #0]
 800663c:	2000      	movs	r0, #0
 800663e:	e7db      	b.n	80065f8 <__ssputs_r+0x58>
 8006640:	462a      	mov	r2, r5
 8006642:	f000 fba5 	bl	8006d90 <_realloc_r>
 8006646:	4606      	mov	r6, r0
 8006648:	2800      	cmp	r0, #0
 800664a:	d1e1      	bne.n	8006610 <__ssputs_r+0x70>
 800664c:	6921      	ldr	r1, [r4, #16]
 800664e:	4650      	mov	r0, sl
 8006650:	f000 fabe 	bl	8006bd0 <_free_r>
 8006654:	e7c7      	b.n	80065e6 <__ssputs_r+0x46>
	...

08006658 <_svfiprintf_r>:
 8006658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800665c:	4698      	mov	r8, r3
 800665e:	898b      	ldrh	r3, [r1, #12]
 8006660:	061b      	lsls	r3, r3, #24
 8006662:	b09d      	sub	sp, #116	; 0x74
 8006664:	4607      	mov	r7, r0
 8006666:	460d      	mov	r5, r1
 8006668:	4614      	mov	r4, r2
 800666a:	d50e      	bpl.n	800668a <_svfiprintf_r+0x32>
 800666c:	690b      	ldr	r3, [r1, #16]
 800666e:	b963      	cbnz	r3, 800668a <_svfiprintf_r+0x32>
 8006670:	2140      	movs	r1, #64	; 0x40
 8006672:	f000 fb19 	bl	8006ca8 <_malloc_r>
 8006676:	6028      	str	r0, [r5, #0]
 8006678:	6128      	str	r0, [r5, #16]
 800667a:	b920      	cbnz	r0, 8006686 <_svfiprintf_r+0x2e>
 800667c:	230c      	movs	r3, #12
 800667e:	603b      	str	r3, [r7, #0]
 8006680:	f04f 30ff 	mov.w	r0, #4294967295
 8006684:	e0d1      	b.n	800682a <_svfiprintf_r+0x1d2>
 8006686:	2340      	movs	r3, #64	; 0x40
 8006688:	616b      	str	r3, [r5, #20]
 800668a:	2300      	movs	r3, #0
 800668c:	9309      	str	r3, [sp, #36]	; 0x24
 800668e:	2320      	movs	r3, #32
 8006690:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006694:	f8cd 800c 	str.w	r8, [sp, #12]
 8006698:	2330      	movs	r3, #48	; 0x30
 800669a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006844 <_svfiprintf_r+0x1ec>
 800669e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066a2:	f04f 0901 	mov.w	r9, #1
 80066a6:	4623      	mov	r3, r4
 80066a8:	469a      	mov	sl, r3
 80066aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066ae:	b10a      	cbz	r2, 80066b4 <_svfiprintf_r+0x5c>
 80066b0:	2a25      	cmp	r2, #37	; 0x25
 80066b2:	d1f9      	bne.n	80066a8 <_svfiprintf_r+0x50>
 80066b4:	ebba 0b04 	subs.w	fp, sl, r4
 80066b8:	d00b      	beq.n	80066d2 <_svfiprintf_r+0x7a>
 80066ba:	465b      	mov	r3, fp
 80066bc:	4622      	mov	r2, r4
 80066be:	4629      	mov	r1, r5
 80066c0:	4638      	mov	r0, r7
 80066c2:	f7ff ff6d 	bl	80065a0 <__ssputs_r>
 80066c6:	3001      	adds	r0, #1
 80066c8:	f000 80aa 	beq.w	8006820 <_svfiprintf_r+0x1c8>
 80066cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066ce:	445a      	add	r2, fp
 80066d0:	9209      	str	r2, [sp, #36]	; 0x24
 80066d2:	f89a 3000 	ldrb.w	r3, [sl]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	f000 80a2 	beq.w	8006820 <_svfiprintf_r+0x1c8>
 80066dc:	2300      	movs	r3, #0
 80066de:	f04f 32ff 	mov.w	r2, #4294967295
 80066e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066e6:	f10a 0a01 	add.w	sl, sl, #1
 80066ea:	9304      	str	r3, [sp, #16]
 80066ec:	9307      	str	r3, [sp, #28]
 80066ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80066f2:	931a      	str	r3, [sp, #104]	; 0x68
 80066f4:	4654      	mov	r4, sl
 80066f6:	2205      	movs	r2, #5
 80066f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066fc:	4851      	ldr	r0, [pc, #324]	; (8006844 <_svfiprintf_r+0x1ec>)
 80066fe:	f7f9 fd77 	bl	80001f0 <memchr>
 8006702:	9a04      	ldr	r2, [sp, #16]
 8006704:	b9d8      	cbnz	r0, 800673e <_svfiprintf_r+0xe6>
 8006706:	06d0      	lsls	r0, r2, #27
 8006708:	bf44      	itt	mi
 800670a:	2320      	movmi	r3, #32
 800670c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006710:	0711      	lsls	r1, r2, #28
 8006712:	bf44      	itt	mi
 8006714:	232b      	movmi	r3, #43	; 0x2b
 8006716:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800671a:	f89a 3000 	ldrb.w	r3, [sl]
 800671e:	2b2a      	cmp	r3, #42	; 0x2a
 8006720:	d015      	beq.n	800674e <_svfiprintf_r+0xf6>
 8006722:	9a07      	ldr	r2, [sp, #28]
 8006724:	4654      	mov	r4, sl
 8006726:	2000      	movs	r0, #0
 8006728:	f04f 0c0a 	mov.w	ip, #10
 800672c:	4621      	mov	r1, r4
 800672e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006732:	3b30      	subs	r3, #48	; 0x30
 8006734:	2b09      	cmp	r3, #9
 8006736:	d94e      	bls.n	80067d6 <_svfiprintf_r+0x17e>
 8006738:	b1b0      	cbz	r0, 8006768 <_svfiprintf_r+0x110>
 800673a:	9207      	str	r2, [sp, #28]
 800673c:	e014      	b.n	8006768 <_svfiprintf_r+0x110>
 800673e:	eba0 0308 	sub.w	r3, r0, r8
 8006742:	fa09 f303 	lsl.w	r3, r9, r3
 8006746:	4313      	orrs	r3, r2
 8006748:	9304      	str	r3, [sp, #16]
 800674a:	46a2      	mov	sl, r4
 800674c:	e7d2      	b.n	80066f4 <_svfiprintf_r+0x9c>
 800674e:	9b03      	ldr	r3, [sp, #12]
 8006750:	1d19      	adds	r1, r3, #4
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	9103      	str	r1, [sp, #12]
 8006756:	2b00      	cmp	r3, #0
 8006758:	bfbb      	ittet	lt
 800675a:	425b      	neglt	r3, r3
 800675c:	f042 0202 	orrlt.w	r2, r2, #2
 8006760:	9307      	strge	r3, [sp, #28]
 8006762:	9307      	strlt	r3, [sp, #28]
 8006764:	bfb8      	it	lt
 8006766:	9204      	strlt	r2, [sp, #16]
 8006768:	7823      	ldrb	r3, [r4, #0]
 800676a:	2b2e      	cmp	r3, #46	; 0x2e
 800676c:	d10c      	bne.n	8006788 <_svfiprintf_r+0x130>
 800676e:	7863      	ldrb	r3, [r4, #1]
 8006770:	2b2a      	cmp	r3, #42	; 0x2a
 8006772:	d135      	bne.n	80067e0 <_svfiprintf_r+0x188>
 8006774:	9b03      	ldr	r3, [sp, #12]
 8006776:	1d1a      	adds	r2, r3, #4
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	9203      	str	r2, [sp, #12]
 800677c:	2b00      	cmp	r3, #0
 800677e:	bfb8      	it	lt
 8006780:	f04f 33ff 	movlt.w	r3, #4294967295
 8006784:	3402      	adds	r4, #2
 8006786:	9305      	str	r3, [sp, #20]
 8006788:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006854 <_svfiprintf_r+0x1fc>
 800678c:	7821      	ldrb	r1, [r4, #0]
 800678e:	2203      	movs	r2, #3
 8006790:	4650      	mov	r0, sl
 8006792:	f7f9 fd2d 	bl	80001f0 <memchr>
 8006796:	b140      	cbz	r0, 80067aa <_svfiprintf_r+0x152>
 8006798:	2340      	movs	r3, #64	; 0x40
 800679a:	eba0 000a 	sub.w	r0, r0, sl
 800679e:	fa03 f000 	lsl.w	r0, r3, r0
 80067a2:	9b04      	ldr	r3, [sp, #16]
 80067a4:	4303      	orrs	r3, r0
 80067a6:	3401      	adds	r4, #1
 80067a8:	9304      	str	r3, [sp, #16]
 80067aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067ae:	4826      	ldr	r0, [pc, #152]	; (8006848 <_svfiprintf_r+0x1f0>)
 80067b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067b4:	2206      	movs	r2, #6
 80067b6:	f7f9 fd1b 	bl	80001f0 <memchr>
 80067ba:	2800      	cmp	r0, #0
 80067bc:	d038      	beq.n	8006830 <_svfiprintf_r+0x1d8>
 80067be:	4b23      	ldr	r3, [pc, #140]	; (800684c <_svfiprintf_r+0x1f4>)
 80067c0:	bb1b      	cbnz	r3, 800680a <_svfiprintf_r+0x1b2>
 80067c2:	9b03      	ldr	r3, [sp, #12]
 80067c4:	3307      	adds	r3, #7
 80067c6:	f023 0307 	bic.w	r3, r3, #7
 80067ca:	3308      	adds	r3, #8
 80067cc:	9303      	str	r3, [sp, #12]
 80067ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067d0:	4433      	add	r3, r6
 80067d2:	9309      	str	r3, [sp, #36]	; 0x24
 80067d4:	e767      	b.n	80066a6 <_svfiprintf_r+0x4e>
 80067d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80067da:	460c      	mov	r4, r1
 80067dc:	2001      	movs	r0, #1
 80067de:	e7a5      	b.n	800672c <_svfiprintf_r+0xd4>
 80067e0:	2300      	movs	r3, #0
 80067e2:	3401      	adds	r4, #1
 80067e4:	9305      	str	r3, [sp, #20]
 80067e6:	4619      	mov	r1, r3
 80067e8:	f04f 0c0a 	mov.w	ip, #10
 80067ec:	4620      	mov	r0, r4
 80067ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067f2:	3a30      	subs	r2, #48	; 0x30
 80067f4:	2a09      	cmp	r2, #9
 80067f6:	d903      	bls.n	8006800 <_svfiprintf_r+0x1a8>
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d0c5      	beq.n	8006788 <_svfiprintf_r+0x130>
 80067fc:	9105      	str	r1, [sp, #20]
 80067fe:	e7c3      	b.n	8006788 <_svfiprintf_r+0x130>
 8006800:	fb0c 2101 	mla	r1, ip, r1, r2
 8006804:	4604      	mov	r4, r0
 8006806:	2301      	movs	r3, #1
 8006808:	e7f0      	b.n	80067ec <_svfiprintf_r+0x194>
 800680a:	ab03      	add	r3, sp, #12
 800680c:	9300      	str	r3, [sp, #0]
 800680e:	462a      	mov	r2, r5
 8006810:	4b0f      	ldr	r3, [pc, #60]	; (8006850 <_svfiprintf_r+0x1f8>)
 8006812:	a904      	add	r1, sp, #16
 8006814:	4638      	mov	r0, r7
 8006816:	f3af 8000 	nop.w
 800681a:	1c42      	adds	r2, r0, #1
 800681c:	4606      	mov	r6, r0
 800681e:	d1d6      	bne.n	80067ce <_svfiprintf_r+0x176>
 8006820:	89ab      	ldrh	r3, [r5, #12]
 8006822:	065b      	lsls	r3, r3, #25
 8006824:	f53f af2c 	bmi.w	8006680 <_svfiprintf_r+0x28>
 8006828:	9809      	ldr	r0, [sp, #36]	; 0x24
 800682a:	b01d      	add	sp, #116	; 0x74
 800682c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006830:	ab03      	add	r3, sp, #12
 8006832:	9300      	str	r3, [sp, #0]
 8006834:	462a      	mov	r2, r5
 8006836:	4b06      	ldr	r3, [pc, #24]	; (8006850 <_svfiprintf_r+0x1f8>)
 8006838:	a904      	add	r1, sp, #16
 800683a:	4638      	mov	r0, r7
 800683c:	f000 f87a 	bl	8006934 <_printf_i>
 8006840:	e7eb      	b.n	800681a <_svfiprintf_r+0x1c2>
 8006842:	bf00      	nop
 8006844:	08007d8c 	.word	0x08007d8c
 8006848:	08007d96 	.word	0x08007d96
 800684c:	00000000 	.word	0x00000000
 8006850:	080065a1 	.word	0x080065a1
 8006854:	08007d92 	.word	0x08007d92

08006858 <_printf_common>:
 8006858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800685c:	4616      	mov	r6, r2
 800685e:	4699      	mov	r9, r3
 8006860:	688a      	ldr	r2, [r1, #8]
 8006862:	690b      	ldr	r3, [r1, #16]
 8006864:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006868:	4293      	cmp	r3, r2
 800686a:	bfb8      	it	lt
 800686c:	4613      	movlt	r3, r2
 800686e:	6033      	str	r3, [r6, #0]
 8006870:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006874:	4607      	mov	r7, r0
 8006876:	460c      	mov	r4, r1
 8006878:	b10a      	cbz	r2, 800687e <_printf_common+0x26>
 800687a:	3301      	adds	r3, #1
 800687c:	6033      	str	r3, [r6, #0]
 800687e:	6823      	ldr	r3, [r4, #0]
 8006880:	0699      	lsls	r1, r3, #26
 8006882:	bf42      	ittt	mi
 8006884:	6833      	ldrmi	r3, [r6, #0]
 8006886:	3302      	addmi	r3, #2
 8006888:	6033      	strmi	r3, [r6, #0]
 800688a:	6825      	ldr	r5, [r4, #0]
 800688c:	f015 0506 	ands.w	r5, r5, #6
 8006890:	d106      	bne.n	80068a0 <_printf_common+0x48>
 8006892:	f104 0a19 	add.w	sl, r4, #25
 8006896:	68e3      	ldr	r3, [r4, #12]
 8006898:	6832      	ldr	r2, [r6, #0]
 800689a:	1a9b      	subs	r3, r3, r2
 800689c:	42ab      	cmp	r3, r5
 800689e:	dc26      	bgt.n	80068ee <_printf_common+0x96>
 80068a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80068a4:	1e13      	subs	r3, r2, #0
 80068a6:	6822      	ldr	r2, [r4, #0]
 80068a8:	bf18      	it	ne
 80068aa:	2301      	movne	r3, #1
 80068ac:	0692      	lsls	r2, r2, #26
 80068ae:	d42b      	bmi.n	8006908 <_printf_common+0xb0>
 80068b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068b4:	4649      	mov	r1, r9
 80068b6:	4638      	mov	r0, r7
 80068b8:	47c0      	blx	r8
 80068ba:	3001      	adds	r0, #1
 80068bc:	d01e      	beq.n	80068fc <_printf_common+0xa4>
 80068be:	6823      	ldr	r3, [r4, #0]
 80068c0:	68e5      	ldr	r5, [r4, #12]
 80068c2:	6832      	ldr	r2, [r6, #0]
 80068c4:	f003 0306 	and.w	r3, r3, #6
 80068c8:	2b04      	cmp	r3, #4
 80068ca:	bf08      	it	eq
 80068cc:	1aad      	subeq	r5, r5, r2
 80068ce:	68a3      	ldr	r3, [r4, #8]
 80068d0:	6922      	ldr	r2, [r4, #16]
 80068d2:	bf0c      	ite	eq
 80068d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068d8:	2500      	movne	r5, #0
 80068da:	4293      	cmp	r3, r2
 80068dc:	bfc4      	itt	gt
 80068de:	1a9b      	subgt	r3, r3, r2
 80068e0:	18ed      	addgt	r5, r5, r3
 80068e2:	2600      	movs	r6, #0
 80068e4:	341a      	adds	r4, #26
 80068e6:	42b5      	cmp	r5, r6
 80068e8:	d11a      	bne.n	8006920 <_printf_common+0xc8>
 80068ea:	2000      	movs	r0, #0
 80068ec:	e008      	b.n	8006900 <_printf_common+0xa8>
 80068ee:	2301      	movs	r3, #1
 80068f0:	4652      	mov	r2, sl
 80068f2:	4649      	mov	r1, r9
 80068f4:	4638      	mov	r0, r7
 80068f6:	47c0      	blx	r8
 80068f8:	3001      	adds	r0, #1
 80068fa:	d103      	bne.n	8006904 <_printf_common+0xac>
 80068fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006904:	3501      	adds	r5, #1
 8006906:	e7c6      	b.n	8006896 <_printf_common+0x3e>
 8006908:	18e1      	adds	r1, r4, r3
 800690a:	1c5a      	adds	r2, r3, #1
 800690c:	2030      	movs	r0, #48	; 0x30
 800690e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006912:	4422      	add	r2, r4
 8006914:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006918:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800691c:	3302      	adds	r3, #2
 800691e:	e7c7      	b.n	80068b0 <_printf_common+0x58>
 8006920:	2301      	movs	r3, #1
 8006922:	4622      	mov	r2, r4
 8006924:	4649      	mov	r1, r9
 8006926:	4638      	mov	r0, r7
 8006928:	47c0      	blx	r8
 800692a:	3001      	adds	r0, #1
 800692c:	d0e6      	beq.n	80068fc <_printf_common+0xa4>
 800692e:	3601      	adds	r6, #1
 8006930:	e7d9      	b.n	80068e6 <_printf_common+0x8e>
	...

08006934 <_printf_i>:
 8006934:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006938:	7e0f      	ldrb	r7, [r1, #24]
 800693a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800693c:	2f78      	cmp	r7, #120	; 0x78
 800693e:	4691      	mov	r9, r2
 8006940:	4680      	mov	r8, r0
 8006942:	460c      	mov	r4, r1
 8006944:	469a      	mov	sl, r3
 8006946:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800694a:	d807      	bhi.n	800695c <_printf_i+0x28>
 800694c:	2f62      	cmp	r7, #98	; 0x62
 800694e:	d80a      	bhi.n	8006966 <_printf_i+0x32>
 8006950:	2f00      	cmp	r7, #0
 8006952:	f000 80d8 	beq.w	8006b06 <_printf_i+0x1d2>
 8006956:	2f58      	cmp	r7, #88	; 0x58
 8006958:	f000 80a3 	beq.w	8006aa2 <_printf_i+0x16e>
 800695c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006960:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006964:	e03a      	b.n	80069dc <_printf_i+0xa8>
 8006966:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800696a:	2b15      	cmp	r3, #21
 800696c:	d8f6      	bhi.n	800695c <_printf_i+0x28>
 800696e:	a101      	add	r1, pc, #4	; (adr r1, 8006974 <_printf_i+0x40>)
 8006970:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006974:	080069cd 	.word	0x080069cd
 8006978:	080069e1 	.word	0x080069e1
 800697c:	0800695d 	.word	0x0800695d
 8006980:	0800695d 	.word	0x0800695d
 8006984:	0800695d 	.word	0x0800695d
 8006988:	0800695d 	.word	0x0800695d
 800698c:	080069e1 	.word	0x080069e1
 8006990:	0800695d 	.word	0x0800695d
 8006994:	0800695d 	.word	0x0800695d
 8006998:	0800695d 	.word	0x0800695d
 800699c:	0800695d 	.word	0x0800695d
 80069a0:	08006aed 	.word	0x08006aed
 80069a4:	08006a11 	.word	0x08006a11
 80069a8:	08006acf 	.word	0x08006acf
 80069ac:	0800695d 	.word	0x0800695d
 80069b0:	0800695d 	.word	0x0800695d
 80069b4:	08006b0f 	.word	0x08006b0f
 80069b8:	0800695d 	.word	0x0800695d
 80069bc:	08006a11 	.word	0x08006a11
 80069c0:	0800695d 	.word	0x0800695d
 80069c4:	0800695d 	.word	0x0800695d
 80069c8:	08006ad7 	.word	0x08006ad7
 80069cc:	682b      	ldr	r3, [r5, #0]
 80069ce:	1d1a      	adds	r2, r3, #4
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	602a      	str	r2, [r5, #0]
 80069d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069dc:	2301      	movs	r3, #1
 80069de:	e0a3      	b.n	8006b28 <_printf_i+0x1f4>
 80069e0:	6820      	ldr	r0, [r4, #0]
 80069e2:	6829      	ldr	r1, [r5, #0]
 80069e4:	0606      	lsls	r6, r0, #24
 80069e6:	f101 0304 	add.w	r3, r1, #4
 80069ea:	d50a      	bpl.n	8006a02 <_printf_i+0xce>
 80069ec:	680e      	ldr	r6, [r1, #0]
 80069ee:	602b      	str	r3, [r5, #0]
 80069f0:	2e00      	cmp	r6, #0
 80069f2:	da03      	bge.n	80069fc <_printf_i+0xc8>
 80069f4:	232d      	movs	r3, #45	; 0x2d
 80069f6:	4276      	negs	r6, r6
 80069f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069fc:	485e      	ldr	r0, [pc, #376]	; (8006b78 <_printf_i+0x244>)
 80069fe:	230a      	movs	r3, #10
 8006a00:	e019      	b.n	8006a36 <_printf_i+0x102>
 8006a02:	680e      	ldr	r6, [r1, #0]
 8006a04:	602b      	str	r3, [r5, #0]
 8006a06:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006a0a:	bf18      	it	ne
 8006a0c:	b236      	sxthne	r6, r6
 8006a0e:	e7ef      	b.n	80069f0 <_printf_i+0xbc>
 8006a10:	682b      	ldr	r3, [r5, #0]
 8006a12:	6820      	ldr	r0, [r4, #0]
 8006a14:	1d19      	adds	r1, r3, #4
 8006a16:	6029      	str	r1, [r5, #0]
 8006a18:	0601      	lsls	r1, r0, #24
 8006a1a:	d501      	bpl.n	8006a20 <_printf_i+0xec>
 8006a1c:	681e      	ldr	r6, [r3, #0]
 8006a1e:	e002      	b.n	8006a26 <_printf_i+0xf2>
 8006a20:	0646      	lsls	r6, r0, #25
 8006a22:	d5fb      	bpl.n	8006a1c <_printf_i+0xe8>
 8006a24:	881e      	ldrh	r6, [r3, #0]
 8006a26:	4854      	ldr	r0, [pc, #336]	; (8006b78 <_printf_i+0x244>)
 8006a28:	2f6f      	cmp	r7, #111	; 0x6f
 8006a2a:	bf0c      	ite	eq
 8006a2c:	2308      	moveq	r3, #8
 8006a2e:	230a      	movne	r3, #10
 8006a30:	2100      	movs	r1, #0
 8006a32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a36:	6865      	ldr	r5, [r4, #4]
 8006a38:	60a5      	str	r5, [r4, #8]
 8006a3a:	2d00      	cmp	r5, #0
 8006a3c:	bfa2      	ittt	ge
 8006a3e:	6821      	ldrge	r1, [r4, #0]
 8006a40:	f021 0104 	bicge.w	r1, r1, #4
 8006a44:	6021      	strge	r1, [r4, #0]
 8006a46:	b90e      	cbnz	r6, 8006a4c <_printf_i+0x118>
 8006a48:	2d00      	cmp	r5, #0
 8006a4a:	d04d      	beq.n	8006ae8 <_printf_i+0x1b4>
 8006a4c:	4615      	mov	r5, r2
 8006a4e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a52:	fb03 6711 	mls	r7, r3, r1, r6
 8006a56:	5dc7      	ldrb	r7, [r0, r7]
 8006a58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a5c:	4637      	mov	r7, r6
 8006a5e:	42bb      	cmp	r3, r7
 8006a60:	460e      	mov	r6, r1
 8006a62:	d9f4      	bls.n	8006a4e <_printf_i+0x11a>
 8006a64:	2b08      	cmp	r3, #8
 8006a66:	d10b      	bne.n	8006a80 <_printf_i+0x14c>
 8006a68:	6823      	ldr	r3, [r4, #0]
 8006a6a:	07de      	lsls	r6, r3, #31
 8006a6c:	d508      	bpl.n	8006a80 <_printf_i+0x14c>
 8006a6e:	6923      	ldr	r3, [r4, #16]
 8006a70:	6861      	ldr	r1, [r4, #4]
 8006a72:	4299      	cmp	r1, r3
 8006a74:	bfde      	ittt	le
 8006a76:	2330      	movle	r3, #48	; 0x30
 8006a78:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a7c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a80:	1b52      	subs	r2, r2, r5
 8006a82:	6122      	str	r2, [r4, #16]
 8006a84:	f8cd a000 	str.w	sl, [sp]
 8006a88:	464b      	mov	r3, r9
 8006a8a:	aa03      	add	r2, sp, #12
 8006a8c:	4621      	mov	r1, r4
 8006a8e:	4640      	mov	r0, r8
 8006a90:	f7ff fee2 	bl	8006858 <_printf_common>
 8006a94:	3001      	adds	r0, #1
 8006a96:	d14c      	bne.n	8006b32 <_printf_i+0x1fe>
 8006a98:	f04f 30ff 	mov.w	r0, #4294967295
 8006a9c:	b004      	add	sp, #16
 8006a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aa2:	4835      	ldr	r0, [pc, #212]	; (8006b78 <_printf_i+0x244>)
 8006aa4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006aa8:	6829      	ldr	r1, [r5, #0]
 8006aaa:	6823      	ldr	r3, [r4, #0]
 8006aac:	f851 6b04 	ldr.w	r6, [r1], #4
 8006ab0:	6029      	str	r1, [r5, #0]
 8006ab2:	061d      	lsls	r5, r3, #24
 8006ab4:	d514      	bpl.n	8006ae0 <_printf_i+0x1ac>
 8006ab6:	07df      	lsls	r7, r3, #31
 8006ab8:	bf44      	itt	mi
 8006aba:	f043 0320 	orrmi.w	r3, r3, #32
 8006abe:	6023      	strmi	r3, [r4, #0]
 8006ac0:	b91e      	cbnz	r6, 8006aca <_printf_i+0x196>
 8006ac2:	6823      	ldr	r3, [r4, #0]
 8006ac4:	f023 0320 	bic.w	r3, r3, #32
 8006ac8:	6023      	str	r3, [r4, #0]
 8006aca:	2310      	movs	r3, #16
 8006acc:	e7b0      	b.n	8006a30 <_printf_i+0xfc>
 8006ace:	6823      	ldr	r3, [r4, #0]
 8006ad0:	f043 0320 	orr.w	r3, r3, #32
 8006ad4:	6023      	str	r3, [r4, #0]
 8006ad6:	2378      	movs	r3, #120	; 0x78
 8006ad8:	4828      	ldr	r0, [pc, #160]	; (8006b7c <_printf_i+0x248>)
 8006ada:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006ade:	e7e3      	b.n	8006aa8 <_printf_i+0x174>
 8006ae0:	0659      	lsls	r1, r3, #25
 8006ae2:	bf48      	it	mi
 8006ae4:	b2b6      	uxthmi	r6, r6
 8006ae6:	e7e6      	b.n	8006ab6 <_printf_i+0x182>
 8006ae8:	4615      	mov	r5, r2
 8006aea:	e7bb      	b.n	8006a64 <_printf_i+0x130>
 8006aec:	682b      	ldr	r3, [r5, #0]
 8006aee:	6826      	ldr	r6, [r4, #0]
 8006af0:	6961      	ldr	r1, [r4, #20]
 8006af2:	1d18      	adds	r0, r3, #4
 8006af4:	6028      	str	r0, [r5, #0]
 8006af6:	0635      	lsls	r5, r6, #24
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	d501      	bpl.n	8006b00 <_printf_i+0x1cc>
 8006afc:	6019      	str	r1, [r3, #0]
 8006afe:	e002      	b.n	8006b06 <_printf_i+0x1d2>
 8006b00:	0670      	lsls	r0, r6, #25
 8006b02:	d5fb      	bpl.n	8006afc <_printf_i+0x1c8>
 8006b04:	8019      	strh	r1, [r3, #0]
 8006b06:	2300      	movs	r3, #0
 8006b08:	6123      	str	r3, [r4, #16]
 8006b0a:	4615      	mov	r5, r2
 8006b0c:	e7ba      	b.n	8006a84 <_printf_i+0x150>
 8006b0e:	682b      	ldr	r3, [r5, #0]
 8006b10:	1d1a      	adds	r2, r3, #4
 8006b12:	602a      	str	r2, [r5, #0]
 8006b14:	681d      	ldr	r5, [r3, #0]
 8006b16:	6862      	ldr	r2, [r4, #4]
 8006b18:	2100      	movs	r1, #0
 8006b1a:	4628      	mov	r0, r5
 8006b1c:	f7f9 fb68 	bl	80001f0 <memchr>
 8006b20:	b108      	cbz	r0, 8006b26 <_printf_i+0x1f2>
 8006b22:	1b40      	subs	r0, r0, r5
 8006b24:	6060      	str	r0, [r4, #4]
 8006b26:	6863      	ldr	r3, [r4, #4]
 8006b28:	6123      	str	r3, [r4, #16]
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b30:	e7a8      	b.n	8006a84 <_printf_i+0x150>
 8006b32:	6923      	ldr	r3, [r4, #16]
 8006b34:	462a      	mov	r2, r5
 8006b36:	4649      	mov	r1, r9
 8006b38:	4640      	mov	r0, r8
 8006b3a:	47d0      	blx	sl
 8006b3c:	3001      	adds	r0, #1
 8006b3e:	d0ab      	beq.n	8006a98 <_printf_i+0x164>
 8006b40:	6823      	ldr	r3, [r4, #0]
 8006b42:	079b      	lsls	r3, r3, #30
 8006b44:	d413      	bmi.n	8006b6e <_printf_i+0x23a>
 8006b46:	68e0      	ldr	r0, [r4, #12]
 8006b48:	9b03      	ldr	r3, [sp, #12]
 8006b4a:	4298      	cmp	r0, r3
 8006b4c:	bfb8      	it	lt
 8006b4e:	4618      	movlt	r0, r3
 8006b50:	e7a4      	b.n	8006a9c <_printf_i+0x168>
 8006b52:	2301      	movs	r3, #1
 8006b54:	4632      	mov	r2, r6
 8006b56:	4649      	mov	r1, r9
 8006b58:	4640      	mov	r0, r8
 8006b5a:	47d0      	blx	sl
 8006b5c:	3001      	adds	r0, #1
 8006b5e:	d09b      	beq.n	8006a98 <_printf_i+0x164>
 8006b60:	3501      	adds	r5, #1
 8006b62:	68e3      	ldr	r3, [r4, #12]
 8006b64:	9903      	ldr	r1, [sp, #12]
 8006b66:	1a5b      	subs	r3, r3, r1
 8006b68:	42ab      	cmp	r3, r5
 8006b6a:	dcf2      	bgt.n	8006b52 <_printf_i+0x21e>
 8006b6c:	e7eb      	b.n	8006b46 <_printf_i+0x212>
 8006b6e:	2500      	movs	r5, #0
 8006b70:	f104 0619 	add.w	r6, r4, #25
 8006b74:	e7f5      	b.n	8006b62 <_printf_i+0x22e>
 8006b76:	bf00      	nop
 8006b78:	08007d9d 	.word	0x08007d9d
 8006b7c:	08007dae 	.word	0x08007dae

08006b80 <memcpy>:
 8006b80:	440a      	add	r2, r1
 8006b82:	4291      	cmp	r1, r2
 8006b84:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b88:	d100      	bne.n	8006b8c <memcpy+0xc>
 8006b8a:	4770      	bx	lr
 8006b8c:	b510      	push	{r4, lr}
 8006b8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b96:	4291      	cmp	r1, r2
 8006b98:	d1f9      	bne.n	8006b8e <memcpy+0xe>
 8006b9a:	bd10      	pop	{r4, pc}

08006b9c <memmove>:
 8006b9c:	4288      	cmp	r0, r1
 8006b9e:	b510      	push	{r4, lr}
 8006ba0:	eb01 0402 	add.w	r4, r1, r2
 8006ba4:	d902      	bls.n	8006bac <memmove+0x10>
 8006ba6:	4284      	cmp	r4, r0
 8006ba8:	4623      	mov	r3, r4
 8006baa:	d807      	bhi.n	8006bbc <memmove+0x20>
 8006bac:	1e43      	subs	r3, r0, #1
 8006bae:	42a1      	cmp	r1, r4
 8006bb0:	d008      	beq.n	8006bc4 <memmove+0x28>
 8006bb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006bb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006bba:	e7f8      	b.n	8006bae <memmove+0x12>
 8006bbc:	4402      	add	r2, r0
 8006bbe:	4601      	mov	r1, r0
 8006bc0:	428a      	cmp	r2, r1
 8006bc2:	d100      	bne.n	8006bc6 <memmove+0x2a>
 8006bc4:	bd10      	pop	{r4, pc}
 8006bc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006bca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006bce:	e7f7      	b.n	8006bc0 <memmove+0x24>

08006bd0 <_free_r>:
 8006bd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006bd2:	2900      	cmp	r1, #0
 8006bd4:	d044      	beq.n	8006c60 <_free_r+0x90>
 8006bd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bda:	9001      	str	r0, [sp, #4]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f1a1 0404 	sub.w	r4, r1, #4
 8006be2:	bfb8      	it	lt
 8006be4:	18e4      	addlt	r4, r4, r3
 8006be6:	f000 f913 	bl	8006e10 <__malloc_lock>
 8006bea:	4a1e      	ldr	r2, [pc, #120]	; (8006c64 <_free_r+0x94>)
 8006bec:	9801      	ldr	r0, [sp, #4]
 8006bee:	6813      	ldr	r3, [r2, #0]
 8006bf0:	b933      	cbnz	r3, 8006c00 <_free_r+0x30>
 8006bf2:	6063      	str	r3, [r4, #4]
 8006bf4:	6014      	str	r4, [r2, #0]
 8006bf6:	b003      	add	sp, #12
 8006bf8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006bfc:	f000 b90e 	b.w	8006e1c <__malloc_unlock>
 8006c00:	42a3      	cmp	r3, r4
 8006c02:	d908      	bls.n	8006c16 <_free_r+0x46>
 8006c04:	6825      	ldr	r5, [r4, #0]
 8006c06:	1961      	adds	r1, r4, r5
 8006c08:	428b      	cmp	r3, r1
 8006c0a:	bf01      	itttt	eq
 8006c0c:	6819      	ldreq	r1, [r3, #0]
 8006c0e:	685b      	ldreq	r3, [r3, #4]
 8006c10:	1949      	addeq	r1, r1, r5
 8006c12:	6021      	streq	r1, [r4, #0]
 8006c14:	e7ed      	b.n	8006bf2 <_free_r+0x22>
 8006c16:	461a      	mov	r2, r3
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	b10b      	cbz	r3, 8006c20 <_free_r+0x50>
 8006c1c:	42a3      	cmp	r3, r4
 8006c1e:	d9fa      	bls.n	8006c16 <_free_r+0x46>
 8006c20:	6811      	ldr	r1, [r2, #0]
 8006c22:	1855      	adds	r5, r2, r1
 8006c24:	42a5      	cmp	r5, r4
 8006c26:	d10b      	bne.n	8006c40 <_free_r+0x70>
 8006c28:	6824      	ldr	r4, [r4, #0]
 8006c2a:	4421      	add	r1, r4
 8006c2c:	1854      	adds	r4, r2, r1
 8006c2e:	42a3      	cmp	r3, r4
 8006c30:	6011      	str	r1, [r2, #0]
 8006c32:	d1e0      	bne.n	8006bf6 <_free_r+0x26>
 8006c34:	681c      	ldr	r4, [r3, #0]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	6053      	str	r3, [r2, #4]
 8006c3a:	4421      	add	r1, r4
 8006c3c:	6011      	str	r1, [r2, #0]
 8006c3e:	e7da      	b.n	8006bf6 <_free_r+0x26>
 8006c40:	d902      	bls.n	8006c48 <_free_r+0x78>
 8006c42:	230c      	movs	r3, #12
 8006c44:	6003      	str	r3, [r0, #0]
 8006c46:	e7d6      	b.n	8006bf6 <_free_r+0x26>
 8006c48:	6825      	ldr	r5, [r4, #0]
 8006c4a:	1961      	adds	r1, r4, r5
 8006c4c:	428b      	cmp	r3, r1
 8006c4e:	bf04      	itt	eq
 8006c50:	6819      	ldreq	r1, [r3, #0]
 8006c52:	685b      	ldreq	r3, [r3, #4]
 8006c54:	6063      	str	r3, [r4, #4]
 8006c56:	bf04      	itt	eq
 8006c58:	1949      	addeq	r1, r1, r5
 8006c5a:	6021      	streq	r1, [r4, #0]
 8006c5c:	6054      	str	r4, [r2, #4]
 8006c5e:	e7ca      	b.n	8006bf6 <_free_r+0x26>
 8006c60:	b003      	add	sp, #12
 8006c62:	bd30      	pop	{r4, r5, pc}
 8006c64:	20000348 	.word	0x20000348

08006c68 <sbrk_aligned>:
 8006c68:	b570      	push	{r4, r5, r6, lr}
 8006c6a:	4e0e      	ldr	r6, [pc, #56]	; (8006ca4 <sbrk_aligned+0x3c>)
 8006c6c:	460c      	mov	r4, r1
 8006c6e:	6831      	ldr	r1, [r6, #0]
 8006c70:	4605      	mov	r5, r0
 8006c72:	b911      	cbnz	r1, 8006c7a <sbrk_aligned+0x12>
 8006c74:	f000 f8bc 	bl	8006df0 <_sbrk_r>
 8006c78:	6030      	str	r0, [r6, #0]
 8006c7a:	4621      	mov	r1, r4
 8006c7c:	4628      	mov	r0, r5
 8006c7e:	f000 f8b7 	bl	8006df0 <_sbrk_r>
 8006c82:	1c43      	adds	r3, r0, #1
 8006c84:	d00a      	beq.n	8006c9c <sbrk_aligned+0x34>
 8006c86:	1cc4      	adds	r4, r0, #3
 8006c88:	f024 0403 	bic.w	r4, r4, #3
 8006c8c:	42a0      	cmp	r0, r4
 8006c8e:	d007      	beq.n	8006ca0 <sbrk_aligned+0x38>
 8006c90:	1a21      	subs	r1, r4, r0
 8006c92:	4628      	mov	r0, r5
 8006c94:	f000 f8ac 	bl	8006df0 <_sbrk_r>
 8006c98:	3001      	adds	r0, #1
 8006c9a:	d101      	bne.n	8006ca0 <sbrk_aligned+0x38>
 8006c9c:	f04f 34ff 	mov.w	r4, #4294967295
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	bd70      	pop	{r4, r5, r6, pc}
 8006ca4:	2000034c 	.word	0x2000034c

08006ca8 <_malloc_r>:
 8006ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cac:	1ccd      	adds	r5, r1, #3
 8006cae:	f025 0503 	bic.w	r5, r5, #3
 8006cb2:	3508      	adds	r5, #8
 8006cb4:	2d0c      	cmp	r5, #12
 8006cb6:	bf38      	it	cc
 8006cb8:	250c      	movcc	r5, #12
 8006cba:	2d00      	cmp	r5, #0
 8006cbc:	4607      	mov	r7, r0
 8006cbe:	db01      	blt.n	8006cc4 <_malloc_r+0x1c>
 8006cc0:	42a9      	cmp	r1, r5
 8006cc2:	d905      	bls.n	8006cd0 <_malloc_r+0x28>
 8006cc4:	230c      	movs	r3, #12
 8006cc6:	603b      	str	r3, [r7, #0]
 8006cc8:	2600      	movs	r6, #0
 8006cca:	4630      	mov	r0, r6
 8006ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cd0:	4e2e      	ldr	r6, [pc, #184]	; (8006d8c <_malloc_r+0xe4>)
 8006cd2:	f000 f89d 	bl	8006e10 <__malloc_lock>
 8006cd6:	6833      	ldr	r3, [r6, #0]
 8006cd8:	461c      	mov	r4, r3
 8006cda:	bb34      	cbnz	r4, 8006d2a <_malloc_r+0x82>
 8006cdc:	4629      	mov	r1, r5
 8006cde:	4638      	mov	r0, r7
 8006ce0:	f7ff ffc2 	bl	8006c68 <sbrk_aligned>
 8006ce4:	1c43      	adds	r3, r0, #1
 8006ce6:	4604      	mov	r4, r0
 8006ce8:	d14d      	bne.n	8006d86 <_malloc_r+0xde>
 8006cea:	6834      	ldr	r4, [r6, #0]
 8006cec:	4626      	mov	r6, r4
 8006cee:	2e00      	cmp	r6, #0
 8006cf0:	d140      	bne.n	8006d74 <_malloc_r+0xcc>
 8006cf2:	6823      	ldr	r3, [r4, #0]
 8006cf4:	4631      	mov	r1, r6
 8006cf6:	4638      	mov	r0, r7
 8006cf8:	eb04 0803 	add.w	r8, r4, r3
 8006cfc:	f000 f878 	bl	8006df0 <_sbrk_r>
 8006d00:	4580      	cmp	r8, r0
 8006d02:	d13a      	bne.n	8006d7a <_malloc_r+0xd2>
 8006d04:	6821      	ldr	r1, [r4, #0]
 8006d06:	3503      	adds	r5, #3
 8006d08:	1a6d      	subs	r5, r5, r1
 8006d0a:	f025 0503 	bic.w	r5, r5, #3
 8006d0e:	3508      	adds	r5, #8
 8006d10:	2d0c      	cmp	r5, #12
 8006d12:	bf38      	it	cc
 8006d14:	250c      	movcc	r5, #12
 8006d16:	4629      	mov	r1, r5
 8006d18:	4638      	mov	r0, r7
 8006d1a:	f7ff ffa5 	bl	8006c68 <sbrk_aligned>
 8006d1e:	3001      	adds	r0, #1
 8006d20:	d02b      	beq.n	8006d7a <_malloc_r+0xd2>
 8006d22:	6823      	ldr	r3, [r4, #0]
 8006d24:	442b      	add	r3, r5
 8006d26:	6023      	str	r3, [r4, #0]
 8006d28:	e00e      	b.n	8006d48 <_malloc_r+0xa0>
 8006d2a:	6822      	ldr	r2, [r4, #0]
 8006d2c:	1b52      	subs	r2, r2, r5
 8006d2e:	d41e      	bmi.n	8006d6e <_malloc_r+0xc6>
 8006d30:	2a0b      	cmp	r2, #11
 8006d32:	d916      	bls.n	8006d62 <_malloc_r+0xba>
 8006d34:	1961      	adds	r1, r4, r5
 8006d36:	42a3      	cmp	r3, r4
 8006d38:	6025      	str	r5, [r4, #0]
 8006d3a:	bf18      	it	ne
 8006d3c:	6059      	strne	r1, [r3, #4]
 8006d3e:	6863      	ldr	r3, [r4, #4]
 8006d40:	bf08      	it	eq
 8006d42:	6031      	streq	r1, [r6, #0]
 8006d44:	5162      	str	r2, [r4, r5]
 8006d46:	604b      	str	r3, [r1, #4]
 8006d48:	4638      	mov	r0, r7
 8006d4a:	f104 060b 	add.w	r6, r4, #11
 8006d4e:	f000 f865 	bl	8006e1c <__malloc_unlock>
 8006d52:	f026 0607 	bic.w	r6, r6, #7
 8006d56:	1d23      	adds	r3, r4, #4
 8006d58:	1af2      	subs	r2, r6, r3
 8006d5a:	d0b6      	beq.n	8006cca <_malloc_r+0x22>
 8006d5c:	1b9b      	subs	r3, r3, r6
 8006d5e:	50a3      	str	r3, [r4, r2]
 8006d60:	e7b3      	b.n	8006cca <_malloc_r+0x22>
 8006d62:	6862      	ldr	r2, [r4, #4]
 8006d64:	42a3      	cmp	r3, r4
 8006d66:	bf0c      	ite	eq
 8006d68:	6032      	streq	r2, [r6, #0]
 8006d6a:	605a      	strne	r2, [r3, #4]
 8006d6c:	e7ec      	b.n	8006d48 <_malloc_r+0xa0>
 8006d6e:	4623      	mov	r3, r4
 8006d70:	6864      	ldr	r4, [r4, #4]
 8006d72:	e7b2      	b.n	8006cda <_malloc_r+0x32>
 8006d74:	4634      	mov	r4, r6
 8006d76:	6876      	ldr	r6, [r6, #4]
 8006d78:	e7b9      	b.n	8006cee <_malloc_r+0x46>
 8006d7a:	230c      	movs	r3, #12
 8006d7c:	603b      	str	r3, [r7, #0]
 8006d7e:	4638      	mov	r0, r7
 8006d80:	f000 f84c 	bl	8006e1c <__malloc_unlock>
 8006d84:	e7a1      	b.n	8006cca <_malloc_r+0x22>
 8006d86:	6025      	str	r5, [r4, #0]
 8006d88:	e7de      	b.n	8006d48 <_malloc_r+0xa0>
 8006d8a:	bf00      	nop
 8006d8c:	20000348 	.word	0x20000348

08006d90 <_realloc_r>:
 8006d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d94:	4680      	mov	r8, r0
 8006d96:	4614      	mov	r4, r2
 8006d98:	460e      	mov	r6, r1
 8006d9a:	b921      	cbnz	r1, 8006da6 <_realloc_r+0x16>
 8006d9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006da0:	4611      	mov	r1, r2
 8006da2:	f7ff bf81 	b.w	8006ca8 <_malloc_r>
 8006da6:	b92a      	cbnz	r2, 8006db4 <_realloc_r+0x24>
 8006da8:	f7ff ff12 	bl	8006bd0 <_free_r>
 8006dac:	4625      	mov	r5, r4
 8006dae:	4628      	mov	r0, r5
 8006db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006db4:	f000 f838 	bl	8006e28 <_malloc_usable_size_r>
 8006db8:	4284      	cmp	r4, r0
 8006dba:	4607      	mov	r7, r0
 8006dbc:	d802      	bhi.n	8006dc4 <_realloc_r+0x34>
 8006dbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006dc2:	d812      	bhi.n	8006dea <_realloc_r+0x5a>
 8006dc4:	4621      	mov	r1, r4
 8006dc6:	4640      	mov	r0, r8
 8006dc8:	f7ff ff6e 	bl	8006ca8 <_malloc_r>
 8006dcc:	4605      	mov	r5, r0
 8006dce:	2800      	cmp	r0, #0
 8006dd0:	d0ed      	beq.n	8006dae <_realloc_r+0x1e>
 8006dd2:	42bc      	cmp	r4, r7
 8006dd4:	4622      	mov	r2, r4
 8006dd6:	4631      	mov	r1, r6
 8006dd8:	bf28      	it	cs
 8006dda:	463a      	movcs	r2, r7
 8006ddc:	f7ff fed0 	bl	8006b80 <memcpy>
 8006de0:	4631      	mov	r1, r6
 8006de2:	4640      	mov	r0, r8
 8006de4:	f7ff fef4 	bl	8006bd0 <_free_r>
 8006de8:	e7e1      	b.n	8006dae <_realloc_r+0x1e>
 8006dea:	4635      	mov	r5, r6
 8006dec:	e7df      	b.n	8006dae <_realloc_r+0x1e>
	...

08006df0 <_sbrk_r>:
 8006df0:	b538      	push	{r3, r4, r5, lr}
 8006df2:	4d06      	ldr	r5, [pc, #24]	; (8006e0c <_sbrk_r+0x1c>)
 8006df4:	2300      	movs	r3, #0
 8006df6:	4604      	mov	r4, r0
 8006df8:	4608      	mov	r0, r1
 8006dfa:	602b      	str	r3, [r5, #0]
 8006dfc:	f7fb ff68 	bl	8002cd0 <_sbrk>
 8006e00:	1c43      	adds	r3, r0, #1
 8006e02:	d102      	bne.n	8006e0a <_sbrk_r+0x1a>
 8006e04:	682b      	ldr	r3, [r5, #0]
 8006e06:	b103      	cbz	r3, 8006e0a <_sbrk_r+0x1a>
 8006e08:	6023      	str	r3, [r4, #0]
 8006e0a:	bd38      	pop	{r3, r4, r5, pc}
 8006e0c:	20000350 	.word	0x20000350

08006e10 <__malloc_lock>:
 8006e10:	4801      	ldr	r0, [pc, #4]	; (8006e18 <__malloc_lock+0x8>)
 8006e12:	f000 b811 	b.w	8006e38 <__retarget_lock_acquire_recursive>
 8006e16:	bf00      	nop
 8006e18:	20000354 	.word	0x20000354

08006e1c <__malloc_unlock>:
 8006e1c:	4801      	ldr	r0, [pc, #4]	; (8006e24 <__malloc_unlock+0x8>)
 8006e1e:	f000 b80c 	b.w	8006e3a <__retarget_lock_release_recursive>
 8006e22:	bf00      	nop
 8006e24:	20000354 	.word	0x20000354

08006e28 <_malloc_usable_size_r>:
 8006e28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e2c:	1f18      	subs	r0, r3, #4
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	bfbc      	itt	lt
 8006e32:	580b      	ldrlt	r3, [r1, r0]
 8006e34:	18c0      	addlt	r0, r0, r3
 8006e36:	4770      	bx	lr

08006e38 <__retarget_lock_acquire_recursive>:
 8006e38:	4770      	bx	lr

08006e3a <__retarget_lock_release_recursive>:
 8006e3a:	4770      	bx	lr

08006e3c <pow>:
 8006e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e3e:	ed2d 8b02 	vpush	{d8}
 8006e42:	eeb0 8a40 	vmov.f32	s16, s0
 8006e46:	eef0 8a60 	vmov.f32	s17, s1
 8006e4a:	ec55 4b11 	vmov	r4, r5, d1
 8006e4e:	f000 f867 	bl	8006f20 <__ieee754_pow>
 8006e52:	4622      	mov	r2, r4
 8006e54:	462b      	mov	r3, r5
 8006e56:	4620      	mov	r0, r4
 8006e58:	4629      	mov	r1, r5
 8006e5a:	ec57 6b10 	vmov	r6, r7, d0
 8006e5e:	f7f9 fe6d 	bl	8000b3c <__aeabi_dcmpun>
 8006e62:	2800      	cmp	r0, #0
 8006e64:	d13b      	bne.n	8006ede <pow+0xa2>
 8006e66:	ec51 0b18 	vmov	r0, r1, d8
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	f7f9 fe33 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e72:	b1b8      	cbz	r0, 8006ea4 <pow+0x68>
 8006e74:	2200      	movs	r2, #0
 8006e76:	2300      	movs	r3, #0
 8006e78:	4620      	mov	r0, r4
 8006e7a:	4629      	mov	r1, r5
 8006e7c:	f7f9 fe2c 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e80:	2800      	cmp	r0, #0
 8006e82:	d146      	bne.n	8006f12 <pow+0xd6>
 8006e84:	ec45 4b10 	vmov	d0, r4, r5
 8006e88:	f000 fe63 	bl	8007b52 <finite>
 8006e8c:	b338      	cbz	r0, 8006ede <pow+0xa2>
 8006e8e:	2200      	movs	r2, #0
 8006e90:	2300      	movs	r3, #0
 8006e92:	4620      	mov	r0, r4
 8006e94:	4629      	mov	r1, r5
 8006e96:	f7f9 fe29 	bl	8000aec <__aeabi_dcmplt>
 8006e9a:	b300      	cbz	r0, 8006ede <pow+0xa2>
 8006e9c:	f7ff fb1a 	bl	80064d4 <__errno>
 8006ea0:	2322      	movs	r3, #34	; 0x22
 8006ea2:	e01b      	b.n	8006edc <pow+0xa0>
 8006ea4:	ec47 6b10 	vmov	d0, r6, r7
 8006ea8:	f000 fe53 	bl	8007b52 <finite>
 8006eac:	b9e0      	cbnz	r0, 8006ee8 <pow+0xac>
 8006eae:	eeb0 0a48 	vmov.f32	s0, s16
 8006eb2:	eef0 0a68 	vmov.f32	s1, s17
 8006eb6:	f000 fe4c 	bl	8007b52 <finite>
 8006eba:	b1a8      	cbz	r0, 8006ee8 <pow+0xac>
 8006ebc:	ec45 4b10 	vmov	d0, r4, r5
 8006ec0:	f000 fe47 	bl	8007b52 <finite>
 8006ec4:	b180      	cbz	r0, 8006ee8 <pow+0xac>
 8006ec6:	4632      	mov	r2, r6
 8006ec8:	463b      	mov	r3, r7
 8006eca:	4630      	mov	r0, r6
 8006ecc:	4639      	mov	r1, r7
 8006ece:	f7f9 fe35 	bl	8000b3c <__aeabi_dcmpun>
 8006ed2:	2800      	cmp	r0, #0
 8006ed4:	d0e2      	beq.n	8006e9c <pow+0x60>
 8006ed6:	f7ff fafd 	bl	80064d4 <__errno>
 8006eda:	2321      	movs	r3, #33	; 0x21
 8006edc:	6003      	str	r3, [r0, #0]
 8006ede:	ecbd 8b02 	vpop	{d8}
 8006ee2:	ec47 6b10 	vmov	d0, r6, r7
 8006ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ee8:	2200      	movs	r2, #0
 8006eea:	2300      	movs	r3, #0
 8006eec:	4630      	mov	r0, r6
 8006eee:	4639      	mov	r1, r7
 8006ef0:	f7f9 fdf2 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ef4:	2800      	cmp	r0, #0
 8006ef6:	d0f2      	beq.n	8006ede <pow+0xa2>
 8006ef8:	eeb0 0a48 	vmov.f32	s0, s16
 8006efc:	eef0 0a68 	vmov.f32	s1, s17
 8006f00:	f000 fe27 	bl	8007b52 <finite>
 8006f04:	2800      	cmp	r0, #0
 8006f06:	d0ea      	beq.n	8006ede <pow+0xa2>
 8006f08:	ec45 4b10 	vmov	d0, r4, r5
 8006f0c:	f000 fe21 	bl	8007b52 <finite>
 8006f10:	e7c3      	b.n	8006e9a <pow+0x5e>
 8006f12:	4f01      	ldr	r7, [pc, #4]	; (8006f18 <pow+0xdc>)
 8006f14:	2600      	movs	r6, #0
 8006f16:	e7e2      	b.n	8006ede <pow+0xa2>
 8006f18:	3ff00000 	.word	0x3ff00000
 8006f1c:	00000000 	.word	0x00000000

08006f20 <__ieee754_pow>:
 8006f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f24:	ed2d 8b06 	vpush	{d8-d10}
 8006f28:	b089      	sub	sp, #36	; 0x24
 8006f2a:	ed8d 1b00 	vstr	d1, [sp]
 8006f2e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8006f32:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8006f36:	ea58 0102 	orrs.w	r1, r8, r2
 8006f3a:	ec57 6b10 	vmov	r6, r7, d0
 8006f3e:	d115      	bne.n	8006f6c <__ieee754_pow+0x4c>
 8006f40:	19b3      	adds	r3, r6, r6
 8006f42:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8006f46:	4152      	adcs	r2, r2
 8006f48:	4299      	cmp	r1, r3
 8006f4a:	4b89      	ldr	r3, [pc, #548]	; (8007170 <__ieee754_pow+0x250>)
 8006f4c:	4193      	sbcs	r3, r2
 8006f4e:	f080 84d2 	bcs.w	80078f6 <__ieee754_pow+0x9d6>
 8006f52:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f56:	4630      	mov	r0, r6
 8006f58:	4639      	mov	r1, r7
 8006f5a:	f7f9 f99f 	bl	800029c <__adddf3>
 8006f5e:	ec41 0b10 	vmov	d0, r0, r1
 8006f62:	b009      	add	sp, #36	; 0x24
 8006f64:	ecbd 8b06 	vpop	{d8-d10}
 8006f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f6c:	4b81      	ldr	r3, [pc, #516]	; (8007174 <__ieee754_pow+0x254>)
 8006f6e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8006f72:	429c      	cmp	r4, r3
 8006f74:	ee10 aa10 	vmov	sl, s0
 8006f78:	463d      	mov	r5, r7
 8006f7a:	dc06      	bgt.n	8006f8a <__ieee754_pow+0x6a>
 8006f7c:	d101      	bne.n	8006f82 <__ieee754_pow+0x62>
 8006f7e:	2e00      	cmp	r6, #0
 8006f80:	d1e7      	bne.n	8006f52 <__ieee754_pow+0x32>
 8006f82:	4598      	cmp	r8, r3
 8006f84:	dc01      	bgt.n	8006f8a <__ieee754_pow+0x6a>
 8006f86:	d10f      	bne.n	8006fa8 <__ieee754_pow+0x88>
 8006f88:	b172      	cbz	r2, 8006fa8 <__ieee754_pow+0x88>
 8006f8a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8006f8e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8006f92:	ea55 050a 	orrs.w	r5, r5, sl
 8006f96:	d1dc      	bne.n	8006f52 <__ieee754_pow+0x32>
 8006f98:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006f9c:	18db      	adds	r3, r3, r3
 8006f9e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8006fa2:	4152      	adcs	r2, r2
 8006fa4:	429d      	cmp	r5, r3
 8006fa6:	e7d0      	b.n	8006f4a <__ieee754_pow+0x2a>
 8006fa8:	2d00      	cmp	r5, #0
 8006faa:	da3b      	bge.n	8007024 <__ieee754_pow+0x104>
 8006fac:	4b72      	ldr	r3, [pc, #456]	; (8007178 <__ieee754_pow+0x258>)
 8006fae:	4598      	cmp	r8, r3
 8006fb0:	dc51      	bgt.n	8007056 <__ieee754_pow+0x136>
 8006fb2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006fb6:	4598      	cmp	r8, r3
 8006fb8:	f340 84ac 	ble.w	8007914 <__ieee754_pow+0x9f4>
 8006fbc:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006fc0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006fc4:	2b14      	cmp	r3, #20
 8006fc6:	dd0f      	ble.n	8006fe8 <__ieee754_pow+0xc8>
 8006fc8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006fcc:	fa22 f103 	lsr.w	r1, r2, r3
 8006fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	f040 849d 	bne.w	8007914 <__ieee754_pow+0x9f4>
 8006fda:	f001 0101 	and.w	r1, r1, #1
 8006fde:	f1c1 0302 	rsb	r3, r1, #2
 8006fe2:	9304      	str	r3, [sp, #16]
 8006fe4:	b182      	cbz	r2, 8007008 <__ieee754_pow+0xe8>
 8006fe6:	e05f      	b.n	80070a8 <__ieee754_pow+0x188>
 8006fe8:	2a00      	cmp	r2, #0
 8006fea:	d15b      	bne.n	80070a4 <__ieee754_pow+0x184>
 8006fec:	f1c3 0314 	rsb	r3, r3, #20
 8006ff0:	fa48 f103 	asr.w	r1, r8, r3
 8006ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ff8:	4543      	cmp	r3, r8
 8006ffa:	f040 8488 	bne.w	800790e <__ieee754_pow+0x9ee>
 8006ffe:	f001 0101 	and.w	r1, r1, #1
 8007002:	f1c1 0302 	rsb	r3, r1, #2
 8007006:	9304      	str	r3, [sp, #16]
 8007008:	4b5c      	ldr	r3, [pc, #368]	; (800717c <__ieee754_pow+0x25c>)
 800700a:	4598      	cmp	r8, r3
 800700c:	d132      	bne.n	8007074 <__ieee754_pow+0x154>
 800700e:	f1b9 0f00 	cmp.w	r9, #0
 8007012:	f280 8478 	bge.w	8007906 <__ieee754_pow+0x9e6>
 8007016:	4959      	ldr	r1, [pc, #356]	; (800717c <__ieee754_pow+0x25c>)
 8007018:	4632      	mov	r2, r6
 800701a:	463b      	mov	r3, r7
 800701c:	2000      	movs	r0, #0
 800701e:	f7f9 fc1d 	bl	800085c <__aeabi_ddiv>
 8007022:	e79c      	b.n	8006f5e <__ieee754_pow+0x3e>
 8007024:	2300      	movs	r3, #0
 8007026:	9304      	str	r3, [sp, #16]
 8007028:	2a00      	cmp	r2, #0
 800702a:	d13d      	bne.n	80070a8 <__ieee754_pow+0x188>
 800702c:	4b51      	ldr	r3, [pc, #324]	; (8007174 <__ieee754_pow+0x254>)
 800702e:	4598      	cmp	r8, r3
 8007030:	d1ea      	bne.n	8007008 <__ieee754_pow+0xe8>
 8007032:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007036:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800703a:	ea53 030a 	orrs.w	r3, r3, sl
 800703e:	f000 845a 	beq.w	80078f6 <__ieee754_pow+0x9d6>
 8007042:	4b4f      	ldr	r3, [pc, #316]	; (8007180 <__ieee754_pow+0x260>)
 8007044:	429c      	cmp	r4, r3
 8007046:	dd08      	ble.n	800705a <__ieee754_pow+0x13a>
 8007048:	f1b9 0f00 	cmp.w	r9, #0
 800704c:	f2c0 8457 	blt.w	80078fe <__ieee754_pow+0x9de>
 8007050:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007054:	e783      	b.n	8006f5e <__ieee754_pow+0x3e>
 8007056:	2302      	movs	r3, #2
 8007058:	e7e5      	b.n	8007026 <__ieee754_pow+0x106>
 800705a:	f1b9 0f00 	cmp.w	r9, #0
 800705e:	f04f 0000 	mov.w	r0, #0
 8007062:	f04f 0100 	mov.w	r1, #0
 8007066:	f6bf af7a 	bge.w	8006f5e <__ieee754_pow+0x3e>
 800706a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800706e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007072:	e774      	b.n	8006f5e <__ieee754_pow+0x3e>
 8007074:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8007078:	d106      	bne.n	8007088 <__ieee754_pow+0x168>
 800707a:	4632      	mov	r2, r6
 800707c:	463b      	mov	r3, r7
 800707e:	4630      	mov	r0, r6
 8007080:	4639      	mov	r1, r7
 8007082:	f7f9 fac1 	bl	8000608 <__aeabi_dmul>
 8007086:	e76a      	b.n	8006f5e <__ieee754_pow+0x3e>
 8007088:	4b3e      	ldr	r3, [pc, #248]	; (8007184 <__ieee754_pow+0x264>)
 800708a:	4599      	cmp	r9, r3
 800708c:	d10c      	bne.n	80070a8 <__ieee754_pow+0x188>
 800708e:	2d00      	cmp	r5, #0
 8007090:	db0a      	blt.n	80070a8 <__ieee754_pow+0x188>
 8007092:	ec47 6b10 	vmov	d0, r6, r7
 8007096:	b009      	add	sp, #36	; 0x24
 8007098:	ecbd 8b06 	vpop	{d8-d10}
 800709c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070a0:	f000 bc6c 	b.w	800797c <__ieee754_sqrt>
 80070a4:	2300      	movs	r3, #0
 80070a6:	9304      	str	r3, [sp, #16]
 80070a8:	ec47 6b10 	vmov	d0, r6, r7
 80070ac:	f000 fd48 	bl	8007b40 <fabs>
 80070b0:	ec51 0b10 	vmov	r0, r1, d0
 80070b4:	f1ba 0f00 	cmp.w	sl, #0
 80070b8:	d129      	bne.n	800710e <__ieee754_pow+0x1ee>
 80070ba:	b124      	cbz	r4, 80070c6 <__ieee754_pow+0x1a6>
 80070bc:	4b2f      	ldr	r3, [pc, #188]	; (800717c <__ieee754_pow+0x25c>)
 80070be:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d123      	bne.n	800710e <__ieee754_pow+0x1ee>
 80070c6:	f1b9 0f00 	cmp.w	r9, #0
 80070ca:	da05      	bge.n	80070d8 <__ieee754_pow+0x1b8>
 80070cc:	4602      	mov	r2, r0
 80070ce:	460b      	mov	r3, r1
 80070d0:	2000      	movs	r0, #0
 80070d2:	492a      	ldr	r1, [pc, #168]	; (800717c <__ieee754_pow+0x25c>)
 80070d4:	f7f9 fbc2 	bl	800085c <__aeabi_ddiv>
 80070d8:	2d00      	cmp	r5, #0
 80070da:	f6bf af40 	bge.w	8006f5e <__ieee754_pow+0x3e>
 80070de:	9b04      	ldr	r3, [sp, #16]
 80070e0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80070e4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80070e8:	4323      	orrs	r3, r4
 80070ea:	d108      	bne.n	80070fe <__ieee754_pow+0x1de>
 80070ec:	4602      	mov	r2, r0
 80070ee:	460b      	mov	r3, r1
 80070f0:	4610      	mov	r0, r2
 80070f2:	4619      	mov	r1, r3
 80070f4:	f7f9 f8d0 	bl	8000298 <__aeabi_dsub>
 80070f8:	4602      	mov	r2, r0
 80070fa:	460b      	mov	r3, r1
 80070fc:	e78f      	b.n	800701e <__ieee754_pow+0xfe>
 80070fe:	9b04      	ldr	r3, [sp, #16]
 8007100:	2b01      	cmp	r3, #1
 8007102:	f47f af2c 	bne.w	8006f5e <__ieee754_pow+0x3e>
 8007106:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800710a:	4619      	mov	r1, r3
 800710c:	e727      	b.n	8006f5e <__ieee754_pow+0x3e>
 800710e:	0feb      	lsrs	r3, r5, #31
 8007110:	3b01      	subs	r3, #1
 8007112:	9306      	str	r3, [sp, #24]
 8007114:	9a06      	ldr	r2, [sp, #24]
 8007116:	9b04      	ldr	r3, [sp, #16]
 8007118:	4313      	orrs	r3, r2
 800711a:	d102      	bne.n	8007122 <__ieee754_pow+0x202>
 800711c:	4632      	mov	r2, r6
 800711e:	463b      	mov	r3, r7
 8007120:	e7e6      	b.n	80070f0 <__ieee754_pow+0x1d0>
 8007122:	4b19      	ldr	r3, [pc, #100]	; (8007188 <__ieee754_pow+0x268>)
 8007124:	4598      	cmp	r8, r3
 8007126:	f340 80fb 	ble.w	8007320 <__ieee754_pow+0x400>
 800712a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800712e:	4598      	cmp	r8, r3
 8007130:	4b13      	ldr	r3, [pc, #76]	; (8007180 <__ieee754_pow+0x260>)
 8007132:	dd0c      	ble.n	800714e <__ieee754_pow+0x22e>
 8007134:	429c      	cmp	r4, r3
 8007136:	dc0f      	bgt.n	8007158 <__ieee754_pow+0x238>
 8007138:	f1b9 0f00 	cmp.w	r9, #0
 800713c:	da0f      	bge.n	800715e <__ieee754_pow+0x23e>
 800713e:	2000      	movs	r0, #0
 8007140:	b009      	add	sp, #36	; 0x24
 8007142:	ecbd 8b06 	vpop	{d8-d10}
 8007146:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800714a:	f000 bcf0 	b.w	8007b2e <__math_oflow>
 800714e:	429c      	cmp	r4, r3
 8007150:	dbf2      	blt.n	8007138 <__ieee754_pow+0x218>
 8007152:	4b0a      	ldr	r3, [pc, #40]	; (800717c <__ieee754_pow+0x25c>)
 8007154:	429c      	cmp	r4, r3
 8007156:	dd19      	ble.n	800718c <__ieee754_pow+0x26c>
 8007158:	f1b9 0f00 	cmp.w	r9, #0
 800715c:	dcef      	bgt.n	800713e <__ieee754_pow+0x21e>
 800715e:	2000      	movs	r0, #0
 8007160:	b009      	add	sp, #36	; 0x24
 8007162:	ecbd 8b06 	vpop	{d8-d10}
 8007166:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800716a:	f000 bcd7 	b.w	8007b1c <__math_uflow>
 800716e:	bf00      	nop
 8007170:	fff00000 	.word	0xfff00000
 8007174:	7ff00000 	.word	0x7ff00000
 8007178:	433fffff 	.word	0x433fffff
 800717c:	3ff00000 	.word	0x3ff00000
 8007180:	3fefffff 	.word	0x3fefffff
 8007184:	3fe00000 	.word	0x3fe00000
 8007188:	41e00000 	.word	0x41e00000
 800718c:	4b60      	ldr	r3, [pc, #384]	; (8007310 <__ieee754_pow+0x3f0>)
 800718e:	2200      	movs	r2, #0
 8007190:	f7f9 f882 	bl	8000298 <__aeabi_dsub>
 8007194:	a354      	add	r3, pc, #336	; (adr r3, 80072e8 <__ieee754_pow+0x3c8>)
 8007196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719a:	4604      	mov	r4, r0
 800719c:	460d      	mov	r5, r1
 800719e:	f7f9 fa33 	bl	8000608 <__aeabi_dmul>
 80071a2:	a353      	add	r3, pc, #332	; (adr r3, 80072f0 <__ieee754_pow+0x3d0>)
 80071a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a8:	4606      	mov	r6, r0
 80071aa:	460f      	mov	r7, r1
 80071ac:	4620      	mov	r0, r4
 80071ae:	4629      	mov	r1, r5
 80071b0:	f7f9 fa2a 	bl	8000608 <__aeabi_dmul>
 80071b4:	4b57      	ldr	r3, [pc, #348]	; (8007314 <__ieee754_pow+0x3f4>)
 80071b6:	4682      	mov	sl, r0
 80071b8:	468b      	mov	fp, r1
 80071ba:	2200      	movs	r2, #0
 80071bc:	4620      	mov	r0, r4
 80071be:	4629      	mov	r1, r5
 80071c0:	f7f9 fa22 	bl	8000608 <__aeabi_dmul>
 80071c4:	4602      	mov	r2, r0
 80071c6:	460b      	mov	r3, r1
 80071c8:	a14b      	add	r1, pc, #300	; (adr r1, 80072f8 <__ieee754_pow+0x3d8>)
 80071ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071ce:	f7f9 f863 	bl	8000298 <__aeabi_dsub>
 80071d2:	4622      	mov	r2, r4
 80071d4:	462b      	mov	r3, r5
 80071d6:	f7f9 fa17 	bl	8000608 <__aeabi_dmul>
 80071da:	4602      	mov	r2, r0
 80071dc:	460b      	mov	r3, r1
 80071de:	2000      	movs	r0, #0
 80071e0:	494d      	ldr	r1, [pc, #308]	; (8007318 <__ieee754_pow+0x3f8>)
 80071e2:	f7f9 f859 	bl	8000298 <__aeabi_dsub>
 80071e6:	4622      	mov	r2, r4
 80071e8:	4680      	mov	r8, r0
 80071ea:	4689      	mov	r9, r1
 80071ec:	462b      	mov	r3, r5
 80071ee:	4620      	mov	r0, r4
 80071f0:	4629      	mov	r1, r5
 80071f2:	f7f9 fa09 	bl	8000608 <__aeabi_dmul>
 80071f6:	4602      	mov	r2, r0
 80071f8:	460b      	mov	r3, r1
 80071fa:	4640      	mov	r0, r8
 80071fc:	4649      	mov	r1, r9
 80071fe:	f7f9 fa03 	bl	8000608 <__aeabi_dmul>
 8007202:	a33f      	add	r3, pc, #252	; (adr r3, 8007300 <__ieee754_pow+0x3e0>)
 8007204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007208:	f7f9 f9fe 	bl	8000608 <__aeabi_dmul>
 800720c:	4602      	mov	r2, r0
 800720e:	460b      	mov	r3, r1
 8007210:	4650      	mov	r0, sl
 8007212:	4659      	mov	r1, fp
 8007214:	f7f9 f840 	bl	8000298 <__aeabi_dsub>
 8007218:	4602      	mov	r2, r0
 800721a:	460b      	mov	r3, r1
 800721c:	4680      	mov	r8, r0
 800721e:	4689      	mov	r9, r1
 8007220:	4630      	mov	r0, r6
 8007222:	4639      	mov	r1, r7
 8007224:	f7f9 f83a 	bl	800029c <__adddf3>
 8007228:	2000      	movs	r0, #0
 800722a:	4632      	mov	r2, r6
 800722c:	463b      	mov	r3, r7
 800722e:	4604      	mov	r4, r0
 8007230:	460d      	mov	r5, r1
 8007232:	f7f9 f831 	bl	8000298 <__aeabi_dsub>
 8007236:	4602      	mov	r2, r0
 8007238:	460b      	mov	r3, r1
 800723a:	4640      	mov	r0, r8
 800723c:	4649      	mov	r1, r9
 800723e:	f7f9 f82b 	bl	8000298 <__aeabi_dsub>
 8007242:	9b04      	ldr	r3, [sp, #16]
 8007244:	9a06      	ldr	r2, [sp, #24]
 8007246:	3b01      	subs	r3, #1
 8007248:	4313      	orrs	r3, r2
 800724a:	4682      	mov	sl, r0
 800724c:	468b      	mov	fp, r1
 800724e:	f040 81e7 	bne.w	8007620 <__ieee754_pow+0x700>
 8007252:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8007308 <__ieee754_pow+0x3e8>
 8007256:	eeb0 8a47 	vmov.f32	s16, s14
 800725a:	eef0 8a67 	vmov.f32	s17, s15
 800725e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007262:	2600      	movs	r6, #0
 8007264:	4632      	mov	r2, r6
 8007266:	463b      	mov	r3, r7
 8007268:	e9dd 0100 	ldrd	r0, r1, [sp]
 800726c:	f7f9 f814 	bl	8000298 <__aeabi_dsub>
 8007270:	4622      	mov	r2, r4
 8007272:	462b      	mov	r3, r5
 8007274:	f7f9 f9c8 	bl	8000608 <__aeabi_dmul>
 8007278:	e9dd 2300 	ldrd	r2, r3, [sp]
 800727c:	4680      	mov	r8, r0
 800727e:	4689      	mov	r9, r1
 8007280:	4650      	mov	r0, sl
 8007282:	4659      	mov	r1, fp
 8007284:	f7f9 f9c0 	bl	8000608 <__aeabi_dmul>
 8007288:	4602      	mov	r2, r0
 800728a:	460b      	mov	r3, r1
 800728c:	4640      	mov	r0, r8
 800728e:	4649      	mov	r1, r9
 8007290:	f7f9 f804 	bl	800029c <__adddf3>
 8007294:	4632      	mov	r2, r6
 8007296:	463b      	mov	r3, r7
 8007298:	4680      	mov	r8, r0
 800729a:	4689      	mov	r9, r1
 800729c:	4620      	mov	r0, r4
 800729e:	4629      	mov	r1, r5
 80072a0:	f7f9 f9b2 	bl	8000608 <__aeabi_dmul>
 80072a4:	460b      	mov	r3, r1
 80072a6:	4604      	mov	r4, r0
 80072a8:	460d      	mov	r5, r1
 80072aa:	4602      	mov	r2, r0
 80072ac:	4649      	mov	r1, r9
 80072ae:	4640      	mov	r0, r8
 80072b0:	f7f8 fff4 	bl	800029c <__adddf3>
 80072b4:	4b19      	ldr	r3, [pc, #100]	; (800731c <__ieee754_pow+0x3fc>)
 80072b6:	4299      	cmp	r1, r3
 80072b8:	ec45 4b19 	vmov	d9, r4, r5
 80072bc:	4606      	mov	r6, r0
 80072be:	460f      	mov	r7, r1
 80072c0:	468b      	mov	fp, r1
 80072c2:	f340 82f1 	ble.w	80078a8 <__ieee754_pow+0x988>
 80072c6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80072ca:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80072ce:	4303      	orrs	r3, r0
 80072d0:	f000 81e4 	beq.w	800769c <__ieee754_pow+0x77c>
 80072d4:	ec51 0b18 	vmov	r0, r1, d8
 80072d8:	2200      	movs	r2, #0
 80072da:	2300      	movs	r3, #0
 80072dc:	f7f9 fc06 	bl	8000aec <__aeabi_dcmplt>
 80072e0:	3800      	subs	r0, #0
 80072e2:	bf18      	it	ne
 80072e4:	2001      	movne	r0, #1
 80072e6:	e72b      	b.n	8007140 <__ieee754_pow+0x220>
 80072e8:	60000000 	.word	0x60000000
 80072ec:	3ff71547 	.word	0x3ff71547
 80072f0:	f85ddf44 	.word	0xf85ddf44
 80072f4:	3e54ae0b 	.word	0x3e54ae0b
 80072f8:	55555555 	.word	0x55555555
 80072fc:	3fd55555 	.word	0x3fd55555
 8007300:	652b82fe 	.word	0x652b82fe
 8007304:	3ff71547 	.word	0x3ff71547
 8007308:	00000000 	.word	0x00000000
 800730c:	bff00000 	.word	0xbff00000
 8007310:	3ff00000 	.word	0x3ff00000
 8007314:	3fd00000 	.word	0x3fd00000
 8007318:	3fe00000 	.word	0x3fe00000
 800731c:	408fffff 	.word	0x408fffff
 8007320:	4bd5      	ldr	r3, [pc, #852]	; (8007678 <__ieee754_pow+0x758>)
 8007322:	402b      	ands	r3, r5
 8007324:	2200      	movs	r2, #0
 8007326:	b92b      	cbnz	r3, 8007334 <__ieee754_pow+0x414>
 8007328:	4bd4      	ldr	r3, [pc, #848]	; (800767c <__ieee754_pow+0x75c>)
 800732a:	f7f9 f96d 	bl	8000608 <__aeabi_dmul>
 800732e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007332:	460c      	mov	r4, r1
 8007334:	1523      	asrs	r3, r4, #20
 8007336:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800733a:	4413      	add	r3, r2
 800733c:	9305      	str	r3, [sp, #20]
 800733e:	4bd0      	ldr	r3, [pc, #832]	; (8007680 <__ieee754_pow+0x760>)
 8007340:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007344:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007348:	429c      	cmp	r4, r3
 800734a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800734e:	dd08      	ble.n	8007362 <__ieee754_pow+0x442>
 8007350:	4bcc      	ldr	r3, [pc, #816]	; (8007684 <__ieee754_pow+0x764>)
 8007352:	429c      	cmp	r4, r3
 8007354:	f340 8162 	ble.w	800761c <__ieee754_pow+0x6fc>
 8007358:	9b05      	ldr	r3, [sp, #20]
 800735a:	3301      	adds	r3, #1
 800735c:	9305      	str	r3, [sp, #20]
 800735e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007362:	2400      	movs	r4, #0
 8007364:	00e3      	lsls	r3, r4, #3
 8007366:	9307      	str	r3, [sp, #28]
 8007368:	4bc7      	ldr	r3, [pc, #796]	; (8007688 <__ieee754_pow+0x768>)
 800736a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800736e:	ed93 7b00 	vldr	d7, [r3]
 8007372:	4629      	mov	r1, r5
 8007374:	ec53 2b17 	vmov	r2, r3, d7
 8007378:	eeb0 9a47 	vmov.f32	s18, s14
 800737c:	eef0 9a67 	vmov.f32	s19, s15
 8007380:	4682      	mov	sl, r0
 8007382:	f7f8 ff89 	bl	8000298 <__aeabi_dsub>
 8007386:	4652      	mov	r2, sl
 8007388:	4606      	mov	r6, r0
 800738a:	460f      	mov	r7, r1
 800738c:	462b      	mov	r3, r5
 800738e:	ec51 0b19 	vmov	r0, r1, d9
 8007392:	f7f8 ff83 	bl	800029c <__adddf3>
 8007396:	4602      	mov	r2, r0
 8007398:	460b      	mov	r3, r1
 800739a:	2000      	movs	r0, #0
 800739c:	49bb      	ldr	r1, [pc, #748]	; (800768c <__ieee754_pow+0x76c>)
 800739e:	f7f9 fa5d 	bl	800085c <__aeabi_ddiv>
 80073a2:	ec41 0b1a 	vmov	d10, r0, r1
 80073a6:	4602      	mov	r2, r0
 80073a8:	460b      	mov	r3, r1
 80073aa:	4630      	mov	r0, r6
 80073ac:	4639      	mov	r1, r7
 80073ae:	f7f9 f92b 	bl	8000608 <__aeabi_dmul>
 80073b2:	2300      	movs	r3, #0
 80073b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073b8:	9302      	str	r3, [sp, #8]
 80073ba:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80073be:	46ab      	mov	fp, r5
 80073c0:	106d      	asrs	r5, r5, #1
 80073c2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80073c6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80073ca:	ec41 0b18 	vmov	d8, r0, r1
 80073ce:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80073d2:	2200      	movs	r2, #0
 80073d4:	4640      	mov	r0, r8
 80073d6:	4649      	mov	r1, r9
 80073d8:	4614      	mov	r4, r2
 80073da:	461d      	mov	r5, r3
 80073dc:	f7f9 f914 	bl	8000608 <__aeabi_dmul>
 80073e0:	4602      	mov	r2, r0
 80073e2:	460b      	mov	r3, r1
 80073e4:	4630      	mov	r0, r6
 80073e6:	4639      	mov	r1, r7
 80073e8:	f7f8 ff56 	bl	8000298 <__aeabi_dsub>
 80073ec:	ec53 2b19 	vmov	r2, r3, d9
 80073f0:	4606      	mov	r6, r0
 80073f2:	460f      	mov	r7, r1
 80073f4:	4620      	mov	r0, r4
 80073f6:	4629      	mov	r1, r5
 80073f8:	f7f8 ff4e 	bl	8000298 <__aeabi_dsub>
 80073fc:	4602      	mov	r2, r0
 80073fe:	460b      	mov	r3, r1
 8007400:	4650      	mov	r0, sl
 8007402:	4659      	mov	r1, fp
 8007404:	f7f8 ff48 	bl	8000298 <__aeabi_dsub>
 8007408:	4642      	mov	r2, r8
 800740a:	464b      	mov	r3, r9
 800740c:	f7f9 f8fc 	bl	8000608 <__aeabi_dmul>
 8007410:	4602      	mov	r2, r0
 8007412:	460b      	mov	r3, r1
 8007414:	4630      	mov	r0, r6
 8007416:	4639      	mov	r1, r7
 8007418:	f7f8 ff3e 	bl	8000298 <__aeabi_dsub>
 800741c:	ec53 2b1a 	vmov	r2, r3, d10
 8007420:	f7f9 f8f2 	bl	8000608 <__aeabi_dmul>
 8007424:	ec53 2b18 	vmov	r2, r3, d8
 8007428:	ec41 0b19 	vmov	d9, r0, r1
 800742c:	ec51 0b18 	vmov	r0, r1, d8
 8007430:	f7f9 f8ea 	bl	8000608 <__aeabi_dmul>
 8007434:	a37c      	add	r3, pc, #496	; (adr r3, 8007628 <__ieee754_pow+0x708>)
 8007436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743a:	4604      	mov	r4, r0
 800743c:	460d      	mov	r5, r1
 800743e:	f7f9 f8e3 	bl	8000608 <__aeabi_dmul>
 8007442:	a37b      	add	r3, pc, #492	; (adr r3, 8007630 <__ieee754_pow+0x710>)
 8007444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007448:	f7f8 ff28 	bl	800029c <__adddf3>
 800744c:	4622      	mov	r2, r4
 800744e:	462b      	mov	r3, r5
 8007450:	f7f9 f8da 	bl	8000608 <__aeabi_dmul>
 8007454:	a378      	add	r3, pc, #480	; (adr r3, 8007638 <__ieee754_pow+0x718>)
 8007456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745a:	f7f8 ff1f 	bl	800029c <__adddf3>
 800745e:	4622      	mov	r2, r4
 8007460:	462b      	mov	r3, r5
 8007462:	f7f9 f8d1 	bl	8000608 <__aeabi_dmul>
 8007466:	a376      	add	r3, pc, #472	; (adr r3, 8007640 <__ieee754_pow+0x720>)
 8007468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800746c:	f7f8 ff16 	bl	800029c <__adddf3>
 8007470:	4622      	mov	r2, r4
 8007472:	462b      	mov	r3, r5
 8007474:	f7f9 f8c8 	bl	8000608 <__aeabi_dmul>
 8007478:	a373      	add	r3, pc, #460	; (adr r3, 8007648 <__ieee754_pow+0x728>)
 800747a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747e:	f7f8 ff0d 	bl	800029c <__adddf3>
 8007482:	4622      	mov	r2, r4
 8007484:	462b      	mov	r3, r5
 8007486:	f7f9 f8bf 	bl	8000608 <__aeabi_dmul>
 800748a:	a371      	add	r3, pc, #452	; (adr r3, 8007650 <__ieee754_pow+0x730>)
 800748c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007490:	f7f8 ff04 	bl	800029c <__adddf3>
 8007494:	4622      	mov	r2, r4
 8007496:	4606      	mov	r6, r0
 8007498:	460f      	mov	r7, r1
 800749a:	462b      	mov	r3, r5
 800749c:	4620      	mov	r0, r4
 800749e:	4629      	mov	r1, r5
 80074a0:	f7f9 f8b2 	bl	8000608 <__aeabi_dmul>
 80074a4:	4602      	mov	r2, r0
 80074a6:	460b      	mov	r3, r1
 80074a8:	4630      	mov	r0, r6
 80074aa:	4639      	mov	r1, r7
 80074ac:	f7f9 f8ac 	bl	8000608 <__aeabi_dmul>
 80074b0:	4642      	mov	r2, r8
 80074b2:	4604      	mov	r4, r0
 80074b4:	460d      	mov	r5, r1
 80074b6:	464b      	mov	r3, r9
 80074b8:	ec51 0b18 	vmov	r0, r1, d8
 80074bc:	f7f8 feee 	bl	800029c <__adddf3>
 80074c0:	ec53 2b19 	vmov	r2, r3, d9
 80074c4:	f7f9 f8a0 	bl	8000608 <__aeabi_dmul>
 80074c8:	4622      	mov	r2, r4
 80074ca:	462b      	mov	r3, r5
 80074cc:	f7f8 fee6 	bl	800029c <__adddf3>
 80074d0:	4642      	mov	r2, r8
 80074d2:	4682      	mov	sl, r0
 80074d4:	468b      	mov	fp, r1
 80074d6:	464b      	mov	r3, r9
 80074d8:	4640      	mov	r0, r8
 80074da:	4649      	mov	r1, r9
 80074dc:	f7f9 f894 	bl	8000608 <__aeabi_dmul>
 80074e0:	4b6b      	ldr	r3, [pc, #428]	; (8007690 <__ieee754_pow+0x770>)
 80074e2:	2200      	movs	r2, #0
 80074e4:	4606      	mov	r6, r0
 80074e6:	460f      	mov	r7, r1
 80074e8:	f7f8 fed8 	bl	800029c <__adddf3>
 80074ec:	4652      	mov	r2, sl
 80074ee:	465b      	mov	r3, fp
 80074f0:	f7f8 fed4 	bl	800029c <__adddf3>
 80074f4:	2000      	movs	r0, #0
 80074f6:	4604      	mov	r4, r0
 80074f8:	460d      	mov	r5, r1
 80074fa:	4602      	mov	r2, r0
 80074fc:	460b      	mov	r3, r1
 80074fe:	4640      	mov	r0, r8
 8007500:	4649      	mov	r1, r9
 8007502:	f7f9 f881 	bl	8000608 <__aeabi_dmul>
 8007506:	4b62      	ldr	r3, [pc, #392]	; (8007690 <__ieee754_pow+0x770>)
 8007508:	4680      	mov	r8, r0
 800750a:	4689      	mov	r9, r1
 800750c:	2200      	movs	r2, #0
 800750e:	4620      	mov	r0, r4
 8007510:	4629      	mov	r1, r5
 8007512:	f7f8 fec1 	bl	8000298 <__aeabi_dsub>
 8007516:	4632      	mov	r2, r6
 8007518:	463b      	mov	r3, r7
 800751a:	f7f8 febd 	bl	8000298 <__aeabi_dsub>
 800751e:	4602      	mov	r2, r0
 8007520:	460b      	mov	r3, r1
 8007522:	4650      	mov	r0, sl
 8007524:	4659      	mov	r1, fp
 8007526:	f7f8 feb7 	bl	8000298 <__aeabi_dsub>
 800752a:	ec53 2b18 	vmov	r2, r3, d8
 800752e:	f7f9 f86b 	bl	8000608 <__aeabi_dmul>
 8007532:	4622      	mov	r2, r4
 8007534:	4606      	mov	r6, r0
 8007536:	460f      	mov	r7, r1
 8007538:	462b      	mov	r3, r5
 800753a:	ec51 0b19 	vmov	r0, r1, d9
 800753e:	f7f9 f863 	bl	8000608 <__aeabi_dmul>
 8007542:	4602      	mov	r2, r0
 8007544:	460b      	mov	r3, r1
 8007546:	4630      	mov	r0, r6
 8007548:	4639      	mov	r1, r7
 800754a:	f7f8 fea7 	bl	800029c <__adddf3>
 800754e:	4606      	mov	r6, r0
 8007550:	460f      	mov	r7, r1
 8007552:	4602      	mov	r2, r0
 8007554:	460b      	mov	r3, r1
 8007556:	4640      	mov	r0, r8
 8007558:	4649      	mov	r1, r9
 800755a:	f7f8 fe9f 	bl	800029c <__adddf3>
 800755e:	a33e      	add	r3, pc, #248	; (adr r3, 8007658 <__ieee754_pow+0x738>)
 8007560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007564:	2000      	movs	r0, #0
 8007566:	4604      	mov	r4, r0
 8007568:	460d      	mov	r5, r1
 800756a:	f7f9 f84d 	bl	8000608 <__aeabi_dmul>
 800756e:	4642      	mov	r2, r8
 8007570:	ec41 0b18 	vmov	d8, r0, r1
 8007574:	464b      	mov	r3, r9
 8007576:	4620      	mov	r0, r4
 8007578:	4629      	mov	r1, r5
 800757a:	f7f8 fe8d 	bl	8000298 <__aeabi_dsub>
 800757e:	4602      	mov	r2, r0
 8007580:	460b      	mov	r3, r1
 8007582:	4630      	mov	r0, r6
 8007584:	4639      	mov	r1, r7
 8007586:	f7f8 fe87 	bl	8000298 <__aeabi_dsub>
 800758a:	a335      	add	r3, pc, #212	; (adr r3, 8007660 <__ieee754_pow+0x740>)
 800758c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007590:	f7f9 f83a 	bl	8000608 <__aeabi_dmul>
 8007594:	a334      	add	r3, pc, #208	; (adr r3, 8007668 <__ieee754_pow+0x748>)
 8007596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800759a:	4606      	mov	r6, r0
 800759c:	460f      	mov	r7, r1
 800759e:	4620      	mov	r0, r4
 80075a0:	4629      	mov	r1, r5
 80075a2:	f7f9 f831 	bl	8000608 <__aeabi_dmul>
 80075a6:	4602      	mov	r2, r0
 80075a8:	460b      	mov	r3, r1
 80075aa:	4630      	mov	r0, r6
 80075ac:	4639      	mov	r1, r7
 80075ae:	f7f8 fe75 	bl	800029c <__adddf3>
 80075b2:	9a07      	ldr	r2, [sp, #28]
 80075b4:	4b37      	ldr	r3, [pc, #220]	; (8007694 <__ieee754_pow+0x774>)
 80075b6:	4413      	add	r3, r2
 80075b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075bc:	f7f8 fe6e 	bl	800029c <__adddf3>
 80075c0:	4682      	mov	sl, r0
 80075c2:	9805      	ldr	r0, [sp, #20]
 80075c4:	468b      	mov	fp, r1
 80075c6:	f7f8 ffb5 	bl	8000534 <__aeabi_i2d>
 80075ca:	9a07      	ldr	r2, [sp, #28]
 80075cc:	4b32      	ldr	r3, [pc, #200]	; (8007698 <__ieee754_pow+0x778>)
 80075ce:	4413      	add	r3, r2
 80075d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80075d4:	4606      	mov	r6, r0
 80075d6:	460f      	mov	r7, r1
 80075d8:	4652      	mov	r2, sl
 80075da:	465b      	mov	r3, fp
 80075dc:	ec51 0b18 	vmov	r0, r1, d8
 80075e0:	f7f8 fe5c 	bl	800029c <__adddf3>
 80075e4:	4642      	mov	r2, r8
 80075e6:	464b      	mov	r3, r9
 80075e8:	f7f8 fe58 	bl	800029c <__adddf3>
 80075ec:	4632      	mov	r2, r6
 80075ee:	463b      	mov	r3, r7
 80075f0:	f7f8 fe54 	bl	800029c <__adddf3>
 80075f4:	2000      	movs	r0, #0
 80075f6:	4632      	mov	r2, r6
 80075f8:	463b      	mov	r3, r7
 80075fa:	4604      	mov	r4, r0
 80075fc:	460d      	mov	r5, r1
 80075fe:	f7f8 fe4b 	bl	8000298 <__aeabi_dsub>
 8007602:	4642      	mov	r2, r8
 8007604:	464b      	mov	r3, r9
 8007606:	f7f8 fe47 	bl	8000298 <__aeabi_dsub>
 800760a:	ec53 2b18 	vmov	r2, r3, d8
 800760e:	f7f8 fe43 	bl	8000298 <__aeabi_dsub>
 8007612:	4602      	mov	r2, r0
 8007614:	460b      	mov	r3, r1
 8007616:	4650      	mov	r0, sl
 8007618:	4659      	mov	r1, fp
 800761a:	e610      	b.n	800723e <__ieee754_pow+0x31e>
 800761c:	2401      	movs	r4, #1
 800761e:	e6a1      	b.n	8007364 <__ieee754_pow+0x444>
 8007620:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8007670 <__ieee754_pow+0x750>
 8007624:	e617      	b.n	8007256 <__ieee754_pow+0x336>
 8007626:	bf00      	nop
 8007628:	4a454eef 	.word	0x4a454eef
 800762c:	3fca7e28 	.word	0x3fca7e28
 8007630:	93c9db65 	.word	0x93c9db65
 8007634:	3fcd864a 	.word	0x3fcd864a
 8007638:	a91d4101 	.word	0xa91d4101
 800763c:	3fd17460 	.word	0x3fd17460
 8007640:	518f264d 	.word	0x518f264d
 8007644:	3fd55555 	.word	0x3fd55555
 8007648:	db6fabff 	.word	0xdb6fabff
 800764c:	3fdb6db6 	.word	0x3fdb6db6
 8007650:	33333303 	.word	0x33333303
 8007654:	3fe33333 	.word	0x3fe33333
 8007658:	e0000000 	.word	0xe0000000
 800765c:	3feec709 	.word	0x3feec709
 8007660:	dc3a03fd 	.word	0xdc3a03fd
 8007664:	3feec709 	.word	0x3feec709
 8007668:	145b01f5 	.word	0x145b01f5
 800766c:	be3e2fe0 	.word	0xbe3e2fe0
 8007670:	00000000 	.word	0x00000000
 8007674:	3ff00000 	.word	0x3ff00000
 8007678:	7ff00000 	.word	0x7ff00000
 800767c:	43400000 	.word	0x43400000
 8007680:	0003988e 	.word	0x0003988e
 8007684:	000bb679 	.word	0x000bb679
 8007688:	08007dc0 	.word	0x08007dc0
 800768c:	3ff00000 	.word	0x3ff00000
 8007690:	40080000 	.word	0x40080000
 8007694:	08007de0 	.word	0x08007de0
 8007698:	08007dd0 	.word	0x08007dd0
 800769c:	a3b5      	add	r3, pc, #724	; (adr r3, 8007974 <__ieee754_pow+0xa54>)
 800769e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a2:	4640      	mov	r0, r8
 80076a4:	4649      	mov	r1, r9
 80076a6:	f7f8 fdf9 	bl	800029c <__adddf3>
 80076aa:	4622      	mov	r2, r4
 80076ac:	ec41 0b1a 	vmov	d10, r0, r1
 80076b0:	462b      	mov	r3, r5
 80076b2:	4630      	mov	r0, r6
 80076b4:	4639      	mov	r1, r7
 80076b6:	f7f8 fdef 	bl	8000298 <__aeabi_dsub>
 80076ba:	4602      	mov	r2, r0
 80076bc:	460b      	mov	r3, r1
 80076be:	ec51 0b1a 	vmov	r0, r1, d10
 80076c2:	f7f9 fa31 	bl	8000b28 <__aeabi_dcmpgt>
 80076c6:	2800      	cmp	r0, #0
 80076c8:	f47f ae04 	bne.w	80072d4 <__ieee754_pow+0x3b4>
 80076cc:	4aa4      	ldr	r2, [pc, #656]	; (8007960 <__ieee754_pow+0xa40>)
 80076ce:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80076d2:	4293      	cmp	r3, r2
 80076d4:	f340 8108 	ble.w	80078e8 <__ieee754_pow+0x9c8>
 80076d8:	151b      	asrs	r3, r3, #20
 80076da:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80076de:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80076e2:	fa4a f303 	asr.w	r3, sl, r3
 80076e6:	445b      	add	r3, fp
 80076e8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80076ec:	4e9d      	ldr	r6, [pc, #628]	; (8007964 <__ieee754_pow+0xa44>)
 80076ee:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80076f2:	4116      	asrs	r6, r2
 80076f4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80076f8:	2000      	movs	r0, #0
 80076fa:	ea23 0106 	bic.w	r1, r3, r6
 80076fe:	f1c2 0214 	rsb	r2, r2, #20
 8007702:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007706:	fa4a fa02 	asr.w	sl, sl, r2
 800770a:	f1bb 0f00 	cmp.w	fp, #0
 800770e:	4602      	mov	r2, r0
 8007710:	460b      	mov	r3, r1
 8007712:	4620      	mov	r0, r4
 8007714:	4629      	mov	r1, r5
 8007716:	bfb8      	it	lt
 8007718:	f1ca 0a00 	rsblt	sl, sl, #0
 800771c:	f7f8 fdbc 	bl	8000298 <__aeabi_dsub>
 8007720:	ec41 0b19 	vmov	d9, r0, r1
 8007724:	4642      	mov	r2, r8
 8007726:	464b      	mov	r3, r9
 8007728:	ec51 0b19 	vmov	r0, r1, d9
 800772c:	f7f8 fdb6 	bl	800029c <__adddf3>
 8007730:	a37b      	add	r3, pc, #492	; (adr r3, 8007920 <__ieee754_pow+0xa00>)
 8007732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007736:	2000      	movs	r0, #0
 8007738:	4604      	mov	r4, r0
 800773a:	460d      	mov	r5, r1
 800773c:	f7f8 ff64 	bl	8000608 <__aeabi_dmul>
 8007740:	ec53 2b19 	vmov	r2, r3, d9
 8007744:	4606      	mov	r6, r0
 8007746:	460f      	mov	r7, r1
 8007748:	4620      	mov	r0, r4
 800774a:	4629      	mov	r1, r5
 800774c:	f7f8 fda4 	bl	8000298 <__aeabi_dsub>
 8007750:	4602      	mov	r2, r0
 8007752:	460b      	mov	r3, r1
 8007754:	4640      	mov	r0, r8
 8007756:	4649      	mov	r1, r9
 8007758:	f7f8 fd9e 	bl	8000298 <__aeabi_dsub>
 800775c:	a372      	add	r3, pc, #456	; (adr r3, 8007928 <__ieee754_pow+0xa08>)
 800775e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007762:	f7f8 ff51 	bl	8000608 <__aeabi_dmul>
 8007766:	a372      	add	r3, pc, #456	; (adr r3, 8007930 <__ieee754_pow+0xa10>)
 8007768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800776c:	4680      	mov	r8, r0
 800776e:	4689      	mov	r9, r1
 8007770:	4620      	mov	r0, r4
 8007772:	4629      	mov	r1, r5
 8007774:	f7f8 ff48 	bl	8000608 <__aeabi_dmul>
 8007778:	4602      	mov	r2, r0
 800777a:	460b      	mov	r3, r1
 800777c:	4640      	mov	r0, r8
 800777e:	4649      	mov	r1, r9
 8007780:	f7f8 fd8c 	bl	800029c <__adddf3>
 8007784:	4604      	mov	r4, r0
 8007786:	460d      	mov	r5, r1
 8007788:	4602      	mov	r2, r0
 800778a:	460b      	mov	r3, r1
 800778c:	4630      	mov	r0, r6
 800778e:	4639      	mov	r1, r7
 8007790:	f7f8 fd84 	bl	800029c <__adddf3>
 8007794:	4632      	mov	r2, r6
 8007796:	463b      	mov	r3, r7
 8007798:	4680      	mov	r8, r0
 800779a:	4689      	mov	r9, r1
 800779c:	f7f8 fd7c 	bl	8000298 <__aeabi_dsub>
 80077a0:	4602      	mov	r2, r0
 80077a2:	460b      	mov	r3, r1
 80077a4:	4620      	mov	r0, r4
 80077a6:	4629      	mov	r1, r5
 80077a8:	f7f8 fd76 	bl	8000298 <__aeabi_dsub>
 80077ac:	4642      	mov	r2, r8
 80077ae:	4606      	mov	r6, r0
 80077b0:	460f      	mov	r7, r1
 80077b2:	464b      	mov	r3, r9
 80077b4:	4640      	mov	r0, r8
 80077b6:	4649      	mov	r1, r9
 80077b8:	f7f8 ff26 	bl	8000608 <__aeabi_dmul>
 80077bc:	a35e      	add	r3, pc, #376	; (adr r3, 8007938 <__ieee754_pow+0xa18>)
 80077be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c2:	4604      	mov	r4, r0
 80077c4:	460d      	mov	r5, r1
 80077c6:	f7f8 ff1f 	bl	8000608 <__aeabi_dmul>
 80077ca:	a35d      	add	r3, pc, #372	; (adr r3, 8007940 <__ieee754_pow+0xa20>)
 80077cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d0:	f7f8 fd62 	bl	8000298 <__aeabi_dsub>
 80077d4:	4622      	mov	r2, r4
 80077d6:	462b      	mov	r3, r5
 80077d8:	f7f8 ff16 	bl	8000608 <__aeabi_dmul>
 80077dc:	a35a      	add	r3, pc, #360	; (adr r3, 8007948 <__ieee754_pow+0xa28>)
 80077de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e2:	f7f8 fd5b 	bl	800029c <__adddf3>
 80077e6:	4622      	mov	r2, r4
 80077e8:	462b      	mov	r3, r5
 80077ea:	f7f8 ff0d 	bl	8000608 <__aeabi_dmul>
 80077ee:	a358      	add	r3, pc, #352	; (adr r3, 8007950 <__ieee754_pow+0xa30>)
 80077f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f4:	f7f8 fd50 	bl	8000298 <__aeabi_dsub>
 80077f8:	4622      	mov	r2, r4
 80077fa:	462b      	mov	r3, r5
 80077fc:	f7f8 ff04 	bl	8000608 <__aeabi_dmul>
 8007800:	a355      	add	r3, pc, #340	; (adr r3, 8007958 <__ieee754_pow+0xa38>)
 8007802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007806:	f7f8 fd49 	bl	800029c <__adddf3>
 800780a:	4622      	mov	r2, r4
 800780c:	462b      	mov	r3, r5
 800780e:	f7f8 fefb 	bl	8000608 <__aeabi_dmul>
 8007812:	4602      	mov	r2, r0
 8007814:	460b      	mov	r3, r1
 8007816:	4640      	mov	r0, r8
 8007818:	4649      	mov	r1, r9
 800781a:	f7f8 fd3d 	bl	8000298 <__aeabi_dsub>
 800781e:	4604      	mov	r4, r0
 8007820:	460d      	mov	r5, r1
 8007822:	4602      	mov	r2, r0
 8007824:	460b      	mov	r3, r1
 8007826:	4640      	mov	r0, r8
 8007828:	4649      	mov	r1, r9
 800782a:	f7f8 feed 	bl	8000608 <__aeabi_dmul>
 800782e:	2200      	movs	r2, #0
 8007830:	ec41 0b19 	vmov	d9, r0, r1
 8007834:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007838:	4620      	mov	r0, r4
 800783a:	4629      	mov	r1, r5
 800783c:	f7f8 fd2c 	bl	8000298 <__aeabi_dsub>
 8007840:	4602      	mov	r2, r0
 8007842:	460b      	mov	r3, r1
 8007844:	ec51 0b19 	vmov	r0, r1, d9
 8007848:	f7f9 f808 	bl	800085c <__aeabi_ddiv>
 800784c:	4632      	mov	r2, r6
 800784e:	4604      	mov	r4, r0
 8007850:	460d      	mov	r5, r1
 8007852:	463b      	mov	r3, r7
 8007854:	4640      	mov	r0, r8
 8007856:	4649      	mov	r1, r9
 8007858:	f7f8 fed6 	bl	8000608 <__aeabi_dmul>
 800785c:	4632      	mov	r2, r6
 800785e:	463b      	mov	r3, r7
 8007860:	f7f8 fd1c 	bl	800029c <__adddf3>
 8007864:	4602      	mov	r2, r0
 8007866:	460b      	mov	r3, r1
 8007868:	4620      	mov	r0, r4
 800786a:	4629      	mov	r1, r5
 800786c:	f7f8 fd14 	bl	8000298 <__aeabi_dsub>
 8007870:	4642      	mov	r2, r8
 8007872:	464b      	mov	r3, r9
 8007874:	f7f8 fd10 	bl	8000298 <__aeabi_dsub>
 8007878:	460b      	mov	r3, r1
 800787a:	4602      	mov	r2, r0
 800787c:	493a      	ldr	r1, [pc, #232]	; (8007968 <__ieee754_pow+0xa48>)
 800787e:	2000      	movs	r0, #0
 8007880:	f7f8 fd0a 	bl	8000298 <__aeabi_dsub>
 8007884:	ec41 0b10 	vmov	d0, r0, r1
 8007888:	ee10 3a90 	vmov	r3, s1
 800788c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007890:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007894:	da2b      	bge.n	80078ee <__ieee754_pow+0x9ce>
 8007896:	4650      	mov	r0, sl
 8007898:	f000 f966 	bl	8007b68 <scalbn>
 800789c:	ec51 0b10 	vmov	r0, r1, d0
 80078a0:	ec53 2b18 	vmov	r2, r3, d8
 80078a4:	f7ff bbed 	b.w	8007082 <__ieee754_pow+0x162>
 80078a8:	4b30      	ldr	r3, [pc, #192]	; (800796c <__ieee754_pow+0xa4c>)
 80078aa:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80078ae:	429e      	cmp	r6, r3
 80078b0:	f77f af0c 	ble.w	80076cc <__ieee754_pow+0x7ac>
 80078b4:	4b2e      	ldr	r3, [pc, #184]	; (8007970 <__ieee754_pow+0xa50>)
 80078b6:	440b      	add	r3, r1
 80078b8:	4303      	orrs	r3, r0
 80078ba:	d009      	beq.n	80078d0 <__ieee754_pow+0x9b0>
 80078bc:	ec51 0b18 	vmov	r0, r1, d8
 80078c0:	2200      	movs	r2, #0
 80078c2:	2300      	movs	r3, #0
 80078c4:	f7f9 f912 	bl	8000aec <__aeabi_dcmplt>
 80078c8:	3800      	subs	r0, #0
 80078ca:	bf18      	it	ne
 80078cc:	2001      	movne	r0, #1
 80078ce:	e447      	b.n	8007160 <__ieee754_pow+0x240>
 80078d0:	4622      	mov	r2, r4
 80078d2:	462b      	mov	r3, r5
 80078d4:	f7f8 fce0 	bl	8000298 <__aeabi_dsub>
 80078d8:	4642      	mov	r2, r8
 80078da:	464b      	mov	r3, r9
 80078dc:	f7f9 f91a 	bl	8000b14 <__aeabi_dcmpge>
 80078e0:	2800      	cmp	r0, #0
 80078e2:	f43f aef3 	beq.w	80076cc <__ieee754_pow+0x7ac>
 80078e6:	e7e9      	b.n	80078bc <__ieee754_pow+0x99c>
 80078e8:	f04f 0a00 	mov.w	sl, #0
 80078ec:	e71a      	b.n	8007724 <__ieee754_pow+0x804>
 80078ee:	ec51 0b10 	vmov	r0, r1, d0
 80078f2:	4619      	mov	r1, r3
 80078f4:	e7d4      	b.n	80078a0 <__ieee754_pow+0x980>
 80078f6:	491c      	ldr	r1, [pc, #112]	; (8007968 <__ieee754_pow+0xa48>)
 80078f8:	2000      	movs	r0, #0
 80078fa:	f7ff bb30 	b.w	8006f5e <__ieee754_pow+0x3e>
 80078fe:	2000      	movs	r0, #0
 8007900:	2100      	movs	r1, #0
 8007902:	f7ff bb2c 	b.w	8006f5e <__ieee754_pow+0x3e>
 8007906:	4630      	mov	r0, r6
 8007908:	4639      	mov	r1, r7
 800790a:	f7ff bb28 	b.w	8006f5e <__ieee754_pow+0x3e>
 800790e:	9204      	str	r2, [sp, #16]
 8007910:	f7ff bb7a 	b.w	8007008 <__ieee754_pow+0xe8>
 8007914:	2300      	movs	r3, #0
 8007916:	f7ff bb64 	b.w	8006fe2 <__ieee754_pow+0xc2>
 800791a:	bf00      	nop
 800791c:	f3af 8000 	nop.w
 8007920:	00000000 	.word	0x00000000
 8007924:	3fe62e43 	.word	0x3fe62e43
 8007928:	fefa39ef 	.word	0xfefa39ef
 800792c:	3fe62e42 	.word	0x3fe62e42
 8007930:	0ca86c39 	.word	0x0ca86c39
 8007934:	be205c61 	.word	0xbe205c61
 8007938:	72bea4d0 	.word	0x72bea4d0
 800793c:	3e663769 	.word	0x3e663769
 8007940:	c5d26bf1 	.word	0xc5d26bf1
 8007944:	3ebbbd41 	.word	0x3ebbbd41
 8007948:	af25de2c 	.word	0xaf25de2c
 800794c:	3f11566a 	.word	0x3f11566a
 8007950:	16bebd93 	.word	0x16bebd93
 8007954:	3f66c16c 	.word	0x3f66c16c
 8007958:	5555553e 	.word	0x5555553e
 800795c:	3fc55555 	.word	0x3fc55555
 8007960:	3fe00000 	.word	0x3fe00000
 8007964:	000fffff 	.word	0x000fffff
 8007968:	3ff00000 	.word	0x3ff00000
 800796c:	4090cbff 	.word	0x4090cbff
 8007970:	3f6f3400 	.word	0x3f6f3400
 8007974:	652b82fe 	.word	0x652b82fe
 8007978:	3c971547 	.word	0x3c971547

0800797c <__ieee754_sqrt>:
 800797c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007980:	ec55 4b10 	vmov	r4, r5, d0
 8007984:	4e55      	ldr	r6, [pc, #340]	; (8007adc <__ieee754_sqrt+0x160>)
 8007986:	43ae      	bics	r6, r5
 8007988:	ee10 0a10 	vmov	r0, s0
 800798c:	ee10 3a10 	vmov	r3, s0
 8007990:	462a      	mov	r2, r5
 8007992:	4629      	mov	r1, r5
 8007994:	d110      	bne.n	80079b8 <__ieee754_sqrt+0x3c>
 8007996:	ee10 2a10 	vmov	r2, s0
 800799a:	462b      	mov	r3, r5
 800799c:	f7f8 fe34 	bl	8000608 <__aeabi_dmul>
 80079a0:	4602      	mov	r2, r0
 80079a2:	460b      	mov	r3, r1
 80079a4:	4620      	mov	r0, r4
 80079a6:	4629      	mov	r1, r5
 80079a8:	f7f8 fc78 	bl	800029c <__adddf3>
 80079ac:	4604      	mov	r4, r0
 80079ae:	460d      	mov	r5, r1
 80079b0:	ec45 4b10 	vmov	d0, r4, r5
 80079b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079b8:	2d00      	cmp	r5, #0
 80079ba:	dc10      	bgt.n	80079de <__ieee754_sqrt+0x62>
 80079bc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80079c0:	4330      	orrs	r0, r6
 80079c2:	d0f5      	beq.n	80079b0 <__ieee754_sqrt+0x34>
 80079c4:	b15d      	cbz	r5, 80079de <__ieee754_sqrt+0x62>
 80079c6:	ee10 2a10 	vmov	r2, s0
 80079ca:	462b      	mov	r3, r5
 80079cc:	ee10 0a10 	vmov	r0, s0
 80079d0:	f7f8 fc62 	bl	8000298 <__aeabi_dsub>
 80079d4:	4602      	mov	r2, r0
 80079d6:	460b      	mov	r3, r1
 80079d8:	f7f8 ff40 	bl	800085c <__aeabi_ddiv>
 80079dc:	e7e6      	b.n	80079ac <__ieee754_sqrt+0x30>
 80079de:	1512      	asrs	r2, r2, #20
 80079e0:	d074      	beq.n	8007acc <__ieee754_sqrt+0x150>
 80079e2:	07d4      	lsls	r4, r2, #31
 80079e4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80079e8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80079ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80079f0:	bf5e      	ittt	pl
 80079f2:	0fda      	lsrpl	r2, r3, #31
 80079f4:	005b      	lslpl	r3, r3, #1
 80079f6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80079fa:	2400      	movs	r4, #0
 80079fc:	0fda      	lsrs	r2, r3, #31
 80079fe:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8007a02:	107f      	asrs	r7, r7, #1
 8007a04:	005b      	lsls	r3, r3, #1
 8007a06:	2516      	movs	r5, #22
 8007a08:	4620      	mov	r0, r4
 8007a0a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007a0e:	1886      	adds	r6, r0, r2
 8007a10:	428e      	cmp	r6, r1
 8007a12:	bfde      	ittt	le
 8007a14:	1b89      	suble	r1, r1, r6
 8007a16:	18b0      	addle	r0, r6, r2
 8007a18:	18a4      	addle	r4, r4, r2
 8007a1a:	0049      	lsls	r1, r1, #1
 8007a1c:	3d01      	subs	r5, #1
 8007a1e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8007a22:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8007a26:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007a2a:	d1f0      	bne.n	8007a0e <__ieee754_sqrt+0x92>
 8007a2c:	462a      	mov	r2, r5
 8007a2e:	f04f 0e20 	mov.w	lr, #32
 8007a32:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007a36:	4281      	cmp	r1, r0
 8007a38:	eb06 0c05 	add.w	ip, r6, r5
 8007a3c:	dc02      	bgt.n	8007a44 <__ieee754_sqrt+0xc8>
 8007a3e:	d113      	bne.n	8007a68 <__ieee754_sqrt+0xec>
 8007a40:	459c      	cmp	ip, r3
 8007a42:	d811      	bhi.n	8007a68 <__ieee754_sqrt+0xec>
 8007a44:	f1bc 0f00 	cmp.w	ip, #0
 8007a48:	eb0c 0506 	add.w	r5, ip, r6
 8007a4c:	da43      	bge.n	8007ad6 <__ieee754_sqrt+0x15a>
 8007a4e:	2d00      	cmp	r5, #0
 8007a50:	db41      	blt.n	8007ad6 <__ieee754_sqrt+0x15a>
 8007a52:	f100 0801 	add.w	r8, r0, #1
 8007a56:	1a09      	subs	r1, r1, r0
 8007a58:	459c      	cmp	ip, r3
 8007a5a:	bf88      	it	hi
 8007a5c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8007a60:	eba3 030c 	sub.w	r3, r3, ip
 8007a64:	4432      	add	r2, r6
 8007a66:	4640      	mov	r0, r8
 8007a68:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8007a6c:	f1be 0e01 	subs.w	lr, lr, #1
 8007a70:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8007a74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007a78:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007a7c:	d1db      	bne.n	8007a36 <__ieee754_sqrt+0xba>
 8007a7e:	430b      	orrs	r3, r1
 8007a80:	d006      	beq.n	8007a90 <__ieee754_sqrt+0x114>
 8007a82:	1c50      	adds	r0, r2, #1
 8007a84:	bf13      	iteet	ne
 8007a86:	3201      	addne	r2, #1
 8007a88:	3401      	addeq	r4, #1
 8007a8a:	4672      	moveq	r2, lr
 8007a8c:	f022 0201 	bicne.w	r2, r2, #1
 8007a90:	1063      	asrs	r3, r4, #1
 8007a92:	0852      	lsrs	r2, r2, #1
 8007a94:	07e1      	lsls	r1, r4, #31
 8007a96:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007a9a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007a9e:	bf48      	it	mi
 8007aa0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8007aa4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8007aa8:	4614      	mov	r4, r2
 8007aaa:	e781      	b.n	80079b0 <__ieee754_sqrt+0x34>
 8007aac:	0ad9      	lsrs	r1, r3, #11
 8007aae:	3815      	subs	r0, #21
 8007ab0:	055b      	lsls	r3, r3, #21
 8007ab2:	2900      	cmp	r1, #0
 8007ab4:	d0fa      	beq.n	8007aac <__ieee754_sqrt+0x130>
 8007ab6:	02cd      	lsls	r5, r1, #11
 8007ab8:	d50a      	bpl.n	8007ad0 <__ieee754_sqrt+0x154>
 8007aba:	f1c2 0420 	rsb	r4, r2, #32
 8007abe:	fa23 f404 	lsr.w	r4, r3, r4
 8007ac2:	1e55      	subs	r5, r2, #1
 8007ac4:	4093      	lsls	r3, r2
 8007ac6:	4321      	orrs	r1, r4
 8007ac8:	1b42      	subs	r2, r0, r5
 8007aca:	e78a      	b.n	80079e2 <__ieee754_sqrt+0x66>
 8007acc:	4610      	mov	r0, r2
 8007ace:	e7f0      	b.n	8007ab2 <__ieee754_sqrt+0x136>
 8007ad0:	0049      	lsls	r1, r1, #1
 8007ad2:	3201      	adds	r2, #1
 8007ad4:	e7ef      	b.n	8007ab6 <__ieee754_sqrt+0x13a>
 8007ad6:	4680      	mov	r8, r0
 8007ad8:	e7bd      	b.n	8007a56 <__ieee754_sqrt+0xda>
 8007ada:	bf00      	nop
 8007adc:	7ff00000 	.word	0x7ff00000

08007ae0 <with_errno>:
 8007ae0:	b570      	push	{r4, r5, r6, lr}
 8007ae2:	4604      	mov	r4, r0
 8007ae4:	460d      	mov	r5, r1
 8007ae6:	4616      	mov	r6, r2
 8007ae8:	f7fe fcf4 	bl	80064d4 <__errno>
 8007aec:	4629      	mov	r1, r5
 8007aee:	6006      	str	r6, [r0, #0]
 8007af0:	4620      	mov	r0, r4
 8007af2:	bd70      	pop	{r4, r5, r6, pc}

08007af4 <xflow>:
 8007af4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007af6:	4614      	mov	r4, r2
 8007af8:	461d      	mov	r5, r3
 8007afa:	b108      	cbz	r0, 8007b00 <xflow+0xc>
 8007afc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007b00:	e9cd 2300 	strd	r2, r3, [sp]
 8007b04:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b08:	4620      	mov	r0, r4
 8007b0a:	4629      	mov	r1, r5
 8007b0c:	f7f8 fd7c 	bl	8000608 <__aeabi_dmul>
 8007b10:	2222      	movs	r2, #34	; 0x22
 8007b12:	b003      	add	sp, #12
 8007b14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b18:	f7ff bfe2 	b.w	8007ae0 <with_errno>

08007b1c <__math_uflow>:
 8007b1c:	b508      	push	{r3, lr}
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007b24:	f7ff ffe6 	bl	8007af4 <xflow>
 8007b28:	ec41 0b10 	vmov	d0, r0, r1
 8007b2c:	bd08      	pop	{r3, pc}

08007b2e <__math_oflow>:
 8007b2e:	b508      	push	{r3, lr}
 8007b30:	2200      	movs	r2, #0
 8007b32:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8007b36:	f7ff ffdd 	bl	8007af4 <xflow>
 8007b3a:	ec41 0b10 	vmov	d0, r0, r1
 8007b3e:	bd08      	pop	{r3, pc}

08007b40 <fabs>:
 8007b40:	ec51 0b10 	vmov	r0, r1, d0
 8007b44:	ee10 2a10 	vmov	r2, s0
 8007b48:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007b4c:	ec43 2b10 	vmov	d0, r2, r3
 8007b50:	4770      	bx	lr

08007b52 <finite>:
 8007b52:	b082      	sub	sp, #8
 8007b54:	ed8d 0b00 	vstr	d0, [sp]
 8007b58:	9801      	ldr	r0, [sp, #4]
 8007b5a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8007b5e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007b62:	0fc0      	lsrs	r0, r0, #31
 8007b64:	b002      	add	sp, #8
 8007b66:	4770      	bx	lr

08007b68 <scalbn>:
 8007b68:	b570      	push	{r4, r5, r6, lr}
 8007b6a:	ec55 4b10 	vmov	r4, r5, d0
 8007b6e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007b72:	4606      	mov	r6, r0
 8007b74:	462b      	mov	r3, r5
 8007b76:	b99a      	cbnz	r2, 8007ba0 <scalbn+0x38>
 8007b78:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007b7c:	4323      	orrs	r3, r4
 8007b7e:	d036      	beq.n	8007bee <scalbn+0x86>
 8007b80:	4b39      	ldr	r3, [pc, #228]	; (8007c68 <scalbn+0x100>)
 8007b82:	4629      	mov	r1, r5
 8007b84:	ee10 0a10 	vmov	r0, s0
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f7f8 fd3d 	bl	8000608 <__aeabi_dmul>
 8007b8e:	4b37      	ldr	r3, [pc, #220]	; (8007c6c <scalbn+0x104>)
 8007b90:	429e      	cmp	r6, r3
 8007b92:	4604      	mov	r4, r0
 8007b94:	460d      	mov	r5, r1
 8007b96:	da10      	bge.n	8007bba <scalbn+0x52>
 8007b98:	a32b      	add	r3, pc, #172	; (adr r3, 8007c48 <scalbn+0xe0>)
 8007b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b9e:	e03a      	b.n	8007c16 <scalbn+0xae>
 8007ba0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007ba4:	428a      	cmp	r2, r1
 8007ba6:	d10c      	bne.n	8007bc2 <scalbn+0x5a>
 8007ba8:	ee10 2a10 	vmov	r2, s0
 8007bac:	4620      	mov	r0, r4
 8007bae:	4629      	mov	r1, r5
 8007bb0:	f7f8 fb74 	bl	800029c <__adddf3>
 8007bb4:	4604      	mov	r4, r0
 8007bb6:	460d      	mov	r5, r1
 8007bb8:	e019      	b.n	8007bee <scalbn+0x86>
 8007bba:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007bbe:	460b      	mov	r3, r1
 8007bc0:	3a36      	subs	r2, #54	; 0x36
 8007bc2:	4432      	add	r2, r6
 8007bc4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007bc8:	428a      	cmp	r2, r1
 8007bca:	dd08      	ble.n	8007bde <scalbn+0x76>
 8007bcc:	2d00      	cmp	r5, #0
 8007bce:	a120      	add	r1, pc, #128	; (adr r1, 8007c50 <scalbn+0xe8>)
 8007bd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bd4:	da1c      	bge.n	8007c10 <scalbn+0xa8>
 8007bd6:	a120      	add	r1, pc, #128	; (adr r1, 8007c58 <scalbn+0xf0>)
 8007bd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bdc:	e018      	b.n	8007c10 <scalbn+0xa8>
 8007bde:	2a00      	cmp	r2, #0
 8007be0:	dd08      	ble.n	8007bf4 <scalbn+0x8c>
 8007be2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007be6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007bea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007bee:	ec45 4b10 	vmov	d0, r4, r5
 8007bf2:	bd70      	pop	{r4, r5, r6, pc}
 8007bf4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007bf8:	da19      	bge.n	8007c2e <scalbn+0xc6>
 8007bfa:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007bfe:	429e      	cmp	r6, r3
 8007c00:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007c04:	dd0a      	ble.n	8007c1c <scalbn+0xb4>
 8007c06:	a112      	add	r1, pc, #72	; (adr r1, 8007c50 <scalbn+0xe8>)
 8007c08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d1e2      	bne.n	8007bd6 <scalbn+0x6e>
 8007c10:	a30f      	add	r3, pc, #60	; (adr r3, 8007c50 <scalbn+0xe8>)
 8007c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c16:	f7f8 fcf7 	bl	8000608 <__aeabi_dmul>
 8007c1a:	e7cb      	b.n	8007bb4 <scalbn+0x4c>
 8007c1c:	a10a      	add	r1, pc, #40	; (adr r1, 8007c48 <scalbn+0xe0>)
 8007c1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d0b8      	beq.n	8007b98 <scalbn+0x30>
 8007c26:	a10e      	add	r1, pc, #56	; (adr r1, 8007c60 <scalbn+0xf8>)
 8007c28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c2c:	e7b4      	b.n	8007b98 <scalbn+0x30>
 8007c2e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007c32:	3236      	adds	r2, #54	; 0x36
 8007c34:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007c38:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007c3c:	4620      	mov	r0, r4
 8007c3e:	4b0c      	ldr	r3, [pc, #48]	; (8007c70 <scalbn+0x108>)
 8007c40:	2200      	movs	r2, #0
 8007c42:	e7e8      	b.n	8007c16 <scalbn+0xae>
 8007c44:	f3af 8000 	nop.w
 8007c48:	c2f8f359 	.word	0xc2f8f359
 8007c4c:	01a56e1f 	.word	0x01a56e1f
 8007c50:	8800759c 	.word	0x8800759c
 8007c54:	7e37e43c 	.word	0x7e37e43c
 8007c58:	8800759c 	.word	0x8800759c
 8007c5c:	fe37e43c 	.word	0xfe37e43c
 8007c60:	c2f8f359 	.word	0xc2f8f359
 8007c64:	81a56e1f 	.word	0x81a56e1f
 8007c68:	43500000 	.word	0x43500000
 8007c6c:	ffff3cb0 	.word	0xffff3cb0
 8007c70:	3c900000 	.word	0x3c900000

08007c74 <_init>:
 8007c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c76:	bf00      	nop
 8007c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c7a:	bc08      	pop	{r3}
 8007c7c:	469e      	mov	lr, r3
 8007c7e:	4770      	bx	lr

08007c80 <_fini>:
 8007c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c82:	bf00      	nop
 8007c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c86:	bc08      	pop	{r3}
 8007c88:	469e      	mov	lr, r3
 8007c8a:	4770      	bx	lr

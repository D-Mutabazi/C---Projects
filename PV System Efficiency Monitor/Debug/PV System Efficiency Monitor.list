
PV System Efficiency Monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006768  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08006908  08006908  00016908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069b4  080069b4  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  080069b4  080069b4  000169b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069bc  080069bc  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069bc  080069bc  000169bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069c0  080069c0  000169c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  080069c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  200000a0  08006a64  000200a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  08006a64  000202c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fdc1  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002170  00000000  00000000  0002fe91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  00032008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d50  00000000  00000000  00032e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001806e  00000000  00000000  00033b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010555  00000000  00000000  0004bbde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009aa28  00000000  00000000  0005c133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f6b5b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004058  00000000  00000000  000f6bac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a0 	.word	0x200000a0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080068f0 	.word	0x080068f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a4 	.word	0x200000a4
 80001dc:	080068f0 	.word	0x080068f0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b974 	b.w	8000d6c <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	468e      	mov	lr, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14d      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4694      	mov	ip, r2
 8000aae:	d969      	bls.n	8000b84 <__udivmoddi4+0xe8>
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	b152      	cbz	r2, 8000acc <__udivmoddi4+0x30>
 8000ab6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aba:	f1c2 0120 	rsb	r1, r2, #32
 8000abe:	fa20 f101 	lsr.w	r1, r0, r1
 8000ac2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aca:	4094      	lsls	r4, r2
 8000acc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad0:	0c21      	lsrs	r1, r4, #16
 8000ad2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ad6:	fa1f f78c 	uxth.w	r7, ip
 8000ada:	fb08 e316 	mls	r3, r8, r6, lr
 8000ade:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ae2:	fb06 f107 	mul.w	r1, r6, r7
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f106 30ff 	add.w	r0, r6, #4294967295
 8000af2:	f080 811f 	bcs.w	8000d34 <__udivmoddi4+0x298>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 811c 	bls.w	8000d34 <__udivmoddi4+0x298>
 8000afc:	3e02      	subs	r6, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a5b      	subs	r3, r3, r1
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b08:	fb08 3310 	mls	r3, r8, r0, r3
 8000b0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b10:	fb00 f707 	mul.w	r7, r0, r7
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	d90a      	bls.n	8000b2e <__udivmoddi4+0x92>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b20:	f080 810a 	bcs.w	8000d38 <__udivmoddi4+0x29c>
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	f240 8107 	bls.w	8000d38 <__udivmoddi4+0x29c>
 8000b2a:	4464      	add	r4, ip
 8000b2c:	3802      	subs	r0, #2
 8000b2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b32:	1be4      	subs	r4, r4, r7
 8000b34:	2600      	movs	r6, #0
 8000b36:	b11d      	cbz	r5, 8000b40 <__udivmoddi4+0xa4>
 8000b38:	40d4      	lsrs	r4, r2
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d909      	bls.n	8000b5e <__udivmoddi4+0xc2>
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	f000 80ef 	beq.w	8000d2e <__udivmoddi4+0x292>
 8000b50:	2600      	movs	r6, #0
 8000b52:	e9c5 0100 	strd	r0, r1, [r5]
 8000b56:	4630      	mov	r0, r6
 8000b58:	4631      	mov	r1, r6
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	fab3 f683 	clz	r6, r3
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	d14a      	bne.n	8000bfc <__udivmoddi4+0x160>
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d302      	bcc.n	8000b70 <__udivmoddi4+0xd4>
 8000b6a:	4282      	cmp	r2, r0
 8000b6c:	f200 80f9 	bhi.w	8000d62 <__udivmoddi4+0x2c6>
 8000b70:	1a84      	subs	r4, r0, r2
 8000b72:	eb61 0303 	sbc.w	r3, r1, r3
 8000b76:	2001      	movs	r0, #1
 8000b78:	469e      	mov	lr, r3
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d0e0      	beq.n	8000b40 <__udivmoddi4+0xa4>
 8000b7e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b82:	e7dd      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000b84:	b902      	cbnz	r2, 8000b88 <__udivmoddi4+0xec>
 8000b86:	deff      	udf	#255	; 0xff
 8000b88:	fab2 f282 	clz	r2, r2
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	f040 8092 	bne.w	8000cb6 <__udivmoddi4+0x21a>
 8000b92:	eba1 010c 	sub.w	r1, r1, ip
 8000b96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b9a:	fa1f fe8c 	uxth.w	lr, ip
 8000b9e:	2601      	movs	r6, #1
 8000ba0:	0c20      	lsrs	r0, r4, #16
 8000ba2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ba6:	fb07 1113 	mls	r1, r7, r3, r1
 8000baa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bae:	fb0e f003 	mul.w	r0, lr, r3
 8000bb2:	4288      	cmp	r0, r1
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0x12c>
 8000bb6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bba:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x12a>
 8000bc0:	4288      	cmp	r0, r1
 8000bc2:	f200 80cb 	bhi.w	8000d5c <__udivmoddi4+0x2c0>
 8000bc6:	4643      	mov	r3, r8
 8000bc8:	1a09      	subs	r1, r1, r0
 8000bca:	b2a4      	uxth	r4, r4
 8000bcc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bd0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bd4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bdc:	45a6      	cmp	lr, r4
 8000bde:	d908      	bls.n	8000bf2 <__udivmoddi4+0x156>
 8000be0:	eb1c 0404 	adds.w	r4, ip, r4
 8000be4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000be8:	d202      	bcs.n	8000bf0 <__udivmoddi4+0x154>
 8000bea:	45a6      	cmp	lr, r4
 8000bec:	f200 80bb 	bhi.w	8000d66 <__udivmoddi4+0x2ca>
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	eba4 040e 	sub.w	r4, r4, lr
 8000bf6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bfa:	e79c      	b.n	8000b36 <__udivmoddi4+0x9a>
 8000bfc:	f1c6 0720 	rsb	r7, r6, #32
 8000c00:	40b3      	lsls	r3, r6
 8000c02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c12:	431c      	orrs	r4, r3
 8000c14:	40f9      	lsrs	r1, r7
 8000c16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c22:	0c20      	lsrs	r0, r4, #16
 8000c24:	fa1f fe8c 	uxth.w	lr, ip
 8000c28:	fb09 1118 	mls	r1, r9, r8, r1
 8000c2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c30:	fb08 f00e 	mul.w	r0, r8, lr
 8000c34:	4288      	cmp	r0, r1
 8000c36:	fa02 f206 	lsl.w	r2, r2, r6
 8000c3a:	d90b      	bls.n	8000c54 <__udivmoddi4+0x1b8>
 8000c3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c44:	f080 8088 	bcs.w	8000d58 <__udivmoddi4+0x2bc>
 8000c48:	4288      	cmp	r0, r1
 8000c4a:	f240 8085 	bls.w	8000d58 <__udivmoddi4+0x2bc>
 8000c4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c52:	4461      	add	r1, ip
 8000c54:	1a09      	subs	r1, r1, r0
 8000c56:	b2a4      	uxth	r4, r4
 8000c58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c68:	458e      	cmp	lr, r1
 8000c6a:	d908      	bls.n	8000c7e <__udivmoddi4+0x1e2>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c74:	d26c      	bcs.n	8000d50 <__udivmoddi4+0x2b4>
 8000c76:	458e      	cmp	lr, r1
 8000c78:	d96a      	bls.n	8000d50 <__udivmoddi4+0x2b4>
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	4461      	add	r1, ip
 8000c7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c82:	fba0 9402 	umull	r9, r4, r0, r2
 8000c86:	eba1 010e 	sub.w	r1, r1, lr
 8000c8a:	42a1      	cmp	r1, r4
 8000c8c:	46c8      	mov	r8, r9
 8000c8e:	46a6      	mov	lr, r4
 8000c90:	d356      	bcc.n	8000d40 <__udivmoddi4+0x2a4>
 8000c92:	d053      	beq.n	8000d3c <__udivmoddi4+0x2a0>
 8000c94:	b15d      	cbz	r5, 8000cae <__udivmoddi4+0x212>
 8000c96:	ebb3 0208 	subs.w	r2, r3, r8
 8000c9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000ca2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ca6:	40f1      	lsrs	r1, r6
 8000ca8:	431f      	orrs	r7, r3
 8000caa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cae:	2600      	movs	r6, #0
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	f1c2 0320 	rsb	r3, r2, #32
 8000cba:	40d8      	lsrs	r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cc4:	4091      	lsls	r1, r2
 8000cc6:	4301      	orrs	r1, r0
 8000cc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ccc:	fa1f fe8c 	uxth.w	lr, ip
 8000cd0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cd4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cd8:	0c0b      	lsrs	r3, r1, #16
 8000cda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cde:	fb00 f60e 	mul.w	r6, r0, lr
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x260>
 8000cea:	eb1c 0303 	adds.w	r3, ip, r3
 8000cee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cf2:	d22f      	bcs.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf4:	429e      	cmp	r6, r3
 8000cf6:	d92d      	bls.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1b9b      	subs	r3, r3, r6
 8000cfe:	b289      	uxth	r1, r1
 8000d00:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d04:	fb07 3316 	mls	r3, r7, r6, r3
 8000d08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d0c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d10:	428b      	cmp	r3, r1
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x28a>
 8000d14:	eb1c 0101 	adds.w	r1, ip, r1
 8000d18:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d1c:	d216      	bcs.n	8000d4c <__udivmoddi4+0x2b0>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d914      	bls.n	8000d4c <__udivmoddi4+0x2b0>
 8000d22:	3e02      	subs	r6, #2
 8000d24:	4461      	add	r1, ip
 8000d26:	1ac9      	subs	r1, r1, r3
 8000d28:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d2c:	e738      	b.n	8000ba0 <__udivmoddi4+0x104>
 8000d2e:	462e      	mov	r6, r5
 8000d30:	4628      	mov	r0, r5
 8000d32:	e705      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000d34:	4606      	mov	r6, r0
 8000d36:	e6e3      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d38:	4618      	mov	r0, r3
 8000d3a:	e6f8      	b.n	8000b2e <__udivmoddi4+0x92>
 8000d3c:	454b      	cmp	r3, r9
 8000d3e:	d2a9      	bcs.n	8000c94 <__udivmoddi4+0x1f8>
 8000d40:	ebb9 0802 	subs.w	r8, r9, r2
 8000d44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d48:	3801      	subs	r0, #1
 8000d4a:	e7a3      	b.n	8000c94 <__udivmoddi4+0x1f8>
 8000d4c:	4646      	mov	r6, r8
 8000d4e:	e7ea      	b.n	8000d26 <__udivmoddi4+0x28a>
 8000d50:	4620      	mov	r0, r4
 8000d52:	e794      	b.n	8000c7e <__udivmoddi4+0x1e2>
 8000d54:	4640      	mov	r0, r8
 8000d56:	e7d1      	b.n	8000cfc <__udivmoddi4+0x260>
 8000d58:	46d0      	mov	r8, sl
 8000d5a:	e77b      	b.n	8000c54 <__udivmoddi4+0x1b8>
 8000d5c:	3b02      	subs	r3, #2
 8000d5e:	4461      	add	r1, ip
 8000d60:	e732      	b.n	8000bc8 <__udivmoddi4+0x12c>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e709      	b.n	8000b7a <__udivmoddi4+0xde>
 8000d66:	4464      	add	r4, ip
 8000d68:	3802      	subs	r0, #2
 8000d6a:	e742      	b.n	8000bf2 <__udivmoddi4+0x156>

08000d6c <__aeabi_idiv0>:
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop

08000d70 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000d70:	b5b0      	push	{r4, r5, r7, lr}
 8000d72:	b08a      	sub	sp, #40	; 0x28
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
 8000d7c:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000d7e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000d82:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8000d86:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000d8a:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d8e:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000d90:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000d92:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000da0:	f107 0310 	add.w	r3, r7, #16
 8000da4:	4618      	mov	r0, r3
 8000da6:	f000 f80e 	bl	8000dc6 <Lcd_init>

	return lcd;
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	461d      	mov	r5, r3
 8000dae:	f107 0410 	add.w	r4, r7, #16
 8000db2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000db4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000db6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000dba:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000dbe:	68f8      	ldr	r0, [r7, #12]
 8000dc0:	3728      	adds	r7, #40	; 0x28
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bdb0      	pop	{r4, r5, r7, pc}

08000dc6 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b082      	sub	sp, #8
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	7d9b      	ldrb	r3, [r3, #22]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d10c      	bne.n	8000df0 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8000dd6:	2133      	movs	r1, #51	; 0x33
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f000 f863 	bl	8000ea4 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000dde:	2132      	movs	r1, #50	; 0x32
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f000 f85f 	bl	8000ea4 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000de6:	2128      	movs	r1, #40	; 0x28
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f000 f85b 	bl	8000ea4 <lcd_write_command>
 8000dee:	e003      	b.n	8000df8 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000df0:	2138      	movs	r1, #56	; 0x38
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f000 f856 	bl	8000ea4 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000df8:	2101      	movs	r1, #1
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f000 f852 	bl	8000ea4 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000e00:	210c      	movs	r1, #12
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f000 f84e 	bl	8000ea4 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000e08:	2106      	movs	r1, #6
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f000 f84a 	bl	8000ea4 <lcd_write_command>
}
 8000e10:	bf00      	nop
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000e18:	b590      	push	{r4, r7, lr}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]

	for(uint8_t i = 0; i < strlen(string); i++)
 8000e22:	2300      	movs	r3, #0
 8000e24:	73fb      	strb	r3, [r7, #15]
 8000e26:	e00a      	b.n	8000e3e <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000e28:	7bfb      	ldrb	r3, [r7, #15]
 8000e2a:	683a      	ldr	r2, [r7, #0]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	4619      	mov	r1, r3
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f000 f864 	bl	8000f00 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000e38:	7bfb      	ldrb	r3, [r7, #15]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	73fb      	strb	r3, [r7, #15]
 8000e3e:	7bfc      	ldrb	r4, [r7, #15]
 8000e40:	6838      	ldr	r0, [r7, #0]
 8000e42:	f7ff f9cd 	bl	80001e0 <strlen>
 8000e46:	4603      	mov	r3, r0
 8000e48:	429c      	cmp	r4, r3
 8000e4a:	d3ed      	bcc.n	8000e28 <Lcd_string+0x10>
	}
}
 8000e4c:	bf00      	nop
 8000e4e:	bf00      	nop
 8000e50:	3714      	adds	r7, #20
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd90      	pop	{r4, r7, pc}
	...

08000e58 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	460b      	mov	r3, r1
 8000e62:	70fb      	strb	r3, [r7, #3]
 8000e64:	4613      	mov	r3, r2
 8000e66:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000e68:	78fb      	ldrb	r3, [r7, #3]
 8000e6a:	4a07      	ldr	r2, [pc, #28]	; (8000e88 <Lcd_cursor+0x30>)
 8000e6c:	5cd2      	ldrb	r2, [r2, r3]
 8000e6e:	78bb      	ldrb	r3, [r7, #2]
 8000e70:	4413      	add	r3, r2
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	3b80      	subs	r3, #128	; 0x80
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	4619      	mov	r1, r3
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f000 f812 	bl	8000ea4 <lcd_write_command>
	#endif
}
 8000e80:	bf00      	nop
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	08006964 	.word	0x08006964

08000e8c <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 8000e94:	2101      	movs	r1, #1
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f000 f804 	bl	8000ea4 <lcd_write_command>
}
 8000e9c:	bf00      	nop
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	460b      	mov	r3, r1
 8000eae:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6898      	ldr	r0, [r3, #8]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	899b      	ldrh	r3, [r3, #12]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	4619      	mov	r1, r3
 8000ebc:	f002 fc9c 	bl	80037f8 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	7d9b      	ldrb	r3, [r3, #22]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d111      	bne.n	8000eec <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8000ec8:	78fb      	ldrb	r3, [r7, #3]
 8000eca:	091b      	lsrs	r3, r3, #4
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	2204      	movs	r2, #4
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f000 f842 	bl	8000f5c <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8000ed8:	78fb      	ldrb	r3, [r7, #3]
 8000eda:	f003 030f 	and.w	r3, r3, #15
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	2204      	movs	r2, #4
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f000 f839 	bl	8000f5c <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8000eea:	e005      	b.n	8000ef8 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000eec:	78fb      	ldrb	r3, [r7, #3]
 8000eee:	2208      	movs	r2, #8
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f000 f832 	bl	8000f5c <lcd_write>
}
 8000ef8:	bf00      	nop
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	460b      	mov	r3, r1
 8000f0a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6898      	ldr	r0, [r3, #8]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	899b      	ldrh	r3, [r3, #12]
 8000f14:	2201      	movs	r2, #1
 8000f16:	4619      	mov	r1, r3
 8000f18:	f002 fc6e 	bl	80037f8 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	7d9b      	ldrb	r3, [r3, #22]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d111      	bne.n	8000f48 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000f24:	78fb      	ldrb	r3, [r7, #3]
 8000f26:	091b      	lsrs	r3, r3, #4
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	2204      	movs	r2, #4
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f000 f814 	bl	8000f5c <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8000f34:	78fb      	ldrb	r3, [r7, #3]
 8000f36:	f003 030f 	and.w	r3, r3, #15
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	2204      	movs	r2, #4
 8000f3e:	4619      	mov	r1, r3
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f000 f80b 	bl	8000f5c <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8000f46:	e005      	b.n	8000f54 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000f48:	78fb      	ldrb	r3, [r7, #3]
 8000f4a:	2208      	movs	r2, #8
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f000 f804 	bl	8000f5c <lcd_write>
}
 8000f54:	bf00      	nop
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	460b      	mov	r3, r1
 8000f66:	70fb      	strb	r3, [r7, #3]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	73fb      	strb	r3, [r7, #15]
 8000f70:	e019      	b.n	8000fa6 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	4413      	add	r3, r2
 8000f7c:	6818      	ldr	r0, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	685a      	ldr	r2, [r3, #4]
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	4413      	add	r3, r2
 8000f88:	8819      	ldrh	r1, [r3, #0]
 8000f8a:	78fa      	ldrb	r2, [r7, #3]
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
 8000f8e:	fa42 f303 	asr.w	r3, r2, r3
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	f002 fc2c 	bl	80037f8 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	73fb      	strb	r3, [r7, #15]
 8000fa6:	7bfa      	ldrb	r2, [r7, #15]
 8000fa8:	78bb      	ldrb	r3, [r7, #2]
 8000faa:	429a      	cmp	r2, r3
 8000fac:	d3e1      	bcc.n	8000f72 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6918      	ldr	r0, [r3, #16]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	8a9b      	ldrh	r3, [r3, #20]
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f002 fc1d 	bl	80037f8 <HAL_GPIO_WritePin>
	DELAY(1);
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	f001 fcc4 	bl	800294c <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6918      	ldr	r0, [r3, #16]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	8a9b      	ldrh	r3, [r3, #20]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	4619      	mov	r1, r3
 8000fd0:	f002 fc12 	bl	80037f8 <HAL_GPIO_WritePin>
}
 8000fd4:	bf00      	nop
 8000fd6:	3710      	adds	r7, #16
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <HAL_UART_RxCpltCallback>:
uint16_t get_pv_panel_adc2_input();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]

	g_system_config[g_byte_count] = char_rcvd[0] ;
 8000fe4:	4b14      	ldr	r3, [pc, #80]	; (8001038 <HAL_UART_RxCpltCallback+0x5c>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4b14      	ldr	r3, [pc, #80]	; (800103c <HAL_UART_RxCpltCallback+0x60>)
 8000fec:	7819      	ldrb	r1, [r3, #0]
 8000fee:	4b14      	ldr	r3, [pc, #80]	; (8001040 <HAL_UART_RxCpltCallback+0x64>)
 8000ff0:	5499      	strb	r1, [r3, r2]
	g_byte_count++ ;
 8000ff2:	4b11      	ldr	r3, [pc, #68]	; (8001038 <HAL_UART_RxCpltCallback+0x5c>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <HAL_UART_RxCpltCallback+0x5c>)
 8000ffc:	701a      	strb	r2, [r3, #0]

	if(char_rcvd[0] == '\n'){
 8000ffe:	4b0f      	ldr	r3, [pc, #60]	; (800103c <HAL_UART_RxCpltCallback+0x60>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b0a      	cmp	r3, #10
 8001004:	d10f      	bne.n	8001026 <HAL_UART_RxCpltCallback+0x4a>
		if(g_byte_count == 7){
 8001006:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <HAL_UART_RxCpltCallback+0x5c>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	2b07      	cmp	r3, #7
 800100c:	d103      	bne.n	8001016 <HAL_UART_RxCpltCallback+0x3a>
			g_config_command_rcvd = 1;
 800100e:	4b0d      	ldr	r3, [pc, #52]	; (8001044 <HAL_UART_RxCpltCallback+0x68>)
 8001010:	2201      	movs	r2, #1
 8001012:	701a      	strb	r2, [r3, #0]
 8001014:	e004      	b.n	8001020 <HAL_UART_RxCpltCallback+0x44>
			// check for SP or EN command recvd
		}
		else{
			// remove for next DEMO
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)"Invalid command sent\n", 21);
 8001016:	2215      	movs	r2, #21
 8001018:	490b      	ldr	r1, [pc, #44]	; (8001048 <HAL_UART_RxCpltCallback+0x6c>)
 800101a:	480c      	ldr	r0, [pc, #48]	; (800104c <HAL_UART_RxCpltCallback+0x70>)
 800101c:	f004 f845 	bl	80050aa <HAL_UART_Transmit_IT>
			// DO NOTHING: NO STATE UPDATE IN THE CASE OF COMMAND NOT IN THE APPROPRIATE ORDER
		}

		g_byte_count =0 ;
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <HAL_UART_RxCpltCallback+0x5c>)
 8001022:	2200      	movs	r2, #0
 8001024:	701a      	strb	r2, [r3, #0]
	}

	//re-prime receiver
	HAL_UART_Receive_IT(&huart2, (uint8_t*)char_rcvd, 1) ;
 8001026:	2201      	movs	r2, #1
 8001028:	4904      	ldr	r1, [pc, #16]	; (800103c <HAL_UART_RxCpltCallback+0x60>)
 800102a:	4808      	ldr	r0, [pc, #32]	; (800104c <HAL_UART_RxCpltCallback+0x70>)
 800102c:	f004 f882 	bl	8005134 <HAL_UART_Receive_IT>

}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000251 	.word	0x20000251
 800103c:	20000010 	.word	0x20000010
 8001040:	20000240 	.word	0x20000240
 8001044:	20000252 	.word	0x20000252
 8001048:	08006908 	.word	0x08006908
 800104c:	20000194 	.word	0x20000194

08001050 <get_adc_value_and_celsius_temperature>:
/**
 * function starts the adc, waits for conversion
 * Then converts value to degrees
 */

uint16_t get_adc_value_and_celsius_temperature(){
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0

	//select adc channel 0
	ADC_Select_CH0() ;
 8001054:	f000 fb4e 	bl	80016f4 <ADC_Select_CH0>
	HAL_ADC_Start(&hadc1) ;
 8001058:	4825      	ldr	r0, [pc, #148]	; (80010f0 <get_adc_value_and_celsius_temperature+0xa0>)
 800105a:	f001 fcdf 	bl	8002a1c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800105e:	f04f 31ff 	mov.w	r1, #4294967295
 8001062:	4823      	ldr	r0, [pc, #140]	; (80010f0 <get_adc_value_and_celsius_temperature+0xa0>)
 8001064:	f001 fdc1 	bl	8002bea <HAL_ADC_PollForConversion>
	g_raw  = HAL_ADC_GetValue(&hadc1) ;
 8001068:	4821      	ldr	r0, [pc, #132]	; (80010f0 <get_adc_value_and_celsius_temperature+0xa0>)
 800106a:	f001 fe49 	bl	8002d00 <HAL_ADC_GetValue>
 800106e:	4603      	mov	r3, r0
 8001070:	b29a      	uxth	r2, r3
 8001072:	4b20      	ldr	r3, [pc, #128]	; (80010f4 <get_adc_value_and_celsius_temperature+0xa4>)
 8001074:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1) ;  //stop adc
 8001076:	481e      	ldr	r0, [pc, #120]	; (80010f0 <get_adc_value_and_celsius_temperature+0xa0>)
 8001078:	f001 fd84 	bl	8002b84 <HAL_ADC_Stop>

	g_vin = g_raw*(3.3/4095.0) ; // input voltage
 800107c:	4b1d      	ldr	r3, [pc, #116]	; (80010f4 <get_adc_value_and_celsius_temperature+0xa4>)
 800107e:	881b      	ldrh	r3, [r3, #0]
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff fa57 	bl	8000534 <__aeabi_i2d>
 8001086:	a316      	add	r3, pc, #88	; (adr r3, 80010e0 <get_adc_value_and_celsius_temperature+0x90>)
 8001088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108c:	f7ff fabc 	bl	8000608 <__aeabi_dmul>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	4918      	ldr	r1, [pc, #96]	; (80010f8 <get_adc_value_and_celsius_temperature+0xa8>)
 8001096:	e9c1 2300 	strd	r2, r3, [r1]
	g_temp = g_vin*100 - 273.15 ; // cast to 16 bit uint
 800109a:	4b17      	ldr	r3, [pc, #92]	; (80010f8 <get_adc_value_and_celsius_temperature+0xa8>)
 800109c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010a0:	f04f 0200 	mov.w	r2, #0
 80010a4:	4b15      	ldr	r3, [pc, #84]	; (80010fc <get_adc_value_and_celsius_temperature+0xac>)
 80010a6:	f7ff faaf 	bl	8000608 <__aeabi_dmul>
 80010aa:	4602      	mov	r2, r0
 80010ac:	460b      	mov	r3, r1
 80010ae:	4610      	mov	r0, r2
 80010b0:	4619      	mov	r1, r3
 80010b2:	a30d      	add	r3, pc, #52	; (adr r3, 80010e8 <get_adc_value_and_celsius_temperature+0x98>)
 80010b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b8:	f7ff f8ee 	bl	8000298 <__aeabi_dsub>
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
 80010c0:	490f      	ldr	r1, [pc, #60]	; (8001100 <get_adc_value_and_celsius_temperature+0xb0>)
 80010c2:	e9c1 2300 	strd	r2, r3, [r1]

	return g_temp ;
 80010c6:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <get_adc_value_and_celsius_temperature+0xb0>)
 80010c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010cc:	4610      	mov	r0, r2
 80010ce:	4619      	mov	r1, r3
 80010d0:	f7ff fcac 	bl	8000a2c <__aeabi_d2uiz>
 80010d4:	4603      	mov	r3, r0
 80010d6:	b29b      	uxth	r3, r3
}
 80010d8:	4618      	mov	r0, r3
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	f3af 8000 	nop.w
 80010e0:	e734d9b4 	.word	0xe734d9b4
 80010e4:	3f4a680c 	.word	0x3f4a680c
 80010e8:	66666666 	.word	0x66666666
 80010ec:	40711266 	.word	0x40711266
 80010f0:	200000bc 	.word	0x200000bc
 80010f4:	200001d8 	.word	0x200001d8
 80010f8:	200001e8 	.word	0x200001e8
 80010fc:	40590000 	.word	0x40590000
 8001100:	200001e0 	.word	0x200001e0

08001104 <store_temp_in_string>:

void store_temp_in_string(uint16_t temperature, char temp[], int len){
 8001104:	b480      	push	{r7}
 8001106:	b087      	sub	sp, #28
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
 8001110:	81fb      	strh	r3, [r7, #14]

	for(int i= 0 ; i < len ; i++){
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
 8001116:	e04e      	b.n	80011b6 <store_temp_in_string+0xb2>
		switch(i){
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	2b02      	cmp	r3, #2
 800111c:	d02f      	beq.n	800117e <store_temp_in_string+0x7a>
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	2b02      	cmp	r3, #2
 8001122:	dc44      	bgt.n	80011ae <store_temp_in_string+0xaa>
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <store_temp_in_string+0x2e>
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d00c      	beq.n	800114a <store_temp_in_string+0x46>
			case 2:
				temp[2] = (temperature - ((temperature/10)*10) ) + 48 ;

				break;
			default:
				break;
 8001130:	e03d      	b.n	80011ae <store_temp_in_string+0xaa>
				temp[0]  = (temperature/100) + 48 ;
 8001132:	89fb      	ldrh	r3, [r7, #14]
 8001134:	4a25      	ldr	r2, [pc, #148]	; (80011cc <store_temp_in_string+0xc8>)
 8001136:	fba2 2303 	umull	r2, r3, r2, r3
 800113a:	095b      	lsrs	r3, r3, #5
 800113c:	b29b      	uxth	r3, r3
 800113e:	b2db      	uxtb	r3, r3
 8001140:	3330      	adds	r3, #48	; 0x30
 8001142:	b2da      	uxtb	r2, r3
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	701a      	strb	r2, [r3, #0]
				break;
 8001148:	e032      	b.n	80011b0 <store_temp_in_string+0xac>
				temp[1] = (temperature - (temperature/100)*100 )/10 + 48 ;
 800114a:	89fa      	ldrh	r2, [r7, #14]
 800114c:	89fb      	ldrh	r3, [r7, #14]
 800114e:	491f      	ldr	r1, [pc, #124]	; (80011cc <store_temp_in_string+0xc8>)
 8001150:	fba1 1303 	umull	r1, r3, r1, r3
 8001154:	095b      	lsrs	r3, r3, #5
 8001156:	b29b      	uxth	r3, r3
 8001158:	4619      	mov	r1, r3
 800115a:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800115e:	fb01 f303 	mul.w	r3, r1, r3
 8001162:	4413      	add	r3, r2
 8001164:	4a1a      	ldr	r2, [pc, #104]	; (80011d0 <store_temp_in_string+0xcc>)
 8001166:	fb82 1203 	smull	r1, r2, r2, r3
 800116a:	1092      	asrs	r2, r2, #2
 800116c:	17db      	asrs	r3, r3, #31
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	b2da      	uxtb	r2, r3
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	3301      	adds	r3, #1
 8001176:	3230      	adds	r2, #48	; 0x30
 8001178:	b2d2      	uxtb	r2, r2
 800117a:	701a      	strb	r2, [r3, #0]
				break;
 800117c:	e018      	b.n	80011b0 <store_temp_in_string+0xac>
				temp[2] = (temperature - ((temperature/10)*10) ) + 48 ;
 800117e:	89fb      	ldrh	r3, [r7, #14]
 8001180:	b2da      	uxtb	r2, r3
 8001182:	89fb      	ldrh	r3, [r7, #14]
 8001184:	4913      	ldr	r1, [pc, #76]	; (80011d4 <store_temp_in_string+0xd0>)
 8001186:	fba1 1303 	umull	r1, r3, r1, r3
 800118a:	08db      	lsrs	r3, r3, #3
 800118c:	b29b      	uxth	r3, r3
 800118e:	b2db      	uxtb	r3, r3
 8001190:	4619      	mov	r1, r3
 8001192:	0149      	lsls	r1, r1, #5
 8001194:	1ac9      	subs	r1, r1, r3
 8001196:	0089      	lsls	r1, r1, #2
 8001198:	1acb      	subs	r3, r1, r3
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	b2db      	uxtb	r3, r3
 800119e:	4413      	add	r3, r2
 80011a0:	b2da      	uxtb	r2, r3
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	3302      	adds	r3, #2
 80011a6:	3230      	adds	r2, #48	; 0x30
 80011a8:	b2d2      	uxtb	r2, r2
 80011aa:	701a      	strb	r2, [r3, #0]
				break;
 80011ac:	e000      	b.n	80011b0 <store_temp_in_string+0xac>
				break;
 80011ae:	bf00      	nop
	for(int i= 0 ; i < len ; i++){
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	3301      	adds	r3, #1
 80011b4:	617b      	str	r3, [r7, #20]
 80011b6:	697a      	ldr	r2, [r7, #20]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	dbac      	blt.n	8001118 <store_temp_in_string+0x14>

		}
	}
}
 80011be:	bf00      	nop
 80011c0:	bf00      	nop
 80011c2:	371c      	adds	r7, #28
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	51eb851f 	.word	0x51eb851f
 80011d0:	66666667 	.word	0x66666667
 80011d4:	cccccccd 	.word	0xcccccccd

080011d8 <system_state_update>:

/**
 * This function will update the system state based on the received UART command
 * or top button press
 */
void system_state_update(){
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0

	//CHECK FOR TYPE OF MEASUREMENT
	if( g_config_command_rcvd == 1){
 80011dc:	4b87      	ldr	r3, [pc, #540]	; (80013fc <system_state_update+0x224>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d125      	bne.n	8001230 <system_state_update+0x58>
		g_config_command_rcvd = 0;
 80011e4:	4b85      	ldr	r3, [pc, #532]	; (80013fc <system_state_update+0x224>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	701a      	strb	r2, [r3, #0]

		if( g_system_config[2]=='E' && g_system_config[3] == 'N'){
 80011ea:	4b85      	ldr	r3, [pc, #532]	; (8001400 <system_state_update+0x228>)
 80011ec:	789b      	ldrb	r3, [r3, #2]
 80011ee:	2b45      	cmp	r3, #69	; 0x45
 80011f0:	d10a      	bne.n	8001208 <system_state_update+0x30>
 80011f2:	4b83      	ldr	r3, [pc, #524]	; (8001400 <system_state_update+0x228>)
 80011f4:	78db      	ldrb	r3, [r3, #3]
 80011f6:	2b4e      	cmp	r3, #78	; 0x4e
 80011f8:	d106      	bne.n	8001208 <system_state_update+0x30>
			// EN measure comand
			g_EN_config_command_rcvd =1 ;
 80011fa:	4b82      	ldr	r3, [pc, #520]	; (8001404 <system_state_update+0x22c>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	701a      	strb	r2, [r3, #0]
			//stop SP measure
			g_SP_config_command_rcvd =0 ;
 8001200:	4b81      	ldr	r3, [pc, #516]	; (8001408 <system_state_update+0x230>)
 8001202:	2200      	movs	r2, #0
 8001204:	701a      	strb	r2, [r3, #0]
 8001206:	e013      	b.n	8001230 <system_state_update+0x58>

		}

		else if(g_system_config[2]=='S' && g_system_config[3] == 'P'){
 8001208:	4b7d      	ldr	r3, [pc, #500]	; (8001400 <system_state_update+0x228>)
 800120a:	789b      	ldrb	r3, [r3, #2]
 800120c:	2b53      	cmp	r3, #83	; 0x53
 800120e:	d10a      	bne.n	8001226 <system_state_update+0x4e>
 8001210:	4b7b      	ldr	r3, [pc, #492]	; (8001400 <system_state_update+0x228>)
 8001212:	78db      	ldrb	r3, [r3, #3]
 8001214:	2b50      	cmp	r3, #80	; 0x50
 8001216:	d106      	bne.n	8001226 <system_state_update+0x4e>
			// SP command
			g_SP_config_command_rcvd =1 ;
 8001218:	4b7b      	ldr	r3, [pc, #492]	; (8001408 <system_state_update+0x230>)
 800121a:	2201      	movs	r2, #1
 800121c:	701a      	strb	r2, [r3, #0]
			//stop EN command
			g_EN_config_command_rcvd =0;
 800121e:	4b79      	ldr	r3, [pc, #484]	; (8001404 <system_state_update+0x22c>)
 8001220:	2200      	movs	r2, #0
 8001222:	701a      	strb	r2, [r3, #0]
 8001224:	e004      	b.n	8001230 <system_state_update+0x58>

		}

		else{
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)"Invalid Command\n", 16);
 8001226:	2210      	movs	r2, #16
 8001228:	4978      	ldr	r1, [pc, #480]	; (800140c <system_state_update+0x234>)
 800122a:	4879      	ldr	r0, [pc, #484]	; (8001410 <system_state_update+0x238>)
 800122c:	f003 ff3d 	bl	80050aa <HAL_UART_Transmit_IT>
		}
	}

	// Environment Measure - And not measuring SP
	if(g_top_button_pressed  == 1 && g_EN_config_command_rcvd ==0 && g_SP_config_command_rcvd ==0 && (g_SP_measure == 0 || g_SP_measure ==2)){
 8001230:	4b78      	ldr	r3, [pc, #480]	; (8001414 <system_state_update+0x23c>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d120      	bne.n	800127a <system_state_update+0xa2>
 8001238:	4b72      	ldr	r3, [pc, #456]	; (8001404 <system_state_update+0x22c>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d11c      	bne.n	800127a <system_state_update+0xa2>
 8001240:	4b71      	ldr	r3, [pc, #452]	; (8001408 <system_state_update+0x230>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d118      	bne.n	800127a <system_state_update+0xa2>
 8001248:	4b73      	ldr	r3, [pc, #460]	; (8001418 <system_state_update+0x240>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d003      	beq.n	8001258 <system_state_update+0x80>
 8001250:	4b71      	ldr	r3, [pc, #452]	; (8001418 <system_state_update+0x240>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b02      	cmp	r3, #2
 8001256:	d110      	bne.n	800127a <system_state_update+0xa2>
		g_top_button_pressed = 0;
 8001258:	4b6e      	ldr	r3, [pc, #440]	; (8001414 <system_state_update+0x23c>)
 800125a:	2200      	movs	r2, #0
 800125c:	701a      	strb	r2, [r3, #0]

		g_EN_measure++  ;
 800125e:	4b6f      	ldr	r3, [pc, #444]	; (800141c <system_state_update+0x244>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	3301      	adds	r3, #1
 8001264:	b2da      	uxtb	r2, r3
 8001266:	4b6d      	ldr	r3, [pc, #436]	; (800141c <system_state_update+0x244>)
 8001268:	701a      	strb	r2, [r3, #0]

		if(g_EN_measure >2 ){
 800126a:	4b6c      	ldr	r3, [pc, #432]	; (800141c <system_state_update+0x244>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b02      	cmp	r3, #2
 8001270:	d954      	bls.n	800131c <system_state_update+0x144>
			g_EN_measure = 1;
 8001272:	4b6a      	ldr	r3, [pc, #424]	; (800141c <system_state_update+0x244>)
 8001274:	2201      	movs	r2, #1
 8001276:	701a      	strb	r2, [r3, #0]
		if(g_EN_measure >2 ){
 8001278:	e050      	b.n	800131c <system_state_update+0x144>
		}
	}
	else if(g_top_button_pressed ==0  && g_EN_config_command_rcvd == 1 && g_SP_config_command_rcvd ==0  && (g_SP_measure == 0 || g_SP_measure ==2)){
 800127a:	4b66      	ldr	r3, [pc, #408]	; (8001414 <system_state_update+0x23c>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d14c      	bne.n	800131c <system_state_update+0x144>
 8001282:	4b60      	ldr	r3, [pc, #384]	; (8001404 <system_state_update+0x22c>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2b01      	cmp	r3, #1
 8001288:	d148      	bne.n	800131c <system_state_update+0x144>
 800128a:	4b5f      	ldr	r3, [pc, #380]	; (8001408 <system_state_update+0x230>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d144      	bne.n	800131c <system_state_update+0x144>
 8001292:	4b61      	ldr	r3, [pc, #388]	; (8001418 <system_state_update+0x240>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <system_state_update+0xca>
 800129a:	4b5f      	ldr	r3, [pc, #380]	; (8001418 <system_state_update+0x240>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d13c      	bne.n	800131c <system_state_update+0x144>
		g_EN_config_command_rcvd = 0;
 80012a2:	4b58      	ldr	r3, [pc, #352]	; (8001404 <system_state_update+0x22c>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	701a      	strb	r2, [r3, #0]
		if(g_system_config[0]== '&' && g_system_config[1 ]== '_' && g_system_config[2]=='E' && g_system_config[3] == 'N' &&g_system_config[4] =='_'&& g_system_config[5] =='*' &&  g_system_config[6] =='\n' ){
 80012a8:	4b55      	ldr	r3, [pc, #340]	; (8001400 <system_state_update+0x228>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b26      	cmp	r3, #38	; 0x26
 80012ae:	d12f      	bne.n	8001310 <system_state_update+0x138>
 80012b0:	4b53      	ldr	r3, [pc, #332]	; (8001400 <system_state_update+0x228>)
 80012b2:	785b      	ldrb	r3, [r3, #1]
 80012b4:	2b5f      	cmp	r3, #95	; 0x5f
 80012b6:	d12b      	bne.n	8001310 <system_state_update+0x138>
 80012b8:	4b51      	ldr	r3, [pc, #324]	; (8001400 <system_state_update+0x228>)
 80012ba:	789b      	ldrb	r3, [r3, #2]
 80012bc:	2b45      	cmp	r3, #69	; 0x45
 80012be:	d127      	bne.n	8001310 <system_state_update+0x138>
 80012c0:	4b4f      	ldr	r3, [pc, #316]	; (8001400 <system_state_update+0x228>)
 80012c2:	78db      	ldrb	r3, [r3, #3]
 80012c4:	2b4e      	cmp	r3, #78	; 0x4e
 80012c6:	d123      	bne.n	8001310 <system_state_update+0x138>
 80012c8:	4b4d      	ldr	r3, [pc, #308]	; (8001400 <system_state_update+0x228>)
 80012ca:	791b      	ldrb	r3, [r3, #4]
 80012cc:	2b5f      	cmp	r3, #95	; 0x5f
 80012ce:	d11f      	bne.n	8001310 <system_state_update+0x138>
 80012d0:	4b4b      	ldr	r3, [pc, #300]	; (8001400 <system_state_update+0x228>)
 80012d2:	795b      	ldrb	r3, [r3, #5]
 80012d4:	2b2a      	cmp	r3, #42	; 0x2a
 80012d6:	d11b      	bne.n	8001310 <system_state_update+0x138>
 80012d8:	4b49      	ldr	r3, [pc, #292]	; (8001400 <system_state_update+0x228>)
 80012da:	799b      	ldrb	r3, [r3, #6]
 80012dc:	2b0a      	cmp	r3, #10
 80012de:	d117      	bne.n	8001310 <system_state_update+0x138>
			if(g_EN_measure == 0){
 80012e0:	4b4e      	ldr	r3, [pc, #312]	; (800141c <system_state_update+0x244>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d103      	bne.n	80012f0 <system_state_update+0x118>
				g_EN_measure = 1;
 80012e8:	4b4c      	ldr	r3, [pc, #304]	; (800141c <system_state_update+0x244>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	701a      	strb	r2, [r3, #0]
			if(g_EN_measure == 0){
 80012ee:	e014      	b.n	800131a <system_state_update+0x142>
			}
			else if(g_EN_measure == 1){
 80012f0:	4b4a      	ldr	r3, [pc, #296]	; (800141c <system_state_update+0x244>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d103      	bne.n	8001300 <system_state_update+0x128>
				g_EN_measure = 2;
 80012f8:	4b48      	ldr	r3, [pc, #288]	; (800141c <system_state_update+0x244>)
 80012fa:	2202      	movs	r2, #2
 80012fc:	701a      	strb	r2, [r3, #0]
			if(g_EN_measure == 0){
 80012fe:	e00c      	b.n	800131a <system_state_update+0x142>

			}
			else{
				if(g_EN_measure ==2){
 8001300:	4b46      	ldr	r3, [pc, #280]	; (800141c <system_state_update+0x244>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b02      	cmp	r3, #2
 8001306:	d108      	bne.n	800131a <system_state_update+0x142>
					g_EN_measure = 1;
 8001308:	4b44      	ldr	r3, [pc, #272]	; (800141c <system_state_update+0x244>)
 800130a:	2201      	movs	r2, #1
 800130c:	701a      	strb	r2, [r3, #0]
			if(g_EN_measure == 0){
 800130e:	e004      	b.n	800131a <system_state_update+0x142>
				}
			}
		}
		//else block to not update g_EN_measure if incorrent command revcd
		else{
			g_EN_measure =  g_EN_measure ;
 8001310:	4b42      	ldr	r3, [pc, #264]	; (800141c <system_state_update+0x244>)
 8001312:	781a      	ldrb	r2, [r3, #0]
 8001314:	4b41      	ldr	r3, [pc, #260]	; (800141c <system_state_update+0x244>)
 8001316:	701a      	strb	r2, [r3, #0]
 8001318:	e000      	b.n	800131c <system_state_update+0x144>
			if(g_EN_measure == 0){
 800131a:	bf00      	nop
	}



	//SP Measure
	if(g_bottom_button_pressed  == 1  && g_EN_config_command_rcvd == 0 && g_SP_config_command_rcvd ==0  && (g_EN_measure == 0 || g_EN_measure ==2)){
 800131c:	4b40      	ldr	r3, [pc, #256]	; (8001420 <system_state_update+0x248>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d120      	bne.n	8001366 <system_state_update+0x18e>
 8001324:	4b37      	ldr	r3, [pc, #220]	; (8001404 <system_state_update+0x22c>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d11c      	bne.n	8001366 <system_state_update+0x18e>
 800132c:	4b36      	ldr	r3, [pc, #216]	; (8001408 <system_state_update+0x230>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d118      	bne.n	8001366 <system_state_update+0x18e>
 8001334:	4b39      	ldr	r3, [pc, #228]	; (800141c <system_state_update+0x244>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d003      	beq.n	8001344 <system_state_update+0x16c>
 800133c:	4b37      	ldr	r3, [pc, #220]	; (800141c <system_state_update+0x244>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b02      	cmp	r3, #2
 8001342:	d110      	bne.n	8001366 <system_state_update+0x18e>
			g_bottom_button_pressed = 0;
 8001344:	4b36      	ldr	r3, [pc, #216]	; (8001420 <system_state_update+0x248>)
 8001346:	2200      	movs	r2, #0
 8001348:	701a      	strb	r2, [r3, #0]

			g_SP_measure++  ;
 800134a:	4b33      	ldr	r3, [pc, #204]	; (8001418 <system_state_update+0x240>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	3301      	adds	r3, #1
 8001350:	b2da      	uxtb	r2, r3
 8001352:	4b31      	ldr	r3, [pc, #196]	; (8001418 <system_state_update+0x240>)
 8001354:	701a      	strb	r2, [r3, #0]

			if(g_SP_measure >2 ){
 8001356:	4b30      	ldr	r3, [pc, #192]	; (8001418 <system_state_update+0x240>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b02      	cmp	r3, #2
 800135c:	d968      	bls.n	8001430 <system_state_update+0x258>
				g_SP_measure = 1;
 800135e:	4b2e      	ldr	r3, [pc, #184]	; (8001418 <system_state_update+0x240>)
 8001360:	2201      	movs	r2, #1
 8001362:	701a      	strb	r2, [r3, #0]
			if(g_SP_measure >2 ){
 8001364:	e064      	b.n	8001430 <system_state_update+0x258>
			}
		}
		else if(g_bottom_button_pressed ==0  && g_EN_config_command_rcvd == 0 && g_SP_config_command_rcvd ==1 && (g_EN_measure == 0 || g_EN_measure ==2)){
 8001366:	4b2e      	ldr	r3, [pc, #184]	; (8001420 <system_state_update+0x248>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d160      	bne.n	8001430 <system_state_update+0x258>
 800136e:	4b25      	ldr	r3, [pc, #148]	; (8001404 <system_state_update+0x22c>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d15c      	bne.n	8001430 <system_state_update+0x258>
 8001376:	4b24      	ldr	r3, [pc, #144]	; (8001408 <system_state_update+0x230>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d158      	bne.n	8001430 <system_state_update+0x258>
 800137e:	4b27      	ldr	r3, [pc, #156]	; (800141c <system_state_update+0x244>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <system_state_update+0x1b6>
 8001386:	4b25      	ldr	r3, [pc, #148]	; (800141c <system_state_update+0x244>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2b02      	cmp	r3, #2
 800138c:	d150      	bne.n	8001430 <system_state_update+0x258>
			g_SP_config_command_rcvd = 0;
 800138e:	4b1e      	ldr	r3, [pc, #120]	; (8001408 <system_state_update+0x230>)
 8001390:	2200      	movs	r2, #0
 8001392:	701a      	strb	r2, [r3, #0]
			if(g_system_config[0]== '&' && g_system_config[1 ]== '_' && g_system_config[2]=='S' && g_system_config[3] == 'P' &&g_system_config[4] =='_'&& g_system_config[5] =='*' &&  g_system_config[6] =='\n' ){
 8001394:	4b1a      	ldr	r3, [pc, #104]	; (8001400 <system_state_update+0x228>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b26      	cmp	r3, #38	; 0x26
 800139a:	d143      	bne.n	8001424 <system_state_update+0x24c>
 800139c:	4b18      	ldr	r3, [pc, #96]	; (8001400 <system_state_update+0x228>)
 800139e:	785b      	ldrb	r3, [r3, #1]
 80013a0:	2b5f      	cmp	r3, #95	; 0x5f
 80013a2:	d13f      	bne.n	8001424 <system_state_update+0x24c>
 80013a4:	4b16      	ldr	r3, [pc, #88]	; (8001400 <system_state_update+0x228>)
 80013a6:	789b      	ldrb	r3, [r3, #2]
 80013a8:	2b53      	cmp	r3, #83	; 0x53
 80013aa:	d13b      	bne.n	8001424 <system_state_update+0x24c>
 80013ac:	4b14      	ldr	r3, [pc, #80]	; (8001400 <system_state_update+0x228>)
 80013ae:	78db      	ldrb	r3, [r3, #3]
 80013b0:	2b50      	cmp	r3, #80	; 0x50
 80013b2:	d137      	bne.n	8001424 <system_state_update+0x24c>
 80013b4:	4b12      	ldr	r3, [pc, #72]	; (8001400 <system_state_update+0x228>)
 80013b6:	791b      	ldrb	r3, [r3, #4]
 80013b8:	2b5f      	cmp	r3, #95	; 0x5f
 80013ba:	d133      	bne.n	8001424 <system_state_update+0x24c>
 80013bc:	4b10      	ldr	r3, [pc, #64]	; (8001400 <system_state_update+0x228>)
 80013be:	795b      	ldrb	r3, [r3, #5]
 80013c0:	2b2a      	cmp	r3, #42	; 0x2a
 80013c2:	d12f      	bne.n	8001424 <system_state_update+0x24c>
 80013c4:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <system_state_update+0x228>)
 80013c6:	799b      	ldrb	r3, [r3, #6]
 80013c8:	2b0a      	cmp	r3, #10
 80013ca:	d12b      	bne.n	8001424 <system_state_update+0x24c>
				if(g_SP_measure == 0){
 80013cc:	4b12      	ldr	r3, [pc, #72]	; (8001418 <system_state_update+0x240>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d103      	bne.n	80013dc <system_state_update+0x204>
					g_SP_measure = 1;
 80013d4:	4b10      	ldr	r3, [pc, #64]	; (8001418 <system_state_update+0x240>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	701a      	strb	r2, [r3, #0]
				if(g_SP_measure == 0){
 80013da:	e028      	b.n	800142e <system_state_update+0x256>
				}
				else if(g_SP_measure == 1){
 80013dc:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <system_state_update+0x240>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d103      	bne.n	80013ec <system_state_update+0x214>
					g_SP_measure = 2;
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <system_state_update+0x240>)
 80013e6:	2202      	movs	r2, #2
 80013e8:	701a      	strb	r2, [r3, #0]
				if(g_SP_measure == 0){
 80013ea:	e020      	b.n	800142e <system_state_update+0x256>

				}
				else{
					if(g_SP_measure ==2){
 80013ec:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <system_state_update+0x240>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d11c      	bne.n	800142e <system_state_update+0x256>
						g_SP_measure = 1;
 80013f4:	4b08      	ldr	r3, [pc, #32]	; (8001418 <system_state_update+0x240>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	701a      	strb	r2, [r3, #0]
				if(g_SP_measure == 0){
 80013fa:	e018      	b.n	800142e <system_state_update+0x256>
 80013fc:	20000252 	.word	0x20000252
 8001400:	20000240 	.word	0x20000240
 8001404:	20000259 	.word	0x20000259
 8001408:	2000025c 	.word	0x2000025c
 800140c:	08006920 	.word	0x08006920
 8001410:	20000194 	.word	0x20000194
 8001414:	2000029d 	.word	0x2000029d
 8001418:	2000025a 	.word	0x2000025a
 800141c:	20000253 	.word	0x20000253
 8001420:	2000029e 	.word	0x2000029e
					}
				}
			}
			//else block to not update g_EN_measure if incorrent command revcd
			else{
				g_SP_measure =  g_SP_measure ;
 8001424:	4b03      	ldr	r3, [pc, #12]	; (8001434 <system_state_update+0x25c>)
 8001426:	781a      	ldrb	r2, [r3, #0]
 8001428:	4b02      	ldr	r3, [pc, #8]	; (8001434 <system_state_update+0x25c>)
 800142a:	701a      	strb	r2, [r3, #0]
			}
		}
}
 800142c:	e000      	b.n	8001430 <system_state_update+0x258>
				if(g_SP_measure == 0){
 800142e:	bf00      	nop
}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}
 8001434:	2000025a 	.word	0x2000025a

08001438 <HAL_TIM_IC_CaptureCallback>:
uint8_t g_new_pulse = 0;
uint16_t g_lmt01_sens_temp =  0 ;
char dig_sens_temp[3] = {};

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
  if(htim->Instance == TIM2){
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001448:	d142      	bne.n	80014d0 <HAL_TIM_IC_CaptureCallback+0x98>
	  g_new_pulse = 1;
 800144a:	4b23      	ldr	r3, [pc, #140]	; (80014d8 <HAL_TIM_IC_CaptureCallback+0xa0>)
 800144c:	2201      	movs	r2, #1
 800144e:	701a      	strb	r2, [r3, #0]
	  g_time_between_pulses =  __HAL_TIM_GET_COUNTER(&htim2)  - current_value;  //Time between rising edges
 8001450:	4b22      	ldr	r3, [pc, #136]	; (80014dc <HAL_TIM_IC_CaptureCallback+0xa4>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001456:	4b22      	ldr	r3, [pc, #136]	; (80014e0 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	4a21      	ldr	r2, [pc, #132]	; (80014e4 <HAL_TIM_IC_CaptureCallback+0xac>)
 800145e:	6013      	str	r3, [r2, #0]

	  if( g_time_between_pulses<13){
 8001460:	4b20      	ldr	r3, [pc, #128]	; (80014e4 <HAL_TIM_IC_CaptureCallback+0xac>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b0c      	cmp	r3, #12
 8001466:	d80a      	bhi.n	800147e <HAL_TIM_IC_CaptureCallback+0x46>
		  current_value = __HAL_TIM_GET_COUNTER(&htim2) ;
 8001468:	4b1c      	ldr	r3, [pc, #112]	; (80014dc <HAL_TIM_IC_CaptureCallback+0xa4>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146e:	4a1c      	ldr	r2, [pc, #112]	; (80014e0 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8001470:	6013      	str	r3, [r2, #0]
		  pulse_count++ ;
 8001472:	4b1d      	ldr	r3, [pc, #116]	; (80014e8 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	3301      	adds	r3, #1
 8001478:	4a1b      	ldr	r2, [pc, #108]	; (80014e8 <HAL_TIM_IC_CaptureCallback+0xb0>)
 800147a:	6013      	str	r3, [r2, #0]
		  g_TO1_temp = (pulse_count/4096.0)*256 - 50 ; //calculate new temp - BUG Fixed: 4094 changed to 4096
		 current_value = __HAL_TIM_GET_COUNTER(&htim2) ;
		 pulse_count = 0;
	  }
  }
}
 800147c:	e028      	b.n	80014d0 <HAL_TIM_IC_CaptureCallback+0x98>
		  g_TO1_temp = (pulse_count/4096.0)*256 - 50 ; //calculate new temp - BUG Fixed: 4094 changed to 4096
 800147e:	4b1a      	ldr	r3, [pc, #104]	; (80014e8 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff f846 	bl	8000514 <__aeabi_ui2d>
 8001488:	f04f 0200 	mov.w	r2, #0
 800148c:	4b17      	ldr	r3, [pc, #92]	; (80014ec <HAL_TIM_IC_CaptureCallback+0xb4>)
 800148e:	f7ff f9e5 	bl	800085c <__aeabi_ddiv>
 8001492:	4602      	mov	r2, r0
 8001494:	460b      	mov	r3, r1
 8001496:	4610      	mov	r0, r2
 8001498:	4619      	mov	r1, r3
 800149a:	f04f 0200 	mov.w	r2, #0
 800149e:	4b14      	ldr	r3, [pc, #80]	; (80014f0 <HAL_TIM_IC_CaptureCallback+0xb8>)
 80014a0:	f7ff f8b2 	bl	8000608 <__aeabi_dmul>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	4610      	mov	r0, r2
 80014aa:	4619      	mov	r1, r3
 80014ac:	f04f 0200 	mov.w	r2, #0
 80014b0:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <HAL_TIM_IC_CaptureCallback+0xbc>)
 80014b2:	f7fe fef1 	bl	8000298 <__aeabi_dsub>
 80014b6:	4602      	mov	r2, r0
 80014b8:	460b      	mov	r3, r1
 80014ba:	490f      	ldr	r1, [pc, #60]	; (80014f8 <HAL_TIM_IC_CaptureCallback+0xc0>)
 80014bc:	e9c1 2300 	strd	r2, r3, [r1]
		 current_value = __HAL_TIM_GET_COUNTER(&htim2) ;
 80014c0:	4b06      	ldr	r3, [pc, #24]	; (80014dc <HAL_TIM_IC_CaptureCallback+0xa4>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c6:	4a06      	ldr	r2, [pc, #24]	; (80014e0 <HAL_TIM_IC_CaptureCallback+0xa8>)
 80014c8:	6013      	str	r3, [r2, #0]
		 pulse_count = 0;
 80014ca:	4b07      	ldr	r3, [pc, #28]	; (80014e8 <HAL_TIM_IC_CaptureCallback+0xb0>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000294 	.word	0x20000294
 80014dc:	20000104 	.word	0x20000104
 80014e0:	2000028c 	.word	0x2000028c
 80014e4:	20000290 	.word	0x20000290
 80014e8:	200002a4 	.word	0x200002a4
 80014ec:	40b00000 	.word	0x40b00000
 80014f0:	40700000 	.word	0x40700000
 80014f4:	40490000 	.word	0x40490000
 80014f8:	200001f8 	.word	0x200001f8

080014fc <flash_led_d3>:

/**
 * Function flashed LED D3 at specified interval of 50 ms
 */
void flash_led_d3(){
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - g_time_passed >= 50 && g_LED_D3_ON == 0){
 8001500:	f001 fa18 	bl	8002934 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	4b16      	ldr	r3, [pc, #88]	; (8001560 <flash_led_d3+0x64>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b31      	cmp	r3, #49	; 0x31
 800150e:	d90c      	bls.n	800152a <flash_led_d3+0x2e>
 8001510:	4b14      	ldr	r3, [pc, #80]	; (8001564 <flash_led_d3+0x68>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d108      	bne.n	800152a <flash_led_d3+0x2e>
		g_LED_D3_ON = 1; // set D2 on
 8001518:	4b12      	ldr	r3, [pc, #72]	; (8001564 <flash_led_d3+0x68>)
 800151a:	2201      	movs	r2, #1
 800151c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET) ;
 800151e:	2200      	movs	r2, #0
 8001520:	2120      	movs	r1, #32
 8001522:	4811      	ldr	r0, [pc, #68]	; (8001568 <flash_led_d3+0x6c>)
 8001524:	f002 f968 	bl	80037f8 <HAL_GPIO_WritePin>
		g_time_passed =  HAL_GetTick() ;
		g_LED_D3_ON = 0;  //set D2 off

	}

}
 8001528:	e018      	b.n	800155c <flash_led_d3+0x60>
	else if(HAL_GetTick() - g_time_passed >= 100 && g_LED_D3_ON == 1){
 800152a:	f001 fa03 	bl	8002934 <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <flash_led_d3+0x64>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b63      	cmp	r3, #99	; 0x63
 8001538:	d910      	bls.n	800155c <flash_led_d3+0x60>
 800153a:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <flash_led_d3+0x68>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d10c      	bne.n	800155c <flash_led_d3+0x60>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET) ;
 8001542:	2201      	movs	r2, #1
 8001544:	2120      	movs	r1, #32
 8001546:	4808      	ldr	r0, [pc, #32]	; (8001568 <flash_led_d3+0x6c>)
 8001548:	f002 f956 	bl	80037f8 <HAL_GPIO_WritePin>
		g_time_passed =  HAL_GetTick() ;
 800154c:	f001 f9f2 	bl	8002934 <HAL_GetTick>
 8001550:	4603      	mov	r3, r0
 8001552:	4a03      	ldr	r2, [pc, #12]	; (8001560 <flash_led_d3+0x64>)
 8001554:	6013      	str	r3, [r2, #0]
		g_LED_D3_ON = 0;  //set D2 off
 8001556:	4b03      	ldr	r3, [pc, #12]	; (8001564 <flash_led_d3+0x68>)
 8001558:	2200      	movs	r2, #0
 800155a:	701a      	strb	r2, [r3, #0]
}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20000254 	.word	0x20000254
 8001564:	20000258 	.word	0x20000258
 8001568:	40020400 	.word	0x40020400

0800156c <flash_led_d2>:

/**
 * Function flashed LED D2 at specified interval of 100 ms
 */
void flash_led_d2(){
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - g_time_passed >= 100 && g_LED_D2_ON == 0){
 8001570:	f001 f9e0 	bl	8002934 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	4b16      	ldr	r3, [pc, #88]	; (80015d0 <flash_led_d2+0x64>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b63      	cmp	r3, #99	; 0x63
 800157e:	d90c      	bls.n	800159a <flash_led_d2+0x2e>
 8001580:	4b14      	ldr	r3, [pc, #80]	; (80015d4 <flash_led_d2+0x68>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d108      	bne.n	800159a <flash_led_d2+0x2e>
		g_LED_D2_ON = 1; // set D2 on
 8001588:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <flash_led_d2+0x68>)
 800158a:	2201      	movs	r2, #1
 800158c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET) ;
 800158e:	2200      	movs	r2, #0
 8001590:	2110      	movs	r1, #16
 8001592:	4811      	ldr	r0, [pc, #68]	; (80015d8 <flash_led_d2+0x6c>)
 8001594:	f002 f930 	bl	80037f8 <HAL_GPIO_WritePin>
		g_time_passed =  HAL_GetTick() ;
		g_LED_D2_ON = 0;  //set D2 off

	}

}
 8001598:	e018      	b.n	80015cc <flash_led_d2+0x60>
	else if(HAL_GetTick() - g_time_passed >= 200 && g_LED_D2_ON == 1){
 800159a:	f001 f9cb 	bl	8002934 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <flash_led_d2+0x64>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2bc7      	cmp	r3, #199	; 0xc7
 80015a8:	d910      	bls.n	80015cc <flash_led_d2+0x60>
 80015aa:	4b0a      	ldr	r3, [pc, #40]	; (80015d4 <flash_led_d2+0x68>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d10c      	bne.n	80015cc <flash_led_d2+0x60>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET) ;
 80015b2:	2201      	movs	r2, #1
 80015b4:	2110      	movs	r1, #16
 80015b6:	4808      	ldr	r0, [pc, #32]	; (80015d8 <flash_led_d2+0x6c>)
 80015b8:	f002 f91e 	bl	80037f8 <HAL_GPIO_WritePin>
		g_time_passed =  HAL_GetTick() ;
 80015bc:	f001 f9ba 	bl	8002934 <HAL_GetTick>
 80015c0:	4603      	mov	r3, r0
 80015c2:	4a03      	ldr	r2, [pc, #12]	; (80015d0 <flash_led_d2+0x64>)
 80015c4:	6013      	str	r3, [r2, #0]
		g_LED_D2_ON = 0;  //set D2 off
 80015c6:	4b03      	ldr	r3, [pc, #12]	; (80015d4 <flash_led_d2+0x68>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]
}
 80015cc:	bf00      	nop
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000254 	.word	0x20000254
 80015d4:	2000025b 	.word	0x2000025b
 80015d8:	40020400 	.word	0x40020400

080015dc <store_system_state_in_buffer>:

void store_system_state_in_buffer(char analog_temp[], char dig_temp[],char lux_value[],char system_state[], uint8_t len_of_sys_arr ){
 80015dc:	b480      	push	{r7}
 80015de:	b087      	sub	sp, #28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
 80015e8:	603b      	str	r3, [r7, #0]
	  for(int i = 0; i < len_of_sys_arr ; i++){
 80015ea:	2300      	movs	r3, #0
 80015ec:	617b      	str	r3, [r7, #20]
 80015ee:	e072      	b.n	80016d6 <store_system_state_in_buffer+0xfa>
		  switch(i){
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	2b0f      	cmp	r3, #15
 80015f4:	d86b      	bhi.n	80016ce <store_system_state_in_buffer+0xf2>
 80015f6:	a201      	add	r2, pc, #4	; (adr r2, 80015fc <store_system_state_in_buffer+0x20>)
 80015f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015fc:	0800163d 	.word	0x0800163d
 8001600:	08001645 	.word	0x08001645
 8001604:	0800164d 	.word	0x0800164d
 8001608:	08001657 	.word	0x08001657
 800160c:	08001661 	.word	0x08001661
 8001610:	0800166b 	.word	0x0800166b
 8001614:	08001673 	.word	0x08001673
 8001618:	0800167d 	.word	0x0800167d
 800161c:	08001687 	.word	0x08001687
 8001620:	08001691 	.word	0x08001691
 8001624:	08001699 	.word	0x08001699
 8001628:	080016a3 	.word	0x080016a3
 800162c:	080016ad 	.word	0x080016ad
 8001630:	080016b7 	.word	0x080016b7
 8001634:	080016bf 	.word	0x080016bf
 8001638:	080016c7 	.word	0x080016c7
		  case 0:
			  system_state_transmit[0] = '&' ;
 800163c:	4b2c      	ldr	r3, [pc, #176]	; (80016f0 <store_system_state_in_buffer+0x114>)
 800163e:	2226      	movs	r2, #38	; 0x26
 8001640:	701a      	strb	r2, [r3, #0]
			  break ;
 8001642:	e045      	b.n	80016d0 <store_system_state_in_buffer+0xf4>
		  case 1:
			  system_state_transmit[1] = '_' ;
 8001644:	4b2a      	ldr	r3, [pc, #168]	; (80016f0 <store_system_state_in_buffer+0x114>)
 8001646:	225f      	movs	r2, #95	; 0x5f
 8001648:	705a      	strb	r2, [r3, #1]

			  break;
 800164a:	e041      	b.n	80016d0 <store_system_state_in_buffer+0xf4>
		  case 2:
			  system_state_transmit[2] = analog_temp[0] ;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	781a      	ldrb	r2, [r3, #0]
 8001650:	4b27      	ldr	r3, [pc, #156]	; (80016f0 <store_system_state_in_buffer+0x114>)
 8001652:	709a      	strb	r2, [r3, #2]

			  break;
 8001654:	e03c      	b.n	80016d0 <store_system_state_in_buffer+0xf4>
		  case 3:
			  system_state_transmit[3] = analog_temp[1] ;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	785a      	ldrb	r2, [r3, #1]
 800165a:	4b25      	ldr	r3, [pc, #148]	; (80016f0 <store_system_state_in_buffer+0x114>)
 800165c:	70da      	strb	r2, [r3, #3]

			  break;
 800165e:	e037      	b.n	80016d0 <store_system_state_in_buffer+0xf4>
		  case 4:
			  system_state_transmit[4] = analog_temp[2] ;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	789a      	ldrb	r2, [r3, #2]
 8001664:	4b22      	ldr	r3, [pc, #136]	; (80016f0 <store_system_state_in_buffer+0x114>)
 8001666:	711a      	strb	r2, [r3, #4]

			  break;
 8001668:	e032      	b.n	80016d0 <store_system_state_in_buffer+0xf4>
		  case 5:
			  system_state_transmit[5] = '_' ;
 800166a:	4b21      	ldr	r3, [pc, #132]	; (80016f0 <store_system_state_in_buffer+0x114>)
 800166c:	225f      	movs	r2, #95	; 0x5f
 800166e:	715a      	strb	r2, [r3, #5]

			  break;
 8001670:	e02e      	b.n	80016d0 <store_system_state_in_buffer+0xf4>
		  case 6:
			  system_state_transmit[6] = dig_temp[0] ;
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	781a      	ldrb	r2, [r3, #0]
 8001676:	4b1e      	ldr	r3, [pc, #120]	; (80016f0 <store_system_state_in_buffer+0x114>)
 8001678:	719a      	strb	r2, [r3, #6]

			  break;
 800167a:	e029      	b.n	80016d0 <store_system_state_in_buffer+0xf4>
		  case 7:
			  system_state_transmit[7] = dig_temp[1] ;
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	785a      	ldrb	r2, [r3, #1]
 8001680:	4b1b      	ldr	r3, [pc, #108]	; (80016f0 <store_system_state_in_buffer+0x114>)
 8001682:	71da      	strb	r2, [r3, #7]

			  break;
 8001684:	e024      	b.n	80016d0 <store_system_state_in_buffer+0xf4>
		  case 8:
			  system_state_transmit[8] = dig_temp[2] ;
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	789a      	ldrb	r2, [r3, #2]
 800168a:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <store_system_state_in_buffer+0x114>)
 800168c:	721a      	strb	r2, [r3, #8]

			  break;
 800168e:	e01f      	b.n	80016d0 <store_system_state_in_buffer+0xf4>
		  case 9:
			  system_state_transmit[9] = '_' ;
 8001690:	4b17      	ldr	r3, [pc, #92]	; (80016f0 <store_system_state_in_buffer+0x114>)
 8001692:	225f      	movs	r2, #95	; 0x5f
 8001694:	725a      	strb	r2, [r3, #9]

			  break;
 8001696:	e01b      	b.n	80016d0 <store_system_state_in_buffer+0xf4>
		  case 10:
			  system_state_transmit[10] = lux_value[0] ;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	781a      	ldrb	r2, [r3, #0]
 800169c:	4b14      	ldr	r3, [pc, #80]	; (80016f0 <store_system_state_in_buffer+0x114>)
 800169e:	729a      	strb	r2, [r3, #10]

			  break;
 80016a0:	e016      	b.n	80016d0 <store_system_state_in_buffer+0xf4>
		  case 11:
			  system_state_transmit[11] = lux_value[1] ;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	785a      	ldrb	r2, [r3, #1]
 80016a6:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <store_system_state_in_buffer+0x114>)
 80016a8:	72da      	strb	r2, [r3, #11]

			  break;
 80016aa:	e011      	b.n	80016d0 <store_system_state_in_buffer+0xf4>
		  case 12:
			  system_state_transmit[12] = lux_value[2] ;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	789a      	ldrb	r2, [r3, #2]
 80016b0:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <store_system_state_in_buffer+0x114>)
 80016b2:	731a      	strb	r2, [r3, #12]

			  break;
 80016b4:	e00c      	b.n	80016d0 <store_system_state_in_buffer+0xf4>
		  case 13:
			  system_state_transmit[13] = '_' ;
 80016b6:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <store_system_state_in_buffer+0x114>)
 80016b8:	225f      	movs	r2, #95	; 0x5f
 80016ba:	735a      	strb	r2, [r3, #13]

			  break;
 80016bc:	e008      	b.n	80016d0 <store_system_state_in_buffer+0xf4>
		  case 14:
			  system_state_transmit[14] = '*' ;
 80016be:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <store_system_state_in_buffer+0x114>)
 80016c0:	222a      	movs	r2, #42	; 0x2a
 80016c2:	739a      	strb	r2, [r3, #14]

			  break;
 80016c4:	e004      	b.n	80016d0 <store_system_state_in_buffer+0xf4>
		  case 15:
			  system_state_transmit[15] = '\n' ;
 80016c6:	4b0a      	ldr	r3, [pc, #40]	; (80016f0 <store_system_state_in_buffer+0x114>)
 80016c8:	220a      	movs	r2, #10
 80016ca:	73da      	strb	r2, [r3, #15]

			  break;
 80016cc:	e000      	b.n	80016d0 <store_system_state_in_buffer+0xf4>
		  default:
			  break;
 80016ce:	bf00      	nop
	  for(int i = 0; i < len_of_sys_arr ; i++){
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	3301      	adds	r3, #1
 80016d4:	617b      	str	r3, [r7, #20]
 80016d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016da:	697a      	ldr	r2, [r7, #20]
 80016dc:	429a      	cmp	r2, r3
 80016de:	db87      	blt.n	80015f0 <store_system_state_in_buffer+0x14>
		  }
	  }
}
 80016e0:	bf00      	nop
 80016e2:	bf00      	nop
 80016e4:	371c      	adds	r7, #28
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	20000260 	.word	0x20000260

080016f4 <ADC_Select_CH0>:

//digital sensore
void ADC_Select_CH0(void){
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80016fa:	463b      	mov	r3, r7
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_0;
 8001706:	2300      	movs	r3, #0
 8001708:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 800170a:	2301      	movs	r3, #1
 800170c:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800170e:	2300      	movs	r3, #0
 8001710:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001712:	463b      	mov	r3, r7
 8001714:	4619      	mov	r1, r3
 8001716:	4806      	ldr	r0, [pc, #24]	; (8001730 <ADC_Select_CH0+0x3c>)
 8001718:	f001 fb00 	bl	8002d1c <HAL_ADC_ConfigChannel>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <ADC_Select_CH0+0x32>
	{
		Error_Handler();
 8001722:	f000 fd15 	bl	8002150 <Error_Handler>
	}


}
 8001726:	bf00      	nop
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	200000bc 	.word	0x200000bc

08001734 <ADC_Select_CH14>:
// photodiode
void ADC_Select_CH14(void){
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800173a:	463b      	mov	r3, r7
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	*/
	sConfig.Channel = ADC_CHANNEL_14;
 8001746:	230e      	movs	r3, #14
 8001748:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 800174a:	2301      	movs	r3, #1
 800174c:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800174e:	463b      	mov	r3, r7
 8001750:	4619      	mov	r1, r3
 8001752:	4806      	ldr	r0, [pc, #24]	; (800176c <ADC_Select_CH14+0x38>)
 8001754:	f001 fae2 	bl	8002d1c <HAL_ADC_ConfigChannel>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <ADC_Select_CH14+0x2e>
	{
		Error_Handler();
 800175e:	f000 fcf7 	bl	8002150 <Error_Handler>
	}


}
 8001762:	bf00      	nop
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	200000bc 	.word	0x200000bc

08001770 <ADC_Select_CH9>:

//PV- Panel- ADC 1
void ADC_Select_CH9(void){
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001776:	463b      	mov	r3, r7
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	*/
	sConfig.Channel = ADC_CHANNEL_9;
 8001782:	2309      	movs	r3, #9
 8001784:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001786:	2301      	movs	r3, #1
 8001788:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800178a:	463b      	mov	r3, r7
 800178c:	4619      	mov	r1, r3
 800178e:	4806      	ldr	r0, [pc, #24]	; (80017a8 <ADC_Select_CH9+0x38>)
 8001790:	f001 fac4 	bl	8002d1c <HAL_ADC_ConfigChannel>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <ADC_Select_CH9+0x2e>
	{
		Error_Handler();
 800179a:	f000 fcd9 	bl	8002150 <Error_Handler>
	}
}
 800179e:	bf00      	nop
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	200000bc 	.word	0x200000bc

080017ac <ADC_Select_CH15>:

//PV - Panel - ADC2
void ADC_Select_CH15(void){
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80017b2:	463b      	mov	r3, r7
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	*/
	sConfig.Channel = ADC_CHANNEL_15;
 80017be:	230f      	movs	r3, #15
 80017c0:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80017c2:	2301      	movs	r3, #1
 80017c4:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017c6:	463b      	mov	r3, r7
 80017c8:	4619      	mov	r1, r3
 80017ca:	4806      	ldr	r0, [pc, #24]	; (80017e4 <ADC_Select_CH15+0x38>)
 80017cc:	f001 faa6 	bl	8002d1c <HAL_ADC_ConfigChannel>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <ADC_Select_CH15+0x2e>
	{
		Error_Handler();
 80017d6:	f000 fcbb 	bl	8002150 <Error_Handler>
	}
}
 80017da:	bf00      	nop
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	200000bc 	.word	0x200000bc

080017e8 <get_adc_value_conver_to_lux>:

/**
 * Function starts ADC CH14, connected to ouput of light diode
 * get the ADC value of diode
 */
uint16_t get_adc_value_conver_to_lux(){
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
	ADC_Select_CH14() ;
 80017ec:	f7ff ffa2 	bl	8001734 <ADC_Select_CH14>
	HAL_ADC_Start(&hadc1);
 80017f0:	4817      	ldr	r0, [pc, #92]	; (8001850 <get_adc_value_conver_to_lux+0x68>)
 80017f2:	f001 f913 	bl	8002a1c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) ;
 80017f6:	f04f 31ff 	mov.w	r1, #4294967295
 80017fa:	4815      	ldr	r0, [pc, #84]	; (8001850 <get_adc_value_conver_to_lux+0x68>)
 80017fc:	f001 f9f5 	bl	8002bea <HAL_ADC_PollForConversion>
	g_raw_lux_value = HAL_ADC_GetValue(&hadc1) ;
 8001800:	4813      	ldr	r0, [pc, #76]	; (8001850 <get_adc_value_conver_to_lux+0x68>)
 8001802:	f001 fa7d 	bl	8002d00 <HAL_ADC_GetValue>
 8001806:	4603      	mov	r3, r0
 8001808:	b29a      	uxth	r2, r3
 800180a:	4b12      	ldr	r3, [pc, #72]	; (8001854 <get_adc_value_conver_to_lux+0x6c>)
 800180c:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 800180e:	4810      	ldr	r0, [pc, #64]	; (8001850 <get_adc_value_conver_to_lux+0x68>)
 8001810:	f001 f9b8 	bl	8002b84 <HAL_ADC_Stop>

	//scale adc value [0,99999] - For 30000 lux
	g_raw_lux_value = g_raw_lux_value*(999.0/4095.0) ;
 8001814:	4b0f      	ldr	r3, [pc, #60]	; (8001854 <get_adc_value_conver_to_lux+0x6c>)
 8001816:	881b      	ldrh	r3, [r3, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	f7fe fe8b 	bl	8000534 <__aeabi_i2d>
 800181e:	a30a      	add	r3, pc, #40	; (adr r3, 8001848 <get_adc_value_conver_to_lux+0x60>)
 8001820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001824:	f7fe fef0 	bl	8000608 <__aeabi_dmul>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	4610      	mov	r0, r2
 800182e:	4619      	mov	r1, r3
 8001830:	f7ff f8fc 	bl	8000a2c <__aeabi_d2uiz>
 8001834:	4603      	mov	r3, r0
 8001836:	b29a      	uxth	r2, r3
 8001838:	4b06      	ldr	r3, [pc, #24]	; (8001854 <get_adc_value_conver_to_lux+0x6c>)
 800183a:	801a      	strh	r2, [r3, #0]

	return g_raw_lux_value ;
 800183c:	4b05      	ldr	r3, [pc, #20]	; (8001854 <get_adc_value_conver_to_lux+0x6c>)
 800183e:	881b      	ldrh	r3, [r3, #0]

}
 8001840:	4618      	mov	r0, r3
 8001842:	bd80      	pop	{r7, pc}
 8001844:	f3af 8000 	nop.w
 8001848:	9f39f39f 	.word	0x9f39f39f
 800184c:	3fcf39f3 	.word	0x3fcf39f3
 8001850:	200000bc 	.word	0x200000bc
 8001854:	20000200 	.word	0x20000200

08001858 <en_measurements_and_responses>:
 * This funtion performs the measurement for UR3: Environement measure.
 * It measures the ambient temperature, solar panel temperature and light intensity,
 * the board is exposed to.
 * Measurements and responses, transmitted to UART and LCD
 */
void en_measurements_and_responses(){
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af02      	add	r7, sp, #8

	if(g_EN_measure == 1){
 800185e:	4b4d      	ldr	r3, [pc, #308]	; (8001994 <en_measurements_and_responses+0x13c>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d143      	bne.n	80018ee <en_measurements_and_responses+0x96>

	  // ignore bottom button press and SP command while measuring
	  if(g_bottom_button_pressed ==1 || g_SP_config_command_rcvd ==1){
 8001866:	4b4c      	ldr	r3, [pc, #304]	; (8001998 <en_measurements_and_responses+0x140>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d003      	beq.n	8001876 <en_measurements_and_responses+0x1e>
 800186e:	4b4b      	ldr	r3, [pc, #300]	; (800199c <en_measurements_and_responses+0x144>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d105      	bne.n	8001882 <en_measurements_and_responses+0x2a>
		  g_bottom_button_pressed = 0 ;
 8001876:	4b48      	ldr	r3, [pc, #288]	; (8001998 <en_measurements_and_responses+0x140>)
 8001878:	2200      	movs	r2, #0
 800187a:	701a      	strb	r2, [r3, #0]
		  g_SP_config_command_rcvd = 0 ;
 800187c:	4b47      	ldr	r3, [pc, #284]	; (800199c <en_measurements_and_responses+0x144>)
 800187e:	2200      	movs	r2, #0
 8001880:	701a      	strb	r2, [r3, #0]
	  }
	  //ANALOGUE SENSOR CALIBRATION
	  g_temp_in_deg = get_adc_value_and_celsius_temperature() ;
 8001882:	f7ff fbe5 	bl	8001050 <get_adc_value_and_celsius_temperature>
 8001886:	4603      	mov	r3, r0
 8001888:	461a      	mov	r2, r3
 800188a:	4b45      	ldr	r3, [pc, #276]	; (80019a0 <en_measurements_and_responses+0x148>)
 800188c:	801a      	strh	r2, [r3, #0]
	  store_temp_in_string(g_temp_in_deg, g_temperature, LEN);
 800188e:	4b44      	ldr	r3, [pc, #272]	; (80019a0 <en_measurements_and_responses+0x148>)
 8001890:	881b      	ldrh	r3, [r3, #0]
 8001892:	2203      	movs	r2, #3
 8001894:	4943      	ldr	r1, [pc, #268]	; (80019a4 <en_measurements_and_responses+0x14c>)
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff fc34 	bl	8001104 <store_temp_in_string>

	  //PHOTODIOCE ouput
	  g_get_lxd_value = get_adc_value_conver_to_lux();
 800189c:	f7ff ffa4 	bl	80017e8 <get_adc_value_conver_to_lux>
 80018a0:	4603      	mov	r3, r0
 80018a2:	461a      	mov	r2, r3
 80018a4:	4b40      	ldr	r3, [pc, #256]	; (80019a8 <en_measurements_and_responses+0x150>)
 80018a6:	801a      	strh	r2, [r3, #0]
	  store_temp_in_string(g_get_lxd_value, g_lxd_value, LEN);
 80018a8:	4b3f      	ldr	r3, [pc, #252]	; (80019a8 <en_measurements_and_responses+0x150>)
 80018aa:	881b      	ldrh	r3, [r3, #0]
 80018ac:	2203      	movs	r2, #3
 80018ae:	493f      	ldr	r1, [pc, #252]	; (80019ac <en_measurements_and_responses+0x154>)
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fc27 	bl	8001104 <store_temp_in_string>

	  // DIGITAL SENSOR CALIBRATION
	  g_lmt01_sens_temp =  (uint16_t)g_TO1_temp ;
 80018b6:	4b3e      	ldr	r3, [pc, #248]	; (80019b0 <en_measurements_and_responses+0x158>)
 80018b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018bc:	4610      	mov	r0, r2
 80018be:	4619      	mov	r1, r3
 80018c0:	f7ff f8b4 	bl	8000a2c <__aeabi_d2uiz>
 80018c4:	4603      	mov	r3, r0
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	4b3a      	ldr	r3, [pc, #232]	; (80019b4 <en_measurements_and_responses+0x15c>)
 80018ca:	801a      	strh	r2, [r3, #0]
	  store_temp_in_string(g_lmt01_sens_temp, dig_sens_temp, LEN) ;
 80018cc:	4b39      	ldr	r3, [pc, #228]	; (80019b4 <en_measurements_and_responses+0x15c>)
 80018ce:	881b      	ldrh	r3, [r3, #0]
 80018d0:	2203      	movs	r2, #3
 80018d2:	4939      	ldr	r1, [pc, #228]	; (80019b8 <en_measurements_and_responses+0x160>)
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff fc15 	bl	8001104 <store_temp_in_string>

	  //re-prime system state update
	  if(g_transmit_system_state ==0){
 80018da:	4b38      	ldr	r3, [pc, #224]	; (80019bc <en_measurements_and_responses+0x164>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d102      	bne.n	80018e8 <en_measurements_and_responses+0x90>
		  g_transmit_system_state =1; //send the system state again
 80018e2:	4b36      	ldr	r3, [pc, #216]	; (80019bc <en_measurements_and_responses+0x164>)
 80018e4:	2201      	movs	r2, #1
 80018e6:	701a      	strb	r2, [r3, #0]

	  }

	  //Flash D3 LED -> put in function
	  flash_led_d3();
 80018e8:	f7ff fe08 	bl	80014fc <flash_led_d3>
		  snprintf(g_lcd_lux_val, sizeof(g_lcd_lux_val),"LUX:%05d",g_get_lxd_value);
		  Lcd_string(&lcd,g_lcd_lux_val);
	  }

	}
}
 80018ec:	e04f      	b.n	800198e <en_measurements_and_responses+0x136>
	else if(g_EN_measure == 2){
 80018ee:	4b29      	ldr	r3, [pc, #164]	; (8001994 <en_measurements_and_responses+0x13c>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d14b      	bne.n	800198e <en_measurements_and_responses+0x136>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET) ;
 80018f6:	2201      	movs	r2, #1
 80018f8:	2120      	movs	r1, #32
 80018fa:	4831      	ldr	r0, [pc, #196]	; (80019c0 <en_measurements_and_responses+0x168>)
 80018fc:	f001 ff7c 	bl	80037f8 <HAL_GPIO_WritePin>
	  store_system_state_in_buffer(g_temperature, dig_sens_temp,g_lxd_value,  system_state_transmit, 17) ;
 8001900:	2311      	movs	r3, #17
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	4b2f      	ldr	r3, [pc, #188]	; (80019c4 <en_measurements_and_responses+0x16c>)
 8001906:	4a29      	ldr	r2, [pc, #164]	; (80019ac <en_measurements_and_responses+0x154>)
 8001908:	492b      	ldr	r1, [pc, #172]	; (80019b8 <en_measurements_and_responses+0x160>)
 800190a:	4826      	ldr	r0, [pc, #152]	; (80019a4 <en_measurements_and_responses+0x14c>)
 800190c:	f7ff fe66 	bl	80015dc <store_system_state_in_buffer>
	  if(g_transmit_system_state  == 1){
 8001910:	4b2a      	ldr	r3, [pc, #168]	; (80019bc <en_measurements_and_responses+0x164>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d13a      	bne.n	800198e <en_measurements_and_responses+0x136>
		  g_transmit_system_state = 0;
 8001918:	4b28      	ldr	r3, [pc, #160]	; (80019bc <en_measurements_and_responses+0x164>)
 800191a:	2200      	movs	r2, #0
 800191c:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit_IT(&huart2, (uint8_t*)system_state_transmit, 16);
 800191e:	2210      	movs	r2, #16
 8001920:	4928      	ldr	r1, [pc, #160]	; (80019c4 <en_measurements_and_responses+0x16c>)
 8001922:	4829      	ldr	r0, [pc, #164]	; (80019c8 <en_measurements_and_responses+0x170>)
 8001924:	f003 fbc1 	bl	80050aa <HAL_UART_Transmit_IT>
		  Lcd_clear(&lcd);
 8001928:	4828      	ldr	r0, [pc, #160]	; (80019cc <en_measurements_and_responses+0x174>)
 800192a:	f7ff faaf 	bl	8000e8c <Lcd_clear>
		  Lcd_cursor(&lcd, 0,0);
 800192e:	2200      	movs	r2, #0
 8001930:	2100      	movs	r1, #0
 8001932:	4826      	ldr	r0, [pc, #152]	; (80019cc <en_measurements_and_responses+0x174>)
 8001934:	f7ff fa90 	bl	8000e58 <Lcd_cursor>
		  snprintf(g_lcd_amb_val, sizeof(g_lcd_amb_val),"AMB:%03dC",g_temp_in_deg);
 8001938:	4b19      	ldr	r3, [pc, #100]	; (80019a0 <en_measurements_and_responses+0x148>)
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	4a24      	ldr	r2, [pc, #144]	; (80019d0 <en_measurements_and_responses+0x178>)
 800193e:	2109      	movs	r1, #9
 8001940:	4824      	ldr	r0, [pc, #144]	; (80019d4 <en_measurements_and_responses+0x17c>)
 8001942:	f004 fb53 	bl	8005fec <sniprintf>
		  Lcd_string(&lcd, g_lcd_amb_val);
 8001946:	4923      	ldr	r1, [pc, #140]	; (80019d4 <en_measurements_and_responses+0x17c>)
 8001948:	4820      	ldr	r0, [pc, #128]	; (80019cc <en_measurements_and_responses+0x174>)
 800194a:	f7ff fa65 	bl	8000e18 <Lcd_string>
		  Lcd_cursor(&lcd, 0,9);
 800194e:	2209      	movs	r2, #9
 8001950:	2100      	movs	r1, #0
 8001952:	481e      	ldr	r0, [pc, #120]	; (80019cc <en_measurements_and_responses+0x174>)
 8001954:	f7ff fa80 	bl	8000e58 <Lcd_cursor>
		  snprintf(g_lcd_sb_val, sizeof(g_lcd_sb_val),"SP:%03dC",g_lmt01_sens_temp);
 8001958:	4b16      	ldr	r3, [pc, #88]	; (80019b4 <en_measurements_and_responses+0x15c>)
 800195a:	881b      	ldrh	r3, [r3, #0]
 800195c:	4a1e      	ldr	r2, [pc, #120]	; (80019d8 <en_measurements_and_responses+0x180>)
 800195e:	2108      	movs	r1, #8
 8001960:	481e      	ldr	r0, [pc, #120]	; (80019dc <en_measurements_and_responses+0x184>)
 8001962:	f004 fb43 	bl	8005fec <sniprintf>
		  Lcd_string(&lcd, g_lcd_sb_val);
 8001966:	491d      	ldr	r1, [pc, #116]	; (80019dc <en_measurements_and_responses+0x184>)
 8001968:	4818      	ldr	r0, [pc, #96]	; (80019cc <en_measurements_and_responses+0x174>)
 800196a:	f7ff fa55 	bl	8000e18 <Lcd_string>
		  Lcd_cursor(&lcd, 1,0);
 800196e:	2200      	movs	r2, #0
 8001970:	2101      	movs	r1, #1
 8001972:	4816      	ldr	r0, [pc, #88]	; (80019cc <en_measurements_and_responses+0x174>)
 8001974:	f7ff fa70 	bl	8000e58 <Lcd_cursor>
		  snprintf(g_lcd_lux_val, sizeof(g_lcd_lux_val),"LUX:%05d",g_get_lxd_value);
 8001978:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <en_measurements_and_responses+0x150>)
 800197a:	881b      	ldrh	r3, [r3, #0]
 800197c:	4a18      	ldr	r2, [pc, #96]	; (80019e0 <en_measurements_and_responses+0x188>)
 800197e:	210a      	movs	r1, #10
 8001980:	4818      	ldr	r0, [pc, #96]	; (80019e4 <en_measurements_and_responses+0x18c>)
 8001982:	f004 fb33 	bl	8005fec <sniprintf>
		  Lcd_string(&lcd,g_lcd_lux_val);
 8001986:	4917      	ldr	r1, [pc, #92]	; (80019e4 <en_measurements_and_responses+0x18c>)
 8001988:	4810      	ldr	r0, [pc, #64]	; (80019cc <en_measurements_and_responses+0x174>)
 800198a:	f7ff fa45 	bl	8000e18 <Lcd_string>
}
 800198e:	bf00      	nop
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20000253 	.word	0x20000253
 8001998:	2000029e 	.word	0x2000029e
 800199c:	2000025c 	.word	0x2000025c
 80019a0:	200001f0 	.word	0x200001f0
 80019a4:	200001f4 	.word	0x200001f4
 80019a8:	20000202 	.word	0x20000202
 80019ac:	20000204 	.word	0x20000204
 80019b0:	200001f8 	.word	0x200001f8
 80019b4:	20000296 	.word	0x20000296
 80019b8:	20000298 	.word	0x20000298
 80019bc:	20000011 	.word	0x20000011
 80019c0:	40020400 	.word	0x40020400
 80019c4:	20000260 	.word	0x20000260
 80019c8:	20000194 	.word	0x20000194
 80019cc:	20000274 	.word	0x20000274
 80019d0:	08006934 	.word	0x08006934
 80019d4:	20000220 	.word	0x20000220
 80019d8:	08006940 	.word	0x08006940
 80019dc:	2000022c 	.word	0x2000022c
 80019e0:	0800694c 	.word	0x0800694c
 80019e4:	20000234 	.word	0x20000234

080019e8 <get_pv_panel_adc1_input>:
 * This function retrieves the ADC panel voltage,
 * across adc input 1
 * Gets the input voltage to the adc
 * Scales the voltage to the appropriate PV voltage
 */
uint16_t get_pv_panel_adc1_input(){
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
	//READ ADC VALUE
	ADC_Select_CH15() ;
 80019ec:	f7ff fede 	bl	80017ac <ADC_Select_CH15>
	HAL_ADC_Start(&hadc1);
 80019f0:	4829      	ldr	r0, [pc, #164]	; (8001a98 <get_pv_panel_adc1_input+0xb0>)
 80019f2:	f001 f813 	bl	8002a1c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) ;
 80019f6:	f04f 31ff 	mov.w	r1, #4294967295
 80019fa:	4827      	ldr	r0, [pc, #156]	; (8001a98 <get_pv_panel_adc1_input+0xb0>)
 80019fc:	f001 f8f5 	bl	8002bea <HAL_ADC_PollForConversion>
	g_v1_pv = HAL_ADC_GetValue(&hadc1) ;
 8001a00:	4825      	ldr	r0, [pc, #148]	; (8001a98 <get_pv_panel_adc1_input+0xb0>)
 8001a02:	f001 f97d 	bl	8002d00 <HAL_ADC_GetValue>
 8001a06:	4603      	mov	r3, r0
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7fe fd83 	bl	8000514 <__aeabi_ui2d>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	4922      	ldr	r1, [pc, #136]	; (8001a9c <get_pv_panel_adc1_input+0xb4>)
 8001a14:	e9c1 2300 	strd	r2, r3, [r1]
	HAL_ADC_Stop(&hadc1);
 8001a18:	481f      	ldr	r0, [pc, #124]	; (8001a98 <get_pv_panel_adc1_input+0xb0>)
 8001a1a:	f001 f8b3 	bl	8002b84 <HAL_ADC_Stop>

	//get voltage (mv) - from ADC formula
	g_v1_pv = g_v1_pv*(3.3/4095.0) ;
 8001a1e:	4b1f      	ldr	r3, [pc, #124]	; (8001a9c <get_pv_panel_adc1_input+0xb4>)
 8001a20:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a24:	a318      	add	r3, pc, #96	; (adr r3, 8001a88 <get_pv_panel_adc1_input+0xa0>)
 8001a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2a:	f7fe fded 	bl	8000608 <__aeabi_dmul>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	460b      	mov	r3, r1
 8001a32:	491a      	ldr	r1, [pc, #104]	; (8001a9c <get_pv_panel_adc1_input+0xb4>)
 8001a34:	e9c1 2300 	strd	r2, r3, [r1]

	//scale voltage up to PV panel voltage (V)
	g_v1_pv = g_v1_pv*(99000.0/39000.0);
 8001a38:	4b18      	ldr	r3, [pc, #96]	; (8001a9c <get_pv_panel_adc1_input+0xb4>)
 8001a3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a3e:	a314      	add	r3, pc, #80	; (adr r3, 8001a90 <get_pv_panel_adc1_input+0xa8>)
 8001a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a44:	f7fe fde0 	bl	8000608 <__aeabi_dmul>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4913      	ldr	r1, [pc, #76]	; (8001a9c <get_pv_panel_adc1_input+0xb4>)
 8001a4e:	e9c1 2300 	strd	r2, r3, [r1]

	//multiply by 1000 to get voltage to mv
	g_v1_pv = g_v1_pv*1000;
 8001a52:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <get_pv_panel_adc1_input+0xb4>)
 8001a54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a58:	f04f 0200 	mov.w	r2, #0
 8001a5c:	4b10      	ldr	r3, [pc, #64]	; (8001aa0 <get_pv_panel_adc1_input+0xb8>)
 8001a5e:	f7fe fdd3 	bl	8000608 <__aeabi_dmul>
 8001a62:	4602      	mov	r2, r0
 8001a64:	460b      	mov	r3, r1
 8001a66:	490d      	ldr	r1, [pc, #52]	; (8001a9c <get_pv_panel_adc1_input+0xb4>)
 8001a68:	e9c1 2300 	strd	r2, r3, [r1]

	return g_v1_pv ;
 8001a6c:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <get_pv_panel_adc1_input+0xb4>)
 8001a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a72:	4610      	mov	r0, r2
 8001a74:	4619      	mov	r1, r3
 8001a76:	f7fe ffd9 	bl	8000a2c <__aeabi_d2uiz>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	b29b      	uxth	r3, r3
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	f3af 8000 	nop.w
 8001a88:	e734d9b4 	.word	0xe734d9b4
 8001a8c:	3f4a680c 	.word	0x3f4a680c
 8001a90:	ec4ec4ec 	.word	0xec4ec4ec
 8001a94:	40044ec4 	.word	0x40044ec4
 8001a98:	200000bc 	.word	0x200000bc
 8001a9c:	20000208 	.word	0x20000208
 8001aa0:	408f4000 	.word	0x408f4000
 8001aa4:	00000000 	.word	0x00000000

08001aa8 <get_pv_panel_adc2_input>:
 * This function returns the adc panel voltage, across adc input
 * 2
 * Gets the input voltage to the adc
 * Scales the voltage to the appropriate PV voltage
 */
uint16_t get_pv_panel_adc2_input(){
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
	//read adc value
	ADC_Select_CH9() ;
 8001aac:	f7ff fe60 	bl	8001770 <ADC_Select_CH9>
	HAL_ADC_Start(&hadc1);
 8001ab0:	4829      	ldr	r0, [pc, #164]	; (8001b58 <get_pv_panel_adc2_input+0xb0>)
 8001ab2:	f000 ffb3 	bl	8002a1c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) ;
 8001ab6:	f04f 31ff 	mov.w	r1, #4294967295
 8001aba:	4827      	ldr	r0, [pc, #156]	; (8001b58 <get_pv_panel_adc2_input+0xb0>)
 8001abc:	f001 f895 	bl	8002bea <HAL_ADC_PollForConversion>
	g_v2_pv = HAL_ADC_GetValue(&hadc1) ;
 8001ac0:	4825      	ldr	r0, [pc, #148]	; (8001b58 <get_pv_panel_adc2_input+0xb0>)
 8001ac2:	f001 f91d 	bl	8002d00 <HAL_ADC_GetValue>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7fe fd23 	bl	8000514 <__aeabi_ui2d>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	4922      	ldr	r1, [pc, #136]	; (8001b5c <get_pv_panel_adc2_input+0xb4>)
 8001ad4:	e9c1 2300 	strd	r2, r3, [r1]
	HAL_ADC_Stop(&hadc1);
 8001ad8:	481f      	ldr	r0, [pc, #124]	; (8001b58 <get_pv_panel_adc2_input+0xb0>)
 8001ada:	f001 f853 	bl	8002b84 <HAL_ADC_Stop>

	//get voltage (mv) -from adc formula
	g_v2_pv = g_v2_pv*(3.3/4095.0) ;
 8001ade:	4b1f      	ldr	r3, [pc, #124]	; (8001b5c <get_pv_panel_adc2_input+0xb4>)
 8001ae0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ae4:	a318      	add	r3, pc, #96	; (adr r3, 8001b48 <get_pv_panel_adc2_input+0xa0>)
 8001ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aea:	f7fe fd8d 	bl	8000608 <__aeabi_dmul>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	491a      	ldr	r1, [pc, #104]	; (8001b5c <get_pv_panel_adc2_input+0xb4>)
 8001af4:	e9c1 2300 	strd	r2, r3, [r1]

	//scale voltage up to PV panel voltage
	g_v2_pv = g_v2_pv*(99000.0/39000.0);
 8001af8:	4b18      	ldr	r3, [pc, #96]	; (8001b5c <get_pv_panel_adc2_input+0xb4>)
 8001afa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001afe:	a314      	add	r3, pc, #80	; (adr r3, 8001b50 <get_pv_panel_adc2_input+0xa8>)
 8001b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b04:	f7fe fd80 	bl	8000608 <__aeabi_dmul>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4913      	ldr	r1, [pc, #76]	; (8001b5c <get_pv_panel_adc2_input+0xb4>)
 8001b0e:	e9c1 2300 	strd	r2, r3, [r1]

	//multiply by 1000 to get voltage to mv
	g_v2_pv = g_v2_pv*1000;
 8001b12:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <get_pv_panel_adc2_input+0xb4>)
 8001b14:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b18:	f04f 0200 	mov.w	r2, #0
 8001b1c:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <get_pv_panel_adc2_input+0xb8>)
 8001b1e:	f7fe fd73 	bl	8000608 <__aeabi_dmul>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	490d      	ldr	r1, [pc, #52]	; (8001b5c <get_pv_panel_adc2_input+0xb4>)
 8001b28:	e9c1 2300 	strd	r2, r3, [r1]

	return g_v2_pv ;
 8001b2c:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <get_pv_panel_adc2_input+0xb4>)
 8001b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b32:	4610      	mov	r0, r2
 8001b34:	4619      	mov	r1, r3
 8001b36:	f7fe ff79 	bl	8000a2c <__aeabi_d2uiz>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	b29b      	uxth	r3, r3

}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	f3af 8000 	nop.w
 8001b48:	e734d9b4 	.word	0xe734d9b4
 8001b4c:	3f4a680c 	.word	0x3f4a680c
 8001b50:	ec4ec4ec 	.word	0xec4ec4ec
 8001b54:	40044ec4 	.word	0x40044ec4
 8001b58:	200000bc 	.word	0x200000bc
 8001b5c:	20000210 	.word	0x20000210
 8001b60:	408f4000 	.word	0x408f4000

08001b64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b64:	b5b0      	push	{r4, r5, r7, lr}
 8001b66:	b08a      	sub	sp, #40	; 0x28
 8001b68:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b6a:	f000 fe7d 	bl	8002868 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b6e:	f000 f8a9 	bl	8001cc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b72:	f000 fa35 	bl	8001fe0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001b76:	f000 fa07 	bl	8001f88 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001b7a:	f000 f90d 	bl	8001d98 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001b7e:	f000 f945 	bl	8001e0c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001b82:	f000 f9b3 	bl	8001eec <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(150);
 8001b86:	2096      	movs	r0, #150	; 0x96
 8001b88:	f000 fee0 	bl	800294c <HAL_Delay>
  HAL_UART_Transmit_IT(&huart2, (uint8_t*)studentNum, 13) ;
 8001b8c:	220d      	movs	r2, #13
 8001b8e:	493c      	ldr	r1, [pc, #240]	; (8001c80 <main+0x11c>)
 8001b90:	483c      	ldr	r0, [pc, #240]	; (8001c84 <main+0x120>)
 8001b92:	f003 fa8a 	bl	80050aa <HAL_UART_Transmit_IT>

  HAL_UART_Receive_IT(&huart2, (uint8_t*)char_rcvd, 1) ;
 8001b96:	2201      	movs	r2, #1
 8001b98:	493b      	ldr	r1, [pc, #236]	; (8001c88 <main+0x124>)
 8001b9a:	483a      	ldr	r0, [pc, #232]	; (8001c84 <main+0x120>)
 8001b9c:	f003 faca 	bl	8005134 <HAL_UART_Receive_IT>

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1)  ; // input to trigger interrupt - LMT01 sensor
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	483a      	ldr	r0, [pc, #232]	; (8001c8c <main+0x128>)
 8001ba4:	f002 fba6 	bl	80042f4 <HAL_TIM_IC_Start_IT>

  g_time_passed = HAL_GetTick() ; //snapshot of time
 8001ba8:	f000 fec4 	bl	8002934 <HAL_GetTick>
 8001bac:	4603      	mov	r3, r0
 8001bae:	4a38      	ldr	r2, [pc, #224]	; (8001c90 <main+0x12c>)
 8001bb0:	6013      	str	r3, [r2, #0]

  //Write to LCD
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET) ;
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bb8:	4836      	ldr	r0, [pc, #216]	; (8001c94 <main+0x130>)
 8001bba:	f001 fe1d 	bl	80037f8 <HAL_GPIO_WritePin>

  lcd = Lcd_create(ports, pins, GPIOB, GPIO_PIN_14, GPIOB, GPIO_PIN_2, LCD_4_BIT_MODE);
 8001bbe:	4c36      	ldr	r4, [pc, #216]	; (8001c98 <main+0x134>)
 8001bc0:	4638      	mov	r0, r7
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	9303      	str	r3, [sp, #12]
 8001bc6:	2304      	movs	r3, #4
 8001bc8:	9302      	str	r3, [sp, #8]
 8001bca:	4b32      	ldr	r3, [pc, #200]	; (8001c94 <main+0x130>)
 8001bcc:	9301      	str	r3, [sp, #4]
 8001bce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	4b2f      	ldr	r3, [pc, #188]	; (8001c94 <main+0x130>)
 8001bd6:	4a31      	ldr	r2, [pc, #196]	; (8001c9c <main+0x138>)
 8001bd8:	4931      	ldr	r1, [pc, #196]	; (8001ca0 <main+0x13c>)
 8001bda:	f7ff f8c9 	bl	8000d70 <Lcd_create>
 8001bde:	4625      	mov	r5, r4
 8001be0:	463c      	mov	r4, r7
 8001be2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001be4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001be6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bea:	e885 0003 	stmia.w	r5, {r0, r1}
  Lcd_cursor(&lcd, 0,3);
 8001bee:	2203      	movs	r2, #3
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	4829      	ldr	r0, [pc, #164]	; (8001c98 <main+0x134>)
 8001bf4:	f7ff f930 	bl	8000e58 <Lcd_cursor>
  Lcd_string(&lcd, "Too SAUCY!");
 8001bf8:	492a      	ldr	r1, [pc, #168]	; (8001ca4 <main+0x140>)
 8001bfa:	4827      	ldr	r0, [pc, #156]	; (8001c98 <main+0x134>)
 8001bfc:	f7ff f90c 	bl	8000e18 <Lcd_string>
  Lcd_clear(&lcd);
 8001c00:	4825      	ldr	r0, [pc, #148]	; (8001c98 <main+0x134>)
 8001c02:	f7ff f943 	bl	8000e8c <Lcd_clear>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  system_state_update() ;
 8001c06:	f7ff fae7 	bl	80011d8 <system_state_update>

	  //UR3: Evironment measure: measure Ta & measure Tb  (Put in Function)/Modularize
	  en_measurements_and_responses() ;
 8001c0a:	f7ff fe25 	bl	8001858 <en_measurements_and_responses>

	  //UR2: PV Module -(Put in Function)/Modularize
	  if(g_SP_measure == 1){
 8001c0e:	4b26      	ldr	r3, [pc, #152]	; (8001ca8 <main+0x144>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d12a      	bne.n	8001c6c <main+0x108>
		  // ignore top button press and EN command while measuring
		  if(g_top_button_pressed ==1 || g_EN_config_command_rcvd ==1){
 8001c16:	4b25      	ldr	r3, [pc, #148]	; (8001cac <main+0x148>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d003      	beq.n	8001c26 <main+0xc2>
 8001c1e:	4b24      	ldr	r3, [pc, #144]	; (8001cb0 <main+0x14c>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d105      	bne.n	8001c32 <main+0xce>
			  g_top_button_pressed = 0 ;
 8001c26:	4b21      	ldr	r3, [pc, #132]	; (8001cac <main+0x148>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	701a      	strb	r2, [r3, #0]
			  g_EN_config_command_rcvd = 0;
 8001c2c:	4b20      	ldr	r3, [pc, #128]	; (8001cb0 <main+0x14c>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	701a      	strb	r2, [r3, #0]
		  }

		  //PV panel data points measure
		  g_PV_vol1 = get_pv_panel_adc2_input() ; //Voc = Vsp
 8001c32:	f7ff ff39 	bl	8001aa8 <get_pv_panel_adc2_input>
 8001c36:	4603      	mov	r3, r0
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4b1e      	ldr	r3, [pc, #120]	; (8001cb4 <main+0x150>)
 8001c3c:	801a      	strh	r2, [r3, #0]

		  //*ADC input(2) Vb = V_var
		  g_PV_vol2= get_pv_panel_adc1_input() ;
 8001c3e:	f7ff fed3 	bl	80019e8 <get_pv_panel_adc1_input>
 8001c42:	4603      	mov	r3, r0
 8001c44:	461a      	mov	r2, r3
 8001c46:	4b1c      	ldr	r3, [pc, #112]	; (8001cb8 <main+0x154>)
 8001c48:	801a      	strh	r2, [r3, #0]

		  //Voc measure
		  if(g_PV_vol1 > g_prev_v_pv){
 8001c4a:	4b1a      	ldr	r3, [pc, #104]	; (8001cb4 <main+0x150>)
 8001c4c:	881a      	ldrh	r2, [r3, #0]
 8001c4e:	4b1b      	ldr	r3, [pc, #108]	; (8001cbc <main+0x158>)
 8001c50:	881b      	ldrh	r3, [r3, #0]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d907      	bls.n	8001c66 <main+0x102>
			  g_prev_v_pv = g_PV_vol1 ;
 8001c56:	4b17      	ldr	r3, [pc, #92]	; (8001cb4 <main+0x150>)
 8001c58:	881a      	ldrh	r2, [r3, #0]
 8001c5a:	4b18      	ldr	r3, [pc, #96]	; (8001cbc <main+0x158>)
 8001c5c:	801a      	strh	r2, [r3, #0]
			  //capture maximum open circuit voltage
			  g_v_oc_pv = g_PV_vol1 ;
 8001c5e:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <main+0x150>)
 8001c60:	881a      	ldrh	r2, [r3, #0]
 8001c62:	4b17      	ldr	r3, [pc, #92]	; (8001cc0 <main+0x15c>)
 8001c64:	801a      	strh	r2, [r3, #0]
		  }

		  //Flash D2 LED
		  flash_led_d2() ;
 8001c66:	f7ff fc81 	bl	800156c <flash_led_d2>
 8001c6a:	e7cc      	b.n	8001c06 <main+0xa2>
	  }

	  else if(g_SP_measure == 2){
 8001c6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <main+0x144>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d1c8      	bne.n	8001c06 <main+0xa2>
		  //set LED D2
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET) ;
 8001c74:	2201      	movs	r2, #1
 8001c76:	2110      	movs	r1, #16
 8001c78:	4806      	ldr	r0, [pc, #24]	; (8001c94 <main+0x130>)
 8001c7a:	f001 fdbd 	bl	80037f8 <HAL_GPIO_WritePin>
	  system_state_update() ;
 8001c7e:	e7c2      	b.n	8001c06 <main+0xa2>
 8001c80:	20000000 	.word	0x20000000
 8001c84:	20000194 	.word	0x20000194
 8001c88:	20000010 	.word	0x20000010
 8001c8c:	20000104 	.word	0x20000104
 8001c90:	20000254 	.word	0x20000254
 8001c94:	40020400 	.word	0x40020400
 8001c98:	20000274 	.word	0x20000274
 8001c9c:	20000024 	.word	0x20000024
 8001ca0:	20000014 	.word	0x20000014
 8001ca4:	08006958 	.word	0x08006958
 8001ca8:	2000025a 	.word	0x2000025a
 8001cac:	2000029d 	.word	0x2000029d
 8001cb0:	20000259 	.word	0x20000259
 8001cb4:	20000218 	.word	0x20000218
 8001cb8:	2000021e 	.word	0x2000021e
 8001cbc:	2000021c 	.word	0x2000021c
 8001cc0:	2000021a 	.word	0x2000021a

08001cc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b094      	sub	sp, #80	; 0x50
 8001cc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cca:	f107 0320 	add.w	r3, r7, #32
 8001cce:	2230      	movs	r2, #48	; 0x30
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f004 f982 	bl	8005fdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cd8:	f107 030c 	add.w	r3, r7, #12
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
 8001ce6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60bb      	str	r3, [r7, #8]
 8001cec:	4b28      	ldr	r3, [pc, #160]	; (8001d90 <SystemClock_Config+0xcc>)
 8001cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf0:	4a27      	ldr	r2, [pc, #156]	; (8001d90 <SystemClock_Config+0xcc>)
 8001cf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf6:	6413      	str	r3, [r2, #64]	; 0x40
 8001cf8:	4b25      	ldr	r3, [pc, #148]	; (8001d90 <SystemClock_Config+0xcc>)
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d00:	60bb      	str	r3, [r7, #8]
 8001d02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d04:	2300      	movs	r3, #0
 8001d06:	607b      	str	r3, [r7, #4]
 8001d08:	4b22      	ldr	r3, [pc, #136]	; (8001d94 <SystemClock_Config+0xd0>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a21      	ldr	r2, [pc, #132]	; (8001d94 <SystemClock_Config+0xd0>)
 8001d0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d12:	6013      	str	r3, [r2, #0]
 8001d14:	4b1f      	ldr	r3, [pc, #124]	; (8001d94 <SystemClock_Config+0xd0>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d1c:	607b      	str	r3, [r7, #4]
 8001d1e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d20:	2302      	movs	r3, #2
 8001d22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d24:	2301      	movs	r3, #1
 8001d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d28:	2310      	movs	r3, #16
 8001d2a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d30:	2300      	movs	r3, #0
 8001d32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001d34:	2310      	movs	r3, #16
 8001d36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001d38:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001d3c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001d3e:	2304      	movs	r3, #4
 8001d40:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d42:	2304      	movs	r3, #4
 8001d44:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d46:	f107 0320 	add.w	r3, r7, #32
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f001 fd92 	bl	8003874 <HAL_RCC_OscConfig>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001d56:	f000 f9fb 	bl	8002150 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d5a:	230f      	movs	r3, #15
 8001d5c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d62:	2300      	movs	r3, #0
 8001d64:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d6a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d70:	f107 030c 	add.w	r3, r7, #12
 8001d74:	2102      	movs	r1, #2
 8001d76:	4618      	mov	r0, r3
 8001d78:	f001 fff4 	bl	8003d64 <HAL_RCC_ClockConfig>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001d82:	f000 f9e5 	bl	8002150 <Error_Handler>
  }
}
 8001d86:	bf00      	nop
 8001d88:	3750      	adds	r7, #80	; 0x50
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40007000 	.word	0x40007000

08001d98 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001d9c:	4b18      	ldr	r3, [pc, #96]	; (8001e00 <MX_ADC1_Init+0x68>)
 8001d9e:	4a19      	ldr	r2, [pc, #100]	; (8001e04 <MX_ADC1_Init+0x6c>)
 8001da0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001da2:	4b17      	ldr	r3, [pc, #92]	; (8001e00 <MX_ADC1_Init+0x68>)
 8001da4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001da8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001daa:	4b15      	ldr	r3, [pc, #84]	; (8001e00 <MX_ADC1_Init+0x68>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001db0:	4b13      	ldr	r3, [pc, #76]	; (8001e00 <MX_ADC1_Init+0x68>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001db6:	4b12      	ldr	r3, [pc, #72]	; (8001e00 <MX_ADC1_Init+0x68>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001dbc:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <MX_ADC1_Init+0x68>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001dc4:	4b0e      	ldr	r3, [pc, #56]	; (8001e00 <MX_ADC1_Init+0x68>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001dca:	4b0d      	ldr	r3, [pc, #52]	; (8001e00 <MX_ADC1_Init+0x68>)
 8001dcc:	4a0e      	ldr	r2, [pc, #56]	; (8001e08 <MX_ADC1_Init+0x70>)
 8001dce:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001dd0:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <MX_ADC1_Init+0x68>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001dd6:	4b0a      	ldr	r3, [pc, #40]	; (8001e00 <MX_ADC1_Init+0x68>)
 8001dd8:	2201      	movs	r2, #1
 8001dda:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001ddc:	4b08      	ldr	r3, [pc, #32]	; (8001e00 <MX_ADC1_Init+0x68>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001de4:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <MX_ADC1_Init+0x68>)
 8001de6:	2201      	movs	r2, #1
 8001de8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001dea:	4805      	ldr	r0, [pc, #20]	; (8001e00 <MX_ADC1_Init+0x68>)
 8001dec:	f000 fdd2 	bl	8002994 <HAL_ADC_Init>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_ADC1_Init+0x62>
  {
    Error_Handler();
 8001df6:	f000 f9ab 	bl	8002150 <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	200000bc 	.word	0x200000bc
 8001e04:	40012000 	.word	0x40012000
 8001e08:	0f000001 	.word	0x0f000001

08001e0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08a      	sub	sp, #40	; 0x28
 8001e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e12:	f107 0318 	add.w	r3, r7, #24
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	605a      	str	r2, [r3, #4]
 8001e1c:	609a      	str	r2, [r3, #8]
 8001e1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e20:	f107 0310 	add.w	r3, r7, #16
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001e2a:	463b      	mov	r3, r7
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e36:	4b2c      	ldr	r3, [pc, #176]	; (8001ee8 <MX_TIM2_Init+0xdc>)
 8001e38:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e3c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001e3e:	4b2a      	ldr	r3, [pc, #168]	; (8001ee8 <MX_TIM2_Init+0xdc>)
 8001e40:	2253      	movs	r2, #83	; 0x53
 8001e42:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e44:	4b28      	ldr	r3, [pc, #160]	; (8001ee8 <MX_TIM2_Init+0xdc>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001e4a:	4b27      	ldr	r3, [pc, #156]	; (8001ee8 <MX_TIM2_Init+0xdc>)
 8001e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e50:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e52:	4b25      	ldr	r3, [pc, #148]	; (8001ee8 <MX_TIM2_Init+0xdc>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e58:	4b23      	ldr	r3, [pc, #140]	; (8001ee8 <MX_TIM2_Init+0xdc>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e5e:	4822      	ldr	r0, [pc, #136]	; (8001ee8 <MX_TIM2_Init+0xdc>)
 8001e60:	f002 f9a0 	bl	80041a4 <HAL_TIM_Base_Init>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001e6a:	f000 f971 	bl	8002150 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e72:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e74:	f107 0318 	add.w	r3, r7, #24
 8001e78:	4619      	mov	r1, r3
 8001e7a:	481b      	ldr	r0, [pc, #108]	; (8001ee8 <MX_TIM2_Init+0xdc>)
 8001e7c:	f002 fcf8 	bl	8004870 <HAL_TIM_ConfigClockSource>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001e86:	f000 f963 	bl	8002150 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001e8a:	4817      	ldr	r0, [pc, #92]	; (8001ee8 <MX_TIM2_Init+0xdc>)
 8001e8c:	f002 f9d9 	bl	8004242 <HAL_TIM_IC_Init>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001e96:	f000 f95b 	bl	8002150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ea2:	f107 0310 	add.w	r3, r7, #16
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	480f      	ldr	r0, [pc, #60]	; (8001ee8 <MX_TIM2_Init+0xdc>)
 8001eaa:	f003 f82f 	bl	8004f0c <HAL_TIMEx_MasterConfigSynchronization>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001eb4:	f000 f94c 	bl	8002150 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001ec8:	463b      	mov	r3, r7
 8001eca:	2200      	movs	r2, #0
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4806      	ldr	r0, [pc, #24]	; (8001ee8 <MX_TIM2_Init+0xdc>)
 8001ed0:	f002 fc32 	bl	8004738 <HAL_TIM_IC_ConfigChannel>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001eda:	f000 f939 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ede:	bf00      	nop
 8001ee0:	3728      	adds	r7, #40	; 0x28
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20000104 	.word	0x20000104

08001eec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ef2:	f107 0308 	add.w	r3, r7, #8
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	605a      	str	r2, [r3, #4]
 8001efc:	609a      	str	r2, [r3, #8]
 8001efe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f00:	463b      	mov	r3, r7
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f08:	4b1d      	ldr	r3, [pc, #116]	; (8001f80 <MX_TIM3_Init+0x94>)
 8001f0a:	4a1e      	ldr	r2, [pc, #120]	; (8001f84 <MX_TIM3_Init+0x98>)
 8001f0c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001f0e:	4b1c      	ldr	r3, [pc, #112]	; (8001f80 <MX_TIM3_Init+0x94>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f14:	4b1a      	ldr	r3, [pc, #104]	; (8001f80 <MX_TIM3_Init+0x94>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001f1a:	4b19      	ldr	r3, [pc, #100]	; (8001f80 <MX_TIM3_Init+0x94>)
 8001f1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f20:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f22:	4b17      	ldr	r3, [pc, #92]	; (8001f80 <MX_TIM3_Init+0x94>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f28:	4b15      	ldr	r3, [pc, #84]	; (8001f80 <MX_TIM3_Init+0x94>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f2e:	4814      	ldr	r0, [pc, #80]	; (8001f80 <MX_TIM3_Init+0x94>)
 8001f30:	f002 f938 	bl	80041a4 <HAL_TIM_Base_Init>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001f3a:	f000 f909 	bl	8002150 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f42:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f44:	f107 0308 	add.w	r3, r7, #8
 8001f48:	4619      	mov	r1, r3
 8001f4a:	480d      	ldr	r0, [pc, #52]	; (8001f80 <MX_TIM3_Init+0x94>)
 8001f4c:	f002 fc90 	bl	8004870 <HAL_TIM_ConfigClockSource>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001f56:	f000 f8fb 	bl	8002150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f62:	463b      	mov	r3, r7
 8001f64:	4619      	mov	r1, r3
 8001f66:	4806      	ldr	r0, [pc, #24]	; (8001f80 <MX_TIM3_Init+0x94>)
 8001f68:	f002 ffd0 	bl	8004f0c <HAL_TIMEx_MasterConfigSynchronization>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001f72:	f000 f8ed 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f76:	bf00      	nop
 8001f78:	3718      	adds	r7, #24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	2000014c 	.word	0x2000014c
 8001f84:	40000400 	.word	0x40000400

08001f88 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f8c:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <MX_USART2_UART_Init+0x50>)
 8001f8e:	4a13      	ldr	r2, [pc, #76]	; (8001fdc <MX_USART2_UART_Init+0x54>)
 8001f90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f92:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <MX_USART2_UART_Init+0x50>)
 8001f94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001f9a:	4b0f      	ldr	r3, [pc, #60]	; (8001fd8 <MX_USART2_UART_Init+0x50>)
 8001f9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001fa0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fa2:	4b0d      	ldr	r3, [pc, #52]	; (8001fd8 <MX_USART2_UART_Init+0x50>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_ODD;
 8001fa8:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <MX_USART2_UART_Init+0x50>)
 8001faa:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001fae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fb0:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <MX_USART2_UART_Init+0x50>)
 8001fb2:	220c      	movs	r2, #12
 8001fb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fb6:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <MX_USART2_UART_Init+0x50>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fbc:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <MX_USART2_UART_Init+0x50>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fc2:	4805      	ldr	r0, [pc, #20]	; (8001fd8 <MX_USART2_UART_Init+0x50>)
 8001fc4:	f003 f824 	bl	8005010 <HAL_UART_Init>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8001fce:	f000 f8bf 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	20000194 	.word	0x20000194
 8001fdc:	40004400 	.word	0x40004400

08001fe0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b08a      	sub	sp, #40	; 0x28
 8001fe4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe6:	f107 0314 	add.w	r3, r7, #20
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	605a      	str	r2, [r3, #4]
 8001ff0:	609a      	str	r2, [r3, #8]
 8001ff2:	60da      	str	r2, [r3, #12]
 8001ff4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	613b      	str	r3, [r7, #16]
 8001ffa:	4b51      	ldr	r3, [pc, #324]	; (8002140 <MX_GPIO_Init+0x160>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	4a50      	ldr	r2, [pc, #320]	; (8002140 <MX_GPIO_Init+0x160>)
 8002000:	f043 0304 	orr.w	r3, r3, #4
 8002004:	6313      	str	r3, [r2, #48]	; 0x30
 8002006:	4b4e      	ldr	r3, [pc, #312]	; (8002140 <MX_GPIO_Init+0x160>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	f003 0304 	and.w	r3, r3, #4
 800200e:	613b      	str	r3, [r7, #16]
 8002010:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	4b4a      	ldr	r3, [pc, #296]	; (8002140 <MX_GPIO_Init+0x160>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	4a49      	ldr	r2, [pc, #292]	; (8002140 <MX_GPIO_Init+0x160>)
 800201c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002020:	6313      	str	r3, [r2, #48]	; 0x30
 8002022:	4b47      	ldr	r3, [pc, #284]	; (8002140 <MX_GPIO_Init+0x160>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	60bb      	str	r3, [r7, #8]
 8002032:	4b43      	ldr	r3, [pc, #268]	; (8002140 <MX_GPIO_Init+0x160>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	4a42      	ldr	r2, [pc, #264]	; (8002140 <MX_GPIO_Init+0x160>)
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	6313      	str	r3, [r2, #48]	; 0x30
 800203e:	4b40      	ldr	r3, [pc, #256]	; (8002140 <MX_GPIO_Init+0x160>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	60bb      	str	r3, [r7, #8]
 8002048:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	607b      	str	r3, [r7, #4]
 800204e:	4b3c      	ldr	r3, [pc, #240]	; (8002140 <MX_GPIO_Init+0x160>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	4a3b      	ldr	r2, [pc, #236]	; (8002140 <MX_GPIO_Init+0x160>)
 8002054:	f043 0302 	orr.w	r3, r3, #2
 8002058:	6313      	str	r3, [r2, #48]	; 0x30
 800205a:	4b39      	ldr	r3, [pc, #228]	; (8002140 <MX_GPIO_Init+0x160>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	607b      	str	r3, [r7, #4]
 8002064:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED_D5_Pin|DB5_Line_Pin|DB6_Line_Pin, GPIO_PIN_RESET);
 8002066:	2200      	movs	r2, #0
 8002068:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 800206c:	4835      	ldr	r0, [pc, #212]	; (8002144 <MX_GPIO_Init+0x164>)
 800206e:	f001 fbc3 	bl	80037f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, E_Line_Pin|LED_D4_Pin|DB4_Line_Pin|RS_Line_Pin
 8002072:	2200      	movs	r2, #0
 8002074:	f24d 4134 	movw	r1, #54324	; 0xd434
 8002078:	4833      	ldr	r0, [pc, #204]	; (8002148 <MX_GPIO_Init+0x168>)
 800207a:	f001 fbbd 	bl	80037f8 <HAL_GPIO_WritePin>
                          |R_W_Line_Pin|LED_D2_Pin|LED_D3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DB7_Line_GPIO_Port, DB7_Line_Pin, GPIO_PIN_RESET);
 800207e:	2200      	movs	r2, #0
 8002080:	2140      	movs	r1, #64	; 0x40
 8002082:	4832      	ldr	r0, [pc, #200]	; (800214c <MX_GPIO_Init+0x16c>)
 8002084:	f001 fbb8 	bl	80037f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD2_Pin LED_D5_Pin DB5_Line_Pin DB6_Line_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED_D5_Pin|DB5_Line_Pin|DB6_Line_Pin;
 8002088:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 800208c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800208e:	2301      	movs	r3, #1
 8002090:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002092:	2300      	movs	r3, #0
 8002094:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002096:	2300      	movs	r3, #0
 8002098:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800209a:	f107 0314 	add.w	r3, r7, #20
 800209e:	4619      	mov	r1, r3
 80020a0:	4828      	ldr	r0, [pc, #160]	; (8002144 <MX_GPIO_Init+0x164>)
 80020a2:	f001 fa0d 	bl	80034c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020a6:	23c0      	movs	r3, #192	; 0xc0
 80020a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80020aa:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80020ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020b0:	2301      	movs	r3, #1
 80020b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b4:	f107 0314 	add.w	r3, r7, #20
 80020b8:	4619      	mov	r1, r3
 80020ba:	4822      	ldr	r0, [pc, #136]	; (8002144 <MX_GPIO_Init+0x164>)
 80020bc:	f001 fa00 	bl	80034c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : E_Line_Pin LED_D4_Pin DB4_Line_Pin RS_Line_Pin
                           R_W_Line_Pin LED_D2_Pin LED_D3_Pin */
  GPIO_InitStruct.Pin = E_Line_Pin|LED_D4_Pin|DB4_Line_Pin|RS_Line_Pin
 80020c0:	f24d 4334 	movw	r3, #54324	; 0xd434
 80020c4:	617b      	str	r3, [r7, #20]
                          |R_W_Line_Pin|LED_D2_Pin|LED_D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020c6:	2301      	movs	r3, #1
 80020c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ce:	2300      	movs	r3, #0
 80020d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020d2:	f107 0314 	add.w	r3, r7, #20
 80020d6:	4619      	mov	r1, r3
 80020d8:	481b      	ldr	r0, [pc, #108]	; (8002148 <MX_GPIO_Init+0x168>)
 80020da:	f001 f9f1 	bl	80034c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_8|GPIO_PIN_9;
 80020de:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 80020e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80020e4:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80020e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020ea:	2301      	movs	r3, #1
 80020ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ee:	f107 0314 	add.w	r3, r7, #20
 80020f2:	4619      	mov	r1, r3
 80020f4:	4814      	ldr	r0, [pc, #80]	; (8002148 <MX_GPIO_Init+0x168>)
 80020f6:	f001 f9e3 	bl	80034c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DB7_Line_Pin */
  GPIO_InitStruct.Pin = DB7_Line_Pin;
 80020fa:	2340      	movs	r3, #64	; 0x40
 80020fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020fe:	2301      	movs	r3, #1
 8002100:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002102:	2300      	movs	r3, #0
 8002104:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002106:	2300      	movs	r3, #0
 8002108:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DB7_Line_GPIO_Port, &GPIO_InitStruct);
 800210a:	f107 0314 	add.w	r3, r7, #20
 800210e:	4619      	mov	r1, r3
 8002110:	480e      	ldr	r0, [pc, #56]	; (800214c <MX_GPIO_Init+0x16c>)
 8002112:	f001 f9d5 	bl	80034c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002116:	2200      	movs	r2, #0
 8002118:	2100      	movs	r1, #0
 800211a:	2017      	movs	r0, #23
 800211c:	f001 f907 	bl	800332e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002120:	2017      	movs	r0, #23
 8002122:	f001 f920 	bl	8003366 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002126:	2200      	movs	r2, #0
 8002128:	2100      	movs	r1, #0
 800212a:	2028      	movs	r0, #40	; 0x28
 800212c:	f001 f8ff 	bl	800332e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002130:	2028      	movs	r0, #40	; 0x28
 8002132:	f001 f918 	bl	8003366 <HAL_NVIC_EnableIRQ>

}
 8002136:	bf00      	nop
 8002138:	3728      	adds	r7, #40	; 0x28
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40023800 	.word	0x40023800
 8002144:	40020000 	.word	0x40020000
 8002148:	40020400 	.word	0x40020400
 800214c:	40020800 	.word	0x40020800

08002150 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002154:	b672      	cpsid	i
}
 8002156:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002158:	e7fe      	b.n	8002158 <Error_Handler+0x8>
	...

0800215c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	607b      	str	r3, [r7, #4]
 8002166:	4b10      	ldr	r3, [pc, #64]	; (80021a8 <HAL_MspInit+0x4c>)
 8002168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216a:	4a0f      	ldr	r2, [pc, #60]	; (80021a8 <HAL_MspInit+0x4c>)
 800216c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002170:	6453      	str	r3, [r2, #68]	; 0x44
 8002172:	4b0d      	ldr	r3, [pc, #52]	; (80021a8 <HAL_MspInit+0x4c>)
 8002174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800217a:	607b      	str	r3, [r7, #4]
 800217c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	603b      	str	r3, [r7, #0]
 8002182:	4b09      	ldr	r3, [pc, #36]	; (80021a8 <HAL_MspInit+0x4c>)
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	4a08      	ldr	r2, [pc, #32]	; (80021a8 <HAL_MspInit+0x4c>)
 8002188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800218c:	6413      	str	r3, [r2, #64]	; 0x40
 800218e:	4b06      	ldr	r3, [pc, #24]	; (80021a8 <HAL_MspInit+0x4c>)
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002196:	603b      	str	r3, [r7, #0]
 8002198:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800219a:	2007      	movs	r0, #7
 800219c:	f001 f8bc 	bl	8003318 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021a0:	bf00      	nop
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40023800 	.word	0x40023800

080021ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b08c      	sub	sp, #48	; 0x30
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b4:	f107 031c 	add.w	r3, r7, #28
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	605a      	str	r2, [r3, #4]
 80021be:	609a      	str	r2, [r3, #8]
 80021c0:	60da      	str	r2, [r3, #12]
 80021c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a31      	ldr	r2, [pc, #196]	; (8002290 <HAL_ADC_MspInit+0xe4>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d15b      	bne.n	8002286 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	61bb      	str	r3, [r7, #24]
 80021d2:	4b30      	ldr	r3, [pc, #192]	; (8002294 <HAL_ADC_MspInit+0xe8>)
 80021d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d6:	4a2f      	ldr	r2, [pc, #188]	; (8002294 <HAL_ADC_MspInit+0xe8>)
 80021d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021dc:	6453      	str	r3, [r2, #68]	; 0x44
 80021de:	4b2d      	ldr	r3, [pc, #180]	; (8002294 <HAL_ADC_MspInit+0xe8>)
 80021e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e6:	61bb      	str	r3, [r7, #24]
 80021e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	617b      	str	r3, [r7, #20]
 80021ee:	4b29      	ldr	r3, [pc, #164]	; (8002294 <HAL_ADC_MspInit+0xe8>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	4a28      	ldr	r2, [pc, #160]	; (8002294 <HAL_ADC_MspInit+0xe8>)
 80021f4:	f043 0301 	orr.w	r3, r3, #1
 80021f8:	6313      	str	r3, [r2, #48]	; 0x30
 80021fa:	4b26      	ldr	r3, [pc, #152]	; (8002294 <HAL_ADC_MspInit+0xe8>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	617b      	str	r3, [r7, #20]
 8002204:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	4b22      	ldr	r3, [pc, #136]	; (8002294 <HAL_ADC_MspInit+0xe8>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	4a21      	ldr	r2, [pc, #132]	; (8002294 <HAL_ADC_MspInit+0xe8>)
 8002210:	f043 0304 	orr.w	r3, r3, #4
 8002214:	6313      	str	r3, [r2, #48]	; 0x30
 8002216:	4b1f      	ldr	r3, [pc, #124]	; (8002294 <HAL_ADC_MspInit+0xe8>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	f003 0304 	and.w	r3, r3, #4
 800221e:	613b      	str	r3, [r7, #16]
 8002220:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	60fb      	str	r3, [r7, #12]
 8002226:	4b1b      	ldr	r3, [pc, #108]	; (8002294 <HAL_ADC_MspInit+0xe8>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	4a1a      	ldr	r2, [pc, #104]	; (8002294 <HAL_ADC_MspInit+0xe8>)
 800222c:	f043 0302 	orr.w	r3, r3, #2
 8002230:	6313      	str	r3, [r2, #48]	; 0x30
 8002232:	4b18      	ldr	r3, [pc, #96]	; (8002294 <HAL_ADC_MspInit+0xe8>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800223e:	2301      	movs	r3, #1
 8002240:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002242:	2303      	movs	r3, #3
 8002244:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002246:	2300      	movs	r3, #0
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800224a:	f107 031c 	add.w	r3, r7, #28
 800224e:	4619      	mov	r1, r3
 8002250:	4811      	ldr	r0, [pc, #68]	; (8002298 <HAL_ADC_MspInit+0xec>)
 8002252:	f001 f935 	bl	80034c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002256:	2330      	movs	r3, #48	; 0x30
 8002258:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800225a:	2303      	movs	r3, #3
 800225c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225e:	2300      	movs	r3, #0
 8002260:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002262:	f107 031c 	add.w	r3, r7, #28
 8002266:	4619      	mov	r1, r3
 8002268:	480c      	ldr	r0, [pc, #48]	; (800229c <HAL_ADC_MspInit+0xf0>)
 800226a:	f001 f929 	bl	80034c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800226e:	2302      	movs	r3, #2
 8002270:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002272:	2303      	movs	r3, #3
 8002274:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002276:	2300      	movs	r3, #0
 8002278:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800227a:	f107 031c 	add.w	r3, r7, #28
 800227e:	4619      	mov	r1, r3
 8002280:	4807      	ldr	r0, [pc, #28]	; (80022a0 <HAL_ADC_MspInit+0xf4>)
 8002282:	f001 f91d 	bl	80034c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002286:	bf00      	nop
 8002288:	3730      	adds	r7, #48	; 0x30
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40012000 	.word	0x40012000
 8002294:	40023800 	.word	0x40023800
 8002298:	40020000 	.word	0x40020000
 800229c:	40020800 	.word	0x40020800
 80022a0:	40020400 	.word	0x40020400

080022a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08a      	sub	sp, #40	; 0x28
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ac:	f107 0314 	add.w	r3, r7, #20
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	605a      	str	r2, [r3, #4]
 80022b6:	609a      	str	r2, [r3, #8]
 80022b8:	60da      	str	r2, [r3, #12]
 80022ba:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022c4:	d135      	bne.n	8002332 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	613b      	str	r3, [r7, #16]
 80022ca:	4b25      	ldr	r3, [pc, #148]	; (8002360 <HAL_TIM_Base_MspInit+0xbc>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	4a24      	ldr	r2, [pc, #144]	; (8002360 <HAL_TIM_Base_MspInit+0xbc>)
 80022d0:	f043 0301 	orr.w	r3, r3, #1
 80022d4:	6413      	str	r3, [r2, #64]	; 0x40
 80022d6:	4b22      	ldr	r3, [pc, #136]	; (8002360 <HAL_TIM_Base_MspInit+0xbc>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	613b      	str	r3, [r7, #16]
 80022e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	4b1e      	ldr	r3, [pc, #120]	; (8002360 <HAL_TIM_Base_MspInit+0xbc>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	4a1d      	ldr	r2, [pc, #116]	; (8002360 <HAL_TIM_Base_MspInit+0xbc>)
 80022ec:	f043 0301 	orr.w	r3, r3, #1
 80022f0:	6313      	str	r3, [r2, #48]	; 0x30
 80022f2:	4b1b      	ldr	r3, [pc, #108]	; (8002360 <HAL_TIM_Base_MspInit+0xbc>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80022fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002304:	2302      	movs	r3, #2
 8002306:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002308:	2300      	movs	r3, #0
 800230a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230c:	2300      	movs	r3, #0
 800230e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002310:	2301      	movs	r3, #1
 8002312:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002314:	f107 0314 	add.w	r3, r7, #20
 8002318:	4619      	mov	r1, r3
 800231a:	4812      	ldr	r0, [pc, #72]	; (8002364 <HAL_TIM_Base_MspInit+0xc0>)
 800231c:	f001 f8d0 	bl	80034c0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002320:	2200      	movs	r2, #0
 8002322:	2100      	movs	r1, #0
 8002324:	201c      	movs	r0, #28
 8002326:	f001 f802 	bl	800332e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800232a:	201c      	movs	r0, #28
 800232c:	f001 f81b 	bl	8003366 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002330:	e012      	b.n	8002358 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM3)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a0c      	ldr	r2, [pc, #48]	; (8002368 <HAL_TIM_Base_MspInit+0xc4>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d10d      	bne.n	8002358 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800233c:	2300      	movs	r3, #0
 800233e:	60bb      	str	r3, [r7, #8]
 8002340:	4b07      	ldr	r3, [pc, #28]	; (8002360 <HAL_TIM_Base_MspInit+0xbc>)
 8002342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002344:	4a06      	ldr	r2, [pc, #24]	; (8002360 <HAL_TIM_Base_MspInit+0xbc>)
 8002346:	f043 0302 	orr.w	r3, r3, #2
 800234a:	6413      	str	r3, [r2, #64]	; 0x40
 800234c:	4b04      	ldr	r3, [pc, #16]	; (8002360 <HAL_TIM_Base_MspInit+0xbc>)
 800234e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	60bb      	str	r3, [r7, #8]
 8002356:	68bb      	ldr	r3, [r7, #8]
}
 8002358:	bf00      	nop
 800235a:	3728      	adds	r7, #40	; 0x28
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40023800 	.word	0x40023800
 8002364:	40020000 	.word	0x40020000
 8002368:	40000400 	.word	0x40000400

0800236c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b08a      	sub	sp, #40	; 0x28
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002374:	f107 0314 	add.w	r3, r7, #20
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	605a      	str	r2, [r3, #4]
 800237e:	609a      	str	r2, [r3, #8]
 8002380:	60da      	str	r2, [r3, #12]
 8002382:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a1d      	ldr	r2, [pc, #116]	; (8002400 <HAL_UART_MspInit+0x94>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d133      	bne.n	80023f6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	613b      	str	r3, [r7, #16]
 8002392:	4b1c      	ldr	r3, [pc, #112]	; (8002404 <HAL_UART_MspInit+0x98>)
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	4a1b      	ldr	r2, [pc, #108]	; (8002404 <HAL_UART_MspInit+0x98>)
 8002398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800239c:	6413      	str	r3, [r2, #64]	; 0x40
 800239e:	4b19      	ldr	r3, [pc, #100]	; (8002404 <HAL_UART_MspInit+0x98>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a6:	613b      	str	r3, [r7, #16]
 80023a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	4b15      	ldr	r3, [pc, #84]	; (8002404 <HAL_UART_MspInit+0x98>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	4a14      	ldr	r2, [pc, #80]	; (8002404 <HAL_UART_MspInit+0x98>)
 80023b4:	f043 0301 	orr.w	r3, r3, #1
 80023b8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ba:	4b12      	ldr	r3, [pc, #72]	; (8002404 <HAL_UART_MspInit+0x98>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80023c6:	230c      	movs	r3, #12
 80023c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ca:	2302      	movs	r3, #2
 80023cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d2:	2303      	movs	r3, #3
 80023d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023d6:	2307      	movs	r3, #7
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023da:	f107 0314 	add.w	r3, r7, #20
 80023de:	4619      	mov	r1, r3
 80023e0:	4809      	ldr	r0, [pc, #36]	; (8002408 <HAL_UART_MspInit+0x9c>)
 80023e2:	f001 f86d 	bl	80034c0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80023e6:	2200      	movs	r2, #0
 80023e8:	2100      	movs	r1, #0
 80023ea:	2026      	movs	r0, #38	; 0x26
 80023ec:	f000 ff9f 	bl	800332e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80023f0:	2026      	movs	r0, #38	; 0x26
 80023f2:	f000 ffb8 	bl	8003366 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80023f6:	bf00      	nop
 80023f8:	3728      	adds	r7, #40	; 0x28
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40004400 	.word	0x40004400
 8002404:	40023800 	.word	0x40023800
 8002408:	40020000 	.word	0x40020000

0800240c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002410:	e7fe      	b.n	8002410 <NMI_Handler+0x4>

08002412 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002412:	b480      	push	{r7}
 8002414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002416:	e7fe      	b.n	8002416 <HardFault_Handler+0x4>

08002418 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800241c:	e7fe      	b.n	800241c <MemManage_Handler+0x4>

0800241e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800241e:	b480      	push	{r7}
 8002420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002422:	e7fe      	b.n	8002422 <BusFault_Handler+0x4>

08002424 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002428:	e7fe      	b.n	8002428 <UsageFault_Handler+0x4>

0800242a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800242a:	b480      	push	{r7}
 800242c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800243c:	bf00      	nop
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002446:	b480      	push	{r7}
 8002448:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800244a:	bf00      	nop
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002458:	f000 fa58 	bl	800290c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800245c:	bf00      	nop
 800245e:	bd80      	pop	{r7, pc}

08002460 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_8) != RESET){
 8002464:	4b8a      	ldr	r3, [pc, #552]	; (8002690 <EXTI9_5_IRQHandler+0x230>)
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800246c:	2b00      	cmp	r3, #0
 800246e:	d039      	beq.n	80024e4 <EXTI9_5_IRQHandler+0x84>


		if(HAL_GetTick() - ticks_pressed >= 20){
 8002470:	f000 fa60 	bl	8002934 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	4b87      	ldr	r3, [pc, #540]	; (8002694 <EXTI9_5_IRQHandler+0x234>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b13      	cmp	r3, #19
 800247e:	d92c      	bls.n	80024da <EXTI9_5_IRQHandler+0x7a>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == 0){
 8002480:	4b85      	ldr	r3, [pc, #532]	; (8002698 <EXTI9_5_IRQHandler+0x238>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b01      	cmp	r3, #1
 8002488:	d112      	bne.n	80024b0 <EXTI9_5_IRQHandler+0x50>
 800248a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800248e:	4883      	ldr	r0, [pc, #524]	; (800269c <EXTI9_5_IRQHandler+0x23c>)
 8002490:	f001 f99a 	bl	80037c8 <HAL_GPIO_ReadPin>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10a      	bne.n	80024b0 <EXTI9_5_IRQHandler+0x50>
				button_state =0 ; // stable low reached
 800249a:	4b7f      	ldr	r3, [pc, #508]	; (8002698 <EXTI9_5_IRQHandler+0x238>)
 800249c:	2200      	movs	r2, #0
 800249e:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 80024a0:	f000 fa48 	bl	8002934 <HAL_GetTick>
 80024a4:	4603      	mov	r3, r0
 80024a6:	4a7b      	ldr	r2, [pc, #492]	; (8002694 <EXTI9_5_IRQHandler+0x234>)
 80024a8:	6013      	str	r3, [r2, #0]

				g_left_button_pressed =1;
 80024aa:	4b7d      	ldr	r3, [pc, #500]	; (80026a0 <EXTI9_5_IRQHandler+0x240>)
 80024ac:	2201      	movs	r2, #1
 80024ae:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOB ,GPIO_PIN_8) == 1 ){
 80024b0:	4b79      	ldr	r3, [pc, #484]	; (8002698 <EXTI9_5_IRQHandler+0x238>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10f      	bne.n	80024da <EXTI9_5_IRQHandler+0x7a>
 80024ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024be:	4877      	ldr	r0, [pc, #476]	; (800269c <EXTI9_5_IRQHandler+0x23c>)
 80024c0:	f001 f982 	bl	80037c8 <HAL_GPIO_ReadPin>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d107      	bne.n	80024da <EXTI9_5_IRQHandler+0x7a>
				ticks_pressed = HAL_GetTick() ;
 80024ca:	f000 fa33 	bl	8002934 <HAL_GetTick>
 80024ce:	4603      	mov	r3, r0
 80024d0:	4a70      	ldr	r2, [pc, #448]	; (8002694 <EXTI9_5_IRQHandler+0x234>)
 80024d2:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 80024d4:	4b70      	ldr	r3, [pc, #448]	; (8002698 <EXTI9_5_IRQHandler+0x238>)
 80024d6:	2201      	movs	r2, #1
 80024d8:	701a      	strb	r2, [r3, #0]

			}
		}
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8) ;
 80024da:	4b6d      	ldr	r3, [pc, #436]	; (8002690 <EXTI9_5_IRQHandler+0x230>)
 80024dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024e0:	615a      	str	r2, [r3, #20]
 80024e2:	e0c5      	b.n	8002670 <EXTI9_5_IRQHandler+0x210>
	}

	else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_9) != RESET){
 80024e4:	4b6a      	ldr	r3, [pc, #424]	; (8002690 <EXTI9_5_IRQHandler+0x230>)
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d039      	beq.n	8002564 <EXTI9_5_IRQHandler+0x104>



		if(HAL_GetTick() - ticks_pressed >= 20){
 80024f0:	f000 fa20 	bl	8002934 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	4b67      	ldr	r3, [pc, #412]	; (8002694 <EXTI9_5_IRQHandler+0x234>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b13      	cmp	r3, #19
 80024fe:	d92c      	bls.n	800255a <EXTI9_5_IRQHandler+0xfa>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0){
 8002500:	4b65      	ldr	r3, [pc, #404]	; (8002698 <EXTI9_5_IRQHandler+0x238>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b01      	cmp	r3, #1
 8002508:	d112      	bne.n	8002530 <EXTI9_5_IRQHandler+0xd0>
 800250a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800250e:	4863      	ldr	r0, [pc, #396]	; (800269c <EXTI9_5_IRQHandler+0x23c>)
 8002510:	f001 f95a 	bl	80037c8 <HAL_GPIO_ReadPin>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d10a      	bne.n	8002530 <EXTI9_5_IRQHandler+0xd0>
				button_state =0 ; // stable low reached
 800251a:	4b5f      	ldr	r3, [pc, #380]	; (8002698 <EXTI9_5_IRQHandler+0x238>)
 800251c:	2200      	movs	r2, #0
 800251e:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 8002520:	f000 fa08 	bl	8002934 <HAL_GetTick>
 8002524:	4603      	mov	r3, r0
 8002526:	4a5b      	ldr	r2, [pc, #364]	; (8002694 <EXTI9_5_IRQHandler+0x234>)
 8002528:	6013      	str	r3, [r2, #0]

				g_top_button_pressed = 1 ;
 800252a:	4b5e      	ldr	r3, [pc, #376]	; (80026a4 <EXTI9_5_IRQHandler+0x244>)
 800252c:	2201      	movs	r2, #1
 800252e:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOB ,GPIO_PIN_9) == 1 ){
 8002530:	4b59      	ldr	r3, [pc, #356]	; (8002698 <EXTI9_5_IRQHandler+0x238>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10f      	bne.n	800255a <EXTI9_5_IRQHandler+0xfa>
 800253a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800253e:	4857      	ldr	r0, [pc, #348]	; (800269c <EXTI9_5_IRQHandler+0x23c>)
 8002540:	f001 f942 	bl	80037c8 <HAL_GPIO_ReadPin>
 8002544:	4603      	mov	r3, r0
 8002546:	2b01      	cmp	r3, #1
 8002548:	d107      	bne.n	800255a <EXTI9_5_IRQHandler+0xfa>
				ticks_pressed = HAL_GetTick() ;
 800254a:	f000 f9f3 	bl	8002934 <HAL_GetTick>
 800254e:	4603      	mov	r3, r0
 8002550:	4a50      	ldr	r2, [pc, #320]	; (8002694 <EXTI9_5_IRQHandler+0x234>)
 8002552:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 8002554:	4b50      	ldr	r3, [pc, #320]	; (8002698 <EXTI9_5_IRQHandler+0x238>)
 8002556:	2201      	movs	r2, #1
 8002558:	701a      	strb	r2, [r3, #0]

			}
		}

		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_9) ;
 800255a:	4b4d      	ldr	r3, [pc, #308]	; (8002690 <EXTI9_5_IRQHandler+0x230>)
 800255c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002560:	615a      	str	r2, [r3, #20]
 8002562:	e085      	b.n	8002670 <EXTI9_5_IRQHandler+0x210>

	}

	else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_6) != RESET){
 8002564:	4b4a      	ldr	r3, [pc, #296]	; (8002690 <EXTI9_5_IRQHandler+0x230>)
 8002566:	695b      	ldr	r3, [r3, #20]
 8002568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800256c:	2b00      	cmp	r3, #0
 800256e:	d036      	beq.n	80025de <EXTI9_5_IRQHandler+0x17e>



		if(HAL_GetTick() - ticks_pressed >= 20){
 8002570:	f000 f9e0 	bl	8002934 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	4b47      	ldr	r3, [pc, #284]	; (8002694 <EXTI9_5_IRQHandler+0x234>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b13      	cmp	r3, #19
 800257e:	d92a      	bls.n	80025d6 <EXTI9_5_IRQHandler+0x176>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 0){
 8002580:	4b45      	ldr	r3, [pc, #276]	; (8002698 <EXTI9_5_IRQHandler+0x238>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b01      	cmp	r3, #1
 8002588:	d111      	bne.n	80025ae <EXTI9_5_IRQHandler+0x14e>
 800258a:	2140      	movs	r1, #64	; 0x40
 800258c:	4846      	ldr	r0, [pc, #280]	; (80026a8 <EXTI9_5_IRQHandler+0x248>)
 800258e:	f001 f91b 	bl	80037c8 <HAL_GPIO_ReadPin>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10a      	bne.n	80025ae <EXTI9_5_IRQHandler+0x14e>
				button_state =0 ; // stable low reached
 8002598:	4b3f      	ldr	r3, [pc, #252]	; (8002698 <EXTI9_5_IRQHandler+0x238>)
 800259a:	2200      	movs	r2, #0
 800259c:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 800259e:	f000 f9c9 	bl	8002934 <HAL_GetTick>
 80025a2:	4603      	mov	r3, r0
 80025a4:	4a3b      	ldr	r2, [pc, #236]	; (8002694 <EXTI9_5_IRQHandler+0x234>)
 80025a6:	6013      	str	r3, [r2, #0]

				g_middle_button_pressed =1 ;
 80025a8:	4b40      	ldr	r3, [pc, #256]	; (80026ac <EXTI9_5_IRQHandler+0x24c>)
 80025aa:	2201      	movs	r2, #1
 80025ac:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOA ,GPIO_PIN_6) == 1 ){
 80025ae:	4b3a      	ldr	r3, [pc, #232]	; (8002698 <EXTI9_5_IRQHandler+0x238>)
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d10e      	bne.n	80025d6 <EXTI9_5_IRQHandler+0x176>
 80025b8:	2140      	movs	r1, #64	; 0x40
 80025ba:	483b      	ldr	r0, [pc, #236]	; (80026a8 <EXTI9_5_IRQHandler+0x248>)
 80025bc:	f001 f904 	bl	80037c8 <HAL_GPIO_ReadPin>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d107      	bne.n	80025d6 <EXTI9_5_IRQHandler+0x176>
				ticks_pressed = HAL_GetTick() ;
 80025c6:	f000 f9b5 	bl	8002934 <HAL_GetTick>
 80025ca:	4603      	mov	r3, r0
 80025cc:	4a31      	ldr	r2, [pc, #196]	; (8002694 <EXTI9_5_IRQHandler+0x234>)
 80025ce:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 80025d0:	4b31      	ldr	r3, [pc, #196]	; (8002698 <EXTI9_5_IRQHandler+0x238>)
 80025d2:	2201      	movs	r2, #1
 80025d4:	701a      	strb	r2, [r3, #0]

			}
		}


		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6) ;
 80025d6:	4b2e      	ldr	r3, [pc, #184]	; (8002690 <EXTI9_5_IRQHandler+0x230>)
 80025d8:	2240      	movs	r2, #64	; 0x40
 80025da:	615a      	str	r2, [r3, #20]
 80025dc:	e048      	b.n	8002670 <EXTI9_5_IRQHandler+0x210>

	}

	else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET){
 80025de:	4b2c      	ldr	r3, [pc, #176]	; (8002690 <EXTI9_5_IRQHandler+0x230>)
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d036      	beq.n	8002658 <EXTI9_5_IRQHandler+0x1f8>




		if(HAL_GetTick() - ticks_pressed >= 20){
 80025ea:	f000 f9a3 	bl	8002934 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	4b28      	ldr	r3, [pc, #160]	; (8002694 <EXTI9_5_IRQHandler+0x234>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b13      	cmp	r3, #19
 80025f8:	d92a      	bls.n	8002650 <EXTI9_5_IRQHandler+0x1f0>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 0){
 80025fa:	4b27      	ldr	r3, [pc, #156]	; (8002698 <EXTI9_5_IRQHandler+0x238>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	2b01      	cmp	r3, #1
 8002602:	d111      	bne.n	8002628 <EXTI9_5_IRQHandler+0x1c8>
 8002604:	2180      	movs	r1, #128	; 0x80
 8002606:	4828      	ldr	r0, [pc, #160]	; (80026a8 <EXTI9_5_IRQHandler+0x248>)
 8002608:	f001 f8de 	bl	80037c8 <HAL_GPIO_ReadPin>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10a      	bne.n	8002628 <EXTI9_5_IRQHandler+0x1c8>
				button_state =0 ; // stable low reached
 8002612:	4b21      	ldr	r3, [pc, #132]	; (8002698 <EXTI9_5_IRQHandler+0x238>)
 8002614:	2200      	movs	r2, #0
 8002616:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 8002618:	f000 f98c 	bl	8002934 <HAL_GetTick>
 800261c:	4603      	mov	r3, r0
 800261e:	4a1d      	ldr	r2, [pc, #116]	; (8002694 <EXTI9_5_IRQHandler+0x234>)
 8002620:	6013      	str	r3, [r2, #0]

				g_right_button_pressed = 1 ;
 8002622:	4b23      	ldr	r3, [pc, #140]	; (80026b0 <EXTI9_5_IRQHandler+0x250>)
 8002624:	2201      	movs	r2, #1
 8002626:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOA ,GPIO_PIN_7) == 1 ){
 8002628:	4b1b      	ldr	r3, [pc, #108]	; (8002698 <EXTI9_5_IRQHandler+0x238>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10e      	bne.n	8002650 <EXTI9_5_IRQHandler+0x1f0>
 8002632:	2180      	movs	r1, #128	; 0x80
 8002634:	481c      	ldr	r0, [pc, #112]	; (80026a8 <EXTI9_5_IRQHandler+0x248>)
 8002636:	f001 f8c7 	bl	80037c8 <HAL_GPIO_ReadPin>
 800263a:	4603      	mov	r3, r0
 800263c:	2b01      	cmp	r3, #1
 800263e:	d107      	bne.n	8002650 <EXTI9_5_IRQHandler+0x1f0>
				ticks_pressed = HAL_GetTick() ;
 8002640:	f000 f978 	bl	8002934 <HAL_GetTick>
 8002644:	4603      	mov	r3, r0
 8002646:	4a13      	ldr	r2, [pc, #76]	; (8002694 <EXTI9_5_IRQHandler+0x234>)
 8002648:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 800264a:	4b13      	ldr	r3, [pc, #76]	; (8002698 <EXTI9_5_IRQHandler+0x238>)
 800264c:	2201      	movs	r2, #1
 800264e:	701a      	strb	r2, [r3, #0]

			}
		}
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7) ;
 8002650:	4b0f      	ldr	r3, [pc, #60]	; (8002690 <EXTI9_5_IRQHandler+0x230>)
 8002652:	2280      	movs	r2, #128	; 0x80
 8002654:	615a      	str	r2, [r3, #20]
 8002656:	e00b      	b.n	8002670 <EXTI9_5_IRQHandler+0x210>
	}

	else{

		if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET){
 8002658:	4b0d      	ldr	r3, [pc, #52]	; (8002690 <EXTI9_5_IRQHandler+0x230>)
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002660:	2b00      	cmp	r3, #0
 8002662:	d005      	beq.n	8002670 <EXTI9_5_IRQHandler+0x210>

			g_bottom_button_pressed = 1 ;
 8002664:	4b13      	ldr	r3, [pc, #76]	; (80026b4 <EXTI9_5_IRQHandler+0x254>)
 8002666:	2201      	movs	r2, #1
 8002668:	701a      	strb	r2, [r3, #0]

			__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7) ;
 800266a:	4b09      	ldr	r3, [pc, #36]	; (8002690 <EXTI9_5_IRQHandler+0x230>)
 800266c:	2280      	movs	r2, #128	; 0x80
 800266e:	615a      	str	r2, [r3, #20]
		}
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002670:	2040      	movs	r0, #64	; 0x40
 8002672:	f001 f8db 	bl	800382c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002676:	2080      	movs	r0, #128	; 0x80
 8002678:	f001 f8d8 	bl	800382c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800267c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002680:	f001 f8d4 	bl	800382c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002684:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002688:	f001 f8d0 	bl	800382c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800268c:	bf00      	nop
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40013c00 	.word	0x40013c00
 8002694:	200002a0 	.word	0x200002a0
 8002698:	2000002c 	.word	0x2000002c
 800269c:	40020400 	.word	0x40020400
 80026a0:	2000029b 	.word	0x2000029b
 80026a4:	2000029d 	.word	0x2000029d
 80026a8:	40020000 	.word	0x40020000
 80026ac:	2000029f 	.word	0x2000029f
 80026b0:	2000029c 	.word	0x2000029c
 80026b4:	2000029e 	.word	0x2000029e

080026b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80026bc:	4802      	ldr	r0, [pc, #8]	; (80026c8 <TIM2_IRQHandler+0x10>)
 80026be:	f001 ff33 	bl	8004528 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	20000104 	.word	0x20000104

080026cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80026d0:	4802      	ldr	r0, [pc, #8]	; (80026dc <USART2_IRQHandler+0x10>)
 80026d2:	f002 fd5f 	bl	8005194 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80026d6:	bf00      	nop
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	20000194 	.word	0x20000194

080026e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */


	if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_13) != RESET){
 80026e4:	4b22      	ldr	r3, [pc, #136]	; (8002770 <EXTI15_10_IRQHandler+0x90>)
 80026e6:	695b      	ldr	r3, [r3, #20]
 80026e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d038      	beq.n	8002762 <EXTI15_10_IRQHandler+0x82>

		if(HAL_GetTick() - ticks_pressed >= 20){
 80026f0:	f000 f920 	bl	8002934 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	4b1f      	ldr	r3, [pc, #124]	; (8002774 <EXTI15_10_IRQHandler+0x94>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b13      	cmp	r3, #19
 80026fe:	d92c      	bls.n	800275a <EXTI15_10_IRQHandler+0x7a>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 0){
 8002700:	4b1d      	ldr	r3, [pc, #116]	; (8002778 <EXTI15_10_IRQHandler+0x98>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b01      	cmp	r3, #1
 8002708:	d112      	bne.n	8002730 <EXTI15_10_IRQHandler+0x50>
 800270a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800270e:	481b      	ldr	r0, [pc, #108]	; (800277c <EXTI15_10_IRQHandler+0x9c>)
 8002710:	f001 f85a 	bl	80037c8 <HAL_GPIO_ReadPin>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10a      	bne.n	8002730 <EXTI15_10_IRQHandler+0x50>
				button_state =0 ; // stable low reached
 800271a:	4b17      	ldr	r3, [pc, #92]	; (8002778 <EXTI15_10_IRQHandler+0x98>)
 800271c:	2200      	movs	r2, #0
 800271e:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 8002720:	f000 f908 	bl	8002934 <HAL_GetTick>
 8002724:	4603      	mov	r3, r0
 8002726:	4a13      	ldr	r2, [pc, #76]	; (8002774 <EXTI15_10_IRQHandler+0x94>)
 8002728:	6013      	str	r3, [r2, #0]

				g_bottom_button_pressed = 1 ;
 800272a:	4b15      	ldr	r3, [pc, #84]	; (8002780 <EXTI15_10_IRQHandler+0xa0>)
 800272c:	2201      	movs	r2, #1
 800272e:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOB ,GPIO_PIN_13) == 1 ){
 8002730:	4b11      	ldr	r3, [pc, #68]	; (8002778 <EXTI15_10_IRQHandler+0x98>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10f      	bne.n	800275a <EXTI15_10_IRQHandler+0x7a>
 800273a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800273e:	480f      	ldr	r0, [pc, #60]	; (800277c <EXTI15_10_IRQHandler+0x9c>)
 8002740:	f001 f842 	bl	80037c8 <HAL_GPIO_ReadPin>
 8002744:	4603      	mov	r3, r0
 8002746:	2b01      	cmp	r3, #1
 8002748:	d107      	bne.n	800275a <EXTI15_10_IRQHandler+0x7a>
				ticks_pressed = HAL_GetTick() ;
 800274a:	f000 f8f3 	bl	8002934 <HAL_GetTick>
 800274e:	4603      	mov	r3, r0
 8002750:	4a08      	ldr	r2, [pc, #32]	; (8002774 <EXTI15_10_IRQHandler+0x94>)
 8002752:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 8002754:	4b08      	ldr	r3, [pc, #32]	; (8002778 <EXTI15_10_IRQHandler+0x98>)
 8002756:	2201      	movs	r2, #1
 8002758:	701a      	strb	r2, [r3, #0]

			}
		}

		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13) ;
 800275a:	4b05      	ldr	r3, [pc, #20]	; (8002770 <EXTI15_10_IRQHandler+0x90>)
 800275c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002760:	615a      	str	r2, [r3, #20]
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002762:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002766:	f001 f861 	bl	800382c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40013c00 	.word	0x40013c00
 8002774:	200002a0 	.word	0x200002a0
 8002778:	2000002c 	.word	0x2000002c
 800277c:	40020400 	.word	0x40020400
 8002780:	2000029e 	.word	0x2000029e

08002784 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800278c:	4a14      	ldr	r2, [pc, #80]	; (80027e0 <_sbrk+0x5c>)
 800278e:	4b15      	ldr	r3, [pc, #84]	; (80027e4 <_sbrk+0x60>)
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002798:	4b13      	ldr	r3, [pc, #76]	; (80027e8 <_sbrk+0x64>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d102      	bne.n	80027a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027a0:	4b11      	ldr	r3, [pc, #68]	; (80027e8 <_sbrk+0x64>)
 80027a2:	4a12      	ldr	r2, [pc, #72]	; (80027ec <_sbrk+0x68>)
 80027a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027a6:	4b10      	ldr	r3, [pc, #64]	; (80027e8 <_sbrk+0x64>)
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4413      	add	r3, r2
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d207      	bcs.n	80027c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027b4:	f003 fbe8 	bl	8005f88 <__errno>
 80027b8:	4603      	mov	r3, r0
 80027ba:	220c      	movs	r2, #12
 80027bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027be:	f04f 33ff 	mov.w	r3, #4294967295
 80027c2:	e009      	b.n	80027d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027c4:	4b08      	ldr	r3, [pc, #32]	; (80027e8 <_sbrk+0x64>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027ca:	4b07      	ldr	r3, [pc, #28]	; (80027e8 <_sbrk+0x64>)
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4413      	add	r3, r2
 80027d2:	4a05      	ldr	r2, [pc, #20]	; (80027e8 <_sbrk+0x64>)
 80027d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027d6:	68fb      	ldr	r3, [r7, #12]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3718      	adds	r7, #24
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	20020000 	.word	0x20020000
 80027e4:	00000400 	.word	0x00000400
 80027e8:	200002a8 	.word	0x200002a8
 80027ec:	200002c0 	.word	0x200002c0

080027f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027f4:	4b06      	ldr	r3, [pc, #24]	; (8002810 <SystemInit+0x20>)
 80027f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fa:	4a05      	ldr	r2, [pc, #20]	; (8002810 <SystemInit+0x20>)
 80027fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002800:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002804:	bf00      	nop
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	e000ed00 	.word	0xe000ed00

08002814 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002814:	f8df d034 	ldr.w	sp, [pc, #52]	; 800284c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002818:	480d      	ldr	r0, [pc, #52]	; (8002850 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800281a:	490e      	ldr	r1, [pc, #56]	; (8002854 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800281c:	4a0e      	ldr	r2, [pc, #56]	; (8002858 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800281e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002820:	e002      	b.n	8002828 <LoopCopyDataInit>

08002822 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002822:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002824:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002826:	3304      	adds	r3, #4

08002828 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002828:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800282a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800282c:	d3f9      	bcc.n	8002822 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800282e:	4a0b      	ldr	r2, [pc, #44]	; (800285c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002830:	4c0b      	ldr	r4, [pc, #44]	; (8002860 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002832:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002834:	e001      	b.n	800283a <LoopFillZerobss>

08002836 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002836:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002838:	3204      	adds	r2, #4

0800283a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800283a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800283c:	d3fb      	bcc.n	8002836 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800283e:	f7ff ffd7 	bl	80027f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002842:	f003 fba7 	bl	8005f94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002846:	f7ff f98d 	bl	8001b64 <main>
  bx  lr    
 800284a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800284c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002850:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002854:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8002858:	080069c4 	.word	0x080069c4
  ldr r2, =_sbss
 800285c:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8002860:	200002c0 	.word	0x200002c0

08002864 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002864:	e7fe      	b.n	8002864 <ADC_IRQHandler>
	...

08002868 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800286c:	4b0e      	ldr	r3, [pc, #56]	; (80028a8 <HAL_Init+0x40>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a0d      	ldr	r2, [pc, #52]	; (80028a8 <HAL_Init+0x40>)
 8002872:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002876:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002878:	4b0b      	ldr	r3, [pc, #44]	; (80028a8 <HAL_Init+0x40>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a0a      	ldr	r2, [pc, #40]	; (80028a8 <HAL_Init+0x40>)
 800287e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002882:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002884:	4b08      	ldr	r3, [pc, #32]	; (80028a8 <HAL_Init+0x40>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a07      	ldr	r2, [pc, #28]	; (80028a8 <HAL_Init+0x40>)
 800288a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800288e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002890:	2003      	movs	r0, #3
 8002892:	f000 fd41 	bl	8003318 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002896:	2000      	movs	r0, #0
 8002898:	f000 f808 	bl	80028ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800289c:	f7ff fc5e 	bl	800215c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	40023c00 	.word	0x40023c00

080028ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028b4:	4b12      	ldr	r3, [pc, #72]	; (8002900 <HAL_InitTick+0x54>)
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	4b12      	ldr	r3, [pc, #72]	; (8002904 <HAL_InitTick+0x58>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	4619      	mov	r1, r3
 80028be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80028c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ca:	4618      	mov	r0, r3
 80028cc:	f000 fd59 	bl	8003382 <HAL_SYSTICK_Config>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e00e      	b.n	80028f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2b0f      	cmp	r3, #15
 80028de:	d80a      	bhi.n	80028f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028e0:	2200      	movs	r2, #0
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	f04f 30ff 	mov.w	r0, #4294967295
 80028e8:	f000 fd21 	bl	800332e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028ec:	4a06      	ldr	r2, [pc, #24]	; (8002908 <HAL_InitTick+0x5c>)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
 80028f4:	e000      	b.n	80028f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	20000030 	.word	0x20000030
 8002904:	20000038 	.word	0x20000038
 8002908:	20000034 	.word	0x20000034

0800290c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002910:	4b06      	ldr	r3, [pc, #24]	; (800292c <HAL_IncTick+0x20>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	461a      	mov	r2, r3
 8002916:	4b06      	ldr	r3, [pc, #24]	; (8002930 <HAL_IncTick+0x24>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4413      	add	r3, r2
 800291c:	4a04      	ldr	r2, [pc, #16]	; (8002930 <HAL_IncTick+0x24>)
 800291e:	6013      	str	r3, [r2, #0]
}
 8002920:	bf00      	nop
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	20000038 	.word	0x20000038
 8002930:	200002ac 	.word	0x200002ac

08002934 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  return uwTick;
 8002938:	4b03      	ldr	r3, [pc, #12]	; (8002948 <HAL_GetTick+0x14>)
 800293a:	681b      	ldr	r3, [r3, #0]
}
 800293c:	4618      	mov	r0, r3
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	200002ac 	.word	0x200002ac

0800294c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002954:	f7ff ffee 	bl	8002934 <HAL_GetTick>
 8002958:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002964:	d005      	beq.n	8002972 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002966:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <HAL_Delay+0x44>)
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	461a      	mov	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	4413      	add	r3, r2
 8002970:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002972:	bf00      	nop
 8002974:	f7ff ffde 	bl	8002934 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	429a      	cmp	r2, r3
 8002982:	d8f7      	bhi.n	8002974 <HAL_Delay+0x28>
  {
  }
}
 8002984:	bf00      	nop
 8002986:	bf00      	nop
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	20000038 	.word	0x20000038

08002994 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800299c:	2300      	movs	r3, #0
 800299e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e033      	b.n	8002a12 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d109      	bne.n	80029c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7ff fbfa 	bl	80021ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	f003 0310 	and.w	r3, r3, #16
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d118      	bne.n	8002a04 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80029da:	f023 0302 	bic.w	r3, r3, #2
 80029de:	f043 0202 	orr.w	r2, r3, #2
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 faca 	bl	8002f80 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	f023 0303 	bic.w	r3, r3, #3
 80029fa:	f043 0201 	orr.w	r2, r3, #1
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	641a      	str	r2, [r3, #64]	; 0x40
 8002a02:	e001      	b.n	8002a08 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
	...

08002a1c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d101      	bne.n	8002a36 <HAL_ADC_Start+0x1a>
 8002a32:	2302      	movs	r3, #2
 8002a34:	e097      	b.n	8002b66 <HAL_ADC_Start+0x14a>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d018      	beq.n	8002a7e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	689a      	ldr	r2, [r3, #8]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 0201 	orr.w	r2, r2, #1
 8002a5a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a5c:	4b45      	ldr	r3, [pc, #276]	; (8002b74 <HAL_ADC_Start+0x158>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a45      	ldr	r2, [pc, #276]	; (8002b78 <HAL_ADC_Start+0x15c>)
 8002a62:	fba2 2303 	umull	r2, r3, r2, r3
 8002a66:	0c9a      	lsrs	r2, r3, #18
 8002a68:	4613      	mov	r3, r2
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	4413      	add	r3, r2
 8002a6e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002a70:	e002      	b.n	8002a78 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	3b01      	subs	r3, #1
 8002a76:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1f9      	bne.n	8002a72 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d15f      	bne.n	8002b4c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a90:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002a94:	f023 0301 	bic.w	r3, r3, #1
 8002a98:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d007      	beq.n	8002abe <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ab6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ac6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aca:	d106      	bne.n	8002ada <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad0:	f023 0206 	bic.w	r2, r3, #6
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	645a      	str	r2, [r3, #68]	; 0x44
 8002ad8:	e002      	b.n	8002ae0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ae8:	4b24      	ldr	r3, [pc, #144]	; (8002b7c <HAL_ADC_Start+0x160>)
 8002aea:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002af4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f003 031f 	and.w	r3, r3, #31
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10f      	bne.n	8002b22 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d129      	bne.n	8002b64 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689a      	ldr	r2, [r3, #8]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b1e:	609a      	str	r2, [r3, #8]
 8002b20:	e020      	b.n	8002b64 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a16      	ldr	r2, [pc, #88]	; (8002b80 <HAL_ADC_Start+0x164>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d11b      	bne.n	8002b64 <HAL_ADC_Start+0x148>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d114      	bne.n	8002b64 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b48:	609a      	str	r2, [r3, #8]
 8002b4a:	e00b      	b.n	8002b64 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b50:	f043 0210 	orr.w	r2, r3, #16
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5c:	f043 0201 	orr.w	r2, r3, #1
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	20000030 	.word	0x20000030
 8002b78:	431bde83 	.word	0x431bde83
 8002b7c:	40012300 	.word	0x40012300
 8002b80:	40012000 	.word	0x40012000

08002b84 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d101      	bne.n	8002b9a <HAL_ADC_Stop+0x16>
 8002b96:	2302      	movs	r3, #2
 8002b98:	e021      	b.n	8002bde <HAL_ADC_Stop+0x5a>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 0201 	bic.w	r2, r2, #1
 8002bb0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d109      	bne.n	8002bd4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002bc8:	f023 0301 	bic.w	r3, r3, #1
 8002bcc:	f043 0201 	orr.w	r2, r3, #1
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b084      	sub	sp, #16
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
 8002bf2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c06:	d113      	bne.n	8002c30 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002c12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c16:	d10b      	bne.n	8002c30 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1c:	f043 0220 	orr.w	r2, r3, #32
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e063      	b.n	8002cf8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002c30:	f7ff fe80 	bl	8002934 <HAL_GetTick>
 8002c34:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c36:	e021      	b.n	8002c7c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c3e:	d01d      	beq.n	8002c7c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d007      	beq.n	8002c56 <HAL_ADC_PollForConversion+0x6c>
 8002c46:	f7ff fe75 	bl	8002934 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d212      	bcs.n	8002c7c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d00b      	beq.n	8002c7c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	f043 0204 	orr.w	r2, r3, #4
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e03d      	b.n	8002cf8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d1d6      	bne.n	8002c38 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f06f 0212 	mvn.w	r2, #18
 8002c92:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c98:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d123      	bne.n	8002cf6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d11f      	bne.n	8002cf6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cbc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d006      	beq.n	8002cd2 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d111      	bne.n	8002cf6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d105      	bne.n	8002cf6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	f043 0201 	orr.w	r2, r3, #1
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
	...

08002d1c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002d26:	2300      	movs	r3, #0
 8002d28:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d101      	bne.n	8002d38 <HAL_ADC_ConfigChannel+0x1c>
 8002d34:	2302      	movs	r3, #2
 8002d36:	e113      	b.n	8002f60 <HAL_ADC_ConfigChannel+0x244>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2b09      	cmp	r3, #9
 8002d46:	d925      	bls.n	8002d94 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68d9      	ldr	r1, [r3, #12]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	461a      	mov	r2, r3
 8002d56:	4613      	mov	r3, r2
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	4413      	add	r3, r2
 8002d5c:	3b1e      	subs	r3, #30
 8002d5e:	2207      	movs	r2, #7
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	43da      	mvns	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	400a      	ands	r2, r1
 8002d6c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68d9      	ldr	r1, [r3, #12]
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	689a      	ldr	r2, [r3, #8]
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	4618      	mov	r0, r3
 8002d80:	4603      	mov	r3, r0
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	4403      	add	r3, r0
 8002d86:	3b1e      	subs	r3, #30
 8002d88:	409a      	lsls	r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	60da      	str	r2, [r3, #12]
 8002d92:	e022      	b.n	8002dda <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6919      	ldr	r1, [r3, #16]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	461a      	mov	r2, r3
 8002da2:	4613      	mov	r3, r2
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	4413      	add	r3, r2
 8002da8:	2207      	movs	r2, #7
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	43da      	mvns	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	400a      	ands	r2, r1
 8002db6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6919      	ldr	r1, [r3, #16]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	689a      	ldr	r2, [r3, #8]
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	4618      	mov	r0, r3
 8002dca:	4603      	mov	r3, r0
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	4403      	add	r3, r0
 8002dd0:	409a      	lsls	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b06      	cmp	r3, #6
 8002de0:	d824      	bhi.n	8002e2c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	4613      	mov	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	4413      	add	r3, r2
 8002df2:	3b05      	subs	r3, #5
 8002df4:	221f      	movs	r2, #31
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	43da      	mvns	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	400a      	ands	r2, r1
 8002e02:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	4618      	mov	r0, r3
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685a      	ldr	r2, [r3, #4]
 8002e16:	4613      	mov	r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4413      	add	r3, r2
 8002e1c:	3b05      	subs	r3, #5
 8002e1e:	fa00 f203 	lsl.w	r2, r0, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	635a      	str	r2, [r3, #52]	; 0x34
 8002e2a:	e04c      	b.n	8002ec6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	2b0c      	cmp	r3, #12
 8002e32:	d824      	bhi.n	8002e7e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	4413      	add	r3, r2
 8002e44:	3b23      	subs	r3, #35	; 0x23
 8002e46:	221f      	movs	r2, #31
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	43da      	mvns	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	400a      	ands	r2, r1
 8002e54:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	4618      	mov	r0, r3
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	4413      	add	r3, r2
 8002e6e:	3b23      	subs	r3, #35	; 0x23
 8002e70:	fa00 f203 	lsl.w	r2, r0, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	631a      	str	r2, [r3, #48]	; 0x30
 8002e7c:	e023      	b.n	8002ec6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4413      	add	r3, r2
 8002e8e:	3b41      	subs	r3, #65	; 0x41
 8002e90:	221f      	movs	r2, #31
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	43da      	mvns	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	400a      	ands	r2, r1
 8002e9e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	4618      	mov	r0, r3
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685a      	ldr	r2, [r3, #4]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	3b41      	subs	r3, #65	; 0x41
 8002eba:	fa00 f203 	lsl.w	r2, r0, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ec6:	4b29      	ldr	r3, [pc, #164]	; (8002f6c <HAL_ADC_ConfigChannel+0x250>)
 8002ec8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a28      	ldr	r2, [pc, #160]	; (8002f70 <HAL_ADC_ConfigChannel+0x254>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d10f      	bne.n	8002ef4 <HAL_ADC_ConfigChannel+0x1d8>
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2b12      	cmp	r3, #18
 8002eda:	d10b      	bne.n	8002ef4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a1d      	ldr	r2, [pc, #116]	; (8002f70 <HAL_ADC_ConfigChannel+0x254>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d12b      	bne.n	8002f56 <HAL_ADC_ConfigChannel+0x23a>
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a1c      	ldr	r2, [pc, #112]	; (8002f74 <HAL_ADC_ConfigChannel+0x258>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d003      	beq.n	8002f10 <HAL_ADC_ConfigChannel+0x1f4>
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2b11      	cmp	r3, #17
 8002f0e:	d122      	bne.n	8002f56 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a11      	ldr	r2, [pc, #68]	; (8002f74 <HAL_ADC_ConfigChannel+0x258>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d111      	bne.n	8002f56 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f32:	4b11      	ldr	r3, [pc, #68]	; (8002f78 <HAL_ADC_ConfigChannel+0x25c>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a11      	ldr	r2, [pc, #68]	; (8002f7c <HAL_ADC_ConfigChannel+0x260>)
 8002f38:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3c:	0c9a      	lsrs	r2, r3, #18
 8002f3e:	4613      	mov	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f48:	e002      	b.n	8002f50 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1f9      	bne.n	8002f4a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3714      	adds	r7, #20
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	40012300 	.word	0x40012300
 8002f70:	40012000 	.word	0x40012000
 8002f74:	10000012 	.word	0x10000012
 8002f78:	20000030 	.word	0x20000030
 8002f7c:	431bde83 	.word	0x431bde83

08002f80 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f88:	4b79      	ldr	r3, [pc, #484]	; (8003170 <ADC_Init+0x1f0>)
 8002f8a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	431a      	orrs	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6859      	ldr	r1, [r3, #4]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	021a      	lsls	r2, r3, #8
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002fd8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6859      	ldr	r1, [r3, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689a      	ldr	r2, [r3, #8]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ffa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6899      	ldr	r1, [r3, #8]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68da      	ldr	r2, [r3, #12]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	430a      	orrs	r2, r1
 800300c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003012:	4a58      	ldr	r2, [pc, #352]	; (8003174 <ADC_Init+0x1f4>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d022      	beq.n	800305e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689a      	ldr	r2, [r3, #8]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003026:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6899      	ldr	r1, [r3, #8]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	689a      	ldr	r2, [r3, #8]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003048:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6899      	ldr	r1, [r3, #8]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	430a      	orrs	r2, r1
 800305a:	609a      	str	r2, [r3, #8]
 800305c:	e00f      	b.n	800307e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	689a      	ldr	r2, [r3, #8]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800306c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	689a      	ldr	r2, [r3, #8]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800307c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 0202 	bic.w	r2, r2, #2
 800308c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6899      	ldr	r1, [r3, #8]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	7e1b      	ldrb	r3, [r3, #24]
 8003098:	005a      	lsls	r2, r3, #1
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	430a      	orrs	r2, r1
 80030a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d01b      	beq.n	80030e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030ba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	685a      	ldr	r2, [r3, #4]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80030ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6859      	ldr	r1, [r3, #4]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d6:	3b01      	subs	r3, #1
 80030d8:	035a      	lsls	r2, r3, #13
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	430a      	orrs	r2, r1
 80030e0:	605a      	str	r2, [r3, #4]
 80030e2:	e007      	b.n	80030f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003102:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	69db      	ldr	r3, [r3, #28]
 800310e:	3b01      	subs	r3, #1
 8003110:	051a      	lsls	r2, r3, #20
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	689a      	ldr	r2, [r3, #8]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003128:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	6899      	ldr	r1, [r3, #8]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003136:	025a      	lsls	r2, r3, #9
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	430a      	orrs	r2, r1
 800313e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689a      	ldr	r2, [r3, #8]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800314e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6899      	ldr	r1, [r3, #8]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	029a      	lsls	r2, r3, #10
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	430a      	orrs	r2, r1
 8003162:	609a      	str	r2, [r3, #8]
}
 8003164:	bf00      	nop
 8003166:	3714      	adds	r7, #20
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr
 8003170:	40012300 	.word	0x40012300
 8003174:	0f000001 	.word	0x0f000001

08003178 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f003 0307 	and.w	r3, r3, #7
 8003186:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003188:	4b0c      	ldr	r3, [pc, #48]	; (80031bc <__NVIC_SetPriorityGrouping+0x44>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003194:	4013      	ands	r3, r2
 8003196:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031aa:	4a04      	ldr	r2, [pc, #16]	; (80031bc <__NVIC_SetPriorityGrouping+0x44>)
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	60d3      	str	r3, [r2, #12]
}
 80031b0:	bf00      	nop
 80031b2:	3714      	adds	r7, #20
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	e000ed00 	.word	0xe000ed00

080031c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031c4:	4b04      	ldr	r3, [pc, #16]	; (80031d8 <__NVIC_GetPriorityGrouping+0x18>)
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	0a1b      	lsrs	r3, r3, #8
 80031ca:	f003 0307 	and.w	r3, r3, #7
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr
 80031d8:	e000ed00 	.word	0xe000ed00

080031dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	4603      	mov	r3, r0
 80031e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	db0b      	blt.n	8003206 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031ee:	79fb      	ldrb	r3, [r7, #7]
 80031f0:	f003 021f 	and.w	r2, r3, #31
 80031f4:	4907      	ldr	r1, [pc, #28]	; (8003214 <__NVIC_EnableIRQ+0x38>)
 80031f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fa:	095b      	lsrs	r3, r3, #5
 80031fc:	2001      	movs	r0, #1
 80031fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	e000e100 	.word	0xe000e100

08003218 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	4603      	mov	r3, r0
 8003220:	6039      	str	r1, [r7, #0]
 8003222:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003228:	2b00      	cmp	r3, #0
 800322a:	db0a      	blt.n	8003242 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	b2da      	uxtb	r2, r3
 8003230:	490c      	ldr	r1, [pc, #48]	; (8003264 <__NVIC_SetPriority+0x4c>)
 8003232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003236:	0112      	lsls	r2, r2, #4
 8003238:	b2d2      	uxtb	r2, r2
 800323a:	440b      	add	r3, r1
 800323c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003240:	e00a      	b.n	8003258 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	b2da      	uxtb	r2, r3
 8003246:	4908      	ldr	r1, [pc, #32]	; (8003268 <__NVIC_SetPriority+0x50>)
 8003248:	79fb      	ldrb	r3, [r7, #7]
 800324a:	f003 030f 	and.w	r3, r3, #15
 800324e:	3b04      	subs	r3, #4
 8003250:	0112      	lsls	r2, r2, #4
 8003252:	b2d2      	uxtb	r2, r2
 8003254:	440b      	add	r3, r1
 8003256:	761a      	strb	r2, [r3, #24]
}
 8003258:	bf00      	nop
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	e000e100 	.word	0xe000e100
 8003268:	e000ed00 	.word	0xe000ed00

0800326c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800326c:	b480      	push	{r7}
 800326e:	b089      	sub	sp, #36	; 0x24
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f003 0307 	and.w	r3, r3, #7
 800327e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	f1c3 0307 	rsb	r3, r3, #7
 8003286:	2b04      	cmp	r3, #4
 8003288:	bf28      	it	cs
 800328a:	2304      	movcs	r3, #4
 800328c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	3304      	adds	r3, #4
 8003292:	2b06      	cmp	r3, #6
 8003294:	d902      	bls.n	800329c <NVIC_EncodePriority+0x30>
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	3b03      	subs	r3, #3
 800329a:	e000      	b.n	800329e <NVIC_EncodePriority+0x32>
 800329c:	2300      	movs	r3, #0
 800329e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032a0:	f04f 32ff 	mov.w	r2, #4294967295
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	fa02 f303 	lsl.w	r3, r2, r3
 80032aa:	43da      	mvns	r2, r3
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	401a      	ands	r2, r3
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032b4:	f04f 31ff 	mov.w	r1, #4294967295
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	fa01 f303 	lsl.w	r3, r1, r3
 80032be:	43d9      	mvns	r1, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032c4:	4313      	orrs	r3, r2
         );
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3724      	adds	r7, #36	; 0x24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
	...

080032d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3b01      	subs	r3, #1
 80032e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032e4:	d301      	bcc.n	80032ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032e6:	2301      	movs	r3, #1
 80032e8:	e00f      	b.n	800330a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032ea:	4a0a      	ldr	r2, [pc, #40]	; (8003314 <SysTick_Config+0x40>)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	3b01      	subs	r3, #1
 80032f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032f2:	210f      	movs	r1, #15
 80032f4:	f04f 30ff 	mov.w	r0, #4294967295
 80032f8:	f7ff ff8e 	bl	8003218 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032fc:	4b05      	ldr	r3, [pc, #20]	; (8003314 <SysTick_Config+0x40>)
 80032fe:	2200      	movs	r2, #0
 8003300:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003302:	4b04      	ldr	r3, [pc, #16]	; (8003314 <SysTick_Config+0x40>)
 8003304:	2207      	movs	r2, #7
 8003306:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	e000e010 	.word	0xe000e010

08003318 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f7ff ff29 	bl	8003178 <__NVIC_SetPriorityGrouping>
}
 8003326:	bf00      	nop
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800332e:	b580      	push	{r7, lr}
 8003330:	b086      	sub	sp, #24
 8003332:	af00      	add	r7, sp, #0
 8003334:	4603      	mov	r3, r0
 8003336:	60b9      	str	r1, [r7, #8]
 8003338:	607a      	str	r2, [r7, #4]
 800333a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800333c:	2300      	movs	r3, #0
 800333e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003340:	f7ff ff3e 	bl	80031c0 <__NVIC_GetPriorityGrouping>
 8003344:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	68b9      	ldr	r1, [r7, #8]
 800334a:	6978      	ldr	r0, [r7, #20]
 800334c:	f7ff ff8e 	bl	800326c <NVIC_EncodePriority>
 8003350:	4602      	mov	r2, r0
 8003352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003356:	4611      	mov	r1, r2
 8003358:	4618      	mov	r0, r3
 800335a:	f7ff ff5d 	bl	8003218 <__NVIC_SetPriority>
}
 800335e:	bf00      	nop
 8003360:	3718      	adds	r7, #24
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b082      	sub	sp, #8
 800336a:	af00      	add	r7, sp, #0
 800336c:	4603      	mov	r3, r0
 800336e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff ff31 	bl	80031dc <__NVIC_EnableIRQ>
}
 800337a:	bf00      	nop
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b082      	sub	sp, #8
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7ff ffa2 	bl	80032d4 <SysTick_Config>
 8003390:	4603      	mov	r3, r0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b084      	sub	sp, #16
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80033a8:	f7ff fac4 	bl	8002934 <HAL_GetTick>
 80033ac:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d008      	beq.n	80033cc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2280      	movs	r2, #128	; 0x80
 80033be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e052      	b.n	8003472 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0216 	bic.w	r2, r2, #22
 80033da:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	695a      	ldr	r2, [r3, #20]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033ea:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d103      	bne.n	80033fc <HAL_DMA_Abort+0x62>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d007      	beq.n	800340c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 0208 	bic.w	r2, r2, #8
 800340a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 0201 	bic.w	r2, r2, #1
 800341a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800341c:	e013      	b.n	8003446 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800341e:	f7ff fa89 	bl	8002934 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b05      	cmp	r3, #5
 800342a:	d90c      	bls.n	8003446 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2220      	movs	r2, #32
 8003430:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2203      	movs	r2, #3
 8003436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e015      	b.n	8003472 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1e4      	bne.n	800341e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003458:	223f      	movs	r2, #63	; 0x3f
 800345a:	409a      	lsls	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800347a:	b480      	push	{r7}
 800347c:	b083      	sub	sp, #12
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d004      	beq.n	8003498 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2280      	movs	r2, #128	; 0x80
 8003492:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e00c      	b.n	80034b2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2205      	movs	r2, #5
 800349c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 0201 	bic.w	r2, r2, #1
 80034ae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
	...

080034c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b089      	sub	sp, #36	; 0x24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034ca:	2300      	movs	r3, #0
 80034cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034ce:	2300      	movs	r3, #0
 80034d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034d2:	2300      	movs	r3, #0
 80034d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034d6:	2300      	movs	r3, #0
 80034d8:	61fb      	str	r3, [r7, #28]
 80034da:	e159      	b.n	8003790 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034dc:	2201      	movs	r2, #1
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	4013      	ands	r3, r2
 80034ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	f040 8148 	bne.w	800378a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f003 0303 	and.w	r3, r3, #3
 8003502:	2b01      	cmp	r3, #1
 8003504:	d005      	beq.n	8003512 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800350e:	2b02      	cmp	r3, #2
 8003510:	d130      	bne.n	8003574 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	2203      	movs	r2, #3
 800351e:	fa02 f303 	lsl.w	r3, r2, r3
 8003522:	43db      	mvns	r3, r3
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	4013      	ands	r3, r2
 8003528:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	68da      	ldr	r2, [r3, #12]
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	4313      	orrs	r3, r2
 800353a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003548:	2201      	movs	r2, #1
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	fa02 f303 	lsl.w	r3, r2, r3
 8003550:	43db      	mvns	r3, r3
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	4013      	ands	r3, r2
 8003556:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	091b      	lsrs	r3, r3, #4
 800355e:	f003 0201 	and.w	r2, r3, #1
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	fa02 f303 	lsl.w	r3, r2, r3
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	4313      	orrs	r3, r2
 800356c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f003 0303 	and.w	r3, r3, #3
 800357c:	2b03      	cmp	r3, #3
 800357e:	d017      	beq.n	80035b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	2203      	movs	r2, #3
 800358c:	fa02 f303 	lsl.w	r3, r2, r3
 8003590:	43db      	mvns	r3, r3
 8003592:	69ba      	ldr	r2, [r7, #24]
 8003594:	4013      	ands	r3, r2
 8003596:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	689a      	ldr	r2, [r3, #8]
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	fa02 f303 	lsl.w	r3, r2, r3
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f003 0303 	and.w	r3, r3, #3
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d123      	bne.n	8003604 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	08da      	lsrs	r2, r3, #3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	3208      	adds	r2, #8
 80035c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	220f      	movs	r2, #15
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	43db      	mvns	r3, r3
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	4013      	ands	r3, r2
 80035de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	691a      	ldr	r2, [r3, #16]
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	f003 0307 	and.w	r3, r3, #7
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	08da      	lsrs	r2, r3, #3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	3208      	adds	r2, #8
 80035fe:	69b9      	ldr	r1, [r7, #24]
 8003600:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	2203      	movs	r2, #3
 8003610:	fa02 f303 	lsl.w	r3, r2, r3
 8003614:	43db      	mvns	r3, r3
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	4013      	ands	r3, r2
 800361a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f003 0203 	and.w	r2, r3, #3
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	4313      	orrs	r3, r2
 8003630:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 80a2 	beq.w	800378a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003646:	2300      	movs	r3, #0
 8003648:	60fb      	str	r3, [r7, #12]
 800364a:	4b57      	ldr	r3, [pc, #348]	; (80037a8 <HAL_GPIO_Init+0x2e8>)
 800364c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364e:	4a56      	ldr	r2, [pc, #344]	; (80037a8 <HAL_GPIO_Init+0x2e8>)
 8003650:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003654:	6453      	str	r3, [r2, #68]	; 0x44
 8003656:	4b54      	ldr	r3, [pc, #336]	; (80037a8 <HAL_GPIO_Init+0x2e8>)
 8003658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800365e:	60fb      	str	r3, [r7, #12]
 8003660:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003662:	4a52      	ldr	r2, [pc, #328]	; (80037ac <HAL_GPIO_Init+0x2ec>)
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	089b      	lsrs	r3, r3, #2
 8003668:	3302      	adds	r3, #2
 800366a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800366e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	f003 0303 	and.w	r3, r3, #3
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	220f      	movs	r2, #15
 800367a:	fa02 f303 	lsl.w	r3, r2, r3
 800367e:	43db      	mvns	r3, r3
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	4013      	ands	r3, r2
 8003684:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a49      	ldr	r2, [pc, #292]	; (80037b0 <HAL_GPIO_Init+0x2f0>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d019      	beq.n	80036c2 <HAL_GPIO_Init+0x202>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a48      	ldr	r2, [pc, #288]	; (80037b4 <HAL_GPIO_Init+0x2f4>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d013      	beq.n	80036be <HAL_GPIO_Init+0x1fe>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a47      	ldr	r2, [pc, #284]	; (80037b8 <HAL_GPIO_Init+0x2f8>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d00d      	beq.n	80036ba <HAL_GPIO_Init+0x1fa>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a46      	ldr	r2, [pc, #280]	; (80037bc <HAL_GPIO_Init+0x2fc>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d007      	beq.n	80036b6 <HAL_GPIO_Init+0x1f6>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a45      	ldr	r2, [pc, #276]	; (80037c0 <HAL_GPIO_Init+0x300>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d101      	bne.n	80036b2 <HAL_GPIO_Init+0x1f2>
 80036ae:	2304      	movs	r3, #4
 80036b0:	e008      	b.n	80036c4 <HAL_GPIO_Init+0x204>
 80036b2:	2307      	movs	r3, #7
 80036b4:	e006      	b.n	80036c4 <HAL_GPIO_Init+0x204>
 80036b6:	2303      	movs	r3, #3
 80036b8:	e004      	b.n	80036c4 <HAL_GPIO_Init+0x204>
 80036ba:	2302      	movs	r3, #2
 80036bc:	e002      	b.n	80036c4 <HAL_GPIO_Init+0x204>
 80036be:	2301      	movs	r3, #1
 80036c0:	e000      	b.n	80036c4 <HAL_GPIO_Init+0x204>
 80036c2:	2300      	movs	r3, #0
 80036c4:	69fa      	ldr	r2, [r7, #28]
 80036c6:	f002 0203 	and.w	r2, r2, #3
 80036ca:	0092      	lsls	r2, r2, #2
 80036cc:	4093      	lsls	r3, r2
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036d4:	4935      	ldr	r1, [pc, #212]	; (80037ac <HAL_GPIO_Init+0x2ec>)
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	089b      	lsrs	r3, r3, #2
 80036da:	3302      	adds	r3, #2
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036e2:	4b38      	ldr	r3, [pc, #224]	; (80037c4 <HAL_GPIO_Init+0x304>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	43db      	mvns	r3, r3
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	4013      	ands	r3, r2
 80036f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d003      	beq.n	8003706 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80036fe:	69ba      	ldr	r2, [r7, #24]
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	4313      	orrs	r3, r2
 8003704:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003706:	4a2f      	ldr	r2, [pc, #188]	; (80037c4 <HAL_GPIO_Init+0x304>)
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800370c:	4b2d      	ldr	r3, [pc, #180]	; (80037c4 <HAL_GPIO_Init+0x304>)
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	43db      	mvns	r3, r3
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	4013      	ands	r3, r2
 800371a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d003      	beq.n	8003730 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	4313      	orrs	r3, r2
 800372e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003730:	4a24      	ldr	r2, [pc, #144]	; (80037c4 <HAL_GPIO_Init+0x304>)
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003736:	4b23      	ldr	r3, [pc, #140]	; (80037c4 <HAL_GPIO_Init+0x304>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	43db      	mvns	r3, r3
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	4013      	ands	r3, r2
 8003744:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d003      	beq.n	800375a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	4313      	orrs	r3, r2
 8003758:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800375a:	4a1a      	ldr	r2, [pc, #104]	; (80037c4 <HAL_GPIO_Init+0x304>)
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003760:	4b18      	ldr	r3, [pc, #96]	; (80037c4 <HAL_GPIO_Init+0x304>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	43db      	mvns	r3, r3
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	4013      	ands	r3, r2
 800376e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d003      	beq.n	8003784 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	4313      	orrs	r3, r2
 8003782:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003784:	4a0f      	ldr	r2, [pc, #60]	; (80037c4 <HAL_GPIO_Init+0x304>)
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	3301      	adds	r3, #1
 800378e:	61fb      	str	r3, [r7, #28]
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	2b0f      	cmp	r3, #15
 8003794:	f67f aea2 	bls.w	80034dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003798:	bf00      	nop
 800379a:	bf00      	nop
 800379c:	3724      	adds	r7, #36	; 0x24
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	40023800 	.word	0x40023800
 80037ac:	40013800 	.word	0x40013800
 80037b0:	40020000 	.word	0x40020000
 80037b4:	40020400 	.word	0x40020400
 80037b8:	40020800 	.word	0x40020800
 80037bc:	40020c00 	.word	0x40020c00
 80037c0:	40021000 	.word	0x40021000
 80037c4:	40013c00 	.word	0x40013c00

080037c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	460b      	mov	r3, r1
 80037d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	691a      	ldr	r2, [r3, #16]
 80037d8:	887b      	ldrh	r3, [r7, #2]
 80037da:	4013      	ands	r3, r2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d002      	beq.n	80037e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80037e0:	2301      	movs	r3, #1
 80037e2:	73fb      	strb	r3, [r7, #15]
 80037e4:	e001      	b.n	80037ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80037e6:	2300      	movs	r3, #0
 80037e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80037ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	460b      	mov	r3, r1
 8003802:	807b      	strh	r3, [r7, #2]
 8003804:	4613      	mov	r3, r2
 8003806:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003808:	787b      	ldrb	r3, [r7, #1]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d003      	beq.n	8003816 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800380e:	887a      	ldrh	r2, [r7, #2]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003814:	e003      	b.n	800381e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003816:	887b      	ldrh	r3, [r7, #2]
 8003818:	041a      	lsls	r2, r3, #16
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	619a      	str	r2, [r3, #24]
}
 800381e:	bf00      	nop
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
	...

0800382c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	4603      	mov	r3, r0
 8003834:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003836:	4b08      	ldr	r3, [pc, #32]	; (8003858 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003838:	695a      	ldr	r2, [r3, #20]
 800383a:	88fb      	ldrh	r3, [r7, #6]
 800383c:	4013      	ands	r3, r2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d006      	beq.n	8003850 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003842:	4a05      	ldr	r2, [pc, #20]	; (8003858 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003844:	88fb      	ldrh	r3, [r7, #6]
 8003846:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003848:	88fb      	ldrh	r3, [r7, #6]
 800384a:	4618      	mov	r0, r3
 800384c:	f000 f806 	bl	800385c <HAL_GPIO_EXTI_Callback>
  }
}
 8003850:	bf00      	nop
 8003852:	3708      	adds	r7, #8
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	40013c00 	.word	0x40013c00

0800385c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	4603      	mov	r3, r0
 8003864:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003866:	bf00      	nop
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
	...

08003874 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e267      	b.n	8003d56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	d075      	beq.n	800397e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003892:	4b88      	ldr	r3, [pc, #544]	; (8003ab4 <HAL_RCC_OscConfig+0x240>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 030c 	and.w	r3, r3, #12
 800389a:	2b04      	cmp	r3, #4
 800389c:	d00c      	beq.n	80038b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800389e:	4b85      	ldr	r3, [pc, #532]	; (8003ab4 <HAL_RCC_OscConfig+0x240>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038a6:	2b08      	cmp	r3, #8
 80038a8:	d112      	bne.n	80038d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038aa:	4b82      	ldr	r3, [pc, #520]	; (8003ab4 <HAL_RCC_OscConfig+0x240>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038b6:	d10b      	bne.n	80038d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038b8:	4b7e      	ldr	r3, [pc, #504]	; (8003ab4 <HAL_RCC_OscConfig+0x240>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d05b      	beq.n	800397c <HAL_RCC_OscConfig+0x108>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d157      	bne.n	800397c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e242      	b.n	8003d56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038d8:	d106      	bne.n	80038e8 <HAL_RCC_OscConfig+0x74>
 80038da:	4b76      	ldr	r3, [pc, #472]	; (8003ab4 <HAL_RCC_OscConfig+0x240>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a75      	ldr	r2, [pc, #468]	; (8003ab4 <HAL_RCC_OscConfig+0x240>)
 80038e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038e4:	6013      	str	r3, [r2, #0]
 80038e6:	e01d      	b.n	8003924 <HAL_RCC_OscConfig+0xb0>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038f0:	d10c      	bne.n	800390c <HAL_RCC_OscConfig+0x98>
 80038f2:	4b70      	ldr	r3, [pc, #448]	; (8003ab4 <HAL_RCC_OscConfig+0x240>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a6f      	ldr	r2, [pc, #444]	; (8003ab4 <HAL_RCC_OscConfig+0x240>)
 80038f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038fc:	6013      	str	r3, [r2, #0]
 80038fe:	4b6d      	ldr	r3, [pc, #436]	; (8003ab4 <HAL_RCC_OscConfig+0x240>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a6c      	ldr	r2, [pc, #432]	; (8003ab4 <HAL_RCC_OscConfig+0x240>)
 8003904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003908:	6013      	str	r3, [r2, #0]
 800390a:	e00b      	b.n	8003924 <HAL_RCC_OscConfig+0xb0>
 800390c:	4b69      	ldr	r3, [pc, #420]	; (8003ab4 <HAL_RCC_OscConfig+0x240>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a68      	ldr	r2, [pc, #416]	; (8003ab4 <HAL_RCC_OscConfig+0x240>)
 8003912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003916:	6013      	str	r3, [r2, #0]
 8003918:	4b66      	ldr	r3, [pc, #408]	; (8003ab4 <HAL_RCC_OscConfig+0x240>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a65      	ldr	r2, [pc, #404]	; (8003ab4 <HAL_RCC_OscConfig+0x240>)
 800391e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003922:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d013      	beq.n	8003954 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800392c:	f7ff f802 	bl	8002934 <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003932:	e008      	b.n	8003946 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003934:	f7fe fffe 	bl	8002934 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b64      	cmp	r3, #100	; 0x64
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e207      	b.n	8003d56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003946:	4b5b      	ldr	r3, [pc, #364]	; (8003ab4 <HAL_RCC_OscConfig+0x240>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d0f0      	beq.n	8003934 <HAL_RCC_OscConfig+0xc0>
 8003952:	e014      	b.n	800397e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003954:	f7fe ffee 	bl	8002934 <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800395c:	f7fe ffea 	bl	8002934 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b64      	cmp	r3, #100	; 0x64
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e1f3      	b.n	8003d56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800396e:	4b51      	ldr	r3, [pc, #324]	; (8003ab4 <HAL_RCC_OscConfig+0x240>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1f0      	bne.n	800395c <HAL_RCC_OscConfig+0xe8>
 800397a:	e000      	b.n	800397e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800397c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d063      	beq.n	8003a52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800398a:	4b4a      	ldr	r3, [pc, #296]	; (8003ab4 <HAL_RCC_OscConfig+0x240>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 030c 	and.w	r3, r3, #12
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00b      	beq.n	80039ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003996:	4b47      	ldr	r3, [pc, #284]	; (8003ab4 <HAL_RCC_OscConfig+0x240>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800399e:	2b08      	cmp	r3, #8
 80039a0:	d11c      	bne.n	80039dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039a2:	4b44      	ldr	r3, [pc, #272]	; (8003ab4 <HAL_RCC_OscConfig+0x240>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d116      	bne.n	80039dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ae:	4b41      	ldr	r3, [pc, #260]	; (8003ab4 <HAL_RCC_OscConfig+0x240>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d005      	beq.n	80039c6 <HAL_RCC_OscConfig+0x152>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d001      	beq.n	80039c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e1c7      	b.n	8003d56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039c6:	4b3b      	ldr	r3, [pc, #236]	; (8003ab4 <HAL_RCC_OscConfig+0x240>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	4937      	ldr	r1, [pc, #220]	; (8003ab4 <HAL_RCC_OscConfig+0x240>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039da:	e03a      	b.n	8003a52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d020      	beq.n	8003a26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039e4:	4b34      	ldr	r3, [pc, #208]	; (8003ab8 <HAL_RCC_OscConfig+0x244>)
 80039e6:	2201      	movs	r2, #1
 80039e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ea:	f7fe ffa3 	bl	8002934 <HAL_GetTick>
 80039ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f0:	e008      	b.n	8003a04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039f2:	f7fe ff9f 	bl	8002934 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d901      	bls.n	8003a04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e1a8      	b.n	8003d56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a04:	4b2b      	ldr	r3, [pc, #172]	; (8003ab4 <HAL_RCC_OscConfig+0x240>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d0f0      	beq.n	80039f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a10:	4b28      	ldr	r3, [pc, #160]	; (8003ab4 <HAL_RCC_OscConfig+0x240>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	00db      	lsls	r3, r3, #3
 8003a1e:	4925      	ldr	r1, [pc, #148]	; (8003ab4 <HAL_RCC_OscConfig+0x240>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	600b      	str	r3, [r1, #0]
 8003a24:	e015      	b.n	8003a52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a26:	4b24      	ldr	r3, [pc, #144]	; (8003ab8 <HAL_RCC_OscConfig+0x244>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2c:	f7fe ff82 	bl	8002934 <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a34:	f7fe ff7e 	bl	8002934 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e187      	b.n	8003d56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a46:	4b1b      	ldr	r3, [pc, #108]	; (8003ab4 <HAL_RCC_OscConfig+0x240>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1f0      	bne.n	8003a34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0308 	and.w	r3, r3, #8
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d036      	beq.n	8003acc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d016      	beq.n	8003a94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a66:	4b15      	ldr	r3, [pc, #84]	; (8003abc <HAL_RCC_OscConfig+0x248>)
 8003a68:	2201      	movs	r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a6c:	f7fe ff62 	bl	8002934 <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a74:	f7fe ff5e 	bl	8002934 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e167      	b.n	8003d56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a86:	4b0b      	ldr	r3, [pc, #44]	; (8003ab4 <HAL_RCC_OscConfig+0x240>)
 8003a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d0f0      	beq.n	8003a74 <HAL_RCC_OscConfig+0x200>
 8003a92:	e01b      	b.n	8003acc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a94:	4b09      	ldr	r3, [pc, #36]	; (8003abc <HAL_RCC_OscConfig+0x248>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a9a:	f7fe ff4b 	bl	8002934 <HAL_GetTick>
 8003a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aa0:	e00e      	b.n	8003ac0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003aa2:	f7fe ff47 	bl	8002934 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d907      	bls.n	8003ac0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e150      	b.n	8003d56 <HAL_RCC_OscConfig+0x4e2>
 8003ab4:	40023800 	.word	0x40023800
 8003ab8:	42470000 	.word	0x42470000
 8003abc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ac0:	4b88      	ldr	r3, [pc, #544]	; (8003ce4 <HAL_RCC_OscConfig+0x470>)
 8003ac2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d1ea      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0304 	and.w	r3, r3, #4
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f000 8097 	beq.w	8003c08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ada:	2300      	movs	r3, #0
 8003adc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ade:	4b81      	ldr	r3, [pc, #516]	; (8003ce4 <HAL_RCC_OscConfig+0x470>)
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10f      	bne.n	8003b0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aea:	2300      	movs	r3, #0
 8003aec:	60bb      	str	r3, [r7, #8]
 8003aee:	4b7d      	ldr	r3, [pc, #500]	; (8003ce4 <HAL_RCC_OscConfig+0x470>)
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	4a7c      	ldr	r2, [pc, #496]	; (8003ce4 <HAL_RCC_OscConfig+0x470>)
 8003af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003af8:	6413      	str	r3, [r2, #64]	; 0x40
 8003afa:	4b7a      	ldr	r3, [pc, #488]	; (8003ce4 <HAL_RCC_OscConfig+0x470>)
 8003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b02:	60bb      	str	r3, [r7, #8]
 8003b04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b06:	2301      	movs	r3, #1
 8003b08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b0a:	4b77      	ldr	r3, [pc, #476]	; (8003ce8 <HAL_RCC_OscConfig+0x474>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d118      	bne.n	8003b48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b16:	4b74      	ldr	r3, [pc, #464]	; (8003ce8 <HAL_RCC_OscConfig+0x474>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a73      	ldr	r2, [pc, #460]	; (8003ce8 <HAL_RCC_OscConfig+0x474>)
 8003b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b22:	f7fe ff07 	bl	8002934 <HAL_GetTick>
 8003b26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b28:	e008      	b.n	8003b3c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b2a:	f7fe ff03 	bl	8002934 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d901      	bls.n	8003b3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e10c      	b.n	8003d56 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b3c:	4b6a      	ldr	r3, [pc, #424]	; (8003ce8 <HAL_RCC_OscConfig+0x474>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d0f0      	beq.n	8003b2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d106      	bne.n	8003b5e <HAL_RCC_OscConfig+0x2ea>
 8003b50:	4b64      	ldr	r3, [pc, #400]	; (8003ce4 <HAL_RCC_OscConfig+0x470>)
 8003b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b54:	4a63      	ldr	r2, [pc, #396]	; (8003ce4 <HAL_RCC_OscConfig+0x470>)
 8003b56:	f043 0301 	orr.w	r3, r3, #1
 8003b5a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b5c:	e01c      	b.n	8003b98 <HAL_RCC_OscConfig+0x324>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	2b05      	cmp	r3, #5
 8003b64:	d10c      	bne.n	8003b80 <HAL_RCC_OscConfig+0x30c>
 8003b66:	4b5f      	ldr	r3, [pc, #380]	; (8003ce4 <HAL_RCC_OscConfig+0x470>)
 8003b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b6a:	4a5e      	ldr	r2, [pc, #376]	; (8003ce4 <HAL_RCC_OscConfig+0x470>)
 8003b6c:	f043 0304 	orr.w	r3, r3, #4
 8003b70:	6713      	str	r3, [r2, #112]	; 0x70
 8003b72:	4b5c      	ldr	r3, [pc, #368]	; (8003ce4 <HAL_RCC_OscConfig+0x470>)
 8003b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b76:	4a5b      	ldr	r2, [pc, #364]	; (8003ce4 <HAL_RCC_OscConfig+0x470>)
 8003b78:	f043 0301 	orr.w	r3, r3, #1
 8003b7c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b7e:	e00b      	b.n	8003b98 <HAL_RCC_OscConfig+0x324>
 8003b80:	4b58      	ldr	r3, [pc, #352]	; (8003ce4 <HAL_RCC_OscConfig+0x470>)
 8003b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b84:	4a57      	ldr	r2, [pc, #348]	; (8003ce4 <HAL_RCC_OscConfig+0x470>)
 8003b86:	f023 0301 	bic.w	r3, r3, #1
 8003b8a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b8c:	4b55      	ldr	r3, [pc, #340]	; (8003ce4 <HAL_RCC_OscConfig+0x470>)
 8003b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b90:	4a54      	ldr	r2, [pc, #336]	; (8003ce4 <HAL_RCC_OscConfig+0x470>)
 8003b92:	f023 0304 	bic.w	r3, r3, #4
 8003b96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d015      	beq.n	8003bcc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba0:	f7fe fec8 	bl	8002934 <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba6:	e00a      	b.n	8003bbe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ba8:	f7fe fec4 	bl	8002934 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e0cb      	b.n	8003d56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bbe:	4b49      	ldr	r3, [pc, #292]	; (8003ce4 <HAL_RCC_OscConfig+0x470>)
 8003bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d0ee      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x334>
 8003bca:	e014      	b.n	8003bf6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bcc:	f7fe feb2 	bl	8002934 <HAL_GetTick>
 8003bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bd2:	e00a      	b.n	8003bea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bd4:	f7fe feae 	bl	8002934 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	f241 3288 	movw	r2, #5000	; 0x1388
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e0b5      	b.n	8003d56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bea:	4b3e      	ldr	r3, [pc, #248]	; (8003ce4 <HAL_RCC_OscConfig+0x470>)
 8003bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1ee      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bf6:	7dfb      	ldrb	r3, [r7, #23]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d105      	bne.n	8003c08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bfc:	4b39      	ldr	r3, [pc, #228]	; (8003ce4 <HAL_RCC_OscConfig+0x470>)
 8003bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c00:	4a38      	ldr	r2, [pc, #224]	; (8003ce4 <HAL_RCC_OscConfig+0x470>)
 8003c02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f000 80a1 	beq.w	8003d54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c12:	4b34      	ldr	r3, [pc, #208]	; (8003ce4 <HAL_RCC_OscConfig+0x470>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f003 030c 	and.w	r3, r3, #12
 8003c1a:	2b08      	cmp	r3, #8
 8003c1c:	d05c      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d141      	bne.n	8003caa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c26:	4b31      	ldr	r3, [pc, #196]	; (8003cec <HAL_RCC_OscConfig+0x478>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c2c:	f7fe fe82 	bl	8002934 <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c32:	e008      	b.n	8003c46 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c34:	f7fe fe7e 	bl	8002934 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e087      	b.n	8003d56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c46:	4b27      	ldr	r3, [pc, #156]	; (8003ce4 <HAL_RCC_OscConfig+0x470>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1f0      	bne.n	8003c34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	69da      	ldr	r2, [r3, #28]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c60:	019b      	lsls	r3, r3, #6
 8003c62:	431a      	orrs	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c68:	085b      	lsrs	r3, r3, #1
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	041b      	lsls	r3, r3, #16
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c74:	061b      	lsls	r3, r3, #24
 8003c76:	491b      	ldr	r1, [pc, #108]	; (8003ce4 <HAL_RCC_OscConfig+0x470>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c7c:	4b1b      	ldr	r3, [pc, #108]	; (8003cec <HAL_RCC_OscConfig+0x478>)
 8003c7e:	2201      	movs	r2, #1
 8003c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c82:	f7fe fe57 	bl	8002934 <HAL_GetTick>
 8003c86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c88:	e008      	b.n	8003c9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c8a:	f7fe fe53 	bl	8002934 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d901      	bls.n	8003c9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e05c      	b.n	8003d56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c9c:	4b11      	ldr	r3, [pc, #68]	; (8003ce4 <HAL_RCC_OscConfig+0x470>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d0f0      	beq.n	8003c8a <HAL_RCC_OscConfig+0x416>
 8003ca8:	e054      	b.n	8003d54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003caa:	4b10      	ldr	r3, [pc, #64]	; (8003cec <HAL_RCC_OscConfig+0x478>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb0:	f7fe fe40 	bl	8002934 <HAL_GetTick>
 8003cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cb8:	f7fe fe3c 	bl	8002934 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e045      	b.n	8003d56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cca:	4b06      	ldr	r3, [pc, #24]	; (8003ce4 <HAL_RCC_OscConfig+0x470>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1f0      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x444>
 8003cd6:	e03d      	b.n	8003d54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d107      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e038      	b.n	8003d56 <HAL_RCC_OscConfig+0x4e2>
 8003ce4:	40023800 	.word	0x40023800
 8003ce8:	40007000 	.word	0x40007000
 8003cec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003cf0:	4b1b      	ldr	r3, [pc, #108]	; (8003d60 <HAL_RCC_OscConfig+0x4ec>)
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d028      	beq.n	8003d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d121      	bne.n	8003d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d11a      	bne.n	8003d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d20:	4013      	ands	r3, r2
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d111      	bne.n	8003d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d36:	085b      	lsrs	r3, r3, #1
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d107      	bne.n	8003d50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d001      	beq.n	8003d54 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e000      	b.n	8003d56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3718      	adds	r7, #24
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	40023800 	.word	0x40023800

08003d64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d101      	bne.n	8003d78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e0cc      	b.n	8003f12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d78:	4b68      	ldr	r3, [pc, #416]	; (8003f1c <HAL_RCC_ClockConfig+0x1b8>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0307 	and.w	r3, r3, #7
 8003d80:	683a      	ldr	r2, [r7, #0]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d90c      	bls.n	8003da0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d86:	4b65      	ldr	r3, [pc, #404]	; (8003f1c <HAL_RCC_ClockConfig+0x1b8>)
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	b2d2      	uxtb	r2, r2
 8003d8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d8e:	4b63      	ldr	r3, [pc, #396]	; (8003f1c <HAL_RCC_ClockConfig+0x1b8>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0307 	and.w	r3, r3, #7
 8003d96:	683a      	ldr	r2, [r7, #0]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d001      	beq.n	8003da0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e0b8      	b.n	8003f12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d020      	beq.n	8003dee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0304 	and.w	r3, r3, #4
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d005      	beq.n	8003dc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003db8:	4b59      	ldr	r3, [pc, #356]	; (8003f20 <HAL_RCC_ClockConfig+0x1bc>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	4a58      	ldr	r2, [pc, #352]	; (8003f20 <HAL_RCC_ClockConfig+0x1bc>)
 8003dbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003dc2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0308 	and.w	r3, r3, #8
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d005      	beq.n	8003ddc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dd0:	4b53      	ldr	r3, [pc, #332]	; (8003f20 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	4a52      	ldr	r2, [pc, #328]	; (8003f20 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003dda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ddc:	4b50      	ldr	r3, [pc, #320]	; (8003f20 <HAL_RCC_ClockConfig+0x1bc>)
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	494d      	ldr	r1, [pc, #308]	; (8003f20 <HAL_RCC_ClockConfig+0x1bc>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d044      	beq.n	8003e84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d107      	bne.n	8003e12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e02:	4b47      	ldr	r3, [pc, #284]	; (8003f20 <HAL_RCC_ClockConfig+0x1bc>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d119      	bne.n	8003e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e07f      	b.n	8003f12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d003      	beq.n	8003e22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e1e:	2b03      	cmp	r3, #3
 8003e20:	d107      	bne.n	8003e32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e22:	4b3f      	ldr	r3, [pc, #252]	; (8003f20 <HAL_RCC_ClockConfig+0x1bc>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d109      	bne.n	8003e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e06f      	b.n	8003f12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e32:	4b3b      	ldr	r3, [pc, #236]	; (8003f20 <HAL_RCC_ClockConfig+0x1bc>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e067      	b.n	8003f12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e42:	4b37      	ldr	r3, [pc, #220]	; (8003f20 <HAL_RCC_ClockConfig+0x1bc>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f023 0203 	bic.w	r2, r3, #3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	4934      	ldr	r1, [pc, #208]	; (8003f20 <HAL_RCC_ClockConfig+0x1bc>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e54:	f7fe fd6e 	bl	8002934 <HAL_GetTick>
 8003e58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e5a:	e00a      	b.n	8003e72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e5c:	f7fe fd6a 	bl	8002934 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e04f      	b.n	8003f12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e72:	4b2b      	ldr	r3, [pc, #172]	; (8003f20 <HAL_RCC_ClockConfig+0x1bc>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f003 020c 	and.w	r2, r3, #12
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d1eb      	bne.n	8003e5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e84:	4b25      	ldr	r3, [pc, #148]	; (8003f1c <HAL_RCC_ClockConfig+0x1b8>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0307 	and.w	r3, r3, #7
 8003e8c:	683a      	ldr	r2, [r7, #0]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d20c      	bcs.n	8003eac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e92:	4b22      	ldr	r3, [pc, #136]	; (8003f1c <HAL_RCC_ClockConfig+0x1b8>)
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	b2d2      	uxtb	r2, r2
 8003e98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e9a:	4b20      	ldr	r3, [pc, #128]	; (8003f1c <HAL_RCC_ClockConfig+0x1b8>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0307 	and.w	r3, r3, #7
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d001      	beq.n	8003eac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e032      	b.n	8003f12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0304 	and.w	r3, r3, #4
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d008      	beq.n	8003eca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003eb8:	4b19      	ldr	r3, [pc, #100]	; (8003f20 <HAL_RCC_ClockConfig+0x1bc>)
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	4916      	ldr	r1, [pc, #88]	; (8003f20 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0308 	and.w	r3, r3, #8
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d009      	beq.n	8003eea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ed6:	4b12      	ldr	r3, [pc, #72]	; (8003f20 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	490e      	ldr	r1, [pc, #56]	; (8003f20 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003eea:	f000 f821 	bl	8003f30 <HAL_RCC_GetSysClockFreq>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	4b0b      	ldr	r3, [pc, #44]	; (8003f20 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	091b      	lsrs	r3, r3, #4
 8003ef6:	f003 030f 	and.w	r3, r3, #15
 8003efa:	490a      	ldr	r1, [pc, #40]	; (8003f24 <HAL_RCC_ClockConfig+0x1c0>)
 8003efc:	5ccb      	ldrb	r3, [r1, r3]
 8003efe:	fa22 f303 	lsr.w	r3, r2, r3
 8003f02:	4a09      	ldr	r2, [pc, #36]	; (8003f28 <HAL_RCC_ClockConfig+0x1c4>)
 8003f04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f06:	4b09      	ldr	r3, [pc, #36]	; (8003f2c <HAL_RCC_ClockConfig+0x1c8>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7fe fcce 	bl	80028ac <HAL_InitTick>

  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	40023c00 	.word	0x40023c00
 8003f20:	40023800 	.word	0x40023800
 8003f24:	08006968 	.word	0x08006968
 8003f28:	20000030 	.word	0x20000030
 8003f2c:	20000034 	.word	0x20000034

08003f30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f34:	b094      	sub	sp, #80	; 0x50
 8003f36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	647b      	str	r3, [r7, #68]	; 0x44
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f40:	2300      	movs	r3, #0
 8003f42:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003f44:	2300      	movs	r3, #0
 8003f46:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f48:	4b79      	ldr	r3, [pc, #484]	; (8004130 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f003 030c 	and.w	r3, r3, #12
 8003f50:	2b08      	cmp	r3, #8
 8003f52:	d00d      	beq.n	8003f70 <HAL_RCC_GetSysClockFreq+0x40>
 8003f54:	2b08      	cmp	r3, #8
 8003f56:	f200 80e1 	bhi.w	800411c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d002      	beq.n	8003f64 <HAL_RCC_GetSysClockFreq+0x34>
 8003f5e:	2b04      	cmp	r3, #4
 8003f60:	d003      	beq.n	8003f6a <HAL_RCC_GetSysClockFreq+0x3a>
 8003f62:	e0db      	b.n	800411c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f64:	4b73      	ldr	r3, [pc, #460]	; (8004134 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f66:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003f68:	e0db      	b.n	8004122 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f6a:	4b73      	ldr	r3, [pc, #460]	; (8004138 <HAL_RCC_GetSysClockFreq+0x208>)
 8003f6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f6e:	e0d8      	b.n	8004122 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f70:	4b6f      	ldr	r3, [pc, #444]	; (8004130 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f78:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f7a:	4b6d      	ldr	r3, [pc, #436]	; (8004130 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d063      	beq.n	800404e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f86:	4b6a      	ldr	r3, [pc, #424]	; (8004130 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	099b      	lsrs	r3, r3, #6
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f90:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f98:	633b      	str	r3, [r7, #48]	; 0x30
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	637b      	str	r3, [r7, #52]	; 0x34
 8003f9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003fa2:	4622      	mov	r2, r4
 8003fa4:	462b      	mov	r3, r5
 8003fa6:	f04f 0000 	mov.w	r0, #0
 8003faa:	f04f 0100 	mov.w	r1, #0
 8003fae:	0159      	lsls	r1, r3, #5
 8003fb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fb4:	0150      	lsls	r0, r2, #5
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	460b      	mov	r3, r1
 8003fba:	4621      	mov	r1, r4
 8003fbc:	1a51      	subs	r1, r2, r1
 8003fbe:	6139      	str	r1, [r7, #16]
 8003fc0:	4629      	mov	r1, r5
 8003fc2:	eb63 0301 	sbc.w	r3, r3, r1
 8003fc6:	617b      	str	r3, [r7, #20]
 8003fc8:	f04f 0200 	mov.w	r2, #0
 8003fcc:	f04f 0300 	mov.w	r3, #0
 8003fd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fd4:	4659      	mov	r1, fp
 8003fd6:	018b      	lsls	r3, r1, #6
 8003fd8:	4651      	mov	r1, sl
 8003fda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fde:	4651      	mov	r1, sl
 8003fe0:	018a      	lsls	r2, r1, #6
 8003fe2:	4651      	mov	r1, sl
 8003fe4:	ebb2 0801 	subs.w	r8, r2, r1
 8003fe8:	4659      	mov	r1, fp
 8003fea:	eb63 0901 	sbc.w	r9, r3, r1
 8003fee:	f04f 0200 	mov.w	r2, #0
 8003ff2:	f04f 0300 	mov.w	r3, #0
 8003ff6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ffa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ffe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004002:	4690      	mov	r8, r2
 8004004:	4699      	mov	r9, r3
 8004006:	4623      	mov	r3, r4
 8004008:	eb18 0303 	adds.w	r3, r8, r3
 800400c:	60bb      	str	r3, [r7, #8]
 800400e:	462b      	mov	r3, r5
 8004010:	eb49 0303 	adc.w	r3, r9, r3
 8004014:	60fb      	str	r3, [r7, #12]
 8004016:	f04f 0200 	mov.w	r2, #0
 800401a:	f04f 0300 	mov.w	r3, #0
 800401e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004022:	4629      	mov	r1, r5
 8004024:	024b      	lsls	r3, r1, #9
 8004026:	4621      	mov	r1, r4
 8004028:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800402c:	4621      	mov	r1, r4
 800402e:	024a      	lsls	r2, r1, #9
 8004030:	4610      	mov	r0, r2
 8004032:	4619      	mov	r1, r3
 8004034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004036:	2200      	movs	r2, #0
 8004038:	62bb      	str	r3, [r7, #40]	; 0x28
 800403a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800403c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004040:	f7fc fd14 	bl	8000a6c <__aeabi_uldivmod>
 8004044:	4602      	mov	r2, r0
 8004046:	460b      	mov	r3, r1
 8004048:	4613      	mov	r3, r2
 800404a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800404c:	e058      	b.n	8004100 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800404e:	4b38      	ldr	r3, [pc, #224]	; (8004130 <HAL_RCC_GetSysClockFreq+0x200>)
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	099b      	lsrs	r3, r3, #6
 8004054:	2200      	movs	r2, #0
 8004056:	4618      	mov	r0, r3
 8004058:	4611      	mov	r1, r2
 800405a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800405e:	623b      	str	r3, [r7, #32]
 8004060:	2300      	movs	r3, #0
 8004062:	627b      	str	r3, [r7, #36]	; 0x24
 8004064:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004068:	4642      	mov	r2, r8
 800406a:	464b      	mov	r3, r9
 800406c:	f04f 0000 	mov.w	r0, #0
 8004070:	f04f 0100 	mov.w	r1, #0
 8004074:	0159      	lsls	r1, r3, #5
 8004076:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800407a:	0150      	lsls	r0, r2, #5
 800407c:	4602      	mov	r2, r0
 800407e:	460b      	mov	r3, r1
 8004080:	4641      	mov	r1, r8
 8004082:	ebb2 0a01 	subs.w	sl, r2, r1
 8004086:	4649      	mov	r1, r9
 8004088:	eb63 0b01 	sbc.w	fp, r3, r1
 800408c:	f04f 0200 	mov.w	r2, #0
 8004090:	f04f 0300 	mov.w	r3, #0
 8004094:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004098:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800409c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80040a0:	ebb2 040a 	subs.w	r4, r2, sl
 80040a4:	eb63 050b 	sbc.w	r5, r3, fp
 80040a8:	f04f 0200 	mov.w	r2, #0
 80040ac:	f04f 0300 	mov.w	r3, #0
 80040b0:	00eb      	lsls	r3, r5, #3
 80040b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040b6:	00e2      	lsls	r2, r4, #3
 80040b8:	4614      	mov	r4, r2
 80040ba:	461d      	mov	r5, r3
 80040bc:	4643      	mov	r3, r8
 80040be:	18e3      	adds	r3, r4, r3
 80040c0:	603b      	str	r3, [r7, #0]
 80040c2:	464b      	mov	r3, r9
 80040c4:	eb45 0303 	adc.w	r3, r5, r3
 80040c8:	607b      	str	r3, [r7, #4]
 80040ca:	f04f 0200 	mov.w	r2, #0
 80040ce:	f04f 0300 	mov.w	r3, #0
 80040d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040d6:	4629      	mov	r1, r5
 80040d8:	028b      	lsls	r3, r1, #10
 80040da:	4621      	mov	r1, r4
 80040dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040e0:	4621      	mov	r1, r4
 80040e2:	028a      	lsls	r2, r1, #10
 80040e4:	4610      	mov	r0, r2
 80040e6:	4619      	mov	r1, r3
 80040e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040ea:	2200      	movs	r2, #0
 80040ec:	61bb      	str	r3, [r7, #24]
 80040ee:	61fa      	str	r2, [r7, #28]
 80040f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040f4:	f7fc fcba 	bl	8000a6c <__aeabi_uldivmod>
 80040f8:	4602      	mov	r2, r0
 80040fa:	460b      	mov	r3, r1
 80040fc:	4613      	mov	r3, r2
 80040fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004100:	4b0b      	ldr	r3, [pc, #44]	; (8004130 <HAL_RCC_GetSysClockFreq+0x200>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	0c1b      	lsrs	r3, r3, #16
 8004106:	f003 0303 	and.w	r3, r3, #3
 800410a:	3301      	adds	r3, #1
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004110:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004112:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004114:	fbb2 f3f3 	udiv	r3, r2, r3
 8004118:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800411a:	e002      	b.n	8004122 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800411c:	4b05      	ldr	r3, [pc, #20]	; (8004134 <HAL_RCC_GetSysClockFreq+0x204>)
 800411e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004120:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004122:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004124:	4618      	mov	r0, r3
 8004126:	3750      	adds	r7, #80	; 0x50
 8004128:	46bd      	mov	sp, r7
 800412a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800412e:	bf00      	nop
 8004130:	40023800 	.word	0x40023800
 8004134:	00f42400 	.word	0x00f42400
 8004138:	007a1200 	.word	0x007a1200

0800413c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800413c:	b480      	push	{r7}
 800413e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004140:	4b03      	ldr	r3, [pc, #12]	; (8004150 <HAL_RCC_GetHCLKFreq+0x14>)
 8004142:	681b      	ldr	r3, [r3, #0]
}
 8004144:	4618      	mov	r0, r3
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	20000030 	.word	0x20000030

08004154 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004158:	f7ff fff0 	bl	800413c <HAL_RCC_GetHCLKFreq>
 800415c:	4602      	mov	r2, r0
 800415e:	4b05      	ldr	r3, [pc, #20]	; (8004174 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	0a9b      	lsrs	r3, r3, #10
 8004164:	f003 0307 	and.w	r3, r3, #7
 8004168:	4903      	ldr	r1, [pc, #12]	; (8004178 <HAL_RCC_GetPCLK1Freq+0x24>)
 800416a:	5ccb      	ldrb	r3, [r1, r3]
 800416c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004170:	4618      	mov	r0, r3
 8004172:	bd80      	pop	{r7, pc}
 8004174:	40023800 	.word	0x40023800
 8004178:	08006978 	.word	0x08006978

0800417c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004180:	f7ff ffdc 	bl	800413c <HAL_RCC_GetHCLKFreq>
 8004184:	4602      	mov	r2, r0
 8004186:	4b05      	ldr	r3, [pc, #20]	; (800419c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	0b5b      	lsrs	r3, r3, #13
 800418c:	f003 0307 	and.w	r3, r3, #7
 8004190:	4903      	ldr	r1, [pc, #12]	; (80041a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004192:	5ccb      	ldrb	r3, [r1, r3]
 8004194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004198:	4618      	mov	r0, r3
 800419a:	bd80      	pop	{r7, pc}
 800419c:	40023800 	.word	0x40023800
 80041a0:	08006978 	.word	0x08006978

080041a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e041      	b.n	800423a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d106      	bne.n	80041d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f7fe f86a 	bl	80022a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2202      	movs	r2, #2
 80041d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	3304      	adds	r3, #4
 80041e0:	4619      	mov	r1, r3
 80041e2:	4610      	mov	r0, r2
 80041e4:	f000 fc34 	bl	8004a50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3708      	adds	r7, #8
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}

08004242 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004242:	b580      	push	{r7, lr}
 8004244:	b082      	sub	sp, #8
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d101      	bne.n	8004254 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e041      	b.n	80042d8 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800425a:	b2db      	uxtb	r3, r3
 800425c:	2b00      	cmp	r3, #0
 800425e:	d106      	bne.n	800426e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 f839 	bl	80042e0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2202      	movs	r2, #2
 8004272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	3304      	adds	r3, #4
 800427e:	4619      	mov	r1, r3
 8004280:	4610      	mov	r0, r2
 8004282:	f000 fbe5 	bl	8004a50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2201      	movs	r2, #1
 80042ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3708      	adds	r7, #8
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042fe:	2300      	movs	r3, #0
 8004300:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d104      	bne.n	8004312 <HAL_TIM_IC_Start_IT+0x1e>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800430e:	b2db      	uxtb	r3, r3
 8004310:	e013      	b.n	800433a <HAL_TIM_IC_Start_IT+0x46>
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	2b04      	cmp	r3, #4
 8004316:	d104      	bne.n	8004322 <HAL_TIM_IC_Start_IT+0x2e>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800431e:	b2db      	uxtb	r3, r3
 8004320:	e00b      	b.n	800433a <HAL_TIM_IC_Start_IT+0x46>
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	2b08      	cmp	r3, #8
 8004326:	d104      	bne.n	8004332 <HAL_TIM_IC_Start_IT+0x3e>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800432e:	b2db      	uxtb	r3, r3
 8004330:	e003      	b.n	800433a <HAL_TIM_IC_Start_IT+0x46>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004338:	b2db      	uxtb	r3, r3
 800433a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d104      	bne.n	800434c <HAL_TIM_IC_Start_IT+0x58>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004348:	b2db      	uxtb	r3, r3
 800434a:	e013      	b.n	8004374 <HAL_TIM_IC_Start_IT+0x80>
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	2b04      	cmp	r3, #4
 8004350:	d104      	bne.n	800435c <HAL_TIM_IC_Start_IT+0x68>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004358:	b2db      	uxtb	r3, r3
 800435a:	e00b      	b.n	8004374 <HAL_TIM_IC_Start_IT+0x80>
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	2b08      	cmp	r3, #8
 8004360:	d104      	bne.n	800436c <HAL_TIM_IC_Start_IT+0x78>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004368:	b2db      	uxtb	r3, r3
 800436a:	e003      	b.n	8004374 <HAL_TIM_IC_Start_IT+0x80>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004372:	b2db      	uxtb	r3, r3
 8004374:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004376:	7bbb      	ldrb	r3, [r7, #14]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d102      	bne.n	8004382 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800437c:	7b7b      	ldrb	r3, [r7, #13]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d001      	beq.n	8004386 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e0c2      	b.n	800450c <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d104      	bne.n	8004396 <HAL_TIM_IC_Start_IT+0xa2>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2202      	movs	r2, #2
 8004390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004394:	e013      	b.n	80043be <HAL_TIM_IC_Start_IT+0xca>
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	2b04      	cmp	r3, #4
 800439a:	d104      	bne.n	80043a6 <HAL_TIM_IC_Start_IT+0xb2>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2202      	movs	r2, #2
 80043a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043a4:	e00b      	b.n	80043be <HAL_TIM_IC_Start_IT+0xca>
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	2b08      	cmp	r3, #8
 80043aa:	d104      	bne.n	80043b6 <HAL_TIM_IC_Start_IT+0xc2>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2202      	movs	r2, #2
 80043b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043b4:	e003      	b.n	80043be <HAL_TIM_IC_Start_IT+0xca>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2202      	movs	r2, #2
 80043ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d104      	bne.n	80043ce <HAL_TIM_IC_Start_IT+0xda>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2202      	movs	r2, #2
 80043c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043cc:	e013      	b.n	80043f6 <HAL_TIM_IC_Start_IT+0x102>
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	2b04      	cmp	r3, #4
 80043d2:	d104      	bne.n	80043de <HAL_TIM_IC_Start_IT+0xea>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2202      	movs	r2, #2
 80043d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043dc:	e00b      	b.n	80043f6 <HAL_TIM_IC_Start_IT+0x102>
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	2b08      	cmp	r3, #8
 80043e2:	d104      	bne.n	80043ee <HAL_TIM_IC_Start_IT+0xfa>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2202      	movs	r2, #2
 80043e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043ec:	e003      	b.n	80043f6 <HAL_TIM_IC_Start_IT+0x102>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2202      	movs	r2, #2
 80043f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2b0c      	cmp	r3, #12
 80043fa:	d841      	bhi.n	8004480 <HAL_TIM_IC_Start_IT+0x18c>
 80043fc:	a201      	add	r2, pc, #4	; (adr r2, 8004404 <HAL_TIM_IC_Start_IT+0x110>)
 80043fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004402:	bf00      	nop
 8004404:	08004439 	.word	0x08004439
 8004408:	08004481 	.word	0x08004481
 800440c:	08004481 	.word	0x08004481
 8004410:	08004481 	.word	0x08004481
 8004414:	0800444b 	.word	0x0800444b
 8004418:	08004481 	.word	0x08004481
 800441c:	08004481 	.word	0x08004481
 8004420:	08004481 	.word	0x08004481
 8004424:	0800445d 	.word	0x0800445d
 8004428:	08004481 	.word	0x08004481
 800442c:	08004481 	.word	0x08004481
 8004430:	08004481 	.word	0x08004481
 8004434:	0800446f 	.word	0x0800446f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68da      	ldr	r2, [r3, #12]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f042 0202 	orr.w	r2, r2, #2
 8004446:	60da      	str	r2, [r3, #12]
      break;
 8004448:	e01d      	b.n	8004486 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68da      	ldr	r2, [r3, #12]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f042 0204 	orr.w	r2, r2, #4
 8004458:	60da      	str	r2, [r3, #12]
      break;
 800445a:	e014      	b.n	8004486 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68da      	ldr	r2, [r3, #12]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f042 0208 	orr.w	r2, r2, #8
 800446a:	60da      	str	r2, [r3, #12]
      break;
 800446c:	e00b      	b.n	8004486 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68da      	ldr	r2, [r3, #12]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f042 0210 	orr.w	r2, r2, #16
 800447c:	60da      	str	r2, [r3, #12]
      break;
 800447e:	e002      	b.n	8004486 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	73fb      	strb	r3, [r7, #15]
      break;
 8004484:	bf00      	nop
  }

  if (status == HAL_OK)
 8004486:	7bfb      	ldrb	r3, [r7, #15]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d13e      	bne.n	800450a <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2201      	movs	r2, #1
 8004492:	6839      	ldr	r1, [r7, #0]
 8004494:	4618      	mov	r0, r3
 8004496:	f000 fd13 	bl	8004ec0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a1d      	ldr	r2, [pc, #116]	; (8004514 <HAL_TIM_IC_Start_IT+0x220>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d018      	beq.n	80044d6 <HAL_TIM_IC_Start_IT+0x1e2>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ac:	d013      	beq.n	80044d6 <HAL_TIM_IC_Start_IT+0x1e2>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a19      	ldr	r2, [pc, #100]	; (8004518 <HAL_TIM_IC_Start_IT+0x224>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d00e      	beq.n	80044d6 <HAL_TIM_IC_Start_IT+0x1e2>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a17      	ldr	r2, [pc, #92]	; (800451c <HAL_TIM_IC_Start_IT+0x228>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d009      	beq.n	80044d6 <HAL_TIM_IC_Start_IT+0x1e2>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a16      	ldr	r2, [pc, #88]	; (8004520 <HAL_TIM_IC_Start_IT+0x22c>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d004      	beq.n	80044d6 <HAL_TIM_IC_Start_IT+0x1e2>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a14      	ldr	r2, [pc, #80]	; (8004524 <HAL_TIM_IC_Start_IT+0x230>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d111      	bne.n	80044fa <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f003 0307 	and.w	r3, r3, #7
 80044e0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	2b06      	cmp	r3, #6
 80044e6:	d010      	beq.n	800450a <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f042 0201 	orr.w	r2, r2, #1
 80044f6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044f8:	e007      	b.n	800450a <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f042 0201 	orr.w	r2, r2, #1
 8004508:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800450a:	7bfb      	ldrb	r3, [r7, #15]
}
 800450c:	4618      	mov	r0, r3
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	40010000 	.word	0x40010000
 8004518:	40000400 	.word	0x40000400
 800451c:	40000800 	.word	0x40000800
 8004520:	40000c00 	.word	0x40000c00
 8004524:	40014000 	.word	0x40014000

08004528 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b02      	cmp	r3, #2
 800453c:	d122      	bne.n	8004584 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b02      	cmp	r3, #2
 800454a:	d11b      	bne.n	8004584 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f06f 0202 	mvn.w	r2, #2
 8004554:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2201      	movs	r2, #1
 800455a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	f003 0303 	and.w	r3, r3, #3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7fc ff64 	bl	8001438 <HAL_TIM_IC_CaptureCallback>
 8004570:	e005      	b.n	800457e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 fa4d 	bl	8004a12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 fa54 	bl	8004a26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	f003 0304 	and.w	r3, r3, #4
 800458e:	2b04      	cmp	r3, #4
 8004590:	d122      	bne.n	80045d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	f003 0304 	and.w	r3, r3, #4
 800459c:	2b04      	cmp	r3, #4
 800459e:	d11b      	bne.n	80045d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f06f 0204 	mvn.w	r2, #4
 80045a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2202      	movs	r2, #2
 80045ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d003      	beq.n	80045c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f7fc ff3a 	bl	8001438 <HAL_TIM_IC_CaptureCallback>
 80045c4:	e005      	b.n	80045d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 fa23 	bl	8004a12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 fa2a 	bl	8004a26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	f003 0308 	and.w	r3, r3, #8
 80045e2:	2b08      	cmp	r3, #8
 80045e4:	d122      	bne.n	800462c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	f003 0308 	and.w	r3, r3, #8
 80045f0:	2b08      	cmp	r3, #8
 80045f2:	d11b      	bne.n	800462c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f06f 0208 	mvn.w	r2, #8
 80045fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2204      	movs	r2, #4
 8004602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	69db      	ldr	r3, [r3, #28]
 800460a:	f003 0303 	and.w	r3, r3, #3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d003      	beq.n	800461a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f7fc ff10 	bl	8001438 <HAL_TIM_IC_CaptureCallback>
 8004618:	e005      	b.n	8004626 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f9f9 	bl	8004a12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 fa00 	bl	8004a26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	f003 0310 	and.w	r3, r3, #16
 8004636:	2b10      	cmp	r3, #16
 8004638:	d122      	bne.n	8004680 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	f003 0310 	and.w	r3, r3, #16
 8004644:	2b10      	cmp	r3, #16
 8004646:	d11b      	bne.n	8004680 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f06f 0210 	mvn.w	r2, #16
 8004650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2208      	movs	r2, #8
 8004656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	69db      	ldr	r3, [r3, #28]
 800465e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004662:	2b00      	cmp	r3, #0
 8004664:	d003      	beq.n	800466e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7fc fee6 	bl	8001438 <HAL_TIM_IC_CaptureCallback>
 800466c:	e005      	b.n	800467a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f9cf 	bl	8004a12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 f9d6 	bl	8004a26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b01      	cmp	r3, #1
 800468c:	d10e      	bne.n	80046ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	f003 0301 	and.w	r3, r3, #1
 8004698:	2b01      	cmp	r3, #1
 800469a:	d107      	bne.n	80046ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f06f 0201 	mvn.w	r2, #1
 80046a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 f9a9 	bl	80049fe <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046b6:	2b80      	cmp	r3, #128	; 0x80
 80046b8:	d10e      	bne.n	80046d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c4:	2b80      	cmp	r3, #128	; 0x80
 80046c6:	d107      	bne.n	80046d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80046d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 fc92 	bl	8004ffc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e2:	2b40      	cmp	r3, #64	; 0x40
 80046e4:	d10e      	bne.n	8004704 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f0:	2b40      	cmp	r3, #64	; 0x40
 80046f2:	d107      	bne.n	8004704 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f99b 	bl	8004a3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	f003 0320 	and.w	r3, r3, #32
 800470e:	2b20      	cmp	r3, #32
 8004710:	d10e      	bne.n	8004730 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	f003 0320 	and.w	r3, r3, #32
 800471c:	2b20      	cmp	r3, #32
 800471e:	d107      	bne.n	8004730 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f06f 0220 	mvn.w	r2, #32
 8004728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 fc5c 	bl	8004fe8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004730:	bf00      	nop
 8004732:	3708      	adds	r7, #8
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004744:	2300      	movs	r3, #0
 8004746:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800474e:	2b01      	cmp	r3, #1
 8004750:	d101      	bne.n	8004756 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004752:	2302      	movs	r3, #2
 8004754:	e088      	b.n	8004868 <HAL_TIM_IC_ConfigChannel+0x130>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d11b      	bne.n	800479c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6818      	ldr	r0, [r3, #0]
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	6819      	ldr	r1, [r3, #0]
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	685a      	ldr	r2, [r3, #4]
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	f000 f9ec 	bl	8004b50 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	699a      	ldr	r2, [r3, #24]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f022 020c 	bic.w	r2, r2, #12
 8004786:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6999      	ldr	r1, [r3, #24]
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	689a      	ldr	r2, [r3, #8]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	430a      	orrs	r2, r1
 8004798:	619a      	str	r2, [r3, #24]
 800479a:	e060      	b.n	800485e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2b04      	cmp	r3, #4
 80047a0:	d11c      	bne.n	80047dc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6818      	ldr	r0, [r3, #0]
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	6819      	ldr	r1, [r3, #0]
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	685a      	ldr	r2, [r3, #4]
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	f000 fa64 	bl	8004c7e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	699a      	ldr	r2, [r3, #24]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80047c4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	6999      	ldr	r1, [r3, #24]
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	021a      	lsls	r2, r3, #8
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	619a      	str	r2, [r3, #24]
 80047da:	e040      	b.n	800485e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2b08      	cmp	r3, #8
 80047e0:	d11b      	bne.n	800481a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6818      	ldr	r0, [r3, #0]
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	6819      	ldr	r1, [r3, #0]
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	685a      	ldr	r2, [r3, #4]
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	f000 fab1 	bl	8004d58 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	69da      	ldr	r2, [r3, #28]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f022 020c 	bic.w	r2, r2, #12
 8004804:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	69d9      	ldr	r1, [r3, #28]
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	689a      	ldr	r2, [r3, #8]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	430a      	orrs	r2, r1
 8004816:	61da      	str	r2, [r3, #28]
 8004818:	e021      	b.n	800485e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2b0c      	cmp	r3, #12
 800481e:	d11c      	bne.n	800485a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6818      	ldr	r0, [r3, #0]
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	6819      	ldr	r1, [r3, #0]
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	f000 face 	bl	8004dd0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	69da      	ldr	r2, [r3, #28]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004842:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	69d9      	ldr	r1, [r3, #28]
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	021a      	lsls	r2, r3, #8
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	430a      	orrs	r2, r1
 8004856:	61da      	str	r2, [r3, #28]
 8004858:	e001      	b.n	800485e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004866:	7dfb      	ldrb	r3, [r7, #23]
}
 8004868:	4618      	mov	r0, r3
 800486a:	3718      	adds	r7, #24
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800487a:	2300      	movs	r3, #0
 800487c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004884:	2b01      	cmp	r3, #1
 8004886:	d101      	bne.n	800488c <HAL_TIM_ConfigClockSource+0x1c>
 8004888:	2302      	movs	r3, #2
 800488a:	e0b4      	b.n	80049f6 <HAL_TIM_ConfigClockSource+0x186>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2202      	movs	r2, #2
 8004898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80048aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048c4:	d03e      	beq.n	8004944 <HAL_TIM_ConfigClockSource+0xd4>
 80048c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048ca:	f200 8087 	bhi.w	80049dc <HAL_TIM_ConfigClockSource+0x16c>
 80048ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048d2:	f000 8086 	beq.w	80049e2 <HAL_TIM_ConfigClockSource+0x172>
 80048d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048da:	d87f      	bhi.n	80049dc <HAL_TIM_ConfigClockSource+0x16c>
 80048dc:	2b70      	cmp	r3, #112	; 0x70
 80048de:	d01a      	beq.n	8004916 <HAL_TIM_ConfigClockSource+0xa6>
 80048e0:	2b70      	cmp	r3, #112	; 0x70
 80048e2:	d87b      	bhi.n	80049dc <HAL_TIM_ConfigClockSource+0x16c>
 80048e4:	2b60      	cmp	r3, #96	; 0x60
 80048e6:	d050      	beq.n	800498a <HAL_TIM_ConfigClockSource+0x11a>
 80048e8:	2b60      	cmp	r3, #96	; 0x60
 80048ea:	d877      	bhi.n	80049dc <HAL_TIM_ConfigClockSource+0x16c>
 80048ec:	2b50      	cmp	r3, #80	; 0x50
 80048ee:	d03c      	beq.n	800496a <HAL_TIM_ConfigClockSource+0xfa>
 80048f0:	2b50      	cmp	r3, #80	; 0x50
 80048f2:	d873      	bhi.n	80049dc <HAL_TIM_ConfigClockSource+0x16c>
 80048f4:	2b40      	cmp	r3, #64	; 0x40
 80048f6:	d058      	beq.n	80049aa <HAL_TIM_ConfigClockSource+0x13a>
 80048f8:	2b40      	cmp	r3, #64	; 0x40
 80048fa:	d86f      	bhi.n	80049dc <HAL_TIM_ConfigClockSource+0x16c>
 80048fc:	2b30      	cmp	r3, #48	; 0x30
 80048fe:	d064      	beq.n	80049ca <HAL_TIM_ConfigClockSource+0x15a>
 8004900:	2b30      	cmp	r3, #48	; 0x30
 8004902:	d86b      	bhi.n	80049dc <HAL_TIM_ConfigClockSource+0x16c>
 8004904:	2b20      	cmp	r3, #32
 8004906:	d060      	beq.n	80049ca <HAL_TIM_ConfigClockSource+0x15a>
 8004908:	2b20      	cmp	r3, #32
 800490a:	d867      	bhi.n	80049dc <HAL_TIM_ConfigClockSource+0x16c>
 800490c:	2b00      	cmp	r3, #0
 800490e:	d05c      	beq.n	80049ca <HAL_TIM_ConfigClockSource+0x15a>
 8004910:	2b10      	cmp	r3, #16
 8004912:	d05a      	beq.n	80049ca <HAL_TIM_ConfigClockSource+0x15a>
 8004914:	e062      	b.n	80049dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6818      	ldr	r0, [r3, #0]
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	6899      	ldr	r1, [r3, #8]
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	685a      	ldr	r2, [r3, #4]
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	f000 faab 	bl	8004e80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004938:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68ba      	ldr	r2, [r7, #8]
 8004940:	609a      	str	r2, [r3, #8]
      break;
 8004942:	e04f      	b.n	80049e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6818      	ldr	r0, [r3, #0]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	6899      	ldr	r1, [r3, #8]
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	685a      	ldr	r2, [r3, #4]
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	f000 fa94 	bl	8004e80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689a      	ldr	r2, [r3, #8]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004966:	609a      	str	r2, [r3, #8]
      break;
 8004968:	e03c      	b.n	80049e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6818      	ldr	r0, [r3, #0]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	6859      	ldr	r1, [r3, #4]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	461a      	mov	r2, r3
 8004978:	f000 f952 	bl	8004c20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2150      	movs	r1, #80	; 0x50
 8004982:	4618      	mov	r0, r3
 8004984:	f000 fa61 	bl	8004e4a <TIM_ITRx_SetConfig>
      break;
 8004988:	e02c      	b.n	80049e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6818      	ldr	r0, [r3, #0]
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	6859      	ldr	r1, [r3, #4]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	461a      	mov	r2, r3
 8004998:	f000 f9ae 	bl	8004cf8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2160      	movs	r1, #96	; 0x60
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 fa51 	bl	8004e4a <TIM_ITRx_SetConfig>
      break;
 80049a8:	e01c      	b.n	80049e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6818      	ldr	r0, [r3, #0]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	6859      	ldr	r1, [r3, #4]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	461a      	mov	r2, r3
 80049b8:	f000 f932 	bl	8004c20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2140      	movs	r1, #64	; 0x40
 80049c2:	4618      	mov	r0, r3
 80049c4:	f000 fa41 	bl	8004e4a <TIM_ITRx_SetConfig>
      break;
 80049c8:	e00c      	b.n	80049e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4619      	mov	r1, r3
 80049d4:	4610      	mov	r0, r2
 80049d6:	f000 fa38 	bl	8004e4a <TIM_ITRx_SetConfig>
      break;
 80049da:	e003      	b.n	80049e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	73fb      	strb	r3, [r7, #15]
      break;
 80049e0:	e000      	b.n	80049e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80049e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049fe:	b480      	push	{r7}
 8004a00:	b083      	sub	sp, #12
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004a06:	bf00      	nop
 8004a08:	370c      	adds	r7, #12
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr

08004a12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a12:	b480      	push	{r7}
 8004a14:	b083      	sub	sp, #12
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a1a:	bf00      	nop
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr

08004a26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a26:	b480      	push	{r7}
 8004a28:	b083      	sub	sp, #12
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a2e:	bf00      	nop
 8004a30:	370c      	adds	r7, #12
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr

08004a3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b083      	sub	sp, #12
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a42:	bf00      	nop
 8004a44:	370c      	adds	r7, #12
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
	...

08004a50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a34      	ldr	r2, [pc, #208]	; (8004b34 <TIM_Base_SetConfig+0xe4>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d00f      	beq.n	8004a88 <TIM_Base_SetConfig+0x38>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a6e:	d00b      	beq.n	8004a88 <TIM_Base_SetConfig+0x38>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a31      	ldr	r2, [pc, #196]	; (8004b38 <TIM_Base_SetConfig+0xe8>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d007      	beq.n	8004a88 <TIM_Base_SetConfig+0x38>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a30      	ldr	r2, [pc, #192]	; (8004b3c <TIM_Base_SetConfig+0xec>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d003      	beq.n	8004a88 <TIM_Base_SetConfig+0x38>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a2f      	ldr	r2, [pc, #188]	; (8004b40 <TIM_Base_SetConfig+0xf0>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d108      	bne.n	8004a9a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a25      	ldr	r2, [pc, #148]	; (8004b34 <TIM_Base_SetConfig+0xe4>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d01b      	beq.n	8004ada <TIM_Base_SetConfig+0x8a>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aa8:	d017      	beq.n	8004ada <TIM_Base_SetConfig+0x8a>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a22      	ldr	r2, [pc, #136]	; (8004b38 <TIM_Base_SetConfig+0xe8>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d013      	beq.n	8004ada <TIM_Base_SetConfig+0x8a>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a21      	ldr	r2, [pc, #132]	; (8004b3c <TIM_Base_SetConfig+0xec>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d00f      	beq.n	8004ada <TIM_Base_SetConfig+0x8a>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a20      	ldr	r2, [pc, #128]	; (8004b40 <TIM_Base_SetConfig+0xf0>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d00b      	beq.n	8004ada <TIM_Base_SetConfig+0x8a>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a1f      	ldr	r2, [pc, #124]	; (8004b44 <TIM_Base_SetConfig+0xf4>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d007      	beq.n	8004ada <TIM_Base_SetConfig+0x8a>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a1e      	ldr	r2, [pc, #120]	; (8004b48 <TIM_Base_SetConfig+0xf8>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d003      	beq.n	8004ada <TIM_Base_SetConfig+0x8a>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a1d      	ldr	r2, [pc, #116]	; (8004b4c <TIM_Base_SetConfig+0xfc>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d108      	bne.n	8004aec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ae0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	689a      	ldr	r2, [r3, #8]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a08      	ldr	r2, [pc, #32]	; (8004b34 <TIM_Base_SetConfig+0xe4>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d103      	bne.n	8004b20 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	691a      	ldr	r2, [r3, #16]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	615a      	str	r2, [r3, #20]
}
 8004b26:	bf00      	nop
 8004b28:	3714      	adds	r7, #20
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	40010000 	.word	0x40010000
 8004b38:	40000400 	.word	0x40000400
 8004b3c:	40000800 	.word	0x40000800
 8004b40:	40000c00 	.word	0x40000c00
 8004b44:	40014000 	.word	0x40014000
 8004b48:	40014400 	.word	0x40014400
 8004b4c:	40014800 	.word	0x40014800

08004b50 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b087      	sub	sp, #28
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
 8004b5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	f023 0201 	bic.w	r2, r3, #1
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6a1b      	ldr	r3, [r3, #32]
 8004b74:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	4a24      	ldr	r2, [pc, #144]	; (8004c0c <TIM_TI1_SetConfig+0xbc>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d013      	beq.n	8004ba6 <TIM_TI1_SetConfig+0x56>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b84:	d00f      	beq.n	8004ba6 <TIM_TI1_SetConfig+0x56>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	4a21      	ldr	r2, [pc, #132]	; (8004c10 <TIM_TI1_SetConfig+0xc0>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d00b      	beq.n	8004ba6 <TIM_TI1_SetConfig+0x56>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	4a20      	ldr	r2, [pc, #128]	; (8004c14 <TIM_TI1_SetConfig+0xc4>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d007      	beq.n	8004ba6 <TIM_TI1_SetConfig+0x56>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	4a1f      	ldr	r2, [pc, #124]	; (8004c18 <TIM_TI1_SetConfig+0xc8>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d003      	beq.n	8004ba6 <TIM_TI1_SetConfig+0x56>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	4a1e      	ldr	r2, [pc, #120]	; (8004c1c <TIM_TI1_SetConfig+0xcc>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d101      	bne.n	8004baa <TIM_TI1_SetConfig+0x5a>
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e000      	b.n	8004bac <TIM_TI1_SetConfig+0x5c>
 8004baa:	2300      	movs	r3, #0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d008      	beq.n	8004bc2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	f023 0303 	bic.w	r3, r3, #3
 8004bb6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	617b      	str	r3, [r7, #20]
 8004bc0:	e003      	b.n	8004bca <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f043 0301 	orr.w	r3, r3, #1
 8004bc8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bd0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	011b      	lsls	r3, r3, #4
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	697a      	ldr	r2, [r7, #20]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	f023 030a 	bic.w	r3, r3, #10
 8004be4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	f003 030a 	and.w	r3, r3, #10
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	697a      	ldr	r2, [r7, #20]
 8004bf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	693a      	ldr	r2, [r7, #16]
 8004bfc:	621a      	str	r2, [r3, #32]
}
 8004bfe:	bf00      	nop
 8004c00:	371c      	adds	r7, #28
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	40010000 	.word	0x40010000
 8004c10:	40000400 	.word	0x40000400
 8004c14:	40000800 	.word	0x40000800
 8004c18:	40000c00 	.word	0x40000c00
 8004c1c:	40014000 	.word	0x40014000

08004c20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b087      	sub	sp, #28
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6a1b      	ldr	r3, [r3, #32]
 8004c30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	f023 0201 	bic.w	r2, r3, #1
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	011b      	lsls	r3, r3, #4
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	f023 030a 	bic.w	r3, r3, #10
 8004c5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	621a      	str	r2, [r3, #32]
}
 8004c72:	bf00      	nop
 8004c74:	371c      	adds	r7, #28
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr

08004c7e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b087      	sub	sp, #28
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	60f8      	str	r0, [r7, #12]
 8004c86:	60b9      	str	r1, [r7, #8]
 8004c88:	607a      	str	r2, [r7, #4]
 8004c8a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6a1b      	ldr	r3, [r3, #32]
 8004c90:	f023 0210 	bic.w	r2, r3, #16
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004caa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	021b      	lsls	r3, r3, #8
 8004cb0:	697a      	ldr	r2, [r7, #20]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004cbc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	031b      	lsls	r3, r3, #12
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	697a      	ldr	r2, [r7, #20]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004cd0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	011b      	lsls	r3, r3, #4
 8004cd6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	621a      	str	r2, [r3, #32]
}
 8004cec:	bf00      	nop
 8004cee:	371c      	adds	r7, #28
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b087      	sub	sp, #28
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6a1b      	ldr	r3, [r3, #32]
 8004d08:	f023 0210 	bic.w	r2, r3, #16
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	699b      	ldr	r3, [r3, #24]
 8004d14:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d22:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	031b      	lsls	r3, r3, #12
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d34:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	011b      	lsls	r3, r3, #4
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	621a      	str	r2, [r3, #32]
}
 8004d4c:	bf00      	nop
 8004d4e:	371c      	adds	r7, #28
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b087      	sub	sp, #28
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
 8004d64:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	69db      	ldr	r3, [r3, #28]
 8004d76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6a1b      	ldr	r3, [r3, #32]
 8004d7c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f023 0303 	bic.w	r3, r3, #3
 8004d84:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004d86:	697a      	ldr	r2, [r7, #20]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d94:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	011b      	lsls	r3, r3, #4
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	697a      	ldr	r2, [r7, #20]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004da8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	021b      	lsls	r3, r3, #8
 8004dae:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	621a      	str	r2, [r3, #32]
}
 8004dc4:	bf00      	nop
 8004dc6:	371c      	adds	r7, #28
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b087      	sub	sp, #28
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]
 8004ddc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	69db      	ldr	r3, [r3, #28]
 8004dee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dfc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	021b      	lsls	r3, r3, #8
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e0e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	031b      	lsls	r3, r3, #12
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004e22:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	031b      	lsls	r3, r3, #12
 8004e28:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	697a      	ldr	r2, [r7, #20]
 8004e36:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	621a      	str	r2, [r3, #32]
}
 8004e3e:	bf00      	nop
 8004e40:	371c      	adds	r7, #28
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr

08004e4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	b085      	sub	sp, #20
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
 8004e52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e62:	683a      	ldr	r2, [r7, #0]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	f043 0307 	orr.w	r3, r3, #7
 8004e6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	609a      	str	r2, [r3, #8]
}
 8004e74:	bf00      	nop
 8004e76:	3714      	adds	r7, #20
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b087      	sub	sp, #28
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
 8004e8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	021a      	lsls	r2, r3, #8
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	609a      	str	r2, [r3, #8]
}
 8004eb4:	bf00      	nop
 8004eb6:	371c      	adds	r7, #28
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b087      	sub	sp, #28
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	f003 031f 	and.w	r3, r3, #31
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6a1a      	ldr	r2, [r3, #32]
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	43db      	mvns	r3, r3
 8004ee2:	401a      	ands	r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6a1a      	ldr	r2, [r3, #32]
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	f003 031f 	and.w	r3, r3, #31
 8004ef2:	6879      	ldr	r1, [r7, #4]
 8004ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ef8:	431a      	orrs	r2, r3
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	621a      	str	r2, [r3, #32]
}
 8004efe:	bf00      	nop
 8004f00:	371c      	adds	r7, #28
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
	...

08004f0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d101      	bne.n	8004f24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f20:	2302      	movs	r3, #2
 8004f22:	e050      	b.n	8004fc6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2202      	movs	r2, #2
 8004f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a1c      	ldr	r2, [pc, #112]	; (8004fd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d018      	beq.n	8004f9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f70:	d013      	beq.n	8004f9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a18      	ldr	r2, [pc, #96]	; (8004fd8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d00e      	beq.n	8004f9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a16      	ldr	r2, [pc, #88]	; (8004fdc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d009      	beq.n	8004f9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a15      	ldr	r2, [pc, #84]	; (8004fe0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d004      	beq.n	8004f9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a13      	ldr	r2, [pc, #76]	; (8004fe4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d10c      	bne.n	8004fb4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fa0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	68ba      	ldr	r2, [r7, #8]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68ba      	ldr	r2, [r7, #8]
 8004fb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3714      	adds	r7, #20
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	40010000 	.word	0x40010000
 8004fd8:	40000400 	.word	0x40000400
 8004fdc:	40000800 	.word	0x40000800
 8004fe0:	40000c00 	.word	0x40000c00
 8004fe4:	40014000 	.word	0x40014000

08004fe8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ff0:	bf00      	nop
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d101      	bne.n	8005022 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e03f      	b.n	80050a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005028:	b2db      	uxtb	r3, r3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d106      	bne.n	800503c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7fd f998 	bl	800236c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2224      	movs	r2, #36	; 0x24
 8005040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68da      	ldr	r2, [r3, #12]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005052:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 fd23 	bl	8005aa0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	691a      	ldr	r2, [r3, #16]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005068:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	695a      	ldr	r2, [r3, #20]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005078:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68da      	ldr	r2, [r3, #12]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005088:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2220      	movs	r2, #32
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2220      	movs	r2, #32
 800509c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3708      	adds	r7, #8
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}

080050aa <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80050aa:	b480      	push	{r7}
 80050ac:	b085      	sub	sp, #20
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	60f8      	str	r0, [r7, #12]
 80050b2:	60b9      	str	r1, [r7, #8]
 80050b4:	4613      	mov	r3, r2
 80050b6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	2b20      	cmp	r3, #32
 80050c2:	d130      	bne.n	8005126 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d002      	beq.n	80050d0 <HAL_UART_Transmit_IT+0x26>
 80050ca:	88fb      	ldrh	r3, [r7, #6]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d101      	bne.n	80050d4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e029      	b.n	8005128 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d101      	bne.n	80050e2 <HAL_UART_Transmit_IT+0x38>
 80050de:	2302      	movs	r3, #2
 80050e0:	e022      	b.n	8005128 <HAL_UART_Transmit_IT+0x7e>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2201      	movs	r2, #1
 80050e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	68ba      	ldr	r2, [r7, #8]
 80050ee:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	88fa      	ldrh	r2, [r7, #6]
 80050f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	88fa      	ldrh	r2, [r7, #6]
 80050fa:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2221      	movs	r2, #33	; 0x21
 8005106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68da      	ldr	r2, [r3, #12]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005120:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005122:	2300      	movs	r3, #0
 8005124:	e000      	b.n	8005128 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005126:	2302      	movs	r3, #2
  }
}
 8005128:	4618      	mov	r0, r3
 800512a:	3714      	adds	r7, #20
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	4613      	mov	r3, r2
 8005140:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005148:	b2db      	uxtb	r3, r3
 800514a:	2b20      	cmp	r3, #32
 800514c:	d11d      	bne.n	800518a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d002      	beq.n	800515a <HAL_UART_Receive_IT+0x26>
 8005154:	88fb      	ldrh	r3, [r7, #6]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e016      	b.n	800518c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005164:	2b01      	cmp	r3, #1
 8005166:	d101      	bne.n	800516c <HAL_UART_Receive_IT+0x38>
 8005168:	2302      	movs	r3, #2
 800516a:	e00f      	b.n	800518c <HAL_UART_Receive_IT+0x58>
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800517a:	88fb      	ldrh	r3, [r7, #6]
 800517c:	461a      	mov	r2, r3
 800517e:	68b9      	ldr	r1, [r7, #8]
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f000 fab5 	bl	80056f0 <UART_Start_Receive_IT>
 8005186:	4603      	mov	r3, r0
 8005188:	e000      	b.n	800518c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800518a:	2302      	movs	r3, #2
  }
}
 800518c:	4618      	mov	r0, r3
 800518e:	3710      	adds	r7, #16
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b0ba      	sub	sp, #232	; 0xe8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80051ba:	2300      	movs	r3, #0
 80051bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80051c0:	2300      	movs	r3, #0
 80051c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80051c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051ca:	f003 030f 	and.w	r3, r3, #15
 80051ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80051d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d10f      	bne.n	80051fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051de:	f003 0320 	and.w	r3, r3, #32
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d009      	beq.n	80051fa <HAL_UART_IRQHandler+0x66>
 80051e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051ea:	f003 0320 	and.w	r3, r3, #32
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d003      	beq.n	80051fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 fb99 	bl	800592a <UART_Receive_IT>
      return;
 80051f8:	e256      	b.n	80056a8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80051fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051fe:	2b00      	cmp	r3, #0
 8005200:	f000 80de 	beq.w	80053c0 <HAL_UART_IRQHandler+0x22c>
 8005204:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005208:	f003 0301 	and.w	r3, r3, #1
 800520c:	2b00      	cmp	r3, #0
 800520e:	d106      	bne.n	800521e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005214:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005218:	2b00      	cmp	r3, #0
 800521a:	f000 80d1 	beq.w	80053c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800521e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005222:	f003 0301 	and.w	r3, r3, #1
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00b      	beq.n	8005242 <HAL_UART_IRQHandler+0xae>
 800522a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800522e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005232:	2b00      	cmp	r3, #0
 8005234:	d005      	beq.n	8005242 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523a:	f043 0201 	orr.w	r2, r3, #1
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005246:	f003 0304 	and.w	r3, r3, #4
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00b      	beq.n	8005266 <HAL_UART_IRQHandler+0xd2>
 800524e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005252:	f003 0301 	and.w	r3, r3, #1
 8005256:	2b00      	cmp	r3, #0
 8005258:	d005      	beq.n	8005266 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525e:	f043 0202 	orr.w	r2, r3, #2
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00b      	beq.n	800528a <HAL_UART_IRQHandler+0xf6>
 8005272:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005276:	f003 0301 	and.w	r3, r3, #1
 800527a:	2b00      	cmp	r3, #0
 800527c:	d005      	beq.n	800528a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005282:	f043 0204 	orr.w	r2, r3, #4
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800528a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800528e:	f003 0308 	and.w	r3, r3, #8
 8005292:	2b00      	cmp	r3, #0
 8005294:	d011      	beq.n	80052ba <HAL_UART_IRQHandler+0x126>
 8005296:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800529a:	f003 0320 	and.w	r3, r3, #32
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d105      	bne.n	80052ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80052a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d005      	beq.n	80052ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b2:	f043 0208 	orr.w	r2, r3, #8
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052be:	2b00      	cmp	r3, #0
 80052c0:	f000 81ed 	beq.w	800569e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052c8:	f003 0320 	and.w	r3, r3, #32
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d008      	beq.n	80052e2 <HAL_UART_IRQHandler+0x14e>
 80052d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052d4:	f003 0320 	and.w	r3, r3, #32
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d002      	beq.n	80052e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 fb24 	bl	800592a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	695b      	ldr	r3, [r3, #20]
 80052e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ec:	2b40      	cmp	r3, #64	; 0x40
 80052ee:	bf0c      	ite	eq
 80052f0:	2301      	moveq	r3, #1
 80052f2:	2300      	movne	r3, #0
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fe:	f003 0308 	and.w	r3, r3, #8
 8005302:	2b00      	cmp	r3, #0
 8005304:	d103      	bne.n	800530e <HAL_UART_IRQHandler+0x17a>
 8005306:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800530a:	2b00      	cmp	r3, #0
 800530c:	d04f      	beq.n	80053ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 fa2c 	bl	800576c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800531e:	2b40      	cmp	r3, #64	; 0x40
 8005320:	d141      	bne.n	80053a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	3314      	adds	r3, #20
 8005328:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005330:	e853 3f00 	ldrex	r3, [r3]
 8005334:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005338:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800533c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005340:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	3314      	adds	r3, #20
 800534a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800534e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005352:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005356:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800535a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800535e:	e841 2300 	strex	r3, r2, [r1]
 8005362:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005366:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1d9      	bne.n	8005322 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005372:	2b00      	cmp	r3, #0
 8005374:	d013      	beq.n	800539e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537a:	4a7d      	ldr	r2, [pc, #500]	; (8005570 <HAL_UART_IRQHandler+0x3dc>)
 800537c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005382:	4618      	mov	r0, r3
 8005384:	f7fe f879 	bl	800347a <HAL_DMA_Abort_IT>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d016      	beq.n	80053bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005392:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005398:	4610      	mov	r0, r2
 800539a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800539c:	e00e      	b.n	80053bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 f990 	bl	80056c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053a4:	e00a      	b.n	80053bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f98c 	bl	80056c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053ac:	e006      	b.n	80053bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 f988 	bl	80056c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80053ba:	e170      	b.n	800569e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053bc:	bf00      	nop
    return;
 80053be:	e16e      	b.n	800569e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	f040 814a 	bne.w	800565e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80053ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ce:	f003 0310 	and.w	r3, r3, #16
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f000 8143 	beq.w	800565e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80053d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053dc:	f003 0310 	and.w	r3, r3, #16
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	f000 813c 	beq.w	800565e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053e6:	2300      	movs	r3, #0
 80053e8:	60bb      	str	r3, [r7, #8]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	60bb      	str	r3, [r7, #8]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	60bb      	str	r3, [r7, #8]
 80053fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005406:	2b40      	cmp	r3, #64	; 0x40
 8005408:	f040 80b4 	bne.w	8005574 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005418:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800541c:	2b00      	cmp	r3, #0
 800541e:	f000 8140 	beq.w	80056a2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005426:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800542a:	429a      	cmp	r2, r3
 800542c:	f080 8139 	bcs.w	80056a2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005436:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543c:	69db      	ldr	r3, [r3, #28]
 800543e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005442:	f000 8088 	beq.w	8005556 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	330c      	adds	r3, #12
 800544c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005450:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005454:	e853 3f00 	ldrex	r3, [r3]
 8005458:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800545c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005460:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005464:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	330c      	adds	r3, #12
 800546e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005472:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005476:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800547e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005482:	e841 2300 	strex	r3, r2, [r1]
 8005486:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800548a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1d9      	bne.n	8005446 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	3314      	adds	r3, #20
 8005498:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800549c:	e853 3f00 	ldrex	r3, [r3]
 80054a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80054a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054a4:	f023 0301 	bic.w	r3, r3, #1
 80054a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	3314      	adds	r3, #20
 80054b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80054b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80054ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80054be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80054c2:	e841 2300 	strex	r3, r2, [r1]
 80054c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80054c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1e1      	bne.n	8005492 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	3314      	adds	r3, #20
 80054d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054d8:	e853 3f00 	ldrex	r3, [r3]
 80054dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80054de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	3314      	adds	r3, #20
 80054ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80054f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80054f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80054f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80054fa:	e841 2300 	strex	r3, r2, [r1]
 80054fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005500:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1e3      	bne.n	80054ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2220      	movs	r2, #32
 800550a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	330c      	adds	r3, #12
 800551a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800551e:	e853 3f00 	ldrex	r3, [r3]
 8005522:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005524:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005526:	f023 0310 	bic.w	r3, r3, #16
 800552a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	330c      	adds	r3, #12
 8005534:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005538:	65ba      	str	r2, [r7, #88]	; 0x58
 800553a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800553c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800553e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005540:	e841 2300 	strex	r3, r2, [r1]
 8005544:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005548:	2b00      	cmp	r3, #0
 800554a:	d1e3      	bne.n	8005514 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005550:	4618      	mov	r0, r3
 8005552:	f7fd ff22 	bl	800339a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800555e:	b29b      	uxth	r3, r3
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	b29b      	uxth	r3, r3
 8005564:	4619      	mov	r1, r3
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 f8b6 	bl	80056d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800556c:	e099      	b.n	80056a2 <HAL_UART_IRQHandler+0x50e>
 800556e:	bf00      	nop
 8005570:	08005833 	.word	0x08005833
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800557c:	b29b      	uxth	r3, r3
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005588:	b29b      	uxth	r3, r3
 800558a:	2b00      	cmp	r3, #0
 800558c:	f000 808b 	beq.w	80056a6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005590:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005594:	2b00      	cmp	r3, #0
 8005596:	f000 8086 	beq.w	80056a6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	330c      	adds	r3, #12
 80055a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a4:	e853 3f00 	ldrex	r3, [r3]
 80055a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80055aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	330c      	adds	r3, #12
 80055ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80055be:	647a      	str	r2, [r7, #68]	; 0x44
 80055c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80055c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055c6:	e841 2300 	strex	r3, r2, [r1]
 80055ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80055cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d1e3      	bne.n	800559a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	3314      	adds	r3, #20
 80055d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055dc:	e853 3f00 	ldrex	r3, [r3]
 80055e0:	623b      	str	r3, [r7, #32]
   return(result);
 80055e2:	6a3b      	ldr	r3, [r7, #32]
 80055e4:	f023 0301 	bic.w	r3, r3, #1
 80055e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	3314      	adds	r3, #20
 80055f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80055f6:	633a      	str	r2, [r7, #48]	; 0x30
 80055f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055fe:	e841 2300 	strex	r3, r2, [r1]
 8005602:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1e3      	bne.n	80055d2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2220      	movs	r2, #32
 800560e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	330c      	adds	r3, #12
 800561e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	e853 3f00 	ldrex	r3, [r3]
 8005626:	60fb      	str	r3, [r7, #12]
   return(result);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f023 0310 	bic.w	r3, r3, #16
 800562e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	330c      	adds	r3, #12
 8005638:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800563c:	61fa      	str	r2, [r7, #28]
 800563e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005640:	69b9      	ldr	r1, [r7, #24]
 8005642:	69fa      	ldr	r2, [r7, #28]
 8005644:	e841 2300 	strex	r3, r2, [r1]
 8005648:	617b      	str	r3, [r7, #20]
   return(result);
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1e3      	bne.n	8005618 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005650:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005654:	4619      	mov	r1, r3
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 f83e 	bl	80056d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800565c:	e023      	b.n	80056a6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800565e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005666:	2b00      	cmp	r3, #0
 8005668:	d009      	beq.n	800567e <HAL_UART_IRQHandler+0x4ea>
 800566a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800566e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005672:	2b00      	cmp	r3, #0
 8005674:	d003      	beq.n	800567e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f8ef 	bl	800585a <UART_Transmit_IT>
    return;
 800567c:	e014      	b.n	80056a8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800567e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00e      	beq.n	80056a8 <HAL_UART_IRQHandler+0x514>
 800568a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800568e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005692:	2b00      	cmp	r3, #0
 8005694:	d008      	beq.n	80056a8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 f92f 	bl	80058fa <UART_EndTransmit_IT>
    return;
 800569c:	e004      	b.n	80056a8 <HAL_UART_IRQHandler+0x514>
    return;
 800569e:	bf00      	nop
 80056a0:	e002      	b.n	80056a8 <HAL_UART_IRQHandler+0x514>
      return;
 80056a2:	bf00      	nop
 80056a4:	e000      	b.n	80056a8 <HAL_UART_IRQHandler+0x514>
      return;
 80056a6:	bf00      	nop
  }
}
 80056a8:	37e8      	adds	r7, #232	; 0xe8
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop

080056b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	460b      	mov	r3, r1
 80056e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80056e4:	bf00      	nop
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	4613      	mov	r3, r2
 80056fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	68ba      	ldr	r2, [r7, #8]
 8005702:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	88fa      	ldrh	r2, [r7, #6]
 8005708:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	88fa      	ldrh	r2, [r7, #6]
 800570e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2222      	movs	r2, #34	; 0x22
 800571a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d007      	beq.n	800573e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68da      	ldr	r2, [r3, #12]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800573c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	695a      	ldr	r2, [r3, #20]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f042 0201 	orr.w	r2, r2, #1
 800574c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68da      	ldr	r2, [r3, #12]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f042 0220 	orr.w	r2, r2, #32
 800575c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3714      	adds	r7, #20
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800576c:	b480      	push	{r7}
 800576e:	b095      	sub	sp, #84	; 0x54
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	330c      	adds	r3, #12
 800577a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800577e:	e853 3f00 	ldrex	r3, [r3]
 8005782:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005786:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800578a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	330c      	adds	r3, #12
 8005792:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005794:	643a      	str	r2, [r7, #64]	; 0x40
 8005796:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005798:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800579a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800579c:	e841 2300 	strex	r3, r2, [r1]
 80057a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d1e5      	bne.n	8005774 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	3314      	adds	r3, #20
 80057ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b0:	6a3b      	ldr	r3, [r7, #32]
 80057b2:	e853 3f00 	ldrex	r3, [r3]
 80057b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	f023 0301 	bic.w	r3, r3, #1
 80057be:	64bb      	str	r3, [r7, #72]	; 0x48
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	3314      	adds	r3, #20
 80057c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057d0:	e841 2300 	strex	r3, r2, [r1]
 80057d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1e5      	bne.n	80057a8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d119      	bne.n	8005818 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	330c      	adds	r3, #12
 80057ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	e853 3f00 	ldrex	r3, [r3]
 80057f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	f023 0310 	bic.w	r3, r3, #16
 80057fa:	647b      	str	r3, [r7, #68]	; 0x44
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	330c      	adds	r3, #12
 8005802:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005804:	61ba      	str	r2, [r7, #24]
 8005806:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005808:	6979      	ldr	r1, [r7, #20]
 800580a:	69ba      	ldr	r2, [r7, #24]
 800580c:	e841 2300 	strex	r3, r2, [r1]
 8005810:	613b      	str	r3, [r7, #16]
   return(result);
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d1e5      	bne.n	80057e4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2220      	movs	r2, #32
 800581c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005826:	bf00      	nop
 8005828:	3754      	adds	r7, #84	; 0x54
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr

08005832 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b084      	sub	sp, #16
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f7ff ff39 	bl	80056c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005852:	bf00      	nop
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}

0800585a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800585a:	b480      	push	{r7}
 800585c:	b085      	sub	sp, #20
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b21      	cmp	r3, #33	; 0x21
 800586c:	d13e      	bne.n	80058ec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005876:	d114      	bne.n	80058a2 <UART_Transmit_IT+0x48>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d110      	bne.n	80058a2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a1b      	ldr	r3, [r3, #32]
 8005884:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	881b      	ldrh	r3, [r3, #0]
 800588a:	461a      	mov	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005894:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a1b      	ldr	r3, [r3, #32]
 800589a:	1c9a      	adds	r2, r3, #2
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	621a      	str	r2, [r3, #32]
 80058a0:	e008      	b.n	80058b4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	1c59      	adds	r1, r3, #1
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	6211      	str	r1, [r2, #32]
 80058ac:	781a      	ldrb	r2, [r3, #0]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	3b01      	subs	r3, #1
 80058bc:	b29b      	uxth	r3, r3
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	4619      	mov	r1, r3
 80058c2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d10f      	bne.n	80058e8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68da      	ldr	r2, [r3, #12]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058d6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68da      	ldr	r2, [r3, #12]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058e6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80058e8:	2300      	movs	r3, #0
 80058ea:	e000      	b.n	80058ee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80058ec:	2302      	movs	r3, #2
  }
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3714      	adds	r7, #20
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr

080058fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b082      	sub	sp, #8
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68da      	ldr	r2, [r3, #12]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005910:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2220      	movs	r2, #32
 8005916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f7ff fec8 	bl	80056b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3708      	adds	r7, #8
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800592a:	b580      	push	{r7, lr}
 800592c:	b08c      	sub	sp, #48	; 0x30
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005938:	b2db      	uxtb	r3, r3
 800593a:	2b22      	cmp	r3, #34	; 0x22
 800593c:	f040 80ab 	bne.w	8005a96 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005948:	d117      	bne.n	800597a <UART_Receive_IT+0x50>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d113      	bne.n	800597a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005952:	2300      	movs	r3, #0
 8005954:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800595a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	b29b      	uxth	r3, r3
 8005964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005968:	b29a      	uxth	r2, r3
 800596a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005972:	1c9a      	adds	r2, r3, #2
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	629a      	str	r2, [r3, #40]	; 0x28
 8005978:	e026      	b.n	80059c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800597e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005980:	2300      	movs	r3, #0
 8005982:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800598c:	d007      	beq.n	800599e <UART_Receive_IT+0x74>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d10a      	bne.n	80059ac <UART_Receive_IT+0x82>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d106      	bne.n	80059ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	b2da      	uxtb	r2, r3
 80059a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a8:	701a      	strb	r2, [r3, #0]
 80059aa:	e008      	b.n	80059be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059b8:	b2da      	uxtb	r2, r3
 80059ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c2:	1c5a      	adds	r2, r3, #1
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	3b01      	subs	r3, #1
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	4619      	mov	r1, r3
 80059d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d15a      	bne.n	8005a92 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68da      	ldr	r2, [r3, #12]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f022 0220 	bic.w	r2, r2, #32
 80059ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68da      	ldr	r2, [r3, #12]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	695a      	ldr	r2, [r3, #20]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f022 0201 	bic.w	r2, r2, #1
 8005a0a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2220      	movs	r2, #32
 8005a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d135      	bne.n	8005a88 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	330c      	adds	r3, #12
 8005a28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	e853 3f00 	ldrex	r3, [r3]
 8005a30:	613b      	str	r3, [r7, #16]
   return(result);
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	f023 0310 	bic.w	r3, r3, #16
 8005a38:	627b      	str	r3, [r7, #36]	; 0x24
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	330c      	adds	r3, #12
 8005a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a42:	623a      	str	r2, [r7, #32]
 8005a44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a46:	69f9      	ldr	r1, [r7, #28]
 8005a48:	6a3a      	ldr	r2, [r7, #32]
 8005a4a:	e841 2300 	strex	r3, r2, [r1]
 8005a4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1e5      	bne.n	8005a22 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0310 	and.w	r3, r3, #16
 8005a60:	2b10      	cmp	r3, #16
 8005a62:	d10a      	bne.n	8005a7a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a64:	2300      	movs	r3, #0
 8005a66:	60fb      	str	r3, [r7, #12]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	60fb      	str	r3, [r7, #12]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	60fb      	str	r3, [r7, #12]
 8005a78:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a7e:	4619      	mov	r1, r3
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f7ff fe29 	bl	80056d8 <HAL_UARTEx_RxEventCallback>
 8005a86:	e002      	b.n	8005a8e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f7fb faa7 	bl	8000fdc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	e002      	b.n	8005a98 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005a92:	2300      	movs	r3, #0
 8005a94:	e000      	b.n	8005a98 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005a96:	2302      	movs	r3, #2
  }
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3730      	adds	r7, #48	; 0x30
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005aa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005aa4:	b0c0      	sub	sp, #256	; 0x100
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005abc:	68d9      	ldr	r1, [r3, #12]
 8005abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	ea40 0301 	orr.w	r3, r0, r1
 8005ac8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ace:	689a      	ldr	r2, [r3, #8]
 8005ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	431a      	orrs	r2, r3
 8005ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	431a      	orrs	r2, r3
 8005ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ae4:	69db      	ldr	r3, [r3, #28]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005af8:	f021 010c 	bic.w	r1, r1, #12
 8005afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b06:	430b      	orrs	r3, r1
 8005b08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b1a:	6999      	ldr	r1, [r3, #24]
 8005b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	ea40 0301 	orr.w	r3, r0, r1
 8005b26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	4b8f      	ldr	r3, [pc, #572]	; (8005d6c <UART_SetConfig+0x2cc>)
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d005      	beq.n	8005b40 <UART_SetConfig+0xa0>
 8005b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	4b8d      	ldr	r3, [pc, #564]	; (8005d70 <UART_SetConfig+0x2d0>)
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d104      	bne.n	8005b4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b40:	f7fe fb1c 	bl	800417c <HAL_RCC_GetPCLK2Freq>
 8005b44:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005b48:	e003      	b.n	8005b52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b4a:	f7fe fb03 	bl	8004154 <HAL_RCC_GetPCLK1Freq>
 8005b4e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b56:	69db      	ldr	r3, [r3, #28]
 8005b58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b5c:	f040 810c 	bne.w	8005d78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b64:	2200      	movs	r2, #0
 8005b66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b6a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005b6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005b72:	4622      	mov	r2, r4
 8005b74:	462b      	mov	r3, r5
 8005b76:	1891      	adds	r1, r2, r2
 8005b78:	65b9      	str	r1, [r7, #88]	; 0x58
 8005b7a:	415b      	adcs	r3, r3
 8005b7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005b82:	4621      	mov	r1, r4
 8005b84:	eb12 0801 	adds.w	r8, r2, r1
 8005b88:	4629      	mov	r1, r5
 8005b8a:	eb43 0901 	adc.w	r9, r3, r1
 8005b8e:	f04f 0200 	mov.w	r2, #0
 8005b92:	f04f 0300 	mov.w	r3, #0
 8005b96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ba2:	4690      	mov	r8, r2
 8005ba4:	4699      	mov	r9, r3
 8005ba6:	4623      	mov	r3, r4
 8005ba8:	eb18 0303 	adds.w	r3, r8, r3
 8005bac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005bb0:	462b      	mov	r3, r5
 8005bb2:	eb49 0303 	adc.w	r3, r9, r3
 8005bb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005bc6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005bca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005bce:	460b      	mov	r3, r1
 8005bd0:	18db      	adds	r3, r3, r3
 8005bd2:	653b      	str	r3, [r7, #80]	; 0x50
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	eb42 0303 	adc.w	r3, r2, r3
 8005bda:	657b      	str	r3, [r7, #84]	; 0x54
 8005bdc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005be0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005be4:	f7fa ff42 	bl	8000a6c <__aeabi_uldivmod>
 8005be8:	4602      	mov	r2, r0
 8005bea:	460b      	mov	r3, r1
 8005bec:	4b61      	ldr	r3, [pc, #388]	; (8005d74 <UART_SetConfig+0x2d4>)
 8005bee:	fba3 2302 	umull	r2, r3, r3, r2
 8005bf2:	095b      	lsrs	r3, r3, #5
 8005bf4:	011c      	lsls	r4, r3, #4
 8005bf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c00:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005c04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005c08:	4642      	mov	r2, r8
 8005c0a:	464b      	mov	r3, r9
 8005c0c:	1891      	adds	r1, r2, r2
 8005c0e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005c10:	415b      	adcs	r3, r3
 8005c12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005c18:	4641      	mov	r1, r8
 8005c1a:	eb12 0a01 	adds.w	sl, r2, r1
 8005c1e:	4649      	mov	r1, r9
 8005c20:	eb43 0b01 	adc.w	fp, r3, r1
 8005c24:	f04f 0200 	mov.w	r2, #0
 8005c28:	f04f 0300 	mov.w	r3, #0
 8005c2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c38:	4692      	mov	sl, r2
 8005c3a:	469b      	mov	fp, r3
 8005c3c:	4643      	mov	r3, r8
 8005c3e:	eb1a 0303 	adds.w	r3, sl, r3
 8005c42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c46:	464b      	mov	r3, r9
 8005c48:	eb4b 0303 	adc.w	r3, fp, r3
 8005c4c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c5c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005c60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005c64:	460b      	mov	r3, r1
 8005c66:	18db      	adds	r3, r3, r3
 8005c68:	643b      	str	r3, [r7, #64]	; 0x40
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	eb42 0303 	adc.w	r3, r2, r3
 8005c70:	647b      	str	r3, [r7, #68]	; 0x44
 8005c72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005c76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005c7a:	f7fa fef7 	bl	8000a6c <__aeabi_uldivmod>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	460b      	mov	r3, r1
 8005c82:	4611      	mov	r1, r2
 8005c84:	4b3b      	ldr	r3, [pc, #236]	; (8005d74 <UART_SetConfig+0x2d4>)
 8005c86:	fba3 2301 	umull	r2, r3, r3, r1
 8005c8a:	095b      	lsrs	r3, r3, #5
 8005c8c:	2264      	movs	r2, #100	; 0x64
 8005c8e:	fb02 f303 	mul.w	r3, r2, r3
 8005c92:	1acb      	subs	r3, r1, r3
 8005c94:	00db      	lsls	r3, r3, #3
 8005c96:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005c9a:	4b36      	ldr	r3, [pc, #216]	; (8005d74 <UART_SetConfig+0x2d4>)
 8005c9c:	fba3 2302 	umull	r2, r3, r3, r2
 8005ca0:	095b      	lsrs	r3, r3, #5
 8005ca2:	005b      	lsls	r3, r3, #1
 8005ca4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ca8:	441c      	add	r4, r3
 8005caa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005cb4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005cb8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005cbc:	4642      	mov	r2, r8
 8005cbe:	464b      	mov	r3, r9
 8005cc0:	1891      	adds	r1, r2, r2
 8005cc2:	63b9      	str	r1, [r7, #56]	; 0x38
 8005cc4:	415b      	adcs	r3, r3
 8005cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cc8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005ccc:	4641      	mov	r1, r8
 8005cce:	1851      	adds	r1, r2, r1
 8005cd0:	6339      	str	r1, [r7, #48]	; 0x30
 8005cd2:	4649      	mov	r1, r9
 8005cd4:	414b      	adcs	r3, r1
 8005cd6:	637b      	str	r3, [r7, #52]	; 0x34
 8005cd8:	f04f 0200 	mov.w	r2, #0
 8005cdc:	f04f 0300 	mov.w	r3, #0
 8005ce0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005ce4:	4659      	mov	r1, fp
 8005ce6:	00cb      	lsls	r3, r1, #3
 8005ce8:	4651      	mov	r1, sl
 8005cea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cee:	4651      	mov	r1, sl
 8005cf0:	00ca      	lsls	r2, r1, #3
 8005cf2:	4610      	mov	r0, r2
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	4642      	mov	r2, r8
 8005cfa:	189b      	adds	r3, r3, r2
 8005cfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d00:	464b      	mov	r3, r9
 8005d02:	460a      	mov	r2, r1
 8005d04:	eb42 0303 	adc.w	r3, r2, r3
 8005d08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005d18:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005d1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005d20:	460b      	mov	r3, r1
 8005d22:	18db      	adds	r3, r3, r3
 8005d24:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d26:	4613      	mov	r3, r2
 8005d28:	eb42 0303 	adc.w	r3, r2, r3
 8005d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005d36:	f7fa fe99 	bl	8000a6c <__aeabi_uldivmod>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	4b0d      	ldr	r3, [pc, #52]	; (8005d74 <UART_SetConfig+0x2d4>)
 8005d40:	fba3 1302 	umull	r1, r3, r3, r2
 8005d44:	095b      	lsrs	r3, r3, #5
 8005d46:	2164      	movs	r1, #100	; 0x64
 8005d48:	fb01 f303 	mul.w	r3, r1, r3
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	00db      	lsls	r3, r3, #3
 8005d50:	3332      	adds	r3, #50	; 0x32
 8005d52:	4a08      	ldr	r2, [pc, #32]	; (8005d74 <UART_SetConfig+0x2d4>)
 8005d54:	fba2 2303 	umull	r2, r3, r2, r3
 8005d58:	095b      	lsrs	r3, r3, #5
 8005d5a:	f003 0207 	and.w	r2, r3, #7
 8005d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4422      	add	r2, r4
 8005d66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d68:	e105      	b.n	8005f76 <UART_SetConfig+0x4d6>
 8005d6a:	bf00      	nop
 8005d6c:	40011000 	.word	0x40011000
 8005d70:	40011400 	.word	0x40011400
 8005d74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005d82:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005d86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005d8a:	4642      	mov	r2, r8
 8005d8c:	464b      	mov	r3, r9
 8005d8e:	1891      	adds	r1, r2, r2
 8005d90:	6239      	str	r1, [r7, #32]
 8005d92:	415b      	adcs	r3, r3
 8005d94:	627b      	str	r3, [r7, #36]	; 0x24
 8005d96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d9a:	4641      	mov	r1, r8
 8005d9c:	1854      	adds	r4, r2, r1
 8005d9e:	4649      	mov	r1, r9
 8005da0:	eb43 0501 	adc.w	r5, r3, r1
 8005da4:	f04f 0200 	mov.w	r2, #0
 8005da8:	f04f 0300 	mov.w	r3, #0
 8005dac:	00eb      	lsls	r3, r5, #3
 8005dae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005db2:	00e2      	lsls	r2, r4, #3
 8005db4:	4614      	mov	r4, r2
 8005db6:	461d      	mov	r5, r3
 8005db8:	4643      	mov	r3, r8
 8005dba:	18e3      	adds	r3, r4, r3
 8005dbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005dc0:	464b      	mov	r3, r9
 8005dc2:	eb45 0303 	adc.w	r3, r5, r3
 8005dc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005dd6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005dda:	f04f 0200 	mov.w	r2, #0
 8005dde:	f04f 0300 	mov.w	r3, #0
 8005de2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005de6:	4629      	mov	r1, r5
 8005de8:	008b      	lsls	r3, r1, #2
 8005dea:	4621      	mov	r1, r4
 8005dec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005df0:	4621      	mov	r1, r4
 8005df2:	008a      	lsls	r2, r1, #2
 8005df4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005df8:	f7fa fe38 	bl	8000a6c <__aeabi_uldivmod>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	460b      	mov	r3, r1
 8005e00:	4b60      	ldr	r3, [pc, #384]	; (8005f84 <UART_SetConfig+0x4e4>)
 8005e02:	fba3 2302 	umull	r2, r3, r3, r2
 8005e06:	095b      	lsrs	r3, r3, #5
 8005e08:	011c      	lsls	r4, r3, #4
 8005e0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005e14:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005e18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005e1c:	4642      	mov	r2, r8
 8005e1e:	464b      	mov	r3, r9
 8005e20:	1891      	adds	r1, r2, r2
 8005e22:	61b9      	str	r1, [r7, #24]
 8005e24:	415b      	adcs	r3, r3
 8005e26:	61fb      	str	r3, [r7, #28]
 8005e28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e2c:	4641      	mov	r1, r8
 8005e2e:	1851      	adds	r1, r2, r1
 8005e30:	6139      	str	r1, [r7, #16]
 8005e32:	4649      	mov	r1, r9
 8005e34:	414b      	adcs	r3, r1
 8005e36:	617b      	str	r3, [r7, #20]
 8005e38:	f04f 0200 	mov.w	r2, #0
 8005e3c:	f04f 0300 	mov.w	r3, #0
 8005e40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e44:	4659      	mov	r1, fp
 8005e46:	00cb      	lsls	r3, r1, #3
 8005e48:	4651      	mov	r1, sl
 8005e4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e4e:	4651      	mov	r1, sl
 8005e50:	00ca      	lsls	r2, r1, #3
 8005e52:	4610      	mov	r0, r2
 8005e54:	4619      	mov	r1, r3
 8005e56:	4603      	mov	r3, r0
 8005e58:	4642      	mov	r2, r8
 8005e5a:	189b      	adds	r3, r3, r2
 8005e5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e60:	464b      	mov	r3, r9
 8005e62:	460a      	mov	r2, r1
 8005e64:	eb42 0303 	adc.w	r3, r2, r3
 8005e68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e76:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005e78:	f04f 0200 	mov.w	r2, #0
 8005e7c:	f04f 0300 	mov.w	r3, #0
 8005e80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005e84:	4649      	mov	r1, r9
 8005e86:	008b      	lsls	r3, r1, #2
 8005e88:	4641      	mov	r1, r8
 8005e8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e8e:	4641      	mov	r1, r8
 8005e90:	008a      	lsls	r2, r1, #2
 8005e92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005e96:	f7fa fde9 	bl	8000a6c <__aeabi_uldivmod>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	4b39      	ldr	r3, [pc, #228]	; (8005f84 <UART_SetConfig+0x4e4>)
 8005ea0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ea4:	095b      	lsrs	r3, r3, #5
 8005ea6:	2164      	movs	r1, #100	; 0x64
 8005ea8:	fb01 f303 	mul.w	r3, r1, r3
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	011b      	lsls	r3, r3, #4
 8005eb0:	3332      	adds	r3, #50	; 0x32
 8005eb2:	4a34      	ldr	r2, [pc, #208]	; (8005f84 <UART_SetConfig+0x4e4>)
 8005eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb8:	095b      	lsrs	r3, r3, #5
 8005eba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ebe:	441c      	add	r4, r3
 8005ec0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	673b      	str	r3, [r7, #112]	; 0x70
 8005ec8:	677a      	str	r2, [r7, #116]	; 0x74
 8005eca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005ece:	4642      	mov	r2, r8
 8005ed0:	464b      	mov	r3, r9
 8005ed2:	1891      	adds	r1, r2, r2
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	415b      	adcs	r3, r3
 8005ed8:	60fb      	str	r3, [r7, #12]
 8005eda:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ede:	4641      	mov	r1, r8
 8005ee0:	1851      	adds	r1, r2, r1
 8005ee2:	6039      	str	r1, [r7, #0]
 8005ee4:	4649      	mov	r1, r9
 8005ee6:	414b      	adcs	r3, r1
 8005ee8:	607b      	str	r3, [r7, #4]
 8005eea:	f04f 0200 	mov.w	r2, #0
 8005eee:	f04f 0300 	mov.w	r3, #0
 8005ef2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005ef6:	4659      	mov	r1, fp
 8005ef8:	00cb      	lsls	r3, r1, #3
 8005efa:	4651      	mov	r1, sl
 8005efc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f00:	4651      	mov	r1, sl
 8005f02:	00ca      	lsls	r2, r1, #3
 8005f04:	4610      	mov	r0, r2
 8005f06:	4619      	mov	r1, r3
 8005f08:	4603      	mov	r3, r0
 8005f0a:	4642      	mov	r2, r8
 8005f0c:	189b      	adds	r3, r3, r2
 8005f0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f10:	464b      	mov	r3, r9
 8005f12:	460a      	mov	r2, r1
 8005f14:	eb42 0303 	adc.w	r3, r2, r3
 8005f18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	663b      	str	r3, [r7, #96]	; 0x60
 8005f24:	667a      	str	r2, [r7, #100]	; 0x64
 8005f26:	f04f 0200 	mov.w	r2, #0
 8005f2a:	f04f 0300 	mov.w	r3, #0
 8005f2e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005f32:	4649      	mov	r1, r9
 8005f34:	008b      	lsls	r3, r1, #2
 8005f36:	4641      	mov	r1, r8
 8005f38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f3c:	4641      	mov	r1, r8
 8005f3e:	008a      	lsls	r2, r1, #2
 8005f40:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005f44:	f7fa fd92 	bl	8000a6c <__aeabi_uldivmod>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	4b0d      	ldr	r3, [pc, #52]	; (8005f84 <UART_SetConfig+0x4e4>)
 8005f4e:	fba3 1302 	umull	r1, r3, r3, r2
 8005f52:	095b      	lsrs	r3, r3, #5
 8005f54:	2164      	movs	r1, #100	; 0x64
 8005f56:	fb01 f303 	mul.w	r3, r1, r3
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	011b      	lsls	r3, r3, #4
 8005f5e:	3332      	adds	r3, #50	; 0x32
 8005f60:	4a08      	ldr	r2, [pc, #32]	; (8005f84 <UART_SetConfig+0x4e4>)
 8005f62:	fba2 2303 	umull	r2, r3, r2, r3
 8005f66:	095b      	lsrs	r3, r3, #5
 8005f68:	f003 020f 	and.w	r2, r3, #15
 8005f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4422      	add	r2, r4
 8005f74:	609a      	str	r2, [r3, #8]
}
 8005f76:	bf00      	nop
 8005f78:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f82:	bf00      	nop
 8005f84:	51eb851f 	.word	0x51eb851f

08005f88 <__errno>:
 8005f88:	4b01      	ldr	r3, [pc, #4]	; (8005f90 <__errno+0x8>)
 8005f8a:	6818      	ldr	r0, [r3, #0]
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop
 8005f90:	2000003c 	.word	0x2000003c

08005f94 <__libc_init_array>:
 8005f94:	b570      	push	{r4, r5, r6, lr}
 8005f96:	4d0d      	ldr	r5, [pc, #52]	; (8005fcc <__libc_init_array+0x38>)
 8005f98:	4c0d      	ldr	r4, [pc, #52]	; (8005fd0 <__libc_init_array+0x3c>)
 8005f9a:	1b64      	subs	r4, r4, r5
 8005f9c:	10a4      	asrs	r4, r4, #2
 8005f9e:	2600      	movs	r6, #0
 8005fa0:	42a6      	cmp	r6, r4
 8005fa2:	d109      	bne.n	8005fb8 <__libc_init_array+0x24>
 8005fa4:	4d0b      	ldr	r5, [pc, #44]	; (8005fd4 <__libc_init_array+0x40>)
 8005fa6:	4c0c      	ldr	r4, [pc, #48]	; (8005fd8 <__libc_init_array+0x44>)
 8005fa8:	f000 fca2 	bl	80068f0 <_init>
 8005fac:	1b64      	subs	r4, r4, r5
 8005fae:	10a4      	asrs	r4, r4, #2
 8005fb0:	2600      	movs	r6, #0
 8005fb2:	42a6      	cmp	r6, r4
 8005fb4:	d105      	bne.n	8005fc2 <__libc_init_array+0x2e>
 8005fb6:	bd70      	pop	{r4, r5, r6, pc}
 8005fb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fbc:	4798      	blx	r3
 8005fbe:	3601      	adds	r6, #1
 8005fc0:	e7ee      	b.n	8005fa0 <__libc_init_array+0xc>
 8005fc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fc6:	4798      	blx	r3
 8005fc8:	3601      	adds	r6, #1
 8005fca:	e7f2      	b.n	8005fb2 <__libc_init_array+0x1e>
 8005fcc:	080069bc 	.word	0x080069bc
 8005fd0:	080069bc 	.word	0x080069bc
 8005fd4:	080069bc 	.word	0x080069bc
 8005fd8:	080069c0 	.word	0x080069c0

08005fdc <memset>:
 8005fdc:	4402      	add	r2, r0
 8005fde:	4603      	mov	r3, r0
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d100      	bne.n	8005fe6 <memset+0xa>
 8005fe4:	4770      	bx	lr
 8005fe6:	f803 1b01 	strb.w	r1, [r3], #1
 8005fea:	e7f9      	b.n	8005fe0 <memset+0x4>

08005fec <sniprintf>:
 8005fec:	b40c      	push	{r2, r3}
 8005fee:	b530      	push	{r4, r5, lr}
 8005ff0:	4b17      	ldr	r3, [pc, #92]	; (8006050 <sniprintf+0x64>)
 8005ff2:	1e0c      	subs	r4, r1, #0
 8005ff4:	681d      	ldr	r5, [r3, #0]
 8005ff6:	b09d      	sub	sp, #116	; 0x74
 8005ff8:	da08      	bge.n	800600c <sniprintf+0x20>
 8005ffa:	238b      	movs	r3, #139	; 0x8b
 8005ffc:	602b      	str	r3, [r5, #0]
 8005ffe:	f04f 30ff 	mov.w	r0, #4294967295
 8006002:	b01d      	add	sp, #116	; 0x74
 8006004:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006008:	b002      	add	sp, #8
 800600a:	4770      	bx	lr
 800600c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006010:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006014:	bf14      	ite	ne
 8006016:	f104 33ff 	addne.w	r3, r4, #4294967295
 800601a:	4623      	moveq	r3, r4
 800601c:	9304      	str	r3, [sp, #16]
 800601e:	9307      	str	r3, [sp, #28]
 8006020:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006024:	9002      	str	r0, [sp, #8]
 8006026:	9006      	str	r0, [sp, #24]
 8006028:	f8ad 3016 	strh.w	r3, [sp, #22]
 800602c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800602e:	ab21      	add	r3, sp, #132	; 0x84
 8006030:	a902      	add	r1, sp, #8
 8006032:	4628      	mov	r0, r5
 8006034:	9301      	str	r3, [sp, #4]
 8006036:	f000 f869 	bl	800610c <_svfiprintf_r>
 800603a:	1c43      	adds	r3, r0, #1
 800603c:	bfbc      	itt	lt
 800603e:	238b      	movlt	r3, #139	; 0x8b
 8006040:	602b      	strlt	r3, [r5, #0]
 8006042:	2c00      	cmp	r4, #0
 8006044:	d0dd      	beq.n	8006002 <sniprintf+0x16>
 8006046:	9b02      	ldr	r3, [sp, #8]
 8006048:	2200      	movs	r2, #0
 800604a:	701a      	strb	r2, [r3, #0]
 800604c:	e7d9      	b.n	8006002 <sniprintf+0x16>
 800604e:	bf00      	nop
 8006050:	2000003c 	.word	0x2000003c

08006054 <__ssputs_r>:
 8006054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006058:	688e      	ldr	r6, [r1, #8]
 800605a:	429e      	cmp	r6, r3
 800605c:	4682      	mov	sl, r0
 800605e:	460c      	mov	r4, r1
 8006060:	4690      	mov	r8, r2
 8006062:	461f      	mov	r7, r3
 8006064:	d838      	bhi.n	80060d8 <__ssputs_r+0x84>
 8006066:	898a      	ldrh	r2, [r1, #12]
 8006068:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800606c:	d032      	beq.n	80060d4 <__ssputs_r+0x80>
 800606e:	6825      	ldr	r5, [r4, #0]
 8006070:	6909      	ldr	r1, [r1, #16]
 8006072:	eba5 0901 	sub.w	r9, r5, r1
 8006076:	6965      	ldr	r5, [r4, #20]
 8006078:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800607c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006080:	3301      	adds	r3, #1
 8006082:	444b      	add	r3, r9
 8006084:	106d      	asrs	r5, r5, #1
 8006086:	429d      	cmp	r5, r3
 8006088:	bf38      	it	cc
 800608a:	461d      	movcc	r5, r3
 800608c:	0553      	lsls	r3, r2, #21
 800608e:	d531      	bpl.n	80060f4 <__ssputs_r+0xa0>
 8006090:	4629      	mov	r1, r5
 8006092:	f000 fb63 	bl	800675c <_malloc_r>
 8006096:	4606      	mov	r6, r0
 8006098:	b950      	cbnz	r0, 80060b0 <__ssputs_r+0x5c>
 800609a:	230c      	movs	r3, #12
 800609c:	f8ca 3000 	str.w	r3, [sl]
 80060a0:	89a3      	ldrh	r3, [r4, #12]
 80060a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060a6:	81a3      	strh	r3, [r4, #12]
 80060a8:	f04f 30ff 	mov.w	r0, #4294967295
 80060ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060b0:	6921      	ldr	r1, [r4, #16]
 80060b2:	464a      	mov	r2, r9
 80060b4:	f000 fabe 	bl	8006634 <memcpy>
 80060b8:	89a3      	ldrh	r3, [r4, #12]
 80060ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80060be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060c2:	81a3      	strh	r3, [r4, #12]
 80060c4:	6126      	str	r6, [r4, #16]
 80060c6:	6165      	str	r5, [r4, #20]
 80060c8:	444e      	add	r6, r9
 80060ca:	eba5 0509 	sub.w	r5, r5, r9
 80060ce:	6026      	str	r6, [r4, #0]
 80060d0:	60a5      	str	r5, [r4, #8]
 80060d2:	463e      	mov	r6, r7
 80060d4:	42be      	cmp	r6, r7
 80060d6:	d900      	bls.n	80060da <__ssputs_r+0x86>
 80060d8:	463e      	mov	r6, r7
 80060da:	6820      	ldr	r0, [r4, #0]
 80060dc:	4632      	mov	r2, r6
 80060de:	4641      	mov	r1, r8
 80060e0:	f000 fab6 	bl	8006650 <memmove>
 80060e4:	68a3      	ldr	r3, [r4, #8]
 80060e6:	1b9b      	subs	r3, r3, r6
 80060e8:	60a3      	str	r3, [r4, #8]
 80060ea:	6823      	ldr	r3, [r4, #0]
 80060ec:	4433      	add	r3, r6
 80060ee:	6023      	str	r3, [r4, #0]
 80060f0:	2000      	movs	r0, #0
 80060f2:	e7db      	b.n	80060ac <__ssputs_r+0x58>
 80060f4:	462a      	mov	r2, r5
 80060f6:	f000 fba5 	bl	8006844 <_realloc_r>
 80060fa:	4606      	mov	r6, r0
 80060fc:	2800      	cmp	r0, #0
 80060fe:	d1e1      	bne.n	80060c4 <__ssputs_r+0x70>
 8006100:	6921      	ldr	r1, [r4, #16]
 8006102:	4650      	mov	r0, sl
 8006104:	f000 fabe 	bl	8006684 <_free_r>
 8006108:	e7c7      	b.n	800609a <__ssputs_r+0x46>
	...

0800610c <_svfiprintf_r>:
 800610c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006110:	4698      	mov	r8, r3
 8006112:	898b      	ldrh	r3, [r1, #12]
 8006114:	061b      	lsls	r3, r3, #24
 8006116:	b09d      	sub	sp, #116	; 0x74
 8006118:	4607      	mov	r7, r0
 800611a:	460d      	mov	r5, r1
 800611c:	4614      	mov	r4, r2
 800611e:	d50e      	bpl.n	800613e <_svfiprintf_r+0x32>
 8006120:	690b      	ldr	r3, [r1, #16]
 8006122:	b963      	cbnz	r3, 800613e <_svfiprintf_r+0x32>
 8006124:	2140      	movs	r1, #64	; 0x40
 8006126:	f000 fb19 	bl	800675c <_malloc_r>
 800612a:	6028      	str	r0, [r5, #0]
 800612c:	6128      	str	r0, [r5, #16]
 800612e:	b920      	cbnz	r0, 800613a <_svfiprintf_r+0x2e>
 8006130:	230c      	movs	r3, #12
 8006132:	603b      	str	r3, [r7, #0]
 8006134:	f04f 30ff 	mov.w	r0, #4294967295
 8006138:	e0d1      	b.n	80062de <_svfiprintf_r+0x1d2>
 800613a:	2340      	movs	r3, #64	; 0x40
 800613c:	616b      	str	r3, [r5, #20]
 800613e:	2300      	movs	r3, #0
 8006140:	9309      	str	r3, [sp, #36]	; 0x24
 8006142:	2320      	movs	r3, #32
 8006144:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006148:	f8cd 800c 	str.w	r8, [sp, #12]
 800614c:	2330      	movs	r3, #48	; 0x30
 800614e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80062f8 <_svfiprintf_r+0x1ec>
 8006152:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006156:	f04f 0901 	mov.w	r9, #1
 800615a:	4623      	mov	r3, r4
 800615c:	469a      	mov	sl, r3
 800615e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006162:	b10a      	cbz	r2, 8006168 <_svfiprintf_r+0x5c>
 8006164:	2a25      	cmp	r2, #37	; 0x25
 8006166:	d1f9      	bne.n	800615c <_svfiprintf_r+0x50>
 8006168:	ebba 0b04 	subs.w	fp, sl, r4
 800616c:	d00b      	beq.n	8006186 <_svfiprintf_r+0x7a>
 800616e:	465b      	mov	r3, fp
 8006170:	4622      	mov	r2, r4
 8006172:	4629      	mov	r1, r5
 8006174:	4638      	mov	r0, r7
 8006176:	f7ff ff6d 	bl	8006054 <__ssputs_r>
 800617a:	3001      	adds	r0, #1
 800617c:	f000 80aa 	beq.w	80062d4 <_svfiprintf_r+0x1c8>
 8006180:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006182:	445a      	add	r2, fp
 8006184:	9209      	str	r2, [sp, #36]	; 0x24
 8006186:	f89a 3000 	ldrb.w	r3, [sl]
 800618a:	2b00      	cmp	r3, #0
 800618c:	f000 80a2 	beq.w	80062d4 <_svfiprintf_r+0x1c8>
 8006190:	2300      	movs	r3, #0
 8006192:	f04f 32ff 	mov.w	r2, #4294967295
 8006196:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800619a:	f10a 0a01 	add.w	sl, sl, #1
 800619e:	9304      	str	r3, [sp, #16]
 80061a0:	9307      	str	r3, [sp, #28]
 80061a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80061a6:	931a      	str	r3, [sp, #104]	; 0x68
 80061a8:	4654      	mov	r4, sl
 80061aa:	2205      	movs	r2, #5
 80061ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061b0:	4851      	ldr	r0, [pc, #324]	; (80062f8 <_svfiprintf_r+0x1ec>)
 80061b2:	f7fa f81d 	bl	80001f0 <memchr>
 80061b6:	9a04      	ldr	r2, [sp, #16]
 80061b8:	b9d8      	cbnz	r0, 80061f2 <_svfiprintf_r+0xe6>
 80061ba:	06d0      	lsls	r0, r2, #27
 80061bc:	bf44      	itt	mi
 80061be:	2320      	movmi	r3, #32
 80061c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061c4:	0711      	lsls	r1, r2, #28
 80061c6:	bf44      	itt	mi
 80061c8:	232b      	movmi	r3, #43	; 0x2b
 80061ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061ce:	f89a 3000 	ldrb.w	r3, [sl]
 80061d2:	2b2a      	cmp	r3, #42	; 0x2a
 80061d4:	d015      	beq.n	8006202 <_svfiprintf_r+0xf6>
 80061d6:	9a07      	ldr	r2, [sp, #28]
 80061d8:	4654      	mov	r4, sl
 80061da:	2000      	movs	r0, #0
 80061dc:	f04f 0c0a 	mov.w	ip, #10
 80061e0:	4621      	mov	r1, r4
 80061e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061e6:	3b30      	subs	r3, #48	; 0x30
 80061e8:	2b09      	cmp	r3, #9
 80061ea:	d94e      	bls.n	800628a <_svfiprintf_r+0x17e>
 80061ec:	b1b0      	cbz	r0, 800621c <_svfiprintf_r+0x110>
 80061ee:	9207      	str	r2, [sp, #28]
 80061f0:	e014      	b.n	800621c <_svfiprintf_r+0x110>
 80061f2:	eba0 0308 	sub.w	r3, r0, r8
 80061f6:	fa09 f303 	lsl.w	r3, r9, r3
 80061fa:	4313      	orrs	r3, r2
 80061fc:	9304      	str	r3, [sp, #16]
 80061fe:	46a2      	mov	sl, r4
 8006200:	e7d2      	b.n	80061a8 <_svfiprintf_r+0x9c>
 8006202:	9b03      	ldr	r3, [sp, #12]
 8006204:	1d19      	adds	r1, r3, #4
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	9103      	str	r1, [sp, #12]
 800620a:	2b00      	cmp	r3, #0
 800620c:	bfbb      	ittet	lt
 800620e:	425b      	neglt	r3, r3
 8006210:	f042 0202 	orrlt.w	r2, r2, #2
 8006214:	9307      	strge	r3, [sp, #28]
 8006216:	9307      	strlt	r3, [sp, #28]
 8006218:	bfb8      	it	lt
 800621a:	9204      	strlt	r2, [sp, #16]
 800621c:	7823      	ldrb	r3, [r4, #0]
 800621e:	2b2e      	cmp	r3, #46	; 0x2e
 8006220:	d10c      	bne.n	800623c <_svfiprintf_r+0x130>
 8006222:	7863      	ldrb	r3, [r4, #1]
 8006224:	2b2a      	cmp	r3, #42	; 0x2a
 8006226:	d135      	bne.n	8006294 <_svfiprintf_r+0x188>
 8006228:	9b03      	ldr	r3, [sp, #12]
 800622a:	1d1a      	adds	r2, r3, #4
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	9203      	str	r2, [sp, #12]
 8006230:	2b00      	cmp	r3, #0
 8006232:	bfb8      	it	lt
 8006234:	f04f 33ff 	movlt.w	r3, #4294967295
 8006238:	3402      	adds	r4, #2
 800623a:	9305      	str	r3, [sp, #20]
 800623c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006308 <_svfiprintf_r+0x1fc>
 8006240:	7821      	ldrb	r1, [r4, #0]
 8006242:	2203      	movs	r2, #3
 8006244:	4650      	mov	r0, sl
 8006246:	f7f9 ffd3 	bl	80001f0 <memchr>
 800624a:	b140      	cbz	r0, 800625e <_svfiprintf_r+0x152>
 800624c:	2340      	movs	r3, #64	; 0x40
 800624e:	eba0 000a 	sub.w	r0, r0, sl
 8006252:	fa03 f000 	lsl.w	r0, r3, r0
 8006256:	9b04      	ldr	r3, [sp, #16]
 8006258:	4303      	orrs	r3, r0
 800625a:	3401      	adds	r4, #1
 800625c:	9304      	str	r3, [sp, #16]
 800625e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006262:	4826      	ldr	r0, [pc, #152]	; (80062fc <_svfiprintf_r+0x1f0>)
 8006264:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006268:	2206      	movs	r2, #6
 800626a:	f7f9 ffc1 	bl	80001f0 <memchr>
 800626e:	2800      	cmp	r0, #0
 8006270:	d038      	beq.n	80062e4 <_svfiprintf_r+0x1d8>
 8006272:	4b23      	ldr	r3, [pc, #140]	; (8006300 <_svfiprintf_r+0x1f4>)
 8006274:	bb1b      	cbnz	r3, 80062be <_svfiprintf_r+0x1b2>
 8006276:	9b03      	ldr	r3, [sp, #12]
 8006278:	3307      	adds	r3, #7
 800627a:	f023 0307 	bic.w	r3, r3, #7
 800627e:	3308      	adds	r3, #8
 8006280:	9303      	str	r3, [sp, #12]
 8006282:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006284:	4433      	add	r3, r6
 8006286:	9309      	str	r3, [sp, #36]	; 0x24
 8006288:	e767      	b.n	800615a <_svfiprintf_r+0x4e>
 800628a:	fb0c 3202 	mla	r2, ip, r2, r3
 800628e:	460c      	mov	r4, r1
 8006290:	2001      	movs	r0, #1
 8006292:	e7a5      	b.n	80061e0 <_svfiprintf_r+0xd4>
 8006294:	2300      	movs	r3, #0
 8006296:	3401      	adds	r4, #1
 8006298:	9305      	str	r3, [sp, #20]
 800629a:	4619      	mov	r1, r3
 800629c:	f04f 0c0a 	mov.w	ip, #10
 80062a0:	4620      	mov	r0, r4
 80062a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062a6:	3a30      	subs	r2, #48	; 0x30
 80062a8:	2a09      	cmp	r2, #9
 80062aa:	d903      	bls.n	80062b4 <_svfiprintf_r+0x1a8>
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d0c5      	beq.n	800623c <_svfiprintf_r+0x130>
 80062b0:	9105      	str	r1, [sp, #20]
 80062b2:	e7c3      	b.n	800623c <_svfiprintf_r+0x130>
 80062b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80062b8:	4604      	mov	r4, r0
 80062ba:	2301      	movs	r3, #1
 80062bc:	e7f0      	b.n	80062a0 <_svfiprintf_r+0x194>
 80062be:	ab03      	add	r3, sp, #12
 80062c0:	9300      	str	r3, [sp, #0]
 80062c2:	462a      	mov	r2, r5
 80062c4:	4b0f      	ldr	r3, [pc, #60]	; (8006304 <_svfiprintf_r+0x1f8>)
 80062c6:	a904      	add	r1, sp, #16
 80062c8:	4638      	mov	r0, r7
 80062ca:	f3af 8000 	nop.w
 80062ce:	1c42      	adds	r2, r0, #1
 80062d0:	4606      	mov	r6, r0
 80062d2:	d1d6      	bne.n	8006282 <_svfiprintf_r+0x176>
 80062d4:	89ab      	ldrh	r3, [r5, #12]
 80062d6:	065b      	lsls	r3, r3, #25
 80062d8:	f53f af2c 	bmi.w	8006134 <_svfiprintf_r+0x28>
 80062dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062de:	b01d      	add	sp, #116	; 0x74
 80062e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062e4:	ab03      	add	r3, sp, #12
 80062e6:	9300      	str	r3, [sp, #0]
 80062e8:	462a      	mov	r2, r5
 80062ea:	4b06      	ldr	r3, [pc, #24]	; (8006304 <_svfiprintf_r+0x1f8>)
 80062ec:	a904      	add	r1, sp, #16
 80062ee:	4638      	mov	r0, r7
 80062f0:	f000 f87a 	bl	80063e8 <_printf_i>
 80062f4:	e7eb      	b.n	80062ce <_svfiprintf_r+0x1c2>
 80062f6:	bf00      	nop
 80062f8:	08006980 	.word	0x08006980
 80062fc:	0800698a 	.word	0x0800698a
 8006300:	00000000 	.word	0x00000000
 8006304:	08006055 	.word	0x08006055
 8006308:	08006986 	.word	0x08006986

0800630c <_printf_common>:
 800630c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006310:	4616      	mov	r6, r2
 8006312:	4699      	mov	r9, r3
 8006314:	688a      	ldr	r2, [r1, #8]
 8006316:	690b      	ldr	r3, [r1, #16]
 8006318:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800631c:	4293      	cmp	r3, r2
 800631e:	bfb8      	it	lt
 8006320:	4613      	movlt	r3, r2
 8006322:	6033      	str	r3, [r6, #0]
 8006324:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006328:	4607      	mov	r7, r0
 800632a:	460c      	mov	r4, r1
 800632c:	b10a      	cbz	r2, 8006332 <_printf_common+0x26>
 800632e:	3301      	adds	r3, #1
 8006330:	6033      	str	r3, [r6, #0]
 8006332:	6823      	ldr	r3, [r4, #0]
 8006334:	0699      	lsls	r1, r3, #26
 8006336:	bf42      	ittt	mi
 8006338:	6833      	ldrmi	r3, [r6, #0]
 800633a:	3302      	addmi	r3, #2
 800633c:	6033      	strmi	r3, [r6, #0]
 800633e:	6825      	ldr	r5, [r4, #0]
 8006340:	f015 0506 	ands.w	r5, r5, #6
 8006344:	d106      	bne.n	8006354 <_printf_common+0x48>
 8006346:	f104 0a19 	add.w	sl, r4, #25
 800634a:	68e3      	ldr	r3, [r4, #12]
 800634c:	6832      	ldr	r2, [r6, #0]
 800634e:	1a9b      	subs	r3, r3, r2
 8006350:	42ab      	cmp	r3, r5
 8006352:	dc26      	bgt.n	80063a2 <_printf_common+0x96>
 8006354:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006358:	1e13      	subs	r3, r2, #0
 800635a:	6822      	ldr	r2, [r4, #0]
 800635c:	bf18      	it	ne
 800635e:	2301      	movne	r3, #1
 8006360:	0692      	lsls	r2, r2, #26
 8006362:	d42b      	bmi.n	80063bc <_printf_common+0xb0>
 8006364:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006368:	4649      	mov	r1, r9
 800636a:	4638      	mov	r0, r7
 800636c:	47c0      	blx	r8
 800636e:	3001      	adds	r0, #1
 8006370:	d01e      	beq.n	80063b0 <_printf_common+0xa4>
 8006372:	6823      	ldr	r3, [r4, #0]
 8006374:	68e5      	ldr	r5, [r4, #12]
 8006376:	6832      	ldr	r2, [r6, #0]
 8006378:	f003 0306 	and.w	r3, r3, #6
 800637c:	2b04      	cmp	r3, #4
 800637e:	bf08      	it	eq
 8006380:	1aad      	subeq	r5, r5, r2
 8006382:	68a3      	ldr	r3, [r4, #8]
 8006384:	6922      	ldr	r2, [r4, #16]
 8006386:	bf0c      	ite	eq
 8006388:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800638c:	2500      	movne	r5, #0
 800638e:	4293      	cmp	r3, r2
 8006390:	bfc4      	itt	gt
 8006392:	1a9b      	subgt	r3, r3, r2
 8006394:	18ed      	addgt	r5, r5, r3
 8006396:	2600      	movs	r6, #0
 8006398:	341a      	adds	r4, #26
 800639a:	42b5      	cmp	r5, r6
 800639c:	d11a      	bne.n	80063d4 <_printf_common+0xc8>
 800639e:	2000      	movs	r0, #0
 80063a0:	e008      	b.n	80063b4 <_printf_common+0xa8>
 80063a2:	2301      	movs	r3, #1
 80063a4:	4652      	mov	r2, sl
 80063a6:	4649      	mov	r1, r9
 80063a8:	4638      	mov	r0, r7
 80063aa:	47c0      	blx	r8
 80063ac:	3001      	adds	r0, #1
 80063ae:	d103      	bne.n	80063b8 <_printf_common+0xac>
 80063b0:	f04f 30ff 	mov.w	r0, #4294967295
 80063b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063b8:	3501      	adds	r5, #1
 80063ba:	e7c6      	b.n	800634a <_printf_common+0x3e>
 80063bc:	18e1      	adds	r1, r4, r3
 80063be:	1c5a      	adds	r2, r3, #1
 80063c0:	2030      	movs	r0, #48	; 0x30
 80063c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80063c6:	4422      	add	r2, r4
 80063c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80063cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80063d0:	3302      	adds	r3, #2
 80063d2:	e7c7      	b.n	8006364 <_printf_common+0x58>
 80063d4:	2301      	movs	r3, #1
 80063d6:	4622      	mov	r2, r4
 80063d8:	4649      	mov	r1, r9
 80063da:	4638      	mov	r0, r7
 80063dc:	47c0      	blx	r8
 80063de:	3001      	adds	r0, #1
 80063e0:	d0e6      	beq.n	80063b0 <_printf_common+0xa4>
 80063e2:	3601      	adds	r6, #1
 80063e4:	e7d9      	b.n	800639a <_printf_common+0x8e>
	...

080063e8 <_printf_i>:
 80063e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063ec:	7e0f      	ldrb	r7, [r1, #24]
 80063ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80063f0:	2f78      	cmp	r7, #120	; 0x78
 80063f2:	4691      	mov	r9, r2
 80063f4:	4680      	mov	r8, r0
 80063f6:	460c      	mov	r4, r1
 80063f8:	469a      	mov	sl, r3
 80063fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80063fe:	d807      	bhi.n	8006410 <_printf_i+0x28>
 8006400:	2f62      	cmp	r7, #98	; 0x62
 8006402:	d80a      	bhi.n	800641a <_printf_i+0x32>
 8006404:	2f00      	cmp	r7, #0
 8006406:	f000 80d8 	beq.w	80065ba <_printf_i+0x1d2>
 800640a:	2f58      	cmp	r7, #88	; 0x58
 800640c:	f000 80a3 	beq.w	8006556 <_printf_i+0x16e>
 8006410:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006414:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006418:	e03a      	b.n	8006490 <_printf_i+0xa8>
 800641a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800641e:	2b15      	cmp	r3, #21
 8006420:	d8f6      	bhi.n	8006410 <_printf_i+0x28>
 8006422:	a101      	add	r1, pc, #4	; (adr r1, 8006428 <_printf_i+0x40>)
 8006424:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006428:	08006481 	.word	0x08006481
 800642c:	08006495 	.word	0x08006495
 8006430:	08006411 	.word	0x08006411
 8006434:	08006411 	.word	0x08006411
 8006438:	08006411 	.word	0x08006411
 800643c:	08006411 	.word	0x08006411
 8006440:	08006495 	.word	0x08006495
 8006444:	08006411 	.word	0x08006411
 8006448:	08006411 	.word	0x08006411
 800644c:	08006411 	.word	0x08006411
 8006450:	08006411 	.word	0x08006411
 8006454:	080065a1 	.word	0x080065a1
 8006458:	080064c5 	.word	0x080064c5
 800645c:	08006583 	.word	0x08006583
 8006460:	08006411 	.word	0x08006411
 8006464:	08006411 	.word	0x08006411
 8006468:	080065c3 	.word	0x080065c3
 800646c:	08006411 	.word	0x08006411
 8006470:	080064c5 	.word	0x080064c5
 8006474:	08006411 	.word	0x08006411
 8006478:	08006411 	.word	0x08006411
 800647c:	0800658b 	.word	0x0800658b
 8006480:	682b      	ldr	r3, [r5, #0]
 8006482:	1d1a      	adds	r2, r3, #4
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	602a      	str	r2, [r5, #0]
 8006488:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800648c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006490:	2301      	movs	r3, #1
 8006492:	e0a3      	b.n	80065dc <_printf_i+0x1f4>
 8006494:	6820      	ldr	r0, [r4, #0]
 8006496:	6829      	ldr	r1, [r5, #0]
 8006498:	0606      	lsls	r6, r0, #24
 800649a:	f101 0304 	add.w	r3, r1, #4
 800649e:	d50a      	bpl.n	80064b6 <_printf_i+0xce>
 80064a0:	680e      	ldr	r6, [r1, #0]
 80064a2:	602b      	str	r3, [r5, #0]
 80064a4:	2e00      	cmp	r6, #0
 80064a6:	da03      	bge.n	80064b0 <_printf_i+0xc8>
 80064a8:	232d      	movs	r3, #45	; 0x2d
 80064aa:	4276      	negs	r6, r6
 80064ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064b0:	485e      	ldr	r0, [pc, #376]	; (800662c <_printf_i+0x244>)
 80064b2:	230a      	movs	r3, #10
 80064b4:	e019      	b.n	80064ea <_printf_i+0x102>
 80064b6:	680e      	ldr	r6, [r1, #0]
 80064b8:	602b      	str	r3, [r5, #0]
 80064ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 80064be:	bf18      	it	ne
 80064c0:	b236      	sxthne	r6, r6
 80064c2:	e7ef      	b.n	80064a4 <_printf_i+0xbc>
 80064c4:	682b      	ldr	r3, [r5, #0]
 80064c6:	6820      	ldr	r0, [r4, #0]
 80064c8:	1d19      	adds	r1, r3, #4
 80064ca:	6029      	str	r1, [r5, #0]
 80064cc:	0601      	lsls	r1, r0, #24
 80064ce:	d501      	bpl.n	80064d4 <_printf_i+0xec>
 80064d0:	681e      	ldr	r6, [r3, #0]
 80064d2:	e002      	b.n	80064da <_printf_i+0xf2>
 80064d4:	0646      	lsls	r6, r0, #25
 80064d6:	d5fb      	bpl.n	80064d0 <_printf_i+0xe8>
 80064d8:	881e      	ldrh	r6, [r3, #0]
 80064da:	4854      	ldr	r0, [pc, #336]	; (800662c <_printf_i+0x244>)
 80064dc:	2f6f      	cmp	r7, #111	; 0x6f
 80064de:	bf0c      	ite	eq
 80064e0:	2308      	moveq	r3, #8
 80064e2:	230a      	movne	r3, #10
 80064e4:	2100      	movs	r1, #0
 80064e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80064ea:	6865      	ldr	r5, [r4, #4]
 80064ec:	60a5      	str	r5, [r4, #8]
 80064ee:	2d00      	cmp	r5, #0
 80064f0:	bfa2      	ittt	ge
 80064f2:	6821      	ldrge	r1, [r4, #0]
 80064f4:	f021 0104 	bicge.w	r1, r1, #4
 80064f8:	6021      	strge	r1, [r4, #0]
 80064fa:	b90e      	cbnz	r6, 8006500 <_printf_i+0x118>
 80064fc:	2d00      	cmp	r5, #0
 80064fe:	d04d      	beq.n	800659c <_printf_i+0x1b4>
 8006500:	4615      	mov	r5, r2
 8006502:	fbb6 f1f3 	udiv	r1, r6, r3
 8006506:	fb03 6711 	mls	r7, r3, r1, r6
 800650a:	5dc7      	ldrb	r7, [r0, r7]
 800650c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006510:	4637      	mov	r7, r6
 8006512:	42bb      	cmp	r3, r7
 8006514:	460e      	mov	r6, r1
 8006516:	d9f4      	bls.n	8006502 <_printf_i+0x11a>
 8006518:	2b08      	cmp	r3, #8
 800651a:	d10b      	bne.n	8006534 <_printf_i+0x14c>
 800651c:	6823      	ldr	r3, [r4, #0]
 800651e:	07de      	lsls	r6, r3, #31
 8006520:	d508      	bpl.n	8006534 <_printf_i+0x14c>
 8006522:	6923      	ldr	r3, [r4, #16]
 8006524:	6861      	ldr	r1, [r4, #4]
 8006526:	4299      	cmp	r1, r3
 8006528:	bfde      	ittt	le
 800652a:	2330      	movle	r3, #48	; 0x30
 800652c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006530:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006534:	1b52      	subs	r2, r2, r5
 8006536:	6122      	str	r2, [r4, #16]
 8006538:	f8cd a000 	str.w	sl, [sp]
 800653c:	464b      	mov	r3, r9
 800653e:	aa03      	add	r2, sp, #12
 8006540:	4621      	mov	r1, r4
 8006542:	4640      	mov	r0, r8
 8006544:	f7ff fee2 	bl	800630c <_printf_common>
 8006548:	3001      	adds	r0, #1
 800654a:	d14c      	bne.n	80065e6 <_printf_i+0x1fe>
 800654c:	f04f 30ff 	mov.w	r0, #4294967295
 8006550:	b004      	add	sp, #16
 8006552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006556:	4835      	ldr	r0, [pc, #212]	; (800662c <_printf_i+0x244>)
 8006558:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800655c:	6829      	ldr	r1, [r5, #0]
 800655e:	6823      	ldr	r3, [r4, #0]
 8006560:	f851 6b04 	ldr.w	r6, [r1], #4
 8006564:	6029      	str	r1, [r5, #0]
 8006566:	061d      	lsls	r5, r3, #24
 8006568:	d514      	bpl.n	8006594 <_printf_i+0x1ac>
 800656a:	07df      	lsls	r7, r3, #31
 800656c:	bf44      	itt	mi
 800656e:	f043 0320 	orrmi.w	r3, r3, #32
 8006572:	6023      	strmi	r3, [r4, #0]
 8006574:	b91e      	cbnz	r6, 800657e <_printf_i+0x196>
 8006576:	6823      	ldr	r3, [r4, #0]
 8006578:	f023 0320 	bic.w	r3, r3, #32
 800657c:	6023      	str	r3, [r4, #0]
 800657e:	2310      	movs	r3, #16
 8006580:	e7b0      	b.n	80064e4 <_printf_i+0xfc>
 8006582:	6823      	ldr	r3, [r4, #0]
 8006584:	f043 0320 	orr.w	r3, r3, #32
 8006588:	6023      	str	r3, [r4, #0]
 800658a:	2378      	movs	r3, #120	; 0x78
 800658c:	4828      	ldr	r0, [pc, #160]	; (8006630 <_printf_i+0x248>)
 800658e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006592:	e7e3      	b.n	800655c <_printf_i+0x174>
 8006594:	0659      	lsls	r1, r3, #25
 8006596:	bf48      	it	mi
 8006598:	b2b6      	uxthmi	r6, r6
 800659a:	e7e6      	b.n	800656a <_printf_i+0x182>
 800659c:	4615      	mov	r5, r2
 800659e:	e7bb      	b.n	8006518 <_printf_i+0x130>
 80065a0:	682b      	ldr	r3, [r5, #0]
 80065a2:	6826      	ldr	r6, [r4, #0]
 80065a4:	6961      	ldr	r1, [r4, #20]
 80065a6:	1d18      	adds	r0, r3, #4
 80065a8:	6028      	str	r0, [r5, #0]
 80065aa:	0635      	lsls	r5, r6, #24
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	d501      	bpl.n	80065b4 <_printf_i+0x1cc>
 80065b0:	6019      	str	r1, [r3, #0]
 80065b2:	e002      	b.n	80065ba <_printf_i+0x1d2>
 80065b4:	0670      	lsls	r0, r6, #25
 80065b6:	d5fb      	bpl.n	80065b0 <_printf_i+0x1c8>
 80065b8:	8019      	strh	r1, [r3, #0]
 80065ba:	2300      	movs	r3, #0
 80065bc:	6123      	str	r3, [r4, #16]
 80065be:	4615      	mov	r5, r2
 80065c0:	e7ba      	b.n	8006538 <_printf_i+0x150>
 80065c2:	682b      	ldr	r3, [r5, #0]
 80065c4:	1d1a      	adds	r2, r3, #4
 80065c6:	602a      	str	r2, [r5, #0]
 80065c8:	681d      	ldr	r5, [r3, #0]
 80065ca:	6862      	ldr	r2, [r4, #4]
 80065cc:	2100      	movs	r1, #0
 80065ce:	4628      	mov	r0, r5
 80065d0:	f7f9 fe0e 	bl	80001f0 <memchr>
 80065d4:	b108      	cbz	r0, 80065da <_printf_i+0x1f2>
 80065d6:	1b40      	subs	r0, r0, r5
 80065d8:	6060      	str	r0, [r4, #4]
 80065da:	6863      	ldr	r3, [r4, #4]
 80065dc:	6123      	str	r3, [r4, #16]
 80065de:	2300      	movs	r3, #0
 80065e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065e4:	e7a8      	b.n	8006538 <_printf_i+0x150>
 80065e6:	6923      	ldr	r3, [r4, #16]
 80065e8:	462a      	mov	r2, r5
 80065ea:	4649      	mov	r1, r9
 80065ec:	4640      	mov	r0, r8
 80065ee:	47d0      	blx	sl
 80065f0:	3001      	adds	r0, #1
 80065f2:	d0ab      	beq.n	800654c <_printf_i+0x164>
 80065f4:	6823      	ldr	r3, [r4, #0]
 80065f6:	079b      	lsls	r3, r3, #30
 80065f8:	d413      	bmi.n	8006622 <_printf_i+0x23a>
 80065fa:	68e0      	ldr	r0, [r4, #12]
 80065fc:	9b03      	ldr	r3, [sp, #12]
 80065fe:	4298      	cmp	r0, r3
 8006600:	bfb8      	it	lt
 8006602:	4618      	movlt	r0, r3
 8006604:	e7a4      	b.n	8006550 <_printf_i+0x168>
 8006606:	2301      	movs	r3, #1
 8006608:	4632      	mov	r2, r6
 800660a:	4649      	mov	r1, r9
 800660c:	4640      	mov	r0, r8
 800660e:	47d0      	blx	sl
 8006610:	3001      	adds	r0, #1
 8006612:	d09b      	beq.n	800654c <_printf_i+0x164>
 8006614:	3501      	adds	r5, #1
 8006616:	68e3      	ldr	r3, [r4, #12]
 8006618:	9903      	ldr	r1, [sp, #12]
 800661a:	1a5b      	subs	r3, r3, r1
 800661c:	42ab      	cmp	r3, r5
 800661e:	dcf2      	bgt.n	8006606 <_printf_i+0x21e>
 8006620:	e7eb      	b.n	80065fa <_printf_i+0x212>
 8006622:	2500      	movs	r5, #0
 8006624:	f104 0619 	add.w	r6, r4, #25
 8006628:	e7f5      	b.n	8006616 <_printf_i+0x22e>
 800662a:	bf00      	nop
 800662c:	08006991 	.word	0x08006991
 8006630:	080069a2 	.word	0x080069a2

08006634 <memcpy>:
 8006634:	440a      	add	r2, r1
 8006636:	4291      	cmp	r1, r2
 8006638:	f100 33ff 	add.w	r3, r0, #4294967295
 800663c:	d100      	bne.n	8006640 <memcpy+0xc>
 800663e:	4770      	bx	lr
 8006640:	b510      	push	{r4, lr}
 8006642:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006646:	f803 4f01 	strb.w	r4, [r3, #1]!
 800664a:	4291      	cmp	r1, r2
 800664c:	d1f9      	bne.n	8006642 <memcpy+0xe>
 800664e:	bd10      	pop	{r4, pc}

08006650 <memmove>:
 8006650:	4288      	cmp	r0, r1
 8006652:	b510      	push	{r4, lr}
 8006654:	eb01 0402 	add.w	r4, r1, r2
 8006658:	d902      	bls.n	8006660 <memmove+0x10>
 800665a:	4284      	cmp	r4, r0
 800665c:	4623      	mov	r3, r4
 800665e:	d807      	bhi.n	8006670 <memmove+0x20>
 8006660:	1e43      	subs	r3, r0, #1
 8006662:	42a1      	cmp	r1, r4
 8006664:	d008      	beq.n	8006678 <memmove+0x28>
 8006666:	f811 2b01 	ldrb.w	r2, [r1], #1
 800666a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800666e:	e7f8      	b.n	8006662 <memmove+0x12>
 8006670:	4402      	add	r2, r0
 8006672:	4601      	mov	r1, r0
 8006674:	428a      	cmp	r2, r1
 8006676:	d100      	bne.n	800667a <memmove+0x2a>
 8006678:	bd10      	pop	{r4, pc}
 800667a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800667e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006682:	e7f7      	b.n	8006674 <memmove+0x24>

08006684 <_free_r>:
 8006684:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006686:	2900      	cmp	r1, #0
 8006688:	d044      	beq.n	8006714 <_free_r+0x90>
 800668a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800668e:	9001      	str	r0, [sp, #4]
 8006690:	2b00      	cmp	r3, #0
 8006692:	f1a1 0404 	sub.w	r4, r1, #4
 8006696:	bfb8      	it	lt
 8006698:	18e4      	addlt	r4, r4, r3
 800669a:	f000 f913 	bl	80068c4 <__malloc_lock>
 800669e:	4a1e      	ldr	r2, [pc, #120]	; (8006718 <_free_r+0x94>)
 80066a0:	9801      	ldr	r0, [sp, #4]
 80066a2:	6813      	ldr	r3, [r2, #0]
 80066a4:	b933      	cbnz	r3, 80066b4 <_free_r+0x30>
 80066a6:	6063      	str	r3, [r4, #4]
 80066a8:	6014      	str	r4, [r2, #0]
 80066aa:	b003      	add	sp, #12
 80066ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80066b0:	f000 b90e 	b.w	80068d0 <__malloc_unlock>
 80066b4:	42a3      	cmp	r3, r4
 80066b6:	d908      	bls.n	80066ca <_free_r+0x46>
 80066b8:	6825      	ldr	r5, [r4, #0]
 80066ba:	1961      	adds	r1, r4, r5
 80066bc:	428b      	cmp	r3, r1
 80066be:	bf01      	itttt	eq
 80066c0:	6819      	ldreq	r1, [r3, #0]
 80066c2:	685b      	ldreq	r3, [r3, #4]
 80066c4:	1949      	addeq	r1, r1, r5
 80066c6:	6021      	streq	r1, [r4, #0]
 80066c8:	e7ed      	b.n	80066a6 <_free_r+0x22>
 80066ca:	461a      	mov	r2, r3
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	b10b      	cbz	r3, 80066d4 <_free_r+0x50>
 80066d0:	42a3      	cmp	r3, r4
 80066d2:	d9fa      	bls.n	80066ca <_free_r+0x46>
 80066d4:	6811      	ldr	r1, [r2, #0]
 80066d6:	1855      	adds	r5, r2, r1
 80066d8:	42a5      	cmp	r5, r4
 80066da:	d10b      	bne.n	80066f4 <_free_r+0x70>
 80066dc:	6824      	ldr	r4, [r4, #0]
 80066de:	4421      	add	r1, r4
 80066e0:	1854      	adds	r4, r2, r1
 80066e2:	42a3      	cmp	r3, r4
 80066e4:	6011      	str	r1, [r2, #0]
 80066e6:	d1e0      	bne.n	80066aa <_free_r+0x26>
 80066e8:	681c      	ldr	r4, [r3, #0]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	6053      	str	r3, [r2, #4]
 80066ee:	4421      	add	r1, r4
 80066f0:	6011      	str	r1, [r2, #0]
 80066f2:	e7da      	b.n	80066aa <_free_r+0x26>
 80066f4:	d902      	bls.n	80066fc <_free_r+0x78>
 80066f6:	230c      	movs	r3, #12
 80066f8:	6003      	str	r3, [r0, #0]
 80066fa:	e7d6      	b.n	80066aa <_free_r+0x26>
 80066fc:	6825      	ldr	r5, [r4, #0]
 80066fe:	1961      	adds	r1, r4, r5
 8006700:	428b      	cmp	r3, r1
 8006702:	bf04      	itt	eq
 8006704:	6819      	ldreq	r1, [r3, #0]
 8006706:	685b      	ldreq	r3, [r3, #4]
 8006708:	6063      	str	r3, [r4, #4]
 800670a:	bf04      	itt	eq
 800670c:	1949      	addeq	r1, r1, r5
 800670e:	6021      	streq	r1, [r4, #0]
 8006710:	6054      	str	r4, [r2, #4]
 8006712:	e7ca      	b.n	80066aa <_free_r+0x26>
 8006714:	b003      	add	sp, #12
 8006716:	bd30      	pop	{r4, r5, pc}
 8006718:	200002b0 	.word	0x200002b0

0800671c <sbrk_aligned>:
 800671c:	b570      	push	{r4, r5, r6, lr}
 800671e:	4e0e      	ldr	r6, [pc, #56]	; (8006758 <sbrk_aligned+0x3c>)
 8006720:	460c      	mov	r4, r1
 8006722:	6831      	ldr	r1, [r6, #0]
 8006724:	4605      	mov	r5, r0
 8006726:	b911      	cbnz	r1, 800672e <sbrk_aligned+0x12>
 8006728:	f000 f8bc 	bl	80068a4 <_sbrk_r>
 800672c:	6030      	str	r0, [r6, #0]
 800672e:	4621      	mov	r1, r4
 8006730:	4628      	mov	r0, r5
 8006732:	f000 f8b7 	bl	80068a4 <_sbrk_r>
 8006736:	1c43      	adds	r3, r0, #1
 8006738:	d00a      	beq.n	8006750 <sbrk_aligned+0x34>
 800673a:	1cc4      	adds	r4, r0, #3
 800673c:	f024 0403 	bic.w	r4, r4, #3
 8006740:	42a0      	cmp	r0, r4
 8006742:	d007      	beq.n	8006754 <sbrk_aligned+0x38>
 8006744:	1a21      	subs	r1, r4, r0
 8006746:	4628      	mov	r0, r5
 8006748:	f000 f8ac 	bl	80068a4 <_sbrk_r>
 800674c:	3001      	adds	r0, #1
 800674e:	d101      	bne.n	8006754 <sbrk_aligned+0x38>
 8006750:	f04f 34ff 	mov.w	r4, #4294967295
 8006754:	4620      	mov	r0, r4
 8006756:	bd70      	pop	{r4, r5, r6, pc}
 8006758:	200002b4 	.word	0x200002b4

0800675c <_malloc_r>:
 800675c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006760:	1ccd      	adds	r5, r1, #3
 8006762:	f025 0503 	bic.w	r5, r5, #3
 8006766:	3508      	adds	r5, #8
 8006768:	2d0c      	cmp	r5, #12
 800676a:	bf38      	it	cc
 800676c:	250c      	movcc	r5, #12
 800676e:	2d00      	cmp	r5, #0
 8006770:	4607      	mov	r7, r0
 8006772:	db01      	blt.n	8006778 <_malloc_r+0x1c>
 8006774:	42a9      	cmp	r1, r5
 8006776:	d905      	bls.n	8006784 <_malloc_r+0x28>
 8006778:	230c      	movs	r3, #12
 800677a:	603b      	str	r3, [r7, #0]
 800677c:	2600      	movs	r6, #0
 800677e:	4630      	mov	r0, r6
 8006780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006784:	4e2e      	ldr	r6, [pc, #184]	; (8006840 <_malloc_r+0xe4>)
 8006786:	f000 f89d 	bl	80068c4 <__malloc_lock>
 800678a:	6833      	ldr	r3, [r6, #0]
 800678c:	461c      	mov	r4, r3
 800678e:	bb34      	cbnz	r4, 80067de <_malloc_r+0x82>
 8006790:	4629      	mov	r1, r5
 8006792:	4638      	mov	r0, r7
 8006794:	f7ff ffc2 	bl	800671c <sbrk_aligned>
 8006798:	1c43      	adds	r3, r0, #1
 800679a:	4604      	mov	r4, r0
 800679c:	d14d      	bne.n	800683a <_malloc_r+0xde>
 800679e:	6834      	ldr	r4, [r6, #0]
 80067a0:	4626      	mov	r6, r4
 80067a2:	2e00      	cmp	r6, #0
 80067a4:	d140      	bne.n	8006828 <_malloc_r+0xcc>
 80067a6:	6823      	ldr	r3, [r4, #0]
 80067a8:	4631      	mov	r1, r6
 80067aa:	4638      	mov	r0, r7
 80067ac:	eb04 0803 	add.w	r8, r4, r3
 80067b0:	f000 f878 	bl	80068a4 <_sbrk_r>
 80067b4:	4580      	cmp	r8, r0
 80067b6:	d13a      	bne.n	800682e <_malloc_r+0xd2>
 80067b8:	6821      	ldr	r1, [r4, #0]
 80067ba:	3503      	adds	r5, #3
 80067bc:	1a6d      	subs	r5, r5, r1
 80067be:	f025 0503 	bic.w	r5, r5, #3
 80067c2:	3508      	adds	r5, #8
 80067c4:	2d0c      	cmp	r5, #12
 80067c6:	bf38      	it	cc
 80067c8:	250c      	movcc	r5, #12
 80067ca:	4629      	mov	r1, r5
 80067cc:	4638      	mov	r0, r7
 80067ce:	f7ff ffa5 	bl	800671c <sbrk_aligned>
 80067d2:	3001      	adds	r0, #1
 80067d4:	d02b      	beq.n	800682e <_malloc_r+0xd2>
 80067d6:	6823      	ldr	r3, [r4, #0]
 80067d8:	442b      	add	r3, r5
 80067da:	6023      	str	r3, [r4, #0]
 80067dc:	e00e      	b.n	80067fc <_malloc_r+0xa0>
 80067de:	6822      	ldr	r2, [r4, #0]
 80067e0:	1b52      	subs	r2, r2, r5
 80067e2:	d41e      	bmi.n	8006822 <_malloc_r+0xc6>
 80067e4:	2a0b      	cmp	r2, #11
 80067e6:	d916      	bls.n	8006816 <_malloc_r+0xba>
 80067e8:	1961      	adds	r1, r4, r5
 80067ea:	42a3      	cmp	r3, r4
 80067ec:	6025      	str	r5, [r4, #0]
 80067ee:	bf18      	it	ne
 80067f0:	6059      	strne	r1, [r3, #4]
 80067f2:	6863      	ldr	r3, [r4, #4]
 80067f4:	bf08      	it	eq
 80067f6:	6031      	streq	r1, [r6, #0]
 80067f8:	5162      	str	r2, [r4, r5]
 80067fa:	604b      	str	r3, [r1, #4]
 80067fc:	4638      	mov	r0, r7
 80067fe:	f104 060b 	add.w	r6, r4, #11
 8006802:	f000 f865 	bl	80068d0 <__malloc_unlock>
 8006806:	f026 0607 	bic.w	r6, r6, #7
 800680a:	1d23      	adds	r3, r4, #4
 800680c:	1af2      	subs	r2, r6, r3
 800680e:	d0b6      	beq.n	800677e <_malloc_r+0x22>
 8006810:	1b9b      	subs	r3, r3, r6
 8006812:	50a3      	str	r3, [r4, r2]
 8006814:	e7b3      	b.n	800677e <_malloc_r+0x22>
 8006816:	6862      	ldr	r2, [r4, #4]
 8006818:	42a3      	cmp	r3, r4
 800681a:	bf0c      	ite	eq
 800681c:	6032      	streq	r2, [r6, #0]
 800681e:	605a      	strne	r2, [r3, #4]
 8006820:	e7ec      	b.n	80067fc <_malloc_r+0xa0>
 8006822:	4623      	mov	r3, r4
 8006824:	6864      	ldr	r4, [r4, #4]
 8006826:	e7b2      	b.n	800678e <_malloc_r+0x32>
 8006828:	4634      	mov	r4, r6
 800682a:	6876      	ldr	r6, [r6, #4]
 800682c:	e7b9      	b.n	80067a2 <_malloc_r+0x46>
 800682e:	230c      	movs	r3, #12
 8006830:	603b      	str	r3, [r7, #0]
 8006832:	4638      	mov	r0, r7
 8006834:	f000 f84c 	bl	80068d0 <__malloc_unlock>
 8006838:	e7a1      	b.n	800677e <_malloc_r+0x22>
 800683a:	6025      	str	r5, [r4, #0]
 800683c:	e7de      	b.n	80067fc <_malloc_r+0xa0>
 800683e:	bf00      	nop
 8006840:	200002b0 	.word	0x200002b0

08006844 <_realloc_r>:
 8006844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006848:	4680      	mov	r8, r0
 800684a:	4614      	mov	r4, r2
 800684c:	460e      	mov	r6, r1
 800684e:	b921      	cbnz	r1, 800685a <_realloc_r+0x16>
 8006850:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006854:	4611      	mov	r1, r2
 8006856:	f7ff bf81 	b.w	800675c <_malloc_r>
 800685a:	b92a      	cbnz	r2, 8006868 <_realloc_r+0x24>
 800685c:	f7ff ff12 	bl	8006684 <_free_r>
 8006860:	4625      	mov	r5, r4
 8006862:	4628      	mov	r0, r5
 8006864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006868:	f000 f838 	bl	80068dc <_malloc_usable_size_r>
 800686c:	4284      	cmp	r4, r0
 800686e:	4607      	mov	r7, r0
 8006870:	d802      	bhi.n	8006878 <_realloc_r+0x34>
 8006872:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006876:	d812      	bhi.n	800689e <_realloc_r+0x5a>
 8006878:	4621      	mov	r1, r4
 800687a:	4640      	mov	r0, r8
 800687c:	f7ff ff6e 	bl	800675c <_malloc_r>
 8006880:	4605      	mov	r5, r0
 8006882:	2800      	cmp	r0, #0
 8006884:	d0ed      	beq.n	8006862 <_realloc_r+0x1e>
 8006886:	42bc      	cmp	r4, r7
 8006888:	4622      	mov	r2, r4
 800688a:	4631      	mov	r1, r6
 800688c:	bf28      	it	cs
 800688e:	463a      	movcs	r2, r7
 8006890:	f7ff fed0 	bl	8006634 <memcpy>
 8006894:	4631      	mov	r1, r6
 8006896:	4640      	mov	r0, r8
 8006898:	f7ff fef4 	bl	8006684 <_free_r>
 800689c:	e7e1      	b.n	8006862 <_realloc_r+0x1e>
 800689e:	4635      	mov	r5, r6
 80068a0:	e7df      	b.n	8006862 <_realloc_r+0x1e>
	...

080068a4 <_sbrk_r>:
 80068a4:	b538      	push	{r3, r4, r5, lr}
 80068a6:	4d06      	ldr	r5, [pc, #24]	; (80068c0 <_sbrk_r+0x1c>)
 80068a8:	2300      	movs	r3, #0
 80068aa:	4604      	mov	r4, r0
 80068ac:	4608      	mov	r0, r1
 80068ae:	602b      	str	r3, [r5, #0]
 80068b0:	f7fb ff68 	bl	8002784 <_sbrk>
 80068b4:	1c43      	adds	r3, r0, #1
 80068b6:	d102      	bne.n	80068be <_sbrk_r+0x1a>
 80068b8:	682b      	ldr	r3, [r5, #0]
 80068ba:	b103      	cbz	r3, 80068be <_sbrk_r+0x1a>
 80068bc:	6023      	str	r3, [r4, #0]
 80068be:	bd38      	pop	{r3, r4, r5, pc}
 80068c0:	200002b8 	.word	0x200002b8

080068c4 <__malloc_lock>:
 80068c4:	4801      	ldr	r0, [pc, #4]	; (80068cc <__malloc_lock+0x8>)
 80068c6:	f000 b811 	b.w	80068ec <__retarget_lock_acquire_recursive>
 80068ca:	bf00      	nop
 80068cc:	200002bc 	.word	0x200002bc

080068d0 <__malloc_unlock>:
 80068d0:	4801      	ldr	r0, [pc, #4]	; (80068d8 <__malloc_unlock+0x8>)
 80068d2:	f000 b80c 	b.w	80068ee <__retarget_lock_release_recursive>
 80068d6:	bf00      	nop
 80068d8:	200002bc 	.word	0x200002bc

080068dc <_malloc_usable_size_r>:
 80068dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068e0:	1f18      	subs	r0, r3, #4
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	bfbc      	itt	lt
 80068e6:	580b      	ldrlt	r3, [r1, r0]
 80068e8:	18c0      	addlt	r0, r0, r3
 80068ea:	4770      	bx	lr

080068ec <__retarget_lock_acquire_recursive>:
 80068ec:	4770      	bx	lr

080068ee <__retarget_lock_release_recursive>:
 80068ee:	4770      	bx	lr

080068f0 <_init>:
 80068f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068f2:	bf00      	nop
 80068f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068f6:	bc08      	pop	{r3}
 80068f8:	469e      	mov	lr, r3
 80068fa:	4770      	bx	lr

080068fc <_fini>:
 80068fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068fe:	bf00      	nop
 8006900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006902:	bc08      	pop	{r3}
 8006904:	469e      	mov	lr, r3
 8006906:	4770      	bx	lr

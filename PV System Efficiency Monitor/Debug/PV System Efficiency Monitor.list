
PV System Efficiency Monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c25c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000500  0800c400  0800c400  0001c400  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c900  0800c900  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  0800c900  0800c900  0001c900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c908  0800c908  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c908  0800c908  0001c908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c90c  0800c90c  0001c90c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800c910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  20000210  0800cb20  00020210  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000570  0800cb20  00020570  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012847  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002701  00000000  00000000  00032a87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a0  00000000  00000000  00035188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa8  00000000  00000000  00036228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000199e8  00000000  00000000  000371d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013865  00000000  00000000  00050bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2922  00000000  00000000  0006441d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00106d3f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a98  00000000  00000000  00106d90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000210 	.word	0x20000210
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c3e4 	.word	0x0800c3e4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000214 	.word	0x20000214
 80001dc:	0800c3e4 	.word	0x0800c3e4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000f9c:	b5b0      	push	{r4, r5, r7, lr}
 8000f9e:	b08a      	sub	sp, #40	; 0x28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
 8000fa8:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000faa:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000fae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8000fb2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000fb6:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000fb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fba:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000fbc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000fbe:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000fcc:	f107 0310 	add.w	r3, r7, #16
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f000 f80e 	bl	8000ff2 <Lcd_init>

	return lcd;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	461d      	mov	r5, r3
 8000fda:	f107 0410 	add.w	r4, r7, #16
 8000fde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fe0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fe2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fe6:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000fea:	68f8      	ldr	r0, [r7, #12]
 8000fec:	3728      	adds	r7, #40	; 0x28
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bdb0      	pop	{r4, r5, r7, pc}

08000ff2 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	7d9b      	ldrb	r3, [r3, #22]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d10c      	bne.n	800101c <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8001002:	2133      	movs	r1, #51	; 0x33
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f000 f863 	bl	80010d0 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 800100a:	2132      	movs	r1, #50	; 0x32
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f000 f85f 	bl	80010d0 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8001012:	2128      	movs	r1, #40	; 0x28
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f000 f85b 	bl	80010d0 <lcd_write_command>
 800101a:	e003      	b.n	8001024 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 800101c:	2138      	movs	r1, #56	; 0x38
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f000 f856 	bl	80010d0 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8001024:	2101      	movs	r1, #1
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f000 f852 	bl	80010d0 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 800102c:	210c      	movs	r1, #12
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f000 f84e 	bl	80010d0 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8001034:	2106      	movs	r1, #6
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f000 f84a 	bl	80010d0 <lcd_write_command>
}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8001044:	b590      	push	{r4, r7, lr}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]

	for(uint8_t i = 0; i < strlen(string); i++)
 800104e:	2300      	movs	r3, #0
 8001050:	73fb      	strb	r3, [r7, #15]
 8001052:	e00a      	b.n	800106a <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8001054:	7bfb      	ldrb	r3, [r7, #15]
 8001056:	683a      	ldr	r2, [r7, #0]
 8001058:	4413      	add	r3, r2
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	4619      	mov	r1, r3
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f000 f864 	bl	800112c <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8001064:	7bfb      	ldrb	r3, [r7, #15]
 8001066:	3301      	adds	r3, #1
 8001068:	73fb      	strb	r3, [r7, #15]
 800106a:	7bfc      	ldrb	r4, [r7, #15]
 800106c:	6838      	ldr	r0, [r7, #0]
 800106e:	f7ff f8b7 	bl	80001e0 <strlen>
 8001072:	4603      	mov	r3, r0
 8001074:	429c      	cmp	r4, r3
 8001076:	d3ed      	bcc.n	8001054 <Lcd_string+0x10>
	}
}
 8001078:	bf00      	nop
 800107a:	bf00      	nop
 800107c:	3714      	adds	r7, #20
 800107e:	46bd      	mov	sp, r7
 8001080:	bd90      	pop	{r4, r7, pc}
	...

08001084 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	460b      	mov	r3, r1
 800108e:	70fb      	strb	r3, [r7, #3]
 8001090:	4613      	mov	r3, r2
 8001092:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8001094:	78fb      	ldrb	r3, [r7, #3]
 8001096:	4a07      	ldr	r2, [pc, #28]	; (80010b4 <Lcd_cursor+0x30>)
 8001098:	5cd2      	ldrb	r2, [r2, r3]
 800109a:	78bb      	ldrb	r3, [r7, #2]
 800109c:	4413      	add	r3, r2
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	3b80      	subs	r3, #128	; 0x80
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	4619      	mov	r1, r3
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f000 f812 	bl	80010d0 <lcd_write_command>
	#endif
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	0800c4d8 	.word	0x0800c4d8

080010b8 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 80010c0:	2101      	movs	r1, #1
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f000 f804 	bl	80010d0 <lcd_write_command>
}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	460b      	mov	r3, r1
 80010da:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6898      	ldr	r0, [r3, #8]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	899b      	ldrh	r3, [r3, #12]
 80010e4:	2200      	movs	r2, #0
 80010e6:	4619      	mov	r1, r3
 80010e8:	f004 f812 	bl	8005110 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	7d9b      	ldrb	r3, [r3, #22]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d111      	bne.n	8001118 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80010f4:	78fb      	ldrb	r3, [r7, #3]
 80010f6:	091b      	lsrs	r3, r3, #4
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	2204      	movs	r2, #4
 80010fc:	4619      	mov	r1, r3
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f000 f842 	bl	8001188 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8001104:	78fb      	ldrb	r3, [r7, #3]
 8001106:	f003 030f 	and.w	r3, r3, #15
 800110a:	b2db      	uxtb	r3, r3
 800110c:	2204      	movs	r2, #4
 800110e:	4619      	mov	r1, r3
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f000 f839 	bl	8001188 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8001116:	e005      	b.n	8001124 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8001118:	78fb      	ldrb	r3, [r7, #3]
 800111a:	2208      	movs	r2, #8
 800111c:	4619      	mov	r1, r3
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f000 f832 	bl	8001188 <lcd_write>
}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <lcd_write_data>:
/**
 * Write a byte to the data register
 */

void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	460b      	mov	r3, r1
 8001136:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6898      	ldr	r0, [r3, #8]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	899b      	ldrh	r3, [r3, #12]
 8001140:	2201      	movs	r2, #1
 8001142:	4619      	mov	r1, r3
 8001144:	f003 ffe4 	bl	8005110 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	7d9b      	ldrb	r3, [r3, #22]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d111      	bne.n	8001174 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8001150:	78fb      	ldrb	r3, [r7, #3]
 8001152:	091b      	lsrs	r3, r3, #4
 8001154:	b2db      	uxtb	r3, r3
 8001156:	2204      	movs	r2, #4
 8001158:	4619      	mov	r1, r3
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f000 f814 	bl	8001188 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8001160:	78fb      	ldrb	r3, [r7, #3]
 8001162:	f003 030f 	and.w	r3, r3, #15
 8001166:	b2db      	uxtb	r3, r3
 8001168:	2204      	movs	r2, #4
 800116a:	4619      	mov	r1, r3
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f000 f80b 	bl	8001188 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8001172:	e005      	b.n	8001180 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8001174:	78fb      	ldrb	r3, [r7, #3]
 8001176:	2208      	movs	r2, #8
 8001178:	4619      	mov	r1, r3
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f000 f804 	bl	8001188 <lcd_write>
}
 8001180:	bf00      	nop
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <lcd_write>:
 */

uint8_t set_enable = 0;
uint32_t previous_time = 0;
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	70fb      	strb	r3, [r7, #3]
 8001194:	4613      	mov	r3, r2
 8001196:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8001198:	2300      	movs	r3, #0
 800119a:	73fb      	strb	r3, [r7, #15]
 800119c:	e019      	b.n	80011d2 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	4413      	add	r3, r2
 80011a8:	6818      	ldr	r0, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685a      	ldr	r2, [r3, #4]
 80011ae:	7bfb      	ldrb	r3, [r7, #15]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	4413      	add	r3, r2
 80011b4:	8819      	ldrh	r1, [r3, #0]
 80011b6:	78fa      	ldrb	r2, [r7, #3]
 80011b8:	7bfb      	ldrb	r3, [r7, #15]
 80011ba:	fa42 f303 	asr.w	r3, r2, r3
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	461a      	mov	r2, r3
 80011c8:	f003 ffa2 	bl	8005110 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80011cc:	7bfb      	ldrb	r3, [r7, #15]
 80011ce:	3301      	adds	r3, #1
 80011d0:	73fb      	strb	r3, [r7, #15]
 80011d2:	7bfa      	ldrb	r2, [r7, #15]
 80011d4:	78bb      	ldrb	r3, [r7, #2]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d3e1      	bcc.n	800119e <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6918      	ldr	r0, [r3, #16]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	8a9b      	ldrh	r3, [r3, #20]
 80011e2:	2201      	movs	r2, #1
 80011e4:	4619      	mov	r1, r3
 80011e6:	f003 ff93 	bl	8005110 <HAL_GPIO_WritePin>
	DELAY(1);
 80011ea:	2001      	movs	r0, #1
 80011ec:	f003 f83a 	bl	8004264 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6918      	ldr	r0, [r3, #16]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	8a9b      	ldrh	r3, [r3, #20]
 80011f8:	2200      	movs	r2, #0
 80011fa:	4619      	mov	r1, r3
 80011fc:	f003 ff88 	bl	8005110 <HAL_GPIO_WritePin>
//        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); // E = 0
//        set_enable = 1;
//        previous_time = HAL_GetTick() ;
//    }

}
 8001200:	bf00      	nop
 8001202:	3710      	adds	r7, #16
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <HAL_UART_RxCpltCallback>:
uint16_t get_calibrated_power(uint16_t lux_measured, uint16_t panel_temper, uint16_t p_measured) ;
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]

	g_system_config[g_byte_count] = char_rcvd[0] ;
 8001210:	4b14      	ldr	r3, [pc, #80]	; (8001264 <HAL_UART_RxCpltCallback+0x5c>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	461a      	mov	r2, r3
 8001216:	4b14      	ldr	r3, [pc, #80]	; (8001268 <HAL_UART_RxCpltCallback+0x60>)
 8001218:	7819      	ldrb	r1, [r3, #0]
 800121a:	4b14      	ldr	r3, [pc, #80]	; (800126c <HAL_UART_RxCpltCallback+0x64>)
 800121c:	5499      	strb	r1, [r3, r2]
	g_byte_count++ ;
 800121e:	4b11      	ldr	r3, [pc, #68]	; (8001264 <HAL_UART_RxCpltCallback+0x5c>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	3301      	adds	r3, #1
 8001224:	b2da      	uxtb	r2, r3
 8001226:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <HAL_UART_RxCpltCallback+0x5c>)
 8001228:	701a      	strb	r2, [r3, #0]

	if(char_rcvd[0] == '\n'){
 800122a:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <HAL_UART_RxCpltCallback+0x60>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	2b0a      	cmp	r3, #10
 8001230:	d10f      	bne.n	8001252 <HAL_UART_RxCpltCallback+0x4a>
		if(g_byte_count == 7){
 8001232:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <HAL_UART_RxCpltCallback+0x5c>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b07      	cmp	r3, #7
 8001238:	d103      	bne.n	8001242 <HAL_UART_RxCpltCallback+0x3a>
			g_config_command_rcvd = 1;
 800123a:	4b0d      	ldr	r3, [pc, #52]	; (8001270 <HAL_UART_RxCpltCallback+0x68>)
 800123c:	2201      	movs	r2, #1
 800123e:	701a      	strb	r2, [r3, #0]
 8001240:	e004      	b.n	800124c <HAL_UART_RxCpltCallback+0x44>
			// check for SP or EN command recvd
		}
		else{
			// remove for next DEMO
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)"Invalid command sent\n", 21);
 8001242:	2215      	movs	r2, #21
 8001244:	490b      	ldr	r1, [pc, #44]	; (8001274 <HAL_UART_RxCpltCallback+0x6c>)
 8001246:	480c      	ldr	r0, [pc, #48]	; (8001278 <HAL_UART_RxCpltCallback+0x70>)
 8001248:	f006 fb1b 	bl	8007882 <HAL_UART_Transmit_IT>
			// DO NOTHING: NO STATE UPDATE IN THE CASE OF COMMAND NOT IN THE APPROPRIATE ORDER
		}

		g_byte_count =0 ;
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <HAL_UART_RxCpltCallback+0x5c>)
 800124e:	2200      	movs	r2, #0
 8001250:	701a      	strb	r2, [r3, #0]
	}

	//re-prime receiver
	HAL_UART_Receive_IT(&huart2, (uint8_t*)char_rcvd, 1) ;
 8001252:	2201      	movs	r2, #1
 8001254:	4904      	ldr	r1, [pc, #16]	; (8001268 <HAL_UART_RxCpltCallback+0x60>)
 8001256:	4808      	ldr	r0, [pc, #32]	; (8001278 <HAL_UART_RxCpltCallback+0x70>)
 8001258:	f006 fb58 	bl	800790c <HAL_UART_Receive_IT>

}
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000481 	.word	0x20000481
 8001268:	20000010 	.word	0x20000010
 800126c:	20000470 	.word	0x20000470
 8001270:	20000482 	.word	0x20000482
 8001274:	0800c400 	.word	0x0800c400
 8001278:	2000036c 	.word	0x2000036c
 800127c:	00000000 	.word	0x00000000

08001280 <get_adc_value_and_celsius_temperature>:
/**
 * function starts the adc, waits for conversion
 * Then converts value to degrees
 */

uint16_t get_adc_value_and_celsius_temperature(){
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0

	//select adc channel 0
	ADC_Select_CH0() ;
 8001284:	f000 fc0a 	bl	8001a9c <ADC_Select_CH0>
	HAL_ADC_Start(&hadc1) ;
 8001288:	4825      	ldr	r0, [pc, #148]	; (8001320 <get_adc_value_and_celsius_temperature+0xa0>)
 800128a:	f003 f853 	bl	8004334 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800128e:	f04f 31ff 	mov.w	r1, #4294967295
 8001292:	4823      	ldr	r0, [pc, #140]	; (8001320 <get_adc_value_and_celsius_temperature+0xa0>)
 8001294:	f003 f935 	bl	8004502 <HAL_ADC_PollForConversion>
	g_raw  = HAL_ADC_GetValue(&hadc1) ;
 8001298:	4821      	ldr	r0, [pc, #132]	; (8001320 <get_adc_value_and_celsius_temperature+0xa0>)
 800129a:	f003 f9bd 	bl	8004618 <HAL_ADC_GetValue>
 800129e:	4603      	mov	r3, r0
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	4b20      	ldr	r3, [pc, #128]	; (8001324 <get_adc_value_and_celsius_temperature+0xa4>)
 80012a4:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1) ;  //stop adc
 80012a6:	481e      	ldr	r0, [pc, #120]	; (8001320 <get_adc_value_and_celsius_temperature+0xa0>)
 80012a8:	f003 f8f8 	bl	800449c <HAL_ADC_Stop>

	g_vin = g_raw*(3.3/4095.0) ; // input voltage
 80012ac:	4b1d      	ldr	r3, [pc, #116]	; (8001324 <get_adc_value_and_celsius_temperature+0xa4>)
 80012ae:	881b      	ldrh	r3, [r3, #0]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff f93f 	bl	8000534 <__aeabi_i2d>
 80012b6:	a316      	add	r3, pc, #88	; (adr r3, 8001310 <get_adc_value_and_celsius_temperature+0x90>)
 80012b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012bc:	f7ff f9a4 	bl	8000608 <__aeabi_dmul>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4918      	ldr	r1, [pc, #96]	; (8001328 <get_adc_value_and_celsius_temperature+0xa8>)
 80012c6:	e9c1 2300 	strd	r2, r3, [r1]
	g_temp = g_vin*100 - 273.15 ; // cast to 16 bit uint
 80012ca:	4b17      	ldr	r3, [pc, #92]	; (8001328 <get_adc_value_and_celsius_temperature+0xa8>)
 80012cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012d0:	f04f 0200 	mov.w	r2, #0
 80012d4:	4b15      	ldr	r3, [pc, #84]	; (800132c <get_adc_value_and_celsius_temperature+0xac>)
 80012d6:	f7ff f997 	bl	8000608 <__aeabi_dmul>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	4610      	mov	r0, r2
 80012e0:	4619      	mov	r1, r3
 80012e2:	a30d      	add	r3, pc, #52	; (adr r3, 8001318 <get_adc_value_and_celsius_temperature+0x98>)
 80012e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e8:	f7fe ffd6 	bl	8000298 <__aeabi_dsub>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	490f      	ldr	r1, [pc, #60]	; (8001330 <get_adc_value_and_celsius_temperature+0xb0>)
 80012f2:	e9c1 2300 	strd	r2, r3, [r1]

	return g_temp ;
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <get_adc_value_and_celsius_temperature+0xb0>)
 80012f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fc:	4610      	mov	r0, r2
 80012fe:	4619      	mov	r1, r3
 8001300:	f7ff fc5a 	bl	8000bb8 <__aeabi_d2uiz>
 8001304:	4603      	mov	r3, r0
 8001306:	b29b      	uxth	r3, r3
}
 8001308:	4618      	mov	r0, r3
 800130a:	bd80      	pop	{r7, pc}
 800130c:	f3af 8000 	nop.w
 8001310:	e734d9b4 	.word	0xe734d9b4
 8001314:	3f4a680c 	.word	0x3f4a680c
 8001318:	66666666 	.word	0x66666666
 800131c:	40711266 	.word	0x40711266
 8001320:	2000022c 	.word	0x2000022c
 8001324:	200003b0 	.word	0x200003b0
 8001328:	200003c0 	.word	0x200003c0
 800132c:	40590000 	.word	0x40590000
 8001330:	200003b8 	.word	0x200003b8

08001334 <store_temp_in_string>:

void store_temp_in_string(uint16_t temperature, char temp[], int len){
 8001334:	b480      	push	{r7}
 8001336:	b087      	sub	sp, #28
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
 8001340:	81fb      	strh	r3, [r7, #14]

	for(int i= 0 ; i < len ; i++){
 8001342:	2300      	movs	r3, #0
 8001344:	617b      	str	r3, [r7, #20]
 8001346:	e04e      	b.n	80013e6 <store_temp_in_string+0xb2>
		switch(i){
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	2b02      	cmp	r3, #2
 800134c:	d02f      	beq.n	80013ae <store_temp_in_string+0x7a>
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	2b02      	cmp	r3, #2
 8001352:	dc44      	bgt.n	80013de <store_temp_in_string+0xaa>
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <store_temp_in_string+0x2e>
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d00c      	beq.n	800137a <store_temp_in_string+0x46>
			case 2:
				temp[2] = (temperature - ((temperature/10)*10) ) + 48 ;

				break;
			default:
				break;
 8001360:	e03d      	b.n	80013de <store_temp_in_string+0xaa>
				temp[0]  = (temperature/100) + 48 ;
 8001362:	89fb      	ldrh	r3, [r7, #14]
 8001364:	4a25      	ldr	r2, [pc, #148]	; (80013fc <store_temp_in_string+0xc8>)
 8001366:	fba2 2303 	umull	r2, r3, r2, r3
 800136a:	095b      	lsrs	r3, r3, #5
 800136c:	b29b      	uxth	r3, r3
 800136e:	b2db      	uxtb	r3, r3
 8001370:	3330      	adds	r3, #48	; 0x30
 8001372:	b2da      	uxtb	r2, r3
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	701a      	strb	r2, [r3, #0]
				break;
 8001378:	e032      	b.n	80013e0 <store_temp_in_string+0xac>
				temp[1] = (temperature - (temperature/100)*100 )/10 + 48 ;
 800137a:	89fa      	ldrh	r2, [r7, #14]
 800137c:	89fb      	ldrh	r3, [r7, #14]
 800137e:	491f      	ldr	r1, [pc, #124]	; (80013fc <store_temp_in_string+0xc8>)
 8001380:	fba1 1303 	umull	r1, r3, r1, r3
 8001384:	095b      	lsrs	r3, r3, #5
 8001386:	b29b      	uxth	r3, r3
 8001388:	4619      	mov	r1, r3
 800138a:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800138e:	fb01 f303 	mul.w	r3, r1, r3
 8001392:	4413      	add	r3, r2
 8001394:	4a1a      	ldr	r2, [pc, #104]	; (8001400 <store_temp_in_string+0xcc>)
 8001396:	fb82 1203 	smull	r1, r2, r2, r3
 800139a:	1092      	asrs	r2, r2, #2
 800139c:	17db      	asrs	r3, r3, #31
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	3301      	adds	r3, #1
 80013a6:	3230      	adds	r2, #48	; 0x30
 80013a8:	b2d2      	uxtb	r2, r2
 80013aa:	701a      	strb	r2, [r3, #0]
				break;
 80013ac:	e018      	b.n	80013e0 <store_temp_in_string+0xac>
				temp[2] = (temperature - ((temperature/10)*10) ) + 48 ;
 80013ae:	89fb      	ldrh	r3, [r7, #14]
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	89fb      	ldrh	r3, [r7, #14]
 80013b4:	4913      	ldr	r1, [pc, #76]	; (8001404 <store_temp_in_string+0xd0>)
 80013b6:	fba1 1303 	umull	r1, r3, r1, r3
 80013ba:	08db      	lsrs	r3, r3, #3
 80013bc:	b29b      	uxth	r3, r3
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	4619      	mov	r1, r3
 80013c2:	0149      	lsls	r1, r1, #5
 80013c4:	1ac9      	subs	r1, r1, r3
 80013c6:	0089      	lsls	r1, r1, #2
 80013c8:	1acb      	subs	r3, r1, r3
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	4413      	add	r3, r2
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	3302      	adds	r3, #2
 80013d6:	3230      	adds	r2, #48	; 0x30
 80013d8:	b2d2      	uxtb	r2, r2
 80013da:	701a      	strb	r2, [r3, #0]
				break;
 80013dc:	e000      	b.n	80013e0 <store_temp_in_string+0xac>
				break;
 80013de:	bf00      	nop
	for(int i= 0 ; i < len ; i++){
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	3301      	adds	r3, #1
 80013e4:	617b      	str	r3, [r7, #20]
 80013e6:	697a      	ldr	r2, [r7, #20]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	dbac      	blt.n	8001348 <store_temp_in_string+0x14>

		}
	}
}
 80013ee:	bf00      	nop
 80013f0:	bf00      	nop
 80013f2:	371c      	adds	r7, #28
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	51eb851f 	.word	0x51eb851f
 8001400:	66666667 	.word	0x66666667
 8001404:	cccccccd 	.word	0xcccccccd

08001408 <system_state_update>:
/**
 * This function will update the system state based on the received UART command
 * or top button press
 * The system is not to be updates when performing a RTC update
 */
void system_state_update(){
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0

	//RTC menu enter/exit
	g_clock_menu_set_and_parameter_update();
 800140c:	f001 fe06 	bl	800301c <g_clock_menu_set_and_parameter_update>

	if(g_update_RTC == 0){
 8001410:	4b26      	ldr	r3, [pc, #152]	; (80014ac <system_state_update+0xa4>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d147      	bne.n	80014a8 <system_state_update+0xa0>
		//CHECK FOR TYPE OF MEASUREMENT command rcvd via UART
		if( g_config_command_rcvd == 1){
 8001418:	4b25      	ldr	r3, [pc, #148]	; (80014b0 <system_state_update+0xa8>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d13d      	bne.n	800149c <system_state_update+0x94>
			g_config_command_rcvd = 0;
 8001420:	4b23      	ldr	r3, [pc, #140]	; (80014b0 <system_state_update+0xa8>)
 8001422:	2200      	movs	r2, #0
 8001424:	701a      	strb	r2, [r3, #0]


			if( g_system_config[2]=='E' && g_system_config[3] == 'N'){
 8001426:	4b23      	ldr	r3, [pc, #140]	; (80014b4 <system_state_update+0xac>)
 8001428:	789b      	ldrb	r3, [r3, #2]
 800142a:	2b45      	cmp	r3, #69	; 0x45
 800142c:	d10d      	bne.n	800144a <system_state_update+0x42>
 800142e:	4b21      	ldr	r3, [pc, #132]	; (80014b4 <system_state_update+0xac>)
 8001430:	78db      	ldrb	r3, [r3, #3]
 8001432:	2b4e      	cmp	r3, #78	; 0x4e
 8001434:	d109      	bne.n	800144a <system_state_update+0x42>
				// EN measure comand
				g_EN_config_command_rcvd =1 ;
 8001436:	4b20      	ldr	r3, [pc, #128]	; (80014b8 <system_state_update+0xb0>)
 8001438:	2201      	movs	r2, #1
 800143a:	701a      	strb	r2, [r3, #0]
				//stop SP measure
				g_SP_config_command_rcvd =0 ;
 800143c:	4b1f      	ldr	r3, [pc, #124]	; (80014bc <system_state_update+0xb4>)
 800143e:	2200      	movs	r2, #0
 8001440:	701a      	strb	r2, [r3, #0]
				//stop CA (calibration)
				g_SP_config_command_rcvd = 0;
 8001442:	4b1e      	ldr	r3, [pc, #120]	; (80014bc <system_state_update+0xb4>)
 8001444:	2200      	movs	r2, #0
 8001446:	701a      	strb	r2, [r3, #0]
 8001448:	e028      	b.n	800149c <system_state_update+0x94>

			}

			else if(g_system_config[2]=='S' && g_system_config[3] == 'P'){
 800144a:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <system_state_update+0xac>)
 800144c:	789b      	ldrb	r3, [r3, #2]
 800144e:	2b53      	cmp	r3, #83	; 0x53
 8001450:	d10d      	bne.n	800146e <system_state_update+0x66>
 8001452:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <system_state_update+0xac>)
 8001454:	78db      	ldrb	r3, [r3, #3]
 8001456:	2b50      	cmp	r3, #80	; 0x50
 8001458:	d109      	bne.n	800146e <system_state_update+0x66>
				// SP command
				g_SP_config_command_rcvd =1 ;
 800145a:	4b18      	ldr	r3, [pc, #96]	; (80014bc <system_state_update+0xb4>)
 800145c:	2201      	movs	r2, #1
 800145e:	701a      	strb	r2, [r3, #0]
				//stop EN command
				g_EN_config_command_rcvd =0;
 8001460:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <system_state_update+0xb0>)
 8001462:	2200      	movs	r2, #0
 8001464:	701a      	strb	r2, [r3, #0]
				//stop CA (calibration)command
				g_CA_config_command_rcvd = 0;
 8001466:	4b16      	ldr	r3, [pc, #88]	; (80014c0 <system_state_update+0xb8>)
 8001468:	2200      	movs	r2, #0
 800146a:	701a      	strb	r2, [r3, #0]
 800146c:	e016      	b.n	800149c <system_state_update+0x94>

			}

			//extend to CA command recieved
			else if(g_system_config[2]=='C' && g_system_config[3] == 'A'){
 800146e:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <system_state_update+0xac>)
 8001470:	789b      	ldrb	r3, [r3, #2]
 8001472:	2b43      	cmp	r3, #67	; 0x43
 8001474:	d10d      	bne.n	8001492 <system_state_update+0x8a>
 8001476:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <system_state_update+0xac>)
 8001478:	78db      	ldrb	r3, [r3, #3]
 800147a:	2b41      	cmp	r3, #65	; 0x41
 800147c:	d109      	bne.n	8001492 <system_state_update+0x8a>

				g_CA_config_command_rcvd = 1;
 800147e:	4b10      	ldr	r3, [pc, #64]	; (80014c0 <system_state_update+0xb8>)
 8001480:	2201      	movs	r2, #1
 8001482:	701a      	strb	r2, [r3, #0]
				// SP command
				g_SP_config_command_rcvd =0 ;
 8001484:	4b0d      	ldr	r3, [pc, #52]	; (80014bc <system_state_update+0xb4>)
 8001486:	2200      	movs	r2, #0
 8001488:	701a      	strb	r2, [r3, #0]
				//stop EN command
				g_EN_config_command_rcvd =0;
 800148a:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <system_state_update+0xb0>)
 800148c:	2200      	movs	r2, #0
 800148e:	701a      	strb	r2, [r3, #0]
 8001490:	e004      	b.n	800149c <system_state_update+0x94>

			}

			else{
				HAL_UART_Transmit_IT(&huart2, (uint8_t*)"Invalid Command\n", 16);
 8001492:	2210      	movs	r2, #16
 8001494:	490b      	ldr	r1, [pc, #44]	; (80014c4 <system_state_update+0xbc>)
 8001496:	480c      	ldr	r0, [pc, #48]	; (80014c8 <system_state_update+0xc0>)
 8001498:	f006 f9f3 	bl	8007882 <HAL_UART_Transmit_IT>
			}
		}

		//perform en measurements
		en_measurement_update() ;
 800149c:	f000 f8c2 	bl	8001624 <en_measurement_update>
		//perform sp measurement
		sp_measurement_update() ;
 80014a0:	f000 f966 	bl	8001770 <sp_measurement_update>
		//perform calibration measurements
		ca_measurements_update();
 80014a4:	f000 f812 	bl	80014cc <ca_measurements_update>
	}
	else{
		//dont update any states while in the RTC menu
	}

}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20000500 	.word	0x20000500
 80014b0:	20000482 	.word	0x20000482
 80014b4:	20000470 	.word	0x20000470
 80014b8:	2000048d 	.word	0x2000048d
 80014bc:	20000491 	.word	0x20000491
 80014c0:	20000492 	.word	0x20000492
 80014c4:	0800c418 	.word	0x0800c418
 80014c8:	2000036c 	.word	0x2000036c

080014cc <ca_measurements_update>:
 * This function begins the calibrations sequence
 * It is to start the measurement for EN and SP where the values for lux is to be stored for later measurements
 *
 */

void ca_measurements_update(){
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0

	// CA - update via push button - only starts the calibration - its to end by itself
	if(g_right_button_pressed  == 1 && g_CA_config_command_rcvd == 0  && g_EN_config_command_rcvd == 0 && g_SP_config_command_rcvd ==0 && (g_SP_measure == 0 || g_SP_measure ==2) && (g_EN_measure == 0 || g_EN_measure ==2)){
 80014d0:	4b4c      	ldr	r3, [pc, #304]	; (8001604 <ca_measurements_update+0x138>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d131      	bne.n	800153c <ca_measurements_update+0x70>
 80014d8:	4b4b      	ldr	r3, [pc, #300]	; (8001608 <ca_measurements_update+0x13c>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d12d      	bne.n	800153c <ca_measurements_update+0x70>
 80014e0:	4b4a      	ldr	r3, [pc, #296]	; (800160c <ca_measurements_update+0x140>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d129      	bne.n	800153c <ca_measurements_update+0x70>
 80014e8:	4b49      	ldr	r3, [pc, #292]	; (8001610 <ca_measurements_update+0x144>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d125      	bne.n	800153c <ca_measurements_update+0x70>
 80014f0:	4b48      	ldr	r3, [pc, #288]	; (8001614 <ca_measurements_update+0x148>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d003      	beq.n	8001500 <ca_measurements_update+0x34>
 80014f8:	4b46      	ldr	r3, [pc, #280]	; (8001614 <ca_measurements_update+0x148>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d11d      	bne.n	800153c <ca_measurements_update+0x70>
 8001500:	4b45      	ldr	r3, [pc, #276]	; (8001618 <ca_measurements_update+0x14c>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d003      	beq.n	8001510 <ca_measurements_update+0x44>
 8001508:	4b43      	ldr	r3, [pc, #268]	; (8001618 <ca_measurements_update+0x14c>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b02      	cmp	r3, #2
 800150e:	d115      	bne.n	800153c <ca_measurements_update+0x70>
		g_right_button_pressed = 0;
 8001510:	4b3c      	ldr	r3, [pc, #240]	; (8001604 <ca_measurements_update+0x138>)
 8001512:	2200      	movs	r2, #0
 8001514:	701a      	strb	r2, [r3, #0]

		g_CA_measure++  ;
 8001516:	4b41      	ldr	r3, [pc, #260]	; (800161c <ca_measurements_update+0x150>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	3301      	adds	r3, #1
 800151c:	b2da      	uxtb	r2, r3
 800151e:	4b3f      	ldr	r3, [pc, #252]	; (800161c <ca_measurements_update+0x150>)
 8001520:	701a      	strb	r2, [r3, #0]

		if(g_CA_measure != 1 ){
 8001522:	4b3e      	ldr	r3, [pc, #248]	; (800161c <ca_measurements_update+0x150>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d003      	beq.n	8001532 <ca_measurements_update+0x66>
//			cal_en_or_sp_measurement = 0; //set flag to 0 on every button press
			g_CA_measure = 1;
 800152a:	4b3c      	ldr	r3, [pc, #240]	; (800161c <ca_measurements_update+0x150>)
 800152c:	2201      	movs	r2, #1
 800152e:	701a      	strb	r2, [r3, #0]
		if(g_CA_measure != 1 ){
 8001530:	e062      	b.n	80015f8 <ca_measurements_update+0x12c>
		}
		else{
			g_CA_measure = g_CA_measure ;
 8001532:	4b3a      	ldr	r3, [pc, #232]	; (800161c <ca_measurements_update+0x150>)
 8001534:	781a      	ldrb	r2, [r3, #0]
 8001536:	4b39      	ldr	r3, [pc, #228]	; (800161c <ca_measurements_update+0x150>)
 8001538:	701a      	strb	r2, [r3, #0]
		if(g_CA_measure != 1 ){
 800153a:	e05d      	b.n	80015f8 <ca_measurements_update+0x12c>
		}
	}

	//CA update via UART
	else if(g_right_button_pressed ==0  && g_CA_config_command_rcvd == 1 && g_EN_config_command_rcvd == 0 && g_SP_config_command_rcvd ==0 && (g_SP_measure == 0 || g_SP_measure ==2) && (g_EN_measure == 0 || g_EN_measure ==2)){
 800153c:	4b31      	ldr	r3, [pc, #196]	; (8001604 <ca_measurements_update+0x138>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d159      	bne.n	80015f8 <ca_measurements_update+0x12c>
 8001544:	4b30      	ldr	r3, [pc, #192]	; (8001608 <ca_measurements_update+0x13c>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d155      	bne.n	80015f8 <ca_measurements_update+0x12c>
 800154c:	4b2f      	ldr	r3, [pc, #188]	; (800160c <ca_measurements_update+0x140>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d151      	bne.n	80015f8 <ca_measurements_update+0x12c>
 8001554:	4b2e      	ldr	r3, [pc, #184]	; (8001610 <ca_measurements_update+0x144>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d14d      	bne.n	80015f8 <ca_measurements_update+0x12c>
 800155c:	4b2d      	ldr	r3, [pc, #180]	; (8001614 <ca_measurements_update+0x148>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d003      	beq.n	800156c <ca_measurements_update+0xa0>
 8001564:	4b2b      	ldr	r3, [pc, #172]	; (8001614 <ca_measurements_update+0x148>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b02      	cmp	r3, #2
 800156a:	d145      	bne.n	80015f8 <ca_measurements_update+0x12c>
 800156c:	4b2a      	ldr	r3, [pc, #168]	; (8001618 <ca_measurements_update+0x14c>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d003      	beq.n	800157c <ca_measurements_update+0xb0>
 8001574:	4b28      	ldr	r3, [pc, #160]	; (8001618 <ca_measurements_update+0x14c>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b02      	cmp	r3, #2
 800157a:	d13d      	bne.n	80015f8 <ca_measurements_update+0x12c>
		g_CA_config_command_rcvd = 0;
 800157c:	4b22      	ldr	r3, [pc, #136]	; (8001608 <ca_measurements_update+0x13c>)
 800157e:	2200      	movs	r2, #0
 8001580:	701a      	strb	r2, [r3, #0]

		//check that the correct UART message recvd
		if(g_system_config[0]== '&' && g_system_config[1 ]== '_' && g_system_config[2]=='C' && g_system_config[3] == 'A' && g_system_config[4] =='_'&& g_system_config[5] =='*' &&  g_system_config[6] =='\n' ){
 8001582:	4b27      	ldr	r3, [pc, #156]	; (8001620 <ca_measurements_update+0x154>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	2b26      	cmp	r3, #38	; 0x26
 8001588:	d130      	bne.n	80015ec <ca_measurements_update+0x120>
 800158a:	4b25      	ldr	r3, [pc, #148]	; (8001620 <ca_measurements_update+0x154>)
 800158c:	785b      	ldrb	r3, [r3, #1]
 800158e:	2b5f      	cmp	r3, #95	; 0x5f
 8001590:	d12c      	bne.n	80015ec <ca_measurements_update+0x120>
 8001592:	4b23      	ldr	r3, [pc, #140]	; (8001620 <ca_measurements_update+0x154>)
 8001594:	789b      	ldrb	r3, [r3, #2]
 8001596:	2b43      	cmp	r3, #67	; 0x43
 8001598:	d128      	bne.n	80015ec <ca_measurements_update+0x120>
 800159a:	4b21      	ldr	r3, [pc, #132]	; (8001620 <ca_measurements_update+0x154>)
 800159c:	78db      	ldrb	r3, [r3, #3]
 800159e:	2b41      	cmp	r3, #65	; 0x41
 80015a0:	d124      	bne.n	80015ec <ca_measurements_update+0x120>
 80015a2:	4b1f      	ldr	r3, [pc, #124]	; (8001620 <ca_measurements_update+0x154>)
 80015a4:	791b      	ldrb	r3, [r3, #4]
 80015a6:	2b5f      	cmp	r3, #95	; 0x5f
 80015a8:	d120      	bne.n	80015ec <ca_measurements_update+0x120>
 80015aa:	4b1d      	ldr	r3, [pc, #116]	; (8001620 <ca_measurements_update+0x154>)
 80015ac:	795b      	ldrb	r3, [r3, #5]
 80015ae:	2b2a      	cmp	r3, #42	; 0x2a
 80015b0:	d11c      	bne.n	80015ec <ca_measurements_update+0x120>
 80015b2:	4b1b      	ldr	r3, [pc, #108]	; (8001620 <ca_measurements_update+0x154>)
 80015b4:	799b      	ldrb	r3, [r3, #6]
 80015b6:	2b0a      	cmp	r3, #10
 80015b8:	d118      	bne.n	80015ec <ca_measurements_update+0x120>
			if(g_CA_measure == 0){
 80015ba:	4b18      	ldr	r3, [pc, #96]	; (800161c <ca_measurements_update+0x150>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d103      	bne.n	80015ca <ca_measurements_update+0xfe>
				g_CA_measure = 1;
 80015c2:	4b16      	ldr	r3, [pc, #88]	; (800161c <ca_measurements_update+0x150>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	701a      	strb	r2, [r3, #0]
			if(g_CA_measure == 0){
 80015c8:	e015      	b.n	80015f6 <ca_measurements_update+0x12a>
			}
			else if(g_CA_measure == 1){
 80015ca:	4b14      	ldr	r3, [pc, #80]	; (800161c <ca_measurements_update+0x150>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d104      	bne.n	80015dc <ca_measurements_update+0x110>
				g_CA_measure = g_CA_measure ;
 80015d2:	4b12      	ldr	r3, [pc, #72]	; (800161c <ca_measurements_update+0x150>)
 80015d4:	781a      	ldrb	r2, [r3, #0]
 80015d6:	4b11      	ldr	r3, [pc, #68]	; (800161c <ca_measurements_update+0x150>)
 80015d8:	701a      	strb	r2, [r3, #0]
			if(g_CA_measure == 0){
 80015da:	e00c      	b.n	80015f6 <ca_measurements_update+0x12a>

			}
			else{
				if(g_CA_measure == 2){
 80015dc:	4b0f      	ldr	r3, [pc, #60]	; (800161c <ca_measurements_update+0x150>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d108      	bne.n	80015f6 <ca_measurements_update+0x12a>
					g_CA_measure = 1;
 80015e4:	4b0d      	ldr	r3, [pc, #52]	; (800161c <ca_measurements_update+0x150>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	701a      	strb	r2, [r3, #0]
			if(g_CA_measure == 0){
 80015ea:	e004      	b.n	80015f6 <ca_measurements_update+0x12a>
//				g_CA_measure = 1;
//			}
		}
		//else block to not update g_EN_measure if incorrent command revcd
		else{
			g_CA_measure =  g_CA_measure ;
 80015ec:	4b0b      	ldr	r3, [pc, #44]	; (800161c <ca_measurements_update+0x150>)
 80015ee:	781a      	ldrb	r2, [r3, #0]
 80015f0:	4b0a      	ldr	r3, [pc, #40]	; (800161c <ca_measurements_update+0x150>)
 80015f2:	701a      	strb	r2, [r3, #0]
		}
	}

}
 80015f4:	e000      	b.n	80015f8 <ca_measurements_update+0x12c>
			if(g_CA_measure == 0){
 80015f6:	bf00      	nop
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	20000549 	.word	0x20000549
 8001608:	20000492 	.word	0x20000492
 800160c:	2000048d 	.word	0x2000048d
 8001610:	20000491 	.word	0x20000491
 8001614:	2000048e 	.word	0x2000048e
 8001618:	20000483 	.word	0x20000483
 800161c:	20000493 	.word	0x20000493
 8001620:	20000470 	.word	0x20000470

08001624 <en_measurement_update>:
/**
 * This function start/stops the environment measurements
 * This is done by both the UART and push button
 */
void en_measurement_update(){
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
	// Environment Measure - And not measuring SP - modularise
	// EN - update via push button
	if(g_top_button_pressed  == 1 && g_EN_config_command_rcvd ==0 && g_SP_config_command_rcvd ==0 && g_CA_config_command_rcvd == 0 && (g_SP_measure == 0 || g_SP_measure ==2)  && (g_CA_measure == 0 || g_CA_measure ==2)){
 8001628:	4b49      	ldr	r3, [pc, #292]	; (8001750 <en_measurement_update+0x12c>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d12c      	bne.n	800168a <en_measurement_update+0x66>
 8001630:	4b48      	ldr	r3, [pc, #288]	; (8001754 <en_measurement_update+0x130>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d128      	bne.n	800168a <en_measurement_update+0x66>
 8001638:	4b47      	ldr	r3, [pc, #284]	; (8001758 <en_measurement_update+0x134>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d124      	bne.n	800168a <en_measurement_update+0x66>
 8001640:	4b46      	ldr	r3, [pc, #280]	; (800175c <en_measurement_update+0x138>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d120      	bne.n	800168a <en_measurement_update+0x66>
 8001648:	4b45      	ldr	r3, [pc, #276]	; (8001760 <en_measurement_update+0x13c>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d003      	beq.n	8001658 <en_measurement_update+0x34>
 8001650:	4b43      	ldr	r3, [pc, #268]	; (8001760 <en_measurement_update+0x13c>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b02      	cmp	r3, #2
 8001656:	d118      	bne.n	800168a <en_measurement_update+0x66>
 8001658:	4b42      	ldr	r3, [pc, #264]	; (8001764 <en_measurement_update+0x140>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d003      	beq.n	8001668 <en_measurement_update+0x44>
 8001660:	4b40      	ldr	r3, [pc, #256]	; (8001764 <en_measurement_update+0x140>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b02      	cmp	r3, #2
 8001666:	d110      	bne.n	800168a <en_measurement_update+0x66>
		g_top_button_pressed = 0;
 8001668:	4b39      	ldr	r3, [pc, #228]	; (8001750 <en_measurement_update+0x12c>)
 800166a:	2200      	movs	r2, #0
 800166c:	701a      	strb	r2, [r3, #0]

		g_EN_measure++  ;
 800166e:	4b3e      	ldr	r3, [pc, #248]	; (8001768 <en_measurement_update+0x144>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	3301      	adds	r3, #1
 8001674:	b2da      	uxtb	r2, r3
 8001676:	4b3c      	ldr	r3, [pc, #240]	; (8001768 <en_measurement_update+0x144>)
 8001678:	701a      	strb	r2, [r3, #0]

		if(g_EN_measure >2 ){
 800167a:	4b3b      	ldr	r3, [pc, #236]	; (8001768 <en_measurement_update+0x144>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b02      	cmp	r3, #2
 8001680:	d960      	bls.n	8001744 <en_measurement_update+0x120>
			g_EN_measure = 1;
 8001682:	4b39      	ldr	r3, [pc, #228]	; (8001768 <en_measurement_update+0x144>)
 8001684:	2201      	movs	r2, #1
 8001686:	701a      	strb	r2, [r3, #0]
		if(g_EN_measure >2 ){
 8001688:	e05c      	b.n	8001744 <en_measurement_update+0x120>
		}
	}
	//EN update via UART
	else if(g_top_button_pressed ==0  && g_EN_config_command_rcvd == 1 && g_SP_config_command_rcvd ==0 && g_CA_config_command_rcvd == 0  && (g_SP_measure == 0 || g_SP_measure ==2)  && (g_CA_measure == 0 || g_CA_measure ==2)){
 800168a:	4b31      	ldr	r3, [pc, #196]	; (8001750 <en_measurement_update+0x12c>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d158      	bne.n	8001744 <en_measurement_update+0x120>
 8001692:	4b30      	ldr	r3, [pc, #192]	; (8001754 <en_measurement_update+0x130>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d154      	bne.n	8001744 <en_measurement_update+0x120>
 800169a:	4b2f      	ldr	r3, [pc, #188]	; (8001758 <en_measurement_update+0x134>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d150      	bne.n	8001744 <en_measurement_update+0x120>
 80016a2:	4b2e      	ldr	r3, [pc, #184]	; (800175c <en_measurement_update+0x138>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d14c      	bne.n	8001744 <en_measurement_update+0x120>
 80016aa:	4b2d      	ldr	r3, [pc, #180]	; (8001760 <en_measurement_update+0x13c>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <en_measurement_update+0x96>
 80016b2:	4b2b      	ldr	r3, [pc, #172]	; (8001760 <en_measurement_update+0x13c>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d144      	bne.n	8001744 <en_measurement_update+0x120>
 80016ba:	4b2a      	ldr	r3, [pc, #168]	; (8001764 <en_measurement_update+0x140>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <en_measurement_update+0xa6>
 80016c2:	4b28      	ldr	r3, [pc, #160]	; (8001764 <en_measurement_update+0x140>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d13c      	bne.n	8001744 <en_measurement_update+0x120>
		g_EN_config_command_rcvd = 0;
 80016ca:	4b22      	ldr	r3, [pc, #136]	; (8001754 <en_measurement_update+0x130>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	701a      	strb	r2, [r3, #0]

		//check that the correct UART message recvd
		if(g_system_config[0]== '&' && g_system_config[1 ]== '_' && g_system_config[2]=='E' && g_system_config[3] == 'N' && g_system_config[4] =='_'&& g_system_config[5] =='*' &&  g_system_config[6] =='\n' ){
 80016d0:	4b26      	ldr	r3, [pc, #152]	; (800176c <en_measurement_update+0x148>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b26      	cmp	r3, #38	; 0x26
 80016d6:	d12f      	bne.n	8001738 <en_measurement_update+0x114>
 80016d8:	4b24      	ldr	r3, [pc, #144]	; (800176c <en_measurement_update+0x148>)
 80016da:	785b      	ldrb	r3, [r3, #1]
 80016dc:	2b5f      	cmp	r3, #95	; 0x5f
 80016de:	d12b      	bne.n	8001738 <en_measurement_update+0x114>
 80016e0:	4b22      	ldr	r3, [pc, #136]	; (800176c <en_measurement_update+0x148>)
 80016e2:	789b      	ldrb	r3, [r3, #2]
 80016e4:	2b45      	cmp	r3, #69	; 0x45
 80016e6:	d127      	bne.n	8001738 <en_measurement_update+0x114>
 80016e8:	4b20      	ldr	r3, [pc, #128]	; (800176c <en_measurement_update+0x148>)
 80016ea:	78db      	ldrb	r3, [r3, #3]
 80016ec:	2b4e      	cmp	r3, #78	; 0x4e
 80016ee:	d123      	bne.n	8001738 <en_measurement_update+0x114>
 80016f0:	4b1e      	ldr	r3, [pc, #120]	; (800176c <en_measurement_update+0x148>)
 80016f2:	791b      	ldrb	r3, [r3, #4]
 80016f4:	2b5f      	cmp	r3, #95	; 0x5f
 80016f6:	d11f      	bne.n	8001738 <en_measurement_update+0x114>
 80016f8:	4b1c      	ldr	r3, [pc, #112]	; (800176c <en_measurement_update+0x148>)
 80016fa:	795b      	ldrb	r3, [r3, #5]
 80016fc:	2b2a      	cmp	r3, #42	; 0x2a
 80016fe:	d11b      	bne.n	8001738 <en_measurement_update+0x114>
 8001700:	4b1a      	ldr	r3, [pc, #104]	; (800176c <en_measurement_update+0x148>)
 8001702:	799b      	ldrb	r3, [r3, #6]
 8001704:	2b0a      	cmp	r3, #10
 8001706:	d117      	bne.n	8001738 <en_measurement_update+0x114>
			if(g_EN_measure == 0){
 8001708:	4b17      	ldr	r3, [pc, #92]	; (8001768 <en_measurement_update+0x144>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d103      	bne.n	8001718 <en_measurement_update+0xf4>
				g_EN_measure = 1;
 8001710:	4b15      	ldr	r3, [pc, #84]	; (8001768 <en_measurement_update+0x144>)
 8001712:	2201      	movs	r2, #1
 8001714:	701a      	strb	r2, [r3, #0]
			if(g_EN_measure == 0){
 8001716:	e014      	b.n	8001742 <en_measurement_update+0x11e>
			}
			else if(g_EN_measure == 1){
 8001718:	4b13      	ldr	r3, [pc, #76]	; (8001768 <en_measurement_update+0x144>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d103      	bne.n	8001728 <en_measurement_update+0x104>
				g_EN_measure = 2;
 8001720:	4b11      	ldr	r3, [pc, #68]	; (8001768 <en_measurement_update+0x144>)
 8001722:	2202      	movs	r2, #2
 8001724:	701a      	strb	r2, [r3, #0]
			if(g_EN_measure == 0){
 8001726:	e00c      	b.n	8001742 <en_measurement_update+0x11e>

			}
			else{
				if(g_EN_measure ==2){
 8001728:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <en_measurement_update+0x144>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b02      	cmp	r3, #2
 800172e:	d108      	bne.n	8001742 <en_measurement_update+0x11e>
					g_EN_measure = 1;
 8001730:	4b0d      	ldr	r3, [pc, #52]	; (8001768 <en_measurement_update+0x144>)
 8001732:	2201      	movs	r2, #1
 8001734:	701a      	strb	r2, [r3, #0]
			if(g_EN_measure == 0){
 8001736:	e004      	b.n	8001742 <en_measurement_update+0x11e>
				}
			}
		}
		//else block to not update g_EN_measure if incorrent command revcd
		else{
			g_EN_measure =  g_EN_measure ;
 8001738:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <en_measurement_update+0x144>)
 800173a:	781a      	ldrb	r2, [r3, #0]
 800173c:	4b0a      	ldr	r3, [pc, #40]	; (8001768 <en_measurement_update+0x144>)
 800173e:	701a      	strb	r2, [r3, #0]
		}
	}

}
 8001740:	e000      	b.n	8001744 <en_measurement_update+0x120>
			if(g_EN_measure == 0){
 8001742:	bf00      	nop
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	2000054a 	.word	0x2000054a
 8001754:	2000048d 	.word	0x2000048d
 8001758:	20000491 	.word	0x20000491
 800175c:	20000492 	.word	0x20000492
 8001760:	2000048e 	.word	0x2000048e
 8001764:	20000493 	.word	0x20000493
 8001768:	20000483 	.word	0x20000483
 800176c:	20000470 	.word	0x20000470

08001770 <sp_measurement_update>:

/**
 * This function start/stops the panel measurements
 * This is done by both the UART and push button
 */
void sp_measurement_update(){
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
	//SP Measure - update via bottom push button - modularise
	if(g_bottom_button_pressed  == 1  && g_EN_config_command_rcvd == 0 && g_SP_config_command_rcvd ==0  && g_CA_config_command_rcvd == 0 && (g_EN_measure == 0 || g_EN_measure ==2)  && (g_CA_measure == 0 || g_CA_measure ==2)){
 8001774:	4b4a      	ldr	r3, [pc, #296]	; (80018a0 <sp_measurement_update+0x130>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d12f      	bne.n	80017dc <sp_measurement_update+0x6c>
 800177c:	4b49      	ldr	r3, [pc, #292]	; (80018a4 <sp_measurement_update+0x134>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d12b      	bne.n	80017dc <sp_measurement_update+0x6c>
 8001784:	4b48      	ldr	r3, [pc, #288]	; (80018a8 <sp_measurement_update+0x138>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d127      	bne.n	80017dc <sp_measurement_update+0x6c>
 800178c:	4b47      	ldr	r3, [pc, #284]	; (80018ac <sp_measurement_update+0x13c>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d123      	bne.n	80017dc <sp_measurement_update+0x6c>
 8001794:	4b46      	ldr	r3, [pc, #280]	; (80018b0 <sp_measurement_update+0x140>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d003      	beq.n	80017a4 <sp_measurement_update+0x34>
 800179c:	4b44      	ldr	r3, [pc, #272]	; (80018b0 <sp_measurement_update+0x140>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d11b      	bne.n	80017dc <sp_measurement_update+0x6c>
 80017a4:	4b43      	ldr	r3, [pc, #268]	; (80018b4 <sp_measurement_update+0x144>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d003      	beq.n	80017b4 <sp_measurement_update+0x44>
 80017ac:	4b41      	ldr	r3, [pc, #260]	; (80018b4 <sp_measurement_update+0x144>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d113      	bne.n	80017dc <sp_measurement_update+0x6c>
		//clear lcd display after EN measurement
		Lcd_clear(&lcd); //to remove EN measure values
 80017b4:	4840      	ldr	r0, [pc, #256]	; (80018b8 <sp_measurement_update+0x148>)
 80017b6:	f7ff fc7f 	bl	80010b8 <Lcd_clear>
		g_bottom_button_pressed = 0;
 80017ba:	4b39      	ldr	r3, [pc, #228]	; (80018a0 <sp_measurement_update+0x130>)
 80017bc:	2200      	movs	r2, #0
 80017be:	701a      	strb	r2, [r3, #0]

		g_SP_measure++  ;
 80017c0:	4b3e      	ldr	r3, [pc, #248]	; (80018bc <sp_measurement_update+0x14c>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	3301      	adds	r3, #1
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	4b3c      	ldr	r3, [pc, #240]	; (80018bc <sp_measurement_update+0x14c>)
 80017ca:	701a      	strb	r2, [r3, #0]

		if(g_SP_measure >2 ){
 80017cc:	4b3b      	ldr	r3, [pc, #236]	; (80018bc <sp_measurement_update+0x14c>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d963      	bls.n	800189c <sp_measurement_update+0x12c>
			g_SP_measure = 1;
 80017d4:	4b39      	ldr	r3, [pc, #228]	; (80018bc <sp_measurement_update+0x14c>)
 80017d6:	2201      	movs	r2, #1
 80017d8:	701a      	strb	r2, [r3, #0]
		if(g_SP_measure >2 ){
 80017da:	e05f      	b.n	800189c <sp_measurement_update+0x12c>
		}
	}

	// SP update via uart
	else if(g_bottom_button_pressed ==0  && g_EN_config_command_rcvd == 0 && g_SP_config_command_rcvd ==1 && g_CA_config_command_rcvd == 0 && (g_EN_measure == 0 || g_EN_measure ==2) && (g_CA_measure == 0 || g_CA_measure ==2)){
 80017dc:	4b30      	ldr	r3, [pc, #192]	; (80018a0 <sp_measurement_update+0x130>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d15b      	bne.n	800189c <sp_measurement_update+0x12c>
 80017e4:	4b2f      	ldr	r3, [pc, #188]	; (80018a4 <sp_measurement_update+0x134>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d157      	bne.n	800189c <sp_measurement_update+0x12c>
 80017ec:	4b2e      	ldr	r3, [pc, #184]	; (80018a8 <sp_measurement_update+0x138>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d153      	bne.n	800189c <sp_measurement_update+0x12c>
 80017f4:	4b2d      	ldr	r3, [pc, #180]	; (80018ac <sp_measurement_update+0x13c>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d14f      	bne.n	800189c <sp_measurement_update+0x12c>
 80017fc:	4b2c      	ldr	r3, [pc, #176]	; (80018b0 <sp_measurement_update+0x140>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d003      	beq.n	800180c <sp_measurement_update+0x9c>
 8001804:	4b2a      	ldr	r3, [pc, #168]	; (80018b0 <sp_measurement_update+0x140>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b02      	cmp	r3, #2
 800180a:	d147      	bne.n	800189c <sp_measurement_update+0x12c>
 800180c:	4b29      	ldr	r3, [pc, #164]	; (80018b4 <sp_measurement_update+0x144>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d003      	beq.n	800181c <sp_measurement_update+0xac>
 8001814:	4b27      	ldr	r3, [pc, #156]	; (80018b4 <sp_measurement_update+0x144>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b02      	cmp	r3, #2
 800181a:	d13f      	bne.n	800189c <sp_measurement_update+0x12c>

		//clear lcd display after EN measurement
		Lcd_clear(&lcd); //to remove EN measure values
 800181c:	4826      	ldr	r0, [pc, #152]	; (80018b8 <sp_measurement_update+0x148>)
 800181e:	f7ff fc4b 	bl	80010b8 <Lcd_clear>

		g_SP_config_command_rcvd = 0;
 8001822:	4b21      	ldr	r3, [pc, #132]	; (80018a8 <sp_measurement_update+0x138>)
 8001824:	2200      	movs	r2, #0
 8001826:	701a      	strb	r2, [r3, #0]

		//check that the correct UART message recvd
		if(g_system_config[0]== '&' && g_system_config[1 ]== '_' && g_system_config[2]=='S' && g_system_config[3] == 'P' &&g_system_config[4] =='_'&& g_system_config[5] =='*' &&  g_system_config[6] =='\n' ){
 8001828:	4b25      	ldr	r3, [pc, #148]	; (80018c0 <sp_measurement_update+0x150>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b26      	cmp	r3, #38	; 0x26
 800182e:	d12f      	bne.n	8001890 <sp_measurement_update+0x120>
 8001830:	4b23      	ldr	r3, [pc, #140]	; (80018c0 <sp_measurement_update+0x150>)
 8001832:	785b      	ldrb	r3, [r3, #1]
 8001834:	2b5f      	cmp	r3, #95	; 0x5f
 8001836:	d12b      	bne.n	8001890 <sp_measurement_update+0x120>
 8001838:	4b21      	ldr	r3, [pc, #132]	; (80018c0 <sp_measurement_update+0x150>)
 800183a:	789b      	ldrb	r3, [r3, #2]
 800183c:	2b53      	cmp	r3, #83	; 0x53
 800183e:	d127      	bne.n	8001890 <sp_measurement_update+0x120>
 8001840:	4b1f      	ldr	r3, [pc, #124]	; (80018c0 <sp_measurement_update+0x150>)
 8001842:	78db      	ldrb	r3, [r3, #3]
 8001844:	2b50      	cmp	r3, #80	; 0x50
 8001846:	d123      	bne.n	8001890 <sp_measurement_update+0x120>
 8001848:	4b1d      	ldr	r3, [pc, #116]	; (80018c0 <sp_measurement_update+0x150>)
 800184a:	791b      	ldrb	r3, [r3, #4]
 800184c:	2b5f      	cmp	r3, #95	; 0x5f
 800184e:	d11f      	bne.n	8001890 <sp_measurement_update+0x120>
 8001850:	4b1b      	ldr	r3, [pc, #108]	; (80018c0 <sp_measurement_update+0x150>)
 8001852:	795b      	ldrb	r3, [r3, #5]
 8001854:	2b2a      	cmp	r3, #42	; 0x2a
 8001856:	d11b      	bne.n	8001890 <sp_measurement_update+0x120>
 8001858:	4b19      	ldr	r3, [pc, #100]	; (80018c0 <sp_measurement_update+0x150>)
 800185a:	799b      	ldrb	r3, [r3, #6]
 800185c:	2b0a      	cmp	r3, #10
 800185e:	d117      	bne.n	8001890 <sp_measurement_update+0x120>
			if(g_SP_measure == 0){
 8001860:	4b16      	ldr	r3, [pc, #88]	; (80018bc <sp_measurement_update+0x14c>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d103      	bne.n	8001870 <sp_measurement_update+0x100>
				g_SP_measure = 1;
 8001868:	4b14      	ldr	r3, [pc, #80]	; (80018bc <sp_measurement_update+0x14c>)
 800186a:	2201      	movs	r2, #1
 800186c:	701a      	strb	r2, [r3, #0]
			if(g_SP_measure == 0){
 800186e:	e014      	b.n	800189a <sp_measurement_update+0x12a>
			}
			else if(g_SP_measure == 1){
 8001870:	4b12      	ldr	r3, [pc, #72]	; (80018bc <sp_measurement_update+0x14c>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d103      	bne.n	8001880 <sp_measurement_update+0x110>
				g_SP_measure = 2;
 8001878:	4b10      	ldr	r3, [pc, #64]	; (80018bc <sp_measurement_update+0x14c>)
 800187a:	2202      	movs	r2, #2
 800187c:	701a      	strb	r2, [r3, #0]
			if(g_SP_measure == 0){
 800187e:	e00c      	b.n	800189a <sp_measurement_update+0x12a>

			}
			else{
				if(g_SP_measure ==2){
 8001880:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <sp_measurement_update+0x14c>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b02      	cmp	r3, #2
 8001886:	d108      	bne.n	800189a <sp_measurement_update+0x12a>
					g_SP_measure = 1;
 8001888:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <sp_measurement_update+0x14c>)
 800188a:	2201      	movs	r2, #1
 800188c:	701a      	strb	r2, [r3, #0]
			if(g_SP_measure == 0){
 800188e:	e004      	b.n	800189a <sp_measurement_update+0x12a>
				}
			}
		}
		//else block to not update g_EN_measure if incorrent command revcd
		else{
			g_SP_measure =  g_SP_measure ;
 8001890:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <sp_measurement_update+0x14c>)
 8001892:	781a      	ldrb	r2, [r3, #0]
 8001894:	4b09      	ldr	r3, [pc, #36]	; (80018bc <sp_measurement_update+0x14c>)
 8001896:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001898:	e000      	b.n	800189c <sp_measurement_update+0x12c>
			if(g_SP_measure == 0){
 800189a:	bf00      	nop
}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	2000054b 	.word	0x2000054b
 80018a4:	2000048d 	.word	0x2000048d
 80018a8:	20000491 	.word	0x20000491
 80018ac:	20000492 	.word	0x20000492
 80018b0:	20000483 	.word	0x20000483
 80018b4:	20000493 	.word	0x20000493
 80018b8:	200004d0 	.word	0x200004d0
 80018bc:	2000048e 	.word	0x2000048e
 80018c0:	20000470 	.word	0x20000470

080018c4 <HAL_TIM_IC_CaptureCallback>:
uint8_t g_new_pulse = 0;
uint16_t g_lmt01_sens_temp =  0 ;
char dig_sens_temp[3] = {};

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
  if(htim->Instance == TIM2){
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018d4:	d142      	bne.n	800195c <HAL_TIM_IC_CaptureCallback+0x98>
	  g_new_pulse = 1;
 80018d6:	4b23      	ldr	r3, [pc, #140]	; (8001964 <HAL_TIM_IC_CaptureCallback+0xa0>)
 80018d8:	2201      	movs	r2, #1
 80018da:	701a      	strb	r2, [r3, #0]
	  g_time_between_pulses =  __HAL_TIM_GET_COUNTER(&htim2)  - current_value;  //Time between rising edges
 80018dc:	4b22      	ldr	r3, [pc, #136]	; (8001968 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018e2:	4b22      	ldr	r3, [pc, #136]	; (800196c <HAL_TIM_IC_CaptureCallback+0xa8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	4a21      	ldr	r2, [pc, #132]	; (8001970 <HAL_TIM_IC_CaptureCallback+0xac>)
 80018ea:	6013      	str	r3, [r2, #0]

	  if( g_time_between_pulses<13){
 80018ec:	4b20      	ldr	r3, [pc, #128]	; (8001970 <HAL_TIM_IC_CaptureCallback+0xac>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2b0c      	cmp	r3, #12
 80018f2:	d80a      	bhi.n	800190a <HAL_TIM_IC_CaptureCallback+0x46>
		  current_value = __HAL_TIM_GET_COUNTER(&htim2) ;
 80018f4:	4b1c      	ldr	r3, [pc, #112]	; (8001968 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fa:	4a1c      	ldr	r2, [pc, #112]	; (800196c <HAL_TIM_IC_CaptureCallback+0xa8>)
 80018fc:	6013      	str	r3, [r2, #0]
		  pulse_count++ ;
 80018fe:	4b1d      	ldr	r3, [pc, #116]	; (8001974 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	3301      	adds	r3, #1
 8001904:	4a1b      	ldr	r2, [pc, #108]	; (8001974 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001906:	6013      	str	r3, [r2, #0]
		  g_TO1_temp = (pulse_count/4096.0)*256 - 50 ; //calculate new temp - BUG Fixed: 4094 changed to 4096
		 current_value = __HAL_TIM_GET_COUNTER(&htim2) ;
		 pulse_count = 0;
	  }
  }
}
 8001908:	e028      	b.n	800195c <HAL_TIM_IC_CaptureCallback+0x98>
		  g_TO1_temp = (pulse_count/4096.0)*256 - 50 ; //calculate new temp - BUG Fixed: 4094 changed to 4096
 800190a:	4b1a      	ldr	r3, [pc, #104]	; (8001974 <HAL_TIM_IC_CaptureCallback+0xb0>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f7fe fe00 	bl	8000514 <__aeabi_ui2d>
 8001914:	f04f 0200 	mov.w	r2, #0
 8001918:	4b17      	ldr	r3, [pc, #92]	; (8001978 <HAL_TIM_IC_CaptureCallback+0xb4>)
 800191a:	f7fe ff9f 	bl	800085c <__aeabi_ddiv>
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	4610      	mov	r0, r2
 8001924:	4619      	mov	r1, r3
 8001926:	f04f 0200 	mov.w	r2, #0
 800192a:	4b14      	ldr	r3, [pc, #80]	; (800197c <HAL_TIM_IC_CaptureCallback+0xb8>)
 800192c:	f7fe fe6c 	bl	8000608 <__aeabi_dmul>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	4610      	mov	r0, r2
 8001936:	4619      	mov	r1, r3
 8001938:	f04f 0200 	mov.w	r2, #0
 800193c:	4b10      	ldr	r3, [pc, #64]	; (8001980 <HAL_TIM_IC_CaptureCallback+0xbc>)
 800193e:	f7fe fcab 	bl	8000298 <__aeabi_dsub>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	490f      	ldr	r1, [pc, #60]	; (8001984 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001948:	e9c1 2300 	strd	r2, r3, [r1]
		 current_value = __HAL_TIM_GET_COUNTER(&htim2) ;
 800194c:	4b06      	ldr	r3, [pc, #24]	; (8001968 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001952:	4a06      	ldr	r2, [pc, #24]	; (800196c <HAL_TIM_IC_CaptureCallback+0xa8>)
 8001954:	6013      	str	r3, [r2, #0]
		 pulse_count = 0;
 8001956:	4b07      	ldr	r3, [pc, #28]	; (8001974 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
}
 800195c:	bf00      	nop
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20000524 	.word	0x20000524
 8001968:	20000294 	.word	0x20000294
 800196c:	2000051c 	.word	0x2000051c
 8001970:	20000520 	.word	0x20000520
 8001974:	20000554 	.word	0x20000554
 8001978:	40b00000 	.word	0x40b00000
 800197c:	40700000 	.word	0x40700000
 8001980:	40490000 	.word	0x40490000
 8001984:	200003d0 	.word	0x200003d0

08001988 <flash_led_d3>:

/**
 * Function flashed LED D3 at specified interval of 50 ms
 */
void flash_led_d3(){
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - g_time_passed >= 50 && g_LED_D3_ON == 0){
 800198c:	f002 fc5e 	bl	800424c <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	4b16      	ldr	r3, [pc, #88]	; (80019ec <flash_led_d3+0x64>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b31      	cmp	r3, #49	; 0x31
 800199a:	d90c      	bls.n	80019b6 <flash_led_d3+0x2e>
 800199c:	4b14      	ldr	r3, [pc, #80]	; (80019f0 <flash_led_d3+0x68>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d108      	bne.n	80019b6 <flash_led_d3+0x2e>
		g_LED_D3_ON = 1; // set D2 on
 80019a4:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <flash_led_d3+0x68>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET) ;
 80019aa:	2200      	movs	r2, #0
 80019ac:	2120      	movs	r1, #32
 80019ae:	4811      	ldr	r0, [pc, #68]	; (80019f4 <flash_led_d3+0x6c>)
 80019b0:	f003 fbae 	bl	8005110 <HAL_GPIO_WritePin>
		g_time_passed =  HAL_GetTick() ;
		g_LED_D3_ON = 0;  //set D2 off

	}

}
 80019b4:	e018      	b.n	80019e8 <flash_led_d3+0x60>
	else if(HAL_GetTick() - g_time_passed >= 100 && g_LED_D3_ON == 1){
 80019b6:	f002 fc49 	bl	800424c <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <flash_led_d3+0x64>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b63      	cmp	r3, #99	; 0x63
 80019c4:	d910      	bls.n	80019e8 <flash_led_d3+0x60>
 80019c6:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <flash_led_d3+0x68>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d10c      	bne.n	80019e8 <flash_led_d3+0x60>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET) ;
 80019ce:	2201      	movs	r2, #1
 80019d0:	2120      	movs	r1, #32
 80019d2:	4808      	ldr	r0, [pc, #32]	; (80019f4 <flash_led_d3+0x6c>)
 80019d4:	f003 fb9c 	bl	8005110 <HAL_GPIO_WritePin>
		g_time_passed =  HAL_GetTick() ;
 80019d8:	f002 fc38 	bl	800424c <HAL_GetTick>
 80019dc:	4603      	mov	r3, r0
 80019de:	4a03      	ldr	r2, [pc, #12]	; (80019ec <flash_led_d3+0x64>)
 80019e0:	6013      	str	r3, [r2, #0]
		g_LED_D3_ON = 0;  //set D2 off
 80019e2:	4b03      	ldr	r3, [pc, #12]	; (80019f0 <flash_led_d3+0x68>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	701a      	strb	r2, [r3, #0]
}
 80019e8:	bf00      	nop
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	20000488 	.word	0x20000488
 80019f0:	2000048c 	.word	0x2000048c
 80019f4:	40020400 	.word	0x40020400

080019f8 <flash_led_d2>:

/**
 * Function flashed LED D2 at specified interval of 100 ms
 */
void flash_led_d2(){
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - g_time_passed >= 100 && g_LED_D2_ON == 0){
 80019fc:	f002 fc26 	bl	800424c <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	4b16      	ldr	r3, [pc, #88]	; (8001a5c <flash_led_d2+0x64>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b63      	cmp	r3, #99	; 0x63
 8001a0a:	d90c      	bls.n	8001a26 <flash_led_d2+0x2e>
 8001a0c:	4b14      	ldr	r3, [pc, #80]	; (8001a60 <flash_led_d2+0x68>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d108      	bne.n	8001a26 <flash_led_d2+0x2e>
		g_LED_D2_ON = 1; // set D2 on
 8001a14:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <flash_led_d2+0x68>)
 8001a16:	2201      	movs	r2, #1
 8001a18:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET) ;
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	2110      	movs	r1, #16
 8001a1e:	4811      	ldr	r0, [pc, #68]	; (8001a64 <flash_led_d2+0x6c>)
 8001a20:	f003 fb76 	bl	8005110 <HAL_GPIO_WritePin>
		g_time_passed =  HAL_GetTick() ;
		g_LED_D2_ON = 0;  //set D2 off

	}

}
 8001a24:	e018      	b.n	8001a58 <flash_led_d2+0x60>
	else if(HAL_GetTick() - g_time_passed >= 200 && g_LED_D2_ON == 1){
 8001a26:	f002 fc11 	bl	800424c <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <flash_led_d2+0x64>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2bc7      	cmp	r3, #199	; 0xc7
 8001a34:	d910      	bls.n	8001a58 <flash_led_d2+0x60>
 8001a36:	4b0a      	ldr	r3, [pc, #40]	; (8001a60 <flash_led_d2+0x68>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d10c      	bne.n	8001a58 <flash_led_d2+0x60>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET) ;
 8001a3e:	2201      	movs	r2, #1
 8001a40:	2110      	movs	r1, #16
 8001a42:	4808      	ldr	r0, [pc, #32]	; (8001a64 <flash_led_d2+0x6c>)
 8001a44:	f003 fb64 	bl	8005110 <HAL_GPIO_WritePin>
		g_time_passed =  HAL_GetTick() ;
 8001a48:	f002 fc00 	bl	800424c <HAL_GetTick>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	4a03      	ldr	r2, [pc, #12]	; (8001a5c <flash_led_d2+0x64>)
 8001a50:	6013      	str	r3, [r2, #0]
		g_LED_D2_ON = 0;  //set D2 off
 8001a52:	4b03      	ldr	r3, [pc, #12]	; (8001a60 <flash_led_d2+0x68>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	701a      	strb	r2, [r3, #0]
}
 8001a58:	bf00      	nop
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20000488 	.word	0x20000488
 8001a60:	20000490 	.word	0x20000490
 8001a64:	40020400 	.word	0x40020400

08001a68 <flash_led_d4>:
/**
 * Function flashed LED D4 at specified interval of 200 ms
 */
uint32_t d4_toggle_time = 0;
//uint8_t d5_led_entered
void flash_led_d4(){
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
//		g_time_passed =  HAL_GetTick() ;
//		g_LED_D4_ON = 0;  //set D2 off
//
//	}

	if(HAL_GetTick() - d4_toggle_time > 200){
 8001a6c:	f002 fbee 	bl	800424c <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <flash_led_d4+0x2c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2bc8      	cmp	r3, #200	; 0xc8
 8001a7a:	d909      	bls.n	8001a90 <flash_led_d4+0x28>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
 8001a7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a80:	4805      	ldr	r0, [pc, #20]	; (8001a98 <flash_led_d4+0x30>)
 8001a82:	f003 fb5e 	bl	8005142 <HAL_GPIO_TogglePin>
		d4_toggle_time =  HAL_GetTick();
 8001a86:	f002 fbe1 	bl	800424c <HAL_GetTick>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	4a01      	ldr	r2, [pc, #4]	; (8001a94 <flash_led_d4+0x2c>)
 8001a8e:	6013      	str	r3, [r2, #0]
	}

}
 8001a90:	bf00      	nop
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	2000052c 	.word	0x2000052c
 8001a98:	40020400 	.word	0x40020400

08001a9c <ADC_Select_CH0>:
		  }
	  }
}

//digital sensore
void ADC_Select_CH0(void){
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001aa2:	463b      	mov	r3, r7
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_0;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aba:	463b      	mov	r3, r7
 8001abc:	4619      	mov	r1, r3
 8001abe:	4806      	ldr	r0, [pc, #24]	; (8001ad8 <ADC_Select_CH0+0x3c>)
 8001ac0:	f002 fdb8 	bl	8004634 <HAL_ADC_ConfigChannel>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <ADC_Select_CH0+0x32>
	{
		Error_Handler();
 8001aca:	f001 fec1 	bl	8003850 <Error_Handler>
	}


}
 8001ace:	bf00      	nop
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	2000022c 	.word	0x2000022c

08001adc <ADC_Select_CH14>:
// photodiode
void ADC_Select_CH14(void){
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001ae2:	463b      	mov	r3, r7
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	*/
	sConfig.Channel = ADC_CHANNEL_14;
 8001aee:	230e      	movs	r3, #14
 8001af0:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001af2:	2301      	movs	r3, #1
 8001af4:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001af6:	463b      	mov	r3, r7
 8001af8:	4619      	mov	r1, r3
 8001afa:	4806      	ldr	r0, [pc, #24]	; (8001b14 <ADC_Select_CH14+0x38>)
 8001afc:	f002 fd9a 	bl	8004634 <HAL_ADC_ConfigChannel>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <ADC_Select_CH14+0x2e>
	{
		Error_Handler();
 8001b06:	f001 fea3 	bl	8003850 <Error_Handler>
	}


}
 8001b0a:	bf00      	nop
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	2000022c 	.word	0x2000022c

08001b18 <ADC_Select_CH9>:

//PV- Panel- ADC 1
void ADC_Select_CH9(void){
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001b1e:	463b      	mov	r3, r7
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	*/
	sConfig.Channel = ADC_CHANNEL_9;
 8001b2a:	2309      	movs	r3, #9
 8001b2c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b32:	463b      	mov	r3, r7
 8001b34:	4619      	mov	r1, r3
 8001b36:	4806      	ldr	r0, [pc, #24]	; (8001b50 <ADC_Select_CH9+0x38>)
 8001b38:	f002 fd7c 	bl	8004634 <HAL_ADC_ConfigChannel>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <ADC_Select_CH9+0x2e>
	{
		Error_Handler();
 8001b42:	f001 fe85 	bl	8003850 <Error_Handler>
	}
}
 8001b46:	bf00      	nop
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	2000022c 	.word	0x2000022c

08001b54 <ADC_Select_CH15>:

//PV - Panel - ADC2
void ADC_Select_CH15(void){
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001b5a:	463b      	mov	r3, r7
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	*/
	sConfig.Channel = ADC_CHANNEL_15;
 8001b66:	230f      	movs	r3, #15
 8001b68:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b6e:	463b      	mov	r3, r7
 8001b70:	4619      	mov	r1, r3
 8001b72:	4806      	ldr	r0, [pc, #24]	; (8001b8c <ADC_Select_CH15+0x38>)
 8001b74:	f002 fd5e 	bl	8004634 <HAL_ADC_ConfigChannel>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <ADC_Select_CH15+0x2e>
	{
		Error_Handler();
 8001b7e:	f001 fe67 	bl	8003850 <Error_Handler>
	}
}
 8001b82:	bf00      	nop
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	2000022c 	.word	0x2000022c

08001b90 <get_adc_value_conver_to_lux>:
 * Function starts ADC CH14, connected to ouput of light diode
 * get the ADC value of diode
 */
double ip_diode = 0;
uint16_t lux_value = 0;
uint16_t get_adc_value_conver_to_lux(){
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
	ADC_Select_CH14() ;
 8001b94:	f7ff ffa2 	bl	8001adc <ADC_Select_CH14>
	HAL_ADC_Start(&hadc1);
 8001b98:	482f      	ldr	r0, [pc, #188]	; (8001c58 <get_adc_value_conver_to_lux+0xc8>)
 8001b9a:	f002 fbcb 	bl	8004334 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) ;
 8001b9e:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba2:	482d      	ldr	r0, [pc, #180]	; (8001c58 <get_adc_value_conver_to_lux+0xc8>)
 8001ba4:	f002 fcad 	bl	8004502 <HAL_ADC_PollForConversion>
	g_raw_lux_value = HAL_ADC_GetValue(&hadc1) ;
 8001ba8:	482b      	ldr	r0, [pc, #172]	; (8001c58 <get_adc_value_conver_to_lux+0xc8>)
 8001baa:	f002 fd35 	bl	8004618 <HAL_ADC_GetValue>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7fe fcaf 	bl	8000514 <__aeabi_ui2d>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	4928      	ldr	r1, [pc, #160]	; (8001c5c <get_adc_value_conver_to_lux+0xcc>)
 8001bbc:	e9c1 2300 	strd	r2, r3, [r1]
	HAL_ADC_Stop(&hadc1);
 8001bc0:	4825      	ldr	r0, [pc, #148]	; (8001c58 <get_adc_value_conver_to_lux+0xc8>)
 8001bc2:	f002 fc6b 	bl	800449c <HAL_ADC_Stop>

	//scale adc value [0,99999] - For 30000 lux
//	g_raw_lux_value = g_raw_lux_value*(29999.0/4095.0) ;

	//make these into your own values
	g_raw_lux_value = g_raw_lux_value*(3.3/4095.0) ;
 8001bc6:	4b25      	ldr	r3, [pc, #148]	; (8001c5c <get_adc_value_conver_to_lux+0xcc>)
 8001bc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bcc:	a31c      	add	r3, pc, #112	; (adr r3, 8001c40 <get_adc_value_conver_to_lux+0xb0>)
 8001bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd2:	f7fe fd19 	bl	8000608 <__aeabi_dmul>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	4920      	ldr	r1, [pc, #128]	; (8001c5c <get_adc_value_conver_to_lux+0xcc>)
 8001bdc:	e9c1 2300 	strd	r2, r3, [r1]
	ip_diode = g_raw_lux_value/1200.0 ;
 8001be0:	4b1e      	ldr	r3, [pc, #120]	; (8001c5c <get_adc_value_conver_to_lux+0xcc>)
 8001be2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001be6:	f04f 0200 	mov.w	r2, #0
 8001bea:	4b1d      	ldr	r3, [pc, #116]	; (8001c60 <get_adc_value_conver_to_lux+0xd0>)
 8001bec:	f7fe fe36 	bl	800085c <__aeabi_ddiv>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	491b      	ldr	r1, [pc, #108]	; (8001c64 <get_adc_value_conver_to_lux+0xd4>)
 8001bf6:	e9c1 2300 	strd	r2, r3, [r1]
	lux_value = pow((ip_diode/(0.085*pow(10,-6))),1/1.01) ;
 8001bfa:	4b1a      	ldr	r3, [pc, #104]	; (8001c64 <get_adc_value_conver_to_lux+0xd4>)
 8001bfc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c00:	a311      	add	r3, pc, #68	; (adr r3, 8001c48 <get_adc_value_conver_to_lux+0xb8>)
 8001c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c06:	f7fe fe29 	bl	800085c <__aeabi_ddiv>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	ec43 2b17 	vmov	d7, r2, r3
 8001c12:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8001c50 <get_adc_value_conver_to_lux+0xc0>
 8001c16:	eeb0 0a47 	vmov.f32	s0, s14
 8001c1a:	eef0 0a67 	vmov.f32	s1, s15
 8001c1e:	f009 fcc7 	bl	800b5b0 <pow>
 8001c22:	ec53 2b10 	vmov	r2, r3, d0
 8001c26:	4610      	mov	r0, r2
 8001c28:	4619      	mov	r1, r3
 8001c2a:	f7fe ffc5 	bl	8000bb8 <__aeabi_d2uiz>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <get_adc_value_conver_to_lux+0xd8>)
 8001c34:	801a      	strh	r2, [r3, #0]

//	return g_raw_lux_value ;
	return lux_value ;
 8001c36:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <get_adc_value_conver_to_lux+0xd8>)
 8001c38:	881b      	ldrh	r3, [r3, #0]
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	e734d9b4 	.word	0xe734d9b4
 8001c44:	3f4a680c 	.word	0x3f4a680c
 8001c48:	d05394fe 	.word	0xd05394fe
 8001c4c:	3e76d127 	.word	0x3e76d127
 8001c50:	1e6a7498 	.word	0x1e6a7498
 8001c54:	3fefaee4 	.word	0x3fefaee4
 8001c58:	2000022c 	.word	0x2000022c
 8001c5c:	200003d8 	.word	0x200003d8
 8001c60:	4092c000 	.word	0x4092c000
 8001c64:	20000530 	.word	0x20000530
 8001c68:	20000538 	.word	0x20000538

08001c6c <en_measurements_and_responses>:
 * This funtion performs the measurement for UR3: Environement measure.
 * It measures the ambient temperature, solar panel temperature and light intensity,
 * the board is exposed to.
 * Measurements and responses, transmitted to UART and LCD
 */
void en_measurements_and_responses(){
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af02      	add	r7, sp, #8


	if(g_EN_measure == 1){
 8001c72:	4b41      	ldr	r3, [pc, #260]	; (8001d78 <en_measurements_and_responses+0x10c>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d14a      	bne.n	8001d10 <en_measurements_and_responses+0xa4>

	  // ignore bottom and left button press and SP command while measuring
	  if(g_bottom_button_pressed ==1 || g_SP_config_command_rcvd ==1 ||  g_left_button_pressed ==1){
 8001c7a:	4b40      	ldr	r3, [pc, #256]	; (8001d7c <en_measurements_and_responses+0x110>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d007      	beq.n	8001c92 <en_measurements_and_responses+0x26>
 8001c82:	4b3f      	ldr	r3, [pc, #252]	; (8001d80 <en_measurements_and_responses+0x114>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d003      	beq.n	8001c92 <en_measurements_and_responses+0x26>
 8001c8a:	4b3e      	ldr	r3, [pc, #248]	; (8001d84 <en_measurements_and_responses+0x118>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d108      	bne.n	8001ca4 <en_measurements_and_responses+0x38>
		  g_bottom_button_pressed = 0 ;
 8001c92:	4b3a      	ldr	r3, [pc, #232]	; (8001d7c <en_measurements_and_responses+0x110>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	701a      	strb	r2, [r3, #0]
		  g_SP_config_command_rcvd = 0 ;
 8001c98:	4b39      	ldr	r3, [pc, #228]	; (8001d80 <en_measurements_and_responses+0x114>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	701a      	strb	r2, [r3, #0]
		  g_left_button_pressed = 0;
 8001c9e:	4b39      	ldr	r3, [pc, #228]	; (8001d84 <en_measurements_and_responses+0x118>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	701a      	strb	r2, [r3, #0]
	  }
	  //ANALOGUE SENSOR CALIBRATION
	  g_temp_in_deg = get_adc_value_and_celsius_temperature() ;
 8001ca4:	f7ff faec 	bl	8001280 <get_adc_value_and_celsius_temperature>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	461a      	mov	r2, r3
 8001cac:	4b36      	ldr	r3, [pc, #216]	; (8001d88 <en_measurements_and_responses+0x11c>)
 8001cae:	801a      	strh	r2, [r3, #0]
	  store_temp_in_string(g_temp_in_deg, g_temperature, LEN);
 8001cb0:	4b35      	ldr	r3, [pc, #212]	; (8001d88 <en_measurements_and_responses+0x11c>)
 8001cb2:	881b      	ldrh	r3, [r3, #0]
 8001cb4:	2203      	movs	r2, #3
 8001cb6:	4935      	ldr	r1, [pc, #212]	; (8001d8c <en_measurements_and_responses+0x120>)
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff fb3b 	bl	8001334 <store_temp_in_string>

	  //PHOTODIOCE ouput
	  g_get_lxd_value = get_adc_value_conver_to_lux();
 8001cbe:	f7ff ff67 	bl	8001b90 <get_adc_value_conver_to_lux>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4b32      	ldr	r3, [pc, #200]	; (8001d90 <en_measurements_and_responses+0x124>)
 8001cc8:	801a      	strh	r2, [r3, #0]
	  snprintf(g_lxd_value, sizeof(g_lxd_value), "%05d",g_get_lxd_value);
 8001cca:	4b31      	ldr	r3, [pc, #196]	; (8001d90 <en_measurements_and_responses+0x124>)
 8001ccc:	881b      	ldrh	r3, [r3, #0]
 8001cce:	4a31      	ldr	r2, [pc, #196]	; (8001d94 <en_measurements_and_responses+0x128>)
 8001cd0:	2106      	movs	r1, #6
 8001cd2:	4831      	ldr	r0, [pc, #196]	; (8001d98 <en_measurements_and_responses+0x12c>)
 8001cd4:	f007 f9e0 	bl	8009098 <sniprintf>

	  // DIGITAL SENSOR CALIBRATION
	  g_lmt01_sens_temp =  (uint16_t)g_TO1_temp ;
 8001cd8:	4b30      	ldr	r3, [pc, #192]	; (8001d9c <en_measurements_and_responses+0x130>)
 8001cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cde:	4610      	mov	r0, r2
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	f7fe ff69 	bl	8000bb8 <__aeabi_d2uiz>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	4b2d      	ldr	r3, [pc, #180]	; (8001da0 <en_measurements_and_responses+0x134>)
 8001cec:	801a      	strh	r2, [r3, #0]
	  store_temp_in_string(g_lmt01_sens_temp, dig_sens_temp, LEN) ;
 8001cee:	4b2c      	ldr	r3, [pc, #176]	; (8001da0 <en_measurements_and_responses+0x134>)
 8001cf0:	881b      	ldrh	r3, [r3, #0]
 8001cf2:	2203      	movs	r2, #3
 8001cf4:	492b      	ldr	r1, [pc, #172]	; (8001da4 <en_measurements_and_responses+0x138>)
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff fb1c 	bl	8001334 <store_temp_in_string>

	  //re-prime system state update
	  if(g_transmit_system_state ==0){
 8001cfc:	4b2a      	ldr	r3, [pc, #168]	; (8001da8 <en_measurements_and_responses+0x13c>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d102      	bne.n	8001d0a <en_measurements_and_responses+0x9e>
		  g_transmit_system_state =1; //send the system state again
 8001d04:	4b28      	ldr	r3, [pc, #160]	; (8001da8 <en_measurements_and_responses+0x13c>)
 8001d06:	2201      	movs	r2, #1
 8001d08:	701a      	strb	r2, [r3, #0]

	  }

	  //Flash D3 LED -> put in function
	  flash_led_d3();
 8001d0a:	f7ff fe3d 	bl	8001988 <flash_led_d3>
		  HAL_UART_Transmit_IT(&huart2, (uint8_t*)system_state_transmit, 18);

	  }

	}
}
 8001d0e:	e030      	b.n	8001d72 <en_measurements_and_responses+0x106>
	else if(g_EN_measure == 2){
 8001d10:	4b19      	ldr	r3, [pc, #100]	; (8001d78 <en_measurements_and_responses+0x10c>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d12c      	bne.n	8001d72 <en_measurements_and_responses+0x106>
		g_EN_measure = 0;
 8001d18:	4b17      	ldr	r3, [pc, #92]	; (8001d78 <en_measurements_and_responses+0x10c>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	701a      	strb	r2, [r3, #0]
		 Lcd_clear(&lcd);
 8001d1e:	4823      	ldr	r0, [pc, #140]	; (8001dac <en_measurements_and_responses+0x140>)
 8001d20:	f7ff f9ca 	bl	80010b8 <Lcd_clear>
		g_EN_measure_LCD_display =  1 ;
 8001d24:	4b22      	ldr	r3, [pc, #136]	; (8001db0 <en_measurements_and_responses+0x144>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	701a      	strb	r2, [r3, #0]
		g_SP_measure_LCD_diplay = 0 ; //dont display SP measurements
 8001d2a:	4b22      	ldr	r3, [pc, #136]	; (8001db4 <en_measurements_and_responses+0x148>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET) ;
 8001d30:	2201      	movs	r2, #1
 8001d32:	2120      	movs	r1, #32
 8001d34:	4820      	ldr	r0, [pc, #128]	; (8001db8 <en_measurements_and_responses+0x14c>)
 8001d36:	f003 f9eb 	bl	8005110 <HAL_GPIO_WritePin>
	  snprintf(system_state_transmit,sizeof(system_state_transmit),"&_%03d_%03d_%05d_*\n",g_temp_in_deg,g_lmt01_sens_temp, g_get_lxd_value );
 8001d3a:	4b13      	ldr	r3, [pc, #76]	; (8001d88 <en_measurements_and_responses+0x11c>)
 8001d3c:	881b      	ldrh	r3, [r3, #0]
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4b17      	ldr	r3, [pc, #92]	; (8001da0 <en_measurements_and_responses+0x134>)
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	461a      	mov	r2, r3
 8001d46:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <en_measurements_and_responses+0x124>)
 8001d48:	881b      	ldrh	r3, [r3, #0]
 8001d4a:	9301      	str	r3, [sp, #4]
 8001d4c:	9200      	str	r2, [sp, #0]
 8001d4e:	460b      	mov	r3, r1
 8001d50:	4a1a      	ldr	r2, [pc, #104]	; (8001dbc <en_measurements_and_responses+0x150>)
 8001d52:	2113      	movs	r1, #19
 8001d54:	481a      	ldr	r0, [pc, #104]	; (8001dc0 <en_measurements_and_responses+0x154>)
 8001d56:	f007 f99f 	bl	8009098 <sniprintf>
	  if(g_transmit_system_state  == 1){
 8001d5a:	4b13      	ldr	r3, [pc, #76]	; (8001da8 <en_measurements_and_responses+0x13c>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d107      	bne.n	8001d72 <en_measurements_and_responses+0x106>
		  g_transmit_system_state = 0;
 8001d62:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <en_measurements_and_responses+0x13c>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit_IT(&huart2, (uint8_t*)system_state_transmit, 18);
 8001d68:	2212      	movs	r2, #18
 8001d6a:	4915      	ldr	r1, [pc, #84]	; (8001dc0 <en_measurements_and_responses+0x154>)
 8001d6c:	4815      	ldr	r0, [pc, #84]	; (8001dc4 <en_measurements_and_responses+0x158>)
 8001d6e:	f005 fd88 	bl	8007882 <HAL_UART_Transmit_IT>
}
 8001d72:	bf00      	nop
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	20000483 	.word	0x20000483
 8001d7c:	2000054b 	.word	0x2000054b
 8001d80:	20000491 	.word	0x20000491
 8001d84:	20000548 	.word	0x20000548
 8001d88:	200003c8 	.word	0x200003c8
 8001d8c:	200003cc 	.word	0x200003cc
 8001d90:	200003e0 	.word	0x200003e0
 8001d94:	0800c42c 	.word	0x0800c42c
 8001d98:	200003e4 	.word	0x200003e4
 8001d9c:	200003d0 	.word	0x200003d0
 8001da0:	20000526 	.word	0x20000526
 8001da4:	20000528 	.word	0x20000528
 8001da8:	20000012 	.word	0x20000012
 8001dac:	200004d0 	.word	0x200004d0
 8001db0:	20000484 	.word	0x20000484
 8001db4:	2000048f 	.word	0x2000048f
 8001db8:	40020400 	.word	0x40020400
 8001dbc:	0800c434 	.word	0x0800c434
 8001dc0:	200004a4 	.word	0x200004a4
 8001dc4:	2000036c 	.word	0x2000036c

08001dc8 <sp_measurements_and_responses>:

uint32_t previous_dutycyle_reference_point = 0;
uint8_t start_sweeping_IV_curve_during_PV_measurement =1;
uint8_t CCR_value = 0;
uint8_t continue_increasing_dutycyle =1;
void sp_measurements_and_responses(){
 8001dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001dcc:	b086      	sub	sp, #24
 8001dce:	af06      	add	r7, sp, #24
	  if(g_SP_measure == 1){
 8001dd0:	4b91      	ldr	r3, [pc, #580]	; (8002018 <sp_measurements_and_responses+0x250>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	f040 815f 	bne.w	8002098 <sp_measurements_and_responses+0x2d0>

		  // ignore top button and left button press and EN command while measuring
		  if(g_top_button_pressed ==1 || g_EN_config_command_rcvd ==1 || g_left_button_pressed ==1){
 8001dda:	4b90      	ldr	r3, [pc, #576]	; (800201c <sp_measurements_and_responses+0x254>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d007      	beq.n	8001df2 <sp_measurements_and_responses+0x2a>
 8001de2:	4b8f      	ldr	r3, [pc, #572]	; (8002020 <sp_measurements_and_responses+0x258>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d003      	beq.n	8001df2 <sp_measurements_and_responses+0x2a>
 8001dea:	4b8e      	ldr	r3, [pc, #568]	; (8002024 <sp_measurements_and_responses+0x25c>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d108      	bne.n	8001e04 <sp_measurements_and_responses+0x3c>
			  g_top_button_pressed = 0 ;
 8001df2:	4b8a      	ldr	r3, [pc, #552]	; (800201c <sp_measurements_and_responses+0x254>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	701a      	strb	r2, [r3, #0]
			  g_EN_config_command_rcvd = 0;
 8001df8:	4b89      	ldr	r3, [pc, #548]	; (8002020 <sp_measurements_and_responses+0x258>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	701a      	strb	r2, [r3, #0]
			  g_left_button_pressed = 0;
 8001dfe:	4b89      	ldr	r3, [pc, #548]	; (8002024 <sp_measurements_and_responses+0x25c>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	701a      	strb	r2, [r3, #0]
		  }

		  if(start_sweeping_IV_curve_during_PV_measurement ==1){
 8001e04:	4b88      	ldr	r3, [pc, #544]	; (8002028 <sp_measurements_and_responses+0x260>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d107      	bne.n	8001e1c <sp_measurements_and_responses+0x54>
			  previous_dutycyle_reference_point = HAL_GetTick();
 8001e0c:	f002 fa1e 	bl	800424c <HAL_GetTick>
 8001e10:	4603      	mov	r3, r0
 8001e12:	4a86      	ldr	r2, [pc, #536]	; (800202c <sp_measurements_and_responses+0x264>)
 8001e14:	6013      	str	r3, [r2, #0]
			  start_sweeping_IV_curve_during_PV_measurement = 0;
 8001e16:	4b84      	ldr	r3, [pc, #528]	; (8002028 <sp_measurements_and_responses+0x260>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	701a      	strb	r2, [r3, #0]
		  }

		  //sweep through IV curve every 3ms - to account for 3 second SP calibration
		  if(HAL_GetTick() -previous_dutycyle_reference_point >=30 && continue_increasing_dutycyle == 1){
 8001e1c:	f002 fa16 	bl	800424c <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	4b82      	ldr	r3, [pc, #520]	; (800202c <sp_measurements_and_responses+0x264>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b1d      	cmp	r3, #29
 8001e2a:	d91c      	bls.n	8001e66 <sp_measurements_and_responses+0x9e>
 8001e2c:	4b80      	ldr	r3, [pc, #512]	; (8002030 <sp_measurements_and_responses+0x268>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d118      	bne.n	8001e66 <sp_measurements_and_responses+0x9e>
			  CCR_value = TIM5->CCR2 ;
 8001e34:	4b7f      	ldr	r3, [pc, #508]	; (8002034 <sp_measurements_and_responses+0x26c>)
 8001e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	4b7f      	ldr	r3, [pc, #508]	; (8002038 <sp_measurements_and_responses+0x270>)
 8001e3c:	701a      	strb	r2, [r3, #0]
			  TIM5->CCR2+=3;
 8001e3e:	4b7d      	ldr	r3, [pc, #500]	; (8002034 <sp_measurements_and_responses+0x26c>)
 8001e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e42:	4a7c      	ldr	r2, [pc, #496]	; (8002034 <sp_measurements_and_responses+0x26c>)
 8001e44:	3303      	adds	r3, #3
 8001e46:	6393      	str	r3, [r2, #56]	; 0x38
			  //check for overflow
			  if(TIM5->CCR2 > 100 ){
 8001e48:	4b7a      	ldr	r3, [pc, #488]	; (8002034 <sp_measurements_and_responses+0x26c>)
 8001e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e4c:	2b64      	cmp	r3, #100	; 0x64
 8001e4e:	d905      	bls.n	8001e5c <sp_measurements_and_responses+0x94>
				  continue_increasing_dutycyle = 0;
 8001e50:	4b77      	ldr	r3, [pc, #476]	; (8002030 <sp_measurements_and_responses+0x268>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	701a      	strb	r2, [r3, #0]

//				  TIM5->CCR2 = 0;
				  CCR_value =0;
 8001e56:	4b78      	ldr	r3, [pc, #480]	; (8002038 <sp_measurements_and_responses+0x270>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	701a      	strb	r2, [r3, #0]
			  }
			  previous_dutycyle_reference_point  = HAL_GetTick();
 8001e5c:	f002 f9f6 	bl	800424c <HAL_GetTick>
 8001e60:	4603      	mov	r3, r0
 8001e62:	4a72      	ldr	r2, [pc, #456]	; (800202c <sp_measurements_and_responses+0x264>)
 8001e64:	6013      	str	r3, [r2, #0]
		  }

		//reprime state transmission
		if(g_transmit_SP_system_state == 0){
 8001e66:	4b75      	ldr	r3, [pc, #468]	; (800203c <sp_measurements_and_responses+0x274>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d102      	bne.n	8001e74 <sp_measurements_and_responses+0xac>
			g_transmit_SP_system_state = 1;
 8001e6e:	4b73      	ldr	r3, [pc, #460]	; (800203c <sp_measurements_and_responses+0x274>)
 8001e70:	2201      	movs	r2, #1
 8001e72:	701a      	strb	r2, [r3, #0]
		}
		//PV panel data points measure
		g_PV_vol1 = get_pv_panel_adc2_input() ; //Voc = Vsp
 8001e74:	f000 fad4 	bl	8002420 <get_pv_panel_adc2_input>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	4b70      	ldr	r3, [pc, #448]	; (8002040 <sp_measurements_and_responses+0x278>)
 8001e7e:	801a      	strh	r2, [r3, #0]
		//*ADC input(2) Vb = V_var
		g_PV_vol2= get_pv_panel_adc1_input() ;
 8001e80:	f000 fa6e 	bl	8002360 <get_pv_panel_adc1_input>
 8001e84:	4603      	mov	r3, r0
 8001e86:	461a      	mov	r2, r3
 8001e88:	4b6e      	ldr	r3, [pc, #440]	; (8002044 <sp_measurements_and_responses+0x27c>)
 8001e8a:	801a      	strh	r2, [r3, #0]

		//GET VALUES
		//Voc measure - Voc, vpv
		if(g_PV_vol1 > g_prev_v_pv){
 8001e8c:	4b6c      	ldr	r3, [pc, #432]	; (8002040 <sp_measurements_and_responses+0x278>)
 8001e8e:	881a      	ldrh	r2, [r3, #0]
 8001e90:	4b6d      	ldr	r3, [pc, #436]	; (8002048 <sp_measurements_and_responses+0x280>)
 8001e92:	881b      	ldrh	r3, [r3, #0]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d907      	bls.n	8001ea8 <sp_measurements_and_responses+0xe0>
		  g_prev_v_pv = g_PV_vol1 ;
 8001e98:	4b69      	ldr	r3, [pc, #420]	; (8002040 <sp_measurements_and_responses+0x278>)
 8001e9a:	881a      	ldrh	r2, [r3, #0]
 8001e9c:	4b6a      	ldr	r3, [pc, #424]	; (8002048 <sp_measurements_and_responses+0x280>)
 8001e9e:	801a      	strh	r2, [r3, #0]
		  //capture maximum open circuit voltage
		  g_v_oc_pv = g_PV_vol1 ;
 8001ea0:	4b67      	ldr	r3, [pc, #412]	; (8002040 <sp_measurements_and_responses+0x278>)
 8001ea2:	881a      	ldrh	r2, [r3, #0]
 8001ea4:	4b69      	ldr	r3, [pc, #420]	; (800204c <sp_measurements_and_responses+0x284>)
 8001ea6:	801a      	strh	r2, [r3, #0]
		}


		if(g_PV_vol1 - g_PV_vol2 >0){
 8001ea8:	4b65      	ldr	r3, [pc, #404]	; (8002040 <sp_measurements_and_responses+0x278>)
 8001eaa:	881b      	ldrh	r3, [r3, #0]
 8001eac:	461a      	mov	r2, r3
 8001eae:	4b65      	ldr	r3, [pc, #404]	; (8002044 <sp_measurements_and_responses+0x27c>)
 8001eb0:	881b      	ldrh	r3, [r3, #0]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	dd17      	ble.n	8001ee8 <sp_measurements_and_responses+0x120>
			if((g_PV_vol1 - g_PV_vol2) - prev_panel_current <30 ){
 8001eb8:	4b61      	ldr	r3, [pc, #388]	; (8002040 <sp_measurements_and_responses+0x278>)
 8001eba:	881b      	ldrh	r3, [r3, #0]
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4b61      	ldr	r3, [pc, #388]	; (8002044 <sp_measurements_and_responses+0x27c>)
 8001ec0:	881b      	ldrh	r3, [r3, #0]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	4a62      	ldr	r2, [pc, #392]	; (8002050 <sp_measurements_and_responses+0x288>)
 8001ec6:	8812      	ldrh	r2, [r2, #0]
 8001ec8:	1a9b      	subs	r3, r3, r2
 8001eca:	2b1d      	cmp	r3, #29
 8001ecc:	dc10      	bgt.n	8001ef0 <sp_measurements_and_responses+0x128>
				g_i_pv = g_PV_vol1 - g_PV_vol2 ;
 8001ece:	4b5c      	ldr	r3, [pc, #368]	; (8002040 <sp_measurements_and_responses+0x278>)
 8001ed0:	881a      	ldrh	r2, [r3, #0]
 8001ed2:	4b5c      	ldr	r3, [pc, #368]	; (8002044 <sp_measurements_and_responses+0x27c>)
 8001ed4:	881b      	ldrh	r3, [r3, #0]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	4b5e      	ldr	r3, [pc, #376]	; (8002054 <sp_measurements_and_responses+0x28c>)
 8001edc:	801a      	strh	r2, [r3, #0]

				prev_panel_current = g_i_pv ;
 8001ede:	4b5d      	ldr	r3, [pc, #372]	; (8002054 <sp_measurements_and_responses+0x28c>)
 8001ee0:	881a      	ldrh	r2, [r3, #0]
 8001ee2:	4b5b      	ldr	r3, [pc, #364]	; (8002050 <sp_measurements_and_responses+0x288>)
 8001ee4:	801a      	strh	r2, [r3, #0]
 8001ee6:	e003      	b.n	8001ef0 <sp_measurements_and_responses+0x128>
			}
		}
		else{
			g_i_pv = g_i_pv ; //dont update current
 8001ee8:	4b5a      	ldr	r3, [pc, #360]	; (8002054 <sp_measurements_and_responses+0x28c>)
 8001eea:	881a      	ldrh	r2, [r3, #0]
 8001eec:	4b59      	ldr	r3, [pc, #356]	; (8002054 <sp_measurements_and_responses+0x28c>)
 8001eee:	801a      	strh	r2, [r3, #0]
		}
		//power measure - multiply by 1000, to get result in mW
		g_p_pv = ( (g_PV_vol1 * g_i_pv)/1000000.0) *1000;
 8001ef0:	4b53      	ldr	r3, [pc, #332]	; (8002040 <sp_measurements_and_responses+0x278>)
 8001ef2:	881b      	ldrh	r3, [r3, #0]
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	4b57      	ldr	r3, [pc, #348]	; (8002054 <sp_measurements_and_responses+0x28c>)
 8001ef8:	881b      	ldrh	r3, [r3, #0]
 8001efa:	fb02 f303 	mul.w	r3, r2, r3
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7fe fb18 	bl	8000534 <__aeabi_i2d>
 8001f04:	a342      	add	r3, pc, #264	; (adr r3, 8002010 <sp_measurements_and_responses+0x248>)
 8001f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0a:	f7fe fca7 	bl	800085c <__aeabi_ddiv>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	4610      	mov	r0, r2
 8001f14:	4619      	mov	r1, r3
 8001f16:	f04f 0200 	mov.w	r2, #0
 8001f1a:	4b4f      	ldr	r3, [pc, #316]	; (8002058 <sp_measurements_and_responses+0x290>)
 8001f1c:	f7fe fb74 	bl	8000608 <__aeabi_dmul>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	4610      	mov	r0, r2
 8001f26:	4619      	mov	r1, r3
 8001f28:	f7fe fe66 	bl	8000bf8 <__aeabi_d2f>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	4a4b      	ldr	r2, [pc, #300]	; (800205c <sp_measurements_and_responses+0x294>)
 8001f30:	6013      	str	r3, [r2, #0]


		/*mpp values measure using power -Pmpp, Vmpp, Impp*/
		//check is power increasing
		if(g_p_pv > g_prev_p_pv ){
 8001f32:	4b4a      	ldr	r3, [pc, #296]	; (800205c <sp_measurements_and_responses+0x294>)
 8001f34:	ed93 7a00 	vldr	s14, [r3]
 8001f38:	4b49      	ldr	r3, [pc, #292]	; (8002060 <sp_measurements_and_responses+0x298>)
 8001f3a:	edd3 7a00 	vldr	s15, [r3]
 8001f3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f46:	dd1e      	ble.n	8001f86 <sp_measurements_and_responses+0x1be>
			//calibrate measured power
			g_p_mpp = g_p_pv ;
 8001f48:	4b44      	ldr	r3, [pc, #272]	; (800205c <sp_measurements_and_responses+0x294>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a45      	ldr	r2, [pc, #276]	; (8002064 <sp_measurements_and_responses+0x29c>)
 8001f4e:	6013      	str	r3, [r2, #0]
//			g_p_mpp =  get_calibrated_power(g_get_lxd_value, g_lmt01_sens_temp, g_p_pv) ; //calibrated power

//			g_p_mpp_calibrated =( g_p_mpp/(1+(-.004)*(g_lmt01_sens_temp-25)))*lux_at_calibration/g_get_lxd_value ;
			g_v_mpp = g_PV_vol1 ;
 8001f50:	4b3b      	ldr	r3, [pc, #236]	; (8002040 <sp_measurements_and_responses+0x278>)
 8001f52:	881a      	ldrh	r2, [r3, #0]
 8001f54:	4b44      	ldr	r3, [pc, #272]	; (8002068 <sp_measurements_and_responses+0x2a0>)
 8001f56:	801a      	strh	r2, [r3, #0]
			g_i_mpp = g_i_pv ;
 8001f58:	4b3e      	ldr	r3, [pc, #248]	; (8002054 <sp_measurements_and_responses+0x28c>)
 8001f5a:	881a      	ldrh	r2, [r3, #0]
 8001f5c:	4b43      	ldr	r3, [pc, #268]	; (800206c <sp_measurements_and_responses+0x2a4>)
 8001f5e:	801a      	strh	r2, [r3, #0]
			g_pv_eff = (calibrated_power/g_p_mpp_calibrated)*100 ;
 8001f60:	4b43      	ldr	r3, [pc, #268]	; (8002070 <sp_measurements_and_responses+0x2a8>)
 8001f62:	edd3 6a00 	vldr	s13, [r3]
 8001f66:	4b43      	ldr	r3, [pc, #268]	; (8002074 <sp_measurements_and_responses+0x2ac>)
 8001f68:	ed93 7a00 	vldr	s14, [r3]
 8001f6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f70:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8002078 <sp_measurements_and_responses+0x2b0>
 8001f74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f78:	4b40      	ldr	r3, [pc, #256]	; (800207c <sp_measurements_and_responses+0x2b4>)
 8001f7a:	edc3 7a00 	vstr	s15, [r3]
			g_prev_p_pv = g_p_pv ;
 8001f7e:	4b37      	ldr	r3, [pc, #220]	; (800205c <sp_measurements_and_responses+0x294>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a37      	ldr	r2, [pc, #220]	; (8002060 <sp_measurements_and_responses+0x298>)
 8001f84:	6013      	str	r3, [r2, #0]
		}

		if(clear_lcd_display == 1){
 8001f86:	4b3e      	ldr	r3, [pc, #248]	; (8002080 <sp_measurements_and_responses+0x2b8>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d105      	bne.n	8001f9a <sp_measurements_and_responses+0x1d2>
			clear_lcd_display = 0;
 8001f8e:	4b3c      	ldr	r3, [pc, #240]	; (8002080 <sp_measurements_and_responses+0x2b8>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	701a      	strb	r2, [r3, #0]
			Lcd_clear(&lcd);
 8001f94:	483b      	ldr	r0, [pc, #236]	; (8002084 <sp_measurements_and_responses+0x2bc>)
 8001f96:	f7ff f88f 	bl	80010b8 <Lcd_clear>
		}
		//LCD write - real-time measured Vpv (mV), Ipv (mA), Ppv (mW), Peff = 0 while measuring
		//write to lcd - //row 1
		Lcd_cursor(&lcd, 0, 0) ;
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	4839      	ldr	r0, [pc, #228]	; (8002084 <sp_measurements_and_responses+0x2bc>)
 8001fa0:	f7ff f870 	bl	8001084 <Lcd_cursor>
		snprintf(g_panel_voltage_and_current, sizeof(g_panel_voltage_and_current),"V:%04dmV I:%03dmA",g_PV_vol1,g_i_pv);
 8001fa4:	4b26      	ldr	r3, [pc, #152]	; (8002040 <sp_measurements_and_responses+0x278>)
 8001fa6:	881b      	ldrh	r3, [r3, #0]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	4b2a      	ldr	r3, [pc, #168]	; (8002054 <sp_measurements_and_responses+0x28c>)
 8001fac:	881b      	ldrh	r3, [r3, #0]
 8001fae:	9300      	str	r3, [sp, #0]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	4a35      	ldr	r2, [pc, #212]	; (8002088 <sp_measurements_and_responses+0x2c0>)
 8001fb4:	2111      	movs	r1, #17
 8001fb6:	4835      	ldr	r0, [pc, #212]	; (800208c <sp_measurements_and_responses+0x2c4>)
 8001fb8:	f007 f86e 	bl	8009098 <sniprintf>
		Lcd_string(&lcd, g_panel_voltage_and_current);
 8001fbc:	4933      	ldr	r1, [pc, #204]	; (800208c <sp_measurements_and_responses+0x2c4>)
 8001fbe:	4831      	ldr	r0, [pc, #196]	; (8002084 <sp_measurements_and_responses+0x2bc>)
 8001fc0:	f7ff f840 	bl	8001044 <Lcd_string>

		//2nd row
		Lcd_cursor(&lcd, 1, 0) ;
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	482e      	ldr	r0, [pc, #184]	; (8002084 <sp_measurements_and_responses+0x2bc>)
 8001fca:	f7ff f85b 	bl	8001084 <Lcd_cursor>
		snprintf(g_panel_power_and_efficiency, sizeof(g_panel_power_and_efficiency),"P: %03.0fmW E:%03.0f%%",g_p_mpp, g_pv_eff);
 8001fce:	4b25      	ldr	r3, [pc, #148]	; (8002064 <sp_measurements_and_responses+0x29c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7fe fac0 	bl	8000558 <__aeabi_f2d>
 8001fd8:	4604      	mov	r4, r0
 8001fda:	460d      	mov	r5, r1
 8001fdc:	4b27      	ldr	r3, [pc, #156]	; (800207c <sp_measurements_and_responses+0x2b4>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7fe fab9 	bl	8000558 <__aeabi_f2d>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
 8001fea:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001fee:	e9cd 4500 	strd	r4, r5, [sp]
 8001ff2:	4a27      	ldr	r2, [pc, #156]	; (8002090 <sp_measurements_and_responses+0x2c8>)
 8001ff4:	2111      	movs	r1, #17
 8001ff6:	4827      	ldr	r0, [pc, #156]	; (8002094 <sp_measurements_and_responses+0x2cc>)
 8001ff8:	f007 f84e 	bl	8009098 <sniprintf>
		Lcd_string(&lcd, g_panel_power_and_efficiency);
 8001ffc:	4925      	ldr	r1, [pc, #148]	; (8002094 <sp_measurements_and_responses+0x2cc>)
 8001ffe:	4821      	ldr	r0, [pc, #132]	; (8002084 <sp_measurements_and_responses+0x2bc>)
 8002000:	f7ff f820 	bl	8001044 <Lcd_string>

		//Flash D2 LED
		flash_led_d2() ;
 8002004:	f7ff fcf8 	bl	80019f8 <flash_led_d2>
			  //transmit over UART
			  HAL_UART_Transmit_IT(&huart2,(uint8_t*)system_state_SP_transmit, 21) ;

		  }
	  }
}
 8002008:	e08c      	b.n	8002124 <sp_measurements_and_responses+0x35c>
 800200a:	bf00      	nop
 800200c:	f3af 8000 	nop.w
 8002010:	00000000 	.word	0x00000000
 8002014:	412e8480 	.word	0x412e8480
 8002018:	2000048e 	.word	0x2000048e
 800201c:	2000054a 	.word	0x2000054a
 8002020:	2000048d 	.word	0x2000048d
 8002024:	20000548 	.word	0x20000548
 8002028:	20000030 	.word	0x20000030
 800202c:	2000053c 	.word	0x2000053c
 8002030:	20000031 	.word	0x20000031
 8002034:	40000c00 	.word	0x40000c00
 8002038:	20000540 	.word	0x20000540
 800203c:	20000013 	.word	0x20000013
 8002040:	2000041c 	.word	0x2000041c
 8002044:	20000424 	.word	0x20000424
 8002048:	20000420 	.word	0x20000420
 800204c:	2000041e 	.word	0x2000041e
 8002050:	20000422 	.word	0x20000422
 8002054:	20000400 	.word	0x20000400
 8002058:	408f4000 	.word	0x408f4000
 800205c:	20000404 	.word	0x20000404
 8002060:	20000408 	.word	0x20000408
 8002064:	20000410 	.word	0x20000410
 8002068:	2000040c 	.word	0x2000040c
 800206c:	2000040e 	.word	0x2000040e
 8002070:	2000049c 	.word	0x2000049c
 8002074:	20000414 	.word	0x20000414
 8002078:	42c80000 	.word	0x42c80000
 800207c:	20000418 	.word	0x20000418
 8002080:	20000015 	.word	0x20000015
 8002084:	200004d0 	.word	0x200004d0
 8002088:	0800c448 	.word	0x0800c448
 800208c:	20000434 	.word	0x20000434
 8002090:	0800c45c 	.word	0x0800c45c
 8002094:	2000045c 	.word	0x2000045c
	  else if(g_SP_measure == 2){
 8002098:	4b24      	ldr	r3, [pc, #144]	; (800212c <sp_measurements_and_responses+0x364>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b02      	cmp	r3, #2
 800209e:	d141      	bne.n	8002124 <sp_measurements_and_responses+0x35c>
		  g_SP_measure = 0;
 80020a0:	4b22      	ldr	r3, [pc, #136]	; (800212c <sp_measurements_and_responses+0x364>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	701a      	strb	r2, [r3, #0]
		  g_SP_measure_LCD_diplay =  1;
 80020a6:	4b22      	ldr	r3, [pc, #136]	; (8002130 <sp_measurements_and_responses+0x368>)
 80020a8:	2201      	movs	r2, #1
 80020aa:	701a      	strb	r2, [r3, #0]
		  g_EN_measure_LCD_display = 0; //dont diplay EN measurements
 80020ac:	4b21      	ldr	r3, [pc, #132]	; (8002134 <sp_measurements_and_responses+0x36c>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	701a      	strb	r2, [r3, #0]
		  start_sweeping_IV_curve_during_PV_measurement =1;
 80020b2:	4b21      	ldr	r3, [pc, #132]	; (8002138 <sp_measurements_and_responses+0x370>)
 80020b4:	2201      	movs	r2, #1
 80020b6:	701a      	strb	r2, [r3, #0]
		  TIM5->CCR2 = 0; //Re-start with duty cycle of 0
 80020b8:	4b20      	ldr	r3, [pc, #128]	; (800213c <sp_measurements_and_responses+0x374>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	639a      	str	r2, [r3, #56]	; 0x38
		  continue_increasing_dutycyle = 1;
 80020be:	4b20      	ldr	r3, [pc, #128]	; (8002140 <sp_measurements_and_responses+0x378>)
 80020c0:	2201      	movs	r2, #1
 80020c2:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET) ;
 80020c4:	2201      	movs	r2, #1
 80020c6:	2110      	movs	r1, #16
 80020c8:	481e      	ldr	r0, [pc, #120]	; (8002144 <sp_measurements_and_responses+0x37c>)
 80020ca:	f003 f821 	bl	8005110 <HAL_GPIO_WritePin>
		  snprintf(system_state_SP_transmit,sizeof(system_state_SP_transmit), "&_%04d_%03d_%03.0f_%03.0f_*\n",g_v_mpp,g_i_mpp,g_p_mpp,g_pv_eff);
 80020ce:	4b1e      	ldr	r3, [pc, #120]	; (8002148 <sp_measurements_and_responses+0x380>)
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	4698      	mov	r8, r3
 80020d4:	4b1d      	ldr	r3, [pc, #116]	; (800214c <sp_measurements_and_responses+0x384>)
 80020d6:	881b      	ldrh	r3, [r3, #0]
 80020d8:	461e      	mov	r6, r3
 80020da:	4b1d      	ldr	r3, [pc, #116]	; (8002150 <sp_measurements_and_responses+0x388>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f7fe fa3a 	bl	8000558 <__aeabi_f2d>
 80020e4:	4604      	mov	r4, r0
 80020e6:	460d      	mov	r5, r1
 80020e8:	4b1a      	ldr	r3, [pc, #104]	; (8002154 <sp_measurements_and_responses+0x38c>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7fe fa33 	bl	8000558 <__aeabi_f2d>
 80020f2:	4602      	mov	r2, r0
 80020f4:	460b      	mov	r3, r1
 80020f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80020fa:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80020fe:	9600      	str	r6, [sp, #0]
 8002100:	4643      	mov	r3, r8
 8002102:	4a15      	ldr	r2, [pc, #84]	; (8002158 <sp_measurements_and_responses+0x390>)
 8002104:	2116      	movs	r1, #22
 8002106:	4815      	ldr	r0, [pc, #84]	; (800215c <sp_measurements_and_responses+0x394>)
 8002108:	f006 ffc6 	bl	8009098 <sniprintf>
		  if(g_transmit_SP_system_state == 1){
 800210c:	4b14      	ldr	r3, [pc, #80]	; (8002160 <sp_measurements_and_responses+0x398>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d107      	bne.n	8002124 <sp_measurements_and_responses+0x35c>
			  g_transmit_SP_system_state = 0 ;
 8002114:	4b12      	ldr	r3, [pc, #72]	; (8002160 <sp_measurements_and_responses+0x398>)
 8002116:	2200      	movs	r2, #0
 8002118:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit_IT(&huart2,(uint8_t*)system_state_SP_transmit, 21) ;
 800211a:	2215      	movs	r2, #21
 800211c:	490f      	ldr	r1, [pc, #60]	; (800215c <sp_measurements_and_responses+0x394>)
 800211e:	4811      	ldr	r0, [pc, #68]	; (8002164 <sp_measurements_and_responses+0x39c>)
 8002120:	f005 fbaf 	bl	8007882 <HAL_UART_Transmit_IT>
}
 8002124:	bf00      	nop
 8002126:	46bd      	mov	sp, r7
 8002128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800212c:	2000048e 	.word	0x2000048e
 8002130:	2000048f 	.word	0x2000048f
 8002134:	20000484 	.word	0x20000484
 8002138:	20000030 	.word	0x20000030
 800213c:	40000c00 	.word	0x40000c00
 8002140:	20000031 	.word	0x20000031
 8002144:	40020400 	.word	0x40020400
 8002148:	2000040c 	.word	0x2000040c
 800214c:	2000040e 	.word	0x2000040e
 8002150:	20000410 	.word	0x20000410
 8002154:	20000418 	.word	0x20000418
 8002158:	0800c474 	.word	0x0800c474
 800215c:	200004b8 	.word	0x200004b8
 8002160:	20000013 	.word	0x20000013
 8002164:	2000036c 	.word	0x2000036c

08002168 <ca_measurements_and_responses>:

/**
 * Function gets the EN and SP measurements
 */

void ca_measurements_and_responses(){
 8002168:	b5b0      	push	{r4, r5, r7, lr}
 800216a:	af00      	add	r7, sp, #0

	if(g_CA_measure == 1){ // find calibrated measurements
 800216c:	4b6c      	ldr	r3, [pc, #432]	; (8002320 <ca_measurements_and_responses+0x1b8>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b01      	cmp	r3, #1
 8002172:	f040 80c3 	bne.w	80022fc <ca_measurements_and_responses+0x194>
		if(cal_entered == 1){
 8002176:	4b6b      	ldr	r3, [pc, #428]	; (8002324 <ca_measurements_and_responses+0x1bc>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d10c      	bne.n	8002198 <ca_measurements_and_responses+0x30>
			cal_entered = 0 ;
 800217e:	4b69      	ldr	r3, [pc, #420]	; (8002324 <ca_measurements_and_responses+0x1bc>)
 8002180:	2200      	movs	r2, #0
 8002182:	701a      	strb	r2, [r3, #0]
			calibration_time_passed =  HAL_GetTick() ;
 8002184:	f002 f862 	bl	800424c <HAL_GetTick>
 8002188:	4603      	mov	r3, r0
 800218a:	4a67      	ldr	r2, [pc, #412]	; (8002328 <ca_measurements_and_responses+0x1c0>)
 800218c:	6013      	str	r3, [r2, #0]
			g_time_passed = HAL_GetTick() ;
 800218e:	f002 f85d 	bl	800424c <HAL_GetTick>
 8002192:	4603      	mov	r3, r0
 8002194:	4a65      	ldr	r2, [pc, #404]	; (800232c <ca_measurements_and_responses+0x1c4>)
 8002196:	6013      	str	r3, [r2, #0]
		}

		flash_led_d4() ;
 8002198:	f7ff fc66 	bl	8001a68 <flash_led_d4>


		if(HAL_GetTick() - calibration_time_passed <3000){
 800219c:	f002 f856 	bl	800424c <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	4b61      	ldr	r3, [pc, #388]	; (8002328 <ca_measurements_and_responses+0x1c0>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d803      	bhi.n	80021b8 <ca_measurements_and_responses+0x50>
			g_EN_measure =1;
 80021b0:	4b5f      	ldr	r3, [pc, #380]	; (8002330 <ca_measurements_and_responses+0x1c8>)
 80021b2:	2201      	movs	r2, #1
 80021b4:	701a      	strb	r2, [r3, #0]
	//calibration ended - after 8s
	else if(g_CA_measure == 2){
//		g_CA_measure = 0; //perform next calibration if needed
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET) ;
	}
}
 80021b6:	e0ac      	b.n	8002312 <ca_measurements_and_responses+0x1aa>
		else if((HAL_GetTick() - calibration_time_passed > 3000) && (HAL_GetTick() - calibration_time_passed< 4000) && g_EN_measure == 1){
 80021b8:	f002 f848 	bl	800424c <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	4b5a      	ldr	r3, [pc, #360]	; (8002328 <ca_measurements_and_responses+0x1c0>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d910      	bls.n	80021ee <ca_measurements_and_responses+0x86>
 80021cc:	f002 f83e 	bl	800424c <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	4b55      	ldr	r3, [pc, #340]	; (8002328 <ca_measurements_and_responses+0x1c0>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80021dc:	d207      	bcs.n	80021ee <ca_measurements_and_responses+0x86>
 80021de:	4b54      	ldr	r3, [pc, #336]	; (8002330 <ca_measurements_and_responses+0x1c8>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d103      	bne.n	80021ee <ca_measurements_and_responses+0x86>
			g_EN_measure =2;
 80021e6:	4b52      	ldr	r3, [pc, #328]	; (8002330 <ca_measurements_and_responses+0x1c8>)
 80021e8:	2202      	movs	r2, #2
 80021ea:	701a      	strb	r2, [r3, #0]
 80021ec:	e091      	b.n	8002312 <ca_measurements_and_responses+0x1aa>
		else if((HAL_GetTick() - calibration_time_passed > 4000) && (HAL_GetTick() - calibration_time_passed< 8000)){
 80021ee:	f002 f82d 	bl	800424c <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	4b4c      	ldr	r3, [pc, #304]	; (8002328 <ca_measurements_and_responses+0x1c0>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80021fe:	d90f      	bls.n	8002220 <ca_measurements_and_responses+0xb8>
 8002200:	f002 f824 	bl	800424c <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	4b48      	ldr	r3, [pc, #288]	; (8002328 <ca_measurements_and_responses+0x1c0>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8002210:	d206      	bcs.n	8002220 <ca_measurements_and_responses+0xb8>
			g_SP_measure =1;
 8002212:	4b48      	ldr	r3, [pc, #288]	; (8002334 <ca_measurements_and_responses+0x1cc>)
 8002214:	2201      	movs	r2, #1
 8002216:	701a      	strb	r2, [r3, #0]
			sweep_through_IV_curve_during_calibration = 1;
 8002218:	4b47      	ldr	r3, [pc, #284]	; (8002338 <ca_measurements_and_responses+0x1d0>)
 800221a:	2201      	movs	r2, #1
 800221c:	701a      	strb	r2, [r3, #0]
 800221e:	e078      	b.n	8002312 <ca_measurements_and_responses+0x1aa>
		else if((HAL_GetTick() - calibration_time_passed > 8000) && (HAL_GetTick() - calibration_time_passed< 9000) && g_SP_measure == 1){
 8002220:	f002 f814 	bl	800424c <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	4b40      	ldr	r3, [pc, #256]	; (8002328 <ca_measurements_and_responses+0x1c0>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8002230:	d911      	bls.n	8002256 <ca_measurements_and_responses+0xee>
 8002232:	f002 f80b 	bl	800424c <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	4b3b      	ldr	r3, [pc, #236]	; (8002328 <ca_measurements_and_responses+0x1c0>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	f242 3227 	movw	r2, #8999	; 0x2327
 8002242:	4293      	cmp	r3, r2
 8002244:	d807      	bhi.n	8002256 <ca_measurements_and_responses+0xee>
 8002246:	4b3b      	ldr	r3, [pc, #236]	; (8002334 <ca_measurements_and_responses+0x1cc>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d103      	bne.n	8002256 <ca_measurements_and_responses+0xee>
				g_SP_measure =2;
 800224e:	4b39      	ldr	r3, [pc, #228]	; (8002334 <ca_measurements_and_responses+0x1cc>)
 8002250:	2202      	movs	r2, #2
 8002252:	701a      	strb	r2, [r3, #0]
 8002254:	e05d      	b.n	8002312 <ca_measurements_and_responses+0x1aa>
		else if(HAL_GetTick() - calibration_time_passed > 9000){
 8002256:	f001 fff9 	bl	800424c <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	4b32      	ldr	r3, [pc, #200]	; (8002328 <ca_measurements_and_responses+0x1c0>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	f242 3228 	movw	r2, #9000	; 0x2328
 8002266:	4293      	cmp	r3, r2
 8002268:	d953      	bls.n	8002312 <ca_measurements_and_responses+0x1aa>
			cal_entered  =1;
 800226a:	4b2e      	ldr	r3, [pc, #184]	; (8002324 <ca_measurements_and_responses+0x1bc>)
 800226c:	2201      	movs	r2, #1
 800226e:	701a      	strb	r2, [r3, #0]
			panel_temp_at_calibration = g_lmt01_sens_temp ; //panel temperature
 8002270:	4b32      	ldr	r3, [pc, #200]	; (800233c <ca_measurements_and_responses+0x1d4>)
 8002272:	881a      	ldrh	r2, [r3, #0]
 8002274:	4b32      	ldr	r3, [pc, #200]	; (8002340 <ca_measurements_and_responses+0x1d8>)
 8002276:	801a      	strh	r2, [r3, #0]
			sweep_through_IV_curve_during_calibration =0;
 8002278:	4b2f      	ldr	r3, [pc, #188]	; (8002338 <ca_measurements_and_responses+0x1d0>)
 800227a:	2200      	movs	r2, #0
 800227c:	701a      	strb	r2, [r3, #0]
			lux_at_calibration = g_get_lxd_value ;
 800227e:	4b31      	ldr	r3, [pc, #196]	; (8002344 <ca_measurements_and_responses+0x1dc>)
 8002280:	881a      	ldrh	r2, [r3, #0]
 8002282:	4b31      	ldr	r3, [pc, #196]	; (8002348 <ca_measurements_and_responses+0x1e0>)
 8002284:	801a      	strh	r2, [r3, #0]
			calibrated_power = g_p_mpp ;
 8002286:	4b31      	ldr	r3, [pc, #196]	; (800234c <ca_measurements_and_responses+0x1e4>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a31      	ldr	r2, [pc, #196]	; (8002350 <ca_measurements_and_responses+0x1e8>)
 800228c:	6013      	str	r3, [r2, #0]
			calibrated_power = calibrated_power/(1+(-0.004)*(panel_temp_at_calibration -25)) ; //Calibrated Power
 800228e:	4b30      	ldr	r3, [pc, #192]	; (8002350 <ca_measurements_and_responses+0x1e8>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f7fe f960 	bl	8000558 <__aeabi_f2d>
 8002298:	4604      	mov	r4, r0
 800229a:	460d      	mov	r5, r1
 800229c:	4b28      	ldr	r3, [pc, #160]	; (8002340 <ca_measurements_and_responses+0x1d8>)
 800229e:	881b      	ldrh	r3, [r3, #0]
 80022a0:	3b19      	subs	r3, #25
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7fe f946 	bl	8000534 <__aeabi_i2d>
 80022a8:	a31b      	add	r3, pc, #108	; (adr r3, 8002318 <ca_measurements_and_responses+0x1b0>)
 80022aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ae:	f7fe f9ab 	bl	8000608 <__aeabi_dmul>
 80022b2:	4602      	mov	r2, r0
 80022b4:	460b      	mov	r3, r1
 80022b6:	4610      	mov	r0, r2
 80022b8:	4619      	mov	r1, r3
 80022ba:	f04f 0200 	mov.w	r2, #0
 80022be:	4b25      	ldr	r3, [pc, #148]	; (8002354 <ca_measurements_and_responses+0x1ec>)
 80022c0:	f7fd ffec 	bl	800029c <__adddf3>
 80022c4:	4602      	mov	r2, r0
 80022c6:	460b      	mov	r3, r1
 80022c8:	4620      	mov	r0, r4
 80022ca:	4629      	mov	r1, r5
 80022cc:	f7fe fac6 	bl	800085c <__aeabi_ddiv>
 80022d0:	4602      	mov	r2, r0
 80022d2:	460b      	mov	r3, r1
 80022d4:	4610      	mov	r0, r2
 80022d6:	4619      	mov	r1, r3
 80022d8:	f7fe fc8e 	bl	8000bf8 <__aeabi_d2f>
 80022dc:	4603      	mov	r3, r0
 80022de:	4a1c      	ldr	r2, [pc, #112]	; (8002350 <ca_measurements_and_responses+0x1e8>)
 80022e0:	6013      	str	r3, [r2, #0]
			calibration_time_passed =  HAL_GetTick() ;
 80022e2:	f001 ffb3 	bl	800424c <HAL_GetTick>
 80022e6:	4603      	mov	r3, r0
 80022e8:	4a0f      	ldr	r2, [pc, #60]	; (8002328 <ca_measurements_and_responses+0x1c0>)
 80022ea:	6013      	str	r3, [r2, #0]
			if(g_CA_measure == 1){
 80022ec:	4b0c      	ldr	r3, [pc, #48]	; (8002320 <ca_measurements_and_responses+0x1b8>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d10e      	bne.n	8002312 <ca_measurements_and_responses+0x1aa>
				g_CA_measure = 2;
 80022f4:	4b0a      	ldr	r3, [pc, #40]	; (8002320 <ca_measurements_and_responses+0x1b8>)
 80022f6:	2202      	movs	r2, #2
 80022f8:	701a      	strb	r2, [r3, #0]
}
 80022fa:	e00a      	b.n	8002312 <ca_measurements_and_responses+0x1aa>
	else if(g_CA_measure == 2){
 80022fc:	4b08      	ldr	r3, [pc, #32]	; (8002320 <ca_measurements_and_responses+0x1b8>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b02      	cmp	r3, #2
 8002302:	d106      	bne.n	8002312 <ca_measurements_and_responses+0x1aa>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET) ;
 8002304:	2201      	movs	r2, #1
 8002306:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800230a:	4813      	ldr	r0, [pc, #76]	; (8002358 <ca_measurements_and_responses+0x1f0>)
 800230c:	f002 ff00 	bl	8005110 <HAL_GPIO_WritePin>
}
 8002310:	e7ff      	b.n	8002312 <ca_measurements_and_responses+0x1aa>
 8002312:	bf00      	nop
 8002314:	bdb0      	pop	{r4, r5, r7, pc}
 8002316:	bf00      	nop
 8002318:	d2f1a9fc 	.word	0xd2f1a9fc
 800231c:	bf70624d 	.word	0xbf70624d
 8002320:	20000493 	.word	0x20000493
 8002324:	20000011 	.word	0x20000011
 8002328:	20000494 	.word	0x20000494
 800232c:	20000488 	.word	0x20000488
 8002330:	20000483 	.word	0x20000483
 8002334:	2000048e 	.word	0x2000048e
 8002338:	20000498 	.word	0x20000498
 800233c:	20000526 	.word	0x20000526
 8002340:	200004a0 	.word	0x200004a0
 8002344:	200003e0 	.word	0x200003e0
 8002348:	2000049a 	.word	0x2000049a
 800234c:	20000410 	.word	0x20000410
 8002350:	2000049c 	.word	0x2000049c
 8002354:	3ff00000 	.word	0x3ff00000
 8002358:	40020400 	.word	0x40020400
 800235c:	00000000 	.word	0x00000000

08002360 <get_pv_panel_adc1_input>:
 * This function retrieves the ADC panel voltage,
 * across adc input 1
 * Gets the input voltage to the adc
 * Scales the voltage to the appropriate PV voltage
 */
uint16_t get_pv_panel_adc1_input(){
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
	//READ ADC VALUE
	ADC_Select_CH15() ;
 8002364:	f7ff fbf6 	bl	8001b54 <ADC_Select_CH15>
	HAL_ADC_Start(&hadc1);
 8002368:	4829      	ldr	r0, [pc, #164]	; (8002410 <get_pv_panel_adc1_input+0xb0>)
 800236a:	f001 ffe3 	bl	8004334 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) ;
 800236e:	f04f 31ff 	mov.w	r1, #4294967295
 8002372:	4827      	ldr	r0, [pc, #156]	; (8002410 <get_pv_panel_adc1_input+0xb0>)
 8002374:	f002 f8c5 	bl	8004502 <HAL_ADC_PollForConversion>
	g_v1_pv = HAL_ADC_GetValue(&hadc1) ;
 8002378:	4825      	ldr	r0, [pc, #148]	; (8002410 <get_pv_panel_adc1_input+0xb0>)
 800237a:	f002 f94d 	bl	8004618 <HAL_ADC_GetValue>
 800237e:	4603      	mov	r3, r0
 8002380:	4618      	mov	r0, r3
 8002382:	f7fe f8c7 	bl	8000514 <__aeabi_ui2d>
 8002386:	4602      	mov	r2, r0
 8002388:	460b      	mov	r3, r1
 800238a:	4922      	ldr	r1, [pc, #136]	; (8002414 <get_pv_panel_adc1_input+0xb4>)
 800238c:	e9c1 2300 	strd	r2, r3, [r1]
	HAL_ADC_Stop(&hadc1);
 8002390:	481f      	ldr	r0, [pc, #124]	; (8002410 <get_pv_panel_adc1_input+0xb0>)
 8002392:	f002 f883 	bl	800449c <HAL_ADC_Stop>

	//get voltage (mv) - from ADC formula
	g_v1_pv = g_v1_pv*(3.3/4095.0) ;
 8002396:	4b1f      	ldr	r3, [pc, #124]	; (8002414 <get_pv_panel_adc1_input+0xb4>)
 8002398:	e9d3 0100 	ldrd	r0, r1, [r3]
 800239c:	a318      	add	r3, pc, #96	; (adr r3, 8002400 <get_pv_panel_adc1_input+0xa0>)
 800239e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a2:	f7fe f931 	bl	8000608 <__aeabi_dmul>
 80023a6:	4602      	mov	r2, r0
 80023a8:	460b      	mov	r3, r1
 80023aa:	491a      	ldr	r1, [pc, #104]	; (8002414 <get_pv_panel_adc1_input+0xb4>)
 80023ac:	e9c1 2300 	strd	r2, r3, [r1]

	//scale voltage up to PV panel voltage (V)
	g_v1_pv = g_v1_pv*(99000.0/39000.0);
 80023b0:	4b18      	ldr	r3, [pc, #96]	; (8002414 <get_pv_panel_adc1_input+0xb4>)
 80023b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023b6:	a314      	add	r3, pc, #80	; (adr r3, 8002408 <get_pv_panel_adc1_input+0xa8>)
 80023b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023bc:	f7fe f924 	bl	8000608 <__aeabi_dmul>
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	4913      	ldr	r1, [pc, #76]	; (8002414 <get_pv_panel_adc1_input+0xb4>)
 80023c6:	e9c1 2300 	strd	r2, r3, [r1]

	//multiply by 1000 to get voltage to mv
	g_v1_pv = g_v1_pv*1000;
 80023ca:	4b12      	ldr	r3, [pc, #72]	; (8002414 <get_pv_panel_adc1_input+0xb4>)
 80023cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023d0:	f04f 0200 	mov.w	r2, #0
 80023d4:	4b10      	ldr	r3, [pc, #64]	; (8002418 <get_pv_panel_adc1_input+0xb8>)
 80023d6:	f7fe f917 	bl	8000608 <__aeabi_dmul>
 80023da:	4602      	mov	r2, r0
 80023dc:	460b      	mov	r3, r1
 80023de:	490d      	ldr	r1, [pc, #52]	; (8002414 <get_pv_panel_adc1_input+0xb4>)
 80023e0:	e9c1 2300 	strd	r2, r3, [r1]

	return g_v1_pv ;
 80023e4:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <get_pv_panel_adc1_input+0xb4>)
 80023e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ea:	4610      	mov	r0, r2
 80023ec:	4619      	mov	r1, r3
 80023ee:	f7fe fbe3 	bl	8000bb8 <__aeabi_d2uiz>
 80023f2:	4603      	mov	r3, r0
 80023f4:	b29b      	uxth	r3, r3
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	f3af 8000 	nop.w
 8002400:	e734d9b4 	.word	0xe734d9b4
 8002404:	3f4a680c 	.word	0x3f4a680c
 8002408:	ec4ec4ec 	.word	0xec4ec4ec
 800240c:	40044ec4 	.word	0x40044ec4
 8002410:	2000022c 	.word	0x2000022c
 8002414:	200003f0 	.word	0x200003f0
 8002418:	408f4000 	.word	0x408f4000
 800241c:	00000000 	.word	0x00000000

08002420 <get_pv_panel_adc2_input>:
 * This function returns the adc panel voltage, across adc input
 * 2
 * Gets the input voltage to the adc
 * Scales the voltage to the appropriate PV voltage
 */
uint16_t get_pv_panel_adc2_input(){
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
	//read adc value
	ADC_Select_CH9() ;
 8002424:	f7ff fb78 	bl	8001b18 <ADC_Select_CH9>
	HAL_ADC_Start(&hadc1);
 8002428:	4829      	ldr	r0, [pc, #164]	; (80024d0 <get_pv_panel_adc2_input+0xb0>)
 800242a:	f001 ff83 	bl	8004334 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) ;
 800242e:	f04f 31ff 	mov.w	r1, #4294967295
 8002432:	4827      	ldr	r0, [pc, #156]	; (80024d0 <get_pv_panel_adc2_input+0xb0>)
 8002434:	f002 f865 	bl	8004502 <HAL_ADC_PollForConversion>
	g_v2_pv = HAL_ADC_GetValue(&hadc1) ;
 8002438:	4825      	ldr	r0, [pc, #148]	; (80024d0 <get_pv_panel_adc2_input+0xb0>)
 800243a:	f002 f8ed 	bl	8004618 <HAL_ADC_GetValue>
 800243e:	4603      	mov	r3, r0
 8002440:	4618      	mov	r0, r3
 8002442:	f7fe f867 	bl	8000514 <__aeabi_ui2d>
 8002446:	4602      	mov	r2, r0
 8002448:	460b      	mov	r3, r1
 800244a:	4922      	ldr	r1, [pc, #136]	; (80024d4 <get_pv_panel_adc2_input+0xb4>)
 800244c:	e9c1 2300 	strd	r2, r3, [r1]
	HAL_ADC_Stop(&hadc1);
 8002450:	481f      	ldr	r0, [pc, #124]	; (80024d0 <get_pv_panel_adc2_input+0xb0>)
 8002452:	f002 f823 	bl	800449c <HAL_ADC_Stop>

	//get voltage (mv) -from adc formula
	g_v2_pv = g_v2_pv*(3.3/4095.0) ;
 8002456:	4b1f      	ldr	r3, [pc, #124]	; (80024d4 <get_pv_panel_adc2_input+0xb4>)
 8002458:	e9d3 0100 	ldrd	r0, r1, [r3]
 800245c:	a318      	add	r3, pc, #96	; (adr r3, 80024c0 <get_pv_panel_adc2_input+0xa0>)
 800245e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002462:	f7fe f8d1 	bl	8000608 <__aeabi_dmul>
 8002466:	4602      	mov	r2, r0
 8002468:	460b      	mov	r3, r1
 800246a:	491a      	ldr	r1, [pc, #104]	; (80024d4 <get_pv_panel_adc2_input+0xb4>)
 800246c:	e9c1 2300 	strd	r2, r3, [r1]

	//scale voltage up to PV panel voltage
	g_v2_pv = g_v2_pv*(99000.0/39000.0);
 8002470:	4b18      	ldr	r3, [pc, #96]	; (80024d4 <get_pv_panel_adc2_input+0xb4>)
 8002472:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002476:	a314      	add	r3, pc, #80	; (adr r3, 80024c8 <get_pv_panel_adc2_input+0xa8>)
 8002478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800247c:	f7fe f8c4 	bl	8000608 <__aeabi_dmul>
 8002480:	4602      	mov	r2, r0
 8002482:	460b      	mov	r3, r1
 8002484:	4913      	ldr	r1, [pc, #76]	; (80024d4 <get_pv_panel_adc2_input+0xb4>)
 8002486:	e9c1 2300 	strd	r2, r3, [r1]

	//multiply by 1000 to get voltage to mv
	g_v2_pv = g_v2_pv*1000;
 800248a:	4b12      	ldr	r3, [pc, #72]	; (80024d4 <get_pv_panel_adc2_input+0xb4>)
 800248c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002490:	f04f 0200 	mov.w	r2, #0
 8002494:	4b10      	ldr	r3, [pc, #64]	; (80024d8 <get_pv_panel_adc2_input+0xb8>)
 8002496:	f7fe f8b7 	bl	8000608 <__aeabi_dmul>
 800249a:	4602      	mov	r2, r0
 800249c:	460b      	mov	r3, r1
 800249e:	490d      	ldr	r1, [pc, #52]	; (80024d4 <get_pv_panel_adc2_input+0xb4>)
 80024a0:	e9c1 2300 	strd	r2, r3, [r1]

	return g_v2_pv ;
 80024a4:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <get_pv_panel_adc2_input+0xb4>)
 80024a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024aa:	4610      	mov	r0, r2
 80024ac:	4619      	mov	r1, r3
 80024ae:	f7fe fb83 	bl	8000bb8 <__aeabi_d2uiz>
 80024b2:	4603      	mov	r3, r0
 80024b4:	b29b      	uxth	r3, r3

}
 80024b6:	4618      	mov	r0, r3
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	f3af 8000 	nop.w
 80024c0:	e734d9b4 	.word	0xe734d9b4
 80024c4:	3f4a680c 	.word	0x3f4a680c
 80024c8:	ec4ec4ec 	.word	0xec4ec4ec
 80024cc:	40044ec4 	.word	0x40044ec4
 80024d0:	2000022c 	.word	0x2000022c
 80024d4:	200003f8 	.word	0x200003f8
 80024d8:	408f4000 	.word	0x408f4000

080024dc <lcd_Mode_1>:

/**
 * SP Measurement
 */
void lcd_Mode_1(){
 80024dc:	b5b0      	push	{r4, r5, r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af04      	add	r7, sp, #16
	Lcd_clear(&lcd);
 80024e2:	481d      	ldr	r0, [pc, #116]	; (8002558 <lcd_Mode_1+0x7c>)
 80024e4:	f7fe fde8 	bl	80010b8 <Lcd_clear>

	//first row
	Lcd_cursor(&lcd, 0, 0) ;
 80024e8:	2200      	movs	r2, #0
 80024ea:	2100      	movs	r1, #0
 80024ec:	481a      	ldr	r0, [pc, #104]	; (8002558 <lcd_Mode_1+0x7c>)
 80024ee:	f7fe fdc9 	bl	8001084 <Lcd_cursor>
	snprintf(g_panel_voltage_and_current, sizeof(g_panel_voltage_and_current),"V:%04dmV I:%03dmA",g_v_mpp,g_i_mpp);
 80024f2:	4b1a      	ldr	r3, [pc, #104]	; (800255c <lcd_Mode_1+0x80>)
 80024f4:	881b      	ldrh	r3, [r3, #0]
 80024f6:	461a      	mov	r2, r3
 80024f8:	4b19      	ldr	r3, [pc, #100]	; (8002560 <lcd_Mode_1+0x84>)
 80024fa:	881b      	ldrh	r3, [r3, #0]
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	4613      	mov	r3, r2
 8002500:	4a18      	ldr	r2, [pc, #96]	; (8002564 <lcd_Mode_1+0x88>)
 8002502:	2111      	movs	r1, #17
 8002504:	4818      	ldr	r0, [pc, #96]	; (8002568 <lcd_Mode_1+0x8c>)
 8002506:	f006 fdc7 	bl	8009098 <sniprintf>
	Lcd_string(&lcd, g_panel_voltage_and_current);
 800250a:	4917      	ldr	r1, [pc, #92]	; (8002568 <lcd_Mode_1+0x8c>)
 800250c:	4812      	ldr	r0, [pc, #72]	; (8002558 <lcd_Mode_1+0x7c>)
 800250e:	f7fe fd99 	bl	8001044 <Lcd_string>

	//2nd row
	Lcd_cursor(&lcd, 1, 0) ;
 8002512:	2200      	movs	r2, #0
 8002514:	2101      	movs	r1, #1
 8002516:	4810      	ldr	r0, [pc, #64]	; (8002558 <lcd_Mode_1+0x7c>)
 8002518:	f7fe fdb4 	bl	8001084 <Lcd_cursor>
	snprintf(g_panel_power_and_efficiency, sizeof(g_panel_power_and_efficiency),"P: %03.0fmW E:%03.0f%%",g_p_mpp, g_pv_eff);
 800251c:	4b13      	ldr	r3, [pc, #76]	; (800256c <lcd_Mode_1+0x90>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4618      	mov	r0, r3
 8002522:	f7fe f819 	bl	8000558 <__aeabi_f2d>
 8002526:	4604      	mov	r4, r0
 8002528:	460d      	mov	r5, r1
 800252a:	4b11      	ldr	r3, [pc, #68]	; (8002570 <lcd_Mode_1+0x94>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f7fe f812 	bl	8000558 <__aeabi_f2d>
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800253c:	e9cd 4500 	strd	r4, r5, [sp]
 8002540:	4a0c      	ldr	r2, [pc, #48]	; (8002574 <lcd_Mode_1+0x98>)
 8002542:	2111      	movs	r1, #17
 8002544:	480c      	ldr	r0, [pc, #48]	; (8002578 <lcd_Mode_1+0x9c>)
 8002546:	f006 fda7 	bl	8009098 <sniprintf>
	Lcd_string(&lcd, g_panel_power_and_efficiency);
 800254a:	490b      	ldr	r1, [pc, #44]	; (8002578 <lcd_Mode_1+0x9c>)
 800254c:	4802      	ldr	r0, [pc, #8]	; (8002558 <lcd_Mode_1+0x7c>)
 800254e:	f7fe fd79 	bl	8001044 <Lcd_string>

}
 8002552:	bf00      	nop
 8002554:	46bd      	mov	sp, r7
 8002556:	bdb0      	pop	{r4, r5, r7, pc}
 8002558:	200004d0 	.word	0x200004d0
 800255c:	2000040c 	.word	0x2000040c
 8002560:	2000040e 	.word	0x2000040e
 8002564:	0800c448 	.word	0x0800c448
 8002568:	20000434 	.word	0x20000434
 800256c:	20000410 	.word	0x20000410
 8002570:	20000418 	.word	0x20000418
 8002574:	0800c45c 	.word	0x0800c45c
 8002578:	2000045c 	.word	0x2000045c

0800257c <lcd_Mode_2>:

/**
 * EN measurements
 */
void lcd_Mode_2(){
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af02      	add	r7, sp, #8
	//clear current LCD contents
	Lcd_clear(&lcd);
 8002582:	4815      	ldr	r0, [pc, #84]	; (80025d8 <lcd_Mode_2+0x5c>)
 8002584:	f7fe fd98 	bl	80010b8 <Lcd_clear>
	//first row
	Lcd_cursor(&lcd, 0, 0) ;
 8002588:	2200      	movs	r2, #0
 800258a:	2100      	movs	r1, #0
 800258c:	4812      	ldr	r0, [pc, #72]	; (80025d8 <lcd_Mode_2+0x5c>)
 800258e:	f7fe fd79 	bl	8001084 <Lcd_cursor>
	snprintf(g_envir_measure_temperatures, sizeof(g_envir_measure_temperatures),"AMB:%03dC SP:%03dC",g_temp_in_deg,g_lmt01_sens_temp);
 8002592:	4b12      	ldr	r3, [pc, #72]	; (80025dc <lcd_Mode_2+0x60>)
 8002594:	881b      	ldrh	r3, [r3, #0]
 8002596:	461a      	mov	r2, r3
 8002598:	4b11      	ldr	r3, [pc, #68]	; (80025e0 <lcd_Mode_2+0x64>)
 800259a:	881b      	ldrh	r3, [r3, #0]
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	4613      	mov	r3, r2
 80025a0:	4a10      	ldr	r2, [pc, #64]	; (80025e4 <lcd_Mode_2+0x68>)
 80025a2:	2111      	movs	r1, #17
 80025a4:	4810      	ldr	r0, [pc, #64]	; (80025e8 <lcd_Mode_2+0x6c>)
 80025a6:	f006 fd77 	bl	8009098 <sniprintf>
	Lcd_string(&lcd, g_envir_measure_temperatures);
 80025aa:	490f      	ldr	r1, [pc, #60]	; (80025e8 <lcd_Mode_2+0x6c>)
 80025ac:	480a      	ldr	r0, [pc, #40]	; (80025d8 <lcd_Mode_2+0x5c>)
 80025ae:	f7fe fd49 	bl	8001044 <Lcd_string>

	//scale lux value: [0: 30000]?
	Lcd_cursor(&lcd, 1,0);
 80025b2:	2200      	movs	r2, #0
 80025b4:	2101      	movs	r1, #1
 80025b6:	4808      	ldr	r0, [pc, #32]	; (80025d8 <lcd_Mode_2+0x5c>)
 80025b8:	f7fe fd64 	bl	8001084 <Lcd_cursor>
	snprintf(g_lcd_lux_val, sizeof(g_lcd_lux_val),"LUX:%05d",g_get_lxd_value);
 80025bc:	4b0b      	ldr	r3, [pc, #44]	; (80025ec <lcd_Mode_2+0x70>)
 80025be:	881b      	ldrh	r3, [r3, #0]
 80025c0:	4a0b      	ldr	r2, [pc, #44]	; (80025f0 <lcd_Mode_2+0x74>)
 80025c2:	210a      	movs	r1, #10
 80025c4:	480b      	ldr	r0, [pc, #44]	; (80025f4 <lcd_Mode_2+0x78>)
 80025c6:	f006 fd67 	bl	8009098 <sniprintf>
	Lcd_string(&lcd,g_lcd_lux_val);
 80025ca:	490a      	ldr	r1, [pc, #40]	; (80025f4 <lcd_Mode_2+0x78>)
 80025cc:	4802      	ldr	r0, [pc, #8]	; (80025d8 <lcd_Mode_2+0x5c>)
 80025ce:	f7fe fd39 	bl	8001044 <Lcd_string>
}
 80025d2:	bf00      	nop
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	200004d0 	.word	0x200004d0
 80025dc:	200003c8 	.word	0x200003c8
 80025e0:	20000526 	.word	0x20000526
 80025e4:	0800c494 	.word	0x0800c494
 80025e8:	20000448 	.word	0x20000448
 80025ec:	200003e0 	.word	0x200003e0
 80025f0:	0800c4a8 	.word	0x0800c4a8
 80025f4:	20000428 	.word	0x20000428

080025f8 <lcd_Mode_3>:

/**
 * RTC measurements
 */
void lcd_Mode_3(){
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af02      	add	r7, sp, #8
	Lcd_clear(&lcd);
 80025fe:	4821      	ldr	r0, [pc, #132]	; (8002684 <lcd_Mode_3+0x8c>)
 8002600:	f7fe fd5a 	bl	80010b8 <Lcd_clear>

	//display the updated time and date
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN) ;
 8002604:	2200      	movs	r2, #0
 8002606:	4920      	ldr	r1, [pc, #128]	; (8002688 <lcd_Mode_3+0x90>)
 8002608:	4820      	ldr	r0, [pc, #128]	; (800268c <lcd_Mode_3+0x94>)
 800260a:	f003 fc71 	bl	8005ef0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN) ;
 800260e:	2200      	movs	r2, #0
 8002610:	491f      	ldr	r1, [pc, #124]	; (8002690 <lcd_Mode_3+0x98>)
 8002612:	481e      	ldr	r0, [pc, #120]	; (800268c <lcd_Mode_3+0x94>)
 8002614:	f003 fd4e 	bl	80060b4 <HAL_RTC_GetDate>

	snprintf(g_date, sizeof(g_date),"%02d/%02d/20%02d",sDate.Date, sDate.Month,sDate.Year);
 8002618:	4b1d      	ldr	r3, [pc, #116]	; (8002690 <lcd_Mode_3+0x98>)
 800261a:	789b      	ldrb	r3, [r3, #2]
 800261c:	4619      	mov	r1, r3
 800261e:	4b1c      	ldr	r3, [pc, #112]	; (8002690 <lcd_Mode_3+0x98>)
 8002620:	785b      	ldrb	r3, [r3, #1]
 8002622:	461a      	mov	r2, r3
 8002624:	4b1a      	ldr	r3, [pc, #104]	; (8002690 <lcd_Mode_3+0x98>)
 8002626:	78db      	ldrb	r3, [r3, #3]
 8002628:	9301      	str	r3, [sp, #4]
 800262a:	9200      	str	r2, [sp, #0]
 800262c:	460b      	mov	r3, r1
 800262e:	4a19      	ldr	r2, [pc, #100]	; (8002694 <lcd_Mode_3+0x9c>)
 8002630:	210b      	movs	r1, #11
 8002632:	4819      	ldr	r0, [pc, #100]	; (8002698 <lcd_Mode_3+0xa0>)
 8002634:	f006 fd30 	bl	8009098 <sniprintf>
	snprintf(g_time, sizeof(g_time),"%02d:%02d:%02d",sTime.Hours, sTime.Minutes, sTime.Seconds);
 8002638:	4b13      	ldr	r3, [pc, #76]	; (8002688 <lcd_Mode_3+0x90>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	4619      	mov	r1, r3
 800263e:	4b12      	ldr	r3, [pc, #72]	; (8002688 <lcd_Mode_3+0x90>)
 8002640:	785b      	ldrb	r3, [r3, #1]
 8002642:	461a      	mov	r2, r3
 8002644:	4b10      	ldr	r3, [pc, #64]	; (8002688 <lcd_Mode_3+0x90>)
 8002646:	789b      	ldrb	r3, [r3, #2]
 8002648:	9301      	str	r3, [sp, #4]
 800264a:	9200      	str	r2, [sp, #0]
 800264c:	460b      	mov	r3, r1
 800264e:	4a13      	ldr	r2, [pc, #76]	; (800269c <lcd_Mode_3+0xa4>)
 8002650:	2109      	movs	r1, #9
 8002652:	4813      	ldr	r0, [pc, #76]	; (80026a0 <lcd_Mode_3+0xa8>)
 8002654:	f006 fd20 	bl	8009098 <sniprintf>
	//display date
	Lcd_cursor(&lcd, 0, 0) ;
 8002658:	2200      	movs	r2, #0
 800265a:	2100      	movs	r1, #0
 800265c:	4809      	ldr	r0, [pc, #36]	; (8002684 <lcd_Mode_3+0x8c>)
 800265e:	f7fe fd11 	bl	8001084 <Lcd_cursor>
	Lcd_string(&lcd, g_date);
 8002662:	490d      	ldr	r1, [pc, #52]	; (8002698 <lcd_Mode_3+0xa0>)
 8002664:	4807      	ldr	r0, [pc, #28]	; (8002684 <lcd_Mode_3+0x8c>)
 8002666:	f7fe fced 	bl	8001044 <Lcd_string>

	//display time - second row
	Lcd_cursor(&lcd, 1, 0) ;
 800266a:	2200      	movs	r2, #0
 800266c:	2101      	movs	r1, #1
 800266e:	4805      	ldr	r0, [pc, #20]	; (8002684 <lcd_Mode_3+0x8c>)
 8002670:	f7fe fd08 	bl	8001084 <Lcd_cursor>
	Lcd_string(&lcd, g_time);
 8002674:	490a      	ldr	r1, [pc, #40]	; (80026a0 <lcd_Mode_3+0xa8>)
 8002676:	4803      	ldr	r0, [pc, #12]	; (8002684 <lcd_Mode_3+0x8c>)
 8002678:	f7fe fce4 	bl	8001044 <Lcd_string>
}
 800267c:	bf00      	nop
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	200004d0 	.word	0x200004d0
 8002688:	200004e8 	.word	0x200004e8
 800268c:	20000274 	.word	0x20000274
 8002690:	200004fc 	.word	0x200004fc
 8002694:	0800c4b4 	.word	0x0800c4b4
 8002698:	20000504 	.word	0x20000504
 800269c:	0800c4c8 	.word	0x0800c4c8
 80026a0:	20000510 	.word	0x20000510

080026a4 <change_lcd_display_mode>:
 * Changing the view is independent of the system ,and does not change any
 * state of the system
 */

uint8_t default_switch_mode = 1;
void change_lcd_display_mode(){
 80026a4:	b5b0      	push	{r4, r5, r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af04      	add	r7, sp, #16
	//display default display mode
	if(g_lcd_default_mode == 1){
 80026aa:	4b56      	ldr	r3, [pc, #344]	; (8002804 <change_lcd_display_mode+0x160>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d167      	bne.n	8002782 <change_lcd_display_mode+0xde>

		g_lcd_default_mode = 0;
 80026b2:	4b54      	ldr	r3, [pc, #336]	; (8002804 <change_lcd_display_mode+0x160>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	701a      	strb	r2, [r3, #0]

		//update the correspoding lcd mode
		g_lcd_mode =1 ;
 80026b8:	4b53      	ldr	r3, [pc, #332]	; (8002808 <change_lcd_display_mode+0x164>)
 80026ba:	2201      	movs	r2, #1
 80026bc:	701a      	strb	r2, [r3, #0]

		Lcd_clear(&lcd);
 80026be:	4853      	ldr	r0, [pc, #332]	; (800280c <change_lcd_display_mode+0x168>)
 80026c0:	f7fe fcfa 	bl	80010b8 <Lcd_clear>

		//first row
		Lcd_cursor(&lcd, 0, 0) ;
 80026c4:	2200      	movs	r2, #0
 80026c6:	2100      	movs	r1, #0
 80026c8:	4850      	ldr	r0, [pc, #320]	; (800280c <change_lcd_display_mode+0x168>)
 80026ca:	f7fe fcdb 	bl	8001084 <Lcd_cursor>
		snprintf(g_panel_voltage_and_current, sizeof(g_panel_voltage_and_current),"V:%04dmV I:%03dmA",g_v_mpp,g_i_mpp);
 80026ce:	4b50      	ldr	r3, [pc, #320]	; (8002810 <change_lcd_display_mode+0x16c>)
 80026d0:	881b      	ldrh	r3, [r3, #0]
 80026d2:	461a      	mov	r2, r3
 80026d4:	4b4f      	ldr	r3, [pc, #316]	; (8002814 <change_lcd_display_mode+0x170>)
 80026d6:	881b      	ldrh	r3, [r3, #0]
 80026d8:	9300      	str	r3, [sp, #0]
 80026da:	4613      	mov	r3, r2
 80026dc:	4a4e      	ldr	r2, [pc, #312]	; (8002818 <change_lcd_display_mode+0x174>)
 80026de:	2111      	movs	r1, #17
 80026e0:	484e      	ldr	r0, [pc, #312]	; (800281c <change_lcd_display_mode+0x178>)
 80026e2:	f006 fcd9 	bl	8009098 <sniprintf>
		Lcd_string(&lcd, g_panel_voltage_and_current);
 80026e6:	494d      	ldr	r1, [pc, #308]	; (800281c <change_lcd_display_mode+0x178>)
 80026e8:	4848      	ldr	r0, [pc, #288]	; (800280c <change_lcd_display_mode+0x168>)
 80026ea:	f7fe fcab 	bl	8001044 <Lcd_string>

		//2nd row
		Lcd_cursor(&lcd, 1, 0) ;
 80026ee:	2200      	movs	r2, #0
 80026f0:	2101      	movs	r1, #1
 80026f2:	4846      	ldr	r0, [pc, #280]	; (800280c <change_lcd_display_mode+0x168>)
 80026f4:	f7fe fcc6 	bl	8001084 <Lcd_cursor>
		snprintf(g_panel_power_and_efficiency, sizeof(g_panel_power_and_efficiency),"P: %03.0fmW E:%03.0f%%",g_p_mpp, g_pv_eff);
 80026f8:	4b49      	ldr	r3, [pc, #292]	; (8002820 <change_lcd_display_mode+0x17c>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7fd ff2b 	bl	8000558 <__aeabi_f2d>
 8002702:	4604      	mov	r4, r0
 8002704:	460d      	mov	r5, r1
 8002706:	4b47      	ldr	r3, [pc, #284]	; (8002824 <change_lcd_display_mode+0x180>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f7fd ff24 	bl	8000558 <__aeabi_f2d>
 8002710:	4602      	mov	r2, r0
 8002712:	460b      	mov	r3, r1
 8002714:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002718:	e9cd 4500 	strd	r4, r5, [sp]
 800271c:	4a42      	ldr	r2, [pc, #264]	; (8002828 <change_lcd_display_mode+0x184>)
 800271e:	2111      	movs	r1, #17
 8002720:	4842      	ldr	r0, [pc, #264]	; (800282c <change_lcd_display_mode+0x188>)
 8002722:	f006 fcb9 	bl	8009098 <sniprintf>
		Lcd_string(&lcd, g_panel_power_and_efficiency);
 8002726:	4941      	ldr	r1, [pc, #260]	; (800282c <change_lcd_display_mode+0x188>)
 8002728:	4838      	ldr	r0, [pc, #224]	; (800280c <change_lcd_display_mode+0x168>)
 800272a:	f7fe fc8b 	bl	8001044 <Lcd_string>

		//get default date and time
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800272e:	2200      	movs	r2, #0
 8002730:	493f      	ldr	r1, [pc, #252]	; (8002830 <change_lcd_display_mode+0x18c>)
 8002732:	4840      	ldr	r0, [pc, #256]	; (8002834 <change_lcd_display_mode+0x190>)
 8002734:	f003 fbdc 	bl	8005ef0 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN) ;
 8002738:	2200      	movs	r2, #0
 800273a:	493f      	ldr	r1, [pc, #252]	; (8002838 <change_lcd_display_mode+0x194>)
 800273c:	483d      	ldr	r0, [pc, #244]	; (8002834 <change_lcd_display_mode+0x190>)
 800273e:	f003 fcb9 	bl	80060b4 <HAL_RTC_GetDate>

		snprintf(g_date, sizeof(g_date),"%02d/%02d/20%02d",sDate.Date, sDate.Month,sDate.Year);
 8002742:	4b3d      	ldr	r3, [pc, #244]	; (8002838 <change_lcd_display_mode+0x194>)
 8002744:	789b      	ldrb	r3, [r3, #2]
 8002746:	4619      	mov	r1, r3
 8002748:	4b3b      	ldr	r3, [pc, #236]	; (8002838 <change_lcd_display_mode+0x194>)
 800274a:	785b      	ldrb	r3, [r3, #1]
 800274c:	461a      	mov	r2, r3
 800274e:	4b3a      	ldr	r3, [pc, #232]	; (8002838 <change_lcd_display_mode+0x194>)
 8002750:	78db      	ldrb	r3, [r3, #3]
 8002752:	9301      	str	r3, [sp, #4]
 8002754:	9200      	str	r2, [sp, #0]
 8002756:	460b      	mov	r3, r1
 8002758:	4a38      	ldr	r2, [pc, #224]	; (800283c <change_lcd_display_mode+0x198>)
 800275a:	210b      	movs	r1, #11
 800275c:	4838      	ldr	r0, [pc, #224]	; (8002840 <change_lcd_display_mode+0x19c>)
 800275e:	f006 fc9b 	bl	8009098 <sniprintf>
		snprintf(g_time, sizeof(g_time),"%02d:%02d:%02d",sTime.Hours, sTime.Minutes, sTime.Seconds);
 8002762:	4b33      	ldr	r3, [pc, #204]	; (8002830 <change_lcd_display_mode+0x18c>)
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	4619      	mov	r1, r3
 8002768:	4b31      	ldr	r3, [pc, #196]	; (8002830 <change_lcd_display_mode+0x18c>)
 800276a:	785b      	ldrb	r3, [r3, #1]
 800276c:	461a      	mov	r2, r3
 800276e:	4b30      	ldr	r3, [pc, #192]	; (8002830 <change_lcd_display_mode+0x18c>)
 8002770:	789b      	ldrb	r3, [r3, #2]
 8002772:	9301      	str	r3, [sp, #4]
 8002774:	9200      	str	r2, [sp, #0]
 8002776:	460b      	mov	r3, r1
 8002778:	4a32      	ldr	r2, [pc, #200]	; (8002844 <change_lcd_display_mode+0x1a0>)
 800277a:	2109      	movs	r1, #9
 800277c:	4832      	ldr	r0, [pc, #200]	; (8002848 <change_lcd_display_mode+0x1a4>)
 800277e:	f006 fc8b 	bl	8009098 <sniprintf>

	}


	//dont change lcd modes when updating the RTC
	if(g_update_RTC ==0){
 8002782:	4b32      	ldr	r3, [pc, #200]	; (800284c <change_lcd_display_mode+0x1a8>)
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d102      	bne.n	8002790 <change_lcd_display_mode+0xec>
		lcd_display_mode_change_on_button_press() ;
 800278a:	f000 f8ab 	bl	80028e4 <lcd_display_mode_change_on_button_press>
 800278e:	e006      	b.n	800279e <change_lcd_display_mode+0xfa>

	}
	else{
		if(g_left_button_pressed == 1){
 8002790:	4b2f      	ldr	r3, [pc, #188]	; (8002850 <change_lcd_display_mode+0x1ac>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d102      	bne.n	800279e <change_lcd_display_mode+0xfa>
			g_left_button_pressed = 0 ; //if left button pressed when updating the RTC parameteers
 8002798:	4b2d      	ldr	r3, [pc, #180]	; (8002850 <change_lcd_display_mode+0x1ac>)
 800279a:	2200      	movs	r2, #0
 800279c:	701a      	strb	r2, [r3, #0]
		}
	}


	if(display_result == 1){
 800279e:	4b2d      	ldr	r3, [pc, #180]	; (8002854 <change_lcd_display_mode+0x1b0>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d120      	bne.n	80027e8 <change_lcd_display_mode+0x144>
		display_result = 0;
 80027a6:	4b2b      	ldr	r3, [pc, #172]	; (8002854 <change_lcd_display_mode+0x1b0>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	701a      	strb	r2, [r3, #0]


		if(g_lcd_mode == 2){//display mode 2: EN measurement
 80027ac:	4b16      	ldr	r3, [pc, #88]	; (8002808 <change_lcd_display_mode+0x164>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d105      	bne.n	80027c0 <change_lcd_display_mode+0x11c>
			display_result = 0; //display contents once only
 80027b4:	4b27      	ldr	r3, [pc, #156]	; (8002854 <change_lcd_display_mode+0x1b0>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	701a      	strb	r2, [r3, #0]

			lcd_Mode_2() ;
 80027ba:	f7ff fedf 	bl	800257c <lcd_Mode_2>
	else if(display_result ==0 && g_lcd_mode == 4 ){
		//change to default mode 1 in the beginning
		change_between_dispplay_modes();
	}

}
 80027be:	e01d      	b.n	80027fc <change_lcd_display_mode+0x158>
		else if(g_lcd_mode == 1 ){//disply mode 1: SP measurements
 80027c0:	4b11      	ldr	r3, [pc, #68]	; (8002808 <change_lcd_display_mode+0x164>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d105      	bne.n	80027d4 <change_lcd_display_mode+0x130>
			display_result = 0 ; //display content only once
 80027c8:	4b22      	ldr	r3, [pc, #136]	; (8002854 <change_lcd_display_mode+0x1b0>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	701a      	strb	r2, [r3, #0]
			lcd_Mode_1() ;
 80027ce:	f7ff fe85 	bl	80024dc <lcd_Mode_1>
}
 80027d2:	e013      	b.n	80027fc <change_lcd_display_mode+0x158>
			if(g_lcd_mode == 3){ //display mode 3: RTC
 80027d4:	4b0c      	ldr	r3, [pc, #48]	; (8002808 <change_lcd_display_mode+0x164>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2b03      	cmp	r3, #3
 80027da:	d10f      	bne.n	80027fc <change_lcd_display_mode+0x158>
				display_result = 0 ; //display content only once
 80027dc:	4b1d      	ldr	r3, [pc, #116]	; (8002854 <change_lcd_display_mode+0x1b0>)
 80027de:	2200      	movs	r2, #0
 80027e0:	701a      	strb	r2, [r3, #0]
				lcd_Mode_3();
 80027e2:	f7ff ff09 	bl	80025f8 <lcd_Mode_3>
}
 80027e6:	e009      	b.n	80027fc <change_lcd_display_mode+0x158>
	else if(display_result ==0 && g_lcd_mode == 4 ){
 80027e8:	4b1a      	ldr	r3, [pc, #104]	; (8002854 <change_lcd_display_mode+0x1b0>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d105      	bne.n	80027fc <change_lcd_display_mode+0x158>
 80027f0:	4b05      	ldr	r3, [pc, #20]	; (8002808 <change_lcd_display_mode+0x164>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2b04      	cmp	r3, #4
 80027f6:	d101      	bne.n	80027fc <change_lcd_display_mode+0x158>
		change_between_dispplay_modes();
 80027f8:	f000 f82e 	bl	8002858 <change_between_dispplay_modes>
}
 80027fc:	bf00      	nop
 80027fe:	46bd      	mov	sp, r7
 8002800:	bdb0      	pop	{r4, r5, r7, pc}
 8002802:	bf00      	nop
 8002804:	20000014 	.word	0x20000014
 8002808:	200004ce 	.word	0x200004ce
 800280c:	200004d0 	.word	0x200004d0
 8002810:	2000040c 	.word	0x2000040c
 8002814:	2000040e 	.word	0x2000040e
 8002818:	0800c448 	.word	0x0800c448
 800281c:	20000434 	.word	0x20000434
 8002820:	20000410 	.word	0x20000410
 8002824:	20000418 	.word	0x20000418
 8002828:	0800c45c 	.word	0x0800c45c
 800282c:	2000045c 	.word	0x2000045c
 8002830:	200004e8 	.word	0x200004e8
 8002834:	20000274 	.word	0x20000274
 8002838:	200004fc 	.word	0x200004fc
 800283c:	0800c4b4 	.word	0x0800c4b4
 8002840:	20000504 	.word	0x20000504
 8002844:	0800c4c8 	.word	0x0800c4c8
 8002848:	20000510 	.word	0x20000510
 800284c:	20000500 	.word	0x20000500
 8002850:	20000548 	.word	0x20000548
 8002854:	200004cf 	.word	0x200004cf

08002858 <change_between_dispplay_modes>:

uint32_t time_passed_between_mode = 0 ;
uint8_t display_mode_x = 2; //start at mode 2

void change_between_dispplay_modes(){
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0

	if(HAL_GetTick()- time_passed_between_mode >= 2000 && display_mode_x == 1){
 800285c:	f001 fcf6 	bl	800424c <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	4b1e      	ldr	r3, [pc, #120]	; (80028dc <change_between_dispplay_modes+0x84>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800286c:	d309      	bcc.n	8002882 <change_between_dispplay_modes+0x2a>
 800286e:	4b1c      	ldr	r3, [pc, #112]	; (80028e0 <change_between_dispplay_modes+0x88>)
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d105      	bne.n	8002882 <change_between_dispplay_modes+0x2a>
		display_mode_x = 2 ;
 8002876:	4b1a      	ldr	r3, [pc, #104]	; (80028e0 <change_between_dispplay_modes+0x88>)
 8002878:	2202      	movs	r2, #2
 800287a:	701a      	strb	r2, [r3, #0]
		lcd_Mode_1() ;
 800287c:	f7ff fe2e 	bl	80024dc <lcd_Mode_1>
 8002880:	e011      	b.n	80028a6 <change_between_dispplay_modes+0x4e>

	}

	else if(HAL_GetTick()- time_passed_between_mode >=4000 && display_mode_x == 2){
 8002882:	f001 fce3 	bl	800424c <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	4b14      	ldr	r3, [pc, #80]	; (80028dc <change_between_dispplay_modes+0x84>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8002892:	d308      	bcc.n	80028a6 <change_between_dispplay_modes+0x4e>
 8002894:	4b12      	ldr	r3, [pc, #72]	; (80028e0 <change_between_dispplay_modes+0x88>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	2b02      	cmp	r3, #2
 800289a:	d104      	bne.n	80028a6 <change_between_dispplay_modes+0x4e>
		display_mode_x = 3 ;
 800289c:	4b10      	ldr	r3, [pc, #64]	; (80028e0 <change_between_dispplay_modes+0x88>)
 800289e:	2203      	movs	r2, #3
 80028a0:	701a      	strb	r2, [r3, #0]
		lcd_Mode_2();
 80028a2:	f7ff fe6b 	bl	800257c <lcd_Mode_2>

	}

	if(HAL_GetTick()- time_passed_between_mode >=6000 && display_mode_x == 3){
 80028a6:	f001 fcd1 	bl	800424c <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <change_between_dispplay_modes+0x84>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	f241 726f 	movw	r2, #5999	; 0x176f
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d90d      	bls.n	80028d6 <change_between_dispplay_modes+0x7e>
 80028ba:	4b09      	ldr	r3, [pc, #36]	; (80028e0 <change_between_dispplay_modes+0x88>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b03      	cmp	r3, #3
 80028c0:	d109      	bne.n	80028d6 <change_between_dispplay_modes+0x7e>
		display_mode_x= 1;
 80028c2:	4b07      	ldr	r3, [pc, #28]	; (80028e0 <change_between_dispplay_modes+0x88>)
 80028c4:	2201      	movs	r2, #1
 80028c6:	701a      	strb	r2, [r3, #0]
		time_passed_between_mode = HAL_GetTick() ;
 80028c8:	f001 fcc0 	bl	800424c <HAL_GetTick>
 80028cc:	4603      	mov	r3, r0
 80028ce:	4a03      	ldr	r2, [pc, #12]	; (80028dc <change_between_dispplay_modes+0x84>)
 80028d0:	6013      	str	r3, [r2, #0]
		lcd_Mode_3() ;
 80028d2:	f7ff fe91 	bl	80025f8 <lcd_Mode_3>

	}

}
 80028d6:	bf00      	nop
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	20000544 	.word	0x20000544
 80028e0:	20000032 	.word	0x20000032

080028e4 <lcd_display_mode_change_on_button_press>:
/**
 * This function works to change the LCD display modes when the left button is pressed
 */
void lcd_display_mode_change_on_button_press(){
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0

	//update state based on button press - DONT UPDATE ANYS STATES WHILE MEASURING
	if(g_left_button_pressed == 1 && g_EN_measure_LCD_display ==0 && g_SP_measure_LCD_diplay ==0 && g_SP_measure !=1 && g_EN_measure !=1){
 80028e8:	4b36      	ldr	r3, [pc, #216]	; (80029c4 <lcd_display_mode_change_on_button_press+0xe0>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d123      	bne.n	8002938 <lcd_display_mode_change_on_button_press+0x54>
 80028f0:	4b35      	ldr	r3, [pc, #212]	; (80029c8 <lcd_display_mode_change_on_button_press+0xe4>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d11f      	bne.n	8002938 <lcd_display_mode_change_on_button_press+0x54>
 80028f8:	4b34      	ldr	r3, [pc, #208]	; (80029cc <lcd_display_mode_change_on_button_press+0xe8>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d11b      	bne.n	8002938 <lcd_display_mode_change_on_button_press+0x54>
 8002900:	4b33      	ldr	r3, [pc, #204]	; (80029d0 <lcd_display_mode_change_on_button_press+0xec>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d017      	beq.n	8002938 <lcd_display_mode_change_on_button_press+0x54>
 8002908:	4b32      	ldr	r3, [pc, #200]	; (80029d4 <lcd_display_mode_change_on_button_press+0xf0>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d013      	beq.n	8002938 <lcd_display_mode_change_on_button_press+0x54>

		//display/update lcd results
		display_result= 1 ;
 8002910:	4b31      	ldr	r3, [pc, #196]	; (80029d8 <lcd_display_mode_change_on_button_press+0xf4>)
 8002912:	2201      	movs	r2, #1
 8002914:	701a      	strb	r2, [r3, #0]

		g_left_button_pressed = 0;
 8002916:	4b2b      	ldr	r3, [pc, #172]	; (80029c4 <lcd_display_mode_change_on_button_press+0xe0>)
 8002918:	2200      	movs	r2, #0
 800291a:	701a      	strb	r2, [r3, #0]
		g_lcd_mode ++;
 800291c:	4b2f      	ldr	r3, [pc, #188]	; (80029dc <lcd_display_mode_change_on_button_press+0xf8>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	3301      	adds	r3, #1
 8002922:	b2da      	uxtb	r2, r3
 8002924:	4b2d      	ldr	r3, [pc, #180]	; (80029dc <lcd_display_mode_change_on_button_press+0xf8>)
 8002926:	701a      	strb	r2, [r3, #0]

		//cycles between the mode
		if(g_lcd_mode>4){
 8002928:	4b2c      	ldr	r3, [pc, #176]	; (80029dc <lcd_display_mode_change_on_button_press+0xf8>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b04      	cmp	r3, #4
 800292e:	d944      	bls.n	80029ba <lcd_display_mode_change_on_button_press+0xd6>
			g_lcd_mode = 1 ;
 8002930:	4b2a      	ldr	r3, [pc, #168]	; (80029dc <lcd_display_mode_change_on_button_press+0xf8>)
 8002932:	2201      	movs	r2, #1
 8002934:	701a      	strb	r2, [r3, #0]
		if(g_lcd_mode>4){
 8002936:	e040      	b.n	80029ba <lcd_display_mode_change_on_button_press+0xd6>
		}
	}

	//update lcd state based on  EN stop command
	else if(g_left_button_pressed == 0 && g_EN_measure_LCD_display == 1 && g_SP_measure_LCD_diplay ==0  && g_SP_measure !=1 && g_EN_measure !=1 ){
 8002938:	4b22      	ldr	r3, [pc, #136]	; (80029c4 <lcd_display_mode_change_on_button_press+0xe0>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d119      	bne.n	8002974 <lcd_display_mode_change_on_button_press+0x90>
 8002940:	4b21      	ldr	r3, [pc, #132]	; (80029c8 <lcd_display_mode_change_on_button_press+0xe4>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d115      	bne.n	8002974 <lcd_display_mode_change_on_button_press+0x90>
 8002948:	4b20      	ldr	r3, [pc, #128]	; (80029cc <lcd_display_mode_change_on_button_press+0xe8>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d111      	bne.n	8002974 <lcd_display_mode_change_on_button_press+0x90>
 8002950:	4b1f      	ldr	r3, [pc, #124]	; (80029d0 <lcd_display_mode_change_on_button_press+0xec>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d00d      	beq.n	8002974 <lcd_display_mode_change_on_button_press+0x90>
 8002958:	4b1e      	ldr	r3, [pc, #120]	; (80029d4 <lcd_display_mode_change_on_button_press+0xf0>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d009      	beq.n	8002974 <lcd_display_mode_change_on_button_press+0x90>
		g_EN_measure_LCD_display = 0 ;
 8002960:	4b19      	ldr	r3, [pc, #100]	; (80029c8 <lcd_display_mode_change_on_button_press+0xe4>)
 8002962:	2200      	movs	r2, #0
 8002964:	701a      	strb	r2, [r3, #0]

		g_lcd_mode = 2; //display EN measurements
 8002966:	4b1d      	ldr	r3, [pc, #116]	; (80029dc <lcd_display_mode_change_on_button_press+0xf8>)
 8002968:	2202      	movs	r2, #2
 800296a:	701a      	strb	r2, [r3, #0]

		//display/update lcd results
		display_result= 1 ;
 800296c:	4b1a      	ldr	r3, [pc, #104]	; (80029d8 <lcd_display_mode_change_on_button_press+0xf4>)
 800296e:	2201      	movs	r2, #1
 8002970:	701a      	strb	r2, [r3, #0]
 8002972:	e022      	b.n	80029ba <lcd_display_mode_change_on_button_press+0xd6>
	}

	//update LCD based on SP command
	else if(g_left_button_pressed ==0 && g_EN_measure_LCD_display== 0 && g_SP_measure_LCD_diplay== 1  && g_SP_measure !=1 && g_EN_measure !=1){
 8002974:	4b13      	ldr	r3, [pc, #76]	; (80029c4 <lcd_display_mode_change_on_button_press+0xe0>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d119      	bne.n	80029b0 <lcd_display_mode_change_on_button_press+0xcc>
 800297c:	4b12      	ldr	r3, [pc, #72]	; (80029c8 <lcd_display_mode_change_on_button_press+0xe4>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d115      	bne.n	80029b0 <lcd_display_mode_change_on_button_press+0xcc>
 8002984:	4b11      	ldr	r3, [pc, #68]	; (80029cc <lcd_display_mode_change_on_button_press+0xe8>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d111      	bne.n	80029b0 <lcd_display_mode_change_on_button_press+0xcc>
 800298c:	4b10      	ldr	r3, [pc, #64]	; (80029d0 <lcd_display_mode_change_on_button_press+0xec>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d00d      	beq.n	80029b0 <lcd_display_mode_change_on_button_press+0xcc>
 8002994:	4b0f      	ldr	r3, [pc, #60]	; (80029d4 <lcd_display_mode_change_on_button_press+0xf0>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d009      	beq.n	80029b0 <lcd_display_mode_change_on_button_press+0xcc>
		g_SP_measure_LCD_diplay =0;
 800299c:	4b0b      	ldr	r3, [pc, #44]	; (80029cc <lcd_display_mode_change_on_button_press+0xe8>)
 800299e:	2200      	movs	r2, #0
 80029a0:	701a      	strb	r2, [r3, #0]

		g_lcd_mode = 1; //display SP measurements
 80029a2:	4b0e      	ldr	r3, [pc, #56]	; (80029dc <lcd_display_mode_change_on_button_press+0xf8>)
 80029a4:	2201      	movs	r2, #1
 80029a6:	701a      	strb	r2, [r3, #0]

		//display/update lcd results
		display_result= 1 ;
 80029a8:	4b0b      	ldr	r3, [pc, #44]	; (80029d8 <lcd_display_mode_change_on_button_press+0xf4>)
 80029aa:	2201      	movs	r2, #1
 80029ac:	701a      	strb	r2, [r3, #0]
 80029ae:	e004      	b.n	80029ba <lcd_display_mode_change_on_button_press+0xd6>
	}

	//otherwise dont update display maode
	else{
		g_lcd_mode = g_lcd_mode ;
 80029b0:	4b0a      	ldr	r3, [pc, #40]	; (80029dc <lcd_display_mode_change_on_button_press+0xf8>)
 80029b2:	781a      	ldrb	r2, [r3, #0]
 80029b4:	4b09      	ldr	r3, [pc, #36]	; (80029dc <lcd_display_mode_change_on_button_press+0xf8>)
 80029b6:	701a      	strb	r2, [r3, #0]
	}

}
 80029b8:	bf00      	nop
 80029ba:	bf00      	nop
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	20000548 	.word	0x20000548
 80029c8:	20000484 	.word	0x20000484
 80029cc:	2000048f 	.word	0x2000048f
 80029d0:	2000048e 	.word	0x2000048e
 80029d4:	20000483 	.word	0x20000483
 80029d8:	200004cf 	.word	0x200004cf
 80029dc:	200004ce 	.word	0x200004ce

080029e0 <RTC_date_and_time_update>:
 *The system is designed such that until all the parameters are set ,no other state is execessible.
 *Once the Menu state is entered. It can only be exited on when the left button is pressed. This restores normal system state functionality
 *The top and bottom measurements can be used to update /start or stop the measurement sequence
 */

void RTC_date_and_time_update(uint8_t paramx){
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af02      	add	r7, sp, #8
 80029e6:	4603      	mov	r3, r0
 80029e8:	71fb      	strb	r3, [r7, #7]

	//IF UPDATING RTC VALUES - do not use top button and bottom button for measurement sequence

	if(paramx == 1){ //update date
 80029ea:	79fb      	ldrb	r3, [r7, #7]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d16d      	bne.n	8002acc <RTC_date_and_time_update+0xec>

		//top button pressed - increment date
		if(g_top_button_pressed== 1){
 80029f0:	4b6f      	ldr	r3, [pc, #444]	; (8002bb0 <RTC_date_and_time_update+0x1d0>)
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d131      	bne.n	8002a5c <RTC_date_and_time_update+0x7c>
			sDate.Date++ ;
 80029f8:	4b6e      	ldr	r3, [pc, #440]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 80029fa:	789b      	ldrb	r3, [r3, #2]
 80029fc:	3301      	adds	r3, #1
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	4b6c      	ldr	r3, [pc, #432]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 8002a02:	709a      	strb	r2, [r3, #2]

			//oveflow
			if(sDate.Date > 30){
 8002a04:	4b6b      	ldr	r3, [pc, #428]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 8002a06:	789b      	ldrb	r3, [r3, #2]
 8002a08:	2b1e      	cmp	r3, #30
 8002a0a:	d902      	bls.n	8002a12 <RTC_date_and_time_update+0x32>
				sDate.Date = 1 ;
 8002a0c:	4b69      	ldr	r3, [pc, #420]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 8002a0e:	2201      	movs	r2, #1
 8002a10:	709a      	strb	r2, [r3, #2]
			}

			g_top_button_pressed =0 ;
 8002a12:	4b67      	ldr	r3, [pc, #412]	; (8002bb0 <RTC_date_and_time_update+0x1d0>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	701a      	strb	r2, [r3, #0]

			//display date - first row
			snprintf(g_date, sizeof(g_date),"%02d/%02d/20%02d",sDate.Date, sDate.Month,sDate.Year);
 8002a18:	4b66      	ldr	r3, [pc, #408]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 8002a1a:	789b      	ldrb	r3, [r3, #2]
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4b65      	ldr	r3, [pc, #404]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 8002a20:	785b      	ldrb	r3, [r3, #1]
 8002a22:	461a      	mov	r2, r3
 8002a24:	4b63      	ldr	r3, [pc, #396]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 8002a26:	78db      	ldrb	r3, [r3, #3]
 8002a28:	9301      	str	r3, [sp, #4]
 8002a2a:	9200      	str	r2, [sp, #0]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	4a62      	ldr	r2, [pc, #392]	; (8002bb8 <RTC_date_and_time_update+0x1d8>)
 8002a30:	210b      	movs	r1, #11
 8002a32:	4862      	ldr	r0, [pc, #392]	; (8002bbc <RTC_date_and_time_update+0x1dc>)
 8002a34:	f006 fb30 	bl	8009098 <sniprintf>
			Lcd_cursor(&lcd, 0, 0) ;
 8002a38:	2200      	movs	r2, #0
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	4860      	ldr	r0, [pc, #384]	; (8002bc0 <RTC_date_and_time_update+0x1e0>)
 8002a3e:	f7fe fb21 	bl	8001084 <Lcd_cursor>
			Lcd_string(&lcd, g_date);
 8002a42:	495e      	ldr	r1, [pc, #376]	; (8002bbc <RTC_date_and_time_update+0x1dc>)
 8002a44:	485e      	ldr	r0, [pc, #376]	; (8002bc0 <RTC_date_and_time_update+0x1e0>)
 8002a46:	f7fe fafd 	bl	8001044 <Lcd_string>

			Lcd_cursor(&lcd, 1, 0	) ;
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	485c      	ldr	r0, [pc, #368]	; (8002bc0 <RTC_date_and_time_update+0x1e0>)
 8002a50:	f7fe fb18 	bl	8001084 <Lcd_cursor>
			Lcd_string(&lcd, g_time);
 8002a54:	495b      	ldr	r1, [pc, #364]	; (8002bc4 <RTC_date_and_time_update+0x1e4>)
 8002a56:	485a      	ldr	r0, [pc, #360]	; (8002bc0 <RTC_date_and_time_update+0x1e0>)
 8002a58:	f7fe faf4 	bl	8001044 <Lcd_string>


		}

		//bottom button press -decrement date
		if(g_bottom_button_pressed== 1){
 8002a5c:	4b5a      	ldr	r3, [pc, #360]	; (8002bc8 <RTC_date_and_time_update+0x1e8>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	f040 82c2 	bne.w	8002fea <RTC_date_and_time_update+0x60a>
			sDate.Date-- ;
 8002a66:	4b53      	ldr	r3, [pc, #332]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 8002a68:	789b      	ldrb	r3, [r3, #2]
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	b2da      	uxtb	r2, r3
 8002a6e:	4b51      	ldr	r3, [pc, #324]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 8002a70:	709a      	strb	r2, [r3, #2]

			//oveflow
			if(sDate.Date < 1){
 8002a72:	4b50      	ldr	r3, [pc, #320]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 8002a74:	789b      	ldrb	r3, [r3, #2]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d102      	bne.n	8002a80 <RTC_date_and_time_update+0xa0>
				sDate.Date = 31 ;
 8002a7a:	4b4e      	ldr	r3, [pc, #312]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 8002a7c:	221f      	movs	r2, #31
 8002a7e:	709a      	strb	r2, [r3, #2]
			}

			//display date - first row
			snprintf(g_date, sizeof(g_date),"%02d/%02d/20%02d",sDate.Date, sDate.Month,sDate.Year);
 8002a80:	4b4c      	ldr	r3, [pc, #304]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 8002a82:	789b      	ldrb	r3, [r3, #2]
 8002a84:	4619      	mov	r1, r3
 8002a86:	4b4b      	ldr	r3, [pc, #300]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 8002a88:	785b      	ldrb	r3, [r3, #1]
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	4b49      	ldr	r3, [pc, #292]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 8002a8e:	78db      	ldrb	r3, [r3, #3]
 8002a90:	9301      	str	r3, [sp, #4]
 8002a92:	9200      	str	r2, [sp, #0]
 8002a94:	460b      	mov	r3, r1
 8002a96:	4a48      	ldr	r2, [pc, #288]	; (8002bb8 <RTC_date_and_time_update+0x1d8>)
 8002a98:	210b      	movs	r1, #11
 8002a9a:	4848      	ldr	r0, [pc, #288]	; (8002bbc <RTC_date_and_time_update+0x1dc>)
 8002a9c:	f006 fafc 	bl	8009098 <sniprintf>
			Lcd_cursor(&lcd, 0, 0) ;
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	4846      	ldr	r0, [pc, #280]	; (8002bc0 <RTC_date_and_time_update+0x1e0>)
 8002aa6:	f7fe faed 	bl	8001084 <Lcd_cursor>
			Lcd_string(&lcd, g_date);
 8002aaa:	4944      	ldr	r1, [pc, #272]	; (8002bbc <RTC_date_and_time_update+0x1dc>)
 8002aac:	4844      	ldr	r0, [pc, #272]	; (8002bc0 <RTC_date_and_time_update+0x1e0>)
 8002aae:	f7fe fac9 	bl	8001044 <Lcd_string>

			Lcd_cursor(&lcd, 1, 0) ;
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	4842      	ldr	r0, [pc, #264]	; (8002bc0 <RTC_date_and_time_update+0x1e0>)
 8002ab8:	f7fe fae4 	bl	8001084 <Lcd_cursor>
			Lcd_string(&lcd, g_time);
 8002abc:	4941      	ldr	r1, [pc, #260]	; (8002bc4 <RTC_date_and_time_update+0x1e4>)
 8002abe:	4840      	ldr	r0, [pc, #256]	; (8002bc0 <RTC_date_and_time_update+0x1e0>)
 8002ac0:	f7fe fac0 	bl	8001044 <Lcd_string>


			g_bottom_button_pressed =0 ;
 8002ac4:	4b40      	ldr	r3, [pc, #256]	; (8002bc8 <RTC_date_and_time_update+0x1e8>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	701a      	strb	r2, [r3, #0]
		}

	}


}
 8002aca:	e28e      	b.n	8002fea <RTC_date_and_time_update+0x60a>
	else if(paramx == 2){ //update month
 8002acc:	79fb      	ldrb	r3, [r7, #7]
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d17c      	bne.n	8002bcc <RTC_date_and_time_update+0x1ec>
		if(g_top_button_pressed== 1){
 8002ad2:	4b37      	ldr	r3, [pc, #220]	; (8002bb0 <RTC_date_and_time_update+0x1d0>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d131      	bne.n	8002b3e <RTC_date_and_time_update+0x15e>
			sDate.Month++ ;
 8002ada:	4b36      	ldr	r3, [pc, #216]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 8002adc:	785b      	ldrb	r3, [r3, #1]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	b2da      	uxtb	r2, r3
 8002ae2:	4b34      	ldr	r3, [pc, #208]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 8002ae4:	705a      	strb	r2, [r3, #1]
			if(sDate.Month > 12){
 8002ae6:	4b33      	ldr	r3, [pc, #204]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 8002ae8:	785b      	ldrb	r3, [r3, #1]
 8002aea:	2b0c      	cmp	r3, #12
 8002aec:	d902      	bls.n	8002af4 <RTC_date_and_time_update+0x114>
				sDate.Month = 1 ;
 8002aee:	4b31      	ldr	r3, [pc, #196]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 8002af0:	2201      	movs	r2, #1
 8002af2:	705a      	strb	r2, [r3, #1]
			snprintf(g_date, sizeof(g_date),"%02d/%02d/20%02d",sDate.Date, sDate.Month,sDate.Year);
 8002af4:	4b2f      	ldr	r3, [pc, #188]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 8002af6:	789b      	ldrb	r3, [r3, #2]
 8002af8:	4619      	mov	r1, r3
 8002afa:	4b2e      	ldr	r3, [pc, #184]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 8002afc:	785b      	ldrb	r3, [r3, #1]
 8002afe:	461a      	mov	r2, r3
 8002b00:	4b2c      	ldr	r3, [pc, #176]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 8002b02:	78db      	ldrb	r3, [r3, #3]
 8002b04:	9301      	str	r3, [sp, #4]
 8002b06:	9200      	str	r2, [sp, #0]
 8002b08:	460b      	mov	r3, r1
 8002b0a:	4a2b      	ldr	r2, [pc, #172]	; (8002bb8 <RTC_date_and_time_update+0x1d8>)
 8002b0c:	210b      	movs	r1, #11
 8002b0e:	482b      	ldr	r0, [pc, #172]	; (8002bbc <RTC_date_and_time_update+0x1dc>)
 8002b10:	f006 fac2 	bl	8009098 <sniprintf>
			Lcd_cursor(&lcd, 0, 0) ;
 8002b14:	2200      	movs	r2, #0
 8002b16:	2100      	movs	r1, #0
 8002b18:	4829      	ldr	r0, [pc, #164]	; (8002bc0 <RTC_date_and_time_update+0x1e0>)
 8002b1a:	f7fe fab3 	bl	8001084 <Lcd_cursor>
			Lcd_string(&lcd, g_date);
 8002b1e:	4927      	ldr	r1, [pc, #156]	; (8002bbc <RTC_date_and_time_update+0x1dc>)
 8002b20:	4827      	ldr	r0, [pc, #156]	; (8002bc0 <RTC_date_and_time_update+0x1e0>)
 8002b22:	f7fe fa8f 	bl	8001044 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0) ;
 8002b26:	2200      	movs	r2, #0
 8002b28:	2101      	movs	r1, #1
 8002b2a:	4825      	ldr	r0, [pc, #148]	; (8002bc0 <RTC_date_and_time_update+0x1e0>)
 8002b2c:	f7fe faaa 	bl	8001084 <Lcd_cursor>
			Lcd_string(&lcd, g_time);
 8002b30:	4924      	ldr	r1, [pc, #144]	; (8002bc4 <RTC_date_and_time_update+0x1e4>)
 8002b32:	4823      	ldr	r0, [pc, #140]	; (8002bc0 <RTC_date_and_time_update+0x1e0>)
 8002b34:	f7fe fa86 	bl	8001044 <Lcd_string>
			g_top_button_pressed =0 ;
 8002b38:	4b1d      	ldr	r3, [pc, #116]	; (8002bb0 <RTC_date_and_time_update+0x1d0>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	701a      	strb	r2, [r3, #0]
		if(g_bottom_button_pressed== 1){
 8002b3e:	4b22      	ldr	r3, [pc, #136]	; (8002bc8 <RTC_date_and_time_update+0x1e8>)
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	f040 8251 	bne.w	8002fea <RTC_date_and_time_update+0x60a>
			sDate.Month-- ;
 8002b48:	4b1a      	ldr	r3, [pc, #104]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 8002b4a:	785b      	ldrb	r3, [r3, #1]
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	b2da      	uxtb	r2, r3
 8002b50:	4b18      	ldr	r3, [pc, #96]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 8002b52:	705a      	strb	r2, [r3, #1]
			if(sDate.Month < 1){
 8002b54:	4b17      	ldr	r3, [pc, #92]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 8002b56:	785b      	ldrb	r3, [r3, #1]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d102      	bne.n	8002b62 <RTC_date_and_time_update+0x182>
				sDate.Month = 12 ;
 8002b5c:	4b15      	ldr	r3, [pc, #84]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 8002b5e:	220c      	movs	r2, #12
 8002b60:	705a      	strb	r2, [r3, #1]
			snprintf(g_date, sizeof(g_date),"%02d/%02d/20%02d",sDate.Date, sDate.Month,sDate.Year);
 8002b62:	4b14      	ldr	r3, [pc, #80]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 8002b64:	789b      	ldrb	r3, [r3, #2]
 8002b66:	4619      	mov	r1, r3
 8002b68:	4b12      	ldr	r3, [pc, #72]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 8002b6a:	785b      	ldrb	r3, [r3, #1]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	4b11      	ldr	r3, [pc, #68]	; (8002bb4 <RTC_date_and_time_update+0x1d4>)
 8002b70:	78db      	ldrb	r3, [r3, #3]
 8002b72:	9301      	str	r3, [sp, #4]
 8002b74:	9200      	str	r2, [sp, #0]
 8002b76:	460b      	mov	r3, r1
 8002b78:	4a0f      	ldr	r2, [pc, #60]	; (8002bb8 <RTC_date_and_time_update+0x1d8>)
 8002b7a:	210b      	movs	r1, #11
 8002b7c:	480f      	ldr	r0, [pc, #60]	; (8002bbc <RTC_date_and_time_update+0x1dc>)
 8002b7e:	f006 fa8b 	bl	8009098 <sniprintf>
			Lcd_cursor(&lcd, 0, 0) ;
 8002b82:	2200      	movs	r2, #0
 8002b84:	2100      	movs	r1, #0
 8002b86:	480e      	ldr	r0, [pc, #56]	; (8002bc0 <RTC_date_and_time_update+0x1e0>)
 8002b88:	f7fe fa7c 	bl	8001084 <Lcd_cursor>
			Lcd_string(&lcd, g_date);
 8002b8c:	490b      	ldr	r1, [pc, #44]	; (8002bbc <RTC_date_and_time_update+0x1dc>)
 8002b8e:	480c      	ldr	r0, [pc, #48]	; (8002bc0 <RTC_date_and_time_update+0x1e0>)
 8002b90:	f7fe fa58 	bl	8001044 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0) ;
 8002b94:	2200      	movs	r2, #0
 8002b96:	2101      	movs	r1, #1
 8002b98:	4809      	ldr	r0, [pc, #36]	; (8002bc0 <RTC_date_and_time_update+0x1e0>)
 8002b9a:	f7fe fa73 	bl	8001084 <Lcd_cursor>
			Lcd_string(&lcd, g_time);
 8002b9e:	4909      	ldr	r1, [pc, #36]	; (8002bc4 <RTC_date_and_time_update+0x1e4>)
 8002ba0:	4807      	ldr	r0, [pc, #28]	; (8002bc0 <RTC_date_and_time_update+0x1e0>)
 8002ba2:	f7fe fa4f 	bl	8001044 <Lcd_string>
			g_bottom_button_pressed =0 ;
 8002ba6:	4b08      	ldr	r3, [pc, #32]	; (8002bc8 <RTC_date_and_time_update+0x1e8>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	701a      	strb	r2, [r3, #0]
}
 8002bac:	e21d      	b.n	8002fea <RTC_date_and_time_update+0x60a>
 8002bae:	bf00      	nop
 8002bb0:	2000054a 	.word	0x2000054a
 8002bb4:	200004fc 	.word	0x200004fc
 8002bb8:	0800c4b4 	.word	0x0800c4b4
 8002bbc:	20000504 	.word	0x20000504
 8002bc0:	200004d0 	.word	0x200004d0
 8002bc4:	20000510 	.word	0x20000510
 8002bc8:	2000054b 	.word	0x2000054b
	else if(paramx == 3){ //update year -
 8002bcc:	79fb      	ldrb	r3, [r7, #7]
 8002bce:	2b03      	cmp	r3, #3
 8002bd0:	d16d      	bne.n	8002cae <RTC_date_and_time_update+0x2ce>
		if(g_top_button_pressed== 1){
 8002bd2:	4b6f      	ldr	r3, [pc, #444]	; (8002d90 <RTC_date_and_time_update+0x3b0>)
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d131      	bne.n	8002c3e <RTC_date_and_time_update+0x25e>
			sDate.Year++ ;
 8002bda:	4b6e      	ldr	r3, [pc, #440]	; (8002d94 <RTC_date_and_time_update+0x3b4>)
 8002bdc:	78db      	ldrb	r3, [r3, #3]
 8002bde:	3301      	adds	r3, #1
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	4b6c      	ldr	r3, [pc, #432]	; (8002d94 <RTC_date_and_time_update+0x3b4>)
 8002be4:	70da      	strb	r2, [r3, #3]
			if(sDate.Year > 99){
 8002be6:	4b6b      	ldr	r3, [pc, #428]	; (8002d94 <RTC_date_and_time_update+0x3b4>)
 8002be8:	78db      	ldrb	r3, [r3, #3]
 8002bea:	2b63      	cmp	r3, #99	; 0x63
 8002bec:	d902      	bls.n	8002bf4 <RTC_date_and_time_update+0x214>
				sDate.Year = 0 ;
 8002bee:	4b69      	ldr	r3, [pc, #420]	; (8002d94 <RTC_date_and_time_update+0x3b4>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	70da      	strb	r2, [r3, #3]
			snprintf(g_date, sizeof(g_date),"%02d/%02d/20%02d",sDate.Date, sDate.Month,sDate.Year);
 8002bf4:	4b67      	ldr	r3, [pc, #412]	; (8002d94 <RTC_date_and_time_update+0x3b4>)
 8002bf6:	789b      	ldrb	r3, [r3, #2]
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4b66      	ldr	r3, [pc, #408]	; (8002d94 <RTC_date_and_time_update+0x3b4>)
 8002bfc:	785b      	ldrb	r3, [r3, #1]
 8002bfe:	461a      	mov	r2, r3
 8002c00:	4b64      	ldr	r3, [pc, #400]	; (8002d94 <RTC_date_and_time_update+0x3b4>)
 8002c02:	78db      	ldrb	r3, [r3, #3]
 8002c04:	9301      	str	r3, [sp, #4]
 8002c06:	9200      	str	r2, [sp, #0]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	4a63      	ldr	r2, [pc, #396]	; (8002d98 <RTC_date_and_time_update+0x3b8>)
 8002c0c:	210b      	movs	r1, #11
 8002c0e:	4863      	ldr	r0, [pc, #396]	; (8002d9c <RTC_date_and_time_update+0x3bc>)
 8002c10:	f006 fa42 	bl	8009098 <sniprintf>
			Lcd_cursor(&lcd, 0, 0) ;
 8002c14:	2200      	movs	r2, #0
 8002c16:	2100      	movs	r1, #0
 8002c18:	4861      	ldr	r0, [pc, #388]	; (8002da0 <RTC_date_and_time_update+0x3c0>)
 8002c1a:	f7fe fa33 	bl	8001084 <Lcd_cursor>
			Lcd_string(&lcd, g_date);
 8002c1e:	495f      	ldr	r1, [pc, #380]	; (8002d9c <RTC_date_and_time_update+0x3bc>)
 8002c20:	485f      	ldr	r0, [pc, #380]	; (8002da0 <RTC_date_and_time_update+0x3c0>)
 8002c22:	f7fe fa0f 	bl	8001044 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0) ;
 8002c26:	2200      	movs	r2, #0
 8002c28:	2101      	movs	r1, #1
 8002c2a:	485d      	ldr	r0, [pc, #372]	; (8002da0 <RTC_date_and_time_update+0x3c0>)
 8002c2c:	f7fe fa2a 	bl	8001084 <Lcd_cursor>
			Lcd_string(&lcd, g_time);
 8002c30:	495c      	ldr	r1, [pc, #368]	; (8002da4 <RTC_date_and_time_update+0x3c4>)
 8002c32:	485b      	ldr	r0, [pc, #364]	; (8002da0 <RTC_date_and_time_update+0x3c0>)
 8002c34:	f7fe fa06 	bl	8001044 <Lcd_string>
			g_top_button_pressed =0 ;
 8002c38:	4b55      	ldr	r3, [pc, #340]	; (8002d90 <RTC_date_and_time_update+0x3b0>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	701a      	strb	r2, [r3, #0]
		if(g_bottom_button_pressed== 1){
 8002c3e:	4b5a      	ldr	r3, [pc, #360]	; (8002da8 <RTC_date_and_time_update+0x3c8>)
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	f040 81d1 	bne.w	8002fea <RTC_date_and_time_update+0x60a>
			sDate.Year-- ;
 8002c48:	4b52      	ldr	r3, [pc, #328]	; (8002d94 <RTC_date_and_time_update+0x3b4>)
 8002c4a:	78db      	ldrb	r3, [r3, #3]
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	b2da      	uxtb	r2, r3
 8002c50:	4b50      	ldr	r3, [pc, #320]	; (8002d94 <RTC_date_and_time_update+0x3b4>)
 8002c52:	70da      	strb	r2, [r3, #3]
			if(sDate.Year < 1){
 8002c54:	4b4f      	ldr	r3, [pc, #316]	; (8002d94 <RTC_date_and_time_update+0x3b4>)
 8002c56:	78db      	ldrb	r3, [r3, #3]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d102      	bne.n	8002c62 <RTC_date_and_time_update+0x282>
				sDate.Year = 99 ;
 8002c5c:	4b4d      	ldr	r3, [pc, #308]	; (8002d94 <RTC_date_and_time_update+0x3b4>)
 8002c5e:	2263      	movs	r2, #99	; 0x63
 8002c60:	70da      	strb	r2, [r3, #3]
			snprintf(g_date, sizeof(g_date),"%02d/%02d/20%02d",sDate.Date, sDate.Month,sDate.Year);
 8002c62:	4b4c      	ldr	r3, [pc, #304]	; (8002d94 <RTC_date_and_time_update+0x3b4>)
 8002c64:	789b      	ldrb	r3, [r3, #2]
 8002c66:	4619      	mov	r1, r3
 8002c68:	4b4a      	ldr	r3, [pc, #296]	; (8002d94 <RTC_date_and_time_update+0x3b4>)
 8002c6a:	785b      	ldrb	r3, [r3, #1]
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	4b49      	ldr	r3, [pc, #292]	; (8002d94 <RTC_date_and_time_update+0x3b4>)
 8002c70:	78db      	ldrb	r3, [r3, #3]
 8002c72:	9301      	str	r3, [sp, #4]
 8002c74:	9200      	str	r2, [sp, #0]
 8002c76:	460b      	mov	r3, r1
 8002c78:	4a47      	ldr	r2, [pc, #284]	; (8002d98 <RTC_date_and_time_update+0x3b8>)
 8002c7a:	210b      	movs	r1, #11
 8002c7c:	4847      	ldr	r0, [pc, #284]	; (8002d9c <RTC_date_and_time_update+0x3bc>)
 8002c7e:	f006 fa0b 	bl	8009098 <sniprintf>
			Lcd_cursor(&lcd, 0, 0) ;
 8002c82:	2200      	movs	r2, #0
 8002c84:	2100      	movs	r1, #0
 8002c86:	4846      	ldr	r0, [pc, #280]	; (8002da0 <RTC_date_and_time_update+0x3c0>)
 8002c88:	f7fe f9fc 	bl	8001084 <Lcd_cursor>
			Lcd_string(&lcd, g_date);
 8002c8c:	4943      	ldr	r1, [pc, #268]	; (8002d9c <RTC_date_and_time_update+0x3bc>)
 8002c8e:	4844      	ldr	r0, [pc, #272]	; (8002da0 <RTC_date_and_time_update+0x3c0>)
 8002c90:	f7fe f9d8 	bl	8001044 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0) ;
 8002c94:	2200      	movs	r2, #0
 8002c96:	2101      	movs	r1, #1
 8002c98:	4841      	ldr	r0, [pc, #260]	; (8002da0 <RTC_date_and_time_update+0x3c0>)
 8002c9a:	f7fe f9f3 	bl	8001084 <Lcd_cursor>
			Lcd_string(&lcd, g_time);
 8002c9e:	4941      	ldr	r1, [pc, #260]	; (8002da4 <RTC_date_and_time_update+0x3c4>)
 8002ca0:	483f      	ldr	r0, [pc, #252]	; (8002da0 <RTC_date_and_time_update+0x3c0>)
 8002ca2:	f7fe f9cf 	bl	8001044 <Lcd_string>
			g_bottom_button_pressed =0 ;
 8002ca6:	4b40      	ldr	r3, [pc, #256]	; (8002da8 <RTC_date_and_time_update+0x3c8>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	701a      	strb	r2, [r3, #0]
}
 8002cac:	e19d      	b.n	8002fea <RTC_date_and_time_update+0x60a>
	else if(paramx == 4){//update hour
 8002cae:	79fb      	ldrb	r3, [r7, #7]
 8002cb0:	2b04      	cmp	r3, #4
 8002cb2:	d17f      	bne.n	8002db4 <RTC_date_and_time_update+0x3d4>
		if(g_top_button_pressed== 1){
 8002cb4:	4b36      	ldr	r3, [pc, #216]	; (8002d90 <RTC_date_and_time_update+0x3b0>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d131      	bne.n	8002d20 <RTC_date_and_time_update+0x340>
			sTime.Hours++ ;
 8002cbc:	4b3b      	ldr	r3, [pc, #236]	; (8002dac <RTC_date_and_time_update+0x3cc>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	b2da      	uxtb	r2, r3
 8002cc4:	4b39      	ldr	r3, [pc, #228]	; (8002dac <RTC_date_and_time_update+0x3cc>)
 8002cc6:	701a      	strb	r2, [r3, #0]
			if(sTime.Hours > 24){
 8002cc8:	4b38      	ldr	r3, [pc, #224]	; (8002dac <RTC_date_and_time_update+0x3cc>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	2b18      	cmp	r3, #24
 8002cce:	d902      	bls.n	8002cd6 <RTC_date_and_time_update+0x2f6>
				sTime.Hours = 1 ;
 8002cd0:	4b36      	ldr	r3, [pc, #216]	; (8002dac <RTC_date_and_time_update+0x3cc>)
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	701a      	strb	r2, [r3, #0]
			g_top_button_pressed =0 ;
 8002cd6:	4b2e      	ldr	r3, [pc, #184]	; (8002d90 <RTC_date_and_time_update+0x3b0>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	701a      	strb	r2, [r3, #0]
			Lcd_cursor(&lcd, 0, 0) ;
 8002cdc:	2200      	movs	r2, #0
 8002cde:	2100      	movs	r1, #0
 8002ce0:	482f      	ldr	r0, [pc, #188]	; (8002da0 <RTC_date_and_time_update+0x3c0>)
 8002ce2:	f7fe f9cf 	bl	8001084 <Lcd_cursor>
			Lcd_string(&lcd, g_date);
 8002ce6:	492d      	ldr	r1, [pc, #180]	; (8002d9c <RTC_date_and_time_update+0x3bc>)
 8002ce8:	482d      	ldr	r0, [pc, #180]	; (8002da0 <RTC_date_and_time_update+0x3c0>)
 8002cea:	f7fe f9ab 	bl	8001044 <Lcd_string>
			snprintf(g_time, sizeof(g_time),"%02d:%02d:%02d",sTime.Hours, sTime.Minutes, sTime.Seconds);
 8002cee:	4b2f      	ldr	r3, [pc, #188]	; (8002dac <RTC_date_and_time_update+0x3cc>)
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4b2d      	ldr	r3, [pc, #180]	; (8002dac <RTC_date_and_time_update+0x3cc>)
 8002cf6:	785b      	ldrb	r3, [r3, #1]
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	4b2c      	ldr	r3, [pc, #176]	; (8002dac <RTC_date_and_time_update+0x3cc>)
 8002cfc:	789b      	ldrb	r3, [r3, #2]
 8002cfe:	9301      	str	r3, [sp, #4]
 8002d00:	9200      	str	r2, [sp, #0]
 8002d02:	460b      	mov	r3, r1
 8002d04:	4a2a      	ldr	r2, [pc, #168]	; (8002db0 <RTC_date_and_time_update+0x3d0>)
 8002d06:	2109      	movs	r1, #9
 8002d08:	4826      	ldr	r0, [pc, #152]	; (8002da4 <RTC_date_and_time_update+0x3c4>)
 8002d0a:	f006 f9c5 	bl	8009098 <sniprintf>
			Lcd_cursor(&lcd, 1, 0) ;
 8002d0e:	2200      	movs	r2, #0
 8002d10:	2101      	movs	r1, #1
 8002d12:	4823      	ldr	r0, [pc, #140]	; (8002da0 <RTC_date_and_time_update+0x3c0>)
 8002d14:	f7fe f9b6 	bl	8001084 <Lcd_cursor>
			Lcd_string(&lcd, g_time);
 8002d18:	4922      	ldr	r1, [pc, #136]	; (8002da4 <RTC_date_and_time_update+0x3c4>)
 8002d1a:	4821      	ldr	r0, [pc, #132]	; (8002da0 <RTC_date_and_time_update+0x3c0>)
 8002d1c:	f7fe f992 	bl	8001044 <Lcd_string>
		if(g_bottom_button_pressed== 1){
 8002d20:	4b21      	ldr	r3, [pc, #132]	; (8002da8 <RTC_date_and_time_update+0x3c8>)
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	f040 8160 	bne.w	8002fea <RTC_date_and_time_update+0x60a>
			sTime.Hours-- ;
 8002d2a:	4b20      	ldr	r3, [pc, #128]	; (8002dac <RTC_date_and_time_update+0x3cc>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	b2da      	uxtb	r2, r3
 8002d32:	4b1e      	ldr	r3, [pc, #120]	; (8002dac <RTC_date_and_time_update+0x3cc>)
 8002d34:	701a      	strb	r2, [r3, #0]
			if(sTime.Hours < 1){
 8002d36:	4b1d      	ldr	r3, [pc, #116]	; (8002dac <RTC_date_and_time_update+0x3cc>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d102      	bne.n	8002d44 <RTC_date_and_time_update+0x364>
				sTime.Hours = 24 ;
 8002d3e:	4b1b      	ldr	r3, [pc, #108]	; (8002dac <RTC_date_and_time_update+0x3cc>)
 8002d40:	2218      	movs	r2, #24
 8002d42:	701a      	strb	r2, [r3, #0]
			Lcd_cursor(&lcd, 0, 0) ;
 8002d44:	2200      	movs	r2, #0
 8002d46:	2100      	movs	r1, #0
 8002d48:	4815      	ldr	r0, [pc, #84]	; (8002da0 <RTC_date_and_time_update+0x3c0>)
 8002d4a:	f7fe f99b 	bl	8001084 <Lcd_cursor>
			Lcd_string(&lcd, g_date);
 8002d4e:	4913      	ldr	r1, [pc, #76]	; (8002d9c <RTC_date_and_time_update+0x3bc>)
 8002d50:	4813      	ldr	r0, [pc, #76]	; (8002da0 <RTC_date_and_time_update+0x3c0>)
 8002d52:	f7fe f977 	bl	8001044 <Lcd_string>
			snprintf(g_time, sizeof(g_time),"%02d:%02d:%02d",sTime.Hours, sTime.Minutes, sTime.Seconds);
 8002d56:	4b15      	ldr	r3, [pc, #84]	; (8002dac <RTC_date_and_time_update+0x3cc>)
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	4b13      	ldr	r3, [pc, #76]	; (8002dac <RTC_date_and_time_update+0x3cc>)
 8002d5e:	785b      	ldrb	r3, [r3, #1]
 8002d60:	461a      	mov	r2, r3
 8002d62:	4b12      	ldr	r3, [pc, #72]	; (8002dac <RTC_date_and_time_update+0x3cc>)
 8002d64:	789b      	ldrb	r3, [r3, #2]
 8002d66:	9301      	str	r3, [sp, #4]
 8002d68:	9200      	str	r2, [sp, #0]
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	4a10      	ldr	r2, [pc, #64]	; (8002db0 <RTC_date_and_time_update+0x3d0>)
 8002d6e:	2109      	movs	r1, #9
 8002d70:	480c      	ldr	r0, [pc, #48]	; (8002da4 <RTC_date_and_time_update+0x3c4>)
 8002d72:	f006 f991 	bl	8009098 <sniprintf>
			Lcd_cursor(&lcd, 1, 0) ;
 8002d76:	2200      	movs	r2, #0
 8002d78:	2101      	movs	r1, #1
 8002d7a:	4809      	ldr	r0, [pc, #36]	; (8002da0 <RTC_date_and_time_update+0x3c0>)
 8002d7c:	f7fe f982 	bl	8001084 <Lcd_cursor>
			Lcd_string(&lcd, g_time);
 8002d80:	4908      	ldr	r1, [pc, #32]	; (8002da4 <RTC_date_and_time_update+0x3c4>)
 8002d82:	4807      	ldr	r0, [pc, #28]	; (8002da0 <RTC_date_and_time_update+0x3c0>)
 8002d84:	f7fe f95e 	bl	8001044 <Lcd_string>
			g_bottom_button_pressed =0 ;
 8002d88:	4b07      	ldr	r3, [pc, #28]	; (8002da8 <RTC_date_and_time_update+0x3c8>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	701a      	strb	r2, [r3, #0]
}
 8002d8e:	e12c      	b.n	8002fea <RTC_date_and_time_update+0x60a>
 8002d90:	2000054a 	.word	0x2000054a
 8002d94:	200004fc 	.word	0x200004fc
 8002d98:	0800c4b4 	.word	0x0800c4b4
 8002d9c:	20000504 	.word	0x20000504
 8002da0:	200004d0 	.word	0x200004d0
 8002da4:	20000510 	.word	0x20000510
 8002da8:	2000054b 	.word	0x2000054b
 8002dac:	200004e8 	.word	0x200004e8
 8002db0:	0800c4c8 	.word	0x0800c4c8
	else if(paramx ==5){//update minutes
 8002db4:	79fb      	ldrb	r3, [r7, #7]
 8002db6:	2b05      	cmp	r3, #5
 8002db8:	d16d      	bne.n	8002e96 <RTC_date_and_time_update+0x4b6>
		if(g_top_button_pressed== 1){
 8002dba:	4b8e      	ldr	r3, [pc, #568]	; (8002ff4 <RTC_date_and_time_update+0x614>)
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d131      	bne.n	8002e26 <RTC_date_and_time_update+0x446>
			sTime.Minutes++ ;
 8002dc2:	4b8d      	ldr	r3, [pc, #564]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002dc4:	785b      	ldrb	r3, [r3, #1]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	4b8b      	ldr	r3, [pc, #556]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002dcc:	705a      	strb	r2, [r3, #1]
			if(sTime.Minutes > 60){
 8002dce:	4b8a      	ldr	r3, [pc, #552]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002dd0:	785b      	ldrb	r3, [r3, #1]
 8002dd2:	2b3c      	cmp	r3, #60	; 0x3c
 8002dd4:	d902      	bls.n	8002ddc <RTC_date_and_time_update+0x3fc>
				sTime.Minutes = 1 ;
 8002dd6:	4b88      	ldr	r3, [pc, #544]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002dd8:	2201      	movs	r2, #1
 8002dda:	705a      	strb	r2, [r3, #1]
			Lcd_cursor(&lcd, 0, 0) ;
 8002ddc:	2200      	movs	r2, #0
 8002dde:	2100      	movs	r1, #0
 8002de0:	4886      	ldr	r0, [pc, #536]	; (8002ffc <RTC_date_and_time_update+0x61c>)
 8002de2:	f7fe f94f 	bl	8001084 <Lcd_cursor>
			Lcd_string(&lcd, g_date);
 8002de6:	4986      	ldr	r1, [pc, #536]	; (8003000 <RTC_date_and_time_update+0x620>)
 8002de8:	4884      	ldr	r0, [pc, #528]	; (8002ffc <RTC_date_and_time_update+0x61c>)
 8002dea:	f7fe f92b 	bl	8001044 <Lcd_string>
			snprintf(g_time, sizeof(g_time),"%02d:%02d:%02d",sTime.Hours, sTime.Minutes, sTime.Seconds);
 8002dee:	4b82      	ldr	r3, [pc, #520]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	4619      	mov	r1, r3
 8002df4:	4b80      	ldr	r3, [pc, #512]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002df6:	785b      	ldrb	r3, [r3, #1]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	4b7f      	ldr	r3, [pc, #508]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002dfc:	789b      	ldrb	r3, [r3, #2]
 8002dfe:	9301      	str	r3, [sp, #4]
 8002e00:	9200      	str	r2, [sp, #0]
 8002e02:	460b      	mov	r3, r1
 8002e04:	4a7f      	ldr	r2, [pc, #508]	; (8003004 <RTC_date_and_time_update+0x624>)
 8002e06:	2109      	movs	r1, #9
 8002e08:	487f      	ldr	r0, [pc, #508]	; (8003008 <RTC_date_and_time_update+0x628>)
 8002e0a:	f006 f945 	bl	8009098 <sniprintf>
			Lcd_cursor(&lcd, 1, 0) ;
 8002e0e:	2200      	movs	r2, #0
 8002e10:	2101      	movs	r1, #1
 8002e12:	487a      	ldr	r0, [pc, #488]	; (8002ffc <RTC_date_and_time_update+0x61c>)
 8002e14:	f7fe f936 	bl	8001084 <Lcd_cursor>
			Lcd_string(&lcd, g_time);
 8002e18:	497b      	ldr	r1, [pc, #492]	; (8003008 <RTC_date_and_time_update+0x628>)
 8002e1a:	4878      	ldr	r0, [pc, #480]	; (8002ffc <RTC_date_and_time_update+0x61c>)
 8002e1c:	f7fe f912 	bl	8001044 <Lcd_string>
			g_top_button_pressed =0 ;
 8002e20:	4b74      	ldr	r3, [pc, #464]	; (8002ff4 <RTC_date_and_time_update+0x614>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	701a      	strb	r2, [r3, #0]
		if(g_bottom_button_pressed== 1){
 8002e26:	4b79      	ldr	r3, [pc, #484]	; (800300c <RTC_date_and_time_update+0x62c>)
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	f040 80dd 	bne.w	8002fea <RTC_date_and_time_update+0x60a>
			sTime.Minutes-- ;
 8002e30:	4b71      	ldr	r3, [pc, #452]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002e32:	785b      	ldrb	r3, [r3, #1]
 8002e34:	3b01      	subs	r3, #1
 8002e36:	b2da      	uxtb	r2, r3
 8002e38:	4b6f      	ldr	r3, [pc, #444]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002e3a:	705a      	strb	r2, [r3, #1]
			if(sTime.Minutes < 1){
 8002e3c:	4b6e      	ldr	r3, [pc, #440]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002e3e:	785b      	ldrb	r3, [r3, #1]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d102      	bne.n	8002e4a <RTC_date_and_time_update+0x46a>
				sTime.Minutes = 60 ;
 8002e44:	4b6c      	ldr	r3, [pc, #432]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002e46:	223c      	movs	r2, #60	; 0x3c
 8002e48:	705a      	strb	r2, [r3, #1]
			Lcd_cursor(&lcd, 0, 0) ;
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	486b      	ldr	r0, [pc, #428]	; (8002ffc <RTC_date_and_time_update+0x61c>)
 8002e50:	f7fe f918 	bl	8001084 <Lcd_cursor>
			Lcd_string(&lcd, g_date);
 8002e54:	496a      	ldr	r1, [pc, #424]	; (8003000 <RTC_date_and_time_update+0x620>)
 8002e56:	4869      	ldr	r0, [pc, #420]	; (8002ffc <RTC_date_and_time_update+0x61c>)
 8002e58:	f7fe f8f4 	bl	8001044 <Lcd_string>
			snprintf(g_time, sizeof(g_time),"%02d:%02d:%02d",sTime.Hours, sTime.Minutes, sTime.Seconds);
 8002e5c:	4b66      	ldr	r3, [pc, #408]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	4619      	mov	r1, r3
 8002e62:	4b65      	ldr	r3, [pc, #404]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002e64:	785b      	ldrb	r3, [r3, #1]
 8002e66:	461a      	mov	r2, r3
 8002e68:	4b63      	ldr	r3, [pc, #396]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002e6a:	789b      	ldrb	r3, [r3, #2]
 8002e6c:	9301      	str	r3, [sp, #4]
 8002e6e:	9200      	str	r2, [sp, #0]
 8002e70:	460b      	mov	r3, r1
 8002e72:	4a64      	ldr	r2, [pc, #400]	; (8003004 <RTC_date_and_time_update+0x624>)
 8002e74:	2109      	movs	r1, #9
 8002e76:	4864      	ldr	r0, [pc, #400]	; (8003008 <RTC_date_and_time_update+0x628>)
 8002e78:	f006 f90e 	bl	8009098 <sniprintf>
			Lcd_cursor(&lcd, 1, 0) ;
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	2101      	movs	r1, #1
 8002e80:	485e      	ldr	r0, [pc, #376]	; (8002ffc <RTC_date_and_time_update+0x61c>)
 8002e82:	f7fe f8ff 	bl	8001084 <Lcd_cursor>
			Lcd_string(&lcd, g_time);
 8002e86:	4960      	ldr	r1, [pc, #384]	; (8003008 <RTC_date_and_time_update+0x628>)
 8002e88:	485c      	ldr	r0, [pc, #368]	; (8002ffc <RTC_date_and_time_update+0x61c>)
 8002e8a:	f7fe f8db 	bl	8001044 <Lcd_string>
			g_bottom_button_pressed =0 ;
 8002e8e:	4b5f      	ldr	r3, [pc, #380]	; (800300c <RTC_date_and_time_update+0x62c>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	701a      	strb	r2, [r3, #0]
}
 8002e94:	e0a9      	b.n	8002fea <RTC_date_and_time_update+0x60a>
	else if(paramx == 6){//update seconds
 8002e96:	79fb      	ldrb	r3, [r7, #7]
 8002e98:	2b06      	cmp	r3, #6
 8002e9a:	d16c      	bne.n	8002f76 <RTC_date_and_time_update+0x596>
		if(g_top_button_pressed== 1){
 8002e9c:	4b55      	ldr	r3, [pc, #340]	; (8002ff4 <RTC_date_and_time_update+0x614>)
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d131      	bne.n	8002f08 <RTC_date_and_time_update+0x528>
			sTime.Seconds++ ;
 8002ea4:	4b54      	ldr	r3, [pc, #336]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002ea6:	789b      	ldrb	r3, [r3, #2]
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	4b52      	ldr	r3, [pc, #328]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002eae:	709a      	strb	r2, [r3, #2]
			if(sTime.Seconds > 60){
 8002eb0:	4b51      	ldr	r3, [pc, #324]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002eb2:	789b      	ldrb	r3, [r3, #2]
 8002eb4:	2b3c      	cmp	r3, #60	; 0x3c
 8002eb6:	d902      	bls.n	8002ebe <RTC_date_and_time_update+0x4de>
				sTime.Seconds = 1 ;
 8002eb8:	4b4f      	ldr	r3, [pc, #316]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002eba:	2201      	movs	r2, #1
 8002ebc:	709a      	strb	r2, [r3, #2]
			Lcd_cursor(&lcd, 0, 0) ;
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	484e      	ldr	r0, [pc, #312]	; (8002ffc <RTC_date_and_time_update+0x61c>)
 8002ec4:	f7fe f8de 	bl	8001084 <Lcd_cursor>
			Lcd_string(&lcd, g_date);
 8002ec8:	494d      	ldr	r1, [pc, #308]	; (8003000 <RTC_date_and_time_update+0x620>)
 8002eca:	484c      	ldr	r0, [pc, #304]	; (8002ffc <RTC_date_and_time_update+0x61c>)
 8002ecc:	f7fe f8ba 	bl	8001044 <Lcd_string>
			snprintf(g_time, sizeof(g_time),"%02d:%02d:%02d",sTime.Hours, sTime.Minutes, sTime.Seconds);
 8002ed0:	4b49      	ldr	r3, [pc, #292]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4b48      	ldr	r3, [pc, #288]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002ed8:	785b      	ldrb	r3, [r3, #1]
 8002eda:	461a      	mov	r2, r3
 8002edc:	4b46      	ldr	r3, [pc, #280]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002ede:	789b      	ldrb	r3, [r3, #2]
 8002ee0:	9301      	str	r3, [sp, #4]
 8002ee2:	9200      	str	r2, [sp, #0]
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	4a47      	ldr	r2, [pc, #284]	; (8003004 <RTC_date_and_time_update+0x624>)
 8002ee8:	2109      	movs	r1, #9
 8002eea:	4847      	ldr	r0, [pc, #284]	; (8003008 <RTC_date_and_time_update+0x628>)
 8002eec:	f006 f8d4 	bl	8009098 <sniprintf>
			Lcd_cursor(&lcd, 1, 0) ;
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	4841      	ldr	r0, [pc, #260]	; (8002ffc <RTC_date_and_time_update+0x61c>)
 8002ef6:	f7fe f8c5 	bl	8001084 <Lcd_cursor>
			Lcd_string(&lcd, g_time);
 8002efa:	4943      	ldr	r1, [pc, #268]	; (8003008 <RTC_date_and_time_update+0x628>)
 8002efc:	483f      	ldr	r0, [pc, #252]	; (8002ffc <RTC_date_and_time_update+0x61c>)
 8002efe:	f7fe f8a1 	bl	8001044 <Lcd_string>
			g_top_button_pressed =0 ;
 8002f02:	4b3c      	ldr	r3, [pc, #240]	; (8002ff4 <RTC_date_and_time_update+0x614>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	701a      	strb	r2, [r3, #0]
		if(g_bottom_button_pressed== 1){
 8002f08:	4b40      	ldr	r3, [pc, #256]	; (800300c <RTC_date_and_time_update+0x62c>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d16c      	bne.n	8002fea <RTC_date_and_time_update+0x60a>
			sTime.Seconds-- ;
 8002f10:	4b39      	ldr	r3, [pc, #228]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002f12:	789b      	ldrb	r3, [r3, #2]
 8002f14:	3b01      	subs	r3, #1
 8002f16:	b2da      	uxtb	r2, r3
 8002f18:	4b37      	ldr	r3, [pc, #220]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002f1a:	709a      	strb	r2, [r3, #2]
			if(sTime.Seconds < 1){
 8002f1c:	4b36      	ldr	r3, [pc, #216]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002f1e:	789b      	ldrb	r3, [r3, #2]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d102      	bne.n	8002f2a <RTC_date_and_time_update+0x54a>
				sTime.Seconds = 60 ;
 8002f24:	4b34      	ldr	r3, [pc, #208]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002f26:	223c      	movs	r2, #60	; 0x3c
 8002f28:	709a      	strb	r2, [r3, #2]
			Lcd_cursor(&lcd, 0, 0) ;
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	4833      	ldr	r0, [pc, #204]	; (8002ffc <RTC_date_and_time_update+0x61c>)
 8002f30:	f7fe f8a8 	bl	8001084 <Lcd_cursor>
			Lcd_string(&lcd, g_date);
 8002f34:	4932      	ldr	r1, [pc, #200]	; (8003000 <RTC_date_and_time_update+0x620>)
 8002f36:	4831      	ldr	r0, [pc, #196]	; (8002ffc <RTC_date_and_time_update+0x61c>)
 8002f38:	f7fe f884 	bl	8001044 <Lcd_string>
			snprintf(g_time, sizeof(g_time),"%02d:%02d:%02d",sTime.Hours, sTime.Minutes, sTime.Seconds);
 8002f3c:	4b2e      	ldr	r3, [pc, #184]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	4619      	mov	r1, r3
 8002f42:	4b2d      	ldr	r3, [pc, #180]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002f44:	785b      	ldrb	r3, [r3, #1]
 8002f46:	461a      	mov	r2, r3
 8002f48:	4b2b      	ldr	r3, [pc, #172]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002f4a:	789b      	ldrb	r3, [r3, #2]
 8002f4c:	9301      	str	r3, [sp, #4]
 8002f4e:	9200      	str	r2, [sp, #0]
 8002f50:	460b      	mov	r3, r1
 8002f52:	4a2c      	ldr	r2, [pc, #176]	; (8003004 <RTC_date_and_time_update+0x624>)
 8002f54:	2109      	movs	r1, #9
 8002f56:	482c      	ldr	r0, [pc, #176]	; (8003008 <RTC_date_and_time_update+0x628>)
 8002f58:	f006 f89e 	bl	8009098 <sniprintf>
			Lcd_cursor(&lcd, 1, 0) ;
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	2101      	movs	r1, #1
 8002f60:	4826      	ldr	r0, [pc, #152]	; (8002ffc <RTC_date_and_time_update+0x61c>)
 8002f62:	f7fe f88f 	bl	8001084 <Lcd_cursor>
			Lcd_string(&lcd, g_time);
 8002f66:	4928      	ldr	r1, [pc, #160]	; (8003008 <RTC_date_and_time_update+0x628>)
 8002f68:	4824      	ldr	r0, [pc, #144]	; (8002ffc <RTC_date_and_time_update+0x61c>)
 8002f6a:	f7fe f86b 	bl	8001044 <Lcd_string>
			g_bottom_button_pressed =0 ;
 8002f6e:	4b27      	ldr	r3, [pc, #156]	; (800300c <RTC_date_and_time_update+0x62c>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	701a      	strb	r2, [r3, #0]
}
 8002f74:	e039      	b.n	8002fea <RTC_date_and_time_update+0x60a>
		if(paramx == 7){
 8002f76:	79fb      	ldrb	r3, [r7, #7]
 8002f78:	2b07      	cmp	r3, #7
 8002f7a:	d136      	bne.n	8002fea <RTC_date_and_time_update+0x60a>
			g_update_RTC = 0 ; //done updating the RTC
 8002f7c:	4b24      	ldr	r3, [pc, #144]	; (8003010 <RTC_date_and_time_update+0x630>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	701a      	strb	r2, [r3, #0]
			set_RTC_date_and_time() ;
 8002f82:	f000 f883 	bl	800308c <set_RTC_date_and_time>
			snprintf(g_date, sizeof(g_date),"%02d/%02d/20%02d",sDate.Date, sDate.Month,sDate.Year);
 8002f86:	4b23      	ldr	r3, [pc, #140]	; (8003014 <RTC_date_and_time_update+0x634>)
 8002f88:	789b      	ldrb	r3, [r3, #2]
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	4b21      	ldr	r3, [pc, #132]	; (8003014 <RTC_date_and_time_update+0x634>)
 8002f8e:	785b      	ldrb	r3, [r3, #1]
 8002f90:	461a      	mov	r2, r3
 8002f92:	4b20      	ldr	r3, [pc, #128]	; (8003014 <RTC_date_and_time_update+0x634>)
 8002f94:	78db      	ldrb	r3, [r3, #3]
 8002f96:	9301      	str	r3, [sp, #4]
 8002f98:	9200      	str	r2, [sp, #0]
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	4a1e      	ldr	r2, [pc, #120]	; (8003018 <RTC_date_and_time_update+0x638>)
 8002f9e:	210b      	movs	r1, #11
 8002fa0:	4817      	ldr	r0, [pc, #92]	; (8003000 <RTC_date_and_time_update+0x620>)
 8002fa2:	f006 f879 	bl	8009098 <sniprintf>
			snprintf(g_time, sizeof(g_time),"%02d:%02d:%02d",sTime.Hours, sTime.Minutes, sTime.Seconds);
 8002fa6:	4b14      	ldr	r3, [pc, #80]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	4619      	mov	r1, r3
 8002fac:	4b12      	ldr	r3, [pc, #72]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002fae:	785b      	ldrb	r3, [r3, #1]
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	4b11      	ldr	r3, [pc, #68]	; (8002ff8 <RTC_date_and_time_update+0x618>)
 8002fb4:	789b      	ldrb	r3, [r3, #2]
 8002fb6:	9301      	str	r3, [sp, #4]
 8002fb8:	9200      	str	r2, [sp, #0]
 8002fba:	460b      	mov	r3, r1
 8002fbc:	4a11      	ldr	r2, [pc, #68]	; (8003004 <RTC_date_and_time_update+0x624>)
 8002fbe:	2109      	movs	r1, #9
 8002fc0:	4811      	ldr	r0, [pc, #68]	; (8003008 <RTC_date_and_time_update+0x628>)
 8002fc2:	f006 f869 	bl	8009098 <sniprintf>
			Lcd_cursor(&lcd, 0, 0) ;
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	2100      	movs	r1, #0
 8002fca:	480c      	ldr	r0, [pc, #48]	; (8002ffc <RTC_date_and_time_update+0x61c>)
 8002fcc:	f7fe f85a 	bl	8001084 <Lcd_cursor>
			Lcd_string(&lcd, g_date);
 8002fd0:	490b      	ldr	r1, [pc, #44]	; (8003000 <RTC_date_and_time_update+0x620>)
 8002fd2:	480a      	ldr	r0, [pc, #40]	; (8002ffc <RTC_date_and_time_update+0x61c>)
 8002fd4:	f7fe f836 	bl	8001044 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0) ;
 8002fd8:	2200      	movs	r2, #0
 8002fda:	2101      	movs	r1, #1
 8002fdc:	4807      	ldr	r0, [pc, #28]	; (8002ffc <RTC_date_and_time_update+0x61c>)
 8002fde:	f7fe f851 	bl	8001084 <Lcd_cursor>
			Lcd_string(&lcd, g_time);
 8002fe2:	4909      	ldr	r1, [pc, #36]	; (8003008 <RTC_date_and_time_update+0x628>)
 8002fe4:	4805      	ldr	r0, [pc, #20]	; (8002ffc <RTC_date_and_time_update+0x61c>)
 8002fe6:	f7fe f82d 	bl	8001044 <Lcd_string>
}
 8002fea:	bf00      	nop
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	2000054a 	.word	0x2000054a
 8002ff8:	200004e8 	.word	0x200004e8
 8002ffc:	200004d0 	.word	0x200004d0
 8003000:	20000504 	.word	0x20000504
 8003004:	0800c4c8 	.word	0x0800c4c8
 8003008:	20000510 	.word	0x20000510
 800300c:	2000054b 	.word	0x2000054b
 8003010:	20000500 	.word	0x20000500
 8003014:	200004fc 	.word	0x200004fc
 8003018:	0800c4b4 	.word	0x0800c4b4

0800301c <g_clock_menu_set_and_parameter_update>:

void g_clock_menu_set_and_parameter_update(){
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
	if(g_middle_button_pressed == 1){
 8003020:	4b15      	ldr	r3, [pc, #84]	; (8003078 <g_clock_menu_set_and_parameter_update+0x5c>)
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d11c      	bne.n	8003062 <g_clock_menu_set_and_parameter_update+0x46>
		g_middle_button_pressed = 0;
 8003028:	4b13      	ldr	r3, [pc, #76]	; (8003078 <g_clock_menu_set_and_parameter_update+0x5c>)
 800302a:	2200      	movs	r2, #0
 800302c:	701a      	strb	r2, [r3, #0]

		//RTC menu
		if(g_update_RTC ==0){
 800302e:	4b13      	ldr	r3, [pc, #76]	; (800307c <g_clock_menu_set_and_parameter_update+0x60>)
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d108      	bne.n	8003048 <g_clock_menu_set_and_parameter_update+0x2c>
			g_update_RTC = 1;
 8003036:	4b11      	ldr	r3, [pc, #68]	; (800307c <g_clock_menu_set_and_parameter_update+0x60>)
 8003038:	2201      	movs	r2, #1
 800303a:	701a      	strb	r2, [r3, #0]

			//set LCD in mode 3 - LCD parameter
			display_result = 1;
 800303c:	4b10      	ldr	r3, [pc, #64]	; (8003080 <g_clock_menu_set_and_parameter_update+0x64>)
 800303e:	2201      	movs	r2, #1
 8003040:	701a      	strb	r2, [r3, #0]

			g_lcd_mode = 3  ;
 8003042:	4b10      	ldr	r3, [pc, #64]	; (8003084 <g_clock_menu_set_and_parameter_update+0x68>)
 8003044:	2203      	movs	r2, #3
 8003046:	701a      	strb	r2, [r3, #0]
		}

		//increment parameter to update
		g_RTC_parameter++ ;
 8003048:	4b0f      	ldr	r3, [pc, #60]	; (8003088 <g_clock_menu_set_and_parameter_update+0x6c>)
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	3301      	adds	r3, #1
 800304e:	b2da      	uxtb	r2, r3
 8003050:	4b0d      	ldr	r3, [pc, #52]	; (8003088 <g_clock_menu_set_and_parameter_update+0x6c>)
 8003052:	701a      	strb	r2, [r3, #0]

		if(g_RTC_parameter>7){
 8003054:	4b0c      	ldr	r3, [pc, #48]	; (8003088 <g_clock_menu_set_and_parameter_update+0x6c>)
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	2b07      	cmp	r3, #7
 800305a:	d902      	bls.n	8003062 <g_clock_menu_set_and_parameter_update+0x46>
			g_RTC_parameter = 1; //cycle back to first parameter once RTC entered again
 800305c:	4b0a      	ldr	r3, [pc, #40]	; (8003088 <g_clock_menu_set_and_parameter_update+0x6c>)
 800305e:	2201      	movs	r2, #1
 8003060:	701a      	strb	r2, [r3, #0]
		}

	}

	//update parameters
	if(g_update_RTC == 1){
 8003062:	4b06      	ldr	r3, [pc, #24]	; (800307c <g_clock_menu_set_and_parameter_update+0x60>)
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d104      	bne.n	8003074 <g_clock_menu_set_and_parameter_update+0x58>
		RTC_date_and_time_update(g_RTC_parameter) ;
 800306a:	4b07      	ldr	r3, [pc, #28]	; (8003088 <g_clock_menu_set_and_parameter_update+0x6c>)
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff fcb6 	bl	80029e0 <RTC_date_and_time_update>
	}

}
 8003074:	bf00      	nop
 8003076:	bd80      	pop	{r7, pc}
 8003078:	2000054c 	.word	0x2000054c
 800307c:	20000500 	.word	0x20000500
 8003080:	200004cf 	.word	0x200004cf
 8003084:	200004ce 	.word	0x200004ce
 8003088:	20000501 	.word	0x20000501

0800308c <set_RTC_date_and_time>:

/**
 * This function sets the updated time
 */
void set_RTC_date_and_time(){
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) ;
 8003090:	2200      	movs	r2, #0
 8003092:	4905      	ldr	r1, [pc, #20]	; (80030a8 <set_RTC_date_and_time+0x1c>)
 8003094:	4805      	ldr	r0, [pc, #20]	; (80030ac <set_RTC_date_and_time+0x20>)
 8003096:	f002 fe91 	bl	8005dbc <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) ;
 800309a:	2200      	movs	r2, #0
 800309c:	4904      	ldr	r1, [pc, #16]	; (80030b0 <set_RTC_date_and_time+0x24>)
 800309e:	4803      	ldr	r0, [pc, #12]	; (80030ac <set_RTC_date_and_time+0x20>)
 80030a0:	f002 ff84 	bl	8005fac <HAL_RTC_SetDate>
}
 80030a4:	bf00      	nop
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	200004e8 	.word	0x200004e8
 80030ac:	20000274 	.word	0x20000274
 80030b0:	200004fc 	.word	0x200004fc

080030b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80030b4:	b5b0      	push	{r4, r5, r7, lr}
 80030b6:	b08a      	sub	sp, #40	; 0x28
 80030b8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80030ba:	f001 f861 	bl	8004180 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80030be:	f000 f86d 	bl	800319c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80030c2:	f000 fb0d 	bl	80036e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80030c6:	f000 fadf 	bl	8003688 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80030ca:	f000 f8d3 	bl	8003274 <MX_ADC1_Init>
  MX_TIM2_Init();
 80030ce:	f000 f9a7 	bl	8003420 <MX_TIM2_Init>
  MX_TIM3_Init();
 80030d2:	f000 fa15 	bl	8003500 <MX_TIM3_Init>
  MX_RTC_Init();
 80030d6:	f000 f949 	bl	800336c <MX_RTC_Init>
  MX_TIM5_Init();
 80030da:	f000 fa5f 	bl	800359c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(150);
 80030de:	2096      	movs	r0, #150	; 0x96
 80030e0:	f001 f8c0 	bl	8004264 <HAL_Delay>
  HAL_UART_Transmit_IT(&huart2, (uint8_t*)studentNum, 13) ;
 80030e4:	220d      	movs	r2, #13
 80030e6:	4922      	ldr	r1, [pc, #136]	; (8003170 <main+0xbc>)
 80030e8:	4822      	ldr	r0, [pc, #136]	; (8003174 <main+0xc0>)
 80030ea:	f004 fbca 	bl	8007882 <HAL_UART_Transmit_IT>

  HAL_UART_Receive_IT(&huart2, (uint8_t*)char_rcvd, 1) ;
 80030ee:	2201      	movs	r2, #1
 80030f0:	4921      	ldr	r1, [pc, #132]	; (8003178 <main+0xc4>)
 80030f2:	4820      	ldr	r0, [pc, #128]	; (8003174 <main+0xc0>)
 80030f4:	f004 fc0a 	bl	800790c <HAL_UART_Receive_IT>

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1)  ; // input to trigger interrupt - LMT01 sensor
 80030f8:	2100      	movs	r1, #0
 80030fa:	4820      	ldr	r0, [pc, #128]	; (800317c <main+0xc8>)
 80030fc:	f003 fa98 	bl	8006630 <HAL_TIM_IC_Start_IT>

  g_time_passed = HAL_GetTick() ; //snapshot of time
 8003100:	f001 f8a4 	bl	800424c <HAL_GetTick>
 8003104:	4603      	mov	r3, r0
 8003106:	4a1e      	ldr	r2, [pc, #120]	; (8003180 <main+0xcc>)
 8003108:	6013      	str	r3, [r2, #0]

  //Write to LCD
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET) ;
 800310a:	2200      	movs	r2, #0
 800310c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003110:	481c      	ldr	r0, [pc, #112]	; (8003184 <main+0xd0>)
 8003112:	f001 fffd 	bl	8005110 <HAL_GPIO_WritePin>

  lcd = Lcd_create(ports, pins, GPIOB, GPIO_PIN_14, GPIOB, GPIO_PIN_2, LCD_4_BIT_MODE);
 8003116:	4c1c      	ldr	r4, [pc, #112]	; (8003188 <main+0xd4>)
 8003118:	4638      	mov	r0, r7
 800311a:	2300      	movs	r3, #0
 800311c:	9303      	str	r3, [sp, #12]
 800311e:	2304      	movs	r3, #4
 8003120:	9302      	str	r3, [sp, #8]
 8003122:	4b18      	ldr	r3, [pc, #96]	; (8003184 <main+0xd0>)
 8003124:	9301      	str	r3, [sp, #4]
 8003126:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800312a:	9300      	str	r3, [sp, #0]
 800312c:	4b15      	ldr	r3, [pc, #84]	; (8003184 <main+0xd0>)
 800312e:	4a17      	ldr	r2, [pc, #92]	; (800318c <main+0xd8>)
 8003130:	4917      	ldr	r1, [pc, #92]	; (8003190 <main+0xdc>)
 8003132:	f7fd ff33 	bl	8000f9c <Lcd_create>
 8003136:	4625      	mov	r5, r4
 8003138:	463c      	mov	r4, r7
 800313a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800313c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800313e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003142:	e885 0003 	stmia.w	r5, {r0, r1}
  Lcd_clear(&lcd);
 8003146:	4810      	ldr	r0, [pc, #64]	; (8003188 <main+0xd4>)
 8003148:	f7fd ffb6 	bl	80010b8 <Lcd_clear>

  //PWM signal start -BJT
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 800314c:	2104      	movs	r1, #4
 800314e:	4811      	ldr	r0, [pc, #68]	; (8003194 <main+0xe0>)
 8003150:	f003 f964 	bl	800641c <HAL_TIM_PWM_Start>
  TIM5->CCR2 = 0; //start with duty cycle of 0
 8003154:	4b10      	ldr	r3, [pc, #64]	; (8003198 <main+0xe4>)
 8003156:	2200      	movs	r2, #0
 8003158:	639a      	str	r2, [r3, #56]	; 0x38
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //update system state based on input recvd
	  system_state_update() ;
 800315a:	f7fe f955 	bl	8001408 <system_state_update>

	  //UR5: Calibration of device
	  ca_measurements_and_responses();
 800315e:	f7ff f803 	bl	8002168 <ca_measurements_and_responses>

	  //UR3: Evironment measure: measure Ta & measure Tb  (Put in Function)/Modularize
	  en_measurements_and_responses() ;
 8003162:	f7fe fd83 	bl	8001c6c <en_measurements_and_responses>

	  //UR2: PV Module -(Put in Function)/Modularize
	  sp_measurements_and_responses();
 8003166:	f7fe fe2f 	bl	8001dc8 <sp_measurements_and_responses>



	  //update LCD - code runs seqeuntionally and lcd updates based on variable states above
	  change_lcd_display_mode();
 800316a:	f7ff fa9b 	bl	80026a4 <change_lcd_display_mode>
	  system_state_update() ;
 800316e:	e7f4      	b.n	800315a <main+0xa6>
 8003170:	20000000 	.word	0x20000000
 8003174:	2000036c 	.word	0x2000036c
 8003178:	20000010 	.word	0x20000010
 800317c:	20000294 	.word	0x20000294
 8003180:	20000488 	.word	0x20000488
 8003184:	40020400 	.word	0x40020400
 8003188:	200004d0 	.word	0x200004d0
 800318c:	20000028 	.word	0x20000028
 8003190:	20000018 	.word	0x20000018
 8003194:	20000324 	.word	0x20000324
 8003198:	40000c00 	.word	0x40000c00

0800319c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b094      	sub	sp, #80	; 0x50
 80031a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031a2:	f107 0320 	add.w	r3, r7, #32
 80031a6:	2230      	movs	r2, #48	; 0x30
 80031a8:	2100      	movs	r1, #0
 80031aa:	4618      	mov	r0, r3
 80031ac:	f005 fb02 	bl	80087b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031b0:	f107 030c 	add.w	r3, r7, #12
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	605a      	str	r2, [r3, #4]
 80031ba:	609a      	str	r2, [r3, #8]
 80031bc:	60da      	str	r2, [r3, #12]
 80031be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80031c0:	2300      	movs	r3, #0
 80031c2:	60bb      	str	r3, [r7, #8]
 80031c4:	4b29      	ldr	r3, [pc, #164]	; (800326c <SystemClock_Config+0xd0>)
 80031c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c8:	4a28      	ldr	r2, [pc, #160]	; (800326c <SystemClock_Config+0xd0>)
 80031ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ce:	6413      	str	r3, [r2, #64]	; 0x40
 80031d0:	4b26      	ldr	r3, [pc, #152]	; (800326c <SystemClock_Config+0xd0>)
 80031d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d8:	60bb      	str	r3, [r7, #8]
 80031da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80031dc:	2300      	movs	r3, #0
 80031de:	607b      	str	r3, [r7, #4]
 80031e0:	4b23      	ldr	r3, [pc, #140]	; (8003270 <SystemClock_Config+0xd4>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a22      	ldr	r2, [pc, #136]	; (8003270 <SystemClock_Config+0xd4>)
 80031e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031ea:	6013      	str	r3, [r2, #0]
 80031ec:	4b20      	ldr	r3, [pc, #128]	; (8003270 <SystemClock_Config+0xd4>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80031f4:	607b      	str	r3, [r7, #4]
 80031f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80031f8:	230a      	movs	r3, #10
 80031fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80031fc:	2301      	movs	r3, #1
 80031fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003200:	2310      	movs	r3, #16
 8003202:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003204:	2301      	movs	r3, #1
 8003206:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003208:	2302      	movs	r3, #2
 800320a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800320c:	2300      	movs	r3, #0
 800320e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8003210:	2310      	movs	r3, #16
 8003212:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003214:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003218:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800321a:	2304      	movs	r3, #4
 800321c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800321e:	2304      	movs	r3, #4
 8003220:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003222:	f107 0320 	add.w	r3, r7, #32
 8003226:	4618      	mov	r0, r3
 8003228:	f001 ffca 	bl	80051c0 <HAL_RCC_OscConfig>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003232:	f000 fb0d 	bl	8003850 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003236:	230f      	movs	r3, #15
 8003238:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800323a:	2302      	movs	r3, #2
 800323c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800323e:	2300      	movs	r3, #0
 8003240:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003242:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003246:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003248:	2300      	movs	r3, #0
 800324a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800324c:	f107 030c 	add.w	r3, r7, #12
 8003250:	2102      	movs	r1, #2
 8003252:	4618      	mov	r0, r3
 8003254:	f002 fa2c 	bl	80056b0 <HAL_RCC_ClockConfig>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800325e:	f000 faf7 	bl	8003850 <Error_Handler>
  }
}
 8003262:	bf00      	nop
 8003264:	3750      	adds	r7, #80	; 0x50
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	40023800 	.word	0x40023800
 8003270:	40007000 	.word	0x40007000

08003274 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800327a:	463b      	mov	r3, r7
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	605a      	str	r2, [r3, #4]
 8003282:	609a      	str	r2, [r3, #8]
 8003284:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003286:	4b36      	ldr	r3, [pc, #216]	; (8003360 <MX_ADC1_Init+0xec>)
 8003288:	4a36      	ldr	r2, [pc, #216]	; (8003364 <MX_ADC1_Init+0xf0>)
 800328a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800328c:	4b34      	ldr	r3, [pc, #208]	; (8003360 <MX_ADC1_Init+0xec>)
 800328e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003292:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003294:	4b32      	ldr	r3, [pc, #200]	; (8003360 <MX_ADC1_Init+0xec>)
 8003296:	2200      	movs	r2, #0
 8003298:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800329a:	4b31      	ldr	r3, [pc, #196]	; (8003360 <MX_ADC1_Init+0xec>)
 800329c:	2201      	movs	r2, #1
 800329e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80032a0:	4b2f      	ldr	r3, [pc, #188]	; (8003360 <MX_ADC1_Init+0xec>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80032a6:	4b2e      	ldr	r3, [pc, #184]	; (8003360 <MX_ADC1_Init+0xec>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80032ae:	4b2c      	ldr	r3, [pc, #176]	; (8003360 <MX_ADC1_Init+0xec>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80032b4:	4b2a      	ldr	r3, [pc, #168]	; (8003360 <MX_ADC1_Init+0xec>)
 80032b6:	4a2c      	ldr	r2, [pc, #176]	; (8003368 <MX_ADC1_Init+0xf4>)
 80032b8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80032ba:	4b29      	ldr	r3, [pc, #164]	; (8003360 <MX_ADC1_Init+0xec>)
 80032bc:	2200      	movs	r2, #0
 80032be:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80032c0:	4b27      	ldr	r3, [pc, #156]	; (8003360 <MX_ADC1_Init+0xec>)
 80032c2:	2204      	movs	r2, #4
 80032c4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80032c6:	4b26      	ldr	r3, [pc, #152]	; (8003360 <MX_ADC1_Init+0xec>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80032ce:	4b24      	ldr	r3, [pc, #144]	; (8003360 <MX_ADC1_Init+0xec>)
 80032d0:	2201      	movs	r2, #1
 80032d2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80032d4:	4822      	ldr	r0, [pc, #136]	; (8003360 <MX_ADC1_Init+0xec>)
 80032d6:	f000 ffe9 	bl	80042ac <HAL_ADC_Init>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80032e0:	f000 fab6 	bl	8003850 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80032e4:	2300      	movs	r3, #0
 80032e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80032e8:	2301      	movs	r3, #1
 80032ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80032ec:	2300      	movs	r3, #0
 80032ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80032f0:	463b      	mov	r3, r7
 80032f2:	4619      	mov	r1, r3
 80032f4:	481a      	ldr	r0, [pc, #104]	; (8003360 <MX_ADC1_Init+0xec>)
 80032f6:	f001 f99d 	bl	8004634 <HAL_ADC_ConfigChannel>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003300:	f000 faa6 	bl	8003850 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8003304:	230e      	movs	r3, #14
 8003306:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003308:	2302      	movs	r3, #2
 800330a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800330c:	463b      	mov	r3, r7
 800330e:	4619      	mov	r1, r3
 8003310:	4813      	ldr	r0, [pc, #76]	; (8003360 <MX_ADC1_Init+0xec>)
 8003312:	f001 f98f 	bl	8004634 <HAL_ADC_ConfigChannel>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800331c:	f000 fa98 	bl	8003850 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003320:	2309      	movs	r3, #9
 8003322:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8003324:	2303      	movs	r3, #3
 8003326:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003328:	463b      	mov	r3, r7
 800332a:	4619      	mov	r1, r3
 800332c:	480c      	ldr	r0, [pc, #48]	; (8003360 <MX_ADC1_Init+0xec>)
 800332e:	f001 f981 	bl	8004634 <HAL_ADC_ConfigChannel>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8003338:	f000 fa8a 	bl	8003850 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800333c:	230f      	movs	r3, #15
 800333e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8003340:	2304      	movs	r3, #4
 8003342:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003344:	463b      	mov	r3, r7
 8003346:	4619      	mov	r1, r3
 8003348:	4805      	ldr	r0, [pc, #20]	; (8003360 <MX_ADC1_Init+0xec>)
 800334a:	f001 f973 	bl	8004634 <HAL_ADC_ConfigChannel>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8003354:	f000 fa7c 	bl	8003850 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003358:	bf00      	nop
 800335a:	3710      	adds	r7, #16
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	2000022c 	.word	0x2000022c
 8003364:	40012000 	.word	0x40012000
 8003368:	0f000001 	.word	0x0f000001

0800336c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003372:	1d3b      	adds	r3, r7, #4
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	605a      	str	r2, [r3, #4]
 800337a:	609a      	str	r2, [r3, #8]
 800337c:	60da      	str	r2, [r3, #12]
 800337e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003380:	2300      	movs	r3, #0
 8003382:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003384:	4b24      	ldr	r3, [pc, #144]	; (8003418 <MX_RTC_Init+0xac>)
 8003386:	4a25      	ldr	r2, [pc, #148]	; (800341c <MX_RTC_Init+0xb0>)
 8003388:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800338a:	4b23      	ldr	r3, [pc, #140]	; (8003418 <MX_RTC_Init+0xac>)
 800338c:	2200      	movs	r2, #0
 800338e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003390:	4b21      	ldr	r3, [pc, #132]	; (8003418 <MX_RTC_Init+0xac>)
 8003392:	227f      	movs	r2, #127	; 0x7f
 8003394:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003396:	4b20      	ldr	r3, [pc, #128]	; (8003418 <MX_RTC_Init+0xac>)
 8003398:	22ff      	movs	r2, #255	; 0xff
 800339a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800339c:	4b1e      	ldr	r3, [pc, #120]	; (8003418 <MX_RTC_Init+0xac>)
 800339e:	2200      	movs	r2, #0
 80033a0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80033a2:	4b1d      	ldr	r3, [pc, #116]	; (8003418 <MX_RTC_Init+0xac>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80033a8:	4b1b      	ldr	r3, [pc, #108]	; (8003418 <MX_RTC_Init+0xac>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80033ae:	481a      	ldr	r0, [pc, #104]	; (8003418 <MX_RTC_Init+0xac>)
 80033b0:	f002 fc8e 	bl	8005cd0 <HAL_RTC_Init>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80033ba:	f000 fa49 	bl	8003850 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x16;
 80033be:	2316      	movs	r3, #22
 80033c0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x20;
 80033c2:	2320      	movs	r3, #32
 80033c4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80033c6:	2300      	movs	r3, #0
 80033c8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80033ca:	2300      	movs	r3, #0
 80033cc:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80033ce:	2300      	movs	r3, #0
 80033d0:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80033d2:	1d3b      	adds	r3, r7, #4
 80033d4:	2201      	movs	r2, #1
 80033d6:	4619      	mov	r1, r3
 80033d8:	480f      	ldr	r0, [pc, #60]	; (8003418 <MX_RTC_Init+0xac>)
 80033da:	f002 fcef 	bl	8005dbc <HAL_RTC_SetTime>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d001      	beq.n	80033e8 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80033e4:	f000 fa34 	bl	8003850 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 80033e8:	2304      	movs	r3, #4
 80033ea:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_SEPTEMBER;
 80033ec:	2309      	movs	r3, #9
 80033ee:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x19;
 80033f0:	2319      	movs	r3, #25
 80033f2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x24;
 80033f4:	2324      	movs	r3, #36	; 0x24
 80033f6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80033f8:	463b      	mov	r3, r7
 80033fa:	2201      	movs	r2, #1
 80033fc:	4619      	mov	r1, r3
 80033fe:	4806      	ldr	r0, [pc, #24]	; (8003418 <MX_RTC_Init+0xac>)
 8003400:	f002 fdd4 	bl	8005fac <HAL_RTC_SetDate>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800340a:	f000 fa21 	bl	8003850 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800340e:	bf00      	nop
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	20000274 	.word	0x20000274
 800341c:	40002800 	.word	0x40002800

08003420 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b08a      	sub	sp, #40	; 0x28
 8003424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003426:	f107 0318 	add.w	r3, r7, #24
 800342a:	2200      	movs	r2, #0
 800342c:	601a      	str	r2, [r3, #0]
 800342e:	605a      	str	r2, [r3, #4]
 8003430:	609a      	str	r2, [r3, #8]
 8003432:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003434:	f107 0310 	add.w	r3, r7, #16
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800343e:	463b      	mov	r3, r7
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	605a      	str	r2, [r3, #4]
 8003446:	609a      	str	r2, [r3, #8]
 8003448:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800344a:	4b2c      	ldr	r3, [pc, #176]	; (80034fc <MX_TIM2_Init+0xdc>)
 800344c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003450:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8003452:	4b2a      	ldr	r3, [pc, #168]	; (80034fc <MX_TIM2_Init+0xdc>)
 8003454:	2253      	movs	r2, #83	; 0x53
 8003456:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003458:	4b28      	ldr	r3, [pc, #160]	; (80034fc <MX_TIM2_Init+0xdc>)
 800345a:	2200      	movs	r2, #0
 800345c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800345e:	4b27      	ldr	r3, [pc, #156]	; (80034fc <MX_TIM2_Init+0xdc>)
 8003460:	f04f 32ff 	mov.w	r2, #4294967295
 8003464:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003466:	4b25      	ldr	r3, [pc, #148]	; (80034fc <MX_TIM2_Init+0xdc>)
 8003468:	2200      	movs	r2, #0
 800346a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800346c:	4b23      	ldr	r3, [pc, #140]	; (80034fc <MX_TIM2_Init+0xdc>)
 800346e:	2200      	movs	r2, #0
 8003470:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003472:	4822      	ldr	r0, [pc, #136]	; (80034fc <MX_TIM2_Init+0xdc>)
 8003474:	f002 ff2a 	bl	80062cc <HAL_TIM_Base_Init>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800347e:	f000 f9e7 	bl	8003850 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003482:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003486:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003488:	f107 0318 	add.w	r3, r7, #24
 800348c:	4619      	mov	r1, r3
 800348e:	481b      	ldr	r0, [pc, #108]	; (80034fc <MX_TIM2_Init+0xdc>)
 8003490:	f003 fc4e 	bl	8006d30 <HAL_TIM_ConfigClockSource>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800349a:	f000 f9d9 	bl	8003850 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800349e:	4817      	ldr	r0, [pc, #92]	; (80034fc <MX_TIM2_Init+0xdc>)
 80034a0:	f003 f86c 	bl	800657c <HAL_TIM_IC_Init>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80034aa:	f000 f9d1 	bl	8003850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034ae:	2300      	movs	r3, #0
 80034b0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034b2:	2300      	movs	r3, #0
 80034b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80034b6:	f107 0310 	add.w	r3, r7, #16
 80034ba:	4619      	mov	r1, r3
 80034bc:	480f      	ldr	r0, [pc, #60]	; (80034fc <MX_TIM2_Init+0xdc>)
 80034be:	f004 f911 	bl	80076e4 <HAL_TIMEx_MasterConfigSynchronization>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d001      	beq.n	80034cc <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80034c8:	f000 f9c2 	bl	8003850 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80034cc:	2300      	movs	r3, #0
 80034ce:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80034d0:	2301      	movs	r3, #1
 80034d2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80034d4:	2300      	movs	r3, #0
 80034d6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80034d8:	2300      	movs	r3, #0
 80034da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80034dc:	463b      	mov	r3, r7
 80034de:	2200      	movs	r2, #0
 80034e0:	4619      	mov	r1, r3
 80034e2:	4806      	ldr	r0, [pc, #24]	; (80034fc <MX_TIM2_Init+0xdc>)
 80034e4:	f003 fac6 	bl	8006a74 <HAL_TIM_IC_ConfigChannel>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80034ee:	f000 f9af 	bl	8003850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80034f2:	bf00      	nop
 80034f4:	3728      	adds	r7, #40	; 0x28
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	20000294 	.word	0x20000294

08003500 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003506:	f107 0308 	add.w	r3, r7, #8
 800350a:	2200      	movs	r2, #0
 800350c:	601a      	str	r2, [r3, #0]
 800350e:	605a      	str	r2, [r3, #4]
 8003510:	609a      	str	r2, [r3, #8]
 8003512:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003514:	463b      	mov	r3, r7
 8003516:	2200      	movs	r2, #0
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800351c:	4b1d      	ldr	r3, [pc, #116]	; (8003594 <MX_TIM3_Init+0x94>)
 800351e:	4a1e      	ldr	r2, [pc, #120]	; (8003598 <MX_TIM3_Init+0x98>)
 8003520:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003522:	4b1c      	ldr	r3, [pc, #112]	; (8003594 <MX_TIM3_Init+0x94>)
 8003524:	2200      	movs	r2, #0
 8003526:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003528:	4b1a      	ldr	r3, [pc, #104]	; (8003594 <MX_TIM3_Init+0x94>)
 800352a:	2200      	movs	r2, #0
 800352c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800352e:	4b19      	ldr	r3, [pc, #100]	; (8003594 <MX_TIM3_Init+0x94>)
 8003530:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003534:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003536:	4b17      	ldr	r3, [pc, #92]	; (8003594 <MX_TIM3_Init+0x94>)
 8003538:	2200      	movs	r2, #0
 800353a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800353c:	4b15      	ldr	r3, [pc, #84]	; (8003594 <MX_TIM3_Init+0x94>)
 800353e:	2200      	movs	r2, #0
 8003540:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003542:	4814      	ldr	r0, [pc, #80]	; (8003594 <MX_TIM3_Init+0x94>)
 8003544:	f002 fec2 	bl	80062cc <HAL_TIM_Base_Init>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800354e:	f000 f97f 	bl	8003850 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003556:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003558:	f107 0308 	add.w	r3, r7, #8
 800355c:	4619      	mov	r1, r3
 800355e:	480d      	ldr	r0, [pc, #52]	; (8003594 <MX_TIM3_Init+0x94>)
 8003560:	f003 fbe6 	bl	8006d30 <HAL_TIM_ConfigClockSource>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800356a:	f000 f971 	bl	8003850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800356e:	2300      	movs	r3, #0
 8003570:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003572:	2300      	movs	r3, #0
 8003574:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003576:	463b      	mov	r3, r7
 8003578:	4619      	mov	r1, r3
 800357a:	4806      	ldr	r0, [pc, #24]	; (8003594 <MX_TIM3_Init+0x94>)
 800357c:	f004 f8b2 	bl	80076e4 <HAL_TIMEx_MasterConfigSynchronization>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8003586:	f000 f963 	bl	8003850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800358a:	bf00      	nop
 800358c:	3718      	adds	r7, #24
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	200002dc 	.word	0x200002dc
 8003598:	40000400 	.word	0x40000400

0800359c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b08e      	sub	sp, #56	; 0x38
 80035a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035a6:	2200      	movs	r2, #0
 80035a8:	601a      	str	r2, [r3, #0]
 80035aa:	605a      	str	r2, [r3, #4]
 80035ac:	609a      	str	r2, [r3, #8]
 80035ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035b0:	f107 0320 	add.w	r3, r7, #32
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]
 80035b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80035ba:	1d3b      	adds	r3, r7, #4
 80035bc:	2200      	movs	r2, #0
 80035be:	601a      	str	r2, [r3, #0]
 80035c0:	605a      	str	r2, [r3, #4]
 80035c2:	609a      	str	r2, [r3, #8]
 80035c4:	60da      	str	r2, [r3, #12]
 80035c6:	611a      	str	r2, [r3, #16]
 80035c8:	615a      	str	r2, [r3, #20]
 80035ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80035cc:	4b2c      	ldr	r3, [pc, #176]	; (8003680 <MX_TIM5_Init+0xe4>)
 80035ce:	4a2d      	ldr	r2, [pc, #180]	; (8003684 <MX_TIM5_Init+0xe8>)
 80035d0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 33;
 80035d2:	4b2b      	ldr	r3, [pc, #172]	; (8003680 <MX_TIM5_Init+0xe4>)
 80035d4:	2221      	movs	r2, #33	; 0x21
 80035d6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035d8:	4b29      	ldr	r3, [pc, #164]	; (8003680 <MX_TIM5_Init+0xe4>)
 80035da:	2200      	movs	r2, #0
 80035dc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100;
 80035de:	4b28      	ldr	r3, [pc, #160]	; (8003680 <MX_TIM5_Init+0xe4>)
 80035e0:	2264      	movs	r2, #100	; 0x64
 80035e2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035e4:	4b26      	ldr	r3, [pc, #152]	; (8003680 <MX_TIM5_Init+0xe4>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035ea:	4b25      	ldr	r3, [pc, #148]	; (8003680 <MX_TIM5_Init+0xe4>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80035f0:	4823      	ldr	r0, [pc, #140]	; (8003680 <MX_TIM5_Init+0xe4>)
 80035f2:	f002 fe6b 	bl	80062cc <HAL_TIM_Base_Init>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 80035fc:	f000 f928 	bl	8003850 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003600:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003604:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003606:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800360a:	4619      	mov	r1, r3
 800360c:	481c      	ldr	r0, [pc, #112]	; (8003680 <MX_TIM5_Init+0xe4>)
 800360e:	f003 fb8f 	bl	8006d30 <HAL_TIM_ConfigClockSource>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 8003618:	f000 f91a 	bl	8003850 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800361c:	4818      	ldr	r0, [pc, #96]	; (8003680 <MX_TIM5_Init+0xe4>)
 800361e:	f002 fea4 	bl	800636a <HAL_TIM_PWM_Init>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d001      	beq.n	800362c <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8003628:	f000 f912 	bl	8003850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800362c:	2300      	movs	r3, #0
 800362e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003630:	2300      	movs	r3, #0
 8003632:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003634:	f107 0320 	add.w	r3, r7, #32
 8003638:	4619      	mov	r1, r3
 800363a:	4811      	ldr	r0, [pc, #68]	; (8003680 <MX_TIM5_Init+0xe4>)
 800363c:	f004 f852 	bl	80076e4 <HAL_TIMEx_MasterConfigSynchronization>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 8003646:	f000 f903 	bl	8003850 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800364a:	2360      	movs	r3, #96	; 0x60
 800364c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800364e:	2300      	movs	r3, #0
 8003650:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003652:	2300      	movs	r3, #0
 8003654:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003656:	2300      	movs	r3, #0
 8003658:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800365a:	1d3b      	adds	r3, r7, #4
 800365c:	2204      	movs	r2, #4
 800365e:	4619      	mov	r1, r3
 8003660:	4807      	ldr	r0, [pc, #28]	; (8003680 <MX_TIM5_Init+0xe4>)
 8003662:	f003 faa3 	bl	8006bac <HAL_TIM_PWM_ConfigChannel>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d001      	beq.n	8003670 <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 800366c:	f000 f8f0 	bl	8003850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8003670:	4803      	ldr	r0, [pc, #12]	; (8003680 <MX_TIM5_Init+0xe4>)
 8003672:	f000 fa3d 	bl	8003af0 <HAL_TIM_MspPostInit>

}
 8003676:	bf00      	nop
 8003678:	3738      	adds	r7, #56	; 0x38
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	20000324 	.word	0x20000324
 8003684:	40000c00 	.word	0x40000c00

08003688 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800368c:	4b12      	ldr	r3, [pc, #72]	; (80036d8 <MX_USART2_UART_Init+0x50>)
 800368e:	4a13      	ldr	r2, [pc, #76]	; (80036dc <MX_USART2_UART_Init+0x54>)
 8003690:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003692:	4b11      	ldr	r3, [pc, #68]	; (80036d8 <MX_USART2_UART_Init+0x50>)
 8003694:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003698:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800369a:	4b0f      	ldr	r3, [pc, #60]	; (80036d8 <MX_USART2_UART_Init+0x50>)
 800369c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80036a0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80036a2:	4b0d      	ldr	r3, [pc, #52]	; (80036d8 <MX_USART2_UART_Init+0x50>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_ODD;
 80036a8:	4b0b      	ldr	r3, [pc, #44]	; (80036d8 <MX_USART2_UART_Init+0x50>)
 80036aa:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80036ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80036b0:	4b09      	ldr	r3, [pc, #36]	; (80036d8 <MX_USART2_UART_Init+0x50>)
 80036b2:	220c      	movs	r2, #12
 80036b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036b6:	4b08      	ldr	r3, [pc, #32]	; (80036d8 <MX_USART2_UART_Init+0x50>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80036bc:	4b06      	ldr	r3, [pc, #24]	; (80036d8 <MX_USART2_UART_Init+0x50>)
 80036be:	2200      	movs	r2, #0
 80036c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80036c2:	4805      	ldr	r0, [pc, #20]	; (80036d8 <MX_USART2_UART_Init+0x50>)
 80036c4:	f004 f890 	bl	80077e8 <HAL_UART_Init>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 80036ce:	f000 f8bf 	bl	8003850 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80036d2:	bf00      	nop
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	2000036c 	.word	0x2000036c
 80036dc:	40004400 	.word	0x40004400

080036e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b08a      	sub	sp, #40	; 0x28
 80036e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036e6:	f107 0314 	add.w	r3, r7, #20
 80036ea:	2200      	movs	r2, #0
 80036ec:	601a      	str	r2, [r3, #0]
 80036ee:	605a      	str	r2, [r3, #4]
 80036f0:	609a      	str	r2, [r3, #8]
 80036f2:	60da      	str	r2, [r3, #12]
 80036f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80036f6:	2300      	movs	r3, #0
 80036f8:	613b      	str	r3, [r7, #16]
 80036fa:	4b51      	ldr	r3, [pc, #324]	; (8003840 <MX_GPIO_Init+0x160>)
 80036fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fe:	4a50      	ldr	r2, [pc, #320]	; (8003840 <MX_GPIO_Init+0x160>)
 8003700:	f043 0304 	orr.w	r3, r3, #4
 8003704:	6313      	str	r3, [r2, #48]	; 0x30
 8003706:	4b4e      	ldr	r3, [pc, #312]	; (8003840 <MX_GPIO_Init+0x160>)
 8003708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370a:	f003 0304 	and.w	r3, r3, #4
 800370e:	613b      	str	r3, [r7, #16]
 8003710:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003712:	2300      	movs	r3, #0
 8003714:	60fb      	str	r3, [r7, #12]
 8003716:	4b4a      	ldr	r3, [pc, #296]	; (8003840 <MX_GPIO_Init+0x160>)
 8003718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371a:	4a49      	ldr	r2, [pc, #292]	; (8003840 <MX_GPIO_Init+0x160>)
 800371c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003720:	6313      	str	r3, [r2, #48]	; 0x30
 8003722:	4b47      	ldr	r3, [pc, #284]	; (8003840 <MX_GPIO_Init+0x160>)
 8003724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800372a:	60fb      	str	r3, [r7, #12]
 800372c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800372e:	2300      	movs	r3, #0
 8003730:	60bb      	str	r3, [r7, #8]
 8003732:	4b43      	ldr	r3, [pc, #268]	; (8003840 <MX_GPIO_Init+0x160>)
 8003734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003736:	4a42      	ldr	r2, [pc, #264]	; (8003840 <MX_GPIO_Init+0x160>)
 8003738:	f043 0301 	orr.w	r3, r3, #1
 800373c:	6313      	str	r3, [r2, #48]	; 0x30
 800373e:	4b40      	ldr	r3, [pc, #256]	; (8003840 <MX_GPIO_Init+0x160>)
 8003740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	60bb      	str	r3, [r7, #8]
 8003748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800374a:	2300      	movs	r3, #0
 800374c:	607b      	str	r3, [r7, #4]
 800374e:	4b3c      	ldr	r3, [pc, #240]	; (8003840 <MX_GPIO_Init+0x160>)
 8003750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003752:	4a3b      	ldr	r2, [pc, #236]	; (8003840 <MX_GPIO_Init+0x160>)
 8003754:	f043 0302 	orr.w	r3, r3, #2
 8003758:	6313      	str	r3, [r2, #48]	; 0x30
 800375a:	4b39      	ldr	r3, [pc, #228]	; (8003840 <MX_GPIO_Init+0x160>)
 800375c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	607b      	str	r3, [r7, #4]
 8003764:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED_D5_Pin|DB5_Line_Pin|DB6_Line_Pin, GPIO_PIN_RESET);
 8003766:	2200      	movs	r2, #0
 8003768:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 800376c:	4835      	ldr	r0, [pc, #212]	; (8003844 <MX_GPIO_Init+0x164>)
 800376e:	f001 fccf 	bl	8005110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, E_Line_Pin|LED_D4_Pin|DB4_Line_Pin|RS_Line_Pin
 8003772:	2200      	movs	r2, #0
 8003774:	f24d 4134 	movw	r1, #54324	; 0xd434
 8003778:	4833      	ldr	r0, [pc, #204]	; (8003848 <MX_GPIO_Init+0x168>)
 800377a:	f001 fcc9 	bl	8005110 <HAL_GPIO_WritePin>
                          |R_W_Line_Pin|LED_D2_Pin|LED_D3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DB7_Line_GPIO_Port, DB7_Line_Pin, GPIO_PIN_RESET);
 800377e:	2200      	movs	r2, #0
 8003780:	2140      	movs	r1, #64	; 0x40
 8003782:	4832      	ldr	r0, [pc, #200]	; (800384c <MX_GPIO_Init+0x16c>)
 8003784:	f001 fcc4 	bl	8005110 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD2_Pin LED_D5_Pin DB5_Line_Pin DB6_Line_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED_D5_Pin|DB5_Line_Pin|DB6_Line_Pin;
 8003788:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 800378c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800378e:	2301      	movs	r3, #1
 8003790:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003792:	2300      	movs	r3, #0
 8003794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003796:	2300      	movs	r3, #0
 8003798:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800379a:	f107 0314 	add.w	r3, r7, #20
 800379e:	4619      	mov	r1, r3
 80037a0:	4828      	ldr	r0, [pc, #160]	; (8003844 <MX_GPIO_Init+0x164>)
 80037a2:	f001 fb19 	bl	8004dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80037a6:	23c0      	movs	r3, #192	; 0xc0
 80037a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80037aa:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80037ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037b0:	2301      	movs	r3, #1
 80037b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037b4:	f107 0314 	add.w	r3, r7, #20
 80037b8:	4619      	mov	r1, r3
 80037ba:	4822      	ldr	r0, [pc, #136]	; (8003844 <MX_GPIO_Init+0x164>)
 80037bc:	f001 fb0c 	bl	8004dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : E_Line_Pin LED_D4_Pin DB4_Line_Pin RS_Line_Pin
                           R_W_Line_Pin LED_D2_Pin LED_D3_Pin */
  GPIO_InitStruct.Pin = E_Line_Pin|LED_D4_Pin|DB4_Line_Pin|RS_Line_Pin
 80037c0:	f24d 4334 	movw	r3, #54324	; 0xd434
 80037c4:	617b      	str	r3, [r7, #20]
                          |R_W_Line_Pin|LED_D2_Pin|LED_D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037c6:	2301      	movs	r3, #1
 80037c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ca:	2300      	movs	r3, #0
 80037cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ce:	2300      	movs	r3, #0
 80037d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037d2:	f107 0314 	add.w	r3, r7, #20
 80037d6:	4619      	mov	r1, r3
 80037d8:	481b      	ldr	r0, [pc, #108]	; (8003848 <MX_GPIO_Init+0x168>)
 80037da:	f001 fafd 	bl	8004dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_8|GPIO_PIN_9;
 80037de:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 80037e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80037e4:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80037e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037ea:	2301      	movs	r3, #1
 80037ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037ee:	f107 0314 	add.w	r3, r7, #20
 80037f2:	4619      	mov	r1, r3
 80037f4:	4814      	ldr	r0, [pc, #80]	; (8003848 <MX_GPIO_Init+0x168>)
 80037f6:	f001 faef 	bl	8004dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DB7_Line_Pin */
  GPIO_InitStruct.Pin = DB7_Line_Pin;
 80037fa:	2340      	movs	r3, #64	; 0x40
 80037fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037fe:	2301      	movs	r3, #1
 8003800:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003802:	2300      	movs	r3, #0
 8003804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003806:	2300      	movs	r3, #0
 8003808:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DB7_Line_GPIO_Port, &GPIO_InitStruct);
 800380a:	f107 0314 	add.w	r3, r7, #20
 800380e:	4619      	mov	r1, r3
 8003810:	480e      	ldr	r0, [pc, #56]	; (800384c <MX_GPIO_Init+0x16c>)
 8003812:	f001 fae1 	bl	8004dd8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003816:	2200      	movs	r2, #0
 8003818:	2100      	movs	r1, #0
 800381a:	2017      	movs	r0, #23
 800381c:	f001 fa13 	bl	8004c46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003820:	2017      	movs	r0, #23
 8003822:	f001 fa2c 	bl	8004c7e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003826:	2200      	movs	r2, #0
 8003828:	2100      	movs	r1, #0
 800382a:	2028      	movs	r0, #40	; 0x28
 800382c:	f001 fa0b 	bl	8004c46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003830:	2028      	movs	r0, #40	; 0x28
 8003832:	f001 fa24 	bl	8004c7e <HAL_NVIC_EnableIRQ>

}
 8003836:	bf00      	nop
 8003838:	3728      	adds	r7, #40	; 0x28
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	40023800 	.word	0x40023800
 8003844:	40020000 	.word	0x40020000
 8003848:	40020400 	.word	0x40020400
 800384c:	40020800 	.word	0x40020800

08003850 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003854:	b672      	cpsid	i
}
 8003856:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003858:	e7fe      	b.n	8003858 <Error_Handler+0x8>
	...

0800385c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003862:	2300      	movs	r3, #0
 8003864:	607b      	str	r3, [r7, #4]
 8003866:	4b10      	ldr	r3, [pc, #64]	; (80038a8 <HAL_MspInit+0x4c>)
 8003868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386a:	4a0f      	ldr	r2, [pc, #60]	; (80038a8 <HAL_MspInit+0x4c>)
 800386c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003870:	6453      	str	r3, [r2, #68]	; 0x44
 8003872:	4b0d      	ldr	r3, [pc, #52]	; (80038a8 <HAL_MspInit+0x4c>)
 8003874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800387a:	607b      	str	r3, [r7, #4]
 800387c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800387e:	2300      	movs	r3, #0
 8003880:	603b      	str	r3, [r7, #0]
 8003882:	4b09      	ldr	r3, [pc, #36]	; (80038a8 <HAL_MspInit+0x4c>)
 8003884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003886:	4a08      	ldr	r2, [pc, #32]	; (80038a8 <HAL_MspInit+0x4c>)
 8003888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800388c:	6413      	str	r3, [r2, #64]	; 0x40
 800388e:	4b06      	ldr	r3, [pc, #24]	; (80038a8 <HAL_MspInit+0x4c>)
 8003890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003896:	603b      	str	r3, [r7, #0]
 8003898:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800389a:	2007      	movs	r0, #7
 800389c:	f001 f9c8 	bl	8004c30 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038a0:	bf00      	nop
 80038a2:	3708      	adds	r7, #8
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	40023800 	.word	0x40023800

080038ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b08c      	sub	sp, #48	; 0x30
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038b4:	f107 031c 	add.w	r3, r7, #28
 80038b8:	2200      	movs	r2, #0
 80038ba:	601a      	str	r2, [r3, #0]
 80038bc:	605a      	str	r2, [r3, #4]
 80038be:	609a      	str	r2, [r3, #8]
 80038c0:	60da      	str	r2, [r3, #12]
 80038c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a31      	ldr	r2, [pc, #196]	; (8003990 <HAL_ADC_MspInit+0xe4>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d15b      	bne.n	8003986 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80038ce:	2300      	movs	r3, #0
 80038d0:	61bb      	str	r3, [r7, #24]
 80038d2:	4b30      	ldr	r3, [pc, #192]	; (8003994 <HAL_ADC_MspInit+0xe8>)
 80038d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d6:	4a2f      	ldr	r2, [pc, #188]	; (8003994 <HAL_ADC_MspInit+0xe8>)
 80038d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038dc:	6453      	str	r3, [r2, #68]	; 0x44
 80038de:	4b2d      	ldr	r3, [pc, #180]	; (8003994 <HAL_ADC_MspInit+0xe8>)
 80038e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e6:	61bb      	str	r3, [r7, #24]
 80038e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038ea:	2300      	movs	r3, #0
 80038ec:	617b      	str	r3, [r7, #20]
 80038ee:	4b29      	ldr	r3, [pc, #164]	; (8003994 <HAL_ADC_MspInit+0xe8>)
 80038f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f2:	4a28      	ldr	r2, [pc, #160]	; (8003994 <HAL_ADC_MspInit+0xe8>)
 80038f4:	f043 0301 	orr.w	r3, r3, #1
 80038f8:	6313      	str	r3, [r2, #48]	; 0x30
 80038fa:	4b26      	ldr	r3, [pc, #152]	; (8003994 <HAL_ADC_MspInit+0xe8>)
 80038fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	617b      	str	r3, [r7, #20]
 8003904:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003906:	2300      	movs	r3, #0
 8003908:	613b      	str	r3, [r7, #16]
 800390a:	4b22      	ldr	r3, [pc, #136]	; (8003994 <HAL_ADC_MspInit+0xe8>)
 800390c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390e:	4a21      	ldr	r2, [pc, #132]	; (8003994 <HAL_ADC_MspInit+0xe8>)
 8003910:	f043 0304 	orr.w	r3, r3, #4
 8003914:	6313      	str	r3, [r2, #48]	; 0x30
 8003916:	4b1f      	ldr	r3, [pc, #124]	; (8003994 <HAL_ADC_MspInit+0xe8>)
 8003918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391a:	f003 0304 	and.w	r3, r3, #4
 800391e:	613b      	str	r3, [r7, #16]
 8003920:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003922:	2300      	movs	r3, #0
 8003924:	60fb      	str	r3, [r7, #12]
 8003926:	4b1b      	ldr	r3, [pc, #108]	; (8003994 <HAL_ADC_MspInit+0xe8>)
 8003928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392a:	4a1a      	ldr	r2, [pc, #104]	; (8003994 <HAL_ADC_MspInit+0xe8>)
 800392c:	f043 0302 	orr.w	r3, r3, #2
 8003930:	6313      	str	r3, [r2, #48]	; 0x30
 8003932:	4b18      	ldr	r3, [pc, #96]	; (8003994 <HAL_ADC_MspInit+0xe8>)
 8003934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	60fb      	str	r3, [r7, #12]
 800393c:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800393e:	2301      	movs	r3, #1
 8003940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003942:	2303      	movs	r3, #3
 8003944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003946:	2300      	movs	r3, #0
 8003948:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800394a:	f107 031c 	add.w	r3, r7, #28
 800394e:	4619      	mov	r1, r3
 8003950:	4811      	ldr	r0, [pc, #68]	; (8003998 <HAL_ADC_MspInit+0xec>)
 8003952:	f001 fa41 	bl	8004dd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003956:	2330      	movs	r3, #48	; 0x30
 8003958:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800395a:	2303      	movs	r3, #3
 800395c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800395e:	2300      	movs	r3, #0
 8003960:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003962:	f107 031c 	add.w	r3, r7, #28
 8003966:	4619      	mov	r1, r3
 8003968:	480c      	ldr	r0, [pc, #48]	; (800399c <HAL_ADC_MspInit+0xf0>)
 800396a:	f001 fa35 	bl	8004dd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800396e:	2302      	movs	r3, #2
 8003970:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003972:	2303      	movs	r3, #3
 8003974:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003976:	2300      	movs	r3, #0
 8003978:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800397a:	f107 031c 	add.w	r3, r7, #28
 800397e:	4619      	mov	r1, r3
 8003980:	4807      	ldr	r0, [pc, #28]	; (80039a0 <HAL_ADC_MspInit+0xf4>)
 8003982:	f001 fa29 	bl	8004dd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003986:	bf00      	nop
 8003988:	3730      	adds	r7, #48	; 0x30
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	40012000 	.word	0x40012000
 8003994:	40023800 	.word	0x40023800
 8003998:	40020000 	.word	0x40020000
 800399c:	40020800 	.word	0x40020800
 80039a0:	40020400 	.word	0x40020400

080039a4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b088      	sub	sp, #32
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80039ac:	f107 0308 	add.w	r3, r7, #8
 80039b0:	2200      	movs	r2, #0
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	605a      	str	r2, [r3, #4]
 80039b6:	609a      	str	r2, [r3, #8]
 80039b8:	60da      	str	r2, [r3, #12]
 80039ba:	611a      	str	r2, [r3, #16]
 80039bc:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a0c      	ldr	r2, [pc, #48]	; (80039f4 <HAL_RTC_MspInit+0x50>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d111      	bne.n	80039ec <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80039c8:	2302      	movs	r3, #2
 80039ca:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80039cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039d0:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80039d2:	f107 0308 	add.w	r3, r7, #8
 80039d6:	4618      	mov	r0, r3
 80039d8:	f002 f88a 	bl	8005af0 <HAL_RCCEx_PeriphCLKConfig>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80039e2:	f7ff ff35 	bl	8003850 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80039e6:	4b04      	ldr	r3, [pc, #16]	; (80039f8 <HAL_RTC_MspInit+0x54>)
 80039e8:	2201      	movs	r2, #1
 80039ea:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80039ec:	bf00      	nop
 80039ee:	3720      	adds	r7, #32
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	40002800 	.word	0x40002800
 80039f8:	42470e3c 	.word	0x42470e3c

080039fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b08c      	sub	sp, #48	; 0x30
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a04:	f107 031c 	add.w	r3, r7, #28
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]
 8003a0c:	605a      	str	r2, [r3, #4]
 8003a0e:	609a      	str	r2, [r3, #8]
 8003a10:	60da      	str	r2, [r3, #12]
 8003a12:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a1c:	d135      	bne.n	8003a8a <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a1e:	2300      	movs	r3, #0
 8003a20:	61bb      	str	r3, [r7, #24]
 8003a22:	4b2f      	ldr	r3, [pc, #188]	; (8003ae0 <HAL_TIM_Base_MspInit+0xe4>)
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	4a2e      	ldr	r2, [pc, #184]	; (8003ae0 <HAL_TIM_Base_MspInit+0xe4>)
 8003a28:	f043 0301 	orr.w	r3, r3, #1
 8003a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a2e:	4b2c      	ldr	r3, [pc, #176]	; (8003ae0 <HAL_TIM_Base_MspInit+0xe4>)
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	61bb      	str	r3, [r7, #24]
 8003a38:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	617b      	str	r3, [r7, #20]
 8003a3e:	4b28      	ldr	r3, [pc, #160]	; (8003ae0 <HAL_TIM_Base_MspInit+0xe4>)
 8003a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a42:	4a27      	ldr	r2, [pc, #156]	; (8003ae0 <HAL_TIM_Base_MspInit+0xe4>)
 8003a44:	f043 0301 	orr.w	r3, r3, #1
 8003a48:	6313      	str	r3, [r2, #48]	; 0x30
 8003a4a:	4b25      	ldr	r3, [pc, #148]	; (8003ae0 <HAL_TIM_Base_MspInit+0xe4>)
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	617b      	str	r3, [r7, #20]
 8003a54:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003a56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a60:	2300      	movs	r3, #0
 8003a62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a64:	2300      	movs	r3, #0
 8003a66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a6c:	f107 031c 	add.w	r3, r7, #28
 8003a70:	4619      	mov	r1, r3
 8003a72:	481c      	ldr	r0, [pc, #112]	; (8003ae4 <HAL_TIM_Base_MspInit+0xe8>)
 8003a74:	f001 f9b0 	bl	8004dd8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003a78:	2200      	movs	r2, #0
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	201c      	movs	r0, #28
 8003a7e:	f001 f8e2 	bl	8004c46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003a82:	201c      	movs	r0, #28
 8003a84:	f001 f8fb 	bl	8004c7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003a88:	e026      	b.n	8003ad8 <HAL_TIM_Base_MspInit+0xdc>
  else if(htim_base->Instance==TIM3)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a16      	ldr	r2, [pc, #88]	; (8003ae8 <HAL_TIM_Base_MspInit+0xec>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d10e      	bne.n	8003ab2 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a94:	2300      	movs	r3, #0
 8003a96:	613b      	str	r3, [r7, #16]
 8003a98:	4b11      	ldr	r3, [pc, #68]	; (8003ae0 <HAL_TIM_Base_MspInit+0xe4>)
 8003a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9c:	4a10      	ldr	r2, [pc, #64]	; (8003ae0 <HAL_TIM_Base_MspInit+0xe4>)
 8003a9e:	f043 0302 	orr.w	r3, r3, #2
 8003aa2:	6413      	str	r3, [r2, #64]	; 0x40
 8003aa4:	4b0e      	ldr	r3, [pc, #56]	; (8003ae0 <HAL_TIM_Base_MspInit+0xe4>)
 8003aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	613b      	str	r3, [r7, #16]
 8003aae:	693b      	ldr	r3, [r7, #16]
}
 8003ab0:	e012      	b.n	8003ad8 <HAL_TIM_Base_MspInit+0xdc>
  else if(htim_base->Instance==TIM5)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a0d      	ldr	r2, [pc, #52]	; (8003aec <HAL_TIM_Base_MspInit+0xf0>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d10d      	bne.n	8003ad8 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003abc:	2300      	movs	r3, #0
 8003abe:	60fb      	str	r3, [r7, #12]
 8003ac0:	4b07      	ldr	r3, [pc, #28]	; (8003ae0 <HAL_TIM_Base_MspInit+0xe4>)
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac4:	4a06      	ldr	r2, [pc, #24]	; (8003ae0 <HAL_TIM_Base_MspInit+0xe4>)
 8003ac6:	f043 0308 	orr.w	r3, r3, #8
 8003aca:	6413      	str	r3, [r2, #64]	; 0x40
 8003acc:	4b04      	ldr	r3, [pc, #16]	; (8003ae0 <HAL_TIM_Base_MspInit+0xe4>)
 8003ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad0:	f003 0308 	and.w	r3, r3, #8
 8003ad4:	60fb      	str	r3, [r7, #12]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
}
 8003ad8:	bf00      	nop
 8003ada:	3730      	adds	r7, #48	; 0x30
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	40023800 	.word	0x40023800
 8003ae4:	40020000 	.word	0x40020000
 8003ae8:	40000400 	.word	0x40000400
 8003aec:	40000c00 	.word	0x40000c00

08003af0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b088      	sub	sp, #32
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003af8:	f107 030c 	add.w	r3, r7, #12
 8003afc:	2200      	movs	r2, #0
 8003afe:	601a      	str	r2, [r3, #0]
 8003b00:	605a      	str	r2, [r3, #4]
 8003b02:	609a      	str	r2, [r3, #8]
 8003b04:	60da      	str	r2, [r3, #12]
 8003b06:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a12      	ldr	r2, [pc, #72]	; (8003b58 <HAL_TIM_MspPostInit+0x68>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d11d      	bne.n	8003b4e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b12:	2300      	movs	r3, #0
 8003b14:	60bb      	str	r3, [r7, #8]
 8003b16:	4b11      	ldr	r3, [pc, #68]	; (8003b5c <HAL_TIM_MspPostInit+0x6c>)
 8003b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1a:	4a10      	ldr	r2, [pc, #64]	; (8003b5c <HAL_TIM_MspPostInit+0x6c>)
 8003b1c:	f043 0301 	orr.w	r3, r3, #1
 8003b20:	6313      	str	r3, [r2, #48]	; 0x30
 8003b22:	4b0e      	ldr	r3, [pc, #56]	; (8003b5c <HAL_TIM_MspPostInit+0x6c>)
 8003b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	60bb      	str	r3, [r7, #8]
 8003b2c:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003b2e:	2302      	movs	r3, #2
 8003b30:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b32:	2302      	movs	r3, #2
 8003b34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b36:	2300      	movs	r3, #0
 8003b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003b3e:	2302      	movs	r3, #2
 8003b40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b42:	f107 030c 	add.w	r3, r7, #12
 8003b46:	4619      	mov	r1, r3
 8003b48:	4805      	ldr	r0, [pc, #20]	; (8003b60 <HAL_TIM_MspPostInit+0x70>)
 8003b4a:	f001 f945 	bl	8004dd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8003b4e:	bf00      	nop
 8003b50:	3720      	adds	r7, #32
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	40000c00 	.word	0x40000c00
 8003b5c:	40023800 	.word	0x40023800
 8003b60:	40020000 	.word	0x40020000

08003b64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b08a      	sub	sp, #40	; 0x28
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b6c:	f107 0314 	add.w	r3, r7, #20
 8003b70:	2200      	movs	r2, #0
 8003b72:	601a      	str	r2, [r3, #0]
 8003b74:	605a      	str	r2, [r3, #4]
 8003b76:	609a      	str	r2, [r3, #8]
 8003b78:	60da      	str	r2, [r3, #12]
 8003b7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a1d      	ldr	r2, [pc, #116]	; (8003bf8 <HAL_UART_MspInit+0x94>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d133      	bne.n	8003bee <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003b86:	2300      	movs	r3, #0
 8003b88:	613b      	str	r3, [r7, #16]
 8003b8a:	4b1c      	ldr	r3, [pc, #112]	; (8003bfc <HAL_UART_MspInit+0x98>)
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8e:	4a1b      	ldr	r2, [pc, #108]	; (8003bfc <HAL_UART_MspInit+0x98>)
 8003b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b94:	6413      	str	r3, [r2, #64]	; 0x40
 8003b96:	4b19      	ldr	r3, [pc, #100]	; (8003bfc <HAL_UART_MspInit+0x98>)
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9e:	613b      	str	r3, [r7, #16]
 8003ba0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	60fb      	str	r3, [r7, #12]
 8003ba6:	4b15      	ldr	r3, [pc, #84]	; (8003bfc <HAL_UART_MspInit+0x98>)
 8003ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003baa:	4a14      	ldr	r2, [pc, #80]	; (8003bfc <HAL_UART_MspInit+0x98>)
 8003bac:	f043 0301 	orr.w	r3, r3, #1
 8003bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8003bb2:	4b12      	ldr	r3, [pc, #72]	; (8003bfc <HAL_UART_MspInit+0x98>)
 8003bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	60fb      	str	r3, [r7, #12]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003bbe:	230c      	movs	r3, #12
 8003bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003bce:	2307      	movs	r3, #7
 8003bd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bd2:	f107 0314 	add.w	r3, r7, #20
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	4809      	ldr	r0, [pc, #36]	; (8003c00 <HAL_UART_MspInit+0x9c>)
 8003bda:	f001 f8fd 	bl	8004dd8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003bde:	2200      	movs	r2, #0
 8003be0:	2100      	movs	r1, #0
 8003be2:	2026      	movs	r0, #38	; 0x26
 8003be4:	f001 f82f 	bl	8004c46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003be8:	2026      	movs	r0, #38	; 0x26
 8003bea:	f001 f848 	bl	8004c7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003bee:	bf00      	nop
 8003bf0:	3728      	adds	r7, #40	; 0x28
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	40004400 	.word	0x40004400
 8003bfc:	40023800 	.word	0x40023800
 8003c00:	40020000 	.word	0x40020000

08003c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003c08:	e7fe      	b.n	8003c08 <NMI_Handler+0x4>

08003c0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c0e:	e7fe      	b.n	8003c0e <HardFault_Handler+0x4>

08003c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c14:	e7fe      	b.n	8003c14 <MemManage_Handler+0x4>

08003c16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c16:	b480      	push	{r7}
 8003c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c1a:	e7fe      	b.n	8003c1a <BusFault_Handler+0x4>

08003c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c20:	e7fe      	b.n	8003c20 <UsageFault_Handler+0x4>

08003c22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c22:	b480      	push	{r7}
 8003c24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c26:	bf00      	nop
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c34:	bf00      	nop
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr

08003c3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c42:	bf00      	nop
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c50:	f000 fae8 	bl	8004224 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c54:	bf00      	nop
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_8) != RESET){
 8003c5c:	4b8a      	ldr	r3, [pc, #552]	; (8003e88 <EXTI9_5_IRQHandler+0x230>)
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d039      	beq.n	8003cdc <EXTI9_5_IRQHandler+0x84>


		if(HAL_GetTick() - ticks_pressed >= 20){
 8003c68:	f000 faf0 	bl	800424c <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	4b87      	ldr	r3, [pc, #540]	; (8003e8c <EXTI9_5_IRQHandler+0x234>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b13      	cmp	r3, #19
 8003c76:	d92c      	bls.n	8003cd2 <EXTI9_5_IRQHandler+0x7a>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == 0){
 8003c78:	4b85      	ldr	r3, [pc, #532]	; (8003e90 <EXTI9_5_IRQHandler+0x238>)
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d112      	bne.n	8003ca8 <EXTI9_5_IRQHandler+0x50>
 8003c82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003c86:	4883      	ldr	r0, [pc, #524]	; (8003e94 <EXTI9_5_IRQHandler+0x23c>)
 8003c88:	f001 fa2a 	bl	80050e0 <HAL_GPIO_ReadPin>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10a      	bne.n	8003ca8 <EXTI9_5_IRQHandler+0x50>
				button_state =0 ; // stable low reached
 8003c92:	4b7f      	ldr	r3, [pc, #508]	; (8003e90 <EXTI9_5_IRQHandler+0x238>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 8003c98:	f000 fad8 	bl	800424c <HAL_GetTick>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	4a7b      	ldr	r2, [pc, #492]	; (8003e8c <EXTI9_5_IRQHandler+0x234>)
 8003ca0:	6013      	str	r3, [r2, #0]

				g_left_button_pressed =1;
 8003ca2:	4b7d      	ldr	r3, [pc, #500]	; (8003e98 <EXTI9_5_IRQHandler+0x240>)
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOB ,GPIO_PIN_8) == 1 ){
 8003ca8:	4b79      	ldr	r3, [pc, #484]	; (8003e90 <EXTI9_5_IRQHandler+0x238>)
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10f      	bne.n	8003cd2 <EXTI9_5_IRQHandler+0x7a>
 8003cb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003cb6:	4877      	ldr	r0, [pc, #476]	; (8003e94 <EXTI9_5_IRQHandler+0x23c>)
 8003cb8:	f001 fa12 	bl	80050e0 <HAL_GPIO_ReadPin>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d107      	bne.n	8003cd2 <EXTI9_5_IRQHandler+0x7a>
				ticks_pressed = HAL_GetTick() ;
 8003cc2:	f000 fac3 	bl	800424c <HAL_GetTick>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	4a70      	ldr	r2, [pc, #448]	; (8003e8c <EXTI9_5_IRQHandler+0x234>)
 8003cca:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 8003ccc:	4b70      	ldr	r3, [pc, #448]	; (8003e90 <EXTI9_5_IRQHandler+0x238>)
 8003cce:	2201      	movs	r2, #1
 8003cd0:	701a      	strb	r2, [r3, #0]

			}
		}
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8) ;
 8003cd2:	4b6d      	ldr	r3, [pc, #436]	; (8003e88 <EXTI9_5_IRQHandler+0x230>)
 8003cd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cd8:	615a      	str	r2, [r3, #20]
 8003cda:	e0c5      	b.n	8003e68 <EXTI9_5_IRQHandler+0x210>
	}

	else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_9) != RESET){
 8003cdc:	4b6a      	ldr	r3, [pc, #424]	; (8003e88 <EXTI9_5_IRQHandler+0x230>)
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d039      	beq.n	8003d5c <EXTI9_5_IRQHandler+0x104>



		if(HAL_GetTick() - ticks_pressed >= 20){
 8003ce8:	f000 fab0 	bl	800424c <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	4b67      	ldr	r3, [pc, #412]	; (8003e8c <EXTI9_5_IRQHandler+0x234>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	2b13      	cmp	r3, #19
 8003cf6:	d92c      	bls.n	8003d52 <EXTI9_5_IRQHandler+0xfa>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0){
 8003cf8:	4b65      	ldr	r3, [pc, #404]	; (8003e90 <EXTI9_5_IRQHandler+0x238>)
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d112      	bne.n	8003d28 <EXTI9_5_IRQHandler+0xd0>
 8003d02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d06:	4863      	ldr	r0, [pc, #396]	; (8003e94 <EXTI9_5_IRQHandler+0x23c>)
 8003d08:	f001 f9ea 	bl	80050e0 <HAL_GPIO_ReadPin>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10a      	bne.n	8003d28 <EXTI9_5_IRQHandler+0xd0>
				button_state =0 ; // stable low reached
 8003d12:	4b5f      	ldr	r3, [pc, #380]	; (8003e90 <EXTI9_5_IRQHandler+0x238>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 8003d18:	f000 fa98 	bl	800424c <HAL_GetTick>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	4a5b      	ldr	r2, [pc, #364]	; (8003e8c <EXTI9_5_IRQHandler+0x234>)
 8003d20:	6013      	str	r3, [r2, #0]

				g_top_button_pressed = 1 ;
 8003d22:	4b5e      	ldr	r3, [pc, #376]	; (8003e9c <EXTI9_5_IRQHandler+0x244>)
 8003d24:	2201      	movs	r2, #1
 8003d26:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOB ,GPIO_PIN_9) == 1 ){
 8003d28:	4b59      	ldr	r3, [pc, #356]	; (8003e90 <EXTI9_5_IRQHandler+0x238>)
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10f      	bne.n	8003d52 <EXTI9_5_IRQHandler+0xfa>
 8003d32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d36:	4857      	ldr	r0, [pc, #348]	; (8003e94 <EXTI9_5_IRQHandler+0x23c>)
 8003d38:	f001 f9d2 	bl	80050e0 <HAL_GPIO_ReadPin>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d107      	bne.n	8003d52 <EXTI9_5_IRQHandler+0xfa>
				ticks_pressed = HAL_GetTick() ;
 8003d42:	f000 fa83 	bl	800424c <HAL_GetTick>
 8003d46:	4603      	mov	r3, r0
 8003d48:	4a50      	ldr	r2, [pc, #320]	; (8003e8c <EXTI9_5_IRQHandler+0x234>)
 8003d4a:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 8003d4c:	4b50      	ldr	r3, [pc, #320]	; (8003e90 <EXTI9_5_IRQHandler+0x238>)
 8003d4e:	2201      	movs	r2, #1
 8003d50:	701a      	strb	r2, [r3, #0]

			}
		}

		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_9) ;
 8003d52:	4b4d      	ldr	r3, [pc, #308]	; (8003e88 <EXTI9_5_IRQHandler+0x230>)
 8003d54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d58:	615a      	str	r2, [r3, #20]
 8003d5a:	e085      	b.n	8003e68 <EXTI9_5_IRQHandler+0x210>

	}

	else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_6) != RESET){
 8003d5c:	4b4a      	ldr	r3, [pc, #296]	; (8003e88 <EXTI9_5_IRQHandler+0x230>)
 8003d5e:	695b      	ldr	r3, [r3, #20]
 8003d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d036      	beq.n	8003dd6 <EXTI9_5_IRQHandler+0x17e>



		if(HAL_GetTick() - ticks_pressed >= 20){
 8003d68:	f000 fa70 	bl	800424c <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	4b47      	ldr	r3, [pc, #284]	; (8003e8c <EXTI9_5_IRQHandler+0x234>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b13      	cmp	r3, #19
 8003d76:	d92a      	bls.n	8003dce <EXTI9_5_IRQHandler+0x176>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 0){
 8003d78:	4b45      	ldr	r3, [pc, #276]	; (8003e90 <EXTI9_5_IRQHandler+0x238>)
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d111      	bne.n	8003da6 <EXTI9_5_IRQHandler+0x14e>
 8003d82:	2140      	movs	r1, #64	; 0x40
 8003d84:	4846      	ldr	r0, [pc, #280]	; (8003ea0 <EXTI9_5_IRQHandler+0x248>)
 8003d86:	f001 f9ab 	bl	80050e0 <HAL_GPIO_ReadPin>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10a      	bne.n	8003da6 <EXTI9_5_IRQHandler+0x14e>
				button_state =0 ; // stable low reached
 8003d90:	4b3f      	ldr	r3, [pc, #252]	; (8003e90 <EXTI9_5_IRQHandler+0x238>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 8003d96:	f000 fa59 	bl	800424c <HAL_GetTick>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	4a3b      	ldr	r2, [pc, #236]	; (8003e8c <EXTI9_5_IRQHandler+0x234>)
 8003d9e:	6013      	str	r3, [r2, #0]

				g_middle_button_pressed =1 ;
 8003da0:	4b40      	ldr	r3, [pc, #256]	; (8003ea4 <EXTI9_5_IRQHandler+0x24c>)
 8003da2:	2201      	movs	r2, #1
 8003da4:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOA ,GPIO_PIN_6) == 1 ){
 8003da6:	4b3a      	ldr	r3, [pc, #232]	; (8003e90 <EXTI9_5_IRQHandler+0x238>)
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10e      	bne.n	8003dce <EXTI9_5_IRQHandler+0x176>
 8003db0:	2140      	movs	r1, #64	; 0x40
 8003db2:	483b      	ldr	r0, [pc, #236]	; (8003ea0 <EXTI9_5_IRQHandler+0x248>)
 8003db4:	f001 f994 	bl	80050e0 <HAL_GPIO_ReadPin>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d107      	bne.n	8003dce <EXTI9_5_IRQHandler+0x176>
				ticks_pressed = HAL_GetTick() ;
 8003dbe:	f000 fa45 	bl	800424c <HAL_GetTick>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	4a31      	ldr	r2, [pc, #196]	; (8003e8c <EXTI9_5_IRQHandler+0x234>)
 8003dc6:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 8003dc8:	4b31      	ldr	r3, [pc, #196]	; (8003e90 <EXTI9_5_IRQHandler+0x238>)
 8003dca:	2201      	movs	r2, #1
 8003dcc:	701a      	strb	r2, [r3, #0]

			}
		}


		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6) ;
 8003dce:	4b2e      	ldr	r3, [pc, #184]	; (8003e88 <EXTI9_5_IRQHandler+0x230>)
 8003dd0:	2240      	movs	r2, #64	; 0x40
 8003dd2:	615a      	str	r2, [r3, #20]
 8003dd4:	e048      	b.n	8003e68 <EXTI9_5_IRQHandler+0x210>

	}

	else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET){
 8003dd6:	4b2c      	ldr	r3, [pc, #176]	; (8003e88 <EXTI9_5_IRQHandler+0x230>)
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d036      	beq.n	8003e50 <EXTI9_5_IRQHandler+0x1f8>




		if(HAL_GetTick() - ticks_pressed >= 20){
 8003de2:	f000 fa33 	bl	800424c <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	4b28      	ldr	r3, [pc, #160]	; (8003e8c <EXTI9_5_IRQHandler+0x234>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b13      	cmp	r3, #19
 8003df0:	d92a      	bls.n	8003e48 <EXTI9_5_IRQHandler+0x1f0>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 0){
 8003df2:	4b27      	ldr	r3, [pc, #156]	; (8003e90 <EXTI9_5_IRQHandler+0x238>)
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d111      	bne.n	8003e20 <EXTI9_5_IRQHandler+0x1c8>
 8003dfc:	2180      	movs	r1, #128	; 0x80
 8003dfe:	4828      	ldr	r0, [pc, #160]	; (8003ea0 <EXTI9_5_IRQHandler+0x248>)
 8003e00:	f001 f96e 	bl	80050e0 <HAL_GPIO_ReadPin>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10a      	bne.n	8003e20 <EXTI9_5_IRQHandler+0x1c8>
				button_state =0 ; // stable low reached
 8003e0a:	4b21      	ldr	r3, [pc, #132]	; (8003e90 <EXTI9_5_IRQHandler+0x238>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 8003e10:	f000 fa1c 	bl	800424c <HAL_GetTick>
 8003e14:	4603      	mov	r3, r0
 8003e16:	4a1d      	ldr	r2, [pc, #116]	; (8003e8c <EXTI9_5_IRQHandler+0x234>)
 8003e18:	6013      	str	r3, [r2, #0]

				g_right_button_pressed = 1 ;
 8003e1a:	4b23      	ldr	r3, [pc, #140]	; (8003ea8 <EXTI9_5_IRQHandler+0x250>)
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOA ,GPIO_PIN_7) == 1 ){
 8003e20:	4b1b      	ldr	r3, [pc, #108]	; (8003e90 <EXTI9_5_IRQHandler+0x238>)
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10e      	bne.n	8003e48 <EXTI9_5_IRQHandler+0x1f0>
 8003e2a:	2180      	movs	r1, #128	; 0x80
 8003e2c:	481c      	ldr	r0, [pc, #112]	; (8003ea0 <EXTI9_5_IRQHandler+0x248>)
 8003e2e:	f001 f957 	bl	80050e0 <HAL_GPIO_ReadPin>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d107      	bne.n	8003e48 <EXTI9_5_IRQHandler+0x1f0>
				ticks_pressed = HAL_GetTick() ;
 8003e38:	f000 fa08 	bl	800424c <HAL_GetTick>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	4a13      	ldr	r2, [pc, #76]	; (8003e8c <EXTI9_5_IRQHandler+0x234>)
 8003e40:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 8003e42:	4b13      	ldr	r3, [pc, #76]	; (8003e90 <EXTI9_5_IRQHandler+0x238>)
 8003e44:	2201      	movs	r2, #1
 8003e46:	701a      	strb	r2, [r3, #0]

			}
		}
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7) ;
 8003e48:	4b0f      	ldr	r3, [pc, #60]	; (8003e88 <EXTI9_5_IRQHandler+0x230>)
 8003e4a:	2280      	movs	r2, #128	; 0x80
 8003e4c:	615a      	str	r2, [r3, #20]
 8003e4e:	e00b      	b.n	8003e68 <EXTI9_5_IRQHandler+0x210>
	}

	else{

		if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET){
 8003e50:	4b0d      	ldr	r3, [pc, #52]	; (8003e88 <EXTI9_5_IRQHandler+0x230>)
 8003e52:	695b      	ldr	r3, [r3, #20]
 8003e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d005      	beq.n	8003e68 <EXTI9_5_IRQHandler+0x210>

			g_bottom_button_pressed = 1 ;
 8003e5c:	4b13      	ldr	r3, [pc, #76]	; (8003eac <EXTI9_5_IRQHandler+0x254>)
 8003e5e:	2201      	movs	r2, #1
 8003e60:	701a      	strb	r2, [r3, #0]

			__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7) ;
 8003e62:	4b09      	ldr	r3, [pc, #36]	; (8003e88 <EXTI9_5_IRQHandler+0x230>)
 8003e64:	2280      	movs	r2, #128	; 0x80
 8003e66:	615a      	str	r2, [r3, #20]
		}
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8003e68:	2040      	movs	r0, #64	; 0x40
 8003e6a:	f001 f985 	bl	8005178 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003e6e:	2080      	movs	r0, #128	; 0x80
 8003e70:	f001 f982 	bl	8005178 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003e74:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003e78:	f001 f97e 	bl	8005178 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8003e7c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003e80:	f001 f97a 	bl	8005178 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003e84:	bf00      	nop
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	40013c00 	.word	0x40013c00
 8003e8c:	20000550 	.word	0x20000550
 8003e90:	20000033 	.word	0x20000033
 8003e94:	40020400 	.word	0x40020400
 8003e98:	20000548 	.word	0x20000548
 8003e9c:	2000054a 	.word	0x2000054a
 8003ea0:	40020000 	.word	0x40020000
 8003ea4:	2000054c 	.word	0x2000054c
 8003ea8:	20000549 	.word	0x20000549
 8003eac:	2000054b 	.word	0x2000054b

08003eb0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003eb4:	4802      	ldr	r0, [pc, #8]	; (8003ec0 <TIM2_IRQHandler+0x10>)
 8003eb6:	f002 fcd5 	bl	8006864 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003eba:	bf00      	nop
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	20000294 	.word	0x20000294

08003ec4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003ec8:	4802      	ldr	r0, [pc, #8]	; (8003ed4 <USART2_IRQHandler+0x10>)
 8003eca:	f003 fd4f 	bl	800796c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003ece:	bf00      	nop
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	2000036c 	.word	0x2000036c

08003ed8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */


	if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_13) != RESET){
 8003edc:	4b22      	ldr	r3, [pc, #136]	; (8003f68 <EXTI15_10_IRQHandler+0x90>)
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d038      	beq.n	8003f5a <EXTI15_10_IRQHandler+0x82>

		if(HAL_GetTick() - ticks_pressed >= 20){
 8003ee8:	f000 f9b0 	bl	800424c <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	4b1f      	ldr	r3, [pc, #124]	; (8003f6c <EXTI15_10_IRQHandler+0x94>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	2b13      	cmp	r3, #19
 8003ef6:	d92c      	bls.n	8003f52 <EXTI15_10_IRQHandler+0x7a>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 0){
 8003ef8:	4b1d      	ldr	r3, [pc, #116]	; (8003f70 <EXTI15_10_IRQHandler+0x98>)
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d112      	bne.n	8003f28 <EXTI15_10_IRQHandler+0x50>
 8003f02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003f06:	481b      	ldr	r0, [pc, #108]	; (8003f74 <EXTI15_10_IRQHandler+0x9c>)
 8003f08:	f001 f8ea 	bl	80050e0 <HAL_GPIO_ReadPin>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10a      	bne.n	8003f28 <EXTI15_10_IRQHandler+0x50>
				button_state =0 ; // stable low reached
 8003f12:	4b17      	ldr	r3, [pc, #92]	; (8003f70 <EXTI15_10_IRQHandler+0x98>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 8003f18:	f000 f998 	bl	800424c <HAL_GetTick>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	4a13      	ldr	r2, [pc, #76]	; (8003f6c <EXTI15_10_IRQHandler+0x94>)
 8003f20:	6013      	str	r3, [r2, #0]

				g_bottom_button_pressed = 1 ;
 8003f22:	4b15      	ldr	r3, [pc, #84]	; (8003f78 <EXTI15_10_IRQHandler+0xa0>)
 8003f24:	2201      	movs	r2, #1
 8003f26:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOB ,GPIO_PIN_13) == 1 ){
 8003f28:	4b11      	ldr	r3, [pc, #68]	; (8003f70 <EXTI15_10_IRQHandler+0x98>)
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10f      	bne.n	8003f52 <EXTI15_10_IRQHandler+0x7a>
 8003f32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003f36:	480f      	ldr	r0, [pc, #60]	; (8003f74 <EXTI15_10_IRQHandler+0x9c>)
 8003f38:	f001 f8d2 	bl	80050e0 <HAL_GPIO_ReadPin>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d107      	bne.n	8003f52 <EXTI15_10_IRQHandler+0x7a>
				ticks_pressed = HAL_GetTick() ;
 8003f42:	f000 f983 	bl	800424c <HAL_GetTick>
 8003f46:	4603      	mov	r3, r0
 8003f48:	4a08      	ldr	r2, [pc, #32]	; (8003f6c <EXTI15_10_IRQHandler+0x94>)
 8003f4a:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 8003f4c:	4b08      	ldr	r3, [pc, #32]	; (8003f70 <EXTI15_10_IRQHandler+0x98>)
 8003f4e:	2201      	movs	r2, #1
 8003f50:	701a      	strb	r2, [r3, #0]

			}
		}

		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13) ;
 8003f52:	4b05      	ldr	r3, [pc, #20]	; (8003f68 <EXTI15_10_IRQHandler+0x90>)
 8003f54:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f58:	615a      	str	r2, [r3, #20]
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003f5a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003f5e:	f001 f90b 	bl	8005178 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003f62:	bf00      	nop
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	40013c00 	.word	0x40013c00
 8003f6c:	20000550 	.word	0x20000550
 8003f70:	20000033 	.word	0x20000033
 8003f74:	40020400 	.word	0x40020400
 8003f78:	2000054b 	.word	0x2000054b

08003f7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	af00      	add	r7, sp, #0
  return 1;
 8003f80:	2301      	movs	r3, #1
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <_kill>:

int _kill(int pid, int sig)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003f96:	f004 fbe3 	bl	8008760 <__errno>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2216      	movs	r2, #22
 8003f9e:	601a      	str	r2, [r3, #0]
  return -1;
 8003fa0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3708      	adds	r7, #8
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <_exit>:

void _exit (int status)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f7ff ffe7 	bl	8003f8c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003fbe:	e7fe      	b.n	8003fbe <_exit+0x12>

08003fc0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b086      	sub	sp, #24
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fcc:	2300      	movs	r3, #0
 8003fce:	617b      	str	r3, [r7, #20]
 8003fd0:	e00a      	b.n	8003fe8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003fd2:	f3af 8000 	nop.w
 8003fd6:	4601      	mov	r1, r0
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	1c5a      	adds	r2, r3, #1
 8003fdc:	60ba      	str	r2, [r7, #8]
 8003fde:	b2ca      	uxtb	r2, r1
 8003fe0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	617b      	str	r3, [r7, #20]
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	dbf0      	blt.n	8003fd2 <_read+0x12>
  }

  return len;
 8003ff0:	687b      	ldr	r3, [r7, #4]
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3718      	adds	r7, #24
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b086      	sub	sp, #24
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	60f8      	str	r0, [r7, #12]
 8004002:	60b9      	str	r1, [r7, #8]
 8004004:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004006:	2300      	movs	r3, #0
 8004008:	617b      	str	r3, [r7, #20]
 800400a:	e009      	b.n	8004020 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	1c5a      	adds	r2, r3, #1
 8004010:	60ba      	str	r2, [r7, #8]
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	4618      	mov	r0, r3
 8004016:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	3301      	adds	r3, #1
 800401e:	617b      	str	r3, [r7, #20]
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	429a      	cmp	r2, r3
 8004026:	dbf1      	blt.n	800400c <_write+0x12>
  }
  return len;
 8004028:	687b      	ldr	r3, [r7, #4]
}
 800402a:	4618      	mov	r0, r3
 800402c:	3718      	adds	r7, #24
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <_close>:

int _close(int file)
{
 8004032:	b480      	push	{r7}
 8004034:	b083      	sub	sp, #12
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800403a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800403e:	4618      	mov	r0, r3
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr

0800404a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800404a:	b480      	push	{r7}
 800404c:	b083      	sub	sp, #12
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
 8004052:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800405a:	605a      	str	r2, [r3, #4]
  return 0;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <_isatty>:

int _isatty(int file)
{
 800406a:	b480      	push	{r7}
 800406c:	b083      	sub	sp, #12
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004072:	2301      	movs	r3, #1
}
 8004074:	4618      	mov	r0, r3
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3714      	adds	r7, #20
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
	...

0800409c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80040a4:	4a14      	ldr	r2, [pc, #80]	; (80040f8 <_sbrk+0x5c>)
 80040a6:	4b15      	ldr	r3, [pc, #84]	; (80040fc <_sbrk+0x60>)
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80040b0:	4b13      	ldr	r3, [pc, #76]	; (8004100 <_sbrk+0x64>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d102      	bne.n	80040be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80040b8:	4b11      	ldr	r3, [pc, #68]	; (8004100 <_sbrk+0x64>)
 80040ba:	4a12      	ldr	r2, [pc, #72]	; (8004104 <_sbrk+0x68>)
 80040bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80040be:	4b10      	ldr	r3, [pc, #64]	; (8004100 <_sbrk+0x64>)
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4413      	add	r3, r2
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d207      	bcs.n	80040dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80040cc:	f004 fb48 	bl	8008760 <__errno>
 80040d0:	4603      	mov	r3, r0
 80040d2:	220c      	movs	r2, #12
 80040d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80040d6:	f04f 33ff 	mov.w	r3, #4294967295
 80040da:	e009      	b.n	80040f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80040dc:	4b08      	ldr	r3, [pc, #32]	; (8004100 <_sbrk+0x64>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80040e2:	4b07      	ldr	r3, [pc, #28]	; (8004100 <_sbrk+0x64>)
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4413      	add	r3, r2
 80040ea:	4a05      	ldr	r2, [pc, #20]	; (8004100 <_sbrk+0x64>)
 80040ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80040ee:	68fb      	ldr	r3, [r7, #12]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3718      	adds	r7, #24
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	20020000 	.word	0x20020000
 80040fc:	00000400 	.word	0x00000400
 8004100:	20000558 	.word	0x20000558
 8004104:	20000570 	.word	0x20000570

08004108 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004108:	b480      	push	{r7}
 800410a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800410c:	4b06      	ldr	r3, [pc, #24]	; (8004128 <SystemInit+0x20>)
 800410e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004112:	4a05      	ldr	r2, [pc, #20]	; (8004128 <SystemInit+0x20>)
 8004114:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004118:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800411c:	bf00      	nop
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	e000ed00 	.word	0xe000ed00

0800412c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800412c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004164 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004130:	480d      	ldr	r0, [pc, #52]	; (8004168 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004132:	490e      	ldr	r1, [pc, #56]	; (800416c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004134:	4a0e      	ldr	r2, [pc, #56]	; (8004170 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004136:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004138:	e002      	b.n	8004140 <LoopCopyDataInit>

0800413a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800413a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800413c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800413e:	3304      	adds	r3, #4

08004140 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004140:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004142:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004144:	d3f9      	bcc.n	800413a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004146:	4a0b      	ldr	r2, [pc, #44]	; (8004174 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004148:	4c0b      	ldr	r4, [pc, #44]	; (8004178 <LoopFillZerobss+0x26>)
  movs r3, #0
 800414a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800414c:	e001      	b.n	8004152 <LoopFillZerobss>

0800414e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800414e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004150:	3204      	adds	r2, #4

08004152 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004152:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004154:	d3fb      	bcc.n	800414e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004156:	f7ff ffd7 	bl	8004108 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800415a:	f004 fb07 	bl	800876c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800415e:	f7fe ffa9 	bl	80030b4 <main>
  bx  lr    
 8004162:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004164:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004168:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800416c:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8004170:	0800c910 	.word	0x0800c910
  ldr r2, =_sbss
 8004174:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8004178:	20000570 	.word	0x20000570

0800417c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800417c:	e7fe      	b.n	800417c <ADC_IRQHandler>
	...

08004180 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004184:	4b0e      	ldr	r3, [pc, #56]	; (80041c0 <HAL_Init+0x40>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a0d      	ldr	r2, [pc, #52]	; (80041c0 <HAL_Init+0x40>)
 800418a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800418e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004190:	4b0b      	ldr	r3, [pc, #44]	; (80041c0 <HAL_Init+0x40>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a0a      	ldr	r2, [pc, #40]	; (80041c0 <HAL_Init+0x40>)
 8004196:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800419a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800419c:	4b08      	ldr	r3, [pc, #32]	; (80041c0 <HAL_Init+0x40>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a07      	ldr	r2, [pc, #28]	; (80041c0 <HAL_Init+0x40>)
 80041a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041a8:	2003      	movs	r0, #3
 80041aa:	f000 fd41 	bl	8004c30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80041ae:	2000      	movs	r0, #0
 80041b0:	f000 f808 	bl	80041c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80041b4:	f7ff fb52 	bl	800385c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	40023c00 	.word	0x40023c00

080041c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80041cc:	4b12      	ldr	r3, [pc, #72]	; (8004218 <HAL_InitTick+0x54>)
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	4b12      	ldr	r3, [pc, #72]	; (800421c <HAL_InitTick+0x58>)
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	4619      	mov	r1, r3
 80041d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041da:	fbb3 f3f1 	udiv	r3, r3, r1
 80041de:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e2:	4618      	mov	r0, r3
 80041e4:	f000 fd59 	bl	8004c9a <HAL_SYSTICK_Config>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e00e      	b.n	8004210 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2b0f      	cmp	r3, #15
 80041f6:	d80a      	bhi.n	800420e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80041f8:	2200      	movs	r2, #0
 80041fa:	6879      	ldr	r1, [r7, #4]
 80041fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004200:	f000 fd21 	bl	8004c46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004204:	4a06      	ldr	r2, [pc, #24]	; (8004220 <HAL_InitTick+0x5c>)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800420a:	2300      	movs	r3, #0
 800420c:	e000      	b.n	8004210 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
}
 8004210:	4618      	mov	r0, r3
 8004212:	3708      	adds	r7, #8
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	20000034 	.word	0x20000034
 800421c:	2000003c 	.word	0x2000003c
 8004220:	20000038 	.word	0x20000038

08004224 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004228:	4b06      	ldr	r3, [pc, #24]	; (8004244 <HAL_IncTick+0x20>)
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	461a      	mov	r2, r3
 800422e:	4b06      	ldr	r3, [pc, #24]	; (8004248 <HAL_IncTick+0x24>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4413      	add	r3, r2
 8004234:	4a04      	ldr	r2, [pc, #16]	; (8004248 <HAL_IncTick+0x24>)
 8004236:	6013      	str	r3, [r2, #0]
}
 8004238:	bf00      	nop
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	2000003c 	.word	0x2000003c
 8004248:	2000055c 	.word	0x2000055c

0800424c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800424c:	b480      	push	{r7}
 800424e:	af00      	add	r7, sp, #0
  return uwTick;
 8004250:	4b03      	ldr	r3, [pc, #12]	; (8004260 <HAL_GetTick+0x14>)
 8004252:	681b      	ldr	r3, [r3, #0]
}
 8004254:	4618      	mov	r0, r3
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	2000055c 	.word	0x2000055c

08004264 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800426c:	f7ff ffee 	bl	800424c <HAL_GetTick>
 8004270:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800427c:	d005      	beq.n	800428a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800427e:	4b0a      	ldr	r3, [pc, #40]	; (80042a8 <HAL_Delay+0x44>)
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	461a      	mov	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	4413      	add	r3, r2
 8004288:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800428a:	bf00      	nop
 800428c:	f7ff ffde 	bl	800424c <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	429a      	cmp	r2, r3
 800429a:	d8f7      	bhi.n	800428c <HAL_Delay+0x28>
  {
  }
}
 800429c:	bf00      	nop
 800429e:	bf00      	nop
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	2000003c 	.word	0x2000003c

080042ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042b4:	2300      	movs	r3, #0
 80042b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d101      	bne.n	80042c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e033      	b.n	800432a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d109      	bne.n	80042de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7ff faee 	bl	80038ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e2:	f003 0310 	and.w	r3, r3, #16
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d118      	bne.n	800431c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80042f2:	f023 0302 	bic.w	r3, r3, #2
 80042f6:	f043 0202 	orr.w	r2, r3, #2
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 faca 	bl	8004898 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430e:	f023 0303 	bic.w	r3, r3, #3
 8004312:	f043 0201 	orr.w	r2, r3, #1
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	641a      	str	r2, [r3, #64]	; 0x40
 800431a:	e001      	b.n	8004320 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004328:	7bfb      	ldrb	r3, [r7, #15]
}
 800432a:	4618      	mov	r0, r3
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
	...

08004334 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800433c:	2300      	movs	r3, #0
 800433e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004346:	2b01      	cmp	r3, #1
 8004348:	d101      	bne.n	800434e <HAL_ADC_Start+0x1a>
 800434a:	2302      	movs	r3, #2
 800434c:	e097      	b.n	800447e <HAL_ADC_Start+0x14a>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	f003 0301 	and.w	r3, r3, #1
 8004360:	2b01      	cmp	r3, #1
 8004362:	d018      	beq.n	8004396 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	689a      	ldr	r2, [r3, #8]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f042 0201 	orr.w	r2, r2, #1
 8004372:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004374:	4b45      	ldr	r3, [pc, #276]	; (800448c <HAL_ADC_Start+0x158>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a45      	ldr	r2, [pc, #276]	; (8004490 <HAL_ADC_Start+0x15c>)
 800437a:	fba2 2303 	umull	r2, r3, r2, r3
 800437e:	0c9a      	lsrs	r2, r3, #18
 8004380:	4613      	mov	r3, r2
 8004382:	005b      	lsls	r3, r3, #1
 8004384:	4413      	add	r3, r2
 8004386:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004388:	e002      	b.n	8004390 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	3b01      	subs	r3, #1
 800438e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1f9      	bne.n	800438a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d15f      	bne.n	8004464 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80043ac:	f023 0301 	bic.w	r3, r3, #1
 80043b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d007      	beq.n	80043d6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80043ce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043e2:	d106      	bne.n	80043f2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e8:	f023 0206 	bic.w	r2, r3, #6
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	645a      	str	r2, [r3, #68]	; 0x44
 80043f0:	e002      	b.n	80043f8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004400:	4b24      	ldr	r3, [pc, #144]	; (8004494 <HAL_ADC_Start+0x160>)
 8004402:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800440c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f003 031f 	and.w	r3, r3, #31
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10f      	bne.n	800443a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d129      	bne.n	800447c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	689a      	ldr	r2, [r3, #8]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004436:	609a      	str	r2, [r3, #8]
 8004438:	e020      	b.n	800447c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a16      	ldr	r2, [pc, #88]	; (8004498 <HAL_ADC_Start+0x164>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d11b      	bne.n	800447c <HAL_ADC_Start+0x148>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d114      	bne.n	800447c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	689a      	ldr	r2, [r3, #8]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004460:	609a      	str	r2, [r3, #8]
 8004462:	e00b      	b.n	800447c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004468:	f043 0210 	orr.w	r2, r3, #16
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004474:	f043 0201 	orr.w	r2, r3, #1
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3714      	adds	r7, #20
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	20000034 	.word	0x20000034
 8004490:	431bde83 	.word	0x431bde83
 8004494:	40012300 	.word	0x40012300
 8004498:	40012000 	.word	0x40012000

0800449c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d101      	bne.n	80044b2 <HAL_ADC_Stop+0x16>
 80044ae:	2302      	movs	r3, #2
 80044b0:	e021      	b.n	80044f6 <HAL_ADC_Stop+0x5a>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2201      	movs	r2, #1
 80044b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	689a      	ldr	r2, [r3, #8]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 0201 	bic.w	r2, r2, #1
 80044c8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d109      	bne.n	80044ec <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044dc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80044e0:	f023 0301 	bic.w	r3, r3, #1
 80044e4:	f043 0201 	orr.w	r2, r3, #1
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr

08004502 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b084      	sub	sp, #16
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
 800450a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800450c:	2300      	movs	r3, #0
 800450e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800451a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800451e:	d113      	bne.n	8004548 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800452a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800452e:	d10b      	bne.n	8004548 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004534:	f043 0220 	orr.w	r2, r3, #32
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e063      	b.n	8004610 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004548:	f7ff fe80 	bl	800424c <HAL_GetTick>
 800454c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800454e:	e021      	b.n	8004594 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004556:	d01d      	beq.n	8004594 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d007      	beq.n	800456e <HAL_ADC_PollForConversion+0x6c>
 800455e:	f7ff fe75 	bl	800424c <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	683a      	ldr	r2, [r7, #0]
 800456a:	429a      	cmp	r2, r3
 800456c:	d212      	bcs.n	8004594 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b02      	cmp	r3, #2
 800457a:	d00b      	beq.n	8004594 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004580:	f043 0204 	orr.w	r2, r3, #4
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e03d      	b.n	8004610 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d1d6      	bne.n	8004550 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f06f 0212 	mvn.w	r2, #18
 80045aa:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d123      	bne.n	800460e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d11f      	bne.n	800460e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d006      	beq.n	80045ea <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d111      	bne.n	800460e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d105      	bne.n	800460e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004606:	f043 0201 	orr.w	r2, r3, #1
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	3710      	adds	r7, #16
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004626:	4618      	mov	r0, r3
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
	...

08004634 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800463e:	2300      	movs	r3, #0
 8004640:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004648:	2b01      	cmp	r3, #1
 800464a:	d101      	bne.n	8004650 <HAL_ADC_ConfigChannel+0x1c>
 800464c:	2302      	movs	r3, #2
 800464e:	e113      	b.n	8004878 <HAL_ADC_ConfigChannel+0x244>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2b09      	cmp	r3, #9
 800465e:	d925      	bls.n	80046ac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68d9      	ldr	r1, [r3, #12]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	b29b      	uxth	r3, r3
 800466c:	461a      	mov	r2, r3
 800466e:	4613      	mov	r3, r2
 8004670:	005b      	lsls	r3, r3, #1
 8004672:	4413      	add	r3, r2
 8004674:	3b1e      	subs	r3, #30
 8004676:	2207      	movs	r2, #7
 8004678:	fa02 f303 	lsl.w	r3, r2, r3
 800467c:	43da      	mvns	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	400a      	ands	r2, r1
 8004684:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68d9      	ldr	r1, [r3, #12]
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	689a      	ldr	r2, [r3, #8]
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	b29b      	uxth	r3, r3
 8004696:	4618      	mov	r0, r3
 8004698:	4603      	mov	r3, r0
 800469a:	005b      	lsls	r3, r3, #1
 800469c:	4403      	add	r3, r0
 800469e:	3b1e      	subs	r3, #30
 80046a0:	409a      	lsls	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	430a      	orrs	r2, r1
 80046a8:	60da      	str	r2, [r3, #12]
 80046aa:	e022      	b.n	80046f2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6919      	ldr	r1, [r3, #16]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	461a      	mov	r2, r3
 80046ba:	4613      	mov	r3, r2
 80046bc:	005b      	lsls	r3, r3, #1
 80046be:	4413      	add	r3, r2
 80046c0:	2207      	movs	r2, #7
 80046c2:	fa02 f303 	lsl.w	r3, r2, r3
 80046c6:	43da      	mvns	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	400a      	ands	r2, r1
 80046ce:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6919      	ldr	r1, [r3, #16]
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	689a      	ldr	r2, [r3, #8]
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	b29b      	uxth	r3, r3
 80046e0:	4618      	mov	r0, r3
 80046e2:	4603      	mov	r3, r0
 80046e4:	005b      	lsls	r3, r3, #1
 80046e6:	4403      	add	r3, r0
 80046e8:	409a      	lsls	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	2b06      	cmp	r3, #6
 80046f8:	d824      	bhi.n	8004744 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	685a      	ldr	r2, [r3, #4]
 8004704:	4613      	mov	r3, r2
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	4413      	add	r3, r2
 800470a:	3b05      	subs	r3, #5
 800470c:	221f      	movs	r2, #31
 800470e:	fa02 f303 	lsl.w	r3, r2, r3
 8004712:	43da      	mvns	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	400a      	ands	r2, r1
 800471a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	b29b      	uxth	r3, r3
 8004728:	4618      	mov	r0, r3
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	4613      	mov	r3, r2
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	4413      	add	r3, r2
 8004734:	3b05      	subs	r3, #5
 8004736:	fa00 f203 	lsl.w	r2, r0, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	430a      	orrs	r2, r1
 8004740:	635a      	str	r2, [r3, #52]	; 0x34
 8004742:	e04c      	b.n	80047de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	2b0c      	cmp	r3, #12
 800474a:	d824      	bhi.n	8004796 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685a      	ldr	r2, [r3, #4]
 8004756:	4613      	mov	r3, r2
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	4413      	add	r3, r2
 800475c:	3b23      	subs	r3, #35	; 0x23
 800475e:	221f      	movs	r2, #31
 8004760:	fa02 f303 	lsl.w	r3, r2, r3
 8004764:	43da      	mvns	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	400a      	ands	r2, r1
 800476c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	b29b      	uxth	r3, r3
 800477a:	4618      	mov	r0, r3
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	4613      	mov	r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4413      	add	r3, r2
 8004786:	3b23      	subs	r3, #35	; 0x23
 8004788:	fa00 f203 	lsl.w	r2, r0, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	430a      	orrs	r2, r1
 8004792:	631a      	str	r2, [r3, #48]	; 0x30
 8004794:	e023      	b.n	80047de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685a      	ldr	r2, [r3, #4]
 80047a0:	4613      	mov	r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	4413      	add	r3, r2
 80047a6:	3b41      	subs	r3, #65	; 0x41
 80047a8:	221f      	movs	r2, #31
 80047aa:	fa02 f303 	lsl.w	r3, r2, r3
 80047ae:	43da      	mvns	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	400a      	ands	r2, r1
 80047b6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	4618      	mov	r0, r3
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	685a      	ldr	r2, [r3, #4]
 80047ca:	4613      	mov	r3, r2
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	4413      	add	r3, r2
 80047d0:	3b41      	subs	r3, #65	; 0x41
 80047d2:	fa00 f203 	lsl.w	r2, r0, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	430a      	orrs	r2, r1
 80047dc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80047de:	4b29      	ldr	r3, [pc, #164]	; (8004884 <HAL_ADC_ConfigChannel+0x250>)
 80047e0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a28      	ldr	r2, [pc, #160]	; (8004888 <HAL_ADC_ConfigChannel+0x254>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d10f      	bne.n	800480c <HAL_ADC_ConfigChannel+0x1d8>
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2b12      	cmp	r3, #18
 80047f2:	d10b      	bne.n	800480c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a1d      	ldr	r2, [pc, #116]	; (8004888 <HAL_ADC_ConfigChannel+0x254>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d12b      	bne.n	800486e <HAL_ADC_ConfigChannel+0x23a>
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a1c      	ldr	r2, [pc, #112]	; (800488c <HAL_ADC_ConfigChannel+0x258>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d003      	beq.n	8004828 <HAL_ADC_ConfigChannel+0x1f4>
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2b11      	cmp	r3, #17
 8004826:	d122      	bne.n	800486e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a11      	ldr	r2, [pc, #68]	; (800488c <HAL_ADC_ConfigChannel+0x258>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d111      	bne.n	800486e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800484a:	4b11      	ldr	r3, [pc, #68]	; (8004890 <HAL_ADC_ConfigChannel+0x25c>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a11      	ldr	r2, [pc, #68]	; (8004894 <HAL_ADC_ConfigChannel+0x260>)
 8004850:	fba2 2303 	umull	r2, r3, r2, r3
 8004854:	0c9a      	lsrs	r2, r3, #18
 8004856:	4613      	mov	r3, r2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	4413      	add	r3, r2
 800485c:	005b      	lsls	r3, r3, #1
 800485e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004860:	e002      	b.n	8004868 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	3b01      	subs	r3, #1
 8004866:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1f9      	bne.n	8004862 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3714      	adds	r7, #20
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr
 8004884:	40012300 	.word	0x40012300
 8004888:	40012000 	.word	0x40012000
 800488c:	10000012 	.word	0x10000012
 8004890:	20000034 	.word	0x20000034
 8004894:	431bde83 	.word	0x431bde83

08004898 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004898:	b480      	push	{r7}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80048a0:	4b79      	ldr	r3, [pc, #484]	; (8004a88 <ADC_Init+0x1f0>)
 80048a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	431a      	orrs	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	6859      	ldr	r1, [r3, #4]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	021a      	lsls	r2, r3, #8
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80048f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	6859      	ldr	r1, [r3, #4]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	689a      	ldr	r2, [r3, #8]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	430a      	orrs	r2, r1
 8004902:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	689a      	ldr	r2, [r3, #8]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004912:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	6899      	ldr	r1, [r3, #8]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	68da      	ldr	r2, [r3, #12]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	430a      	orrs	r2, r1
 8004924:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492a:	4a58      	ldr	r2, [pc, #352]	; (8004a8c <ADC_Init+0x1f4>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d022      	beq.n	8004976 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	689a      	ldr	r2, [r3, #8]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800493e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6899      	ldr	r1, [r3, #8]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	430a      	orrs	r2, r1
 8004950:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	689a      	ldr	r2, [r3, #8]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004960:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	6899      	ldr	r1, [r3, #8]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	430a      	orrs	r2, r1
 8004972:	609a      	str	r2, [r3, #8]
 8004974:	e00f      	b.n	8004996 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	689a      	ldr	r2, [r3, #8]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004984:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	689a      	ldr	r2, [r3, #8]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004994:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	689a      	ldr	r2, [r3, #8]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f022 0202 	bic.w	r2, r2, #2
 80049a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	6899      	ldr	r1, [r3, #8]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	7e1b      	ldrb	r3, [r3, #24]
 80049b0:	005a      	lsls	r2, r3, #1
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	430a      	orrs	r2, r1
 80049b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d01b      	beq.n	80049fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	685a      	ldr	r2, [r3, #4]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80049e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6859      	ldr	r1, [r3, #4]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ee:	3b01      	subs	r3, #1
 80049f0:	035a      	lsls	r2, r3, #13
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	430a      	orrs	r2, r1
 80049f8:	605a      	str	r2, [r3, #4]
 80049fa:	e007      	b.n	8004a0c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685a      	ldr	r2, [r3, #4]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a0a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004a1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	69db      	ldr	r3, [r3, #28]
 8004a26:	3b01      	subs	r3, #1
 8004a28:	051a      	lsls	r2, r3, #20
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	689a      	ldr	r2, [r3, #8]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004a40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	6899      	ldr	r1, [r3, #8]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004a4e:	025a      	lsls	r2, r3, #9
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	430a      	orrs	r2, r1
 8004a56:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	689a      	ldr	r2, [r3, #8]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	6899      	ldr	r1, [r3, #8]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	029a      	lsls	r2, r3, #10
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	609a      	str	r2, [r3, #8]
}
 8004a7c:	bf00      	nop
 8004a7e:	3714      	adds	r7, #20
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr
 8004a88:	40012300 	.word	0x40012300
 8004a8c:	0f000001 	.word	0x0f000001

08004a90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f003 0307 	and.w	r3, r3, #7
 8004a9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004aa0:	4b0c      	ldr	r3, [pc, #48]	; (8004ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004aa6:	68ba      	ldr	r2, [r7, #8]
 8004aa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004aac:	4013      	ands	r3, r2
 8004aae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ab8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ac2:	4a04      	ldr	r2, [pc, #16]	; (8004ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	60d3      	str	r3, [r2, #12]
}
 8004ac8:	bf00      	nop
 8004aca:	3714      	adds	r7, #20
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr
 8004ad4:	e000ed00 	.word	0xe000ed00

08004ad8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004adc:	4b04      	ldr	r3, [pc, #16]	; (8004af0 <__NVIC_GetPriorityGrouping+0x18>)
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	0a1b      	lsrs	r3, r3, #8
 8004ae2:	f003 0307 	and.w	r3, r3, #7
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr
 8004af0:	e000ed00 	.word	0xe000ed00

08004af4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	4603      	mov	r3, r0
 8004afc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	db0b      	blt.n	8004b1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b06:	79fb      	ldrb	r3, [r7, #7]
 8004b08:	f003 021f 	and.w	r2, r3, #31
 8004b0c:	4907      	ldr	r1, [pc, #28]	; (8004b2c <__NVIC_EnableIRQ+0x38>)
 8004b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b12:	095b      	lsrs	r3, r3, #5
 8004b14:	2001      	movs	r0, #1
 8004b16:	fa00 f202 	lsl.w	r2, r0, r2
 8004b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004b1e:	bf00      	nop
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	e000e100 	.word	0xe000e100

08004b30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	4603      	mov	r3, r0
 8004b38:	6039      	str	r1, [r7, #0]
 8004b3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	db0a      	blt.n	8004b5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	b2da      	uxtb	r2, r3
 8004b48:	490c      	ldr	r1, [pc, #48]	; (8004b7c <__NVIC_SetPriority+0x4c>)
 8004b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b4e:	0112      	lsls	r2, r2, #4
 8004b50:	b2d2      	uxtb	r2, r2
 8004b52:	440b      	add	r3, r1
 8004b54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b58:	e00a      	b.n	8004b70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	b2da      	uxtb	r2, r3
 8004b5e:	4908      	ldr	r1, [pc, #32]	; (8004b80 <__NVIC_SetPriority+0x50>)
 8004b60:	79fb      	ldrb	r3, [r7, #7]
 8004b62:	f003 030f 	and.w	r3, r3, #15
 8004b66:	3b04      	subs	r3, #4
 8004b68:	0112      	lsls	r2, r2, #4
 8004b6a:	b2d2      	uxtb	r2, r2
 8004b6c:	440b      	add	r3, r1
 8004b6e:	761a      	strb	r2, [r3, #24]
}
 8004b70:	bf00      	nop
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr
 8004b7c:	e000e100 	.word	0xe000e100
 8004b80:	e000ed00 	.word	0xe000ed00

08004b84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b089      	sub	sp, #36	; 0x24
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f003 0307 	and.w	r3, r3, #7
 8004b96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	f1c3 0307 	rsb	r3, r3, #7
 8004b9e:	2b04      	cmp	r3, #4
 8004ba0:	bf28      	it	cs
 8004ba2:	2304      	movcs	r3, #4
 8004ba4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	3304      	adds	r3, #4
 8004baa:	2b06      	cmp	r3, #6
 8004bac:	d902      	bls.n	8004bb4 <NVIC_EncodePriority+0x30>
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	3b03      	subs	r3, #3
 8004bb2:	e000      	b.n	8004bb6 <NVIC_EncodePriority+0x32>
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc2:	43da      	mvns	r2, r3
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	401a      	ands	r2, r3
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8004bd6:	43d9      	mvns	r1, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bdc:	4313      	orrs	r3, r2
         );
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3724      	adds	r7, #36	; 0x24
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
	...

08004bec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004bfc:	d301      	bcc.n	8004c02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e00f      	b.n	8004c22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c02:	4a0a      	ldr	r2, [pc, #40]	; (8004c2c <SysTick_Config+0x40>)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	3b01      	subs	r3, #1
 8004c08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c0a:	210f      	movs	r1, #15
 8004c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c10:	f7ff ff8e 	bl	8004b30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c14:	4b05      	ldr	r3, [pc, #20]	; (8004c2c <SysTick_Config+0x40>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c1a:	4b04      	ldr	r3, [pc, #16]	; (8004c2c <SysTick_Config+0x40>)
 8004c1c:	2207      	movs	r2, #7
 8004c1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3708      	adds	r7, #8
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	e000e010 	.word	0xe000e010

08004c30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f7ff ff29 	bl	8004a90 <__NVIC_SetPriorityGrouping>
}
 8004c3e:	bf00      	nop
 8004c40:	3708      	adds	r7, #8
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b086      	sub	sp, #24
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	60b9      	str	r1, [r7, #8]
 8004c50:	607a      	str	r2, [r7, #4]
 8004c52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004c54:	2300      	movs	r3, #0
 8004c56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c58:	f7ff ff3e 	bl	8004ad8 <__NVIC_GetPriorityGrouping>
 8004c5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	68b9      	ldr	r1, [r7, #8]
 8004c62:	6978      	ldr	r0, [r7, #20]
 8004c64:	f7ff ff8e 	bl	8004b84 <NVIC_EncodePriority>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c6e:	4611      	mov	r1, r2
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7ff ff5d 	bl	8004b30 <__NVIC_SetPriority>
}
 8004c76:	bf00      	nop
 8004c78:	3718      	adds	r7, #24
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}

08004c7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b082      	sub	sp, #8
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	4603      	mov	r3, r0
 8004c86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7ff ff31 	bl	8004af4 <__NVIC_EnableIRQ>
}
 8004c92:	bf00      	nop
 8004c94:	3708      	adds	r7, #8
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c9a:	b580      	push	{r7, lr}
 8004c9c:	b082      	sub	sp, #8
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7ff ffa2 	bl	8004bec <SysTick_Config>
 8004ca8:	4603      	mov	r3, r0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3708      	adds	r7, #8
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b084      	sub	sp, #16
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cbe:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004cc0:	f7ff fac4 	bl	800424c <HAL_GetTick>
 8004cc4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d008      	beq.n	8004ce4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2280      	movs	r2, #128	; 0x80
 8004cd6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e052      	b.n	8004d8a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f022 0216 	bic.w	r2, r2, #22
 8004cf2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	695a      	ldr	r2, [r3, #20]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d02:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d103      	bne.n	8004d14 <HAL_DMA_Abort+0x62>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d007      	beq.n	8004d24 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f022 0208 	bic.w	r2, r2, #8
 8004d22:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f022 0201 	bic.w	r2, r2, #1
 8004d32:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d34:	e013      	b.n	8004d5e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d36:	f7ff fa89 	bl	800424c <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	2b05      	cmp	r3, #5
 8004d42:	d90c      	bls.n	8004d5e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2220      	movs	r2, #32
 8004d48:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2203      	movs	r2, #3
 8004d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e015      	b.n	8004d8a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0301 	and.w	r3, r3, #1
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1e4      	bne.n	8004d36 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d70:	223f      	movs	r2, #63	; 0x3f
 8004d72:	409a      	lsls	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d92:	b480      	push	{r7}
 8004d94:	b083      	sub	sp, #12
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d004      	beq.n	8004db0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2280      	movs	r2, #128	; 0x80
 8004daa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e00c      	b.n	8004dca <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2205      	movs	r2, #5
 8004db4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f022 0201 	bic.w	r2, r2, #1
 8004dc6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
	...

08004dd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b089      	sub	sp, #36	; 0x24
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004de2:	2300      	movs	r3, #0
 8004de4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004de6:	2300      	movs	r3, #0
 8004de8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004dea:	2300      	movs	r3, #0
 8004dec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004dee:	2300      	movs	r3, #0
 8004df0:	61fb      	str	r3, [r7, #28]
 8004df2:	e159      	b.n	80050a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004df4:	2201      	movs	r2, #1
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	4013      	ands	r3, r2
 8004e06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	f040 8148 	bne.w	80050a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f003 0303 	and.w	r3, r3, #3
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d005      	beq.n	8004e2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d130      	bne.n	8004e8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	005b      	lsls	r3, r3, #1
 8004e34:	2203      	movs	r2, #3
 8004e36:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3a:	43db      	mvns	r3, r3
 8004e3c:	69ba      	ldr	r2, [r7, #24]
 8004e3e:	4013      	ands	r3, r2
 8004e40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	68da      	ldr	r2, [r3, #12]
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	005b      	lsls	r3, r3, #1
 8004e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	69ba      	ldr	r2, [r7, #24]
 8004e58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e60:	2201      	movs	r2, #1
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	fa02 f303 	lsl.w	r3, r2, r3
 8004e68:	43db      	mvns	r3, r3
 8004e6a:	69ba      	ldr	r2, [r7, #24]
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	091b      	lsrs	r3, r3, #4
 8004e76:	f003 0201 	and.w	r2, r3, #1
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	69ba      	ldr	r2, [r7, #24]
 8004e8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f003 0303 	and.w	r3, r3, #3
 8004e94:	2b03      	cmp	r3, #3
 8004e96:	d017      	beq.n	8004ec8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	005b      	lsls	r3, r3, #1
 8004ea2:	2203      	movs	r2, #3
 8004ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea8:	43db      	mvns	r3, r3
 8004eaa:	69ba      	ldr	r2, [r7, #24]
 8004eac:	4013      	ands	r3, r2
 8004eae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	689a      	ldr	r2, [r3, #8]
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	005b      	lsls	r3, r3, #1
 8004eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ebc:	69ba      	ldr	r2, [r7, #24]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	69ba      	ldr	r2, [r7, #24]
 8004ec6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f003 0303 	and.w	r3, r3, #3
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d123      	bne.n	8004f1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	08da      	lsrs	r2, r3, #3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	3208      	adds	r2, #8
 8004edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	f003 0307 	and.w	r3, r3, #7
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	220f      	movs	r2, #15
 8004eec:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef0:	43db      	mvns	r3, r3
 8004ef2:	69ba      	ldr	r2, [r7, #24]
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	691a      	ldr	r2, [r3, #16]
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	f003 0307 	and.w	r3, r3, #7
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	fa02 f303 	lsl.w	r3, r2, r3
 8004f08:	69ba      	ldr	r2, [r7, #24]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	08da      	lsrs	r2, r3, #3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	3208      	adds	r2, #8
 8004f16:	69b9      	ldr	r1, [r7, #24]
 8004f18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	005b      	lsls	r3, r3, #1
 8004f26:	2203      	movs	r2, #3
 8004f28:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2c:	43db      	mvns	r3, r3
 8004f2e:	69ba      	ldr	r2, [r7, #24]
 8004f30:	4013      	ands	r3, r2
 8004f32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f003 0203 	and.w	r2, r3, #3
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	005b      	lsls	r3, r3, #1
 8004f40:	fa02 f303 	lsl.w	r3, r2, r3
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	69ba      	ldr	r2, [r7, #24]
 8004f4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f000 80a2 	beq.w	80050a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f5e:	2300      	movs	r3, #0
 8004f60:	60fb      	str	r3, [r7, #12]
 8004f62:	4b57      	ldr	r3, [pc, #348]	; (80050c0 <HAL_GPIO_Init+0x2e8>)
 8004f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f66:	4a56      	ldr	r2, [pc, #344]	; (80050c0 <HAL_GPIO_Init+0x2e8>)
 8004f68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8004f6e:	4b54      	ldr	r3, [pc, #336]	; (80050c0 <HAL_GPIO_Init+0x2e8>)
 8004f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f76:	60fb      	str	r3, [r7, #12]
 8004f78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f7a:	4a52      	ldr	r2, [pc, #328]	; (80050c4 <HAL_GPIO_Init+0x2ec>)
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	089b      	lsrs	r3, r3, #2
 8004f80:	3302      	adds	r3, #2
 8004f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	f003 0303 	and.w	r3, r3, #3
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	220f      	movs	r2, #15
 8004f92:	fa02 f303 	lsl.w	r3, r2, r3
 8004f96:	43db      	mvns	r3, r3
 8004f98:	69ba      	ldr	r2, [r7, #24]
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a49      	ldr	r2, [pc, #292]	; (80050c8 <HAL_GPIO_Init+0x2f0>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d019      	beq.n	8004fda <HAL_GPIO_Init+0x202>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a48      	ldr	r2, [pc, #288]	; (80050cc <HAL_GPIO_Init+0x2f4>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d013      	beq.n	8004fd6 <HAL_GPIO_Init+0x1fe>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a47      	ldr	r2, [pc, #284]	; (80050d0 <HAL_GPIO_Init+0x2f8>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d00d      	beq.n	8004fd2 <HAL_GPIO_Init+0x1fa>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a46      	ldr	r2, [pc, #280]	; (80050d4 <HAL_GPIO_Init+0x2fc>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d007      	beq.n	8004fce <HAL_GPIO_Init+0x1f6>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a45      	ldr	r2, [pc, #276]	; (80050d8 <HAL_GPIO_Init+0x300>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d101      	bne.n	8004fca <HAL_GPIO_Init+0x1f2>
 8004fc6:	2304      	movs	r3, #4
 8004fc8:	e008      	b.n	8004fdc <HAL_GPIO_Init+0x204>
 8004fca:	2307      	movs	r3, #7
 8004fcc:	e006      	b.n	8004fdc <HAL_GPIO_Init+0x204>
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e004      	b.n	8004fdc <HAL_GPIO_Init+0x204>
 8004fd2:	2302      	movs	r3, #2
 8004fd4:	e002      	b.n	8004fdc <HAL_GPIO_Init+0x204>
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e000      	b.n	8004fdc <HAL_GPIO_Init+0x204>
 8004fda:	2300      	movs	r3, #0
 8004fdc:	69fa      	ldr	r2, [r7, #28]
 8004fde:	f002 0203 	and.w	r2, r2, #3
 8004fe2:	0092      	lsls	r2, r2, #2
 8004fe4:	4093      	lsls	r3, r2
 8004fe6:	69ba      	ldr	r2, [r7, #24]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004fec:	4935      	ldr	r1, [pc, #212]	; (80050c4 <HAL_GPIO_Init+0x2ec>)
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	089b      	lsrs	r3, r3, #2
 8004ff2:	3302      	adds	r3, #2
 8004ff4:	69ba      	ldr	r2, [r7, #24]
 8004ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ffa:	4b38      	ldr	r3, [pc, #224]	; (80050dc <HAL_GPIO_Init+0x304>)
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	43db      	mvns	r3, r3
 8005004:	69ba      	ldr	r2, [r7, #24]
 8005006:	4013      	ands	r3, r2
 8005008:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d003      	beq.n	800501e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005016:	69ba      	ldr	r2, [r7, #24]
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	4313      	orrs	r3, r2
 800501c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800501e:	4a2f      	ldr	r2, [pc, #188]	; (80050dc <HAL_GPIO_Init+0x304>)
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005024:	4b2d      	ldr	r3, [pc, #180]	; (80050dc <HAL_GPIO_Init+0x304>)
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	43db      	mvns	r3, r3
 800502e:	69ba      	ldr	r2, [r7, #24]
 8005030:	4013      	ands	r3, r2
 8005032:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d003      	beq.n	8005048 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005040:	69ba      	ldr	r2, [r7, #24]
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	4313      	orrs	r3, r2
 8005046:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005048:	4a24      	ldr	r2, [pc, #144]	; (80050dc <HAL_GPIO_Init+0x304>)
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800504e:	4b23      	ldr	r3, [pc, #140]	; (80050dc <HAL_GPIO_Init+0x304>)
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	43db      	mvns	r3, r3
 8005058:	69ba      	ldr	r2, [r7, #24]
 800505a:	4013      	ands	r3, r2
 800505c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d003      	beq.n	8005072 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800506a:	69ba      	ldr	r2, [r7, #24]
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	4313      	orrs	r3, r2
 8005070:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005072:	4a1a      	ldr	r2, [pc, #104]	; (80050dc <HAL_GPIO_Init+0x304>)
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005078:	4b18      	ldr	r3, [pc, #96]	; (80050dc <HAL_GPIO_Init+0x304>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	43db      	mvns	r3, r3
 8005082:	69ba      	ldr	r2, [r7, #24]
 8005084:	4013      	ands	r3, r2
 8005086:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d003      	beq.n	800509c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005094:	69ba      	ldr	r2, [r7, #24]
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	4313      	orrs	r3, r2
 800509a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800509c:	4a0f      	ldr	r2, [pc, #60]	; (80050dc <HAL_GPIO_Init+0x304>)
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	3301      	adds	r3, #1
 80050a6:	61fb      	str	r3, [r7, #28]
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	2b0f      	cmp	r3, #15
 80050ac:	f67f aea2 	bls.w	8004df4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80050b0:	bf00      	nop
 80050b2:	bf00      	nop
 80050b4:	3724      	adds	r7, #36	; 0x24
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	40023800 	.word	0x40023800
 80050c4:	40013800 	.word	0x40013800
 80050c8:	40020000 	.word	0x40020000
 80050cc:	40020400 	.word	0x40020400
 80050d0:	40020800 	.word	0x40020800
 80050d4:	40020c00 	.word	0x40020c00
 80050d8:	40021000 	.word	0x40021000
 80050dc:	40013c00 	.word	0x40013c00

080050e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	460b      	mov	r3, r1
 80050ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	691a      	ldr	r2, [r3, #16]
 80050f0:	887b      	ldrh	r3, [r7, #2]
 80050f2:	4013      	ands	r3, r2
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d002      	beq.n	80050fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80050f8:	2301      	movs	r3, #1
 80050fa:	73fb      	strb	r3, [r7, #15]
 80050fc:	e001      	b.n	8005102 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80050fe:	2300      	movs	r3, #0
 8005100:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005102:	7bfb      	ldrb	r3, [r7, #15]
}
 8005104:	4618      	mov	r0, r3
 8005106:	3714      	adds	r7, #20
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	460b      	mov	r3, r1
 800511a:	807b      	strh	r3, [r7, #2]
 800511c:	4613      	mov	r3, r2
 800511e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005120:	787b      	ldrb	r3, [r7, #1]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d003      	beq.n	800512e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005126:	887a      	ldrh	r2, [r7, #2]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800512c:	e003      	b.n	8005136 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800512e:	887b      	ldrh	r3, [r7, #2]
 8005130:	041a      	lsls	r2, r3, #16
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	619a      	str	r2, [r3, #24]
}
 8005136:	bf00      	nop
 8005138:	370c      	adds	r7, #12
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr

08005142 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005142:	b480      	push	{r7}
 8005144:	b085      	sub	sp, #20
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
 800514a:	460b      	mov	r3, r1
 800514c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005154:	887a      	ldrh	r2, [r7, #2]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	4013      	ands	r3, r2
 800515a:	041a      	lsls	r2, r3, #16
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	43d9      	mvns	r1, r3
 8005160:	887b      	ldrh	r3, [r7, #2]
 8005162:	400b      	ands	r3, r1
 8005164:	431a      	orrs	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	619a      	str	r2, [r3, #24]
}
 800516a:	bf00      	nop
 800516c:	3714      	adds	r7, #20
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
	...

08005178 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	4603      	mov	r3, r0
 8005180:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005182:	4b08      	ldr	r3, [pc, #32]	; (80051a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005184:	695a      	ldr	r2, [r3, #20]
 8005186:	88fb      	ldrh	r3, [r7, #6]
 8005188:	4013      	ands	r3, r2
 800518a:	2b00      	cmp	r3, #0
 800518c:	d006      	beq.n	800519c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800518e:	4a05      	ldr	r2, [pc, #20]	; (80051a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005190:	88fb      	ldrh	r3, [r7, #6]
 8005192:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005194:	88fb      	ldrh	r3, [r7, #6]
 8005196:	4618      	mov	r0, r3
 8005198:	f000 f806 	bl	80051a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800519c:	bf00      	nop
 800519e:	3708      	adds	r7, #8
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	40013c00 	.word	0x40013c00

080051a8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	4603      	mov	r3, r0
 80051b0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80051b2:	bf00      	nop
 80051b4:	370c      	adds	r7, #12
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
	...

080051c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b086      	sub	sp, #24
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d101      	bne.n	80051d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e267      	b.n	80056a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0301 	and.w	r3, r3, #1
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d075      	beq.n	80052ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80051de:	4b88      	ldr	r3, [pc, #544]	; (8005400 <HAL_RCC_OscConfig+0x240>)
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f003 030c 	and.w	r3, r3, #12
 80051e6:	2b04      	cmp	r3, #4
 80051e8:	d00c      	beq.n	8005204 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051ea:	4b85      	ldr	r3, [pc, #532]	; (8005400 <HAL_RCC_OscConfig+0x240>)
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80051f2:	2b08      	cmp	r3, #8
 80051f4:	d112      	bne.n	800521c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051f6:	4b82      	ldr	r3, [pc, #520]	; (8005400 <HAL_RCC_OscConfig+0x240>)
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005202:	d10b      	bne.n	800521c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005204:	4b7e      	ldr	r3, [pc, #504]	; (8005400 <HAL_RCC_OscConfig+0x240>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d05b      	beq.n	80052c8 <HAL_RCC_OscConfig+0x108>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d157      	bne.n	80052c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e242      	b.n	80056a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005224:	d106      	bne.n	8005234 <HAL_RCC_OscConfig+0x74>
 8005226:	4b76      	ldr	r3, [pc, #472]	; (8005400 <HAL_RCC_OscConfig+0x240>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a75      	ldr	r2, [pc, #468]	; (8005400 <HAL_RCC_OscConfig+0x240>)
 800522c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005230:	6013      	str	r3, [r2, #0]
 8005232:	e01d      	b.n	8005270 <HAL_RCC_OscConfig+0xb0>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800523c:	d10c      	bne.n	8005258 <HAL_RCC_OscConfig+0x98>
 800523e:	4b70      	ldr	r3, [pc, #448]	; (8005400 <HAL_RCC_OscConfig+0x240>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a6f      	ldr	r2, [pc, #444]	; (8005400 <HAL_RCC_OscConfig+0x240>)
 8005244:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005248:	6013      	str	r3, [r2, #0]
 800524a:	4b6d      	ldr	r3, [pc, #436]	; (8005400 <HAL_RCC_OscConfig+0x240>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a6c      	ldr	r2, [pc, #432]	; (8005400 <HAL_RCC_OscConfig+0x240>)
 8005250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005254:	6013      	str	r3, [r2, #0]
 8005256:	e00b      	b.n	8005270 <HAL_RCC_OscConfig+0xb0>
 8005258:	4b69      	ldr	r3, [pc, #420]	; (8005400 <HAL_RCC_OscConfig+0x240>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a68      	ldr	r2, [pc, #416]	; (8005400 <HAL_RCC_OscConfig+0x240>)
 800525e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005262:	6013      	str	r3, [r2, #0]
 8005264:	4b66      	ldr	r3, [pc, #408]	; (8005400 <HAL_RCC_OscConfig+0x240>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a65      	ldr	r2, [pc, #404]	; (8005400 <HAL_RCC_OscConfig+0x240>)
 800526a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800526e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d013      	beq.n	80052a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005278:	f7fe ffe8 	bl	800424c <HAL_GetTick>
 800527c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800527e:	e008      	b.n	8005292 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005280:	f7fe ffe4 	bl	800424c <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	2b64      	cmp	r3, #100	; 0x64
 800528c:	d901      	bls.n	8005292 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e207      	b.n	80056a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005292:	4b5b      	ldr	r3, [pc, #364]	; (8005400 <HAL_RCC_OscConfig+0x240>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d0f0      	beq.n	8005280 <HAL_RCC_OscConfig+0xc0>
 800529e:	e014      	b.n	80052ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052a0:	f7fe ffd4 	bl	800424c <HAL_GetTick>
 80052a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052a6:	e008      	b.n	80052ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052a8:	f7fe ffd0 	bl	800424c <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	2b64      	cmp	r3, #100	; 0x64
 80052b4:	d901      	bls.n	80052ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e1f3      	b.n	80056a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052ba:	4b51      	ldr	r3, [pc, #324]	; (8005400 <HAL_RCC_OscConfig+0x240>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1f0      	bne.n	80052a8 <HAL_RCC_OscConfig+0xe8>
 80052c6:	e000      	b.n	80052ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0302 	and.w	r3, r3, #2
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d063      	beq.n	800539e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80052d6:	4b4a      	ldr	r3, [pc, #296]	; (8005400 <HAL_RCC_OscConfig+0x240>)
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f003 030c 	and.w	r3, r3, #12
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00b      	beq.n	80052fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052e2:	4b47      	ldr	r3, [pc, #284]	; (8005400 <HAL_RCC_OscConfig+0x240>)
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80052ea:	2b08      	cmp	r3, #8
 80052ec:	d11c      	bne.n	8005328 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052ee:	4b44      	ldr	r3, [pc, #272]	; (8005400 <HAL_RCC_OscConfig+0x240>)
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d116      	bne.n	8005328 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052fa:	4b41      	ldr	r3, [pc, #260]	; (8005400 <HAL_RCC_OscConfig+0x240>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0302 	and.w	r3, r3, #2
 8005302:	2b00      	cmp	r3, #0
 8005304:	d005      	beq.n	8005312 <HAL_RCC_OscConfig+0x152>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	2b01      	cmp	r3, #1
 800530c:	d001      	beq.n	8005312 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e1c7      	b.n	80056a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005312:	4b3b      	ldr	r3, [pc, #236]	; (8005400 <HAL_RCC_OscConfig+0x240>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	00db      	lsls	r3, r3, #3
 8005320:	4937      	ldr	r1, [pc, #220]	; (8005400 <HAL_RCC_OscConfig+0x240>)
 8005322:	4313      	orrs	r3, r2
 8005324:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005326:	e03a      	b.n	800539e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d020      	beq.n	8005372 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005330:	4b34      	ldr	r3, [pc, #208]	; (8005404 <HAL_RCC_OscConfig+0x244>)
 8005332:	2201      	movs	r2, #1
 8005334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005336:	f7fe ff89 	bl	800424c <HAL_GetTick>
 800533a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800533c:	e008      	b.n	8005350 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800533e:	f7fe ff85 	bl	800424c <HAL_GetTick>
 8005342:	4602      	mov	r2, r0
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	2b02      	cmp	r3, #2
 800534a:	d901      	bls.n	8005350 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e1a8      	b.n	80056a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005350:	4b2b      	ldr	r3, [pc, #172]	; (8005400 <HAL_RCC_OscConfig+0x240>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0302 	and.w	r3, r3, #2
 8005358:	2b00      	cmp	r3, #0
 800535a:	d0f0      	beq.n	800533e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800535c:	4b28      	ldr	r3, [pc, #160]	; (8005400 <HAL_RCC_OscConfig+0x240>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	00db      	lsls	r3, r3, #3
 800536a:	4925      	ldr	r1, [pc, #148]	; (8005400 <HAL_RCC_OscConfig+0x240>)
 800536c:	4313      	orrs	r3, r2
 800536e:	600b      	str	r3, [r1, #0]
 8005370:	e015      	b.n	800539e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005372:	4b24      	ldr	r3, [pc, #144]	; (8005404 <HAL_RCC_OscConfig+0x244>)
 8005374:	2200      	movs	r2, #0
 8005376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005378:	f7fe ff68 	bl	800424c <HAL_GetTick>
 800537c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800537e:	e008      	b.n	8005392 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005380:	f7fe ff64 	bl	800424c <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	2b02      	cmp	r3, #2
 800538c:	d901      	bls.n	8005392 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e187      	b.n	80056a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005392:	4b1b      	ldr	r3, [pc, #108]	; (8005400 <HAL_RCC_OscConfig+0x240>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0302 	and.w	r3, r3, #2
 800539a:	2b00      	cmp	r3, #0
 800539c:	d1f0      	bne.n	8005380 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0308 	and.w	r3, r3, #8
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d036      	beq.n	8005418 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d016      	beq.n	80053e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053b2:	4b15      	ldr	r3, [pc, #84]	; (8005408 <HAL_RCC_OscConfig+0x248>)
 80053b4:	2201      	movs	r2, #1
 80053b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053b8:	f7fe ff48 	bl	800424c <HAL_GetTick>
 80053bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053be:	e008      	b.n	80053d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053c0:	f7fe ff44 	bl	800424c <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d901      	bls.n	80053d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e167      	b.n	80056a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053d2:	4b0b      	ldr	r3, [pc, #44]	; (8005400 <HAL_RCC_OscConfig+0x240>)
 80053d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053d6:	f003 0302 	and.w	r3, r3, #2
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d0f0      	beq.n	80053c0 <HAL_RCC_OscConfig+0x200>
 80053de:	e01b      	b.n	8005418 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053e0:	4b09      	ldr	r3, [pc, #36]	; (8005408 <HAL_RCC_OscConfig+0x248>)
 80053e2:	2200      	movs	r2, #0
 80053e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053e6:	f7fe ff31 	bl	800424c <HAL_GetTick>
 80053ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053ec:	e00e      	b.n	800540c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053ee:	f7fe ff2d 	bl	800424c <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d907      	bls.n	800540c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e150      	b.n	80056a2 <HAL_RCC_OscConfig+0x4e2>
 8005400:	40023800 	.word	0x40023800
 8005404:	42470000 	.word	0x42470000
 8005408:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800540c:	4b88      	ldr	r3, [pc, #544]	; (8005630 <HAL_RCC_OscConfig+0x470>)
 800540e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005410:	f003 0302 	and.w	r3, r3, #2
 8005414:	2b00      	cmp	r3, #0
 8005416:	d1ea      	bne.n	80053ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0304 	and.w	r3, r3, #4
 8005420:	2b00      	cmp	r3, #0
 8005422:	f000 8097 	beq.w	8005554 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005426:	2300      	movs	r3, #0
 8005428:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800542a:	4b81      	ldr	r3, [pc, #516]	; (8005630 <HAL_RCC_OscConfig+0x470>)
 800542c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d10f      	bne.n	8005456 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005436:	2300      	movs	r3, #0
 8005438:	60bb      	str	r3, [r7, #8]
 800543a:	4b7d      	ldr	r3, [pc, #500]	; (8005630 <HAL_RCC_OscConfig+0x470>)
 800543c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543e:	4a7c      	ldr	r2, [pc, #496]	; (8005630 <HAL_RCC_OscConfig+0x470>)
 8005440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005444:	6413      	str	r3, [r2, #64]	; 0x40
 8005446:	4b7a      	ldr	r3, [pc, #488]	; (8005630 <HAL_RCC_OscConfig+0x470>)
 8005448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800544e:	60bb      	str	r3, [r7, #8]
 8005450:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005452:	2301      	movs	r3, #1
 8005454:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005456:	4b77      	ldr	r3, [pc, #476]	; (8005634 <HAL_RCC_OscConfig+0x474>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800545e:	2b00      	cmp	r3, #0
 8005460:	d118      	bne.n	8005494 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005462:	4b74      	ldr	r3, [pc, #464]	; (8005634 <HAL_RCC_OscConfig+0x474>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a73      	ldr	r2, [pc, #460]	; (8005634 <HAL_RCC_OscConfig+0x474>)
 8005468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800546c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800546e:	f7fe feed 	bl	800424c <HAL_GetTick>
 8005472:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005474:	e008      	b.n	8005488 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005476:	f7fe fee9 	bl	800424c <HAL_GetTick>
 800547a:	4602      	mov	r2, r0
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	2b02      	cmp	r3, #2
 8005482:	d901      	bls.n	8005488 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	e10c      	b.n	80056a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005488:	4b6a      	ldr	r3, [pc, #424]	; (8005634 <HAL_RCC_OscConfig+0x474>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005490:	2b00      	cmp	r3, #0
 8005492:	d0f0      	beq.n	8005476 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	2b01      	cmp	r3, #1
 800549a:	d106      	bne.n	80054aa <HAL_RCC_OscConfig+0x2ea>
 800549c:	4b64      	ldr	r3, [pc, #400]	; (8005630 <HAL_RCC_OscConfig+0x470>)
 800549e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054a0:	4a63      	ldr	r2, [pc, #396]	; (8005630 <HAL_RCC_OscConfig+0x470>)
 80054a2:	f043 0301 	orr.w	r3, r3, #1
 80054a6:	6713      	str	r3, [r2, #112]	; 0x70
 80054a8:	e01c      	b.n	80054e4 <HAL_RCC_OscConfig+0x324>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	2b05      	cmp	r3, #5
 80054b0:	d10c      	bne.n	80054cc <HAL_RCC_OscConfig+0x30c>
 80054b2:	4b5f      	ldr	r3, [pc, #380]	; (8005630 <HAL_RCC_OscConfig+0x470>)
 80054b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b6:	4a5e      	ldr	r2, [pc, #376]	; (8005630 <HAL_RCC_OscConfig+0x470>)
 80054b8:	f043 0304 	orr.w	r3, r3, #4
 80054bc:	6713      	str	r3, [r2, #112]	; 0x70
 80054be:	4b5c      	ldr	r3, [pc, #368]	; (8005630 <HAL_RCC_OscConfig+0x470>)
 80054c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054c2:	4a5b      	ldr	r2, [pc, #364]	; (8005630 <HAL_RCC_OscConfig+0x470>)
 80054c4:	f043 0301 	orr.w	r3, r3, #1
 80054c8:	6713      	str	r3, [r2, #112]	; 0x70
 80054ca:	e00b      	b.n	80054e4 <HAL_RCC_OscConfig+0x324>
 80054cc:	4b58      	ldr	r3, [pc, #352]	; (8005630 <HAL_RCC_OscConfig+0x470>)
 80054ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d0:	4a57      	ldr	r2, [pc, #348]	; (8005630 <HAL_RCC_OscConfig+0x470>)
 80054d2:	f023 0301 	bic.w	r3, r3, #1
 80054d6:	6713      	str	r3, [r2, #112]	; 0x70
 80054d8:	4b55      	ldr	r3, [pc, #340]	; (8005630 <HAL_RCC_OscConfig+0x470>)
 80054da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054dc:	4a54      	ldr	r2, [pc, #336]	; (8005630 <HAL_RCC_OscConfig+0x470>)
 80054de:	f023 0304 	bic.w	r3, r3, #4
 80054e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d015      	beq.n	8005518 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054ec:	f7fe feae 	bl	800424c <HAL_GetTick>
 80054f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054f2:	e00a      	b.n	800550a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054f4:	f7fe feaa 	bl	800424c <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005502:	4293      	cmp	r3, r2
 8005504:	d901      	bls.n	800550a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e0cb      	b.n	80056a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800550a:	4b49      	ldr	r3, [pc, #292]	; (8005630 <HAL_RCC_OscConfig+0x470>)
 800550c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800550e:	f003 0302 	and.w	r3, r3, #2
 8005512:	2b00      	cmp	r3, #0
 8005514:	d0ee      	beq.n	80054f4 <HAL_RCC_OscConfig+0x334>
 8005516:	e014      	b.n	8005542 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005518:	f7fe fe98 	bl	800424c <HAL_GetTick>
 800551c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800551e:	e00a      	b.n	8005536 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005520:	f7fe fe94 	bl	800424c <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	f241 3288 	movw	r2, #5000	; 0x1388
 800552e:	4293      	cmp	r3, r2
 8005530:	d901      	bls.n	8005536 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e0b5      	b.n	80056a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005536:	4b3e      	ldr	r3, [pc, #248]	; (8005630 <HAL_RCC_OscConfig+0x470>)
 8005538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1ee      	bne.n	8005520 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005542:	7dfb      	ldrb	r3, [r7, #23]
 8005544:	2b01      	cmp	r3, #1
 8005546:	d105      	bne.n	8005554 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005548:	4b39      	ldr	r3, [pc, #228]	; (8005630 <HAL_RCC_OscConfig+0x470>)
 800554a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554c:	4a38      	ldr	r2, [pc, #224]	; (8005630 <HAL_RCC_OscConfig+0x470>)
 800554e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005552:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	2b00      	cmp	r3, #0
 800555a:	f000 80a1 	beq.w	80056a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800555e:	4b34      	ldr	r3, [pc, #208]	; (8005630 <HAL_RCC_OscConfig+0x470>)
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f003 030c 	and.w	r3, r3, #12
 8005566:	2b08      	cmp	r3, #8
 8005568:	d05c      	beq.n	8005624 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	2b02      	cmp	r3, #2
 8005570:	d141      	bne.n	80055f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005572:	4b31      	ldr	r3, [pc, #196]	; (8005638 <HAL_RCC_OscConfig+0x478>)
 8005574:	2200      	movs	r2, #0
 8005576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005578:	f7fe fe68 	bl	800424c <HAL_GetTick>
 800557c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800557e:	e008      	b.n	8005592 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005580:	f7fe fe64 	bl	800424c <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	2b02      	cmp	r3, #2
 800558c:	d901      	bls.n	8005592 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e087      	b.n	80056a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005592:	4b27      	ldr	r3, [pc, #156]	; (8005630 <HAL_RCC_OscConfig+0x470>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1f0      	bne.n	8005580 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	69da      	ldr	r2, [r3, #28]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	431a      	orrs	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ac:	019b      	lsls	r3, r3, #6
 80055ae:	431a      	orrs	r2, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b4:	085b      	lsrs	r3, r3, #1
 80055b6:	3b01      	subs	r3, #1
 80055b8:	041b      	lsls	r3, r3, #16
 80055ba:	431a      	orrs	r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c0:	061b      	lsls	r3, r3, #24
 80055c2:	491b      	ldr	r1, [pc, #108]	; (8005630 <HAL_RCC_OscConfig+0x470>)
 80055c4:	4313      	orrs	r3, r2
 80055c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055c8:	4b1b      	ldr	r3, [pc, #108]	; (8005638 <HAL_RCC_OscConfig+0x478>)
 80055ca:	2201      	movs	r2, #1
 80055cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055ce:	f7fe fe3d 	bl	800424c <HAL_GetTick>
 80055d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055d4:	e008      	b.n	80055e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055d6:	f7fe fe39 	bl	800424c <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d901      	bls.n	80055e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e05c      	b.n	80056a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055e8:	4b11      	ldr	r3, [pc, #68]	; (8005630 <HAL_RCC_OscConfig+0x470>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d0f0      	beq.n	80055d6 <HAL_RCC_OscConfig+0x416>
 80055f4:	e054      	b.n	80056a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055f6:	4b10      	ldr	r3, [pc, #64]	; (8005638 <HAL_RCC_OscConfig+0x478>)
 80055f8:	2200      	movs	r2, #0
 80055fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055fc:	f7fe fe26 	bl	800424c <HAL_GetTick>
 8005600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005602:	e008      	b.n	8005616 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005604:	f7fe fe22 	bl	800424c <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	2b02      	cmp	r3, #2
 8005610:	d901      	bls.n	8005616 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e045      	b.n	80056a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005616:	4b06      	ldr	r3, [pc, #24]	; (8005630 <HAL_RCC_OscConfig+0x470>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d1f0      	bne.n	8005604 <HAL_RCC_OscConfig+0x444>
 8005622:	e03d      	b.n	80056a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	2b01      	cmp	r3, #1
 800562a:	d107      	bne.n	800563c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e038      	b.n	80056a2 <HAL_RCC_OscConfig+0x4e2>
 8005630:	40023800 	.word	0x40023800
 8005634:	40007000 	.word	0x40007000
 8005638:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800563c:	4b1b      	ldr	r3, [pc, #108]	; (80056ac <HAL_RCC_OscConfig+0x4ec>)
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	2b01      	cmp	r3, #1
 8005648:	d028      	beq.n	800569c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005654:	429a      	cmp	r2, r3
 8005656:	d121      	bne.n	800569c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005662:	429a      	cmp	r2, r3
 8005664:	d11a      	bne.n	800569c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800566c:	4013      	ands	r3, r2
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005672:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005674:	4293      	cmp	r3, r2
 8005676:	d111      	bne.n	800569c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005682:	085b      	lsrs	r3, r3, #1
 8005684:	3b01      	subs	r3, #1
 8005686:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005688:	429a      	cmp	r2, r3
 800568a:	d107      	bne.n	800569c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005696:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005698:	429a      	cmp	r2, r3
 800569a:	d001      	beq.n	80056a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e000      	b.n	80056a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3718      	adds	r7, #24
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	40023800 	.word	0x40023800

080056b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d101      	bne.n	80056c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e0cc      	b.n	800585e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056c4:	4b68      	ldr	r3, [pc, #416]	; (8005868 <HAL_RCC_ClockConfig+0x1b8>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0307 	and.w	r3, r3, #7
 80056cc:	683a      	ldr	r2, [r7, #0]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d90c      	bls.n	80056ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056d2:	4b65      	ldr	r3, [pc, #404]	; (8005868 <HAL_RCC_ClockConfig+0x1b8>)
 80056d4:	683a      	ldr	r2, [r7, #0]
 80056d6:	b2d2      	uxtb	r2, r2
 80056d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056da:	4b63      	ldr	r3, [pc, #396]	; (8005868 <HAL_RCC_ClockConfig+0x1b8>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0307 	and.w	r3, r3, #7
 80056e2:	683a      	ldr	r2, [r7, #0]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d001      	beq.n	80056ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e0b8      	b.n	800585e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0302 	and.w	r3, r3, #2
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d020      	beq.n	800573a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0304 	and.w	r3, r3, #4
 8005700:	2b00      	cmp	r3, #0
 8005702:	d005      	beq.n	8005710 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005704:	4b59      	ldr	r3, [pc, #356]	; (800586c <HAL_RCC_ClockConfig+0x1bc>)
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	4a58      	ldr	r2, [pc, #352]	; (800586c <HAL_RCC_ClockConfig+0x1bc>)
 800570a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800570e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 0308 	and.w	r3, r3, #8
 8005718:	2b00      	cmp	r3, #0
 800571a:	d005      	beq.n	8005728 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800571c:	4b53      	ldr	r3, [pc, #332]	; (800586c <HAL_RCC_ClockConfig+0x1bc>)
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	4a52      	ldr	r2, [pc, #328]	; (800586c <HAL_RCC_ClockConfig+0x1bc>)
 8005722:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005726:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005728:	4b50      	ldr	r3, [pc, #320]	; (800586c <HAL_RCC_ClockConfig+0x1bc>)
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	494d      	ldr	r1, [pc, #308]	; (800586c <HAL_RCC_ClockConfig+0x1bc>)
 8005736:	4313      	orrs	r3, r2
 8005738:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 0301 	and.w	r3, r3, #1
 8005742:	2b00      	cmp	r3, #0
 8005744:	d044      	beq.n	80057d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	2b01      	cmp	r3, #1
 800574c:	d107      	bne.n	800575e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800574e:	4b47      	ldr	r3, [pc, #284]	; (800586c <HAL_RCC_ClockConfig+0x1bc>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d119      	bne.n	800578e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e07f      	b.n	800585e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	2b02      	cmp	r3, #2
 8005764:	d003      	beq.n	800576e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800576a:	2b03      	cmp	r3, #3
 800576c:	d107      	bne.n	800577e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800576e:	4b3f      	ldr	r3, [pc, #252]	; (800586c <HAL_RCC_ClockConfig+0x1bc>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d109      	bne.n	800578e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e06f      	b.n	800585e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800577e:	4b3b      	ldr	r3, [pc, #236]	; (800586c <HAL_RCC_ClockConfig+0x1bc>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0302 	and.w	r3, r3, #2
 8005786:	2b00      	cmp	r3, #0
 8005788:	d101      	bne.n	800578e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e067      	b.n	800585e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800578e:	4b37      	ldr	r3, [pc, #220]	; (800586c <HAL_RCC_ClockConfig+0x1bc>)
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f023 0203 	bic.w	r2, r3, #3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	4934      	ldr	r1, [pc, #208]	; (800586c <HAL_RCC_ClockConfig+0x1bc>)
 800579c:	4313      	orrs	r3, r2
 800579e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057a0:	f7fe fd54 	bl	800424c <HAL_GetTick>
 80057a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057a6:	e00a      	b.n	80057be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057a8:	f7fe fd50 	bl	800424c <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d901      	bls.n	80057be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e04f      	b.n	800585e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057be:	4b2b      	ldr	r3, [pc, #172]	; (800586c <HAL_RCC_ClockConfig+0x1bc>)
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f003 020c 	and.w	r2, r3, #12
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d1eb      	bne.n	80057a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057d0:	4b25      	ldr	r3, [pc, #148]	; (8005868 <HAL_RCC_ClockConfig+0x1b8>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0307 	and.w	r3, r3, #7
 80057d8:	683a      	ldr	r2, [r7, #0]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d20c      	bcs.n	80057f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057de:	4b22      	ldr	r3, [pc, #136]	; (8005868 <HAL_RCC_ClockConfig+0x1b8>)
 80057e0:	683a      	ldr	r2, [r7, #0]
 80057e2:	b2d2      	uxtb	r2, r2
 80057e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057e6:	4b20      	ldr	r3, [pc, #128]	; (8005868 <HAL_RCC_ClockConfig+0x1b8>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0307 	and.w	r3, r3, #7
 80057ee:	683a      	ldr	r2, [r7, #0]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d001      	beq.n	80057f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e032      	b.n	800585e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 0304 	and.w	r3, r3, #4
 8005800:	2b00      	cmp	r3, #0
 8005802:	d008      	beq.n	8005816 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005804:	4b19      	ldr	r3, [pc, #100]	; (800586c <HAL_RCC_ClockConfig+0x1bc>)
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	4916      	ldr	r1, [pc, #88]	; (800586c <HAL_RCC_ClockConfig+0x1bc>)
 8005812:	4313      	orrs	r3, r2
 8005814:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 0308 	and.w	r3, r3, #8
 800581e:	2b00      	cmp	r3, #0
 8005820:	d009      	beq.n	8005836 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005822:	4b12      	ldr	r3, [pc, #72]	; (800586c <HAL_RCC_ClockConfig+0x1bc>)
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	00db      	lsls	r3, r3, #3
 8005830:	490e      	ldr	r1, [pc, #56]	; (800586c <HAL_RCC_ClockConfig+0x1bc>)
 8005832:	4313      	orrs	r3, r2
 8005834:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005836:	f000 f821 	bl	800587c <HAL_RCC_GetSysClockFreq>
 800583a:	4602      	mov	r2, r0
 800583c:	4b0b      	ldr	r3, [pc, #44]	; (800586c <HAL_RCC_ClockConfig+0x1bc>)
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	091b      	lsrs	r3, r3, #4
 8005842:	f003 030f 	and.w	r3, r3, #15
 8005846:	490a      	ldr	r1, [pc, #40]	; (8005870 <HAL_RCC_ClockConfig+0x1c0>)
 8005848:	5ccb      	ldrb	r3, [r1, r3]
 800584a:	fa22 f303 	lsr.w	r3, r2, r3
 800584e:	4a09      	ldr	r2, [pc, #36]	; (8005874 <HAL_RCC_ClockConfig+0x1c4>)
 8005850:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005852:	4b09      	ldr	r3, [pc, #36]	; (8005878 <HAL_RCC_ClockConfig+0x1c8>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4618      	mov	r0, r3
 8005858:	f7fe fcb4 	bl	80041c4 <HAL_InitTick>

  return HAL_OK;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3710      	adds	r7, #16
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	40023c00 	.word	0x40023c00
 800586c:	40023800 	.word	0x40023800
 8005870:	0800c4dc 	.word	0x0800c4dc
 8005874:	20000034 	.word	0x20000034
 8005878:	20000038 	.word	0x20000038

0800587c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800587c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005880:	b094      	sub	sp, #80	; 0x50
 8005882:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005884:	2300      	movs	r3, #0
 8005886:	647b      	str	r3, [r7, #68]	; 0x44
 8005888:	2300      	movs	r3, #0
 800588a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800588c:	2300      	movs	r3, #0
 800588e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005890:	2300      	movs	r3, #0
 8005892:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005894:	4b79      	ldr	r3, [pc, #484]	; (8005a7c <HAL_RCC_GetSysClockFreq+0x200>)
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	f003 030c 	and.w	r3, r3, #12
 800589c:	2b08      	cmp	r3, #8
 800589e:	d00d      	beq.n	80058bc <HAL_RCC_GetSysClockFreq+0x40>
 80058a0:	2b08      	cmp	r3, #8
 80058a2:	f200 80e1 	bhi.w	8005a68 <HAL_RCC_GetSysClockFreq+0x1ec>
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d002      	beq.n	80058b0 <HAL_RCC_GetSysClockFreq+0x34>
 80058aa:	2b04      	cmp	r3, #4
 80058ac:	d003      	beq.n	80058b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80058ae:	e0db      	b.n	8005a68 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80058b0:	4b73      	ldr	r3, [pc, #460]	; (8005a80 <HAL_RCC_GetSysClockFreq+0x204>)
 80058b2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80058b4:	e0db      	b.n	8005a6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80058b6:	4b73      	ldr	r3, [pc, #460]	; (8005a84 <HAL_RCC_GetSysClockFreq+0x208>)
 80058b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80058ba:	e0d8      	b.n	8005a6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80058bc:	4b6f      	ldr	r3, [pc, #444]	; (8005a7c <HAL_RCC_GetSysClockFreq+0x200>)
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058c4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80058c6:	4b6d      	ldr	r3, [pc, #436]	; (8005a7c <HAL_RCC_GetSysClockFreq+0x200>)
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d063      	beq.n	800599a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058d2:	4b6a      	ldr	r3, [pc, #424]	; (8005a7c <HAL_RCC_GetSysClockFreq+0x200>)
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	099b      	lsrs	r3, r3, #6
 80058d8:	2200      	movs	r2, #0
 80058da:	63bb      	str	r3, [r7, #56]	; 0x38
 80058dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80058de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058e4:	633b      	str	r3, [r7, #48]	; 0x30
 80058e6:	2300      	movs	r3, #0
 80058e8:	637b      	str	r3, [r7, #52]	; 0x34
 80058ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80058ee:	4622      	mov	r2, r4
 80058f0:	462b      	mov	r3, r5
 80058f2:	f04f 0000 	mov.w	r0, #0
 80058f6:	f04f 0100 	mov.w	r1, #0
 80058fa:	0159      	lsls	r1, r3, #5
 80058fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005900:	0150      	lsls	r0, r2, #5
 8005902:	4602      	mov	r2, r0
 8005904:	460b      	mov	r3, r1
 8005906:	4621      	mov	r1, r4
 8005908:	1a51      	subs	r1, r2, r1
 800590a:	6139      	str	r1, [r7, #16]
 800590c:	4629      	mov	r1, r5
 800590e:	eb63 0301 	sbc.w	r3, r3, r1
 8005912:	617b      	str	r3, [r7, #20]
 8005914:	f04f 0200 	mov.w	r2, #0
 8005918:	f04f 0300 	mov.w	r3, #0
 800591c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005920:	4659      	mov	r1, fp
 8005922:	018b      	lsls	r3, r1, #6
 8005924:	4651      	mov	r1, sl
 8005926:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800592a:	4651      	mov	r1, sl
 800592c:	018a      	lsls	r2, r1, #6
 800592e:	4651      	mov	r1, sl
 8005930:	ebb2 0801 	subs.w	r8, r2, r1
 8005934:	4659      	mov	r1, fp
 8005936:	eb63 0901 	sbc.w	r9, r3, r1
 800593a:	f04f 0200 	mov.w	r2, #0
 800593e:	f04f 0300 	mov.w	r3, #0
 8005942:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005946:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800594a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800594e:	4690      	mov	r8, r2
 8005950:	4699      	mov	r9, r3
 8005952:	4623      	mov	r3, r4
 8005954:	eb18 0303 	adds.w	r3, r8, r3
 8005958:	60bb      	str	r3, [r7, #8]
 800595a:	462b      	mov	r3, r5
 800595c:	eb49 0303 	adc.w	r3, r9, r3
 8005960:	60fb      	str	r3, [r7, #12]
 8005962:	f04f 0200 	mov.w	r2, #0
 8005966:	f04f 0300 	mov.w	r3, #0
 800596a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800596e:	4629      	mov	r1, r5
 8005970:	024b      	lsls	r3, r1, #9
 8005972:	4621      	mov	r1, r4
 8005974:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005978:	4621      	mov	r1, r4
 800597a:	024a      	lsls	r2, r1, #9
 800597c:	4610      	mov	r0, r2
 800597e:	4619      	mov	r1, r3
 8005980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005982:	2200      	movs	r2, #0
 8005984:	62bb      	str	r3, [r7, #40]	; 0x28
 8005986:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005988:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800598c:	f7fb f984 	bl	8000c98 <__aeabi_uldivmod>
 8005990:	4602      	mov	r2, r0
 8005992:	460b      	mov	r3, r1
 8005994:	4613      	mov	r3, r2
 8005996:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005998:	e058      	b.n	8005a4c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800599a:	4b38      	ldr	r3, [pc, #224]	; (8005a7c <HAL_RCC_GetSysClockFreq+0x200>)
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	099b      	lsrs	r3, r3, #6
 80059a0:	2200      	movs	r2, #0
 80059a2:	4618      	mov	r0, r3
 80059a4:	4611      	mov	r1, r2
 80059a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80059aa:	623b      	str	r3, [r7, #32]
 80059ac:	2300      	movs	r3, #0
 80059ae:	627b      	str	r3, [r7, #36]	; 0x24
 80059b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80059b4:	4642      	mov	r2, r8
 80059b6:	464b      	mov	r3, r9
 80059b8:	f04f 0000 	mov.w	r0, #0
 80059bc:	f04f 0100 	mov.w	r1, #0
 80059c0:	0159      	lsls	r1, r3, #5
 80059c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059c6:	0150      	lsls	r0, r2, #5
 80059c8:	4602      	mov	r2, r0
 80059ca:	460b      	mov	r3, r1
 80059cc:	4641      	mov	r1, r8
 80059ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80059d2:	4649      	mov	r1, r9
 80059d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80059d8:	f04f 0200 	mov.w	r2, #0
 80059dc:	f04f 0300 	mov.w	r3, #0
 80059e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80059e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80059e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80059ec:	ebb2 040a 	subs.w	r4, r2, sl
 80059f0:	eb63 050b 	sbc.w	r5, r3, fp
 80059f4:	f04f 0200 	mov.w	r2, #0
 80059f8:	f04f 0300 	mov.w	r3, #0
 80059fc:	00eb      	lsls	r3, r5, #3
 80059fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a02:	00e2      	lsls	r2, r4, #3
 8005a04:	4614      	mov	r4, r2
 8005a06:	461d      	mov	r5, r3
 8005a08:	4643      	mov	r3, r8
 8005a0a:	18e3      	adds	r3, r4, r3
 8005a0c:	603b      	str	r3, [r7, #0]
 8005a0e:	464b      	mov	r3, r9
 8005a10:	eb45 0303 	adc.w	r3, r5, r3
 8005a14:	607b      	str	r3, [r7, #4]
 8005a16:	f04f 0200 	mov.w	r2, #0
 8005a1a:	f04f 0300 	mov.w	r3, #0
 8005a1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a22:	4629      	mov	r1, r5
 8005a24:	028b      	lsls	r3, r1, #10
 8005a26:	4621      	mov	r1, r4
 8005a28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a2c:	4621      	mov	r1, r4
 8005a2e:	028a      	lsls	r2, r1, #10
 8005a30:	4610      	mov	r0, r2
 8005a32:	4619      	mov	r1, r3
 8005a34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a36:	2200      	movs	r2, #0
 8005a38:	61bb      	str	r3, [r7, #24]
 8005a3a:	61fa      	str	r2, [r7, #28]
 8005a3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a40:	f7fb f92a 	bl	8000c98 <__aeabi_uldivmod>
 8005a44:	4602      	mov	r2, r0
 8005a46:	460b      	mov	r3, r1
 8005a48:	4613      	mov	r3, r2
 8005a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a4c:	4b0b      	ldr	r3, [pc, #44]	; (8005a7c <HAL_RCC_GetSysClockFreq+0x200>)
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	0c1b      	lsrs	r3, r3, #16
 8005a52:	f003 0303 	and.w	r3, r3, #3
 8005a56:	3301      	adds	r3, #1
 8005a58:	005b      	lsls	r3, r3, #1
 8005a5a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005a5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a64:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a66:	e002      	b.n	8005a6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a68:	4b05      	ldr	r3, [pc, #20]	; (8005a80 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a6a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3750      	adds	r7, #80	; 0x50
 8005a74:	46bd      	mov	sp, r7
 8005a76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a7a:	bf00      	nop
 8005a7c:	40023800 	.word	0x40023800
 8005a80:	00f42400 	.word	0x00f42400
 8005a84:	007a1200 	.word	0x007a1200

08005a88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a8c:	4b03      	ldr	r3, [pc, #12]	; (8005a9c <HAL_RCC_GetHCLKFreq+0x14>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	20000034 	.word	0x20000034

08005aa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005aa4:	f7ff fff0 	bl	8005a88 <HAL_RCC_GetHCLKFreq>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	4b05      	ldr	r3, [pc, #20]	; (8005ac0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	0a9b      	lsrs	r3, r3, #10
 8005ab0:	f003 0307 	and.w	r3, r3, #7
 8005ab4:	4903      	ldr	r1, [pc, #12]	; (8005ac4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ab6:	5ccb      	ldrb	r3, [r1, r3]
 8005ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	40023800 	.word	0x40023800
 8005ac4:	0800c4ec 	.word	0x0800c4ec

08005ac8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005acc:	f7ff ffdc 	bl	8005a88 <HAL_RCC_GetHCLKFreq>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	4b05      	ldr	r3, [pc, #20]	; (8005ae8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	0b5b      	lsrs	r3, r3, #13
 8005ad8:	f003 0307 	and.w	r3, r3, #7
 8005adc:	4903      	ldr	r1, [pc, #12]	; (8005aec <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ade:	5ccb      	ldrb	r3, [r1, r3]
 8005ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	40023800 	.word	0x40023800
 8005aec:	0800c4ec 	.word	0x0800c4ec

08005af0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b086      	sub	sp, #24
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005af8:	2300      	movs	r3, #0
 8005afa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005afc:	2300      	movs	r3, #0
 8005afe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0301 	and.w	r3, r3, #1
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d105      	bne.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d038      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005b18:	4b68      	ldr	r3, [pc, #416]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b1e:	f7fe fb95 	bl	800424c <HAL_GetTick>
 8005b22:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b24:	e008      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005b26:	f7fe fb91 	bl	800424c <HAL_GetTick>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d901      	bls.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e0bd      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b38:	4b61      	ldr	r3, [pc, #388]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1f0      	bne.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685a      	ldr	r2, [r3, #4]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	019b      	lsls	r3, r3, #6
 8005b4e:	431a      	orrs	r2, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	071b      	lsls	r3, r3, #28
 8005b56:	495a      	ldr	r1, [pc, #360]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005b5e:	4b57      	ldr	r3, [pc, #348]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005b60:	2201      	movs	r2, #1
 8005b62:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b64:	f7fe fb72 	bl	800424c <HAL_GetTick>
 8005b68:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b6a:	e008      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005b6c:	f7fe fb6e 	bl	800424c <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	d901      	bls.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e09a      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b7e:	4b50      	ldr	r3, [pc, #320]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d0f0      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 0302 	and.w	r3, r3, #2
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	f000 8083 	beq.w	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005b98:	2300      	movs	r3, #0
 8005b9a:	60fb      	str	r3, [r7, #12]
 8005b9c:	4b48      	ldr	r3, [pc, #288]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba0:	4a47      	ldr	r2, [pc, #284]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ba6:	6413      	str	r3, [r2, #64]	; 0x40
 8005ba8:	4b45      	ldr	r3, [pc, #276]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bb0:	60fb      	str	r3, [r7, #12]
 8005bb2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005bb4:	4b43      	ldr	r3, [pc, #268]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a42      	ldr	r2, [pc, #264]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005bba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bbe:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005bc0:	f7fe fb44 	bl	800424c <HAL_GetTick>
 8005bc4:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005bc6:	e008      	b.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005bc8:	f7fe fb40 	bl	800424c <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d901      	bls.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	e06c      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005bda:	4b3a      	ldr	r3, [pc, #232]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d0f0      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005be6:	4b36      	ldr	r3, [pc, #216]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bee:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d02f      	beq.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d028      	beq.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c04:	4b2e      	ldr	r3, [pc, #184]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c0c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c0e:	4b2e      	ldr	r3, [pc, #184]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005c10:	2201      	movs	r2, #1
 8005c12:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c14:	4b2c      	ldr	r3, [pc, #176]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005c16:	2200      	movs	r2, #0
 8005c18:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005c1a:	4a29      	ldr	r2, [pc, #164]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005c20:	4b27      	ldr	r3, [pc, #156]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c24:	f003 0301 	and.w	r3, r3, #1
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d114      	bne.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005c2c:	f7fe fb0e 	bl	800424c <HAL_GetTick>
 8005c30:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c32:	e00a      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c34:	f7fe fb0a 	bl	800424c <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d901      	bls.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	e034      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c4a:	4b1d      	ldr	r3, [pc, #116]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c4e:	f003 0302 	and.w	r3, r3, #2
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d0ee      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c62:	d10d      	bne.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005c64:	4b16      	ldr	r3, [pc, #88]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005c74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c78:	4911      	ldr	r1, [pc, #68]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	608b      	str	r3, [r1, #8]
 8005c7e:	e005      	b.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005c80:	4b0f      	ldr	r3, [pc, #60]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	4a0e      	ldr	r2, [pc, #56]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c86:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005c8a:	6093      	str	r3, [r2, #8]
 8005c8c:	4b0c      	ldr	r3, [pc, #48]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c98:	4909      	ldr	r1, [pc, #36]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0308 	and.w	r3, r3, #8
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d003      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	7d1a      	ldrb	r2, [r3, #20]
 8005cae:	4b07      	ldr	r3, [pc, #28]	; (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005cb0:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3718      	adds	r7, #24
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	42470068 	.word	0x42470068
 8005cc0:	40023800 	.word	0x40023800
 8005cc4:	40007000 	.word	0x40007000
 8005cc8:	42470e40 	.word	0x42470e40
 8005ccc:	424711e0 	.word	0x424711e0

08005cd0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d101      	bne.n	8005ce6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e066      	b.n	8005db4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	7f5b      	ldrb	r3, [r3, #29]
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d105      	bne.n	8005cfc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f7fd fe54 	bl	80039a4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2202      	movs	r2, #2
 8005d00:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	22ca      	movs	r2, #202	; 0xca
 8005d08:	625a      	str	r2, [r3, #36]	; 0x24
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2253      	movs	r2, #83	; 0x53
 8005d10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 fa45 	bl	80061a2 <RTC_EnterInitMode>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005d1c:	7bfb      	ldrb	r3, [r7, #15]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d12c      	bne.n	8005d7c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	6812      	ldr	r2, [r2, #0]
 8005d2c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005d30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d34:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	6899      	ldr	r1, [r3, #8]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685a      	ldr	r2, [r3, #4]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	431a      	orrs	r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	695b      	ldr	r3, [r3, #20]
 8005d4a:	431a      	orrs	r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	430a      	orrs	r2, r1
 8005d52:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	68d2      	ldr	r2, [r2, #12]
 8005d5c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	6919      	ldr	r1, [r3, #16]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	041a      	lsls	r2, r3, #16
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	430a      	orrs	r2, r1
 8005d70:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 fa4c 	bl	8006210 <RTC_ExitInitMode>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005d7c:	7bfb      	ldrb	r3, [r7, #15]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d113      	bne.n	8005daa <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005d90:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	699a      	ldr	r2, [r3, #24]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	430a      	orrs	r2, r1
 8005da2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	22ff      	movs	r2, #255	; 0xff
 8005db0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3710      	adds	r7, #16
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005dbc:	b590      	push	{r4, r7, lr}
 8005dbe:	b087      	sub	sp, #28
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	7f1b      	ldrb	r3, [r3, #28]
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d101      	bne.n	8005dd8 <HAL_RTC_SetTime+0x1c>
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	e087      	b.n	8005ee8 <HAL_RTC_SetTime+0x12c>
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2202      	movs	r2, #2
 8005de2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d126      	bne.n	8005e38 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d102      	bne.n	8005dfe <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	4618      	mov	r0, r3
 8005e04:	f000 fa29 	bl	800625a <RTC_ByteToBcd2>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	785b      	ldrb	r3, [r3, #1]
 8005e10:	4618      	mov	r0, r3
 8005e12:	f000 fa22 	bl	800625a <RTC_ByteToBcd2>
 8005e16:	4603      	mov	r3, r0
 8005e18:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005e1a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	789b      	ldrb	r3, [r3, #2]
 8005e20:	4618      	mov	r0, r3
 8005e22:	f000 fa1a 	bl	800625a <RTC_ByteToBcd2>
 8005e26:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005e28:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	78db      	ldrb	r3, [r3, #3]
 8005e30:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005e32:	4313      	orrs	r3, r2
 8005e34:	617b      	str	r3, [r7, #20]
 8005e36:	e018      	b.n	8005e6a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d102      	bne.n	8005e4c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	785b      	ldrb	r3, [r3, #1]
 8005e56:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005e58:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005e5a:	68ba      	ldr	r2, [r7, #8]
 8005e5c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005e5e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	78db      	ldrb	r3, [r3, #3]
 8005e64:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005e66:	4313      	orrs	r3, r2
 8005e68:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	22ca      	movs	r2, #202	; 0xca
 8005e70:	625a      	str	r2, [r3, #36]	; 0x24
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2253      	movs	r2, #83	; 0x53
 8005e78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005e7a:	68f8      	ldr	r0, [r7, #12]
 8005e7c:	f000 f991 	bl	80061a2 <RTC_EnterInitMode>
 8005e80:	4603      	mov	r3, r0
 8005e82:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005e84:	7cfb      	ldrb	r3, [r7, #19]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d120      	bne.n	8005ecc <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005e94:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005e98:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	689a      	ldr	r2, [r3, #8]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005ea8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	6899      	ldr	r1, [r3, #8]
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	68da      	ldr	r2, [r3, #12]
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	431a      	orrs	r2, r3
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	430a      	orrs	r2, r1
 8005ec0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005ec2:	68f8      	ldr	r0, [r7, #12]
 8005ec4:	f000 f9a4 	bl	8006210 <RTC_ExitInitMode>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005ecc:	7cfb      	ldrb	r3, [r7, #19]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d102      	bne.n	8005ed8 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	22ff      	movs	r2, #255	; 0xff
 8005ede:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	771a      	strb	r2, [r3, #28]

  return status;
 8005ee6:	7cfb      	ldrb	r3, [r7, #19]
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	371c      	adds	r7, #28
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd90      	pop	{r4, r7, pc}

08005ef0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b086      	sub	sp, #24
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005efc:	2300      	movs	r3, #0
 8005efe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005f22:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005f26:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	0c1b      	lsrs	r3, r3, #16
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f32:	b2da      	uxtb	r2, r3
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	0a1b      	lsrs	r3, r3, #8
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f42:	b2da      	uxtb	r2, r3
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f50:	b2da      	uxtb	r2, r3
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	0d9b      	lsrs	r3, r3, #22
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	f003 0301 	and.w	r3, r3, #1
 8005f60:	b2da      	uxtb	r2, r3
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d11a      	bne.n	8005fa2 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	4618      	mov	r0, r3
 8005f72:	f000 f98f 	bl	8006294 <RTC_Bcd2ToByte>
 8005f76:	4603      	mov	r3, r0
 8005f78:	461a      	mov	r2, r3
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	785b      	ldrb	r3, [r3, #1]
 8005f82:	4618      	mov	r0, r3
 8005f84:	f000 f986 	bl	8006294 <RTC_Bcd2ToByte>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	789b      	ldrb	r3, [r3, #2]
 8005f94:	4618      	mov	r0, r3
 8005f96:	f000 f97d 	bl	8006294 <RTC_Bcd2ToByte>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3718      	adds	r7, #24
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005fac:	b590      	push	{r4, r7, lr}
 8005fae:	b087      	sub	sp, #28
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	7f1b      	ldrb	r3, [r3, #28]
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d101      	bne.n	8005fc8 <HAL_RTC_SetDate+0x1c>
 8005fc4:	2302      	movs	r3, #2
 8005fc6:	e071      	b.n	80060ac <HAL_RTC_SetDate+0x100>
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2202      	movs	r2, #2
 8005fd2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d10e      	bne.n	8005ff8 <HAL_RTC_SetDate+0x4c>
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	785b      	ldrb	r3, [r3, #1]
 8005fde:	f003 0310 	and.w	r3, r3, #16
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d008      	beq.n	8005ff8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	785b      	ldrb	r3, [r3, #1]
 8005fea:	f023 0310 	bic.w	r3, r3, #16
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	330a      	adds	r3, #10
 8005ff2:	b2da      	uxtb	r2, r3
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d11c      	bne.n	8006038 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	78db      	ldrb	r3, [r3, #3]
 8006002:	4618      	mov	r0, r3
 8006004:	f000 f929 	bl	800625a <RTC_ByteToBcd2>
 8006008:	4603      	mov	r3, r0
 800600a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	785b      	ldrb	r3, [r3, #1]
 8006010:	4618      	mov	r0, r3
 8006012:	f000 f922 	bl	800625a <RTC_ByteToBcd2>
 8006016:	4603      	mov	r3, r0
 8006018:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800601a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	789b      	ldrb	r3, [r3, #2]
 8006020:	4618      	mov	r0, r3
 8006022:	f000 f91a 	bl	800625a <RTC_ByteToBcd2>
 8006026:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006028:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006032:	4313      	orrs	r3, r2
 8006034:	617b      	str	r3, [r7, #20]
 8006036:	e00e      	b.n	8006056 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	78db      	ldrb	r3, [r3, #3]
 800603c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	785b      	ldrb	r3, [r3, #1]
 8006042:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006044:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800604a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006052:	4313      	orrs	r3, r2
 8006054:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	22ca      	movs	r2, #202	; 0xca
 800605c:	625a      	str	r2, [r3, #36]	; 0x24
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2253      	movs	r2, #83	; 0x53
 8006064:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	f000 f89b 	bl	80061a2 <RTC_EnterInitMode>
 800606c:	4603      	mov	r3, r0
 800606e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006070:	7cfb      	ldrb	r3, [r7, #19]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d10c      	bne.n	8006090 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006080:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006084:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f000 f8c2 	bl	8006210 <RTC_ExitInitMode>
 800608c:	4603      	mov	r3, r0
 800608e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006090:	7cfb      	ldrb	r3, [r7, #19]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d102      	bne.n	800609c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2201      	movs	r2, #1
 800609a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	22ff      	movs	r2, #255	; 0xff
 80060a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	771a      	strb	r2, [r3, #28]

  return status;
 80060aa:	7cfb      	ldrb	r3, [r7, #19]
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	371c      	adds	r7, #28
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd90      	pop	{r4, r7, pc}

080060b4 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b086      	sub	sp, #24
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80060c0:	2300      	movs	r3, #0
 80060c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80060ce:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80060d2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	0c1b      	lsrs	r3, r3, #16
 80060d8:	b2da      	uxtb	r2, r3
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	0a1b      	lsrs	r3, r3, #8
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	f003 031f 	and.w	r3, r3, #31
 80060e8:	b2da      	uxtb	r2, r3
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060f6:	b2da      	uxtb	r2, r3
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	0b5b      	lsrs	r3, r3, #13
 8006100:	b2db      	uxtb	r3, r3
 8006102:	f003 0307 	and.w	r3, r3, #7
 8006106:	b2da      	uxtb	r2, r3
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d11a      	bne.n	8006148 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	78db      	ldrb	r3, [r3, #3]
 8006116:	4618      	mov	r0, r3
 8006118:	f000 f8bc 	bl	8006294 <RTC_Bcd2ToByte>
 800611c:	4603      	mov	r3, r0
 800611e:	461a      	mov	r2, r3
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	785b      	ldrb	r3, [r3, #1]
 8006128:	4618      	mov	r0, r3
 800612a:	f000 f8b3 	bl	8006294 <RTC_Bcd2ToByte>
 800612e:	4603      	mov	r3, r0
 8006130:	461a      	mov	r2, r3
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	789b      	ldrb	r3, [r3, #2]
 800613a:	4618      	mov	r0, r3
 800613c:	f000 f8aa 	bl	8006294 <RTC_Bcd2ToByte>
 8006140:	4603      	mov	r3, r0
 8006142:	461a      	mov	r2, r3
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3718      	adds	r7, #24
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b084      	sub	sp, #16
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800615a:	2300      	movs	r3, #0
 800615c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	68da      	ldr	r2, [r3, #12]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800616c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800616e:	f7fe f86d 	bl	800424c <HAL_GetTick>
 8006172:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006174:	e009      	b.n	800618a <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006176:	f7fe f869 	bl	800424c <HAL_GetTick>
 800617a:	4602      	mov	r2, r0
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006184:	d901      	bls.n	800618a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e007      	b.n	800619a <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	f003 0320 	and.w	r3, r3, #32
 8006194:	2b00      	cmp	r3, #0
 8006196:	d0ee      	beq.n	8006176 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	3710      	adds	r7, #16
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b084      	sub	sp, #16
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80061aa:	2300      	movs	r3, #0
 80061ac:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80061ae:	2300      	movs	r3, #0
 80061b0:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d122      	bne.n	8006206 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68da      	ldr	r2, [r3, #12]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80061ce:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80061d0:	f7fe f83c 	bl	800424c <HAL_GetTick>
 80061d4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80061d6:	e00c      	b.n	80061f2 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80061d8:	f7fe f838 	bl	800424c <HAL_GetTick>
 80061dc:	4602      	mov	r2, r0
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061e6:	d904      	bls.n	80061f2 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2204      	movs	r2, #4
 80061ec:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d102      	bne.n	8006206 <RTC_EnterInitMode+0x64>
 8006200:	7bfb      	ldrb	r3, [r7, #15]
 8006202:	2b01      	cmp	r3, #1
 8006204:	d1e8      	bne.n	80061d8 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006206:	7bfb      	ldrb	r3, [r7, #15]
}
 8006208:	4618      	mov	r0, r3
 800620a:	3710      	adds	r7, #16
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006218:	2300      	movs	r3, #0
 800621a:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	68da      	ldr	r2, [r3, #12]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800622a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	f003 0320 	and.w	r3, r3, #32
 8006236:	2b00      	cmp	r3, #0
 8006238:	d10a      	bne.n	8006250 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f7ff ff89 	bl	8006152 <HAL_RTC_WaitForSynchro>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d004      	beq.n	8006250 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2204      	movs	r2, #4
 800624a:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006250:	7bfb      	ldrb	r3, [r7, #15]
}
 8006252:	4618      	mov	r0, r3
 8006254:	3710      	adds	r7, #16
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}

0800625a <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800625a:	b480      	push	{r7}
 800625c:	b085      	sub	sp, #20
 800625e:	af00      	add	r7, sp, #0
 8006260:	4603      	mov	r3, r0
 8006262:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8006264:	2300      	movs	r3, #0
 8006266:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8006268:	e005      	b.n	8006276 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800626a:	7bfb      	ldrb	r3, [r7, #15]
 800626c:	3301      	adds	r3, #1
 800626e:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8006270:	79fb      	ldrb	r3, [r7, #7]
 8006272:	3b0a      	subs	r3, #10
 8006274:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006276:	79fb      	ldrb	r3, [r7, #7]
 8006278:	2b09      	cmp	r3, #9
 800627a:	d8f6      	bhi.n	800626a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800627c:	7bfb      	ldrb	r3, [r7, #15]
 800627e:	011b      	lsls	r3, r3, #4
 8006280:	b2da      	uxtb	r2, r3
 8006282:	79fb      	ldrb	r3, [r7, #7]
 8006284:	4313      	orrs	r3, r2
 8006286:	b2db      	uxtb	r3, r3
}
 8006288:	4618      	mov	r0, r3
 800628a:	3714      	adds	r7, #20
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006294:	b480      	push	{r7}
 8006296:	b085      	sub	sp, #20
 8006298:	af00      	add	r7, sp, #0
 800629a:	4603      	mov	r3, r0
 800629c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800629e:	2300      	movs	r3, #0
 80062a0:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80062a2:	79fb      	ldrb	r3, [r7, #7]
 80062a4:	091b      	lsrs	r3, r3, #4
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	461a      	mov	r2, r3
 80062aa:	0092      	lsls	r2, r2, #2
 80062ac:	4413      	add	r3, r2
 80062ae:	005b      	lsls	r3, r3, #1
 80062b0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80062b2:	79fb      	ldrb	r3, [r7, #7]
 80062b4:	f003 030f 	and.w	r3, r3, #15
 80062b8:	b2da      	uxtb	r2, r3
 80062ba:	7bfb      	ldrb	r3, [r7, #15]
 80062bc:	4413      	add	r3, r2
 80062be:	b2db      	uxtb	r3, r3
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3714      	adds	r7, #20
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b082      	sub	sp, #8
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d101      	bne.n	80062de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	e041      	b.n	8006362 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d106      	bne.n	80062f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f7fd fb82 	bl	80039fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2202      	movs	r2, #2
 80062fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	3304      	adds	r3, #4
 8006308:	4619      	mov	r1, r3
 800630a:	4610      	mov	r0, r2
 800630c:	f000 fe00 	bl	8006f10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006360:	2300      	movs	r3, #0
}
 8006362:	4618      	mov	r0, r3
 8006364:	3708      	adds	r7, #8
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}

0800636a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800636a:	b580      	push	{r7, lr}
 800636c:	b082      	sub	sp, #8
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d101      	bne.n	800637c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	e041      	b.n	8006400 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006382:	b2db      	uxtb	r3, r3
 8006384:	2b00      	cmp	r3, #0
 8006386:	d106      	bne.n	8006396 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 f839 	bl	8006408 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2202      	movs	r2, #2
 800639a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	3304      	adds	r3, #4
 80063a6:	4619      	mov	r1, r3
 80063a8:	4610      	mov	r0, r2
 80063aa:	f000 fdb1 	bl	8006f10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2201      	movs	r2, #1
 80063b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2201      	movs	r2, #1
 80063ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2201      	movs	r2, #1
 80063ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2201      	movs	r2, #1
 80063d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2201      	movs	r2, #1
 80063da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2201      	movs	r2, #1
 80063e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2201      	movs	r2, #1
 80063ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2201      	movs	r2, #1
 80063f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2201      	movs	r2, #1
 80063fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063fe:	2300      	movs	r3, #0
}
 8006400:	4618      	mov	r0, r3
 8006402:	3708      	adds	r7, #8
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006410:	bf00      	nop
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d109      	bne.n	8006440 <HAL_TIM_PWM_Start+0x24>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006432:	b2db      	uxtb	r3, r3
 8006434:	2b01      	cmp	r3, #1
 8006436:	bf14      	ite	ne
 8006438:	2301      	movne	r3, #1
 800643a:	2300      	moveq	r3, #0
 800643c:	b2db      	uxtb	r3, r3
 800643e:	e022      	b.n	8006486 <HAL_TIM_PWM_Start+0x6a>
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	2b04      	cmp	r3, #4
 8006444:	d109      	bne.n	800645a <HAL_TIM_PWM_Start+0x3e>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800644c:	b2db      	uxtb	r3, r3
 800644e:	2b01      	cmp	r3, #1
 8006450:	bf14      	ite	ne
 8006452:	2301      	movne	r3, #1
 8006454:	2300      	moveq	r3, #0
 8006456:	b2db      	uxtb	r3, r3
 8006458:	e015      	b.n	8006486 <HAL_TIM_PWM_Start+0x6a>
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	2b08      	cmp	r3, #8
 800645e:	d109      	bne.n	8006474 <HAL_TIM_PWM_Start+0x58>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006466:	b2db      	uxtb	r3, r3
 8006468:	2b01      	cmp	r3, #1
 800646a:	bf14      	ite	ne
 800646c:	2301      	movne	r3, #1
 800646e:	2300      	moveq	r3, #0
 8006470:	b2db      	uxtb	r3, r3
 8006472:	e008      	b.n	8006486 <HAL_TIM_PWM_Start+0x6a>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800647a:	b2db      	uxtb	r3, r3
 800647c:	2b01      	cmp	r3, #1
 800647e:	bf14      	ite	ne
 8006480:	2301      	movne	r3, #1
 8006482:	2300      	moveq	r3, #0
 8006484:	b2db      	uxtb	r3, r3
 8006486:	2b00      	cmp	r3, #0
 8006488:	d001      	beq.n	800648e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e068      	b.n	8006560 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d104      	bne.n	800649e <HAL_TIM_PWM_Start+0x82>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2202      	movs	r2, #2
 8006498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800649c:	e013      	b.n	80064c6 <HAL_TIM_PWM_Start+0xaa>
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	2b04      	cmp	r3, #4
 80064a2:	d104      	bne.n	80064ae <HAL_TIM_PWM_Start+0x92>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2202      	movs	r2, #2
 80064a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064ac:	e00b      	b.n	80064c6 <HAL_TIM_PWM_Start+0xaa>
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	2b08      	cmp	r3, #8
 80064b2:	d104      	bne.n	80064be <HAL_TIM_PWM_Start+0xa2>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2202      	movs	r2, #2
 80064b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064bc:	e003      	b.n	80064c6 <HAL_TIM_PWM_Start+0xaa>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2202      	movs	r2, #2
 80064c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	2201      	movs	r2, #1
 80064cc:	6839      	ldr	r1, [r7, #0]
 80064ce:	4618      	mov	r0, r3
 80064d0:	f001 f8e2 	bl	8007698 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a23      	ldr	r2, [pc, #140]	; (8006568 <HAL_TIM_PWM_Start+0x14c>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d107      	bne.n	80064ee <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a1d      	ldr	r2, [pc, #116]	; (8006568 <HAL_TIM_PWM_Start+0x14c>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d018      	beq.n	800652a <HAL_TIM_PWM_Start+0x10e>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006500:	d013      	beq.n	800652a <HAL_TIM_PWM_Start+0x10e>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a19      	ldr	r2, [pc, #100]	; (800656c <HAL_TIM_PWM_Start+0x150>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d00e      	beq.n	800652a <HAL_TIM_PWM_Start+0x10e>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a17      	ldr	r2, [pc, #92]	; (8006570 <HAL_TIM_PWM_Start+0x154>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d009      	beq.n	800652a <HAL_TIM_PWM_Start+0x10e>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a16      	ldr	r2, [pc, #88]	; (8006574 <HAL_TIM_PWM_Start+0x158>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d004      	beq.n	800652a <HAL_TIM_PWM_Start+0x10e>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a14      	ldr	r2, [pc, #80]	; (8006578 <HAL_TIM_PWM_Start+0x15c>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d111      	bne.n	800654e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	f003 0307 	and.w	r3, r3, #7
 8006534:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2b06      	cmp	r3, #6
 800653a:	d010      	beq.n	800655e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f042 0201 	orr.w	r2, r2, #1
 800654a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800654c:	e007      	b.n	800655e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f042 0201 	orr.w	r2, r2, #1
 800655c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	3710      	adds	r7, #16
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	40010000 	.word	0x40010000
 800656c:	40000400 	.word	0x40000400
 8006570:	40000800 	.word	0x40000800
 8006574:	40000c00 	.word	0x40000c00
 8006578:	40014000 	.word	0x40014000

0800657c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b082      	sub	sp, #8
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d101      	bne.n	800658e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e041      	b.n	8006612 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006594:	b2db      	uxtb	r3, r3
 8006596:	2b00      	cmp	r3, #0
 8006598:	d106      	bne.n	80065a8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 f839 	bl	800661a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2202      	movs	r2, #2
 80065ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	3304      	adds	r3, #4
 80065b8:	4619      	mov	r1, r3
 80065ba:	4610      	mov	r0, r2
 80065bc:	f000 fca8 	bl	8006f10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3708      	adds	r7, #8
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}

0800661a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800661a:	b480      	push	{r7}
 800661c:	b083      	sub	sp, #12
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006622:	bf00      	nop
 8006624:	370c      	adds	r7, #12
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr
	...

08006630 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800663a:	2300      	movs	r3, #0
 800663c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d104      	bne.n	800664e <HAL_TIM_IC_Start_IT+0x1e>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800664a:	b2db      	uxtb	r3, r3
 800664c:	e013      	b.n	8006676 <HAL_TIM_IC_Start_IT+0x46>
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	2b04      	cmp	r3, #4
 8006652:	d104      	bne.n	800665e <HAL_TIM_IC_Start_IT+0x2e>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800665a:	b2db      	uxtb	r3, r3
 800665c:	e00b      	b.n	8006676 <HAL_TIM_IC_Start_IT+0x46>
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	2b08      	cmp	r3, #8
 8006662:	d104      	bne.n	800666e <HAL_TIM_IC_Start_IT+0x3e>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800666a:	b2db      	uxtb	r3, r3
 800666c:	e003      	b.n	8006676 <HAL_TIM_IC_Start_IT+0x46>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006674:	b2db      	uxtb	r3, r3
 8006676:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d104      	bne.n	8006688 <HAL_TIM_IC_Start_IT+0x58>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006684:	b2db      	uxtb	r3, r3
 8006686:	e013      	b.n	80066b0 <HAL_TIM_IC_Start_IT+0x80>
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	2b04      	cmp	r3, #4
 800668c:	d104      	bne.n	8006698 <HAL_TIM_IC_Start_IT+0x68>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006694:	b2db      	uxtb	r3, r3
 8006696:	e00b      	b.n	80066b0 <HAL_TIM_IC_Start_IT+0x80>
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	2b08      	cmp	r3, #8
 800669c:	d104      	bne.n	80066a8 <HAL_TIM_IC_Start_IT+0x78>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	e003      	b.n	80066b0 <HAL_TIM_IC_Start_IT+0x80>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80066b2:	7bbb      	ldrb	r3, [r7, #14]
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d102      	bne.n	80066be <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80066b8:	7b7b      	ldrb	r3, [r7, #13]
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d001      	beq.n	80066c2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e0c2      	b.n	8006848 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d104      	bne.n	80066d2 <HAL_TIM_IC_Start_IT+0xa2>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2202      	movs	r2, #2
 80066cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066d0:	e013      	b.n	80066fa <HAL_TIM_IC_Start_IT+0xca>
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	2b04      	cmp	r3, #4
 80066d6:	d104      	bne.n	80066e2 <HAL_TIM_IC_Start_IT+0xb2>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2202      	movs	r2, #2
 80066dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066e0:	e00b      	b.n	80066fa <HAL_TIM_IC_Start_IT+0xca>
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	2b08      	cmp	r3, #8
 80066e6:	d104      	bne.n	80066f2 <HAL_TIM_IC_Start_IT+0xc2>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2202      	movs	r2, #2
 80066ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066f0:	e003      	b.n	80066fa <HAL_TIM_IC_Start_IT+0xca>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2202      	movs	r2, #2
 80066f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d104      	bne.n	800670a <HAL_TIM_IC_Start_IT+0xda>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2202      	movs	r2, #2
 8006704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006708:	e013      	b.n	8006732 <HAL_TIM_IC_Start_IT+0x102>
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	2b04      	cmp	r3, #4
 800670e:	d104      	bne.n	800671a <HAL_TIM_IC_Start_IT+0xea>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2202      	movs	r2, #2
 8006714:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006718:	e00b      	b.n	8006732 <HAL_TIM_IC_Start_IT+0x102>
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	2b08      	cmp	r3, #8
 800671e:	d104      	bne.n	800672a <HAL_TIM_IC_Start_IT+0xfa>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2202      	movs	r2, #2
 8006724:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006728:	e003      	b.n	8006732 <HAL_TIM_IC_Start_IT+0x102>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2202      	movs	r2, #2
 800672e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	2b0c      	cmp	r3, #12
 8006736:	d841      	bhi.n	80067bc <HAL_TIM_IC_Start_IT+0x18c>
 8006738:	a201      	add	r2, pc, #4	; (adr r2, 8006740 <HAL_TIM_IC_Start_IT+0x110>)
 800673a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800673e:	bf00      	nop
 8006740:	08006775 	.word	0x08006775
 8006744:	080067bd 	.word	0x080067bd
 8006748:	080067bd 	.word	0x080067bd
 800674c:	080067bd 	.word	0x080067bd
 8006750:	08006787 	.word	0x08006787
 8006754:	080067bd 	.word	0x080067bd
 8006758:	080067bd 	.word	0x080067bd
 800675c:	080067bd 	.word	0x080067bd
 8006760:	08006799 	.word	0x08006799
 8006764:	080067bd 	.word	0x080067bd
 8006768:	080067bd 	.word	0x080067bd
 800676c:	080067bd 	.word	0x080067bd
 8006770:	080067ab 	.word	0x080067ab
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	68da      	ldr	r2, [r3, #12]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f042 0202 	orr.w	r2, r2, #2
 8006782:	60da      	str	r2, [r3, #12]
      break;
 8006784:	e01d      	b.n	80067c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	68da      	ldr	r2, [r3, #12]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f042 0204 	orr.w	r2, r2, #4
 8006794:	60da      	str	r2, [r3, #12]
      break;
 8006796:	e014      	b.n	80067c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	68da      	ldr	r2, [r3, #12]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f042 0208 	orr.w	r2, r2, #8
 80067a6:	60da      	str	r2, [r3, #12]
      break;
 80067a8:	e00b      	b.n	80067c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68da      	ldr	r2, [r3, #12]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f042 0210 	orr.w	r2, r2, #16
 80067b8:	60da      	str	r2, [r3, #12]
      break;
 80067ba:	e002      	b.n	80067c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	73fb      	strb	r3, [r7, #15]
      break;
 80067c0:	bf00      	nop
  }

  if (status == HAL_OK)
 80067c2:	7bfb      	ldrb	r3, [r7, #15]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d13e      	bne.n	8006846 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2201      	movs	r2, #1
 80067ce:	6839      	ldr	r1, [r7, #0]
 80067d0:	4618      	mov	r0, r3
 80067d2:	f000 ff61 	bl	8007698 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a1d      	ldr	r2, [pc, #116]	; (8006850 <HAL_TIM_IC_Start_IT+0x220>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d018      	beq.n	8006812 <HAL_TIM_IC_Start_IT+0x1e2>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067e8:	d013      	beq.n	8006812 <HAL_TIM_IC_Start_IT+0x1e2>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a19      	ldr	r2, [pc, #100]	; (8006854 <HAL_TIM_IC_Start_IT+0x224>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d00e      	beq.n	8006812 <HAL_TIM_IC_Start_IT+0x1e2>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a17      	ldr	r2, [pc, #92]	; (8006858 <HAL_TIM_IC_Start_IT+0x228>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d009      	beq.n	8006812 <HAL_TIM_IC_Start_IT+0x1e2>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a16      	ldr	r2, [pc, #88]	; (800685c <HAL_TIM_IC_Start_IT+0x22c>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d004      	beq.n	8006812 <HAL_TIM_IC_Start_IT+0x1e2>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a14      	ldr	r2, [pc, #80]	; (8006860 <HAL_TIM_IC_Start_IT+0x230>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d111      	bne.n	8006836 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	f003 0307 	and.w	r3, r3, #7
 800681c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	2b06      	cmp	r3, #6
 8006822:	d010      	beq.n	8006846 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f042 0201 	orr.w	r2, r2, #1
 8006832:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006834:	e007      	b.n	8006846 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f042 0201 	orr.w	r2, r2, #1
 8006844:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006846:	7bfb      	ldrb	r3, [r7, #15]
}
 8006848:	4618      	mov	r0, r3
 800684a:	3710      	adds	r7, #16
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}
 8006850:	40010000 	.word	0x40010000
 8006854:	40000400 	.word	0x40000400
 8006858:	40000800 	.word	0x40000800
 800685c:	40000c00 	.word	0x40000c00
 8006860:	40014000 	.word	0x40014000

08006864 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	f003 0302 	and.w	r3, r3, #2
 8006876:	2b02      	cmp	r3, #2
 8006878:	d122      	bne.n	80068c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	f003 0302 	and.w	r3, r3, #2
 8006884:	2b02      	cmp	r3, #2
 8006886:	d11b      	bne.n	80068c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f06f 0202 	mvn.w	r2, #2
 8006890:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2201      	movs	r2, #1
 8006896:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	699b      	ldr	r3, [r3, #24]
 800689e:	f003 0303 	and.w	r3, r3, #3
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d003      	beq.n	80068ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f7fb f80c 	bl	80018c4 <HAL_TIM_IC_CaptureCallback>
 80068ac:	e005      	b.n	80068ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 fb0f 	bl	8006ed2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f000 fb16 	bl	8006ee6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	f003 0304 	and.w	r3, r3, #4
 80068ca:	2b04      	cmp	r3, #4
 80068cc:	d122      	bne.n	8006914 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	f003 0304 	and.w	r3, r3, #4
 80068d8:	2b04      	cmp	r3, #4
 80068da:	d11b      	bne.n	8006914 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f06f 0204 	mvn.w	r2, #4
 80068e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2202      	movs	r2, #2
 80068ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	699b      	ldr	r3, [r3, #24]
 80068f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d003      	beq.n	8006902 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f7fa ffe2 	bl	80018c4 <HAL_TIM_IC_CaptureCallback>
 8006900:	e005      	b.n	800690e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 fae5 	bl	8006ed2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 faec 	bl	8006ee6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	f003 0308 	and.w	r3, r3, #8
 800691e:	2b08      	cmp	r3, #8
 8006920:	d122      	bne.n	8006968 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	f003 0308 	and.w	r3, r3, #8
 800692c:	2b08      	cmp	r3, #8
 800692e:	d11b      	bne.n	8006968 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f06f 0208 	mvn.w	r2, #8
 8006938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2204      	movs	r2, #4
 800693e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	69db      	ldr	r3, [r3, #28]
 8006946:	f003 0303 	and.w	r3, r3, #3
 800694a:	2b00      	cmp	r3, #0
 800694c:	d003      	beq.n	8006956 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f7fa ffb8 	bl	80018c4 <HAL_TIM_IC_CaptureCallback>
 8006954:	e005      	b.n	8006962 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 fabb 	bl	8006ed2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 fac2 	bl	8006ee6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	f003 0310 	and.w	r3, r3, #16
 8006972:	2b10      	cmp	r3, #16
 8006974:	d122      	bne.n	80069bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	f003 0310 	and.w	r3, r3, #16
 8006980:	2b10      	cmp	r3, #16
 8006982:	d11b      	bne.n	80069bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f06f 0210 	mvn.w	r2, #16
 800698c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2208      	movs	r2, #8
 8006992:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	69db      	ldr	r3, [r3, #28]
 800699a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d003      	beq.n	80069aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f7fa ff8e 	bl	80018c4 <HAL_TIM_IC_CaptureCallback>
 80069a8:	e005      	b.n	80069b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 fa91 	bl	8006ed2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 fa98 	bl	8006ee6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	f003 0301 	and.w	r3, r3, #1
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d10e      	bne.n	80069e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	f003 0301 	and.w	r3, r3, #1
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d107      	bne.n	80069e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f06f 0201 	mvn.w	r2, #1
 80069e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 fa6b 	bl	8006ebe <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069f2:	2b80      	cmp	r3, #128	; 0x80
 80069f4:	d10e      	bne.n	8006a14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a00:	2b80      	cmp	r3, #128	; 0x80
 8006a02:	d107      	bne.n	8006a14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 fee0 	bl	80077d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a1e:	2b40      	cmp	r3, #64	; 0x40
 8006a20:	d10e      	bne.n	8006a40 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a2c:	2b40      	cmp	r3, #64	; 0x40
 8006a2e:	d107      	bne.n	8006a40 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 fa5d 	bl	8006efa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	f003 0320 	and.w	r3, r3, #32
 8006a4a:	2b20      	cmp	r3, #32
 8006a4c:	d10e      	bne.n	8006a6c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	f003 0320 	and.w	r3, r3, #32
 8006a58:	2b20      	cmp	r3, #32
 8006a5a:	d107      	bne.n	8006a6c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f06f 0220 	mvn.w	r2, #32
 8006a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 feaa 	bl	80077c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a6c:	bf00      	nop
 8006a6e:	3708      	adds	r7, #8
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b086      	sub	sp, #24
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a80:	2300      	movs	r3, #0
 8006a82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d101      	bne.n	8006a92 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006a8e:	2302      	movs	r3, #2
 8006a90:	e088      	b.n	8006ba4 <HAL_TIM_IC_ConfigChannel+0x130>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2201      	movs	r2, #1
 8006a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d11b      	bne.n	8006ad8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6818      	ldr	r0, [r3, #0]
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	6819      	ldr	r1, [r3, #0]
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	685a      	ldr	r2, [r3, #4]
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	f000 fc3a 	bl	8007328 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	699a      	ldr	r2, [r3, #24]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f022 020c 	bic.w	r2, r2, #12
 8006ac2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	6999      	ldr	r1, [r3, #24]
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	689a      	ldr	r2, [r3, #8]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	430a      	orrs	r2, r1
 8006ad4:	619a      	str	r2, [r3, #24]
 8006ad6:	e060      	b.n	8006b9a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2b04      	cmp	r3, #4
 8006adc:	d11c      	bne.n	8006b18 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6818      	ldr	r0, [r3, #0]
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	6819      	ldr	r1, [r3, #0]
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	685a      	ldr	r2, [r3, #4]
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	f000 fcb2 	bl	8007456 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	699a      	ldr	r2, [r3, #24]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006b00:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	6999      	ldr	r1, [r3, #24]
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	021a      	lsls	r2, r3, #8
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	430a      	orrs	r2, r1
 8006b14:	619a      	str	r2, [r3, #24]
 8006b16:	e040      	b.n	8006b9a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2b08      	cmp	r3, #8
 8006b1c:	d11b      	bne.n	8006b56 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6818      	ldr	r0, [r3, #0]
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	6819      	ldr	r1, [r3, #0]
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	685a      	ldr	r2, [r3, #4]
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	f000 fcff 	bl	8007530 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	69da      	ldr	r2, [r3, #28]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f022 020c 	bic.w	r2, r2, #12
 8006b40:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	69d9      	ldr	r1, [r3, #28]
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	689a      	ldr	r2, [r3, #8]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	430a      	orrs	r2, r1
 8006b52:	61da      	str	r2, [r3, #28]
 8006b54:	e021      	b.n	8006b9a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2b0c      	cmp	r3, #12
 8006b5a:	d11c      	bne.n	8006b96 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	6818      	ldr	r0, [r3, #0]
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	6819      	ldr	r1, [r3, #0]
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	685a      	ldr	r2, [r3, #4]
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	f000 fd1c 	bl	80075a8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	69da      	ldr	r2, [r3, #28]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006b7e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	69d9      	ldr	r1, [r3, #28]
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	021a      	lsls	r2, r3, #8
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	430a      	orrs	r2, r1
 8006b92:	61da      	str	r2, [r3, #28]
 8006b94:	e001      	b.n	8006b9a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3718      	adds	r7, #24
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b086      	sub	sp, #24
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d101      	bne.n	8006bca <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006bc6:	2302      	movs	r3, #2
 8006bc8:	e0ae      	b.n	8006d28 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2b0c      	cmp	r3, #12
 8006bd6:	f200 809f 	bhi.w	8006d18 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006bda:	a201      	add	r2, pc, #4	; (adr r2, 8006be0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be0:	08006c15 	.word	0x08006c15
 8006be4:	08006d19 	.word	0x08006d19
 8006be8:	08006d19 	.word	0x08006d19
 8006bec:	08006d19 	.word	0x08006d19
 8006bf0:	08006c55 	.word	0x08006c55
 8006bf4:	08006d19 	.word	0x08006d19
 8006bf8:	08006d19 	.word	0x08006d19
 8006bfc:	08006d19 	.word	0x08006d19
 8006c00:	08006c97 	.word	0x08006c97
 8006c04:	08006d19 	.word	0x08006d19
 8006c08:	08006d19 	.word	0x08006d19
 8006c0c:	08006d19 	.word	0x08006d19
 8006c10:	08006cd7 	.word	0x08006cd7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68b9      	ldr	r1, [r7, #8]
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f000 f9f8 	bl	8007010 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	699a      	ldr	r2, [r3, #24]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f042 0208 	orr.w	r2, r2, #8
 8006c2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	699a      	ldr	r2, [r3, #24]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f022 0204 	bic.w	r2, r2, #4
 8006c3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	6999      	ldr	r1, [r3, #24]
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	691a      	ldr	r2, [r3, #16]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	430a      	orrs	r2, r1
 8006c50:	619a      	str	r2, [r3, #24]
      break;
 8006c52:	e064      	b.n	8006d1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	68b9      	ldr	r1, [r7, #8]
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f000 fa3e 	bl	80070dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	699a      	ldr	r2, [r3, #24]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	699a      	ldr	r2, [r3, #24]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	6999      	ldr	r1, [r3, #24]
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	021a      	lsls	r2, r3, #8
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	430a      	orrs	r2, r1
 8006c92:	619a      	str	r2, [r3, #24]
      break;
 8006c94:	e043      	b.n	8006d1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	68b9      	ldr	r1, [r7, #8]
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f000 fa89 	bl	80071b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	69da      	ldr	r2, [r3, #28]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f042 0208 	orr.w	r2, r2, #8
 8006cb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	69da      	ldr	r2, [r3, #28]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f022 0204 	bic.w	r2, r2, #4
 8006cc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	69d9      	ldr	r1, [r3, #28]
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	691a      	ldr	r2, [r3, #16]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	430a      	orrs	r2, r1
 8006cd2:	61da      	str	r2, [r3, #28]
      break;
 8006cd4:	e023      	b.n	8006d1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	68b9      	ldr	r1, [r7, #8]
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f000 fad3 	bl	8007288 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	69da      	ldr	r2, [r3, #28]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	69da      	ldr	r2, [r3, #28]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	69d9      	ldr	r1, [r3, #28]
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	691b      	ldr	r3, [r3, #16]
 8006d0c:	021a      	lsls	r2, r3, #8
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	430a      	orrs	r2, r1
 8006d14:	61da      	str	r2, [r3, #28]
      break;
 8006d16:	e002      	b.n	8006d1e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	75fb      	strb	r3, [r7, #23]
      break;
 8006d1c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d26:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3718      	adds	r7, #24
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d101      	bne.n	8006d4c <HAL_TIM_ConfigClockSource+0x1c>
 8006d48:	2302      	movs	r3, #2
 8006d4a:	e0b4      	b.n	8006eb6 <HAL_TIM_ConfigClockSource+0x186>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2202      	movs	r2, #2
 8006d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006d6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	68ba      	ldr	r2, [r7, #8]
 8006d7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d84:	d03e      	beq.n	8006e04 <HAL_TIM_ConfigClockSource+0xd4>
 8006d86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d8a:	f200 8087 	bhi.w	8006e9c <HAL_TIM_ConfigClockSource+0x16c>
 8006d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d92:	f000 8086 	beq.w	8006ea2 <HAL_TIM_ConfigClockSource+0x172>
 8006d96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d9a:	d87f      	bhi.n	8006e9c <HAL_TIM_ConfigClockSource+0x16c>
 8006d9c:	2b70      	cmp	r3, #112	; 0x70
 8006d9e:	d01a      	beq.n	8006dd6 <HAL_TIM_ConfigClockSource+0xa6>
 8006da0:	2b70      	cmp	r3, #112	; 0x70
 8006da2:	d87b      	bhi.n	8006e9c <HAL_TIM_ConfigClockSource+0x16c>
 8006da4:	2b60      	cmp	r3, #96	; 0x60
 8006da6:	d050      	beq.n	8006e4a <HAL_TIM_ConfigClockSource+0x11a>
 8006da8:	2b60      	cmp	r3, #96	; 0x60
 8006daa:	d877      	bhi.n	8006e9c <HAL_TIM_ConfigClockSource+0x16c>
 8006dac:	2b50      	cmp	r3, #80	; 0x50
 8006dae:	d03c      	beq.n	8006e2a <HAL_TIM_ConfigClockSource+0xfa>
 8006db0:	2b50      	cmp	r3, #80	; 0x50
 8006db2:	d873      	bhi.n	8006e9c <HAL_TIM_ConfigClockSource+0x16c>
 8006db4:	2b40      	cmp	r3, #64	; 0x40
 8006db6:	d058      	beq.n	8006e6a <HAL_TIM_ConfigClockSource+0x13a>
 8006db8:	2b40      	cmp	r3, #64	; 0x40
 8006dba:	d86f      	bhi.n	8006e9c <HAL_TIM_ConfigClockSource+0x16c>
 8006dbc:	2b30      	cmp	r3, #48	; 0x30
 8006dbe:	d064      	beq.n	8006e8a <HAL_TIM_ConfigClockSource+0x15a>
 8006dc0:	2b30      	cmp	r3, #48	; 0x30
 8006dc2:	d86b      	bhi.n	8006e9c <HAL_TIM_ConfigClockSource+0x16c>
 8006dc4:	2b20      	cmp	r3, #32
 8006dc6:	d060      	beq.n	8006e8a <HAL_TIM_ConfigClockSource+0x15a>
 8006dc8:	2b20      	cmp	r3, #32
 8006dca:	d867      	bhi.n	8006e9c <HAL_TIM_ConfigClockSource+0x16c>
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d05c      	beq.n	8006e8a <HAL_TIM_ConfigClockSource+0x15a>
 8006dd0:	2b10      	cmp	r3, #16
 8006dd2:	d05a      	beq.n	8006e8a <HAL_TIM_ConfigClockSource+0x15a>
 8006dd4:	e062      	b.n	8006e9c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6818      	ldr	r0, [r3, #0]
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	6899      	ldr	r1, [r3, #8]
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	685a      	ldr	r2, [r3, #4]
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	f000 fc37 	bl	8007658 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006df8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68ba      	ldr	r2, [r7, #8]
 8006e00:	609a      	str	r2, [r3, #8]
      break;
 8006e02:	e04f      	b.n	8006ea4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6818      	ldr	r0, [r3, #0]
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	6899      	ldr	r1, [r3, #8]
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	685a      	ldr	r2, [r3, #4]
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	f000 fc20 	bl	8007658 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	689a      	ldr	r2, [r3, #8]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e26:	609a      	str	r2, [r3, #8]
      break;
 8006e28:	e03c      	b.n	8006ea4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6818      	ldr	r0, [r3, #0]
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	6859      	ldr	r1, [r3, #4]
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	461a      	mov	r2, r3
 8006e38:	f000 fade 	bl	80073f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2150      	movs	r1, #80	; 0x50
 8006e42:	4618      	mov	r0, r3
 8006e44:	f000 fbed 	bl	8007622 <TIM_ITRx_SetConfig>
      break;
 8006e48:	e02c      	b.n	8006ea4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6818      	ldr	r0, [r3, #0]
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	6859      	ldr	r1, [r3, #4]
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	461a      	mov	r2, r3
 8006e58:	f000 fb3a 	bl	80074d0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2160      	movs	r1, #96	; 0x60
 8006e62:	4618      	mov	r0, r3
 8006e64:	f000 fbdd 	bl	8007622 <TIM_ITRx_SetConfig>
      break;
 8006e68:	e01c      	b.n	8006ea4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6818      	ldr	r0, [r3, #0]
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	6859      	ldr	r1, [r3, #4]
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	461a      	mov	r2, r3
 8006e78:	f000 fabe 	bl	80073f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2140      	movs	r1, #64	; 0x40
 8006e82:	4618      	mov	r0, r3
 8006e84:	f000 fbcd 	bl	8007622 <TIM_ITRx_SetConfig>
      break;
 8006e88:	e00c      	b.n	8006ea4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4619      	mov	r1, r3
 8006e94:	4610      	mov	r0, r2
 8006e96:	f000 fbc4 	bl	8007622 <TIM_ITRx_SetConfig>
      break;
 8006e9a:	e003      	b.n	8006ea4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	73fb      	strb	r3, [r7, #15]
      break;
 8006ea0:	e000      	b.n	8006ea4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006ea2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3710      	adds	r7, #16
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}

08006ebe <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ebe:	b480      	push	{r7}
 8006ec0:	b083      	sub	sp, #12
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006ec6:	bf00      	nop
 8006ec8:	370c      	adds	r7, #12
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr

08006ed2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ed2:	b480      	push	{r7}
 8006ed4:	b083      	sub	sp, #12
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006eda:	bf00      	nop
 8006edc:	370c      	adds	r7, #12
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr

08006ee6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ee6:	b480      	push	{r7}
 8006ee8:	b083      	sub	sp, #12
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006eee:	bf00      	nop
 8006ef0:	370c      	adds	r7, #12
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr

08006efa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006efa:	b480      	push	{r7}
 8006efc:	b083      	sub	sp, #12
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f02:	bf00      	nop
 8006f04:	370c      	adds	r7, #12
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr
	...

08006f10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b085      	sub	sp, #20
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	4a34      	ldr	r2, [pc, #208]	; (8006ff4 <TIM_Base_SetConfig+0xe4>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d00f      	beq.n	8006f48 <TIM_Base_SetConfig+0x38>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f2e:	d00b      	beq.n	8006f48 <TIM_Base_SetConfig+0x38>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	4a31      	ldr	r2, [pc, #196]	; (8006ff8 <TIM_Base_SetConfig+0xe8>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d007      	beq.n	8006f48 <TIM_Base_SetConfig+0x38>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	4a30      	ldr	r2, [pc, #192]	; (8006ffc <TIM_Base_SetConfig+0xec>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d003      	beq.n	8006f48 <TIM_Base_SetConfig+0x38>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	4a2f      	ldr	r2, [pc, #188]	; (8007000 <TIM_Base_SetConfig+0xf0>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d108      	bne.n	8006f5a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a25      	ldr	r2, [pc, #148]	; (8006ff4 <TIM_Base_SetConfig+0xe4>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d01b      	beq.n	8006f9a <TIM_Base_SetConfig+0x8a>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f68:	d017      	beq.n	8006f9a <TIM_Base_SetConfig+0x8a>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4a22      	ldr	r2, [pc, #136]	; (8006ff8 <TIM_Base_SetConfig+0xe8>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d013      	beq.n	8006f9a <TIM_Base_SetConfig+0x8a>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a21      	ldr	r2, [pc, #132]	; (8006ffc <TIM_Base_SetConfig+0xec>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d00f      	beq.n	8006f9a <TIM_Base_SetConfig+0x8a>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4a20      	ldr	r2, [pc, #128]	; (8007000 <TIM_Base_SetConfig+0xf0>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d00b      	beq.n	8006f9a <TIM_Base_SetConfig+0x8a>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4a1f      	ldr	r2, [pc, #124]	; (8007004 <TIM_Base_SetConfig+0xf4>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d007      	beq.n	8006f9a <TIM_Base_SetConfig+0x8a>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a1e      	ldr	r2, [pc, #120]	; (8007008 <TIM_Base_SetConfig+0xf8>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d003      	beq.n	8006f9a <TIM_Base_SetConfig+0x8a>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a1d      	ldr	r2, [pc, #116]	; (800700c <TIM_Base_SetConfig+0xfc>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d108      	bne.n	8006fac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	68fa      	ldr	r2, [r7, #12]
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	695b      	ldr	r3, [r3, #20]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	68fa      	ldr	r2, [r7, #12]
 8006fbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	689a      	ldr	r2, [r3, #8]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a08      	ldr	r2, [pc, #32]	; (8006ff4 <TIM_Base_SetConfig+0xe4>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d103      	bne.n	8006fe0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	691a      	ldr	r2, [r3, #16]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	615a      	str	r2, [r3, #20]
}
 8006fe6:	bf00      	nop
 8006fe8:	3714      	adds	r7, #20
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop
 8006ff4:	40010000 	.word	0x40010000
 8006ff8:	40000400 	.word	0x40000400
 8006ffc:	40000800 	.word	0x40000800
 8007000:	40000c00 	.word	0x40000c00
 8007004:	40014000 	.word	0x40014000
 8007008:	40014400 	.word	0x40014400
 800700c:	40014800 	.word	0x40014800

08007010 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007010:	b480      	push	{r7}
 8007012:	b087      	sub	sp, #28
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a1b      	ldr	r3, [r3, #32]
 800701e:	f023 0201 	bic.w	r2, r3, #1
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6a1b      	ldr	r3, [r3, #32]
 800702a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	699b      	ldr	r3, [r3, #24]
 8007036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800703e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f023 0303 	bic.w	r3, r3, #3
 8007046:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	4313      	orrs	r3, r2
 8007050:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	f023 0302 	bic.w	r3, r3, #2
 8007058:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	697a      	ldr	r2, [r7, #20]
 8007060:	4313      	orrs	r3, r2
 8007062:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4a1c      	ldr	r2, [pc, #112]	; (80070d8 <TIM_OC1_SetConfig+0xc8>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d10c      	bne.n	8007086 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	f023 0308 	bic.w	r3, r3, #8
 8007072:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	697a      	ldr	r2, [r7, #20]
 800707a:	4313      	orrs	r3, r2
 800707c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	f023 0304 	bic.w	r3, r3, #4
 8007084:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4a13      	ldr	r2, [pc, #76]	; (80070d8 <TIM_OC1_SetConfig+0xc8>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d111      	bne.n	80070b2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007094:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800709c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	695b      	ldr	r3, [r3, #20]
 80070a2:	693a      	ldr	r2, [r7, #16]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	699b      	ldr	r3, [r3, #24]
 80070ac:	693a      	ldr	r2, [r7, #16]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	693a      	ldr	r2, [r7, #16]
 80070b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	68fa      	ldr	r2, [r7, #12]
 80070bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	685a      	ldr	r2, [r3, #4]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	697a      	ldr	r2, [r7, #20]
 80070ca:	621a      	str	r2, [r3, #32]
}
 80070cc:	bf00      	nop
 80070ce:	371c      	adds	r7, #28
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr
 80070d8:	40010000 	.word	0x40010000

080070dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070dc:	b480      	push	{r7}
 80070de:	b087      	sub	sp, #28
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a1b      	ldr	r3, [r3, #32]
 80070ea:	f023 0210 	bic.w	r2, r3, #16
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a1b      	ldr	r3, [r3, #32]
 80070f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	699b      	ldr	r3, [r3, #24]
 8007102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800710a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007112:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	021b      	lsls	r3, r3, #8
 800711a:	68fa      	ldr	r2, [r7, #12]
 800711c:	4313      	orrs	r3, r2
 800711e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	f023 0320 	bic.w	r3, r3, #32
 8007126:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	011b      	lsls	r3, r3, #4
 800712e:	697a      	ldr	r2, [r7, #20]
 8007130:	4313      	orrs	r3, r2
 8007132:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4a1e      	ldr	r2, [pc, #120]	; (80071b0 <TIM_OC2_SetConfig+0xd4>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d10d      	bne.n	8007158 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007142:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	011b      	lsls	r3, r3, #4
 800714a:	697a      	ldr	r2, [r7, #20]
 800714c:	4313      	orrs	r3, r2
 800714e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007156:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	4a15      	ldr	r2, [pc, #84]	; (80071b0 <TIM_OC2_SetConfig+0xd4>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d113      	bne.n	8007188 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007166:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800716e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	695b      	ldr	r3, [r3, #20]
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	693a      	ldr	r2, [r7, #16]
 8007178:	4313      	orrs	r3, r2
 800717a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	699b      	ldr	r3, [r3, #24]
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	693a      	ldr	r2, [r7, #16]
 8007184:	4313      	orrs	r3, r2
 8007186:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	693a      	ldr	r2, [r7, #16]
 800718c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	68fa      	ldr	r2, [r7, #12]
 8007192:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	685a      	ldr	r2, [r3, #4]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	697a      	ldr	r2, [r7, #20]
 80071a0:	621a      	str	r2, [r3, #32]
}
 80071a2:	bf00      	nop
 80071a4:	371c      	adds	r7, #28
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	40010000 	.word	0x40010000

080071b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b087      	sub	sp, #28
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6a1b      	ldr	r3, [r3, #32]
 80071c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a1b      	ldr	r3, [r3, #32]
 80071ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	69db      	ldr	r3, [r3, #28]
 80071da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f023 0303 	bic.w	r3, r3, #3
 80071ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68fa      	ldr	r2, [r7, #12]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	021b      	lsls	r3, r3, #8
 8007204:	697a      	ldr	r2, [r7, #20]
 8007206:	4313      	orrs	r3, r2
 8007208:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	4a1d      	ldr	r2, [pc, #116]	; (8007284 <TIM_OC3_SetConfig+0xd0>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d10d      	bne.n	800722e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007218:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	021b      	lsls	r3, r3, #8
 8007220:	697a      	ldr	r2, [r7, #20]
 8007222:	4313      	orrs	r3, r2
 8007224:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800722c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	4a14      	ldr	r2, [pc, #80]	; (8007284 <TIM_OC3_SetConfig+0xd0>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d113      	bne.n	800725e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800723c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007244:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	695b      	ldr	r3, [r3, #20]
 800724a:	011b      	lsls	r3, r3, #4
 800724c:	693a      	ldr	r2, [r7, #16]
 800724e:	4313      	orrs	r3, r2
 8007250:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	699b      	ldr	r3, [r3, #24]
 8007256:	011b      	lsls	r3, r3, #4
 8007258:	693a      	ldr	r2, [r7, #16]
 800725a:	4313      	orrs	r3, r2
 800725c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	693a      	ldr	r2, [r7, #16]
 8007262:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	68fa      	ldr	r2, [r7, #12]
 8007268:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	685a      	ldr	r2, [r3, #4]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	697a      	ldr	r2, [r7, #20]
 8007276:	621a      	str	r2, [r3, #32]
}
 8007278:	bf00      	nop
 800727a:	371c      	adds	r7, #28
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr
 8007284:	40010000 	.word	0x40010000

08007288 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007288:	b480      	push	{r7}
 800728a:	b087      	sub	sp, #28
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a1b      	ldr	r3, [r3, #32]
 8007296:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6a1b      	ldr	r3, [r3, #32]
 80072a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	69db      	ldr	r3, [r3, #28]
 80072ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	021b      	lsls	r3, r3, #8
 80072c6:	68fa      	ldr	r2, [r7, #12]
 80072c8:	4313      	orrs	r3, r2
 80072ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80072d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	031b      	lsls	r3, r3, #12
 80072da:	693a      	ldr	r2, [r7, #16]
 80072dc:	4313      	orrs	r3, r2
 80072de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	4a10      	ldr	r2, [pc, #64]	; (8007324 <TIM_OC4_SetConfig+0x9c>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d109      	bne.n	80072fc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	695b      	ldr	r3, [r3, #20]
 80072f4:	019b      	lsls	r3, r3, #6
 80072f6:	697a      	ldr	r2, [r7, #20]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	697a      	ldr	r2, [r7, #20]
 8007300:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	68fa      	ldr	r2, [r7, #12]
 8007306:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	685a      	ldr	r2, [r3, #4]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	693a      	ldr	r2, [r7, #16]
 8007314:	621a      	str	r2, [r3, #32]
}
 8007316:	bf00      	nop
 8007318:	371c      	adds	r7, #28
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr
 8007322:	bf00      	nop
 8007324:	40010000 	.word	0x40010000

08007328 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007328:	b480      	push	{r7}
 800732a:	b087      	sub	sp, #28
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	607a      	str	r2, [r7, #4]
 8007334:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	6a1b      	ldr	r3, [r3, #32]
 800733a:	f023 0201 	bic.w	r2, r3, #1
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	699b      	ldr	r3, [r3, #24]
 8007346:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6a1b      	ldr	r3, [r3, #32]
 800734c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	4a24      	ldr	r2, [pc, #144]	; (80073e4 <TIM_TI1_SetConfig+0xbc>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d013      	beq.n	800737e <TIM_TI1_SetConfig+0x56>
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800735c:	d00f      	beq.n	800737e <TIM_TI1_SetConfig+0x56>
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	4a21      	ldr	r2, [pc, #132]	; (80073e8 <TIM_TI1_SetConfig+0xc0>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d00b      	beq.n	800737e <TIM_TI1_SetConfig+0x56>
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	4a20      	ldr	r2, [pc, #128]	; (80073ec <TIM_TI1_SetConfig+0xc4>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d007      	beq.n	800737e <TIM_TI1_SetConfig+0x56>
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	4a1f      	ldr	r2, [pc, #124]	; (80073f0 <TIM_TI1_SetConfig+0xc8>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d003      	beq.n	800737e <TIM_TI1_SetConfig+0x56>
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	4a1e      	ldr	r2, [pc, #120]	; (80073f4 <TIM_TI1_SetConfig+0xcc>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d101      	bne.n	8007382 <TIM_TI1_SetConfig+0x5a>
 800737e:	2301      	movs	r3, #1
 8007380:	e000      	b.n	8007384 <TIM_TI1_SetConfig+0x5c>
 8007382:	2300      	movs	r3, #0
 8007384:	2b00      	cmp	r3, #0
 8007386:	d008      	beq.n	800739a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	f023 0303 	bic.w	r3, r3, #3
 800738e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007390:	697a      	ldr	r2, [r7, #20]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	4313      	orrs	r3, r2
 8007396:	617b      	str	r3, [r7, #20]
 8007398:	e003      	b.n	80073a2 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	f043 0301 	orr.w	r3, r3, #1
 80073a0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	011b      	lsls	r3, r3, #4
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	697a      	ldr	r2, [r7, #20]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	f023 030a 	bic.w	r3, r3, #10
 80073bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	f003 030a 	and.w	r3, r3, #10
 80073c4:	693a      	ldr	r2, [r7, #16]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	697a      	ldr	r2, [r7, #20]
 80073ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	693a      	ldr	r2, [r7, #16]
 80073d4:	621a      	str	r2, [r3, #32]
}
 80073d6:	bf00      	nop
 80073d8:	371c      	adds	r7, #28
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr
 80073e2:	bf00      	nop
 80073e4:	40010000 	.word	0x40010000
 80073e8:	40000400 	.word	0x40000400
 80073ec:	40000800 	.word	0x40000800
 80073f0:	40000c00 	.word	0x40000c00
 80073f4:	40014000 	.word	0x40014000

080073f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b087      	sub	sp, #28
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	60b9      	str	r1, [r7, #8]
 8007402:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6a1b      	ldr	r3, [r3, #32]
 8007408:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6a1b      	ldr	r3, [r3, #32]
 800740e:	f023 0201 	bic.w	r2, r3, #1
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	699b      	ldr	r3, [r3, #24]
 800741a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007422:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	011b      	lsls	r3, r3, #4
 8007428:	693a      	ldr	r2, [r7, #16]
 800742a:	4313      	orrs	r3, r2
 800742c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	f023 030a 	bic.w	r3, r3, #10
 8007434:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007436:	697a      	ldr	r2, [r7, #20]
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	4313      	orrs	r3, r2
 800743c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	693a      	ldr	r2, [r7, #16]
 8007442:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	697a      	ldr	r2, [r7, #20]
 8007448:	621a      	str	r2, [r3, #32]
}
 800744a:	bf00      	nop
 800744c:	371c      	adds	r7, #28
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr

08007456 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007456:	b480      	push	{r7}
 8007458:	b087      	sub	sp, #28
 800745a:	af00      	add	r7, sp, #0
 800745c:	60f8      	str	r0, [r7, #12]
 800745e:	60b9      	str	r1, [r7, #8]
 8007460:	607a      	str	r2, [r7, #4]
 8007462:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	6a1b      	ldr	r3, [r3, #32]
 8007468:	f023 0210 	bic.w	r2, r3, #16
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	699b      	ldr	r3, [r3, #24]
 8007474:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	6a1b      	ldr	r3, [r3, #32]
 800747a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007482:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	021b      	lsls	r3, r3, #8
 8007488:	697a      	ldr	r2, [r7, #20]
 800748a:	4313      	orrs	r3, r2
 800748c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007494:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	031b      	lsls	r3, r3, #12
 800749a:	b29b      	uxth	r3, r3
 800749c:	697a      	ldr	r2, [r7, #20]
 800749e:	4313      	orrs	r3, r2
 80074a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80074a8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	011b      	lsls	r3, r3, #4
 80074ae:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80074b2:	693a      	ldr	r2, [r7, #16]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	697a      	ldr	r2, [r7, #20]
 80074bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	693a      	ldr	r2, [r7, #16]
 80074c2:	621a      	str	r2, [r3, #32]
}
 80074c4:	bf00      	nop
 80074c6:	371c      	adds	r7, #28
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b087      	sub	sp, #28
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	60f8      	str	r0, [r7, #12]
 80074d8:	60b9      	str	r1, [r7, #8]
 80074da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	6a1b      	ldr	r3, [r3, #32]
 80074e0:	f023 0210 	bic.w	r2, r3, #16
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	699b      	ldr	r3, [r3, #24]
 80074ec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6a1b      	ldr	r3, [r3, #32]
 80074f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80074fa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	031b      	lsls	r3, r3, #12
 8007500:	697a      	ldr	r2, [r7, #20]
 8007502:	4313      	orrs	r3, r2
 8007504:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800750c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	011b      	lsls	r3, r3, #4
 8007512:	693a      	ldr	r2, [r7, #16]
 8007514:	4313      	orrs	r3, r2
 8007516:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	697a      	ldr	r2, [r7, #20]
 800751c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	693a      	ldr	r2, [r7, #16]
 8007522:	621a      	str	r2, [r3, #32]
}
 8007524:	bf00      	nop
 8007526:	371c      	adds	r7, #28
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007530:	b480      	push	{r7}
 8007532:	b087      	sub	sp, #28
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	607a      	str	r2, [r7, #4]
 800753c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	6a1b      	ldr	r3, [r3, #32]
 8007542:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	69db      	ldr	r3, [r3, #28]
 800754e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6a1b      	ldr	r3, [r3, #32]
 8007554:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	f023 0303 	bic.w	r3, r3, #3
 800755c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800755e:	697a      	ldr	r2, [r7, #20]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	4313      	orrs	r3, r2
 8007564:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800756c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	011b      	lsls	r3, r3, #4
 8007572:	b2db      	uxtb	r3, r3
 8007574:	697a      	ldr	r2, [r7, #20]
 8007576:	4313      	orrs	r3, r2
 8007578:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007580:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	021b      	lsls	r3, r3, #8
 8007586:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800758a:	693a      	ldr	r2, [r7, #16]
 800758c:	4313      	orrs	r3, r2
 800758e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	697a      	ldr	r2, [r7, #20]
 8007594:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	693a      	ldr	r2, [r7, #16]
 800759a:	621a      	str	r2, [r3, #32]
}
 800759c:	bf00      	nop
 800759e:	371c      	adds	r7, #28
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b087      	sub	sp, #28
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	607a      	str	r2, [r7, #4]
 80075b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	6a1b      	ldr	r3, [r3, #32]
 80075ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	69db      	ldr	r3, [r3, #28]
 80075c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6a1b      	ldr	r3, [r3, #32]
 80075cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075d4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	021b      	lsls	r3, r3, #8
 80075da:	697a      	ldr	r2, [r7, #20]
 80075dc:	4313      	orrs	r3, r2
 80075de:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80075e6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	031b      	lsls	r3, r3, #12
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	697a      	ldr	r2, [r7, #20]
 80075f0:	4313      	orrs	r3, r2
 80075f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80075fa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	031b      	lsls	r3, r3, #12
 8007600:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007604:	693a      	ldr	r2, [r7, #16]
 8007606:	4313      	orrs	r3, r2
 8007608:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	697a      	ldr	r2, [r7, #20]
 800760e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	693a      	ldr	r2, [r7, #16]
 8007614:	621a      	str	r2, [r3, #32]
}
 8007616:	bf00      	nop
 8007618:	371c      	adds	r7, #28
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr

08007622 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007622:	b480      	push	{r7}
 8007624:	b085      	sub	sp, #20
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
 800762a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007638:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800763a:	683a      	ldr	r2, [r7, #0]
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	4313      	orrs	r3, r2
 8007640:	f043 0307 	orr.w	r3, r3, #7
 8007644:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	68fa      	ldr	r2, [r7, #12]
 800764a:	609a      	str	r2, [r3, #8]
}
 800764c:	bf00      	nop
 800764e:	3714      	adds	r7, #20
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007658:	b480      	push	{r7}
 800765a:	b087      	sub	sp, #28
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	607a      	str	r2, [r7, #4]
 8007664:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007672:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	021a      	lsls	r2, r3, #8
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	431a      	orrs	r2, r3
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	4313      	orrs	r3, r2
 8007680:	697a      	ldr	r2, [r7, #20]
 8007682:	4313      	orrs	r3, r2
 8007684:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	697a      	ldr	r2, [r7, #20]
 800768a:	609a      	str	r2, [r3, #8]
}
 800768c:	bf00      	nop
 800768e:	371c      	adds	r7, #28
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007698:	b480      	push	{r7}
 800769a:	b087      	sub	sp, #28
 800769c:	af00      	add	r7, sp, #0
 800769e:	60f8      	str	r0, [r7, #12]
 80076a0:	60b9      	str	r1, [r7, #8]
 80076a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	f003 031f 	and.w	r3, r3, #31
 80076aa:	2201      	movs	r2, #1
 80076ac:	fa02 f303 	lsl.w	r3, r2, r3
 80076b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	6a1a      	ldr	r2, [r3, #32]
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	43db      	mvns	r3, r3
 80076ba:	401a      	ands	r2, r3
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6a1a      	ldr	r2, [r3, #32]
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	f003 031f 	and.w	r3, r3, #31
 80076ca:	6879      	ldr	r1, [r7, #4]
 80076cc:	fa01 f303 	lsl.w	r3, r1, r3
 80076d0:	431a      	orrs	r2, r3
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	621a      	str	r2, [r3, #32]
}
 80076d6:	bf00      	nop
 80076d8:	371c      	adds	r7, #28
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr
	...

080076e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b085      	sub	sp, #20
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d101      	bne.n	80076fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80076f8:	2302      	movs	r3, #2
 80076fa:	e050      	b.n	800779e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2202      	movs	r2, #2
 8007708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007722:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	68fa      	ldr	r2, [r7, #12]
 800772a:	4313      	orrs	r3, r2
 800772c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	68fa      	ldr	r2, [r7, #12]
 8007734:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a1c      	ldr	r2, [pc, #112]	; (80077ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d018      	beq.n	8007772 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007748:	d013      	beq.n	8007772 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a18      	ldr	r2, [pc, #96]	; (80077b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d00e      	beq.n	8007772 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a16      	ldr	r2, [pc, #88]	; (80077b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d009      	beq.n	8007772 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a15      	ldr	r2, [pc, #84]	; (80077b8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d004      	beq.n	8007772 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a13      	ldr	r2, [pc, #76]	; (80077bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d10c      	bne.n	800778c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007778:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	68ba      	ldr	r2, [r7, #8]
 8007780:	4313      	orrs	r3, r2
 8007782:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	68ba      	ldr	r2, [r7, #8]
 800778a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3714      	adds	r7, #20
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr
 80077aa:	bf00      	nop
 80077ac:	40010000 	.word	0x40010000
 80077b0:	40000400 	.word	0x40000400
 80077b4:	40000800 	.word	0x40000800
 80077b8:	40000c00 	.word	0x40000c00
 80077bc:	40014000 	.word	0x40014000

080077c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077c8:	bf00      	nop
 80077ca:	370c      	adds	r7, #12
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b083      	sub	sp, #12
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077dc:	bf00      	nop
 80077de:	370c      	adds	r7, #12
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr

080077e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b082      	sub	sp, #8
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d101      	bne.n	80077fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077f6:	2301      	movs	r3, #1
 80077f8:	e03f      	b.n	800787a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007800:	b2db      	uxtb	r3, r3
 8007802:	2b00      	cmp	r3, #0
 8007804:	d106      	bne.n	8007814 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2200      	movs	r2, #0
 800780a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f7fc f9a8 	bl	8003b64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2224      	movs	r2, #36	; 0x24
 8007818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	68da      	ldr	r2, [r3, #12]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800782a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 fd23 	bl	8008278 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	691a      	ldr	r2, [r3, #16]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007840:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	695a      	ldr	r2, [r3, #20]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007850:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	68da      	ldr	r2, [r3, #12]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007860:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2220      	movs	r2, #32
 800786c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2220      	movs	r2, #32
 8007874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007878:	2300      	movs	r3, #0
}
 800787a:	4618      	mov	r0, r3
 800787c:	3708      	adds	r7, #8
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}

08007882 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007882:	b480      	push	{r7}
 8007884:	b085      	sub	sp, #20
 8007886:	af00      	add	r7, sp, #0
 8007888:	60f8      	str	r0, [r7, #12]
 800788a:	60b9      	str	r1, [r7, #8]
 800788c:	4613      	mov	r3, r2
 800788e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007896:	b2db      	uxtb	r3, r3
 8007898:	2b20      	cmp	r3, #32
 800789a:	d130      	bne.n	80078fe <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d002      	beq.n	80078a8 <HAL_UART_Transmit_IT+0x26>
 80078a2:	88fb      	ldrh	r3, [r7, #6]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d101      	bne.n	80078ac <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80078a8:	2301      	movs	r3, #1
 80078aa:	e029      	b.n	8007900 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d101      	bne.n	80078ba <HAL_UART_Transmit_IT+0x38>
 80078b6:	2302      	movs	r3, #2
 80078b8:	e022      	b.n	8007900 <HAL_UART_Transmit_IT+0x7e>
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2201      	movs	r2, #1
 80078be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	68ba      	ldr	r2, [r7, #8]
 80078c6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	88fa      	ldrh	r2, [r7, #6]
 80078cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	88fa      	ldrh	r2, [r7, #6]
 80078d2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2200      	movs	r2, #0
 80078d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2221      	movs	r2, #33	; 0x21
 80078de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2200      	movs	r2, #0
 80078e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	68da      	ldr	r2, [r3, #12]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80078f8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80078fa:	2300      	movs	r3, #0
 80078fc:	e000      	b.n	8007900 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80078fe:	2302      	movs	r3, #2
  }
}
 8007900:	4618      	mov	r0, r3
 8007902:	3714      	adds	r7, #20
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
 8007912:	60f8      	str	r0, [r7, #12]
 8007914:	60b9      	str	r1, [r7, #8]
 8007916:	4613      	mov	r3, r2
 8007918:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007920:	b2db      	uxtb	r3, r3
 8007922:	2b20      	cmp	r3, #32
 8007924:	d11d      	bne.n	8007962 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d002      	beq.n	8007932 <HAL_UART_Receive_IT+0x26>
 800792c:	88fb      	ldrh	r3, [r7, #6]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d101      	bne.n	8007936 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	e016      	b.n	8007964 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800793c:	2b01      	cmp	r3, #1
 800793e:	d101      	bne.n	8007944 <HAL_UART_Receive_IT+0x38>
 8007940:	2302      	movs	r3, #2
 8007942:	e00f      	b.n	8007964 <HAL_UART_Receive_IT+0x58>
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2200      	movs	r2, #0
 8007950:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007952:	88fb      	ldrh	r3, [r7, #6]
 8007954:	461a      	mov	r2, r3
 8007956:	68b9      	ldr	r1, [r7, #8]
 8007958:	68f8      	ldr	r0, [r7, #12]
 800795a:	f000 fab5 	bl	8007ec8 <UART_Start_Receive_IT>
 800795e:	4603      	mov	r3, r0
 8007960:	e000      	b.n	8007964 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007962:	2302      	movs	r3, #2
  }
}
 8007964:	4618      	mov	r0, r3
 8007966:	3710      	adds	r7, #16
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b0ba      	sub	sp, #232	; 0xe8
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	695b      	ldr	r3, [r3, #20]
 800798e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007992:	2300      	movs	r3, #0
 8007994:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007998:	2300      	movs	r3, #0
 800799a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800799e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079a2:	f003 030f 	and.w	r3, r3, #15
 80079a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80079aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d10f      	bne.n	80079d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80079b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079b6:	f003 0320 	and.w	r3, r3, #32
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d009      	beq.n	80079d2 <HAL_UART_IRQHandler+0x66>
 80079be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079c2:	f003 0320 	and.w	r3, r3, #32
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d003      	beq.n	80079d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 fb99 	bl	8008102 <UART_Receive_IT>
      return;
 80079d0:	e256      	b.n	8007e80 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80079d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	f000 80de 	beq.w	8007b98 <HAL_UART_IRQHandler+0x22c>
 80079dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079e0:	f003 0301 	and.w	r3, r3, #1
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d106      	bne.n	80079f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80079e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079ec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	f000 80d1 	beq.w	8007b98 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80079f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079fa:	f003 0301 	and.w	r3, r3, #1
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d00b      	beq.n	8007a1a <HAL_UART_IRQHandler+0xae>
 8007a02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d005      	beq.n	8007a1a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a12:	f043 0201 	orr.w	r2, r3, #1
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a1e:	f003 0304 	and.w	r3, r3, #4
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d00b      	beq.n	8007a3e <HAL_UART_IRQHandler+0xd2>
 8007a26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a2a:	f003 0301 	and.w	r3, r3, #1
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d005      	beq.n	8007a3e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a36:	f043 0202 	orr.w	r2, r3, #2
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a42:	f003 0302 	and.w	r3, r3, #2
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d00b      	beq.n	8007a62 <HAL_UART_IRQHandler+0xf6>
 8007a4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a4e:	f003 0301 	and.w	r3, r3, #1
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d005      	beq.n	8007a62 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a5a:	f043 0204 	orr.w	r2, r3, #4
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a66:	f003 0308 	and.w	r3, r3, #8
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d011      	beq.n	8007a92 <HAL_UART_IRQHandler+0x126>
 8007a6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a72:	f003 0320 	and.w	r3, r3, #32
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d105      	bne.n	8007a86 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007a7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a7e:	f003 0301 	and.w	r3, r3, #1
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d005      	beq.n	8007a92 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a8a:	f043 0208 	orr.w	r2, r3, #8
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	f000 81ed 	beq.w	8007e76 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aa0:	f003 0320 	and.w	r3, r3, #32
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d008      	beq.n	8007aba <HAL_UART_IRQHandler+0x14e>
 8007aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aac:	f003 0320 	and.w	r3, r3, #32
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d002      	beq.n	8007aba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 fb24 	bl	8008102 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	695b      	ldr	r3, [r3, #20]
 8007ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ac4:	2b40      	cmp	r3, #64	; 0x40
 8007ac6:	bf0c      	ite	eq
 8007ac8:	2301      	moveq	r3, #1
 8007aca:	2300      	movne	r3, #0
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad6:	f003 0308 	and.w	r3, r3, #8
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d103      	bne.n	8007ae6 <HAL_UART_IRQHandler+0x17a>
 8007ade:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d04f      	beq.n	8007b86 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 fa2c 	bl	8007f44 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	695b      	ldr	r3, [r3, #20]
 8007af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007af6:	2b40      	cmp	r3, #64	; 0x40
 8007af8:	d141      	bne.n	8007b7e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	3314      	adds	r3, #20
 8007b00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b08:	e853 3f00 	ldrex	r3, [r3]
 8007b0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007b10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	3314      	adds	r3, #20
 8007b22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007b26:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007b2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007b32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007b36:	e841 2300 	strex	r3, r2, [r1]
 8007b3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007b3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d1d9      	bne.n	8007afa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d013      	beq.n	8007b76 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b52:	4a7d      	ldr	r2, [pc, #500]	; (8007d48 <HAL_UART_IRQHandler+0x3dc>)
 8007b54:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f7fd f919 	bl	8004d92 <HAL_DMA_Abort_IT>
 8007b60:	4603      	mov	r3, r0
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d016      	beq.n	8007b94 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007b70:	4610      	mov	r0, r2
 8007b72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b74:	e00e      	b.n	8007b94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 f990 	bl	8007e9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b7c:	e00a      	b.n	8007b94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 f98c 	bl	8007e9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b84:	e006      	b.n	8007b94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 f988 	bl	8007e9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007b92:	e170      	b.n	8007e76 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b94:	bf00      	nop
    return;
 8007b96:	e16e      	b.n	8007e76 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	f040 814a 	bne.w	8007e36 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ba6:	f003 0310 	and.w	r3, r3, #16
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	f000 8143 	beq.w	8007e36 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bb4:	f003 0310 	and.w	r3, r3, #16
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	f000 813c 	beq.w	8007e36 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	60bb      	str	r3, [r7, #8]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	60bb      	str	r3, [r7, #8]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	60bb      	str	r3, [r7, #8]
 8007bd2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	695b      	ldr	r3, [r3, #20]
 8007bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bde:	2b40      	cmp	r3, #64	; 0x40
 8007be0:	f040 80b4 	bne.w	8007d4c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007bf0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	f000 8140 	beq.w	8007e7a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007bfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c02:	429a      	cmp	r2, r3
 8007c04:	f080 8139 	bcs.w	8007e7a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c0e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c14:	69db      	ldr	r3, [r3, #28]
 8007c16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c1a:	f000 8088 	beq.w	8007d2e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	330c      	adds	r3, #12
 8007c24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c2c:	e853 3f00 	ldrex	r3, [r3]
 8007c30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007c34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	330c      	adds	r3, #12
 8007c46:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007c4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007c4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c52:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007c56:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007c5a:	e841 2300 	strex	r3, r2, [r1]
 8007c5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007c62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d1d9      	bne.n	8007c1e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	3314      	adds	r3, #20
 8007c70:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c74:	e853 3f00 	ldrex	r3, [r3]
 8007c78:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007c7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c7c:	f023 0301 	bic.w	r3, r3, #1
 8007c80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	3314      	adds	r3, #20
 8007c8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007c8e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007c92:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c94:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007c96:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007c9a:	e841 2300 	strex	r3, r2, [r1]
 8007c9e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007ca0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d1e1      	bne.n	8007c6a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	3314      	adds	r3, #20
 8007cac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007cb0:	e853 3f00 	ldrex	r3, [r3]
 8007cb4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007cb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	3314      	adds	r3, #20
 8007cc6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007cca:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007ccc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007cd0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007cd2:	e841 2300 	strex	r3, r2, [r1]
 8007cd6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007cd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d1e3      	bne.n	8007ca6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2220      	movs	r2, #32
 8007ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	330c      	adds	r3, #12
 8007cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cf6:	e853 3f00 	ldrex	r3, [r3]
 8007cfa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007cfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cfe:	f023 0310 	bic.w	r3, r3, #16
 8007d02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	330c      	adds	r3, #12
 8007d0c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007d10:	65ba      	str	r2, [r7, #88]	; 0x58
 8007d12:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d18:	e841 2300 	strex	r3, r2, [r1]
 8007d1c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d1e3      	bne.n	8007cec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f7fc ffc2 	bl	8004cb2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	1ad3      	subs	r3, r2, r3
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	4619      	mov	r1, r3
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 f8b6 	bl	8007eb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007d44:	e099      	b.n	8007e7a <HAL_UART_IRQHandler+0x50e>
 8007d46:	bf00      	nop
 8007d48:	0800800b 	.word	0x0800800b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	1ad3      	subs	r3, r2, r3
 8007d58:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	f000 808b 	beq.w	8007e7e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007d68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	f000 8086 	beq.w	8007e7e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	330c      	adds	r3, #12
 8007d78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d7c:	e853 3f00 	ldrex	r3, [r3]
 8007d80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	330c      	adds	r3, #12
 8007d92:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007d96:	647a      	str	r2, [r7, #68]	; 0x44
 8007d98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d9e:	e841 2300 	strex	r3, r2, [r1]
 8007da2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d1e3      	bne.n	8007d72 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	3314      	adds	r3, #20
 8007db0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db4:	e853 3f00 	ldrex	r3, [r3]
 8007db8:	623b      	str	r3, [r7, #32]
   return(result);
 8007dba:	6a3b      	ldr	r3, [r7, #32]
 8007dbc:	f023 0301 	bic.w	r3, r3, #1
 8007dc0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	3314      	adds	r3, #20
 8007dca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007dce:	633a      	str	r2, [r7, #48]	; 0x30
 8007dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007dd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dd6:	e841 2300 	strex	r3, r2, [r1]
 8007dda:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d1e3      	bne.n	8007daa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2220      	movs	r2, #32
 8007de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2200      	movs	r2, #0
 8007dee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	330c      	adds	r3, #12
 8007df6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	e853 3f00 	ldrex	r3, [r3]
 8007dfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f023 0310 	bic.w	r3, r3, #16
 8007e06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	330c      	adds	r3, #12
 8007e10:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007e14:	61fa      	str	r2, [r7, #28]
 8007e16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e18:	69b9      	ldr	r1, [r7, #24]
 8007e1a:	69fa      	ldr	r2, [r7, #28]
 8007e1c:	e841 2300 	strex	r3, r2, [r1]
 8007e20:	617b      	str	r3, [r7, #20]
   return(result);
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d1e3      	bne.n	8007df0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 f83e 	bl	8007eb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007e34:	e023      	b.n	8007e7e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d009      	beq.n	8007e56 <HAL_UART_IRQHandler+0x4ea>
 8007e42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d003      	beq.n	8007e56 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 f8ef 	bl	8008032 <UART_Transmit_IT>
    return;
 8007e54:	e014      	b.n	8007e80 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d00e      	beq.n	8007e80 <HAL_UART_IRQHandler+0x514>
 8007e62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d008      	beq.n	8007e80 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 f92f 	bl	80080d2 <UART_EndTransmit_IT>
    return;
 8007e74:	e004      	b.n	8007e80 <HAL_UART_IRQHandler+0x514>
    return;
 8007e76:	bf00      	nop
 8007e78:	e002      	b.n	8007e80 <HAL_UART_IRQHandler+0x514>
      return;
 8007e7a:	bf00      	nop
 8007e7c:	e000      	b.n	8007e80 <HAL_UART_IRQHandler+0x514>
      return;
 8007e7e:	bf00      	nop
  }
}
 8007e80:	37e8      	adds	r7, #232	; 0xe8
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop

08007e88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007e90:	bf00      	nop
 8007e92:	370c      	adds	r7, #12
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr

08007e9c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007ea4:	bf00      	nop
 8007ea6:	370c      	adds	r7, #12
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b083      	sub	sp, #12
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	460b      	mov	r3, r1
 8007eba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007ebc:	bf00      	nop
 8007ebe:	370c      	adds	r7, #12
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b085      	sub	sp, #20
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	60b9      	str	r1, [r7, #8]
 8007ed2:	4613      	mov	r3, r2
 8007ed4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	68ba      	ldr	r2, [r7, #8]
 8007eda:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	88fa      	ldrh	r2, [r7, #6]
 8007ee0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	88fa      	ldrh	r2, [r7, #6]
 8007ee6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2200      	movs	r2, #0
 8007eec:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2222      	movs	r2, #34	; 0x22
 8007ef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	691b      	ldr	r3, [r3, #16]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d007      	beq.n	8007f16 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	68da      	ldr	r2, [r3, #12]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f14:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	695a      	ldr	r2, [r3, #20]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f042 0201 	orr.w	r2, r2, #1
 8007f24:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	68da      	ldr	r2, [r3, #12]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f042 0220 	orr.w	r2, r2, #32
 8007f34:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007f36:	2300      	movs	r3, #0
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3714      	adds	r7, #20
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr

08007f44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b095      	sub	sp, #84	; 0x54
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	330c      	adds	r3, #12
 8007f52:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f56:	e853 3f00 	ldrex	r3, [r3]
 8007f5a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	330c      	adds	r3, #12
 8007f6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f6c:	643a      	str	r2, [r7, #64]	; 0x40
 8007f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f70:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f74:	e841 2300 	strex	r3, r2, [r1]
 8007f78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d1e5      	bne.n	8007f4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	3314      	adds	r3, #20
 8007f86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f88:	6a3b      	ldr	r3, [r7, #32]
 8007f8a:	e853 3f00 	ldrex	r3, [r3]
 8007f8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f90:	69fb      	ldr	r3, [r7, #28]
 8007f92:	f023 0301 	bic.w	r3, r3, #1
 8007f96:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	3314      	adds	r3, #20
 8007f9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fa0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007fa2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fa8:	e841 2300 	strex	r3, r2, [r1]
 8007fac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d1e5      	bne.n	8007f80 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d119      	bne.n	8007ff0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	330c      	adds	r3, #12
 8007fc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	e853 3f00 	ldrex	r3, [r3]
 8007fca:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	f023 0310 	bic.w	r3, r3, #16
 8007fd2:	647b      	str	r3, [r7, #68]	; 0x44
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	330c      	adds	r3, #12
 8007fda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007fdc:	61ba      	str	r2, [r7, #24]
 8007fde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe0:	6979      	ldr	r1, [r7, #20]
 8007fe2:	69ba      	ldr	r2, [r7, #24]
 8007fe4:	e841 2300 	strex	r3, r2, [r1]
 8007fe8:	613b      	str	r3, [r7, #16]
   return(result);
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d1e5      	bne.n	8007fbc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2220      	movs	r2, #32
 8007ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007ffe:	bf00      	nop
 8008000:	3754      	adds	r7, #84	; 0x54
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr

0800800a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800800a:	b580      	push	{r7, lr}
 800800c:	b084      	sub	sp, #16
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008016:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2200      	movs	r2, #0
 800801c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2200      	movs	r2, #0
 8008022:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008024:	68f8      	ldr	r0, [r7, #12]
 8008026:	f7ff ff39 	bl	8007e9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800802a:	bf00      	nop
 800802c:	3710      	adds	r7, #16
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}

08008032 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008032:	b480      	push	{r7}
 8008034:	b085      	sub	sp, #20
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008040:	b2db      	uxtb	r3, r3
 8008042:	2b21      	cmp	r3, #33	; 0x21
 8008044:	d13e      	bne.n	80080c4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800804e:	d114      	bne.n	800807a <UART_Transmit_IT+0x48>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	691b      	ldr	r3, [r3, #16]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d110      	bne.n	800807a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6a1b      	ldr	r3, [r3, #32]
 800805c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	881b      	ldrh	r3, [r3, #0]
 8008062:	461a      	mov	r2, r3
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800806c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6a1b      	ldr	r3, [r3, #32]
 8008072:	1c9a      	adds	r2, r3, #2
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	621a      	str	r2, [r3, #32]
 8008078:	e008      	b.n	800808c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6a1b      	ldr	r3, [r3, #32]
 800807e:	1c59      	adds	r1, r3, #1
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	6211      	str	r1, [r2, #32]
 8008084:	781a      	ldrb	r2, [r3, #0]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008090:	b29b      	uxth	r3, r3
 8008092:	3b01      	subs	r3, #1
 8008094:	b29b      	uxth	r3, r3
 8008096:	687a      	ldr	r2, [r7, #4]
 8008098:	4619      	mov	r1, r3
 800809a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800809c:	2b00      	cmp	r3, #0
 800809e:	d10f      	bne.n	80080c0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	68da      	ldr	r2, [r3, #12]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80080ae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	68da      	ldr	r2, [r3, #12]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080be:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80080c0:	2300      	movs	r3, #0
 80080c2:	e000      	b.n	80080c6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80080c4:	2302      	movs	r3, #2
  }
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3714      	adds	r7, #20
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr

080080d2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80080d2:	b580      	push	{r7, lr}
 80080d4:	b082      	sub	sp, #8
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	68da      	ldr	r2, [r3, #12]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080e8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2220      	movs	r2, #32
 80080ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f7ff fec8 	bl	8007e88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80080f8:	2300      	movs	r3, #0
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3708      	adds	r7, #8
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}

08008102 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008102:	b580      	push	{r7, lr}
 8008104:	b08c      	sub	sp, #48	; 0x30
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008110:	b2db      	uxtb	r3, r3
 8008112:	2b22      	cmp	r3, #34	; 0x22
 8008114:	f040 80ab 	bne.w	800826e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008120:	d117      	bne.n	8008152 <UART_Receive_IT+0x50>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	691b      	ldr	r3, [r3, #16]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d113      	bne.n	8008152 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800812a:	2300      	movs	r3, #0
 800812c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008132:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	b29b      	uxth	r3, r3
 800813c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008140:	b29a      	uxth	r2, r3
 8008142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008144:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800814a:	1c9a      	adds	r2, r3, #2
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	629a      	str	r2, [r3, #40]	; 0x28
 8008150:	e026      	b.n	80081a0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008156:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008158:	2300      	movs	r3, #0
 800815a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	689b      	ldr	r3, [r3, #8]
 8008160:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008164:	d007      	beq.n	8008176 <UART_Receive_IT+0x74>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d10a      	bne.n	8008184 <UART_Receive_IT+0x82>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	691b      	ldr	r3, [r3, #16]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d106      	bne.n	8008184 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	b2da      	uxtb	r2, r3
 800817e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008180:	701a      	strb	r2, [r3, #0]
 8008182:	e008      	b.n	8008196 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	b2db      	uxtb	r3, r3
 800818c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008190:	b2da      	uxtb	r2, r3
 8008192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008194:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800819a:	1c5a      	adds	r2, r3, #1
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	3b01      	subs	r3, #1
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	4619      	mov	r1, r3
 80081ae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d15a      	bne.n	800826a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	68da      	ldr	r2, [r3, #12]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f022 0220 	bic.w	r2, r2, #32
 80081c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	68da      	ldr	r2, [r3, #12]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80081d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	695a      	ldr	r2, [r3, #20]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f022 0201 	bic.w	r2, r2, #1
 80081e2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2220      	movs	r2, #32
 80081e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d135      	bne.n	8008260 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	330c      	adds	r3, #12
 8008200:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	e853 3f00 	ldrex	r3, [r3]
 8008208:	613b      	str	r3, [r7, #16]
   return(result);
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	f023 0310 	bic.w	r3, r3, #16
 8008210:	627b      	str	r3, [r7, #36]	; 0x24
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	330c      	adds	r3, #12
 8008218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800821a:	623a      	str	r2, [r7, #32]
 800821c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800821e:	69f9      	ldr	r1, [r7, #28]
 8008220:	6a3a      	ldr	r2, [r7, #32]
 8008222:	e841 2300 	strex	r3, r2, [r1]
 8008226:	61bb      	str	r3, [r7, #24]
   return(result);
 8008228:	69bb      	ldr	r3, [r7, #24]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d1e5      	bne.n	80081fa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f003 0310 	and.w	r3, r3, #16
 8008238:	2b10      	cmp	r3, #16
 800823a:	d10a      	bne.n	8008252 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800823c:	2300      	movs	r3, #0
 800823e:	60fb      	str	r3, [r7, #12]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	60fb      	str	r3, [r7, #12]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	60fb      	str	r3, [r7, #12]
 8008250:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008256:	4619      	mov	r1, r3
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f7ff fe29 	bl	8007eb0 <HAL_UARTEx_RxEventCallback>
 800825e:	e002      	b.n	8008266 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f7f8 ffd1 	bl	8001208 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008266:	2300      	movs	r3, #0
 8008268:	e002      	b.n	8008270 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800826a:	2300      	movs	r3, #0
 800826c:	e000      	b.n	8008270 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800826e:	2302      	movs	r3, #2
  }
}
 8008270:	4618      	mov	r0, r3
 8008272:	3730      	adds	r7, #48	; 0x30
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008278:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800827c:	b0c0      	sub	sp, #256	; 0x100
 800827e:	af00      	add	r7, sp, #0
 8008280:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	691b      	ldr	r3, [r3, #16]
 800828c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008294:	68d9      	ldr	r1, [r3, #12]
 8008296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	ea40 0301 	orr.w	r3, r0, r1
 80082a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80082a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082a6:	689a      	ldr	r2, [r3, #8]
 80082a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082ac:	691b      	ldr	r3, [r3, #16]
 80082ae:	431a      	orrs	r2, r3
 80082b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082b4:	695b      	ldr	r3, [r3, #20]
 80082b6:	431a      	orrs	r2, r3
 80082b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082bc:	69db      	ldr	r3, [r3, #28]
 80082be:	4313      	orrs	r3, r2
 80082c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80082c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	68db      	ldr	r3, [r3, #12]
 80082cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80082d0:	f021 010c 	bic.w	r1, r1, #12
 80082d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80082de:	430b      	orrs	r3, r1
 80082e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80082e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	695b      	ldr	r3, [r3, #20]
 80082ea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80082ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082f2:	6999      	ldr	r1, [r3, #24]
 80082f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082f8:	681a      	ldr	r2, [r3, #0]
 80082fa:	ea40 0301 	orr.w	r3, r0, r1
 80082fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008304:	681a      	ldr	r2, [r3, #0]
 8008306:	4b8f      	ldr	r3, [pc, #572]	; (8008544 <UART_SetConfig+0x2cc>)
 8008308:	429a      	cmp	r2, r3
 800830a:	d005      	beq.n	8008318 <UART_SetConfig+0xa0>
 800830c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	4b8d      	ldr	r3, [pc, #564]	; (8008548 <UART_SetConfig+0x2d0>)
 8008314:	429a      	cmp	r2, r3
 8008316:	d104      	bne.n	8008322 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008318:	f7fd fbd6 	bl	8005ac8 <HAL_RCC_GetPCLK2Freq>
 800831c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008320:	e003      	b.n	800832a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008322:	f7fd fbbd 	bl	8005aa0 <HAL_RCC_GetPCLK1Freq>
 8008326:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800832a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800832e:	69db      	ldr	r3, [r3, #28]
 8008330:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008334:	f040 810c 	bne.w	8008550 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008338:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800833c:	2200      	movs	r2, #0
 800833e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008342:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008346:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800834a:	4622      	mov	r2, r4
 800834c:	462b      	mov	r3, r5
 800834e:	1891      	adds	r1, r2, r2
 8008350:	65b9      	str	r1, [r7, #88]	; 0x58
 8008352:	415b      	adcs	r3, r3
 8008354:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008356:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800835a:	4621      	mov	r1, r4
 800835c:	eb12 0801 	adds.w	r8, r2, r1
 8008360:	4629      	mov	r1, r5
 8008362:	eb43 0901 	adc.w	r9, r3, r1
 8008366:	f04f 0200 	mov.w	r2, #0
 800836a:	f04f 0300 	mov.w	r3, #0
 800836e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008372:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008376:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800837a:	4690      	mov	r8, r2
 800837c:	4699      	mov	r9, r3
 800837e:	4623      	mov	r3, r4
 8008380:	eb18 0303 	adds.w	r3, r8, r3
 8008384:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008388:	462b      	mov	r3, r5
 800838a:	eb49 0303 	adc.w	r3, r9, r3
 800838e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	2200      	movs	r2, #0
 800839a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800839e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80083a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80083a6:	460b      	mov	r3, r1
 80083a8:	18db      	adds	r3, r3, r3
 80083aa:	653b      	str	r3, [r7, #80]	; 0x50
 80083ac:	4613      	mov	r3, r2
 80083ae:	eb42 0303 	adc.w	r3, r2, r3
 80083b2:	657b      	str	r3, [r7, #84]	; 0x54
 80083b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80083b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80083bc:	f7f8 fc6c 	bl	8000c98 <__aeabi_uldivmod>
 80083c0:	4602      	mov	r2, r0
 80083c2:	460b      	mov	r3, r1
 80083c4:	4b61      	ldr	r3, [pc, #388]	; (800854c <UART_SetConfig+0x2d4>)
 80083c6:	fba3 2302 	umull	r2, r3, r3, r2
 80083ca:	095b      	lsrs	r3, r3, #5
 80083cc:	011c      	lsls	r4, r3, #4
 80083ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083d2:	2200      	movs	r2, #0
 80083d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80083d8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80083dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80083e0:	4642      	mov	r2, r8
 80083e2:	464b      	mov	r3, r9
 80083e4:	1891      	adds	r1, r2, r2
 80083e6:	64b9      	str	r1, [r7, #72]	; 0x48
 80083e8:	415b      	adcs	r3, r3
 80083ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80083f0:	4641      	mov	r1, r8
 80083f2:	eb12 0a01 	adds.w	sl, r2, r1
 80083f6:	4649      	mov	r1, r9
 80083f8:	eb43 0b01 	adc.w	fp, r3, r1
 80083fc:	f04f 0200 	mov.w	r2, #0
 8008400:	f04f 0300 	mov.w	r3, #0
 8008404:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008408:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800840c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008410:	4692      	mov	sl, r2
 8008412:	469b      	mov	fp, r3
 8008414:	4643      	mov	r3, r8
 8008416:	eb1a 0303 	adds.w	r3, sl, r3
 800841a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800841e:	464b      	mov	r3, r9
 8008420:	eb4b 0303 	adc.w	r3, fp, r3
 8008424:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	2200      	movs	r2, #0
 8008430:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008434:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008438:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800843c:	460b      	mov	r3, r1
 800843e:	18db      	adds	r3, r3, r3
 8008440:	643b      	str	r3, [r7, #64]	; 0x40
 8008442:	4613      	mov	r3, r2
 8008444:	eb42 0303 	adc.w	r3, r2, r3
 8008448:	647b      	str	r3, [r7, #68]	; 0x44
 800844a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800844e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008452:	f7f8 fc21 	bl	8000c98 <__aeabi_uldivmod>
 8008456:	4602      	mov	r2, r0
 8008458:	460b      	mov	r3, r1
 800845a:	4611      	mov	r1, r2
 800845c:	4b3b      	ldr	r3, [pc, #236]	; (800854c <UART_SetConfig+0x2d4>)
 800845e:	fba3 2301 	umull	r2, r3, r3, r1
 8008462:	095b      	lsrs	r3, r3, #5
 8008464:	2264      	movs	r2, #100	; 0x64
 8008466:	fb02 f303 	mul.w	r3, r2, r3
 800846a:	1acb      	subs	r3, r1, r3
 800846c:	00db      	lsls	r3, r3, #3
 800846e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008472:	4b36      	ldr	r3, [pc, #216]	; (800854c <UART_SetConfig+0x2d4>)
 8008474:	fba3 2302 	umull	r2, r3, r3, r2
 8008478:	095b      	lsrs	r3, r3, #5
 800847a:	005b      	lsls	r3, r3, #1
 800847c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008480:	441c      	add	r4, r3
 8008482:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008486:	2200      	movs	r2, #0
 8008488:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800848c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008490:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008494:	4642      	mov	r2, r8
 8008496:	464b      	mov	r3, r9
 8008498:	1891      	adds	r1, r2, r2
 800849a:	63b9      	str	r1, [r7, #56]	; 0x38
 800849c:	415b      	adcs	r3, r3
 800849e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80084a4:	4641      	mov	r1, r8
 80084a6:	1851      	adds	r1, r2, r1
 80084a8:	6339      	str	r1, [r7, #48]	; 0x30
 80084aa:	4649      	mov	r1, r9
 80084ac:	414b      	adcs	r3, r1
 80084ae:	637b      	str	r3, [r7, #52]	; 0x34
 80084b0:	f04f 0200 	mov.w	r2, #0
 80084b4:	f04f 0300 	mov.w	r3, #0
 80084b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80084bc:	4659      	mov	r1, fp
 80084be:	00cb      	lsls	r3, r1, #3
 80084c0:	4651      	mov	r1, sl
 80084c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80084c6:	4651      	mov	r1, sl
 80084c8:	00ca      	lsls	r2, r1, #3
 80084ca:	4610      	mov	r0, r2
 80084cc:	4619      	mov	r1, r3
 80084ce:	4603      	mov	r3, r0
 80084d0:	4642      	mov	r2, r8
 80084d2:	189b      	adds	r3, r3, r2
 80084d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80084d8:	464b      	mov	r3, r9
 80084da:	460a      	mov	r2, r1
 80084dc:	eb42 0303 	adc.w	r3, r2, r3
 80084e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80084e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	2200      	movs	r2, #0
 80084ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80084f0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80084f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80084f8:	460b      	mov	r3, r1
 80084fa:	18db      	adds	r3, r3, r3
 80084fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80084fe:	4613      	mov	r3, r2
 8008500:	eb42 0303 	adc.w	r3, r2, r3
 8008504:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008506:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800850a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800850e:	f7f8 fbc3 	bl	8000c98 <__aeabi_uldivmod>
 8008512:	4602      	mov	r2, r0
 8008514:	460b      	mov	r3, r1
 8008516:	4b0d      	ldr	r3, [pc, #52]	; (800854c <UART_SetConfig+0x2d4>)
 8008518:	fba3 1302 	umull	r1, r3, r3, r2
 800851c:	095b      	lsrs	r3, r3, #5
 800851e:	2164      	movs	r1, #100	; 0x64
 8008520:	fb01 f303 	mul.w	r3, r1, r3
 8008524:	1ad3      	subs	r3, r2, r3
 8008526:	00db      	lsls	r3, r3, #3
 8008528:	3332      	adds	r3, #50	; 0x32
 800852a:	4a08      	ldr	r2, [pc, #32]	; (800854c <UART_SetConfig+0x2d4>)
 800852c:	fba2 2303 	umull	r2, r3, r2, r3
 8008530:	095b      	lsrs	r3, r3, #5
 8008532:	f003 0207 	and.w	r2, r3, #7
 8008536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4422      	add	r2, r4
 800853e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008540:	e105      	b.n	800874e <UART_SetConfig+0x4d6>
 8008542:	bf00      	nop
 8008544:	40011000 	.word	0x40011000
 8008548:	40011400 	.word	0x40011400
 800854c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008550:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008554:	2200      	movs	r2, #0
 8008556:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800855a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800855e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008562:	4642      	mov	r2, r8
 8008564:	464b      	mov	r3, r9
 8008566:	1891      	adds	r1, r2, r2
 8008568:	6239      	str	r1, [r7, #32]
 800856a:	415b      	adcs	r3, r3
 800856c:	627b      	str	r3, [r7, #36]	; 0x24
 800856e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008572:	4641      	mov	r1, r8
 8008574:	1854      	adds	r4, r2, r1
 8008576:	4649      	mov	r1, r9
 8008578:	eb43 0501 	adc.w	r5, r3, r1
 800857c:	f04f 0200 	mov.w	r2, #0
 8008580:	f04f 0300 	mov.w	r3, #0
 8008584:	00eb      	lsls	r3, r5, #3
 8008586:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800858a:	00e2      	lsls	r2, r4, #3
 800858c:	4614      	mov	r4, r2
 800858e:	461d      	mov	r5, r3
 8008590:	4643      	mov	r3, r8
 8008592:	18e3      	adds	r3, r4, r3
 8008594:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008598:	464b      	mov	r3, r9
 800859a:	eb45 0303 	adc.w	r3, r5, r3
 800859e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80085a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	2200      	movs	r2, #0
 80085aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80085ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80085b2:	f04f 0200 	mov.w	r2, #0
 80085b6:	f04f 0300 	mov.w	r3, #0
 80085ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80085be:	4629      	mov	r1, r5
 80085c0:	008b      	lsls	r3, r1, #2
 80085c2:	4621      	mov	r1, r4
 80085c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80085c8:	4621      	mov	r1, r4
 80085ca:	008a      	lsls	r2, r1, #2
 80085cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80085d0:	f7f8 fb62 	bl	8000c98 <__aeabi_uldivmod>
 80085d4:	4602      	mov	r2, r0
 80085d6:	460b      	mov	r3, r1
 80085d8:	4b60      	ldr	r3, [pc, #384]	; (800875c <UART_SetConfig+0x4e4>)
 80085da:	fba3 2302 	umull	r2, r3, r3, r2
 80085de:	095b      	lsrs	r3, r3, #5
 80085e0:	011c      	lsls	r4, r3, #4
 80085e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085e6:	2200      	movs	r2, #0
 80085e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80085ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80085f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80085f4:	4642      	mov	r2, r8
 80085f6:	464b      	mov	r3, r9
 80085f8:	1891      	adds	r1, r2, r2
 80085fa:	61b9      	str	r1, [r7, #24]
 80085fc:	415b      	adcs	r3, r3
 80085fe:	61fb      	str	r3, [r7, #28]
 8008600:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008604:	4641      	mov	r1, r8
 8008606:	1851      	adds	r1, r2, r1
 8008608:	6139      	str	r1, [r7, #16]
 800860a:	4649      	mov	r1, r9
 800860c:	414b      	adcs	r3, r1
 800860e:	617b      	str	r3, [r7, #20]
 8008610:	f04f 0200 	mov.w	r2, #0
 8008614:	f04f 0300 	mov.w	r3, #0
 8008618:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800861c:	4659      	mov	r1, fp
 800861e:	00cb      	lsls	r3, r1, #3
 8008620:	4651      	mov	r1, sl
 8008622:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008626:	4651      	mov	r1, sl
 8008628:	00ca      	lsls	r2, r1, #3
 800862a:	4610      	mov	r0, r2
 800862c:	4619      	mov	r1, r3
 800862e:	4603      	mov	r3, r0
 8008630:	4642      	mov	r2, r8
 8008632:	189b      	adds	r3, r3, r2
 8008634:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008638:	464b      	mov	r3, r9
 800863a:	460a      	mov	r2, r1
 800863c:	eb42 0303 	adc.w	r3, r2, r3
 8008640:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	67bb      	str	r3, [r7, #120]	; 0x78
 800864e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008650:	f04f 0200 	mov.w	r2, #0
 8008654:	f04f 0300 	mov.w	r3, #0
 8008658:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800865c:	4649      	mov	r1, r9
 800865e:	008b      	lsls	r3, r1, #2
 8008660:	4641      	mov	r1, r8
 8008662:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008666:	4641      	mov	r1, r8
 8008668:	008a      	lsls	r2, r1, #2
 800866a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800866e:	f7f8 fb13 	bl	8000c98 <__aeabi_uldivmod>
 8008672:	4602      	mov	r2, r0
 8008674:	460b      	mov	r3, r1
 8008676:	4b39      	ldr	r3, [pc, #228]	; (800875c <UART_SetConfig+0x4e4>)
 8008678:	fba3 1302 	umull	r1, r3, r3, r2
 800867c:	095b      	lsrs	r3, r3, #5
 800867e:	2164      	movs	r1, #100	; 0x64
 8008680:	fb01 f303 	mul.w	r3, r1, r3
 8008684:	1ad3      	subs	r3, r2, r3
 8008686:	011b      	lsls	r3, r3, #4
 8008688:	3332      	adds	r3, #50	; 0x32
 800868a:	4a34      	ldr	r2, [pc, #208]	; (800875c <UART_SetConfig+0x4e4>)
 800868c:	fba2 2303 	umull	r2, r3, r2, r3
 8008690:	095b      	lsrs	r3, r3, #5
 8008692:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008696:	441c      	add	r4, r3
 8008698:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800869c:	2200      	movs	r2, #0
 800869e:	673b      	str	r3, [r7, #112]	; 0x70
 80086a0:	677a      	str	r2, [r7, #116]	; 0x74
 80086a2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80086a6:	4642      	mov	r2, r8
 80086a8:	464b      	mov	r3, r9
 80086aa:	1891      	adds	r1, r2, r2
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	415b      	adcs	r3, r3
 80086b0:	60fb      	str	r3, [r7, #12]
 80086b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80086b6:	4641      	mov	r1, r8
 80086b8:	1851      	adds	r1, r2, r1
 80086ba:	6039      	str	r1, [r7, #0]
 80086bc:	4649      	mov	r1, r9
 80086be:	414b      	adcs	r3, r1
 80086c0:	607b      	str	r3, [r7, #4]
 80086c2:	f04f 0200 	mov.w	r2, #0
 80086c6:	f04f 0300 	mov.w	r3, #0
 80086ca:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80086ce:	4659      	mov	r1, fp
 80086d0:	00cb      	lsls	r3, r1, #3
 80086d2:	4651      	mov	r1, sl
 80086d4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80086d8:	4651      	mov	r1, sl
 80086da:	00ca      	lsls	r2, r1, #3
 80086dc:	4610      	mov	r0, r2
 80086de:	4619      	mov	r1, r3
 80086e0:	4603      	mov	r3, r0
 80086e2:	4642      	mov	r2, r8
 80086e4:	189b      	adds	r3, r3, r2
 80086e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80086e8:	464b      	mov	r3, r9
 80086ea:	460a      	mov	r2, r1
 80086ec:	eb42 0303 	adc.w	r3, r2, r3
 80086f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80086f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	2200      	movs	r2, #0
 80086fa:	663b      	str	r3, [r7, #96]	; 0x60
 80086fc:	667a      	str	r2, [r7, #100]	; 0x64
 80086fe:	f04f 0200 	mov.w	r2, #0
 8008702:	f04f 0300 	mov.w	r3, #0
 8008706:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800870a:	4649      	mov	r1, r9
 800870c:	008b      	lsls	r3, r1, #2
 800870e:	4641      	mov	r1, r8
 8008710:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008714:	4641      	mov	r1, r8
 8008716:	008a      	lsls	r2, r1, #2
 8008718:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800871c:	f7f8 fabc 	bl	8000c98 <__aeabi_uldivmod>
 8008720:	4602      	mov	r2, r0
 8008722:	460b      	mov	r3, r1
 8008724:	4b0d      	ldr	r3, [pc, #52]	; (800875c <UART_SetConfig+0x4e4>)
 8008726:	fba3 1302 	umull	r1, r3, r3, r2
 800872a:	095b      	lsrs	r3, r3, #5
 800872c:	2164      	movs	r1, #100	; 0x64
 800872e:	fb01 f303 	mul.w	r3, r1, r3
 8008732:	1ad3      	subs	r3, r2, r3
 8008734:	011b      	lsls	r3, r3, #4
 8008736:	3332      	adds	r3, #50	; 0x32
 8008738:	4a08      	ldr	r2, [pc, #32]	; (800875c <UART_SetConfig+0x4e4>)
 800873a:	fba2 2303 	umull	r2, r3, r2, r3
 800873e:	095b      	lsrs	r3, r3, #5
 8008740:	f003 020f 	and.w	r2, r3, #15
 8008744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4422      	add	r2, r4
 800874c:	609a      	str	r2, [r3, #8]
}
 800874e:	bf00      	nop
 8008750:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008754:	46bd      	mov	sp, r7
 8008756:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800875a:	bf00      	nop
 800875c:	51eb851f 	.word	0x51eb851f

08008760 <__errno>:
 8008760:	4b01      	ldr	r3, [pc, #4]	; (8008768 <__errno+0x8>)
 8008762:	6818      	ldr	r0, [r3, #0]
 8008764:	4770      	bx	lr
 8008766:	bf00      	nop
 8008768:	20000040 	.word	0x20000040

0800876c <__libc_init_array>:
 800876c:	b570      	push	{r4, r5, r6, lr}
 800876e:	4d0d      	ldr	r5, [pc, #52]	; (80087a4 <__libc_init_array+0x38>)
 8008770:	4c0d      	ldr	r4, [pc, #52]	; (80087a8 <__libc_init_array+0x3c>)
 8008772:	1b64      	subs	r4, r4, r5
 8008774:	10a4      	asrs	r4, r4, #2
 8008776:	2600      	movs	r6, #0
 8008778:	42a6      	cmp	r6, r4
 800877a:	d109      	bne.n	8008790 <__libc_init_array+0x24>
 800877c:	4d0b      	ldr	r5, [pc, #44]	; (80087ac <__libc_init_array+0x40>)
 800877e:	4c0c      	ldr	r4, [pc, #48]	; (80087b0 <__libc_init_array+0x44>)
 8008780:	f003 fe30 	bl	800c3e4 <_init>
 8008784:	1b64      	subs	r4, r4, r5
 8008786:	10a4      	asrs	r4, r4, #2
 8008788:	2600      	movs	r6, #0
 800878a:	42a6      	cmp	r6, r4
 800878c:	d105      	bne.n	800879a <__libc_init_array+0x2e>
 800878e:	bd70      	pop	{r4, r5, r6, pc}
 8008790:	f855 3b04 	ldr.w	r3, [r5], #4
 8008794:	4798      	blx	r3
 8008796:	3601      	adds	r6, #1
 8008798:	e7ee      	b.n	8008778 <__libc_init_array+0xc>
 800879a:	f855 3b04 	ldr.w	r3, [r5], #4
 800879e:	4798      	blx	r3
 80087a0:	3601      	adds	r6, #1
 80087a2:	e7f2      	b.n	800878a <__libc_init_array+0x1e>
 80087a4:	0800c908 	.word	0x0800c908
 80087a8:	0800c908 	.word	0x0800c908
 80087ac:	0800c908 	.word	0x0800c908
 80087b0:	0800c90c 	.word	0x0800c90c

080087b4 <memset>:
 80087b4:	4402      	add	r2, r0
 80087b6:	4603      	mov	r3, r0
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d100      	bne.n	80087be <memset+0xa>
 80087bc:	4770      	bx	lr
 80087be:	f803 1b01 	strb.w	r1, [r3], #1
 80087c2:	e7f9      	b.n	80087b8 <memset+0x4>

080087c4 <__cvt>:
 80087c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087c8:	ec55 4b10 	vmov	r4, r5, d0
 80087cc:	2d00      	cmp	r5, #0
 80087ce:	460e      	mov	r6, r1
 80087d0:	4619      	mov	r1, r3
 80087d2:	462b      	mov	r3, r5
 80087d4:	bfbb      	ittet	lt
 80087d6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80087da:	461d      	movlt	r5, r3
 80087dc:	2300      	movge	r3, #0
 80087de:	232d      	movlt	r3, #45	; 0x2d
 80087e0:	700b      	strb	r3, [r1, #0]
 80087e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087e4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80087e8:	4691      	mov	r9, r2
 80087ea:	f023 0820 	bic.w	r8, r3, #32
 80087ee:	bfbc      	itt	lt
 80087f0:	4622      	movlt	r2, r4
 80087f2:	4614      	movlt	r4, r2
 80087f4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80087f8:	d005      	beq.n	8008806 <__cvt+0x42>
 80087fa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80087fe:	d100      	bne.n	8008802 <__cvt+0x3e>
 8008800:	3601      	adds	r6, #1
 8008802:	2102      	movs	r1, #2
 8008804:	e000      	b.n	8008808 <__cvt+0x44>
 8008806:	2103      	movs	r1, #3
 8008808:	ab03      	add	r3, sp, #12
 800880a:	9301      	str	r3, [sp, #4]
 800880c:	ab02      	add	r3, sp, #8
 800880e:	9300      	str	r3, [sp, #0]
 8008810:	ec45 4b10 	vmov	d0, r4, r5
 8008814:	4653      	mov	r3, sl
 8008816:	4632      	mov	r2, r6
 8008818:	f000 fcfe 	bl	8009218 <_dtoa_r>
 800881c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008820:	4607      	mov	r7, r0
 8008822:	d102      	bne.n	800882a <__cvt+0x66>
 8008824:	f019 0f01 	tst.w	r9, #1
 8008828:	d022      	beq.n	8008870 <__cvt+0xac>
 800882a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800882e:	eb07 0906 	add.w	r9, r7, r6
 8008832:	d110      	bne.n	8008856 <__cvt+0x92>
 8008834:	783b      	ldrb	r3, [r7, #0]
 8008836:	2b30      	cmp	r3, #48	; 0x30
 8008838:	d10a      	bne.n	8008850 <__cvt+0x8c>
 800883a:	2200      	movs	r2, #0
 800883c:	2300      	movs	r3, #0
 800883e:	4620      	mov	r0, r4
 8008840:	4629      	mov	r1, r5
 8008842:	f7f8 f949 	bl	8000ad8 <__aeabi_dcmpeq>
 8008846:	b918      	cbnz	r0, 8008850 <__cvt+0x8c>
 8008848:	f1c6 0601 	rsb	r6, r6, #1
 800884c:	f8ca 6000 	str.w	r6, [sl]
 8008850:	f8da 3000 	ldr.w	r3, [sl]
 8008854:	4499      	add	r9, r3
 8008856:	2200      	movs	r2, #0
 8008858:	2300      	movs	r3, #0
 800885a:	4620      	mov	r0, r4
 800885c:	4629      	mov	r1, r5
 800885e:	f7f8 f93b 	bl	8000ad8 <__aeabi_dcmpeq>
 8008862:	b108      	cbz	r0, 8008868 <__cvt+0xa4>
 8008864:	f8cd 900c 	str.w	r9, [sp, #12]
 8008868:	2230      	movs	r2, #48	; 0x30
 800886a:	9b03      	ldr	r3, [sp, #12]
 800886c:	454b      	cmp	r3, r9
 800886e:	d307      	bcc.n	8008880 <__cvt+0xbc>
 8008870:	9b03      	ldr	r3, [sp, #12]
 8008872:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008874:	1bdb      	subs	r3, r3, r7
 8008876:	4638      	mov	r0, r7
 8008878:	6013      	str	r3, [r2, #0]
 800887a:	b004      	add	sp, #16
 800887c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008880:	1c59      	adds	r1, r3, #1
 8008882:	9103      	str	r1, [sp, #12]
 8008884:	701a      	strb	r2, [r3, #0]
 8008886:	e7f0      	b.n	800886a <__cvt+0xa6>

08008888 <__exponent>:
 8008888:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800888a:	4603      	mov	r3, r0
 800888c:	2900      	cmp	r1, #0
 800888e:	bfb8      	it	lt
 8008890:	4249      	neglt	r1, r1
 8008892:	f803 2b02 	strb.w	r2, [r3], #2
 8008896:	bfb4      	ite	lt
 8008898:	222d      	movlt	r2, #45	; 0x2d
 800889a:	222b      	movge	r2, #43	; 0x2b
 800889c:	2909      	cmp	r1, #9
 800889e:	7042      	strb	r2, [r0, #1]
 80088a0:	dd2a      	ble.n	80088f8 <__exponent+0x70>
 80088a2:	f10d 0407 	add.w	r4, sp, #7
 80088a6:	46a4      	mov	ip, r4
 80088a8:	270a      	movs	r7, #10
 80088aa:	46a6      	mov	lr, r4
 80088ac:	460a      	mov	r2, r1
 80088ae:	fb91 f6f7 	sdiv	r6, r1, r7
 80088b2:	fb07 1516 	mls	r5, r7, r6, r1
 80088b6:	3530      	adds	r5, #48	; 0x30
 80088b8:	2a63      	cmp	r2, #99	; 0x63
 80088ba:	f104 34ff 	add.w	r4, r4, #4294967295
 80088be:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80088c2:	4631      	mov	r1, r6
 80088c4:	dcf1      	bgt.n	80088aa <__exponent+0x22>
 80088c6:	3130      	adds	r1, #48	; 0x30
 80088c8:	f1ae 0502 	sub.w	r5, lr, #2
 80088cc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80088d0:	1c44      	adds	r4, r0, #1
 80088d2:	4629      	mov	r1, r5
 80088d4:	4561      	cmp	r1, ip
 80088d6:	d30a      	bcc.n	80088ee <__exponent+0x66>
 80088d8:	f10d 0209 	add.w	r2, sp, #9
 80088dc:	eba2 020e 	sub.w	r2, r2, lr
 80088e0:	4565      	cmp	r5, ip
 80088e2:	bf88      	it	hi
 80088e4:	2200      	movhi	r2, #0
 80088e6:	4413      	add	r3, r2
 80088e8:	1a18      	subs	r0, r3, r0
 80088ea:	b003      	add	sp, #12
 80088ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80088f2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80088f6:	e7ed      	b.n	80088d4 <__exponent+0x4c>
 80088f8:	2330      	movs	r3, #48	; 0x30
 80088fa:	3130      	adds	r1, #48	; 0x30
 80088fc:	7083      	strb	r3, [r0, #2]
 80088fe:	70c1      	strb	r1, [r0, #3]
 8008900:	1d03      	adds	r3, r0, #4
 8008902:	e7f1      	b.n	80088e8 <__exponent+0x60>

08008904 <_printf_float>:
 8008904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008908:	ed2d 8b02 	vpush	{d8}
 800890c:	b08d      	sub	sp, #52	; 0x34
 800890e:	460c      	mov	r4, r1
 8008910:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008914:	4616      	mov	r6, r2
 8008916:	461f      	mov	r7, r3
 8008918:	4605      	mov	r5, r0
 800891a:	f001 fa6b 	bl	8009df4 <_localeconv_r>
 800891e:	f8d0 a000 	ldr.w	sl, [r0]
 8008922:	4650      	mov	r0, sl
 8008924:	f7f7 fc5c 	bl	80001e0 <strlen>
 8008928:	2300      	movs	r3, #0
 800892a:	930a      	str	r3, [sp, #40]	; 0x28
 800892c:	6823      	ldr	r3, [r4, #0]
 800892e:	9305      	str	r3, [sp, #20]
 8008930:	f8d8 3000 	ldr.w	r3, [r8]
 8008934:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008938:	3307      	adds	r3, #7
 800893a:	f023 0307 	bic.w	r3, r3, #7
 800893e:	f103 0208 	add.w	r2, r3, #8
 8008942:	f8c8 2000 	str.w	r2, [r8]
 8008946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800894a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800894e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008952:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008956:	9307      	str	r3, [sp, #28]
 8008958:	f8cd 8018 	str.w	r8, [sp, #24]
 800895c:	ee08 0a10 	vmov	s16, r0
 8008960:	4b9f      	ldr	r3, [pc, #636]	; (8008be0 <_printf_float+0x2dc>)
 8008962:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008966:	f04f 32ff 	mov.w	r2, #4294967295
 800896a:	f7f8 f8e7 	bl	8000b3c <__aeabi_dcmpun>
 800896e:	bb88      	cbnz	r0, 80089d4 <_printf_float+0xd0>
 8008970:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008974:	4b9a      	ldr	r3, [pc, #616]	; (8008be0 <_printf_float+0x2dc>)
 8008976:	f04f 32ff 	mov.w	r2, #4294967295
 800897a:	f7f8 f8c1 	bl	8000b00 <__aeabi_dcmple>
 800897e:	bb48      	cbnz	r0, 80089d4 <_printf_float+0xd0>
 8008980:	2200      	movs	r2, #0
 8008982:	2300      	movs	r3, #0
 8008984:	4640      	mov	r0, r8
 8008986:	4649      	mov	r1, r9
 8008988:	f7f8 f8b0 	bl	8000aec <__aeabi_dcmplt>
 800898c:	b110      	cbz	r0, 8008994 <_printf_float+0x90>
 800898e:	232d      	movs	r3, #45	; 0x2d
 8008990:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008994:	4b93      	ldr	r3, [pc, #588]	; (8008be4 <_printf_float+0x2e0>)
 8008996:	4894      	ldr	r0, [pc, #592]	; (8008be8 <_printf_float+0x2e4>)
 8008998:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800899c:	bf94      	ite	ls
 800899e:	4698      	movls	r8, r3
 80089a0:	4680      	movhi	r8, r0
 80089a2:	2303      	movs	r3, #3
 80089a4:	6123      	str	r3, [r4, #16]
 80089a6:	9b05      	ldr	r3, [sp, #20]
 80089a8:	f023 0204 	bic.w	r2, r3, #4
 80089ac:	6022      	str	r2, [r4, #0]
 80089ae:	f04f 0900 	mov.w	r9, #0
 80089b2:	9700      	str	r7, [sp, #0]
 80089b4:	4633      	mov	r3, r6
 80089b6:	aa0b      	add	r2, sp, #44	; 0x2c
 80089b8:	4621      	mov	r1, r4
 80089ba:	4628      	mov	r0, r5
 80089bc:	f000 f9d8 	bl	8008d70 <_printf_common>
 80089c0:	3001      	adds	r0, #1
 80089c2:	f040 8090 	bne.w	8008ae6 <_printf_float+0x1e2>
 80089c6:	f04f 30ff 	mov.w	r0, #4294967295
 80089ca:	b00d      	add	sp, #52	; 0x34
 80089cc:	ecbd 8b02 	vpop	{d8}
 80089d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089d4:	4642      	mov	r2, r8
 80089d6:	464b      	mov	r3, r9
 80089d8:	4640      	mov	r0, r8
 80089da:	4649      	mov	r1, r9
 80089dc:	f7f8 f8ae 	bl	8000b3c <__aeabi_dcmpun>
 80089e0:	b140      	cbz	r0, 80089f4 <_printf_float+0xf0>
 80089e2:	464b      	mov	r3, r9
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	bfbc      	itt	lt
 80089e8:	232d      	movlt	r3, #45	; 0x2d
 80089ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80089ee:	487f      	ldr	r0, [pc, #508]	; (8008bec <_printf_float+0x2e8>)
 80089f0:	4b7f      	ldr	r3, [pc, #508]	; (8008bf0 <_printf_float+0x2ec>)
 80089f2:	e7d1      	b.n	8008998 <_printf_float+0x94>
 80089f4:	6863      	ldr	r3, [r4, #4]
 80089f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80089fa:	9206      	str	r2, [sp, #24]
 80089fc:	1c5a      	adds	r2, r3, #1
 80089fe:	d13f      	bne.n	8008a80 <_printf_float+0x17c>
 8008a00:	2306      	movs	r3, #6
 8008a02:	6063      	str	r3, [r4, #4]
 8008a04:	9b05      	ldr	r3, [sp, #20]
 8008a06:	6861      	ldr	r1, [r4, #4]
 8008a08:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	9303      	str	r3, [sp, #12]
 8008a10:	ab0a      	add	r3, sp, #40	; 0x28
 8008a12:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008a16:	ab09      	add	r3, sp, #36	; 0x24
 8008a18:	ec49 8b10 	vmov	d0, r8, r9
 8008a1c:	9300      	str	r3, [sp, #0]
 8008a1e:	6022      	str	r2, [r4, #0]
 8008a20:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008a24:	4628      	mov	r0, r5
 8008a26:	f7ff fecd 	bl	80087c4 <__cvt>
 8008a2a:	9b06      	ldr	r3, [sp, #24]
 8008a2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a2e:	2b47      	cmp	r3, #71	; 0x47
 8008a30:	4680      	mov	r8, r0
 8008a32:	d108      	bne.n	8008a46 <_printf_float+0x142>
 8008a34:	1cc8      	adds	r0, r1, #3
 8008a36:	db02      	blt.n	8008a3e <_printf_float+0x13a>
 8008a38:	6863      	ldr	r3, [r4, #4]
 8008a3a:	4299      	cmp	r1, r3
 8008a3c:	dd41      	ble.n	8008ac2 <_printf_float+0x1be>
 8008a3e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008a42:	fa5f fb8b 	uxtb.w	fp, fp
 8008a46:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008a4a:	d820      	bhi.n	8008a8e <_printf_float+0x18a>
 8008a4c:	3901      	subs	r1, #1
 8008a4e:	465a      	mov	r2, fp
 8008a50:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008a54:	9109      	str	r1, [sp, #36]	; 0x24
 8008a56:	f7ff ff17 	bl	8008888 <__exponent>
 8008a5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a5c:	1813      	adds	r3, r2, r0
 8008a5e:	2a01      	cmp	r2, #1
 8008a60:	4681      	mov	r9, r0
 8008a62:	6123      	str	r3, [r4, #16]
 8008a64:	dc02      	bgt.n	8008a6c <_printf_float+0x168>
 8008a66:	6822      	ldr	r2, [r4, #0]
 8008a68:	07d2      	lsls	r2, r2, #31
 8008a6a:	d501      	bpl.n	8008a70 <_printf_float+0x16c>
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	6123      	str	r3, [r4, #16]
 8008a70:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d09c      	beq.n	80089b2 <_printf_float+0xae>
 8008a78:	232d      	movs	r3, #45	; 0x2d
 8008a7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a7e:	e798      	b.n	80089b2 <_printf_float+0xae>
 8008a80:	9a06      	ldr	r2, [sp, #24]
 8008a82:	2a47      	cmp	r2, #71	; 0x47
 8008a84:	d1be      	bne.n	8008a04 <_printf_float+0x100>
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d1bc      	bne.n	8008a04 <_printf_float+0x100>
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	e7b9      	b.n	8008a02 <_printf_float+0xfe>
 8008a8e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008a92:	d118      	bne.n	8008ac6 <_printf_float+0x1c2>
 8008a94:	2900      	cmp	r1, #0
 8008a96:	6863      	ldr	r3, [r4, #4]
 8008a98:	dd0b      	ble.n	8008ab2 <_printf_float+0x1ae>
 8008a9a:	6121      	str	r1, [r4, #16]
 8008a9c:	b913      	cbnz	r3, 8008aa4 <_printf_float+0x1a0>
 8008a9e:	6822      	ldr	r2, [r4, #0]
 8008aa0:	07d0      	lsls	r0, r2, #31
 8008aa2:	d502      	bpl.n	8008aaa <_printf_float+0x1a6>
 8008aa4:	3301      	adds	r3, #1
 8008aa6:	440b      	add	r3, r1
 8008aa8:	6123      	str	r3, [r4, #16]
 8008aaa:	65a1      	str	r1, [r4, #88]	; 0x58
 8008aac:	f04f 0900 	mov.w	r9, #0
 8008ab0:	e7de      	b.n	8008a70 <_printf_float+0x16c>
 8008ab2:	b913      	cbnz	r3, 8008aba <_printf_float+0x1b6>
 8008ab4:	6822      	ldr	r2, [r4, #0]
 8008ab6:	07d2      	lsls	r2, r2, #31
 8008ab8:	d501      	bpl.n	8008abe <_printf_float+0x1ba>
 8008aba:	3302      	adds	r3, #2
 8008abc:	e7f4      	b.n	8008aa8 <_printf_float+0x1a4>
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e7f2      	b.n	8008aa8 <_printf_float+0x1a4>
 8008ac2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008ac6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ac8:	4299      	cmp	r1, r3
 8008aca:	db05      	blt.n	8008ad8 <_printf_float+0x1d4>
 8008acc:	6823      	ldr	r3, [r4, #0]
 8008ace:	6121      	str	r1, [r4, #16]
 8008ad0:	07d8      	lsls	r0, r3, #31
 8008ad2:	d5ea      	bpl.n	8008aaa <_printf_float+0x1a6>
 8008ad4:	1c4b      	adds	r3, r1, #1
 8008ad6:	e7e7      	b.n	8008aa8 <_printf_float+0x1a4>
 8008ad8:	2900      	cmp	r1, #0
 8008ada:	bfd4      	ite	le
 8008adc:	f1c1 0202 	rsble	r2, r1, #2
 8008ae0:	2201      	movgt	r2, #1
 8008ae2:	4413      	add	r3, r2
 8008ae4:	e7e0      	b.n	8008aa8 <_printf_float+0x1a4>
 8008ae6:	6823      	ldr	r3, [r4, #0]
 8008ae8:	055a      	lsls	r2, r3, #21
 8008aea:	d407      	bmi.n	8008afc <_printf_float+0x1f8>
 8008aec:	6923      	ldr	r3, [r4, #16]
 8008aee:	4642      	mov	r2, r8
 8008af0:	4631      	mov	r1, r6
 8008af2:	4628      	mov	r0, r5
 8008af4:	47b8      	blx	r7
 8008af6:	3001      	adds	r0, #1
 8008af8:	d12c      	bne.n	8008b54 <_printf_float+0x250>
 8008afa:	e764      	b.n	80089c6 <_printf_float+0xc2>
 8008afc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008b00:	f240 80e0 	bls.w	8008cc4 <_printf_float+0x3c0>
 8008b04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008b08:	2200      	movs	r2, #0
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	f7f7 ffe4 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b10:	2800      	cmp	r0, #0
 8008b12:	d034      	beq.n	8008b7e <_printf_float+0x27a>
 8008b14:	4a37      	ldr	r2, [pc, #220]	; (8008bf4 <_printf_float+0x2f0>)
 8008b16:	2301      	movs	r3, #1
 8008b18:	4631      	mov	r1, r6
 8008b1a:	4628      	mov	r0, r5
 8008b1c:	47b8      	blx	r7
 8008b1e:	3001      	adds	r0, #1
 8008b20:	f43f af51 	beq.w	80089c6 <_printf_float+0xc2>
 8008b24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	db02      	blt.n	8008b32 <_printf_float+0x22e>
 8008b2c:	6823      	ldr	r3, [r4, #0]
 8008b2e:	07d8      	lsls	r0, r3, #31
 8008b30:	d510      	bpl.n	8008b54 <_printf_float+0x250>
 8008b32:	ee18 3a10 	vmov	r3, s16
 8008b36:	4652      	mov	r2, sl
 8008b38:	4631      	mov	r1, r6
 8008b3a:	4628      	mov	r0, r5
 8008b3c:	47b8      	blx	r7
 8008b3e:	3001      	adds	r0, #1
 8008b40:	f43f af41 	beq.w	80089c6 <_printf_float+0xc2>
 8008b44:	f04f 0800 	mov.w	r8, #0
 8008b48:	f104 091a 	add.w	r9, r4, #26
 8008b4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b4e:	3b01      	subs	r3, #1
 8008b50:	4543      	cmp	r3, r8
 8008b52:	dc09      	bgt.n	8008b68 <_printf_float+0x264>
 8008b54:	6823      	ldr	r3, [r4, #0]
 8008b56:	079b      	lsls	r3, r3, #30
 8008b58:	f100 8105 	bmi.w	8008d66 <_printf_float+0x462>
 8008b5c:	68e0      	ldr	r0, [r4, #12]
 8008b5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b60:	4298      	cmp	r0, r3
 8008b62:	bfb8      	it	lt
 8008b64:	4618      	movlt	r0, r3
 8008b66:	e730      	b.n	80089ca <_printf_float+0xc6>
 8008b68:	2301      	movs	r3, #1
 8008b6a:	464a      	mov	r2, r9
 8008b6c:	4631      	mov	r1, r6
 8008b6e:	4628      	mov	r0, r5
 8008b70:	47b8      	blx	r7
 8008b72:	3001      	adds	r0, #1
 8008b74:	f43f af27 	beq.w	80089c6 <_printf_float+0xc2>
 8008b78:	f108 0801 	add.w	r8, r8, #1
 8008b7c:	e7e6      	b.n	8008b4c <_printf_float+0x248>
 8008b7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	dc39      	bgt.n	8008bf8 <_printf_float+0x2f4>
 8008b84:	4a1b      	ldr	r2, [pc, #108]	; (8008bf4 <_printf_float+0x2f0>)
 8008b86:	2301      	movs	r3, #1
 8008b88:	4631      	mov	r1, r6
 8008b8a:	4628      	mov	r0, r5
 8008b8c:	47b8      	blx	r7
 8008b8e:	3001      	adds	r0, #1
 8008b90:	f43f af19 	beq.w	80089c6 <_printf_float+0xc2>
 8008b94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	d102      	bne.n	8008ba2 <_printf_float+0x29e>
 8008b9c:	6823      	ldr	r3, [r4, #0]
 8008b9e:	07d9      	lsls	r1, r3, #31
 8008ba0:	d5d8      	bpl.n	8008b54 <_printf_float+0x250>
 8008ba2:	ee18 3a10 	vmov	r3, s16
 8008ba6:	4652      	mov	r2, sl
 8008ba8:	4631      	mov	r1, r6
 8008baa:	4628      	mov	r0, r5
 8008bac:	47b8      	blx	r7
 8008bae:	3001      	adds	r0, #1
 8008bb0:	f43f af09 	beq.w	80089c6 <_printf_float+0xc2>
 8008bb4:	f04f 0900 	mov.w	r9, #0
 8008bb8:	f104 0a1a 	add.w	sl, r4, #26
 8008bbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bbe:	425b      	negs	r3, r3
 8008bc0:	454b      	cmp	r3, r9
 8008bc2:	dc01      	bgt.n	8008bc8 <_printf_float+0x2c4>
 8008bc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bc6:	e792      	b.n	8008aee <_printf_float+0x1ea>
 8008bc8:	2301      	movs	r3, #1
 8008bca:	4652      	mov	r2, sl
 8008bcc:	4631      	mov	r1, r6
 8008bce:	4628      	mov	r0, r5
 8008bd0:	47b8      	blx	r7
 8008bd2:	3001      	adds	r0, #1
 8008bd4:	f43f aef7 	beq.w	80089c6 <_printf_float+0xc2>
 8008bd8:	f109 0901 	add.w	r9, r9, #1
 8008bdc:	e7ee      	b.n	8008bbc <_printf_float+0x2b8>
 8008bde:	bf00      	nop
 8008be0:	7fefffff 	.word	0x7fefffff
 8008be4:	0800c4f8 	.word	0x0800c4f8
 8008be8:	0800c4fc 	.word	0x0800c4fc
 8008bec:	0800c504 	.word	0x0800c504
 8008bf0:	0800c500 	.word	0x0800c500
 8008bf4:	0800c508 	.word	0x0800c508
 8008bf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008bfa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	bfa8      	it	ge
 8008c00:	461a      	movge	r2, r3
 8008c02:	2a00      	cmp	r2, #0
 8008c04:	4691      	mov	r9, r2
 8008c06:	dc37      	bgt.n	8008c78 <_printf_float+0x374>
 8008c08:	f04f 0b00 	mov.w	fp, #0
 8008c0c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c10:	f104 021a 	add.w	r2, r4, #26
 8008c14:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c16:	9305      	str	r3, [sp, #20]
 8008c18:	eba3 0309 	sub.w	r3, r3, r9
 8008c1c:	455b      	cmp	r3, fp
 8008c1e:	dc33      	bgt.n	8008c88 <_printf_float+0x384>
 8008c20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c24:	429a      	cmp	r2, r3
 8008c26:	db3b      	blt.n	8008ca0 <_printf_float+0x39c>
 8008c28:	6823      	ldr	r3, [r4, #0]
 8008c2a:	07da      	lsls	r2, r3, #31
 8008c2c:	d438      	bmi.n	8008ca0 <_printf_float+0x39c>
 8008c2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c30:	9a05      	ldr	r2, [sp, #20]
 8008c32:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c34:	1a9a      	subs	r2, r3, r2
 8008c36:	eba3 0901 	sub.w	r9, r3, r1
 8008c3a:	4591      	cmp	r9, r2
 8008c3c:	bfa8      	it	ge
 8008c3e:	4691      	movge	r9, r2
 8008c40:	f1b9 0f00 	cmp.w	r9, #0
 8008c44:	dc35      	bgt.n	8008cb2 <_printf_float+0x3ae>
 8008c46:	f04f 0800 	mov.w	r8, #0
 8008c4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c4e:	f104 0a1a 	add.w	sl, r4, #26
 8008c52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c56:	1a9b      	subs	r3, r3, r2
 8008c58:	eba3 0309 	sub.w	r3, r3, r9
 8008c5c:	4543      	cmp	r3, r8
 8008c5e:	f77f af79 	ble.w	8008b54 <_printf_float+0x250>
 8008c62:	2301      	movs	r3, #1
 8008c64:	4652      	mov	r2, sl
 8008c66:	4631      	mov	r1, r6
 8008c68:	4628      	mov	r0, r5
 8008c6a:	47b8      	blx	r7
 8008c6c:	3001      	adds	r0, #1
 8008c6e:	f43f aeaa 	beq.w	80089c6 <_printf_float+0xc2>
 8008c72:	f108 0801 	add.w	r8, r8, #1
 8008c76:	e7ec      	b.n	8008c52 <_printf_float+0x34e>
 8008c78:	4613      	mov	r3, r2
 8008c7a:	4631      	mov	r1, r6
 8008c7c:	4642      	mov	r2, r8
 8008c7e:	4628      	mov	r0, r5
 8008c80:	47b8      	blx	r7
 8008c82:	3001      	adds	r0, #1
 8008c84:	d1c0      	bne.n	8008c08 <_printf_float+0x304>
 8008c86:	e69e      	b.n	80089c6 <_printf_float+0xc2>
 8008c88:	2301      	movs	r3, #1
 8008c8a:	4631      	mov	r1, r6
 8008c8c:	4628      	mov	r0, r5
 8008c8e:	9205      	str	r2, [sp, #20]
 8008c90:	47b8      	blx	r7
 8008c92:	3001      	adds	r0, #1
 8008c94:	f43f ae97 	beq.w	80089c6 <_printf_float+0xc2>
 8008c98:	9a05      	ldr	r2, [sp, #20]
 8008c9a:	f10b 0b01 	add.w	fp, fp, #1
 8008c9e:	e7b9      	b.n	8008c14 <_printf_float+0x310>
 8008ca0:	ee18 3a10 	vmov	r3, s16
 8008ca4:	4652      	mov	r2, sl
 8008ca6:	4631      	mov	r1, r6
 8008ca8:	4628      	mov	r0, r5
 8008caa:	47b8      	blx	r7
 8008cac:	3001      	adds	r0, #1
 8008cae:	d1be      	bne.n	8008c2e <_printf_float+0x32a>
 8008cb0:	e689      	b.n	80089c6 <_printf_float+0xc2>
 8008cb2:	9a05      	ldr	r2, [sp, #20]
 8008cb4:	464b      	mov	r3, r9
 8008cb6:	4442      	add	r2, r8
 8008cb8:	4631      	mov	r1, r6
 8008cba:	4628      	mov	r0, r5
 8008cbc:	47b8      	blx	r7
 8008cbe:	3001      	adds	r0, #1
 8008cc0:	d1c1      	bne.n	8008c46 <_printf_float+0x342>
 8008cc2:	e680      	b.n	80089c6 <_printf_float+0xc2>
 8008cc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cc6:	2a01      	cmp	r2, #1
 8008cc8:	dc01      	bgt.n	8008cce <_printf_float+0x3ca>
 8008cca:	07db      	lsls	r3, r3, #31
 8008ccc:	d538      	bpl.n	8008d40 <_printf_float+0x43c>
 8008cce:	2301      	movs	r3, #1
 8008cd0:	4642      	mov	r2, r8
 8008cd2:	4631      	mov	r1, r6
 8008cd4:	4628      	mov	r0, r5
 8008cd6:	47b8      	blx	r7
 8008cd8:	3001      	adds	r0, #1
 8008cda:	f43f ae74 	beq.w	80089c6 <_printf_float+0xc2>
 8008cde:	ee18 3a10 	vmov	r3, s16
 8008ce2:	4652      	mov	r2, sl
 8008ce4:	4631      	mov	r1, r6
 8008ce6:	4628      	mov	r0, r5
 8008ce8:	47b8      	blx	r7
 8008cea:	3001      	adds	r0, #1
 8008cec:	f43f ae6b 	beq.w	80089c6 <_printf_float+0xc2>
 8008cf0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	f7f7 feee 	bl	8000ad8 <__aeabi_dcmpeq>
 8008cfc:	b9d8      	cbnz	r0, 8008d36 <_printf_float+0x432>
 8008cfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d00:	f108 0201 	add.w	r2, r8, #1
 8008d04:	3b01      	subs	r3, #1
 8008d06:	4631      	mov	r1, r6
 8008d08:	4628      	mov	r0, r5
 8008d0a:	47b8      	blx	r7
 8008d0c:	3001      	adds	r0, #1
 8008d0e:	d10e      	bne.n	8008d2e <_printf_float+0x42a>
 8008d10:	e659      	b.n	80089c6 <_printf_float+0xc2>
 8008d12:	2301      	movs	r3, #1
 8008d14:	4652      	mov	r2, sl
 8008d16:	4631      	mov	r1, r6
 8008d18:	4628      	mov	r0, r5
 8008d1a:	47b8      	blx	r7
 8008d1c:	3001      	adds	r0, #1
 8008d1e:	f43f ae52 	beq.w	80089c6 <_printf_float+0xc2>
 8008d22:	f108 0801 	add.w	r8, r8, #1
 8008d26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d28:	3b01      	subs	r3, #1
 8008d2a:	4543      	cmp	r3, r8
 8008d2c:	dcf1      	bgt.n	8008d12 <_printf_float+0x40e>
 8008d2e:	464b      	mov	r3, r9
 8008d30:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008d34:	e6dc      	b.n	8008af0 <_printf_float+0x1ec>
 8008d36:	f04f 0800 	mov.w	r8, #0
 8008d3a:	f104 0a1a 	add.w	sl, r4, #26
 8008d3e:	e7f2      	b.n	8008d26 <_printf_float+0x422>
 8008d40:	2301      	movs	r3, #1
 8008d42:	4642      	mov	r2, r8
 8008d44:	e7df      	b.n	8008d06 <_printf_float+0x402>
 8008d46:	2301      	movs	r3, #1
 8008d48:	464a      	mov	r2, r9
 8008d4a:	4631      	mov	r1, r6
 8008d4c:	4628      	mov	r0, r5
 8008d4e:	47b8      	blx	r7
 8008d50:	3001      	adds	r0, #1
 8008d52:	f43f ae38 	beq.w	80089c6 <_printf_float+0xc2>
 8008d56:	f108 0801 	add.w	r8, r8, #1
 8008d5a:	68e3      	ldr	r3, [r4, #12]
 8008d5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008d5e:	1a5b      	subs	r3, r3, r1
 8008d60:	4543      	cmp	r3, r8
 8008d62:	dcf0      	bgt.n	8008d46 <_printf_float+0x442>
 8008d64:	e6fa      	b.n	8008b5c <_printf_float+0x258>
 8008d66:	f04f 0800 	mov.w	r8, #0
 8008d6a:	f104 0919 	add.w	r9, r4, #25
 8008d6e:	e7f4      	b.n	8008d5a <_printf_float+0x456>

08008d70 <_printf_common>:
 8008d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d74:	4616      	mov	r6, r2
 8008d76:	4699      	mov	r9, r3
 8008d78:	688a      	ldr	r2, [r1, #8]
 8008d7a:	690b      	ldr	r3, [r1, #16]
 8008d7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d80:	4293      	cmp	r3, r2
 8008d82:	bfb8      	it	lt
 8008d84:	4613      	movlt	r3, r2
 8008d86:	6033      	str	r3, [r6, #0]
 8008d88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d8c:	4607      	mov	r7, r0
 8008d8e:	460c      	mov	r4, r1
 8008d90:	b10a      	cbz	r2, 8008d96 <_printf_common+0x26>
 8008d92:	3301      	adds	r3, #1
 8008d94:	6033      	str	r3, [r6, #0]
 8008d96:	6823      	ldr	r3, [r4, #0]
 8008d98:	0699      	lsls	r1, r3, #26
 8008d9a:	bf42      	ittt	mi
 8008d9c:	6833      	ldrmi	r3, [r6, #0]
 8008d9e:	3302      	addmi	r3, #2
 8008da0:	6033      	strmi	r3, [r6, #0]
 8008da2:	6825      	ldr	r5, [r4, #0]
 8008da4:	f015 0506 	ands.w	r5, r5, #6
 8008da8:	d106      	bne.n	8008db8 <_printf_common+0x48>
 8008daa:	f104 0a19 	add.w	sl, r4, #25
 8008dae:	68e3      	ldr	r3, [r4, #12]
 8008db0:	6832      	ldr	r2, [r6, #0]
 8008db2:	1a9b      	subs	r3, r3, r2
 8008db4:	42ab      	cmp	r3, r5
 8008db6:	dc26      	bgt.n	8008e06 <_printf_common+0x96>
 8008db8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008dbc:	1e13      	subs	r3, r2, #0
 8008dbe:	6822      	ldr	r2, [r4, #0]
 8008dc0:	bf18      	it	ne
 8008dc2:	2301      	movne	r3, #1
 8008dc4:	0692      	lsls	r2, r2, #26
 8008dc6:	d42b      	bmi.n	8008e20 <_printf_common+0xb0>
 8008dc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008dcc:	4649      	mov	r1, r9
 8008dce:	4638      	mov	r0, r7
 8008dd0:	47c0      	blx	r8
 8008dd2:	3001      	adds	r0, #1
 8008dd4:	d01e      	beq.n	8008e14 <_printf_common+0xa4>
 8008dd6:	6823      	ldr	r3, [r4, #0]
 8008dd8:	68e5      	ldr	r5, [r4, #12]
 8008dda:	6832      	ldr	r2, [r6, #0]
 8008ddc:	f003 0306 	and.w	r3, r3, #6
 8008de0:	2b04      	cmp	r3, #4
 8008de2:	bf08      	it	eq
 8008de4:	1aad      	subeq	r5, r5, r2
 8008de6:	68a3      	ldr	r3, [r4, #8]
 8008de8:	6922      	ldr	r2, [r4, #16]
 8008dea:	bf0c      	ite	eq
 8008dec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008df0:	2500      	movne	r5, #0
 8008df2:	4293      	cmp	r3, r2
 8008df4:	bfc4      	itt	gt
 8008df6:	1a9b      	subgt	r3, r3, r2
 8008df8:	18ed      	addgt	r5, r5, r3
 8008dfa:	2600      	movs	r6, #0
 8008dfc:	341a      	adds	r4, #26
 8008dfe:	42b5      	cmp	r5, r6
 8008e00:	d11a      	bne.n	8008e38 <_printf_common+0xc8>
 8008e02:	2000      	movs	r0, #0
 8008e04:	e008      	b.n	8008e18 <_printf_common+0xa8>
 8008e06:	2301      	movs	r3, #1
 8008e08:	4652      	mov	r2, sl
 8008e0a:	4649      	mov	r1, r9
 8008e0c:	4638      	mov	r0, r7
 8008e0e:	47c0      	blx	r8
 8008e10:	3001      	adds	r0, #1
 8008e12:	d103      	bne.n	8008e1c <_printf_common+0xac>
 8008e14:	f04f 30ff 	mov.w	r0, #4294967295
 8008e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e1c:	3501      	adds	r5, #1
 8008e1e:	e7c6      	b.n	8008dae <_printf_common+0x3e>
 8008e20:	18e1      	adds	r1, r4, r3
 8008e22:	1c5a      	adds	r2, r3, #1
 8008e24:	2030      	movs	r0, #48	; 0x30
 8008e26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e2a:	4422      	add	r2, r4
 8008e2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e34:	3302      	adds	r3, #2
 8008e36:	e7c7      	b.n	8008dc8 <_printf_common+0x58>
 8008e38:	2301      	movs	r3, #1
 8008e3a:	4622      	mov	r2, r4
 8008e3c:	4649      	mov	r1, r9
 8008e3e:	4638      	mov	r0, r7
 8008e40:	47c0      	blx	r8
 8008e42:	3001      	adds	r0, #1
 8008e44:	d0e6      	beq.n	8008e14 <_printf_common+0xa4>
 8008e46:	3601      	adds	r6, #1
 8008e48:	e7d9      	b.n	8008dfe <_printf_common+0x8e>
	...

08008e4c <_printf_i>:
 8008e4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e50:	7e0f      	ldrb	r7, [r1, #24]
 8008e52:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008e54:	2f78      	cmp	r7, #120	; 0x78
 8008e56:	4691      	mov	r9, r2
 8008e58:	4680      	mov	r8, r0
 8008e5a:	460c      	mov	r4, r1
 8008e5c:	469a      	mov	sl, r3
 8008e5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008e62:	d807      	bhi.n	8008e74 <_printf_i+0x28>
 8008e64:	2f62      	cmp	r7, #98	; 0x62
 8008e66:	d80a      	bhi.n	8008e7e <_printf_i+0x32>
 8008e68:	2f00      	cmp	r7, #0
 8008e6a:	f000 80d8 	beq.w	800901e <_printf_i+0x1d2>
 8008e6e:	2f58      	cmp	r7, #88	; 0x58
 8008e70:	f000 80a3 	beq.w	8008fba <_printf_i+0x16e>
 8008e74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008e7c:	e03a      	b.n	8008ef4 <_printf_i+0xa8>
 8008e7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008e82:	2b15      	cmp	r3, #21
 8008e84:	d8f6      	bhi.n	8008e74 <_printf_i+0x28>
 8008e86:	a101      	add	r1, pc, #4	; (adr r1, 8008e8c <_printf_i+0x40>)
 8008e88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e8c:	08008ee5 	.word	0x08008ee5
 8008e90:	08008ef9 	.word	0x08008ef9
 8008e94:	08008e75 	.word	0x08008e75
 8008e98:	08008e75 	.word	0x08008e75
 8008e9c:	08008e75 	.word	0x08008e75
 8008ea0:	08008e75 	.word	0x08008e75
 8008ea4:	08008ef9 	.word	0x08008ef9
 8008ea8:	08008e75 	.word	0x08008e75
 8008eac:	08008e75 	.word	0x08008e75
 8008eb0:	08008e75 	.word	0x08008e75
 8008eb4:	08008e75 	.word	0x08008e75
 8008eb8:	08009005 	.word	0x08009005
 8008ebc:	08008f29 	.word	0x08008f29
 8008ec0:	08008fe7 	.word	0x08008fe7
 8008ec4:	08008e75 	.word	0x08008e75
 8008ec8:	08008e75 	.word	0x08008e75
 8008ecc:	08009027 	.word	0x08009027
 8008ed0:	08008e75 	.word	0x08008e75
 8008ed4:	08008f29 	.word	0x08008f29
 8008ed8:	08008e75 	.word	0x08008e75
 8008edc:	08008e75 	.word	0x08008e75
 8008ee0:	08008fef 	.word	0x08008fef
 8008ee4:	682b      	ldr	r3, [r5, #0]
 8008ee6:	1d1a      	adds	r2, r3, #4
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	602a      	str	r2, [r5, #0]
 8008eec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ef0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	e0a3      	b.n	8009040 <_printf_i+0x1f4>
 8008ef8:	6820      	ldr	r0, [r4, #0]
 8008efa:	6829      	ldr	r1, [r5, #0]
 8008efc:	0606      	lsls	r6, r0, #24
 8008efe:	f101 0304 	add.w	r3, r1, #4
 8008f02:	d50a      	bpl.n	8008f1a <_printf_i+0xce>
 8008f04:	680e      	ldr	r6, [r1, #0]
 8008f06:	602b      	str	r3, [r5, #0]
 8008f08:	2e00      	cmp	r6, #0
 8008f0a:	da03      	bge.n	8008f14 <_printf_i+0xc8>
 8008f0c:	232d      	movs	r3, #45	; 0x2d
 8008f0e:	4276      	negs	r6, r6
 8008f10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f14:	485e      	ldr	r0, [pc, #376]	; (8009090 <_printf_i+0x244>)
 8008f16:	230a      	movs	r3, #10
 8008f18:	e019      	b.n	8008f4e <_printf_i+0x102>
 8008f1a:	680e      	ldr	r6, [r1, #0]
 8008f1c:	602b      	str	r3, [r5, #0]
 8008f1e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008f22:	bf18      	it	ne
 8008f24:	b236      	sxthne	r6, r6
 8008f26:	e7ef      	b.n	8008f08 <_printf_i+0xbc>
 8008f28:	682b      	ldr	r3, [r5, #0]
 8008f2a:	6820      	ldr	r0, [r4, #0]
 8008f2c:	1d19      	adds	r1, r3, #4
 8008f2e:	6029      	str	r1, [r5, #0]
 8008f30:	0601      	lsls	r1, r0, #24
 8008f32:	d501      	bpl.n	8008f38 <_printf_i+0xec>
 8008f34:	681e      	ldr	r6, [r3, #0]
 8008f36:	e002      	b.n	8008f3e <_printf_i+0xf2>
 8008f38:	0646      	lsls	r6, r0, #25
 8008f3a:	d5fb      	bpl.n	8008f34 <_printf_i+0xe8>
 8008f3c:	881e      	ldrh	r6, [r3, #0]
 8008f3e:	4854      	ldr	r0, [pc, #336]	; (8009090 <_printf_i+0x244>)
 8008f40:	2f6f      	cmp	r7, #111	; 0x6f
 8008f42:	bf0c      	ite	eq
 8008f44:	2308      	moveq	r3, #8
 8008f46:	230a      	movne	r3, #10
 8008f48:	2100      	movs	r1, #0
 8008f4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f4e:	6865      	ldr	r5, [r4, #4]
 8008f50:	60a5      	str	r5, [r4, #8]
 8008f52:	2d00      	cmp	r5, #0
 8008f54:	bfa2      	ittt	ge
 8008f56:	6821      	ldrge	r1, [r4, #0]
 8008f58:	f021 0104 	bicge.w	r1, r1, #4
 8008f5c:	6021      	strge	r1, [r4, #0]
 8008f5e:	b90e      	cbnz	r6, 8008f64 <_printf_i+0x118>
 8008f60:	2d00      	cmp	r5, #0
 8008f62:	d04d      	beq.n	8009000 <_printf_i+0x1b4>
 8008f64:	4615      	mov	r5, r2
 8008f66:	fbb6 f1f3 	udiv	r1, r6, r3
 8008f6a:	fb03 6711 	mls	r7, r3, r1, r6
 8008f6e:	5dc7      	ldrb	r7, [r0, r7]
 8008f70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008f74:	4637      	mov	r7, r6
 8008f76:	42bb      	cmp	r3, r7
 8008f78:	460e      	mov	r6, r1
 8008f7a:	d9f4      	bls.n	8008f66 <_printf_i+0x11a>
 8008f7c:	2b08      	cmp	r3, #8
 8008f7e:	d10b      	bne.n	8008f98 <_printf_i+0x14c>
 8008f80:	6823      	ldr	r3, [r4, #0]
 8008f82:	07de      	lsls	r6, r3, #31
 8008f84:	d508      	bpl.n	8008f98 <_printf_i+0x14c>
 8008f86:	6923      	ldr	r3, [r4, #16]
 8008f88:	6861      	ldr	r1, [r4, #4]
 8008f8a:	4299      	cmp	r1, r3
 8008f8c:	bfde      	ittt	le
 8008f8e:	2330      	movle	r3, #48	; 0x30
 8008f90:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008f94:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008f98:	1b52      	subs	r2, r2, r5
 8008f9a:	6122      	str	r2, [r4, #16]
 8008f9c:	f8cd a000 	str.w	sl, [sp]
 8008fa0:	464b      	mov	r3, r9
 8008fa2:	aa03      	add	r2, sp, #12
 8008fa4:	4621      	mov	r1, r4
 8008fa6:	4640      	mov	r0, r8
 8008fa8:	f7ff fee2 	bl	8008d70 <_printf_common>
 8008fac:	3001      	adds	r0, #1
 8008fae:	d14c      	bne.n	800904a <_printf_i+0x1fe>
 8008fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8008fb4:	b004      	add	sp, #16
 8008fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fba:	4835      	ldr	r0, [pc, #212]	; (8009090 <_printf_i+0x244>)
 8008fbc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008fc0:	6829      	ldr	r1, [r5, #0]
 8008fc2:	6823      	ldr	r3, [r4, #0]
 8008fc4:	f851 6b04 	ldr.w	r6, [r1], #4
 8008fc8:	6029      	str	r1, [r5, #0]
 8008fca:	061d      	lsls	r5, r3, #24
 8008fcc:	d514      	bpl.n	8008ff8 <_printf_i+0x1ac>
 8008fce:	07df      	lsls	r7, r3, #31
 8008fd0:	bf44      	itt	mi
 8008fd2:	f043 0320 	orrmi.w	r3, r3, #32
 8008fd6:	6023      	strmi	r3, [r4, #0]
 8008fd8:	b91e      	cbnz	r6, 8008fe2 <_printf_i+0x196>
 8008fda:	6823      	ldr	r3, [r4, #0]
 8008fdc:	f023 0320 	bic.w	r3, r3, #32
 8008fe0:	6023      	str	r3, [r4, #0]
 8008fe2:	2310      	movs	r3, #16
 8008fe4:	e7b0      	b.n	8008f48 <_printf_i+0xfc>
 8008fe6:	6823      	ldr	r3, [r4, #0]
 8008fe8:	f043 0320 	orr.w	r3, r3, #32
 8008fec:	6023      	str	r3, [r4, #0]
 8008fee:	2378      	movs	r3, #120	; 0x78
 8008ff0:	4828      	ldr	r0, [pc, #160]	; (8009094 <_printf_i+0x248>)
 8008ff2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008ff6:	e7e3      	b.n	8008fc0 <_printf_i+0x174>
 8008ff8:	0659      	lsls	r1, r3, #25
 8008ffa:	bf48      	it	mi
 8008ffc:	b2b6      	uxthmi	r6, r6
 8008ffe:	e7e6      	b.n	8008fce <_printf_i+0x182>
 8009000:	4615      	mov	r5, r2
 8009002:	e7bb      	b.n	8008f7c <_printf_i+0x130>
 8009004:	682b      	ldr	r3, [r5, #0]
 8009006:	6826      	ldr	r6, [r4, #0]
 8009008:	6961      	ldr	r1, [r4, #20]
 800900a:	1d18      	adds	r0, r3, #4
 800900c:	6028      	str	r0, [r5, #0]
 800900e:	0635      	lsls	r5, r6, #24
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	d501      	bpl.n	8009018 <_printf_i+0x1cc>
 8009014:	6019      	str	r1, [r3, #0]
 8009016:	e002      	b.n	800901e <_printf_i+0x1d2>
 8009018:	0670      	lsls	r0, r6, #25
 800901a:	d5fb      	bpl.n	8009014 <_printf_i+0x1c8>
 800901c:	8019      	strh	r1, [r3, #0]
 800901e:	2300      	movs	r3, #0
 8009020:	6123      	str	r3, [r4, #16]
 8009022:	4615      	mov	r5, r2
 8009024:	e7ba      	b.n	8008f9c <_printf_i+0x150>
 8009026:	682b      	ldr	r3, [r5, #0]
 8009028:	1d1a      	adds	r2, r3, #4
 800902a:	602a      	str	r2, [r5, #0]
 800902c:	681d      	ldr	r5, [r3, #0]
 800902e:	6862      	ldr	r2, [r4, #4]
 8009030:	2100      	movs	r1, #0
 8009032:	4628      	mov	r0, r5
 8009034:	f7f7 f8dc 	bl	80001f0 <memchr>
 8009038:	b108      	cbz	r0, 800903e <_printf_i+0x1f2>
 800903a:	1b40      	subs	r0, r0, r5
 800903c:	6060      	str	r0, [r4, #4]
 800903e:	6863      	ldr	r3, [r4, #4]
 8009040:	6123      	str	r3, [r4, #16]
 8009042:	2300      	movs	r3, #0
 8009044:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009048:	e7a8      	b.n	8008f9c <_printf_i+0x150>
 800904a:	6923      	ldr	r3, [r4, #16]
 800904c:	462a      	mov	r2, r5
 800904e:	4649      	mov	r1, r9
 8009050:	4640      	mov	r0, r8
 8009052:	47d0      	blx	sl
 8009054:	3001      	adds	r0, #1
 8009056:	d0ab      	beq.n	8008fb0 <_printf_i+0x164>
 8009058:	6823      	ldr	r3, [r4, #0]
 800905a:	079b      	lsls	r3, r3, #30
 800905c:	d413      	bmi.n	8009086 <_printf_i+0x23a>
 800905e:	68e0      	ldr	r0, [r4, #12]
 8009060:	9b03      	ldr	r3, [sp, #12]
 8009062:	4298      	cmp	r0, r3
 8009064:	bfb8      	it	lt
 8009066:	4618      	movlt	r0, r3
 8009068:	e7a4      	b.n	8008fb4 <_printf_i+0x168>
 800906a:	2301      	movs	r3, #1
 800906c:	4632      	mov	r2, r6
 800906e:	4649      	mov	r1, r9
 8009070:	4640      	mov	r0, r8
 8009072:	47d0      	blx	sl
 8009074:	3001      	adds	r0, #1
 8009076:	d09b      	beq.n	8008fb0 <_printf_i+0x164>
 8009078:	3501      	adds	r5, #1
 800907a:	68e3      	ldr	r3, [r4, #12]
 800907c:	9903      	ldr	r1, [sp, #12]
 800907e:	1a5b      	subs	r3, r3, r1
 8009080:	42ab      	cmp	r3, r5
 8009082:	dcf2      	bgt.n	800906a <_printf_i+0x21e>
 8009084:	e7eb      	b.n	800905e <_printf_i+0x212>
 8009086:	2500      	movs	r5, #0
 8009088:	f104 0619 	add.w	r6, r4, #25
 800908c:	e7f5      	b.n	800907a <_printf_i+0x22e>
 800908e:	bf00      	nop
 8009090:	0800c50a 	.word	0x0800c50a
 8009094:	0800c51b 	.word	0x0800c51b

08009098 <sniprintf>:
 8009098:	b40c      	push	{r2, r3}
 800909a:	b530      	push	{r4, r5, lr}
 800909c:	4b17      	ldr	r3, [pc, #92]	; (80090fc <sniprintf+0x64>)
 800909e:	1e0c      	subs	r4, r1, #0
 80090a0:	681d      	ldr	r5, [r3, #0]
 80090a2:	b09d      	sub	sp, #116	; 0x74
 80090a4:	da08      	bge.n	80090b8 <sniprintf+0x20>
 80090a6:	238b      	movs	r3, #139	; 0x8b
 80090a8:	602b      	str	r3, [r5, #0]
 80090aa:	f04f 30ff 	mov.w	r0, #4294967295
 80090ae:	b01d      	add	sp, #116	; 0x74
 80090b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80090b4:	b002      	add	sp, #8
 80090b6:	4770      	bx	lr
 80090b8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80090bc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80090c0:	bf14      	ite	ne
 80090c2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80090c6:	4623      	moveq	r3, r4
 80090c8:	9304      	str	r3, [sp, #16]
 80090ca:	9307      	str	r3, [sp, #28]
 80090cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80090d0:	9002      	str	r0, [sp, #8]
 80090d2:	9006      	str	r0, [sp, #24]
 80090d4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80090d8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80090da:	ab21      	add	r3, sp, #132	; 0x84
 80090dc:	a902      	add	r1, sp, #8
 80090de:	4628      	mov	r0, r5
 80090e0:	9301      	str	r3, [sp, #4]
 80090e2:	f001 fb77 	bl	800a7d4 <_svfiprintf_r>
 80090e6:	1c43      	adds	r3, r0, #1
 80090e8:	bfbc      	itt	lt
 80090ea:	238b      	movlt	r3, #139	; 0x8b
 80090ec:	602b      	strlt	r3, [r5, #0]
 80090ee:	2c00      	cmp	r4, #0
 80090f0:	d0dd      	beq.n	80090ae <sniprintf+0x16>
 80090f2:	9b02      	ldr	r3, [sp, #8]
 80090f4:	2200      	movs	r2, #0
 80090f6:	701a      	strb	r2, [r3, #0]
 80090f8:	e7d9      	b.n	80090ae <sniprintf+0x16>
 80090fa:	bf00      	nop
 80090fc:	20000040 	.word	0x20000040

08009100 <quorem>:
 8009100:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009104:	6903      	ldr	r3, [r0, #16]
 8009106:	690c      	ldr	r4, [r1, #16]
 8009108:	42a3      	cmp	r3, r4
 800910a:	4607      	mov	r7, r0
 800910c:	f2c0 8081 	blt.w	8009212 <quorem+0x112>
 8009110:	3c01      	subs	r4, #1
 8009112:	f101 0814 	add.w	r8, r1, #20
 8009116:	f100 0514 	add.w	r5, r0, #20
 800911a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800911e:	9301      	str	r3, [sp, #4]
 8009120:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009124:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009128:	3301      	adds	r3, #1
 800912a:	429a      	cmp	r2, r3
 800912c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009130:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009134:	fbb2 f6f3 	udiv	r6, r2, r3
 8009138:	d331      	bcc.n	800919e <quorem+0x9e>
 800913a:	f04f 0e00 	mov.w	lr, #0
 800913e:	4640      	mov	r0, r8
 8009140:	46ac      	mov	ip, r5
 8009142:	46f2      	mov	sl, lr
 8009144:	f850 2b04 	ldr.w	r2, [r0], #4
 8009148:	b293      	uxth	r3, r2
 800914a:	fb06 e303 	mla	r3, r6, r3, lr
 800914e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009152:	b29b      	uxth	r3, r3
 8009154:	ebaa 0303 	sub.w	r3, sl, r3
 8009158:	f8dc a000 	ldr.w	sl, [ip]
 800915c:	0c12      	lsrs	r2, r2, #16
 800915e:	fa13 f38a 	uxtah	r3, r3, sl
 8009162:	fb06 e202 	mla	r2, r6, r2, lr
 8009166:	9300      	str	r3, [sp, #0]
 8009168:	9b00      	ldr	r3, [sp, #0]
 800916a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800916e:	b292      	uxth	r2, r2
 8009170:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009174:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009178:	f8bd 3000 	ldrh.w	r3, [sp]
 800917c:	4581      	cmp	r9, r0
 800917e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009182:	f84c 3b04 	str.w	r3, [ip], #4
 8009186:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800918a:	d2db      	bcs.n	8009144 <quorem+0x44>
 800918c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009190:	b92b      	cbnz	r3, 800919e <quorem+0x9e>
 8009192:	9b01      	ldr	r3, [sp, #4]
 8009194:	3b04      	subs	r3, #4
 8009196:	429d      	cmp	r5, r3
 8009198:	461a      	mov	r2, r3
 800919a:	d32e      	bcc.n	80091fa <quorem+0xfa>
 800919c:	613c      	str	r4, [r7, #16]
 800919e:	4638      	mov	r0, r7
 80091a0:	f001 f8c4 	bl	800a32c <__mcmp>
 80091a4:	2800      	cmp	r0, #0
 80091a6:	db24      	blt.n	80091f2 <quorem+0xf2>
 80091a8:	3601      	adds	r6, #1
 80091aa:	4628      	mov	r0, r5
 80091ac:	f04f 0c00 	mov.w	ip, #0
 80091b0:	f858 2b04 	ldr.w	r2, [r8], #4
 80091b4:	f8d0 e000 	ldr.w	lr, [r0]
 80091b8:	b293      	uxth	r3, r2
 80091ba:	ebac 0303 	sub.w	r3, ip, r3
 80091be:	0c12      	lsrs	r2, r2, #16
 80091c0:	fa13 f38e 	uxtah	r3, r3, lr
 80091c4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80091c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80091cc:	b29b      	uxth	r3, r3
 80091ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80091d2:	45c1      	cmp	r9, r8
 80091d4:	f840 3b04 	str.w	r3, [r0], #4
 80091d8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80091dc:	d2e8      	bcs.n	80091b0 <quorem+0xb0>
 80091de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80091e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80091e6:	b922      	cbnz	r2, 80091f2 <quorem+0xf2>
 80091e8:	3b04      	subs	r3, #4
 80091ea:	429d      	cmp	r5, r3
 80091ec:	461a      	mov	r2, r3
 80091ee:	d30a      	bcc.n	8009206 <quorem+0x106>
 80091f0:	613c      	str	r4, [r7, #16]
 80091f2:	4630      	mov	r0, r6
 80091f4:	b003      	add	sp, #12
 80091f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091fa:	6812      	ldr	r2, [r2, #0]
 80091fc:	3b04      	subs	r3, #4
 80091fe:	2a00      	cmp	r2, #0
 8009200:	d1cc      	bne.n	800919c <quorem+0x9c>
 8009202:	3c01      	subs	r4, #1
 8009204:	e7c7      	b.n	8009196 <quorem+0x96>
 8009206:	6812      	ldr	r2, [r2, #0]
 8009208:	3b04      	subs	r3, #4
 800920a:	2a00      	cmp	r2, #0
 800920c:	d1f0      	bne.n	80091f0 <quorem+0xf0>
 800920e:	3c01      	subs	r4, #1
 8009210:	e7eb      	b.n	80091ea <quorem+0xea>
 8009212:	2000      	movs	r0, #0
 8009214:	e7ee      	b.n	80091f4 <quorem+0xf4>
	...

08009218 <_dtoa_r>:
 8009218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800921c:	ed2d 8b04 	vpush	{d8-d9}
 8009220:	ec57 6b10 	vmov	r6, r7, d0
 8009224:	b093      	sub	sp, #76	; 0x4c
 8009226:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009228:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800922c:	9106      	str	r1, [sp, #24]
 800922e:	ee10 aa10 	vmov	sl, s0
 8009232:	4604      	mov	r4, r0
 8009234:	9209      	str	r2, [sp, #36]	; 0x24
 8009236:	930c      	str	r3, [sp, #48]	; 0x30
 8009238:	46bb      	mov	fp, r7
 800923a:	b975      	cbnz	r5, 800925a <_dtoa_r+0x42>
 800923c:	2010      	movs	r0, #16
 800923e:	f000 fddd 	bl	8009dfc <malloc>
 8009242:	4602      	mov	r2, r0
 8009244:	6260      	str	r0, [r4, #36]	; 0x24
 8009246:	b920      	cbnz	r0, 8009252 <_dtoa_r+0x3a>
 8009248:	4ba7      	ldr	r3, [pc, #668]	; (80094e8 <_dtoa_r+0x2d0>)
 800924a:	21ea      	movs	r1, #234	; 0xea
 800924c:	48a7      	ldr	r0, [pc, #668]	; (80094ec <_dtoa_r+0x2d4>)
 800924e:	f001 fbd1 	bl	800a9f4 <__assert_func>
 8009252:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009256:	6005      	str	r5, [r0, #0]
 8009258:	60c5      	str	r5, [r0, #12]
 800925a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800925c:	6819      	ldr	r1, [r3, #0]
 800925e:	b151      	cbz	r1, 8009276 <_dtoa_r+0x5e>
 8009260:	685a      	ldr	r2, [r3, #4]
 8009262:	604a      	str	r2, [r1, #4]
 8009264:	2301      	movs	r3, #1
 8009266:	4093      	lsls	r3, r2
 8009268:	608b      	str	r3, [r1, #8]
 800926a:	4620      	mov	r0, r4
 800926c:	f000 fe1c 	bl	8009ea8 <_Bfree>
 8009270:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009272:	2200      	movs	r2, #0
 8009274:	601a      	str	r2, [r3, #0]
 8009276:	1e3b      	subs	r3, r7, #0
 8009278:	bfaa      	itet	ge
 800927a:	2300      	movge	r3, #0
 800927c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009280:	f8c8 3000 	strge.w	r3, [r8]
 8009284:	4b9a      	ldr	r3, [pc, #616]	; (80094f0 <_dtoa_r+0x2d8>)
 8009286:	bfbc      	itt	lt
 8009288:	2201      	movlt	r2, #1
 800928a:	f8c8 2000 	strlt.w	r2, [r8]
 800928e:	ea33 030b 	bics.w	r3, r3, fp
 8009292:	d11b      	bne.n	80092cc <_dtoa_r+0xb4>
 8009294:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009296:	f242 730f 	movw	r3, #9999	; 0x270f
 800929a:	6013      	str	r3, [r2, #0]
 800929c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80092a0:	4333      	orrs	r3, r6
 80092a2:	f000 8592 	beq.w	8009dca <_dtoa_r+0xbb2>
 80092a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092a8:	b963      	cbnz	r3, 80092c4 <_dtoa_r+0xac>
 80092aa:	4b92      	ldr	r3, [pc, #584]	; (80094f4 <_dtoa_r+0x2dc>)
 80092ac:	e022      	b.n	80092f4 <_dtoa_r+0xdc>
 80092ae:	4b92      	ldr	r3, [pc, #584]	; (80094f8 <_dtoa_r+0x2e0>)
 80092b0:	9301      	str	r3, [sp, #4]
 80092b2:	3308      	adds	r3, #8
 80092b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80092b6:	6013      	str	r3, [r2, #0]
 80092b8:	9801      	ldr	r0, [sp, #4]
 80092ba:	b013      	add	sp, #76	; 0x4c
 80092bc:	ecbd 8b04 	vpop	{d8-d9}
 80092c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092c4:	4b8b      	ldr	r3, [pc, #556]	; (80094f4 <_dtoa_r+0x2dc>)
 80092c6:	9301      	str	r3, [sp, #4]
 80092c8:	3303      	adds	r3, #3
 80092ca:	e7f3      	b.n	80092b4 <_dtoa_r+0x9c>
 80092cc:	2200      	movs	r2, #0
 80092ce:	2300      	movs	r3, #0
 80092d0:	4650      	mov	r0, sl
 80092d2:	4659      	mov	r1, fp
 80092d4:	f7f7 fc00 	bl	8000ad8 <__aeabi_dcmpeq>
 80092d8:	ec4b ab19 	vmov	d9, sl, fp
 80092dc:	4680      	mov	r8, r0
 80092de:	b158      	cbz	r0, 80092f8 <_dtoa_r+0xe0>
 80092e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80092e2:	2301      	movs	r3, #1
 80092e4:	6013      	str	r3, [r2, #0]
 80092e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	f000 856b 	beq.w	8009dc4 <_dtoa_r+0xbac>
 80092ee:	4883      	ldr	r0, [pc, #524]	; (80094fc <_dtoa_r+0x2e4>)
 80092f0:	6018      	str	r0, [r3, #0]
 80092f2:	1e43      	subs	r3, r0, #1
 80092f4:	9301      	str	r3, [sp, #4]
 80092f6:	e7df      	b.n	80092b8 <_dtoa_r+0xa0>
 80092f8:	ec4b ab10 	vmov	d0, sl, fp
 80092fc:	aa10      	add	r2, sp, #64	; 0x40
 80092fe:	a911      	add	r1, sp, #68	; 0x44
 8009300:	4620      	mov	r0, r4
 8009302:	f001 f8b9 	bl	800a478 <__d2b>
 8009306:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800930a:	ee08 0a10 	vmov	s16, r0
 800930e:	2d00      	cmp	r5, #0
 8009310:	f000 8084 	beq.w	800941c <_dtoa_r+0x204>
 8009314:	ee19 3a90 	vmov	r3, s19
 8009318:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800931c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009320:	4656      	mov	r6, sl
 8009322:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009326:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800932a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800932e:	4b74      	ldr	r3, [pc, #464]	; (8009500 <_dtoa_r+0x2e8>)
 8009330:	2200      	movs	r2, #0
 8009332:	4630      	mov	r0, r6
 8009334:	4639      	mov	r1, r7
 8009336:	f7f6 ffaf 	bl	8000298 <__aeabi_dsub>
 800933a:	a365      	add	r3, pc, #404	; (adr r3, 80094d0 <_dtoa_r+0x2b8>)
 800933c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009340:	f7f7 f962 	bl	8000608 <__aeabi_dmul>
 8009344:	a364      	add	r3, pc, #400	; (adr r3, 80094d8 <_dtoa_r+0x2c0>)
 8009346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800934a:	f7f6 ffa7 	bl	800029c <__adddf3>
 800934e:	4606      	mov	r6, r0
 8009350:	4628      	mov	r0, r5
 8009352:	460f      	mov	r7, r1
 8009354:	f7f7 f8ee 	bl	8000534 <__aeabi_i2d>
 8009358:	a361      	add	r3, pc, #388	; (adr r3, 80094e0 <_dtoa_r+0x2c8>)
 800935a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800935e:	f7f7 f953 	bl	8000608 <__aeabi_dmul>
 8009362:	4602      	mov	r2, r0
 8009364:	460b      	mov	r3, r1
 8009366:	4630      	mov	r0, r6
 8009368:	4639      	mov	r1, r7
 800936a:	f7f6 ff97 	bl	800029c <__adddf3>
 800936e:	4606      	mov	r6, r0
 8009370:	460f      	mov	r7, r1
 8009372:	f7f7 fbf9 	bl	8000b68 <__aeabi_d2iz>
 8009376:	2200      	movs	r2, #0
 8009378:	9000      	str	r0, [sp, #0]
 800937a:	2300      	movs	r3, #0
 800937c:	4630      	mov	r0, r6
 800937e:	4639      	mov	r1, r7
 8009380:	f7f7 fbb4 	bl	8000aec <__aeabi_dcmplt>
 8009384:	b150      	cbz	r0, 800939c <_dtoa_r+0x184>
 8009386:	9800      	ldr	r0, [sp, #0]
 8009388:	f7f7 f8d4 	bl	8000534 <__aeabi_i2d>
 800938c:	4632      	mov	r2, r6
 800938e:	463b      	mov	r3, r7
 8009390:	f7f7 fba2 	bl	8000ad8 <__aeabi_dcmpeq>
 8009394:	b910      	cbnz	r0, 800939c <_dtoa_r+0x184>
 8009396:	9b00      	ldr	r3, [sp, #0]
 8009398:	3b01      	subs	r3, #1
 800939a:	9300      	str	r3, [sp, #0]
 800939c:	9b00      	ldr	r3, [sp, #0]
 800939e:	2b16      	cmp	r3, #22
 80093a0:	d85a      	bhi.n	8009458 <_dtoa_r+0x240>
 80093a2:	9a00      	ldr	r2, [sp, #0]
 80093a4:	4b57      	ldr	r3, [pc, #348]	; (8009504 <_dtoa_r+0x2ec>)
 80093a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80093aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ae:	ec51 0b19 	vmov	r0, r1, d9
 80093b2:	f7f7 fb9b 	bl	8000aec <__aeabi_dcmplt>
 80093b6:	2800      	cmp	r0, #0
 80093b8:	d050      	beq.n	800945c <_dtoa_r+0x244>
 80093ba:	9b00      	ldr	r3, [sp, #0]
 80093bc:	3b01      	subs	r3, #1
 80093be:	9300      	str	r3, [sp, #0]
 80093c0:	2300      	movs	r3, #0
 80093c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80093c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80093c6:	1b5d      	subs	r5, r3, r5
 80093c8:	1e6b      	subs	r3, r5, #1
 80093ca:	9305      	str	r3, [sp, #20]
 80093cc:	bf45      	ittet	mi
 80093ce:	f1c5 0301 	rsbmi	r3, r5, #1
 80093d2:	9304      	strmi	r3, [sp, #16]
 80093d4:	2300      	movpl	r3, #0
 80093d6:	2300      	movmi	r3, #0
 80093d8:	bf4c      	ite	mi
 80093da:	9305      	strmi	r3, [sp, #20]
 80093dc:	9304      	strpl	r3, [sp, #16]
 80093de:	9b00      	ldr	r3, [sp, #0]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	db3d      	blt.n	8009460 <_dtoa_r+0x248>
 80093e4:	9b05      	ldr	r3, [sp, #20]
 80093e6:	9a00      	ldr	r2, [sp, #0]
 80093e8:	920a      	str	r2, [sp, #40]	; 0x28
 80093ea:	4413      	add	r3, r2
 80093ec:	9305      	str	r3, [sp, #20]
 80093ee:	2300      	movs	r3, #0
 80093f0:	9307      	str	r3, [sp, #28]
 80093f2:	9b06      	ldr	r3, [sp, #24]
 80093f4:	2b09      	cmp	r3, #9
 80093f6:	f200 8089 	bhi.w	800950c <_dtoa_r+0x2f4>
 80093fa:	2b05      	cmp	r3, #5
 80093fc:	bfc4      	itt	gt
 80093fe:	3b04      	subgt	r3, #4
 8009400:	9306      	strgt	r3, [sp, #24]
 8009402:	9b06      	ldr	r3, [sp, #24]
 8009404:	f1a3 0302 	sub.w	r3, r3, #2
 8009408:	bfcc      	ite	gt
 800940a:	2500      	movgt	r5, #0
 800940c:	2501      	movle	r5, #1
 800940e:	2b03      	cmp	r3, #3
 8009410:	f200 8087 	bhi.w	8009522 <_dtoa_r+0x30a>
 8009414:	e8df f003 	tbb	[pc, r3]
 8009418:	59383a2d 	.word	0x59383a2d
 800941c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009420:	441d      	add	r5, r3
 8009422:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009426:	2b20      	cmp	r3, #32
 8009428:	bfc1      	itttt	gt
 800942a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800942e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009432:	fa0b f303 	lslgt.w	r3, fp, r3
 8009436:	fa26 f000 	lsrgt.w	r0, r6, r0
 800943a:	bfda      	itte	le
 800943c:	f1c3 0320 	rsble	r3, r3, #32
 8009440:	fa06 f003 	lslle.w	r0, r6, r3
 8009444:	4318      	orrgt	r0, r3
 8009446:	f7f7 f865 	bl	8000514 <__aeabi_ui2d>
 800944a:	2301      	movs	r3, #1
 800944c:	4606      	mov	r6, r0
 800944e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009452:	3d01      	subs	r5, #1
 8009454:	930e      	str	r3, [sp, #56]	; 0x38
 8009456:	e76a      	b.n	800932e <_dtoa_r+0x116>
 8009458:	2301      	movs	r3, #1
 800945a:	e7b2      	b.n	80093c2 <_dtoa_r+0x1aa>
 800945c:	900b      	str	r0, [sp, #44]	; 0x2c
 800945e:	e7b1      	b.n	80093c4 <_dtoa_r+0x1ac>
 8009460:	9b04      	ldr	r3, [sp, #16]
 8009462:	9a00      	ldr	r2, [sp, #0]
 8009464:	1a9b      	subs	r3, r3, r2
 8009466:	9304      	str	r3, [sp, #16]
 8009468:	4253      	negs	r3, r2
 800946a:	9307      	str	r3, [sp, #28]
 800946c:	2300      	movs	r3, #0
 800946e:	930a      	str	r3, [sp, #40]	; 0x28
 8009470:	e7bf      	b.n	80093f2 <_dtoa_r+0x1da>
 8009472:	2300      	movs	r3, #0
 8009474:	9308      	str	r3, [sp, #32]
 8009476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009478:	2b00      	cmp	r3, #0
 800947a:	dc55      	bgt.n	8009528 <_dtoa_r+0x310>
 800947c:	2301      	movs	r3, #1
 800947e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009482:	461a      	mov	r2, r3
 8009484:	9209      	str	r2, [sp, #36]	; 0x24
 8009486:	e00c      	b.n	80094a2 <_dtoa_r+0x28a>
 8009488:	2301      	movs	r3, #1
 800948a:	e7f3      	b.n	8009474 <_dtoa_r+0x25c>
 800948c:	2300      	movs	r3, #0
 800948e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009490:	9308      	str	r3, [sp, #32]
 8009492:	9b00      	ldr	r3, [sp, #0]
 8009494:	4413      	add	r3, r2
 8009496:	9302      	str	r3, [sp, #8]
 8009498:	3301      	adds	r3, #1
 800949a:	2b01      	cmp	r3, #1
 800949c:	9303      	str	r3, [sp, #12]
 800949e:	bfb8      	it	lt
 80094a0:	2301      	movlt	r3, #1
 80094a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80094a4:	2200      	movs	r2, #0
 80094a6:	6042      	str	r2, [r0, #4]
 80094a8:	2204      	movs	r2, #4
 80094aa:	f102 0614 	add.w	r6, r2, #20
 80094ae:	429e      	cmp	r6, r3
 80094b0:	6841      	ldr	r1, [r0, #4]
 80094b2:	d93d      	bls.n	8009530 <_dtoa_r+0x318>
 80094b4:	4620      	mov	r0, r4
 80094b6:	f000 fcb7 	bl	8009e28 <_Balloc>
 80094ba:	9001      	str	r0, [sp, #4]
 80094bc:	2800      	cmp	r0, #0
 80094be:	d13b      	bne.n	8009538 <_dtoa_r+0x320>
 80094c0:	4b11      	ldr	r3, [pc, #68]	; (8009508 <_dtoa_r+0x2f0>)
 80094c2:	4602      	mov	r2, r0
 80094c4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80094c8:	e6c0      	b.n	800924c <_dtoa_r+0x34>
 80094ca:	2301      	movs	r3, #1
 80094cc:	e7df      	b.n	800948e <_dtoa_r+0x276>
 80094ce:	bf00      	nop
 80094d0:	636f4361 	.word	0x636f4361
 80094d4:	3fd287a7 	.word	0x3fd287a7
 80094d8:	8b60c8b3 	.word	0x8b60c8b3
 80094dc:	3fc68a28 	.word	0x3fc68a28
 80094e0:	509f79fb 	.word	0x509f79fb
 80094e4:	3fd34413 	.word	0x3fd34413
 80094e8:	0800c539 	.word	0x0800c539
 80094ec:	0800c550 	.word	0x0800c550
 80094f0:	7ff00000 	.word	0x7ff00000
 80094f4:	0800c535 	.word	0x0800c535
 80094f8:	0800c52c 	.word	0x0800c52c
 80094fc:	0800c509 	.word	0x0800c509
 8009500:	3ff80000 	.word	0x3ff80000
 8009504:	0800c640 	.word	0x0800c640
 8009508:	0800c5ab 	.word	0x0800c5ab
 800950c:	2501      	movs	r5, #1
 800950e:	2300      	movs	r3, #0
 8009510:	9306      	str	r3, [sp, #24]
 8009512:	9508      	str	r5, [sp, #32]
 8009514:	f04f 33ff 	mov.w	r3, #4294967295
 8009518:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800951c:	2200      	movs	r2, #0
 800951e:	2312      	movs	r3, #18
 8009520:	e7b0      	b.n	8009484 <_dtoa_r+0x26c>
 8009522:	2301      	movs	r3, #1
 8009524:	9308      	str	r3, [sp, #32]
 8009526:	e7f5      	b.n	8009514 <_dtoa_r+0x2fc>
 8009528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800952a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800952e:	e7b8      	b.n	80094a2 <_dtoa_r+0x28a>
 8009530:	3101      	adds	r1, #1
 8009532:	6041      	str	r1, [r0, #4]
 8009534:	0052      	lsls	r2, r2, #1
 8009536:	e7b8      	b.n	80094aa <_dtoa_r+0x292>
 8009538:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800953a:	9a01      	ldr	r2, [sp, #4]
 800953c:	601a      	str	r2, [r3, #0]
 800953e:	9b03      	ldr	r3, [sp, #12]
 8009540:	2b0e      	cmp	r3, #14
 8009542:	f200 809d 	bhi.w	8009680 <_dtoa_r+0x468>
 8009546:	2d00      	cmp	r5, #0
 8009548:	f000 809a 	beq.w	8009680 <_dtoa_r+0x468>
 800954c:	9b00      	ldr	r3, [sp, #0]
 800954e:	2b00      	cmp	r3, #0
 8009550:	dd32      	ble.n	80095b8 <_dtoa_r+0x3a0>
 8009552:	4ab7      	ldr	r2, [pc, #732]	; (8009830 <_dtoa_r+0x618>)
 8009554:	f003 030f 	and.w	r3, r3, #15
 8009558:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800955c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009560:	9b00      	ldr	r3, [sp, #0]
 8009562:	05d8      	lsls	r0, r3, #23
 8009564:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009568:	d516      	bpl.n	8009598 <_dtoa_r+0x380>
 800956a:	4bb2      	ldr	r3, [pc, #712]	; (8009834 <_dtoa_r+0x61c>)
 800956c:	ec51 0b19 	vmov	r0, r1, d9
 8009570:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009574:	f7f7 f972 	bl	800085c <__aeabi_ddiv>
 8009578:	f007 070f 	and.w	r7, r7, #15
 800957c:	4682      	mov	sl, r0
 800957e:	468b      	mov	fp, r1
 8009580:	2503      	movs	r5, #3
 8009582:	4eac      	ldr	r6, [pc, #688]	; (8009834 <_dtoa_r+0x61c>)
 8009584:	b957      	cbnz	r7, 800959c <_dtoa_r+0x384>
 8009586:	4642      	mov	r2, r8
 8009588:	464b      	mov	r3, r9
 800958a:	4650      	mov	r0, sl
 800958c:	4659      	mov	r1, fp
 800958e:	f7f7 f965 	bl	800085c <__aeabi_ddiv>
 8009592:	4682      	mov	sl, r0
 8009594:	468b      	mov	fp, r1
 8009596:	e028      	b.n	80095ea <_dtoa_r+0x3d2>
 8009598:	2502      	movs	r5, #2
 800959a:	e7f2      	b.n	8009582 <_dtoa_r+0x36a>
 800959c:	07f9      	lsls	r1, r7, #31
 800959e:	d508      	bpl.n	80095b2 <_dtoa_r+0x39a>
 80095a0:	4640      	mov	r0, r8
 80095a2:	4649      	mov	r1, r9
 80095a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80095a8:	f7f7 f82e 	bl	8000608 <__aeabi_dmul>
 80095ac:	3501      	adds	r5, #1
 80095ae:	4680      	mov	r8, r0
 80095b0:	4689      	mov	r9, r1
 80095b2:	107f      	asrs	r7, r7, #1
 80095b4:	3608      	adds	r6, #8
 80095b6:	e7e5      	b.n	8009584 <_dtoa_r+0x36c>
 80095b8:	f000 809b 	beq.w	80096f2 <_dtoa_r+0x4da>
 80095bc:	9b00      	ldr	r3, [sp, #0]
 80095be:	4f9d      	ldr	r7, [pc, #628]	; (8009834 <_dtoa_r+0x61c>)
 80095c0:	425e      	negs	r6, r3
 80095c2:	4b9b      	ldr	r3, [pc, #620]	; (8009830 <_dtoa_r+0x618>)
 80095c4:	f006 020f 	and.w	r2, r6, #15
 80095c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80095cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d0:	ec51 0b19 	vmov	r0, r1, d9
 80095d4:	f7f7 f818 	bl	8000608 <__aeabi_dmul>
 80095d8:	1136      	asrs	r6, r6, #4
 80095da:	4682      	mov	sl, r0
 80095dc:	468b      	mov	fp, r1
 80095de:	2300      	movs	r3, #0
 80095e0:	2502      	movs	r5, #2
 80095e2:	2e00      	cmp	r6, #0
 80095e4:	d17a      	bne.n	80096dc <_dtoa_r+0x4c4>
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d1d3      	bne.n	8009592 <_dtoa_r+0x37a>
 80095ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	f000 8082 	beq.w	80096f6 <_dtoa_r+0x4de>
 80095f2:	4b91      	ldr	r3, [pc, #580]	; (8009838 <_dtoa_r+0x620>)
 80095f4:	2200      	movs	r2, #0
 80095f6:	4650      	mov	r0, sl
 80095f8:	4659      	mov	r1, fp
 80095fa:	f7f7 fa77 	bl	8000aec <__aeabi_dcmplt>
 80095fe:	2800      	cmp	r0, #0
 8009600:	d079      	beq.n	80096f6 <_dtoa_r+0x4de>
 8009602:	9b03      	ldr	r3, [sp, #12]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d076      	beq.n	80096f6 <_dtoa_r+0x4de>
 8009608:	9b02      	ldr	r3, [sp, #8]
 800960a:	2b00      	cmp	r3, #0
 800960c:	dd36      	ble.n	800967c <_dtoa_r+0x464>
 800960e:	9b00      	ldr	r3, [sp, #0]
 8009610:	4650      	mov	r0, sl
 8009612:	4659      	mov	r1, fp
 8009614:	1e5f      	subs	r7, r3, #1
 8009616:	2200      	movs	r2, #0
 8009618:	4b88      	ldr	r3, [pc, #544]	; (800983c <_dtoa_r+0x624>)
 800961a:	f7f6 fff5 	bl	8000608 <__aeabi_dmul>
 800961e:	9e02      	ldr	r6, [sp, #8]
 8009620:	4682      	mov	sl, r0
 8009622:	468b      	mov	fp, r1
 8009624:	3501      	adds	r5, #1
 8009626:	4628      	mov	r0, r5
 8009628:	f7f6 ff84 	bl	8000534 <__aeabi_i2d>
 800962c:	4652      	mov	r2, sl
 800962e:	465b      	mov	r3, fp
 8009630:	f7f6 ffea 	bl	8000608 <__aeabi_dmul>
 8009634:	4b82      	ldr	r3, [pc, #520]	; (8009840 <_dtoa_r+0x628>)
 8009636:	2200      	movs	r2, #0
 8009638:	f7f6 fe30 	bl	800029c <__adddf3>
 800963c:	46d0      	mov	r8, sl
 800963e:	46d9      	mov	r9, fp
 8009640:	4682      	mov	sl, r0
 8009642:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009646:	2e00      	cmp	r6, #0
 8009648:	d158      	bne.n	80096fc <_dtoa_r+0x4e4>
 800964a:	4b7e      	ldr	r3, [pc, #504]	; (8009844 <_dtoa_r+0x62c>)
 800964c:	2200      	movs	r2, #0
 800964e:	4640      	mov	r0, r8
 8009650:	4649      	mov	r1, r9
 8009652:	f7f6 fe21 	bl	8000298 <__aeabi_dsub>
 8009656:	4652      	mov	r2, sl
 8009658:	465b      	mov	r3, fp
 800965a:	4680      	mov	r8, r0
 800965c:	4689      	mov	r9, r1
 800965e:	f7f7 fa63 	bl	8000b28 <__aeabi_dcmpgt>
 8009662:	2800      	cmp	r0, #0
 8009664:	f040 8295 	bne.w	8009b92 <_dtoa_r+0x97a>
 8009668:	4652      	mov	r2, sl
 800966a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800966e:	4640      	mov	r0, r8
 8009670:	4649      	mov	r1, r9
 8009672:	f7f7 fa3b 	bl	8000aec <__aeabi_dcmplt>
 8009676:	2800      	cmp	r0, #0
 8009678:	f040 8289 	bne.w	8009b8e <_dtoa_r+0x976>
 800967c:	ec5b ab19 	vmov	sl, fp, d9
 8009680:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009682:	2b00      	cmp	r3, #0
 8009684:	f2c0 8148 	blt.w	8009918 <_dtoa_r+0x700>
 8009688:	9a00      	ldr	r2, [sp, #0]
 800968a:	2a0e      	cmp	r2, #14
 800968c:	f300 8144 	bgt.w	8009918 <_dtoa_r+0x700>
 8009690:	4b67      	ldr	r3, [pc, #412]	; (8009830 <_dtoa_r+0x618>)
 8009692:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009696:	e9d3 8900 	ldrd	r8, r9, [r3]
 800969a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800969c:	2b00      	cmp	r3, #0
 800969e:	f280 80d5 	bge.w	800984c <_dtoa_r+0x634>
 80096a2:	9b03      	ldr	r3, [sp, #12]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	f300 80d1 	bgt.w	800984c <_dtoa_r+0x634>
 80096aa:	f040 826f 	bne.w	8009b8c <_dtoa_r+0x974>
 80096ae:	4b65      	ldr	r3, [pc, #404]	; (8009844 <_dtoa_r+0x62c>)
 80096b0:	2200      	movs	r2, #0
 80096b2:	4640      	mov	r0, r8
 80096b4:	4649      	mov	r1, r9
 80096b6:	f7f6 ffa7 	bl	8000608 <__aeabi_dmul>
 80096ba:	4652      	mov	r2, sl
 80096bc:	465b      	mov	r3, fp
 80096be:	f7f7 fa29 	bl	8000b14 <__aeabi_dcmpge>
 80096c2:	9e03      	ldr	r6, [sp, #12]
 80096c4:	4637      	mov	r7, r6
 80096c6:	2800      	cmp	r0, #0
 80096c8:	f040 8245 	bne.w	8009b56 <_dtoa_r+0x93e>
 80096cc:	9d01      	ldr	r5, [sp, #4]
 80096ce:	2331      	movs	r3, #49	; 0x31
 80096d0:	f805 3b01 	strb.w	r3, [r5], #1
 80096d4:	9b00      	ldr	r3, [sp, #0]
 80096d6:	3301      	adds	r3, #1
 80096d8:	9300      	str	r3, [sp, #0]
 80096da:	e240      	b.n	8009b5e <_dtoa_r+0x946>
 80096dc:	07f2      	lsls	r2, r6, #31
 80096de:	d505      	bpl.n	80096ec <_dtoa_r+0x4d4>
 80096e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096e4:	f7f6 ff90 	bl	8000608 <__aeabi_dmul>
 80096e8:	3501      	adds	r5, #1
 80096ea:	2301      	movs	r3, #1
 80096ec:	1076      	asrs	r6, r6, #1
 80096ee:	3708      	adds	r7, #8
 80096f0:	e777      	b.n	80095e2 <_dtoa_r+0x3ca>
 80096f2:	2502      	movs	r5, #2
 80096f4:	e779      	b.n	80095ea <_dtoa_r+0x3d2>
 80096f6:	9f00      	ldr	r7, [sp, #0]
 80096f8:	9e03      	ldr	r6, [sp, #12]
 80096fa:	e794      	b.n	8009626 <_dtoa_r+0x40e>
 80096fc:	9901      	ldr	r1, [sp, #4]
 80096fe:	4b4c      	ldr	r3, [pc, #304]	; (8009830 <_dtoa_r+0x618>)
 8009700:	4431      	add	r1, r6
 8009702:	910d      	str	r1, [sp, #52]	; 0x34
 8009704:	9908      	ldr	r1, [sp, #32]
 8009706:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800970a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800970e:	2900      	cmp	r1, #0
 8009710:	d043      	beq.n	800979a <_dtoa_r+0x582>
 8009712:	494d      	ldr	r1, [pc, #308]	; (8009848 <_dtoa_r+0x630>)
 8009714:	2000      	movs	r0, #0
 8009716:	f7f7 f8a1 	bl	800085c <__aeabi_ddiv>
 800971a:	4652      	mov	r2, sl
 800971c:	465b      	mov	r3, fp
 800971e:	f7f6 fdbb 	bl	8000298 <__aeabi_dsub>
 8009722:	9d01      	ldr	r5, [sp, #4]
 8009724:	4682      	mov	sl, r0
 8009726:	468b      	mov	fp, r1
 8009728:	4649      	mov	r1, r9
 800972a:	4640      	mov	r0, r8
 800972c:	f7f7 fa1c 	bl	8000b68 <__aeabi_d2iz>
 8009730:	4606      	mov	r6, r0
 8009732:	f7f6 feff 	bl	8000534 <__aeabi_i2d>
 8009736:	4602      	mov	r2, r0
 8009738:	460b      	mov	r3, r1
 800973a:	4640      	mov	r0, r8
 800973c:	4649      	mov	r1, r9
 800973e:	f7f6 fdab 	bl	8000298 <__aeabi_dsub>
 8009742:	3630      	adds	r6, #48	; 0x30
 8009744:	f805 6b01 	strb.w	r6, [r5], #1
 8009748:	4652      	mov	r2, sl
 800974a:	465b      	mov	r3, fp
 800974c:	4680      	mov	r8, r0
 800974e:	4689      	mov	r9, r1
 8009750:	f7f7 f9cc 	bl	8000aec <__aeabi_dcmplt>
 8009754:	2800      	cmp	r0, #0
 8009756:	d163      	bne.n	8009820 <_dtoa_r+0x608>
 8009758:	4642      	mov	r2, r8
 800975a:	464b      	mov	r3, r9
 800975c:	4936      	ldr	r1, [pc, #216]	; (8009838 <_dtoa_r+0x620>)
 800975e:	2000      	movs	r0, #0
 8009760:	f7f6 fd9a 	bl	8000298 <__aeabi_dsub>
 8009764:	4652      	mov	r2, sl
 8009766:	465b      	mov	r3, fp
 8009768:	f7f7 f9c0 	bl	8000aec <__aeabi_dcmplt>
 800976c:	2800      	cmp	r0, #0
 800976e:	f040 80b5 	bne.w	80098dc <_dtoa_r+0x6c4>
 8009772:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009774:	429d      	cmp	r5, r3
 8009776:	d081      	beq.n	800967c <_dtoa_r+0x464>
 8009778:	4b30      	ldr	r3, [pc, #192]	; (800983c <_dtoa_r+0x624>)
 800977a:	2200      	movs	r2, #0
 800977c:	4650      	mov	r0, sl
 800977e:	4659      	mov	r1, fp
 8009780:	f7f6 ff42 	bl	8000608 <__aeabi_dmul>
 8009784:	4b2d      	ldr	r3, [pc, #180]	; (800983c <_dtoa_r+0x624>)
 8009786:	4682      	mov	sl, r0
 8009788:	468b      	mov	fp, r1
 800978a:	4640      	mov	r0, r8
 800978c:	4649      	mov	r1, r9
 800978e:	2200      	movs	r2, #0
 8009790:	f7f6 ff3a 	bl	8000608 <__aeabi_dmul>
 8009794:	4680      	mov	r8, r0
 8009796:	4689      	mov	r9, r1
 8009798:	e7c6      	b.n	8009728 <_dtoa_r+0x510>
 800979a:	4650      	mov	r0, sl
 800979c:	4659      	mov	r1, fp
 800979e:	f7f6 ff33 	bl	8000608 <__aeabi_dmul>
 80097a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097a4:	9d01      	ldr	r5, [sp, #4]
 80097a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80097a8:	4682      	mov	sl, r0
 80097aa:	468b      	mov	fp, r1
 80097ac:	4649      	mov	r1, r9
 80097ae:	4640      	mov	r0, r8
 80097b0:	f7f7 f9da 	bl	8000b68 <__aeabi_d2iz>
 80097b4:	4606      	mov	r6, r0
 80097b6:	f7f6 febd 	bl	8000534 <__aeabi_i2d>
 80097ba:	3630      	adds	r6, #48	; 0x30
 80097bc:	4602      	mov	r2, r0
 80097be:	460b      	mov	r3, r1
 80097c0:	4640      	mov	r0, r8
 80097c2:	4649      	mov	r1, r9
 80097c4:	f7f6 fd68 	bl	8000298 <__aeabi_dsub>
 80097c8:	f805 6b01 	strb.w	r6, [r5], #1
 80097cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097ce:	429d      	cmp	r5, r3
 80097d0:	4680      	mov	r8, r0
 80097d2:	4689      	mov	r9, r1
 80097d4:	f04f 0200 	mov.w	r2, #0
 80097d8:	d124      	bne.n	8009824 <_dtoa_r+0x60c>
 80097da:	4b1b      	ldr	r3, [pc, #108]	; (8009848 <_dtoa_r+0x630>)
 80097dc:	4650      	mov	r0, sl
 80097de:	4659      	mov	r1, fp
 80097e0:	f7f6 fd5c 	bl	800029c <__adddf3>
 80097e4:	4602      	mov	r2, r0
 80097e6:	460b      	mov	r3, r1
 80097e8:	4640      	mov	r0, r8
 80097ea:	4649      	mov	r1, r9
 80097ec:	f7f7 f99c 	bl	8000b28 <__aeabi_dcmpgt>
 80097f0:	2800      	cmp	r0, #0
 80097f2:	d173      	bne.n	80098dc <_dtoa_r+0x6c4>
 80097f4:	4652      	mov	r2, sl
 80097f6:	465b      	mov	r3, fp
 80097f8:	4913      	ldr	r1, [pc, #76]	; (8009848 <_dtoa_r+0x630>)
 80097fa:	2000      	movs	r0, #0
 80097fc:	f7f6 fd4c 	bl	8000298 <__aeabi_dsub>
 8009800:	4602      	mov	r2, r0
 8009802:	460b      	mov	r3, r1
 8009804:	4640      	mov	r0, r8
 8009806:	4649      	mov	r1, r9
 8009808:	f7f7 f970 	bl	8000aec <__aeabi_dcmplt>
 800980c:	2800      	cmp	r0, #0
 800980e:	f43f af35 	beq.w	800967c <_dtoa_r+0x464>
 8009812:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009814:	1e6b      	subs	r3, r5, #1
 8009816:	930f      	str	r3, [sp, #60]	; 0x3c
 8009818:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800981c:	2b30      	cmp	r3, #48	; 0x30
 800981e:	d0f8      	beq.n	8009812 <_dtoa_r+0x5fa>
 8009820:	9700      	str	r7, [sp, #0]
 8009822:	e049      	b.n	80098b8 <_dtoa_r+0x6a0>
 8009824:	4b05      	ldr	r3, [pc, #20]	; (800983c <_dtoa_r+0x624>)
 8009826:	f7f6 feef 	bl	8000608 <__aeabi_dmul>
 800982a:	4680      	mov	r8, r0
 800982c:	4689      	mov	r9, r1
 800982e:	e7bd      	b.n	80097ac <_dtoa_r+0x594>
 8009830:	0800c640 	.word	0x0800c640
 8009834:	0800c618 	.word	0x0800c618
 8009838:	3ff00000 	.word	0x3ff00000
 800983c:	40240000 	.word	0x40240000
 8009840:	401c0000 	.word	0x401c0000
 8009844:	40140000 	.word	0x40140000
 8009848:	3fe00000 	.word	0x3fe00000
 800984c:	9d01      	ldr	r5, [sp, #4]
 800984e:	4656      	mov	r6, sl
 8009850:	465f      	mov	r7, fp
 8009852:	4642      	mov	r2, r8
 8009854:	464b      	mov	r3, r9
 8009856:	4630      	mov	r0, r6
 8009858:	4639      	mov	r1, r7
 800985a:	f7f6 ffff 	bl	800085c <__aeabi_ddiv>
 800985e:	f7f7 f983 	bl	8000b68 <__aeabi_d2iz>
 8009862:	4682      	mov	sl, r0
 8009864:	f7f6 fe66 	bl	8000534 <__aeabi_i2d>
 8009868:	4642      	mov	r2, r8
 800986a:	464b      	mov	r3, r9
 800986c:	f7f6 fecc 	bl	8000608 <__aeabi_dmul>
 8009870:	4602      	mov	r2, r0
 8009872:	460b      	mov	r3, r1
 8009874:	4630      	mov	r0, r6
 8009876:	4639      	mov	r1, r7
 8009878:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800987c:	f7f6 fd0c 	bl	8000298 <__aeabi_dsub>
 8009880:	f805 6b01 	strb.w	r6, [r5], #1
 8009884:	9e01      	ldr	r6, [sp, #4]
 8009886:	9f03      	ldr	r7, [sp, #12]
 8009888:	1bae      	subs	r6, r5, r6
 800988a:	42b7      	cmp	r7, r6
 800988c:	4602      	mov	r2, r0
 800988e:	460b      	mov	r3, r1
 8009890:	d135      	bne.n	80098fe <_dtoa_r+0x6e6>
 8009892:	f7f6 fd03 	bl	800029c <__adddf3>
 8009896:	4642      	mov	r2, r8
 8009898:	464b      	mov	r3, r9
 800989a:	4606      	mov	r6, r0
 800989c:	460f      	mov	r7, r1
 800989e:	f7f7 f943 	bl	8000b28 <__aeabi_dcmpgt>
 80098a2:	b9d0      	cbnz	r0, 80098da <_dtoa_r+0x6c2>
 80098a4:	4642      	mov	r2, r8
 80098a6:	464b      	mov	r3, r9
 80098a8:	4630      	mov	r0, r6
 80098aa:	4639      	mov	r1, r7
 80098ac:	f7f7 f914 	bl	8000ad8 <__aeabi_dcmpeq>
 80098b0:	b110      	cbz	r0, 80098b8 <_dtoa_r+0x6a0>
 80098b2:	f01a 0f01 	tst.w	sl, #1
 80098b6:	d110      	bne.n	80098da <_dtoa_r+0x6c2>
 80098b8:	4620      	mov	r0, r4
 80098ba:	ee18 1a10 	vmov	r1, s16
 80098be:	f000 faf3 	bl	8009ea8 <_Bfree>
 80098c2:	2300      	movs	r3, #0
 80098c4:	9800      	ldr	r0, [sp, #0]
 80098c6:	702b      	strb	r3, [r5, #0]
 80098c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098ca:	3001      	adds	r0, #1
 80098cc:	6018      	str	r0, [r3, #0]
 80098ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	f43f acf1 	beq.w	80092b8 <_dtoa_r+0xa0>
 80098d6:	601d      	str	r5, [r3, #0]
 80098d8:	e4ee      	b.n	80092b8 <_dtoa_r+0xa0>
 80098da:	9f00      	ldr	r7, [sp, #0]
 80098dc:	462b      	mov	r3, r5
 80098de:	461d      	mov	r5, r3
 80098e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80098e4:	2a39      	cmp	r2, #57	; 0x39
 80098e6:	d106      	bne.n	80098f6 <_dtoa_r+0x6de>
 80098e8:	9a01      	ldr	r2, [sp, #4]
 80098ea:	429a      	cmp	r2, r3
 80098ec:	d1f7      	bne.n	80098de <_dtoa_r+0x6c6>
 80098ee:	9901      	ldr	r1, [sp, #4]
 80098f0:	2230      	movs	r2, #48	; 0x30
 80098f2:	3701      	adds	r7, #1
 80098f4:	700a      	strb	r2, [r1, #0]
 80098f6:	781a      	ldrb	r2, [r3, #0]
 80098f8:	3201      	adds	r2, #1
 80098fa:	701a      	strb	r2, [r3, #0]
 80098fc:	e790      	b.n	8009820 <_dtoa_r+0x608>
 80098fe:	4ba6      	ldr	r3, [pc, #664]	; (8009b98 <_dtoa_r+0x980>)
 8009900:	2200      	movs	r2, #0
 8009902:	f7f6 fe81 	bl	8000608 <__aeabi_dmul>
 8009906:	2200      	movs	r2, #0
 8009908:	2300      	movs	r3, #0
 800990a:	4606      	mov	r6, r0
 800990c:	460f      	mov	r7, r1
 800990e:	f7f7 f8e3 	bl	8000ad8 <__aeabi_dcmpeq>
 8009912:	2800      	cmp	r0, #0
 8009914:	d09d      	beq.n	8009852 <_dtoa_r+0x63a>
 8009916:	e7cf      	b.n	80098b8 <_dtoa_r+0x6a0>
 8009918:	9a08      	ldr	r2, [sp, #32]
 800991a:	2a00      	cmp	r2, #0
 800991c:	f000 80d7 	beq.w	8009ace <_dtoa_r+0x8b6>
 8009920:	9a06      	ldr	r2, [sp, #24]
 8009922:	2a01      	cmp	r2, #1
 8009924:	f300 80ba 	bgt.w	8009a9c <_dtoa_r+0x884>
 8009928:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800992a:	2a00      	cmp	r2, #0
 800992c:	f000 80b2 	beq.w	8009a94 <_dtoa_r+0x87c>
 8009930:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009934:	9e07      	ldr	r6, [sp, #28]
 8009936:	9d04      	ldr	r5, [sp, #16]
 8009938:	9a04      	ldr	r2, [sp, #16]
 800993a:	441a      	add	r2, r3
 800993c:	9204      	str	r2, [sp, #16]
 800993e:	9a05      	ldr	r2, [sp, #20]
 8009940:	2101      	movs	r1, #1
 8009942:	441a      	add	r2, r3
 8009944:	4620      	mov	r0, r4
 8009946:	9205      	str	r2, [sp, #20]
 8009948:	f000 fb66 	bl	800a018 <__i2b>
 800994c:	4607      	mov	r7, r0
 800994e:	2d00      	cmp	r5, #0
 8009950:	dd0c      	ble.n	800996c <_dtoa_r+0x754>
 8009952:	9b05      	ldr	r3, [sp, #20]
 8009954:	2b00      	cmp	r3, #0
 8009956:	dd09      	ble.n	800996c <_dtoa_r+0x754>
 8009958:	42ab      	cmp	r3, r5
 800995a:	9a04      	ldr	r2, [sp, #16]
 800995c:	bfa8      	it	ge
 800995e:	462b      	movge	r3, r5
 8009960:	1ad2      	subs	r2, r2, r3
 8009962:	9204      	str	r2, [sp, #16]
 8009964:	9a05      	ldr	r2, [sp, #20]
 8009966:	1aed      	subs	r5, r5, r3
 8009968:	1ad3      	subs	r3, r2, r3
 800996a:	9305      	str	r3, [sp, #20]
 800996c:	9b07      	ldr	r3, [sp, #28]
 800996e:	b31b      	cbz	r3, 80099b8 <_dtoa_r+0x7a0>
 8009970:	9b08      	ldr	r3, [sp, #32]
 8009972:	2b00      	cmp	r3, #0
 8009974:	f000 80af 	beq.w	8009ad6 <_dtoa_r+0x8be>
 8009978:	2e00      	cmp	r6, #0
 800997a:	dd13      	ble.n	80099a4 <_dtoa_r+0x78c>
 800997c:	4639      	mov	r1, r7
 800997e:	4632      	mov	r2, r6
 8009980:	4620      	mov	r0, r4
 8009982:	f000 fc09 	bl	800a198 <__pow5mult>
 8009986:	ee18 2a10 	vmov	r2, s16
 800998a:	4601      	mov	r1, r0
 800998c:	4607      	mov	r7, r0
 800998e:	4620      	mov	r0, r4
 8009990:	f000 fb58 	bl	800a044 <__multiply>
 8009994:	ee18 1a10 	vmov	r1, s16
 8009998:	4680      	mov	r8, r0
 800999a:	4620      	mov	r0, r4
 800999c:	f000 fa84 	bl	8009ea8 <_Bfree>
 80099a0:	ee08 8a10 	vmov	s16, r8
 80099a4:	9b07      	ldr	r3, [sp, #28]
 80099a6:	1b9a      	subs	r2, r3, r6
 80099a8:	d006      	beq.n	80099b8 <_dtoa_r+0x7a0>
 80099aa:	ee18 1a10 	vmov	r1, s16
 80099ae:	4620      	mov	r0, r4
 80099b0:	f000 fbf2 	bl	800a198 <__pow5mult>
 80099b4:	ee08 0a10 	vmov	s16, r0
 80099b8:	2101      	movs	r1, #1
 80099ba:	4620      	mov	r0, r4
 80099bc:	f000 fb2c 	bl	800a018 <__i2b>
 80099c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	4606      	mov	r6, r0
 80099c6:	f340 8088 	ble.w	8009ada <_dtoa_r+0x8c2>
 80099ca:	461a      	mov	r2, r3
 80099cc:	4601      	mov	r1, r0
 80099ce:	4620      	mov	r0, r4
 80099d0:	f000 fbe2 	bl	800a198 <__pow5mult>
 80099d4:	9b06      	ldr	r3, [sp, #24]
 80099d6:	2b01      	cmp	r3, #1
 80099d8:	4606      	mov	r6, r0
 80099da:	f340 8081 	ble.w	8009ae0 <_dtoa_r+0x8c8>
 80099de:	f04f 0800 	mov.w	r8, #0
 80099e2:	6933      	ldr	r3, [r6, #16]
 80099e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80099e8:	6918      	ldr	r0, [r3, #16]
 80099ea:	f000 fac5 	bl	8009f78 <__hi0bits>
 80099ee:	f1c0 0020 	rsb	r0, r0, #32
 80099f2:	9b05      	ldr	r3, [sp, #20]
 80099f4:	4418      	add	r0, r3
 80099f6:	f010 001f 	ands.w	r0, r0, #31
 80099fa:	f000 8092 	beq.w	8009b22 <_dtoa_r+0x90a>
 80099fe:	f1c0 0320 	rsb	r3, r0, #32
 8009a02:	2b04      	cmp	r3, #4
 8009a04:	f340 808a 	ble.w	8009b1c <_dtoa_r+0x904>
 8009a08:	f1c0 001c 	rsb	r0, r0, #28
 8009a0c:	9b04      	ldr	r3, [sp, #16]
 8009a0e:	4403      	add	r3, r0
 8009a10:	9304      	str	r3, [sp, #16]
 8009a12:	9b05      	ldr	r3, [sp, #20]
 8009a14:	4403      	add	r3, r0
 8009a16:	4405      	add	r5, r0
 8009a18:	9305      	str	r3, [sp, #20]
 8009a1a:	9b04      	ldr	r3, [sp, #16]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	dd07      	ble.n	8009a30 <_dtoa_r+0x818>
 8009a20:	ee18 1a10 	vmov	r1, s16
 8009a24:	461a      	mov	r2, r3
 8009a26:	4620      	mov	r0, r4
 8009a28:	f000 fc10 	bl	800a24c <__lshift>
 8009a2c:	ee08 0a10 	vmov	s16, r0
 8009a30:	9b05      	ldr	r3, [sp, #20]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	dd05      	ble.n	8009a42 <_dtoa_r+0x82a>
 8009a36:	4631      	mov	r1, r6
 8009a38:	461a      	mov	r2, r3
 8009a3a:	4620      	mov	r0, r4
 8009a3c:	f000 fc06 	bl	800a24c <__lshift>
 8009a40:	4606      	mov	r6, r0
 8009a42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d06e      	beq.n	8009b26 <_dtoa_r+0x90e>
 8009a48:	ee18 0a10 	vmov	r0, s16
 8009a4c:	4631      	mov	r1, r6
 8009a4e:	f000 fc6d 	bl	800a32c <__mcmp>
 8009a52:	2800      	cmp	r0, #0
 8009a54:	da67      	bge.n	8009b26 <_dtoa_r+0x90e>
 8009a56:	9b00      	ldr	r3, [sp, #0]
 8009a58:	3b01      	subs	r3, #1
 8009a5a:	ee18 1a10 	vmov	r1, s16
 8009a5e:	9300      	str	r3, [sp, #0]
 8009a60:	220a      	movs	r2, #10
 8009a62:	2300      	movs	r3, #0
 8009a64:	4620      	mov	r0, r4
 8009a66:	f000 fa41 	bl	8009eec <__multadd>
 8009a6a:	9b08      	ldr	r3, [sp, #32]
 8009a6c:	ee08 0a10 	vmov	s16, r0
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	f000 81b1 	beq.w	8009dd8 <_dtoa_r+0xbc0>
 8009a76:	2300      	movs	r3, #0
 8009a78:	4639      	mov	r1, r7
 8009a7a:	220a      	movs	r2, #10
 8009a7c:	4620      	mov	r0, r4
 8009a7e:	f000 fa35 	bl	8009eec <__multadd>
 8009a82:	9b02      	ldr	r3, [sp, #8]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	4607      	mov	r7, r0
 8009a88:	f300 808e 	bgt.w	8009ba8 <_dtoa_r+0x990>
 8009a8c:	9b06      	ldr	r3, [sp, #24]
 8009a8e:	2b02      	cmp	r3, #2
 8009a90:	dc51      	bgt.n	8009b36 <_dtoa_r+0x91e>
 8009a92:	e089      	b.n	8009ba8 <_dtoa_r+0x990>
 8009a94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009a96:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009a9a:	e74b      	b.n	8009934 <_dtoa_r+0x71c>
 8009a9c:	9b03      	ldr	r3, [sp, #12]
 8009a9e:	1e5e      	subs	r6, r3, #1
 8009aa0:	9b07      	ldr	r3, [sp, #28]
 8009aa2:	42b3      	cmp	r3, r6
 8009aa4:	bfbf      	itttt	lt
 8009aa6:	9b07      	ldrlt	r3, [sp, #28]
 8009aa8:	9607      	strlt	r6, [sp, #28]
 8009aaa:	1af2      	sublt	r2, r6, r3
 8009aac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009aae:	bfb6      	itet	lt
 8009ab0:	189b      	addlt	r3, r3, r2
 8009ab2:	1b9e      	subge	r6, r3, r6
 8009ab4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009ab6:	9b03      	ldr	r3, [sp, #12]
 8009ab8:	bfb8      	it	lt
 8009aba:	2600      	movlt	r6, #0
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	bfb7      	itett	lt
 8009ac0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009ac4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009ac8:	1a9d      	sublt	r5, r3, r2
 8009aca:	2300      	movlt	r3, #0
 8009acc:	e734      	b.n	8009938 <_dtoa_r+0x720>
 8009ace:	9e07      	ldr	r6, [sp, #28]
 8009ad0:	9d04      	ldr	r5, [sp, #16]
 8009ad2:	9f08      	ldr	r7, [sp, #32]
 8009ad4:	e73b      	b.n	800994e <_dtoa_r+0x736>
 8009ad6:	9a07      	ldr	r2, [sp, #28]
 8009ad8:	e767      	b.n	80099aa <_dtoa_r+0x792>
 8009ada:	9b06      	ldr	r3, [sp, #24]
 8009adc:	2b01      	cmp	r3, #1
 8009ade:	dc18      	bgt.n	8009b12 <_dtoa_r+0x8fa>
 8009ae0:	f1ba 0f00 	cmp.w	sl, #0
 8009ae4:	d115      	bne.n	8009b12 <_dtoa_r+0x8fa>
 8009ae6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009aea:	b993      	cbnz	r3, 8009b12 <_dtoa_r+0x8fa>
 8009aec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009af0:	0d1b      	lsrs	r3, r3, #20
 8009af2:	051b      	lsls	r3, r3, #20
 8009af4:	b183      	cbz	r3, 8009b18 <_dtoa_r+0x900>
 8009af6:	9b04      	ldr	r3, [sp, #16]
 8009af8:	3301      	adds	r3, #1
 8009afa:	9304      	str	r3, [sp, #16]
 8009afc:	9b05      	ldr	r3, [sp, #20]
 8009afe:	3301      	adds	r3, #1
 8009b00:	9305      	str	r3, [sp, #20]
 8009b02:	f04f 0801 	mov.w	r8, #1
 8009b06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	f47f af6a 	bne.w	80099e2 <_dtoa_r+0x7ca>
 8009b0e:	2001      	movs	r0, #1
 8009b10:	e76f      	b.n	80099f2 <_dtoa_r+0x7da>
 8009b12:	f04f 0800 	mov.w	r8, #0
 8009b16:	e7f6      	b.n	8009b06 <_dtoa_r+0x8ee>
 8009b18:	4698      	mov	r8, r3
 8009b1a:	e7f4      	b.n	8009b06 <_dtoa_r+0x8ee>
 8009b1c:	f43f af7d 	beq.w	8009a1a <_dtoa_r+0x802>
 8009b20:	4618      	mov	r0, r3
 8009b22:	301c      	adds	r0, #28
 8009b24:	e772      	b.n	8009a0c <_dtoa_r+0x7f4>
 8009b26:	9b03      	ldr	r3, [sp, #12]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	dc37      	bgt.n	8009b9c <_dtoa_r+0x984>
 8009b2c:	9b06      	ldr	r3, [sp, #24]
 8009b2e:	2b02      	cmp	r3, #2
 8009b30:	dd34      	ble.n	8009b9c <_dtoa_r+0x984>
 8009b32:	9b03      	ldr	r3, [sp, #12]
 8009b34:	9302      	str	r3, [sp, #8]
 8009b36:	9b02      	ldr	r3, [sp, #8]
 8009b38:	b96b      	cbnz	r3, 8009b56 <_dtoa_r+0x93e>
 8009b3a:	4631      	mov	r1, r6
 8009b3c:	2205      	movs	r2, #5
 8009b3e:	4620      	mov	r0, r4
 8009b40:	f000 f9d4 	bl	8009eec <__multadd>
 8009b44:	4601      	mov	r1, r0
 8009b46:	4606      	mov	r6, r0
 8009b48:	ee18 0a10 	vmov	r0, s16
 8009b4c:	f000 fbee 	bl	800a32c <__mcmp>
 8009b50:	2800      	cmp	r0, #0
 8009b52:	f73f adbb 	bgt.w	80096cc <_dtoa_r+0x4b4>
 8009b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b58:	9d01      	ldr	r5, [sp, #4]
 8009b5a:	43db      	mvns	r3, r3
 8009b5c:	9300      	str	r3, [sp, #0]
 8009b5e:	f04f 0800 	mov.w	r8, #0
 8009b62:	4631      	mov	r1, r6
 8009b64:	4620      	mov	r0, r4
 8009b66:	f000 f99f 	bl	8009ea8 <_Bfree>
 8009b6a:	2f00      	cmp	r7, #0
 8009b6c:	f43f aea4 	beq.w	80098b8 <_dtoa_r+0x6a0>
 8009b70:	f1b8 0f00 	cmp.w	r8, #0
 8009b74:	d005      	beq.n	8009b82 <_dtoa_r+0x96a>
 8009b76:	45b8      	cmp	r8, r7
 8009b78:	d003      	beq.n	8009b82 <_dtoa_r+0x96a>
 8009b7a:	4641      	mov	r1, r8
 8009b7c:	4620      	mov	r0, r4
 8009b7e:	f000 f993 	bl	8009ea8 <_Bfree>
 8009b82:	4639      	mov	r1, r7
 8009b84:	4620      	mov	r0, r4
 8009b86:	f000 f98f 	bl	8009ea8 <_Bfree>
 8009b8a:	e695      	b.n	80098b8 <_dtoa_r+0x6a0>
 8009b8c:	2600      	movs	r6, #0
 8009b8e:	4637      	mov	r7, r6
 8009b90:	e7e1      	b.n	8009b56 <_dtoa_r+0x93e>
 8009b92:	9700      	str	r7, [sp, #0]
 8009b94:	4637      	mov	r7, r6
 8009b96:	e599      	b.n	80096cc <_dtoa_r+0x4b4>
 8009b98:	40240000 	.word	0x40240000
 8009b9c:	9b08      	ldr	r3, [sp, #32]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	f000 80ca 	beq.w	8009d38 <_dtoa_r+0xb20>
 8009ba4:	9b03      	ldr	r3, [sp, #12]
 8009ba6:	9302      	str	r3, [sp, #8]
 8009ba8:	2d00      	cmp	r5, #0
 8009baa:	dd05      	ble.n	8009bb8 <_dtoa_r+0x9a0>
 8009bac:	4639      	mov	r1, r7
 8009bae:	462a      	mov	r2, r5
 8009bb0:	4620      	mov	r0, r4
 8009bb2:	f000 fb4b 	bl	800a24c <__lshift>
 8009bb6:	4607      	mov	r7, r0
 8009bb8:	f1b8 0f00 	cmp.w	r8, #0
 8009bbc:	d05b      	beq.n	8009c76 <_dtoa_r+0xa5e>
 8009bbe:	6879      	ldr	r1, [r7, #4]
 8009bc0:	4620      	mov	r0, r4
 8009bc2:	f000 f931 	bl	8009e28 <_Balloc>
 8009bc6:	4605      	mov	r5, r0
 8009bc8:	b928      	cbnz	r0, 8009bd6 <_dtoa_r+0x9be>
 8009bca:	4b87      	ldr	r3, [pc, #540]	; (8009de8 <_dtoa_r+0xbd0>)
 8009bcc:	4602      	mov	r2, r0
 8009bce:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009bd2:	f7ff bb3b 	b.w	800924c <_dtoa_r+0x34>
 8009bd6:	693a      	ldr	r2, [r7, #16]
 8009bd8:	3202      	adds	r2, #2
 8009bda:	0092      	lsls	r2, r2, #2
 8009bdc:	f107 010c 	add.w	r1, r7, #12
 8009be0:	300c      	adds	r0, #12
 8009be2:	f000 f913 	bl	8009e0c <memcpy>
 8009be6:	2201      	movs	r2, #1
 8009be8:	4629      	mov	r1, r5
 8009bea:	4620      	mov	r0, r4
 8009bec:	f000 fb2e 	bl	800a24c <__lshift>
 8009bf0:	9b01      	ldr	r3, [sp, #4]
 8009bf2:	f103 0901 	add.w	r9, r3, #1
 8009bf6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009bfa:	4413      	add	r3, r2
 8009bfc:	9305      	str	r3, [sp, #20]
 8009bfe:	f00a 0301 	and.w	r3, sl, #1
 8009c02:	46b8      	mov	r8, r7
 8009c04:	9304      	str	r3, [sp, #16]
 8009c06:	4607      	mov	r7, r0
 8009c08:	4631      	mov	r1, r6
 8009c0a:	ee18 0a10 	vmov	r0, s16
 8009c0e:	f7ff fa77 	bl	8009100 <quorem>
 8009c12:	4641      	mov	r1, r8
 8009c14:	9002      	str	r0, [sp, #8]
 8009c16:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009c1a:	ee18 0a10 	vmov	r0, s16
 8009c1e:	f000 fb85 	bl	800a32c <__mcmp>
 8009c22:	463a      	mov	r2, r7
 8009c24:	9003      	str	r0, [sp, #12]
 8009c26:	4631      	mov	r1, r6
 8009c28:	4620      	mov	r0, r4
 8009c2a:	f000 fb9b 	bl	800a364 <__mdiff>
 8009c2e:	68c2      	ldr	r2, [r0, #12]
 8009c30:	f109 3bff 	add.w	fp, r9, #4294967295
 8009c34:	4605      	mov	r5, r0
 8009c36:	bb02      	cbnz	r2, 8009c7a <_dtoa_r+0xa62>
 8009c38:	4601      	mov	r1, r0
 8009c3a:	ee18 0a10 	vmov	r0, s16
 8009c3e:	f000 fb75 	bl	800a32c <__mcmp>
 8009c42:	4602      	mov	r2, r0
 8009c44:	4629      	mov	r1, r5
 8009c46:	4620      	mov	r0, r4
 8009c48:	9207      	str	r2, [sp, #28]
 8009c4a:	f000 f92d 	bl	8009ea8 <_Bfree>
 8009c4e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009c52:	ea43 0102 	orr.w	r1, r3, r2
 8009c56:	9b04      	ldr	r3, [sp, #16]
 8009c58:	430b      	orrs	r3, r1
 8009c5a:	464d      	mov	r5, r9
 8009c5c:	d10f      	bne.n	8009c7e <_dtoa_r+0xa66>
 8009c5e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009c62:	d02a      	beq.n	8009cba <_dtoa_r+0xaa2>
 8009c64:	9b03      	ldr	r3, [sp, #12]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	dd02      	ble.n	8009c70 <_dtoa_r+0xa58>
 8009c6a:	9b02      	ldr	r3, [sp, #8]
 8009c6c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009c70:	f88b a000 	strb.w	sl, [fp]
 8009c74:	e775      	b.n	8009b62 <_dtoa_r+0x94a>
 8009c76:	4638      	mov	r0, r7
 8009c78:	e7ba      	b.n	8009bf0 <_dtoa_r+0x9d8>
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	e7e2      	b.n	8009c44 <_dtoa_r+0xa2c>
 8009c7e:	9b03      	ldr	r3, [sp, #12]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	db04      	blt.n	8009c8e <_dtoa_r+0xa76>
 8009c84:	9906      	ldr	r1, [sp, #24]
 8009c86:	430b      	orrs	r3, r1
 8009c88:	9904      	ldr	r1, [sp, #16]
 8009c8a:	430b      	orrs	r3, r1
 8009c8c:	d122      	bne.n	8009cd4 <_dtoa_r+0xabc>
 8009c8e:	2a00      	cmp	r2, #0
 8009c90:	ddee      	ble.n	8009c70 <_dtoa_r+0xa58>
 8009c92:	ee18 1a10 	vmov	r1, s16
 8009c96:	2201      	movs	r2, #1
 8009c98:	4620      	mov	r0, r4
 8009c9a:	f000 fad7 	bl	800a24c <__lshift>
 8009c9e:	4631      	mov	r1, r6
 8009ca0:	ee08 0a10 	vmov	s16, r0
 8009ca4:	f000 fb42 	bl	800a32c <__mcmp>
 8009ca8:	2800      	cmp	r0, #0
 8009caa:	dc03      	bgt.n	8009cb4 <_dtoa_r+0xa9c>
 8009cac:	d1e0      	bne.n	8009c70 <_dtoa_r+0xa58>
 8009cae:	f01a 0f01 	tst.w	sl, #1
 8009cb2:	d0dd      	beq.n	8009c70 <_dtoa_r+0xa58>
 8009cb4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009cb8:	d1d7      	bne.n	8009c6a <_dtoa_r+0xa52>
 8009cba:	2339      	movs	r3, #57	; 0x39
 8009cbc:	f88b 3000 	strb.w	r3, [fp]
 8009cc0:	462b      	mov	r3, r5
 8009cc2:	461d      	mov	r5, r3
 8009cc4:	3b01      	subs	r3, #1
 8009cc6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009cca:	2a39      	cmp	r2, #57	; 0x39
 8009ccc:	d071      	beq.n	8009db2 <_dtoa_r+0xb9a>
 8009cce:	3201      	adds	r2, #1
 8009cd0:	701a      	strb	r2, [r3, #0]
 8009cd2:	e746      	b.n	8009b62 <_dtoa_r+0x94a>
 8009cd4:	2a00      	cmp	r2, #0
 8009cd6:	dd07      	ble.n	8009ce8 <_dtoa_r+0xad0>
 8009cd8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009cdc:	d0ed      	beq.n	8009cba <_dtoa_r+0xaa2>
 8009cde:	f10a 0301 	add.w	r3, sl, #1
 8009ce2:	f88b 3000 	strb.w	r3, [fp]
 8009ce6:	e73c      	b.n	8009b62 <_dtoa_r+0x94a>
 8009ce8:	9b05      	ldr	r3, [sp, #20]
 8009cea:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009cee:	4599      	cmp	r9, r3
 8009cf0:	d047      	beq.n	8009d82 <_dtoa_r+0xb6a>
 8009cf2:	ee18 1a10 	vmov	r1, s16
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	220a      	movs	r2, #10
 8009cfa:	4620      	mov	r0, r4
 8009cfc:	f000 f8f6 	bl	8009eec <__multadd>
 8009d00:	45b8      	cmp	r8, r7
 8009d02:	ee08 0a10 	vmov	s16, r0
 8009d06:	f04f 0300 	mov.w	r3, #0
 8009d0a:	f04f 020a 	mov.w	r2, #10
 8009d0e:	4641      	mov	r1, r8
 8009d10:	4620      	mov	r0, r4
 8009d12:	d106      	bne.n	8009d22 <_dtoa_r+0xb0a>
 8009d14:	f000 f8ea 	bl	8009eec <__multadd>
 8009d18:	4680      	mov	r8, r0
 8009d1a:	4607      	mov	r7, r0
 8009d1c:	f109 0901 	add.w	r9, r9, #1
 8009d20:	e772      	b.n	8009c08 <_dtoa_r+0x9f0>
 8009d22:	f000 f8e3 	bl	8009eec <__multadd>
 8009d26:	4639      	mov	r1, r7
 8009d28:	4680      	mov	r8, r0
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	220a      	movs	r2, #10
 8009d2e:	4620      	mov	r0, r4
 8009d30:	f000 f8dc 	bl	8009eec <__multadd>
 8009d34:	4607      	mov	r7, r0
 8009d36:	e7f1      	b.n	8009d1c <_dtoa_r+0xb04>
 8009d38:	9b03      	ldr	r3, [sp, #12]
 8009d3a:	9302      	str	r3, [sp, #8]
 8009d3c:	9d01      	ldr	r5, [sp, #4]
 8009d3e:	ee18 0a10 	vmov	r0, s16
 8009d42:	4631      	mov	r1, r6
 8009d44:	f7ff f9dc 	bl	8009100 <quorem>
 8009d48:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009d4c:	9b01      	ldr	r3, [sp, #4]
 8009d4e:	f805 ab01 	strb.w	sl, [r5], #1
 8009d52:	1aea      	subs	r2, r5, r3
 8009d54:	9b02      	ldr	r3, [sp, #8]
 8009d56:	4293      	cmp	r3, r2
 8009d58:	dd09      	ble.n	8009d6e <_dtoa_r+0xb56>
 8009d5a:	ee18 1a10 	vmov	r1, s16
 8009d5e:	2300      	movs	r3, #0
 8009d60:	220a      	movs	r2, #10
 8009d62:	4620      	mov	r0, r4
 8009d64:	f000 f8c2 	bl	8009eec <__multadd>
 8009d68:	ee08 0a10 	vmov	s16, r0
 8009d6c:	e7e7      	b.n	8009d3e <_dtoa_r+0xb26>
 8009d6e:	9b02      	ldr	r3, [sp, #8]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	bfc8      	it	gt
 8009d74:	461d      	movgt	r5, r3
 8009d76:	9b01      	ldr	r3, [sp, #4]
 8009d78:	bfd8      	it	le
 8009d7a:	2501      	movle	r5, #1
 8009d7c:	441d      	add	r5, r3
 8009d7e:	f04f 0800 	mov.w	r8, #0
 8009d82:	ee18 1a10 	vmov	r1, s16
 8009d86:	2201      	movs	r2, #1
 8009d88:	4620      	mov	r0, r4
 8009d8a:	f000 fa5f 	bl	800a24c <__lshift>
 8009d8e:	4631      	mov	r1, r6
 8009d90:	ee08 0a10 	vmov	s16, r0
 8009d94:	f000 faca 	bl	800a32c <__mcmp>
 8009d98:	2800      	cmp	r0, #0
 8009d9a:	dc91      	bgt.n	8009cc0 <_dtoa_r+0xaa8>
 8009d9c:	d102      	bne.n	8009da4 <_dtoa_r+0xb8c>
 8009d9e:	f01a 0f01 	tst.w	sl, #1
 8009da2:	d18d      	bne.n	8009cc0 <_dtoa_r+0xaa8>
 8009da4:	462b      	mov	r3, r5
 8009da6:	461d      	mov	r5, r3
 8009da8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009dac:	2a30      	cmp	r2, #48	; 0x30
 8009dae:	d0fa      	beq.n	8009da6 <_dtoa_r+0xb8e>
 8009db0:	e6d7      	b.n	8009b62 <_dtoa_r+0x94a>
 8009db2:	9a01      	ldr	r2, [sp, #4]
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d184      	bne.n	8009cc2 <_dtoa_r+0xaaa>
 8009db8:	9b00      	ldr	r3, [sp, #0]
 8009dba:	3301      	adds	r3, #1
 8009dbc:	9300      	str	r3, [sp, #0]
 8009dbe:	2331      	movs	r3, #49	; 0x31
 8009dc0:	7013      	strb	r3, [r2, #0]
 8009dc2:	e6ce      	b.n	8009b62 <_dtoa_r+0x94a>
 8009dc4:	4b09      	ldr	r3, [pc, #36]	; (8009dec <_dtoa_r+0xbd4>)
 8009dc6:	f7ff ba95 	b.w	80092f4 <_dtoa_r+0xdc>
 8009dca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	f47f aa6e 	bne.w	80092ae <_dtoa_r+0x96>
 8009dd2:	4b07      	ldr	r3, [pc, #28]	; (8009df0 <_dtoa_r+0xbd8>)
 8009dd4:	f7ff ba8e 	b.w	80092f4 <_dtoa_r+0xdc>
 8009dd8:	9b02      	ldr	r3, [sp, #8]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	dcae      	bgt.n	8009d3c <_dtoa_r+0xb24>
 8009dde:	9b06      	ldr	r3, [sp, #24]
 8009de0:	2b02      	cmp	r3, #2
 8009de2:	f73f aea8 	bgt.w	8009b36 <_dtoa_r+0x91e>
 8009de6:	e7a9      	b.n	8009d3c <_dtoa_r+0xb24>
 8009de8:	0800c5ab 	.word	0x0800c5ab
 8009dec:	0800c508 	.word	0x0800c508
 8009df0:	0800c52c 	.word	0x0800c52c

08009df4 <_localeconv_r>:
 8009df4:	4800      	ldr	r0, [pc, #0]	; (8009df8 <_localeconv_r+0x4>)
 8009df6:	4770      	bx	lr
 8009df8:	20000194 	.word	0x20000194

08009dfc <malloc>:
 8009dfc:	4b02      	ldr	r3, [pc, #8]	; (8009e08 <malloc+0xc>)
 8009dfe:	4601      	mov	r1, r0
 8009e00:	6818      	ldr	r0, [r3, #0]
 8009e02:	f000 bc17 	b.w	800a634 <_malloc_r>
 8009e06:	bf00      	nop
 8009e08:	20000040 	.word	0x20000040

08009e0c <memcpy>:
 8009e0c:	440a      	add	r2, r1
 8009e0e:	4291      	cmp	r1, r2
 8009e10:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e14:	d100      	bne.n	8009e18 <memcpy+0xc>
 8009e16:	4770      	bx	lr
 8009e18:	b510      	push	{r4, lr}
 8009e1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e22:	4291      	cmp	r1, r2
 8009e24:	d1f9      	bne.n	8009e1a <memcpy+0xe>
 8009e26:	bd10      	pop	{r4, pc}

08009e28 <_Balloc>:
 8009e28:	b570      	push	{r4, r5, r6, lr}
 8009e2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009e2c:	4604      	mov	r4, r0
 8009e2e:	460d      	mov	r5, r1
 8009e30:	b976      	cbnz	r6, 8009e50 <_Balloc+0x28>
 8009e32:	2010      	movs	r0, #16
 8009e34:	f7ff ffe2 	bl	8009dfc <malloc>
 8009e38:	4602      	mov	r2, r0
 8009e3a:	6260      	str	r0, [r4, #36]	; 0x24
 8009e3c:	b920      	cbnz	r0, 8009e48 <_Balloc+0x20>
 8009e3e:	4b18      	ldr	r3, [pc, #96]	; (8009ea0 <_Balloc+0x78>)
 8009e40:	4818      	ldr	r0, [pc, #96]	; (8009ea4 <_Balloc+0x7c>)
 8009e42:	2166      	movs	r1, #102	; 0x66
 8009e44:	f000 fdd6 	bl	800a9f4 <__assert_func>
 8009e48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e4c:	6006      	str	r6, [r0, #0]
 8009e4e:	60c6      	str	r6, [r0, #12]
 8009e50:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009e52:	68f3      	ldr	r3, [r6, #12]
 8009e54:	b183      	cbz	r3, 8009e78 <_Balloc+0x50>
 8009e56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e58:	68db      	ldr	r3, [r3, #12]
 8009e5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009e5e:	b9b8      	cbnz	r0, 8009e90 <_Balloc+0x68>
 8009e60:	2101      	movs	r1, #1
 8009e62:	fa01 f605 	lsl.w	r6, r1, r5
 8009e66:	1d72      	adds	r2, r6, #5
 8009e68:	0092      	lsls	r2, r2, #2
 8009e6a:	4620      	mov	r0, r4
 8009e6c:	f000 fb60 	bl	800a530 <_calloc_r>
 8009e70:	b160      	cbz	r0, 8009e8c <_Balloc+0x64>
 8009e72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009e76:	e00e      	b.n	8009e96 <_Balloc+0x6e>
 8009e78:	2221      	movs	r2, #33	; 0x21
 8009e7a:	2104      	movs	r1, #4
 8009e7c:	4620      	mov	r0, r4
 8009e7e:	f000 fb57 	bl	800a530 <_calloc_r>
 8009e82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e84:	60f0      	str	r0, [r6, #12]
 8009e86:	68db      	ldr	r3, [r3, #12]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d1e4      	bne.n	8009e56 <_Balloc+0x2e>
 8009e8c:	2000      	movs	r0, #0
 8009e8e:	bd70      	pop	{r4, r5, r6, pc}
 8009e90:	6802      	ldr	r2, [r0, #0]
 8009e92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009e96:	2300      	movs	r3, #0
 8009e98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009e9c:	e7f7      	b.n	8009e8e <_Balloc+0x66>
 8009e9e:	bf00      	nop
 8009ea0:	0800c539 	.word	0x0800c539
 8009ea4:	0800c5bc 	.word	0x0800c5bc

08009ea8 <_Bfree>:
 8009ea8:	b570      	push	{r4, r5, r6, lr}
 8009eaa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009eac:	4605      	mov	r5, r0
 8009eae:	460c      	mov	r4, r1
 8009eb0:	b976      	cbnz	r6, 8009ed0 <_Bfree+0x28>
 8009eb2:	2010      	movs	r0, #16
 8009eb4:	f7ff ffa2 	bl	8009dfc <malloc>
 8009eb8:	4602      	mov	r2, r0
 8009eba:	6268      	str	r0, [r5, #36]	; 0x24
 8009ebc:	b920      	cbnz	r0, 8009ec8 <_Bfree+0x20>
 8009ebe:	4b09      	ldr	r3, [pc, #36]	; (8009ee4 <_Bfree+0x3c>)
 8009ec0:	4809      	ldr	r0, [pc, #36]	; (8009ee8 <_Bfree+0x40>)
 8009ec2:	218a      	movs	r1, #138	; 0x8a
 8009ec4:	f000 fd96 	bl	800a9f4 <__assert_func>
 8009ec8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ecc:	6006      	str	r6, [r0, #0]
 8009ece:	60c6      	str	r6, [r0, #12]
 8009ed0:	b13c      	cbz	r4, 8009ee2 <_Bfree+0x3a>
 8009ed2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009ed4:	6862      	ldr	r2, [r4, #4]
 8009ed6:	68db      	ldr	r3, [r3, #12]
 8009ed8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009edc:	6021      	str	r1, [r4, #0]
 8009ede:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009ee2:	bd70      	pop	{r4, r5, r6, pc}
 8009ee4:	0800c539 	.word	0x0800c539
 8009ee8:	0800c5bc 	.word	0x0800c5bc

08009eec <__multadd>:
 8009eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ef0:	690d      	ldr	r5, [r1, #16]
 8009ef2:	4607      	mov	r7, r0
 8009ef4:	460c      	mov	r4, r1
 8009ef6:	461e      	mov	r6, r3
 8009ef8:	f101 0c14 	add.w	ip, r1, #20
 8009efc:	2000      	movs	r0, #0
 8009efe:	f8dc 3000 	ldr.w	r3, [ip]
 8009f02:	b299      	uxth	r1, r3
 8009f04:	fb02 6101 	mla	r1, r2, r1, r6
 8009f08:	0c1e      	lsrs	r6, r3, #16
 8009f0a:	0c0b      	lsrs	r3, r1, #16
 8009f0c:	fb02 3306 	mla	r3, r2, r6, r3
 8009f10:	b289      	uxth	r1, r1
 8009f12:	3001      	adds	r0, #1
 8009f14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009f18:	4285      	cmp	r5, r0
 8009f1a:	f84c 1b04 	str.w	r1, [ip], #4
 8009f1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009f22:	dcec      	bgt.n	8009efe <__multadd+0x12>
 8009f24:	b30e      	cbz	r6, 8009f6a <__multadd+0x7e>
 8009f26:	68a3      	ldr	r3, [r4, #8]
 8009f28:	42ab      	cmp	r3, r5
 8009f2a:	dc19      	bgt.n	8009f60 <__multadd+0x74>
 8009f2c:	6861      	ldr	r1, [r4, #4]
 8009f2e:	4638      	mov	r0, r7
 8009f30:	3101      	adds	r1, #1
 8009f32:	f7ff ff79 	bl	8009e28 <_Balloc>
 8009f36:	4680      	mov	r8, r0
 8009f38:	b928      	cbnz	r0, 8009f46 <__multadd+0x5a>
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	4b0c      	ldr	r3, [pc, #48]	; (8009f70 <__multadd+0x84>)
 8009f3e:	480d      	ldr	r0, [pc, #52]	; (8009f74 <__multadd+0x88>)
 8009f40:	21b5      	movs	r1, #181	; 0xb5
 8009f42:	f000 fd57 	bl	800a9f4 <__assert_func>
 8009f46:	6922      	ldr	r2, [r4, #16]
 8009f48:	3202      	adds	r2, #2
 8009f4a:	f104 010c 	add.w	r1, r4, #12
 8009f4e:	0092      	lsls	r2, r2, #2
 8009f50:	300c      	adds	r0, #12
 8009f52:	f7ff ff5b 	bl	8009e0c <memcpy>
 8009f56:	4621      	mov	r1, r4
 8009f58:	4638      	mov	r0, r7
 8009f5a:	f7ff ffa5 	bl	8009ea8 <_Bfree>
 8009f5e:	4644      	mov	r4, r8
 8009f60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009f64:	3501      	adds	r5, #1
 8009f66:	615e      	str	r6, [r3, #20]
 8009f68:	6125      	str	r5, [r4, #16]
 8009f6a:	4620      	mov	r0, r4
 8009f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f70:	0800c5ab 	.word	0x0800c5ab
 8009f74:	0800c5bc 	.word	0x0800c5bc

08009f78 <__hi0bits>:
 8009f78:	0c03      	lsrs	r3, r0, #16
 8009f7a:	041b      	lsls	r3, r3, #16
 8009f7c:	b9d3      	cbnz	r3, 8009fb4 <__hi0bits+0x3c>
 8009f7e:	0400      	lsls	r0, r0, #16
 8009f80:	2310      	movs	r3, #16
 8009f82:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009f86:	bf04      	itt	eq
 8009f88:	0200      	lsleq	r0, r0, #8
 8009f8a:	3308      	addeq	r3, #8
 8009f8c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009f90:	bf04      	itt	eq
 8009f92:	0100      	lsleq	r0, r0, #4
 8009f94:	3304      	addeq	r3, #4
 8009f96:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009f9a:	bf04      	itt	eq
 8009f9c:	0080      	lsleq	r0, r0, #2
 8009f9e:	3302      	addeq	r3, #2
 8009fa0:	2800      	cmp	r0, #0
 8009fa2:	db05      	blt.n	8009fb0 <__hi0bits+0x38>
 8009fa4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009fa8:	f103 0301 	add.w	r3, r3, #1
 8009fac:	bf08      	it	eq
 8009fae:	2320      	moveq	r3, #32
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	4770      	bx	lr
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	e7e4      	b.n	8009f82 <__hi0bits+0xa>

08009fb8 <__lo0bits>:
 8009fb8:	6803      	ldr	r3, [r0, #0]
 8009fba:	f013 0207 	ands.w	r2, r3, #7
 8009fbe:	4601      	mov	r1, r0
 8009fc0:	d00b      	beq.n	8009fda <__lo0bits+0x22>
 8009fc2:	07da      	lsls	r2, r3, #31
 8009fc4:	d423      	bmi.n	800a00e <__lo0bits+0x56>
 8009fc6:	0798      	lsls	r0, r3, #30
 8009fc8:	bf49      	itett	mi
 8009fca:	085b      	lsrmi	r3, r3, #1
 8009fcc:	089b      	lsrpl	r3, r3, #2
 8009fce:	2001      	movmi	r0, #1
 8009fd0:	600b      	strmi	r3, [r1, #0]
 8009fd2:	bf5c      	itt	pl
 8009fd4:	600b      	strpl	r3, [r1, #0]
 8009fd6:	2002      	movpl	r0, #2
 8009fd8:	4770      	bx	lr
 8009fda:	b298      	uxth	r0, r3
 8009fdc:	b9a8      	cbnz	r0, 800a00a <__lo0bits+0x52>
 8009fde:	0c1b      	lsrs	r3, r3, #16
 8009fe0:	2010      	movs	r0, #16
 8009fe2:	b2da      	uxtb	r2, r3
 8009fe4:	b90a      	cbnz	r2, 8009fea <__lo0bits+0x32>
 8009fe6:	3008      	adds	r0, #8
 8009fe8:	0a1b      	lsrs	r3, r3, #8
 8009fea:	071a      	lsls	r2, r3, #28
 8009fec:	bf04      	itt	eq
 8009fee:	091b      	lsreq	r3, r3, #4
 8009ff0:	3004      	addeq	r0, #4
 8009ff2:	079a      	lsls	r2, r3, #30
 8009ff4:	bf04      	itt	eq
 8009ff6:	089b      	lsreq	r3, r3, #2
 8009ff8:	3002      	addeq	r0, #2
 8009ffa:	07da      	lsls	r2, r3, #31
 8009ffc:	d403      	bmi.n	800a006 <__lo0bits+0x4e>
 8009ffe:	085b      	lsrs	r3, r3, #1
 800a000:	f100 0001 	add.w	r0, r0, #1
 800a004:	d005      	beq.n	800a012 <__lo0bits+0x5a>
 800a006:	600b      	str	r3, [r1, #0]
 800a008:	4770      	bx	lr
 800a00a:	4610      	mov	r0, r2
 800a00c:	e7e9      	b.n	8009fe2 <__lo0bits+0x2a>
 800a00e:	2000      	movs	r0, #0
 800a010:	4770      	bx	lr
 800a012:	2020      	movs	r0, #32
 800a014:	4770      	bx	lr
	...

0800a018 <__i2b>:
 800a018:	b510      	push	{r4, lr}
 800a01a:	460c      	mov	r4, r1
 800a01c:	2101      	movs	r1, #1
 800a01e:	f7ff ff03 	bl	8009e28 <_Balloc>
 800a022:	4602      	mov	r2, r0
 800a024:	b928      	cbnz	r0, 800a032 <__i2b+0x1a>
 800a026:	4b05      	ldr	r3, [pc, #20]	; (800a03c <__i2b+0x24>)
 800a028:	4805      	ldr	r0, [pc, #20]	; (800a040 <__i2b+0x28>)
 800a02a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a02e:	f000 fce1 	bl	800a9f4 <__assert_func>
 800a032:	2301      	movs	r3, #1
 800a034:	6144      	str	r4, [r0, #20]
 800a036:	6103      	str	r3, [r0, #16]
 800a038:	bd10      	pop	{r4, pc}
 800a03a:	bf00      	nop
 800a03c:	0800c5ab 	.word	0x0800c5ab
 800a040:	0800c5bc 	.word	0x0800c5bc

0800a044 <__multiply>:
 800a044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a048:	4691      	mov	r9, r2
 800a04a:	690a      	ldr	r2, [r1, #16]
 800a04c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a050:	429a      	cmp	r2, r3
 800a052:	bfb8      	it	lt
 800a054:	460b      	movlt	r3, r1
 800a056:	460c      	mov	r4, r1
 800a058:	bfbc      	itt	lt
 800a05a:	464c      	movlt	r4, r9
 800a05c:	4699      	movlt	r9, r3
 800a05e:	6927      	ldr	r7, [r4, #16]
 800a060:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a064:	68a3      	ldr	r3, [r4, #8]
 800a066:	6861      	ldr	r1, [r4, #4]
 800a068:	eb07 060a 	add.w	r6, r7, sl
 800a06c:	42b3      	cmp	r3, r6
 800a06e:	b085      	sub	sp, #20
 800a070:	bfb8      	it	lt
 800a072:	3101      	addlt	r1, #1
 800a074:	f7ff fed8 	bl	8009e28 <_Balloc>
 800a078:	b930      	cbnz	r0, 800a088 <__multiply+0x44>
 800a07a:	4602      	mov	r2, r0
 800a07c:	4b44      	ldr	r3, [pc, #272]	; (800a190 <__multiply+0x14c>)
 800a07e:	4845      	ldr	r0, [pc, #276]	; (800a194 <__multiply+0x150>)
 800a080:	f240 115d 	movw	r1, #349	; 0x15d
 800a084:	f000 fcb6 	bl	800a9f4 <__assert_func>
 800a088:	f100 0514 	add.w	r5, r0, #20
 800a08c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a090:	462b      	mov	r3, r5
 800a092:	2200      	movs	r2, #0
 800a094:	4543      	cmp	r3, r8
 800a096:	d321      	bcc.n	800a0dc <__multiply+0x98>
 800a098:	f104 0314 	add.w	r3, r4, #20
 800a09c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a0a0:	f109 0314 	add.w	r3, r9, #20
 800a0a4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a0a8:	9202      	str	r2, [sp, #8]
 800a0aa:	1b3a      	subs	r2, r7, r4
 800a0ac:	3a15      	subs	r2, #21
 800a0ae:	f022 0203 	bic.w	r2, r2, #3
 800a0b2:	3204      	adds	r2, #4
 800a0b4:	f104 0115 	add.w	r1, r4, #21
 800a0b8:	428f      	cmp	r7, r1
 800a0ba:	bf38      	it	cc
 800a0bc:	2204      	movcc	r2, #4
 800a0be:	9201      	str	r2, [sp, #4]
 800a0c0:	9a02      	ldr	r2, [sp, #8]
 800a0c2:	9303      	str	r3, [sp, #12]
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d80c      	bhi.n	800a0e2 <__multiply+0x9e>
 800a0c8:	2e00      	cmp	r6, #0
 800a0ca:	dd03      	ble.n	800a0d4 <__multiply+0x90>
 800a0cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d05a      	beq.n	800a18a <__multiply+0x146>
 800a0d4:	6106      	str	r6, [r0, #16]
 800a0d6:	b005      	add	sp, #20
 800a0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0dc:	f843 2b04 	str.w	r2, [r3], #4
 800a0e0:	e7d8      	b.n	800a094 <__multiply+0x50>
 800a0e2:	f8b3 a000 	ldrh.w	sl, [r3]
 800a0e6:	f1ba 0f00 	cmp.w	sl, #0
 800a0ea:	d024      	beq.n	800a136 <__multiply+0xf2>
 800a0ec:	f104 0e14 	add.w	lr, r4, #20
 800a0f0:	46a9      	mov	r9, r5
 800a0f2:	f04f 0c00 	mov.w	ip, #0
 800a0f6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a0fa:	f8d9 1000 	ldr.w	r1, [r9]
 800a0fe:	fa1f fb82 	uxth.w	fp, r2
 800a102:	b289      	uxth	r1, r1
 800a104:	fb0a 110b 	mla	r1, sl, fp, r1
 800a108:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a10c:	f8d9 2000 	ldr.w	r2, [r9]
 800a110:	4461      	add	r1, ip
 800a112:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a116:	fb0a c20b 	mla	r2, sl, fp, ip
 800a11a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a11e:	b289      	uxth	r1, r1
 800a120:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a124:	4577      	cmp	r7, lr
 800a126:	f849 1b04 	str.w	r1, [r9], #4
 800a12a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a12e:	d8e2      	bhi.n	800a0f6 <__multiply+0xb2>
 800a130:	9a01      	ldr	r2, [sp, #4]
 800a132:	f845 c002 	str.w	ip, [r5, r2]
 800a136:	9a03      	ldr	r2, [sp, #12]
 800a138:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a13c:	3304      	adds	r3, #4
 800a13e:	f1b9 0f00 	cmp.w	r9, #0
 800a142:	d020      	beq.n	800a186 <__multiply+0x142>
 800a144:	6829      	ldr	r1, [r5, #0]
 800a146:	f104 0c14 	add.w	ip, r4, #20
 800a14a:	46ae      	mov	lr, r5
 800a14c:	f04f 0a00 	mov.w	sl, #0
 800a150:	f8bc b000 	ldrh.w	fp, [ip]
 800a154:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a158:	fb09 220b 	mla	r2, r9, fp, r2
 800a15c:	4492      	add	sl, r2
 800a15e:	b289      	uxth	r1, r1
 800a160:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a164:	f84e 1b04 	str.w	r1, [lr], #4
 800a168:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a16c:	f8be 1000 	ldrh.w	r1, [lr]
 800a170:	0c12      	lsrs	r2, r2, #16
 800a172:	fb09 1102 	mla	r1, r9, r2, r1
 800a176:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a17a:	4567      	cmp	r7, ip
 800a17c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a180:	d8e6      	bhi.n	800a150 <__multiply+0x10c>
 800a182:	9a01      	ldr	r2, [sp, #4]
 800a184:	50a9      	str	r1, [r5, r2]
 800a186:	3504      	adds	r5, #4
 800a188:	e79a      	b.n	800a0c0 <__multiply+0x7c>
 800a18a:	3e01      	subs	r6, #1
 800a18c:	e79c      	b.n	800a0c8 <__multiply+0x84>
 800a18e:	bf00      	nop
 800a190:	0800c5ab 	.word	0x0800c5ab
 800a194:	0800c5bc 	.word	0x0800c5bc

0800a198 <__pow5mult>:
 800a198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a19c:	4615      	mov	r5, r2
 800a19e:	f012 0203 	ands.w	r2, r2, #3
 800a1a2:	4606      	mov	r6, r0
 800a1a4:	460f      	mov	r7, r1
 800a1a6:	d007      	beq.n	800a1b8 <__pow5mult+0x20>
 800a1a8:	4c25      	ldr	r4, [pc, #148]	; (800a240 <__pow5mult+0xa8>)
 800a1aa:	3a01      	subs	r2, #1
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a1b2:	f7ff fe9b 	bl	8009eec <__multadd>
 800a1b6:	4607      	mov	r7, r0
 800a1b8:	10ad      	asrs	r5, r5, #2
 800a1ba:	d03d      	beq.n	800a238 <__pow5mult+0xa0>
 800a1bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a1be:	b97c      	cbnz	r4, 800a1e0 <__pow5mult+0x48>
 800a1c0:	2010      	movs	r0, #16
 800a1c2:	f7ff fe1b 	bl	8009dfc <malloc>
 800a1c6:	4602      	mov	r2, r0
 800a1c8:	6270      	str	r0, [r6, #36]	; 0x24
 800a1ca:	b928      	cbnz	r0, 800a1d8 <__pow5mult+0x40>
 800a1cc:	4b1d      	ldr	r3, [pc, #116]	; (800a244 <__pow5mult+0xac>)
 800a1ce:	481e      	ldr	r0, [pc, #120]	; (800a248 <__pow5mult+0xb0>)
 800a1d0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a1d4:	f000 fc0e 	bl	800a9f4 <__assert_func>
 800a1d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a1dc:	6004      	str	r4, [r0, #0]
 800a1de:	60c4      	str	r4, [r0, #12]
 800a1e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a1e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a1e8:	b94c      	cbnz	r4, 800a1fe <__pow5mult+0x66>
 800a1ea:	f240 2171 	movw	r1, #625	; 0x271
 800a1ee:	4630      	mov	r0, r6
 800a1f0:	f7ff ff12 	bl	800a018 <__i2b>
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	f8c8 0008 	str.w	r0, [r8, #8]
 800a1fa:	4604      	mov	r4, r0
 800a1fc:	6003      	str	r3, [r0, #0]
 800a1fe:	f04f 0900 	mov.w	r9, #0
 800a202:	07eb      	lsls	r3, r5, #31
 800a204:	d50a      	bpl.n	800a21c <__pow5mult+0x84>
 800a206:	4639      	mov	r1, r7
 800a208:	4622      	mov	r2, r4
 800a20a:	4630      	mov	r0, r6
 800a20c:	f7ff ff1a 	bl	800a044 <__multiply>
 800a210:	4639      	mov	r1, r7
 800a212:	4680      	mov	r8, r0
 800a214:	4630      	mov	r0, r6
 800a216:	f7ff fe47 	bl	8009ea8 <_Bfree>
 800a21a:	4647      	mov	r7, r8
 800a21c:	106d      	asrs	r5, r5, #1
 800a21e:	d00b      	beq.n	800a238 <__pow5mult+0xa0>
 800a220:	6820      	ldr	r0, [r4, #0]
 800a222:	b938      	cbnz	r0, 800a234 <__pow5mult+0x9c>
 800a224:	4622      	mov	r2, r4
 800a226:	4621      	mov	r1, r4
 800a228:	4630      	mov	r0, r6
 800a22a:	f7ff ff0b 	bl	800a044 <__multiply>
 800a22e:	6020      	str	r0, [r4, #0]
 800a230:	f8c0 9000 	str.w	r9, [r0]
 800a234:	4604      	mov	r4, r0
 800a236:	e7e4      	b.n	800a202 <__pow5mult+0x6a>
 800a238:	4638      	mov	r0, r7
 800a23a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a23e:	bf00      	nop
 800a240:	0800c708 	.word	0x0800c708
 800a244:	0800c539 	.word	0x0800c539
 800a248:	0800c5bc 	.word	0x0800c5bc

0800a24c <__lshift>:
 800a24c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a250:	460c      	mov	r4, r1
 800a252:	6849      	ldr	r1, [r1, #4]
 800a254:	6923      	ldr	r3, [r4, #16]
 800a256:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a25a:	68a3      	ldr	r3, [r4, #8]
 800a25c:	4607      	mov	r7, r0
 800a25e:	4691      	mov	r9, r2
 800a260:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a264:	f108 0601 	add.w	r6, r8, #1
 800a268:	42b3      	cmp	r3, r6
 800a26a:	db0b      	blt.n	800a284 <__lshift+0x38>
 800a26c:	4638      	mov	r0, r7
 800a26e:	f7ff fddb 	bl	8009e28 <_Balloc>
 800a272:	4605      	mov	r5, r0
 800a274:	b948      	cbnz	r0, 800a28a <__lshift+0x3e>
 800a276:	4602      	mov	r2, r0
 800a278:	4b2a      	ldr	r3, [pc, #168]	; (800a324 <__lshift+0xd8>)
 800a27a:	482b      	ldr	r0, [pc, #172]	; (800a328 <__lshift+0xdc>)
 800a27c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a280:	f000 fbb8 	bl	800a9f4 <__assert_func>
 800a284:	3101      	adds	r1, #1
 800a286:	005b      	lsls	r3, r3, #1
 800a288:	e7ee      	b.n	800a268 <__lshift+0x1c>
 800a28a:	2300      	movs	r3, #0
 800a28c:	f100 0114 	add.w	r1, r0, #20
 800a290:	f100 0210 	add.w	r2, r0, #16
 800a294:	4618      	mov	r0, r3
 800a296:	4553      	cmp	r3, sl
 800a298:	db37      	blt.n	800a30a <__lshift+0xbe>
 800a29a:	6920      	ldr	r0, [r4, #16]
 800a29c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a2a0:	f104 0314 	add.w	r3, r4, #20
 800a2a4:	f019 091f 	ands.w	r9, r9, #31
 800a2a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a2ac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a2b0:	d02f      	beq.n	800a312 <__lshift+0xc6>
 800a2b2:	f1c9 0e20 	rsb	lr, r9, #32
 800a2b6:	468a      	mov	sl, r1
 800a2b8:	f04f 0c00 	mov.w	ip, #0
 800a2bc:	681a      	ldr	r2, [r3, #0]
 800a2be:	fa02 f209 	lsl.w	r2, r2, r9
 800a2c2:	ea42 020c 	orr.w	r2, r2, ip
 800a2c6:	f84a 2b04 	str.w	r2, [sl], #4
 800a2ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2ce:	4298      	cmp	r0, r3
 800a2d0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a2d4:	d8f2      	bhi.n	800a2bc <__lshift+0x70>
 800a2d6:	1b03      	subs	r3, r0, r4
 800a2d8:	3b15      	subs	r3, #21
 800a2da:	f023 0303 	bic.w	r3, r3, #3
 800a2de:	3304      	adds	r3, #4
 800a2e0:	f104 0215 	add.w	r2, r4, #21
 800a2e4:	4290      	cmp	r0, r2
 800a2e6:	bf38      	it	cc
 800a2e8:	2304      	movcc	r3, #4
 800a2ea:	f841 c003 	str.w	ip, [r1, r3]
 800a2ee:	f1bc 0f00 	cmp.w	ip, #0
 800a2f2:	d001      	beq.n	800a2f8 <__lshift+0xac>
 800a2f4:	f108 0602 	add.w	r6, r8, #2
 800a2f8:	3e01      	subs	r6, #1
 800a2fa:	4638      	mov	r0, r7
 800a2fc:	612e      	str	r6, [r5, #16]
 800a2fe:	4621      	mov	r1, r4
 800a300:	f7ff fdd2 	bl	8009ea8 <_Bfree>
 800a304:	4628      	mov	r0, r5
 800a306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a30a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a30e:	3301      	adds	r3, #1
 800a310:	e7c1      	b.n	800a296 <__lshift+0x4a>
 800a312:	3904      	subs	r1, #4
 800a314:	f853 2b04 	ldr.w	r2, [r3], #4
 800a318:	f841 2f04 	str.w	r2, [r1, #4]!
 800a31c:	4298      	cmp	r0, r3
 800a31e:	d8f9      	bhi.n	800a314 <__lshift+0xc8>
 800a320:	e7ea      	b.n	800a2f8 <__lshift+0xac>
 800a322:	bf00      	nop
 800a324:	0800c5ab 	.word	0x0800c5ab
 800a328:	0800c5bc 	.word	0x0800c5bc

0800a32c <__mcmp>:
 800a32c:	b530      	push	{r4, r5, lr}
 800a32e:	6902      	ldr	r2, [r0, #16]
 800a330:	690c      	ldr	r4, [r1, #16]
 800a332:	1b12      	subs	r2, r2, r4
 800a334:	d10e      	bne.n	800a354 <__mcmp+0x28>
 800a336:	f100 0314 	add.w	r3, r0, #20
 800a33a:	3114      	adds	r1, #20
 800a33c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a340:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a344:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a348:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a34c:	42a5      	cmp	r5, r4
 800a34e:	d003      	beq.n	800a358 <__mcmp+0x2c>
 800a350:	d305      	bcc.n	800a35e <__mcmp+0x32>
 800a352:	2201      	movs	r2, #1
 800a354:	4610      	mov	r0, r2
 800a356:	bd30      	pop	{r4, r5, pc}
 800a358:	4283      	cmp	r3, r0
 800a35a:	d3f3      	bcc.n	800a344 <__mcmp+0x18>
 800a35c:	e7fa      	b.n	800a354 <__mcmp+0x28>
 800a35e:	f04f 32ff 	mov.w	r2, #4294967295
 800a362:	e7f7      	b.n	800a354 <__mcmp+0x28>

0800a364 <__mdiff>:
 800a364:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a368:	460c      	mov	r4, r1
 800a36a:	4606      	mov	r6, r0
 800a36c:	4611      	mov	r1, r2
 800a36e:	4620      	mov	r0, r4
 800a370:	4690      	mov	r8, r2
 800a372:	f7ff ffdb 	bl	800a32c <__mcmp>
 800a376:	1e05      	subs	r5, r0, #0
 800a378:	d110      	bne.n	800a39c <__mdiff+0x38>
 800a37a:	4629      	mov	r1, r5
 800a37c:	4630      	mov	r0, r6
 800a37e:	f7ff fd53 	bl	8009e28 <_Balloc>
 800a382:	b930      	cbnz	r0, 800a392 <__mdiff+0x2e>
 800a384:	4b3a      	ldr	r3, [pc, #232]	; (800a470 <__mdiff+0x10c>)
 800a386:	4602      	mov	r2, r0
 800a388:	f240 2132 	movw	r1, #562	; 0x232
 800a38c:	4839      	ldr	r0, [pc, #228]	; (800a474 <__mdiff+0x110>)
 800a38e:	f000 fb31 	bl	800a9f4 <__assert_func>
 800a392:	2301      	movs	r3, #1
 800a394:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a398:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a39c:	bfa4      	itt	ge
 800a39e:	4643      	movge	r3, r8
 800a3a0:	46a0      	movge	r8, r4
 800a3a2:	4630      	mov	r0, r6
 800a3a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a3a8:	bfa6      	itte	ge
 800a3aa:	461c      	movge	r4, r3
 800a3ac:	2500      	movge	r5, #0
 800a3ae:	2501      	movlt	r5, #1
 800a3b0:	f7ff fd3a 	bl	8009e28 <_Balloc>
 800a3b4:	b920      	cbnz	r0, 800a3c0 <__mdiff+0x5c>
 800a3b6:	4b2e      	ldr	r3, [pc, #184]	; (800a470 <__mdiff+0x10c>)
 800a3b8:	4602      	mov	r2, r0
 800a3ba:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a3be:	e7e5      	b.n	800a38c <__mdiff+0x28>
 800a3c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a3c4:	6926      	ldr	r6, [r4, #16]
 800a3c6:	60c5      	str	r5, [r0, #12]
 800a3c8:	f104 0914 	add.w	r9, r4, #20
 800a3cc:	f108 0514 	add.w	r5, r8, #20
 800a3d0:	f100 0e14 	add.w	lr, r0, #20
 800a3d4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a3d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a3dc:	f108 0210 	add.w	r2, r8, #16
 800a3e0:	46f2      	mov	sl, lr
 800a3e2:	2100      	movs	r1, #0
 800a3e4:	f859 3b04 	ldr.w	r3, [r9], #4
 800a3e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a3ec:	fa1f f883 	uxth.w	r8, r3
 800a3f0:	fa11 f18b 	uxtah	r1, r1, fp
 800a3f4:	0c1b      	lsrs	r3, r3, #16
 800a3f6:	eba1 0808 	sub.w	r8, r1, r8
 800a3fa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a3fe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a402:	fa1f f888 	uxth.w	r8, r8
 800a406:	1419      	asrs	r1, r3, #16
 800a408:	454e      	cmp	r6, r9
 800a40a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a40e:	f84a 3b04 	str.w	r3, [sl], #4
 800a412:	d8e7      	bhi.n	800a3e4 <__mdiff+0x80>
 800a414:	1b33      	subs	r3, r6, r4
 800a416:	3b15      	subs	r3, #21
 800a418:	f023 0303 	bic.w	r3, r3, #3
 800a41c:	3304      	adds	r3, #4
 800a41e:	3415      	adds	r4, #21
 800a420:	42a6      	cmp	r6, r4
 800a422:	bf38      	it	cc
 800a424:	2304      	movcc	r3, #4
 800a426:	441d      	add	r5, r3
 800a428:	4473      	add	r3, lr
 800a42a:	469e      	mov	lr, r3
 800a42c:	462e      	mov	r6, r5
 800a42e:	4566      	cmp	r6, ip
 800a430:	d30e      	bcc.n	800a450 <__mdiff+0xec>
 800a432:	f10c 0203 	add.w	r2, ip, #3
 800a436:	1b52      	subs	r2, r2, r5
 800a438:	f022 0203 	bic.w	r2, r2, #3
 800a43c:	3d03      	subs	r5, #3
 800a43e:	45ac      	cmp	ip, r5
 800a440:	bf38      	it	cc
 800a442:	2200      	movcc	r2, #0
 800a444:	441a      	add	r2, r3
 800a446:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a44a:	b17b      	cbz	r3, 800a46c <__mdiff+0x108>
 800a44c:	6107      	str	r7, [r0, #16]
 800a44e:	e7a3      	b.n	800a398 <__mdiff+0x34>
 800a450:	f856 8b04 	ldr.w	r8, [r6], #4
 800a454:	fa11 f288 	uxtah	r2, r1, r8
 800a458:	1414      	asrs	r4, r2, #16
 800a45a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a45e:	b292      	uxth	r2, r2
 800a460:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a464:	f84e 2b04 	str.w	r2, [lr], #4
 800a468:	1421      	asrs	r1, r4, #16
 800a46a:	e7e0      	b.n	800a42e <__mdiff+0xca>
 800a46c:	3f01      	subs	r7, #1
 800a46e:	e7ea      	b.n	800a446 <__mdiff+0xe2>
 800a470:	0800c5ab 	.word	0x0800c5ab
 800a474:	0800c5bc 	.word	0x0800c5bc

0800a478 <__d2b>:
 800a478:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a47c:	4689      	mov	r9, r1
 800a47e:	2101      	movs	r1, #1
 800a480:	ec57 6b10 	vmov	r6, r7, d0
 800a484:	4690      	mov	r8, r2
 800a486:	f7ff fccf 	bl	8009e28 <_Balloc>
 800a48a:	4604      	mov	r4, r0
 800a48c:	b930      	cbnz	r0, 800a49c <__d2b+0x24>
 800a48e:	4602      	mov	r2, r0
 800a490:	4b25      	ldr	r3, [pc, #148]	; (800a528 <__d2b+0xb0>)
 800a492:	4826      	ldr	r0, [pc, #152]	; (800a52c <__d2b+0xb4>)
 800a494:	f240 310a 	movw	r1, #778	; 0x30a
 800a498:	f000 faac 	bl	800a9f4 <__assert_func>
 800a49c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a4a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a4a4:	bb35      	cbnz	r5, 800a4f4 <__d2b+0x7c>
 800a4a6:	2e00      	cmp	r6, #0
 800a4a8:	9301      	str	r3, [sp, #4]
 800a4aa:	d028      	beq.n	800a4fe <__d2b+0x86>
 800a4ac:	4668      	mov	r0, sp
 800a4ae:	9600      	str	r6, [sp, #0]
 800a4b0:	f7ff fd82 	bl	8009fb8 <__lo0bits>
 800a4b4:	9900      	ldr	r1, [sp, #0]
 800a4b6:	b300      	cbz	r0, 800a4fa <__d2b+0x82>
 800a4b8:	9a01      	ldr	r2, [sp, #4]
 800a4ba:	f1c0 0320 	rsb	r3, r0, #32
 800a4be:	fa02 f303 	lsl.w	r3, r2, r3
 800a4c2:	430b      	orrs	r3, r1
 800a4c4:	40c2      	lsrs	r2, r0
 800a4c6:	6163      	str	r3, [r4, #20]
 800a4c8:	9201      	str	r2, [sp, #4]
 800a4ca:	9b01      	ldr	r3, [sp, #4]
 800a4cc:	61a3      	str	r3, [r4, #24]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	bf14      	ite	ne
 800a4d2:	2202      	movne	r2, #2
 800a4d4:	2201      	moveq	r2, #1
 800a4d6:	6122      	str	r2, [r4, #16]
 800a4d8:	b1d5      	cbz	r5, 800a510 <__d2b+0x98>
 800a4da:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a4de:	4405      	add	r5, r0
 800a4e0:	f8c9 5000 	str.w	r5, [r9]
 800a4e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a4e8:	f8c8 0000 	str.w	r0, [r8]
 800a4ec:	4620      	mov	r0, r4
 800a4ee:	b003      	add	sp, #12
 800a4f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a4f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a4f8:	e7d5      	b.n	800a4a6 <__d2b+0x2e>
 800a4fa:	6161      	str	r1, [r4, #20]
 800a4fc:	e7e5      	b.n	800a4ca <__d2b+0x52>
 800a4fe:	a801      	add	r0, sp, #4
 800a500:	f7ff fd5a 	bl	8009fb8 <__lo0bits>
 800a504:	9b01      	ldr	r3, [sp, #4]
 800a506:	6163      	str	r3, [r4, #20]
 800a508:	2201      	movs	r2, #1
 800a50a:	6122      	str	r2, [r4, #16]
 800a50c:	3020      	adds	r0, #32
 800a50e:	e7e3      	b.n	800a4d8 <__d2b+0x60>
 800a510:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a514:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a518:	f8c9 0000 	str.w	r0, [r9]
 800a51c:	6918      	ldr	r0, [r3, #16]
 800a51e:	f7ff fd2b 	bl	8009f78 <__hi0bits>
 800a522:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a526:	e7df      	b.n	800a4e8 <__d2b+0x70>
 800a528:	0800c5ab 	.word	0x0800c5ab
 800a52c:	0800c5bc 	.word	0x0800c5bc

0800a530 <_calloc_r>:
 800a530:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a532:	fba1 2402 	umull	r2, r4, r1, r2
 800a536:	b94c      	cbnz	r4, 800a54c <_calloc_r+0x1c>
 800a538:	4611      	mov	r1, r2
 800a53a:	9201      	str	r2, [sp, #4]
 800a53c:	f000 f87a 	bl	800a634 <_malloc_r>
 800a540:	9a01      	ldr	r2, [sp, #4]
 800a542:	4605      	mov	r5, r0
 800a544:	b930      	cbnz	r0, 800a554 <_calloc_r+0x24>
 800a546:	4628      	mov	r0, r5
 800a548:	b003      	add	sp, #12
 800a54a:	bd30      	pop	{r4, r5, pc}
 800a54c:	220c      	movs	r2, #12
 800a54e:	6002      	str	r2, [r0, #0]
 800a550:	2500      	movs	r5, #0
 800a552:	e7f8      	b.n	800a546 <_calloc_r+0x16>
 800a554:	4621      	mov	r1, r4
 800a556:	f7fe f92d 	bl	80087b4 <memset>
 800a55a:	e7f4      	b.n	800a546 <_calloc_r+0x16>

0800a55c <_free_r>:
 800a55c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a55e:	2900      	cmp	r1, #0
 800a560:	d044      	beq.n	800a5ec <_free_r+0x90>
 800a562:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a566:	9001      	str	r0, [sp, #4]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	f1a1 0404 	sub.w	r4, r1, #4
 800a56e:	bfb8      	it	lt
 800a570:	18e4      	addlt	r4, r4, r3
 800a572:	f000 fa9b 	bl	800aaac <__malloc_lock>
 800a576:	4a1e      	ldr	r2, [pc, #120]	; (800a5f0 <_free_r+0x94>)
 800a578:	9801      	ldr	r0, [sp, #4]
 800a57a:	6813      	ldr	r3, [r2, #0]
 800a57c:	b933      	cbnz	r3, 800a58c <_free_r+0x30>
 800a57e:	6063      	str	r3, [r4, #4]
 800a580:	6014      	str	r4, [r2, #0]
 800a582:	b003      	add	sp, #12
 800a584:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a588:	f000 ba96 	b.w	800aab8 <__malloc_unlock>
 800a58c:	42a3      	cmp	r3, r4
 800a58e:	d908      	bls.n	800a5a2 <_free_r+0x46>
 800a590:	6825      	ldr	r5, [r4, #0]
 800a592:	1961      	adds	r1, r4, r5
 800a594:	428b      	cmp	r3, r1
 800a596:	bf01      	itttt	eq
 800a598:	6819      	ldreq	r1, [r3, #0]
 800a59a:	685b      	ldreq	r3, [r3, #4]
 800a59c:	1949      	addeq	r1, r1, r5
 800a59e:	6021      	streq	r1, [r4, #0]
 800a5a0:	e7ed      	b.n	800a57e <_free_r+0x22>
 800a5a2:	461a      	mov	r2, r3
 800a5a4:	685b      	ldr	r3, [r3, #4]
 800a5a6:	b10b      	cbz	r3, 800a5ac <_free_r+0x50>
 800a5a8:	42a3      	cmp	r3, r4
 800a5aa:	d9fa      	bls.n	800a5a2 <_free_r+0x46>
 800a5ac:	6811      	ldr	r1, [r2, #0]
 800a5ae:	1855      	adds	r5, r2, r1
 800a5b0:	42a5      	cmp	r5, r4
 800a5b2:	d10b      	bne.n	800a5cc <_free_r+0x70>
 800a5b4:	6824      	ldr	r4, [r4, #0]
 800a5b6:	4421      	add	r1, r4
 800a5b8:	1854      	adds	r4, r2, r1
 800a5ba:	42a3      	cmp	r3, r4
 800a5bc:	6011      	str	r1, [r2, #0]
 800a5be:	d1e0      	bne.n	800a582 <_free_r+0x26>
 800a5c0:	681c      	ldr	r4, [r3, #0]
 800a5c2:	685b      	ldr	r3, [r3, #4]
 800a5c4:	6053      	str	r3, [r2, #4]
 800a5c6:	4421      	add	r1, r4
 800a5c8:	6011      	str	r1, [r2, #0]
 800a5ca:	e7da      	b.n	800a582 <_free_r+0x26>
 800a5cc:	d902      	bls.n	800a5d4 <_free_r+0x78>
 800a5ce:	230c      	movs	r3, #12
 800a5d0:	6003      	str	r3, [r0, #0]
 800a5d2:	e7d6      	b.n	800a582 <_free_r+0x26>
 800a5d4:	6825      	ldr	r5, [r4, #0]
 800a5d6:	1961      	adds	r1, r4, r5
 800a5d8:	428b      	cmp	r3, r1
 800a5da:	bf04      	itt	eq
 800a5dc:	6819      	ldreq	r1, [r3, #0]
 800a5de:	685b      	ldreq	r3, [r3, #4]
 800a5e0:	6063      	str	r3, [r4, #4]
 800a5e2:	bf04      	itt	eq
 800a5e4:	1949      	addeq	r1, r1, r5
 800a5e6:	6021      	streq	r1, [r4, #0]
 800a5e8:	6054      	str	r4, [r2, #4]
 800a5ea:	e7ca      	b.n	800a582 <_free_r+0x26>
 800a5ec:	b003      	add	sp, #12
 800a5ee:	bd30      	pop	{r4, r5, pc}
 800a5f0:	20000560 	.word	0x20000560

0800a5f4 <sbrk_aligned>:
 800a5f4:	b570      	push	{r4, r5, r6, lr}
 800a5f6:	4e0e      	ldr	r6, [pc, #56]	; (800a630 <sbrk_aligned+0x3c>)
 800a5f8:	460c      	mov	r4, r1
 800a5fa:	6831      	ldr	r1, [r6, #0]
 800a5fc:	4605      	mov	r5, r0
 800a5fe:	b911      	cbnz	r1, 800a606 <sbrk_aligned+0x12>
 800a600:	f000 f9e8 	bl	800a9d4 <_sbrk_r>
 800a604:	6030      	str	r0, [r6, #0]
 800a606:	4621      	mov	r1, r4
 800a608:	4628      	mov	r0, r5
 800a60a:	f000 f9e3 	bl	800a9d4 <_sbrk_r>
 800a60e:	1c43      	adds	r3, r0, #1
 800a610:	d00a      	beq.n	800a628 <sbrk_aligned+0x34>
 800a612:	1cc4      	adds	r4, r0, #3
 800a614:	f024 0403 	bic.w	r4, r4, #3
 800a618:	42a0      	cmp	r0, r4
 800a61a:	d007      	beq.n	800a62c <sbrk_aligned+0x38>
 800a61c:	1a21      	subs	r1, r4, r0
 800a61e:	4628      	mov	r0, r5
 800a620:	f000 f9d8 	bl	800a9d4 <_sbrk_r>
 800a624:	3001      	adds	r0, #1
 800a626:	d101      	bne.n	800a62c <sbrk_aligned+0x38>
 800a628:	f04f 34ff 	mov.w	r4, #4294967295
 800a62c:	4620      	mov	r0, r4
 800a62e:	bd70      	pop	{r4, r5, r6, pc}
 800a630:	20000564 	.word	0x20000564

0800a634 <_malloc_r>:
 800a634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a638:	1ccd      	adds	r5, r1, #3
 800a63a:	f025 0503 	bic.w	r5, r5, #3
 800a63e:	3508      	adds	r5, #8
 800a640:	2d0c      	cmp	r5, #12
 800a642:	bf38      	it	cc
 800a644:	250c      	movcc	r5, #12
 800a646:	2d00      	cmp	r5, #0
 800a648:	4607      	mov	r7, r0
 800a64a:	db01      	blt.n	800a650 <_malloc_r+0x1c>
 800a64c:	42a9      	cmp	r1, r5
 800a64e:	d905      	bls.n	800a65c <_malloc_r+0x28>
 800a650:	230c      	movs	r3, #12
 800a652:	603b      	str	r3, [r7, #0]
 800a654:	2600      	movs	r6, #0
 800a656:	4630      	mov	r0, r6
 800a658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a65c:	4e2e      	ldr	r6, [pc, #184]	; (800a718 <_malloc_r+0xe4>)
 800a65e:	f000 fa25 	bl	800aaac <__malloc_lock>
 800a662:	6833      	ldr	r3, [r6, #0]
 800a664:	461c      	mov	r4, r3
 800a666:	bb34      	cbnz	r4, 800a6b6 <_malloc_r+0x82>
 800a668:	4629      	mov	r1, r5
 800a66a:	4638      	mov	r0, r7
 800a66c:	f7ff ffc2 	bl	800a5f4 <sbrk_aligned>
 800a670:	1c43      	adds	r3, r0, #1
 800a672:	4604      	mov	r4, r0
 800a674:	d14d      	bne.n	800a712 <_malloc_r+0xde>
 800a676:	6834      	ldr	r4, [r6, #0]
 800a678:	4626      	mov	r6, r4
 800a67a:	2e00      	cmp	r6, #0
 800a67c:	d140      	bne.n	800a700 <_malloc_r+0xcc>
 800a67e:	6823      	ldr	r3, [r4, #0]
 800a680:	4631      	mov	r1, r6
 800a682:	4638      	mov	r0, r7
 800a684:	eb04 0803 	add.w	r8, r4, r3
 800a688:	f000 f9a4 	bl	800a9d4 <_sbrk_r>
 800a68c:	4580      	cmp	r8, r0
 800a68e:	d13a      	bne.n	800a706 <_malloc_r+0xd2>
 800a690:	6821      	ldr	r1, [r4, #0]
 800a692:	3503      	adds	r5, #3
 800a694:	1a6d      	subs	r5, r5, r1
 800a696:	f025 0503 	bic.w	r5, r5, #3
 800a69a:	3508      	adds	r5, #8
 800a69c:	2d0c      	cmp	r5, #12
 800a69e:	bf38      	it	cc
 800a6a0:	250c      	movcc	r5, #12
 800a6a2:	4629      	mov	r1, r5
 800a6a4:	4638      	mov	r0, r7
 800a6a6:	f7ff ffa5 	bl	800a5f4 <sbrk_aligned>
 800a6aa:	3001      	adds	r0, #1
 800a6ac:	d02b      	beq.n	800a706 <_malloc_r+0xd2>
 800a6ae:	6823      	ldr	r3, [r4, #0]
 800a6b0:	442b      	add	r3, r5
 800a6b2:	6023      	str	r3, [r4, #0]
 800a6b4:	e00e      	b.n	800a6d4 <_malloc_r+0xa0>
 800a6b6:	6822      	ldr	r2, [r4, #0]
 800a6b8:	1b52      	subs	r2, r2, r5
 800a6ba:	d41e      	bmi.n	800a6fa <_malloc_r+0xc6>
 800a6bc:	2a0b      	cmp	r2, #11
 800a6be:	d916      	bls.n	800a6ee <_malloc_r+0xba>
 800a6c0:	1961      	adds	r1, r4, r5
 800a6c2:	42a3      	cmp	r3, r4
 800a6c4:	6025      	str	r5, [r4, #0]
 800a6c6:	bf18      	it	ne
 800a6c8:	6059      	strne	r1, [r3, #4]
 800a6ca:	6863      	ldr	r3, [r4, #4]
 800a6cc:	bf08      	it	eq
 800a6ce:	6031      	streq	r1, [r6, #0]
 800a6d0:	5162      	str	r2, [r4, r5]
 800a6d2:	604b      	str	r3, [r1, #4]
 800a6d4:	4638      	mov	r0, r7
 800a6d6:	f104 060b 	add.w	r6, r4, #11
 800a6da:	f000 f9ed 	bl	800aab8 <__malloc_unlock>
 800a6de:	f026 0607 	bic.w	r6, r6, #7
 800a6e2:	1d23      	adds	r3, r4, #4
 800a6e4:	1af2      	subs	r2, r6, r3
 800a6e6:	d0b6      	beq.n	800a656 <_malloc_r+0x22>
 800a6e8:	1b9b      	subs	r3, r3, r6
 800a6ea:	50a3      	str	r3, [r4, r2]
 800a6ec:	e7b3      	b.n	800a656 <_malloc_r+0x22>
 800a6ee:	6862      	ldr	r2, [r4, #4]
 800a6f0:	42a3      	cmp	r3, r4
 800a6f2:	bf0c      	ite	eq
 800a6f4:	6032      	streq	r2, [r6, #0]
 800a6f6:	605a      	strne	r2, [r3, #4]
 800a6f8:	e7ec      	b.n	800a6d4 <_malloc_r+0xa0>
 800a6fa:	4623      	mov	r3, r4
 800a6fc:	6864      	ldr	r4, [r4, #4]
 800a6fe:	e7b2      	b.n	800a666 <_malloc_r+0x32>
 800a700:	4634      	mov	r4, r6
 800a702:	6876      	ldr	r6, [r6, #4]
 800a704:	e7b9      	b.n	800a67a <_malloc_r+0x46>
 800a706:	230c      	movs	r3, #12
 800a708:	603b      	str	r3, [r7, #0]
 800a70a:	4638      	mov	r0, r7
 800a70c:	f000 f9d4 	bl	800aab8 <__malloc_unlock>
 800a710:	e7a1      	b.n	800a656 <_malloc_r+0x22>
 800a712:	6025      	str	r5, [r4, #0]
 800a714:	e7de      	b.n	800a6d4 <_malloc_r+0xa0>
 800a716:	bf00      	nop
 800a718:	20000560 	.word	0x20000560

0800a71c <__ssputs_r>:
 800a71c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a720:	688e      	ldr	r6, [r1, #8]
 800a722:	429e      	cmp	r6, r3
 800a724:	4682      	mov	sl, r0
 800a726:	460c      	mov	r4, r1
 800a728:	4690      	mov	r8, r2
 800a72a:	461f      	mov	r7, r3
 800a72c:	d838      	bhi.n	800a7a0 <__ssputs_r+0x84>
 800a72e:	898a      	ldrh	r2, [r1, #12]
 800a730:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a734:	d032      	beq.n	800a79c <__ssputs_r+0x80>
 800a736:	6825      	ldr	r5, [r4, #0]
 800a738:	6909      	ldr	r1, [r1, #16]
 800a73a:	eba5 0901 	sub.w	r9, r5, r1
 800a73e:	6965      	ldr	r5, [r4, #20]
 800a740:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a744:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a748:	3301      	adds	r3, #1
 800a74a:	444b      	add	r3, r9
 800a74c:	106d      	asrs	r5, r5, #1
 800a74e:	429d      	cmp	r5, r3
 800a750:	bf38      	it	cc
 800a752:	461d      	movcc	r5, r3
 800a754:	0553      	lsls	r3, r2, #21
 800a756:	d531      	bpl.n	800a7bc <__ssputs_r+0xa0>
 800a758:	4629      	mov	r1, r5
 800a75a:	f7ff ff6b 	bl	800a634 <_malloc_r>
 800a75e:	4606      	mov	r6, r0
 800a760:	b950      	cbnz	r0, 800a778 <__ssputs_r+0x5c>
 800a762:	230c      	movs	r3, #12
 800a764:	f8ca 3000 	str.w	r3, [sl]
 800a768:	89a3      	ldrh	r3, [r4, #12]
 800a76a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a76e:	81a3      	strh	r3, [r4, #12]
 800a770:	f04f 30ff 	mov.w	r0, #4294967295
 800a774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a778:	6921      	ldr	r1, [r4, #16]
 800a77a:	464a      	mov	r2, r9
 800a77c:	f7ff fb46 	bl	8009e0c <memcpy>
 800a780:	89a3      	ldrh	r3, [r4, #12]
 800a782:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a78a:	81a3      	strh	r3, [r4, #12]
 800a78c:	6126      	str	r6, [r4, #16]
 800a78e:	6165      	str	r5, [r4, #20]
 800a790:	444e      	add	r6, r9
 800a792:	eba5 0509 	sub.w	r5, r5, r9
 800a796:	6026      	str	r6, [r4, #0]
 800a798:	60a5      	str	r5, [r4, #8]
 800a79a:	463e      	mov	r6, r7
 800a79c:	42be      	cmp	r6, r7
 800a79e:	d900      	bls.n	800a7a2 <__ssputs_r+0x86>
 800a7a0:	463e      	mov	r6, r7
 800a7a2:	6820      	ldr	r0, [r4, #0]
 800a7a4:	4632      	mov	r2, r6
 800a7a6:	4641      	mov	r1, r8
 800a7a8:	f000 f966 	bl	800aa78 <memmove>
 800a7ac:	68a3      	ldr	r3, [r4, #8]
 800a7ae:	1b9b      	subs	r3, r3, r6
 800a7b0:	60a3      	str	r3, [r4, #8]
 800a7b2:	6823      	ldr	r3, [r4, #0]
 800a7b4:	4433      	add	r3, r6
 800a7b6:	6023      	str	r3, [r4, #0]
 800a7b8:	2000      	movs	r0, #0
 800a7ba:	e7db      	b.n	800a774 <__ssputs_r+0x58>
 800a7bc:	462a      	mov	r2, r5
 800a7be:	f000 f981 	bl	800aac4 <_realloc_r>
 800a7c2:	4606      	mov	r6, r0
 800a7c4:	2800      	cmp	r0, #0
 800a7c6:	d1e1      	bne.n	800a78c <__ssputs_r+0x70>
 800a7c8:	6921      	ldr	r1, [r4, #16]
 800a7ca:	4650      	mov	r0, sl
 800a7cc:	f7ff fec6 	bl	800a55c <_free_r>
 800a7d0:	e7c7      	b.n	800a762 <__ssputs_r+0x46>
	...

0800a7d4 <_svfiprintf_r>:
 800a7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7d8:	4698      	mov	r8, r3
 800a7da:	898b      	ldrh	r3, [r1, #12]
 800a7dc:	061b      	lsls	r3, r3, #24
 800a7de:	b09d      	sub	sp, #116	; 0x74
 800a7e0:	4607      	mov	r7, r0
 800a7e2:	460d      	mov	r5, r1
 800a7e4:	4614      	mov	r4, r2
 800a7e6:	d50e      	bpl.n	800a806 <_svfiprintf_r+0x32>
 800a7e8:	690b      	ldr	r3, [r1, #16]
 800a7ea:	b963      	cbnz	r3, 800a806 <_svfiprintf_r+0x32>
 800a7ec:	2140      	movs	r1, #64	; 0x40
 800a7ee:	f7ff ff21 	bl	800a634 <_malloc_r>
 800a7f2:	6028      	str	r0, [r5, #0]
 800a7f4:	6128      	str	r0, [r5, #16]
 800a7f6:	b920      	cbnz	r0, 800a802 <_svfiprintf_r+0x2e>
 800a7f8:	230c      	movs	r3, #12
 800a7fa:	603b      	str	r3, [r7, #0]
 800a7fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a800:	e0d1      	b.n	800a9a6 <_svfiprintf_r+0x1d2>
 800a802:	2340      	movs	r3, #64	; 0x40
 800a804:	616b      	str	r3, [r5, #20]
 800a806:	2300      	movs	r3, #0
 800a808:	9309      	str	r3, [sp, #36]	; 0x24
 800a80a:	2320      	movs	r3, #32
 800a80c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a810:	f8cd 800c 	str.w	r8, [sp, #12]
 800a814:	2330      	movs	r3, #48	; 0x30
 800a816:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a9c0 <_svfiprintf_r+0x1ec>
 800a81a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a81e:	f04f 0901 	mov.w	r9, #1
 800a822:	4623      	mov	r3, r4
 800a824:	469a      	mov	sl, r3
 800a826:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a82a:	b10a      	cbz	r2, 800a830 <_svfiprintf_r+0x5c>
 800a82c:	2a25      	cmp	r2, #37	; 0x25
 800a82e:	d1f9      	bne.n	800a824 <_svfiprintf_r+0x50>
 800a830:	ebba 0b04 	subs.w	fp, sl, r4
 800a834:	d00b      	beq.n	800a84e <_svfiprintf_r+0x7a>
 800a836:	465b      	mov	r3, fp
 800a838:	4622      	mov	r2, r4
 800a83a:	4629      	mov	r1, r5
 800a83c:	4638      	mov	r0, r7
 800a83e:	f7ff ff6d 	bl	800a71c <__ssputs_r>
 800a842:	3001      	adds	r0, #1
 800a844:	f000 80aa 	beq.w	800a99c <_svfiprintf_r+0x1c8>
 800a848:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a84a:	445a      	add	r2, fp
 800a84c:	9209      	str	r2, [sp, #36]	; 0x24
 800a84e:	f89a 3000 	ldrb.w	r3, [sl]
 800a852:	2b00      	cmp	r3, #0
 800a854:	f000 80a2 	beq.w	800a99c <_svfiprintf_r+0x1c8>
 800a858:	2300      	movs	r3, #0
 800a85a:	f04f 32ff 	mov.w	r2, #4294967295
 800a85e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a862:	f10a 0a01 	add.w	sl, sl, #1
 800a866:	9304      	str	r3, [sp, #16]
 800a868:	9307      	str	r3, [sp, #28]
 800a86a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a86e:	931a      	str	r3, [sp, #104]	; 0x68
 800a870:	4654      	mov	r4, sl
 800a872:	2205      	movs	r2, #5
 800a874:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a878:	4851      	ldr	r0, [pc, #324]	; (800a9c0 <_svfiprintf_r+0x1ec>)
 800a87a:	f7f5 fcb9 	bl	80001f0 <memchr>
 800a87e:	9a04      	ldr	r2, [sp, #16]
 800a880:	b9d8      	cbnz	r0, 800a8ba <_svfiprintf_r+0xe6>
 800a882:	06d0      	lsls	r0, r2, #27
 800a884:	bf44      	itt	mi
 800a886:	2320      	movmi	r3, #32
 800a888:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a88c:	0711      	lsls	r1, r2, #28
 800a88e:	bf44      	itt	mi
 800a890:	232b      	movmi	r3, #43	; 0x2b
 800a892:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a896:	f89a 3000 	ldrb.w	r3, [sl]
 800a89a:	2b2a      	cmp	r3, #42	; 0x2a
 800a89c:	d015      	beq.n	800a8ca <_svfiprintf_r+0xf6>
 800a89e:	9a07      	ldr	r2, [sp, #28]
 800a8a0:	4654      	mov	r4, sl
 800a8a2:	2000      	movs	r0, #0
 800a8a4:	f04f 0c0a 	mov.w	ip, #10
 800a8a8:	4621      	mov	r1, r4
 800a8aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8ae:	3b30      	subs	r3, #48	; 0x30
 800a8b0:	2b09      	cmp	r3, #9
 800a8b2:	d94e      	bls.n	800a952 <_svfiprintf_r+0x17e>
 800a8b4:	b1b0      	cbz	r0, 800a8e4 <_svfiprintf_r+0x110>
 800a8b6:	9207      	str	r2, [sp, #28]
 800a8b8:	e014      	b.n	800a8e4 <_svfiprintf_r+0x110>
 800a8ba:	eba0 0308 	sub.w	r3, r0, r8
 800a8be:	fa09 f303 	lsl.w	r3, r9, r3
 800a8c2:	4313      	orrs	r3, r2
 800a8c4:	9304      	str	r3, [sp, #16]
 800a8c6:	46a2      	mov	sl, r4
 800a8c8:	e7d2      	b.n	800a870 <_svfiprintf_r+0x9c>
 800a8ca:	9b03      	ldr	r3, [sp, #12]
 800a8cc:	1d19      	adds	r1, r3, #4
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	9103      	str	r1, [sp, #12]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	bfbb      	ittet	lt
 800a8d6:	425b      	neglt	r3, r3
 800a8d8:	f042 0202 	orrlt.w	r2, r2, #2
 800a8dc:	9307      	strge	r3, [sp, #28]
 800a8de:	9307      	strlt	r3, [sp, #28]
 800a8e0:	bfb8      	it	lt
 800a8e2:	9204      	strlt	r2, [sp, #16]
 800a8e4:	7823      	ldrb	r3, [r4, #0]
 800a8e6:	2b2e      	cmp	r3, #46	; 0x2e
 800a8e8:	d10c      	bne.n	800a904 <_svfiprintf_r+0x130>
 800a8ea:	7863      	ldrb	r3, [r4, #1]
 800a8ec:	2b2a      	cmp	r3, #42	; 0x2a
 800a8ee:	d135      	bne.n	800a95c <_svfiprintf_r+0x188>
 800a8f0:	9b03      	ldr	r3, [sp, #12]
 800a8f2:	1d1a      	adds	r2, r3, #4
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	9203      	str	r2, [sp, #12]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	bfb8      	it	lt
 800a8fc:	f04f 33ff 	movlt.w	r3, #4294967295
 800a900:	3402      	adds	r4, #2
 800a902:	9305      	str	r3, [sp, #20]
 800a904:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a9d0 <_svfiprintf_r+0x1fc>
 800a908:	7821      	ldrb	r1, [r4, #0]
 800a90a:	2203      	movs	r2, #3
 800a90c:	4650      	mov	r0, sl
 800a90e:	f7f5 fc6f 	bl	80001f0 <memchr>
 800a912:	b140      	cbz	r0, 800a926 <_svfiprintf_r+0x152>
 800a914:	2340      	movs	r3, #64	; 0x40
 800a916:	eba0 000a 	sub.w	r0, r0, sl
 800a91a:	fa03 f000 	lsl.w	r0, r3, r0
 800a91e:	9b04      	ldr	r3, [sp, #16]
 800a920:	4303      	orrs	r3, r0
 800a922:	3401      	adds	r4, #1
 800a924:	9304      	str	r3, [sp, #16]
 800a926:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a92a:	4826      	ldr	r0, [pc, #152]	; (800a9c4 <_svfiprintf_r+0x1f0>)
 800a92c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a930:	2206      	movs	r2, #6
 800a932:	f7f5 fc5d 	bl	80001f0 <memchr>
 800a936:	2800      	cmp	r0, #0
 800a938:	d038      	beq.n	800a9ac <_svfiprintf_r+0x1d8>
 800a93a:	4b23      	ldr	r3, [pc, #140]	; (800a9c8 <_svfiprintf_r+0x1f4>)
 800a93c:	bb1b      	cbnz	r3, 800a986 <_svfiprintf_r+0x1b2>
 800a93e:	9b03      	ldr	r3, [sp, #12]
 800a940:	3307      	adds	r3, #7
 800a942:	f023 0307 	bic.w	r3, r3, #7
 800a946:	3308      	adds	r3, #8
 800a948:	9303      	str	r3, [sp, #12]
 800a94a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a94c:	4433      	add	r3, r6
 800a94e:	9309      	str	r3, [sp, #36]	; 0x24
 800a950:	e767      	b.n	800a822 <_svfiprintf_r+0x4e>
 800a952:	fb0c 3202 	mla	r2, ip, r2, r3
 800a956:	460c      	mov	r4, r1
 800a958:	2001      	movs	r0, #1
 800a95a:	e7a5      	b.n	800a8a8 <_svfiprintf_r+0xd4>
 800a95c:	2300      	movs	r3, #0
 800a95e:	3401      	adds	r4, #1
 800a960:	9305      	str	r3, [sp, #20]
 800a962:	4619      	mov	r1, r3
 800a964:	f04f 0c0a 	mov.w	ip, #10
 800a968:	4620      	mov	r0, r4
 800a96a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a96e:	3a30      	subs	r2, #48	; 0x30
 800a970:	2a09      	cmp	r2, #9
 800a972:	d903      	bls.n	800a97c <_svfiprintf_r+0x1a8>
 800a974:	2b00      	cmp	r3, #0
 800a976:	d0c5      	beq.n	800a904 <_svfiprintf_r+0x130>
 800a978:	9105      	str	r1, [sp, #20]
 800a97a:	e7c3      	b.n	800a904 <_svfiprintf_r+0x130>
 800a97c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a980:	4604      	mov	r4, r0
 800a982:	2301      	movs	r3, #1
 800a984:	e7f0      	b.n	800a968 <_svfiprintf_r+0x194>
 800a986:	ab03      	add	r3, sp, #12
 800a988:	9300      	str	r3, [sp, #0]
 800a98a:	462a      	mov	r2, r5
 800a98c:	4b0f      	ldr	r3, [pc, #60]	; (800a9cc <_svfiprintf_r+0x1f8>)
 800a98e:	a904      	add	r1, sp, #16
 800a990:	4638      	mov	r0, r7
 800a992:	f7fd ffb7 	bl	8008904 <_printf_float>
 800a996:	1c42      	adds	r2, r0, #1
 800a998:	4606      	mov	r6, r0
 800a99a:	d1d6      	bne.n	800a94a <_svfiprintf_r+0x176>
 800a99c:	89ab      	ldrh	r3, [r5, #12]
 800a99e:	065b      	lsls	r3, r3, #25
 800a9a0:	f53f af2c 	bmi.w	800a7fc <_svfiprintf_r+0x28>
 800a9a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a9a6:	b01d      	add	sp, #116	; 0x74
 800a9a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9ac:	ab03      	add	r3, sp, #12
 800a9ae:	9300      	str	r3, [sp, #0]
 800a9b0:	462a      	mov	r2, r5
 800a9b2:	4b06      	ldr	r3, [pc, #24]	; (800a9cc <_svfiprintf_r+0x1f8>)
 800a9b4:	a904      	add	r1, sp, #16
 800a9b6:	4638      	mov	r0, r7
 800a9b8:	f7fe fa48 	bl	8008e4c <_printf_i>
 800a9bc:	e7eb      	b.n	800a996 <_svfiprintf_r+0x1c2>
 800a9be:	bf00      	nop
 800a9c0:	0800c714 	.word	0x0800c714
 800a9c4:	0800c71e 	.word	0x0800c71e
 800a9c8:	08008905 	.word	0x08008905
 800a9cc:	0800a71d 	.word	0x0800a71d
 800a9d0:	0800c71a 	.word	0x0800c71a

0800a9d4 <_sbrk_r>:
 800a9d4:	b538      	push	{r3, r4, r5, lr}
 800a9d6:	4d06      	ldr	r5, [pc, #24]	; (800a9f0 <_sbrk_r+0x1c>)
 800a9d8:	2300      	movs	r3, #0
 800a9da:	4604      	mov	r4, r0
 800a9dc:	4608      	mov	r0, r1
 800a9de:	602b      	str	r3, [r5, #0]
 800a9e0:	f7f9 fb5c 	bl	800409c <_sbrk>
 800a9e4:	1c43      	adds	r3, r0, #1
 800a9e6:	d102      	bne.n	800a9ee <_sbrk_r+0x1a>
 800a9e8:	682b      	ldr	r3, [r5, #0]
 800a9ea:	b103      	cbz	r3, 800a9ee <_sbrk_r+0x1a>
 800a9ec:	6023      	str	r3, [r4, #0]
 800a9ee:	bd38      	pop	{r3, r4, r5, pc}
 800a9f0:	20000568 	.word	0x20000568

0800a9f4 <__assert_func>:
 800a9f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a9f6:	4614      	mov	r4, r2
 800a9f8:	461a      	mov	r2, r3
 800a9fa:	4b09      	ldr	r3, [pc, #36]	; (800aa20 <__assert_func+0x2c>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	4605      	mov	r5, r0
 800aa00:	68d8      	ldr	r0, [r3, #12]
 800aa02:	b14c      	cbz	r4, 800aa18 <__assert_func+0x24>
 800aa04:	4b07      	ldr	r3, [pc, #28]	; (800aa24 <__assert_func+0x30>)
 800aa06:	9100      	str	r1, [sp, #0]
 800aa08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aa0c:	4906      	ldr	r1, [pc, #24]	; (800aa28 <__assert_func+0x34>)
 800aa0e:	462b      	mov	r3, r5
 800aa10:	f000 f80e 	bl	800aa30 <fiprintf>
 800aa14:	f000 faac 	bl	800af70 <abort>
 800aa18:	4b04      	ldr	r3, [pc, #16]	; (800aa2c <__assert_func+0x38>)
 800aa1a:	461c      	mov	r4, r3
 800aa1c:	e7f3      	b.n	800aa06 <__assert_func+0x12>
 800aa1e:	bf00      	nop
 800aa20:	20000040 	.word	0x20000040
 800aa24:	0800c725 	.word	0x0800c725
 800aa28:	0800c732 	.word	0x0800c732
 800aa2c:	0800c760 	.word	0x0800c760

0800aa30 <fiprintf>:
 800aa30:	b40e      	push	{r1, r2, r3}
 800aa32:	b503      	push	{r0, r1, lr}
 800aa34:	4601      	mov	r1, r0
 800aa36:	ab03      	add	r3, sp, #12
 800aa38:	4805      	ldr	r0, [pc, #20]	; (800aa50 <fiprintf+0x20>)
 800aa3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa3e:	6800      	ldr	r0, [r0, #0]
 800aa40:	9301      	str	r3, [sp, #4]
 800aa42:	f000 f897 	bl	800ab74 <_vfiprintf_r>
 800aa46:	b002      	add	sp, #8
 800aa48:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa4c:	b003      	add	sp, #12
 800aa4e:	4770      	bx	lr
 800aa50:	20000040 	.word	0x20000040

0800aa54 <__ascii_mbtowc>:
 800aa54:	b082      	sub	sp, #8
 800aa56:	b901      	cbnz	r1, 800aa5a <__ascii_mbtowc+0x6>
 800aa58:	a901      	add	r1, sp, #4
 800aa5a:	b142      	cbz	r2, 800aa6e <__ascii_mbtowc+0x1a>
 800aa5c:	b14b      	cbz	r3, 800aa72 <__ascii_mbtowc+0x1e>
 800aa5e:	7813      	ldrb	r3, [r2, #0]
 800aa60:	600b      	str	r3, [r1, #0]
 800aa62:	7812      	ldrb	r2, [r2, #0]
 800aa64:	1e10      	subs	r0, r2, #0
 800aa66:	bf18      	it	ne
 800aa68:	2001      	movne	r0, #1
 800aa6a:	b002      	add	sp, #8
 800aa6c:	4770      	bx	lr
 800aa6e:	4610      	mov	r0, r2
 800aa70:	e7fb      	b.n	800aa6a <__ascii_mbtowc+0x16>
 800aa72:	f06f 0001 	mvn.w	r0, #1
 800aa76:	e7f8      	b.n	800aa6a <__ascii_mbtowc+0x16>

0800aa78 <memmove>:
 800aa78:	4288      	cmp	r0, r1
 800aa7a:	b510      	push	{r4, lr}
 800aa7c:	eb01 0402 	add.w	r4, r1, r2
 800aa80:	d902      	bls.n	800aa88 <memmove+0x10>
 800aa82:	4284      	cmp	r4, r0
 800aa84:	4623      	mov	r3, r4
 800aa86:	d807      	bhi.n	800aa98 <memmove+0x20>
 800aa88:	1e43      	subs	r3, r0, #1
 800aa8a:	42a1      	cmp	r1, r4
 800aa8c:	d008      	beq.n	800aaa0 <memmove+0x28>
 800aa8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa92:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aa96:	e7f8      	b.n	800aa8a <memmove+0x12>
 800aa98:	4402      	add	r2, r0
 800aa9a:	4601      	mov	r1, r0
 800aa9c:	428a      	cmp	r2, r1
 800aa9e:	d100      	bne.n	800aaa2 <memmove+0x2a>
 800aaa0:	bd10      	pop	{r4, pc}
 800aaa2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aaa6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aaaa:	e7f7      	b.n	800aa9c <memmove+0x24>

0800aaac <__malloc_lock>:
 800aaac:	4801      	ldr	r0, [pc, #4]	; (800aab4 <__malloc_lock+0x8>)
 800aaae:	f000 bc1f 	b.w	800b2f0 <__retarget_lock_acquire_recursive>
 800aab2:	bf00      	nop
 800aab4:	2000056c 	.word	0x2000056c

0800aab8 <__malloc_unlock>:
 800aab8:	4801      	ldr	r0, [pc, #4]	; (800aac0 <__malloc_unlock+0x8>)
 800aaba:	f000 bc1a 	b.w	800b2f2 <__retarget_lock_release_recursive>
 800aabe:	bf00      	nop
 800aac0:	2000056c 	.word	0x2000056c

0800aac4 <_realloc_r>:
 800aac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aac8:	4680      	mov	r8, r0
 800aaca:	4614      	mov	r4, r2
 800aacc:	460e      	mov	r6, r1
 800aace:	b921      	cbnz	r1, 800aada <_realloc_r+0x16>
 800aad0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aad4:	4611      	mov	r1, r2
 800aad6:	f7ff bdad 	b.w	800a634 <_malloc_r>
 800aada:	b92a      	cbnz	r2, 800aae8 <_realloc_r+0x24>
 800aadc:	f7ff fd3e 	bl	800a55c <_free_r>
 800aae0:	4625      	mov	r5, r4
 800aae2:	4628      	mov	r0, r5
 800aae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aae8:	f000 fc6a 	bl	800b3c0 <_malloc_usable_size_r>
 800aaec:	4284      	cmp	r4, r0
 800aaee:	4607      	mov	r7, r0
 800aaf0:	d802      	bhi.n	800aaf8 <_realloc_r+0x34>
 800aaf2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aaf6:	d812      	bhi.n	800ab1e <_realloc_r+0x5a>
 800aaf8:	4621      	mov	r1, r4
 800aafa:	4640      	mov	r0, r8
 800aafc:	f7ff fd9a 	bl	800a634 <_malloc_r>
 800ab00:	4605      	mov	r5, r0
 800ab02:	2800      	cmp	r0, #0
 800ab04:	d0ed      	beq.n	800aae2 <_realloc_r+0x1e>
 800ab06:	42bc      	cmp	r4, r7
 800ab08:	4622      	mov	r2, r4
 800ab0a:	4631      	mov	r1, r6
 800ab0c:	bf28      	it	cs
 800ab0e:	463a      	movcs	r2, r7
 800ab10:	f7ff f97c 	bl	8009e0c <memcpy>
 800ab14:	4631      	mov	r1, r6
 800ab16:	4640      	mov	r0, r8
 800ab18:	f7ff fd20 	bl	800a55c <_free_r>
 800ab1c:	e7e1      	b.n	800aae2 <_realloc_r+0x1e>
 800ab1e:	4635      	mov	r5, r6
 800ab20:	e7df      	b.n	800aae2 <_realloc_r+0x1e>

0800ab22 <__sfputc_r>:
 800ab22:	6893      	ldr	r3, [r2, #8]
 800ab24:	3b01      	subs	r3, #1
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	b410      	push	{r4}
 800ab2a:	6093      	str	r3, [r2, #8]
 800ab2c:	da08      	bge.n	800ab40 <__sfputc_r+0x1e>
 800ab2e:	6994      	ldr	r4, [r2, #24]
 800ab30:	42a3      	cmp	r3, r4
 800ab32:	db01      	blt.n	800ab38 <__sfputc_r+0x16>
 800ab34:	290a      	cmp	r1, #10
 800ab36:	d103      	bne.n	800ab40 <__sfputc_r+0x1e>
 800ab38:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab3c:	f000 b94a 	b.w	800add4 <__swbuf_r>
 800ab40:	6813      	ldr	r3, [r2, #0]
 800ab42:	1c58      	adds	r0, r3, #1
 800ab44:	6010      	str	r0, [r2, #0]
 800ab46:	7019      	strb	r1, [r3, #0]
 800ab48:	4608      	mov	r0, r1
 800ab4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab4e:	4770      	bx	lr

0800ab50 <__sfputs_r>:
 800ab50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab52:	4606      	mov	r6, r0
 800ab54:	460f      	mov	r7, r1
 800ab56:	4614      	mov	r4, r2
 800ab58:	18d5      	adds	r5, r2, r3
 800ab5a:	42ac      	cmp	r4, r5
 800ab5c:	d101      	bne.n	800ab62 <__sfputs_r+0x12>
 800ab5e:	2000      	movs	r0, #0
 800ab60:	e007      	b.n	800ab72 <__sfputs_r+0x22>
 800ab62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab66:	463a      	mov	r2, r7
 800ab68:	4630      	mov	r0, r6
 800ab6a:	f7ff ffda 	bl	800ab22 <__sfputc_r>
 800ab6e:	1c43      	adds	r3, r0, #1
 800ab70:	d1f3      	bne.n	800ab5a <__sfputs_r+0xa>
 800ab72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ab74 <_vfiprintf_r>:
 800ab74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab78:	460d      	mov	r5, r1
 800ab7a:	b09d      	sub	sp, #116	; 0x74
 800ab7c:	4614      	mov	r4, r2
 800ab7e:	4698      	mov	r8, r3
 800ab80:	4606      	mov	r6, r0
 800ab82:	b118      	cbz	r0, 800ab8c <_vfiprintf_r+0x18>
 800ab84:	6983      	ldr	r3, [r0, #24]
 800ab86:	b90b      	cbnz	r3, 800ab8c <_vfiprintf_r+0x18>
 800ab88:	f000 fb14 	bl	800b1b4 <__sinit>
 800ab8c:	4b89      	ldr	r3, [pc, #548]	; (800adb4 <_vfiprintf_r+0x240>)
 800ab8e:	429d      	cmp	r5, r3
 800ab90:	d11b      	bne.n	800abca <_vfiprintf_r+0x56>
 800ab92:	6875      	ldr	r5, [r6, #4]
 800ab94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab96:	07d9      	lsls	r1, r3, #31
 800ab98:	d405      	bmi.n	800aba6 <_vfiprintf_r+0x32>
 800ab9a:	89ab      	ldrh	r3, [r5, #12]
 800ab9c:	059a      	lsls	r2, r3, #22
 800ab9e:	d402      	bmi.n	800aba6 <_vfiprintf_r+0x32>
 800aba0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aba2:	f000 fba5 	bl	800b2f0 <__retarget_lock_acquire_recursive>
 800aba6:	89ab      	ldrh	r3, [r5, #12]
 800aba8:	071b      	lsls	r3, r3, #28
 800abaa:	d501      	bpl.n	800abb0 <_vfiprintf_r+0x3c>
 800abac:	692b      	ldr	r3, [r5, #16]
 800abae:	b9eb      	cbnz	r3, 800abec <_vfiprintf_r+0x78>
 800abb0:	4629      	mov	r1, r5
 800abb2:	4630      	mov	r0, r6
 800abb4:	f000 f96e 	bl	800ae94 <__swsetup_r>
 800abb8:	b1c0      	cbz	r0, 800abec <_vfiprintf_r+0x78>
 800abba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abbc:	07dc      	lsls	r4, r3, #31
 800abbe:	d50e      	bpl.n	800abde <_vfiprintf_r+0x6a>
 800abc0:	f04f 30ff 	mov.w	r0, #4294967295
 800abc4:	b01d      	add	sp, #116	; 0x74
 800abc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abca:	4b7b      	ldr	r3, [pc, #492]	; (800adb8 <_vfiprintf_r+0x244>)
 800abcc:	429d      	cmp	r5, r3
 800abce:	d101      	bne.n	800abd4 <_vfiprintf_r+0x60>
 800abd0:	68b5      	ldr	r5, [r6, #8]
 800abd2:	e7df      	b.n	800ab94 <_vfiprintf_r+0x20>
 800abd4:	4b79      	ldr	r3, [pc, #484]	; (800adbc <_vfiprintf_r+0x248>)
 800abd6:	429d      	cmp	r5, r3
 800abd8:	bf08      	it	eq
 800abda:	68f5      	ldreq	r5, [r6, #12]
 800abdc:	e7da      	b.n	800ab94 <_vfiprintf_r+0x20>
 800abde:	89ab      	ldrh	r3, [r5, #12]
 800abe0:	0598      	lsls	r0, r3, #22
 800abe2:	d4ed      	bmi.n	800abc0 <_vfiprintf_r+0x4c>
 800abe4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abe6:	f000 fb84 	bl	800b2f2 <__retarget_lock_release_recursive>
 800abea:	e7e9      	b.n	800abc0 <_vfiprintf_r+0x4c>
 800abec:	2300      	movs	r3, #0
 800abee:	9309      	str	r3, [sp, #36]	; 0x24
 800abf0:	2320      	movs	r3, #32
 800abf2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800abf6:	f8cd 800c 	str.w	r8, [sp, #12]
 800abfa:	2330      	movs	r3, #48	; 0x30
 800abfc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800adc0 <_vfiprintf_r+0x24c>
 800ac00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac04:	f04f 0901 	mov.w	r9, #1
 800ac08:	4623      	mov	r3, r4
 800ac0a:	469a      	mov	sl, r3
 800ac0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac10:	b10a      	cbz	r2, 800ac16 <_vfiprintf_r+0xa2>
 800ac12:	2a25      	cmp	r2, #37	; 0x25
 800ac14:	d1f9      	bne.n	800ac0a <_vfiprintf_r+0x96>
 800ac16:	ebba 0b04 	subs.w	fp, sl, r4
 800ac1a:	d00b      	beq.n	800ac34 <_vfiprintf_r+0xc0>
 800ac1c:	465b      	mov	r3, fp
 800ac1e:	4622      	mov	r2, r4
 800ac20:	4629      	mov	r1, r5
 800ac22:	4630      	mov	r0, r6
 800ac24:	f7ff ff94 	bl	800ab50 <__sfputs_r>
 800ac28:	3001      	adds	r0, #1
 800ac2a:	f000 80aa 	beq.w	800ad82 <_vfiprintf_r+0x20e>
 800ac2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac30:	445a      	add	r2, fp
 800ac32:	9209      	str	r2, [sp, #36]	; 0x24
 800ac34:	f89a 3000 	ldrb.w	r3, [sl]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	f000 80a2 	beq.w	800ad82 <_vfiprintf_r+0x20e>
 800ac3e:	2300      	movs	r3, #0
 800ac40:	f04f 32ff 	mov.w	r2, #4294967295
 800ac44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac48:	f10a 0a01 	add.w	sl, sl, #1
 800ac4c:	9304      	str	r3, [sp, #16]
 800ac4e:	9307      	str	r3, [sp, #28]
 800ac50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ac54:	931a      	str	r3, [sp, #104]	; 0x68
 800ac56:	4654      	mov	r4, sl
 800ac58:	2205      	movs	r2, #5
 800ac5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac5e:	4858      	ldr	r0, [pc, #352]	; (800adc0 <_vfiprintf_r+0x24c>)
 800ac60:	f7f5 fac6 	bl	80001f0 <memchr>
 800ac64:	9a04      	ldr	r2, [sp, #16]
 800ac66:	b9d8      	cbnz	r0, 800aca0 <_vfiprintf_r+0x12c>
 800ac68:	06d1      	lsls	r1, r2, #27
 800ac6a:	bf44      	itt	mi
 800ac6c:	2320      	movmi	r3, #32
 800ac6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac72:	0713      	lsls	r3, r2, #28
 800ac74:	bf44      	itt	mi
 800ac76:	232b      	movmi	r3, #43	; 0x2b
 800ac78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac7c:	f89a 3000 	ldrb.w	r3, [sl]
 800ac80:	2b2a      	cmp	r3, #42	; 0x2a
 800ac82:	d015      	beq.n	800acb0 <_vfiprintf_r+0x13c>
 800ac84:	9a07      	ldr	r2, [sp, #28]
 800ac86:	4654      	mov	r4, sl
 800ac88:	2000      	movs	r0, #0
 800ac8a:	f04f 0c0a 	mov.w	ip, #10
 800ac8e:	4621      	mov	r1, r4
 800ac90:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac94:	3b30      	subs	r3, #48	; 0x30
 800ac96:	2b09      	cmp	r3, #9
 800ac98:	d94e      	bls.n	800ad38 <_vfiprintf_r+0x1c4>
 800ac9a:	b1b0      	cbz	r0, 800acca <_vfiprintf_r+0x156>
 800ac9c:	9207      	str	r2, [sp, #28]
 800ac9e:	e014      	b.n	800acca <_vfiprintf_r+0x156>
 800aca0:	eba0 0308 	sub.w	r3, r0, r8
 800aca4:	fa09 f303 	lsl.w	r3, r9, r3
 800aca8:	4313      	orrs	r3, r2
 800acaa:	9304      	str	r3, [sp, #16]
 800acac:	46a2      	mov	sl, r4
 800acae:	e7d2      	b.n	800ac56 <_vfiprintf_r+0xe2>
 800acb0:	9b03      	ldr	r3, [sp, #12]
 800acb2:	1d19      	adds	r1, r3, #4
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	9103      	str	r1, [sp, #12]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	bfbb      	ittet	lt
 800acbc:	425b      	neglt	r3, r3
 800acbe:	f042 0202 	orrlt.w	r2, r2, #2
 800acc2:	9307      	strge	r3, [sp, #28]
 800acc4:	9307      	strlt	r3, [sp, #28]
 800acc6:	bfb8      	it	lt
 800acc8:	9204      	strlt	r2, [sp, #16]
 800acca:	7823      	ldrb	r3, [r4, #0]
 800accc:	2b2e      	cmp	r3, #46	; 0x2e
 800acce:	d10c      	bne.n	800acea <_vfiprintf_r+0x176>
 800acd0:	7863      	ldrb	r3, [r4, #1]
 800acd2:	2b2a      	cmp	r3, #42	; 0x2a
 800acd4:	d135      	bne.n	800ad42 <_vfiprintf_r+0x1ce>
 800acd6:	9b03      	ldr	r3, [sp, #12]
 800acd8:	1d1a      	adds	r2, r3, #4
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	9203      	str	r2, [sp, #12]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	bfb8      	it	lt
 800ace2:	f04f 33ff 	movlt.w	r3, #4294967295
 800ace6:	3402      	adds	r4, #2
 800ace8:	9305      	str	r3, [sp, #20]
 800acea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800add0 <_vfiprintf_r+0x25c>
 800acee:	7821      	ldrb	r1, [r4, #0]
 800acf0:	2203      	movs	r2, #3
 800acf2:	4650      	mov	r0, sl
 800acf4:	f7f5 fa7c 	bl	80001f0 <memchr>
 800acf8:	b140      	cbz	r0, 800ad0c <_vfiprintf_r+0x198>
 800acfa:	2340      	movs	r3, #64	; 0x40
 800acfc:	eba0 000a 	sub.w	r0, r0, sl
 800ad00:	fa03 f000 	lsl.w	r0, r3, r0
 800ad04:	9b04      	ldr	r3, [sp, #16]
 800ad06:	4303      	orrs	r3, r0
 800ad08:	3401      	adds	r4, #1
 800ad0a:	9304      	str	r3, [sp, #16]
 800ad0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad10:	482c      	ldr	r0, [pc, #176]	; (800adc4 <_vfiprintf_r+0x250>)
 800ad12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad16:	2206      	movs	r2, #6
 800ad18:	f7f5 fa6a 	bl	80001f0 <memchr>
 800ad1c:	2800      	cmp	r0, #0
 800ad1e:	d03f      	beq.n	800ada0 <_vfiprintf_r+0x22c>
 800ad20:	4b29      	ldr	r3, [pc, #164]	; (800adc8 <_vfiprintf_r+0x254>)
 800ad22:	bb1b      	cbnz	r3, 800ad6c <_vfiprintf_r+0x1f8>
 800ad24:	9b03      	ldr	r3, [sp, #12]
 800ad26:	3307      	adds	r3, #7
 800ad28:	f023 0307 	bic.w	r3, r3, #7
 800ad2c:	3308      	adds	r3, #8
 800ad2e:	9303      	str	r3, [sp, #12]
 800ad30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad32:	443b      	add	r3, r7
 800ad34:	9309      	str	r3, [sp, #36]	; 0x24
 800ad36:	e767      	b.n	800ac08 <_vfiprintf_r+0x94>
 800ad38:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad3c:	460c      	mov	r4, r1
 800ad3e:	2001      	movs	r0, #1
 800ad40:	e7a5      	b.n	800ac8e <_vfiprintf_r+0x11a>
 800ad42:	2300      	movs	r3, #0
 800ad44:	3401      	adds	r4, #1
 800ad46:	9305      	str	r3, [sp, #20]
 800ad48:	4619      	mov	r1, r3
 800ad4a:	f04f 0c0a 	mov.w	ip, #10
 800ad4e:	4620      	mov	r0, r4
 800ad50:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad54:	3a30      	subs	r2, #48	; 0x30
 800ad56:	2a09      	cmp	r2, #9
 800ad58:	d903      	bls.n	800ad62 <_vfiprintf_r+0x1ee>
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d0c5      	beq.n	800acea <_vfiprintf_r+0x176>
 800ad5e:	9105      	str	r1, [sp, #20]
 800ad60:	e7c3      	b.n	800acea <_vfiprintf_r+0x176>
 800ad62:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad66:	4604      	mov	r4, r0
 800ad68:	2301      	movs	r3, #1
 800ad6a:	e7f0      	b.n	800ad4e <_vfiprintf_r+0x1da>
 800ad6c:	ab03      	add	r3, sp, #12
 800ad6e:	9300      	str	r3, [sp, #0]
 800ad70:	462a      	mov	r2, r5
 800ad72:	4b16      	ldr	r3, [pc, #88]	; (800adcc <_vfiprintf_r+0x258>)
 800ad74:	a904      	add	r1, sp, #16
 800ad76:	4630      	mov	r0, r6
 800ad78:	f7fd fdc4 	bl	8008904 <_printf_float>
 800ad7c:	4607      	mov	r7, r0
 800ad7e:	1c78      	adds	r0, r7, #1
 800ad80:	d1d6      	bne.n	800ad30 <_vfiprintf_r+0x1bc>
 800ad82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad84:	07d9      	lsls	r1, r3, #31
 800ad86:	d405      	bmi.n	800ad94 <_vfiprintf_r+0x220>
 800ad88:	89ab      	ldrh	r3, [r5, #12]
 800ad8a:	059a      	lsls	r2, r3, #22
 800ad8c:	d402      	bmi.n	800ad94 <_vfiprintf_r+0x220>
 800ad8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad90:	f000 faaf 	bl	800b2f2 <__retarget_lock_release_recursive>
 800ad94:	89ab      	ldrh	r3, [r5, #12]
 800ad96:	065b      	lsls	r3, r3, #25
 800ad98:	f53f af12 	bmi.w	800abc0 <_vfiprintf_r+0x4c>
 800ad9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad9e:	e711      	b.n	800abc4 <_vfiprintf_r+0x50>
 800ada0:	ab03      	add	r3, sp, #12
 800ada2:	9300      	str	r3, [sp, #0]
 800ada4:	462a      	mov	r2, r5
 800ada6:	4b09      	ldr	r3, [pc, #36]	; (800adcc <_vfiprintf_r+0x258>)
 800ada8:	a904      	add	r1, sp, #16
 800adaa:	4630      	mov	r0, r6
 800adac:	f7fe f84e 	bl	8008e4c <_printf_i>
 800adb0:	e7e4      	b.n	800ad7c <_vfiprintf_r+0x208>
 800adb2:	bf00      	nop
 800adb4:	0800c88c 	.word	0x0800c88c
 800adb8:	0800c8ac 	.word	0x0800c8ac
 800adbc:	0800c86c 	.word	0x0800c86c
 800adc0:	0800c714 	.word	0x0800c714
 800adc4:	0800c71e 	.word	0x0800c71e
 800adc8:	08008905 	.word	0x08008905
 800adcc:	0800ab51 	.word	0x0800ab51
 800add0:	0800c71a 	.word	0x0800c71a

0800add4 <__swbuf_r>:
 800add4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800add6:	460e      	mov	r6, r1
 800add8:	4614      	mov	r4, r2
 800adda:	4605      	mov	r5, r0
 800addc:	b118      	cbz	r0, 800ade6 <__swbuf_r+0x12>
 800adde:	6983      	ldr	r3, [r0, #24]
 800ade0:	b90b      	cbnz	r3, 800ade6 <__swbuf_r+0x12>
 800ade2:	f000 f9e7 	bl	800b1b4 <__sinit>
 800ade6:	4b21      	ldr	r3, [pc, #132]	; (800ae6c <__swbuf_r+0x98>)
 800ade8:	429c      	cmp	r4, r3
 800adea:	d12b      	bne.n	800ae44 <__swbuf_r+0x70>
 800adec:	686c      	ldr	r4, [r5, #4]
 800adee:	69a3      	ldr	r3, [r4, #24]
 800adf0:	60a3      	str	r3, [r4, #8]
 800adf2:	89a3      	ldrh	r3, [r4, #12]
 800adf4:	071a      	lsls	r2, r3, #28
 800adf6:	d52f      	bpl.n	800ae58 <__swbuf_r+0x84>
 800adf8:	6923      	ldr	r3, [r4, #16]
 800adfa:	b36b      	cbz	r3, 800ae58 <__swbuf_r+0x84>
 800adfc:	6923      	ldr	r3, [r4, #16]
 800adfe:	6820      	ldr	r0, [r4, #0]
 800ae00:	1ac0      	subs	r0, r0, r3
 800ae02:	6963      	ldr	r3, [r4, #20]
 800ae04:	b2f6      	uxtb	r6, r6
 800ae06:	4283      	cmp	r3, r0
 800ae08:	4637      	mov	r7, r6
 800ae0a:	dc04      	bgt.n	800ae16 <__swbuf_r+0x42>
 800ae0c:	4621      	mov	r1, r4
 800ae0e:	4628      	mov	r0, r5
 800ae10:	f000 f93c 	bl	800b08c <_fflush_r>
 800ae14:	bb30      	cbnz	r0, 800ae64 <__swbuf_r+0x90>
 800ae16:	68a3      	ldr	r3, [r4, #8]
 800ae18:	3b01      	subs	r3, #1
 800ae1a:	60a3      	str	r3, [r4, #8]
 800ae1c:	6823      	ldr	r3, [r4, #0]
 800ae1e:	1c5a      	adds	r2, r3, #1
 800ae20:	6022      	str	r2, [r4, #0]
 800ae22:	701e      	strb	r6, [r3, #0]
 800ae24:	6963      	ldr	r3, [r4, #20]
 800ae26:	3001      	adds	r0, #1
 800ae28:	4283      	cmp	r3, r0
 800ae2a:	d004      	beq.n	800ae36 <__swbuf_r+0x62>
 800ae2c:	89a3      	ldrh	r3, [r4, #12]
 800ae2e:	07db      	lsls	r3, r3, #31
 800ae30:	d506      	bpl.n	800ae40 <__swbuf_r+0x6c>
 800ae32:	2e0a      	cmp	r6, #10
 800ae34:	d104      	bne.n	800ae40 <__swbuf_r+0x6c>
 800ae36:	4621      	mov	r1, r4
 800ae38:	4628      	mov	r0, r5
 800ae3a:	f000 f927 	bl	800b08c <_fflush_r>
 800ae3e:	b988      	cbnz	r0, 800ae64 <__swbuf_r+0x90>
 800ae40:	4638      	mov	r0, r7
 800ae42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae44:	4b0a      	ldr	r3, [pc, #40]	; (800ae70 <__swbuf_r+0x9c>)
 800ae46:	429c      	cmp	r4, r3
 800ae48:	d101      	bne.n	800ae4e <__swbuf_r+0x7a>
 800ae4a:	68ac      	ldr	r4, [r5, #8]
 800ae4c:	e7cf      	b.n	800adee <__swbuf_r+0x1a>
 800ae4e:	4b09      	ldr	r3, [pc, #36]	; (800ae74 <__swbuf_r+0xa0>)
 800ae50:	429c      	cmp	r4, r3
 800ae52:	bf08      	it	eq
 800ae54:	68ec      	ldreq	r4, [r5, #12]
 800ae56:	e7ca      	b.n	800adee <__swbuf_r+0x1a>
 800ae58:	4621      	mov	r1, r4
 800ae5a:	4628      	mov	r0, r5
 800ae5c:	f000 f81a 	bl	800ae94 <__swsetup_r>
 800ae60:	2800      	cmp	r0, #0
 800ae62:	d0cb      	beq.n	800adfc <__swbuf_r+0x28>
 800ae64:	f04f 37ff 	mov.w	r7, #4294967295
 800ae68:	e7ea      	b.n	800ae40 <__swbuf_r+0x6c>
 800ae6a:	bf00      	nop
 800ae6c:	0800c88c 	.word	0x0800c88c
 800ae70:	0800c8ac 	.word	0x0800c8ac
 800ae74:	0800c86c 	.word	0x0800c86c

0800ae78 <__ascii_wctomb>:
 800ae78:	b149      	cbz	r1, 800ae8e <__ascii_wctomb+0x16>
 800ae7a:	2aff      	cmp	r2, #255	; 0xff
 800ae7c:	bf85      	ittet	hi
 800ae7e:	238a      	movhi	r3, #138	; 0x8a
 800ae80:	6003      	strhi	r3, [r0, #0]
 800ae82:	700a      	strbls	r2, [r1, #0]
 800ae84:	f04f 30ff 	movhi.w	r0, #4294967295
 800ae88:	bf98      	it	ls
 800ae8a:	2001      	movls	r0, #1
 800ae8c:	4770      	bx	lr
 800ae8e:	4608      	mov	r0, r1
 800ae90:	4770      	bx	lr
	...

0800ae94 <__swsetup_r>:
 800ae94:	4b32      	ldr	r3, [pc, #200]	; (800af60 <__swsetup_r+0xcc>)
 800ae96:	b570      	push	{r4, r5, r6, lr}
 800ae98:	681d      	ldr	r5, [r3, #0]
 800ae9a:	4606      	mov	r6, r0
 800ae9c:	460c      	mov	r4, r1
 800ae9e:	b125      	cbz	r5, 800aeaa <__swsetup_r+0x16>
 800aea0:	69ab      	ldr	r3, [r5, #24]
 800aea2:	b913      	cbnz	r3, 800aeaa <__swsetup_r+0x16>
 800aea4:	4628      	mov	r0, r5
 800aea6:	f000 f985 	bl	800b1b4 <__sinit>
 800aeaa:	4b2e      	ldr	r3, [pc, #184]	; (800af64 <__swsetup_r+0xd0>)
 800aeac:	429c      	cmp	r4, r3
 800aeae:	d10f      	bne.n	800aed0 <__swsetup_r+0x3c>
 800aeb0:	686c      	ldr	r4, [r5, #4]
 800aeb2:	89a3      	ldrh	r3, [r4, #12]
 800aeb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aeb8:	0719      	lsls	r1, r3, #28
 800aeba:	d42c      	bmi.n	800af16 <__swsetup_r+0x82>
 800aebc:	06dd      	lsls	r5, r3, #27
 800aebe:	d411      	bmi.n	800aee4 <__swsetup_r+0x50>
 800aec0:	2309      	movs	r3, #9
 800aec2:	6033      	str	r3, [r6, #0]
 800aec4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aec8:	81a3      	strh	r3, [r4, #12]
 800aeca:	f04f 30ff 	mov.w	r0, #4294967295
 800aece:	e03e      	b.n	800af4e <__swsetup_r+0xba>
 800aed0:	4b25      	ldr	r3, [pc, #148]	; (800af68 <__swsetup_r+0xd4>)
 800aed2:	429c      	cmp	r4, r3
 800aed4:	d101      	bne.n	800aeda <__swsetup_r+0x46>
 800aed6:	68ac      	ldr	r4, [r5, #8]
 800aed8:	e7eb      	b.n	800aeb2 <__swsetup_r+0x1e>
 800aeda:	4b24      	ldr	r3, [pc, #144]	; (800af6c <__swsetup_r+0xd8>)
 800aedc:	429c      	cmp	r4, r3
 800aede:	bf08      	it	eq
 800aee0:	68ec      	ldreq	r4, [r5, #12]
 800aee2:	e7e6      	b.n	800aeb2 <__swsetup_r+0x1e>
 800aee4:	0758      	lsls	r0, r3, #29
 800aee6:	d512      	bpl.n	800af0e <__swsetup_r+0x7a>
 800aee8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aeea:	b141      	cbz	r1, 800aefe <__swsetup_r+0x6a>
 800aeec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aef0:	4299      	cmp	r1, r3
 800aef2:	d002      	beq.n	800aefa <__swsetup_r+0x66>
 800aef4:	4630      	mov	r0, r6
 800aef6:	f7ff fb31 	bl	800a55c <_free_r>
 800aefa:	2300      	movs	r3, #0
 800aefc:	6363      	str	r3, [r4, #52]	; 0x34
 800aefe:	89a3      	ldrh	r3, [r4, #12]
 800af00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800af04:	81a3      	strh	r3, [r4, #12]
 800af06:	2300      	movs	r3, #0
 800af08:	6063      	str	r3, [r4, #4]
 800af0a:	6923      	ldr	r3, [r4, #16]
 800af0c:	6023      	str	r3, [r4, #0]
 800af0e:	89a3      	ldrh	r3, [r4, #12]
 800af10:	f043 0308 	orr.w	r3, r3, #8
 800af14:	81a3      	strh	r3, [r4, #12]
 800af16:	6923      	ldr	r3, [r4, #16]
 800af18:	b94b      	cbnz	r3, 800af2e <__swsetup_r+0x9a>
 800af1a:	89a3      	ldrh	r3, [r4, #12]
 800af1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800af20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af24:	d003      	beq.n	800af2e <__swsetup_r+0x9a>
 800af26:	4621      	mov	r1, r4
 800af28:	4630      	mov	r0, r6
 800af2a:	f000 fa09 	bl	800b340 <__smakebuf_r>
 800af2e:	89a0      	ldrh	r0, [r4, #12]
 800af30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af34:	f010 0301 	ands.w	r3, r0, #1
 800af38:	d00a      	beq.n	800af50 <__swsetup_r+0xbc>
 800af3a:	2300      	movs	r3, #0
 800af3c:	60a3      	str	r3, [r4, #8]
 800af3e:	6963      	ldr	r3, [r4, #20]
 800af40:	425b      	negs	r3, r3
 800af42:	61a3      	str	r3, [r4, #24]
 800af44:	6923      	ldr	r3, [r4, #16]
 800af46:	b943      	cbnz	r3, 800af5a <__swsetup_r+0xc6>
 800af48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800af4c:	d1ba      	bne.n	800aec4 <__swsetup_r+0x30>
 800af4e:	bd70      	pop	{r4, r5, r6, pc}
 800af50:	0781      	lsls	r1, r0, #30
 800af52:	bf58      	it	pl
 800af54:	6963      	ldrpl	r3, [r4, #20]
 800af56:	60a3      	str	r3, [r4, #8]
 800af58:	e7f4      	b.n	800af44 <__swsetup_r+0xb0>
 800af5a:	2000      	movs	r0, #0
 800af5c:	e7f7      	b.n	800af4e <__swsetup_r+0xba>
 800af5e:	bf00      	nop
 800af60:	20000040 	.word	0x20000040
 800af64:	0800c88c 	.word	0x0800c88c
 800af68:	0800c8ac 	.word	0x0800c8ac
 800af6c:	0800c86c 	.word	0x0800c86c

0800af70 <abort>:
 800af70:	b508      	push	{r3, lr}
 800af72:	2006      	movs	r0, #6
 800af74:	f000 fa54 	bl	800b420 <raise>
 800af78:	2001      	movs	r0, #1
 800af7a:	f7f9 f817 	bl	8003fac <_exit>
	...

0800af80 <__sflush_r>:
 800af80:	898a      	ldrh	r2, [r1, #12]
 800af82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af86:	4605      	mov	r5, r0
 800af88:	0710      	lsls	r0, r2, #28
 800af8a:	460c      	mov	r4, r1
 800af8c:	d458      	bmi.n	800b040 <__sflush_r+0xc0>
 800af8e:	684b      	ldr	r3, [r1, #4]
 800af90:	2b00      	cmp	r3, #0
 800af92:	dc05      	bgt.n	800afa0 <__sflush_r+0x20>
 800af94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800af96:	2b00      	cmp	r3, #0
 800af98:	dc02      	bgt.n	800afa0 <__sflush_r+0x20>
 800af9a:	2000      	movs	r0, #0
 800af9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afa0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800afa2:	2e00      	cmp	r6, #0
 800afa4:	d0f9      	beq.n	800af9a <__sflush_r+0x1a>
 800afa6:	2300      	movs	r3, #0
 800afa8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800afac:	682f      	ldr	r7, [r5, #0]
 800afae:	602b      	str	r3, [r5, #0]
 800afb0:	d032      	beq.n	800b018 <__sflush_r+0x98>
 800afb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800afb4:	89a3      	ldrh	r3, [r4, #12]
 800afb6:	075a      	lsls	r2, r3, #29
 800afb8:	d505      	bpl.n	800afc6 <__sflush_r+0x46>
 800afba:	6863      	ldr	r3, [r4, #4]
 800afbc:	1ac0      	subs	r0, r0, r3
 800afbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800afc0:	b10b      	cbz	r3, 800afc6 <__sflush_r+0x46>
 800afc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800afc4:	1ac0      	subs	r0, r0, r3
 800afc6:	2300      	movs	r3, #0
 800afc8:	4602      	mov	r2, r0
 800afca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800afcc:	6a21      	ldr	r1, [r4, #32]
 800afce:	4628      	mov	r0, r5
 800afd0:	47b0      	blx	r6
 800afd2:	1c43      	adds	r3, r0, #1
 800afd4:	89a3      	ldrh	r3, [r4, #12]
 800afd6:	d106      	bne.n	800afe6 <__sflush_r+0x66>
 800afd8:	6829      	ldr	r1, [r5, #0]
 800afda:	291d      	cmp	r1, #29
 800afdc:	d82c      	bhi.n	800b038 <__sflush_r+0xb8>
 800afde:	4a2a      	ldr	r2, [pc, #168]	; (800b088 <__sflush_r+0x108>)
 800afe0:	40ca      	lsrs	r2, r1
 800afe2:	07d6      	lsls	r6, r2, #31
 800afe4:	d528      	bpl.n	800b038 <__sflush_r+0xb8>
 800afe6:	2200      	movs	r2, #0
 800afe8:	6062      	str	r2, [r4, #4]
 800afea:	04d9      	lsls	r1, r3, #19
 800afec:	6922      	ldr	r2, [r4, #16]
 800afee:	6022      	str	r2, [r4, #0]
 800aff0:	d504      	bpl.n	800affc <__sflush_r+0x7c>
 800aff2:	1c42      	adds	r2, r0, #1
 800aff4:	d101      	bne.n	800affa <__sflush_r+0x7a>
 800aff6:	682b      	ldr	r3, [r5, #0]
 800aff8:	b903      	cbnz	r3, 800affc <__sflush_r+0x7c>
 800affa:	6560      	str	r0, [r4, #84]	; 0x54
 800affc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800affe:	602f      	str	r7, [r5, #0]
 800b000:	2900      	cmp	r1, #0
 800b002:	d0ca      	beq.n	800af9a <__sflush_r+0x1a>
 800b004:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b008:	4299      	cmp	r1, r3
 800b00a:	d002      	beq.n	800b012 <__sflush_r+0x92>
 800b00c:	4628      	mov	r0, r5
 800b00e:	f7ff faa5 	bl	800a55c <_free_r>
 800b012:	2000      	movs	r0, #0
 800b014:	6360      	str	r0, [r4, #52]	; 0x34
 800b016:	e7c1      	b.n	800af9c <__sflush_r+0x1c>
 800b018:	6a21      	ldr	r1, [r4, #32]
 800b01a:	2301      	movs	r3, #1
 800b01c:	4628      	mov	r0, r5
 800b01e:	47b0      	blx	r6
 800b020:	1c41      	adds	r1, r0, #1
 800b022:	d1c7      	bne.n	800afb4 <__sflush_r+0x34>
 800b024:	682b      	ldr	r3, [r5, #0]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d0c4      	beq.n	800afb4 <__sflush_r+0x34>
 800b02a:	2b1d      	cmp	r3, #29
 800b02c:	d001      	beq.n	800b032 <__sflush_r+0xb2>
 800b02e:	2b16      	cmp	r3, #22
 800b030:	d101      	bne.n	800b036 <__sflush_r+0xb6>
 800b032:	602f      	str	r7, [r5, #0]
 800b034:	e7b1      	b.n	800af9a <__sflush_r+0x1a>
 800b036:	89a3      	ldrh	r3, [r4, #12]
 800b038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b03c:	81a3      	strh	r3, [r4, #12]
 800b03e:	e7ad      	b.n	800af9c <__sflush_r+0x1c>
 800b040:	690f      	ldr	r7, [r1, #16]
 800b042:	2f00      	cmp	r7, #0
 800b044:	d0a9      	beq.n	800af9a <__sflush_r+0x1a>
 800b046:	0793      	lsls	r3, r2, #30
 800b048:	680e      	ldr	r6, [r1, #0]
 800b04a:	bf08      	it	eq
 800b04c:	694b      	ldreq	r3, [r1, #20]
 800b04e:	600f      	str	r7, [r1, #0]
 800b050:	bf18      	it	ne
 800b052:	2300      	movne	r3, #0
 800b054:	eba6 0807 	sub.w	r8, r6, r7
 800b058:	608b      	str	r3, [r1, #8]
 800b05a:	f1b8 0f00 	cmp.w	r8, #0
 800b05e:	dd9c      	ble.n	800af9a <__sflush_r+0x1a>
 800b060:	6a21      	ldr	r1, [r4, #32]
 800b062:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b064:	4643      	mov	r3, r8
 800b066:	463a      	mov	r2, r7
 800b068:	4628      	mov	r0, r5
 800b06a:	47b0      	blx	r6
 800b06c:	2800      	cmp	r0, #0
 800b06e:	dc06      	bgt.n	800b07e <__sflush_r+0xfe>
 800b070:	89a3      	ldrh	r3, [r4, #12]
 800b072:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b076:	81a3      	strh	r3, [r4, #12]
 800b078:	f04f 30ff 	mov.w	r0, #4294967295
 800b07c:	e78e      	b.n	800af9c <__sflush_r+0x1c>
 800b07e:	4407      	add	r7, r0
 800b080:	eba8 0800 	sub.w	r8, r8, r0
 800b084:	e7e9      	b.n	800b05a <__sflush_r+0xda>
 800b086:	bf00      	nop
 800b088:	20400001 	.word	0x20400001

0800b08c <_fflush_r>:
 800b08c:	b538      	push	{r3, r4, r5, lr}
 800b08e:	690b      	ldr	r3, [r1, #16]
 800b090:	4605      	mov	r5, r0
 800b092:	460c      	mov	r4, r1
 800b094:	b913      	cbnz	r3, 800b09c <_fflush_r+0x10>
 800b096:	2500      	movs	r5, #0
 800b098:	4628      	mov	r0, r5
 800b09a:	bd38      	pop	{r3, r4, r5, pc}
 800b09c:	b118      	cbz	r0, 800b0a6 <_fflush_r+0x1a>
 800b09e:	6983      	ldr	r3, [r0, #24]
 800b0a0:	b90b      	cbnz	r3, 800b0a6 <_fflush_r+0x1a>
 800b0a2:	f000 f887 	bl	800b1b4 <__sinit>
 800b0a6:	4b14      	ldr	r3, [pc, #80]	; (800b0f8 <_fflush_r+0x6c>)
 800b0a8:	429c      	cmp	r4, r3
 800b0aa:	d11b      	bne.n	800b0e4 <_fflush_r+0x58>
 800b0ac:	686c      	ldr	r4, [r5, #4]
 800b0ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d0ef      	beq.n	800b096 <_fflush_r+0xa>
 800b0b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b0b8:	07d0      	lsls	r0, r2, #31
 800b0ba:	d404      	bmi.n	800b0c6 <_fflush_r+0x3a>
 800b0bc:	0599      	lsls	r1, r3, #22
 800b0be:	d402      	bmi.n	800b0c6 <_fflush_r+0x3a>
 800b0c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0c2:	f000 f915 	bl	800b2f0 <__retarget_lock_acquire_recursive>
 800b0c6:	4628      	mov	r0, r5
 800b0c8:	4621      	mov	r1, r4
 800b0ca:	f7ff ff59 	bl	800af80 <__sflush_r>
 800b0ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b0d0:	07da      	lsls	r2, r3, #31
 800b0d2:	4605      	mov	r5, r0
 800b0d4:	d4e0      	bmi.n	800b098 <_fflush_r+0xc>
 800b0d6:	89a3      	ldrh	r3, [r4, #12]
 800b0d8:	059b      	lsls	r3, r3, #22
 800b0da:	d4dd      	bmi.n	800b098 <_fflush_r+0xc>
 800b0dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0de:	f000 f908 	bl	800b2f2 <__retarget_lock_release_recursive>
 800b0e2:	e7d9      	b.n	800b098 <_fflush_r+0xc>
 800b0e4:	4b05      	ldr	r3, [pc, #20]	; (800b0fc <_fflush_r+0x70>)
 800b0e6:	429c      	cmp	r4, r3
 800b0e8:	d101      	bne.n	800b0ee <_fflush_r+0x62>
 800b0ea:	68ac      	ldr	r4, [r5, #8]
 800b0ec:	e7df      	b.n	800b0ae <_fflush_r+0x22>
 800b0ee:	4b04      	ldr	r3, [pc, #16]	; (800b100 <_fflush_r+0x74>)
 800b0f0:	429c      	cmp	r4, r3
 800b0f2:	bf08      	it	eq
 800b0f4:	68ec      	ldreq	r4, [r5, #12]
 800b0f6:	e7da      	b.n	800b0ae <_fflush_r+0x22>
 800b0f8:	0800c88c 	.word	0x0800c88c
 800b0fc:	0800c8ac 	.word	0x0800c8ac
 800b100:	0800c86c 	.word	0x0800c86c

0800b104 <std>:
 800b104:	2300      	movs	r3, #0
 800b106:	b510      	push	{r4, lr}
 800b108:	4604      	mov	r4, r0
 800b10a:	e9c0 3300 	strd	r3, r3, [r0]
 800b10e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b112:	6083      	str	r3, [r0, #8]
 800b114:	8181      	strh	r1, [r0, #12]
 800b116:	6643      	str	r3, [r0, #100]	; 0x64
 800b118:	81c2      	strh	r2, [r0, #14]
 800b11a:	6183      	str	r3, [r0, #24]
 800b11c:	4619      	mov	r1, r3
 800b11e:	2208      	movs	r2, #8
 800b120:	305c      	adds	r0, #92	; 0x5c
 800b122:	f7fd fb47 	bl	80087b4 <memset>
 800b126:	4b05      	ldr	r3, [pc, #20]	; (800b13c <std+0x38>)
 800b128:	6263      	str	r3, [r4, #36]	; 0x24
 800b12a:	4b05      	ldr	r3, [pc, #20]	; (800b140 <std+0x3c>)
 800b12c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b12e:	4b05      	ldr	r3, [pc, #20]	; (800b144 <std+0x40>)
 800b130:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b132:	4b05      	ldr	r3, [pc, #20]	; (800b148 <std+0x44>)
 800b134:	6224      	str	r4, [r4, #32]
 800b136:	6323      	str	r3, [r4, #48]	; 0x30
 800b138:	bd10      	pop	{r4, pc}
 800b13a:	bf00      	nop
 800b13c:	0800b459 	.word	0x0800b459
 800b140:	0800b47b 	.word	0x0800b47b
 800b144:	0800b4b3 	.word	0x0800b4b3
 800b148:	0800b4d7 	.word	0x0800b4d7

0800b14c <_cleanup_r>:
 800b14c:	4901      	ldr	r1, [pc, #4]	; (800b154 <_cleanup_r+0x8>)
 800b14e:	f000 b8af 	b.w	800b2b0 <_fwalk_reent>
 800b152:	bf00      	nop
 800b154:	0800b08d 	.word	0x0800b08d

0800b158 <__sfmoreglue>:
 800b158:	b570      	push	{r4, r5, r6, lr}
 800b15a:	2268      	movs	r2, #104	; 0x68
 800b15c:	1e4d      	subs	r5, r1, #1
 800b15e:	4355      	muls	r5, r2
 800b160:	460e      	mov	r6, r1
 800b162:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b166:	f7ff fa65 	bl	800a634 <_malloc_r>
 800b16a:	4604      	mov	r4, r0
 800b16c:	b140      	cbz	r0, 800b180 <__sfmoreglue+0x28>
 800b16e:	2100      	movs	r1, #0
 800b170:	e9c0 1600 	strd	r1, r6, [r0]
 800b174:	300c      	adds	r0, #12
 800b176:	60a0      	str	r0, [r4, #8]
 800b178:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b17c:	f7fd fb1a 	bl	80087b4 <memset>
 800b180:	4620      	mov	r0, r4
 800b182:	bd70      	pop	{r4, r5, r6, pc}

0800b184 <__sfp_lock_acquire>:
 800b184:	4801      	ldr	r0, [pc, #4]	; (800b18c <__sfp_lock_acquire+0x8>)
 800b186:	f000 b8b3 	b.w	800b2f0 <__retarget_lock_acquire_recursive>
 800b18a:	bf00      	nop
 800b18c:	2000056d 	.word	0x2000056d

0800b190 <__sfp_lock_release>:
 800b190:	4801      	ldr	r0, [pc, #4]	; (800b198 <__sfp_lock_release+0x8>)
 800b192:	f000 b8ae 	b.w	800b2f2 <__retarget_lock_release_recursive>
 800b196:	bf00      	nop
 800b198:	2000056d 	.word	0x2000056d

0800b19c <__sinit_lock_acquire>:
 800b19c:	4801      	ldr	r0, [pc, #4]	; (800b1a4 <__sinit_lock_acquire+0x8>)
 800b19e:	f000 b8a7 	b.w	800b2f0 <__retarget_lock_acquire_recursive>
 800b1a2:	bf00      	nop
 800b1a4:	2000056e 	.word	0x2000056e

0800b1a8 <__sinit_lock_release>:
 800b1a8:	4801      	ldr	r0, [pc, #4]	; (800b1b0 <__sinit_lock_release+0x8>)
 800b1aa:	f000 b8a2 	b.w	800b2f2 <__retarget_lock_release_recursive>
 800b1ae:	bf00      	nop
 800b1b0:	2000056e 	.word	0x2000056e

0800b1b4 <__sinit>:
 800b1b4:	b510      	push	{r4, lr}
 800b1b6:	4604      	mov	r4, r0
 800b1b8:	f7ff fff0 	bl	800b19c <__sinit_lock_acquire>
 800b1bc:	69a3      	ldr	r3, [r4, #24]
 800b1be:	b11b      	cbz	r3, 800b1c8 <__sinit+0x14>
 800b1c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1c4:	f7ff bff0 	b.w	800b1a8 <__sinit_lock_release>
 800b1c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b1cc:	6523      	str	r3, [r4, #80]	; 0x50
 800b1ce:	4b13      	ldr	r3, [pc, #76]	; (800b21c <__sinit+0x68>)
 800b1d0:	4a13      	ldr	r2, [pc, #76]	; (800b220 <__sinit+0x6c>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	62a2      	str	r2, [r4, #40]	; 0x28
 800b1d6:	42a3      	cmp	r3, r4
 800b1d8:	bf04      	itt	eq
 800b1da:	2301      	moveq	r3, #1
 800b1dc:	61a3      	streq	r3, [r4, #24]
 800b1de:	4620      	mov	r0, r4
 800b1e0:	f000 f820 	bl	800b224 <__sfp>
 800b1e4:	6060      	str	r0, [r4, #4]
 800b1e6:	4620      	mov	r0, r4
 800b1e8:	f000 f81c 	bl	800b224 <__sfp>
 800b1ec:	60a0      	str	r0, [r4, #8]
 800b1ee:	4620      	mov	r0, r4
 800b1f0:	f000 f818 	bl	800b224 <__sfp>
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	60e0      	str	r0, [r4, #12]
 800b1f8:	2104      	movs	r1, #4
 800b1fa:	6860      	ldr	r0, [r4, #4]
 800b1fc:	f7ff ff82 	bl	800b104 <std>
 800b200:	68a0      	ldr	r0, [r4, #8]
 800b202:	2201      	movs	r2, #1
 800b204:	2109      	movs	r1, #9
 800b206:	f7ff ff7d 	bl	800b104 <std>
 800b20a:	68e0      	ldr	r0, [r4, #12]
 800b20c:	2202      	movs	r2, #2
 800b20e:	2112      	movs	r1, #18
 800b210:	f7ff ff78 	bl	800b104 <std>
 800b214:	2301      	movs	r3, #1
 800b216:	61a3      	str	r3, [r4, #24]
 800b218:	e7d2      	b.n	800b1c0 <__sinit+0xc>
 800b21a:	bf00      	nop
 800b21c:	0800c4f4 	.word	0x0800c4f4
 800b220:	0800b14d 	.word	0x0800b14d

0800b224 <__sfp>:
 800b224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b226:	4607      	mov	r7, r0
 800b228:	f7ff ffac 	bl	800b184 <__sfp_lock_acquire>
 800b22c:	4b1e      	ldr	r3, [pc, #120]	; (800b2a8 <__sfp+0x84>)
 800b22e:	681e      	ldr	r6, [r3, #0]
 800b230:	69b3      	ldr	r3, [r6, #24]
 800b232:	b913      	cbnz	r3, 800b23a <__sfp+0x16>
 800b234:	4630      	mov	r0, r6
 800b236:	f7ff ffbd 	bl	800b1b4 <__sinit>
 800b23a:	3648      	adds	r6, #72	; 0x48
 800b23c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b240:	3b01      	subs	r3, #1
 800b242:	d503      	bpl.n	800b24c <__sfp+0x28>
 800b244:	6833      	ldr	r3, [r6, #0]
 800b246:	b30b      	cbz	r3, 800b28c <__sfp+0x68>
 800b248:	6836      	ldr	r6, [r6, #0]
 800b24a:	e7f7      	b.n	800b23c <__sfp+0x18>
 800b24c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b250:	b9d5      	cbnz	r5, 800b288 <__sfp+0x64>
 800b252:	4b16      	ldr	r3, [pc, #88]	; (800b2ac <__sfp+0x88>)
 800b254:	60e3      	str	r3, [r4, #12]
 800b256:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b25a:	6665      	str	r5, [r4, #100]	; 0x64
 800b25c:	f000 f847 	bl	800b2ee <__retarget_lock_init_recursive>
 800b260:	f7ff ff96 	bl	800b190 <__sfp_lock_release>
 800b264:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b268:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b26c:	6025      	str	r5, [r4, #0]
 800b26e:	61a5      	str	r5, [r4, #24]
 800b270:	2208      	movs	r2, #8
 800b272:	4629      	mov	r1, r5
 800b274:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b278:	f7fd fa9c 	bl	80087b4 <memset>
 800b27c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b280:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b284:	4620      	mov	r0, r4
 800b286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b288:	3468      	adds	r4, #104	; 0x68
 800b28a:	e7d9      	b.n	800b240 <__sfp+0x1c>
 800b28c:	2104      	movs	r1, #4
 800b28e:	4638      	mov	r0, r7
 800b290:	f7ff ff62 	bl	800b158 <__sfmoreglue>
 800b294:	4604      	mov	r4, r0
 800b296:	6030      	str	r0, [r6, #0]
 800b298:	2800      	cmp	r0, #0
 800b29a:	d1d5      	bne.n	800b248 <__sfp+0x24>
 800b29c:	f7ff ff78 	bl	800b190 <__sfp_lock_release>
 800b2a0:	230c      	movs	r3, #12
 800b2a2:	603b      	str	r3, [r7, #0]
 800b2a4:	e7ee      	b.n	800b284 <__sfp+0x60>
 800b2a6:	bf00      	nop
 800b2a8:	0800c4f4 	.word	0x0800c4f4
 800b2ac:	ffff0001 	.word	0xffff0001

0800b2b0 <_fwalk_reent>:
 800b2b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2b4:	4606      	mov	r6, r0
 800b2b6:	4688      	mov	r8, r1
 800b2b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b2bc:	2700      	movs	r7, #0
 800b2be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b2c2:	f1b9 0901 	subs.w	r9, r9, #1
 800b2c6:	d505      	bpl.n	800b2d4 <_fwalk_reent+0x24>
 800b2c8:	6824      	ldr	r4, [r4, #0]
 800b2ca:	2c00      	cmp	r4, #0
 800b2cc:	d1f7      	bne.n	800b2be <_fwalk_reent+0xe>
 800b2ce:	4638      	mov	r0, r7
 800b2d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2d4:	89ab      	ldrh	r3, [r5, #12]
 800b2d6:	2b01      	cmp	r3, #1
 800b2d8:	d907      	bls.n	800b2ea <_fwalk_reent+0x3a>
 800b2da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b2de:	3301      	adds	r3, #1
 800b2e0:	d003      	beq.n	800b2ea <_fwalk_reent+0x3a>
 800b2e2:	4629      	mov	r1, r5
 800b2e4:	4630      	mov	r0, r6
 800b2e6:	47c0      	blx	r8
 800b2e8:	4307      	orrs	r7, r0
 800b2ea:	3568      	adds	r5, #104	; 0x68
 800b2ec:	e7e9      	b.n	800b2c2 <_fwalk_reent+0x12>

0800b2ee <__retarget_lock_init_recursive>:
 800b2ee:	4770      	bx	lr

0800b2f0 <__retarget_lock_acquire_recursive>:
 800b2f0:	4770      	bx	lr

0800b2f2 <__retarget_lock_release_recursive>:
 800b2f2:	4770      	bx	lr

0800b2f4 <__swhatbuf_r>:
 800b2f4:	b570      	push	{r4, r5, r6, lr}
 800b2f6:	460e      	mov	r6, r1
 800b2f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2fc:	2900      	cmp	r1, #0
 800b2fe:	b096      	sub	sp, #88	; 0x58
 800b300:	4614      	mov	r4, r2
 800b302:	461d      	mov	r5, r3
 800b304:	da08      	bge.n	800b318 <__swhatbuf_r+0x24>
 800b306:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b30a:	2200      	movs	r2, #0
 800b30c:	602a      	str	r2, [r5, #0]
 800b30e:	061a      	lsls	r2, r3, #24
 800b310:	d410      	bmi.n	800b334 <__swhatbuf_r+0x40>
 800b312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b316:	e00e      	b.n	800b336 <__swhatbuf_r+0x42>
 800b318:	466a      	mov	r2, sp
 800b31a:	f000 f903 	bl	800b524 <_fstat_r>
 800b31e:	2800      	cmp	r0, #0
 800b320:	dbf1      	blt.n	800b306 <__swhatbuf_r+0x12>
 800b322:	9a01      	ldr	r2, [sp, #4]
 800b324:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b328:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b32c:	425a      	negs	r2, r3
 800b32e:	415a      	adcs	r2, r3
 800b330:	602a      	str	r2, [r5, #0]
 800b332:	e7ee      	b.n	800b312 <__swhatbuf_r+0x1e>
 800b334:	2340      	movs	r3, #64	; 0x40
 800b336:	2000      	movs	r0, #0
 800b338:	6023      	str	r3, [r4, #0]
 800b33a:	b016      	add	sp, #88	; 0x58
 800b33c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b340 <__smakebuf_r>:
 800b340:	898b      	ldrh	r3, [r1, #12]
 800b342:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b344:	079d      	lsls	r5, r3, #30
 800b346:	4606      	mov	r6, r0
 800b348:	460c      	mov	r4, r1
 800b34a:	d507      	bpl.n	800b35c <__smakebuf_r+0x1c>
 800b34c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b350:	6023      	str	r3, [r4, #0]
 800b352:	6123      	str	r3, [r4, #16]
 800b354:	2301      	movs	r3, #1
 800b356:	6163      	str	r3, [r4, #20]
 800b358:	b002      	add	sp, #8
 800b35a:	bd70      	pop	{r4, r5, r6, pc}
 800b35c:	ab01      	add	r3, sp, #4
 800b35e:	466a      	mov	r2, sp
 800b360:	f7ff ffc8 	bl	800b2f4 <__swhatbuf_r>
 800b364:	9900      	ldr	r1, [sp, #0]
 800b366:	4605      	mov	r5, r0
 800b368:	4630      	mov	r0, r6
 800b36a:	f7ff f963 	bl	800a634 <_malloc_r>
 800b36e:	b948      	cbnz	r0, 800b384 <__smakebuf_r+0x44>
 800b370:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b374:	059a      	lsls	r2, r3, #22
 800b376:	d4ef      	bmi.n	800b358 <__smakebuf_r+0x18>
 800b378:	f023 0303 	bic.w	r3, r3, #3
 800b37c:	f043 0302 	orr.w	r3, r3, #2
 800b380:	81a3      	strh	r3, [r4, #12]
 800b382:	e7e3      	b.n	800b34c <__smakebuf_r+0xc>
 800b384:	4b0d      	ldr	r3, [pc, #52]	; (800b3bc <__smakebuf_r+0x7c>)
 800b386:	62b3      	str	r3, [r6, #40]	; 0x28
 800b388:	89a3      	ldrh	r3, [r4, #12]
 800b38a:	6020      	str	r0, [r4, #0]
 800b38c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b390:	81a3      	strh	r3, [r4, #12]
 800b392:	9b00      	ldr	r3, [sp, #0]
 800b394:	6163      	str	r3, [r4, #20]
 800b396:	9b01      	ldr	r3, [sp, #4]
 800b398:	6120      	str	r0, [r4, #16]
 800b39a:	b15b      	cbz	r3, 800b3b4 <__smakebuf_r+0x74>
 800b39c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3a0:	4630      	mov	r0, r6
 800b3a2:	f000 f8d1 	bl	800b548 <_isatty_r>
 800b3a6:	b128      	cbz	r0, 800b3b4 <__smakebuf_r+0x74>
 800b3a8:	89a3      	ldrh	r3, [r4, #12]
 800b3aa:	f023 0303 	bic.w	r3, r3, #3
 800b3ae:	f043 0301 	orr.w	r3, r3, #1
 800b3b2:	81a3      	strh	r3, [r4, #12]
 800b3b4:	89a0      	ldrh	r0, [r4, #12]
 800b3b6:	4305      	orrs	r5, r0
 800b3b8:	81a5      	strh	r5, [r4, #12]
 800b3ba:	e7cd      	b.n	800b358 <__smakebuf_r+0x18>
 800b3bc:	0800b14d 	.word	0x0800b14d

0800b3c0 <_malloc_usable_size_r>:
 800b3c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3c4:	1f18      	subs	r0, r3, #4
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	bfbc      	itt	lt
 800b3ca:	580b      	ldrlt	r3, [r1, r0]
 800b3cc:	18c0      	addlt	r0, r0, r3
 800b3ce:	4770      	bx	lr

0800b3d0 <_raise_r>:
 800b3d0:	291f      	cmp	r1, #31
 800b3d2:	b538      	push	{r3, r4, r5, lr}
 800b3d4:	4604      	mov	r4, r0
 800b3d6:	460d      	mov	r5, r1
 800b3d8:	d904      	bls.n	800b3e4 <_raise_r+0x14>
 800b3da:	2316      	movs	r3, #22
 800b3dc:	6003      	str	r3, [r0, #0]
 800b3de:	f04f 30ff 	mov.w	r0, #4294967295
 800b3e2:	bd38      	pop	{r3, r4, r5, pc}
 800b3e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b3e6:	b112      	cbz	r2, 800b3ee <_raise_r+0x1e>
 800b3e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b3ec:	b94b      	cbnz	r3, 800b402 <_raise_r+0x32>
 800b3ee:	4620      	mov	r0, r4
 800b3f0:	f000 f830 	bl	800b454 <_getpid_r>
 800b3f4:	462a      	mov	r2, r5
 800b3f6:	4601      	mov	r1, r0
 800b3f8:	4620      	mov	r0, r4
 800b3fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3fe:	f000 b817 	b.w	800b430 <_kill_r>
 800b402:	2b01      	cmp	r3, #1
 800b404:	d00a      	beq.n	800b41c <_raise_r+0x4c>
 800b406:	1c59      	adds	r1, r3, #1
 800b408:	d103      	bne.n	800b412 <_raise_r+0x42>
 800b40a:	2316      	movs	r3, #22
 800b40c:	6003      	str	r3, [r0, #0]
 800b40e:	2001      	movs	r0, #1
 800b410:	e7e7      	b.n	800b3e2 <_raise_r+0x12>
 800b412:	2400      	movs	r4, #0
 800b414:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b418:	4628      	mov	r0, r5
 800b41a:	4798      	blx	r3
 800b41c:	2000      	movs	r0, #0
 800b41e:	e7e0      	b.n	800b3e2 <_raise_r+0x12>

0800b420 <raise>:
 800b420:	4b02      	ldr	r3, [pc, #8]	; (800b42c <raise+0xc>)
 800b422:	4601      	mov	r1, r0
 800b424:	6818      	ldr	r0, [r3, #0]
 800b426:	f7ff bfd3 	b.w	800b3d0 <_raise_r>
 800b42a:	bf00      	nop
 800b42c:	20000040 	.word	0x20000040

0800b430 <_kill_r>:
 800b430:	b538      	push	{r3, r4, r5, lr}
 800b432:	4d07      	ldr	r5, [pc, #28]	; (800b450 <_kill_r+0x20>)
 800b434:	2300      	movs	r3, #0
 800b436:	4604      	mov	r4, r0
 800b438:	4608      	mov	r0, r1
 800b43a:	4611      	mov	r1, r2
 800b43c:	602b      	str	r3, [r5, #0]
 800b43e:	f7f8 fda5 	bl	8003f8c <_kill>
 800b442:	1c43      	adds	r3, r0, #1
 800b444:	d102      	bne.n	800b44c <_kill_r+0x1c>
 800b446:	682b      	ldr	r3, [r5, #0]
 800b448:	b103      	cbz	r3, 800b44c <_kill_r+0x1c>
 800b44a:	6023      	str	r3, [r4, #0]
 800b44c:	bd38      	pop	{r3, r4, r5, pc}
 800b44e:	bf00      	nop
 800b450:	20000568 	.word	0x20000568

0800b454 <_getpid_r>:
 800b454:	f7f8 bd92 	b.w	8003f7c <_getpid>

0800b458 <__sread>:
 800b458:	b510      	push	{r4, lr}
 800b45a:	460c      	mov	r4, r1
 800b45c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b460:	f000 f894 	bl	800b58c <_read_r>
 800b464:	2800      	cmp	r0, #0
 800b466:	bfab      	itete	ge
 800b468:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b46a:	89a3      	ldrhlt	r3, [r4, #12]
 800b46c:	181b      	addge	r3, r3, r0
 800b46e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b472:	bfac      	ite	ge
 800b474:	6563      	strge	r3, [r4, #84]	; 0x54
 800b476:	81a3      	strhlt	r3, [r4, #12]
 800b478:	bd10      	pop	{r4, pc}

0800b47a <__swrite>:
 800b47a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b47e:	461f      	mov	r7, r3
 800b480:	898b      	ldrh	r3, [r1, #12]
 800b482:	05db      	lsls	r3, r3, #23
 800b484:	4605      	mov	r5, r0
 800b486:	460c      	mov	r4, r1
 800b488:	4616      	mov	r6, r2
 800b48a:	d505      	bpl.n	800b498 <__swrite+0x1e>
 800b48c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b490:	2302      	movs	r3, #2
 800b492:	2200      	movs	r2, #0
 800b494:	f000 f868 	bl	800b568 <_lseek_r>
 800b498:	89a3      	ldrh	r3, [r4, #12]
 800b49a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b49e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b4a2:	81a3      	strh	r3, [r4, #12]
 800b4a4:	4632      	mov	r2, r6
 800b4a6:	463b      	mov	r3, r7
 800b4a8:	4628      	mov	r0, r5
 800b4aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4ae:	f000 b817 	b.w	800b4e0 <_write_r>

0800b4b2 <__sseek>:
 800b4b2:	b510      	push	{r4, lr}
 800b4b4:	460c      	mov	r4, r1
 800b4b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4ba:	f000 f855 	bl	800b568 <_lseek_r>
 800b4be:	1c43      	adds	r3, r0, #1
 800b4c0:	89a3      	ldrh	r3, [r4, #12]
 800b4c2:	bf15      	itete	ne
 800b4c4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b4c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b4ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b4ce:	81a3      	strheq	r3, [r4, #12]
 800b4d0:	bf18      	it	ne
 800b4d2:	81a3      	strhne	r3, [r4, #12]
 800b4d4:	bd10      	pop	{r4, pc}

0800b4d6 <__sclose>:
 800b4d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4da:	f000 b813 	b.w	800b504 <_close_r>
	...

0800b4e0 <_write_r>:
 800b4e0:	b538      	push	{r3, r4, r5, lr}
 800b4e2:	4d07      	ldr	r5, [pc, #28]	; (800b500 <_write_r+0x20>)
 800b4e4:	4604      	mov	r4, r0
 800b4e6:	4608      	mov	r0, r1
 800b4e8:	4611      	mov	r1, r2
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	602a      	str	r2, [r5, #0]
 800b4ee:	461a      	mov	r2, r3
 800b4f0:	f7f8 fd83 	bl	8003ffa <_write>
 800b4f4:	1c43      	adds	r3, r0, #1
 800b4f6:	d102      	bne.n	800b4fe <_write_r+0x1e>
 800b4f8:	682b      	ldr	r3, [r5, #0]
 800b4fa:	b103      	cbz	r3, 800b4fe <_write_r+0x1e>
 800b4fc:	6023      	str	r3, [r4, #0]
 800b4fe:	bd38      	pop	{r3, r4, r5, pc}
 800b500:	20000568 	.word	0x20000568

0800b504 <_close_r>:
 800b504:	b538      	push	{r3, r4, r5, lr}
 800b506:	4d06      	ldr	r5, [pc, #24]	; (800b520 <_close_r+0x1c>)
 800b508:	2300      	movs	r3, #0
 800b50a:	4604      	mov	r4, r0
 800b50c:	4608      	mov	r0, r1
 800b50e:	602b      	str	r3, [r5, #0]
 800b510:	f7f8 fd8f 	bl	8004032 <_close>
 800b514:	1c43      	adds	r3, r0, #1
 800b516:	d102      	bne.n	800b51e <_close_r+0x1a>
 800b518:	682b      	ldr	r3, [r5, #0]
 800b51a:	b103      	cbz	r3, 800b51e <_close_r+0x1a>
 800b51c:	6023      	str	r3, [r4, #0]
 800b51e:	bd38      	pop	{r3, r4, r5, pc}
 800b520:	20000568 	.word	0x20000568

0800b524 <_fstat_r>:
 800b524:	b538      	push	{r3, r4, r5, lr}
 800b526:	4d07      	ldr	r5, [pc, #28]	; (800b544 <_fstat_r+0x20>)
 800b528:	2300      	movs	r3, #0
 800b52a:	4604      	mov	r4, r0
 800b52c:	4608      	mov	r0, r1
 800b52e:	4611      	mov	r1, r2
 800b530:	602b      	str	r3, [r5, #0]
 800b532:	f7f8 fd8a 	bl	800404a <_fstat>
 800b536:	1c43      	adds	r3, r0, #1
 800b538:	d102      	bne.n	800b540 <_fstat_r+0x1c>
 800b53a:	682b      	ldr	r3, [r5, #0]
 800b53c:	b103      	cbz	r3, 800b540 <_fstat_r+0x1c>
 800b53e:	6023      	str	r3, [r4, #0]
 800b540:	bd38      	pop	{r3, r4, r5, pc}
 800b542:	bf00      	nop
 800b544:	20000568 	.word	0x20000568

0800b548 <_isatty_r>:
 800b548:	b538      	push	{r3, r4, r5, lr}
 800b54a:	4d06      	ldr	r5, [pc, #24]	; (800b564 <_isatty_r+0x1c>)
 800b54c:	2300      	movs	r3, #0
 800b54e:	4604      	mov	r4, r0
 800b550:	4608      	mov	r0, r1
 800b552:	602b      	str	r3, [r5, #0]
 800b554:	f7f8 fd89 	bl	800406a <_isatty>
 800b558:	1c43      	adds	r3, r0, #1
 800b55a:	d102      	bne.n	800b562 <_isatty_r+0x1a>
 800b55c:	682b      	ldr	r3, [r5, #0]
 800b55e:	b103      	cbz	r3, 800b562 <_isatty_r+0x1a>
 800b560:	6023      	str	r3, [r4, #0]
 800b562:	bd38      	pop	{r3, r4, r5, pc}
 800b564:	20000568 	.word	0x20000568

0800b568 <_lseek_r>:
 800b568:	b538      	push	{r3, r4, r5, lr}
 800b56a:	4d07      	ldr	r5, [pc, #28]	; (800b588 <_lseek_r+0x20>)
 800b56c:	4604      	mov	r4, r0
 800b56e:	4608      	mov	r0, r1
 800b570:	4611      	mov	r1, r2
 800b572:	2200      	movs	r2, #0
 800b574:	602a      	str	r2, [r5, #0]
 800b576:	461a      	mov	r2, r3
 800b578:	f7f8 fd82 	bl	8004080 <_lseek>
 800b57c:	1c43      	adds	r3, r0, #1
 800b57e:	d102      	bne.n	800b586 <_lseek_r+0x1e>
 800b580:	682b      	ldr	r3, [r5, #0]
 800b582:	b103      	cbz	r3, 800b586 <_lseek_r+0x1e>
 800b584:	6023      	str	r3, [r4, #0]
 800b586:	bd38      	pop	{r3, r4, r5, pc}
 800b588:	20000568 	.word	0x20000568

0800b58c <_read_r>:
 800b58c:	b538      	push	{r3, r4, r5, lr}
 800b58e:	4d07      	ldr	r5, [pc, #28]	; (800b5ac <_read_r+0x20>)
 800b590:	4604      	mov	r4, r0
 800b592:	4608      	mov	r0, r1
 800b594:	4611      	mov	r1, r2
 800b596:	2200      	movs	r2, #0
 800b598:	602a      	str	r2, [r5, #0]
 800b59a:	461a      	mov	r2, r3
 800b59c:	f7f8 fd10 	bl	8003fc0 <_read>
 800b5a0:	1c43      	adds	r3, r0, #1
 800b5a2:	d102      	bne.n	800b5aa <_read_r+0x1e>
 800b5a4:	682b      	ldr	r3, [r5, #0]
 800b5a6:	b103      	cbz	r3, 800b5aa <_read_r+0x1e>
 800b5a8:	6023      	str	r3, [r4, #0]
 800b5aa:	bd38      	pop	{r3, r4, r5, pc}
 800b5ac:	20000568 	.word	0x20000568

0800b5b0 <pow>:
 800b5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5b2:	ed2d 8b02 	vpush	{d8}
 800b5b6:	eeb0 8a40 	vmov.f32	s16, s0
 800b5ba:	eef0 8a60 	vmov.f32	s17, s1
 800b5be:	ec55 4b11 	vmov	r4, r5, d1
 800b5c2:	f000 f865 	bl	800b690 <__ieee754_pow>
 800b5c6:	4622      	mov	r2, r4
 800b5c8:	462b      	mov	r3, r5
 800b5ca:	4620      	mov	r0, r4
 800b5cc:	4629      	mov	r1, r5
 800b5ce:	ec57 6b10 	vmov	r6, r7, d0
 800b5d2:	f7f5 fab3 	bl	8000b3c <__aeabi_dcmpun>
 800b5d6:	2800      	cmp	r0, #0
 800b5d8:	d13b      	bne.n	800b652 <pow+0xa2>
 800b5da:	ec51 0b18 	vmov	r0, r1, d8
 800b5de:	2200      	movs	r2, #0
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	f7f5 fa79 	bl	8000ad8 <__aeabi_dcmpeq>
 800b5e6:	b1b8      	cbz	r0, 800b618 <pow+0x68>
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	4620      	mov	r0, r4
 800b5ee:	4629      	mov	r1, r5
 800b5f0:	f7f5 fa72 	bl	8000ad8 <__aeabi_dcmpeq>
 800b5f4:	2800      	cmp	r0, #0
 800b5f6:	d146      	bne.n	800b686 <pow+0xd6>
 800b5f8:	ec45 4b10 	vmov	d0, r4, r5
 800b5fc:	f000 fe61 	bl	800c2c2 <finite>
 800b600:	b338      	cbz	r0, 800b652 <pow+0xa2>
 800b602:	2200      	movs	r2, #0
 800b604:	2300      	movs	r3, #0
 800b606:	4620      	mov	r0, r4
 800b608:	4629      	mov	r1, r5
 800b60a:	f7f5 fa6f 	bl	8000aec <__aeabi_dcmplt>
 800b60e:	b300      	cbz	r0, 800b652 <pow+0xa2>
 800b610:	f7fd f8a6 	bl	8008760 <__errno>
 800b614:	2322      	movs	r3, #34	; 0x22
 800b616:	e01b      	b.n	800b650 <pow+0xa0>
 800b618:	ec47 6b10 	vmov	d0, r6, r7
 800b61c:	f000 fe51 	bl	800c2c2 <finite>
 800b620:	b9e0      	cbnz	r0, 800b65c <pow+0xac>
 800b622:	eeb0 0a48 	vmov.f32	s0, s16
 800b626:	eef0 0a68 	vmov.f32	s1, s17
 800b62a:	f000 fe4a 	bl	800c2c2 <finite>
 800b62e:	b1a8      	cbz	r0, 800b65c <pow+0xac>
 800b630:	ec45 4b10 	vmov	d0, r4, r5
 800b634:	f000 fe45 	bl	800c2c2 <finite>
 800b638:	b180      	cbz	r0, 800b65c <pow+0xac>
 800b63a:	4632      	mov	r2, r6
 800b63c:	463b      	mov	r3, r7
 800b63e:	4630      	mov	r0, r6
 800b640:	4639      	mov	r1, r7
 800b642:	f7f5 fa7b 	bl	8000b3c <__aeabi_dcmpun>
 800b646:	2800      	cmp	r0, #0
 800b648:	d0e2      	beq.n	800b610 <pow+0x60>
 800b64a:	f7fd f889 	bl	8008760 <__errno>
 800b64e:	2321      	movs	r3, #33	; 0x21
 800b650:	6003      	str	r3, [r0, #0]
 800b652:	ecbd 8b02 	vpop	{d8}
 800b656:	ec47 6b10 	vmov	d0, r6, r7
 800b65a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b65c:	2200      	movs	r2, #0
 800b65e:	2300      	movs	r3, #0
 800b660:	4630      	mov	r0, r6
 800b662:	4639      	mov	r1, r7
 800b664:	f7f5 fa38 	bl	8000ad8 <__aeabi_dcmpeq>
 800b668:	2800      	cmp	r0, #0
 800b66a:	d0f2      	beq.n	800b652 <pow+0xa2>
 800b66c:	eeb0 0a48 	vmov.f32	s0, s16
 800b670:	eef0 0a68 	vmov.f32	s1, s17
 800b674:	f000 fe25 	bl	800c2c2 <finite>
 800b678:	2800      	cmp	r0, #0
 800b67a:	d0ea      	beq.n	800b652 <pow+0xa2>
 800b67c:	ec45 4b10 	vmov	d0, r4, r5
 800b680:	f000 fe1f 	bl	800c2c2 <finite>
 800b684:	e7c3      	b.n	800b60e <pow+0x5e>
 800b686:	4f01      	ldr	r7, [pc, #4]	; (800b68c <pow+0xdc>)
 800b688:	2600      	movs	r6, #0
 800b68a:	e7e2      	b.n	800b652 <pow+0xa2>
 800b68c:	3ff00000 	.word	0x3ff00000

0800b690 <__ieee754_pow>:
 800b690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b694:	ed2d 8b06 	vpush	{d8-d10}
 800b698:	b089      	sub	sp, #36	; 0x24
 800b69a:	ed8d 1b00 	vstr	d1, [sp]
 800b69e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800b6a2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800b6a6:	ea58 0102 	orrs.w	r1, r8, r2
 800b6aa:	ec57 6b10 	vmov	r6, r7, d0
 800b6ae:	d115      	bne.n	800b6dc <__ieee754_pow+0x4c>
 800b6b0:	19b3      	adds	r3, r6, r6
 800b6b2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800b6b6:	4152      	adcs	r2, r2
 800b6b8:	4299      	cmp	r1, r3
 800b6ba:	4b89      	ldr	r3, [pc, #548]	; (800b8e0 <__ieee754_pow+0x250>)
 800b6bc:	4193      	sbcs	r3, r2
 800b6be:	f080 84d2 	bcs.w	800c066 <__ieee754_pow+0x9d6>
 800b6c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b6c6:	4630      	mov	r0, r6
 800b6c8:	4639      	mov	r1, r7
 800b6ca:	f7f4 fde7 	bl	800029c <__adddf3>
 800b6ce:	ec41 0b10 	vmov	d0, r0, r1
 800b6d2:	b009      	add	sp, #36	; 0x24
 800b6d4:	ecbd 8b06 	vpop	{d8-d10}
 800b6d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6dc:	4b81      	ldr	r3, [pc, #516]	; (800b8e4 <__ieee754_pow+0x254>)
 800b6de:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800b6e2:	429c      	cmp	r4, r3
 800b6e4:	ee10 aa10 	vmov	sl, s0
 800b6e8:	463d      	mov	r5, r7
 800b6ea:	dc06      	bgt.n	800b6fa <__ieee754_pow+0x6a>
 800b6ec:	d101      	bne.n	800b6f2 <__ieee754_pow+0x62>
 800b6ee:	2e00      	cmp	r6, #0
 800b6f0:	d1e7      	bne.n	800b6c2 <__ieee754_pow+0x32>
 800b6f2:	4598      	cmp	r8, r3
 800b6f4:	dc01      	bgt.n	800b6fa <__ieee754_pow+0x6a>
 800b6f6:	d10f      	bne.n	800b718 <__ieee754_pow+0x88>
 800b6f8:	b172      	cbz	r2, 800b718 <__ieee754_pow+0x88>
 800b6fa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800b6fe:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800b702:	ea55 050a 	orrs.w	r5, r5, sl
 800b706:	d1dc      	bne.n	800b6c2 <__ieee754_pow+0x32>
 800b708:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b70c:	18db      	adds	r3, r3, r3
 800b70e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800b712:	4152      	adcs	r2, r2
 800b714:	429d      	cmp	r5, r3
 800b716:	e7d0      	b.n	800b6ba <__ieee754_pow+0x2a>
 800b718:	2d00      	cmp	r5, #0
 800b71a:	da3b      	bge.n	800b794 <__ieee754_pow+0x104>
 800b71c:	4b72      	ldr	r3, [pc, #456]	; (800b8e8 <__ieee754_pow+0x258>)
 800b71e:	4598      	cmp	r8, r3
 800b720:	dc51      	bgt.n	800b7c6 <__ieee754_pow+0x136>
 800b722:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b726:	4598      	cmp	r8, r3
 800b728:	f340 84ac 	ble.w	800c084 <__ieee754_pow+0x9f4>
 800b72c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b730:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b734:	2b14      	cmp	r3, #20
 800b736:	dd0f      	ble.n	800b758 <__ieee754_pow+0xc8>
 800b738:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b73c:	fa22 f103 	lsr.w	r1, r2, r3
 800b740:	fa01 f303 	lsl.w	r3, r1, r3
 800b744:	4293      	cmp	r3, r2
 800b746:	f040 849d 	bne.w	800c084 <__ieee754_pow+0x9f4>
 800b74a:	f001 0101 	and.w	r1, r1, #1
 800b74e:	f1c1 0302 	rsb	r3, r1, #2
 800b752:	9304      	str	r3, [sp, #16]
 800b754:	b182      	cbz	r2, 800b778 <__ieee754_pow+0xe8>
 800b756:	e05f      	b.n	800b818 <__ieee754_pow+0x188>
 800b758:	2a00      	cmp	r2, #0
 800b75a:	d15b      	bne.n	800b814 <__ieee754_pow+0x184>
 800b75c:	f1c3 0314 	rsb	r3, r3, #20
 800b760:	fa48 f103 	asr.w	r1, r8, r3
 800b764:	fa01 f303 	lsl.w	r3, r1, r3
 800b768:	4543      	cmp	r3, r8
 800b76a:	f040 8488 	bne.w	800c07e <__ieee754_pow+0x9ee>
 800b76e:	f001 0101 	and.w	r1, r1, #1
 800b772:	f1c1 0302 	rsb	r3, r1, #2
 800b776:	9304      	str	r3, [sp, #16]
 800b778:	4b5c      	ldr	r3, [pc, #368]	; (800b8ec <__ieee754_pow+0x25c>)
 800b77a:	4598      	cmp	r8, r3
 800b77c:	d132      	bne.n	800b7e4 <__ieee754_pow+0x154>
 800b77e:	f1b9 0f00 	cmp.w	r9, #0
 800b782:	f280 8478 	bge.w	800c076 <__ieee754_pow+0x9e6>
 800b786:	4959      	ldr	r1, [pc, #356]	; (800b8ec <__ieee754_pow+0x25c>)
 800b788:	4632      	mov	r2, r6
 800b78a:	463b      	mov	r3, r7
 800b78c:	2000      	movs	r0, #0
 800b78e:	f7f5 f865 	bl	800085c <__aeabi_ddiv>
 800b792:	e79c      	b.n	800b6ce <__ieee754_pow+0x3e>
 800b794:	2300      	movs	r3, #0
 800b796:	9304      	str	r3, [sp, #16]
 800b798:	2a00      	cmp	r2, #0
 800b79a:	d13d      	bne.n	800b818 <__ieee754_pow+0x188>
 800b79c:	4b51      	ldr	r3, [pc, #324]	; (800b8e4 <__ieee754_pow+0x254>)
 800b79e:	4598      	cmp	r8, r3
 800b7a0:	d1ea      	bne.n	800b778 <__ieee754_pow+0xe8>
 800b7a2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b7a6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b7aa:	ea53 030a 	orrs.w	r3, r3, sl
 800b7ae:	f000 845a 	beq.w	800c066 <__ieee754_pow+0x9d6>
 800b7b2:	4b4f      	ldr	r3, [pc, #316]	; (800b8f0 <__ieee754_pow+0x260>)
 800b7b4:	429c      	cmp	r4, r3
 800b7b6:	dd08      	ble.n	800b7ca <__ieee754_pow+0x13a>
 800b7b8:	f1b9 0f00 	cmp.w	r9, #0
 800b7bc:	f2c0 8457 	blt.w	800c06e <__ieee754_pow+0x9de>
 800b7c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b7c4:	e783      	b.n	800b6ce <__ieee754_pow+0x3e>
 800b7c6:	2302      	movs	r3, #2
 800b7c8:	e7e5      	b.n	800b796 <__ieee754_pow+0x106>
 800b7ca:	f1b9 0f00 	cmp.w	r9, #0
 800b7ce:	f04f 0000 	mov.w	r0, #0
 800b7d2:	f04f 0100 	mov.w	r1, #0
 800b7d6:	f6bf af7a 	bge.w	800b6ce <__ieee754_pow+0x3e>
 800b7da:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b7de:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b7e2:	e774      	b.n	800b6ce <__ieee754_pow+0x3e>
 800b7e4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800b7e8:	d106      	bne.n	800b7f8 <__ieee754_pow+0x168>
 800b7ea:	4632      	mov	r2, r6
 800b7ec:	463b      	mov	r3, r7
 800b7ee:	4630      	mov	r0, r6
 800b7f0:	4639      	mov	r1, r7
 800b7f2:	f7f4 ff09 	bl	8000608 <__aeabi_dmul>
 800b7f6:	e76a      	b.n	800b6ce <__ieee754_pow+0x3e>
 800b7f8:	4b3e      	ldr	r3, [pc, #248]	; (800b8f4 <__ieee754_pow+0x264>)
 800b7fa:	4599      	cmp	r9, r3
 800b7fc:	d10c      	bne.n	800b818 <__ieee754_pow+0x188>
 800b7fe:	2d00      	cmp	r5, #0
 800b800:	db0a      	blt.n	800b818 <__ieee754_pow+0x188>
 800b802:	ec47 6b10 	vmov	d0, r6, r7
 800b806:	b009      	add	sp, #36	; 0x24
 800b808:	ecbd 8b06 	vpop	{d8-d10}
 800b80c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b810:	f000 bc6c 	b.w	800c0ec <__ieee754_sqrt>
 800b814:	2300      	movs	r3, #0
 800b816:	9304      	str	r3, [sp, #16]
 800b818:	ec47 6b10 	vmov	d0, r6, r7
 800b81c:	f000 fd48 	bl	800c2b0 <fabs>
 800b820:	ec51 0b10 	vmov	r0, r1, d0
 800b824:	f1ba 0f00 	cmp.w	sl, #0
 800b828:	d129      	bne.n	800b87e <__ieee754_pow+0x1ee>
 800b82a:	b124      	cbz	r4, 800b836 <__ieee754_pow+0x1a6>
 800b82c:	4b2f      	ldr	r3, [pc, #188]	; (800b8ec <__ieee754_pow+0x25c>)
 800b82e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b832:	429a      	cmp	r2, r3
 800b834:	d123      	bne.n	800b87e <__ieee754_pow+0x1ee>
 800b836:	f1b9 0f00 	cmp.w	r9, #0
 800b83a:	da05      	bge.n	800b848 <__ieee754_pow+0x1b8>
 800b83c:	4602      	mov	r2, r0
 800b83e:	460b      	mov	r3, r1
 800b840:	2000      	movs	r0, #0
 800b842:	492a      	ldr	r1, [pc, #168]	; (800b8ec <__ieee754_pow+0x25c>)
 800b844:	f7f5 f80a 	bl	800085c <__aeabi_ddiv>
 800b848:	2d00      	cmp	r5, #0
 800b84a:	f6bf af40 	bge.w	800b6ce <__ieee754_pow+0x3e>
 800b84e:	9b04      	ldr	r3, [sp, #16]
 800b850:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b854:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b858:	4323      	orrs	r3, r4
 800b85a:	d108      	bne.n	800b86e <__ieee754_pow+0x1de>
 800b85c:	4602      	mov	r2, r0
 800b85e:	460b      	mov	r3, r1
 800b860:	4610      	mov	r0, r2
 800b862:	4619      	mov	r1, r3
 800b864:	f7f4 fd18 	bl	8000298 <__aeabi_dsub>
 800b868:	4602      	mov	r2, r0
 800b86a:	460b      	mov	r3, r1
 800b86c:	e78f      	b.n	800b78e <__ieee754_pow+0xfe>
 800b86e:	9b04      	ldr	r3, [sp, #16]
 800b870:	2b01      	cmp	r3, #1
 800b872:	f47f af2c 	bne.w	800b6ce <__ieee754_pow+0x3e>
 800b876:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b87a:	4619      	mov	r1, r3
 800b87c:	e727      	b.n	800b6ce <__ieee754_pow+0x3e>
 800b87e:	0feb      	lsrs	r3, r5, #31
 800b880:	3b01      	subs	r3, #1
 800b882:	9306      	str	r3, [sp, #24]
 800b884:	9a06      	ldr	r2, [sp, #24]
 800b886:	9b04      	ldr	r3, [sp, #16]
 800b888:	4313      	orrs	r3, r2
 800b88a:	d102      	bne.n	800b892 <__ieee754_pow+0x202>
 800b88c:	4632      	mov	r2, r6
 800b88e:	463b      	mov	r3, r7
 800b890:	e7e6      	b.n	800b860 <__ieee754_pow+0x1d0>
 800b892:	4b19      	ldr	r3, [pc, #100]	; (800b8f8 <__ieee754_pow+0x268>)
 800b894:	4598      	cmp	r8, r3
 800b896:	f340 80fb 	ble.w	800ba90 <__ieee754_pow+0x400>
 800b89a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b89e:	4598      	cmp	r8, r3
 800b8a0:	4b13      	ldr	r3, [pc, #76]	; (800b8f0 <__ieee754_pow+0x260>)
 800b8a2:	dd0c      	ble.n	800b8be <__ieee754_pow+0x22e>
 800b8a4:	429c      	cmp	r4, r3
 800b8a6:	dc0f      	bgt.n	800b8c8 <__ieee754_pow+0x238>
 800b8a8:	f1b9 0f00 	cmp.w	r9, #0
 800b8ac:	da0f      	bge.n	800b8ce <__ieee754_pow+0x23e>
 800b8ae:	2000      	movs	r0, #0
 800b8b0:	b009      	add	sp, #36	; 0x24
 800b8b2:	ecbd 8b06 	vpop	{d8-d10}
 800b8b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8ba:	f000 bcf0 	b.w	800c29e <__math_oflow>
 800b8be:	429c      	cmp	r4, r3
 800b8c0:	dbf2      	blt.n	800b8a8 <__ieee754_pow+0x218>
 800b8c2:	4b0a      	ldr	r3, [pc, #40]	; (800b8ec <__ieee754_pow+0x25c>)
 800b8c4:	429c      	cmp	r4, r3
 800b8c6:	dd19      	ble.n	800b8fc <__ieee754_pow+0x26c>
 800b8c8:	f1b9 0f00 	cmp.w	r9, #0
 800b8cc:	dcef      	bgt.n	800b8ae <__ieee754_pow+0x21e>
 800b8ce:	2000      	movs	r0, #0
 800b8d0:	b009      	add	sp, #36	; 0x24
 800b8d2:	ecbd 8b06 	vpop	{d8-d10}
 800b8d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8da:	f000 bcd7 	b.w	800c28c <__math_uflow>
 800b8de:	bf00      	nop
 800b8e0:	fff00000 	.word	0xfff00000
 800b8e4:	7ff00000 	.word	0x7ff00000
 800b8e8:	433fffff 	.word	0x433fffff
 800b8ec:	3ff00000 	.word	0x3ff00000
 800b8f0:	3fefffff 	.word	0x3fefffff
 800b8f4:	3fe00000 	.word	0x3fe00000
 800b8f8:	41e00000 	.word	0x41e00000
 800b8fc:	4b60      	ldr	r3, [pc, #384]	; (800ba80 <__ieee754_pow+0x3f0>)
 800b8fe:	2200      	movs	r2, #0
 800b900:	f7f4 fcca 	bl	8000298 <__aeabi_dsub>
 800b904:	a354      	add	r3, pc, #336	; (adr r3, 800ba58 <__ieee754_pow+0x3c8>)
 800b906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b90a:	4604      	mov	r4, r0
 800b90c:	460d      	mov	r5, r1
 800b90e:	f7f4 fe7b 	bl	8000608 <__aeabi_dmul>
 800b912:	a353      	add	r3, pc, #332	; (adr r3, 800ba60 <__ieee754_pow+0x3d0>)
 800b914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b918:	4606      	mov	r6, r0
 800b91a:	460f      	mov	r7, r1
 800b91c:	4620      	mov	r0, r4
 800b91e:	4629      	mov	r1, r5
 800b920:	f7f4 fe72 	bl	8000608 <__aeabi_dmul>
 800b924:	4b57      	ldr	r3, [pc, #348]	; (800ba84 <__ieee754_pow+0x3f4>)
 800b926:	4682      	mov	sl, r0
 800b928:	468b      	mov	fp, r1
 800b92a:	2200      	movs	r2, #0
 800b92c:	4620      	mov	r0, r4
 800b92e:	4629      	mov	r1, r5
 800b930:	f7f4 fe6a 	bl	8000608 <__aeabi_dmul>
 800b934:	4602      	mov	r2, r0
 800b936:	460b      	mov	r3, r1
 800b938:	a14b      	add	r1, pc, #300	; (adr r1, 800ba68 <__ieee754_pow+0x3d8>)
 800b93a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b93e:	f7f4 fcab 	bl	8000298 <__aeabi_dsub>
 800b942:	4622      	mov	r2, r4
 800b944:	462b      	mov	r3, r5
 800b946:	f7f4 fe5f 	bl	8000608 <__aeabi_dmul>
 800b94a:	4602      	mov	r2, r0
 800b94c:	460b      	mov	r3, r1
 800b94e:	2000      	movs	r0, #0
 800b950:	494d      	ldr	r1, [pc, #308]	; (800ba88 <__ieee754_pow+0x3f8>)
 800b952:	f7f4 fca1 	bl	8000298 <__aeabi_dsub>
 800b956:	4622      	mov	r2, r4
 800b958:	4680      	mov	r8, r0
 800b95a:	4689      	mov	r9, r1
 800b95c:	462b      	mov	r3, r5
 800b95e:	4620      	mov	r0, r4
 800b960:	4629      	mov	r1, r5
 800b962:	f7f4 fe51 	bl	8000608 <__aeabi_dmul>
 800b966:	4602      	mov	r2, r0
 800b968:	460b      	mov	r3, r1
 800b96a:	4640      	mov	r0, r8
 800b96c:	4649      	mov	r1, r9
 800b96e:	f7f4 fe4b 	bl	8000608 <__aeabi_dmul>
 800b972:	a33f      	add	r3, pc, #252	; (adr r3, 800ba70 <__ieee754_pow+0x3e0>)
 800b974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b978:	f7f4 fe46 	bl	8000608 <__aeabi_dmul>
 800b97c:	4602      	mov	r2, r0
 800b97e:	460b      	mov	r3, r1
 800b980:	4650      	mov	r0, sl
 800b982:	4659      	mov	r1, fp
 800b984:	f7f4 fc88 	bl	8000298 <__aeabi_dsub>
 800b988:	4602      	mov	r2, r0
 800b98a:	460b      	mov	r3, r1
 800b98c:	4680      	mov	r8, r0
 800b98e:	4689      	mov	r9, r1
 800b990:	4630      	mov	r0, r6
 800b992:	4639      	mov	r1, r7
 800b994:	f7f4 fc82 	bl	800029c <__adddf3>
 800b998:	2000      	movs	r0, #0
 800b99a:	4632      	mov	r2, r6
 800b99c:	463b      	mov	r3, r7
 800b99e:	4604      	mov	r4, r0
 800b9a0:	460d      	mov	r5, r1
 800b9a2:	f7f4 fc79 	bl	8000298 <__aeabi_dsub>
 800b9a6:	4602      	mov	r2, r0
 800b9a8:	460b      	mov	r3, r1
 800b9aa:	4640      	mov	r0, r8
 800b9ac:	4649      	mov	r1, r9
 800b9ae:	f7f4 fc73 	bl	8000298 <__aeabi_dsub>
 800b9b2:	9b04      	ldr	r3, [sp, #16]
 800b9b4:	9a06      	ldr	r2, [sp, #24]
 800b9b6:	3b01      	subs	r3, #1
 800b9b8:	4313      	orrs	r3, r2
 800b9ba:	4682      	mov	sl, r0
 800b9bc:	468b      	mov	fp, r1
 800b9be:	f040 81e7 	bne.w	800bd90 <__ieee754_pow+0x700>
 800b9c2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800ba78 <__ieee754_pow+0x3e8>
 800b9c6:	eeb0 8a47 	vmov.f32	s16, s14
 800b9ca:	eef0 8a67 	vmov.f32	s17, s15
 800b9ce:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b9d2:	2600      	movs	r6, #0
 800b9d4:	4632      	mov	r2, r6
 800b9d6:	463b      	mov	r3, r7
 800b9d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b9dc:	f7f4 fc5c 	bl	8000298 <__aeabi_dsub>
 800b9e0:	4622      	mov	r2, r4
 800b9e2:	462b      	mov	r3, r5
 800b9e4:	f7f4 fe10 	bl	8000608 <__aeabi_dmul>
 800b9e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b9ec:	4680      	mov	r8, r0
 800b9ee:	4689      	mov	r9, r1
 800b9f0:	4650      	mov	r0, sl
 800b9f2:	4659      	mov	r1, fp
 800b9f4:	f7f4 fe08 	bl	8000608 <__aeabi_dmul>
 800b9f8:	4602      	mov	r2, r0
 800b9fa:	460b      	mov	r3, r1
 800b9fc:	4640      	mov	r0, r8
 800b9fe:	4649      	mov	r1, r9
 800ba00:	f7f4 fc4c 	bl	800029c <__adddf3>
 800ba04:	4632      	mov	r2, r6
 800ba06:	463b      	mov	r3, r7
 800ba08:	4680      	mov	r8, r0
 800ba0a:	4689      	mov	r9, r1
 800ba0c:	4620      	mov	r0, r4
 800ba0e:	4629      	mov	r1, r5
 800ba10:	f7f4 fdfa 	bl	8000608 <__aeabi_dmul>
 800ba14:	460b      	mov	r3, r1
 800ba16:	4604      	mov	r4, r0
 800ba18:	460d      	mov	r5, r1
 800ba1a:	4602      	mov	r2, r0
 800ba1c:	4649      	mov	r1, r9
 800ba1e:	4640      	mov	r0, r8
 800ba20:	f7f4 fc3c 	bl	800029c <__adddf3>
 800ba24:	4b19      	ldr	r3, [pc, #100]	; (800ba8c <__ieee754_pow+0x3fc>)
 800ba26:	4299      	cmp	r1, r3
 800ba28:	ec45 4b19 	vmov	d9, r4, r5
 800ba2c:	4606      	mov	r6, r0
 800ba2e:	460f      	mov	r7, r1
 800ba30:	468b      	mov	fp, r1
 800ba32:	f340 82f1 	ble.w	800c018 <__ieee754_pow+0x988>
 800ba36:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ba3a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800ba3e:	4303      	orrs	r3, r0
 800ba40:	f000 81e4 	beq.w	800be0c <__ieee754_pow+0x77c>
 800ba44:	ec51 0b18 	vmov	r0, r1, d8
 800ba48:	2200      	movs	r2, #0
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	f7f5 f84e 	bl	8000aec <__aeabi_dcmplt>
 800ba50:	3800      	subs	r0, #0
 800ba52:	bf18      	it	ne
 800ba54:	2001      	movne	r0, #1
 800ba56:	e72b      	b.n	800b8b0 <__ieee754_pow+0x220>
 800ba58:	60000000 	.word	0x60000000
 800ba5c:	3ff71547 	.word	0x3ff71547
 800ba60:	f85ddf44 	.word	0xf85ddf44
 800ba64:	3e54ae0b 	.word	0x3e54ae0b
 800ba68:	55555555 	.word	0x55555555
 800ba6c:	3fd55555 	.word	0x3fd55555
 800ba70:	652b82fe 	.word	0x652b82fe
 800ba74:	3ff71547 	.word	0x3ff71547
 800ba78:	00000000 	.word	0x00000000
 800ba7c:	bff00000 	.word	0xbff00000
 800ba80:	3ff00000 	.word	0x3ff00000
 800ba84:	3fd00000 	.word	0x3fd00000
 800ba88:	3fe00000 	.word	0x3fe00000
 800ba8c:	408fffff 	.word	0x408fffff
 800ba90:	4bd5      	ldr	r3, [pc, #852]	; (800bde8 <__ieee754_pow+0x758>)
 800ba92:	402b      	ands	r3, r5
 800ba94:	2200      	movs	r2, #0
 800ba96:	b92b      	cbnz	r3, 800baa4 <__ieee754_pow+0x414>
 800ba98:	4bd4      	ldr	r3, [pc, #848]	; (800bdec <__ieee754_pow+0x75c>)
 800ba9a:	f7f4 fdb5 	bl	8000608 <__aeabi_dmul>
 800ba9e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800baa2:	460c      	mov	r4, r1
 800baa4:	1523      	asrs	r3, r4, #20
 800baa6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800baaa:	4413      	add	r3, r2
 800baac:	9305      	str	r3, [sp, #20]
 800baae:	4bd0      	ldr	r3, [pc, #832]	; (800bdf0 <__ieee754_pow+0x760>)
 800bab0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bab4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800bab8:	429c      	cmp	r4, r3
 800baba:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800babe:	dd08      	ble.n	800bad2 <__ieee754_pow+0x442>
 800bac0:	4bcc      	ldr	r3, [pc, #816]	; (800bdf4 <__ieee754_pow+0x764>)
 800bac2:	429c      	cmp	r4, r3
 800bac4:	f340 8162 	ble.w	800bd8c <__ieee754_pow+0x6fc>
 800bac8:	9b05      	ldr	r3, [sp, #20]
 800baca:	3301      	adds	r3, #1
 800bacc:	9305      	str	r3, [sp, #20]
 800bace:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800bad2:	2400      	movs	r4, #0
 800bad4:	00e3      	lsls	r3, r4, #3
 800bad6:	9307      	str	r3, [sp, #28]
 800bad8:	4bc7      	ldr	r3, [pc, #796]	; (800bdf8 <__ieee754_pow+0x768>)
 800bada:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bade:	ed93 7b00 	vldr	d7, [r3]
 800bae2:	4629      	mov	r1, r5
 800bae4:	ec53 2b17 	vmov	r2, r3, d7
 800bae8:	eeb0 9a47 	vmov.f32	s18, s14
 800baec:	eef0 9a67 	vmov.f32	s19, s15
 800baf0:	4682      	mov	sl, r0
 800baf2:	f7f4 fbd1 	bl	8000298 <__aeabi_dsub>
 800baf6:	4652      	mov	r2, sl
 800baf8:	4606      	mov	r6, r0
 800bafa:	460f      	mov	r7, r1
 800bafc:	462b      	mov	r3, r5
 800bafe:	ec51 0b19 	vmov	r0, r1, d9
 800bb02:	f7f4 fbcb 	bl	800029c <__adddf3>
 800bb06:	4602      	mov	r2, r0
 800bb08:	460b      	mov	r3, r1
 800bb0a:	2000      	movs	r0, #0
 800bb0c:	49bb      	ldr	r1, [pc, #748]	; (800bdfc <__ieee754_pow+0x76c>)
 800bb0e:	f7f4 fea5 	bl	800085c <__aeabi_ddiv>
 800bb12:	ec41 0b1a 	vmov	d10, r0, r1
 800bb16:	4602      	mov	r2, r0
 800bb18:	460b      	mov	r3, r1
 800bb1a:	4630      	mov	r0, r6
 800bb1c:	4639      	mov	r1, r7
 800bb1e:	f7f4 fd73 	bl	8000608 <__aeabi_dmul>
 800bb22:	2300      	movs	r3, #0
 800bb24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb28:	9302      	str	r3, [sp, #8]
 800bb2a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bb2e:	46ab      	mov	fp, r5
 800bb30:	106d      	asrs	r5, r5, #1
 800bb32:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800bb36:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800bb3a:	ec41 0b18 	vmov	d8, r0, r1
 800bb3e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800bb42:	2200      	movs	r2, #0
 800bb44:	4640      	mov	r0, r8
 800bb46:	4649      	mov	r1, r9
 800bb48:	4614      	mov	r4, r2
 800bb4a:	461d      	mov	r5, r3
 800bb4c:	f7f4 fd5c 	bl	8000608 <__aeabi_dmul>
 800bb50:	4602      	mov	r2, r0
 800bb52:	460b      	mov	r3, r1
 800bb54:	4630      	mov	r0, r6
 800bb56:	4639      	mov	r1, r7
 800bb58:	f7f4 fb9e 	bl	8000298 <__aeabi_dsub>
 800bb5c:	ec53 2b19 	vmov	r2, r3, d9
 800bb60:	4606      	mov	r6, r0
 800bb62:	460f      	mov	r7, r1
 800bb64:	4620      	mov	r0, r4
 800bb66:	4629      	mov	r1, r5
 800bb68:	f7f4 fb96 	bl	8000298 <__aeabi_dsub>
 800bb6c:	4602      	mov	r2, r0
 800bb6e:	460b      	mov	r3, r1
 800bb70:	4650      	mov	r0, sl
 800bb72:	4659      	mov	r1, fp
 800bb74:	f7f4 fb90 	bl	8000298 <__aeabi_dsub>
 800bb78:	4642      	mov	r2, r8
 800bb7a:	464b      	mov	r3, r9
 800bb7c:	f7f4 fd44 	bl	8000608 <__aeabi_dmul>
 800bb80:	4602      	mov	r2, r0
 800bb82:	460b      	mov	r3, r1
 800bb84:	4630      	mov	r0, r6
 800bb86:	4639      	mov	r1, r7
 800bb88:	f7f4 fb86 	bl	8000298 <__aeabi_dsub>
 800bb8c:	ec53 2b1a 	vmov	r2, r3, d10
 800bb90:	f7f4 fd3a 	bl	8000608 <__aeabi_dmul>
 800bb94:	ec53 2b18 	vmov	r2, r3, d8
 800bb98:	ec41 0b19 	vmov	d9, r0, r1
 800bb9c:	ec51 0b18 	vmov	r0, r1, d8
 800bba0:	f7f4 fd32 	bl	8000608 <__aeabi_dmul>
 800bba4:	a37c      	add	r3, pc, #496	; (adr r3, 800bd98 <__ieee754_pow+0x708>)
 800bba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbaa:	4604      	mov	r4, r0
 800bbac:	460d      	mov	r5, r1
 800bbae:	f7f4 fd2b 	bl	8000608 <__aeabi_dmul>
 800bbb2:	a37b      	add	r3, pc, #492	; (adr r3, 800bda0 <__ieee754_pow+0x710>)
 800bbb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbb8:	f7f4 fb70 	bl	800029c <__adddf3>
 800bbbc:	4622      	mov	r2, r4
 800bbbe:	462b      	mov	r3, r5
 800bbc0:	f7f4 fd22 	bl	8000608 <__aeabi_dmul>
 800bbc4:	a378      	add	r3, pc, #480	; (adr r3, 800bda8 <__ieee754_pow+0x718>)
 800bbc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbca:	f7f4 fb67 	bl	800029c <__adddf3>
 800bbce:	4622      	mov	r2, r4
 800bbd0:	462b      	mov	r3, r5
 800bbd2:	f7f4 fd19 	bl	8000608 <__aeabi_dmul>
 800bbd6:	a376      	add	r3, pc, #472	; (adr r3, 800bdb0 <__ieee754_pow+0x720>)
 800bbd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbdc:	f7f4 fb5e 	bl	800029c <__adddf3>
 800bbe0:	4622      	mov	r2, r4
 800bbe2:	462b      	mov	r3, r5
 800bbe4:	f7f4 fd10 	bl	8000608 <__aeabi_dmul>
 800bbe8:	a373      	add	r3, pc, #460	; (adr r3, 800bdb8 <__ieee754_pow+0x728>)
 800bbea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbee:	f7f4 fb55 	bl	800029c <__adddf3>
 800bbf2:	4622      	mov	r2, r4
 800bbf4:	462b      	mov	r3, r5
 800bbf6:	f7f4 fd07 	bl	8000608 <__aeabi_dmul>
 800bbfa:	a371      	add	r3, pc, #452	; (adr r3, 800bdc0 <__ieee754_pow+0x730>)
 800bbfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc00:	f7f4 fb4c 	bl	800029c <__adddf3>
 800bc04:	4622      	mov	r2, r4
 800bc06:	4606      	mov	r6, r0
 800bc08:	460f      	mov	r7, r1
 800bc0a:	462b      	mov	r3, r5
 800bc0c:	4620      	mov	r0, r4
 800bc0e:	4629      	mov	r1, r5
 800bc10:	f7f4 fcfa 	bl	8000608 <__aeabi_dmul>
 800bc14:	4602      	mov	r2, r0
 800bc16:	460b      	mov	r3, r1
 800bc18:	4630      	mov	r0, r6
 800bc1a:	4639      	mov	r1, r7
 800bc1c:	f7f4 fcf4 	bl	8000608 <__aeabi_dmul>
 800bc20:	4642      	mov	r2, r8
 800bc22:	4604      	mov	r4, r0
 800bc24:	460d      	mov	r5, r1
 800bc26:	464b      	mov	r3, r9
 800bc28:	ec51 0b18 	vmov	r0, r1, d8
 800bc2c:	f7f4 fb36 	bl	800029c <__adddf3>
 800bc30:	ec53 2b19 	vmov	r2, r3, d9
 800bc34:	f7f4 fce8 	bl	8000608 <__aeabi_dmul>
 800bc38:	4622      	mov	r2, r4
 800bc3a:	462b      	mov	r3, r5
 800bc3c:	f7f4 fb2e 	bl	800029c <__adddf3>
 800bc40:	4642      	mov	r2, r8
 800bc42:	4682      	mov	sl, r0
 800bc44:	468b      	mov	fp, r1
 800bc46:	464b      	mov	r3, r9
 800bc48:	4640      	mov	r0, r8
 800bc4a:	4649      	mov	r1, r9
 800bc4c:	f7f4 fcdc 	bl	8000608 <__aeabi_dmul>
 800bc50:	4b6b      	ldr	r3, [pc, #428]	; (800be00 <__ieee754_pow+0x770>)
 800bc52:	2200      	movs	r2, #0
 800bc54:	4606      	mov	r6, r0
 800bc56:	460f      	mov	r7, r1
 800bc58:	f7f4 fb20 	bl	800029c <__adddf3>
 800bc5c:	4652      	mov	r2, sl
 800bc5e:	465b      	mov	r3, fp
 800bc60:	f7f4 fb1c 	bl	800029c <__adddf3>
 800bc64:	2000      	movs	r0, #0
 800bc66:	4604      	mov	r4, r0
 800bc68:	460d      	mov	r5, r1
 800bc6a:	4602      	mov	r2, r0
 800bc6c:	460b      	mov	r3, r1
 800bc6e:	4640      	mov	r0, r8
 800bc70:	4649      	mov	r1, r9
 800bc72:	f7f4 fcc9 	bl	8000608 <__aeabi_dmul>
 800bc76:	4b62      	ldr	r3, [pc, #392]	; (800be00 <__ieee754_pow+0x770>)
 800bc78:	4680      	mov	r8, r0
 800bc7a:	4689      	mov	r9, r1
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	4620      	mov	r0, r4
 800bc80:	4629      	mov	r1, r5
 800bc82:	f7f4 fb09 	bl	8000298 <__aeabi_dsub>
 800bc86:	4632      	mov	r2, r6
 800bc88:	463b      	mov	r3, r7
 800bc8a:	f7f4 fb05 	bl	8000298 <__aeabi_dsub>
 800bc8e:	4602      	mov	r2, r0
 800bc90:	460b      	mov	r3, r1
 800bc92:	4650      	mov	r0, sl
 800bc94:	4659      	mov	r1, fp
 800bc96:	f7f4 faff 	bl	8000298 <__aeabi_dsub>
 800bc9a:	ec53 2b18 	vmov	r2, r3, d8
 800bc9e:	f7f4 fcb3 	bl	8000608 <__aeabi_dmul>
 800bca2:	4622      	mov	r2, r4
 800bca4:	4606      	mov	r6, r0
 800bca6:	460f      	mov	r7, r1
 800bca8:	462b      	mov	r3, r5
 800bcaa:	ec51 0b19 	vmov	r0, r1, d9
 800bcae:	f7f4 fcab 	bl	8000608 <__aeabi_dmul>
 800bcb2:	4602      	mov	r2, r0
 800bcb4:	460b      	mov	r3, r1
 800bcb6:	4630      	mov	r0, r6
 800bcb8:	4639      	mov	r1, r7
 800bcba:	f7f4 faef 	bl	800029c <__adddf3>
 800bcbe:	4606      	mov	r6, r0
 800bcc0:	460f      	mov	r7, r1
 800bcc2:	4602      	mov	r2, r0
 800bcc4:	460b      	mov	r3, r1
 800bcc6:	4640      	mov	r0, r8
 800bcc8:	4649      	mov	r1, r9
 800bcca:	f7f4 fae7 	bl	800029c <__adddf3>
 800bcce:	a33e      	add	r3, pc, #248	; (adr r3, 800bdc8 <__ieee754_pow+0x738>)
 800bcd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcd4:	2000      	movs	r0, #0
 800bcd6:	4604      	mov	r4, r0
 800bcd8:	460d      	mov	r5, r1
 800bcda:	f7f4 fc95 	bl	8000608 <__aeabi_dmul>
 800bcde:	4642      	mov	r2, r8
 800bce0:	ec41 0b18 	vmov	d8, r0, r1
 800bce4:	464b      	mov	r3, r9
 800bce6:	4620      	mov	r0, r4
 800bce8:	4629      	mov	r1, r5
 800bcea:	f7f4 fad5 	bl	8000298 <__aeabi_dsub>
 800bcee:	4602      	mov	r2, r0
 800bcf0:	460b      	mov	r3, r1
 800bcf2:	4630      	mov	r0, r6
 800bcf4:	4639      	mov	r1, r7
 800bcf6:	f7f4 facf 	bl	8000298 <__aeabi_dsub>
 800bcfa:	a335      	add	r3, pc, #212	; (adr r3, 800bdd0 <__ieee754_pow+0x740>)
 800bcfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd00:	f7f4 fc82 	bl	8000608 <__aeabi_dmul>
 800bd04:	a334      	add	r3, pc, #208	; (adr r3, 800bdd8 <__ieee754_pow+0x748>)
 800bd06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd0a:	4606      	mov	r6, r0
 800bd0c:	460f      	mov	r7, r1
 800bd0e:	4620      	mov	r0, r4
 800bd10:	4629      	mov	r1, r5
 800bd12:	f7f4 fc79 	bl	8000608 <__aeabi_dmul>
 800bd16:	4602      	mov	r2, r0
 800bd18:	460b      	mov	r3, r1
 800bd1a:	4630      	mov	r0, r6
 800bd1c:	4639      	mov	r1, r7
 800bd1e:	f7f4 fabd 	bl	800029c <__adddf3>
 800bd22:	9a07      	ldr	r2, [sp, #28]
 800bd24:	4b37      	ldr	r3, [pc, #220]	; (800be04 <__ieee754_pow+0x774>)
 800bd26:	4413      	add	r3, r2
 800bd28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd2c:	f7f4 fab6 	bl	800029c <__adddf3>
 800bd30:	4682      	mov	sl, r0
 800bd32:	9805      	ldr	r0, [sp, #20]
 800bd34:	468b      	mov	fp, r1
 800bd36:	f7f4 fbfd 	bl	8000534 <__aeabi_i2d>
 800bd3a:	9a07      	ldr	r2, [sp, #28]
 800bd3c:	4b32      	ldr	r3, [pc, #200]	; (800be08 <__ieee754_pow+0x778>)
 800bd3e:	4413      	add	r3, r2
 800bd40:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bd44:	4606      	mov	r6, r0
 800bd46:	460f      	mov	r7, r1
 800bd48:	4652      	mov	r2, sl
 800bd4a:	465b      	mov	r3, fp
 800bd4c:	ec51 0b18 	vmov	r0, r1, d8
 800bd50:	f7f4 faa4 	bl	800029c <__adddf3>
 800bd54:	4642      	mov	r2, r8
 800bd56:	464b      	mov	r3, r9
 800bd58:	f7f4 faa0 	bl	800029c <__adddf3>
 800bd5c:	4632      	mov	r2, r6
 800bd5e:	463b      	mov	r3, r7
 800bd60:	f7f4 fa9c 	bl	800029c <__adddf3>
 800bd64:	2000      	movs	r0, #0
 800bd66:	4632      	mov	r2, r6
 800bd68:	463b      	mov	r3, r7
 800bd6a:	4604      	mov	r4, r0
 800bd6c:	460d      	mov	r5, r1
 800bd6e:	f7f4 fa93 	bl	8000298 <__aeabi_dsub>
 800bd72:	4642      	mov	r2, r8
 800bd74:	464b      	mov	r3, r9
 800bd76:	f7f4 fa8f 	bl	8000298 <__aeabi_dsub>
 800bd7a:	ec53 2b18 	vmov	r2, r3, d8
 800bd7e:	f7f4 fa8b 	bl	8000298 <__aeabi_dsub>
 800bd82:	4602      	mov	r2, r0
 800bd84:	460b      	mov	r3, r1
 800bd86:	4650      	mov	r0, sl
 800bd88:	4659      	mov	r1, fp
 800bd8a:	e610      	b.n	800b9ae <__ieee754_pow+0x31e>
 800bd8c:	2401      	movs	r4, #1
 800bd8e:	e6a1      	b.n	800bad4 <__ieee754_pow+0x444>
 800bd90:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800bde0 <__ieee754_pow+0x750>
 800bd94:	e617      	b.n	800b9c6 <__ieee754_pow+0x336>
 800bd96:	bf00      	nop
 800bd98:	4a454eef 	.word	0x4a454eef
 800bd9c:	3fca7e28 	.word	0x3fca7e28
 800bda0:	93c9db65 	.word	0x93c9db65
 800bda4:	3fcd864a 	.word	0x3fcd864a
 800bda8:	a91d4101 	.word	0xa91d4101
 800bdac:	3fd17460 	.word	0x3fd17460
 800bdb0:	518f264d 	.word	0x518f264d
 800bdb4:	3fd55555 	.word	0x3fd55555
 800bdb8:	db6fabff 	.word	0xdb6fabff
 800bdbc:	3fdb6db6 	.word	0x3fdb6db6
 800bdc0:	33333303 	.word	0x33333303
 800bdc4:	3fe33333 	.word	0x3fe33333
 800bdc8:	e0000000 	.word	0xe0000000
 800bdcc:	3feec709 	.word	0x3feec709
 800bdd0:	dc3a03fd 	.word	0xdc3a03fd
 800bdd4:	3feec709 	.word	0x3feec709
 800bdd8:	145b01f5 	.word	0x145b01f5
 800bddc:	be3e2fe0 	.word	0xbe3e2fe0
 800bde0:	00000000 	.word	0x00000000
 800bde4:	3ff00000 	.word	0x3ff00000
 800bde8:	7ff00000 	.word	0x7ff00000
 800bdec:	43400000 	.word	0x43400000
 800bdf0:	0003988e 	.word	0x0003988e
 800bdf4:	000bb679 	.word	0x000bb679
 800bdf8:	0800c8d0 	.word	0x0800c8d0
 800bdfc:	3ff00000 	.word	0x3ff00000
 800be00:	40080000 	.word	0x40080000
 800be04:	0800c8f0 	.word	0x0800c8f0
 800be08:	0800c8e0 	.word	0x0800c8e0
 800be0c:	a3b5      	add	r3, pc, #724	; (adr r3, 800c0e4 <__ieee754_pow+0xa54>)
 800be0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be12:	4640      	mov	r0, r8
 800be14:	4649      	mov	r1, r9
 800be16:	f7f4 fa41 	bl	800029c <__adddf3>
 800be1a:	4622      	mov	r2, r4
 800be1c:	ec41 0b1a 	vmov	d10, r0, r1
 800be20:	462b      	mov	r3, r5
 800be22:	4630      	mov	r0, r6
 800be24:	4639      	mov	r1, r7
 800be26:	f7f4 fa37 	bl	8000298 <__aeabi_dsub>
 800be2a:	4602      	mov	r2, r0
 800be2c:	460b      	mov	r3, r1
 800be2e:	ec51 0b1a 	vmov	r0, r1, d10
 800be32:	f7f4 fe79 	bl	8000b28 <__aeabi_dcmpgt>
 800be36:	2800      	cmp	r0, #0
 800be38:	f47f ae04 	bne.w	800ba44 <__ieee754_pow+0x3b4>
 800be3c:	4aa4      	ldr	r2, [pc, #656]	; (800c0d0 <__ieee754_pow+0xa40>)
 800be3e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800be42:	4293      	cmp	r3, r2
 800be44:	f340 8108 	ble.w	800c058 <__ieee754_pow+0x9c8>
 800be48:	151b      	asrs	r3, r3, #20
 800be4a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800be4e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800be52:	fa4a f303 	asr.w	r3, sl, r3
 800be56:	445b      	add	r3, fp
 800be58:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800be5c:	4e9d      	ldr	r6, [pc, #628]	; (800c0d4 <__ieee754_pow+0xa44>)
 800be5e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800be62:	4116      	asrs	r6, r2
 800be64:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800be68:	2000      	movs	r0, #0
 800be6a:	ea23 0106 	bic.w	r1, r3, r6
 800be6e:	f1c2 0214 	rsb	r2, r2, #20
 800be72:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800be76:	fa4a fa02 	asr.w	sl, sl, r2
 800be7a:	f1bb 0f00 	cmp.w	fp, #0
 800be7e:	4602      	mov	r2, r0
 800be80:	460b      	mov	r3, r1
 800be82:	4620      	mov	r0, r4
 800be84:	4629      	mov	r1, r5
 800be86:	bfb8      	it	lt
 800be88:	f1ca 0a00 	rsblt	sl, sl, #0
 800be8c:	f7f4 fa04 	bl	8000298 <__aeabi_dsub>
 800be90:	ec41 0b19 	vmov	d9, r0, r1
 800be94:	4642      	mov	r2, r8
 800be96:	464b      	mov	r3, r9
 800be98:	ec51 0b19 	vmov	r0, r1, d9
 800be9c:	f7f4 f9fe 	bl	800029c <__adddf3>
 800bea0:	a37b      	add	r3, pc, #492	; (adr r3, 800c090 <__ieee754_pow+0xa00>)
 800bea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bea6:	2000      	movs	r0, #0
 800bea8:	4604      	mov	r4, r0
 800beaa:	460d      	mov	r5, r1
 800beac:	f7f4 fbac 	bl	8000608 <__aeabi_dmul>
 800beb0:	ec53 2b19 	vmov	r2, r3, d9
 800beb4:	4606      	mov	r6, r0
 800beb6:	460f      	mov	r7, r1
 800beb8:	4620      	mov	r0, r4
 800beba:	4629      	mov	r1, r5
 800bebc:	f7f4 f9ec 	bl	8000298 <__aeabi_dsub>
 800bec0:	4602      	mov	r2, r0
 800bec2:	460b      	mov	r3, r1
 800bec4:	4640      	mov	r0, r8
 800bec6:	4649      	mov	r1, r9
 800bec8:	f7f4 f9e6 	bl	8000298 <__aeabi_dsub>
 800becc:	a372      	add	r3, pc, #456	; (adr r3, 800c098 <__ieee754_pow+0xa08>)
 800bece:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed2:	f7f4 fb99 	bl	8000608 <__aeabi_dmul>
 800bed6:	a372      	add	r3, pc, #456	; (adr r3, 800c0a0 <__ieee754_pow+0xa10>)
 800bed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bedc:	4680      	mov	r8, r0
 800bede:	4689      	mov	r9, r1
 800bee0:	4620      	mov	r0, r4
 800bee2:	4629      	mov	r1, r5
 800bee4:	f7f4 fb90 	bl	8000608 <__aeabi_dmul>
 800bee8:	4602      	mov	r2, r0
 800beea:	460b      	mov	r3, r1
 800beec:	4640      	mov	r0, r8
 800beee:	4649      	mov	r1, r9
 800bef0:	f7f4 f9d4 	bl	800029c <__adddf3>
 800bef4:	4604      	mov	r4, r0
 800bef6:	460d      	mov	r5, r1
 800bef8:	4602      	mov	r2, r0
 800befa:	460b      	mov	r3, r1
 800befc:	4630      	mov	r0, r6
 800befe:	4639      	mov	r1, r7
 800bf00:	f7f4 f9cc 	bl	800029c <__adddf3>
 800bf04:	4632      	mov	r2, r6
 800bf06:	463b      	mov	r3, r7
 800bf08:	4680      	mov	r8, r0
 800bf0a:	4689      	mov	r9, r1
 800bf0c:	f7f4 f9c4 	bl	8000298 <__aeabi_dsub>
 800bf10:	4602      	mov	r2, r0
 800bf12:	460b      	mov	r3, r1
 800bf14:	4620      	mov	r0, r4
 800bf16:	4629      	mov	r1, r5
 800bf18:	f7f4 f9be 	bl	8000298 <__aeabi_dsub>
 800bf1c:	4642      	mov	r2, r8
 800bf1e:	4606      	mov	r6, r0
 800bf20:	460f      	mov	r7, r1
 800bf22:	464b      	mov	r3, r9
 800bf24:	4640      	mov	r0, r8
 800bf26:	4649      	mov	r1, r9
 800bf28:	f7f4 fb6e 	bl	8000608 <__aeabi_dmul>
 800bf2c:	a35e      	add	r3, pc, #376	; (adr r3, 800c0a8 <__ieee754_pow+0xa18>)
 800bf2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf32:	4604      	mov	r4, r0
 800bf34:	460d      	mov	r5, r1
 800bf36:	f7f4 fb67 	bl	8000608 <__aeabi_dmul>
 800bf3a:	a35d      	add	r3, pc, #372	; (adr r3, 800c0b0 <__ieee754_pow+0xa20>)
 800bf3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf40:	f7f4 f9aa 	bl	8000298 <__aeabi_dsub>
 800bf44:	4622      	mov	r2, r4
 800bf46:	462b      	mov	r3, r5
 800bf48:	f7f4 fb5e 	bl	8000608 <__aeabi_dmul>
 800bf4c:	a35a      	add	r3, pc, #360	; (adr r3, 800c0b8 <__ieee754_pow+0xa28>)
 800bf4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf52:	f7f4 f9a3 	bl	800029c <__adddf3>
 800bf56:	4622      	mov	r2, r4
 800bf58:	462b      	mov	r3, r5
 800bf5a:	f7f4 fb55 	bl	8000608 <__aeabi_dmul>
 800bf5e:	a358      	add	r3, pc, #352	; (adr r3, 800c0c0 <__ieee754_pow+0xa30>)
 800bf60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf64:	f7f4 f998 	bl	8000298 <__aeabi_dsub>
 800bf68:	4622      	mov	r2, r4
 800bf6a:	462b      	mov	r3, r5
 800bf6c:	f7f4 fb4c 	bl	8000608 <__aeabi_dmul>
 800bf70:	a355      	add	r3, pc, #340	; (adr r3, 800c0c8 <__ieee754_pow+0xa38>)
 800bf72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf76:	f7f4 f991 	bl	800029c <__adddf3>
 800bf7a:	4622      	mov	r2, r4
 800bf7c:	462b      	mov	r3, r5
 800bf7e:	f7f4 fb43 	bl	8000608 <__aeabi_dmul>
 800bf82:	4602      	mov	r2, r0
 800bf84:	460b      	mov	r3, r1
 800bf86:	4640      	mov	r0, r8
 800bf88:	4649      	mov	r1, r9
 800bf8a:	f7f4 f985 	bl	8000298 <__aeabi_dsub>
 800bf8e:	4604      	mov	r4, r0
 800bf90:	460d      	mov	r5, r1
 800bf92:	4602      	mov	r2, r0
 800bf94:	460b      	mov	r3, r1
 800bf96:	4640      	mov	r0, r8
 800bf98:	4649      	mov	r1, r9
 800bf9a:	f7f4 fb35 	bl	8000608 <__aeabi_dmul>
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	ec41 0b19 	vmov	d9, r0, r1
 800bfa4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bfa8:	4620      	mov	r0, r4
 800bfaa:	4629      	mov	r1, r5
 800bfac:	f7f4 f974 	bl	8000298 <__aeabi_dsub>
 800bfb0:	4602      	mov	r2, r0
 800bfb2:	460b      	mov	r3, r1
 800bfb4:	ec51 0b19 	vmov	r0, r1, d9
 800bfb8:	f7f4 fc50 	bl	800085c <__aeabi_ddiv>
 800bfbc:	4632      	mov	r2, r6
 800bfbe:	4604      	mov	r4, r0
 800bfc0:	460d      	mov	r5, r1
 800bfc2:	463b      	mov	r3, r7
 800bfc4:	4640      	mov	r0, r8
 800bfc6:	4649      	mov	r1, r9
 800bfc8:	f7f4 fb1e 	bl	8000608 <__aeabi_dmul>
 800bfcc:	4632      	mov	r2, r6
 800bfce:	463b      	mov	r3, r7
 800bfd0:	f7f4 f964 	bl	800029c <__adddf3>
 800bfd4:	4602      	mov	r2, r0
 800bfd6:	460b      	mov	r3, r1
 800bfd8:	4620      	mov	r0, r4
 800bfda:	4629      	mov	r1, r5
 800bfdc:	f7f4 f95c 	bl	8000298 <__aeabi_dsub>
 800bfe0:	4642      	mov	r2, r8
 800bfe2:	464b      	mov	r3, r9
 800bfe4:	f7f4 f958 	bl	8000298 <__aeabi_dsub>
 800bfe8:	460b      	mov	r3, r1
 800bfea:	4602      	mov	r2, r0
 800bfec:	493a      	ldr	r1, [pc, #232]	; (800c0d8 <__ieee754_pow+0xa48>)
 800bfee:	2000      	movs	r0, #0
 800bff0:	f7f4 f952 	bl	8000298 <__aeabi_dsub>
 800bff4:	ec41 0b10 	vmov	d0, r0, r1
 800bff8:	ee10 3a90 	vmov	r3, s1
 800bffc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c000:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c004:	da2b      	bge.n	800c05e <__ieee754_pow+0x9ce>
 800c006:	4650      	mov	r0, sl
 800c008:	f000 f966 	bl	800c2d8 <scalbn>
 800c00c:	ec51 0b10 	vmov	r0, r1, d0
 800c010:	ec53 2b18 	vmov	r2, r3, d8
 800c014:	f7ff bbed 	b.w	800b7f2 <__ieee754_pow+0x162>
 800c018:	4b30      	ldr	r3, [pc, #192]	; (800c0dc <__ieee754_pow+0xa4c>)
 800c01a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c01e:	429e      	cmp	r6, r3
 800c020:	f77f af0c 	ble.w	800be3c <__ieee754_pow+0x7ac>
 800c024:	4b2e      	ldr	r3, [pc, #184]	; (800c0e0 <__ieee754_pow+0xa50>)
 800c026:	440b      	add	r3, r1
 800c028:	4303      	orrs	r3, r0
 800c02a:	d009      	beq.n	800c040 <__ieee754_pow+0x9b0>
 800c02c:	ec51 0b18 	vmov	r0, r1, d8
 800c030:	2200      	movs	r2, #0
 800c032:	2300      	movs	r3, #0
 800c034:	f7f4 fd5a 	bl	8000aec <__aeabi_dcmplt>
 800c038:	3800      	subs	r0, #0
 800c03a:	bf18      	it	ne
 800c03c:	2001      	movne	r0, #1
 800c03e:	e447      	b.n	800b8d0 <__ieee754_pow+0x240>
 800c040:	4622      	mov	r2, r4
 800c042:	462b      	mov	r3, r5
 800c044:	f7f4 f928 	bl	8000298 <__aeabi_dsub>
 800c048:	4642      	mov	r2, r8
 800c04a:	464b      	mov	r3, r9
 800c04c:	f7f4 fd62 	bl	8000b14 <__aeabi_dcmpge>
 800c050:	2800      	cmp	r0, #0
 800c052:	f43f aef3 	beq.w	800be3c <__ieee754_pow+0x7ac>
 800c056:	e7e9      	b.n	800c02c <__ieee754_pow+0x99c>
 800c058:	f04f 0a00 	mov.w	sl, #0
 800c05c:	e71a      	b.n	800be94 <__ieee754_pow+0x804>
 800c05e:	ec51 0b10 	vmov	r0, r1, d0
 800c062:	4619      	mov	r1, r3
 800c064:	e7d4      	b.n	800c010 <__ieee754_pow+0x980>
 800c066:	491c      	ldr	r1, [pc, #112]	; (800c0d8 <__ieee754_pow+0xa48>)
 800c068:	2000      	movs	r0, #0
 800c06a:	f7ff bb30 	b.w	800b6ce <__ieee754_pow+0x3e>
 800c06e:	2000      	movs	r0, #0
 800c070:	2100      	movs	r1, #0
 800c072:	f7ff bb2c 	b.w	800b6ce <__ieee754_pow+0x3e>
 800c076:	4630      	mov	r0, r6
 800c078:	4639      	mov	r1, r7
 800c07a:	f7ff bb28 	b.w	800b6ce <__ieee754_pow+0x3e>
 800c07e:	9204      	str	r2, [sp, #16]
 800c080:	f7ff bb7a 	b.w	800b778 <__ieee754_pow+0xe8>
 800c084:	2300      	movs	r3, #0
 800c086:	f7ff bb64 	b.w	800b752 <__ieee754_pow+0xc2>
 800c08a:	bf00      	nop
 800c08c:	f3af 8000 	nop.w
 800c090:	00000000 	.word	0x00000000
 800c094:	3fe62e43 	.word	0x3fe62e43
 800c098:	fefa39ef 	.word	0xfefa39ef
 800c09c:	3fe62e42 	.word	0x3fe62e42
 800c0a0:	0ca86c39 	.word	0x0ca86c39
 800c0a4:	be205c61 	.word	0xbe205c61
 800c0a8:	72bea4d0 	.word	0x72bea4d0
 800c0ac:	3e663769 	.word	0x3e663769
 800c0b0:	c5d26bf1 	.word	0xc5d26bf1
 800c0b4:	3ebbbd41 	.word	0x3ebbbd41
 800c0b8:	af25de2c 	.word	0xaf25de2c
 800c0bc:	3f11566a 	.word	0x3f11566a
 800c0c0:	16bebd93 	.word	0x16bebd93
 800c0c4:	3f66c16c 	.word	0x3f66c16c
 800c0c8:	5555553e 	.word	0x5555553e
 800c0cc:	3fc55555 	.word	0x3fc55555
 800c0d0:	3fe00000 	.word	0x3fe00000
 800c0d4:	000fffff 	.word	0x000fffff
 800c0d8:	3ff00000 	.word	0x3ff00000
 800c0dc:	4090cbff 	.word	0x4090cbff
 800c0e0:	3f6f3400 	.word	0x3f6f3400
 800c0e4:	652b82fe 	.word	0x652b82fe
 800c0e8:	3c971547 	.word	0x3c971547

0800c0ec <__ieee754_sqrt>:
 800c0ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0f0:	ec55 4b10 	vmov	r4, r5, d0
 800c0f4:	4e55      	ldr	r6, [pc, #340]	; (800c24c <__ieee754_sqrt+0x160>)
 800c0f6:	43ae      	bics	r6, r5
 800c0f8:	ee10 0a10 	vmov	r0, s0
 800c0fc:	ee10 3a10 	vmov	r3, s0
 800c100:	462a      	mov	r2, r5
 800c102:	4629      	mov	r1, r5
 800c104:	d110      	bne.n	800c128 <__ieee754_sqrt+0x3c>
 800c106:	ee10 2a10 	vmov	r2, s0
 800c10a:	462b      	mov	r3, r5
 800c10c:	f7f4 fa7c 	bl	8000608 <__aeabi_dmul>
 800c110:	4602      	mov	r2, r0
 800c112:	460b      	mov	r3, r1
 800c114:	4620      	mov	r0, r4
 800c116:	4629      	mov	r1, r5
 800c118:	f7f4 f8c0 	bl	800029c <__adddf3>
 800c11c:	4604      	mov	r4, r0
 800c11e:	460d      	mov	r5, r1
 800c120:	ec45 4b10 	vmov	d0, r4, r5
 800c124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c128:	2d00      	cmp	r5, #0
 800c12a:	dc10      	bgt.n	800c14e <__ieee754_sqrt+0x62>
 800c12c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c130:	4330      	orrs	r0, r6
 800c132:	d0f5      	beq.n	800c120 <__ieee754_sqrt+0x34>
 800c134:	b15d      	cbz	r5, 800c14e <__ieee754_sqrt+0x62>
 800c136:	ee10 2a10 	vmov	r2, s0
 800c13a:	462b      	mov	r3, r5
 800c13c:	ee10 0a10 	vmov	r0, s0
 800c140:	f7f4 f8aa 	bl	8000298 <__aeabi_dsub>
 800c144:	4602      	mov	r2, r0
 800c146:	460b      	mov	r3, r1
 800c148:	f7f4 fb88 	bl	800085c <__aeabi_ddiv>
 800c14c:	e7e6      	b.n	800c11c <__ieee754_sqrt+0x30>
 800c14e:	1512      	asrs	r2, r2, #20
 800c150:	d074      	beq.n	800c23c <__ieee754_sqrt+0x150>
 800c152:	07d4      	lsls	r4, r2, #31
 800c154:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c158:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800c15c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c160:	bf5e      	ittt	pl
 800c162:	0fda      	lsrpl	r2, r3, #31
 800c164:	005b      	lslpl	r3, r3, #1
 800c166:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800c16a:	2400      	movs	r4, #0
 800c16c:	0fda      	lsrs	r2, r3, #31
 800c16e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800c172:	107f      	asrs	r7, r7, #1
 800c174:	005b      	lsls	r3, r3, #1
 800c176:	2516      	movs	r5, #22
 800c178:	4620      	mov	r0, r4
 800c17a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c17e:	1886      	adds	r6, r0, r2
 800c180:	428e      	cmp	r6, r1
 800c182:	bfde      	ittt	le
 800c184:	1b89      	suble	r1, r1, r6
 800c186:	18b0      	addle	r0, r6, r2
 800c188:	18a4      	addle	r4, r4, r2
 800c18a:	0049      	lsls	r1, r1, #1
 800c18c:	3d01      	subs	r5, #1
 800c18e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800c192:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800c196:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c19a:	d1f0      	bne.n	800c17e <__ieee754_sqrt+0x92>
 800c19c:	462a      	mov	r2, r5
 800c19e:	f04f 0e20 	mov.w	lr, #32
 800c1a2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c1a6:	4281      	cmp	r1, r0
 800c1a8:	eb06 0c05 	add.w	ip, r6, r5
 800c1ac:	dc02      	bgt.n	800c1b4 <__ieee754_sqrt+0xc8>
 800c1ae:	d113      	bne.n	800c1d8 <__ieee754_sqrt+0xec>
 800c1b0:	459c      	cmp	ip, r3
 800c1b2:	d811      	bhi.n	800c1d8 <__ieee754_sqrt+0xec>
 800c1b4:	f1bc 0f00 	cmp.w	ip, #0
 800c1b8:	eb0c 0506 	add.w	r5, ip, r6
 800c1bc:	da43      	bge.n	800c246 <__ieee754_sqrt+0x15a>
 800c1be:	2d00      	cmp	r5, #0
 800c1c0:	db41      	blt.n	800c246 <__ieee754_sqrt+0x15a>
 800c1c2:	f100 0801 	add.w	r8, r0, #1
 800c1c6:	1a09      	subs	r1, r1, r0
 800c1c8:	459c      	cmp	ip, r3
 800c1ca:	bf88      	it	hi
 800c1cc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800c1d0:	eba3 030c 	sub.w	r3, r3, ip
 800c1d4:	4432      	add	r2, r6
 800c1d6:	4640      	mov	r0, r8
 800c1d8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800c1dc:	f1be 0e01 	subs.w	lr, lr, #1
 800c1e0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800c1e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c1e8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c1ec:	d1db      	bne.n	800c1a6 <__ieee754_sqrt+0xba>
 800c1ee:	430b      	orrs	r3, r1
 800c1f0:	d006      	beq.n	800c200 <__ieee754_sqrt+0x114>
 800c1f2:	1c50      	adds	r0, r2, #1
 800c1f4:	bf13      	iteet	ne
 800c1f6:	3201      	addne	r2, #1
 800c1f8:	3401      	addeq	r4, #1
 800c1fa:	4672      	moveq	r2, lr
 800c1fc:	f022 0201 	bicne.w	r2, r2, #1
 800c200:	1063      	asrs	r3, r4, #1
 800c202:	0852      	lsrs	r2, r2, #1
 800c204:	07e1      	lsls	r1, r4, #31
 800c206:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c20a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c20e:	bf48      	it	mi
 800c210:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800c214:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800c218:	4614      	mov	r4, r2
 800c21a:	e781      	b.n	800c120 <__ieee754_sqrt+0x34>
 800c21c:	0ad9      	lsrs	r1, r3, #11
 800c21e:	3815      	subs	r0, #21
 800c220:	055b      	lsls	r3, r3, #21
 800c222:	2900      	cmp	r1, #0
 800c224:	d0fa      	beq.n	800c21c <__ieee754_sqrt+0x130>
 800c226:	02cd      	lsls	r5, r1, #11
 800c228:	d50a      	bpl.n	800c240 <__ieee754_sqrt+0x154>
 800c22a:	f1c2 0420 	rsb	r4, r2, #32
 800c22e:	fa23 f404 	lsr.w	r4, r3, r4
 800c232:	1e55      	subs	r5, r2, #1
 800c234:	4093      	lsls	r3, r2
 800c236:	4321      	orrs	r1, r4
 800c238:	1b42      	subs	r2, r0, r5
 800c23a:	e78a      	b.n	800c152 <__ieee754_sqrt+0x66>
 800c23c:	4610      	mov	r0, r2
 800c23e:	e7f0      	b.n	800c222 <__ieee754_sqrt+0x136>
 800c240:	0049      	lsls	r1, r1, #1
 800c242:	3201      	adds	r2, #1
 800c244:	e7ef      	b.n	800c226 <__ieee754_sqrt+0x13a>
 800c246:	4680      	mov	r8, r0
 800c248:	e7bd      	b.n	800c1c6 <__ieee754_sqrt+0xda>
 800c24a:	bf00      	nop
 800c24c:	7ff00000 	.word	0x7ff00000

0800c250 <with_errno>:
 800c250:	b570      	push	{r4, r5, r6, lr}
 800c252:	4604      	mov	r4, r0
 800c254:	460d      	mov	r5, r1
 800c256:	4616      	mov	r6, r2
 800c258:	f7fc fa82 	bl	8008760 <__errno>
 800c25c:	4629      	mov	r1, r5
 800c25e:	6006      	str	r6, [r0, #0]
 800c260:	4620      	mov	r0, r4
 800c262:	bd70      	pop	{r4, r5, r6, pc}

0800c264 <xflow>:
 800c264:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c266:	4614      	mov	r4, r2
 800c268:	461d      	mov	r5, r3
 800c26a:	b108      	cbz	r0, 800c270 <xflow+0xc>
 800c26c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c270:	e9cd 2300 	strd	r2, r3, [sp]
 800c274:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c278:	4620      	mov	r0, r4
 800c27a:	4629      	mov	r1, r5
 800c27c:	f7f4 f9c4 	bl	8000608 <__aeabi_dmul>
 800c280:	2222      	movs	r2, #34	; 0x22
 800c282:	b003      	add	sp, #12
 800c284:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c288:	f7ff bfe2 	b.w	800c250 <with_errno>

0800c28c <__math_uflow>:
 800c28c:	b508      	push	{r3, lr}
 800c28e:	2200      	movs	r2, #0
 800c290:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c294:	f7ff ffe6 	bl	800c264 <xflow>
 800c298:	ec41 0b10 	vmov	d0, r0, r1
 800c29c:	bd08      	pop	{r3, pc}

0800c29e <__math_oflow>:
 800c29e:	b508      	push	{r3, lr}
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c2a6:	f7ff ffdd 	bl	800c264 <xflow>
 800c2aa:	ec41 0b10 	vmov	d0, r0, r1
 800c2ae:	bd08      	pop	{r3, pc}

0800c2b0 <fabs>:
 800c2b0:	ec51 0b10 	vmov	r0, r1, d0
 800c2b4:	ee10 2a10 	vmov	r2, s0
 800c2b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c2bc:	ec43 2b10 	vmov	d0, r2, r3
 800c2c0:	4770      	bx	lr

0800c2c2 <finite>:
 800c2c2:	b082      	sub	sp, #8
 800c2c4:	ed8d 0b00 	vstr	d0, [sp]
 800c2c8:	9801      	ldr	r0, [sp, #4]
 800c2ca:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c2ce:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c2d2:	0fc0      	lsrs	r0, r0, #31
 800c2d4:	b002      	add	sp, #8
 800c2d6:	4770      	bx	lr

0800c2d8 <scalbn>:
 800c2d8:	b570      	push	{r4, r5, r6, lr}
 800c2da:	ec55 4b10 	vmov	r4, r5, d0
 800c2de:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c2e2:	4606      	mov	r6, r0
 800c2e4:	462b      	mov	r3, r5
 800c2e6:	b99a      	cbnz	r2, 800c310 <scalbn+0x38>
 800c2e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c2ec:	4323      	orrs	r3, r4
 800c2ee:	d036      	beq.n	800c35e <scalbn+0x86>
 800c2f0:	4b39      	ldr	r3, [pc, #228]	; (800c3d8 <scalbn+0x100>)
 800c2f2:	4629      	mov	r1, r5
 800c2f4:	ee10 0a10 	vmov	r0, s0
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	f7f4 f985 	bl	8000608 <__aeabi_dmul>
 800c2fe:	4b37      	ldr	r3, [pc, #220]	; (800c3dc <scalbn+0x104>)
 800c300:	429e      	cmp	r6, r3
 800c302:	4604      	mov	r4, r0
 800c304:	460d      	mov	r5, r1
 800c306:	da10      	bge.n	800c32a <scalbn+0x52>
 800c308:	a32b      	add	r3, pc, #172	; (adr r3, 800c3b8 <scalbn+0xe0>)
 800c30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c30e:	e03a      	b.n	800c386 <scalbn+0xae>
 800c310:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c314:	428a      	cmp	r2, r1
 800c316:	d10c      	bne.n	800c332 <scalbn+0x5a>
 800c318:	ee10 2a10 	vmov	r2, s0
 800c31c:	4620      	mov	r0, r4
 800c31e:	4629      	mov	r1, r5
 800c320:	f7f3 ffbc 	bl	800029c <__adddf3>
 800c324:	4604      	mov	r4, r0
 800c326:	460d      	mov	r5, r1
 800c328:	e019      	b.n	800c35e <scalbn+0x86>
 800c32a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c32e:	460b      	mov	r3, r1
 800c330:	3a36      	subs	r2, #54	; 0x36
 800c332:	4432      	add	r2, r6
 800c334:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c338:	428a      	cmp	r2, r1
 800c33a:	dd08      	ble.n	800c34e <scalbn+0x76>
 800c33c:	2d00      	cmp	r5, #0
 800c33e:	a120      	add	r1, pc, #128	; (adr r1, 800c3c0 <scalbn+0xe8>)
 800c340:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c344:	da1c      	bge.n	800c380 <scalbn+0xa8>
 800c346:	a120      	add	r1, pc, #128	; (adr r1, 800c3c8 <scalbn+0xf0>)
 800c348:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c34c:	e018      	b.n	800c380 <scalbn+0xa8>
 800c34e:	2a00      	cmp	r2, #0
 800c350:	dd08      	ble.n	800c364 <scalbn+0x8c>
 800c352:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c356:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c35a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c35e:	ec45 4b10 	vmov	d0, r4, r5
 800c362:	bd70      	pop	{r4, r5, r6, pc}
 800c364:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c368:	da19      	bge.n	800c39e <scalbn+0xc6>
 800c36a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c36e:	429e      	cmp	r6, r3
 800c370:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c374:	dd0a      	ble.n	800c38c <scalbn+0xb4>
 800c376:	a112      	add	r1, pc, #72	; (adr r1, 800c3c0 <scalbn+0xe8>)
 800c378:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d1e2      	bne.n	800c346 <scalbn+0x6e>
 800c380:	a30f      	add	r3, pc, #60	; (adr r3, 800c3c0 <scalbn+0xe8>)
 800c382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c386:	f7f4 f93f 	bl	8000608 <__aeabi_dmul>
 800c38a:	e7cb      	b.n	800c324 <scalbn+0x4c>
 800c38c:	a10a      	add	r1, pc, #40	; (adr r1, 800c3b8 <scalbn+0xe0>)
 800c38e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d0b8      	beq.n	800c308 <scalbn+0x30>
 800c396:	a10e      	add	r1, pc, #56	; (adr r1, 800c3d0 <scalbn+0xf8>)
 800c398:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c39c:	e7b4      	b.n	800c308 <scalbn+0x30>
 800c39e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c3a2:	3236      	adds	r2, #54	; 0x36
 800c3a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c3a8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c3ac:	4620      	mov	r0, r4
 800c3ae:	4b0c      	ldr	r3, [pc, #48]	; (800c3e0 <scalbn+0x108>)
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	e7e8      	b.n	800c386 <scalbn+0xae>
 800c3b4:	f3af 8000 	nop.w
 800c3b8:	c2f8f359 	.word	0xc2f8f359
 800c3bc:	01a56e1f 	.word	0x01a56e1f
 800c3c0:	8800759c 	.word	0x8800759c
 800c3c4:	7e37e43c 	.word	0x7e37e43c
 800c3c8:	8800759c 	.word	0x8800759c
 800c3cc:	fe37e43c 	.word	0xfe37e43c
 800c3d0:	c2f8f359 	.word	0xc2f8f359
 800c3d4:	81a56e1f 	.word	0x81a56e1f
 800c3d8:	43500000 	.word	0x43500000
 800c3dc:	ffff3cb0 	.word	0xffff3cb0
 800c3e0:	3c900000 	.word	0x3c900000

0800c3e4 <_init>:
 800c3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3e6:	bf00      	nop
 800c3e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3ea:	bc08      	pop	{r3}
 800c3ec:	469e      	mov	lr, r3
 800c3ee:	4770      	bx	lr

0800c3f0 <_fini>:
 800c3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3f2:	bf00      	nop
 800c3f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3f6:	bc08      	pop	{r3}
 800c3f8:	469e      	mov	lr, r3
 800c3fa:	4770      	bx	lr


Multi-Functional Light-Source.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048bc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004a5c  08004a5c  00014a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004acc  08004acc  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08004acc  08004acc  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004acc  08004acc  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004acc  08004acc  00014acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ad0  08004ad0  00014ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08004ad4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          000000c8  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000148  20000148  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b5d1  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b64  00000000  00000000  0002b681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000788  00000000  00000000  0002d1e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006e0  00000000  00000000  0002d970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000200bb  00000000  00000000  0002e050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b131  00000000  00000000  0004e10b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c09ab  00000000  00000000  0005923c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00119be7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002114  00000000  00000000  00119c38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004a44 	.word	0x08004a44

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08004a44 	.word	0x08004a44

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t studentNum[13]="#:23765518:$\n" ;
uint8_t recvd_char[1];
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]

	//transmit recvd characer
	HAL_UART_Transmit(&huart2, recvd_char, 1, 50) ;
 8000298:	2332      	movs	r3, #50	; 0x32
 800029a:	2201      	movs	r2, #1
 800029c:	4906      	ldr	r1, [pc, #24]	; (80002b8 <HAL_UART_RxCpltCallback+0x28>)
 800029e:	4807      	ldr	r0, [pc, #28]	; (80002bc <HAL_UART_RxCpltCallback+0x2c>)
 80002a0:	f002 fcba 	bl	8002c18 <HAL_UART_Transmit>

	// recieve character
	HAL_UART_Receive_IT(&huart2, recvd_char, 1);
 80002a4:	2201      	movs	r2, #1
 80002a6:	4904      	ldr	r1, [pc, #16]	; (80002b8 <HAL_UART_RxCpltCallback+0x28>)
 80002a8:	4804      	ldr	r0, [pc, #16]	; (80002bc <HAL_UART_RxCpltCallback+0x2c>)
 80002aa:	f002 fd3f 	bl	8002d2c <HAL_UART_Receive_IT>
}
 80002ae:	bf00      	nop
 80002b0:	3708      	adds	r7, #8
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	20000124 	.word	0x20000124
 80002bc:	2000009c 	.word	0x2000009c

080002c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b084      	sub	sp, #16
 80002c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int button_count= 0 ;
 80002c6:	2300      	movs	r3, #0
 80002c8:	60fb      	str	r3, [r7, #12]
	char button_press[10] = {' '} ;
 80002ca:	2320      	movs	r3, #32
 80002cc:	603b      	str	r3, [r7, #0]
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	2200      	movs	r2, #0
 80002d2:	601a      	str	r2, [r3, #0]
 80002d4:	809a      	strh	r2, [r3, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002d6:	f000 fb9f 	bl	8000a18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002da:	f000 f875 	bl	80003c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002de:	f000 f903 	bl	80004e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002e2:	f000 f8cf 	bl	8000484 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(200);
 80002e6:	20c8      	movs	r0, #200	; 0xc8
 80002e8:	f000 fbfc 	bl	8000ae4 <HAL_Delay>
  HAL_UART_Transmit(&huart2, studentNum, 13, 150); //transmit student number
 80002ec:	2396      	movs	r3, #150	; 0x96
 80002ee:	220d      	movs	r2, #13
 80002f0:	492d      	ldr	r1, [pc, #180]	; (80003a8 <main+0xe8>)
 80002f2:	482e      	ldr	r0, [pc, #184]	; (80003ac <main+0xec>)
 80002f4:	f002 fc90 	bl	8002c18 <HAL_UART_Transmit>

  HAL_UART_Receive_IT(&huart2, recvd_char, 1); //recv character input
 80002f8:	2201      	movs	r2, #1
 80002fa:	492d      	ldr	r1, [pc, #180]	; (80003b0 <main+0xf0>)
 80002fc:	482b      	ldr	r0, [pc, #172]	; (80003ac <main+0xec>)
 80002fe:	f002 fd15 	bl	8002d2c <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 //10 ms delay
	  if(middle_button_pressed == 1){
 8000302:	4b2c      	ldr	r3, [pc, #176]	; (80003b4 <main+0xf4>)
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	2b01      	cmp	r3, #1
 8000308:	d129      	bne.n	800035e <main+0x9e>
		  middle_button_pressed = 0;
 800030a:	4b2a      	ldr	r3, [pc, #168]	; (80003b4 <main+0xf4>)
 800030c:	2200      	movs	r2, #0
 800030e:	701a      	strb	r2, [r3, #0]

		  button_count++;
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	3301      	adds	r3, #1
 8000314:	60fb      	str	r3, [r7, #12]

		  if(button_count > 999){
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800031c:	db01      	blt.n	8000322 <main+0x62>
			  button_count = 1 ;
 800031e:	2301      	movs	r3, #1
 8000320:	60fb      	str	r3, [r7, #12]
		  }

		  sprintf(button_press,"%d\n", button_count) ;
 8000322:	463b      	mov	r3, r7
 8000324:	68fa      	ldr	r2, [r7, #12]
 8000326:	4924      	ldr	r1, [pc, #144]	; (80003b8 <main+0xf8>)
 8000328:	4618      	mov	r0, r3
 800032a:	f003 ff1d 	bl	8004168 <siprintf>

		  // TRANSMIT BUTTON COUNT
		  HAL_UART_Transmit(&huart2, (uint8_t*)button_press, strlen(button_press), 50) ;
 800032e:	463b      	mov	r3, r7
 8000330:	4618      	mov	r0, r3
 8000332:	f7ff ff55 	bl	80001e0 <strlen>
 8000336:	4603      	mov	r3, r0
 8000338:	b29a      	uxth	r2, r3
 800033a:	4639      	mov	r1, r7
 800033c:	2332      	movs	r3, #50	; 0x32
 800033e:	481b      	ldr	r0, [pc, #108]	; (80003ac <main+0xec>)
 8000340:	f002 fc6a 	bl	8002c18 <HAL_UART_Transmit>

		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5)  ;
 8000344:	2120      	movs	r1, #32
 8000346:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800034a:	f000 ff31 	bl	80011b0 <HAL_GPIO_TogglePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800034e:	2201      	movs	r2, #1
 8000350:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000354:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000358:	f000 ff12 	bl	8001180 <HAL_GPIO_WritePin>
 800035c:	e7d1      	b.n	8000302 <main+0x42>
	  }
	  else if(right_button_pressed==1){
 800035e:	4b17      	ldr	r3, [pc, #92]	; (80003bc <main+0xfc>)
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	2b01      	cmp	r3, #1
 8000364:	d112      	bne.n	800038c <main+0xcc>
		  right_button_pressed = 0 ;
 8000366:	4b15      	ldr	r3, [pc, #84]	; (80003bc <main+0xfc>)
 8000368:	2200      	movs	r2, #0
 800036a:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5)  ;
 800036c:	2120      	movs	r1, #32
 800036e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000372:	f000 ff1d 	bl	80011b0 <HAL_GPIO_TogglePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000376:	2201      	movs	r2, #1
 8000378:	2110      	movs	r1, #16
 800037a:	4811      	ldr	r0, [pc, #68]	; (80003c0 <main+0x100>)
 800037c:	f000 ff00 	bl	8001180 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000380:	2201      	movs	r2, #1
 8000382:	2120      	movs	r1, #32
 8000384:	480e      	ldr	r0, [pc, #56]	; (80003c0 <main+0x100>)
 8000386:	f000 fefb 	bl	8001180 <HAL_GPIO_WritePin>
 800038a:	e7ba      	b.n	8000302 <main+0x42>

	  }
	  else{
		  if(left_button_pressed ==1){
 800038c:	4b0d      	ldr	r3, [pc, #52]	; (80003c4 <main+0x104>)
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	2b01      	cmp	r3, #1
 8000392:	d1b6      	bne.n	8000302 <main+0x42>
			  left_button_pressed = 0 ;
 8000394:	4b0b      	ldr	r3, [pc, #44]	; (80003c4 <main+0x104>)
 8000396:	2200      	movs	r2, #0
 8000398:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 800039a:	2201      	movs	r2, #1
 800039c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003a0:	4807      	ldr	r0, [pc, #28]	; (80003c0 <main+0x100>)
 80003a2:	f000 feed 	bl	8001180 <HAL_GPIO_WritePin>
	  if(middle_button_pressed == 1){
 80003a6:	e7ac      	b.n	8000302 <main+0x42>
 80003a8:	20000000 	.word	0x20000000
 80003ac:	2000009c 	.word	0x2000009c
 80003b0:	20000124 	.word	0x20000124
 80003b4:	2000012c 	.word	0x2000012c
 80003b8:	08004a5c 	.word	0x08004a5c
 80003bc:	2000012d 	.word	0x2000012d
 80003c0:	48000400 	.word	0x48000400
 80003c4:	2000012e 	.word	0x2000012e

080003c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b0a6      	sub	sp, #152	; 0x98
 80003cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ce:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80003d2:	2228      	movs	r2, #40	; 0x28
 80003d4:	2100      	movs	r1, #0
 80003d6:	4618      	mov	r0, r3
 80003d8:	f003 febe 	bl	8004158 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003dc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80003e0:	2200      	movs	r2, #0
 80003e2:	601a      	str	r2, [r3, #0]
 80003e4:	605a      	str	r2, [r3, #4]
 80003e6:	609a      	str	r2, [r3, #8]
 80003e8:	60da      	str	r2, [r3, #12]
 80003ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003ec:	1d3b      	adds	r3, r7, #4
 80003ee:	2258      	movs	r2, #88	; 0x58
 80003f0:	2100      	movs	r1, #0
 80003f2:	4618      	mov	r0, r3
 80003f4:	f003 feb0 	bl	8004158 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003f8:	2302      	movs	r3, #2
 80003fa:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003fc:	2301      	movs	r3, #1
 80003fe:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000400:	2310      	movs	r3, #16
 8000402:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000406:	2302      	movs	r3, #2
 8000408:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800040c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000410:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000414:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000418:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800041c:	2300      	movs	r3, #0
 800041e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000422:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000426:	4618      	mov	r0, r3
 8000428:	f000 ff00 	bl	800122c <HAL_RCC_OscConfig>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000432:	f000 f8fd 	bl	8000630 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000436:	230f      	movs	r3, #15
 8000438:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800043a:	2302      	movs	r3, #2
 800043c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800043e:	2300      	movs	r3, #0
 8000440:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000442:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000446:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000448:	2300      	movs	r3, #0
 800044a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800044c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000450:	2102      	movs	r1, #2
 8000452:	4618      	mov	r0, r3
 8000454:	f001 ff3e 	bl	80022d4 <HAL_RCC_ClockConfig>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800045e:	f000 f8e7 	bl	8000630 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000462:	2302      	movs	r3, #2
 8000464:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000466:	2300      	movs	r3, #0
 8000468:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800046a:	1d3b      	adds	r3, r7, #4
 800046c:	4618      	mov	r0, r3
 800046e:	f002 f967 	bl	8002740 <HAL_RCCEx_PeriphCLKConfig>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d001      	beq.n	800047c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000478:	f000 f8da 	bl	8000630 <Error_Handler>
  }
}
 800047c:	bf00      	nop
 800047e:	3798      	adds	r7, #152	; 0x98
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}

08000484 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000488:	4b15      	ldr	r3, [pc, #84]	; (80004e0 <MX_USART2_UART_Init+0x5c>)
 800048a:	4a16      	ldr	r2, [pc, #88]	; (80004e4 <MX_USART2_UART_Init+0x60>)
 800048c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 800048e:	4b14      	ldr	r3, [pc, #80]	; (80004e0 <MX_USART2_UART_Init+0x5c>)
 8000490:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000494:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8000496:	4b12      	ldr	r3, [pc, #72]	; (80004e0 <MX_USART2_UART_Init+0x5c>)
 8000498:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800049c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 800049e:	4b10      	ldr	r3, [pc, #64]	; (80004e0 <MX_USART2_UART_Init+0x5c>)
 80004a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80004a6:	4b0e      	ldr	r3, [pc, #56]	; (80004e0 <MX_USART2_UART_Init+0x5c>)
 80004a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80004ac:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004ae:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <MX_USART2_UART_Init+0x5c>)
 80004b0:	220c      	movs	r2, #12
 80004b2:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004b4:	4b0a      	ldr	r3, [pc, #40]	; (80004e0 <MX_USART2_UART_Init+0x5c>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004ba:	4b09      	ldr	r3, [pc, #36]	; (80004e0 <MX_USART2_UART_Init+0x5c>)
 80004bc:	2200      	movs	r2, #0
 80004be:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004c0:	4b07      	ldr	r3, [pc, #28]	; (80004e0 <MX_USART2_UART_Init+0x5c>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004c6:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <MX_USART2_UART_Init+0x5c>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004cc:	4804      	ldr	r0, [pc, #16]	; (80004e0 <MX_USART2_UART_Init+0x5c>)
 80004ce:	f002 fb55 	bl	8002b7c <HAL_UART_Init>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d001      	beq.n	80004dc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80004d8:	f000 f8aa 	bl	8000630 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004dc:	bf00      	nop
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	2000009c 	.word	0x2000009c
 80004e4:	40004400 	.word	0x40004400

080004e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b08a      	sub	sp, #40	; 0x28
 80004ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ee:	f107 0314 	add.w	r3, r7, #20
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
 80004f6:	605a      	str	r2, [r3, #4]
 80004f8:	609a      	str	r2, [r3, #8]
 80004fa:	60da      	str	r2, [r3, #12]
 80004fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fe:	4b49      	ldr	r3, [pc, #292]	; (8000624 <MX_GPIO_Init+0x13c>)
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	4a48      	ldr	r2, [pc, #288]	; (8000624 <MX_GPIO_Init+0x13c>)
 8000504:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000508:	6153      	str	r3, [r2, #20]
 800050a:	4b46      	ldr	r3, [pc, #280]	; (8000624 <MX_GPIO_Init+0x13c>)
 800050c:	695b      	ldr	r3, [r3, #20]
 800050e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000512:	613b      	str	r3, [r7, #16]
 8000514:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000516:	4b43      	ldr	r3, [pc, #268]	; (8000624 <MX_GPIO_Init+0x13c>)
 8000518:	695b      	ldr	r3, [r3, #20]
 800051a:	4a42      	ldr	r2, [pc, #264]	; (8000624 <MX_GPIO_Init+0x13c>)
 800051c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000520:	6153      	str	r3, [r2, #20]
 8000522:	4b40      	ldr	r3, [pc, #256]	; (8000624 <MX_GPIO_Init+0x13c>)
 8000524:	695b      	ldr	r3, [r3, #20]
 8000526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052e:	4b3d      	ldr	r3, [pc, #244]	; (8000624 <MX_GPIO_Init+0x13c>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	4a3c      	ldr	r2, [pc, #240]	; (8000624 <MX_GPIO_Init+0x13c>)
 8000534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000538:	6153      	str	r3, [r2, #20]
 800053a:	4b3a      	ldr	r3, [pc, #232]	; (8000624 <MX_GPIO_Init+0x13c>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000546:	4b37      	ldr	r3, [pc, #220]	; (8000624 <MX_GPIO_Init+0x13c>)
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	4a36      	ldr	r2, [pc, #216]	; (8000624 <MX_GPIO_Init+0x13c>)
 800054c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000550:	6153      	str	r3, [r2, #20]
 8000552:	4b34      	ldr	r3, [pc, #208]	; (8000624 <MX_GPIO_Init+0x13c>)
 8000554:	695b      	ldr	r3, [r3, #20]
 8000556:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED_D2_Pin, GPIO_PIN_RESET);
 800055e:	2200      	movs	r2, #0
 8000560:	f44f 7190 	mov.w	r1, #288	; 0x120
 8000564:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000568:	f000 fe0a 	bl	8001180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_D3_Pin|LED_D4_Pin|LED_D5_Pin, GPIO_PIN_RESET);
 800056c:	2200      	movs	r2, #0
 800056e:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8000572:	482d      	ldr	r0, [pc, #180]	; (8000628 <MX_GPIO_Init+0x140>)
 8000574:	f000 fe04 	bl	8001180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000578:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800057c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800057e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000582:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000584:	2300      	movs	r3, #0
 8000586:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000588:	f107 0314 	add.w	r3, r7, #20
 800058c:	4619      	mov	r1, r3
 800058e:	4827      	ldr	r0, [pc, #156]	; (800062c <MX_GPIO_Init+0x144>)
 8000590:	f000 fc54 	bl	8000e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LED_D2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED_D2_Pin;
 8000594:	f44f 7390 	mov.w	r3, #288	; 0x120
 8000598:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059a:	2301      	movs	r3, #1
 800059c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059e:	2300      	movs	r3, #0
 80005a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a2:	2300      	movs	r3, #0
 80005a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a6:	f107 0314 	add.w	r3, r7, #20
 80005aa:	4619      	mov	r1, r3
 80005ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b0:	f000 fc44 	bl	8000e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80005b4:	23c0      	movs	r3, #192	; 0xc0
 80005b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80005b8:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80005bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005be:	2301      	movs	r3, #1
 80005c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c2:	f107 0314 	add.w	r3, r7, #20
 80005c6:	4619      	mov	r1, r3
 80005c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005cc:	f000 fc36 	bl	8000e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_D3_Pin LED_D4_Pin LED_D5_Pin */
  GPIO_InitStruct.Pin = LED_D3_Pin|LED_D4_Pin|LED_D5_Pin;
 80005d0:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80005d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d6:	2301      	movs	r3, #1
 80005d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005da:	2300      	movs	r3, #0
 80005dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005de:	2300      	movs	r3, #0
 80005e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	4619      	mov	r1, r3
 80005e8:	480f      	ldr	r0, [pc, #60]	; (8000628 <MX_GPIO_Init+0x140>)
 80005ea:	f000 fc27 	bl	8000e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80005ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80005f4:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80005f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005fa:	2301      	movs	r3, #1
 80005fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005fe:	f107 0314 	add.w	r3, r7, #20
 8000602:	4619      	mov	r1, r3
 8000604:	4808      	ldr	r0, [pc, #32]	; (8000628 <MX_GPIO_Init+0x140>)
 8000606:	f000 fc19 	bl	8000e3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800060a:	2200      	movs	r2, #0
 800060c:	2100      	movs	r1, #0
 800060e:	2017      	movs	r0, #23
 8000610:	f000 fb67 	bl	8000ce2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000614:	2017      	movs	r0, #23
 8000616:	f000 fb80 	bl	8000d1a <HAL_NVIC_EnableIRQ>

}
 800061a:	bf00      	nop
 800061c:	3728      	adds	r7, #40	; 0x28
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40021000 	.word	0x40021000
 8000628:	48000400 	.word	0x48000400
 800062c:	48000800 	.word	0x48000800

08000630 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000634:	b672      	cpsid	i
}
 8000636:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000638:	e7fe      	b.n	8000638 <Error_Handler+0x8>
	...

0800063c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000642:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <HAL_MspInit+0x44>)
 8000644:	699b      	ldr	r3, [r3, #24]
 8000646:	4a0e      	ldr	r2, [pc, #56]	; (8000680 <HAL_MspInit+0x44>)
 8000648:	f043 0301 	orr.w	r3, r3, #1
 800064c:	6193      	str	r3, [r2, #24]
 800064e:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <HAL_MspInit+0x44>)
 8000650:	699b      	ldr	r3, [r3, #24]
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800065a:	4b09      	ldr	r3, [pc, #36]	; (8000680 <HAL_MspInit+0x44>)
 800065c:	69db      	ldr	r3, [r3, #28]
 800065e:	4a08      	ldr	r2, [pc, #32]	; (8000680 <HAL_MspInit+0x44>)
 8000660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000664:	61d3      	str	r3, [r2, #28]
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <HAL_MspInit+0x44>)
 8000668:	69db      	ldr	r3, [r3, #28]
 800066a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066e:	603b      	str	r3, [r7, #0]
 8000670:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000672:	2007      	movs	r0, #7
 8000674:	f000 fb2a 	bl	8000ccc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40021000 	.word	0x40021000

08000684 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08a      	sub	sp, #40	; 0x28
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068c:	f107 0314 	add.w	r3, r7, #20
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a1b      	ldr	r2, [pc, #108]	; (8000710 <HAL_UART_MspInit+0x8c>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d130      	bne.n	8000708 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006a6:	4b1b      	ldr	r3, [pc, #108]	; (8000714 <HAL_UART_MspInit+0x90>)
 80006a8:	69db      	ldr	r3, [r3, #28]
 80006aa:	4a1a      	ldr	r2, [pc, #104]	; (8000714 <HAL_UART_MspInit+0x90>)
 80006ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006b0:	61d3      	str	r3, [r2, #28]
 80006b2:	4b18      	ldr	r3, [pc, #96]	; (8000714 <HAL_UART_MspInit+0x90>)
 80006b4:	69db      	ldr	r3, [r3, #28]
 80006b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ba:	613b      	str	r3, [r7, #16]
 80006bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	4b15      	ldr	r3, [pc, #84]	; (8000714 <HAL_UART_MspInit+0x90>)
 80006c0:	695b      	ldr	r3, [r3, #20]
 80006c2:	4a14      	ldr	r2, [pc, #80]	; (8000714 <HAL_UART_MspInit+0x90>)
 80006c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006c8:	6153      	str	r3, [r2, #20]
 80006ca:	4b12      	ldr	r3, [pc, #72]	; (8000714 <HAL_UART_MspInit+0x90>)
 80006cc:	695b      	ldr	r3, [r3, #20]
 80006ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80006d6:	230c      	movs	r3, #12
 80006d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006da:	2302      	movs	r3, #2
 80006dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e2:	2300      	movs	r3, #0
 80006e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80006e6:	2307      	movs	r3, #7
 80006e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ea:	f107 0314 	add.w	r3, r7, #20
 80006ee:	4619      	mov	r1, r3
 80006f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f4:	f000 fba2 	bl	8000e3c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2100      	movs	r1, #0
 80006fc:	2026      	movs	r0, #38	; 0x26
 80006fe:	f000 faf0 	bl	8000ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000702:	2026      	movs	r0, #38	; 0x26
 8000704:	f000 fb09 	bl	8000d1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000708:	bf00      	nop
 800070a:	3728      	adds	r7, #40	; 0x28
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40004400 	.word	0x40004400
 8000714:	40021000 	.word	0x40021000

08000718 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800071c:	e7fe      	b.n	800071c <NMI_Handler+0x4>

0800071e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000722:	e7fe      	b.n	8000722 <HardFault_Handler+0x4>

08000724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000728:	e7fe      	b.n	8000728 <MemManage_Handler+0x4>

0800072a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800072e:	e7fe      	b.n	800072e <BusFault_Handler+0x4>

08000730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000734:	e7fe      	b.n	8000734 <UsageFault_Handler+0x4>

08000736 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr

08000752 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr

08000760 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000764:	f000 f99e 	bl	8000aa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}

0800076c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_6) != RESET){
 8000770:	4b64      	ldr	r3, [pc, #400]	; (8000904 <EXTI9_5_IRQHandler+0x198>)
 8000772:	695b      	ldr	r3, [r3, #20]
 8000774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000778:	2b00      	cmp	r3, #0
 800077a:	d038      	beq.n	80007ee <EXTI9_5_IRQHandler+0x82>

		if(HAL_GetTick() - ticks_pressed >= 20){
 800077c:	f000 f9a6 	bl	8000acc <HAL_GetTick>
 8000780:	4602      	mov	r2, r0
 8000782:	4b61      	ldr	r3, [pc, #388]	; (8000908 <EXTI9_5_IRQHandler+0x19c>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	1ad3      	subs	r3, r2, r3
 8000788:	2b13      	cmp	r3, #19
 800078a:	d92c      	bls.n	80007e6 <EXTI9_5_IRQHandler+0x7a>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 0){
 800078c:	4b5f      	ldr	r3, [pc, #380]	; (800090c <EXTI9_5_IRQHandler+0x1a0>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	b2db      	uxtb	r3, r3
 8000792:	2b01      	cmp	r3, #1
 8000794:	d112      	bne.n	80007bc <EXTI9_5_IRQHandler+0x50>
 8000796:	2140      	movs	r1, #64	; 0x40
 8000798:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800079c:	f000 fcd8 	bl	8001150 <HAL_GPIO_ReadPin>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d10a      	bne.n	80007bc <EXTI9_5_IRQHandler+0x50>
				button_state =0 ; // stable low reached
 80007a6:	4b59      	ldr	r3, [pc, #356]	; (800090c <EXTI9_5_IRQHandler+0x1a0>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 80007ac:	f000 f98e 	bl	8000acc <HAL_GetTick>
 80007b0:	4603      	mov	r3, r0
 80007b2:	4a55      	ldr	r2, [pc, #340]	; (8000908 <EXTI9_5_IRQHandler+0x19c>)
 80007b4:	6013      	str	r3, [r2, #0]

				middle_button_pressed = 1;
 80007b6:	4b56      	ldr	r3, [pc, #344]	; (8000910 <EXTI9_5_IRQHandler+0x1a4>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOA ,GPIO_PIN_6) == 1 ){
 80007bc:	4b53      	ldr	r3, [pc, #332]	; (800090c <EXTI9_5_IRQHandler+0x1a0>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d10f      	bne.n	80007e6 <EXTI9_5_IRQHandler+0x7a>
 80007c6:	2140      	movs	r1, #64	; 0x40
 80007c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007cc:	f000 fcc0 	bl	8001150 <HAL_GPIO_ReadPin>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d107      	bne.n	80007e6 <EXTI9_5_IRQHandler+0x7a>
				ticks_pressed = HAL_GetTick() ;
 80007d6:	f000 f979 	bl	8000acc <HAL_GetTick>
 80007da:	4603      	mov	r3, r0
 80007dc:	4a4a      	ldr	r2, [pc, #296]	; (8000908 <EXTI9_5_IRQHandler+0x19c>)
 80007de:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 80007e0:	4b4a      	ldr	r3, [pc, #296]	; (800090c <EXTI9_5_IRQHandler+0x1a0>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	701a      	strb	r2, [r3, #0]

			}
		}
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6) ;
 80007e6:	4b47      	ldr	r3, [pc, #284]	; (8000904 <EXTI9_5_IRQHandler+0x198>)
 80007e8:	2240      	movs	r2, #64	; 0x40
 80007ea:	615a      	str	r2, [r3, #20]
 80007ec:	e07d      	b.n	80008ea <EXTI9_5_IRQHandler+0x17e>
	}
	else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET){
 80007ee:	4b45      	ldr	r3, [pc, #276]	; (8000904 <EXTI9_5_IRQHandler+0x198>)
 80007f0:	695b      	ldr	r3, [r3, #20]
 80007f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d038      	beq.n	800086c <EXTI9_5_IRQHandler+0x100>

			if(HAL_GetTick() - ticks_pressed >= 20){
 80007fa:	f000 f967 	bl	8000acc <HAL_GetTick>
 80007fe:	4602      	mov	r2, r0
 8000800:	4b41      	ldr	r3, [pc, #260]	; (8000908 <EXTI9_5_IRQHandler+0x19c>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	1ad3      	subs	r3, r2, r3
 8000806:	2b13      	cmp	r3, #19
 8000808:	d92c      	bls.n	8000864 <EXTI9_5_IRQHandler+0xf8>
				// stable low state
				if(button_state == 1  && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 0){
 800080a:	4b40      	ldr	r3, [pc, #256]	; (800090c <EXTI9_5_IRQHandler+0x1a0>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	b2db      	uxtb	r3, r3
 8000810:	2b01      	cmp	r3, #1
 8000812:	d112      	bne.n	800083a <EXTI9_5_IRQHandler+0xce>
 8000814:	2180      	movs	r1, #128	; 0x80
 8000816:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800081a:	f000 fc99 	bl	8001150 <HAL_GPIO_ReadPin>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d10a      	bne.n	800083a <EXTI9_5_IRQHandler+0xce>
					button_state =0 ; // stable low reached
 8000824:	4b39      	ldr	r3, [pc, #228]	; (800090c <EXTI9_5_IRQHandler+0x1a0>)
 8000826:	2200      	movs	r2, #0
 8000828:	701a      	strb	r2, [r3, #0]
					ticks_pressed = HAL_GetTick() ;
 800082a:	f000 f94f 	bl	8000acc <HAL_GetTick>
 800082e:	4603      	mov	r3, r0
 8000830:	4a35      	ldr	r2, [pc, #212]	; (8000908 <EXTI9_5_IRQHandler+0x19c>)
 8000832:	6013      	str	r3, [r2, #0]

					right_button_pressed = 1;
 8000834:	4b37      	ldr	r3, [pc, #220]	; (8000914 <EXTI9_5_IRQHandler+0x1a8>)
 8000836:	2201      	movs	r2, #1
 8000838:	701a      	strb	r2, [r3, #0]
				}

				// stable high state
				if(button_state == 0 && HAL_GPIO_ReadPin(GPIOA ,GPIO_PIN_7) == 1 ){
 800083a:	4b34      	ldr	r3, [pc, #208]	; (800090c <EXTI9_5_IRQHandler+0x1a0>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	b2db      	uxtb	r3, r3
 8000840:	2b00      	cmp	r3, #0
 8000842:	d10f      	bne.n	8000864 <EXTI9_5_IRQHandler+0xf8>
 8000844:	2180      	movs	r1, #128	; 0x80
 8000846:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800084a:	f000 fc81 	bl	8001150 <HAL_GPIO_ReadPin>
 800084e:	4603      	mov	r3, r0
 8000850:	2b01      	cmp	r3, #1
 8000852:	d107      	bne.n	8000864 <EXTI9_5_IRQHandler+0xf8>
					ticks_pressed = HAL_GetTick() ;
 8000854:	f000 f93a 	bl	8000acc <HAL_GetTick>
 8000858:	4603      	mov	r3, r0
 800085a:	4a2b      	ldr	r2, [pc, #172]	; (8000908 <EXTI9_5_IRQHandler+0x19c>)
 800085c:	6013      	str	r3, [r2, #0]
					button_state =1 ; // stable high state
 800085e:	4b2b      	ldr	r3, [pc, #172]	; (800090c <EXTI9_5_IRQHandler+0x1a0>)
 8000860:	2201      	movs	r2, #1
 8000862:	701a      	strb	r2, [r3, #0]

				}
			}


			__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7) ;
 8000864:	4b27      	ldr	r3, [pc, #156]	; (8000904 <EXTI9_5_IRQHandler+0x198>)
 8000866:	2280      	movs	r2, #128	; 0x80
 8000868:	615a      	str	r2, [r3, #20]
 800086a:	e03e      	b.n	80008ea <EXTI9_5_IRQHandler+0x17e>
	}
	else{
		if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_8) != RESET){
 800086c:	4b25      	ldr	r3, [pc, #148]	; (8000904 <EXTI9_5_IRQHandler+0x198>)
 800086e:	695b      	ldr	r3, [r3, #20]
 8000870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000874:	2b00      	cmp	r3, #0
 8000876:	d038      	beq.n	80008ea <EXTI9_5_IRQHandler+0x17e>

				if(HAL_GetTick() - ticks_pressed >= 20){
 8000878:	f000 f928 	bl	8000acc <HAL_GetTick>
 800087c:	4602      	mov	r2, r0
 800087e:	4b22      	ldr	r3, [pc, #136]	; (8000908 <EXTI9_5_IRQHandler+0x19c>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	1ad3      	subs	r3, r2, r3
 8000884:	2b13      	cmp	r3, #19
 8000886:	d92c      	bls.n	80008e2 <EXTI9_5_IRQHandler+0x176>
					// stable low state
					if(button_state == 1  && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == 0){
 8000888:	4b20      	ldr	r3, [pc, #128]	; (800090c <EXTI9_5_IRQHandler+0x1a0>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	b2db      	uxtb	r3, r3
 800088e:	2b01      	cmp	r3, #1
 8000890:	d112      	bne.n	80008b8 <EXTI9_5_IRQHandler+0x14c>
 8000892:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000896:	4820      	ldr	r0, [pc, #128]	; (8000918 <EXTI9_5_IRQHandler+0x1ac>)
 8000898:	f000 fc5a 	bl	8001150 <HAL_GPIO_ReadPin>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d10a      	bne.n	80008b8 <EXTI9_5_IRQHandler+0x14c>
						button_state =0 ; // stable low reached
 80008a2:	4b1a      	ldr	r3, [pc, #104]	; (800090c <EXTI9_5_IRQHandler+0x1a0>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	701a      	strb	r2, [r3, #0]
						ticks_pressed = HAL_GetTick() ;
 80008a8:	f000 f910 	bl	8000acc <HAL_GetTick>
 80008ac:	4603      	mov	r3, r0
 80008ae:	4a16      	ldr	r2, [pc, #88]	; (8000908 <EXTI9_5_IRQHandler+0x19c>)
 80008b0:	6013      	str	r3, [r2, #0]

						left_button_pressed = 1;
 80008b2:	4b1a      	ldr	r3, [pc, #104]	; (800091c <EXTI9_5_IRQHandler+0x1b0>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	701a      	strb	r2, [r3, #0]
					}

					// stable high state
					if(button_state == 0 && HAL_GPIO_ReadPin(GPIOB ,GPIO_PIN_8) == 1 ){
 80008b8:	4b14      	ldr	r3, [pc, #80]	; (800090c <EXTI9_5_IRQHandler+0x1a0>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d10f      	bne.n	80008e2 <EXTI9_5_IRQHandler+0x176>
 80008c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008c6:	4814      	ldr	r0, [pc, #80]	; (8000918 <EXTI9_5_IRQHandler+0x1ac>)
 80008c8:	f000 fc42 	bl	8001150 <HAL_GPIO_ReadPin>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d107      	bne.n	80008e2 <EXTI9_5_IRQHandler+0x176>
						ticks_pressed = HAL_GetTick() ;
 80008d2:	f000 f8fb 	bl	8000acc <HAL_GetTick>
 80008d6:	4603      	mov	r3, r0
 80008d8:	4a0b      	ldr	r2, [pc, #44]	; (8000908 <EXTI9_5_IRQHandler+0x19c>)
 80008da:	6013      	str	r3, [r2, #0]
						button_state =1 ; // stable high state
 80008dc:	4b0b      	ldr	r3, [pc, #44]	; (800090c <EXTI9_5_IRQHandler+0x1a0>)
 80008de:	2201      	movs	r2, #1
 80008e0:	701a      	strb	r2, [r3, #0]

					}
				}
				__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8) ;
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <EXTI9_5_IRQHandler+0x198>)
 80008e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008e8:	615a      	str	r2, [r3, #20]
			}
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80008ea:	2040      	movs	r0, #64	; 0x40
 80008ec:	f000 fc7a 	bl	80011e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80008f0:	2080      	movs	r0, #128	; 0x80
 80008f2:	f000 fc77 	bl	80011e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80008f6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80008fa:	f000 fc73 	bl	80011e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40010400 	.word	0x40010400
 8000908:	20000128 	.word	0x20000128
 800090c:	2000000d 	.word	0x2000000d
 8000910:	2000012c 	.word	0x2000012c
 8000914:	2000012d 	.word	0x2000012d
 8000918:	48000400 	.word	0x48000400
 800091c:	2000012e 	.word	0x2000012e

08000920 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000924:	4802      	ldr	r0, [pc, #8]	; (8000930 <USART2_IRQHandler+0x10>)
 8000926:	f002 fa45 	bl	8002db4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	2000009c 	.word	0x2000009c

08000934 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800093c:	4a14      	ldr	r2, [pc, #80]	; (8000990 <_sbrk+0x5c>)
 800093e:	4b15      	ldr	r3, [pc, #84]	; (8000994 <_sbrk+0x60>)
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000948:	4b13      	ldr	r3, [pc, #76]	; (8000998 <_sbrk+0x64>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d102      	bne.n	8000956 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000950:	4b11      	ldr	r3, [pc, #68]	; (8000998 <_sbrk+0x64>)
 8000952:	4a12      	ldr	r2, [pc, #72]	; (800099c <_sbrk+0x68>)
 8000954:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000956:	4b10      	ldr	r3, [pc, #64]	; (8000998 <_sbrk+0x64>)
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4413      	add	r3, r2
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	429a      	cmp	r2, r3
 8000962:	d207      	bcs.n	8000974 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000964:	f003 fbce 	bl	8004104 <__errno>
 8000968:	4603      	mov	r3, r0
 800096a:	220c      	movs	r2, #12
 800096c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800096e:	f04f 33ff 	mov.w	r3, #4294967295
 8000972:	e009      	b.n	8000988 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <_sbrk+0x64>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800097a:	4b07      	ldr	r3, [pc, #28]	; (8000998 <_sbrk+0x64>)
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4413      	add	r3, r2
 8000982:	4a05      	ldr	r2, [pc, #20]	; (8000998 <_sbrk+0x64>)
 8000984:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000986:	68fb      	ldr	r3, [r7, #12]
}
 8000988:	4618      	mov	r0, r3
 800098a:	3718      	adds	r7, #24
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20010000 	.word	0x20010000
 8000994:	00000400 	.word	0x00000400
 8000998:	20000130 	.word	0x20000130
 800099c:	20000148 	.word	0x20000148

080009a0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <SystemInit+0x20>)
 80009a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009aa:	4a05      	ldr	r2, [pc, #20]	; (80009c0 <SystemInit+0x20>)
 80009ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009fc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80009c8:	f7ff ffea 	bl	80009a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009cc:	480c      	ldr	r0, [pc, #48]	; (8000a00 <LoopForever+0x6>)
  ldr r1, =_edata
 80009ce:	490d      	ldr	r1, [pc, #52]	; (8000a04 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009d0:	4a0d      	ldr	r2, [pc, #52]	; (8000a08 <LoopForever+0xe>)
  movs r3, #0
 80009d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d4:	e002      	b.n	80009dc <LoopCopyDataInit>

080009d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009da:	3304      	adds	r3, #4

080009dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e0:	d3f9      	bcc.n	80009d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009e2:	4a0a      	ldr	r2, [pc, #40]	; (8000a0c <LoopForever+0x12>)
  ldr r4, =_ebss
 80009e4:	4c0a      	ldr	r4, [pc, #40]	; (8000a10 <LoopForever+0x16>)
  movs r3, #0
 80009e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e8:	e001      	b.n	80009ee <LoopFillZerobss>

080009ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009ec:	3204      	adds	r2, #4

080009ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f0:	d3fb      	bcc.n	80009ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009f2:	f003 fb8d 	bl	8004110 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009f6:	f7ff fc63 	bl	80002c0 <main>

080009fa <LoopForever>:

LoopForever:
    b LoopForever
 80009fa:	e7fe      	b.n	80009fa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009fc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a04:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000a08:	08004ad4 	.word	0x08004ad4
  ldr r2, =_sbss
 8000a0c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000a10:	20000148 	.word	0x20000148

08000a14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a14:	e7fe      	b.n	8000a14 <ADC1_2_IRQHandler>
	...

08000a18 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a1c:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <HAL_Init+0x28>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a07      	ldr	r2, [pc, #28]	; (8000a40 <HAL_Init+0x28>)
 8000a22:	f043 0310 	orr.w	r3, r3, #16
 8000a26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a28:	2003      	movs	r0, #3
 8000a2a:	f000 f94f 	bl	8000ccc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a2e:	2000      	movs	r0, #0
 8000a30:	f000 f808 	bl	8000a44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a34:	f7ff fe02 	bl	800063c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a38:	2300      	movs	r3, #0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40022000 	.word	0x40022000

08000a44 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <HAL_InitTick+0x54>)
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <HAL_InitTick+0x58>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	4619      	mov	r1, r3
 8000a56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a62:	4618      	mov	r0, r3
 8000a64:	f000 f967 	bl	8000d36 <HAL_SYSTICK_Config>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	e00e      	b.n	8000a90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2b0f      	cmp	r3, #15
 8000a76:	d80a      	bhi.n	8000a8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	6879      	ldr	r1, [r7, #4]
 8000a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a80:	f000 f92f 	bl	8000ce2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a84:	4a06      	ldr	r2, [pc, #24]	; (8000aa0 <HAL_InitTick+0x5c>)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	e000      	b.n	8000a90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20000010 	.word	0x20000010
 8000a9c:	20000018 	.word	0x20000018
 8000aa0:	20000014 	.word	0x20000014

08000aa4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <HAL_IncTick+0x20>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	461a      	mov	r2, r3
 8000aae:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <HAL_IncTick+0x24>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	4a04      	ldr	r2, [pc, #16]	; (8000ac8 <HAL_IncTick+0x24>)
 8000ab6:	6013      	str	r3, [r2, #0]
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	20000018 	.word	0x20000018
 8000ac8:	20000134 	.word	0x20000134

08000acc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ad0:	4b03      	ldr	r3, [pc, #12]	; (8000ae0 <HAL_GetTick+0x14>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	20000134 	.word	0x20000134

08000ae4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000aec:	f7ff ffee 	bl	8000acc <HAL_GetTick>
 8000af0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000afc:	d005      	beq.n	8000b0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000afe:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <HAL_Delay+0x44>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	461a      	mov	r2, r3
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	4413      	add	r3, r2
 8000b08:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b0a:	bf00      	nop
 8000b0c:	f7ff ffde 	bl	8000acc <HAL_GetTick>
 8000b10:	4602      	mov	r2, r0
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	68fa      	ldr	r2, [r7, #12]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d8f7      	bhi.n	8000b0c <HAL_Delay+0x28>
  {
  }
}
 8000b1c:	bf00      	nop
 8000b1e:	bf00      	nop
 8000b20:	3710      	adds	r7, #16
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000018 	.word	0x20000018

08000b2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	f003 0307 	and.w	r3, r3, #7
 8000b3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <__NVIC_SetPriorityGrouping+0x44>)
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b42:	68ba      	ldr	r2, [r7, #8]
 8000b44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b48:	4013      	ands	r3, r2
 8000b4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b5e:	4a04      	ldr	r2, [pc, #16]	; (8000b70 <__NVIC_SetPriorityGrouping+0x44>)
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	60d3      	str	r3, [r2, #12]
}
 8000b64:	bf00      	nop
 8000b66:	3714      	adds	r7, #20
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b78:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <__NVIC_GetPriorityGrouping+0x18>)
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	0a1b      	lsrs	r3, r3, #8
 8000b7e:	f003 0307 	and.w	r3, r3, #7
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	db0b      	blt.n	8000bba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	f003 021f 	and.w	r2, r3, #31
 8000ba8:	4907      	ldr	r1, [pc, #28]	; (8000bc8 <__NVIC_EnableIRQ+0x38>)
 8000baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bae:	095b      	lsrs	r3, r3, #5
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	e000e100 	.word	0xe000e100

08000bcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	6039      	str	r1, [r7, #0]
 8000bd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	db0a      	blt.n	8000bf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	b2da      	uxtb	r2, r3
 8000be4:	490c      	ldr	r1, [pc, #48]	; (8000c18 <__NVIC_SetPriority+0x4c>)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	0112      	lsls	r2, r2, #4
 8000bec:	b2d2      	uxtb	r2, r2
 8000bee:	440b      	add	r3, r1
 8000bf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf4:	e00a      	b.n	8000c0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	4908      	ldr	r1, [pc, #32]	; (8000c1c <__NVIC_SetPriority+0x50>)
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	f003 030f 	and.w	r3, r3, #15
 8000c02:	3b04      	subs	r3, #4
 8000c04:	0112      	lsls	r2, r2, #4
 8000c06:	b2d2      	uxtb	r2, r2
 8000c08:	440b      	add	r3, r1
 8000c0a:	761a      	strb	r2, [r3, #24]
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000e100 	.word	0xe000e100
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b089      	sub	sp, #36	; 0x24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	f003 0307 	and.w	r3, r3, #7
 8000c32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	f1c3 0307 	rsb	r3, r3, #7
 8000c3a:	2b04      	cmp	r3, #4
 8000c3c:	bf28      	it	cs
 8000c3e:	2304      	movcs	r3, #4
 8000c40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	3304      	adds	r3, #4
 8000c46:	2b06      	cmp	r3, #6
 8000c48:	d902      	bls.n	8000c50 <NVIC_EncodePriority+0x30>
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	3b03      	subs	r3, #3
 8000c4e:	e000      	b.n	8000c52 <NVIC_EncodePriority+0x32>
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c54:	f04f 32ff 	mov.w	r2, #4294967295
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	43da      	mvns	r2, r3
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	401a      	ands	r2, r3
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c68:	f04f 31ff 	mov.w	r1, #4294967295
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c72:	43d9      	mvns	r1, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c78:	4313      	orrs	r3, r2
         );
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3724      	adds	r7, #36	; 0x24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
	...

08000c88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3b01      	subs	r3, #1
 8000c94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c98:	d301      	bcc.n	8000c9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e00f      	b.n	8000cbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c9e:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <SysTick_Config+0x40>)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ca6:	210f      	movs	r1, #15
 8000ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cac:	f7ff ff8e 	bl	8000bcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cb0:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <SysTick_Config+0x40>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cb6:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <SysTick_Config+0x40>)
 8000cb8:	2207      	movs	r2, #7
 8000cba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	e000e010 	.word	0xe000e010

08000ccc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f7ff ff29 	bl	8000b2c <__NVIC_SetPriorityGrouping>
}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b086      	sub	sp, #24
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	4603      	mov	r3, r0
 8000cea:	60b9      	str	r1, [r7, #8]
 8000cec:	607a      	str	r2, [r7, #4]
 8000cee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cf4:	f7ff ff3e 	bl	8000b74 <__NVIC_GetPriorityGrouping>
 8000cf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	68b9      	ldr	r1, [r7, #8]
 8000cfe:	6978      	ldr	r0, [r7, #20]
 8000d00:	f7ff ff8e 	bl	8000c20 <NVIC_EncodePriority>
 8000d04:	4602      	mov	r2, r0
 8000d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d0a:	4611      	mov	r1, r2
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff ff5d 	bl	8000bcc <__NVIC_SetPriority>
}
 8000d12:	bf00      	nop
 8000d14:	3718      	adds	r7, #24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	4603      	mov	r3, r0
 8000d22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ff31 	bl	8000b90 <__NVIC_EnableIRQ>
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff ffa2 	bl	8000c88 <SysTick_Config>
 8000d44:	4603      	mov	r3, r0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	b083      	sub	sp, #12
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	d008      	beq.n	8000d72 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2204      	movs	r2, #4
 8000d64:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e020      	b.n	8000db4 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f022 020e 	bic.w	r2, r2, #14
 8000d80:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f022 0201 	bic.w	r2, r2, #1
 8000d90:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000da0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2201      	movs	r2, #1
 8000da6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2200      	movs	r2, #0
 8000dae:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000db2:	2300      	movs	r3, #0
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000dd2:	2b02      	cmp	r3, #2
 8000dd4:	d005      	beq.n	8000de2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2204      	movs	r2, #4
 8000dda:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	73fb      	strb	r3, [r7, #15]
 8000de0:	e027      	b.n	8000e32 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f022 020e 	bic.w	r2, r2, #14
 8000df0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f022 0201 	bic.w	r2, r2, #1
 8000e00:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e10:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2201      	movs	r2, #1
 8000e16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d003      	beq.n	8000e32 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	4798      	blx	r3
    } 
  }
  return status;
 8000e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b087      	sub	sp, #28
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e4a:	e160      	b.n	800110e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	2101      	movs	r1, #1
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	fa01 f303 	lsl.w	r3, r1, r3
 8000e58:	4013      	ands	r3, r2
 8000e5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f000 8152 	beq.w	8001108 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f003 0303 	and.w	r3, r3, #3
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d005      	beq.n	8000e7c <HAL_GPIO_Init+0x40>
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f003 0303 	and.w	r3, r3, #3
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d130      	bne.n	8000ede <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	2203      	movs	r2, #3
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	4013      	ands	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	68da      	ldr	r2, [r3, #12]
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	091b      	lsrs	r3, r3, #4
 8000ec8:	f003 0201 	and.w	r2, r3, #1
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f003 0303 	and.w	r3, r3, #3
 8000ee6:	2b03      	cmp	r3, #3
 8000ee8:	d017      	beq.n	8000f1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	68db      	ldr	r3, [r3, #12]
 8000eee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	4013      	ands	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	689a      	ldr	r2, [r3, #8]
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f003 0303 	and.w	r3, r3, #3
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d123      	bne.n	8000f6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	08da      	lsrs	r2, r3, #3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	3208      	adds	r2, #8
 8000f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	220f      	movs	r2, #15
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43db      	mvns	r3, r3
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	4013      	ands	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	691a      	ldr	r2, [r3, #16]
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	f003 0307 	and.w	r3, r3, #7
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	08da      	lsrs	r2, r3, #3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3208      	adds	r2, #8
 8000f68:	6939      	ldr	r1, [r7, #16]
 8000f6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	2203      	movs	r2, #3
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	4013      	ands	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f003 0203 	and.w	r2, r3, #3
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	f000 80ac 	beq.w	8001108 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb0:	4b5e      	ldr	r3, [pc, #376]	; (800112c <HAL_GPIO_Init+0x2f0>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	4a5d      	ldr	r2, [pc, #372]	; (800112c <HAL_GPIO_Init+0x2f0>)
 8000fb6:	f043 0301 	orr.w	r3, r3, #1
 8000fba:	6193      	str	r3, [r2, #24]
 8000fbc:	4b5b      	ldr	r3, [pc, #364]	; (800112c <HAL_GPIO_Init+0x2f0>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	f003 0301 	and.w	r3, r3, #1
 8000fc4:	60bb      	str	r3, [r7, #8]
 8000fc6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fc8:	4a59      	ldr	r2, [pc, #356]	; (8001130 <HAL_GPIO_Init+0x2f4>)
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	089b      	lsrs	r3, r3, #2
 8000fce:	3302      	adds	r3, #2
 8000fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	f003 0303 	and.w	r3, r3, #3
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	220f      	movs	r2, #15
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ff2:	d025      	beq.n	8001040 <HAL_GPIO_Init+0x204>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a4f      	ldr	r2, [pc, #316]	; (8001134 <HAL_GPIO_Init+0x2f8>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d01f      	beq.n	800103c <HAL_GPIO_Init+0x200>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4a4e      	ldr	r2, [pc, #312]	; (8001138 <HAL_GPIO_Init+0x2fc>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d019      	beq.n	8001038 <HAL_GPIO_Init+0x1fc>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a4d      	ldr	r2, [pc, #308]	; (800113c <HAL_GPIO_Init+0x300>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d013      	beq.n	8001034 <HAL_GPIO_Init+0x1f8>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4a4c      	ldr	r2, [pc, #304]	; (8001140 <HAL_GPIO_Init+0x304>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d00d      	beq.n	8001030 <HAL_GPIO_Init+0x1f4>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4a4b      	ldr	r2, [pc, #300]	; (8001144 <HAL_GPIO_Init+0x308>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d007      	beq.n	800102c <HAL_GPIO_Init+0x1f0>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a4a      	ldr	r2, [pc, #296]	; (8001148 <HAL_GPIO_Init+0x30c>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d101      	bne.n	8001028 <HAL_GPIO_Init+0x1ec>
 8001024:	2306      	movs	r3, #6
 8001026:	e00c      	b.n	8001042 <HAL_GPIO_Init+0x206>
 8001028:	2307      	movs	r3, #7
 800102a:	e00a      	b.n	8001042 <HAL_GPIO_Init+0x206>
 800102c:	2305      	movs	r3, #5
 800102e:	e008      	b.n	8001042 <HAL_GPIO_Init+0x206>
 8001030:	2304      	movs	r3, #4
 8001032:	e006      	b.n	8001042 <HAL_GPIO_Init+0x206>
 8001034:	2303      	movs	r3, #3
 8001036:	e004      	b.n	8001042 <HAL_GPIO_Init+0x206>
 8001038:	2302      	movs	r3, #2
 800103a:	e002      	b.n	8001042 <HAL_GPIO_Init+0x206>
 800103c:	2301      	movs	r3, #1
 800103e:	e000      	b.n	8001042 <HAL_GPIO_Init+0x206>
 8001040:	2300      	movs	r3, #0
 8001042:	697a      	ldr	r2, [r7, #20]
 8001044:	f002 0203 	and.w	r2, r2, #3
 8001048:	0092      	lsls	r2, r2, #2
 800104a:	4093      	lsls	r3, r2
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	4313      	orrs	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001052:	4937      	ldr	r1, [pc, #220]	; (8001130 <HAL_GPIO_Init+0x2f4>)
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	089b      	lsrs	r3, r3, #2
 8001058:	3302      	adds	r3, #2
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001060:	4b3a      	ldr	r3, [pc, #232]	; (800114c <HAL_GPIO_Init+0x310>)
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	43db      	mvns	r3, r3
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	4013      	ands	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d003      	beq.n	8001084 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	4313      	orrs	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001084:	4a31      	ldr	r2, [pc, #196]	; (800114c <HAL_GPIO_Init+0x310>)
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800108a:	4b30      	ldr	r3, [pc, #192]	; (800114c <HAL_GPIO_Init+0x310>)
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	43db      	mvns	r3, r3
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	4013      	ands	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80010ae:	4a27      	ldr	r2, [pc, #156]	; (800114c <HAL_GPIO_Init+0x310>)
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010b4:	4b25      	ldr	r3, [pc, #148]	; (800114c <HAL_GPIO_Init+0x310>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	43db      	mvns	r3, r3
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	4013      	ands	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d003      	beq.n	80010d8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010d8:	4a1c      	ldr	r2, [pc, #112]	; (800114c <HAL_GPIO_Init+0x310>)
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010de:	4b1b      	ldr	r3, [pc, #108]	; (800114c <HAL_GPIO_Init+0x310>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	43db      	mvns	r3, r3
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	4013      	ands	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d003      	beq.n	8001102 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	4313      	orrs	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001102:	4a12      	ldr	r2, [pc, #72]	; (800114c <HAL_GPIO_Init+0x310>)
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	3301      	adds	r3, #1
 800110c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	fa22 f303 	lsr.w	r3, r2, r3
 8001118:	2b00      	cmp	r3, #0
 800111a:	f47f ae97 	bne.w	8000e4c <HAL_GPIO_Init+0x10>
  }
}
 800111e:	bf00      	nop
 8001120:	bf00      	nop
 8001122:	371c      	adds	r7, #28
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	40021000 	.word	0x40021000
 8001130:	40010000 	.word	0x40010000
 8001134:	48000400 	.word	0x48000400
 8001138:	48000800 	.word	0x48000800
 800113c:	48000c00 	.word	0x48000c00
 8001140:	48001000 	.word	0x48001000
 8001144:	48001400 	.word	0x48001400
 8001148:	48001800 	.word	0x48001800
 800114c:	40010400 	.word	0x40010400

08001150 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	691a      	ldr	r2, [r3, #16]
 8001160:	887b      	ldrh	r3, [r7, #2]
 8001162:	4013      	ands	r3, r2
 8001164:	2b00      	cmp	r3, #0
 8001166:	d002      	beq.n	800116e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001168:	2301      	movs	r3, #1
 800116a:	73fb      	strb	r3, [r7, #15]
 800116c:	e001      	b.n	8001172 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800116e:	2300      	movs	r3, #0
 8001170:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001172:	7bfb      	ldrb	r3, [r7, #15]
}
 8001174:	4618      	mov	r0, r3
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	460b      	mov	r3, r1
 800118a:	807b      	strh	r3, [r7, #2]
 800118c:	4613      	mov	r3, r2
 800118e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001190:	787b      	ldrb	r3, [r7, #1]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001196:	887a      	ldrh	r2, [r7, #2]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800119c:	e002      	b.n	80011a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800119e:	887a      	ldrh	r2, [r7, #2]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	460b      	mov	r3, r1
 80011ba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	695b      	ldr	r3, [r3, #20]
 80011c0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011c2:	887a      	ldrh	r2, [r7, #2]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	4013      	ands	r3, r2
 80011c8:	041a      	lsls	r2, r3, #16
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	43d9      	mvns	r1, r3
 80011ce:	887b      	ldrh	r3, [r7, #2]
 80011d0:	400b      	ands	r3, r1
 80011d2:	431a      	orrs	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	619a      	str	r2, [r3, #24]
}
 80011d8:	bf00      	nop
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80011ee:	4b08      	ldr	r3, [pc, #32]	; (8001210 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011f0:	695a      	ldr	r2, [r3, #20]
 80011f2:	88fb      	ldrh	r3, [r7, #6]
 80011f4:	4013      	ands	r3, r2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d006      	beq.n	8001208 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011fa:	4a05      	ldr	r2, [pc, #20]	; (8001210 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011fc:	88fb      	ldrh	r3, [r7, #6]
 80011fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001200:	88fb      	ldrh	r3, [r7, #6]
 8001202:	4618      	mov	r0, r3
 8001204:	f000 f806 	bl	8001214 <HAL_GPIO_EXTI_Callback>
  }
}
 8001208:	bf00      	nop
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40010400 	.word	0x40010400

08001214 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
	...

0800122c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001232:	af00      	add	r7, sp, #0
 8001234:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001238:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800123c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800123e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001242:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d102      	bne.n	8001252 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	f001 b83a 	b.w	80022c6 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001252:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001256:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	2b00      	cmp	r3, #0
 8001264:	f000 816f 	beq.w	8001546 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001268:	4bb5      	ldr	r3, [pc, #724]	; (8001540 <HAL_RCC_OscConfig+0x314>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 030c 	and.w	r3, r3, #12
 8001270:	2b04      	cmp	r3, #4
 8001272:	d00c      	beq.n	800128e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001274:	4bb2      	ldr	r3, [pc, #712]	; (8001540 <HAL_RCC_OscConfig+0x314>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 030c 	and.w	r3, r3, #12
 800127c:	2b08      	cmp	r3, #8
 800127e:	d15c      	bne.n	800133a <HAL_RCC_OscConfig+0x10e>
 8001280:	4baf      	ldr	r3, [pc, #700]	; (8001540 <HAL_RCC_OscConfig+0x314>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800128c:	d155      	bne.n	800133a <HAL_RCC_OscConfig+0x10e>
 800128e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001292:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001296:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800129a:	fa93 f3a3 	rbit	r3, r3
 800129e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80012a2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a6:	fab3 f383 	clz	r3, r3
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	095b      	lsrs	r3, r3, #5
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d102      	bne.n	80012c0 <HAL_RCC_OscConfig+0x94>
 80012ba:	4ba1      	ldr	r3, [pc, #644]	; (8001540 <HAL_RCC_OscConfig+0x314>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	e015      	b.n	80012ec <HAL_RCC_OscConfig+0xc0>
 80012c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012c4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80012cc:	fa93 f3a3 	rbit	r3, r3
 80012d0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80012d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012d8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80012dc:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80012e0:	fa93 f3a3 	rbit	r3, r3
 80012e4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80012e8:	4b95      	ldr	r3, [pc, #596]	; (8001540 <HAL_RCC_OscConfig+0x314>)
 80012ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012f0:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80012f4:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80012f8:	fa92 f2a2 	rbit	r2, r2
 80012fc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001300:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001304:	fab2 f282 	clz	r2, r2
 8001308:	b2d2      	uxtb	r2, r2
 800130a:	f042 0220 	orr.w	r2, r2, #32
 800130e:	b2d2      	uxtb	r2, r2
 8001310:	f002 021f 	and.w	r2, r2, #31
 8001314:	2101      	movs	r1, #1
 8001316:	fa01 f202 	lsl.w	r2, r1, r2
 800131a:	4013      	ands	r3, r2
 800131c:	2b00      	cmp	r3, #0
 800131e:	f000 8111 	beq.w	8001544 <HAL_RCC_OscConfig+0x318>
 8001322:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001326:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	2b00      	cmp	r3, #0
 8001330:	f040 8108 	bne.w	8001544 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	f000 bfc6 	b.w	80022c6 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800133a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800133e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800134a:	d106      	bne.n	800135a <HAL_RCC_OscConfig+0x12e>
 800134c:	4b7c      	ldr	r3, [pc, #496]	; (8001540 <HAL_RCC_OscConfig+0x314>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a7b      	ldr	r2, [pc, #492]	; (8001540 <HAL_RCC_OscConfig+0x314>)
 8001352:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001356:	6013      	str	r3, [r2, #0]
 8001358:	e036      	b.n	80013c8 <HAL_RCC_OscConfig+0x19c>
 800135a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800135e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d10c      	bne.n	8001384 <HAL_RCC_OscConfig+0x158>
 800136a:	4b75      	ldr	r3, [pc, #468]	; (8001540 <HAL_RCC_OscConfig+0x314>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a74      	ldr	r2, [pc, #464]	; (8001540 <HAL_RCC_OscConfig+0x314>)
 8001370:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001374:	6013      	str	r3, [r2, #0]
 8001376:	4b72      	ldr	r3, [pc, #456]	; (8001540 <HAL_RCC_OscConfig+0x314>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a71      	ldr	r2, [pc, #452]	; (8001540 <HAL_RCC_OscConfig+0x314>)
 800137c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001380:	6013      	str	r3, [r2, #0]
 8001382:	e021      	b.n	80013c8 <HAL_RCC_OscConfig+0x19c>
 8001384:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001388:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001394:	d10c      	bne.n	80013b0 <HAL_RCC_OscConfig+0x184>
 8001396:	4b6a      	ldr	r3, [pc, #424]	; (8001540 <HAL_RCC_OscConfig+0x314>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a69      	ldr	r2, [pc, #420]	; (8001540 <HAL_RCC_OscConfig+0x314>)
 800139c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013a0:	6013      	str	r3, [r2, #0]
 80013a2:	4b67      	ldr	r3, [pc, #412]	; (8001540 <HAL_RCC_OscConfig+0x314>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a66      	ldr	r2, [pc, #408]	; (8001540 <HAL_RCC_OscConfig+0x314>)
 80013a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ac:	6013      	str	r3, [r2, #0]
 80013ae:	e00b      	b.n	80013c8 <HAL_RCC_OscConfig+0x19c>
 80013b0:	4b63      	ldr	r3, [pc, #396]	; (8001540 <HAL_RCC_OscConfig+0x314>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a62      	ldr	r2, [pc, #392]	; (8001540 <HAL_RCC_OscConfig+0x314>)
 80013b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ba:	6013      	str	r3, [r2, #0]
 80013bc:	4b60      	ldr	r3, [pc, #384]	; (8001540 <HAL_RCC_OscConfig+0x314>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a5f      	ldr	r2, [pc, #380]	; (8001540 <HAL_RCC_OscConfig+0x314>)
 80013c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013c6:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013cc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d059      	beq.n	800148c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d8:	f7ff fb78 	bl	8000acc <HAL_GetTick>
 80013dc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013e0:	e00a      	b.n	80013f8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013e2:	f7ff fb73 	bl	8000acc <HAL_GetTick>
 80013e6:	4602      	mov	r2, r0
 80013e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b64      	cmp	r3, #100	; 0x64
 80013f0:	d902      	bls.n	80013f8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	f000 bf67 	b.w	80022c6 <HAL_RCC_OscConfig+0x109a>
 80013f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013fc:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001400:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001404:	fa93 f3a3 	rbit	r3, r3
 8001408:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 800140c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001410:	fab3 f383 	clz	r3, r3
 8001414:	b2db      	uxtb	r3, r3
 8001416:	095b      	lsrs	r3, r3, #5
 8001418:	b2db      	uxtb	r3, r3
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	b2db      	uxtb	r3, r3
 8001420:	2b01      	cmp	r3, #1
 8001422:	d102      	bne.n	800142a <HAL_RCC_OscConfig+0x1fe>
 8001424:	4b46      	ldr	r3, [pc, #280]	; (8001540 <HAL_RCC_OscConfig+0x314>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	e015      	b.n	8001456 <HAL_RCC_OscConfig+0x22a>
 800142a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800142e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001432:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001436:	fa93 f3a3 	rbit	r3, r3
 800143a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800143e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001442:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001446:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800144a:	fa93 f3a3 	rbit	r3, r3
 800144e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001452:	4b3b      	ldr	r3, [pc, #236]	; (8001540 <HAL_RCC_OscConfig+0x314>)
 8001454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001456:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800145a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800145e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001462:	fa92 f2a2 	rbit	r2, r2
 8001466:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800146a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800146e:	fab2 f282 	clz	r2, r2
 8001472:	b2d2      	uxtb	r2, r2
 8001474:	f042 0220 	orr.w	r2, r2, #32
 8001478:	b2d2      	uxtb	r2, r2
 800147a:	f002 021f 	and.w	r2, r2, #31
 800147e:	2101      	movs	r1, #1
 8001480:	fa01 f202 	lsl.w	r2, r1, r2
 8001484:	4013      	ands	r3, r2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d0ab      	beq.n	80013e2 <HAL_RCC_OscConfig+0x1b6>
 800148a:	e05c      	b.n	8001546 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148c:	f7ff fb1e 	bl	8000acc <HAL_GetTick>
 8001490:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001494:	e00a      	b.n	80014ac <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001496:	f7ff fb19 	bl	8000acc <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b64      	cmp	r3, #100	; 0x64
 80014a4:	d902      	bls.n	80014ac <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	f000 bf0d 	b.w	80022c6 <HAL_RCC_OscConfig+0x109a>
 80014ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014b0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80014b8:	fa93 f3a3 	rbit	r3, r3
 80014bc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80014c0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014c4:	fab3 f383 	clz	r3, r3
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	095b      	lsrs	r3, r3, #5
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	f043 0301 	orr.w	r3, r3, #1
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d102      	bne.n	80014de <HAL_RCC_OscConfig+0x2b2>
 80014d8:	4b19      	ldr	r3, [pc, #100]	; (8001540 <HAL_RCC_OscConfig+0x314>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	e015      	b.n	800150a <HAL_RCC_OscConfig+0x2de>
 80014de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014e2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80014ea:	fa93 f3a3 	rbit	r3, r3
 80014ee:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80014f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014f6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80014fa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80014fe:	fa93 f3a3 	rbit	r3, r3
 8001502:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001506:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <HAL_RCC_OscConfig+0x314>)
 8001508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800150e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001512:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001516:	fa92 f2a2 	rbit	r2, r2
 800151a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800151e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001522:	fab2 f282 	clz	r2, r2
 8001526:	b2d2      	uxtb	r2, r2
 8001528:	f042 0220 	orr.w	r2, r2, #32
 800152c:	b2d2      	uxtb	r2, r2
 800152e:	f002 021f 	and.w	r2, r2, #31
 8001532:	2101      	movs	r1, #1
 8001534:	fa01 f202 	lsl.w	r2, r1, r2
 8001538:	4013      	ands	r3, r2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1ab      	bne.n	8001496 <HAL_RCC_OscConfig+0x26a>
 800153e:	e002      	b.n	8001546 <HAL_RCC_OscConfig+0x31a>
 8001540:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001544:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001546:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800154a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	f000 817f 	beq.w	800185a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800155c:	4ba7      	ldr	r3, [pc, #668]	; (80017fc <HAL_RCC_OscConfig+0x5d0>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f003 030c 	and.w	r3, r3, #12
 8001564:	2b00      	cmp	r3, #0
 8001566:	d00c      	beq.n	8001582 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001568:	4ba4      	ldr	r3, [pc, #656]	; (80017fc <HAL_RCC_OscConfig+0x5d0>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f003 030c 	and.w	r3, r3, #12
 8001570:	2b08      	cmp	r3, #8
 8001572:	d173      	bne.n	800165c <HAL_RCC_OscConfig+0x430>
 8001574:	4ba1      	ldr	r3, [pc, #644]	; (80017fc <HAL_RCC_OscConfig+0x5d0>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800157c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001580:	d16c      	bne.n	800165c <HAL_RCC_OscConfig+0x430>
 8001582:	2302      	movs	r3, #2
 8001584:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001588:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800158c:	fa93 f3a3 	rbit	r3, r3
 8001590:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001594:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001598:	fab3 f383 	clz	r3, r3
 800159c:	b2db      	uxtb	r3, r3
 800159e:	095b      	lsrs	r3, r3, #5
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	f043 0301 	orr.w	r3, r3, #1
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d102      	bne.n	80015b2 <HAL_RCC_OscConfig+0x386>
 80015ac:	4b93      	ldr	r3, [pc, #588]	; (80017fc <HAL_RCC_OscConfig+0x5d0>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	e013      	b.n	80015da <HAL_RCC_OscConfig+0x3ae>
 80015b2:	2302      	movs	r3, #2
 80015b4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80015bc:	fa93 f3a3 	rbit	r3, r3
 80015c0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80015c4:	2302      	movs	r3, #2
 80015c6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80015ca:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80015ce:	fa93 f3a3 	rbit	r3, r3
 80015d2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80015d6:	4b89      	ldr	r3, [pc, #548]	; (80017fc <HAL_RCC_OscConfig+0x5d0>)
 80015d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015da:	2202      	movs	r2, #2
 80015dc:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80015e0:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80015e4:	fa92 f2a2 	rbit	r2, r2
 80015e8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80015ec:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80015f0:	fab2 f282 	clz	r2, r2
 80015f4:	b2d2      	uxtb	r2, r2
 80015f6:	f042 0220 	orr.w	r2, r2, #32
 80015fa:	b2d2      	uxtb	r2, r2
 80015fc:	f002 021f 	and.w	r2, r2, #31
 8001600:	2101      	movs	r1, #1
 8001602:	fa01 f202 	lsl.w	r2, r1, r2
 8001606:	4013      	ands	r3, r2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d00a      	beq.n	8001622 <HAL_RCC_OscConfig+0x3f6>
 800160c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001610:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d002      	beq.n	8001622 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	f000 be52 	b.w	80022c6 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001622:	4b76      	ldr	r3, [pc, #472]	; (80017fc <HAL_RCC_OscConfig+0x5d0>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800162a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800162e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	691b      	ldr	r3, [r3, #16]
 8001636:	21f8      	movs	r1, #248	; 0xf8
 8001638:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163c:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001640:	fa91 f1a1 	rbit	r1, r1
 8001644:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001648:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800164c:	fab1 f181 	clz	r1, r1
 8001650:	b2c9      	uxtb	r1, r1
 8001652:	408b      	lsls	r3, r1
 8001654:	4969      	ldr	r1, [pc, #420]	; (80017fc <HAL_RCC_OscConfig+0x5d0>)
 8001656:	4313      	orrs	r3, r2
 8001658:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800165a:	e0fe      	b.n	800185a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800165c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001660:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	2b00      	cmp	r3, #0
 800166a:	f000 8088 	beq.w	800177e <HAL_RCC_OscConfig+0x552>
 800166e:	2301      	movs	r3, #1
 8001670:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001674:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001678:	fa93 f3a3 	rbit	r3, r3
 800167c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001680:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001684:	fab3 f383 	clz	r3, r3
 8001688:	b2db      	uxtb	r3, r3
 800168a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800168e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	461a      	mov	r2, r3
 8001696:	2301      	movs	r3, #1
 8001698:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169a:	f7ff fa17 	bl	8000acc <HAL_GetTick>
 800169e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a2:	e00a      	b.n	80016ba <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016a4:	f7ff fa12 	bl	8000acc <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d902      	bls.n	80016ba <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	f000 be06 	b.w	80022c6 <HAL_RCC_OscConfig+0x109a>
 80016ba:	2302      	movs	r3, #2
 80016bc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80016c4:	fa93 f3a3 	rbit	r3, r3
 80016c8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80016cc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d0:	fab3 f383 	clz	r3, r3
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	095b      	lsrs	r3, r3, #5
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	f043 0301 	orr.w	r3, r3, #1
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d102      	bne.n	80016ea <HAL_RCC_OscConfig+0x4be>
 80016e4:	4b45      	ldr	r3, [pc, #276]	; (80017fc <HAL_RCC_OscConfig+0x5d0>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	e013      	b.n	8001712 <HAL_RCC_OscConfig+0x4e6>
 80016ea:	2302      	movs	r3, #2
 80016ec:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80016f4:	fa93 f3a3 	rbit	r3, r3
 80016f8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80016fc:	2302      	movs	r3, #2
 80016fe:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001702:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001706:	fa93 f3a3 	rbit	r3, r3
 800170a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800170e:	4b3b      	ldr	r3, [pc, #236]	; (80017fc <HAL_RCC_OscConfig+0x5d0>)
 8001710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001712:	2202      	movs	r2, #2
 8001714:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001718:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800171c:	fa92 f2a2 	rbit	r2, r2
 8001720:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001724:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001728:	fab2 f282 	clz	r2, r2
 800172c:	b2d2      	uxtb	r2, r2
 800172e:	f042 0220 	orr.w	r2, r2, #32
 8001732:	b2d2      	uxtb	r2, r2
 8001734:	f002 021f 	and.w	r2, r2, #31
 8001738:	2101      	movs	r1, #1
 800173a:	fa01 f202 	lsl.w	r2, r1, r2
 800173e:	4013      	ands	r3, r2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d0af      	beq.n	80016a4 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001744:	4b2d      	ldr	r3, [pc, #180]	; (80017fc <HAL_RCC_OscConfig+0x5d0>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800174c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001750:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	21f8      	movs	r1, #248	; 0xf8
 800175a:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800175e:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001762:	fa91 f1a1 	rbit	r1, r1
 8001766:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800176a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800176e:	fab1 f181 	clz	r1, r1
 8001772:	b2c9      	uxtb	r1, r1
 8001774:	408b      	lsls	r3, r1
 8001776:	4921      	ldr	r1, [pc, #132]	; (80017fc <HAL_RCC_OscConfig+0x5d0>)
 8001778:	4313      	orrs	r3, r2
 800177a:	600b      	str	r3, [r1, #0]
 800177c:	e06d      	b.n	800185a <HAL_RCC_OscConfig+0x62e>
 800177e:	2301      	movs	r3, #1
 8001780:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001784:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001788:	fa93 f3a3 	rbit	r3, r3
 800178c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001790:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001794:	fab3 f383 	clz	r3, r3
 8001798:	b2db      	uxtb	r3, r3
 800179a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800179e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	461a      	mov	r2, r3
 80017a6:	2300      	movs	r3, #0
 80017a8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017aa:	f7ff f98f 	bl	8000acc <HAL_GetTick>
 80017ae:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017b2:	e00a      	b.n	80017ca <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017b4:	f7ff f98a 	bl	8000acc <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d902      	bls.n	80017ca <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	f000 bd7e 	b.w	80022c6 <HAL_RCC_OscConfig+0x109a>
 80017ca:	2302      	movs	r3, #2
 80017cc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80017d4:	fa93 f3a3 	rbit	r3, r3
 80017d8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80017dc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017e0:	fab3 f383 	clz	r3, r3
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	095b      	lsrs	r3, r3, #5
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	f043 0301 	orr.w	r3, r3, #1
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d105      	bne.n	8001800 <HAL_RCC_OscConfig+0x5d4>
 80017f4:	4b01      	ldr	r3, [pc, #4]	; (80017fc <HAL_RCC_OscConfig+0x5d0>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	e016      	b.n	8001828 <HAL_RCC_OscConfig+0x5fc>
 80017fa:	bf00      	nop
 80017fc:	40021000 	.word	0x40021000
 8001800:	2302      	movs	r3, #2
 8001802:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001806:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800180a:	fa93 f3a3 	rbit	r3, r3
 800180e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001812:	2302      	movs	r3, #2
 8001814:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001818:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800181c:	fa93 f3a3 	rbit	r3, r3
 8001820:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001824:	4bbf      	ldr	r3, [pc, #764]	; (8001b24 <HAL_RCC_OscConfig+0x8f8>)
 8001826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001828:	2202      	movs	r2, #2
 800182a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800182e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001832:	fa92 f2a2 	rbit	r2, r2
 8001836:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800183a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800183e:	fab2 f282 	clz	r2, r2
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	f042 0220 	orr.w	r2, r2, #32
 8001848:	b2d2      	uxtb	r2, r2
 800184a:	f002 021f 	and.w	r2, r2, #31
 800184e:	2101      	movs	r1, #1
 8001850:	fa01 f202 	lsl.w	r2, r1, r2
 8001854:	4013      	ands	r3, r2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1ac      	bne.n	80017b4 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800185a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800185e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0308 	and.w	r3, r3, #8
 800186a:	2b00      	cmp	r3, #0
 800186c:	f000 8113 	beq.w	8001a96 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001870:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001874:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	695b      	ldr	r3, [r3, #20]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d07c      	beq.n	800197a <HAL_RCC_OscConfig+0x74e>
 8001880:	2301      	movs	r3, #1
 8001882:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001886:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800188a:	fa93 f3a3 	rbit	r3, r3
 800188e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001892:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001896:	fab3 f383 	clz	r3, r3
 800189a:	b2db      	uxtb	r3, r3
 800189c:	461a      	mov	r2, r3
 800189e:	4ba2      	ldr	r3, [pc, #648]	; (8001b28 <HAL_RCC_OscConfig+0x8fc>)
 80018a0:	4413      	add	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	461a      	mov	r2, r3
 80018a6:	2301      	movs	r3, #1
 80018a8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018aa:	f7ff f90f 	bl	8000acc <HAL_GetTick>
 80018ae:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018b2:	e00a      	b.n	80018ca <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018b4:	f7ff f90a 	bl	8000acc <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d902      	bls.n	80018ca <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	f000 bcfe 	b.w	80022c6 <HAL_RCC_OscConfig+0x109a>
 80018ca:	2302      	movs	r3, #2
 80018cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80018d4:	fa93 f2a3 	rbit	r2, r3
 80018d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018dc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80018ea:	2202      	movs	r2, #2
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	fa93 f2a3 	rbit	r2, r3
 80018fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001900:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800190a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800190e:	2202      	movs	r2, #2
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001916:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	fa93 f2a3 	rbit	r2, r3
 8001920:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001924:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001928:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800192a:	4b7e      	ldr	r3, [pc, #504]	; (8001b24 <HAL_RCC_OscConfig+0x8f8>)
 800192c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800192e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001932:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001936:	2102      	movs	r1, #2
 8001938:	6019      	str	r1, [r3, #0]
 800193a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800193e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	fa93 f1a3 	rbit	r1, r3
 8001948:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800194c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001950:	6019      	str	r1, [r3, #0]
  return result;
 8001952:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001956:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	fab3 f383 	clz	r3, r3
 8001960:	b2db      	uxtb	r3, r3
 8001962:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001966:	b2db      	uxtb	r3, r3
 8001968:	f003 031f 	and.w	r3, r3, #31
 800196c:	2101      	movs	r1, #1
 800196e:	fa01 f303 	lsl.w	r3, r1, r3
 8001972:	4013      	ands	r3, r2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d09d      	beq.n	80018b4 <HAL_RCC_OscConfig+0x688>
 8001978:	e08d      	b.n	8001a96 <HAL_RCC_OscConfig+0x86a>
 800197a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800197e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001982:	2201      	movs	r2, #1
 8001984:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001986:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800198a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	fa93 f2a3 	rbit	r2, r3
 8001994:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001998:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800199c:	601a      	str	r2, [r3, #0]
  return result;
 800199e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019a2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80019a6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019a8:	fab3 f383 	clz	r3, r3
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	461a      	mov	r2, r3
 80019b0:	4b5d      	ldr	r3, [pc, #372]	; (8001b28 <HAL_RCC_OscConfig+0x8fc>)
 80019b2:	4413      	add	r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	461a      	mov	r2, r3
 80019b8:	2300      	movs	r3, #0
 80019ba:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019bc:	f7ff f886 	bl	8000acc <HAL_GetTick>
 80019c0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019c4:	e00a      	b.n	80019dc <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019c6:	f7ff f881 	bl	8000acc <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d902      	bls.n	80019dc <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	f000 bc75 	b.w	80022c6 <HAL_RCC_OscConfig+0x109a>
 80019dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019e0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80019e4:	2202      	movs	r2, #2
 80019e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ec:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	fa93 f2a3 	rbit	r2, r3
 80019f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019fa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a04:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001a08:	2202      	movs	r2, #2
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	fa93 f2a3 	rbit	r2, r3
 8001a1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a28:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001a2c:	2202      	movs	r2, #2
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a34:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	fa93 f2a3 	rbit	r2, r3
 8001a3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a42:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001a46:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a48:	4b36      	ldr	r3, [pc, #216]	; (8001b24 <HAL_RCC_OscConfig+0x8f8>)
 8001a4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a50:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001a54:	2102      	movs	r1, #2
 8001a56:	6019      	str	r1, [r3, #0]
 8001a58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a5c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	fa93 f1a3 	rbit	r1, r3
 8001a66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a6a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001a6e:	6019      	str	r1, [r3, #0]
  return result;
 8001a70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a74:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	fab3 f383 	clz	r3, r3
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	f003 031f 	and.w	r3, r3, #31
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a90:	4013      	ands	r3, r2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d197      	bne.n	80019c6 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a9a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0304 	and.w	r3, r3, #4
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f000 81a5 	beq.w	8001df6 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aac:	2300      	movs	r3, #0
 8001aae:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ab2:	4b1c      	ldr	r3, [pc, #112]	; (8001b24 <HAL_RCC_OscConfig+0x8f8>)
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d116      	bne.n	8001aec <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001abe:	4b19      	ldr	r3, [pc, #100]	; (8001b24 <HAL_RCC_OscConfig+0x8f8>)
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	4a18      	ldr	r2, [pc, #96]	; (8001b24 <HAL_RCC_OscConfig+0x8f8>)
 8001ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac8:	61d3      	str	r3, [r2, #28]
 8001aca:	4b16      	ldr	r3, [pc, #88]	; (8001b24 <HAL_RCC_OscConfig+0x8f8>)
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001ad2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ad6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ae0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ae4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aec:	4b0f      	ldr	r3, [pc, #60]	; (8001b2c <HAL_RCC_OscConfig+0x900>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d121      	bne.n	8001b3c <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001af8:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <HAL_RCC_OscConfig+0x900>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a0b      	ldr	r2, [pc, #44]	; (8001b2c <HAL_RCC_OscConfig+0x900>)
 8001afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b02:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b04:	f7fe ffe2 	bl	8000acc <HAL_GetTick>
 8001b08:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b0c:	e010      	b.n	8001b30 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b0e:	f7fe ffdd 	bl	8000acc <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b64      	cmp	r3, #100	; 0x64
 8001b1c:	d908      	bls.n	8001b30 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e3d1      	b.n	80022c6 <HAL_RCC_OscConfig+0x109a>
 8001b22:	bf00      	nop
 8001b24:	40021000 	.word	0x40021000
 8001b28:	10908120 	.word	0x10908120
 8001b2c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b30:	4b8d      	ldr	r3, [pc, #564]	; (8001d68 <HAL_RCC_OscConfig+0xb3c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0e8      	beq.n	8001b0e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b40:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d106      	bne.n	8001b5a <HAL_RCC_OscConfig+0x92e>
 8001b4c:	4b87      	ldr	r3, [pc, #540]	; (8001d6c <HAL_RCC_OscConfig+0xb40>)
 8001b4e:	6a1b      	ldr	r3, [r3, #32]
 8001b50:	4a86      	ldr	r2, [pc, #536]	; (8001d6c <HAL_RCC_OscConfig+0xb40>)
 8001b52:	f043 0301 	orr.w	r3, r3, #1
 8001b56:	6213      	str	r3, [r2, #32]
 8001b58:	e035      	b.n	8001bc6 <HAL_RCC_OscConfig+0x99a>
 8001b5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b5e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d10c      	bne.n	8001b84 <HAL_RCC_OscConfig+0x958>
 8001b6a:	4b80      	ldr	r3, [pc, #512]	; (8001d6c <HAL_RCC_OscConfig+0xb40>)
 8001b6c:	6a1b      	ldr	r3, [r3, #32]
 8001b6e:	4a7f      	ldr	r2, [pc, #508]	; (8001d6c <HAL_RCC_OscConfig+0xb40>)
 8001b70:	f023 0301 	bic.w	r3, r3, #1
 8001b74:	6213      	str	r3, [r2, #32]
 8001b76:	4b7d      	ldr	r3, [pc, #500]	; (8001d6c <HAL_RCC_OscConfig+0xb40>)
 8001b78:	6a1b      	ldr	r3, [r3, #32]
 8001b7a:	4a7c      	ldr	r2, [pc, #496]	; (8001d6c <HAL_RCC_OscConfig+0xb40>)
 8001b7c:	f023 0304 	bic.w	r3, r3, #4
 8001b80:	6213      	str	r3, [r2, #32]
 8001b82:	e020      	b.n	8001bc6 <HAL_RCC_OscConfig+0x99a>
 8001b84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b88:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	2b05      	cmp	r3, #5
 8001b92:	d10c      	bne.n	8001bae <HAL_RCC_OscConfig+0x982>
 8001b94:	4b75      	ldr	r3, [pc, #468]	; (8001d6c <HAL_RCC_OscConfig+0xb40>)
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	4a74      	ldr	r2, [pc, #464]	; (8001d6c <HAL_RCC_OscConfig+0xb40>)
 8001b9a:	f043 0304 	orr.w	r3, r3, #4
 8001b9e:	6213      	str	r3, [r2, #32]
 8001ba0:	4b72      	ldr	r3, [pc, #456]	; (8001d6c <HAL_RCC_OscConfig+0xb40>)
 8001ba2:	6a1b      	ldr	r3, [r3, #32]
 8001ba4:	4a71      	ldr	r2, [pc, #452]	; (8001d6c <HAL_RCC_OscConfig+0xb40>)
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	6213      	str	r3, [r2, #32]
 8001bac:	e00b      	b.n	8001bc6 <HAL_RCC_OscConfig+0x99a>
 8001bae:	4b6f      	ldr	r3, [pc, #444]	; (8001d6c <HAL_RCC_OscConfig+0xb40>)
 8001bb0:	6a1b      	ldr	r3, [r3, #32]
 8001bb2:	4a6e      	ldr	r2, [pc, #440]	; (8001d6c <HAL_RCC_OscConfig+0xb40>)
 8001bb4:	f023 0301 	bic.w	r3, r3, #1
 8001bb8:	6213      	str	r3, [r2, #32]
 8001bba:	4b6c      	ldr	r3, [pc, #432]	; (8001d6c <HAL_RCC_OscConfig+0xb40>)
 8001bbc:	6a1b      	ldr	r3, [r3, #32]
 8001bbe:	4a6b      	ldr	r2, [pc, #428]	; (8001d6c <HAL_RCC_OscConfig+0xb40>)
 8001bc0:	f023 0304 	bic.w	r3, r3, #4
 8001bc4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f000 8081 	beq.w	8001cda <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd8:	f7fe ff78 	bl	8000acc <HAL_GetTick>
 8001bdc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be0:	e00b      	b.n	8001bfa <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001be2:	f7fe ff73 	bl	8000acc <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e365      	b.n	80022c6 <HAL_RCC_OscConfig+0x109a>
 8001bfa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bfe:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001c02:	2202      	movs	r2, #2
 8001c04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c0a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	fa93 f2a3 	rbit	r2, r3
 8001c14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c18:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c22:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001c26:	2202      	movs	r2, #2
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c2e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	fa93 f2a3 	rbit	r2, r3
 8001c38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c3c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001c40:	601a      	str	r2, [r3, #0]
  return result;
 8001c42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c46:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001c4a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c4c:	fab3 f383 	clz	r3, r3
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	095b      	lsrs	r3, r3, #5
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	f043 0302 	orr.w	r3, r3, #2
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d102      	bne.n	8001c66 <HAL_RCC_OscConfig+0xa3a>
 8001c60:	4b42      	ldr	r3, [pc, #264]	; (8001d6c <HAL_RCC_OscConfig+0xb40>)
 8001c62:	6a1b      	ldr	r3, [r3, #32]
 8001c64:	e013      	b.n	8001c8e <HAL_RCC_OscConfig+0xa62>
 8001c66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c6a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001c6e:	2202      	movs	r2, #2
 8001c70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c76:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	fa93 f2a3 	rbit	r2, r3
 8001c80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c84:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	4b38      	ldr	r3, [pc, #224]	; (8001d6c <HAL_RCC_OscConfig+0xb40>)
 8001c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c92:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001c96:	2102      	movs	r1, #2
 8001c98:	6011      	str	r1, [r2, #0]
 8001c9a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c9e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001ca2:	6812      	ldr	r2, [r2, #0]
 8001ca4:	fa92 f1a2 	rbit	r1, r2
 8001ca8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cac:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001cb0:	6011      	str	r1, [r2, #0]
  return result;
 8001cb2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cb6:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001cba:	6812      	ldr	r2, [r2, #0]
 8001cbc:	fab2 f282 	clz	r2, r2
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cc6:	b2d2      	uxtb	r2, r2
 8001cc8:	f002 021f 	and.w	r2, r2, #31
 8001ccc:	2101      	movs	r1, #1
 8001cce:	fa01 f202 	lsl.w	r2, r1, r2
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d084      	beq.n	8001be2 <HAL_RCC_OscConfig+0x9b6>
 8001cd8:	e083      	b.n	8001de2 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cda:	f7fe fef7 	bl	8000acc <HAL_GetTick>
 8001cde:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ce2:	e00b      	b.n	8001cfc <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ce4:	f7fe fef2 	bl	8000acc <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e2e4      	b.n	80022c6 <HAL_RCC_OscConfig+0x109a>
 8001cfc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d00:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001d04:	2202      	movs	r2, #2
 8001d06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d0c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	fa93 f2a3 	rbit	r2, r3
 8001d16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d1a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d24:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001d28:	2202      	movs	r2, #2
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d30:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	fa93 f2a3 	rbit	r2, r3
 8001d3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d3e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001d42:	601a      	str	r2, [r3, #0]
  return result;
 8001d44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d48:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001d4c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d4e:	fab3 f383 	clz	r3, r3
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	095b      	lsrs	r3, r3, #5
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	f043 0302 	orr.w	r3, r3, #2
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d106      	bne.n	8001d70 <HAL_RCC_OscConfig+0xb44>
 8001d62:	4b02      	ldr	r3, [pc, #8]	; (8001d6c <HAL_RCC_OscConfig+0xb40>)
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	e017      	b.n	8001d98 <HAL_RCC_OscConfig+0xb6c>
 8001d68:	40007000 	.word	0x40007000
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d74:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001d78:	2202      	movs	r2, #2
 8001d7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d80:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	fa93 f2a3 	rbit	r2, r3
 8001d8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d8e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	4bb3      	ldr	r3, [pc, #716]	; (8002064 <HAL_RCC_OscConfig+0xe38>)
 8001d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d98:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d9c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001da0:	2102      	movs	r1, #2
 8001da2:	6011      	str	r1, [r2, #0]
 8001da4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001da8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001dac:	6812      	ldr	r2, [r2, #0]
 8001dae:	fa92 f1a2 	rbit	r1, r2
 8001db2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001db6:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001dba:	6011      	str	r1, [r2, #0]
  return result;
 8001dbc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001dc0:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001dc4:	6812      	ldr	r2, [r2, #0]
 8001dc6:	fab2 f282 	clz	r2, r2
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dd0:	b2d2      	uxtb	r2, r2
 8001dd2:	f002 021f 	and.w	r2, r2, #31
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ddc:	4013      	ands	r3, r2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d180      	bne.n	8001ce4 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001de2:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d105      	bne.n	8001df6 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dea:	4b9e      	ldr	r3, [pc, #632]	; (8002064 <HAL_RCC_OscConfig+0xe38>)
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	4a9d      	ldr	r2, [pc, #628]	; (8002064 <HAL_RCC_OscConfig+0xe38>)
 8001df0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001df4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001df6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dfa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f000 825e 	beq.w	80022c4 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e08:	4b96      	ldr	r3, [pc, #600]	; (8002064 <HAL_RCC_OscConfig+0xe38>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 030c 	and.w	r3, r3, #12
 8001e10:	2b08      	cmp	r3, #8
 8001e12:	f000 821f 	beq.w	8002254 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e1a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	f040 8170 	bne.w	8002108 <HAL_RCC_OscConfig+0xedc>
 8001e28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e2c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001e30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e3a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	fa93 f2a3 	rbit	r2, r3
 8001e44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e48:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001e4c:	601a      	str	r2, [r3, #0]
  return result;
 8001e4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e52:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001e56:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e58:	fab3 f383 	clz	r3, r3
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e62:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	461a      	mov	r2, r3
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6e:	f7fe fe2d 	bl	8000acc <HAL_GetTick>
 8001e72:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e76:	e009      	b.n	8001e8c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e78:	f7fe fe28 	bl	8000acc <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e21c      	b.n	80022c6 <HAL_RCC_OscConfig+0x109a>
 8001e8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e90:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001e94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e9e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	fa93 f2a3 	rbit	r2, r3
 8001ea8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eac:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001eb0:	601a      	str	r2, [r3, #0]
  return result;
 8001eb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eb6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001eba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ebc:	fab3 f383 	clz	r3, r3
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	095b      	lsrs	r3, r3, #5
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	f043 0301 	orr.w	r3, r3, #1
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d102      	bne.n	8001ed6 <HAL_RCC_OscConfig+0xcaa>
 8001ed0:	4b64      	ldr	r3, [pc, #400]	; (8002064 <HAL_RCC_OscConfig+0xe38>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	e027      	b.n	8001f26 <HAL_RCC_OscConfig+0xcfa>
 8001ed6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eda:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001ede:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ee2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ee8:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	fa93 f2a3 	rbit	r2, r3
 8001ef2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ef6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f00:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001f04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f0e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	fa93 f2a3 	rbit	r2, r3
 8001f18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f1c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	4b50      	ldr	r3, [pc, #320]	; (8002064 <HAL_RCC_OscConfig+0xe38>)
 8001f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f26:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f2a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001f2e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f32:	6011      	str	r1, [r2, #0]
 8001f34:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f38:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001f3c:	6812      	ldr	r2, [r2, #0]
 8001f3e:	fa92 f1a2 	rbit	r1, r2
 8001f42:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f46:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001f4a:	6011      	str	r1, [r2, #0]
  return result;
 8001f4c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f50:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001f54:	6812      	ldr	r2, [r2, #0]
 8001f56:	fab2 f282 	clz	r2, r2
 8001f5a:	b2d2      	uxtb	r2, r2
 8001f5c:	f042 0220 	orr.w	r2, r2, #32
 8001f60:	b2d2      	uxtb	r2, r2
 8001f62:	f002 021f 	and.w	r2, r2, #31
 8001f66:	2101      	movs	r1, #1
 8001f68:	fa01 f202 	lsl.w	r2, r1, r2
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d182      	bne.n	8001e78 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f72:	4b3c      	ldr	r3, [pc, #240]	; (8002064 <HAL_RCC_OscConfig+0xe38>)
 8001f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f76:	f023 020f 	bic.w	r2, r3, #15
 8001f7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f7e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f86:	4937      	ldr	r1, [pc, #220]	; (8002064 <HAL_RCC_OscConfig+0xe38>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001f8c:	4b35      	ldr	r3, [pc, #212]	; (8002064 <HAL_RCC_OscConfig+0xe38>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001f94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f98:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	6a19      	ldr	r1, [r3, #32]
 8001fa0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fa4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	430b      	orrs	r3, r1
 8001fae:	492d      	ldr	r1, [pc, #180]	; (8002064 <HAL_RCC_OscConfig+0xe38>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	604b      	str	r3, [r1, #4]
 8001fb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fb8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001fbc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001fc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fc6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	fa93 f2a3 	rbit	r2, r3
 8001fd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fd4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001fd8:	601a      	str	r2, [r3, #0]
  return result;
 8001fda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fde:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001fe2:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fe4:	fab3 f383 	clz	r3, r3
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffa:	f7fe fd67 	bl	8000acc <HAL_GetTick>
 8001ffe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002002:	e009      	b.n	8002018 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002004:	f7fe fd62 	bl	8000acc <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e156      	b.n	80022c6 <HAL_RCC_OscConfig+0x109a>
 8002018:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800201c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002020:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002024:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002026:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800202a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	fa93 f2a3 	rbit	r2, r3
 8002034:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002038:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800203c:	601a      	str	r2, [r3, #0]
  return result;
 800203e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002042:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002046:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002048:	fab3 f383 	clz	r3, r3
 800204c:	b2db      	uxtb	r3, r3
 800204e:	095b      	lsrs	r3, r3, #5
 8002050:	b2db      	uxtb	r3, r3
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2b01      	cmp	r3, #1
 800205a:	d105      	bne.n	8002068 <HAL_RCC_OscConfig+0xe3c>
 800205c:	4b01      	ldr	r3, [pc, #4]	; (8002064 <HAL_RCC_OscConfig+0xe38>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	e02a      	b.n	80020b8 <HAL_RCC_OscConfig+0xe8c>
 8002062:	bf00      	nop
 8002064:	40021000 	.word	0x40021000
 8002068:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800206c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002070:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002074:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002076:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800207a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	fa93 f2a3 	rbit	r2, r3
 8002084:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002088:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002092:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002096:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020a0:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	fa93 f2a3 	rbit	r2, r3
 80020aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ae:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	4b86      	ldr	r3, [pc, #536]	; (80022d0 <HAL_RCC_OscConfig+0x10a4>)
 80020b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80020bc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80020c0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80020c4:	6011      	str	r1, [r2, #0]
 80020c6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80020ca:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80020ce:	6812      	ldr	r2, [r2, #0]
 80020d0:	fa92 f1a2 	rbit	r1, r2
 80020d4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80020d8:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80020dc:	6011      	str	r1, [r2, #0]
  return result;
 80020de:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80020e2:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80020e6:	6812      	ldr	r2, [r2, #0]
 80020e8:	fab2 f282 	clz	r2, r2
 80020ec:	b2d2      	uxtb	r2, r2
 80020ee:	f042 0220 	orr.w	r2, r2, #32
 80020f2:	b2d2      	uxtb	r2, r2
 80020f4:	f002 021f 	and.w	r2, r2, #31
 80020f8:	2101      	movs	r1, #1
 80020fa:	fa01 f202 	lsl.w	r2, r1, r2
 80020fe:	4013      	ands	r3, r2
 8002100:	2b00      	cmp	r3, #0
 8002102:	f43f af7f 	beq.w	8002004 <HAL_RCC_OscConfig+0xdd8>
 8002106:	e0dd      	b.n	80022c4 <HAL_RCC_OscConfig+0x1098>
 8002108:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800210c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002110:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002114:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002116:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800211a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	fa93 f2a3 	rbit	r2, r3
 8002124:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002128:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800212c:	601a      	str	r2, [r3, #0]
  return result;
 800212e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002132:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002136:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002138:	fab3 f383 	clz	r3, r3
 800213c:	b2db      	uxtb	r3, r3
 800213e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002142:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	461a      	mov	r2, r3
 800214a:	2300      	movs	r3, #0
 800214c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214e:	f7fe fcbd 	bl	8000acc <HAL_GetTick>
 8002152:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002156:	e009      	b.n	800216c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002158:	f7fe fcb8 	bl	8000acc <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e0ac      	b.n	80022c6 <HAL_RCC_OscConfig+0x109a>
 800216c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002170:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002174:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002178:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800217e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	fa93 f2a3 	rbit	r2, r3
 8002188:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800218c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002190:	601a      	str	r2, [r3, #0]
  return result;
 8002192:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002196:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800219a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800219c:	fab3 f383 	clz	r3, r3
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	095b      	lsrs	r3, r3, #5
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d102      	bne.n	80021b6 <HAL_RCC_OscConfig+0xf8a>
 80021b0:	4b47      	ldr	r3, [pc, #284]	; (80022d0 <HAL_RCC_OscConfig+0x10a4>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	e027      	b.n	8002206 <HAL_RCC_OscConfig+0xfda>
 80021b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021ba:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80021be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021c8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	fa93 f2a3 	rbit	r2, r3
 80021d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021d6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021e0:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80021e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021ee:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	fa93 f2a3 	rbit	r2, r3
 80021f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021fc:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	4b33      	ldr	r3, [pc, #204]	; (80022d0 <HAL_RCC_OscConfig+0x10a4>)
 8002204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002206:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800220a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800220e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002212:	6011      	str	r1, [r2, #0]
 8002214:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002218:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800221c:	6812      	ldr	r2, [r2, #0]
 800221e:	fa92 f1a2 	rbit	r1, r2
 8002222:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002226:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800222a:	6011      	str	r1, [r2, #0]
  return result;
 800222c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002230:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002234:	6812      	ldr	r2, [r2, #0]
 8002236:	fab2 f282 	clz	r2, r2
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	f042 0220 	orr.w	r2, r2, #32
 8002240:	b2d2      	uxtb	r2, r2
 8002242:	f002 021f 	and.w	r2, r2, #31
 8002246:	2101      	movs	r1, #1
 8002248:	fa01 f202 	lsl.w	r2, r1, r2
 800224c:	4013      	ands	r3, r2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d182      	bne.n	8002158 <HAL_RCC_OscConfig+0xf2c>
 8002252:	e037      	b.n	80022c4 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002254:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002258:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d101      	bne.n	8002268 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e02e      	b.n	80022c6 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002268:	4b19      	ldr	r3, [pc, #100]	; (80022d0 <HAL_RCC_OscConfig+0x10a4>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002270:	4b17      	ldr	r3, [pc, #92]	; (80022d0 <HAL_RCC_OscConfig+0x10a4>)
 8002272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002274:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002278:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800227c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002280:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002284:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	429a      	cmp	r2, r3
 800228e:	d117      	bne.n	80022c0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002290:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002294:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002298:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800229c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d10b      	bne.n	80022c0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80022a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022ac:	f003 020f 	and.w	r2, r3, #15
 80022b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022b4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80022bc:	429a      	cmp	r2, r3
 80022be:	d001      	beq.n	80022c4 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e000      	b.n	80022c6 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40021000 	.word	0x40021000

080022d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b09e      	sub	sp, #120	; 0x78
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80022de:	2300      	movs	r3, #0
 80022e0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e162      	b.n	80025b2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022ec:	4b90      	ldr	r3, [pc, #576]	; (8002530 <HAL_RCC_ClockConfig+0x25c>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0307 	and.w	r3, r3, #7
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d910      	bls.n	800231c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022fa:	4b8d      	ldr	r3, [pc, #564]	; (8002530 <HAL_RCC_ClockConfig+0x25c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f023 0207 	bic.w	r2, r3, #7
 8002302:	498b      	ldr	r1, [pc, #556]	; (8002530 <HAL_RCC_ClockConfig+0x25c>)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	4313      	orrs	r3, r2
 8002308:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800230a:	4b89      	ldr	r3, [pc, #548]	; (8002530 <HAL_RCC_ClockConfig+0x25c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	683a      	ldr	r2, [r7, #0]
 8002314:	429a      	cmp	r2, r3
 8002316:	d001      	beq.n	800231c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e14a      	b.n	80025b2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d008      	beq.n	800233a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002328:	4b82      	ldr	r3, [pc, #520]	; (8002534 <HAL_RCC_ClockConfig+0x260>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	497f      	ldr	r1, [pc, #508]	; (8002534 <HAL_RCC_ClockConfig+0x260>)
 8002336:	4313      	orrs	r3, r2
 8002338:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	f000 80dc 	beq.w	8002500 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d13c      	bne.n	80023ca <HAL_RCC_ClockConfig+0xf6>
 8002350:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002354:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002356:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002358:	fa93 f3a3 	rbit	r3, r3
 800235c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800235e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002360:	fab3 f383 	clz	r3, r3
 8002364:	b2db      	uxtb	r3, r3
 8002366:	095b      	lsrs	r3, r3, #5
 8002368:	b2db      	uxtb	r3, r3
 800236a:	f043 0301 	orr.w	r3, r3, #1
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b01      	cmp	r3, #1
 8002372:	d102      	bne.n	800237a <HAL_RCC_ClockConfig+0xa6>
 8002374:	4b6f      	ldr	r3, [pc, #444]	; (8002534 <HAL_RCC_ClockConfig+0x260>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	e00f      	b.n	800239a <HAL_RCC_ClockConfig+0xc6>
 800237a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800237e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002380:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002382:	fa93 f3a3 	rbit	r3, r3
 8002386:	667b      	str	r3, [r7, #100]	; 0x64
 8002388:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800238c:	663b      	str	r3, [r7, #96]	; 0x60
 800238e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002390:	fa93 f3a3 	rbit	r3, r3
 8002394:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002396:	4b67      	ldr	r3, [pc, #412]	; (8002534 <HAL_RCC_ClockConfig+0x260>)
 8002398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800239e:	65ba      	str	r2, [r7, #88]	; 0x58
 80023a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80023a2:	fa92 f2a2 	rbit	r2, r2
 80023a6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80023a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80023aa:	fab2 f282 	clz	r2, r2
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	f042 0220 	orr.w	r2, r2, #32
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	f002 021f 	and.w	r2, r2, #31
 80023ba:	2101      	movs	r1, #1
 80023bc:	fa01 f202 	lsl.w	r2, r1, r2
 80023c0:	4013      	ands	r3, r2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d17b      	bne.n	80024be <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e0f3      	b.n	80025b2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d13c      	bne.n	800244c <HAL_RCC_ClockConfig+0x178>
 80023d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023d6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023da:	fa93 f3a3 	rbit	r3, r3
 80023de:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80023e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023e2:	fab3 f383 	clz	r3, r3
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	095b      	lsrs	r3, r3, #5
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d102      	bne.n	80023fc <HAL_RCC_ClockConfig+0x128>
 80023f6:	4b4f      	ldr	r3, [pc, #316]	; (8002534 <HAL_RCC_ClockConfig+0x260>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	e00f      	b.n	800241c <HAL_RCC_ClockConfig+0x148>
 80023fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002400:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002402:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002404:	fa93 f3a3 	rbit	r3, r3
 8002408:	647b      	str	r3, [r7, #68]	; 0x44
 800240a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800240e:	643b      	str	r3, [r7, #64]	; 0x40
 8002410:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002412:	fa93 f3a3 	rbit	r3, r3
 8002416:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002418:	4b46      	ldr	r3, [pc, #280]	; (8002534 <HAL_RCC_ClockConfig+0x260>)
 800241a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002420:	63ba      	str	r2, [r7, #56]	; 0x38
 8002422:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002424:	fa92 f2a2 	rbit	r2, r2
 8002428:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800242a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800242c:	fab2 f282 	clz	r2, r2
 8002430:	b2d2      	uxtb	r2, r2
 8002432:	f042 0220 	orr.w	r2, r2, #32
 8002436:	b2d2      	uxtb	r2, r2
 8002438:	f002 021f 	and.w	r2, r2, #31
 800243c:	2101      	movs	r1, #1
 800243e:	fa01 f202 	lsl.w	r2, r1, r2
 8002442:	4013      	ands	r3, r2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d13a      	bne.n	80024be <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e0b2      	b.n	80025b2 <HAL_RCC_ClockConfig+0x2de>
 800244c:	2302      	movs	r3, #2
 800244e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002452:	fa93 f3a3 	rbit	r3, r3
 8002456:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800245a:	fab3 f383 	clz	r3, r3
 800245e:	b2db      	uxtb	r3, r3
 8002460:	095b      	lsrs	r3, r3, #5
 8002462:	b2db      	uxtb	r3, r3
 8002464:	f043 0301 	orr.w	r3, r3, #1
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b01      	cmp	r3, #1
 800246c:	d102      	bne.n	8002474 <HAL_RCC_ClockConfig+0x1a0>
 800246e:	4b31      	ldr	r3, [pc, #196]	; (8002534 <HAL_RCC_ClockConfig+0x260>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	e00d      	b.n	8002490 <HAL_RCC_ClockConfig+0x1bc>
 8002474:	2302      	movs	r3, #2
 8002476:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800247a:	fa93 f3a3 	rbit	r3, r3
 800247e:	627b      	str	r3, [r7, #36]	; 0x24
 8002480:	2302      	movs	r3, #2
 8002482:	623b      	str	r3, [r7, #32]
 8002484:	6a3b      	ldr	r3, [r7, #32]
 8002486:	fa93 f3a3 	rbit	r3, r3
 800248a:	61fb      	str	r3, [r7, #28]
 800248c:	4b29      	ldr	r3, [pc, #164]	; (8002534 <HAL_RCC_ClockConfig+0x260>)
 800248e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002490:	2202      	movs	r2, #2
 8002492:	61ba      	str	r2, [r7, #24]
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	fa92 f2a2 	rbit	r2, r2
 800249a:	617a      	str	r2, [r7, #20]
  return result;
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	fab2 f282 	clz	r2, r2
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	f042 0220 	orr.w	r2, r2, #32
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	f002 021f 	and.w	r2, r2, #31
 80024ae:	2101      	movs	r1, #1
 80024b0:	fa01 f202 	lsl.w	r2, r1, r2
 80024b4:	4013      	ands	r3, r2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e079      	b.n	80025b2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024be:	4b1d      	ldr	r3, [pc, #116]	; (8002534 <HAL_RCC_ClockConfig+0x260>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f023 0203 	bic.w	r2, r3, #3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	491a      	ldr	r1, [pc, #104]	; (8002534 <HAL_RCC_ClockConfig+0x260>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024d0:	f7fe fafc 	bl	8000acc <HAL_GetTick>
 80024d4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024d6:	e00a      	b.n	80024ee <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024d8:	f7fe faf8 	bl	8000acc <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e061      	b.n	80025b2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ee:	4b11      	ldr	r3, [pc, #68]	; (8002534 <HAL_RCC_ClockConfig+0x260>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f003 020c 	and.w	r2, r3, #12
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d1eb      	bne.n	80024d8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002500:	4b0b      	ldr	r3, [pc, #44]	; (8002530 <HAL_RCC_ClockConfig+0x25c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	429a      	cmp	r2, r3
 800250c:	d214      	bcs.n	8002538 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800250e:	4b08      	ldr	r3, [pc, #32]	; (8002530 <HAL_RCC_ClockConfig+0x25c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f023 0207 	bic.w	r2, r3, #7
 8002516:	4906      	ldr	r1, [pc, #24]	; (8002530 <HAL_RCC_ClockConfig+0x25c>)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	4313      	orrs	r3, r2
 800251c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800251e:	4b04      	ldr	r3, [pc, #16]	; (8002530 <HAL_RCC_ClockConfig+0x25c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	429a      	cmp	r2, r3
 800252a:	d005      	beq.n	8002538 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e040      	b.n	80025b2 <HAL_RCC_ClockConfig+0x2de>
 8002530:	40022000 	.word	0x40022000
 8002534:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b00      	cmp	r3, #0
 8002542:	d008      	beq.n	8002556 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002544:	4b1d      	ldr	r3, [pc, #116]	; (80025bc <HAL_RCC_ClockConfig+0x2e8>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	491a      	ldr	r1, [pc, #104]	; (80025bc <HAL_RCC_ClockConfig+0x2e8>)
 8002552:	4313      	orrs	r3, r2
 8002554:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0308 	and.w	r3, r3, #8
 800255e:	2b00      	cmp	r3, #0
 8002560:	d009      	beq.n	8002576 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002562:	4b16      	ldr	r3, [pc, #88]	; (80025bc <HAL_RCC_ClockConfig+0x2e8>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	4912      	ldr	r1, [pc, #72]	; (80025bc <HAL_RCC_ClockConfig+0x2e8>)
 8002572:	4313      	orrs	r3, r2
 8002574:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002576:	f000 f829 	bl	80025cc <HAL_RCC_GetSysClockFreq>
 800257a:	4601      	mov	r1, r0
 800257c:	4b0f      	ldr	r3, [pc, #60]	; (80025bc <HAL_RCC_ClockConfig+0x2e8>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002584:	22f0      	movs	r2, #240	; 0xf0
 8002586:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	fa92 f2a2 	rbit	r2, r2
 800258e:	60fa      	str	r2, [r7, #12]
  return result;
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	fab2 f282 	clz	r2, r2
 8002596:	b2d2      	uxtb	r2, r2
 8002598:	40d3      	lsrs	r3, r2
 800259a:	4a09      	ldr	r2, [pc, #36]	; (80025c0 <HAL_RCC_ClockConfig+0x2ec>)
 800259c:	5cd3      	ldrb	r3, [r2, r3]
 800259e:	fa21 f303 	lsr.w	r3, r1, r3
 80025a2:	4a08      	ldr	r2, [pc, #32]	; (80025c4 <HAL_RCC_ClockConfig+0x2f0>)
 80025a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80025a6:	4b08      	ldr	r3, [pc, #32]	; (80025c8 <HAL_RCC_ClockConfig+0x2f4>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7fe fa4a 	bl	8000a44 <HAL_InitTick>
  
  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3778      	adds	r7, #120	; 0x78
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	40021000 	.word	0x40021000
 80025c0:	08004a60 	.word	0x08004a60
 80025c4:	20000010 	.word	0x20000010
 80025c8:	20000014 	.word	0x20000014

080025cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b08b      	sub	sp, #44	; 0x2c
 80025d0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025d2:	2300      	movs	r3, #0
 80025d4:	61fb      	str	r3, [r7, #28]
 80025d6:	2300      	movs	r3, #0
 80025d8:	61bb      	str	r3, [r7, #24]
 80025da:	2300      	movs	r3, #0
 80025dc:	627b      	str	r3, [r7, #36]	; 0x24
 80025de:	2300      	movs	r3, #0
 80025e0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80025e2:	2300      	movs	r3, #0
 80025e4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80025e6:	4b2a      	ldr	r3, [pc, #168]	; (8002690 <HAL_RCC_GetSysClockFreq+0xc4>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	f003 030c 	and.w	r3, r3, #12
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	d002      	beq.n	80025fc <HAL_RCC_GetSysClockFreq+0x30>
 80025f6:	2b08      	cmp	r3, #8
 80025f8:	d003      	beq.n	8002602 <HAL_RCC_GetSysClockFreq+0x36>
 80025fa:	e03f      	b.n	800267c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025fc:	4b25      	ldr	r3, [pc, #148]	; (8002694 <HAL_RCC_GetSysClockFreq+0xc8>)
 80025fe:	623b      	str	r3, [r7, #32]
      break;
 8002600:	e03f      	b.n	8002682 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002608:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800260c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260e:	68ba      	ldr	r2, [r7, #8]
 8002610:	fa92 f2a2 	rbit	r2, r2
 8002614:	607a      	str	r2, [r7, #4]
  return result;
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	fab2 f282 	clz	r2, r2
 800261c:	b2d2      	uxtb	r2, r2
 800261e:	40d3      	lsrs	r3, r2
 8002620:	4a1d      	ldr	r2, [pc, #116]	; (8002698 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002622:	5cd3      	ldrb	r3, [r2, r3]
 8002624:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002626:	4b1a      	ldr	r3, [pc, #104]	; (8002690 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262a:	f003 030f 	and.w	r3, r3, #15
 800262e:	220f      	movs	r2, #15
 8002630:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	fa92 f2a2 	rbit	r2, r2
 8002638:	60fa      	str	r2, [r7, #12]
  return result;
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	fab2 f282 	clz	r2, r2
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	40d3      	lsrs	r3, r2
 8002644:	4a15      	ldr	r2, [pc, #84]	; (800269c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002646:	5cd3      	ldrb	r3, [r2, r3]
 8002648:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d008      	beq.n	8002666 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002654:	4a0f      	ldr	r2, [pc, #60]	; (8002694 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	fbb2 f2f3 	udiv	r2, r2, r3
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	fb02 f303 	mul.w	r3, r2, r3
 8002662:	627b      	str	r3, [r7, #36]	; 0x24
 8002664:	e007      	b.n	8002676 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002666:	4a0b      	ldr	r2, [pc, #44]	; (8002694 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	fbb2 f2f3 	udiv	r2, r2, r3
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	fb02 f303 	mul.w	r3, r2, r3
 8002674:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	623b      	str	r3, [r7, #32]
      break;
 800267a:	e002      	b.n	8002682 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800267c:	4b05      	ldr	r3, [pc, #20]	; (8002694 <HAL_RCC_GetSysClockFreq+0xc8>)
 800267e:	623b      	str	r3, [r7, #32]
      break;
 8002680:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002682:	6a3b      	ldr	r3, [r7, #32]
}
 8002684:	4618      	mov	r0, r3
 8002686:	372c      	adds	r7, #44	; 0x2c
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	40021000 	.word	0x40021000
 8002694:	007a1200 	.word	0x007a1200
 8002698:	08004a78 	.word	0x08004a78
 800269c:	08004a88 	.word	0x08004a88

080026a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026a4:	4b03      	ldr	r3, [pc, #12]	; (80026b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80026a6:	681b      	ldr	r3, [r3, #0]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	20000010 	.word	0x20000010

080026b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80026be:	f7ff ffef 	bl	80026a0 <HAL_RCC_GetHCLKFreq>
 80026c2:	4601      	mov	r1, r0
 80026c4:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80026cc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80026d0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	fa92 f2a2 	rbit	r2, r2
 80026d8:	603a      	str	r2, [r7, #0]
  return result;
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	fab2 f282 	clz	r2, r2
 80026e0:	b2d2      	uxtb	r2, r2
 80026e2:	40d3      	lsrs	r3, r2
 80026e4:	4a04      	ldr	r2, [pc, #16]	; (80026f8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80026e6:	5cd3      	ldrb	r3, [r2, r3]
 80026e8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80026ec:	4618      	mov	r0, r3
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40021000 	.word	0x40021000
 80026f8:	08004a70 	.word	0x08004a70

080026fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002702:	f7ff ffcd 	bl	80026a0 <HAL_RCC_GetHCLKFreq>
 8002706:	4601      	mov	r1, r0
 8002708:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002710:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002714:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	fa92 f2a2 	rbit	r2, r2
 800271c:	603a      	str	r2, [r7, #0]
  return result;
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	fab2 f282 	clz	r2, r2
 8002724:	b2d2      	uxtb	r2, r2
 8002726:	40d3      	lsrs	r3, r2
 8002728:	4a04      	ldr	r2, [pc, #16]	; (800273c <HAL_RCC_GetPCLK2Freq+0x40>)
 800272a:	5cd3      	ldrb	r3, [r2, r3]
 800272c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002730:	4618      	mov	r0, r3
 8002732:	3708      	adds	r7, #8
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40021000 	.word	0x40021000
 800273c:	08004a70 	.word	0x08004a70

08002740 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b092      	sub	sp, #72	; 0x48
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002748:	2300      	movs	r3, #0
 800274a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800274c:	2300      	movs	r3, #0
 800274e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002750:	2300      	movs	r3, #0
 8002752:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800275e:	2b00      	cmp	r3, #0
 8002760:	f000 80d4 	beq.w	800290c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002764:	4b4e      	ldr	r3, [pc, #312]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002766:	69db      	ldr	r3, [r3, #28]
 8002768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d10e      	bne.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002770:	4b4b      	ldr	r3, [pc, #300]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002772:	69db      	ldr	r3, [r3, #28]
 8002774:	4a4a      	ldr	r2, [pc, #296]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002776:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800277a:	61d3      	str	r3, [r2, #28]
 800277c:	4b48      	ldr	r3, [pc, #288]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800277e:	69db      	ldr	r3, [r3, #28]
 8002780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002784:	60bb      	str	r3, [r7, #8]
 8002786:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002788:	2301      	movs	r3, #1
 800278a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800278e:	4b45      	ldr	r3, [pc, #276]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002796:	2b00      	cmp	r3, #0
 8002798:	d118      	bne.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800279a:	4b42      	ldr	r3, [pc, #264]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a41      	ldr	r2, [pc, #260]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027a4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027a6:	f7fe f991 	bl	8000acc <HAL_GetTick>
 80027aa:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ac:	e008      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ae:	f7fe f98d 	bl	8000acc <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b64      	cmp	r3, #100	; 0x64
 80027ba:	d901      	bls.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e1d6      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c0:	4b38      	ldr	r3, [pc, #224]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0f0      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027cc:	4b34      	ldr	r3, [pc, #208]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ce:	6a1b      	ldr	r3, [r3, #32]
 80027d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 8084 	beq.w	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d07c      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027ec:	4b2c      	ldr	r3, [pc, #176]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027fa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027fe:	fa93 f3a3 	rbit	r3, r3
 8002802:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002806:	fab3 f383 	clz	r3, r3
 800280a:	b2db      	uxtb	r3, r3
 800280c:	461a      	mov	r2, r3
 800280e:	4b26      	ldr	r3, [pc, #152]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002810:	4413      	add	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	461a      	mov	r2, r3
 8002816:	2301      	movs	r3, #1
 8002818:	6013      	str	r3, [r2, #0]
 800281a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800281e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002822:	fa93 f3a3 	rbit	r3, r3
 8002826:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800282a:	fab3 f383 	clz	r3, r3
 800282e:	b2db      	uxtb	r3, r3
 8002830:	461a      	mov	r2, r3
 8002832:	4b1d      	ldr	r3, [pc, #116]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002834:	4413      	add	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	461a      	mov	r2, r3
 800283a:	2300      	movs	r3, #0
 800283c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800283e:	4a18      	ldr	r2, [pc, #96]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002842:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	2b00      	cmp	r3, #0
 800284c:	d04b      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284e:	f7fe f93d 	bl	8000acc <HAL_GetTick>
 8002852:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002854:	e00a      	b.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002856:	f7fe f939 	bl	8000acc <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	f241 3288 	movw	r2, #5000	; 0x1388
 8002864:	4293      	cmp	r3, r2
 8002866:	d901      	bls.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e180      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800286c:	2302      	movs	r3, #2
 800286e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002872:	fa93 f3a3 	rbit	r3, r3
 8002876:	627b      	str	r3, [r7, #36]	; 0x24
 8002878:	2302      	movs	r3, #2
 800287a:	623b      	str	r3, [r7, #32]
 800287c:	6a3b      	ldr	r3, [r7, #32]
 800287e:	fa93 f3a3 	rbit	r3, r3
 8002882:	61fb      	str	r3, [r7, #28]
  return result;
 8002884:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002886:	fab3 f383 	clz	r3, r3
 800288a:	b2db      	uxtb	r3, r3
 800288c:	095b      	lsrs	r3, r3, #5
 800288e:	b2db      	uxtb	r3, r3
 8002890:	f043 0302 	orr.w	r3, r3, #2
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d108      	bne.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800289a:	4b01      	ldr	r3, [pc, #4]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	e00d      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80028a0:	40021000 	.word	0x40021000
 80028a4:	40007000 	.word	0x40007000
 80028a8:	10908100 	.word	0x10908100
 80028ac:	2302      	movs	r3, #2
 80028ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	fa93 f3a3 	rbit	r3, r3
 80028b6:	617b      	str	r3, [r7, #20]
 80028b8:	4b9a      	ldr	r3, [pc, #616]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028bc:	2202      	movs	r2, #2
 80028be:	613a      	str	r2, [r7, #16]
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	fa92 f2a2 	rbit	r2, r2
 80028c6:	60fa      	str	r2, [r7, #12]
  return result;
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	fab2 f282 	clz	r2, r2
 80028ce:	b2d2      	uxtb	r2, r2
 80028d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028d4:	b2d2      	uxtb	r2, r2
 80028d6:	f002 021f 	and.w	r2, r2, #31
 80028da:	2101      	movs	r1, #1
 80028dc:	fa01 f202 	lsl.w	r2, r1, r2
 80028e0:	4013      	ands	r3, r2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0b7      	beq.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80028e6:	4b8f      	ldr	r3, [pc, #572]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	498c      	ldr	r1, [pc, #560]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028f8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d105      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002900:	4b88      	ldr	r3, [pc, #544]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002902:	69db      	ldr	r3, [r3, #28]
 8002904:	4a87      	ldr	r2, [pc, #540]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002906:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800290a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	2b00      	cmp	r3, #0
 8002916:	d008      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002918:	4b82      	ldr	r3, [pc, #520]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800291a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291c:	f023 0203 	bic.w	r2, r3, #3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	497f      	ldr	r1, [pc, #508]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002926:	4313      	orrs	r3, r2
 8002928:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d008      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002936:	4b7b      	ldr	r3, [pc, #492]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	4978      	ldr	r1, [pc, #480]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002944:	4313      	orrs	r3, r2
 8002946:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b00      	cmp	r3, #0
 8002952:	d008      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002954:	4b73      	ldr	r3, [pc, #460]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002958:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	4970      	ldr	r1, [pc, #448]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002962:	4313      	orrs	r3, r2
 8002964:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0320 	and.w	r3, r3, #32
 800296e:	2b00      	cmp	r3, #0
 8002970:	d008      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002972:	4b6c      	ldr	r3, [pc, #432]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002976:	f023 0210 	bic.w	r2, r3, #16
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	4969      	ldr	r1, [pc, #420]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002980:	4313      	orrs	r3, r2
 8002982:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d008      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002990:	4b64      	ldr	r3, [pc, #400]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299c:	4961      	ldr	r1, [pc, #388]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d008      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029ae:	4b5d      	ldr	r3, [pc, #372]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b2:	f023 0220 	bic.w	r2, r3, #32
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	495a      	ldr	r1, [pc, #360]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d008      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029cc:	4b55      	ldr	r3, [pc, #340]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d8:	4952      	ldr	r1, [pc, #328]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0308 	and.w	r3, r3, #8
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d008      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029ea:	4b4e      	ldr	r3, [pc, #312]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	494b      	ldr	r1, [pc, #300]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0310 	and.w	r3, r3, #16
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d008      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a08:	4b46      	ldr	r3, [pc, #280]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	4943      	ldr	r1, [pc, #268]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d008      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a26:	4b3f      	ldr	r3, [pc, #252]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	493c      	ldr	r1, [pc, #240]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d008      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002a44:	4b37      	ldr	r3, [pc, #220]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a48:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a50:	4934      	ldr	r1, [pc, #208]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d008      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002a62:	4b30      	ldr	r3, [pc, #192]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a66:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6e:	492d      	ldr	r1, [pc, #180]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d008      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002a80:	4b28      	ldr	r3, [pc, #160]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a8c:	4925      	ldr	r1, [pc, #148]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d008      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002a9e:	4b21      	ldr	r3, [pc, #132]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	491e      	ldr	r1, [pc, #120]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d008      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002abc:	4b19      	ldr	r3, [pc, #100]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac8:	4916      	ldr	r1, [pc, #88]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d008      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002ada:	4b12      	ldr	r3, [pc, #72]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae6:	490f      	ldr	r1, [pc, #60]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d008      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002af8:	4b0a      	ldr	r3, [pc, #40]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b04:	4907      	ldr	r1, [pc, #28]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00c      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002b16:	4b03      	ldr	r3, [pc, #12]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	e002      	b.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002b22:	bf00      	nop
 8002b24:	40021000 	.word	0x40021000
 8002b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b2a:	4913      	ldr	r1, [pc, #76]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d008      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002b3c:	4b0e      	ldr	r3, [pc, #56]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b40:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b48:	490b      	ldr	r1, [pc, #44]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d008      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002b5a:	4b07      	ldr	r3, [pc, #28]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b66:	4904      	ldr	r1, [pc, #16]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3748      	adds	r7, #72	; 0x48
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	40021000 	.word	0x40021000

08002b7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e040      	b.n	8002c10 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d106      	bne.n	8002ba4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7fd fd70 	bl	8000684 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2224      	movs	r2, #36	; 0x24
 8002ba8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f022 0201 	bic.w	r2, r2, #1
 8002bb8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 fc00 	bl	80033c0 <UART_SetConfig>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d101      	bne.n	8002bca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e022      	b.n	8002c10 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d002      	beq.n	8002bd8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 fdc8 	bl	8003768 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	685a      	ldr	r2, [r3, #4]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002be6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689a      	ldr	r2, [r3, #8]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bf6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f042 0201 	orr.w	r2, r2, #1
 8002c06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 fe4f 	bl	80038ac <UART_CheckIdleState>
 8002c0e:	4603      	mov	r3, r0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b08a      	sub	sp, #40	; 0x28
 8002c1c:	af02      	add	r7, sp, #8
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	603b      	str	r3, [r7, #0]
 8002c24:	4613      	mov	r3, r2
 8002c26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c2c:	2b20      	cmp	r3, #32
 8002c2e:	d178      	bne.n	8002d22 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d002      	beq.n	8002c3c <HAL_UART_Transmit+0x24>
 8002c36:	88fb      	ldrh	r3, [r7, #6]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d101      	bne.n	8002c40 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e071      	b.n	8002d24 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2221      	movs	r2, #33	; 0x21
 8002c4c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c4e:	f7fd ff3d 	bl	8000acc <HAL_GetTick>
 8002c52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	88fa      	ldrh	r2, [r7, #6]
 8002c58:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	88fa      	ldrh	r2, [r7, #6]
 8002c60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c6c:	d108      	bne.n	8002c80 <HAL_UART_Transmit+0x68>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d104      	bne.n	8002c80 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002c76:	2300      	movs	r3, #0
 8002c78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	61bb      	str	r3, [r7, #24]
 8002c7e:	e003      	b.n	8002c88 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c84:	2300      	movs	r3, #0
 8002c86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c88:	e030      	b.n	8002cec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	9300      	str	r3, [sp, #0]
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	2200      	movs	r2, #0
 8002c92:	2180      	movs	r1, #128	; 0x80
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f000 feb1 	bl	80039fc <UART_WaitOnFlagUntilTimeout>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d004      	beq.n	8002caa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e03c      	b.n	8002d24 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d10b      	bne.n	8002cc8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	881a      	ldrh	r2, [r3, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cbc:	b292      	uxth	r2, r2
 8002cbe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	3302      	adds	r3, #2
 8002cc4:	61bb      	str	r3, [r7, #24]
 8002cc6:	e008      	b.n	8002cda <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	781a      	ldrb	r2, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	b292      	uxth	r2, r2
 8002cd2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1c8      	bne.n	8002c8a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	2140      	movs	r1, #64	; 0x40
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f000 fe7a 	bl	80039fc <UART_WaitOnFlagUntilTimeout>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d004      	beq.n	8002d18 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2220      	movs	r2, #32
 8002d12:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e005      	b.n	8002d24 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2220      	movs	r2, #32
 8002d1c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	e000      	b.n	8002d24 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002d22:	2302      	movs	r3, #2
  }
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3720      	adds	r7, #32
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b08a      	sub	sp, #40	; 0x28
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	4613      	mov	r3, r2
 8002d38:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d40:	2b20      	cmp	r3, #32
 8002d42:	d132      	bne.n	8002daa <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d002      	beq.n	8002d50 <HAL_UART_Receive_IT+0x24>
 8002d4a:	88fb      	ldrh	r3, [r7, #6]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d101      	bne.n	8002d54 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e02b      	b.n	8002dac <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d018      	beq.n	8002d9a <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	e853 3f00 	ldrex	r3, [r3]
 8002d74:	613b      	str	r3, [r7, #16]
   return(result);
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	461a      	mov	r2, r3
 8002d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d86:	623b      	str	r3, [r7, #32]
 8002d88:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d8a:	69f9      	ldr	r1, [r7, #28]
 8002d8c:	6a3a      	ldr	r2, [r7, #32]
 8002d8e:	e841 2300 	strex	r3, r2, [r1]
 8002d92:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1e6      	bne.n	8002d68 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002d9a:	88fb      	ldrh	r3, [r7, #6]
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	68b9      	ldr	r1, [r7, #8]
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f000 fe93 	bl	8003acc <UART_Start_Receive_IT>
 8002da6:	4603      	mov	r3, r0
 8002da8:	e000      	b.n	8002dac <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8002daa:	2302      	movs	r3, #2
  }
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3728      	adds	r7, #40	; 0x28
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b0ba      	sub	sp, #232	; 0xe8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	69db      	ldr	r3, [r3, #28]
 8002dc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002dda:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002dde:	f640 030f 	movw	r3, #2063	; 0x80f
 8002de2:	4013      	ands	r3, r2
 8002de4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002de8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d115      	bne.n	8002e1c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002df4:	f003 0320 	and.w	r3, r3, #32
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00f      	beq.n	8002e1c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e00:	f003 0320 	and.w	r3, r3, #32
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d009      	beq.n	8002e1c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f000 82ab 	beq.w	8003368 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	4798      	blx	r3
      }
      return;
 8002e1a:	e2a5      	b.n	8003368 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002e1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f000 8117 	beq.w	8003054 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002e26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d106      	bne.n	8002e40 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002e32:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002e36:	4b85      	ldr	r3, [pc, #532]	; (800304c <HAL_UART_IRQHandler+0x298>)
 8002e38:	4013      	ands	r3, r2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f000 810a 	beq.w	8003054 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d011      	beq.n	8002e70 <HAL_UART_IRQHandler+0xbc>
 8002e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00b      	beq.n	8002e70 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e66:	f043 0201 	orr.w	r2, r3, #1
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d011      	beq.n	8002ea0 <HAL_UART_IRQHandler+0xec>
 8002e7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e80:	f003 0301 	and.w	r3, r3, #1
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00b      	beq.n	8002ea0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2202      	movs	r2, #2
 8002e8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e96:	f043 0204 	orr.w	r2, r3, #4
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d011      	beq.n	8002ed0 <HAL_UART_IRQHandler+0x11c>
 8002eac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002eb0:	f003 0301 	and.w	r3, r3, #1
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00b      	beq.n	8002ed0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2204      	movs	r2, #4
 8002ebe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ec6:	f043 0202 	orr.w	r2, r3, #2
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002ed0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ed4:	f003 0308 	and.w	r3, r3, #8
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d017      	beq.n	8002f0c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002edc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ee0:	f003 0320 	and.w	r3, r3, #32
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d105      	bne.n	8002ef4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002ee8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002eec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00b      	beq.n	8002f0c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2208      	movs	r2, #8
 8002efa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f02:	f043 0208 	orr.w	r2, r3, #8
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002f0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d012      	beq.n	8002f3e <HAL_UART_IRQHandler+0x18a>
 8002f18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00c      	beq.n	8002f3e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f34:	f043 0220 	orr.w	r2, r3, #32
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f000 8211 	beq.w	800336c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f4e:	f003 0320 	and.w	r3, r3, #32
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00d      	beq.n	8002f72 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f5a:	f003 0320 	and.w	r3, r3, #32
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d007      	beq.n	8002f72 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f86:	2b40      	cmp	r3, #64	; 0x40
 8002f88:	d005      	beq.n	8002f96 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002f8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d04f      	beq.n	8003036 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 fe5e 	bl	8003c58 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa6:	2b40      	cmp	r3, #64	; 0x40
 8002fa8:	d141      	bne.n	800302e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	3308      	adds	r3, #8
 8002fb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002fb8:	e853 3f00 	ldrex	r3, [r3]
 8002fbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002fc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002fc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	3308      	adds	r3, #8
 8002fd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002fd6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002fda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002fe2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002fe6:	e841 2300 	strex	r3, r2, [r1]
 8002fea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002fee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1d9      	bne.n	8002faa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d013      	beq.n	8003026 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003002:	4a13      	ldr	r2, [pc, #76]	; (8003050 <HAL_UART_IRQHandler+0x29c>)
 8003004:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800300a:	4618      	mov	r0, r3
 800300c:	f7fd fed8 	bl	8000dc0 <HAL_DMA_Abort_IT>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d017      	beq.n	8003046 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800301a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003020:	4610      	mov	r0, r2
 8003022:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003024:	e00f      	b.n	8003046 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 f9b4 	bl	8003394 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800302c:	e00b      	b.n	8003046 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 f9b0 	bl	8003394 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003034:	e007      	b.n	8003046 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 f9ac 	bl	8003394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003044:	e192      	b.n	800336c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003046:	bf00      	nop
    return;
 8003048:	e190      	b.n	800336c <HAL_UART_IRQHandler+0x5b8>
 800304a:	bf00      	nop
 800304c:	04000120 	.word	0x04000120
 8003050:	08003d21 	.word	0x08003d21

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003058:	2b01      	cmp	r3, #1
 800305a:	f040 814b 	bne.w	80032f4 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800305e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003062:	f003 0310 	and.w	r3, r3, #16
 8003066:	2b00      	cmp	r3, #0
 8003068:	f000 8144 	beq.w	80032f4 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800306c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003070:	f003 0310 	and.w	r3, r3, #16
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 813d 	beq.w	80032f4 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2210      	movs	r2, #16
 8003080:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800308c:	2b40      	cmp	r3, #64	; 0x40
 800308e:	f040 80b5 	bne.w	80031fc <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800309e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f000 8164 	beq.w	8003370 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80030ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80030b2:	429a      	cmp	r2, r3
 80030b4:	f080 815c 	bcs.w	8003370 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80030be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	2b20      	cmp	r3, #32
 80030ca:	f000 8086 	beq.w	80031da <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80030da:	e853 3f00 	ldrex	r3, [r3]
 80030de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80030e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	461a      	mov	r2, r3
 80030f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80030f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80030fc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003100:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003104:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003108:	e841 2300 	strex	r3, r2, [r1]
 800310c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003110:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1da      	bne.n	80030ce <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	3308      	adds	r3, #8
 800311e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003120:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003122:	e853 3f00 	ldrex	r3, [r3]
 8003126:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003128:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800312a:	f023 0301 	bic.w	r3, r3, #1
 800312e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	3308      	adds	r3, #8
 8003138:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800313c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003140:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003142:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003144:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003148:	e841 2300 	strex	r3, r2, [r1]
 800314c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800314e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1e1      	bne.n	8003118 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	3308      	adds	r3, #8
 800315a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800315c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800315e:	e853 3f00 	ldrex	r3, [r3]
 8003162:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003164:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003166:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800316a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	3308      	adds	r3, #8
 8003174:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003178:	66fa      	str	r2, [r7, #108]	; 0x6c
 800317a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800317c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800317e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003180:	e841 2300 	strex	r3, r2, [r1]
 8003184:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003186:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1e3      	bne.n	8003154 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2220      	movs	r2, #32
 8003190:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031a2:	e853 3f00 	ldrex	r3, [r3]
 80031a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80031a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031aa:	f023 0310 	bic.w	r3, r3, #16
 80031ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	461a      	mov	r2, r3
 80031b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80031be:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80031c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80031c4:	e841 2300 	strex	r3, r2, [r1]
 80031c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80031ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1e4      	bne.n	800319a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7fd fdba 	bl	8000d4e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2202      	movs	r2, #2
 80031de:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	4619      	mov	r1, r3
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 f8d7 	bl	80033a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80031fa:	e0b9      	b.n	8003370 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003208:	b29b      	uxth	r3, r3
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003216:	b29b      	uxth	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	f000 80ab 	beq.w	8003374 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800321e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003222:	2b00      	cmp	r3, #0
 8003224:	f000 80a6 	beq.w	8003374 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800322e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003230:	e853 3f00 	ldrex	r3, [r3]
 8003234:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003238:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800323c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	461a      	mov	r2, r3
 8003246:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800324a:	647b      	str	r3, [r7, #68]	; 0x44
 800324c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800324e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003250:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003252:	e841 2300 	strex	r3, r2, [r1]
 8003256:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1e4      	bne.n	8003228 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	3308      	adds	r3, #8
 8003264:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003268:	e853 3f00 	ldrex	r3, [r3]
 800326c:	623b      	str	r3, [r7, #32]
   return(result);
 800326e:	6a3b      	ldr	r3, [r7, #32]
 8003270:	f023 0301 	bic.w	r3, r3, #1
 8003274:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	3308      	adds	r3, #8
 800327e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003282:	633a      	str	r2, [r7, #48]	; 0x30
 8003284:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003286:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003288:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800328a:	e841 2300 	strex	r3, r2, [r1]
 800328e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1e3      	bne.n	800325e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2220      	movs	r2, #32
 800329a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	e853 3f00 	ldrex	r3, [r3]
 80032b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f023 0310 	bic.w	r3, r3, #16
 80032be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	461a      	mov	r2, r3
 80032c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032cc:	61fb      	str	r3, [r7, #28]
 80032ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d0:	69b9      	ldr	r1, [r7, #24]
 80032d2:	69fa      	ldr	r2, [r7, #28]
 80032d4:	e841 2300 	strex	r3, r2, [r1]
 80032d8:	617b      	str	r3, [r7, #20]
   return(result);
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1e4      	bne.n	80032aa <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2202      	movs	r2, #2
 80032e4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80032ea:	4619      	mov	r1, r3
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 f85b 	bl	80033a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80032f2:	e03f      	b.n	8003374 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80032f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00e      	beq.n	800331e <HAL_UART_IRQHandler+0x56a>
 8003300:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003304:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d008      	beq.n	800331e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003314:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 feea 	bl	80040f0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800331c:	e02d      	b.n	800337a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800331e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00e      	beq.n	8003348 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800332a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800332e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003332:	2b00      	cmp	r3, #0
 8003334:	d008      	beq.n	8003348 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800333a:	2b00      	cmp	r3, #0
 800333c:	d01c      	beq.n	8003378 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	4798      	blx	r3
    }
    return;
 8003346:	e017      	b.n	8003378 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800334c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003350:	2b00      	cmp	r3, #0
 8003352:	d012      	beq.n	800337a <HAL_UART_IRQHandler+0x5c6>
 8003354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00c      	beq.n	800337a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 fcf3 	bl	8003d4c <UART_EndTransmit_IT>
    return;
 8003366:	e008      	b.n	800337a <HAL_UART_IRQHandler+0x5c6>
      return;
 8003368:	bf00      	nop
 800336a:	e006      	b.n	800337a <HAL_UART_IRQHandler+0x5c6>
    return;
 800336c:	bf00      	nop
 800336e:	e004      	b.n	800337a <HAL_UART_IRQHandler+0x5c6>
      return;
 8003370:	bf00      	nop
 8003372:	e002      	b.n	800337a <HAL_UART_IRQHandler+0x5c6>
      return;
 8003374:	bf00      	nop
 8003376:	e000      	b.n	800337a <HAL_UART_IRQHandler+0x5c6>
    return;
 8003378:	bf00      	nop
  }

}
 800337a:	37e8      	adds	r7, #232	; 0xe8
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	460b      	mov	r3, r1
 80033b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b088      	sub	sp, #32
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80033c8:	2300      	movs	r3, #0
 80033ca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689a      	ldr	r2, [r3, #8]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	431a      	orrs	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	431a      	orrs	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	69db      	ldr	r3, [r3, #28]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	4b92      	ldr	r3, [pc, #584]	; (8003634 <UART_SetConfig+0x274>)
 80033ec:	4013      	ands	r3, r2
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	6812      	ldr	r2, [r2, #0]
 80033f2:	6979      	ldr	r1, [r7, #20]
 80033f4:	430b      	orrs	r3, r1
 80033f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68da      	ldr	r2, [r3, #12]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	4313      	orrs	r3, r2
 800341c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	430a      	orrs	r2, r1
 8003430:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a80      	ldr	r2, [pc, #512]	; (8003638 <UART_SetConfig+0x278>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d120      	bne.n	800347e <UART_SetConfig+0xbe>
 800343c:	4b7f      	ldr	r3, [pc, #508]	; (800363c <UART_SetConfig+0x27c>)
 800343e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003440:	f003 0303 	and.w	r3, r3, #3
 8003444:	2b03      	cmp	r3, #3
 8003446:	d817      	bhi.n	8003478 <UART_SetConfig+0xb8>
 8003448:	a201      	add	r2, pc, #4	; (adr r2, 8003450 <UART_SetConfig+0x90>)
 800344a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800344e:	bf00      	nop
 8003450:	08003461 	.word	0x08003461
 8003454:	0800346d 	.word	0x0800346d
 8003458:	08003473 	.word	0x08003473
 800345c:	08003467 	.word	0x08003467
 8003460:	2301      	movs	r3, #1
 8003462:	77fb      	strb	r3, [r7, #31]
 8003464:	e0b5      	b.n	80035d2 <UART_SetConfig+0x212>
 8003466:	2302      	movs	r3, #2
 8003468:	77fb      	strb	r3, [r7, #31]
 800346a:	e0b2      	b.n	80035d2 <UART_SetConfig+0x212>
 800346c:	2304      	movs	r3, #4
 800346e:	77fb      	strb	r3, [r7, #31]
 8003470:	e0af      	b.n	80035d2 <UART_SetConfig+0x212>
 8003472:	2308      	movs	r3, #8
 8003474:	77fb      	strb	r3, [r7, #31]
 8003476:	e0ac      	b.n	80035d2 <UART_SetConfig+0x212>
 8003478:	2310      	movs	r3, #16
 800347a:	77fb      	strb	r3, [r7, #31]
 800347c:	e0a9      	b.n	80035d2 <UART_SetConfig+0x212>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a6f      	ldr	r2, [pc, #444]	; (8003640 <UART_SetConfig+0x280>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d124      	bne.n	80034d2 <UART_SetConfig+0x112>
 8003488:	4b6c      	ldr	r3, [pc, #432]	; (800363c <UART_SetConfig+0x27c>)
 800348a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003490:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003494:	d011      	beq.n	80034ba <UART_SetConfig+0xfa>
 8003496:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800349a:	d817      	bhi.n	80034cc <UART_SetConfig+0x10c>
 800349c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034a0:	d011      	beq.n	80034c6 <UART_SetConfig+0x106>
 80034a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034a6:	d811      	bhi.n	80034cc <UART_SetConfig+0x10c>
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d003      	beq.n	80034b4 <UART_SetConfig+0xf4>
 80034ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034b0:	d006      	beq.n	80034c0 <UART_SetConfig+0x100>
 80034b2:	e00b      	b.n	80034cc <UART_SetConfig+0x10c>
 80034b4:	2300      	movs	r3, #0
 80034b6:	77fb      	strb	r3, [r7, #31]
 80034b8:	e08b      	b.n	80035d2 <UART_SetConfig+0x212>
 80034ba:	2302      	movs	r3, #2
 80034bc:	77fb      	strb	r3, [r7, #31]
 80034be:	e088      	b.n	80035d2 <UART_SetConfig+0x212>
 80034c0:	2304      	movs	r3, #4
 80034c2:	77fb      	strb	r3, [r7, #31]
 80034c4:	e085      	b.n	80035d2 <UART_SetConfig+0x212>
 80034c6:	2308      	movs	r3, #8
 80034c8:	77fb      	strb	r3, [r7, #31]
 80034ca:	e082      	b.n	80035d2 <UART_SetConfig+0x212>
 80034cc:	2310      	movs	r3, #16
 80034ce:	77fb      	strb	r3, [r7, #31]
 80034d0:	e07f      	b.n	80035d2 <UART_SetConfig+0x212>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a5b      	ldr	r2, [pc, #364]	; (8003644 <UART_SetConfig+0x284>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d124      	bne.n	8003526 <UART_SetConfig+0x166>
 80034dc:	4b57      	ldr	r3, [pc, #348]	; (800363c <UART_SetConfig+0x27c>)
 80034de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80034e4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80034e8:	d011      	beq.n	800350e <UART_SetConfig+0x14e>
 80034ea:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80034ee:	d817      	bhi.n	8003520 <UART_SetConfig+0x160>
 80034f0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80034f4:	d011      	beq.n	800351a <UART_SetConfig+0x15a>
 80034f6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80034fa:	d811      	bhi.n	8003520 <UART_SetConfig+0x160>
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d003      	beq.n	8003508 <UART_SetConfig+0x148>
 8003500:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003504:	d006      	beq.n	8003514 <UART_SetConfig+0x154>
 8003506:	e00b      	b.n	8003520 <UART_SetConfig+0x160>
 8003508:	2300      	movs	r3, #0
 800350a:	77fb      	strb	r3, [r7, #31]
 800350c:	e061      	b.n	80035d2 <UART_SetConfig+0x212>
 800350e:	2302      	movs	r3, #2
 8003510:	77fb      	strb	r3, [r7, #31]
 8003512:	e05e      	b.n	80035d2 <UART_SetConfig+0x212>
 8003514:	2304      	movs	r3, #4
 8003516:	77fb      	strb	r3, [r7, #31]
 8003518:	e05b      	b.n	80035d2 <UART_SetConfig+0x212>
 800351a:	2308      	movs	r3, #8
 800351c:	77fb      	strb	r3, [r7, #31]
 800351e:	e058      	b.n	80035d2 <UART_SetConfig+0x212>
 8003520:	2310      	movs	r3, #16
 8003522:	77fb      	strb	r3, [r7, #31]
 8003524:	e055      	b.n	80035d2 <UART_SetConfig+0x212>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a47      	ldr	r2, [pc, #284]	; (8003648 <UART_SetConfig+0x288>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d124      	bne.n	800357a <UART_SetConfig+0x1ba>
 8003530:	4b42      	ldr	r3, [pc, #264]	; (800363c <UART_SetConfig+0x27c>)
 8003532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003534:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003538:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800353c:	d011      	beq.n	8003562 <UART_SetConfig+0x1a2>
 800353e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003542:	d817      	bhi.n	8003574 <UART_SetConfig+0x1b4>
 8003544:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003548:	d011      	beq.n	800356e <UART_SetConfig+0x1ae>
 800354a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800354e:	d811      	bhi.n	8003574 <UART_SetConfig+0x1b4>
 8003550:	2b00      	cmp	r3, #0
 8003552:	d003      	beq.n	800355c <UART_SetConfig+0x19c>
 8003554:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003558:	d006      	beq.n	8003568 <UART_SetConfig+0x1a8>
 800355a:	e00b      	b.n	8003574 <UART_SetConfig+0x1b4>
 800355c:	2300      	movs	r3, #0
 800355e:	77fb      	strb	r3, [r7, #31]
 8003560:	e037      	b.n	80035d2 <UART_SetConfig+0x212>
 8003562:	2302      	movs	r3, #2
 8003564:	77fb      	strb	r3, [r7, #31]
 8003566:	e034      	b.n	80035d2 <UART_SetConfig+0x212>
 8003568:	2304      	movs	r3, #4
 800356a:	77fb      	strb	r3, [r7, #31]
 800356c:	e031      	b.n	80035d2 <UART_SetConfig+0x212>
 800356e:	2308      	movs	r3, #8
 8003570:	77fb      	strb	r3, [r7, #31]
 8003572:	e02e      	b.n	80035d2 <UART_SetConfig+0x212>
 8003574:	2310      	movs	r3, #16
 8003576:	77fb      	strb	r3, [r7, #31]
 8003578:	e02b      	b.n	80035d2 <UART_SetConfig+0x212>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a33      	ldr	r2, [pc, #204]	; (800364c <UART_SetConfig+0x28c>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d124      	bne.n	80035ce <UART_SetConfig+0x20e>
 8003584:	4b2d      	ldr	r3, [pc, #180]	; (800363c <UART_SetConfig+0x27c>)
 8003586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003588:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800358c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003590:	d011      	beq.n	80035b6 <UART_SetConfig+0x1f6>
 8003592:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003596:	d817      	bhi.n	80035c8 <UART_SetConfig+0x208>
 8003598:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800359c:	d011      	beq.n	80035c2 <UART_SetConfig+0x202>
 800359e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035a2:	d811      	bhi.n	80035c8 <UART_SetConfig+0x208>
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d003      	beq.n	80035b0 <UART_SetConfig+0x1f0>
 80035a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035ac:	d006      	beq.n	80035bc <UART_SetConfig+0x1fc>
 80035ae:	e00b      	b.n	80035c8 <UART_SetConfig+0x208>
 80035b0:	2300      	movs	r3, #0
 80035b2:	77fb      	strb	r3, [r7, #31]
 80035b4:	e00d      	b.n	80035d2 <UART_SetConfig+0x212>
 80035b6:	2302      	movs	r3, #2
 80035b8:	77fb      	strb	r3, [r7, #31]
 80035ba:	e00a      	b.n	80035d2 <UART_SetConfig+0x212>
 80035bc:	2304      	movs	r3, #4
 80035be:	77fb      	strb	r3, [r7, #31]
 80035c0:	e007      	b.n	80035d2 <UART_SetConfig+0x212>
 80035c2:	2308      	movs	r3, #8
 80035c4:	77fb      	strb	r3, [r7, #31]
 80035c6:	e004      	b.n	80035d2 <UART_SetConfig+0x212>
 80035c8:	2310      	movs	r3, #16
 80035ca:	77fb      	strb	r3, [r7, #31]
 80035cc:	e001      	b.n	80035d2 <UART_SetConfig+0x212>
 80035ce:	2310      	movs	r3, #16
 80035d0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	69db      	ldr	r3, [r3, #28]
 80035d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035da:	d16b      	bne.n	80036b4 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80035dc:	7ffb      	ldrb	r3, [r7, #31]
 80035de:	2b08      	cmp	r3, #8
 80035e0:	d838      	bhi.n	8003654 <UART_SetConfig+0x294>
 80035e2:	a201      	add	r2, pc, #4	; (adr r2, 80035e8 <UART_SetConfig+0x228>)
 80035e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e8:	0800360d 	.word	0x0800360d
 80035ec:	08003615 	.word	0x08003615
 80035f0:	0800361d 	.word	0x0800361d
 80035f4:	08003655 	.word	0x08003655
 80035f8:	08003623 	.word	0x08003623
 80035fc:	08003655 	.word	0x08003655
 8003600:	08003655 	.word	0x08003655
 8003604:	08003655 	.word	0x08003655
 8003608:	0800362b 	.word	0x0800362b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800360c:	f7ff f854 	bl	80026b8 <HAL_RCC_GetPCLK1Freq>
 8003610:	61b8      	str	r0, [r7, #24]
        break;
 8003612:	e024      	b.n	800365e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003614:	f7ff f872 	bl	80026fc <HAL_RCC_GetPCLK2Freq>
 8003618:	61b8      	str	r0, [r7, #24]
        break;
 800361a:	e020      	b.n	800365e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800361c:	4b0c      	ldr	r3, [pc, #48]	; (8003650 <UART_SetConfig+0x290>)
 800361e:	61bb      	str	r3, [r7, #24]
        break;
 8003620:	e01d      	b.n	800365e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003622:	f7fe ffd3 	bl	80025cc <HAL_RCC_GetSysClockFreq>
 8003626:	61b8      	str	r0, [r7, #24]
        break;
 8003628:	e019      	b.n	800365e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800362a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800362e:	61bb      	str	r3, [r7, #24]
        break;
 8003630:	e015      	b.n	800365e <UART_SetConfig+0x29e>
 8003632:	bf00      	nop
 8003634:	efff69f3 	.word	0xefff69f3
 8003638:	40013800 	.word	0x40013800
 800363c:	40021000 	.word	0x40021000
 8003640:	40004400 	.word	0x40004400
 8003644:	40004800 	.word	0x40004800
 8003648:	40004c00 	.word	0x40004c00
 800364c:	40005000 	.word	0x40005000
 8003650:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003654:	2300      	movs	r3, #0
 8003656:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	77bb      	strb	r3, [r7, #30]
        break;
 800365c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d073      	beq.n	800374c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	005a      	lsls	r2, r3, #1
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	085b      	lsrs	r3, r3, #1
 800366e:	441a      	add	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	fbb2 f3f3 	udiv	r3, r2, r3
 8003678:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	2b0f      	cmp	r3, #15
 800367e:	d916      	bls.n	80036ae <UART_SetConfig+0x2ee>
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003686:	d212      	bcs.n	80036ae <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	b29b      	uxth	r3, r3
 800368c:	f023 030f 	bic.w	r3, r3, #15
 8003690:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	085b      	lsrs	r3, r3, #1
 8003696:	b29b      	uxth	r3, r3
 8003698:	f003 0307 	and.w	r3, r3, #7
 800369c:	b29a      	uxth	r2, r3
 800369e:	89fb      	ldrh	r3, [r7, #14]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	89fa      	ldrh	r2, [r7, #14]
 80036aa:	60da      	str	r2, [r3, #12]
 80036ac:	e04e      	b.n	800374c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	77bb      	strb	r3, [r7, #30]
 80036b2:	e04b      	b.n	800374c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80036b4:	7ffb      	ldrb	r3, [r7, #31]
 80036b6:	2b08      	cmp	r3, #8
 80036b8:	d827      	bhi.n	800370a <UART_SetConfig+0x34a>
 80036ba:	a201      	add	r2, pc, #4	; (adr r2, 80036c0 <UART_SetConfig+0x300>)
 80036bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c0:	080036e5 	.word	0x080036e5
 80036c4:	080036ed 	.word	0x080036ed
 80036c8:	080036f5 	.word	0x080036f5
 80036cc:	0800370b 	.word	0x0800370b
 80036d0:	080036fb 	.word	0x080036fb
 80036d4:	0800370b 	.word	0x0800370b
 80036d8:	0800370b 	.word	0x0800370b
 80036dc:	0800370b 	.word	0x0800370b
 80036e0:	08003703 	.word	0x08003703
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036e4:	f7fe ffe8 	bl	80026b8 <HAL_RCC_GetPCLK1Freq>
 80036e8:	61b8      	str	r0, [r7, #24]
        break;
 80036ea:	e013      	b.n	8003714 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036ec:	f7ff f806 	bl	80026fc <HAL_RCC_GetPCLK2Freq>
 80036f0:	61b8      	str	r0, [r7, #24]
        break;
 80036f2:	e00f      	b.n	8003714 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036f4:	4b1b      	ldr	r3, [pc, #108]	; (8003764 <UART_SetConfig+0x3a4>)
 80036f6:	61bb      	str	r3, [r7, #24]
        break;
 80036f8:	e00c      	b.n	8003714 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036fa:	f7fe ff67 	bl	80025cc <HAL_RCC_GetSysClockFreq>
 80036fe:	61b8      	str	r0, [r7, #24]
        break;
 8003700:	e008      	b.n	8003714 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003702:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003706:	61bb      	str	r3, [r7, #24]
        break;
 8003708:	e004      	b.n	8003714 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800370a:	2300      	movs	r3, #0
 800370c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	77bb      	strb	r3, [r7, #30]
        break;
 8003712:	bf00      	nop
    }

    if (pclk != 0U)
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d018      	beq.n	800374c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	085a      	lsrs	r2, r3, #1
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	441a      	add	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	fbb2 f3f3 	udiv	r3, r2, r3
 800372c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	2b0f      	cmp	r3, #15
 8003732:	d909      	bls.n	8003748 <UART_SetConfig+0x388>
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800373a:	d205      	bcs.n	8003748 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	b29a      	uxth	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	60da      	str	r2, [r3, #12]
 8003746:	e001      	b.n	800374c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003758:	7fbb      	ldrb	r3, [r7, #30]
}
 800375a:	4618      	mov	r0, r3
 800375c:	3720      	adds	r7, #32
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	007a1200 	.word	0x007a1200

08003768 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	f003 0301 	and.w	r3, r3, #1
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00a      	beq.n	8003792 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	430a      	orrs	r2, r1
 8003790:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00a      	beq.n	80037b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	430a      	orrs	r2, r1
 80037b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00a      	beq.n	80037d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00a      	beq.n	80037f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	430a      	orrs	r2, r1
 80037f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fc:	f003 0310 	and.w	r3, r3, #16
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00a      	beq.n	800381a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	430a      	orrs	r2, r1
 8003818:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	f003 0320 	and.w	r3, r3, #32
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00a      	beq.n	800383c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	430a      	orrs	r2, r1
 800383a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003844:	2b00      	cmp	r3, #0
 8003846:	d01a      	beq.n	800387e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	430a      	orrs	r2, r1
 800385c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003866:	d10a      	bne.n	800387e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	430a      	orrs	r2, r1
 800387c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00a      	beq.n	80038a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	605a      	str	r2, [r3, #4]
  }
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b098      	sub	sp, #96	; 0x60
 80038b0:	af02      	add	r7, sp, #8
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80038bc:	f7fd f906 	bl	8000acc <HAL_GetTick>
 80038c0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0308 	and.w	r3, r3, #8
 80038cc:	2b08      	cmp	r3, #8
 80038ce:	d12e      	bne.n	800392e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038d4:	9300      	str	r3, [sp, #0]
 80038d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038d8:	2200      	movs	r2, #0
 80038da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f88c 	bl	80039fc <UART_WaitOnFlagUntilTimeout>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d021      	beq.n	800392e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f2:	e853 3f00 	ldrex	r3, [r3]
 80038f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80038f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038fe:	653b      	str	r3, [r7, #80]	; 0x50
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	461a      	mov	r2, r3
 8003906:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003908:	647b      	str	r3, [r7, #68]	; 0x44
 800390a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800390c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800390e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003910:	e841 2300 	strex	r3, r2, [r1]
 8003914:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1e6      	bne.n	80038ea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2220      	movs	r2, #32
 8003920:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e062      	b.n	80039f4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	2b04      	cmp	r3, #4
 800393a:	d149      	bne.n	80039d0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800393c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003944:	2200      	movs	r2, #0
 8003946:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 f856 	bl	80039fc <UART_WaitOnFlagUntilTimeout>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d03c      	beq.n	80039d0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395e:	e853 3f00 	ldrex	r3, [r3]
 8003962:	623b      	str	r3, [r7, #32]
   return(result);
 8003964:	6a3b      	ldr	r3, [r7, #32]
 8003966:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800396a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	461a      	mov	r2, r3
 8003972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003974:	633b      	str	r3, [r7, #48]	; 0x30
 8003976:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003978:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800397a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800397c:	e841 2300 	strex	r3, r2, [r1]
 8003980:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1e6      	bne.n	8003956 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	3308      	adds	r3, #8
 800398e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	e853 3f00 	ldrex	r3, [r3]
 8003996:	60fb      	str	r3, [r7, #12]
   return(result);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f023 0301 	bic.w	r3, r3, #1
 800399e:	64bb      	str	r3, [r7, #72]	; 0x48
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	3308      	adds	r3, #8
 80039a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039a8:	61fa      	str	r2, [r7, #28]
 80039aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ac:	69b9      	ldr	r1, [r7, #24]
 80039ae:	69fa      	ldr	r2, [r7, #28]
 80039b0:	e841 2300 	strex	r3, r2, [r1]
 80039b4:	617b      	str	r3, [r7, #20]
   return(result);
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1e5      	bne.n	8003988 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2220      	movs	r2, #32
 80039c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e011      	b.n	80039f4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2220      	movs	r2, #32
 80039d4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2220      	movs	r2, #32
 80039da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3758      	adds	r7, #88	; 0x58
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	603b      	str	r3, [r7, #0]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a0c:	e049      	b.n	8003aa2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a14:	d045      	beq.n	8003aa2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a16:	f7fd f859 	bl	8000acc <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d302      	bcc.n	8003a2c <UART_WaitOnFlagUntilTimeout+0x30>
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e048      	b.n	8003ac2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0304 	and.w	r3, r3, #4
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d031      	beq.n	8003aa2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	69db      	ldr	r3, [r3, #28]
 8003a44:	f003 0308 	and.w	r3, r3, #8
 8003a48:	2b08      	cmp	r3, #8
 8003a4a:	d110      	bne.n	8003a6e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2208      	movs	r2, #8
 8003a52:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f000 f8ff 	bl	8003c58 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2208      	movs	r2, #8
 8003a5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e029      	b.n	8003ac2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	69db      	ldr	r3, [r3, #28]
 8003a74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a7c:	d111      	bne.n	8003aa2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f000 f8e5 	bl	8003c58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2220      	movs	r2, #32
 8003a92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e00f      	b.n	8003ac2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	69da      	ldr	r2, [r3, #28]
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	68ba      	ldr	r2, [r7, #8]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	bf0c      	ite	eq
 8003ab2:	2301      	moveq	r3, #1
 8003ab4:	2300      	movne	r3, #0
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	461a      	mov	r2, r3
 8003aba:	79fb      	ldrb	r3, [r7, #7]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d0a6      	beq.n	8003a0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
	...

08003acc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b097      	sub	sp, #92	; 0x5c
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	68ba      	ldr	r2, [r7, #8]
 8003ade:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	88fa      	ldrh	r2, [r7, #6]
 8003ae4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	88fa      	ldrh	r2, [r7, #6]
 8003aec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003afe:	d10e      	bne.n	8003b1e <UART_Start_Receive_IT+0x52>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d105      	bne.n	8003b14 <UART_Start_Receive_IT+0x48>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003b0e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b12:	e02d      	b.n	8003b70 <UART_Start_Receive_IT+0xa4>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	22ff      	movs	r2, #255	; 0xff
 8003b18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b1c:	e028      	b.n	8003b70 <UART_Start_Receive_IT+0xa4>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10d      	bne.n	8003b42 <UART_Start_Receive_IT+0x76>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d104      	bne.n	8003b38 <UART_Start_Receive_IT+0x6c>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	22ff      	movs	r2, #255	; 0xff
 8003b32:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b36:	e01b      	b.n	8003b70 <UART_Start_Receive_IT+0xa4>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	227f      	movs	r2, #127	; 0x7f
 8003b3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b40:	e016      	b.n	8003b70 <UART_Start_Receive_IT+0xa4>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b4a:	d10d      	bne.n	8003b68 <UART_Start_Receive_IT+0x9c>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d104      	bne.n	8003b5e <UART_Start_Receive_IT+0x92>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	227f      	movs	r2, #127	; 0x7f
 8003b58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b5c:	e008      	b.n	8003b70 <UART_Start_Receive_IT+0xa4>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	223f      	movs	r2, #63	; 0x3f
 8003b62:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b66:	e003      	b.n	8003b70 <UART_Start_Receive_IT+0xa4>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2222      	movs	r2, #34	; 0x22
 8003b7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	3308      	adds	r3, #8
 8003b86:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b8a:	e853 3f00 	ldrex	r3, [r3]
 8003b8e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b92:	f043 0301 	orr.w	r3, r3, #1
 8003b96:	657b      	str	r3, [r7, #84]	; 0x54
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	3308      	adds	r3, #8
 8003b9e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003ba0:	64ba      	str	r2, [r7, #72]	; 0x48
 8003ba2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003ba6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ba8:	e841 2300 	strex	r3, r2, [r1]
 8003bac:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003bae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1e5      	bne.n	8003b80 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bbc:	d107      	bne.n	8003bce <UART_Start_Receive_IT+0x102>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d103      	bne.n	8003bce <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	4a21      	ldr	r2, [pc, #132]	; (8003c50 <UART_Start_Receive_IT+0x184>)
 8003bca:	669a      	str	r2, [r3, #104]	; 0x68
 8003bcc:	e002      	b.n	8003bd4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	4a20      	ldr	r2, [pc, #128]	; (8003c54 <UART_Start_Receive_IT+0x188>)
 8003bd2:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d019      	beq.n	8003c10 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be4:	e853 3f00 	ldrex	r3, [r3]
 8003be8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bec:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003bf0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bfa:	637b      	str	r3, [r7, #52]	; 0x34
 8003bfc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c02:	e841 2300 	strex	r3, r2, [r1]
 8003c06:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1e6      	bne.n	8003bdc <UART_Start_Receive_IT+0x110>
 8003c0e:	e018      	b.n	8003c42 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	e853 3f00 	ldrex	r3, [r3]
 8003c1c:	613b      	str	r3, [r7, #16]
   return(result);
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	f043 0320 	orr.w	r3, r3, #32
 8003c24:	653b      	str	r3, [r7, #80]	; 0x50
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c2e:	623b      	str	r3, [r7, #32]
 8003c30:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c32:	69f9      	ldr	r1, [r7, #28]
 8003c34:	6a3a      	ldr	r2, [r7, #32]
 8003c36:	e841 2300 	strex	r3, r2, [r1]
 8003c3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1e6      	bne.n	8003c10 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	375c      	adds	r7, #92	; 0x5c
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr
 8003c50:	08003f49 	.word	0x08003f49
 8003c54:	08003da1 	.word	0x08003da1

08003c58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b095      	sub	sp, #84	; 0x54
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c68:	e853 3f00 	ldrex	r3, [r3]
 8003c6c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c7e:	643b      	str	r3, [r7, #64]	; 0x40
 8003c80:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c86:	e841 2300 	strex	r3, r2, [r1]
 8003c8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1e6      	bne.n	8003c60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	3308      	adds	r3, #8
 8003c98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9a:	6a3b      	ldr	r3, [r7, #32]
 8003c9c:	e853 3f00 	ldrex	r3, [r3]
 8003ca0:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	f023 0301 	bic.w	r3, r3, #1
 8003ca8:	64bb      	str	r3, [r7, #72]	; 0x48
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	3308      	adds	r3, #8
 8003cb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cb4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cba:	e841 2300 	strex	r3, r2, [r1]
 8003cbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1e5      	bne.n	8003c92 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d118      	bne.n	8003d00 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	e853 3f00 	ldrex	r3, [r3]
 8003cda:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	f023 0310 	bic.w	r3, r3, #16
 8003ce2:	647b      	str	r3, [r7, #68]	; 0x44
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	461a      	mov	r2, r3
 8003cea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cec:	61bb      	str	r3, [r7, #24]
 8003cee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf0:	6979      	ldr	r1, [r7, #20]
 8003cf2:	69ba      	ldr	r2, [r7, #24]
 8003cf4:	e841 2300 	strex	r3, r2, [r1]
 8003cf8:	613b      	str	r3, [r7, #16]
   return(result);
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1e6      	bne.n	8003cce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2220      	movs	r2, #32
 8003d04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003d14:	bf00      	nop
 8003d16:	3754      	adds	r7, #84	; 0x54
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f7ff fb28 	bl	8003394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d44:	bf00      	nop
 8003d46:	3710      	adds	r7, #16
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b088      	sub	sp, #32
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	e853 3f00 	ldrex	r3, [r3]
 8003d60:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d68:	61fb      	str	r3, [r7, #28]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	461a      	mov	r2, r3
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	61bb      	str	r3, [r7, #24]
 8003d74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d76:	6979      	ldr	r1, [r7, #20]
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	e841 2300 	strex	r3, r2, [r1]
 8003d7e:	613b      	str	r3, [r7, #16]
   return(result);
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1e6      	bne.n	8003d54 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2220      	movs	r2, #32
 8003d8a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f7ff faf4 	bl	8003380 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d98:	bf00      	nop
 8003d9a:	3720      	adds	r7, #32
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b09c      	sub	sp, #112	; 0x70
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003dae:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003db8:	2b22      	cmp	r3, #34	; 0x22
 8003dba:	f040 80b9 	bne.w	8003f30 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003dc4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003dc8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003dcc:	b2d9      	uxtb	r1, r3
 8003dce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003dd2:	b2da      	uxtb	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd8:	400a      	ands	r2, r1
 8003dda:	b2d2      	uxtb	r2, r2
 8003ddc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de2:	1c5a      	adds	r2, r3, #1
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	3b01      	subs	r3, #1
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f040 809c 	bne.w	8003f40 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e10:	e853 3f00 	ldrex	r3, [r3]
 8003e14:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003e16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	461a      	mov	r2, r3
 8003e24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e26:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e28:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e2a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e2e:	e841 2300 	strex	r3, r2, [r1]
 8003e32:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1e6      	bne.n	8003e08 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	3308      	adds	r3, #8
 8003e40:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e44:	e853 3f00 	ldrex	r3, [r3]
 8003e48:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e4c:	f023 0301 	bic.w	r3, r3, #1
 8003e50:	667b      	str	r3, [r7, #100]	; 0x64
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	3308      	adds	r3, #8
 8003e58:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003e5a:	647a      	str	r2, [r7, #68]	; 0x44
 8003e5c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e62:	e841 2300 	strex	r3, r2, [r1]
 8003e66:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1e5      	bne.n	8003e3a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2220      	movs	r2, #32
 8003e72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d018      	beq.n	8003ec2 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e98:	e853 3f00 	ldrex	r3, [r3]
 8003e9c:	623b      	str	r3, [r7, #32]
   return(result);
 8003e9e:	6a3b      	ldr	r3, [r7, #32]
 8003ea0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ea4:	663b      	str	r3, [r7, #96]	; 0x60
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003eae:	633b      	str	r3, [r7, #48]	; 0x30
 8003eb0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003eb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eb6:	e841 2300 	strex	r3, r2, [r1]
 8003eba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1e6      	bne.n	8003e90 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d12e      	bne.n	8003f28 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	e853 3f00 	ldrex	r3, [r3]
 8003edc:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f023 0310 	bic.w	r3, r3, #16
 8003ee4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	461a      	mov	r2, r3
 8003eec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eee:	61fb      	str	r3, [r7, #28]
 8003ef0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef2:	69b9      	ldr	r1, [r7, #24]
 8003ef4:	69fa      	ldr	r2, [r7, #28]
 8003ef6:	e841 2300 	strex	r3, r2, [r1]
 8003efa:	617b      	str	r3, [r7, #20]
   return(result);
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1e6      	bne.n	8003ed0 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	69db      	ldr	r3, [r3, #28]
 8003f08:	f003 0310 	and.w	r3, r3, #16
 8003f0c:	2b10      	cmp	r3, #16
 8003f0e:	d103      	bne.n	8003f18 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2210      	movs	r2, #16
 8003f16:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003f1e:	4619      	mov	r1, r3
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f7ff fa41 	bl	80033a8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003f26:	e00b      	b.n	8003f40 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f7fc f9b1 	bl	8000290 <HAL_UART_RxCpltCallback>
}
 8003f2e:	e007      	b.n	8003f40 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	699a      	ldr	r2, [r3, #24]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f042 0208 	orr.w	r2, r2, #8
 8003f3e:	619a      	str	r2, [r3, #24]
}
 8003f40:	bf00      	nop
 8003f42:	3770      	adds	r7, #112	; 0x70
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b09c      	sub	sp, #112	; 0x70
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003f56:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f60:	2b22      	cmp	r3, #34	; 0x22
 8003f62:	f040 80b9 	bne.w	80040d8 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003f6c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f74:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003f76:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8003f7a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003f7e:	4013      	ands	r3, r2
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f84:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f8a:	1c9a      	adds	r2, r3, #2
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f040 809c 	bne.w	80040e8 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fb8:	e853 3f00 	ldrex	r3, [r3]
 8003fbc:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003fbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fc4:	667b      	str	r3, [r7, #100]	; 0x64
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fce:	657b      	str	r3, [r7, #84]	; 0x54
 8003fd0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003fd4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003fd6:	e841 2300 	strex	r3, r2, [r1]
 8003fda:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003fdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1e6      	bne.n	8003fb0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	3308      	adds	r3, #8
 8003fe8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fec:	e853 3f00 	ldrex	r3, [r3]
 8003ff0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff4:	f023 0301 	bic.w	r3, r3, #1
 8003ff8:	663b      	str	r3, [r7, #96]	; 0x60
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	3308      	adds	r3, #8
 8004000:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004002:	643a      	str	r2, [r7, #64]	; 0x40
 8004004:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004006:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004008:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800400a:	e841 2300 	strex	r3, r2, [r1]
 800400e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1e5      	bne.n	8003fe2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2220      	movs	r2, #32
 800401a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d018      	beq.n	800406a <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403e:	6a3b      	ldr	r3, [r7, #32]
 8004040:	e853 3f00 	ldrex	r3, [r3]
 8004044:	61fb      	str	r3, [r7, #28]
   return(result);
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800404c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	461a      	mov	r2, r3
 8004054:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004056:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004058:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800405c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800405e:	e841 2300 	strex	r3, r2, [r1]
 8004062:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1e6      	bne.n	8004038 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800406e:	2b01      	cmp	r3, #1
 8004070:	d12e      	bne.n	80040d0 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	e853 3f00 	ldrex	r3, [r3]
 8004084:	60bb      	str	r3, [r7, #8]
   return(result);
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	f023 0310 	bic.w	r3, r3, #16
 800408c:	65bb      	str	r3, [r7, #88]	; 0x58
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	461a      	mov	r2, r3
 8004094:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004096:	61bb      	str	r3, [r7, #24]
 8004098:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409a:	6979      	ldr	r1, [r7, #20]
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	e841 2300 	strex	r3, r2, [r1]
 80040a2:	613b      	str	r3, [r7, #16]
   return(result);
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1e6      	bne.n	8004078 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	69db      	ldr	r3, [r3, #28]
 80040b0:	f003 0310 	and.w	r3, r3, #16
 80040b4:	2b10      	cmp	r3, #16
 80040b6:	d103      	bne.n	80040c0 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2210      	movs	r2, #16
 80040be:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80040c6:	4619      	mov	r1, r3
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f7ff f96d 	bl	80033a8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80040ce:	e00b      	b.n	80040e8 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f7fc f8dd 	bl	8000290 <HAL_UART_RxCpltCallback>
}
 80040d6:	e007      	b.n	80040e8 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	699a      	ldr	r2, [r3, #24]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f042 0208 	orr.w	r2, r2, #8
 80040e6:	619a      	str	r2, [r3, #24]
}
 80040e8:	bf00      	nop
 80040ea:	3770      	adds	r7, #112	; 0x70
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <__errno>:
 8004104:	4b01      	ldr	r3, [pc, #4]	; (800410c <__errno+0x8>)
 8004106:	6818      	ldr	r0, [r3, #0]
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	2000001c 	.word	0x2000001c

08004110 <__libc_init_array>:
 8004110:	b570      	push	{r4, r5, r6, lr}
 8004112:	4d0d      	ldr	r5, [pc, #52]	; (8004148 <__libc_init_array+0x38>)
 8004114:	4c0d      	ldr	r4, [pc, #52]	; (800414c <__libc_init_array+0x3c>)
 8004116:	1b64      	subs	r4, r4, r5
 8004118:	10a4      	asrs	r4, r4, #2
 800411a:	2600      	movs	r6, #0
 800411c:	42a6      	cmp	r6, r4
 800411e:	d109      	bne.n	8004134 <__libc_init_array+0x24>
 8004120:	4d0b      	ldr	r5, [pc, #44]	; (8004150 <__libc_init_array+0x40>)
 8004122:	4c0c      	ldr	r4, [pc, #48]	; (8004154 <__libc_init_array+0x44>)
 8004124:	f000 fc8e 	bl	8004a44 <_init>
 8004128:	1b64      	subs	r4, r4, r5
 800412a:	10a4      	asrs	r4, r4, #2
 800412c:	2600      	movs	r6, #0
 800412e:	42a6      	cmp	r6, r4
 8004130:	d105      	bne.n	800413e <__libc_init_array+0x2e>
 8004132:	bd70      	pop	{r4, r5, r6, pc}
 8004134:	f855 3b04 	ldr.w	r3, [r5], #4
 8004138:	4798      	blx	r3
 800413a:	3601      	adds	r6, #1
 800413c:	e7ee      	b.n	800411c <__libc_init_array+0xc>
 800413e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004142:	4798      	blx	r3
 8004144:	3601      	adds	r6, #1
 8004146:	e7f2      	b.n	800412e <__libc_init_array+0x1e>
 8004148:	08004acc 	.word	0x08004acc
 800414c:	08004acc 	.word	0x08004acc
 8004150:	08004acc 	.word	0x08004acc
 8004154:	08004ad0 	.word	0x08004ad0

08004158 <memset>:
 8004158:	4402      	add	r2, r0
 800415a:	4603      	mov	r3, r0
 800415c:	4293      	cmp	r3, r2
 800415e:	d100      	bne.n	8004162 <memset+0xa>
 8004160:	4770      	bx	lr
 8004162:	f803 1b01 	strb.w	r1, [r3], #1
 8004166:	e7f9      	b.n	800415c <memset+0x4>

08004168 <siprintf>:
 8004168:	b40e      	push	{r1, r2, r3}
 800416a:	b500      	push	{lr}
 800416c:	b09c      	sub	sp, #112	; 0x70
 800416e:	ab1d      	add	r3, sp, #116	; 0x74
 8004170:	9002      	str	r0, [sp, #8]
 8004172:	9006      	str	r0, [sp, #24]
 8004174:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004178:	4809      	ldr	r0, [pc, #36]	; (80041a0 <siprintf+0x38>)
 800417a:	9107      	str	r1, [sp, #28]
 800417c:	9104      	str	r1, [sp, #16]
 800417e:	4909      	ldr	r1, [pc, #36]	; (80041a4 <siprintf+0x3c>)
 8004180:	f853 2b04 	ldr.w	r2, [r3], #4
 8004184:	9105      	str	r1, [sp, #20]
 8004186:	6800      	ldr	r0, [r0, #0]
 8004188:	9301      	str	r3, [sp, #4]
 800418a:	a902      	add	r1, sp, #8
 800418c:	f000 f868 	bl	8004260 <_svfiprintf_r>
 8004190:	9b02      	ldr	r3, [sp, #8]
 8004192:	2200      	movs	r2, #0
 8004194:	701a      	strb	r2, [r3, #0]
 8004196:	b01c      	add	sp, #112	; 0x70
 8004198:	f85d eb04 	ldr.w	lr, [sp], #4
 800419c:	b003      	add	sp, #12
 800419e:	4770      	bx	lr
 80041a0:	2000001c 	.word	0x2000001c
 80041a4:	ffff0208 	.word	0xffff0208

080041a8 <__ssputs_r>:
 80041a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041ac:	688e      	ldr	r6, [r1, #8]
 80041ae:	429e      	cmp	r6, r3
 80041b0:	4682      	mov	sl, r0
 80041b2:	460c      	mov	r4, r1
 80041b4:	4690      	mov	r8, r2
 80041b6:	461f      	mov	r7, r3
 80041b8:	d838      	bhi.n	800422c <__ssputs_r+0x84>
 80041ba:	898a      	ldrh	r2, [r1, #12]
 80041bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80041c0:	d032      	beq.n	8004228 <__ssputs_r+0x80>
 80041c2:	6825      	ldr	r5, [r4, #0]
 80041c4:	6909      	ldr	r1, [r1, #16]
 80041c6:	eba5 0901 	sub.w	r9, r5, r1
 80041ca:	6965      	ldr	r5, [r4, #20]
 80041cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80041d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80041d4:	3301      	adds	r3, #1
 80041d6:	444b      	add	r3, r9
 80041d8:	106d      	asrs	r5, r5, #1
 80041da:	429d      	cmp	r5, r3
 80041dc:	bf38      	it	cc
 80041de:	461d      	movcc	r5, r3
 80041e0:	0553      	lsls	r3, r2, #21
 80041e2:	d531      	bpl.n	8004248 <__ssputs_r+0xa0>
 80041e4:	4629      	mov	r1, r5
 80041e6:	f000 fb63 	bl	80048b0 <_malloc_r>
 80041ea:	4606      	mov	r6, r0
 80041ec:	b950      	cbnz	r0, 8004204 <__ssputs_r+0x5c>
 80041ee:	230c      	movs	r3, #12
 80041f0:	f8ca 3000 	str.w	r3, [sl]
 80041f4:	89a3      	ldrh	r3, [r4, #12]
 80041f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041fa:	81a3      	strh	r3, [r4, #12]
 80041fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004204:	6921      	ldr	r1, [r4, #16]
 8004206:	464a      	mov	r2, r9
 8004208:	f000 fabe 	bl	8004788 <memcpy>
 800420c:	89a3      	ldrh	r3, [r4, #12]
 800420e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004212:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004216:	81a3      	strh	r3, [r4, #12]
 8004218:	6126      	str	r6, [r4, #16]
 800421a:	6165      	str	r5, [r4, #20]
 800421c:	444e      	add	r6, r9
 800421e:	eba5 0509 	sub.w	r5, r5, r9
 8004222:	6026      	str	r6, [r4, #0]
 8004224:	60a5      	str	r5, [r4, #8]
 8004226:	463e      	mov	r6, r7
 8004228:	42be      	cmp	r6, r7
 800422a:	d900      	bls.n	800422e <__ssputs_r+0x86>
 800422c:	463e      	mov	r6, r7
 800422e:	6820      	ldr	r0, [r4, #0]
 8004230:	4632      	mov	r2, r6
 8004232:	4641      	mov	r1, r8
 8004234:	f000 fab6 	bl	80047a4 <memmove>
 8004238:	68a3      	ldr	r3, [r4, #8]
 800423a:	1b9b      	subs	r3, r3, r6
 800423c:	60a3      	str	r3, [r4, #8]
 800423e:	6823      	ldr	r3, [r4, #0]
 8004240:	4433      	add	r3, r6
 8004242:	6023      	str	r3, [r4, #0]
 8004244:	2000      	movs	r0, #0
 8004246:	e7db      	b.n	8004200 <__ssputs_r+0x58>
 8004248:	462a      	mov	r2, r5
 800424a:	f000 fba5 	bl	8004998 <_realloc_r>
 800424e:	4606      	mov	r6, r0
 8004250:	2800      	cmp	r0, #0
 8004252:	d1e1      	bne.n	8004218 <__ssputs_r+0x70>
 8004254:	6921      	ldr	r1, [r4, #16]
 8004256:	4650      	mov	r0, sl
 8004258:	f000 fabe 	bl	80047d8 <_free_r>
 800425c:	e7c7      	b.n	80041ee <__ssputs_r+0x46>
	...

08004260 <_svfiprintf_r>:
 8004260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004264:	4698      	mov	r8, r3
 8004266:	898b      	ldrh	r3, [r1, #12]
 8004268:	061b      	lsls	r3, r3, #24
 800426a:	b09d      	sub	sp, #116	; 0x74
 800426c:	4607      	mov	r7, r0
 800426e:	460d      	mov	r5, r1
 8004270:	4614      	mov	r4, r2
 8004272:	d50e      	bpl.n	8004292 <_svfiprintf_r+0x32>
 8004274:	690b      	ldr	r3, [r1, #16]
 8004276:	b963      	cbnz	r3, 8004292 <_svfiprintf_r+0x32>
 8004278:	2140      	movs	r1, #64	; 0x40
 800427a:	f000 fb19 	bl	80048b0 <_malloc_r>
 800427e:	6028      	str	r0, [r5, #0]
 8004280:	6128      	str	r0, [r5, #16]
 8004282:	b920      	cbnz	r0, 800428e <_svfiprintf_r+0x2e>
 8004284:	230c      	movs	r3, #12
 8004286:	603b      	str	r3, [r7, #0]
 8004288:	f04f 30ff 	mov.w	r0, #4294967295
 800428c:	e0d1      	b.n	8004432 <_svfiprintf_r+0x1d2>
 800428e:	2340      	movs	r3, #64	; 0x40
 8004290:	616b      	str	r3, [r5, #20]
 8004292:	2300      	movs	r3, #0
 8004294:	9309      	str	r3, [sp, #36]	; 0x24
 8004296:	2320      	movs	r3, #32
 8004298:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800429c:	f8cd 800c 	str.w	r8, [sp, #12]
 80042a0:	2330      	movs	r3, #48	; 0x30
 80042a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800444c <_svfiprintf_r+0x1ec>
 80042a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80042aa:	f04f 0901 	mov.w	r9, #1
 80042ae:	4623      	mov	r3, r4
 80042b0:	469a      	mov	sl, r3
 80042b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042b6:	b10a      	cbz	r2, 80042bc <_svfiprintf_r+0x5c>
 80042b8:	2a25      	cmp	r2, #37	; 0x25
 80042ba:	d1f9      	bne.n	80042b0 <_svfiprintf_r+0x50>
 80042bc:	ebba 0b04 	subs.w	fp, sl, r4
 80042c0:	d00b      	beq.n	80042da <_svfiprintf_r+0x7a>
 80042c2:	465b      	mov	r3, fp
 80042c4:	4622      	mov	r2, r4
 80042c6:	4629      	mov	r1, r5
 80042c8:	4638      	mov	r0, r7
 80042ca:	f7ff ff6d 	bl	80041a8 <__ssputs_r>
 80042ce:	3001      	adds	r0, #1
 80042d0:	f000 80aa 	beq.w	8004428 <_svfiprintf_r+0x1c8>
 80042d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042d6:	445a      	add	r2, fp
 80042d8:	9209      	str	r2, [sp, #36]	; 0x24
 80042da:	f89a 3000 	ldrb.w	r3, [sl]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f000 80a2 	beq.w	8004428 <_svfiprintf_r+0x1c8>
 80042e4:	2300      	movs	r3, #0
 80042e6:	f04f 32ff 	mov.w	r2, #4294967295
 80042ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042ee:	f10a 0a01 	add.w	sl, sl, #1
 80042f2:	9304      	str	r3, [sp, #16]
 80042f4:	9307      	str	r3, [sp, #28]
 80042f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80042fa:	931a      	str	r3, [sp, #104]	; 0x68
 80042fc:	4654      	mov	r4, sl
 80042fe:	2205      	movs	r2, #5
 8004300:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004304:	4851      	ldr	r0, [pc, #324]	; (800444c <_svfiprintf_r+0x1ec>)
 8004306:	f7fb ff73 	bl	80001f0 <memchr>
 800430a:	9a04      	ldr	r2, [sp, #16]
 800430c:	b9d8      	cbnz	r0, 8004346 <_svfiprintf_r+0xe6>
 800430e:	06d0      	lsls	r0, r2, #27
 8004310:	bf44      	itt	mi
 8004312:	2320      	movmi	r3, #32
 8004314:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004318:	0711      	lsls	r1, r2, #28
 800431a:	bf44      	itt	mi
 800431c:	232b      	movmi	r3, #43	; 0x2b
 800431e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004322:	f89a 3000 	ldrb.w	r3, [sl]
 8004326:	2b2a      	cmp	r3, #42	; 0x2a
 8004328:	d015      	beq.n	8004356 <_svfiprintf_r+0xf6>
 800432a:	9a07      	ldr	r2, [sp, #28]
 800432c:	4654      	mov	r4, sl
 800432e:	2000      	movs	r0, #0
 8004330:	f04f 0c0a 	mov.w	ip, #10
 8004334:	4621      	mov	r1, r4
 8004336:	f811 3b01 	ldrb.w	r3, [r1], #1
 800433a:	3b30      	subs	r3, #48	; 0x30
 800433c:	2b09      	cmp	r3, #9
 800433e:	d94e      	bls.n	80043de <_svfiprintf_r+0x17e>
 8004340:	b1b0      	cbz	r0, 8004370 <_svfiprintf_r+0x110>
 8004342:	9207      	str	r2, [sp, #28]
 8004344:	e014      	b.n	8004370 <_svfiprintf_r+0x110>
 8004346:	eba0 0308 	sub.w	r3, r0, r8
 800434a:	fa09 f303 	lsl.w	r3, r9, r3
 800434e:	4313      	orrs	r3, r2
 8004350:	9304      	str	r3, [sp, #16]
 8004352:	46a2      	mov	sl, r4
 8004354:	e7d2      	b.n	80042fc <_svfiprintf_r+0x9c>
 8004356:	9b03      	ldr	r3, [sp, #12]
 8004358:	1d19      	adds	r1, r3, #4
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	9103      	str	r1, [sp, #12]
 800435e:	2b00      	cmp	r3, #0
 8004360:	bfbb      	ittet	lt
 8004362:	425b      	neglt	r3, r3
 8004364:	f042 0202 	orrlt.w	r2, r2, #2
 8004368:	9307      	strge	r3, [sp, #28]
 800436a:	9307      	strlt	r3, [sp, #28]
 800436c:	bfb8      	it	lt
 800436e:	9204      	strlt	r2, [sp, #16]
 8004370:	7823      	ldrb	r3, [r4, #0]
 8004372:	2b2e      	cmp	r3, #46	; 0x2e
 8004374:	d10c      	bne.n	8004390 <_svfiprintf_r+0x130>
 8004376:	7863      	ldrb	r3, [r4, #1]
 8004378:	2b2a      	cmp	r3, #42	; 0x2a
 800437a:	d135      	bne.n	80043e8 <_svfiprintf_r+0x188>
 800437c:	9b03      	ldr	r3, [sp, #12]
 800437e:	1d1a      	adds	r2, r3, #4
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	9203      	str	r2, [sp, #12]
 8004384:	2b00      	cmp	r3, #0
 8004386:	bfb8      	it	lt
 8004388:	f04f 33ff 	movlt.w	r3, #4294967295
 800438c:	3402      	adds	r4, #2
 800438e:	9305      	str	r3, [sp, #20]
 8004390:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800445c <_svfiprintf_r+0x1fc>
 8004394:	7821      	ldrb	r1, [r4, #0]
 8004396:	2203      	movs	r2, #3
 8004398:	4650      	mov	r0, sl
 800439a:	f7fb ff29 	bl	80001f0 <memchr>
 800439e:	b140      	cbz	r0, 80043b2 <_svfiprintf_r+0x152>
 80043a0:	2340      	movs	r3, #64	; 0x40
 80043a2:	eba0 000a 	sub.w	r0, r0, sl
 80043a6:	fa03 f000 	lsl.w	r0, r3, r0
 80043aa:	9b04      	ldr	r3, [sp, #16]
 80043ac:	4303      	orrs	r3, r0
 80043ae:	3401      	adds	r4, #1
 80043b0:	9304      	str	r3, [sp, #16]
 80043b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043b6:	4826      	ldr	r0, [pc, #152]	; (8004450 <_svfiprintf_r+0x1f0>)
 80043b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80043bc:	2206      	movs	r2, #6
 80043be:	f7fb ff17 	bl	80001f0 <memchr>
 80043c2:	2800      	cmp	r0, #0
 80043c4:	d038      	beq.n	8004438 <_svfiprintf_r+0x1d8>
 80043c6:	4b23      	ldr	r3, [pc, #140]	; (8004454 <_svfiprintf_r+0x1f4>)
 80043c8:	bb1b      	cbnz	r3, 8004412 <_svfiprintf_r+0x1b2>
 80043ca:	9b03      	ldr	r3, [sp, #12]
 80043cc:	3307      	adds	r3, #7
 80043ce:	f023 0307 	bic.w	r3, r3, #7
 80043d2:	3308      	adds	r3, #8
 80043d4:	9303      	str	r3, [sp, #12]
 80043d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043d8:	4433      	add	r3, r6
 80043da:	9309      	str	r3, [sp, #36]	; 0x24
 80043dc:	e767      	b.n	80042ae <_svfiprintf_r+0x4e>
 80043de:	fb0c 3202 	mla	r2, ip, r2, r3
 80043e2:	460c      	mov	r4, r1
 80043e4:	2001      	movs	r0, #1
 80043e6:	e7a5      	b.n	8004334 <_svfiprintf_r+0xd4>
 80043e8:	2300      	movs	r3, #0
 80043ea:	3401      	adds	r4, #1
 80043ec:	9305      	str	r3, [sp, #20]
 80043ee:	4619      	mov	r1, r3
 80043f0:	f04f 0c0a 	mov.w	ip, #10
 80043f4:	4620      	mov	r0, r4
 80043f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043fa:	3a30      	subs	r2, #48	; 0x30
 80043fc:	2a09      	cmp	r2, #9
 80043fe:	d903      	bls.n	8004408 <_svfiprintf_r+0x1a8>
 8004400:	2b00      	cmp	r3, #0
 8004402:	d0c5      	beq.n	8004390 <_svfiprintf_r+0x130>
 8004404:	9105      	str	r1, [sp, #20]
 8004406:	e7c3      	b.n	8004390 <_svfiprintf_r+0x130>
 8004408:	fb0c 2101 	mla	r1, ip, r1, r2
 800440c:	4604      	mov	r4, r0
 800440e:	2301      	movs	r3, #1
 8004410:	e7f0      	b.n	80043f4 <_svfiprintf_r+0x194>
 8004412:	ab03      	add	r3, sp, #12
 8004414:	9300      	str	r3, [sp, #0]
 8004416:	462a      	mov	r2, r5
 8004418:	4b0f      	ldr	r3, [pc, #60]	; (8004458 <_svfiprintf_r+0x1f8>)
 800441a:	a904      	add	r1, sp, #16
 800441c:	4638      	mov	r0, r7
 800441e:	f3af 8000 	nop.w
 8004422:	1c42      	adds	r2, r0, #1
 8004424:	4606      	mov	r6, r0
 8004426:	d1d6      	bne.n	80043d6 <_svfiprintf_r+0x176>
 8004428:	89ab      	ldrh	r3, [r5, #12]
 800442a:	065b      	lsls	r3, r3, #25
 800442c:	f53f af2c 	bmi.w	8004288 <_svfiprintf_r+0x28>
 8004430:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004432:	b01d      	add	sp, #116	; 0x74
 8004434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004438:	ab03      	add	r3, sp, #12
 800443a:	9300      	str	r3, [sp, #0]
 800443c:	462a      	mov	r2, r5
 800443e:	4b06      	ldr	r3, [pc, #24]	; (8004458 <_svfiprintf_r+0x1f8>)
 8004440:	a904      	add	r1, sp, #16
 8004442:	4638      	mov	r0, r7
 8004444:	f000 f87a 	bl	800453c <_printf_i>
 8004448:	e7eb      	b.n	8004422 <_svfiprintf_r+0x1c2>
 800444a:	bf00      	nop
 800444c:	08004a98 	.word	0x08004a98
 8004450:	08004aa2 	.word	0x08004aa2
 8004454:	00000000 	.word	0x00000000
 8004458:	080041a9 	.word	0x080041a9
 800445c:	08004a9e 	.word	0x08004a9e

08004460 <_printf_common>:
 8004460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004464:	4616      	mov	r6, r2
 8004466:	4699      	mov	r9, r3
 8004468:	688a      	ldr	r2, [r1, #8]
 800446a:	690b      	ldr	r3, [r1, #16]
 800446c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004470:	4293      	cmp	r3, r2
 8004472:	bfb8      	it	lt
 8004474:	4613      	movlt	r3, r2
 8004476:	6033      	str	r3, [r6, #0]
 8004478:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800447c:	4607      	mov	r7, r0
 800447e:	460c      	mov	r4, r1
 8004480:	b10a      	cbz	r2, 8004486 <_printf_common+0x26>
 8004482:	3301      	adds	r3, #1
 8004484:	6033      	str	r3, [r6, #0]
 8004486:	6823      	ldr	r3, [r4, #0]
 8004488:	0699      	lsls	r1, r3, #26
 800448a:	bf42      	ittt	mi
 800448c:	6833      	ldrmi	r3, [r6, #0]
 800448e:	3302      	addmi	r3, #2
 8004490:	6033      	strmi	r3, [r6, #0]
 8004492:	6825      	ldr	r5, [r4, #0]
 8004494:	f015 0506 	ands.w	r5, r5, #6
 8004498:	d106      	bne.n	80044a8 <_printf_common+0x48>
 800449a:	f104 0a19 	add.w	sl, r4, #25
 800449e:	68e3      	ldr	r3, [r4, #12]
 80044a0:	6832      	ldr	r2, [r6, #0]
 80044a2:	1a9b      	subs	r3, r3, r2
 80044a4:	42ab      	cmp	r3, r5
 80044a6:	dc26      	bgt.n	80044f6 <_printf_common+0x96>
 80044a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80044ac:	1e13      	subs	r3, r2, #0
 80044ae:	6822      	ldr	r2, [r4, #0]
 80044b0:	bf18      	it	ne
 80044b2:	2301      	movne	r3, #1
 80044b4:	0692      	lsls	r2, r2, #26
 80044b6:	d42b      	bmi.n	8004510 <_printf_common+0xb0>
 80044b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044bc:	4649      	mov	r1, r9
 80044be:	4638      	mov	r0, r7
 80044c0:	47c0      	blx	r8
 80044c2:	3001      	adds	r0, #1
 80044c4:	d01e      	beq.n	8004504 <_printf_common+0xa4>
 80044c6:	6823      	ldr	r3, [r4, #0]
 80044c8:	68e5      	ldr	r5, [r4, #12]
 80044ca:	6832      	ldr	r2, [r6, #0]
 80044cc:	f003 0306 	and.w	r3, r3, #6
 80044d0:	2b04      	cmp	r3, #4
 80044d2:	bf08      	it	eq
 80044d4:	1aad      	subeq	r5, r5, r2
 80044d6:	68a3      	ldr	r3, [r4, #8]
 80044d8:	6922      	ldr	r2, [r4, #16]
 80044da:	bf0c      	ite	eq
 80044dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044e0:	2500      	movne	r5, #0
 80044e2:	4293      	cmp	r3, r2
 80044e4:	bfc4      	itt	gt
 80044e6:	1a9b      	subgt	r3, r3, r2
 80044e8:	18ed      	addgt	r5, r5, r3
 80044ea:	2600      	movs	r6, #0
 80044ec:	341a      	adds	r4, #26
 80044ee:	42b5      	cmp	r5, r6
 80044f0:	d11a      	bne.n	8004528 <_printf_common+0xc8>
 80044f2:	2000      	movs	r0, #0
 80044f4:	e008      	b.n	8004508 <_printf_common+0xa8>
 80044f6:	2301      	movs	r3, #1
 80044f8:	4652      	mov	r2, sl
 80044fa:	4649      	mov	r1, r9
 80044fc:	4638      	mov	r0, r7
 80044fe:	47c0      	blx	r8
 8004500:	3001      	adds	r0, #1
 8004502:	d103      	bne.n	800450c <_printf_common+0xac>
 8004504:	f04f 30ff 	mov.w	r0, #4294967295
 8004508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800450c:	3501      	adds	r5, #1
 800450e:	e7c6      	b.n	800449e <_printf_common+0x3e>
 8004510:	18e1      	adds	r1, r4, r3
 8004512:	1c5a      	adds	r2, r3, #1
 8004514:	2030      	movs	r0, #48	; 0x30
 8004516:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800451a:	4422      	add	r2, r4
 800451c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004520:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004524:	3302      	adds	r3, #2
 8004526:	e7c7      	b.n	80044b8 <_printf_common+0x58>
 8004528:	2301      	movs	r3, #1
 800452a:	4622      	mov	r2, r4
 800452c:	4649      	mov	r1, r9
 800452e:	4638      	mov	r0, r7
 8004530:	47c0      	blx	r8
 8004532:	3001      	adds	r0, #1
 8004534:	d0e6      	beq.n	8004504 <_printf_common+0xa4>
 8004536:	3601      	adds	r6, #1
 8004538:	e7d9      	b.n	80044ee <_printf_common+0x8e>
	...

0800453c <_printf_i>:
 800453c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004540:	7e0f      	ldrb	r7, [r1, #24]
 8004542:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004544:	2f78      	cmp	r7, #120	; 0x78
 8004546:	4691      	mov	r9, r2
 8004548:	4680      	mov	r8, r0
 800454a:	460c      	mov	r4, r1
 800454c:	469a      	mov	sl, r3
 800454e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004552:	d807      	bhi.n	8004564 <_printf_i+0x28>
 8004554:	2f62      	cmp	r7, #98	; 0x62
 8004556:	d80a      	bhi.n	800456e <_printf_i+0x32>
 8004558:	2f00      	cmp	r7, #0
 800455a:	f000 80d8 	beq.w	800470e <_printf_i+0x1d2>
 800455e:	2f58      	cmp	r7, #88	; 0x58
 8004560:	f000 80a3 	beq.w	80046aa <_printf_i+0x16e>
 8004564:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004568:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800456c:	e03a      	b.n	80045e4 <_printf_i+0xa8>
 800456e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004572:	2b15      	cmp	r3, #21
 8004574:	d8f6      	bhi.n	8004564 <_printf_i+0x28>
 8004576:	a101      	add	r1, pc, #4	; (adr r1, 800457c <_printf_i+0x40>)
 8004578:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800457c:	080045d5 	.word	0x080045d5
 8004580:	080045e9 	.word	0x080045e9
 8004584:	08004565 	.word	0x08004565
 8004588:	08004565 	.word	0x08004565
 800458c:	08004565 	.word	0x08004565
 8004590:	08004565 	.word	0x08004565
 8004594:	080045e9 	.word	0x080045e9
 8004598:	08004565 	.word	0x08004565
 800459c:	08004565 	.word	0x08004565
 80045a0:	08004565 	.word	0x08004565
 80045a4:	08004565 	.word	0x08004565
 80045a8:	080046f5 	.word	0x080046f5
 80045ac:	08004619 	.word	0x08004619
 80045b0:	080046d7 	.word	0x080046d7
 80045b4:	08004565 	.word	0x08004565
 80045b8:	08004565 	.word	0x08004565
 80045bc:	08004717 	.word	0x08004717
 80045c0:	08004565 	.word	0x08004565
 80045c4:	08004619 	.word	0x08004619
 80045c8:	08004565 	.word	0x08004565
 80045cc:	08004565 	.word	0x08004565
 80045d0:	080046df 	.word	0x080046df
 80045d4:	682b      	ldr	r3, [r5, #0]
 80045d6:	1d1a      	adds	r2, r3, #4
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	602a      	str	r2, [r5, #0]
 80045dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045e4:	2301      	movs	r3, #1
 80045e6:	e0a3      	b.n	8004730 <_printf_i+0x1f4>
 80045e8:	6820      	ldr	r0, [r4, #0]
 80045ea:	6829      	ldr	r1, [r5, #0]
 80045ec:	0606      	lsls	r6, r0, #24
 80045ee:	f101 0304 	add.w	r3, r1, #4
 80045f2:	d50a      	bpl.n	800460a <_printf_i+0xce>
 80045f4:	680e      	ldr	r6, [r1, #0]
 80045f6:	602b      	str	r3, [r5, #0]
 80045f8:	2e00      	cmp	r6, #0
 80045fa:	da03      	bge.n	8004604 <_printf_i+0xc8>
 80045fc:	232d      	movs	r3, #45	; 0x2d
 80045fe:	4276      	negs	r6, r6
 8004600:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004604:	485e      	ldr	r0, [pc, #376]	; (8004780 <_printf_i+0x244>)
 8004606:	230a      	movs	r3, #10
 8004608:	e019      	b.n	800463e <_printf_i+0x102>
 800460a:	680e      	ldr	r6, [r1, #0]
 800460c:	602b      	str	r3, [r5, #0]
 800460e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004612:	bf18      	it	ne
 8004614:	b236      	sxthne	r6, r6
 8004616:	e7ef      	b.n	80045f8 <_printf_i+0xbc>
 8004618:	682b      	ldr	r3, [r5, #0]
 800461a:	6820      	ldr	r0, [r4, #0]
 800461c:	1d19      	adds	r1, r3, #4
 800461e:	6029      	str	r1, [r5, #0]
 8004620:	0601      	lsls	r1, r0, #24
 8004622:	d501      	bpl.n	8004628 <_printf_i+0xec>
 8004624:	681e      	ldr	r6, [r3, #0]
 8004626:	e002      	b.n	800462e <_printf_i+0xf2>
 8004628:	0646      	lsls	r6, r0, #25
 800462a:	d5fb      	bpl.n	8004624 <_printf_i+0xe8>
 800462c:	881e      	ldrh	r6, [r3, #0]
 800462e:	4854      	ldr	r0, [pc, #336]	; (8004780 <_printf_i+0x244>)
 8004630:	2f6f      	cmp	r7, #111	; 0x6f
 8004632:	bf0c      	ite	eq
 8004634:	2308      	moveq	r3, #8
 8004636:	230a      	movne	r3, #10
 8004638:	2100      	movs	r1, #0
 800463a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800463e:	6865      	ldr	r5, [r4, #4]
 8004640:	60a5      	str	r5, [r4, #8]
 8004642:	2d00      	cmp	r5, #0
 8004644:	bfa2      	ittt	ge
 8004646:	6821      	ldrge	r1, [r4, #0]
 8004648:	f021 0104 	bicge.w	r1, r1, #4
 800464c:	6021      	strge	r1, [r4, #0]
 800464e:	b90e      	cbnz	r6, 8004654 <_printf_i+0x118>
 8004650:	2d00      	cmp	r5, #0
 8004652:	d04d      	beq.n	80046f0 <_printf_i+0x1b4>
 8004654:	4615      	mov	r5, r2
 8004656:	fbb6 f1f3 	udiv	r1, r6, r3
 800465a:	fb03 6711 	mls	r7, r3, r1, r6
 800465e:	5dc7      	ldrb	r7, [r0, r7]
 8004660:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004664:	4637      	mov	r7, r6
 8004666:	42bb      	cmp	r3, r7
 8004668:	460e      	mov	r6, r1
 800466a:	d9f4      	bls.n	8004656 <_printf_i+0x11a>
 800466c:	2b08      	cmp	r3, #8
 800466e:	d10b      	bne.n	8004688 <_printf_i+0x14c>
 8004670:	6823      	ldr	r3, [r4, #0]
 8004672:	07de      	lsls	r6, r3, #31
 8004674:	d508      	bpl.n	8004688 <_printf_i+0x14c>
 8004676:	6923      	ldr	r3, [r4, #16]
 8004678:	6861      	ldr	r1, [r4, #4]
 800467a:	4299      	cmp	r1, r3
 800467c:	bfde      	ittt	le
 800467e:	2330      	movle	r3, #48	; 0x30
 8004680:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004684:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004688:	1b52      	subs	r2, r2, r5
 800468a:	6122      	str	r2, [r4, #16]
 800468c:	f8cd a000 	str.w	sl, [sp]
 8004690:	464b      	mov	r3, r9
 8004692:	aa03      	add	r2, sp, #12
 8004694:	4621      	mov	r1, r4
 8004696:	4640      	mov	r0, r8
 8004698:	f7ff fee2 	bl	8004460 <_printf_common>
 800469c:	3001      	adds	r0, #1
 800469e:	d14c      	bne.n	800473a <_printf_i+0x1fe>
 80046a0:	f04f 30ff 	mov.w	r0, #4294967295
 80046a4:	b004      	add	sp, #16
 80046a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046aa:	4835      	ldr	r0, [pc, #212]	; (8004780 <_printf_i+0x244>)
 80046ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80046b0:	6829      	ldr	r1, [r5, #0]
 80046b2:	6823      	ldr	r3, [r4, #0]
 80046b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80046b8:	6029      	str	r1, [r5, #0]
 80046ba:	061d      	lsls	r5, r3, #24
 80046bc:	d514      	bpl.n	80046e8 <_printf_i+0x1ac>
 80046be:	07df      	lsls	r7, r3, #31
 80046c0:	bf44      	itt	mi
 80046c2:	f043 0320 	orrmi.w	r3, r3, #32
 80046c6:	6023      	strmi	r3, [r4, #0]
 80046c8:	b91e      	cbnz	r6, 80046d2 <_printf_i+0x196>
 80046ca:	6823      	ldr	r3, [r4, #0]
 80046cc:	f023 0320 	bic.w	r3, r3, #32
 80046d0:	6023      	str	r3, [r4, #0]
 80046d2:	2310      	movs	r3, #16
 80046d4:	e7b0      	b.n	8004638 <_printf_i+0xfc>
 80046d6:	6823      	ldr	r3, [r4, #0]
 80046d8:	f043 0320 	orr.w	r3, r3, #32
 80046dc:	6023      	str	r3, [r4, #0]
 80046de:	2378      	movs	r3, #120	; 0x78
 80046e0:	4828      	ldr	r0, [pc, #160]	; (8004784 <_printf_i+0x248>)
 80046e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80046e6:	e7e3      	b.n	80046b0 <_printf_i+0x174>
 80046e8:	0659      	lsls	r1, r3, #25
 80046ea:	bf48      	it	mi
 80046ec:	b2b6      	uxthmi	r6, r6
 80046ee:	e7e6      	b.n	80046be <_printf_i+0x182>
 80046f0:	4615      	mov	r5, r2
 80046f2:	e7bb      	b.n	800466c <_printf_i+0x130>
 80046f4:	682b      	ldr	r3, [r5, #0]
 80046f6:	6826      	ldr	r6, [r4, #0]
 80046f8:	6961      	ldr	r1, [r4, #20]
 80046fa:	1d18      	adds	r0, r3, #4
 80046fc:	6028      	str	r0, [r5, #0]
 80046fe:	0635      	lsls	r5, r6, #24
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	d501      	bpl.n	8004708 <_printf_i+0x1cc>
 8004704:	6019      	str	r1, [r3, #0]
 8004706:	e002      	b.n	800470e <_printf_i+0x1d2>
 8004708:	0670      	lsls	r0, r6, #25
 800470a:	d5fb      	bpl.n	8004704 <_printf_i+0x1c8>
 800470c:	8019      	strh	r1, [r3, #0]
 800470e:	2300      	movs	r3, #0
 8004710:	6123      	str	r3, [r4, #16]
 8004712:	4615      	mov	r5, r2
 8004714:	e7ba      	b.n	800468c <_printf_i+0x150>
 8004716:	682b      	ldr	r3, [r5, #0]
 8004718:	1d1a      	adds	r2, r3, #4
 800471a:	602a      	str	r2, [r5, #0]
 800471c:	681d      	ldr	r5, [r3, #0]
 800471e:	6862      	ldr	r2, [r4, #4]
 8004720:	2100      	movs	r1, #0
 8004722:	4628      	mov	r0, r5
 8004724:	f7fb fd64 	bl	80001f0 <memchr>
 8004728:	b108      	cbz	r0, 800472e <_printf_i+0x1f2>
 800472a:	1b40      	subs	r0, r0, r5
 800472c:	6060      	str	r0, [r4, #4]
 800472e:	6863      	ldr	r3, [r4, #4]
 8004730:	6123      	str	r3, [r4, #16]
 8004732:	2300      	movs	r3, #0
 8004734:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004738:	e7a8      	b.n	800468c <_printf_i+0x150>
 800473a:	6923      	ldr	r3, [r4, #16]
 800473c:	462a      	mov	r2, r5
 800473e:	4649      	mov	r1, r9
 8004740:	4640      	mov	r0, r8
 8004742:	47d0      	blx	sl
 8004744:	3001      	adds	r0, #1
 8004746:	d0ab      	beq.n	80046a0 <_printf_i+0x164>
 8004748:	6823      	ldr	r3, [r4, #0]
 800474a:	079b      	lsls	r3, r3, #30
 800474c:	d413      	bmi.n	8004776 <_printf_i+0x23a>
 800474e:	68e0      	ldr	r0, [r4, #12]
 8004750:	9b03      	ldr	r3, [sp, #12]
 8004752:	4298      	cmp	r0, r3
 8004754:	bfb8      	it	lt
 8004756:	4618      	movlt	r0, r3
 8004758:	e7a4      	b.n	80046a4 <_printf_i+0x168>
 800475a:	2301      	movs	r3, #1
 800475c:	4632      	mov	r2, r6
 800475e:	4649      	mov	r1, r9
 8004760:	4640      	mov	r0, r8
 8004762:	47d0      	blx	sl
 8004764:	3001      	adds	r0, #1
 8004766:	d09b      	beq.n	80046a0 <_printf_i+0x164>
 8004768:	3501      	adds	r5, #1
 800476a:	68e3      	ldr	r3, [r4, #12]
 800476c:	9903      	ldr	r1, [sp, #12]
 800476e:	1a5b      	subs	r3, r3, r1
 8004770:	42ab      	cmp	r3, r5
 8004772:	dcf2      	bgt.n	800475a <_printf_i+0x21e>
 8004774:	e7eb      	b.n	800474e <_printf_i+0x212>
 8004776:	2500      	movs	r5, #0
 8004778:	f104 0619 	add.w	r6, r4, #25
 800477c:	e7f5      	b.n	800476a <_printf_i+0x22e>
 800477e:	bf00      	nop
 8004780:	08004aa9 	.word	0x08004aa9
 8004784:	08004aba 	.word	0x08004aba

08004788 <memcpy>:
 8004788:	440a      	add	r2, r1
 800478a:	4291      	cmp	r1, r2
 800478c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004790:	d100      	bne.n	8004794 <memcpy+0xc>
 8004792:	4770      	bx	lr
 8004794:	b510      	push	{r4, lr}
 8004796:	f811 4b01 	ldrb.w	r4, [r1], #1
 800479a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800479e:	4291      	cmp	r1, r2
 80047a0:	d1f9      	bne.n	8004796 <memcpy+0xe>
 80047a2:	bd10      	pop	{r4, pc}

080047a4 <memmove>:
 80047a4:	4288      	cmp	r0, r1
 80047a6:	b510      	push	{r4, lr}
 80047a8:	eb01 0402 	add.w	r4, r1, r2
 80047ac:	d902      	bls.n	80047b4 <memmove+0x10>
 80047ae:	4284      	cmp	r4, r0
 80047b0:	4623      	mov	r3, r4
 80047b2:	d807      	bhi.n	80047c4 <memmove+0x20>
 80047b4:	1e43      	subs	r3, r0, #1
 80047b6:	42a1      	cmp	r1, r4
 80047b8:	d008      	beq.n	80047cc <memmove+0x28>
 80047ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80047be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80047c2:	e7f8      	b.n	80047b6 <memmove+0x12>
 80047c4:	4402      	add	r2, r0
 80047c6:	4601      	mov	r1, r0
 80047c8:	428a      	cmp	r2, r1
 80047ca:	d100      	bne.n	80047ce <memmove+0x2a>
 80047cc:	bd10      	pop	{r4, pc}
 80047ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80047d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80047d6:	e7f7      	b.n	80047c8 <memmove+0x24>

080047d8 <_free_r>:
 80047d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80047da:	2900      	cmp	r1, #0
 80047dc:	d044      	beq.n	8004868 <_free_r+0x90>
 80047de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047e2:	9001      	str	r0, [sp, #4]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f1a1 0404 	sub.w	r4, r1, #4
 80047ea:	bfb8      	it	lt
 80047ec:	18e4      	addlt	r4, r4, r3
 80047ee:	f000 f913 	bl	8004a18 <__malloc_lock>
 80047f2:	4a1e      	ldr	r2, [pc, #120]	; (800486c <_free_r+0x94>)
 80047f4:	9801      	ldr	r0, [sp, #4]
 80047f6:	6813      	ldr	r3, [r2, #0]
 80047f8:	b933      	cbnz	r3, 8004808 <_free_r+0x30>
 80047fa:	6063      	str	r3, [r4, #4]
 80047fc:	6014      	str	r4, [r2, #0]
 80047fe:	b003      	add	sp, #12
 8004800:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004804:	f000 b90e 	b.w	8004a24 <__malloc_unlock>
 8004808:	42a3      	cmp	r3, r4
 800480a:	d908      	bls.n	800481e <_free_r+0x46>
 800480c:	6825      	ldr	r5, [r4, #0]
 800480e:	1961      	adds	r1, r4, r5
 8004810:	428b      	cmp	r3, r1
 8004812:	bf01      	itttt	eq
 8004814:	6819      	ldreq	r1, [r3, #0]
 8004816:	685b      	ldreq	r3, [r3, #4]
 8004818:	1949      	addeq	r1, r1, r5
 800481a:	6021      	streq	r1, [r4, #0]
 800481c:	e7ed      	b.n	80047fa <_free_r+0x22>
 800481e:	461a      	mov	r2, r3
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	b10b      	cbz	r3, 8004828 <_free_r+0x50>
 8004824:	42a3      	cmp	r3, r4
 8004826:	d9fa      	bls.n	800481e <_free_r+0x46>
 8004828:	6811      	ldr	r1, [r2, #0]
 800482a:	1855      	adds	r5, r2, r1
 800482c:	42a5      	cmp	r5, r4
 800482e:	d10b      	bne.n	8004848 <_free_r+0x70>
 8004830:	6824      	ldr	r4, [r4, #0]
 8004832:	4421      	add	r1, r4
 8004834:	1854      	adds	r4, r2, r1
 8004836:	42a3      	cmp	r3, r4
 8004838:	6011      	str	r1, [r2, #0]
 800483a:	d1e0      	bne.n	80047fe <_free_r+0x26>
 800483c:	681c      	ldr	r4, [r3, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	6053      	str	r3, [r2, #4]
 8004842:	4421      	add	r1, r4
 8004844:	6011      	str	r1, [r2, #0]
 8004846:	e7da      	b.n	80047fe <_free_r+0x26>
 8004848:	d902      	bls.n	8004850 <_free_r+0x78>
 800484a:	230c      	movs	r3, #12
 800484c:	6003      	str	r3, [r0, #0]
 800484e:	e7d6      	b.n	80047fe <_free_r+0x26>
 8004850:	6825      	ldr	r5, [r4, #0]
 8004852:	1961      	adds	r1, r4, r5
 8004854:	428b      	cmp	r3, r1
 8004856:	bf04      	itt	eq
 8004858:	6819      	ldreq	r1, [r3, #0]
 800485a:	685b      	ldreq	r3, [r3, #4]
 800485c:	6063      	str	r3, [r4, #4]
 800485e:	bf04      	itt	eq
 8004860:	1949      	addeq	r1, r1, r5
 8004862:	6021      	streq	r1, [r4, #0]
 8004864:	6054      	str	r4, [r2, #4]
 8004866:	e7ca      	b.n	80047fe <_free_r+0x26>
 8004868:	b003      	add	sp, #12
 800486a:	bd30      	pop	{r4, r5, pc}
 800486c:	20000138 	.word	0x20000138

08004870 <sbrk_aligned>:
 8004870:	b570      	push	{r4, r5, r6, lr}
 8004872:	4e0e      	ldr	r6, [pc, #56]	; (80048ac <sbrk_aligned+0x3c>)
 8004874:	460c      	mov	r4, r1
 8004876:	6831      	ldr	r1, [r6, #0]
 8004878:	4605      	mov	r5, r0
 800487a:	b911      	cbnz	r1, 8004882 <sbrk_aligned+0x12>
 800487c:	f000 f8bc 	bl	80049f8 <_sbrk_r>
 8004880:	6030      	str	r0, [r6, #0]
 8004882:	4621      	mov	r1, r4
 8004884:	4628      	mov	r0, r5
 8004886:	f000 f8b7 	bl	80049f8 <_sbrk_r>
 800488a:	1c43      	adds	r3, r0, #1
 800488c:	d00a      	beq.n	80048a4 <sbrk_aligned+0x34>
 800488e:	1cc4      	adds	r4, r0, #3
 8004890:	f024 0403 	bic.w	r4, r4, #3
 8004894:	42a0      	cmp	r0, r4
 8004896:	d007      	beq.n	80048a8 <sbrk_aligned+0x38>
 8004898:	1a21      	subs	r1, r4, r0
 800489a:	4628      	mov	r0, r5
 800489c:	f000 f8ac 	bl	80049f8 <_sbrk_r>
 80048a0:	3001      	adds	r0, #1
 80048a2:	d101      	bne.n	80048a8 <sbrk_aligned+0x38>
 80048a4:	f04f 34ff 	mov.w	r4, #4294967295
 80048a8:	4620      	mov	r0, r4
 80048aa:	bd70      	pop	{r4, r5, r6, pc}
 80048ac:	2000013c 	.word	0x2000013c

080048b0 <_malloc_r>:
 80048b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048b4:	1ccd      	adds	r5, r1, #3
 80048b6:	f025 0503 	bic.w	r5, r5, #3
 80048ba:	3508      	adds	r5, #8
 80048bc:	2d0c      	cmp	r5, #12
 80048be:	bf38      	it	cc
 80048c0:	250c      	movcc	r5, #12
 80048c2:	2d00      	cmp	r5, #0
 80048c4:	4607      	mov	r7, r0
 80048c6:	db01      	blt.n	80048cc <_malloc_r+0x1c>
 80048c8:	42a9      	cmp	r1, r5
 80048ca:	d905      	bls.n	80048d8 <_malloc_r+0x28>
 80048cc:	230c      	movs	r3, #12
 80048ce:	603b      	str	r3, [r7, #0]
 80048d0:	2600      	movs	r6, #0
 80048d2:	4630      	mov	r0, r6
 80048d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048d8:	4e2e      	ldr	r6, [pc, #184]	; (8004994 <_malloc_r+0xe4>)
 80048da:	f000 f89d 	bl	8004a18 <__malloc_lock>
 80048de:	6833      	ldr	r3, [r6, #0]
 80048e0:	461c      	mov	r4, r3
 80048e2:	bb34      	cbnz	r4, 8004932 <_malloc_r+0x82>
 80048e4:	4629      	mov	r1, r5
 80048e6:	4638      	mov	r0, r7
 80048e8:	f7ff ffc2 	bl	8004870 <sbrk_aligned>
 80048ec:	1c43      	adds	r3, r0, #1
 80048ee:	4604      	mov	r4, r0
 80048f0:	d14d      	bne.n	800498e <_malloc_r+0xde>
 80048f2:	6834      	ldr	r4, [r6, #0]
 80048f4:	4626      	mov	r6, r4
 80048f6:	2e00      	cmp	r6, #0
 80048f8:	d140      	bne.n	800497c <_malloc_r+0xcc>
 80048fa:	6823      	ldr	r3, [r4, #0]
 80048fc:	4631      	mov	r1, r6
 80048fe:	4638      	mov	r0, r7
 8004900:	eb04 0803 	add.w	r8, r4, r3
 8004904:	f000 f878 	bl	80049f8 <_sbrk_r>
 8004908:	4580      	cmp	r8, r0
 800490a:	d13a      	bne.n	8004982 <_malloc_r+0xd2>
 800490c:	6821      	ldr	r1, [r4, #0]
 800490e:	3503      	adds	r5, #3
 8004910:	1a6d      	subs	r5, r5, r1
 8004912:	f025 0503 	bic.w	r5, r5, #3
 8004916:	3508      	adds	r5, #8
 8004918:	2d0c      	cmp	r5, #12
 800491a:	bf38      	it	cc
 800491c:	250c      	movcc	r5, #12
 800491e:	4629      	mov	r1, r5
 8004920:	4638      	mov	r0, r7
 8004922:	f7ff ffa5 	bl	8004870 <sbrk_aligned>
 8004926:	3001      	adds	r0, #1
 8004928:	d02b      	beq.n	8004982 <_malloc_r+0xd2>
 800492a:	6823      	ldr	r3, [r4, #0]
 800492c:	442b      	add	r3, r5
 800492e:	6023      	str	r3, [r4, #0]
 8004930:	e00e      	b.n	8004950 <_malloc_r+0xa0>
 8004932:	6822      	ldr	r2, [r4, #0]
 8004934:	1b52      	subs	r2, r2, r5
 8004936:	d41e      	bmi.n	8004976 <_malloc_r+0xc6>
 8004938:	2a0b      	cmp	r2, #11
 800493a:	d916      	bls.n	800496a <_malloc_r+0xba>
 800493c:	1961      	adds	r1, r4, r5
 800493e:	42a3      	cmp	r3, r4
 8004940:	6025      	str	r5, [r4, #0]
 8004942:	bf18      	it	ne
 8004944:	6059      	strne	r1, [r3, #4]
 8004946:	6863      	ldr	r3, [r4, #4]
 8004948:	bf08      	it	eq
 800494a:	6031      	streq	r1, [r6, #0]
 800494c:	5162      	str	r2, [r4, r5]
 800494e:	604b      	str	r3, [r1, #4]
 8004950:	4638      	mov	r0, r7
 8004952:	f104 060b 	add.w	r6, r4, #11
 8004956:	f000 f865 	bl	8004a24 <__malloc_unlock>
 800495a:	f026 0607 	bic.w	r6, r6, #7
 800495e:	1d23      	adds	r3, r4, #4
 8004960:	1af2      	subs	r2, r6, r3
 8004962:	d0b6      	beq.n	80048d2 <_malloc_r+0x22>
 8004964:	1b9b      	subs	r3, r3, r6
 8004966:	50a3      	str	r3, [r4, r2]
 8004968:	e7b3      	b.n	80048d2 <_malloc_r+0x22>
 800496a:	6862      	ldr	r2, [r4, #4]
 800496c:	42a3      	cmp	r3, r4
 800496e:	bf0c      	ite	eq
 8004970:	6032      	streq	r2, [r6, #0]
 8004972:	605a      	strne	r2, [r3, #4]
 8004974:	e7ec      	b.n	8004950 <_malloc_r+0xa0>
 8004976:	4623      	mov	r3, r4
 8004978:	6864      	ldr	r4, [r4, #4]
 800497a:	e7b2      	b.n	80048e2 <_malloc_r+0x32>
 800497c:	4634      	mov	r4, r6
 800497e:	6876      	ldr	r6, [r6, #4]
 8004980:	e7b9      	b.n	80048f6 <_malloc_r+0x46>
 8004982:	230c      	movs	r3, #12
 8004984:	603b      	str	r3, [r7, #0]
 8004986:	4638      	mov	r0, r7
 8004988:	f000 f84c 	bl	8004a24 <__malloc_unlock>
 800498c:	e7a1      	b.n	80048d2 <_malloc_r+0x22>
 800498e:	6025      	str	r5, [r4, #0]
 8004990:	e7de      	b.n	8004950 <_malloc_r+0xa0>
 8004992:	bf00      	nop
 8004994:	20000138 	.word	0x20000138

08004998 <_realloc_r>:
 8004998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800499c:	4680      	mov	r8, r0
 800499e:	4614      	mov	r4, r2
 80049a0:	460e      	mov	r6, r1
 80049a2:	b921      	cbnz	r1, 80049ae <_realloc_r+0x16>
 80049a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049a8:	4611      	mov	r1, r2
 80049aa:	f7ff bf81 	b.w	80048b0 <_malloc_r>
 80049ae:	b92a      	cbnz	r2, 80049bc <_realloc_r+0x24>
 80049b0:	f7ff ff12 	bl	80047d8 <_free_r>
 80049b4:	4625      	mov	r5, r4
 80049b6:	4628      	mov	r0, r5
 80049b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049bc:	f000 f838 	bl	8004a30 <_malloc_usable_size_r>
 80049c0:	4284      	cmp	r4, r0
 80049c2:	4607      	mov	r7, r0
 80049c4:	d802      	bhi.n	80049cc <_realloc_r+0x34>
 80049c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80049ca:	d812      	bhi.n	80049f2 <_realloc_r+0x5a>
 80049cc:	4621      	mov	r1, r4
 80049ce:	4640      	mov	r0, r8
 80049d0:	f7ff ff6e 	bl	80048b0 <_malloc_r>
 80049d4:	4605      	mov	r5, r0
 80049d6:	2800      	cmp	r0, #0
 80049d8:	d0ed      	beq.n	80049b6 <_realloc_r+0x1e>
 80049da:	42bc      	cmp	r4, r7
 80049dc:	4622      	mov	r2, r4
 80049de:	4631      	mov	r1, r6
 80049e0:	bf28      	it	cs
 80049e2:	463a      	movcs	r2, r7
 80049e4:	f7ff fed0 	bl	8004788 <memcpy>
 80049e8:	4631      	mov	r1, r6
 80049ea:	4640      	mov	r0, r8
 80049ec:	f7ff fef4 	bl	80047d8 <_free_r>
 80049f0:	e7e1      	b.n	80049b6 <_realloc_r+0x1e>
 80049f2:	4635      	mov	r5, r6
 80049f4:	e7df      	b.n	80049b6 <_realloc_r+0x1e>
	...

080049f8 <_sbrk_r>:
 80049f8:	b538      	push	{r3, r4, r5, lr}
 80049fa:	4d06      	ldr	r5, [pc, #24]	; (8004a14 <_sbrk_r+0x1c>)
 80049fc:	2300      	movs	r3, #0
 80049fe:	4604      	mov	r4, r0
 8004a00:	4608      	mov	r0, r1
 8004a02:	602b      	str	r3, [r5, #0]
 8004a04:	f7fb ff96 	bl	8000934 <_sbrk>
 8004a08:	1c43      	adds	r3, r0, #1
 8004a0a:	d102      	bne.n	8004a12 <_sbrk_r+0x1a>
 8004a0c:	682b      	ldr	r3, [r5, #0]
 8004a0e:	b103      	cbz	r3, 8004a12 <_sbrk_r+0x1a>
 8004a10:	6023      	str	r3, [r4, #0]
 8004a12:	bd38      	pop	{r3, r4, r5, pc}
 8004a14:	20000140 	.word	0x20000140

08004a18 <__malloc_lock>:
 8004a18:	4801      	ldr	r0, [pc, #4]	; (8004a20 <__malloc_lock+0x8>)
 8004a1a:	f000 b811 	b.w	8004a40 <__retarget_lock_acquire_recursive>
 8004a1e:	bf00      	nop
 8004a20:	20000144 	.word	0x20000144

08004a24 <__malloc_unlock>:
 8004a24:	4801      	ldr	r0, [pc, #4]	; (8004a2c <__malloc_unlock+0x8>)
 8004a26:	f000 b80c 	b.w	8004a42 <__retarget_lock_release_recursive>
 8004a2a:	bf00      	nop
 8004a2c:	20000144 	.word	0x20000144

08004a30 <_malloc_usable_size_r>:
 8004a30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a34:	1f18      	subs	r0, r3, #4
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	bfbc      	itt	lt
 8004a3a:	580b      	ldrlt	r3, [r1, r0]
 8004a3c:	18c0      	addlt	r0, r0, r3
 8004a3e:	4770      	bx	lr

08004a40 <__retarget_lock_acquire_recursive>:
 8004a40:	4770      	bx	lr

08004a42 <__retarget_lock_release_recursive>:
 8004a42:	4770      	bx	lr

08004a44 <_init>:
 8004a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a46:	bf00      	nop
 8004a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a4a:	bc08      	pop	{r3}
 8004a4c:	469e      	mov	lr, r3
 8004a4e:	4770      	bx	lr

08004a50 <_fini>:
 8004a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a52:	bf00      	nop
 8004a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a56:	bc08      	pop	{r3}
 8004a58:	469e      	mov	lr, r3
 8004a5a:	4770      	bx	lr

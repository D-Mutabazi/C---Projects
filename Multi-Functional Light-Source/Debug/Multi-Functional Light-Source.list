
Multi-Functional Light-Source.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f0c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002dc  080080a4  080080a4  000180a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008380  08008380  000200d8  2**0
                  CONTENTS
  4 .ARM          00000000  08008380  08008380  000200d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008380  08008380  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008380  08008380  00018380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008384  08008384  00018384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  08008388  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200d8  2**0
                  CONTENTS
 10 .bss          00002264  200000d8  200000d8  000200d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000233c  2000233c  000200d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013555  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000253d  00000000  00000000  0003365d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fa8  00000000  00000000  00035ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ed0  00000000  00000000  00036b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021d17  00000000  00000000  00037a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000144d7  00000000  00000000  0005972f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3b5b  00000000  00000000  0006dc06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00141761  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004418  00000000  00000000  001417b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000d8 	.word	0x200000d8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800808c 	.word	0x0800808c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000dc 	.word	0x200000dc
 80001d4:	0800808c 	.word	0x0800808c

080001d8 <strcmp>:
 80001d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e0:	2a01      	cmp	r2, #1
 80001e2:	bf28      	it	cs
 80001e4:	429a      	cmpcs	r2, r3
 80001e6:	d0f7      	beq.n	80001d8 <strcmp>
 80001e8:	1ad0      	subs	r0, r2, r3
 80001ea:	4770      	bx	lr

080001ec <__aeabi_dmul>:
 80001ec:	b570      	push	{r4, r5, r6, lr}
 80001ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001fa:	bf1d      	ittte	ne
 80001fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000200:	ea94 0f0c 	teqne	r4, ip
 8000204:	ea95 0f0c 	teqne	r5, ip
 8000208:	f000 f8de 	bleq	80003c8 <__aeabi_dmul+0x1dc>
 800020c:	442c      	add	r4, r5
 800020e:	ea81 0603 	eor.w	r6, r1, r3
 8000212:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000216:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800021a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800021e:	bf18      	it	ne
 8000220:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800022c:	d038      	beq.n	80002a0 <__aeabi_dmul+0xb4>
 800022e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000232:	f04f 0500 	mov.w	r5, #0
 8000236:	fbe1 e502 	umlal	lr, r5, r1, r2
 800023a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800023e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000242:	f04f 0600 	mov.w	r6, #0
 8000246:	fbe1 5603 	umlal	r5, r6, r1, r3
 800024a:	f09c 0f00 	teq	ip, #0
 800024e:	bf18      	it	ne
 8000250:	f04e 0e01 	orrne.w	lr, lr, #1
 8000254:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000258:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800025c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000260:	d204      	bcs.n	800026c <__aeabi_dmul+0x80>
 8000262:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000266:	416d      	adcs	r5, r5
 8000268:	eb46 0606 	adc.w	r6, r6, r6
 800026c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000270:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000274:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000278:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800027c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000280:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000284:	bf88      	it	hi
 8000286:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800028a:	d81e      	bhi.n	80002ca <__aeabi_dmul+0xde>
 800028c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	bd70      	pop	{r4, r5, r6, pc}
 80002a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002a4:	ea46 0101 	orr.w	r1, r6, r1
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	ea81 0103 	eor.w	r1, r1, r3
 80002b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002b4:	bfc2      	ittt	gt
 80002b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002be:	bd70      	popgt	{r4, r5, r6, pc}
 80002c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002c4:	f04f 0e00 	mov.w	lr, #0
 80002c8:	3c01      	subs	r4, #1
 80002ca:	f300 80ab 	bgt.w	8000424 <__aeabi_dmul+0x238>
 80002ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002d2:	bfde      	ittt	le
 80002d4:	2000      	movle	r0, #0
 80002d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002da:	bd70      	pople	{r4, r5, r6, pc}
 80002dc:	f1c4 0400 	rsb	r4, r4, #0
 80002e0:	3c20      	subs	r4, #32
 80002e2:	da35      	bge.n	8000350 <__aeabi_dmul+0x164>
 80002e4:	340c      	adds	r4, #12
 80002e6:	dc1b      	bgt.n	8000320 <__aeabi_dmul+0x134>
 80002e8:	f104 0414 	add.w	r4, r4, #20
 80002ec:	f1c4 0520 	rsb	r5, r4, #32
 80002f0:	fa00 f305 	lsl.w	r3, r0, r5
 80002f4:	fa20 f004 	lsr.w	r0, r0, r4
 80002f8:	fa01 f205 	lsl.w	r2, r1, r5
 80002fc:	ea40 0002 	orr.w	r0, r0, r2
 8000300:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000304:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000308:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800030c:	fa21 f604 	lsr.w	r6, r1, r4
 8000310:	eb42 0106 	adc.w	r1, r2, r6
 8000314:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000318:	bf08      	it	eq
 800031a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800031e:	bd70      	pop	{r4, r5, r6, pc}
 8000320:	f1c4 040c 	rsb	r4, r4, #12
 8000324:	f1c4 0520 	rsb	r5, r4, #32
 8000328:	fa00 f304 	lsl.w	r3, r0, r4
 800032c:	fa20 f005 	lsr.w	r0, r0, r5
 8000330:	fa01 f204 	lsl.w	r2, r1, r4
 8000334:	ea40 0002 	orr.w	r0, r0, r2
 8000338:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800033c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000340:	f141 0100 	adc.w	r1, r1, #0
 8000344:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000348:	bf08      	it	eq
 800034a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034e:	bd70      	pop	{r4, r5, r6, pc}
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f205 	lsl.w	r2, r0, r5
 8000358:	ea4e 0e02 	orr.w	lr, lr, r2
 800035c:	fa20 f304 	lsr.w	r3, r0, r4
 8000360:	fa01 f205 	lsl.w	r2, r1, r5
 8000364:	ea43 0302 	orr.w	r3, r3, r2
 8000368:	fa21 f004 	lsr.w	r0, r1, r4
 800036c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000370:	fa21 f204 	lsr.w	r2, r1, r4
 8000374:	ea20 0002 	bic.w	r0, r0, r2
 8000378:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800037c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000380:	bf08      	it	eq
 8000382:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000386:	bd70      	pop	{r4, r5, r6, pc}
 8000388:	f094 0f00 	teq	r4, #0
 800038c:	d10f      	bne.n	80003ae <__aeabi_dmul+0x1c2>
 800038e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000392:	0040      	lsls	r0, r0, #1
 8000394:	eb41 0101 	adc.w	r1, r1, r1
 8000398:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800039c:	bf08      	it	eq
 800039e:	3c01      	subeq	r4, #1
 80003a0:	d0f7      	beq.n	8000392 <__aeabi_dmul+0x1a6>
 80003a2:	ea41 0106 	orr.w	r1, r1, r6
 80003a6:	f095 0f00 	teq	r5, #0
 80003aa:	bf18      	it	ne
 80003ac:	4770      	bxne	lr
 80003ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003b2:	0052      	lsls	r2, r2, #1
 80003b4:	eb43 0303 	adc.w	r3, r3, r3
 80003b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003bc:	bf08      	it	eq
 80003be:	3d01      	subeq	r5, #1
 80003c0:	d0f7      	beq.n	80003b2 <__aeabi_dmul+0x1c6>
 80003c2:	ea43 0306 	orr.w	r3, r3, r6
 80003c6:	4770      	bx	lr
 80003c8:	ea94 0f0c 	teq	r4, ip
 80003cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003d0:	bf18      	it	ne
 80003d2:	ea95 0f0c 	teqne	r5, ip
 80003d6:	d00c      	beq.n	80003f2 <__aeabi_dmul+0x206>
 80003d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003dc:	bf18      	it	ne
 80003de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e2:	d1d1      	bne.n	8000388 <__aeabi_dmul+0x19c>
 80003e4:	ea81 0103 	eor.w	r1, r1, r3
 80003e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003ec:	f04f 0000 	mov.w	r0, #0
 80003f0:	bd70      	pop	{r4, r5, r6, pc}
 80003f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f6:	bf06      	itte	eq
 80003f8:	4610      	moveq	r0, r2
 80003fa:	4619      	moveq	r1, r3
 80003fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000400:	d019      	beq.n	8000436 <__aeabi_dmul+0x24a>
 8000402:	ea94 0f0c 	teq	r4, ip
 8000406:	d102      	bne.n	800040e <__aeabi_dmul+0x222>
 8000408:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800040c:	d113      	bne.n	8000436 <__aeabi_dmul+0x24a>
 800040e:	ea95 0f0c 	teq	r5, ip
 8000412:	d105      	bne.n	8000420 <__aeabi_dmul+0x234>
 8000414:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000418:	bf1c      	itt	ne
 800041a:	4610      	movne	r0, r2
 800041c:	4619      	movne	r1, r3
 800041e:	d10a      	bne.n	8000436 <__aeabi_dmul+0x24a>
 8000420:	ea81 0103 	eor.w	r1, r1, r3
 8000424:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000428:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800042c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd70      	pop	{r4, r5, r6, pc}
 8000436:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800043a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800043e:	bd70      	pop	{r4, r5, r6, pc}

08000440 <__aeabi_drsub>:
 8000440:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000444:	e002      	b.n	800044c <__adddf3>
 8000446:	bf00      	nop

08000448 <__aeabi_dsub>:
 8000448:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800044c <__adddf3>:
 800044c:	b530      	push	{r4, r5, lr}
 800044e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000452:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	bf1f      	itttt	ne
 8000462:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000466:	ea55 0c02 	orrsne.w	ip, r5, r2
 800046a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800046e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000472:	f000 80e2 	beq.w	800063a <__adddf3+0x1ee>
 8000476:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800047a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800047e:	bfb8      	it	lt
 8000480:	426d      	neglt	r5, r5
 8000482:	dd0c      	ble.n	800049e <__adddf3+0x52>
 8000484:	442c      	add	r4, r5
 8000486:	ea80 0202 	eor.w	r2, r0, r2
 800048a:	ea81 0303 	eor.w	r3, r1, r3
 800048e:	ea82 0000 	eor.w	r0, r2, r0
 8000492:	ea83 0101 	eor.w	r1, r3, r1
 8000496:	ea80 0202 	eor.w	r2, r0, r2
 800049a:	ea81 0303 	eor.w	r3, r1, r3
 800049e:	2d36      	cmp	r5, #54	; 0x36
 80004a0:	bf88      	it	hi
 80004a2:	bd30      	pophi	{r4, r5, pc}
 80004a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x70>
 80004b6:	4240      	negs	r0, r0
 80004b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004c8:	d002      	beq.n	80004d0 <__adddf3+0x84>
 80004ca:	4252      	negs	r2, r2
 80004cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004d0:	ea94 0f05 	teq	r4, r5
 80004d4:	f000 80a7 	beq.w	8000626 <__adddf3+0x1da>
 80004d8:	f1a4 0401 	sub.w	r4, r4, #1
 80004dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80004e0:	db0d      	blt.n	80004fe <__adddf3+0xb2>
 80004e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004e6:	fa22 f205 	lsr.w	r2, r2, r5
 80004ea:	1880      	adds	r0, r0, r2
 80004ec:	f141 0100 	adc.w	r1, r1, #0
 80004f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80004f4:	1880      	adds	r0, r0, r2
 80004f6:	fa43 f305 	asr.w	r3, r3, r5
 80004fa:	4159      	adcs	r1, r3
 80004fc:	e00e      	b.n	800051c <__adddf3+0xd0>
 80004fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000502:	f10e 0e20 	add.w	lr, lr, #32
 8000506:	2a01      	cmp	r2, #1
 8000508:	fa03 fc0e 	lsl.w	ip, r3, lr
 800050c:	bf28      	it	cs
 800050e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000512:	fa43 f305 	asr.w	r3, r3, r5
 8000516:	18c0      	adds	r0, r0, r3
 8000518:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800051c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000520:	d507      	bpl.n	8000532 <__adddf3+0xe6>
 8000522:	f04f 0e00 	mov.w	lr, #0
 8000526:	f1dc 0c00 	rsbs	ip, ip, #0
 800052a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800052e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000532:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000536:	d31b      	bcc.n	8000570 <__adddf3+0x124>
 8000538:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800053c:	d30c      	bcc.n	8000558 <__adddf3+0x10c>
 800053e:	0849      	lsrs	r1, r1, #1
 8000540:	ea5f 0030 	movs.w	r0, r0, rrx
 8000544:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000548:	f104 0401 	add.w	r4, r4, #1
 800054c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000550:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000554:	f080 809a 	bcs.w	800068c <__adddf3+0x240>
 8000558:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800055c:	bf08      	it	eq
 800055e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000562:	f150 0000 	adcs.w	r0, r0, #0
 8000566:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800056a:	ea41 0105 	orr.w	r1, r1, r5
 800056e:	bd30      	pop	{r4, r5, pc}
 8000570:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000574:	4140      	adcs	r0, r0
 8000576:	eb41 0101 	adc.w	r1, r1, r1
 800057a:	3c01      	subs	r4, #1
 800057c:	bf28      	it	cs
 800057e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000582:	d2e9      	bcs.n	8000558 <__adddf3+0x10c>
 8000584:	f091 0f00 	teq	r1, #0
 8000588:	bf04      	itt	eq
 800058a:	4601      	moveq	r1, r0
 800058c:	2000      	moveq	r0, #0
 800058e:	fab1 f381 	clz	r3, r1
 8000592:	bf08      	it	eq
 8000594:	3320      	addeq	r3, #32
 8000596:	f1a3 030b 	sub.w	r3, r3, #11
 800059a:	f1b3 0220 	subs.w	r2, r3, #32
 800059e:	da0c      	bge.n	80005ba <__adddf3+0x16e>
 80005a0:	320c      	adds	r2, #12
 80005a2:	dd08      	ble.n	80005b6 <__adddf3+0x16a>
 80005a4:	f102 0c14 	add.w	ip, r2, #20
 80005a8:	f1c2 020c 	rsb	r2, r2, #12
 80005ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80005b0:	fa21 f102 	lsr.w	r1, r1, r2
 80005b4:	e00c      	b.n	80005d0 <__adddf3+0x184>
 80005b6:	f102 0214 	add.w	r2, r2, #20
 80005ba:	bfd8      	it	le
 80005bc:	f1c2 0c20 	rsble	ip, r2, #32
 80005c0:	fa01 f102 	lsl.w	r1, r1, r2
 80005c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005c8:	bfdc      	itt	le
 80005ca:	ea41 010c 	orrle.w	r1, r1, ip
 80005ce:	4090      	lslle	r0, r2
 80005d0:	1ae4      	subs	r4, r4, r3
 80005d2:	bfa2      	ittt	ge
 80005d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005d8:	4329      	orrge	r1, r5
 80005da:	bd30      	popge	{r4, r5, pc}
 80005dc:	ea6f 0404 	mvn.w	r4, r4
 80005e0:	3c1f      	subs	r4, #31
 80005e2:	da1c      	bge.n	800061e <__adddf3+0x1d2>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc0e      	bgt.n	8000606 <__adddf3+0x1ba>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0220 	rsb	r2, r4, #32
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f302 	lsl.w	r3, r1, r2
 80005f8:	ea40 0003 	orr.w	r0, r0, r3
 80005fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000600:	ea45 0103 	orr.w	r1, r5, r3
 8000604:	bd30      	pop	{r4, r5, pc}
 8000606:	f1c4 040c 	rsb	r4, r4, #12
 800060a:	f1c4 0220 	rsb	r2, r4, #32
 800060e:	fa20 f002 	lsr.w	r0, r0, r2
 8000612:	fa01 f304 	lsl.w	r3, r1, r4
 8000616:	ea40 0003 	orr.w	r0, r0, r3
 800061a:	4629      	mov	r1, r5
 800061c:	bd30      	pop	{r4, r5, pc}
 800061e:	fa21 f004 	lsr.w	r0, r1, r4
 8000622:	4629      	mov	r1, r5
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	f094 0f00 	teq	r4, #0
 800062a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800062e:	bf06      	itte	eq
 8000630:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000634:	3401      	addeq	r4, #1
 8000636:	3d01      	subne	r5, #1
 8000638:	e74e      	b.n	80004d8 <__adddf3+0x8c>
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf18      	it	ne
 8000640:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000644:	d029      	beq.n	800069a <__adddf3+0x24e>
 8000646:	ea94 0f05 	teq	r4, r5
 800064a:	bf08      	it	eq
 800064c:	ea90 0f02 	teqeq	r0, r2
 8000650:	d005      	beq.n	800065e <__adddf3+0x212>
 8000652:	ea54 0c00 	orrs.w	ip, r4, r0
 8000656:	bf04      	itt	eq
 8000658:	4619      	moveq	r1, r3
 800065a:	4610      	moveq	r0, r2
 800065c:	bd30      	pop	{r4, r5, pc}
 800065e:	ea91 0f03 	teq	r1, r3
 8000662:	bf1e      	ittt	ne
 8000664:	2100      	movne	r1, #0
 8000666:	2000      	movne	r0, #0
 8000668:	bd30      	popne	{r4, r5, pc}
 800066a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800066e:	d105      	bne.n	800067c <__adddf3+0x230>
 8000670:	0040      	lsls	r0, r0, #1
 8000672:	4149      	adcs	r1, r1
 8000674:	bf28      	it	cs
 8000676:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800067a:	bd30      	pop	{r4, r5, pc}
 800067c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000680:	bf3c      	itt	cc
 8000682:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000686:	bd30      	popcc	{r4, r5, pc}
 8000688:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800068c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000690:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000694:	f04f 0000 	mov.w	r0, #0
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800069e:	bf1a      	itte	ne
 80006a0:	4619      	movne	r1, r3
 80006a2:	4610      	movne	r0, r2
 80006a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006a8:	bf1c      	itt	ne
 80006aa:	460b      	movne	r3, r1
 80006ac:	4602      	movne	r2, r0
 80006ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006b2:	bf06      	itte	eq
 80006b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006b8:	ea91 0f03 	teqeq	r1, r3
 80006bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	bf00      	nop

080006c4 <__aeabi_ui2d>:
 80006c4:	f090 0f00 	teq	r0, #0
 80006c8:	bf04      	itt	eq
 80006ca:	2100      	moveq	r1, #0
 80006cc:	4770      	bxeq	lr
 80006ce:	b530      	push	{r4, r5, lr}
 80006d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d8:	f04f 0500 	mov.w	r5, #0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e750      	b.n	8000584 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_i2d>:
 80006e4:	f090 0f00 	teq	r0, #0
 80006e8:	bf04      	itt	eq
 80006ea:	2100      	moveq	r1, #0
 80006ec:	4770      	bxeq	lr
 80006ee:	b530      	push	{r4, r5, lr}
 80006f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006fc:	bf48      	it	mi
 80006fe:	4240      	negmi	r0, r0
 8000700:	f04f 0100 	mov.w	r1, #0
 8000704:	e73e      	b.n	8000584 <__adddf3+0x138>
 8000706:	bf00      	nop

08000708 <__aeabi_f2d>:
 8000708:	0042      	lsls	r2, r0, #1
 800070a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800070e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000712:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000716:	bf1f      	itttt	ne
 8000718:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800071c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000720:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000724:	4770      	bxne	lr
 8000726:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800072a:	bf08      	it	eq
 800072c:	4770      	bxeq	lr
 800072e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000732:	bf04      	itt	eq
 8000734:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000738:	4770      	bxeq	lr
 800073a:	b530      	push	{r4, r5, lr}
 800073c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000740:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000744:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000748:	e71c      	b.n	8000584 <__adddf3+0x138>
 800074a:	bf00      	nop

0800074c <__aeabi_ul2d>:
 800074c:	ea50 0201 	orrs.w	r2, r0, r1
 8000750:	bf08      	it	eq
 8000752:	4770      	bxeq	lr
 8000754:	b530      	push	{r4, r5, lr}
 8000756:	f04f 0500 	mov.w	r5, #0
 800075a:	e00a      	b.n	8000772 <__aeabi_l2d+0x16>

0800075c <__aeabi_l2d>:
 800075c:	ea50 0201 	orrs.w	r2, r0, r1
 8000760:	bf08      	it	eq
 8000762:	4770      	bxeq	lr
 8000764:	b530      	push	{r4, r5, lr}
 8000766:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800076a:	d502      	bpl.n	8000772 <__aeabi_l2d+0x16>
 800076c:	4240      	negs	r0, r0
 800076e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000772:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000776:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800077e:	f43f aed8 	beq.w	8000532 <__adddf3+0xe6>
 8000782:	f04f 0203 	mov.w	r2, #3
 8000786:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800078a:	bf18      	it	ne
 800078c:	3203      	addne	r2, #3
 800078e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000792:	bf18      	it	ne
 8000794:	3203      	addne	r2, #3
 8000796:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800079a:	f1c2 0320 	rsb	r3, r2, #32
 800079e:	fa00 fc03 	lsl.w	ip, r0, r3
 80007a2:	fa20 f002 	lsr.w	r0, r0, r2
 80007a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80007aa:	ea40 000e 	orr.w	r0, r0, lr
 80007ae:	fa21 f102 	lsr.w	r1, r1, r2
 80007b2:	4414      	add	r4, r2
 80007b4:	e6bd      	b.n	8000532 <__adddf3+0xe6>
 80007b6:	bf00      	nop

080007b8 <__aeabi_d2uiz>:
 80007b8:	004a      	lsls	r2, r1, #1
 80007ba:	d211      	bcs.n	80007e0 <__aeabi_d2uiz+0x28>
 80007bc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007c0:	d211      	bcs.n	80007e6 <__aeabi_d2uiz+0x2e>
 80007c2:	d50d      	bpl.n	80007e0 <__aeabi_d2uiz+0x28>
 80007c4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007c8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007cc:	d40e      	bmi.n	80007ec <__aeabi_d2uiz+0x34>
 80007ce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007d6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007da:	fa23 f002 	lsr.w	r0, r3, r2
 80007de:	4770      	bx	lr
 80007e0:	f04f 0000 	mov.w	r0, #0
 80007e4:	4770      	bx	lr
 80007e6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007ea:	d102      	bne.n	80007f2 <__aeabi_d2uiz+0x3a>
 80007ec:	f04f 30ff 	mov.w	r0, #4294967295
 80007f0:	4770      	bx	lr
 80007f2:	f04f 0000 	mov.w	r0, #0
 80007f6:	4770      	bx	lr

080007f8 <HAL_UART_RxCpltCallback>:
char STATE[3] = {' '} ;
char PARAM1[3] = {' '} ;
char PARAM2[3] ={' '};
char Custom_Morse_Msg[3] = {' '};

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]

	// store recieved characters one at at time
	set_or_ret_sys_state[num_characters] = recvd_char[0] ;
 8000800:	4b1d      	ldr	r3, [pc, #116]	; (8000878 <HAL_UART_RxCpltCallback+0x80>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	461a      	mov	r2, r3
 8000806:	4b1d      	ldr	r3, [pc, #116]	; (800087c <HAL_UART_RxCpltCallback+0x84>)
 8000808:	7819      	ldrb	r1, [r3, #0]
 800080a:	4b1d      	ldr	r3, [pc, #116]	; (8000880 <HAL_UART_RxCpltCallback+0x88>)
 800080c:	5499      	strb	r1, [r3, r2]

	num_characters++ ;
 800080e:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <HAL_UART_RxCpltCallback+0x80>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	3301      	adds	r3, #1
 8000814:	b2da      	uxtb	r2, r3
 8000816:	4b18      	ldr	r3, [pc, #96]	; (8000878 <HAL_UART_RxCpltCallback+0x80>)
 8000818:	701a      	strb	r2, [r3, #0]

	if(recvd_char[0] == '\n'){
 800081a:	4b18      	ldr	r3, [pc, #96]	; (800087c <HAL_UART_RxCpltCallback+0x84>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2b0a      	cmp	r3, #10
 8000820:	d121      	bne.n	8000866 <HAL_UART_RxCpltCallback+0x6e>
		if(num_characters == 19){
 8000822:	4b15      	ldr	r3, [pc, #84]	; (8000878 <HAL_UART_RxCpltCallback+0x80>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	2b13      	cmp	r3, #19
 8000828:	d108      	bne.n	800083c <HAL_UART_RxCpltCallback+0x44>
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)"set mode\n",9 ) ;
 800082a:	2209      	movs	r2, #9
 800082c:	4915      	ldr	r1, [pc, #84]	; (8000884 <HAL_UART_RxCpltCallback+0x8c>)
 800082e:	4816      	ldr	r0, [pc, #88]	; (8000888 <HAL_UART_RxCpltCallback+0x90>)
 8000830:	f006 f864 	bl	80068fc <HAL_UART_Transmit_IT>
			UART_set_syst_state = 1 ;
 8000834:	4b15      	ldr	r3, [pc, #84]	; (800088c <HAL_UART_RxCpltCallback+0x94>)
 8000836:	2201      	movs	r2, #1
 8000838:	701a      	strb	r2, [r3, #0]
 800083a:	e011      	b.n	8000860 <HAL_UART_RxCpltCallback+0x68>
		}else if( num_characters == 7){
 800083c:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <HAL_UART_RxCpltCallback+0x80>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	2b07      	cmp	r3, #7
 8000842:	d108      	bne.n	8000856 <HAL_UART_RxCpltCallback+0x5e>
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)"request mode\n", 13) ;
 8000844:	220d      	movs	r2, #13
 8000846:	4912      	ldr	r1, [pc, #72]	; (8000890 <HAL_UART_RxCpltCallback+0x98>)
 8000848:	480f      	ldr	r0, [pc, #60]	; (8000888 <HAL_UART_RxCpltCallback+0x90>)
 800084a:	f006 f857 	bl	80068fc <HAL_UART_Transmit_IT>
			UART_ret_sys_state = 1 ;
 800084e:	4b11      	ldr	r3, [pc, #68]	; (8000894 <HAL_UART_RxCpltCallback+0x9c>)
 8000850:	2201      	movs	r2, #1
 8000852:	701a      	strb	r2, [r3, #0]
 8000854:	e004      	b.n	8000860 <HAL_UART_RxCpltCallback+0x68>
		}else{
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)"Incorrect status request size\n", 30) ;
 8000856:	221e      	movs	r2, #30
 8000858:	490f      	ldr	r1, [pc, #60]	; (8000898 <HAL_UART_RxCpltCallback+0xa0>)
 800085a:	480b      	ldr	r0, [pc, #44]	; (8000888 <HAL_UART_RxCpltCallback+0x90>)
 800085c:	f006 f84e 	bl	80068fc <HAL_UART_Transmit_IT>
		}

		num_characters =  0;
 8000860:	4b05      	ldr	r3, [pc, #20]	; (8000878 <HAL_UART_RxCpltCallback+0x80>)
 8000862:	2200      	movs	r2, #0
 8000864:	701a      	strb	r2, [r3, #0]

	}
	// recieve character - re-prime receiver to receive single characters at a time
	HAL_UART_Receive_IT(&huart2, (uint8_t*)recvd_char, 1);
 8000866:	2201      	movs	r2, #1
 8000868:	4904      	ldr	r1, [pc, #16]	; (800087c <HAL_UART_RxCpltCallback+0x84>)
 800086a:	4807      	ldr	r0, [pc, #28]	; (8000888 <HAL_UART_RxCpltCallback+0x90>)
 800086c:	f006 f8a4 	bl	80069b8 <HAL_UART_Receive_IT>
}
 8000870:	bf00      	nop
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20002321 	.word	0x20002321
 800087c:	20002320 	.word	0x20002320
 8000880:	20000044 	.word	0x20000044
 8000884:	080081d4 	.word	0x080081d4
 8000888:	2000026c 	.word	0x2000026c
 800088c:	20002322 	.word	0x20002322
 8000890:	080081e0 	.word	0x080081e0
 8000894:	20002323 	.word	0x20002323
 8000898:	080081f0 	.word	0x080081f0
 800089c:	00000000 	.word	0x00000000

080008a0 <adc_dma_val_processing>:

/**
 * scale up transmit ADC values
 */

void adc_dma_val_processing(){
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0

	if(adc_conv_complete == 1){
 80008a6:	4b3c      	ldr	r3, [pc, #240]	; (8000998 <adc_dma_val_processing+0xf8>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d142      	bne.n	8000934 <adc_dma_val_processing+0x94>

		adc_conv_complete =0  ;
 80008ae:	4b3a      	ldr	r3, [pc, #232]	; (8000998 <adc_dma_val_processing+0xf8>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	701a      	strb	r2, [r3, #0]
		sum = 0 ;
 80008b4:	4b39      	ldr	r3, [pc, #228]	; (800099c <adc_dma_val_processing+0xfc>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
		for(int i = 0 ; i < adc_buf_len ; i++){
 80008ba:	2300      	movs	r3, #0
 80008bc:	607b      	str	r3, [r7, #4]
 80008be:	e00c      	b.n	80008da <adc_dma_val_processing+0x3a>
			sum += adc_buf[i] ;
 80008c0:	4a37      	ldr	r2, [pc, #220]	; (80009a0 <adc_dma_val_processing+0x100>)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008c8:	461a      	mov	r2, r3
 80008ca:	4b34      	ldr	r3, [pc, #208]	; (800099c <adc_dma_val_processing+0xfc>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4413      	add	r3, r2
 80008d0:	4a32      	ldr	r2, [pc, #200]	; (800099c <adc_dma_val_processing+0xfc>)
 80008d2:	6013      	str	r3, [r2, #0]
		for(int i = 0 ; i < adc_buf_len ; i++){
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	3301      	adds	r3, #1
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80008e0:	dbee      	blt.n	80008c0 <adc_dma_val_processing+0x20>
		}
		raw_adc_dma_val =(uint16_t)(sum/adc_buf_len) ;
 80008e2:	4b2e      	ldr	r3, [pc, #184]	; (800099c <adc_dma_val_processing+0xfc>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	da01      	bge.n	80008ee <adc_dma_val_processing+0x4e>
 80008ea:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80008ee:	131b      	asrs	r3, r3, #12
 80008f0:	b29a      	uxth	r2, r3
 80008f2:	4b2c      	ldr	r3, [pc, #176]	; (80009a4 <adc_dma_val_processing+0x104>)
 80008f4:	801a      	strh	r2, [r3, #0]

		scaled_adc_val = (uint16_t)raw_adc_dma_val*adc_scale_up ; //adc scaled to max =4095
 80008f6:	4b2b      	ldr	r3, [pc, #172]	; (80009a4 <adc_dma_val_processing+0x104>)
 80008f8:	881b      	ldrh	r3, [r3, #0]
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff fef2 	bl	80006e4 <__aeabi_i2d>
 8000900:	4b29      	ldr	r3, [pc, #164]	; (80009a8 <adc_dma_val_processing+0x108>)
 8000902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000906:	f7ff fc71 	bl	80001ec <__aeabi_dmul>
 800090a:	4602      	mov	r2, r0
 800090c:	460b      	mov	r3, r1
 800090e:	4610      	mov	r0, r2
 8000910:	4619      	mov	r1, r3
 8000912:	f7ff ff51 	bl	80007b8 <__aeabi_d2uiz>
 8000916:	4603      	mov	r3, r0
 8000918:	b29a      	uxth	r2, r3
 800091a:	4b24      	ldr	r3, [pc, #144]	; (80009ac <adc_dma_val_processing+0x10c>)
 800091c:	801a      	strh	r2, [r3, #0]

		//capture previous adc cal
		if(adc_val_capture == 1){
 800091e:	4b24      	ldr	r3, [pc, #144]	; (80009b0 <adc_dma_val_processing+0x110>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	2b01      	cmp	r3, #1
 8000924:	d106      	bne.n	8000934 <adc_dma_val_processing+0x94>
			adc_val_snapshot = scaled_adc_val ;
 8000926:	4b21      	ldr	r3, [pc, #132]	; (80009ac <adc_dma_val_processing+0x10c>)
 8000928:	881a      	ldrh	r2, [r3, #0]
 800092a:	4b22      	ldr	r3, [pc, #136]	; (80009b4 <adc_dma_val_processing+0x114>)
 800092c:	801a      	strh	r2, [r3, #0]
			adc_val_capture = 0 ;
 800092e:	4b20      	ldr	r3, [pc, #128]	; (80009b0 <adc_dma_val_processing+0x110>)
 8000930:	2200      	movs	r2, #0
 8000932:	701a      	strb	r2, [r3, #0]
		}
	}

	// if ADC movement significant update LED intensity
	if(abs(scaled_adc_val - adc_val_snapshot) >15){
 8000934:	4b1d      	ldr	r3, [pc, #116]	; (80009ac <adc_dma_val_processing+0x10c>)
 8000936:	881b      	ldrh	r3, [r3, #0]
 8000938:	461a      	mov	r2, r3
 800093a:	4b1e      	ldr	r3, [pc, #120]	; (80009b4 <adc_dma_val_processing+0x114>)
 800093c:	881b      	ldrh	r3, [r3, #0]
 800093e:	1ad3      	subs	r3, r2, r3
 8000940:	2b00      	cmp	r3, #0
 8000942:	bfb8      	it	lt
 8000944:	425b      	neglt	r3, r3
 8000946:	2b0f      	cmp	r3, #15
 8000948:	dd02      	ble.n	8000950 <adc_dma_val_processing+0xb0>
	  update_led_via_ADC = 1 ;
 800094a:	4b1b      	ldr	r3, [pc, #108]	; (80009b8 <adc_dma_val_processing+0x118>)
 800094c:	2201      	movs	r2, #1
 800094e:	701a      	strb	r2, [r3, #0]
	}

//	 WHITE LED intensity
	LED_intensity =(float)(scaled_adc_val)*(512.0/4095.0)  ;
 8000950:	4b16      	ldr	r3, [pc, #88]	; (80009ac <adc_dma_val_processing+0x10c>)
 8000952:	881b      	ldrh	r3, [r3, #0]
 8000954:	ee07 3a90 	vmov	s15, r3
 8000958:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800095c:	ee17 0a90 	vmov	r0, s15
 8000960:	f7ff fed2 	bl	8000708 <__aeabi_f2d>
 8000964:	a30a      	add	r3, pc, #40	; (adr r3, 8000990 <adc_dma_val_processing+0xf0>)
 8000966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800096a:	f7ff fc3f 	bl	80001ec <__aeabi_dmul>
 800096e:	4602      	mov	r2, r0
 8000970:	460b      	mov	r3, r1
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	f7ff ff1f 	bl	80007b8 <__aeabi_d2uiz>
 800097a:	4603      	mov	r3, r0
 800097c:	b29a      	uxth	r2, r3
 800097e:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <adc_dma_val_processing+0x11c>)
 8000980:	801a      	strh	r2, [r3, #0]
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	f3af 8000 	nop.w
 8000990:	10010010 	.word	0x10010010
 8000994:	3fc00100 	.word	0x3fc00100
 8000998:	20002306 	.word	0x20002306
 800099c:	20002300 	.word	0x20002300
 80009a0:	200002fc 	.word	0x200002fc
 80009a4:	200022fc 	.word	0x200022fc
 80009a8:	20000008 	.word	0x20000008
 80009ac:	20002308 	.word	0x20002308
 80009b0:	20000002 	.word	0x20000002
 80009b4:	20002304 	.word	0x20002304
 80009b8:	2000230a 	.word	0x2000230a
 80009bc:	20000010 	.word	0x20000010

080009c0 <system_state_update>:

void system_state_update(){
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
	 if(left_button_pressed ==1 && UART_set_syst_state == 0 && UART_ret_sys_state == 0 ){
 80009c4:	4b3a      	ldr	r3, [pc, #232]	; (8000ab0 <system_state_update+0xf0>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d12d      	bne.n	8000a28 <system_state_update+0x68>
 80009cc:	4b39      	ldr	r3, [pc, #228]	; (8000ab4 <system_state_update+0xf4>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d129      	bne.n	8000a28 <system_state_update+0x68>
 80009d4:	4b38      	ldr	r3, [pc, #224]	; (8000ab8 <system_state_update+0xf8>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d125      	bne.n	8000a28 <system_state_update+0x68>

		 button_count++ ;
 80009dc:	4b37      	ldr	r3, [pc, #220]	; (8000abc <system_state_update+0xfc>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	3301      	adds	r3, #1
 80009e2:	4a36      	ldr	r2, [pc, #216]	; (8000abc <system_state_update+0xfc>)
 80009e4:	6013      	str	r3, [r2, #0]
		 if(button_count > 2){
 80009e6:	4b35      	ldr	r3, [pc, #212]	; (8000abc <system_state_update+0xfc>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	2b02      	cmp	r3, #2
 80009ec:	dd02      	ble.n	80009f4 <system_state_update+0x34>
			 button_count = 0 ;
 80009ee:	4b33      	ldr	r3, [pc, #204]	; (8000abc <system_state_update+0xfc>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
		 }
		 update_led_via_ADC =  0 ; // don't read ADC by default in next state
 80009f4:	4b32      	ldr	r3, [pc, #200]	; (8000ac0 <system_state_update+0x100>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	701a      	strb	r2, [r3, #0]
		 // snapshot of ADC taken in next state
		 if(adc_conv_complete == 1){
 80009fa:	4b32      	ldr	r3, [pc, #200]	; (8000ac4 <system_state_update+0x104>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d102      	bne.n	8000a08 <system_state_update+0x48>
			 adc_val_capture =1  ; // capture ADC value
 8000a02:	4b31      	ldr	r3, [pc, #196]	; (8000ac8 <system_state_update+0x108>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	701a      	strb	r2, [r3, #0]
		 }

		 // Emergency MODE DEFAULT
		 if(button_count != 1){
 8000a08:	4b2c      	ldr	r3, [pc, #176]	; (8000abc <system_state_update+0xfc>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d007      	beq.n	8000a20 <system_state_update+0x60>
			 strobe_led_Intensity = 256 ;
 8000a10:	4b2e      	ldr	r3, [pc, #184]	; (8000acc <system_state_update+0x10c>)
 8000a12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a16:	801a      	strh	r2, [r3, #0]
			 strobe_delay = 512;
 8000a18:	4b2d      	ldr	r3, [pc, #180]	; (8000ad0 <system_state_update+0x110>)
 8000a1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a1e:	801a      	strh	r2, [r3, #0]
		 }

		 left_button_pressed = 0 ;
 8000a20:	4b23      	ldr	r3, [pc, #140]	; (8000ab0 <system_state_update+0xf0>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	701a      	strb	r2, [r3, #0]
 8000a26:	e03d      	b.n	8000aa4 <system_state_update+0xe4>

	 }else if( UART_set_syst_state == 1 && left_button_pressed == 0 && UART_ret_sys_state ==0){ // System state update to come from only one source
 8000a28:	4b22      	ldr	r3, [pc, #136]	; (8000ab4 <system_state_update+0xf4>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d125      	bne.n	8000a7c <system_state_update+0xbc>
 8000a30:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <system_state_update+0xf0>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d121      	bne.n	8000a7c <system_state_update+0xbc>
 8000a38:	4b1f      	ldr	r3, [pc, #124]	; (8000ab8 <system_state_update+0xf8>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d11d      	bne.n	8000a7c <system_state_update+0xbc>
		 UART_set_syst_state = 0;
 8000a40:	4b1c      	ldr	r3, [pc, #112]	; (8000ab4 <system_state_update+0xf4>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	701a      	strb	r2, [r3, #0]
		 UART_state_update =1;
 8000a46:	4b23      	ldr	r3, [pc, #140]	; (8000ad4 <system_state_update+0x114>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	701a      	strb	r2, [r3, #0]

		 if(set_or_ret_sys_state[3] == 'F'){
 8000a4c:	4b22      	ldr	r3, [pc, #136]	; (8000ad8 <system_state_update+0x118>)
 8000a4e:	78db      	ldrb	r3, [r3, #3]
 8000a50:	2b46      	cmp	r3, #70	; 0x46
 8000a52:	d103      	bne.n	8000a5c <system_state_update+0x9c>
			 button_count =0 ;
 8000a54:	4b19      	ldr	r3, [pc, #100]	; (8000abc <system_state_update+0xfc>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
		 if(set_or_ret_sys_state[3] == 'F'){
 8000a5a:	e022      	b.n	8000aa2 <system_state_update+0xe2>
		 }
		 else if(set_or_ret_sys_state[3] =='E'){
 8000a5c:	4b1e      	ldr	r3, [pc, #120]	; (8000ad8 <system_state_update+0x118>)
 8000a5e:	78db      	ldrb	r3, [r3, #3]
 8000a60:	2b45      	cmp	r3, #69	; 0x45
 8000a62:	d103      	bne.n	8000a6c <system_state_update+0xac>
			 button_count =1;
 8000a64:	4b15      	ldr	r3, [pc, #84]	; (8000abc <system_state_update+0xfc>)
 8000a66:	2201      	movs	r2, #1
 8000a68:	601a      	str	r2, [r3, #0]
		 if(set_or_ret_sys_state[3] == 'F'){
 8000a6a:	e01a      	b.n	8000aa2 <system_state_update+0xe2>

		 }else{
			 if(set_or_ret_sys_state[3] == 'M'){
 8000a6c:	4b1a      	ldr	r3, [pc, #104]	; (8000ad8 <system_state_update+0x118>)
 8000a6e:	78db      	ldrb	r3, [r3, #3]
 8000a70:	2b4d      	cmp	r3, #77	; 0x4d
 8000a72:	d116      	bne.n	8000aa2 <system_state_update+0xe2>
				 button_count =2 ;
 8000a74:	4b11      	ldr	r3, [pc, #68]	; (8000abc <system_state_update+0xfc>)
 8000a76:	2202      	movs	r2, #2
 8000a78:	601a      	str	r2, [r3, #0]
		 if(set_or_ret_sys_state[3] == 'F'){
 8000a7a:	e012      	b.n	8000aa2 <system_state_update+0xe2>

			 }
		 }
	 }else{ //dont update the system in any way - read current and previous states
		 if( UART_set_syst_state == 0 && left_button_pressed == 0 && UART_ret_sys_state ==1){
 8000a7c:	4b0d      	ldr	r3, [pc, #52]	; (8000ab4 <system_state_update+0xf4>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d10f      	bne.n	8000aa4 <system_state_update+0xe4>
 8000a84:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <system_state_update+0xf0>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d10b      	bne.n	8000aa4 <system_state_update+0xe4>
 8000a8c:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <system_state_update+0xf8>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d107      	bne.n	8000aa4 <system_state_update+0xe4>
			 UART_ret_sys_state = 0;
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <system_state_update+0xf8>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	701a      	strb	r2, [r3, #0]
			 READ_SYS =1;
 8000a9a:	4b10      	ldr	r3, [pc, #64]	; (8000adc <system_state_update+0x11c>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	701a      	strb	r2, [r3, #0]

		 }
	 }
}
 8000aa0:	e000      	b.n	8000aa4 <system_state_update+0xe4>
		 if(set_or_ret_sys_state[3] == 'F'){
 8000aa2:	bf00      	nop
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	20002336 	.word	0x20002336
 8000ab4:	20002322 	.word	0x20002322
 8000ab8:	20002323 	.word	0x20002323
 8000abc:	200002f4 	.word	0x200002f4
 8000ac0:	2000230a 	.word	0x2000230a
 8000ac4:	20002306 	.word	0x20002306
 8000ac8:	20000002 	.word	0x20000002
 8000acc:	20000014 	.word	0x20000014
 8000ad0:	20000012 	.word	0x20000012
 8000ad4:	20002324 	.word	0x20002324
 8000ad8:	20000044 	.word	0x20000044
 8000adc:	2000232c 	.word	0x2000232c

08000ae0 <right_button_state_update>:

/**
 * Updates system state after right button pressed in emergency mode
 */
void right_button_state_update(){
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
	if(button_count == 1){
 8000ae4:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <right_button_state_update+0x5c>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d117      	bne.n	8000b1c <right_button_state_update+0x3c>
		if(right_button_pressed){
 8000aec:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <right_button_state_update+0x60>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d01e      	beq.n	8000b32 <right_button_state_update+0x52>
			right_button_pressed = 0 ;
 8000af4:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <right_button_state_update+0x60>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	701a      	strb	r2, [r3, #0]

			update_led_via_ADC = 0 ; // dont read adc by default in next state
 8000afa:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <right_button_state_update+0x64>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	701a      	strb	r2, [r3, #0]

			 em_count++ ;
 8000b00:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <right_button_state_update+0x68>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	3301      	adds	r3, #1
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <right_button_state_update+0x68>)
 8000b0a:	701a      	strb	r2, [r3, #0]

			 if(em_count>2){
 8000b0c:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <right_button_state_update+0x68>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	2b02      	cmp	r3, #2
 8000b12:	d90e      	bls.n	8000b32 <right_button_state_update+0x52>
				 em_count = 0;
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <right_button_state_update+0x68>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	701a      	strb	r2, [r3, #0]
		}
	}else if( button_count != 1 && right_button_pressed){
		right_button_pressed = 0; //do not read right button presses triggered
								  // in other states except emergency mode
	}
}
 8000b1a:	e00a      	b.n	8000b32 <right_button_state_update+0x52>
	}else if( button_count != 1 && right_button_pressed){
 8000b1c:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <right_button_state_update+0x5c>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d006      	beq.n	8000b32 <right_button_state_update+0x52>
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <right_button_state_update+0x60>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d002      	beq.n	8000b32 <right_button_state_update+0x52>
		right_button_pressed = 0; //do not read right button presses triggered
 8000b2c:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <right_button_state_update+0x60>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	701a      	strb	r2, [r3, #0]
}
 8000b32:	bf00      	nop
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	200002f4 	.word	0x200002f4
 8000b40:	20002335 	.word	0x20002335
 8000b44:	2000230a 	.word	0x2000230a
 8000b48:	200002f8 	.word	0x200002f8

08000b4c <TURN_LED_ON_OFF>:

/**
 * Middle button press turns LED ON/OFF
 */
void TURN_LED_ON_OFF(){
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
	if(middle_button_pressed == 1){
 8000b50:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <TURN_LED_ON_OFF+0x54>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d11d      	bne.n	8000b94 <TURN_LED_ON_OFF+0x48>
		 LED_ON = !LED_ON ;  // turns the LED on OR off
 8000b58:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <TURN_LED_ON_OFF+0x58>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	bf0c      	ite	eq
 8000b60:	2301      	moveq	r3, #1
 8000b62:	2300      	movne	r3, #0
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	461a      	mov	r2, r3
 8000b68:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <TURN_LED_ON_OFF+0x58>)
 8000b6a:	701a      	strb	r2, [r3, #0]

		 // Middle button press -> LED ON / OFF
		 if(LED_ON == 1){
 8000b6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <TURN_LED_ON_OFF+0x58>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d104      	bne.n	8000b7e <TURN_LED_ON_OFF+0x32>
			 htim2.Instance->CCR1 = 1 ; // LED ON
 8000b74:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <TURN_LED_ON_OFF+0x5c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2201      	movs	r2, #1
 8000b7a:	635a      	str	r2, [r3, #52]	; 0x34
 8000b7c:	e007      	b.n	8000b8e <TURN_LED_ON_OFF+0x42>
		 }else if(LED_ON ==0){
 8000b7e:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <TURN_LED_ON_OFF+0x58>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d103      	bne.n	8000b8e <TURN_LED_ON_OFF+0x42>
			 htim2.Instance->CCR1 = 0 ; //LED OFFS
 8000b86:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <TURN_LED_ON_OFF+0x5c>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	635a      	str	r2, [r3, #52]	; 0x34
		 }

		 middle_button_pressed = 0 ;
 8000b8e:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <TURN_LED_ON_OFF+0x54>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	701a      	strb	r2, [r3, #0]
	 }
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	20002334 	.word	0x20002334
 8000ba4:	2000230b 	.word	0x2000230b
 8000ba8:	20000188 	.word	0x20000188

08000bac <EM_mode_Strobe>:

/**
 * LED strobed with provided number of ms
 */
void EM_mode_Strobe(uint16_t strobe_delay){
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	80fb      	strh	r3, [r7, #6]

	 // default delay 512ms
	 timePassed =HAL_GetTick() - strobe_ticks ;
 8000bb6:	f001 fb0d 	bl	80021d4 <HAL_GetTick>
 8000bba:	4602      	mov	r2, r0
 8000bbc:	4b1c      	ldr	r3, [pc, #112]	; (8000c30 <EM_mode_Strobe+0x84>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	4a1c      	ldr	r2, [pc, #112]	; (8000c34 <EM_mode_Strobe+0x88>)
 8000bc4:	6013      	str	r3, [r2, #0]
	 // time passed >512
	 if( timePassed >= strobe_delay && led_strobe_on == 0){
 8000bc6:	88fa      	ldrh	r2, [r7, #6]
 8000bc8:	4b1a      	ldr	r3, [pc, #104]	; (8000c34 <EM_mode_Strobe+0x88>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d80a      	bhi.n	8000be6 <EM_mode_Strobe+0x3a>
 8000bd0:	4b19      	ldr	r3, [pc, #100]	; (8000c38 <EM_mode_Strobe+0x8c>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d106      	bne.n	8000be6 <EM_mode_Strobe+0x3a>
		 led_strobe_on =1 ;
 8000bd8:	4b17      	ldr	r3, [pc, #92]	; (8000c38 <EM_mode_Strobe+0x8c>)
 8000bda:	2201      	movs	r2, #1
 8000bdc:	701a      	strb	r2, [r3, #0]
		 htim2.Instance->CCR1 = 0 ;
 8000bde:	4b17      	ldr	r3, [pc, #92]	; (8000c3c <EM_mode_Strobe+0x90>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	2200      	movs	r2, #0
 8000be4:	635a      	str	r2, [r3, #52]	; 0x34
	 }
	 // time Passed > 1024
	 if(timePassed >= 1024 && led_strobe_on == 1){
 8000be6:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <EM_mode_Strobe+0x88>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bee:	d31a      	bcc.n	8000c26 <EM_mode_Strobe+0x7a>
 8000bf0:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <EM_mode_Strobe+0x8c>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d116      	bne.n	8000c26 <EM_mode_Strobe+0x7a>
		 strobe_ticks =  HAL_GetTick() ; // update current time
 8000bf8:	f001 faec 	bl	80021d4 <HAL_GetTick>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	4a0c      	ldr	r2, [pc, #48]	; (8000c30 <EM_mode_Strobe+0x84>)
 8000c00:	6013      	str	r3, [r2, #0]
		 led_strobe_on = 0 ;
 8000c02:	4b0d      	ldr	r3, [pc, #52]	; (8000c38 <EM_mode_Strobe+0x8c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	701a      	strb	r2, [r3, #0]

		 if(update_led_via_ADC ==1){ // update LED intensity if the slider moved
 8000c08:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <EM_mode_Strobe+0x94>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d105      	bne.n	8000c1c <EM_mode_Strobe+0x70>
			 htim2.Instance->CCR1 = LED_intensity ;
 8000c10:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <EM_mode_Strobe+0x98>)
 8000c12:	881a      	ldrh	r2, [r3, #0]
 8000c14:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <EM_mode_Strobe+0x90>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	635a      	str	r2, [r3, #52]	; 0x34
		 }
	 }

	 // restore

}
 8000c1a:	e004      	b.n	8000c26 <EM_mode_Strobe+0x7a>
			 htim2.Instance->CCR1 = strobe_led_Intensity;
 8000c1c:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <EM_mode_Strobe+0x9c>)
 8000c1e:	881a      	ldrh	r2, [r3, #0]
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <EM_mode_Strobe+0x90>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	2000230c 	.word	0x2000230c
 8000c34:	20002314 	.word	0x20002314
 8000c38:	20002310 	.word	0x20002310
 8000c3c:	20000188 	.word	0x20000188
 8000c40:	2000230a 	.word	0x2000230a
 8000c44:	20000010 	.word	0x20000010
 8000c48:	20000014 	.word	0x20000014

08000c4c <convert_UART_state_params_to_Int>:
void convert_UART_state_params_to_Int(){
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
	if(UART_set_syst_state) {
 8000c52:	4b59      	ldr	r3, [pc, #356]	; (8000db8 <convert_UART_state_params_to_Int+0x16c>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	f000 80aa 	beq.w	8000db0 <convert_UART_state_params_to_Int+0x164>
		for(int i = 0; i < 19 ; i++){
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	e05f      	b.n	8000d22 <convert_UART_state_params_to_Int+0xd6>
			switch(i){
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	3b05      	subs	r3, #5
 8000c66:	2b0a      	cmp	r3, #10
 8000c68:	d857      	bhi.n	8000d1a <convert_UART_state_params_to_Int+0xce>
 8000c6a:	a201      	add	r2, pc, #4	; (adr r2, 8000c70 <convert_UART_state_params_to_Int+0x24>)
 8000c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c70:	08000c9d 	.word	0x08000c9d
 8000c74:	08000cab 	.word	0x08000cab
 8000c78:	08000cb9 	.word	0x08000cb9
 8000c7c:	08000d1b 	.word	0x08000d1b
 8000c80:	08000cc7 	.word	0x08000cc7
 8000c84:	08000cd5 	.word	0x08000cd5
 8000c88:	08000ce3 	.word	0x08000ce3
 8000c8c:	08000d1b 	.word	0x08000d1b
 8000c90:	08000cf1 	.word	0x08000cf1
 8000c94:	08000cff 	.word	0x08000cff
 8000c98:	08000d0d 	.word	0x08000d0d
			case 5:
				STATE[0]= set_or_ret_sys_state[i] ;
 8000c9c:	4a47      	ldr	r2, [pc, #284]	; (8000dbc <convert_UART_state_params_to_Int+0x170>)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	781a      	ldrb	r2, [r3, #0]
 8000ca4:	4b46      	ldr	r3, [pc, #280]	; (8000dc0 <convert_UART_state_params_to_Int+0x174>)
 8000ca6:	701a      	strb	r2, [r3, #0]
				break;
 8000ca8:	e038      	b.n	8000d1c <convert_UART_state_params_to_Int+0xd0>
			case 6:
				STATE[1]= set_or_ret_sys_state[i] ;
 8000caa:	4a44      	ldr	r2, [pc, #272]	; (8000dbc <convert_UART_state_params_to_Int+0x170>)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4413      	add	r3, r2
 8000cb0:	781a      	ldrb	r2, [r3, #0]
 8000cb2:	4b43      	ldr	r3, [pc, #268]	; (8000dc0 <convert_UART_state_params_to_Int+0x174>)
 8000cb4:	705a      	strb	r2, [r3, #1]
				break;
 8000cb6:	e031      	b.n	8000d1c <convert_UART_state_params_to_Int+0xd0>
			case 7:
				STATE[2] = set_or_ret_sys_state[i] ;
 8000cb8:	4a40      	ldr	r2, [pc, #256]	; (8000dbc <convert_UART_state_params_to_Int+0x170>)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	781a      	ldrb	r2, [r3, #0]
 8000cc0:	4b3f      	ldr	r3, [pc, #252]	; (8000dc0 <convert_UART_state_params_to_Int+0x174>)
 8000cc2:	709a      	strb	r2, [r3, #2]
				break;
 8000cc4:	e02a      	b.n	8000d1c <convert_UART_state_params_to_Int+0xd0>

			case 9:
				PARAM1[0] = set_or_ret_sys_state[i];
 8000cc6:	4a3d      	ldr	r2, [pc, #244]	; (8000dbc <convert_UART_state_params_to_Int+0x170>)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4413      	add	r3, r2
 8000ccc:	781a      	ldrb	r2, [r3, #0]
 8000cce:	4b3d      	ldr	r3, [pc, #244]	; (8000dc4 <convert_UART_state_params_to_Int+0x178>)
 8000cd0:	701a      	strb	r2, [r3, #0]
				break;
 8000cd2:	e023      	b.n	8000d1c <convert_UART_state_params_to_Int+0xd0>
			case 10:
				PARAM1[1] = set_or_ret_sys_state[i] ;
 8000cd4:	4a39      	ldr	r2, [pc, #228]	; (8000dbc <convert_UART_state_params_to_Int+0x170>)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4413      	add	r3, r2
 8000cda:	781a      	ldrb	r2, [r3, #0]
 8000cdc:	4b39      	ldr	r3, [pc, #228]	; (8000dc4 <convert_UART_state_params_to_Int+0x178>)
 8000cde:	705a      	strb	r2, [r3, #1]
				break;
 8000ce0:	e01c      	b.n	8000d1c <convert_UART_state_params_to_Int+0xd0>
			case 11:
				PARAM1[2] = set_or_ret_sys_state[i] ;
 8000ce2:	4a36      	ldr	r2, [pc, #216]	; (8000dbc <convert_UART_state_params_to_Int+0x170>)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	781a      	ldrb	r2, [r3, #0]
 8000cea:	4b36      	ldr	r3, [pc, #216]	; (8000dc4 <convert_UART_state_params_to_Int+0x178>)
 8000cec:	709a      	strb	r2, [r3, #2]
				break ;
 8000cee:	e015      	b.n	8000d1c <convert_UART_state_params_to_Int+0xd0>
			case 13:
				PARAM2[0] = set_or_ret_sys_state[i] ;
 8000cf0:	4a32      	ldr	r2, [pc, #200]	; (8000dbc <convert_UART_state_params_to_Int+0x170>)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	781a      	ldrb	r2, [r3, #0]
 8000cf8:	4b33      	ldr	r3, [pc, #204]	; (8000dc8 <convert_UART_state_params_to_Int+0x17c>)
 8000cfa:	701a      	strb	r2, [r3, #0]
				break;
 8000cfc:	e00e      	b.n	8000d1c <convert_UART_state_params_to_Int+0xd0>
			case 14:
				PARAM2[1] = set_or_ret_sys_state[i] ;
 8000cfe:	4a2f      	ldr	r2, [pc, #188]	; (8000dbc <convert_UART_state_params_to_Int+0x170>)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4413      	add	r3, r2
 8000d04:	781a      	ldrb	r2, [r3, #0]
 8000d06:	4b30      	ldr	r3, [pc, #192]	; (8000dc8 <convert_UART_state_params_to_Int+0x17c>)
 8000d08:	705a      	strb	r2, [r3, #1]
				break;
 8000d0a:	e007      	b.n	8000d1c <convert_UART_state_params_to_Int+0xd0>
			case 15:
				PARAM2[2] = set_or_ret_sys_state[i ];
 8000d0c:	4a2b      	ldr	r2, [pc, #172]	; (8000dbc <convert_UART_state_params_to_Int+0x170>)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4413      	add	r3, r2
 8000d12:	781a      	ldrb	r2, [r3, #0]
 8000d14:	4b2c      	ldr	r3, [pc, #176]	; (8000dc8 <convert_UART_state_params_to_Int+0x17c>)
 8000d16:	709a      	strb	r2, [r3, #2]
				break;
 8000d18:	e000      	b.n	8000d1c <convert_UART_state_params_to_Int+0xd0>

			default:
				break ;
 8000d1a:	bf00      	nop
		for(int i = 0; i < 19 ; i++){
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	607b      	str	r3, [r7, #4]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2b12      	cmp	r3, #18
 8000d26:	dd9c      	ble.n	8000c62 <convert_UART_state_params_to_Int+0x16>
			}

		}

		state = atoi(STATE) ;
 8000d28:	4825      	ldr	r0, [pc, #148]	; (8000dc0 <convert_UART_state_params_to_Int+0x174>)
 8000d2a:	f007 f8ed 	bl	8007f08 <atoi>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	b29a      	uxth	r2, r3
 8000d32:	4b26      	ldr	r3, [pc, #152]	; (8000dcc <convert_UART_state_params_to_Int+0x180>)
 8000d34:	801a      	strh	r2, [r3, #0]
		param1 = atoi(PARAM1);
 8000d36:	4823      	ldr	r0, [pc, #140]	; (8000dc4 <convert_UART_state_params_to_Int+0x178>)
 8000d38:	f007 f8e6 	bl	8007f08 <atoi>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	4b23      	ldr	r3, [pc, #140]	; (8000dd0 <convert_UART_state_params_to_Int+0x184>)
 8000d42:	801a      	strh	r2, [r3, #0]
		// problem - perform check for if non integer characters are passed!
		if(strcmp(PARAM2, "000") == 0 && set_or_ret_sys_state[3] == 'E'){
 8000d44:	4923      	ldr	r1, [pc, #140]	; (8000dd4 <convert_UART_state_params_to_Int+0x188>)
 8000d46:	4820      	ldr	r0, [pc, #128]	; (8000dc8 <convert_UART_state_params_to_Int+0x17c>)
 8000d48:	f7ff fa46 	bl	80001d8 <strcmp>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d10b      	bne.n	8000d6a <convert_UART_state_params_to_Int+0x11e>
 8000d52:	4b1a      	ldr	r3, [pc, #104]	; (8000dbc <convert_UART_state_params_to_Int+0x170>)
 8000d54:	78db      	ldrb	r3, [r3, #3]
 8000d56:	2b45      	cmp	r3, #69	; 0x45
 8000d58:	d107      	bne.n	8000d6a <convert_UART_state_params_to_Int+0x11e>

			param2 = atoi(PARAM2) ;  // SOS MORSE OUTPUT
 8000d5a:	481b      	ldr	r0, [pc, #108]	; (8000dc8 <convert_UART_state_params_to_Int+0x17c>)
 8000d5c:	f007 f8d4 	bl	8007f08 <atoi>
 8000d60:	4603      	mov	r3, r0
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <convert_UART_state_params_to_Int+0x18c>)
 8000d66:	801a      	strh	r2, [r3, #0]
 8000d68:	e022      	b.n	8000db0 <convert_UART_state_params_to_Int+0x164>
		}
		else if( strcmp(PARAM2, "000") != 0 && set_or_ret_sys_state[3] == 'E' ){
 8000d6a:	491a      	ldr	r1, [pc, #104]	; (8000dd4 <convert_UART_state_params_to_Int+0x188>)
 8000d6c:	4816      	ldr	r0, [pc, #88]	; (8000dc8 <convert_UART_state_params_to_Int+0x17c>)
 8000d6e:	f7ff fa33 	bl	80001d8 <strcmp>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d013      	beq.n	8000da0 <convert_UART_state_params_to_Int+0x154>
 8000d78:	4b10      	ldr	r3, [pc, #64]	; (8000dbc <convert_UART_state_params_to_Int+0x170>)
 8000d7a:	78db      	ldrb	r3, [r3, #3]
 8000d7c:	2b45      	cmp	r3, #69	; 0x45
 8000d7e:	d10f      	bne.n	8000da0 <convert_UART_state_params_to_Int+0x154>

			Custom_Morse_Msg[0] = PARAM2[0] ; // CUSTOM MORSE output - declare variable to store the output
 8000d80:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <convert_UART_state_params_to_Int+0x17c>)
 8000d82:	781a      	ldrb	r2, [r3, #0]
 8000d84:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <convert_UART_state_params_to_Int+0x190>)
 8000d86:	701a      	strb	r2, [r3, #0]
			Custom_Morse_Msg[1] = PARAM2[1] ;
 8000d88:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <convert_UART_state_params_to_Int+0x17c>)
 8000d8a:	785a      	ldrb	r2, [r3, #1]
 8000d8c:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <convert_UART_state_params_to_Int+0x190>)
 8000d8e:	705a      	strb	r2, [r3, #1]
			Custom_Morse_Msg[2] = PARAM2[2] ;
 8000d90:	4b0d      	ldr	r3, [pc, #52]	; (8000dc8 <convert_UART_state_params_to_Int+0x17c>)
 8000d92:	789a      	ldrb	r2, [r3, #2]
 8000d94:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <convert_UART_state_params_to_Int+0x190>)
 8000d96:	709a      	strb	r2, [r3, #2]

			custom_morse_msg_rcvd = 1;
 8000d98:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <convert_UART_state_params_to_Int+0x194>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	701a      	strb	r2, [r3, #0]
 8000d9e:	e007      	b.n	8000db0 <convert_UART_state_params_to_Int+0x164>
		}
		else{
			param2 = atoi(PARAM2) ;
 8000da0:	4809      	ldr	r0, [pc, #36]	; (8000dc8 <convert_UART_state_params_to_Int+0x17c>)
 8000da2:	f007 f8b1 	bl	8007f08 <atoi>
 8000da6:	4603      	mov	r3, r0
 8000da8:	b29a      	uxth	r2, r3
 8000daa:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <convert_UART_state_params_to_Int+0x18c>)
 8000dac:	801a      	strh	r2, [r3, #0]
		}

	}
}
 8000dae:	e7ff      	b.n	8000db0 <convert_UART_state_params_to_Int+0x164>
 8000db0:	bf00      	nop
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20002322 	.word	0x20002322
 8000dbc:	20000044 	.word	0x20000044
 8000dc0:	20000058 	.word	0x20000058
 8000dc4:	2000005c 	.word	0x2000005c
 8000dc8:	20000060 	.word	0x20000060
 8000dcc:	20002326 	.word	0x20002326
 8000dd0:	20002328 	.word	0x20002328
 8000dd4:	08008210 	.word	0x08008210
 8000dd8:	2000232a 	.word	0x2000232a
 8000ddc:	20000064 	.word	0x20000064
 8000de0:	20002325 	.word	0x20002325

08000de4 <Emergency_Mode_State_Update>:

/**
 * Function updates the necessary states/ values when UART command reached to
 * update the system state
 */
void Emergency_Mode_State_Update(){
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0

	if(UART_state_update == 1 && state > 0 && set_or_ret_sys_state[3] =='E'){
 8000de8:	4b29      	ldr	r3, [pc, #164]	; (8000e90 <Emergency_Mode_State_Update+0xac>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d14c      	bne.n	8000e8a <Emergency_Mode_State_Update+0xa6>
 8000df0:	4b28      	ldr	r3, [pc, #160]	; (8000e94 <Emergency_Mode_State_Update+0xb0>)
 8000df2:	881b      	ldrh	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d048      	beq.n	8000e8a <Emergency_Mode_State_Update+0xa6>
 8000df8:	4b27      	ldr	r3, [pc, #156]	; (8000e98 <Emergency_Mode_State_Update+0xb4>)
 8000dfa:	78db      	ldrb	r3, [r3, #3]
 8000dfc:	2b45      	cmp	r3, #69	; 0x45
 8000dfe:	d144      	bne.n	8000e8a <Emergency_Mode_State_Update+0xa6>
		// Dont read ADC
		if(adc_conv_complete == 1){
 8000e00:	4b26      	ldr	r3, [pc, #152]	; (8000e9c <Emergency_Mode_State_Update+0xb8>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d105      	bne.n	8000e14 <Emergency_Mode_State_Update+0x30>
			adc_val_capture = 1 ; // capture slider value
 8000e08:	4b25      	ldr	r3, [pc, #148]	; (8000ea0 <Emergency_Mode_State_Update+0xbc>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	701a      	strb	r2, [r3, #0]
			update_led_via_ADC = 0 ; // dont read until slider moved
 8000e0e:	4b25      	ldr	r3, [pc, #148]	; (8000ea4 <Emergency_Mode_State_Update+0xc0>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	701a      	strb	r2, [r3, #0]
		}

		//update LED intensity
		strobe_led_Intensity = state;
 8000e14:	4b1f      	ldr	r3, [pc, #124]	; (8000e94 <Emergency_Mode_State_Update+0xb0>)
 8000e16:	881a      	ldrh	r2, [r3, #0]
 8000e18:	4b23      	ldr	r3, [pc, #140]	; (8000ea8 <Emergency_Mode_State_Update+0xc4>)
 8000e1a:	801a      	strh	r2, [r3, #0]

		// strobe
		if(param1 > 0 ){
 8000e1c:	4b23      	ldr	r3, [pc, #140]	; (8000eac <Emergency_Mode_State_Update+0xc8>)
 8000e1e:	881b      	ldrh	r3, [r3, #0]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d007      	beq.n	8000e34 <Emergency_Mode_State_Update+0x50>
			em_count = 0 ;
 8000e24:	4b22      	ldr	r3, [pc, #136]	; (8000eb0 <Emergency_Mode_State_Update+0xcc>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	701a      	strb	r2, [r3, #0]
			strobe_delay = param1 ;  // update the ON/off time of strobe
 8000e2a:	4b20      	ldr	r3, [pc, #128]	; (8000eac <Emergency_Mode_State_Update+0xc8>)
 8000e2c:	881a      	ldrh	r2, [r3, #0]
 8000e2e:	4b21      	ldr	r3, [pc, #132]	; (8000eb4 <Emergency_Mode_State_Update+0xd0>)
 8000e30:	801a      	strh	r2, [r3, #0]
 8000e32:	e027      	b.n	8000e84 <Emergency_Mode_State_Update+0xa0>

		}
		// SOS output
		else if(param1 == 0 && param2 == 0 && custom_morse_msg_rcvd == 0 ){
 8000e34:	4b1d      	ldr	r3, [pc, #116]	; (8000eac <Emergency_Mode_State_Update+0xc8>)
 8000e36:	881b      	ldrh	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d110      	bne.n	8000e5e <Emergency_Mode_State_Update+0x7a>
 8000e3c:	4b1e      	ldr	r3, [pc, #120]	; (8000eb8 <Emergency_Mode_State_Update+0xd4>)
 8000e3e:	881b      	ldrh	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d10c      	bne.n	8000e5e <Emergency_Mode_State_Update+0x7a>
 8000e44:	4b1d      	ldr	r3, [pc, #116]	; (8000ebc <Emergency_Mode_State_Update+0xd8>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d108      	bne.n	8000e5e <Emergency_Mode_State_Update+0x7a>
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)"SOS MORSE\n", 10) ;
 8000e4c:	220a      	movs	r2, #10
 8000e4e:	491c      	ldr	r1, [pc, #112]	; (8000ec0 <Emergency_Mode_State_Update+0xdc>)
 8000e50:	481c      	ldr	r0, [pc, #112]	; (8000ec4 <Emergency_Mode_State_Update+0xe0>)
 8000e52:	f005 fd53 	bl	80068fc <HAL_UART_Transmit_IT>
			em_count =1 ; // SOS mode
 8000e56:	4b16      	ldr	r3, [pc, #88]	; (8000eb0 <Emergency_Mode_State_Update+0xcc>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	701a      	strb	r2, [r3, #0]
 8000e5c:	e012      	b.n	8000e84 <Emergency_Mode_State_Update+0xa0>
		}
		// CUSTOM morse msg received
		else{
			if(param1 == 0 && custom_morse_msg_rcvd ==1 ){
 8000e5e:	4b13      	ldr	r3, [pc, #76]	; (8000eac <Emergency_Mode_State_Update+0xc8>)
 8000e60:	881b      	ldrh	r3, [r3, #0]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d10e      	bne.n	8000e84 <Emergency_Mode_State_Update+0xa0>
 8000e66:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <Emergency_Mode_State_Update+0xd8>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d10a      	bne.n	8000e84 <Emergency_Mode_State_Update+0xa0>
				custom_morse_msg_rcvd = 0;
 8000e6e:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <Emergency_Mode_State_Update+0xd8>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_IT(&huart2, (uint8_t*)"CUSTOM MORSE\n", 13) ;
 8000e74:	220d      	movs	r2, #13
 8000e76:	4914      	ldr	r1, [pc, #80]	; (8000ec8 <Emergency_Mode_State_Update+0xe4>)
 8000e78:	4812      	ldr	r0, [pc, #72]	; (8000ec4 <Emergency_Mode_State_Update+0xe0>)
 8000e7a:	f005 fd3f 	bl	80068fc <HAL_UART_Transmit_IT>
				em_count = 2 ; // CUSTOM MORSE
 8000e7e:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <Emergency_Mode_State_Update+0xcc>)
 8000e80:	2202      	movs	r2, #2
 8000e82:	701a      	strb	r2, [r3, #0]

			}
		}

		UART_state_update = 0;
 8000e84:	4b02      	ldr	r3, [pc, #8]	; (8000e90 <Emergency_Mode_State_Update+0xac>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	701a      	strb	r2, [r3, #0]
	}

}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20002324 	.word	0x20002324
 8000e94:	20002326 	.word	0x20002326
 8000e98:	20000044 	.word	0x20000044
 8000e9c:	20002306 	.word	0x20002306
 8000ea0:	20000002 	.word	0x20000002
 8000ea4:	2000230a 	.word	0x2000230a
 8000ea8:	20000014 	.word	0x20000014
 8000eac:	20002328 	.word	0x20002328
 8000eb0:	200002f8 	.word	0x200002f8
 8000eb4:	20000012 	.word	0x20000012
 8000eb8:	2000232a 	.word	0x2000232a
 8000ebc:	20002325 	.word	0x20002325
 8000ec0:	08008214 	.word	0x08008214
 8000ec4:	2000026c 	.word	0x2000026c
 8000ec8:	08008220 	.word	0x08008220

08000ecc <Mood_Mode_State_Update>:

void Mood_Mode_State_Update(){
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
	if(UART_state_update ==1  && set_or_ret_sys_state[3] == 'M'){
 8000ed0:	4b0d      	ldr	r3, [pc, #52]	; (8000f08 <Mood_Mode_State_Update+0x3c>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d112      	bne.n	8000efe <Mood_Mode_State_Update+0x32>
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <Mood_Mode_State_Update+0x40>)
 8000eda:	78db      	ldrb	r3, [r3, #3]
 8000edc:	2b4d      	cmp	r3, #77	; 0x4d
 8000ede:	d10e      	bne.n	8000efe <Mood_Mode_State_Update+0x32>

		// set R channel intensity
		R_channel_Intensity = state ;
 8000ee0:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <Mood_Mode_State_Update+0x44>)
 8000ee2:	881a      	ldrh	r2, [r3, #0]
 8000ee4:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <Mood_Mode_State_Update+0x48>)
 8000ee6:	801a      	strh	r2, [r3, #0]
		// set G channel intensity
		G_channel_Intensity = param1 ;
 8000ee8:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <Mood_Mode_State_Update+0x4c>)
 8000eea:	881a      	ldrh	r2, [r3, #0]
 8000eec:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <Mood_Mode_State_Update+0x50>)
 8000eee:	801a      	strh	r2, [r3, #0]
		// set B channel intensity
		B_channel_Intensity = param2 ;
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <Mood_Mode_State_Update+0x54>)
 8000ef2:	881a      	ldrh	r2, [r3, #0]
 8000ef4:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <Mood_Mode_State_Update+0x58>)
 8000ef6:	801a      	strh	r2, [r3, #0]

		UART_state_update = 0;
 8000ef8:	4b03      	ldr	r3, [pc, #12]	; (8000f08 <Mood_Mode_State_Update+0x3c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	701a      	strb	r2, [r3, #0]
	}
}
 8000efe:	bf00      	nop
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	20002324 	.word	0x20002324
 8000f0c:	20000044 	.word	0x20000044
 8000f10:	20002326 	.word	0x20002326
 8000f14:	2000002e 	.word	0x2000002e
 8000f18:	20002328 	.word	0x20002328
 8000f1c:	20000030 	.word	0x20000030
 8000f20:	2000232a 	.word	0x2000232a
 8000f24:	20000032 	.word	0x20000032

08000f28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f2e:	f001 f8f7 	bl	8002120 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f32:	f000 fa3f 	bl	80013b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f36:	f000 fcd7 	bl	80018e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f3a:	f000 fcb7 	bl	80018ac <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f3e:	f000 fc83 	bl	8001848 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000f42:	f000 fa9f 	bl	8001484 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000f46:	f000 fb0d 	bl	8001564 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f4a:	f000 fb8d 	bl	8001668 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f4e:	f000 fc03 	bl	8001758 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(200);
 8000f52:	20c8      	movs	r0, #200	; 0xc8
 8000f54:	f001 f94a 	bl	80021ec <HAL_Delay>
  HAL_UART_Transmit(&huart2, studentNum, 13, 150); //transmit student number
 8000f58:	2396      	movs	r3, #150	; 0x96
 8000f5a:	220d      	movs	r2, #13
 8000f5c:	498a      	ldr	r1, [pc, #552]	; (8001188 <main+0x260>)
 8000f5e:	488b      	ldr	r0, [pc, #556]	; (800118c <main+0x264>)
 8000f60:	f005 fc42 	bl	80067e8 <HAL_UART_Transmit>

  HAL_UART_Receive_IT(&huart2, (uint8_t*)recvd_char, 1);
 8000f64:	2201      	movs	r2, #1
 8000f66:	498a      	ldr	r1, [pc, #552]	; (8001190 <main+0x268>)
 8000f68:	4888      	ldr	r0, [pc, #544]	; (800118c <main+0x264>)
 8000f6a:	f005 fd25 	bl	80069b8 <HAL_UART_Receive_IT>

  //Startup ADC
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, adc_buf_len) ;
 8000f6e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f72:	4988      	ldr	r1, [pc, #544]	; (8001194 <main+0x26c>)
 8000f74:	4888      	ldr	r0, [pc, #544]	; (8001198 <main+0x270>)
 8000f76:	f001 fb6b 	bl	8002650 <HAL_ADC_Start_DMA>

  // TIM2_CH1 start PWM
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1) ;
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4887      	ldr	r0, [pc, #540]	; (800119c <main+0x274>)
 8000f7e:	f004 fc0b 	bl	8005798 <HAL_TIM_PWM_Start>
  // TIM2_CH4 start PWM - red LED
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) ;
 8000f82:	210c      	movs	r1, #12
 8000f84:	4885      	ldr	r0, [pc, #532]	; (800119c <main+0x274>)
 8000f86:	f004 fc07 	bl	8005798 <HAL_TIM_PWM_Start>
  // TIM3_CH4 start PWM - GREEN LED
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000f8a:	210c      	movs	r1, #12
 8000f8c:	4884      	ldr	r0, [pc, #528]	; (80011a0 <main+0x278>)
 8000f8e:	f004 fc03 	bl	8005798 <HAL_TIM_PWM_Start>
  // TIM4_CH1 start PWM - BLUE LED
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1) ;
 8000f92:	2100      	movs	r1, #0
 8000f94:	4883      	ldr	r0, [pc, #524]	; (80011a4 <main+0x27c>)
 8000f96:	f004 fbff 	bl	8005798 <HAL_TIM_PWM_Start>

  strobe_ticks  = HAL_GetTick() ;
 8000f9a:	f001 f91b 	bl	80021d4 <HAL_GetTick>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	4a81      	ldr	r2, [pc, #516]	; (80011a8 <main+0x280>)
 8000fa2:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // left button press to update system state (MF -> ME -> MM)
	  system_state_update() ;
 8000fa4:	f7ff fd0c 	bl	80009c0 <system_state_update>
	  //run adc and capture previous snapshot of ADC value and adc movement processing
	  adc_dma_val_processing();
 8000fa8:	f7ff fc7a 	bl	80008a0 <adc_dma_val_processing>
	  // Turn LED ON/OFF
	  TURN_LED_ON_OFF() ;
 8000fac:	f7ff fdce 	bl	8000b4c <TURN_LED_ON_OFF>
	  // read UART params
	  convert_UART_state_params_to_Int() ;
 8000fb0:	f7ff fe4c 	bl	8000c4c <convert_UART_state_params_to_Int>
//	      HAL_UART_Transmit_IT(&huart2, (uint8_t*)"state transmission\n", 19);
//	      READ_SYS = 0; // Reset READ_SYS after transmission
//	      UART_ret_sys_state = 0; // Reset UART_ret_sys_state
//	  }

	  if(READ_SYS ==1){
 8000fb4:	4b7d      	ldr	r3, [pc, #500]	; (80011ac <main+0x284>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d107      	bne.n	8000fcc <main+0xa4>
		  HAL_UART_Transmit_IT(&huart2, (uint8_t*)"state transmission\n", 19);
 8000fbc:	2213      	movs	r2, #19
 8000fbe:	497c      	ldr	r1, [pc, #496]	; (80011b0 <main+0x288>)
 8000fc0:	4872      	ldr	r0, [pc, #456]	; (800118c <main+0x264>)
 8000fc2:	f005 fc9b 	bl	80068fc <HAL_UART_Transmit_IT>
		  READ_SYS = 0;
 8000fc6:	4b79      	ldr	r3, [pc, #484]	; (80011ac <main+0x284>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	701a      	strb	r2, [r3, #0]
	  }
	 // system state
	 if(button_count == 0 || start_up == 1 ){
 8000fcc:	4b79      	ldr	r3, [pc, #484]	; (80011b4 <main+0x28c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d003      	beq.n	8000fdc <main+0xb4>
 8000fd4:	4b78      	ldr	r3, [pc, #480]	; (80011b8 <main+0x290>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d13b      	bne.n	8001054 <main+0x12c>

		 start_up = 0 ; //for default MF state
 8000fdc:	4b76      	ldr	r3, [pc, #472]	; (80011b8 <main+0x290>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	701a      	strb	r2, [r3, #0]

		 MF_mode_LED() ; // sets the corresponding mode LED
 8000fe2:	f000 fd25 	bl	8001a30 <MF_mode_LED>
		 em_count=0;     // reset the emergency mode count
 8000fe6:	4b75      	ldr	r3, [pc, #468]	; (80011bc <main+0x294>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	701a      	strb	r2, [r3, #0]
		 em_default = 1; // to re-enter the EM state
 8000fec:	4b74      	ldr	r3, [pc, #464]	; (80011c0 <main+0x298>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	701a      	strb	r2, [r3, #0]

		if(LED_ON == 1){
 8000ff2:	4b74      	ldr	r3, [pc, #464]	; (80011c4 <main+0x29c>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d164      	bne.n	80010c4 <main+0x19c>
			 // if LED_ON and SLIDER MOVED -> updated LED intensity
			if(update_led_via_ADC == 1 && UART_state_update == 0){
 8000ffa:	4b73      	ldr	r3, [pc, #460]	; (80011c8 <main+0x2a0>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d109      	bne.n	8001016 <main+0xee>
 8001002:	4b72      	ldr	r3, [pc, #456]	; (80011cc <main+0x2a4>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d105      	bne.n	8001016 <main+0xee>

				htim2.Instance->CCR1 =  LED_intensity ; // vary the duty cycle of the LED [1:512]
 800100a:	4b71      	ldr	r3, [pc, #452]	; (80011d0 <main+0x2a8>)
 800100c:	881a      	ldrh	r2, [r3, #0]
 800100e:	4b63      	ldr	r3, [pc, #396]	; (800119c <main+0x274>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	635a      	str	r2, [r3, #52]	; 0x34
		if(LED_ON == 1){
 8001014:	e056      	b.n	80010c4 <main+0x19c>
			}
			else if(UART_state_update == 1 && state > 0 && set_or_ret_sys_state[3] =='F' ){
 8001016:	4b6d      	ldr	r3, [pc, #436]	; (80011cc <main+0x2a4>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d152      	bne.n	80010c4 <main+0x19c>
 800101e:	4b6d      	ldr	r3, [pc, #436]	; (80011d4 <main+0x2ac>)
 8001020:	881b      	ldrh	r3, [r3, #0]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d04e      	beq.n	80010c4 <main+0x19c>
 8001026:	4b6c      	ldr	r3, [pc, #432]	; (80011d8 <main+0x2b0>)
 8001028:	78db      	ldrb	r3, [r3, #3]
 800102a:	2b46      	cmp	r3, #70	; 0x46
 800102c:	d14a      	bne.n	80010c4 <main+0x19c>

				if(adc_conv_complete == 1){
 800102e:	4b6b      	ldr	r3, [pc, #428]	; (80011dc <main+0x2b4>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d105      	bne.n	8001042 <main+0x11a>
					adc_val_capture = 1 ; // capture slider value
 8001036:	4b6a      	ldr	r3, [pc, #424]	; (80011e0 <main+0x2b8>)
 8001038:	2201      	movs	r2, #1
 800103a:	701a      	strb	r2, [r3, #0]
					update_led_via_ADC = 0 ; // dont read until slider moved
 800103c:	4b62      	ldr	r3, [pc, #392]	; (80011c8 <main+0x2a0>)
 800103e:	2200      	movs	r2, #0
 8001040:	701a      	strb	r2, [r3, #0]
				}
				htim2.Instance->CCR1 = state ;
 8001042:	4b64      	ldr	r3, [pc, #400]	; (80011d4 <main+0x2ac>)
 8001044:	881a      	ldrh	r2, [r3, #0]
 8001046:	4b55      	ldr	r3, [pc, #340]	; (800119c <main+0x274>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	635a      	str	r2, [r3, #52]	; 0x34
				UART_state_update = 0;
 800104c:	4b5f      	ldr	r3, [pc, #380]	; (80011cc <main+0x2a4>)
 800104e:	2200      	movs	r2, #0
 8001050:	701a      	strb	r2, [r3, #0]
		if(LED_ON == 1){
 8001052:	e037      	b.n	80010c4 <main+0x19c>
//					HAL_UART_Transmit_IT(&huart2, (uint8_t*)"state transmit\n", 15);
//					UART_ret_sys_state = 0 ;
//				}
//			}
		}
	 }else if(button_count == 1 ){// right button system state updated
 8001054:	4b57      	ldr	r3, [pc, #348]	; (80011b4 <main+0x28c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d104      	bne.n	8001066 <main+0x13e>
		 ME_mode_LED() ; // sets the corresponding modes LED
 800105c:	f000 fd06 	bl	8001a6c <ME_mode_LED>

		 Emergency_Mode_State_Update() ;
 8001060:	f7ff fec0 	bl	8000de4 <Emergency_Mode_State_Update>
 8001064:	e02f      	b.n	80010c6 <main+0x19e>

	 }else{
		 if(button_count == 2){ // Mood Mode
 8001066:	4b53      	ldr	r3, [pc, #332]	; (80011b4 <main+0x28c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2b02      	cmp	r3, #2
 800106c:	d12b      	bne.n	80010c6 <main+0x19e>
			 // SET THE NECESSARY STATES
			 em_count=0; // reset the emergency mode state
 800106e:	4b53      	ldr	r3, [pc, #332]	; (80011bc <main+0x294>)
 8001070:	2200      	movs	r2, #0
 8001072:	701a      	strb	r2, [r3, #0]
			 em_default = 1; // to re-enter EM state
 8001074:	4b52      	ldr	r3, [pc, #328]	; (80011c0 <main+0x298>)
 8001076:	2201      	movs	r2, #1
 8001078:	701a      	strb	r2, [r3, #0]

			 MM_mode_LED() ; //sets the corresponding modes LED
 800107a:	f000 fd0f 	bl	8001a9c <MM_mode_LED>

			 Mood_Mode_State_Update() ; // update the necessary MM states
 800107e:	f7ff ff25 	bl	8000ecc <Mood_Mode_State_Update>
			 if(LED_ON == 1){
 8001082:	4b50      	ldr	r3, [pc, #320]	; (80011c4 <main+0x29c>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d10f      	bne.n	80010aa <main+0x182>
				 // set to channel intensities to default values
				 // no longer default mode - reset back to default in other states?
				 //red channel
				 htim2.Instance->CCR4 = R_channel_Intensity ;
 800108a:	4b56      	ldr	r3, [pc, #344]	; (80011e4 <main+0x2bc>)
 800108c:	881a      	ldrh	r2, [r3, #0]
 800108e:	4b43      	ldr	r3, [pc, #268]	; (800119c <main+0x274>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	641a      	str	r2, [r3, #64]	; 0x40
				 // GREEN channel
				 htim3.Instance->CCR4 = G_channel_Intensity ;
 8001094:	4b54      	ldr	r3, [pc, #336]	; (80011e8 <main+0x2c0>)
 8001096:	881a      	ldrh	r2, [r3, #0]
 8001098:	4b41      	ldr	r3, [pc, #260]	; (80011a0 <main+0x278>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	641a      	str	r2, [r3, #64]	; 0x40
				 // BLUE channel
				 htim4.Instance->CCR1 = B_channel_Intensity ;
 800109e:	4b53      	ldr	r3, [pc, #332]	; (80011ec <main+0x2c4>)
 80010a0:	881a      	ldrh	r2, [r3, #0]
 80010a2:	4b40      	ldr	r3, [pc, #256]	; (80011a4 <main+0x27c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	635a      	str	r2, [r3, #52]	; 0x34
 80010a8:	e00d      	b.n	80010c6 <main+0x19e>


			 }else{
				 // put all channels off
				 //red channel
				 htim2.Instance->CCR4 =  0;
 80010aa:	4b3c      	ldr	r3, [pc, #240]	; (800119c <main+0x274>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2200      	movs	r2, #0
 80010b0:	641a      	str	r2, [r3, #64]	; 0x40
				 // GREEN channel
				 htim3.Instance->CCR4 = 0 ;
 80010b2:	4b3b      	ldr	r3, [pc, #236]	; (80011a0 <main+0x278>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2200      	movs	r2, #0
 80010b8:	641a      	str	r2, [r3, #64]	; 0x40
				 // BLUE channel
				 htim4.Instance->CCR1 = 0 ;
 80010ba:	4b3a      	ldr	r3, [pc, #232]	; (80011a4 <main+0x27c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2200      	movs	r2, #0
 80010c0:	635a      	str	r2, [r3, #52]	; 0x34
 80010c2:	e000      	b.n	80010c6 <main+0x19e>
		if(LED_ON == 1){
 80010c4:	bf00      	nop

		 }
	 }

	 // right button state update
	 right_button_state_update() ;
 80010c6:	f7ff fd0b 	bl	8000ae0 <right_button_state_update>
	 //EMERGENCY MODES
	  if(button_count ==1 ){
 80010ca:	4b3a      	ldr	r3, [pc, #232]	; (80011b4 <main+0x28c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	f47f af68 	bne.w	8000fa4 <main+0x7c>

		 if(em_count == 0 || em_default ==1){ //strobe wit default intensity
 80010d4:	4b39      	ldr	r3, [pc, #228]	; (80011bc <main+0x294>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d003      	beq.n	80010e4 <main+0x1bc>
 80010dc:	4b38      	ldr	r3, [pc, #224]	; (80011c0 <main+0x298>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d112      	bne.n	800110a <main+0x1e2>
			 em_default = 0 ; //default state reached
 80010e4:	4b36      	ldr	r3, [pc, #216]	; (80011c0 <main+0x298>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	701a      	strb	r2, [r3, #0]
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2120      	movs	r1, #32
 80010ee:	4840      	ldr	r0, [pc, #256]	; (80011f0 <main+0x2c8>)
 80010f0:	f002 fdb6 	bl	8003c60 <HAL_GPIO_WritePin>


			 if(LED_ON){ //LED_on =?
 80010f4:	4b33      	ldr	r3, [pc, #204]	; (80011c4 <main+0x29c>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	f000 8141 	beq.w	8001380 <main+0x458>
				 // strobe LED with provided on time
				 EM_mode_Strobe(strobe_delay) ;
 80010fe:	4b3d      	ldr	r3, [pc, #244]	; (80011f4 <main+0x2cc>)
 8001100:	881b      	ldrh	r3, [r3, #0]
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fd52 	bl	8000bac <EM_mode_Strobe>
			 if(LED_ON){ //LED_on =?
 8001108:	e13a      	b.n	8001380 <main+0x458>
			 }
		 }
		 else if(em_count ==1){ // SOS MOSRE
 800110a:	4b2c      	ldr	r3, [pc, #176]	; (80011bc <main+0x294>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b01      	cmp	r3, #1
 8001110:	f040 812c 	bne.w	800136c <main+0x444>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001114:	2201      	movs	r2, #1
 8001116:	2120      	movs	r1, #32
 8001118:	4835      	ldr	r0, [pc, #212]	; (80011f0 <main+0x2c8>)
 800111a:	f002 fda1 	bl	8003c60 <HAL_GPIO_WritePin>

			 for(int i = 0; SOS[i] !='\0' ; i++){
 800111e:	2300      	movs	r3, #0
 8001120:	607b      	str	r3, [r7, #4]
 8001122:	e11b      	b.n	800135c <main+0x434>

				 if(SOS[i] == '.' && DOT == 1){
 8001124:	4a34      	ldr	r2, [pc, #208]	; (80011f8 <main+0x2d0>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4413      	add	r3, r2
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b2e      	cmp	r3, #46	; 0x2e
 800112e:	d171      	bne.n	8001214 <main+0x2ec>
 8001130:	4b32      	ldr	r3, [pc, #200]	; (80011fc <main+0x2d4>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b01      	cmp	r3, #1
 8001136:	d16d      	bne.n	8001214 <main+0x2ec>

					 htim2.Instance->CCR1 = 512 ;
 8001138:	4b18      	ldr	r3, [pc, #96]	; (800119c <main+0x274>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001140:	635a      	str	r2, [r3, #52]	; 0x34
					 timePassed = HAL_GetTick() - morse_current_time ;
 8001142:	f001 f847 	bl	80021d4 <HAL_GetTick>
 8001146:	4602      	mov	r2, r0
 8001148:	4b2d      	ldr	r3, [pc, #180]	; (8001200 <main+0x2d8>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	4a2d      	ldr	r2, [pc, #180]	; (8001204 <main+0x2dc>)
 8001150:	6013      	str	r3, [r2, #0]
					 if(HAL_GetTick() - morse_current_time >= time_unit ){
 8001152:	f001 f83f 	bl	80021d4 <HAL_GetTick>
 8001156:	4602      	mov	r2, r0
 8001158:	4b29      	ldr	r3, [pc, #164]	; (8001200 <main+0x2d8>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	4a2a      	ldr	r2, [pc, #168]	; (8001208 <main+0x2e0>)
 8001160:	8812      	ldrh	r2, [r2, #0]
 8001162:	4293      	cmp	r3, r2
 8001164:	f0c0 80e9 	bcc.w	800133a <main+0x412>
						 morse_current_time = HAL_GetTick() ;
 8001168:	f001 f834 	bl	80021d4 <HAL_GetTick>
 800116c:	4603      	mov	r3, r0
 800116e:	4a24      	ldr	r2, [pc, #144]	; (8001200 <main+0x2d8>)
 8001170:	6013      	str	r3, [r2, #0]

						 DOT=0;
 8001172:	4b22      	ldr	r3, [pc, #136]	; (80011fc <main+0x2d4>)
 8001174:	2200      	movs	r2, #0
 8001176:	701a      	strb	r2, [r3, #0]
						 DASH =0 ;
 8001178:	4b24      	ldr	r3, [pc, #144]	; (800120c <main+0x2e4>)
 800117a:	2200      	movs	r2, #0
 800117c:	701a      	strb	r2, [r3, #0]
						 space_in_letter = 1 ;
 800117e:	4b24      	ldr	r3, [pc, #144]	; (8001210 <main+0x2e8>)
 8001180:	2201      	movs	r2, #1
 8001182:	701a      	strb	r2, [r3, #0]
					 if(HAL_GetTick() - morse_current_time >= time_unit ){
 8001184:	e0d9      	b.n	800133a <main+0x412>
 8001186:	bf00      	nop
 8001188:	20000034 	.word	0x20000034
 800118c:	2000026c 	.word	0x2000026c
 8001190:	20002320 	.word	0x20002320
 8001194:	200002fc 	.word	0x200002fc
 8001198:	200000f4 	.word	0x200000f4
 800119c:	20000188 	.word	0x20000188
 80011a0:	200001d4 	.word	0x200001d4
 80011a4:	20000220 	.word	0x20000220
 80011a8:	2000230c 	.word	0x2000230c
 80011ac:	2000232c 	.word	0x2000232c
 80011b0:	08008230 	.word	0x08008230
 80011b4:	200002f4 	.word	0x200002f4
 80011b8:	20000000 	.word	0x20000000
 80011bc:	200002f8 	.word	0x200002f8
 80011c0:	20000001 	.word	0x20000001
 80011c4:	2000230b 	.word	0x2000230b
 80011c8:	2000230a 	.word	0x2000230a
 80011cc:	20002324 	.word	0x20002324
 80011d0:	20000010 	.word	0x20000010
 80011d4:	20002326 	.word	0x20002326
 80011d8:	20000044 	.word	0x20000044
 80011dc:	20002306 	.word	0x20002306
 80011e0:	20000002 	.word	0x20000002
 80011e4:	2000002e 	.word	0x2000002e
 80011e8:	20000030 	.word	0x20000030
 80011ec:	20000032 	.word	0x20000032
 80011f0:	48000400 	.word	0x48000400
 80011f4:	20000012 	.word	0x20000012
 80011f8:	2000001c 	.word	0x2000001c
 80011fc:	20000018 	.word	0x20000018
 8001200:	20002318 	.word	0x20002318
 8001204:	20002314 	.word	0x20002314
 8001208:	20000016 	.word	0x20000016
 800120c:	20000019 	.word	0x20000019
 8001210:	2000231c 	.word	0x2000231c

					 }
				 }
				 else if(SOS[i] =='-'  && DASH == 1){
 8001214:	4a5b      	ldr	r2, [pc, #364]	; (8001384 <main+0x45c>)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4413      	add	r3, r2
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b2d      	cmp	r3, #45	; 0x2d
 800121e:	d125      	bne.n	800126c <main+0x344>
 8001220:	4b59      	ldr	r3, [pc, #356]	; (8001388 <main+0x460>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d121      	bne.n	800126c <main+0x344>

					 htim2.Instance->CCR1 = 512 ;
 8001228:	4b58      	ldr	r3, [pc, #352]	; (800138c <main+0x464>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001230:	635a      	str	r2, [r3, #52]	; 0x34
					 if(HAL_GetTick() - morse_current_time >= 3*time_unit  ){
 8001232:	f000 ffcf 	bl	80021d4 <HAL_GetTick>
 8001236:	4602      	mov	r2, r0
 8001238:	4b55      	ldr	r3, [pc, #340]	; (8001390 <main+0x468>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	1ad2      	subs	r2, r2, r3
 800123e:	4b55      	ldr	r3, [pc, #340]	; (8001394 <main+0x46c>)
 8001240:	881b      	ldrh	r3, [r3, #0]
 8001242:	4619      	mov	r1, r3
 8001244:	460b      	mov	r3, r1
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	440b      	add	r3, r1
 800124a:	429a      	cmp	r2, r3
 800124c:	d375      	bcc.n	800133a <main+0x412>
						 morse_current_time = HAL_GetTick() ;
 800124e:	f000 ffc1 	bl	80021d4 <HAL_GetTick>
 8001252:	4603      	mov	r3, r0
 8001254:	4a4e      	ldr	r2, [pc, #312]	; (8001390 <main+0x468>)
 8001256:	6013      	str	r3, [r2, #0]

						 DOT =  0 ;
 8001258:	4b4f      	ldr	r3, [pc, #316]	; (8001398 <main+0x470>)
 800125a:	2200      	movs	r2, #0
 800125c:	701a      	strb	r2, [r3, #0]
						 DASH = 0 ;
 800125e:	4b4a      	ldr	r3, [pc, #296]	; (8001388 <main+0x460>)
 8001260:	2200      	movs	r2, #0
 8001262:	701a      	strb	r2, [r3, #0]
						 space_in_letter = 1 ;
 8001264:	4b4d      	ldr	r3, [pc, #308]	; (800139c <main+0x474>)
 8001266:	2201      	movs	r2, #1
 8001268:	701a      	strb	r2, [r3, #0]
					 if(HAL_GetTick() - morse_current_time >= 3*time_unit  ){
 800126a:	e066      	b.n	800133a <main+0x412>

					 }
				 }
				 else if(SOS[i]== ' '   && space_in_letter ==1){
 800126c:	4a45      	ldr	r2, [pc, #276]	; (8001384 <main+0x45c>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4413      	add	r3, r2
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b20      	cmp	r3, #32
 8001276:	d141      	bne.n	80012fc <main+0x3d4>
 8001278:	4b48      	ldr	r3, [pc, #288]	; (800139c <main+0x474>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d13d      	bne.n	80012fc <main+0x3d4>

					 htim2.Instance->CCR1 = 0 ;
 8001280:	4b42      	ldr	r3, [pc, #264]	; (800138c <main+0x464>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2200      	movs	r2, #0
 8001286:	635a      	str	r2, [r3, #52]	; 0x34

					 if(HAL_GetTick() - morse_current_time >= time_unit ){
 8001288:	f000 ffa4 	bl	80021d4 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	4b40      	ldr	r3, [pc, #256]	; (8001390 <main+0x468>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	4a3f      	ldr	r2, [pc, #252]	; (8001394 <main+0x46c>)
 8001296:	8812      	ldrh	r2, [r2, #0]
 8001298:	4293      	cmp	r3, r2
 800129a:	d34d      	bcc.n	8001338 <main+0x410>
						 morse_current_time = HAL_GetTick() ;
 800129c:	f000 ff9a 	bl	80021d4 <HAL_GetTick>
 80012a0:	4603      	mov	r3, r0
 80012a2:	4a3b      	ldr	r2, [pc, #236]	; (8001390 <main+0x468>)
 80012a4:	6013      	str	r3, [r2, #0]
						 space_in_letter = 0 ;
 80012a6:	4b3d      	ldr	r3, [pc, #244]	; (800139c <main+0x474>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	701a      	strb	r2, [r3, #0]

						 //NEXT CHARACTER CHECK
						 next_char_check = i ;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	4b3b      	ldr	r3, [pc, #236]	; (80013a0 <main+0x478>)
 80012b2:	701a      	strb	r2, [r3, #0]
						 next_char_check++ ;
 80012b4:	4b3a      	ldr	r3, [pc, #232]	; (80013a0 <main+0x478>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	3301      	adds	r3, #1
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	4b38      	ldr	r3, [pc, #224]	; (80013a0 <main+0x478>)
 80012be:	701a      	strb	r2, [r3, #0]
						 if(SOS[next_char_check] == '.' && DOT == 0 ){
 80012c0:	4b37      	ldr	r3, [pc, #220]	; (80013a0 <main+0x478>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	461a      	mov	r2, r3
 80012c6:	4b2f      	ldr	r3, [pc, #188]	; (8001384 <main+0x45c>)
 80012c8:	5c9b      	ldrb	r3, [r3, r2]
 80012ca:	2b2e      	cmp	r3, #46	; 0x2e
 80012cc:	d107      	bne.n	80012de <main+0x3b6>
 80012ce:	4b32      	ldr	r3, [pc, #200]	; (8001398 <main+0x470>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d103      	bne.n	80012de <main+0x3b6>
							 DOT= 1 ;
 80012d6:	4b30      	ldr	r3, [pc, #192]	; (8001398 <main+0x470>)
 80012d8:	2201      	movs	r2, #1
 80012da:	701a      	strb	r2, [r3, #0]
					 if(HAL_GetTick() - morse_current_time >= time_unit ){
 80012dc:	e02c      	b.n	8001338 <main+0x410>
						 }else if(SOS[next_char_check] == '-' && DASH == 0){
 80012de:	4b30      	ldr	r3, [pc, #192]	; (80013a0 <main+0x478>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	461a      	mov	r2, r3
 80012e4:	4b27      	ldr	r3, [pc, #156]	; (8001384 <main+0x45c>)
 80012e6:	5c9b      	ldrb	r3, [r3, r2]
 80012e8:	2b2d      	cmp	r3, #45	; 0x2d
 80012ea:	d125      	bne.n	8001338 <main+0x410>
 80012ec:	4b26      	ldr	r3, [pc, #152]	; (8001388 <main+0x460>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d121      	bne.n	8001338 <main+0x410>
							 DASH =1;
 80012f4:	4b24      	ldr	r3, [pc, #144]	; (8001388 <main+0x460>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	701a      	strb	r2, [r3, #0]
					 if(HAL_GetTick() - morse_current_time >= time_unit ){
 80012fa:	e01d      	b.n	8001338 <main+0x410>

					 }

				 }
				 else{
					 if(SOS[i]== '\0'){
 80012fc:	4a21      	ldr	r2, [pc, #132]	; (8001384 <main+0x45c>)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4413      	add	r3, r2
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d118      	bne.n	800133a <main+0x412>

						 htim2.Instance->CCR1 = 0 ;
 8001308:	4b20      	ldr	r3, [pc, #128]	; (800138c <main+0x464>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2200      	movs	r2, #0
 800130e:	635a      	str	r2, [r3, #52]	; 0x34
						 if(HAL_GetTick() - morse_current_time >= 3*time_unit){
 8001310:	f000 ff60 	bl	80021d4 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	4b1e      	ldr	r3, [pc, #120]	; (8001390 <main+0x468>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	1ad2      	subs	r2, r2, r3
 800131c:	4b1d      	ldr	r3, [pc, #116]	; (8001394 <main+0x46c>)
 800131e:	881b      	ldrh	r3, [r3, #0]
 8001320:	4619      	mov	r1, r3
 8001322:	460b      	mov	r3, r1
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	440b      	add	r3, r1
 8001328:	429a      	cmp	r2, r3
 800132a:	d306      	bcc.n	800133a <main+0x412>
							morse_current_time = HAL_GetTick() ;
 800132c:	f000 ff52 	bl	80021d4 <HAL_GetTick>
 8001330:	4603      	mov	r3, r0
 8001332:	4a17      	ldr	r2, [pc, #92]	; (8001390 <main+0x468>)
 8001334:	6013      	str	r3, [r2, #0]
 8001336:	e000      	b.n	800133a <main+0x412>
					 if(HAL_GetTick() - morse_current_time >= time_unit ){
 8001338:	bf00      	nop

						 }
					 }
				 }
				 if(next_char_checked == 1){
 800133a:	4b1a      	ldr	r3, [pc, #104]	; (80013a4 <main+0x47c>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d109      	bne.n	8001356 <main+0x42e>
					 character = SOS[i++] ;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	1c5a      	adds	r2, r3, #1
 8001346:	607a      	str	r2, [r7, #4]
 8001348:	4a0e      	ldr	r2, [pc, #56]	; (8001384 <main+0x45c>)
 800134a:	5cd2      	ldrb	r2, [r2, r3]
 800134c:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <main+0x480>)
 800134e:	701a      	strb	r2, [r3, #0]
					 next_char_checked = 0;
 8001350:	4b14      	ldr	r3, [pc, #80]	; (80013a4 <main+0x47c>)
 8001352:	2200      	movs	r2, #0
 8001354:	701a      	strb	r2, [r3, #0]
			 for(int i = 0; SOS[i] !='\0' ; i++){
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	3301      	adds	r3, #1
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	4a09      	ldr	r2, [pc, #36]	; (8001384 <main+0x45c>)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4413      	add	r3, r2
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	f47f aedd 	bne.w	8001124 <main+0x1fc>
 800136a:	e61b      	b.n	8000fa4 <main+0x7c>
				 }
			 }
		 }
		 else{
			 if(em_count == 2){ // CUSTOM MORSE
 800136c:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <main+0x484>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b02      	cmp	r3, #2
 8001372:	f47f ae17 	bne.w	8000fa4 <main+0x7c>
				 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001376:	2201      	movs	r2, #1
 8001378:	2120      	movs	r1, #32
 800137a:	480d      	ldr	r0, [pc, #52]	; (80013b0 <main+0x488>)
 800137c:	f002 fc70 	bl	8003c60 <HAL_GPIO_WritePin>
	  system_state_update() ;
 8001380:	e610      	b.n	8000fa4 <main+0x7c>
 8001382:	bf00      	nop
 8001384:	2000001c 	.word	0x2000001c
 8001388:	20000019 	.word	0x20000019
 800138c:	20000188 	.word	0x20000188
 8001390:	20002318 	.word	0x20002318
 8001394:	20000016 	.word	0x20000016
 8001398:	20000018 	.word	0x20000018
 800139c:	2000231c 	.word	0x2000231c
 80013a0:	2000231d 	.word	0x2000231d
 80013a4:	2000231e 	.word	0x2000231e
 80013a8:	2000231f 	.word	0x2000231f
 80013ac:	200002f8 	.word	0x200002f8
 80013b0:	48000400 	.word	0x48000400

080013b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b0a6      	sub	sp, #152	; 0x98
 80013b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ba:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80013be:	2228      	movs	r2, #40	; 0x28
 80013c0:	2100      	movs	r1, #0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f006 fdce 	bl	8007f64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013c8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013d8:	1d3b      	adds	r3, r7, #4
 80013da:	2258      	movs	r2, #88	; 0x58
 80013dc:	2100      	movs	r1, #0
 80013de:	4618      	mov	r0, r3
 80013e0:	f006 fdc0 	bl	8007f64 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013e4:	2302      	movs	r3, #2
 80013e6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013e8:	2301      	movs	r3, #1
 80013ea:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013ec:	2310      	movs	r3, #16
 80013ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013f2:	2302      	movs	r3, #2
 80013f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001400:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001404:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001408:	2300      	movs	r3, #0
 800140a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800140e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001412:	4618      	mov	r0, r3
 8001414:	f002 fc60 	bl	8003cd8 <HAL_RCC_OscConfig>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800141e:	f000 fb6b 	bl	8001af8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001422:	230f      	movs	r3, #15
 8001424:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001426:	2302      	movs	r3, #2
 8001428:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800142a:	2300      	movs	r3, #0
 800142c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800142e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001432:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001434:	2300      	movs	r3, #0
 8001436:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001438:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800143c:	2102      	movs	r1, #2
 800143e:	4618      	mov	r0, r3
 8001440:	f003 fc9e 	bl	8004d80 <HAL_RCC_ClockConfig>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800144a:	f000 fb55 	bl	8001af8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12
 800144e:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <SystemClock_Config+0xcc>)
 8001450:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001452:	2300      	movs	r3, #0
 8001454:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001456:	f44f 7380 	mov.w	r3, #256	; 0x100
 800145a:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 800145c:	2300      	movs	r3, #0
 800145e:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8001460:	2300      	movs	r3, #0
 8001462:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001464:	1d3b      	adds	r3, r7, #4
 8001466:	4618      	mov	r0, r3
 8001468:	f003 fec0 	bl	80051ec <HAL_RCCEx_PeriphCLKConfig>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001472:	f000 fb41 	bl	8001af8 <Error_Handler>
  }
}
 8001476:	bf00      	nop
 8001478:	3798      	adds	r7, #152	; 0x98
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	00300082 	.word	0x00300082

08001484 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	; 0x28
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800148a:	f107 031c 	add.w	r3, r7, #28
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
 80014a4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80014a6:	4b2e      	ldr	r3, [pc, #184]	; (8001560 <MX_ADC1_Init+0xdc>)
 80014a8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80014ac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80014ae:	4b2c      	ldr	r3, [pc, #176]	; (8001560 <MX_ADC1_Init+0xdc>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014b4:	4b2a      	ldr	r3, [pc, #168]	; (8001560 <MX_ADC1_Init+0xdc>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014ba:	4b29      	ldr	r3, [pc, #164]	; (8001560 <MX_ADC1_Init+0xdc>)
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80014c0:	4b27      	ldr	r3, [pc, #156]	; (8001560 <MX_ADC1_Init+0xdc>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014c6:	4b26      	ldr	r3, [pc, #152]	; (8001560 <MX_ADC1_Init+0xdc>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014ce:	4b24      	ldr	r3, [pc, #144]	; (8001560 <MX_ADC1_Init+0xdc>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014d4:	4b22      	ldr	r3, [pc, #136]	; (8001560 <MX_ADC1_Init+0xdc>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014da:	4b21      	ldr	r3, [pc, #132]	; (8001560 <MX_ADC1_Init+0xdc>)
 80014dc:	2200      	movs	r2, #0
 80014de:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80014e0:	4b1f      	ldr	r3, [pc, #124]	; (8001560 <MX_ADC1_Init+0xdc>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80014e6:	4b1e      	ldr	r3, [pc, #120]	; (8001560 <MX_ADC1_Init+0xdc>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014ee:	4b1c      	ldr	r3, [pc, #112]	; (8001560 <MX_ADC1_Init+0xdc>)
 80014f0:	2204      	movs	r2, #4
 80014f2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80014f4:	4b1a      	ldr	r3, [pc, #104]	; (8001560 <MX_ADC1_Init+0xdc>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80014fa:	4b19      	ldr	r3, [pc, #100]	; (8001560 <MX_ADC1_Init+0xdc>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001500:	4817      	ldr	r0, [pc, #92]	; (8001560 <MX_ADC1_Init+0xdc>)
 8001502:	f000 feab 	bl	800225c <HAL_ADC_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800150c:	f000 faf4 	bl	8001af8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001510:	2300      	movs	r3, #0
 8001512:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001514:	f107 031c 	add.w	r3, r7, #28
 8001518:	4619      	mov	r1, r3
 800151a:	4811      	ldr	r0, [pc, #68]	; (8001560 <MX_ADC1_Init+0xdc>)
 800151c:	f001 fca0 	bl	8002e60 <HAL_ADCEx_MultiModeConfigChannel>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001526:	f000 fae7 	bl	8001af8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800152a:	2301      	movs	r3, #1
 800152c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800152e:	2301      	movs	r3, #1
 8001530:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001532:	2300      	movs	r3, #0
 8001534:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001536:	2300      	movs	r3, #0
 8001538:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001542:	1d3b      	adds	r3, r7, #4
 8001544:	4619      	mov	r1, r3
 8001546:	4806      	ldr	r0, [pc, #24]	; (8001560 <MX_ADC1_Init+0xdc>)
 8001548:	f001 f99e 	bl	8002888 <HAL_ADC_ConfigChannel>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001552:	f000 fad1 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001556:	bf00      	nop
 8001558:	3728      	adds	r7, #40	; 0x28
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	200000f4 	.word	0x200000f4

08001564 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08e      	sub	sp, #56	; 0x38
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800156a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]
 8001576:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001578:	f107 031c 	add.w	r3, r7, #28
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001584:	463b      	mov	r3, r7
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]
 8001590:	611a      	str	r2, [r3, #16]
 8001592:	615a      	str	r2, [r3, #20]
 8001594:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001596:	4b33      	ldr	r3, [pc, #204]	; (8001664 <MX_TIM2_Init+0x100>)
 8001598:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800159c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36;
 800159e:	4b31      	ldr	r3, [pc, #196]	; (8001664 <MX_TIM2_Init+0x100>)
 80015a0:	2224      	movs	r2, #36	; 0x24
 80015a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a4:	4b2f      	ldr	r3, [pc, #188]	; (8001664 <MX_TIM2_Init+0x100>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 512;
 80015aa:	4b2e      	ldr	r3, [pc, #184]	; (8001664 <MX_TIM2_Init+0x100>)
 80015ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b2:	4b2c      	ldr	r3, [pc, #176]	; (8001664 <MX_TIM2_Init+0x100>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b8:	4b2a      	ldr	r3, [pc, #168]	; (8001664 <MX_TIM2_Init+0x100>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015be:	4829      	ldr	r0, [pc, #164]	; (8001664 <MX_TIM2_Init+0x100>)
 80015c0:	f004 f832 	bl	8005628 <HAL_TIM_Base_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80015ca:	f000 fa95 	bl	8001af8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015d2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015d8:	4619      	mov	r1, r3
 80015da:	4822      	ldr	r0, [pc, #136]	; (8001664 <MX_TIM2_Init+0x100>)
 80015dc:	f004 fafc 	bl	8005bd8 <HAL_TIM_ConfigClockSource>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80015e6:	f000 fa87 	bl	8001af8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015ea:	481e      	ldr	r0, [pc, #120]	; (8001664 <MX_TIM2_Init+0x100>)
 80015ec:	f004 f873 	bl	80056d6 <HAL_TIM_PWM_Init>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80015f6:	f000 fa7f 	bl	8001af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015fe:	2300      	movs	r3, #0
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001602:	f107 031c 	add.w	r3, r7, #28
 8001606:	4619      	mov	r1, r3
 8001608:	4816      	ldr	r0, [pc, #88]	; (8001664 <MX_TIM2_Init+0x100>)
 800160a:	f005 f813 	bl	8006634 <HAL_TIMEx_MasterConfigSynchronization>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001614:	f000 fa70 	bl	8001af8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001618:	2360      	movs	r3, #96	; 0x60
 800161a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001620:	2300      	movs	r3, #0
 8001622:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001624:	2300      	movs	r3, #0
 8001626:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001628:	463b      	mov	r3, r7
 800162a:	2200      	movs	r2, #0
 800162c:	4619      	mov	r1, r3
 800162e:	480d      	ldr	r0, [pc, #52]	; (8001664 <MX_TIM2_Init+0x100>)
 8001630:	f004 f9be 	bl	80059b0 <HAL_TIM_PWM_ConfigChannel>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800163a:	f000 fa5d 	bl	8001af8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800163e:	463b      	mov	r3, r7
 8001640:	220c      	movs	r2, #12
 8001642:	4619      	mov	r1, r3
 8001644:	4807      	ldr	r0, [pc, #28]	; (8001664 <MX_TIM2_Init+0x100>)
 8001646:	f004 f9b3 	bl	80059b0 <HAL_TIM_PWM_ConfigChannel>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001650:	f000 fa52 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001654:	4803      	ldr	r0, [pc, #12]	; (8001664 <MX_TIM2_Init+0x100>)
 8001656:	f000 fb27 	bl	8001ca8 <HAL_TIM_MspPostInit>

}
 800165a:	bf00      	nop
 800165c:	3738      	adds	r7, #56	; 0x38
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000188 	.word	0x20000188

08001668 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08e      	sub	sp, #56	; 0x38
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800166e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	609a      	str	r2, [r3, #8]
 800167a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800167c:	f107 031c 	add.w	r3, r7, #28
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001688:	463b      	mov	r3, r7
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	605a      	str	r2, [r3, #4]
 8001690:	609a      	str	r2, [r3, #8]
 8001692:	60da      	str	r2, [r3, #12]
 8001694:	611a      	str	r2, [r3, #16]
 8001696:	615a      	str	r2, [r3, #20]
 8001698:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800169a:	4b2d      	ldr	r3, [pc, #180]	; (8001750 <MX_TIM3_Init+0xe8>)
 800169c:	4a2d      	ldr	r2, [pc, #180]	; (8001754 <MX_TIM3_Init+0xec>)
 800169e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 36;
 80016a0:	4b2b      	ldr	r3, [pc, #172]	; (8001750 <MX_TIM3_Init+0xe8>)
 80016a2:	2224      	movs	r2, #36	; 0x24
 80016a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a6:	4b2a      	ldr	r3, [pc, #168]	; (8001750 <MX_TIM3_Init+0xe8>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 512;
 80016ac:	4b28      	ldr	r3, [pc, #160]	; (8001750 <MX_TIM3_Init+0xe8>)
 80016ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016b4:	4b26      	ldr	r3, [pc, #152]	; (8001750 <MX_TIM3_Init+0xe8>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ba:	4b25      	ldr	r3, [pc, #148]	; (8001750 <MX_TIM3_Init+0xe8>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016c0:	4823      	ldr	r0, [pc, #140]	; (8001750 <MX_TIM3_Init+0xe8>)
 80016c2:	f003 ffb1 	bl	8005628 <HAL_TIM_Base_Init>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80016cc:	f000 fa14 	bl	8001af8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016d4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016da:	4619      	mov	r1, r3
 80016dc:	481c      	ldr	r0, [pc, #112]	; (8001750 <MX_TIM3_Init+0xe8>)
 80016de:	f004 fa7b 	bl	8005bd8 <HAL_TIM_ConfigClockSource>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80016e8:	f000 fa06 	bl	8001af8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016ec:	4818      	ldr	r0, [pc, #96]	; (8001750 <MX_TIM3_Init+0xe8>)
 80016ee:	f003 fff2 	bl	80056d6 <HAL_TIM_PWM_Init>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80016f8:	f000 f9fe 	bl	8001af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016fc:	2300      	movs	r3, #0
 80016fe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001700:	2300      	movs	r3, #0
 8001702:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001704:	f107 031c 	add.w	r3, r7, #28
 8001708:	4619      	mov	r1, r3
 800170a:	4811      	ldr	r0, [pc, #68]	; (8001750 <MX_TIM3_Init+0xe8>)
 800170c:	f004 ff92 	bl	8006634 <HAL_TIMEx_MasterConfigSynchronization>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001716:	f000 f9ef 	bl	8001af8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800171a:	2360      	movs	r3, #96	; 0x60
 800171c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800171e:	2300      	movs	r3, #0
 8001720:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001722:	2300      	movs	r3, #0
 8001724:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001726:	2300      	movs	r3, #0
 8001728:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800172a:	463b      	mov	r3, r7
 800172c:	220c      	movs	r2, #12
 800172e:	4619      	mov	r1, r3
 8001730:	4807      	ldr	r0, [pc, #28]	; (8001750 <MX_TIM3_Init+0xe8>)
 8001732:	f004 f93d 	bl	80059b0 <HAL_TIM_PWM_ConfigChannel>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800173c:	f000 f9dc 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001740:	4803      	ldr	r0, [pc, #12]	; (8001750 <MX_TIM3_Init+0xe8>)
 8001742:	f000 fab1 	bl	8001ca8 <HAL_TIM_MspPostInit>

}
 8001746:	bf00      	nop
 8001748:	3738      	adds	r7, #56	; 0x38
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	200001d4 	.word	0x200001d4
 8001754:	40000400 	.word	0x40000400

08001758 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08e      	sub	sp, #56	; 0x38
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800175e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]
 8001768:	609a      	str	r2, [r3, #8]
 800176a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800176c:	f107 031c 	add.w	r3, r7, #28
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001778:	463b      	mov	r3, r7
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	609a      	str	r2, [r3, #8]
 8001782:	60da      	str	r2, [r3, #12]
 8001784:	611a      	str	r2, [r3, #16]
 8001786:	615a      	str	r2, [r3, #20]
 8001788:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800178a:	4b2d      	ldr	r3, [pc, #180]	; (8001840 <MX_TIM4_Init+0xe8>)
 800178c:	4a2d      	ldr	r2, [pc, #180]	; (8001844 <MX_TIM4_Init+0xec>)
 800178e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 36;
 8001790:	4b2b      	ldr	r3, [pc, #172]	; (8001840 <MX_TIM4_Init+0xe8>)
 8001792:	2224      	movs	r2, #36	; 0x24
 8001794:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001796:	4b2a      	ldr	r3, [pc, #168]	; (8001840 <MX_TIM4_Init+0xe8>)
 8001798:	2200      	movs	r2, #0
 800179a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800179c:	4b28      	ldr	r3, [pc, #160]	; (8001840 <MX_TIM4_Init+0xe8>)
 800179e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017a2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a4:	4b26      	ldr	r3, [pc, #152]	; (8001840 <MX_TIM4_Init+0xe8>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017aa:	4b25      	ldr	r3, [pc, #148]	; (8001840 <MX_TIM4_Init+0xe8>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80017b0:	4823      	ldr	r0, [pc, #140]	; (8001840 <MX_TIM4_Init+0xe8>)
 80017b2:	f003 ff39 	bl	8005628 <HAL_TIM_Base_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80017bc:	f000 f99c 	bl	8001af8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017c4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80017c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017ca:	4619      	mov	r1, r3
 80017cc:	481c      	ldr	r0, [pc, #112]	; (8001840 <MX_TIM4_Init+0xe8>)
 80017ce:	f004 fa03 	bl	8005bd8 <HAL_TIM_ConfigClockSource>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80017d8:	f000 f98e 	bl	8001af8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80017dc:	4818      	ldr	r0, [pc, #96]	; (8001840 <MX_TIM4_Init+0xe8>)
 80017de:	f003 ff7a 	bl	80056d6 <HAL_TIM_PWM_Init>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80017e8:	f000 f986 	bl	8001af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ec:	2300      	movs	r3, #0
 80017ee:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f0:	2300      	movs	r3, #0
 80017f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017f4:	f107 031c 	add.w	r3, r7, #28
 80017f8:	4619      	mov	r1, r3
 80017fa:	4811      	ldr	r0, [pc, #68]	; (8001840 <MX_TIM4_Init+0xe8>)
 80017fc:	f004 ff1a 	bl	8006634 <HAL_TIMEx_MasterConfigSynchronization>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001806:	f000 f977 	bl	8001af8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800180a:	2360      	movs	r3, #96	; 0x60
 800180c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001812:	2300      	movs	r3, #0
 8001814:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001816:	2300      	movs	r3, #0
 8001818:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800181a:	463b      	mov	r3, r7
 800181c:	2200      	movs	r2, #0
 800181e:	4619      	mov	r1, r3
 8001820:	4807      	ldr	r0, [pc, #28]	; (8001840 <MX_TIM4_Init+0xe8>)
 8001822:	f004 f8c5 	bl	80059b0 <HAL_TIM_PWM_ConfigChannel>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 800182c:	f000 f964 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001830:	4803      	ldr	r0, [pc, #12]	; (8001840 <MX_TIM4_Init+0xe8>)
 8001832:	f000 fa39 	bl	8001ca8 <HAL_TIM_MspPostInit>

}
 8001836:	bf00      	nop
 8001838:	3738      	adds	r7, #56	; 0x38
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20000220 	.word	0x20000220
 8001844:	40000800 	.word	0x40000800

08001848 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800184c:	4b15      	ldr	r3, [pc, #84]	; (80018a4 <MX_USART2_UART_Init+0x5c>)
 800184e:	4a16      	ldr	r2, [pc, #88]	; (80018a8 <MX_USART2_UART_Init+0x60>)
 8001850:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8001852:	4b14      	ldr	r3, [pc, #80]	; (80018a4 <MX_USART2_UART_Init+0x5c>)
 8001854:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001858:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800185a:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <MX_USART2_UART_Init+0x5c>)
 800185c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001860:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8001862:	4b10      	ldr	r3, [pc, #64]	; (80018a4 <MX_USART2_UART_Init+0x5c>)
 8001864:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001868:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 800186a:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <MX_USART2_UART_Init+0x5c>)
 800186c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001870:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001872:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <MX_USART2_UART_Init+0x5c>)
 8001874:	220c      	movs	r2, #12
 8001876:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001878:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <MX_USART2_UART_Init+0x5c>)
 800187a:	2200      	movs	r2, #0
 800187c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800187e:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <MX_USART2_UART_Init+0x5c>)
 8001880:	2200      	movs	r2, #0
 8001882:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001884:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <MX_USART2_UART_Init+0x5c>)
 8001886:	2200      	movs	r2, #0
 8001888:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800188a:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <MX_USART2_UART_Init+0x5c>)
 800188c:	2200      	movs	r2, #0
 800188e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001890:	4804      	ldr	r0, [pc, #16]	; (80018a4 <MX_USART2_UART_Init+0x5c>)
 8001892:	f004 ff5b 	bl	800674c <HAL_UART_Init>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800189c:	f000 f92c 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	2000026c 	.word	0x2000026c
 80018a8:	40004400 	.word	0x40004400

080018ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018b2:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <MX_DMA_Init+0x38>)
 80018b4:	695b      	ldr	r3, [r3, #20]
 80018b6:	4a0b      	ldr	r2, [pc, #44]	; (80018e4 <MX_DMA_Init+0x38>)
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	6153      	str	r3, [r2, #20]
 80018be:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <MX_DMA_Init+0x38>)
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	607b      	str	r3, [r7, #4]
 80018c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80018ca:	2200      	movs	r2, #0
 80018cc:	2100      	movs	r1, #0
 80018ce:	200b      	movs	r0, #11
 80018d0:	f001 fdc3 	bl	800345a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80018d4:	200b      	movs	r0, #11
 80018d6:	f001 fddc 	bl	8003492 <HAL_NVIC_EnableIRQ>

}
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40021000 	.word	0x40021000

080018e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08a      	sub	sp, #40	; 0x28
 80018ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ee:	f107 0314 	add.w	r3, r7, #20
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]
 80018fa:	60da      	str	r2, [r3, #12]
 80018fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018fe:	4b49      	ldr	r3, [pc, #292]	; (8001a24 <MX_GPIO_Init+0x13c>)
 8001900:	695b      	ldr	r3, [r3, #20]
 8001902:	4a48      	ldr	r2, [pc, #288]	; (8001a24 <MX_GPIO_Init+0x13c>)
 8001904:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001908:	6153      	str	r3, [r2, #20]
 800190a:	4b46      	ldr	r3, [pc, #280]	; (8001a24 <MX_GPIO_Init+0x13c>)
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001912:	613b      	str	r3, [r7, #16]
 8001914:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001916:	4b43      	ldr	r3, [pc, #268]	; (8001a24 <MX_GPIO_Init+0x13c>)
 8001918:	695b      	ldr	r3, [r3, #20]
 800191a:	4a42      	ldr	r2, [pc, #264]	; (8001a24 <MX_GPIO_Init+0x13c>)
 800191c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001920:	6153      	str	r3, [r2, #20]
 8001922:	4b40      	ldr	r3, [pc, #256]	; (8001a24 <MX_GPIO_Init+0x13c>)
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800192e:	4b3d      	ldr	r3, [pc, #244]	; (8001a24 <MX_GPIO_Init+0x13c>)
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	4a3c      	ldr	r2, [pc, #240]	; (8001a24 <MX_GPIO_Init+0x13c>)
 8001934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001938:	6153      	str	r3, [r2, #20]
 800193a:	4b3a      	ldr	r3, [pc, #232]	; (8001a24 <MX_GPIO_Init+0x13c>)
 800193c:	695b      	ldr	r3, [r3, #20]
 800193e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001946:	4b37      	ldr	r3, [pc, #220]	; (8001a24 <MX_GPIO_Init+0x13c>)
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	4a36      	ldr	r2, [pc, #216]	; (8001a24 <MX_GPIO_Init+0x13c>)
 800194c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001950:	6153      	str	r3, [r2, #20]
 8001952:	4b34      	ldr	r3, [pc, #208]	; (8001a24 <MX_GPIO_Init+0x13c>)
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800195a:	607b      	str	r3, [r7, #4]
 800195c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_D3_Pin|LED_D4_Pin|LED_D5_Pin, GPIO_PIN_RESET);
 800195e:	2200      	movs	r2, #0
 8001960:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8001964:	4830      	ldr	r0, [pc, #192]	; (8001a28 <MX_GPIO_Init+0x140>)
 8001966:	f002 f97b 	bl	8003c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_D2_GPIO_Port, LED_D2_Pin, GPIO_PIN_RESET);
 800196a:	2200      	movs	r2, #0
 800196c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001970:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001974:	f002 f974 	bl	8003c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001978:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800197c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800197e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001982:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	4619      	mov	r1, r3
 800198e:	4827      	ldr	r0, [pc, #156]	; (8001a2c <MX_GPIO_Init+0x144>)
 8001990:	f001 ffc4 	bl	800391c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001994:	23c0      	movs	r3, #192	; 0xc0
 8001996:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001998:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800199c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800199e:	2301      	movs	r3, #1
 80019a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a2:	f107 0314 	add.w	r3, r7, #20
 80019a6:	4619      	mov	r1, r3
 80019a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ac:	f001 ffb6 	bl	800391c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_D3_Pin LED_D4_Pin LED_D5_Pin */
  GPIO_InitStruct.Pin = LED_D3_Pin|LED_D4_Pin|LED_D5_Pin;
 80019b0:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80019b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b6:	2301      	movs	r3, #1
 80019b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019be:	2300      	movs	r3, #0
 80019c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c2:	f107 0314 	add.w	r3, r7, #20
 80019c6:	4619      	mov	r1, r3
 80019c8:	4817      	ldr	r0, [pc, #92]	; (8001a28 <MX_GPIO_Init+0x140>)
 80019ca:	f001 ffa7 	bl	800391c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_D2_Pin */
  GPIO_InitStruct.Pin = LED_D2_Pin;
 80019ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d4:	2301      	movs	r3, #1
 80019d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019dc:	2300      	movs	r3, #0
 80019de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_D2_GPIO_Port, &GPIO_InitStruct);
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	4619      	mov	r1, r3
 80019e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ea:	f001 ff97 	bl	800391c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80019ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80019f4:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80019f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019fa:	2301      	movs	r3, #1
 80019fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019fe:	f107 0314 	add.w	r3, r7, #20
 8001a02:	4619      	mov	r1, r3
 8001a04:	4808      	ldr	r0, [pc, #32]	; (8001a28 <MX_GPIO_Init+0x140>)
 8001a06:	f001 ff89 	bl	800391c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	2017      	movs	r0, #23
 8001a10:	f001 fd23 	bl	800345a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a14:	2017      	movs	r0, #23
 8001a16:	f001 fd3c 	bl	8003492 <HAL_NVIC_EnableIRQ>

}
 8001a1a:	bf00      	nop
 8001a1c:	3728      	adds	r7, #40	; 0x28
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40021000 	.word	0x40021000
 8001a28:	48000400 	.word	0x48000400
 8001a2c:	48000800 	.word	0x48000800

08001a30 <MF_mode_LED>:

/* USER CODE BEGIN 4 */
// FUNCTIONS
void MF_mode_LED(){
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001a34:	2201      	movs	r2, #1
 8001a36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a3e:	f002 f90f 	bl	8003c60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001a42:	2200      	movs	r2, #0
 8001a44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a48:	4807      	ldr	r0, [pc, #28]	; (8001a68 <MF_mode_LED+0x38>)
 8001a4a:	f002 f909 	bl	8003c60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	2110      	movs	r1, #16
 8001a52:	4805      	ldr	r0, [pc, #20]	; (8001a68 <MF_mode_LED+0x38>)
 8001a54:	f002 f904 	bl	8003c60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	2120      	movs	r1, #32
 8001a5c:	4802      	ldr	r0, [pc, #8]	; (8001a68 <MF_mode_LED+0x38>)
 8001a5e:	f002 f8ff 	bl	8003c60 <HAL_GPIO_WritePin>
}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	48000400 	.word	0x48000400

08001a6c <ME_mode_LED>:

void ME_mode_LED(){
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001a70:	2200      	movs	r2, #0
 8001a72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a7a:	f002 f8f1 	bl	8003c60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a84:	4804      	ldr	r0, [pc, #16]	; (8001a98 <ME_mode_LED+0x2c>)
 8001a86:	f002 f8eb 	bl	8003c60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2110      	movs	r1, #16
 8001a8e:	4802      	ldr	r0, [pc, #8]	; (8001a98 <ME_mode_LED+0x2c>)
 8001a90:	f002 f8e6 	bl	8003c60 <HAL_GPIO_WritePin>
}
 8001a94:	bf00      	nop
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	48000400 	.word	0x48000400

08001a9c <MM_mode_LED>:

void MM_mode_LED(){
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001aa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aaa:	f002 f8d9 	bl	8003c60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ab4:	4807      	ldr	r0, [pc, #28]	; (8001ad4 <MM_mode_LED+0x38>)
 8001ab6:	f002 f8d3 	bl	8003c60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001aba:	2201      	movs	r2, #1
 8001abc:	2110      	movs	r1, #16
 8001abe:	4805      	ldr	r0, [pc, #20]	; (8001ad4 <MM_mode_LED+0x38>)
 8001ac0:	f002 f8ce 	bl	8003c60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	2120      	movs	r1, #32
 8001ac8:	4802      	ldr	r0, [pc, #8]	; (8001ad4 <MM_mode_LED+0x38>)
 8001aca:	f002 f8c9 	bl	8003c60 <HAL_GPIO_WritePin>
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	48000400 	.word	0x48000400

08001ad8 <HAL_ADC_ConvCpltCallback>:


// adc buffer filled by dma circular sampling
// data should not be processed in the interrupt, it makes rest of the
// progam inaccessible
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
	adc_conv_complete = 1 ;
 8001ae0:	4b04      	ldr	r3, [pc, #16]	; (8001af4 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	701a      	strb	r2, [r3, #0]

}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	20002306 	.word	0x20002306

08001af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001afc:	b672      	cpsid	i
}
 8001afe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b00:	e7fe      	b.n	8001b00 <Error_Handler+0x8>
	...

08001b04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b0a:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <HAL_MspInit+0x44>)
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	4a0e      	ldr	r2, [pc, #56]	; (8001b48 <HAL_MspInit+0x44>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	6193      	str	r3, [r2, #24]
 8001b16:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <HAL_MspInit+0x44>)
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	607b      	str	r3, [r7, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b22:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <HAL_MspInit+0x44>)
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	4a08      	ldr	r2, [pc, #32]	; (8001b48 <HAL_MspInit+0x44>)
 8001b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b2c:	61d3      	str	r3, [r2, #28]
 8001b2e:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <HAL_MspInit+0x44>)
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b36:	603b      	str	r3, [r7, #0]
 8001b38:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b3a:	2007      	movs	r0, #7
 8001b3c:	f001 fc82 	bl	8003444 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b40:	bf00      	nop
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40021000 	.word	0x40021000

08001b4c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08a      	sub	sp, #40	; 0x28
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]
 8001b62:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b6c:	d14c      	bne.n	8001c08 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001b6e:	4b28      	ldr	r3, [pc, #160]	; (8001c10 <HAL_ADC_MspInit+0xc4>)
 8001b70:	695b      	ldr	r3, [r3, #20]
 8001b72:	4a27      	ldr	r2, [pc, #156]	; (8001c10 <HAL_ADC_MspInit+0xc4>)
 8001b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b78:	6153      	str	r3, [r2, #20]
 8001b7a:	4b25      	ldr	r3, [pc, #148]	; (8001c10 <HAL_ADC_MspInit+0xc4>)
 8001b7c:	695b      	ldr	r3, [r3, #20]
 8001b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b82:	613b      	str	r3, [r7, #16]
 8001b84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b86:	4b22      	ldr	r3, [pc, #136]	; (8001c10 <HAL_ADC_MspInit+0xc4>)
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	4a21      	ldr	r2, [pc, #132]	; (8001c10 <HAL_ADC_MspInit+0xc4>)
 8001b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b90:	6153      	str	r3, [r2, #20]
 8001b92:	4b1f      	ldr	r3, [pc, #124]	; (8001c10 <HAL_ADC_MspInit+0xc4>)
 8001b94:	695b      	ldr	r3, [r3, #20]
 8001b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001baa:	f107 0314 	add.w	r3, r7, #20
 8001bae:	4619      	mov	r1, r3
 8001bb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bb4:	f001 feb2 	bl	800391c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001bb8:	4b16      	ldr	r3, [pc, #88]	; (8001c14 <HAL_ADC_MspInit+0xc8>)
 8001bba:	4a17      	ldr	r2, [pc, #92]	; (8001c18 <HAL_ADC_MspInit+0xcc>)
 8001bbc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bbe:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <HAL_ADC_MspInit+0xc8>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bc4:	4b13      	ldr	r3, [pc, #76]	; (8001c14 <HAL_ADC_MspInit+0xc8>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001bca:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <HAL_ADC_MspInit+0xc8>)
 8001bcc:	2280      	movs	r2, #128	; 0x80
 8001bce:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001bd0:	4b10      	ldr	r3, [pc, #64]	; (8001c14 <HAL_ADC_MspInit+0xc8>)
 8001bd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bd6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bd8:	4b0e      	ldr	r3, [pc, #56]	; (8001c14 <HAL_ADC_MspInit+0xc8>)
 8001bda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bde:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001be0:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <HAL_ADC_MspInit+0xc8>)
 8001be2:	2220      	movs	r2, #32
 8001be4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001be6:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <HAL_ADC_MspInit+0xc8>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001bec:	4809      	ldr	r0, [pc, #36]	; (8001c14 <HAL_ADC_MspInit+0xc8>)
 8001bee:	f001 fc6a 	bl	80034c6 <HAL_DMA_Init>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8001bf8:	f7ff ff7e 	bl	8001af8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a05      	ldr	r2, [pc, #20]	; (8001c14 <HAL_ADC_MspInit+0xc8>)
 8001c00:	639a      	str	r2, [r3, #56]	; 0x38
 8001c02:	4a04      	ldr	r2, [pc, #16]	; (8001c14 <HAL_ADC_MspInit+0xc8>)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c08:	bf00      	nop
 8001c0a:	3728      	adds	r7, #40	; 0x28
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40021000 	.word	0x40021000
 8001c14:	20000144 	.word	0x20000144
 8001c18:	40020008 	.word	0x40020008

08001c1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b087      	sub	sp, #28
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c2c:	d10c      	bne.n	8001c48 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c2e:	4b1b      	ldr	r3, [pc, #108]	; (8001c9c <HAL_TIM_Base_MspInit+0x80>)
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	4a1a      	ldr	r2, [pc, #104]	; (8001c9c <HAL_TIM_Base_MspInit+0x80>)
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	61d3      	str	r3, [r2, #28]
 8001c3a:	4b18      	ldr	r3, [pc, #96]	; (8001c9c <HAL_TIM_Base_MspInit+0x80>)
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	617b      	str	r3, [r7, #20]
 8001c44:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001c46:	e022      	b.n	8001c8e <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a14      	ldr	r2, [pc, #80]	; (8001ca0 <HAL_TIM_Base_MspInit+0x84>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d10c      	bne.n	8001c6c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c52:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <HAL_TIM_Base_MspInit+0x80>)
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	4a11      	ldr	r2, [pc, #68]	; (8001c9c <HAL_TIM_Base_MspInit+0x80>)
 8001c58:	f043 0302 	orr.w	r3, r3, #2
 8001c5c:	61d3      	str	r3, [r2, #28]
 8001c5e:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <HAL_TIM_Base_MspInit+0x80>)
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	613b      	str	r3, [r7, #16]
 8001c68:	693b      	ldr	r3, [r7, #16]
}
 8001c6a:	e010      	b.n	8001c8e <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a0c      	ldr	r2, [pc, #48]	; (8001ca4 <HAL_TIM_Base_MspInit+0x88>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d10b      	bne.n	8001c8e <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c76:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <HAL_TIM_Base_MspInit+0x80>)
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	4a08      	ldr	r2, [pc, #32]	; (8001c9c <HAL_TIM_Base_MspInit+0x80>)
 8001c7c:	f043 0304 	orr.w	r3, r3, #4
 8001c80:	61d3      	str	r3, [r2, #28]
 8001c82:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <HAL_TIM_Base_MspInit+0x80>)
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	f003 0304 	and.w	r3, r3, #4
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
}
 8001c8e:	bf00      	nop
 8001c90:	371c      	adds	r7, #28
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	40000400 	.word	0x40000400
 8001ca4:	40000800 	.word	0x40000800

08001ca8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08c      	sub	sp, #48	; 0x30
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb0:	f107 031c 	add.w	r3, r7, #28
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]
 8001cbe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cc8:	d13a      	bne.n	8001d40 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cca:	4b42      	ldr	r3, [pc, #264]	; (8001dd4 <HAL_TIM_MspPostInit+0x12c>)
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	4a41      	ldr	r2, [pc, #260]	; (8001dd4 <HAL_TIM_MspPostInit+0x12c>)
 8001cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cd4:	6153      	str	r3, [r2, #20]
 8001cd6:	4b3f      	ldr	r3, [pc, #252]	; (8001dd4 <HAL_TIM_MspPostInit+0x12c>)
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cde:	61bb      	str	r3, [r7, #24]
 8001ce0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce2:	4b3c      	ldr	r3, [pc, #240]	; (8001dd4 <HAL_TIM_MspPostInit+0x12c>)
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	4a3b      	ldr	r2, [pc, #236]	; (8001dd4 <HAL_TIM_MspPostInit+0x12c>)
 8001ce8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cec:	6153      	str	r3, [r2, #20]
 8001cee:	4b39      	ldr	r3, [pc, #228]	; (8001dd4 <HAL_TIM_MspPostInit+0x12c>)
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cf6:	617b      	str	r3, [r7, #20]
 8001cf8:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001cfa:	2320      	movs	r3, #32
 8001cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d06:	2300      	movs	r3, #0
 8001d08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0e:	f107 031c 	add.w	r3, r7, #28
 8001d12:	4619      	mov	r1, r3
 8001d14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d18:	f001 fe00 	bl	800391c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001d1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d22:	2302      	movs	r3, #2
 8001d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d32:	f107 031c 	add.w	r3, r7, #28
 8001d36:	4619      	mov	r1, r3
 8001d38:	4827      	ldr	r0, [pc, #156]	; (8001dd8 <HAL_TIM_MspPostInit+0x130>)
 8001d3a:	f001 fdef 	bl	800391c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001d3e:	e044      	b.n	8001dca <HAL_TIM_MspPostInit+0x122>
  else if(htim->Instance==TIM3)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a25      	ldr	r2, [pc, #148]	; (8001ddc <HAL_TIM_MspPostInit+0x134>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d11c      	bne.n	8001d84 <HAL_TIM_MspPostInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d4a:	4b22      	ldr	r3, [pc, #136]	; (8001dd4 <HAL_TIM_MspPostInit+0x12c>)
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	4a21      	ldr	r2, [pc, #132]	; (8001dd4 <HAL_TIM_MspPostInit+0x12c>)
 8001d50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d54:	6153      	str	r3, [r2, #20]
 8001d56:	4b1f      	ldr	r3, [pc, #124]	; (8001dd4 <HAL_TIM_MspPostInit+0x12c>)
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d5e:	613b      	str	r3, [r7, #16]
 8001d60:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001d62:	2302      	movs	r3, #2
 8001d64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d66:	2302      	movs	r3, #2
 8001d68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d72:	2302      	movs	r3, #2
 8001d74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d76:	f107 031c 	add.w	r3, r7, #28
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4816      	ldr	r0, [pc, #88]	; (8001dd8 <HAL_TIM_MspPostInit+0x130>)
 8001d7e:	f001 fdcd 	bl	800391c <HAL_GPIO_Init>
}
 8001d82:	e022      	b.n	8001dca <HAL_TIM_MspPostInit+0x122>
  else if(htim->Instance==TIM4)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a15      	ldr	r2, [pc, #84]	; (8001de0 <HAL_TIM_MspPostInit+0x138>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d11d      	bne.n	8001dca <HAL_TIM_MspPostInit+0x122>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8e:	4b11      	ldr	r3, [pc, #68]	; (8001dd4 <HAL_TIM_MspPostInit+0x12c>)
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	4a10      	ldr	r2, [pc, #64]	; (8001dd4 <HAL_TIM_MspPostInit+0x12c>)
 8001d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d98:	6153      	str	r3, [r2, #20]
 8001d9a:	4b0e      	ldr	r3, [pc, #56]	; (8001dd4 <HAL_TIM_MspPostInit+0x12c>)
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001da6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dac:	2302      	movs	r3, #2
 8001dae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db4:	2300      	movs	r3, #0
 8001db6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001db8:	230a      	movs	r3, #10
 8001dba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dbc:	f107 031c 	add.w	r3, r7, #28
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dc6:	f001 fda9 	bl	800391c <HAL_GPIO_Init>
}
 8001dca:	bf00      	nop
 8001dcc:	3730      	adds	r7, #48	; 0x30
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	48000400 	.word	0x48000400
 8001ddc:	40000400 	.word	0x40000400
 8001de0:	40000800 	.word	0x40000800

08001de4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08a      	sub	sp, #40	; 0x28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dec:	f107 0314 	add.w	r3, r7, #20
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a1b      	ldr	r2, [pc, #108]	; (8001e70 <HAL_UART_MspInit+0x8c>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d130      	bne.n	8001e68 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e06:	4b1b      	ldr	r3, [pc, #108]	; (8001e74 <HAL_UART_MspInit+0x90>)
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	4a1a      	ldr	r2, [pc, #104]	; (8001e74 <HAL_UART_MspInit+0x90>)
 8001e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e10:	61d3      	str	r3, [r2, #28]
 8001e12:	4b18      	ldr	r3, [pc, #96]	; (8001e74 <HAL_UART_MspInit+0x90>)
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1a:	613b      	str	r3, [r7, #16]
 8001e1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1e:	4b15      	ldr	r3, [pc, #84]	; (8001e74 <HAL_UART_MspInit+0x90>)
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	4a14      	ldr	r2, [pc, #80]	; (8001e74 <HAL_UART_MspInit+0x90>)
 8001e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e28:	6153      	str	r3, [r2, #20]
 8001e2a:	4b12      	ldr	r3, [pc, #72]	; (8001e74 <HAL_UART_MspInit+0x90>)
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e36:	230c      	movs	r3, #12
 8001e38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e42:	2300      	movs	r3, #0
 8001e44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e46:	2307      	movs	r3, #7
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4a:	f107 0314 	add.w	r3, r7, #20
 8001e4e:	4619      	mov	r1, r3
 8001e50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e54:	f001 fd62 	bl	800391c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e58:	2200      	movs	r2, #0
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	2026      	movs	r0, #38	; 0x26
 8001e5e:	f001 fafc 	bl	800345a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e62:	2026      	movs	r0, #38	; 0x26
 8001e64:	f001 fb15 	bl	8003492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e68:	bf00      	nop
 8001e6a:	3728      	adds	r7, #40	; 0x28
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40004400 	.word	0x40004400
 8001e74:	40021000 	.word	0x40021000

08001e78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e7c:	e7fe      	b.n	8001e7c <NMI_Handler+0x4>

08001e7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e82:	e7fe      	b.n	8001e82 <HardFault_Handler+0x4>

08001e84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e88:	e7fe      	b.n	8001e88 <MemManage_Handler+0x4>

08001e8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e8e:	e7fe      	b.n	8001e8e <BusFault_Handler+0x4>

08001e90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e94:	e7fe      	b.n	8001e94 <UsageFault_Handler+0x4>

08001e96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e96:	b480      	push	{r7}
 8001e98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ec4:	f000 f972 	bl	80021ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ec8:	bf00      	nop
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ed0:	4802      	ldr	r0, [pc, #8]	; (8001edc <DMA1_Channel1_IRQHandler+0x10>)
 8001ed2:	f001 fc15 	bl	8003700 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20000144 	.word	0x20000144

08001ee0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_6) != RESET){
 8001ee4:	4b64      	ldr	r3, [pc, #400]	; (8002078 <EXTI9_5_IRQHandler+0x198>)
 8001ee6:	695b      	ldr	r3, [r3, #20]
 8001ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d038      	beq.n	8001f62 <EXTI9_5_IRQHandler+0x82>

		if(HAL_GetTick() - ticks_pressed >= 20){
 8001ef0:	f000 f970 	bl	80021d4 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	4b61      	ldr	r3, [pc, #388]	; (800207c <EXTI9_5_IRQHandler+0x19c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b13      	cmp	r3, #19
 8001efe:	d92c      	bls.n	8001f5a <EXTI9_5_IRQHandler+0x7a>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 0){
 8001f00:	4b5f      	ldr	r3, [pc, #380]	; (8002080 <EXTI9_5_IRQHandler+0x1a0>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d112      	bne.n	8001f30 <EXTI9_5_IRQHandler+0x50>
 8001f0a:	2140      	movs	r1, #64	; 0x40
 8001f0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f10:	f001 fe8e 	bl	8003c30 <HAL_GPIO_ReadPin>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d10a      	bne.n	8001f30 <EXTI9_5_IRQHandler+0x50>
				button_state =0 ; // stable low reached
 8001f1a:	4b59      	ldr	r3, [pc, #356]	; (8002080 <EXTI9_5_IRQHandler+0x1a0>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 8001f20:	f000 f958 	bl	80021d4 <HAL_GetTick>
 8001f24:	4603      	mov	r3, r0
 8001f26:	4a55      	ldr	r2, [pc, #340]	; (800207c <EXTI9_5_IRQHandler+0x19c>)
 8001f28:	6013      	str	r3, [r2, #0]

				middle_button_pressed = 1;
 8001f2a:	4b56      	ldr	r3, [pc, #344]	; (8002084 <EXTI9_5_IRQHandler+0x1a4>)
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOA ,GPIO_PIN_6) == 1 ){
 8001f30:	4b53      	ldr	r3, [pc, #332]	; (8002080 <EXTI9_5_IRQHandler+0x1a0>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10f      	bne.n	8001f5a <EXTI9_5_IRQHandler+0x7a>
 8001f3a:	2140      	movs	r1, #64	; 0x40
 8001f3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f40:	f001 fe76 	bl	8003c30 <HAL_GPIO_ReadPin>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d107      	bne.n	8001f5a <EXTI9_5_IRQHandler+0x7a>
				ticks_pressed = HAL_GetTick() ;
 8001f4a:	f000 f943 	bl	80021d4 <HAL_GetTick>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	4a4a      	ldr	r2, [pc, #296]	; (800207c <EXTI9_5_IRQHandler+0x19c>)
 8001f52:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 8001f54:	4b4a      	ldr	r3, [pc, #296]	; (8002080 <EXTI9_5_IRQHandler+0x1a0>)
 8001f56:	2201      	movs	r2, #1
 8001f58:	701a      	strb	r2, [r3, #0]

			}
		}
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6) ;
 8001f5a:	4b47      	ldr	r3, [pc, #284]	; (8002078 <EXTI9_5_IRQHandler+0x198>)
 8001f5c:	2240      	movs	r2, #64	; 0x40
 8001f5e:	615a      	str	r2, [r3, #20]
 8001f60:	e07d      	b.n	800205e <EXTI9_5_IRQHandler+0x17e>
	}
	else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET){
 8001f62:	4b45      	ldr	r3, [pc, #276]	; (8002078 <EXTI9_5_IRQHandler+0x198>)
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d038      	beq.n	8001fe0 <EXTI9_5_IRQHandler+0x100>

			if(HAL_GetTick() - ticks_pressed >= 20){
 8001f6e:	f000 f931 	bl	80021d4 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	4b41      	ldr	r3, [pc, #260]	; (800207c <EXTI9_5_IRQHandler+0x19c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b13      	cmp	r3, #19
 8001f7c:	d92c      	bls.n	8001fd8 <EXTI9_5_IRQHandler+0xf8>
				// stable low state
				if(button_state == 1  && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 0){
 8001f7e:	4b40      	ldr	r3, [pc, #256]	; (8002080 <EXTI9_5_IRQHandler+0x1a0>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d112      	bne.n	8001fae <EXTI9_5_IRQHandler+0xce>
 8001f88:	2180      	movs	r1, #128	; 0x80
 8001f8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f8e:	f001 fe4f 	bl	8003c30 <HAL_GPIO_ReadPin>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d10a      	bne.n	8001fae <EXTI9_5_IRQHandler+0xce>
					button_state =0 ; // stable low reached
 8001f98:	4b39      	ldr	r3, [pc, #228]	; (8002080 <EXTI9_5_IRQHandler+0x1a0>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	701a      	strb	r2, [r3, #0]
					ticks_pressed = HAL_GetTick() ;
 8001f9e:	f000 f919 	bl	80021d4 <HAL_GetTick>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	4a35      	ldr	r2, [pc, #212]	; (800207c <EXTI9_5_IRQHandler+0x19c>)
 8001fa6:	6013      	str	r3, [r2, #0]

					right_button_pressed = 1;
 8001fa8:	4b37      	ldr	r3, [pc, #220]	; (8002088 <EXTI9_5_IRQHandler+0x1a8>)
 8001faa:	2201      	movs	r2, #1
 8001fac:	701a      	strb	r2, [r3, #0]
				}

				// stable high state
				if(button_state == 0 && HAL_GPIO_ReadPin(GPIOA ,GPIO_PIN_7) == 1 ){
 8001fae:	4b34      	ldr	r3, [pc, #208]	; (8002080 <EXTI9_5_IRQHandler+0x1a0>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d10f      	bne.n	8001fd8 <EXTI9_5_IRQHandler+0xf8>
 8001fb8:	2180      	movs	r1, #128	; 0x80
 8001fba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fbe:	f001 fe37 	bl	8003c30 <HAL_GPIO_ReadPin>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d107      	bne.n	8001fd8 <EXTI9_5_IRQHandler+0xf8>
					ticks_pressed = HAL_GetTick() ;
 8001fc8:	f000 f904 	bl	80021d4 <HAL_GetTick>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	4a2b      	ldr	r2, [pc, #172]	; (800207c <EXTI9_5_IRQHandler+0x19c>)
 8001fd0:	6013      	str	r3, [r2, #0]
					button_state =1 ; // stable high state
 8001fd2:	4b2b      	ldr	r3, [pc, #172]	; (8002080 <EXTI9_5_IRQHandler+0x1a0>)
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	701a      	strb	r2, [r3, #0]

				}
			}


			__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7) ;
 8001fd8:	4b27      	ldr	r3, [pc, #156]	; (8002078 <EXTI9_5_IRQHandler+0x198>)
 8001fda:	2280      	movs	r2, #128	; 0x80
 8001fdc:	615a      	str	r2, [r3, #20]
 8001fde:	e03e      	b.n	800205e <EXTI9_5_IRQHandler+0x17e>
	}
	else{
		if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_8) != RESET){
 8001fe0:	4b25      	ldr	r3, [pc, #148]	; (8002078 <EXTI9_5_IRQHandler+0x198>)
 8001fe2:	695b      	ldr	r3, [r3, #20]
 8001fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d038      	beq.n	800205e <EXTI9_5_IRQHandler+0x17e>

				if(HAL_GetTick() - ticks_pressed >= 20){
 8001fec:	f000 f8f2 	bl	80021d4 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	4b22      	ldr	r3, [pc, #136]	; (800207c <EXTI9_5_IRQHandler+0x19c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b13      	cmp	r3, #19
 8001ffa:	d92c      	bls.n	8002056 <EXTI9_5_IRQHandler+0x176>
					// stable low state
					if(button_state == 1  && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == 0){
 8001ffc:	4b20      	ldr	r3, [pc, #128]	; (8002080 <EXTI9_5_IRQHandler+0x1a0>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b01      	cmp	r3, #1
 8002004:	d112      	bne.n	800202c <EXTI9_5_IRQHandler+0x14c>
 8002006:	f44f 7180 	mov.w	r1, #256	; 0x100
 800200a:	4820      	ldr	r0, [pc, #128]	; (800208c <EXTI9_5_IRQHandler+0x1ac>)
 800200c:	f001 fe10 	bl	8003c30 <HAL_GPIO_ReadPin>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d10a      	bne.n	800202c <EXTI9_5_IRQHandler+0x14c>
						button_state =0 ; // stable low reached
 8002016:	4b1a      	ldr	r3, [pc, #104]	; (8002080 <EXTI9_5_IRQHandler+0x1a0>)
 8002018:	2200      	movs	r2, #0
 800201a:	701a      	strb	r2, [r3, #0]
						ticks_pressed = HAL_GetTick() ;
 800201c:	f000 f8da 	bl	80021d4 <HAL_GetTick>
 8002020:	4603      	mov	r3, r0
 8002022:	4a16      	ldr	r2, [pc, #88]	; (800207c <EXTI9_5_IRQHandler+0x19c>)
 8002024:	6013      	str	r3, [r2, #0]

						left_button_pressed = 1;
 8002026:	4b1a      	ldr	r3, [pc, #104]	; (8002090 <EXTI9_5_IRQHandler+0x1b0>)
 8002028:	2201      	movs	r2, #1
 800202a:	701a      	strb	r2, [r3, #0]
					}

					// stable high state
					if(button_state == 0 && HAL_GPIO_ReadPin(GPIOB ,GPIO_PIN_8) == 1 ){
 800202c:	4b14      	ldr	r3, [pc, #80]	; (8002080 <EXTI9_5_IRQHandler+0x1a0>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d10f      	bne.n	8002056 <EXTI9_5_IRQHandler+0x176>
 8002036:	f44f 7180 	mov.w	r1, #256	; 0x100
 800203a:	4814      	ldr	r0, [pc, #80]	; (800208c <EXTI9_5_IRQHandler+0x1ac>)
 800203c:	f001 fdf8 	bl	8003c30 <HAL_GPIO_ReadPin>
 8002040:	4603      	mov	r3, r0
 8002042:	2b01      	cmp	r3, #1
 8002044:	d107      	bne.n	8002056 <EXTI9_5_IRQHandler+0x176>
						ticks_pressed = HAL_GetTick() ;
 8002046:	f000 f8c5 	bl	80021d4 <HAL_GetTick>
 800204a:	4603      	mov	r3, r0
 800204c:	4a0b      	ldr	r2, [pc, #44]	; (800207c <EXTI9_5_IRQHandler+0x19c>)
 800204e:	6013      	str	r3, [r2, #0]
						button_state =1 ; // stable high state
 8002050:	4b0b      	ldr	r3, [pc, #44]	; (8002080 <EXTI9_5_IRQHandler+0x1a0>)
 8002052:	2201      	movs	r2, #1
 8002054:	701a      	strb	r2, [r3, #0]

					}
				}
				__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8) ;
 8002056:	4b08      	ldr	r3, [pc, #32]	; (8002078 <EXTI9_5_IRQHandler+0x198>)
 8002058:	f44f 7280 	mov.w	r2, #256	; 0x100
 800205c:	615a      	str	r2, [r3, #20]
			}
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800205e:	2040      	movs	r0, #64	; 0x40
 8002060:	f001 fe16 	bl	8003c90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002064:	2080      	movs	r0, #128	; 0x80
 8002066:	f001 fe13 	bl	8003c90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800206a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800206e:	f001 fe0f 	bl	8003c90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40010400 	.word	0x40010400
 800207c:	20002330 	.word	0x20002330
 8002080:	20000067 	.word	0x20000067
 8002084:	20002334 	.word	0x20002334
 8002088:	20002335 	.word	0x20002335
 800208c:	48000400 	.word	0x48000400
 8002090:	20002336 	.word	0x20002336

08002094 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002098:	4802      	ldr	r0, [pc, #8]	; (80020a4 <USART2_IRQHandler+0x10>)
 800209a:	f004 fcd1 	bl	8006a40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	2000026c 	.word	0x2000026c

080020a8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020ac:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <SystemInit+0x20>)
 80020ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b2:	4a05      	ldr	r2, [pc, #20]	; (80020c8 <SystemInit+0x20>)
 80020b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020bc:	bf00      	nop
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	e000ed00 	.word	0xe000ed00

080020cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80020cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002104 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80020d0:	f7ff ffea 	bl	80020a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020d4:	480c      	ldr	r0, [pc, #48]	; (8002108 <LoopForever+0x6>)
  ldr r1, =_edata
 80020d6:	490d      	ldr	r1, [pc, #52]	; (800210c <LoopForever+0xa>)
  ldr r2, =_sidata
 80020d8:	4a0d      	ldr	r2, [pc, #52]	; (8002110 <LoopForever+0xe>)
  movs r3, #0
 80020da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020dc:	e002      	b.n	80020e4 <LoopCopyDataInit>

080020de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020e2:	3304      	adds	r3, #4

080020e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020e8:	d3f9      	bcc.n	80020de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ea:	4a0a      	ldr	r2, [pc, #40]	; (8002114 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020ec:	4c0a      	ldr	r4, [pc, #40]	; (8002118 <LoopForever+0x16>)
  movs r3, #0
 80020ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020f0:	e001      	b.n	80020f6 <LoopFillZerobss>

080020f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020f4:	3204      	adds	r2, #4

080020f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020f8:	d3fb      	bcc.n	80020f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020fa:	f005 ff0f 	bl	8007f1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020fe:	f7fe ff13 	bl	8000f28 <main>

08002102 <LoopForever>:

LoopForever:
    b LoopForever
 8002102:	e7fe      	b.n	8002102 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002104:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002108:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800210c:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8002110:	08008388 	.word	0x08008388
  ldr r2, =_sbss
 8002114:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8002118:	2000233c 	.word	0x2000233c

0800211c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800211c:	e7fe      	b.n	800211c <ADC1_2_IRQHandler>
	...

08002120 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002124:	4b08      	ldr	r3, [pc, #32]	; (8002148 <HAL_Init+0x28>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a07      	ldr	r2, [pc, #28]	; (8002148 <HAL_Init+0x28>)
 800212a:	f043 0310 	orr.w	r3, r3, #16
 800212e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002130:	2003      	movs	r0, #3
 8002132:	f001 f987 	bl	8003444 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002136:	2000      	movs	r0, #0
 8002138:	f000 f808 	bl	800214c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800213c:	f7ff fce2 	bl	8001b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40022000 	.word	0x40022000

0800214c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002154:	4b12      	ldr	r3, [pc, #72]	; (80021a0 <HAL_InitTick+0x54>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	4b12      	ldr	r3, [pc, #72]	; (80021a4 <HAL_InitTick+0x58>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	4619      	mov	r1, r3
 800215e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002162:	fbb3 f3f1 	udiv	r3, r3, r1
 8002166:	fbb2 f3f3 	udiv	r3, r2, r3
 800216a:	4618      	mov	r0, r3
 800216c:	f001 f99f 	bl	80034ae <HAL_SYSTICK_Config>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e00e      	b.n	8002198 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b0f      	cmp	r3, #15
 800217e:	d80a      	bhi.n	8002196 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002180:	2200      	movs	r2, #0
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	f04f 30ff 	mov.w	r0, #4294967295
 8002188:	f001 f967 	bl	800345a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800218c:	4a06      	ldr	r2, [pc, #24]	; (80021a8 <HAL_InitTick+0x5c>)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002192:	2300      	movs	r3, #0
 8002194:	e000      	b.n	8002198 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
}
 8002198:	4618      	mov	r0, r3
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	20000068 	.word	0x20000068
 80021a4:	20000070 	.word	0x20000070
 80021a8:	2000006c 	.word	0x2000006c

080021ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021b0:	4b06      	ldr	r3, [pc, #24]	; (80021cc <HAL_IncTick+0x20>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	461a      	mov	r2, r3
 80021b6:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <HAL_IncTick+0x24>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4413      	add	r3, r2
 80021bc:	4a04      	ldr	r2, [pc, #16]	; (80021d0 <HAL_IncTick+0x24>)
 80021be:	6013      	str	r3, [r2, #0]
}
 80021c0:	bf00      	nop
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	20000070 	.word	0x20000070
 80021d0:	20002338 	.word	0x20002338

080021d4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  return uwTick;  
 80021d8:	4b03      	ldr	r3, [pc, #12]	; (80021e8 <HAL_GetTick+0x14>)
 80021da:	681b      	ldr	r3, [r3, #0]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	20002338 	.word	0x20002338

080021ec <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021f4:	f7ff ffee 	bl	80021d4 <HAL_GetTick>
 80021f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002204:	d005      	beq.n	8002212 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002206:	4b0a      	ldr	r3, [pc, #40]	; (8002230 <HAL_Delay+0x44>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	461a      	mov	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	4413      	add	r3, r2
 8002210:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002212:	bf00      	nop
 8002214:	f7ff ffde 	bl	80021d4 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	429a      	cmp	r2, r3
 8002222:	d8f7      	bhi.n	8002214 <HAL_Delay+0x28>
  {
  }
}
 8002224:	bf00      	nop
 8002226:	bf00      	nop
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	20000070 	.word	0x20000070

08002234 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b09a      	sub	sp, #104	; 0x68
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002264:	2300      	movs	r3, #0
 8002266:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800226a:	2300      	movs	r3, #0
 800226c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800226e:	2300      	movs	r3, #0
 8002270:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e1e3      	b.n	8002644 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	f003 0310 	and.w	r3, r3, #16
 800228a:	2b00      	cmp	r3, #0
 800228c:	d176      	bne.n	800237c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	2b00      	cmp	r3, #0
 8002294:	d152      	bne.n	800233c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f7ff fc4b 	bl	8001b4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d13b      	bne.n	800233c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 ff87 	bl	80031d8 <ADC_Disable>
 80022ca:	4603      	mov	r3, r0
 80022cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d4:	f003 0310 	and.w	r3, r3, #16
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d12f      	bne.n	800233c <HAL_ADC_Init+0xe0>
 80022dc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d12b      	bne.n	800233c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022ec:	f023 0302 	bic.w	r3, r3, #2
 80022f0:	f043 0202 	orr.w	r2, r3, #2
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	689a      	ldr	r2, [r3, #8]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002306:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	689a      	ldr	r2, [r3, #8]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002316:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002318:	4b92      	ldr	r3, [pc, #584]	; (8002564 <HAL_ADC_Init+0x308>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a92      	ldr	r2, [pc, #584]	; (8002568 <HAL_ADC_Init+0x30c>)
 800231e:	fba2 2303 	umull	r2, r3, r2, r3
 8002322:	0c9a      	lsrs	r2, r3, #18
 8002324:	4613      	mov	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800232e:	e002      	b.n	8002336 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	3b01      	subs	r3, #1
 8002334:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1f9      	bne.n	8002330 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d007      	beq.n	800235a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002354:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002358:	d110      	bne.n	800237c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	f023 0312 	bic.w	r3, r3, #18
 8002362:	f043 0210 	orr.w	r2, r3, #16
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236e:	f043 0201 	orr.w	r2, r3, #1
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002380:	f003 0310 	and.w	r3, r3, #16
 8002384:	2b00      	cmp	r3, #0
 8002386:	f040 8150 	bne.w	800262a <HAL_ADC_Init+0x3ce>
 800238a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800238e:	2b00      	cmp	r3, #0
 8002390:	f040 814b 	bne.w	800262a <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f040 8143 	bne.w	800262a <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80023ac:	f043 0202 	orr.w	r2, r3, #2
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023bc:	d004      	beq.n	80023c8 <HAL_ADC_Init+0x16c>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a6a      	ldr	r2, [pc, #424]	; (800256c <HAL_ADC_Init+0x310>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d101      	bne.n	80023cc <HAL_ADC_Init+0x170>
 80023c8:	4b69      	ldr	r3, [pc, #420]	; (8002570 <HAL_ADC_Init+0x314>)
 80023ca:	e000      	b.n	80023ce <HAL_ADC_Init+0x172>
 80023cc:	4b69      	ldr	r3, [pc, #420]	; (8002574 <HAL_ADC_Init+0x318>)
 80023ce:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023d8:	d102      	bne.n	80023e0 <HAL_ADC_Init+0x184>
 80023da:	4b64      	ldr	r3, [pc, #400]	; (800256c <HAL_ADC_Init+0x310>)
 80023dc:	60fb      	str	r3, [r7, #12]
 80023de:	e01a      	b.n	8002416 <HAL_ADC_Init+0x1ba>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a61      	ldr	r2, [pc, #388]	; (800256c <HAL_ADC_Init+0x310>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d103      	bne.n	80023f2 <HAL_ADC_Init+0x196>
 80023ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	e011      	b.n	8002416 <HAL_ADC_Init+0x1ba>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a60      	ldr	r2, [pc, #384]	; (8002578 <HAL_ADC_Init+0x31c>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d102      	bne.n	8002402 <HAL_ADC_Init+0x1a6>
 80023fc:	4b5f      	ldr	r3, [pc, #380]	; (800257c <HAL_ADC_Init+0x320>)
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	e009      	b.n	8002416 <HAL_ADC_Init+0x1ba>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a5d      	ldr	r2, [pc, #372]	; (800257c <HAL_ADC_Init+0x320>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d102      	bne.n	8002412 <HAL_ADC_Init+0x1b6>
 800240c:	4b5a      	ldr	r3, [pc, #360]	; (8002578 <HAL_ADC_Init+0x31c>)
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	e001      	b.n	8002416 <HAL_ADC_Init+0x1ba>
 8002412:	2300      	movs	r3, #0
 8002414:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f003 0303 	and.w	r3, r3, #3
 8002420:	2b01      	cmp	r3, #1
 8002422:	d108      	bne.n	8002436 <HAL_ADC_Init+0x1da>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b01      	cmp	r3, #1
 8002430:	d101      	bne.n	8002436 <HAL_ADC_Init+0x1da>
 8002432:	2301      	movs	r3, #1
 8002434:	e000      	b.n	8002438 <HAL_ADC_Init+0x1dc>
 8002436:	2300      	movs	r3, #0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d11c      	bne.n	8002476 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800243c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800243e:	2b00      	cmp	r3, #0
 8002440:	d010      	beq.n	8002464 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	2b01      	cmp	r3, #1
 800244c:	d107      	bne.n	800245e <HAL_ADC_Init+0x202>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b01      	cmp	r3, #1
 8002458:	d101      	bne.n	800245e <HAL_ADC_Init+0x202>
 800245a:	2301      	movs	r3, #1
 800245c:	e000      	b.n	8002460 <HAL_ADC_Init+0x204>
 800245e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002460:	2b00      	cmp	r3, #0
 8002462:	d108      	bne.n	8002476 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002464:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	431a      	orrs	r2, r3
 8002472:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002474:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	7e5b      	ldrb	r3, [r3, #25]
 800247a:	035b      	lsls	r3, r3, #13
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002480:	2a01      	cmp	r2, #1
 8002482:	d002      	beq.n	800248a <HAL_ADC_Init+0x22e>
 8002484:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002488:	e000      	b.n	800248c <HAL_ADC_Init+0x230>
 800248a:	2200      	movs	r2, #0
 800248c:	431a      	orrs	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	431a      	orrs	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	4313      	orrs	r3, r2
 800249a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800249c:	4313      	orrs	r3, r2
 800249e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d11b      	bne.n	80024e2 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	7e5b      	ldrb	r3, [r3, #25]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d109      	bne.n	80024c6 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b6:	3b01      	subs	r3, #1
 80024b8:	045a      	lsls	r2, r3, #17
 80024ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024bc:	4313      	orrs	r3, r2
 80024be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c2:	663b      	str	r3, [r7, #96]	; 0x60
 80024c4:	e00d      	b.n	80024e2 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80024ce:	f043 0220 	orr.w	r2, r3, #32
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024da:	f043 0201 	orr.w	r2, r3, #1
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d054      	beq.n	8002594 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a22      	ldr	r2, [pc, #136]	; (8002578 <HAL_ADC_Init+0x31c>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d004      	beq.n	80024fe <HAL_ADC_Init+0x2a2>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a20      	ldr	r2, [pc, #128]	; (800257c <HAL_ADC_Init+0x320>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d140      	bne.n	8002580 <HAL_ADC_Init+0x324>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002502:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8002506:	d02a      	beq.n	800255e <HAL_ADC_Init+0x302>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002510:	d022      	beq.n	8002558 <HAL_ADC_Init+0x2fc>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002516:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800251a:	d01a      	beq.n	8002552 <HAL_ADC_Init+0x2f6>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002520:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8002524:	d012      	beq.n	800254c <HAL_ADC_Init+0x2f0>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252a:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 800252e:	d00a      	beq.n	8002546 <HAL_ADC_Init+0x2ea>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002534:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8002538:	d002      	beq.n	8002540 <HAL_ADC_Init+0x2e4>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253e:	e023      	b.n	8002588 <HAL_ADC_Init+0x32c>
 8002540:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002544:	e020      	b.n	8002588 <HAL_ADC_Init+0x32c>
 8002546:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800254a:	e01d      	b.n	8002588 <HAL_ADC_Init+0x32c>
 800254c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002550:	e01a      	b.n	8002588 <HAL_ADC_Init+0x32c>
 8002552:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002556:	e017      	b.n	8002588 <HAL_ADC_Init+0x32c>
 8002558:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 800255c:	e014      	b.n	8002588 <HAL_ADC_Init+0x32c>
 800255e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002562:	e011      	b.n	8002588 <HAL_ADC_Init+0x32c>
 8002564:	20000068 	.word	0x20000068
 8002568:	431bde83 	.word	0x431bde83
 800256c:	50000100 	.word	0x50000100
 8002570:	50000300 	.word	0x50000300
 8002574:	50000700 	.word	0x50000700
 8002578:	50000400 	.word	0x50000400
 800257c:	50000500 	.word	0x50000500
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002584:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800258c:	4313      	orrs	r3, r2
 800258e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002590:	4313      	orrs	r3, r2
 8002592:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 030c 	and.w	r3, r3, #12
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d114      	bne.n	80025cc <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	6812      	ldr	r2, [r2, #0]
 80025ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025b0:	f023 0302 	bic.w	r3, r3, #2
 80025b4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	7e1b      	ldrb	r3, [r3, #24]
 80025ba:	039a      	lsls	r2, r3, #14
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	4313      	orrs	r3, r2
 80025c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80025c8:	4313      	orrs	r3, r2
 80025ca:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68da      	ldr	r2, [r3, #12]
 80025d2:	4b1e      	ldr	r3, [pc, #120]	; (800264c <HAL_ADC_Init+0x3f0>)
 80025d4:	4013      	ands	r3, r2
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	6812      	ldr	r2, [r2, #0]
 80025da:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80025dc:	430b      	orrs	r3, r1
 80025de:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d10c      	bne.n	8002602 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	f023 010f 	bic.w	r1, r3, #15
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	1e5a      	subs	r2, r3, #1
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	631a      	str	r2, [r3, #48]	; 0x30
 8002600:	e007      	b.n	8002612 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 020f 	bic.w	r2, r2, #15
 8002610:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261c:	f023 0303 	bic.w	r3, r3, #3
 8002620:	f043 0201 	orr.w	r2, r3, #1
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	641a      	str	r2, [r3, #64]	; 0x40
 8002628:	e00a      	b.n	8002640 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	f023 0312 	bic.w	r3, r3, #18
 8002632:	f043 0210 	orr.w	r2, r3, #16
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800263a:	2301      	movs	r3, #1
 800263c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002640:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002644:	4618      	mov	r0, r3
 8002646:	3768      	adds	r7, #104	; 0x68
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	fff0c007 	.word	0xfff0c007

08002650 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800265c:	2300      	movs	r3, #0
 800265e:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 0304 	and.w	r3, r3, #4
 800266a:	2b00      	cmp	r3, #0
 800266c:	f040 80f7 	bne.w	800285e <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002676:	2b01      	cmp	r3, #1
 8002678:	d101      	bne.n	800267e <HAL_ADC_Start_DMA+0x2e>
 800267a:	2302      	movs	r3, #2
 800267c:	e0f2      	b.n	8002864 <HAL_ADC_Start_DMA+0x214>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2201      	movs	r2, #1
 8002682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800268e:	d004      	beq.n	800269a <HAL_ADC_Start_DMA+0x4a>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a75      	ldr	r2, [pc, #468]	; (800286c <HAL_ADC_Start_DMA+0x21c>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d109      	bne.n	80026ae <HAL_ADC_Start_DMA+0x5e>
 800269a:	4b75      	ldr	r3, [pc, #468]	; (8002870 <HAL_ADC_Start_DMA+0x220>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 031f 	and.w	r3, r3, #31
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	bf0c      	ite	eq
 80026a6:	2301      	moveq	r3, #1
 80026a8:	2300      	movne	r3, #0
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	e008      	b.n	80026c0 <HAL_ADC_Start_DMA+0x70>
 80026ae:	4b71      	ldr	r3, [pc, #452]	; (8002874 <HAL_ADC_Start_DMA+0x224>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 031f 	and.w	r3, r3, #31
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	bf0c      	ite	eq
 80026ba:	2301      	moveq	r3, #1
 80026bc:	2300      	movne	r3, #0
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f000 80c5 	beq.w	8002850 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	f000 fd22 	bl	8003110 <ADC_Enable>
 80026cc:	4603      	mov	r3, r0
 80026ce:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80026d0:	7dfb      	ldrb	r3, [r7, #23]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f040 80b7 	bne.w	8002846 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80026e0:	f023 0301 	bic.w	r3, r3, #1
 80026e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026f4:	d004      	beq.n	8002700 <HAL_ADC_Start_DMA+0xb0>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a5c      	ldr	r2, [pc, #368]	; (800286c <HAL_ADC_Start_DMA+0x21c>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d106      	bne.n	800270e <HAL_ADC_Start_DMA+0xbe>
 8002700:	4b5b      	ldr	r3, [pc, #364]	; (8002870 <HAL_ADC_Start_DMA+0x220>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f003 031f 	and.w	r3, r3, #31
 8002708:	2b00      	cmp	r3, #0
 800270a:	d010      	beq.n	800272e <HAL_ADC_Start_DMA+0xde>
 800270c:	e005      	b.n	800271a <HAL_ADC_Start_DMA+0xca>
 800270e:	4b59      	ldr	r3, [pc, #356]	; (8002874 <HAL_ADC_Start_DMA+0x224>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 031f 	and.w	r3, r3, #31
 8002716:	2b00      	cmp	r3, #0
 8002718:	d009      	beq.n	800272e <HAL_ADC_Start_DMA+0xde>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002722:	d004      	beq.n	800272e <HAL_ADC_Start_DMA+0xde>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a53      	ldr	r2, [pc, #332]	; (8002878 <HAL_ADC_Start_DMA+0x228>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d115      	bne.n	800275a <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d036      	beq.n	80027b6 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002750:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002758:	e02d      	b.n	80027b6 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800276e:	d004      	beq.n	800277a <HAL_ADC_Start_DMA+0x12a>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a3d      	ldr	r2, [pc, #244]	; (800286c <HAL_ADC_Start_DMA+0x21c>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d10a      	bne.n	8002790 <HAL_ADC_Start_DMA+0x140>
 800277a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002784:	2b00      	cmp	r3, #0
 8002786:	bf14      	ite	ne
 8002788:	2301      	movne	r3, #1
 800278a:	2300      	moveq	r3, #0
 800278c:	b2db      	uxtb	r3, r3
 800278e:	e008      	b.n	80027a2 <HAL_ADC_Start_DMA+0x152>
 8002790:	4b39      	ldr	r3, [pc, #228]	; (8002878 <HAL_ADC_Start_DMA+0x228>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002798:	2b00      	cmp	r3, #0
 800279a:	bf14      	ite	ne
 800279c:	2301      	movne	r3, #1
 800279e:	2300      	moveq	r3, #0
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d007      	beq.n	80027b6 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027c2:	d106      	bne.n	80027d2 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c8:	f023 0206 	bic.w	r2, r3, #6
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	645a      	str	r2, [r3, #68]	; 0x44
 80027d0:	e002      	b.n	80027d8 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e4:	4a25      	ldr	r2, [pc, #148]	; (800287c <HAL_ADC_Start_DMA+0x22c>)
 80027e6:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ec:	4a24      	ldr	r2, [pc, #144]	; (8002880 <HAL_ADC_Start_DMA+0x230>)
 80027ee:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f4:	4a23      	ldr	r2, [pc, #140]	; (8002884 <HAL_ADC_Start_DMA+0x234>)
 80027f6:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	221c      	movs	r2, #28
 80027fe:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	685a      	ldr	r2, [r3, #4]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f042 0210 	orr.w	r2, r2, #16
 800280e:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68da      	ldr	r2, [r3, #12]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f042 0201 	orr.w	r2, r2, #1
 800281e:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	3340      	adds	r3, #64	; 0x40
 800282a:	4619      	mov	r1, r3
 800282c:	68ba      	ldr	r2, [r7, #8]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f000 fe90 	bl	8003554 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689a      	ldr	r2, [r3, #8]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f042 0204 	orr.w	r2, r2, #4
 8002842:	609a      	str	r2, [r3, #8]
 8002844:	e00d      	b.n	8002862 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800284e:	e008      	b.n	8002862 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800285c:	e001      	b.n	8002862 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800285e:	2302      	movs	r3, #2
 8002860:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002862:	7dfb      	ldrb	r3, [r7, #23]
}
 8002864:	4618      	mov	r0, r3
 8002866:	3718      	adds	r7, #24
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	50000100 	.word	0x50000100
 8002870:	50000300 	.word	0x50000300
 8002874:	50000700 	.word	0x50000700
 8002878:	50000400 	.word	0x50000400
 800287c:	08003045 	.word	0x08003045
 8002880:	080030bf 	.word	0x080030bf
 8002884:	080030db 	.word	0x080030db

08002888 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002888:	b480      	push	{r7}
 800288a:	b09b      	sub	sp, #108	; 0x6c
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002892:	2300      	movs	r3, #0
 8002894:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002898:	2300      	movs	r3, #0
 800289a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d101      	bne.n	80028aa <HAL_ADC_ConfigChannel+0x22>
 80028a6:	2302      	movs	r3, #2
 80028a8:	e2ca      	b.n	8002e40 <HAL_ADC_ConfigChannel+0x5b8>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f040 82ae 	bne.w	8002e1e <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	2b04      	cmp	r3, #4
 80028c8:	d81c      	bhi.n	8002904 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685a      	ldr	r2, [r3, #4]
 80028d4:	4613      	mov	r3, r2
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	4413      	add	r3, r2
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	461a      	mov	r2, r3
 80028de:	231f      	movs	r3, #31
 80028e0:	4093      	lsls	r3, r2
 80028e2:	43db      	mvns	r3, r3
 80028e4:	4019      	ands	r1, r3
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	6818      	ldr	r0, [r3, #0]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	4613      	mov	r3, r2
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	4413      	add	r3, r2
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	fa00 f203 	lsl.w	r2, r0, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	430a      	orrs	r2, r1
 8002900:	631a      	str	r2, [r3, #48]	; 0x30
 8002902:	e063      	b.n	80029cc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	2b09      	cmp	r3, #9
 800290a:	d81e      	bhi.n	800294a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	4613      	mov	r3, r2
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	4413      	add	r3, r2
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	3b1e      	subs	r3, #30
 8002920:	221f      	movs	r2, #31
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	43db      	mvns	r3, r3
 8002928:	4019      	ands	r1, r3
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	6818      	ldr	r0, [r3, #0]
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685a      	ldr	r2, [r3, #4]
 8002932:	4613      	mov	r3, r2
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	4413      	add	r3, r2
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	3b1e      	subs	r3, #30
 800293c:	fa00 f203 	lsl.w	r2, r0, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	430a      	orrs	r2, r1
 8002946:	635a      	str	r2, [r3, #52]	; 0x34
 8002948:	e040      	b.n	80029cc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	2b0e      	cmp	r3, #14
 8002950:	d81e      	bhi.n	8002990 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	4613      	mov	r3, r2
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	4413      	add	r3, r2
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	3b3c      	subs	r3, #60	; 0x3c
 8002966:	221f      	movs	r2, #31
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	43db      	mvns	r3, r3
 800296e:	4019      	ands	r1, r3
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	6818      	ldr	r0, [r3, #0]
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685a      	ldr	r2, [r3, #4]
 8002978:	4613      	mov	r3, r2
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	4413      	add	r3, r2
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	3b3c      	subs	r3, #60	; 0x3c
 8002982:	fa00 f203 	lsl.w	r2, r0, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	430a      	orrs	r2, r1
 800298c:	639a      	str	r2, [r3, #56]	; 0x38
 800298e:	e01d      	b.n	80029cc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	4613      	mov	r3, r2
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	4413      	add	r3, r2
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	3b5a      	subs	r3, #90	; 0x5a
 80029a4:	221f      	movs	r2, #31
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	43db      	mvns	r3, r3
 80029ac:	4019      	ands	r1, r3
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	6818      	ldr	r0, [r3, #0]
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685a      	ldr	r2, [r3, #4]
 80029b6:	4613      	mov	r3, r2
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	4413      	add	r3, r2
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	3b5a      	subs	r3, #90	; 0x5a
 80029c0:	fa00 f203 	lsl.w	r2, r0, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	430a      	orrs	r2, r1
 80029ca:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 030c 	and.w	r3, r3, #12
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f040 80e5 	bne.w	8002ba6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2b09      	cmp	r3, #9
 80029e2:	d91c      	bls.n	8002a1e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6999      	ldr	r1, [r3, #24]
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	4613      	mov	r3, r2
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	4413      	add	r3, r2
 80029f4:	3b1e      	subs	r3, #30
 80029f6:	2207      	movs	r2, #7
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	43db      	mvns	r3, r3
 80029fe:	4019      	ands	r1, r3
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	6898      	ldr	r0, [r3, #8]
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	4413      	add	r3, r2
 8002a0e:	3b1e      	subs	r3, #30
 8002a10:	fa00 f203 	lsl.w	r2, r0, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	619a      	str	r2, [r3, #24]
 8002a1c:	e019      	b.n	8002a52 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6959      	ldr	r1, [r3, #20]
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	4413      	add	r3, r2
 8002a2e:	2207      	movs	r2, #7
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	43db      	mvns	r3, r3
 8002a36:	4019      	ands	r1, r3
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	6898      	ldr	r0, [r3, #8]
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	4613      	mov	r3, r2
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	4413      	add	r3, r2
 8002a46:	fa00 f203 	lsl.w	r2, r0, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	695a      	ldr	r2, [r3, #20]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	08db      	lsrs	r3, r3, #3
 8002a5e:	f003 0303 	and.w	r3, r3, #3
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	2b03      	cmp	r3, #3
 8002a72:	d84f      	bhi.n	8002b14 <HAL_ADC_ConfigChannel+0x28c>
 8002a74:	a201      	add	r2, pc, #4	; (adr r2, 8002a7c <HAL_ADC_ConfigChannel+0x1f4>)
 8002a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a7a:	bf00      	nop
 8002a7c:	08002a8d 	.word	0x08002a8d
 8002a80:	08002aaf 	.word	0x08002aaf
 8002a84:	08002ad1 	.word	0x08002ad1
 8002a88:	08002af3 	.word	0x08002af3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a92:	4b9a      	ldr	r3, [pc, #616]	; (8002cfc <HAL_ADC_ConfigChannel+0x474>)
 8002a94:	4013      	ands	r3, r2
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	6812      	ldr	r2, [r2, #0]
 8002a9a:	0691      	lsls	r1, r2, #26
 8002a9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	431a      	orrs	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002aaa:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002aac:	e07e      	b.n	8002bac <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002ab4:	4b91      	ldr	r3, [pc, #580]	; (8002cfc <HAL_ADC_ConfigChannel+0x474>)
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	6812      	ldr	r2, [r2, #0]
 8002abc:	0691      	lsls	r1, r2, #26
 8002abe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002acc:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002ace:	e06d      	b.n	8002bac <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002ad6:	4b89      	ldr	r3, [pc, #548]	; (8002cfc <HAL_ADC_ConfigChannel+0x474>)
 8002ad8:	4013      	ands	r3, r2
 8002ada:	683a      	ldr	r2, [r7, #0]
 8002adc:	6812      	ldr	r2, [r2, #0]
 8002ade:	0691      	lsls	r1, r2, #26
 8002ae0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002aee:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002af0:	e05c      	b.n	8002bac <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002af8:	4b80      	ldr	r3, [pc, #512]	; (8002cfc <HAL_ADC_ConfigChannel+0x474>)
 8002afa:	4013      	ands	r3, r2
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	6812      	ldr	r2, [r2, #0]
 8002b00:	0691      	lsls	r1, r2, #26
 8002b02:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b04:	430a      	orrs	r2, r1
 8002b06:	431a      	orrs	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002b10:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002b12:	e04b      	b.n	8002bac <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	069b      	lsls	r3, r3, #26
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d107      	bne.n	8002b38 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b36:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b3e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	069b      	lsls	r3, r3, #26
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d107      	bne.n	8002b5c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b5a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b62:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	069b      	lsls	r3, r3, #26
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d107      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b7e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	069b      	lsls	r3, r3, #26
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d10a      	bne.n	8002baa <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ba2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002ba4:	e001      	b.n	8002baa <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002ba6:	bf00      	nop
 8002ba8:	e000      	b.n	8002bac <HAL_ADC_ConfigChannel+0x324>
      break;
 8002baa:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f003 0303 	and.w	r3, r3, #3
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d108      	bne.n	8002bcc <HAL_ADC_ConfigChannel+0x344>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d101      	bne.n	8002bcc <HAL_ADC_ConfigChannel+0x344>
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e000      	b.n	8002bce <HAL_ADC_ConfigChannel+0x346>
 8002bcc:	2300      	movs	r3, #0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f040 8130 	bne.w	8002e34 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d00f      	beq.n	8002bfc <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2201      	movs	r2, #1
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	43da      	mvns	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	400a      	ands	r2, r1
 8002bf6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002bfa:	e049      	b.n	8002c90 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	409a      	lsls	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2b09      	cmp	r3, #9
 8002c1c:	d91c      	bls.n	8002c58 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6999      	ldr	r1, [r3, #24]
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	4413      	add	r3, r2
 8002c2e:	3b1b      	subs	r3, #27
 8002c30:	2207      	movs	r2, #7
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	43db      	mvns	r3, r3
 8002c38:	4019      	ands	r1, r3
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	6898      	ldr	r0, [r3, #8]
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	4613      	mov	r3, r2
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	4413      	add	r3, r2
 8002c48:	3b1b      	subs	r3, #27
 8002c4a:	fa00 f203 	lsl.w	r2, r0, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	619a      	str	r2, [r3, #24]
 8002c56:	e01b      	b.n	8002c90 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6959      	ldr	r1, [r3, #20]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	1c5a      	adds	r2, r3, #1
 8002c64:	4613      	mov	r3, r2
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	4413      	add	r3, r2
 8002c6a:	2207      	movs	r2, #7
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	43db      	mvns	r3, r3
 8002c72:	4019      	ands	r1, r3
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	6898      	ldr	r0, [r3, #8]
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	1c5a      	adds	r2, r3, #1
 8002c7e:	4613      	mov	r3, r2
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	4413      	add	r3, r2
 8002c84:	fa00 f203 	lsl.w	r2, r0, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c98:	d004      	beq.n	8002ca4 <HAL_ADC_ConfigChannel+0x41c>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a18      	ldr	r2, [pc, #96]	; (8002d00 <HAL_ADC_ConfigChannel+0x478>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d101      	bne.n	8002ca8 <HAL_ADC_ConfigChannel+0x420>
 8002ca4:	4b17      	ldr	r3, [pc, #92]	; (8002d04 <HAL_ADC_ConfigChannel+0x47c>)
 8002ca6:	e000      	b.n	8002caa <HAL_ADC_ConfigChannel+0x422>
 8002ca8:	4b17      	ldr	r3, [pc, #92]	; (8002d08 <HAL_ADC_ConfigChannel+0x480>)
 8002caa:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2b10      	cmp	r3, #16
 8002cb2:	d105      	bne.n	8002cc0 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002cb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d015      	beq.n	8002cec <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002cc4:	2b11      	cmp	r3, #17
 8002cc6:	d105      	bne.n	8002cd4 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002cc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00b      	beq.n	8002cec <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002cd8:	2b12      	cmp	r3, #18
 8002cda:	f040 80ab 	bne.w	8002e34 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002cde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f040 80a4 	bne.w	8002e34 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cf4:	d10a      	bne.n	8002d0c <HAL_ADC_ConfigChannel+0x484>
 8002cf6:	4b02      	ldr	r3, [pc, #8]	; (8002d00 <HAL_ADC_ConfigChannel+0x478>)
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	e022      	b.n	8002d42 <HAL_ADC_ConfigChannel+0x4ba>
 8002cfc:	83fff000 	.word	0x83fff000
 8002d00:	50000100 	.word	0x50000100
 8002d04:	50000300 	.word	0x50000300
 8002d08:	50000700 	.word	0x50000700
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a4e      	ldr	r2, [pc, #312]	; (8002e4c <HAL_ADC_ConfigChannel+0x5c4>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d103      	bne.n	8002d1e <HAL_ADC_ConfigChannel+0x496>
 8002d16:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	e011      	b.n	8002d42 <HAL_ADC_ConfigChannel+0x4ba>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a4b      	ldr	r2, [pc, #300]	; (8002e50 <HAL_ADC_ConfigChannel+0x5c8>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d102      	bne.n	8002d2e <HAL_ADC_ConfigChannel+0x4a6>
 8002d28:	4b4a      	ldr	r3, [pc, #296]	; (8002e54 <HAL_ADC_ConfigChannel+0x5cc>)
 8002d2a:	60fb      	str	r3, [r7, #12]
 8002d2c:	e009      	b.n	8002d42 <HAL_ADC_ConfigChannel+0x4ba>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a48      	ldr	r2, [pc, #288]	; (8002e54 <HAL_ADC_ConfigChannel+0x5cc>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d102      	bne.n	8002d3e <HAL_ADC_ConfigChannel+0x4b6>
 8002d38:	4b45      	ldr	r3, [pc, #276]	; (8002e50 <HAL_ADC_ConfigChannel+0x5c8>)
 8002d3a:	60fb      	str	r3, [r7, #12]
 8002d3c:	e001      	b.n	8002d42 <HAL_ADC_ConfigChannel+0x4ba>
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f003 0303 	and.w	r3, r3, #3
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d108      	bne.n	8002d62 <HAL_ADC_ConfigChannel+0x4da>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d101      	bne.n	8002d62 <HAL_ADC_ConfigChannel+0x4da>
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e000      	b.n	8002d64 <HAL_ADC_ConfigChannel+0x4dc>
 8002d62:	2300      	movs	r3, #0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d150      	bne.n	8002e0a <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002d68:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d010      	beq.n	8002d90 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 0303 	and.w	r3, r3, #3
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d107      	bne.n	8002d8a <HAL_ADC_ConfigChannel+0x502>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d101      	bne.n	8002d8a <HAL_ADC_ConfigChannel+0x502>
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <HAL_ADC_ConfigChannel+0x504>
 8002d8a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d13c      	bne.n	8002e0a <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2b10      	cmp	r3, #16
 8002d96:	d11d      	bne.n	8002dd4 <HAL_ADC_ConfigChannel+0x54c>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002da0:	d118      	bne.n	8002dd4 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002da2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002daa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dac:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002dae:	4b2a      	ldr	r3, [pc, #168]	; (8002e58 <HAL_ADC_ConfigChannel+0x5d0>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a2a      	ldr	r2, [pc, #168]	; (8002e5c <HAL_ADC_ConfigChannel+0x5d4>)
 8002db4:	fba2 2303 	umull	r2, r3, r2, r3
 8002db8:	0c9a      	lsrs	r2, r3, #18
 8002dba:	4613      	mov	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002dc4:	e002      	b.n	8002dcc <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1f9      	bne.n	8002dc6 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002dd2:	e02e      	b.n	8002e32 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2b11      	cmp	r3, #17
 8002dda:	d10b      	bne.n	8002df4 <HAL_ADC_ConfigChannel+0x56c>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002de4:	d106      	bne.n	8002df4 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002de6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002dee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002df0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002df2:	e01e      	b.n	8002e32 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2b12      	cmp	r3, #18
 8002dfa:	d11a      	bne.n	8002e32 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002dfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002e04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e06:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002e08:	e013      	b.n	8002e32 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	f043 0220 	orr.w	r2, r3, #32
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002e1c:	e00a      	b.n	8002e34 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	f043 0220 	orr.w	r2, r3, #32
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002e30:	e000      	b.n	8002e34 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002e32:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002e3c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	376c      	adds	r7, #108	; 0x6c
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	50000100 	.word	0x50000100
 8002e50:	50000400 	.word	0x50000400
 8002e54:	50000500 	.word	0x50000500
 8002e58:	20000068 	.word	0x20000068
 8002e5c:	431bde83 	.word	0x431bde83

08002e60 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b099      	sub	sp, #100	; 0x64
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e78:	d102      	bne.n	8002e80 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002e7a:	4b6d      	ldr	r3, [pc, #436]	; (8003030 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002e7c:	60bb      	str	r3, [r7, #8]
 8002e7e:	e01a      	b.n	8002eb6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a6a      	ldr	r2, [pc, #424]	; (8003030 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d103      	bne.n	8002e92 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002e8a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e8e:	60bb      	str	r3, [r7, #8]
 8002e90:	e011      	b.n	8002eb6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a67      	ldr	r2, [pc, #412]	; (8003034 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d102      	bne.n	8002ea2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002e9c:	4b66      	ldr	r3, [pc, #408]	; (8003038 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002e9e:	60bb      	str	r3, [r7, #8]
 8002ea0:	e009      	b.n	8002eb6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a64      	ldr	r2, [pc, #400]	; (8003038 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d102      	bne.n	8002eb2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002eac:	4b61      	ldr	r3, [pc, #388]	; (8003034 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002eae:	60bb      	str	r3, [r7, #8]
 8002eb0:	e001      	b.n	8002eb6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e0b0      	b.n	8003022 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d101      	bne.n	8002ece <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e0a9      	b.n	8003022 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 0304 	and.w	r3, r3, #4
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f040 808d 	bne.w	8003000 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f003 0304 	and.w	r3, r3, #4
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f040 8086 	bne.w	8003000 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002efc:	d004      	beq.n	8002f08 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a4b      	ldr	r2, [pc, #300]	; (8003030 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d101      	bne.n	8002f0c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002f08:	4b4c      	ldr	r3, [pc, #304]	; (800303c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002f0a:	e000      	b.n	8002f0e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002f0c:	4b4c      	ldr	r3, [pc, #304]	; (8003040 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002f0e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d040      	beq.n	8002f9a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002f18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	6859      	ldr	r1, [r3, #4]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f2a:	035b      	lsls	r3, r3, #13
 8002f2c:	430b      	orrs	r3, r1
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f32:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 0303 	and.w	r3, r3, #3
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d108      	bne.n	8002f54 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d101      	bne.n	8002f54 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002f50:	2301      	movs	r3, #1
 8002f52:	e000      	b.n	8002f56 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002f54:	2300      	movs	r3, #0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d15c      	bne.n	8003014 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f003 0303 	and.w	r3, r3, #3
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d107      	bne.n	8002f76 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d101      	bne.n	8002f76 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002f72:	2301      	movs	r3, #1
 8002f74:	e000      	b.n	8002f78 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002f76:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d14b      	bne.n	8003014 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002f7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f84:	f023 030f 	bic.w	r3, r3, #15
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	6811      	ldr	r1, [r2, #0]
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	6892      	ldr	r2, [r2, #8]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	431a      	orrs	r2, r3
 8002f94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f96:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f98:	e03c      	b.n	8003014 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002f9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fa2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fa4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f003 0303 	and.w	r3, r3, #3
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d108      	bne.n	8002fc6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d101      	bne.n	8002fc6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e000      	b.n	8002fc8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d123      	bne.n	8003014 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f003 0303 	and.w	r3, r3, #3
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d107      	bne.n	8002fe8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d101      	bne.n	8002fe8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e000      	b.n	8002fea <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002fe8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d112      	bne.n	8003014 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002fee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002ff6:	f023 030f 	bic.w	r3, r3, #15
 8002ffa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ffc:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ffe:	e009      	b.n	8003014 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003004:	f043 0220 	orr.w	r2, r3, #32
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003012:	e000      	b.n	8003016 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003014:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800301e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8003022:	4618      	mov	r0, r3
 8003024:	3764      	adds	r7, #100	; 0x64
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	50000100 	.word	0x50000100
 8003034:	50000400 	.word	0x50000400
 8003038:	50000500 	.word	0x50000500
 800303c:	50000300 	.word	0x50000300
 8003040:	50000700 	.word	0x50000700

08003044 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003050:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800305a:	2b00      	cmp	r3, #0
 800305c:	d126      	bne.n	80030ac <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003074:	2b00      	cmp	r3, #0
 8003076:	d115      	bne.n	80030a4 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800307c:	2b00      	cmp	r3, #0
 800307e:	d111      	bne.n	80030a4 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003084:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003090:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d105      	bne.n	80030a4 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309c:	f043 0201 	orr.w	r2, r3, #1
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f7fe fd17 	bl	8001ad8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80030aa:	e004      	b.n	80030b6 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	4798      	blx	r3
}
 80030b6:	bf00      	nop
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b084      	sub	sp, #16
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ca:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f7ff f8b1 	bl	8002234 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80030d2:	bf00      	nop
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b084      	sub	sp, #16
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f8:	f043 0204 	orr.w	r2, r3, #4
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f7ff f8a1 	bl	8002248 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003106:	bf00      	nop
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
	...

08003110 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003118:	2300      	movs	r3, #0
 800311a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f003 0303 	and.w	r3, r3, #3
 8003126:	2b01      	cmp	r3, #1
 8003128:	d108      	bne.n	800313c <ADC_Enable+0x2c>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b01      	cmp	r3, #1
 8003136:	d101      	bne.n	800313c <ADC_Enable+0x2c>
 8003138:	2301      	movs	r3, #1
 800313a:	e000      	b.n	800313e <ADC_Enable+0x2e>
 800313c:	2300      	movs	r3, #0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d143      	bne.n	80031ca <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	4b22      	ldr	r3, [pc, #136]	; (80031d4 <ADC_Enable+0xc4>)
 800314a:	4013      	ands	r3, r2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00d      	beq.n	800316c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003154:	f043 0210 	orr.w	r2, r3, #16
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003160:	f043 0201 	orr.w	r2, r3, #1
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e02f      	b.n	80031cc <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689a      	ldr	r2, [r3, #8]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f042 0201 	orr.w	r2, r2, #1
 800317a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800317c:	f7ff f82a 	bl	80021d4 <HAL_GetTick>
 8003180:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003182:	e01b      	b.n	80031bc <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003184:	f7ff f826 	bl	80021d4 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d914      	bls.n	80031bc <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	2b01      	cmp	r3, #1
 800319e:	d00d      	beq.n	80031bc <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a4:	f043 0210 	orr.w	r2, r3, #16
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b0:	f043 0201 	orr.w	r2, r3, #1
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e007      	b.n	80031cc <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d1dc      	bne.n	8003184 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	8000003f 	.word	0x8000003f

080031d8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031e0:	2300      	movs	r3, #0
 80031e2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 0303 	and.w	r3, r3, #3
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d108      	bne.n	8003204 <ADC_Disable+0x2c>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d101      	bne.n	8003204 <ADC_Disable+0x2c>
 8003200:	2301      	movs	r3, #1
 8003202:	e000      	b.n	8003206 <ADC_Disable+0x2e>
 8003204:	2300      	movs	r3, #0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d047      	beq.n	800329a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f003 030d 	and.w	r3, r3, #13
 8003214:	2b01      	cmp	r3, #1
 8003216:	d10f      	bne.n	8003238 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689a      	ldr	r2, [r3, #8]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f042 0202 	orr.w	r2, r2, #2
 8003226:	609a      	str	r2, [r3, #8]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2203      	movs	r2, #3
 800322e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003230:	f7fe ffd0 	bl	80021d4 <HAL_GetTick>
 8003234:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003236:	e029      	b.n	800328c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323c:	f043 0210 	orr.w	r2, r3, #16
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003248:	f043 0201 	orr.w	r2, r3, #1
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e023      	b.n	800329c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003254:	f7fe ffbe 	bl	80021d4 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b02      	cmp	r3, #2
 8003260:	d914      	bls.n	800328c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	2b01      	cmp	r3, #1
 800326e:	d10d      	bne.n	800328c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003274:	f043 0210 	orr.w	r2, r3, #16
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003280:	f043 0201 	orr.w	r2, r3, #1
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e007      	b.n	800329c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	2b01      	cmp	r3, #1
 8003298:	d0dc      	beq.n	8003254 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3710      	adds	r7, #16
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f003 0307 	and.w	r3, r3, #7
 80032b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032b4:	4b0c      	ldr	r3, [pc, #48]	; (80032e8 <__NVIC_SetPriorityGrouping+0x44>)
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032ba:	68ba      	ldr	r2, [r7, #8]
 80032bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032c0:	4013      	ands	r3, r2
 80032c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032d6:	4a04      	ldr	r2, [pc, #16]	; (80032e8 <__NVIC_SetPriorityGrouping+0x44>)
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	60d3      	str	r3, [r2, #12]
}
 80032dc:	bf00      	nop
 80032de:	3714      	adds	r7, #20
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	e000ed00 	.word	0xe000ed00

080032ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032f0:	4b04      	ldr	r3, [pc, #16]	; (8003304 <__NVIC_GetPriorityGrouping+0x18>)
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	0a1b      	lsrs	r3, r3, #8
 80032f6:	f003 0307 	and.w	r3, r3, #7
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	e000ed00 	.word	0xe000ed00

08003308 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	4603      	mov	r3, r0
 8003310:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003316:	2b00      	cmp	r3, #0
 8003318:	db0b      	blt.n	8003332 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800331a:	79fb      	ldrb	r3, [r7, #7]
 800331c:	f003 021f 	and.w	r2, r3, #31
 8003320:	4907      	ldr	r1, [pc, #28]	; (8003340 <__NVIC_EnableIRQ+0x38>)
 8003322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003326:	095b      	lsrs	r3, r3, #5
 8003328:	2001      	movs	r0, #1
 800332a:	fa00 f202 	lsl.w	r2, r0, r2
 800332e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003332:	bf00      	nop
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	e000e100 	.word	0xe000e100

08003344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	4603      	mov	r3, r0
 800334c:	6039      	str	r1, [r7, #0]
 800334e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003354:	2b00      	cmp	r3, #0
 8003356:	db0a      	blt.n	800336e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	b2da      	uxtb	r2, r3
 800335c:	490c      	ldr	r1, [pc, #48]	; (8003390 <__NVIC_SetPriority+0x4c>)
 800335e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003362:	0112      	lsls	r2, r2, #4
 8003364:	b2d2      	uxtb	r2, r2
 8003366:	440b      	add	r3, r1
 8003368:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800336c:	e00a      	b.n	8003384 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	b2da      	uxtb	r2, r3
 8003372:	4908      	ldr	r1, [pc, #32]	; (8003394 <__NVIC_SetPriority+0x50>)
 8003374:	79fb      	ldrb	r3, [r7, #7]
 8003376:	f003 030f 	and.w	r3, r3, #15
 800337a:	3b04      	subs	r3, #4
 800337c:	0112      	lsls	r2, r2, #4
 800337e:	b2d2      	uxtb	r2, r2
 8003380:	440b      	add	r3, r1
 8003382:	761a      	strb	r2, [r3, #24]
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr
 8003390:	e000e100 	.word	0xe000e100
 8003394:	e000ed00 	.word	0xe000ed00

08003398 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003398:	b480      	push	{r7}
 800339a:	b089      	sub	sp, #36	; 0x24
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f003 0307 	and.w	r3, r3, #7
 80033aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	f1c3 0307 	rsb	r3, r3, #7
 80033b2:	2b04      	cmp	r3, #4
 80033b4:	bf28      	it	cs
 80033b6:	2304      	movcs	r3, #4
 80033b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	3304      	adds	r3, #4
 80033be:	2b06      	cmp	r3, #6
 80033c0:	d902      	bls.n	80033c8 <NVIC_EncodePriority+0x30>
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	3b03      	subs	r3, #3
 80033c6:	e000      	b.n	80033ca <NVIC_EncodePriority+0x32>
 80033c8:	2300      	movs	r3, #0
 80033ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033cc:	f04f 32ff 	mov.w	r2, #4294967295
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	fa02 f303 	lsl.w	r3, r2, r3
 80033d6:	43da      	mvns	r2, r3
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	401a      	ands	r2, r3
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033e0:	f04f 31ff 	mov.w	r1, #4294967295
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	fa01 f303 	lsl.w	r3, r1, r3
 80033ea:	43d9      	mvns	r1, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033f0:	4313      	orrs	r3, r2
         );
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3724      	adds	r7, #36	; 0x24
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
	...

08003400 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3b01      	subs	r3, #1
 800340c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003410:	d301      	bcc.n	8003416 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003412:	2301      	movs	r3, #1
 8003414:	e00f      	b.n	8003436 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003416:	4a0a      	ldr	r2, [pc, #40]	; (8003440 <SysTick_Config+0x40>)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	3b01      	subs	r3, #1
 800341c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800341e:	210f      	movs	r1, #15
 8003420:	f04f 30ff 	mov.w	r0, #4294967295
 8003424:	f7ff ff8e 	bl	8003344 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003428:	4b05      	ldr	r3, [pc, #20]	; (8003440 <SysTick_Config+0x40>)
 800342a:	2200      	movs	r2, #0
 800342c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800342e:	4b04      	ldr	r3, [pc, #16]	; (8003440 <SysTick_Config+0x40>)
 8003430:	2207      	movs	r2, #7
 8003432:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3708      	adds	r7, #8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	e000e010 	.word	0xe000e010

08003444 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f7ff ff29 	bl	80032a4 <__NVIC_SetPriorityGrouping>
}
 8003452:	bf00      	nop
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b086      	sub	sp, #24
 800345e:	af00      	add	r7, sp, #0
 8003460:	4603      	mov	r3, r0
 8003462:	60b9      	str	r1, [r7, #8]
 8003464:	607a      	str	r2, [r7, #4]
 8003466:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003468:	2300      	movs	r3, #0
 800346a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800346c:	f7ff ff3e 	bl	80032ec <__NVIC_GetPriorityGrouping>
 8003470:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	68b9      	ldr	r1, [r7, #8]
 8003476:	6978      	ldr	r0, [r7, #20]
 8003478:	f7ff ff8e 	bl	8003398 <NVIC_EncodePriority>
 800347c:	4602      	mov	r2, r0
 800347e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003482:	4611      	mov	r1, r2
 8003484:	4618      	mov	r0, r3
 8003486:	f7ff ff5d 	bl	8003344 <__NVIC_SetPriority>
}
 800348a:	bf00      	nop
 800348c:	3718      	adds	r7, #24
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b082      	sub	sp, #8
 8003496:	af00      	add	r7, sp, #0
 8003498:	4603      	mov	r3, r0
 800349a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800349c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7ff ff31 	bl	8003308 <__NVIC_EnableIRQ>
}
 80034a6:	bf00      	nop
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b082      	sub	sp, #8
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f7ff ffa2 	bl	8003400 <SysTick_Config>
 80034bc:	4603      	mov	r3, r0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3708      	adds	r7, #8
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b084      	sub	sp, #16
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80034ce:	2300      	movs	r3, #0
 80034d0:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d101      	bne.n	80034dc <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e037      	b.n	800354c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2202      	movs	r2, #2
 80034e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80034f2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80034f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003500:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800350c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003518:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	4313      	orrs	r3, r2
 8003524:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 f9b8 	bl	80038a4 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2201      	movs	r2, #1
 800353e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}  
 800354c:	4618      	mov	r0, r3
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
 8003560:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8003562:	2300      	movs	r3, #0
 8003564:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f893 3020 	ldrb.w	r3, [r3, #32]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d101      	bne.n	8003574 <HAL_DMA_Start_IT+0x20>
 8003570:	2302      	movs	r3, #2
 8003572:	e04a      	b.n	800360a <HAL_DMA_Start_IT+0xb6>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003582:	2b01      	cmp	r3, #1
 8003584:	d13a      	bne.n	80035fc <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2202      	movs	r2, #2
 800358a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f022 0201 	bic.w	r2, r2, #1
 80035a2:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	68b9      	ldr	r1, [r7, #8]
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f000 f94b 	bl	8003846 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d008      	beq.n	80035ca <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 020e 	orr.w	r2, r2, #14
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	e00f      	b.n	80035ea <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f042 020a 	orr.w	r2, r2, #10
 80035d8:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f022 0204 	bic.w	r2, r2, #4
 80035e8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f042 0201 	orr.w	r2, r2, #1
 80035f8:	601a      	str	r2, [r3, #0]
 80035fa:	e005      	b.n	8003608 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8003604:	2302      	movs	r3, #2
 8003606:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8003608:	7dfb      	ldrb	r3, [r7, #23]
} 
 800360a:	4618      	mov	r0, r3
 800360c:	3718      	adds	r7, #24
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003612:	b480      	push	{r7}
 8003614:	b083      	sub	sp, #12
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003620:	2b02      	cmp	r3, #2
 8003622:	d008      	beq.n	8003636 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2204      	movs	r2, #4
 8003628:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e020      	b.n	8003678 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 020e 	bic.w	r2, r2, #14
 8003644:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 0201 	bic.w	r2, r2, #1
 8003654:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800365e:	2101      	movs	r1, #1
 8003660:	fa01 f202 	lsl.w	r2, r1, r2
 8003664:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800368c:	2300      	movs	r3, #0
 800368e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003696:	2b02      	cmp	r3, #2
 8003698:	d005      	beq.n	80036a6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2204      	movs	r2, #4
 800369e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	73fb      	strb	r3, [r7, #15]
 80036a4:	e027      	b.n	80036f6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f022 020e 	bic.w	r2, r2, #14
 80036b4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 0201 	bic.w	r2, r2, #1
 80036c4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ce:	2101      	movs	r1, #1
 80036d0:	fa01 f202 	lsl.w	r2, r1, r2
 80036d4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d003      	beq.n	80036f6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	4798      	blx	r3
    } 
  }
  return status;
 80036f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371c:	2204      	movs	r2, #4
 800371e:	409a      	lsls	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	4013      	ands	r3, r2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d024      	beq.n	8003772 <HAL_DMA_IRQHandler+0x72>
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	f003 0304 	and.w	r3, r3, #4
 800372e:	2b00      	cmp	r3, #0
 8003730:	d01f      	beq.n	8003772 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0320 	and.w	r3, r3, #32
 800373c:	2b00      	cmp	r3, #0
 800373e:	d107      	bne.n	8003750 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 0204 	bic.w	r2, r2, #4
 800374e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003758:	2104      	movs	r1, #4
 800375a:	fa01 f202 	lsl.w	r2, r1, r2
 800375e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003764:	2b00      	cmp	r3, #0
 8003766:	d06a      	beq.n	800383e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003770:	e065      	b.n	800383e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	2202      	movs	r2, #2
 8003778:	409a      	lsls	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	4013      	ands	r3, r2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d02c      	beq.n	80037dc <HAL_DMA_IRQHandler+0xdc>
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d027      	beq.n	80037dc <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0320 	and.w	r3, r3, #32
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10b      	bne.n	80037b2 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 020a 	bic.w	r2, r2, #10
 80037a8:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ba:	2102      	movs	r1, #2
 80037bc:	fa01 f202 	lsl.w	r2, r1, r2
 80037c0:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d035      	beq.n	800383e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80037da:	e030      	b.n	800383e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e0:	2208      	movs	r2, #8
 80037e2:	409a      	lsls	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	4013      	ands	r3, r2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d028      	beq.n	800383e <HAL_DMA_IRQHandler+0x13e>
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d023      	beq.n	800383e <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 020e 	bic.w	r2, r2, #14
 8003804:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800380e:	2101      	movs	r1, #1
 8003810:	fa01 f202 	lsl.w	r2, r1, r2
 8003814:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2201      	movs	r2, #1
 800381a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003830:	2b00      	cmp	r3, #0
 8003832:	d004      	beq.n	800383e <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	4798      	blx	r3
    }
  }
}  
 800383c:	e7ff      	b.n	800383e <HAL_DMA_IRQHandler+0x13e>
 800383e:	bf00      	nop
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003846:	b480      	push	{r7}
 8003848:	b085      	sub	sp, #20
 800384a:	af00      	add	r7, sp, #0
 800384c:	60f8      	str	r0, [r7, #12]
 800384e:	60b9      	str	r1, [r7, #8]
 8003850:	607a      	str	r2, [r7, #4]
 8003852:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800385c:	2101      	movs	r1, #1
 800385e:	fa01 f202 	lsl.w	r2, r1, r2
 8003862:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	2b10      	cmp	r3, #16
 8003872:	d108      	bne.n	8003886 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68ba      	ldr	r2, [r7, #8]
 8003882:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003884:	e007      	b.n	8003896 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	60da      	str	r2, [r3, #12]
}
 8003896:	bf00      	nop
 8003898:	3714      	adds	r7, #20
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
	...

080038a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	461a      	mov	r2, r3
 80038b2:	4b14      	ldr	r3, [pc, #80]	; (8003904 <DMA_CalcBaseAndBitshift+0x60>)
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d80f      	bhi.n	80038d8 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	461a      	mov	r2, r3
 80038be:	4b12      	ldr	r3, [pc, #72]	; (8003908 <DMA_CalcBaseAndBitshift+0x64>)
 80038c0:	4413      	add	r3, r2
 80038c2:	4a12      	ldr	r2, [pc, #72]	; (800390c <DMA_CalcBaseAndBitshift+0x68>)
 80038c4:	fba2 2303 	umull	r2, r3, r2, r3
 80038c8:	091b      	lsrs	r3, r3, #4
 80038ca:	009a      	lsls	r2, r3, #2
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a0f      	ldr	r2, [pc, #60]	; (8003910 <DMA_CalcBaseAndBitshift+0x6c>)
 80038d4:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80038d6:	e00e      	b.n	80038f6 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	461a      	mov	r2, r3
 80038de:	4b0d      	ldr	r3, [pc, #52]	; (8003914 <DMA_CalcBaseAndBitshift+0x70>)
 80038e0:	4413      	add	r3, r2
 80038e2:	4a0a      	ldr	r2, [pc, #40]	; (800390c <DMA_CalcBaseAndBitshift+0x68>)
 80038e4:	fba2 2303 	umull	r2, r3, r2, r3
 80038e8:	091b      	lsrs	r3, r3, #4
 80038ea:	009a      	lsls	r2, r3, #2
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a09      	ldr	r2, [pc, #36]	; (8003918 <DMA_CalcBaseAndBitshift+0x74>)
 80038f4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80038f6:	bf00      	nop
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	40020407 	.word	0x40020407
 8003908:	bffdfff8 	.word	0xbffdfff8
 800390c:	cccccccd 	.word	0xcccccccd
 8003910:	40020000 	.word	0x40020000
 8003914:	bffdfbf8 	.word	0xbffdfbf8
 8003918:	40020400 	.word	0x40020400

0800391c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800391c:	b480      	push	{r7}
 800391e:	b087      	sub	sp, #28
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003926:	2300      	movs	r3, #0
 8003928:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800392a:	e160      	b.n	8003bee <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	2101      	movs	r1, #1
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	fa01 f303 	lsl.w	r3, r1, r3
 8003938:	4013      	ands	r3, r2
 800393a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2b00      	cmp	r3, #0
 8003940:	f000 8152 	beq.w	8003be8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f003 0303 	and.w	r3, r3, #3
 800394c:	2b01      	cmp	r3, #1
 800394e:	d005      	beq.n	800395c <HAL_GPIO_Init+0x40>
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f003 0303 	and.w	r3, r3, #3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d130      	bne.n	80039be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	2203      	movs	r2, #3
 8003968:	fa02 f303 	lsl.w	r3, r2, r3
 800396c:	43db      	mvns	r3, r3
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	4013      	ands	r3, r2
 8003972:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	68da      	ldr	r2, [r3, #12]
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	005b      	lsls	r3, r3, #1
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	4313      	orrs	r3, r2
 8003984:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003992:	2201      	movs	r2, #1
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	fa02 f303 	lsl.w	r3, r2, r3
 800399a:	43db      	mvns	r3, r3
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	4013      	ands	r3, r2
 80039a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	091b      	lsrs	r3, r3, #4
 80039a8:	f003 0201 	and.w	r2, r3, #1
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	fa02 f303 	lsl.w	r3, r2, r3
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f003 0303 	and.w	r3, r3, #3
 80039c6:	2b03      	cmp	r3, #3
 80039c8:	d017      	beq.n	80039fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	2203      	movs	r2, #3
 80039d6:	fa02 f303 	lsl.w	r3, r2, r3
 80039da:	43db      	mvns	r3, r3
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	4013      	ands	r3, r2
 80039e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	689a      	ldr	r2, [r3, #8]
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	fa02 f303 	lsl.w	r3, r2, r3
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f003 0303 	and.w	r3, r3, #3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d123      	bne.n	8003a4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	08da      	lsrs	r2, r3, #3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	3208      	adds	r2, #8
 8003a0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	f003 0307 	and.w	r3, r3, #7
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	220f      	movs	r2, #15
 8003a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a22:	43db      	mvns	r3, r3
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	4013      	ands	r3, r2
 8003a28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	691a      	ldr	r2, [r3, #16]
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	08da      	lsrs	r2, r3, #3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3208      	adds	r2, #8
 8003a48:	6939      	ldr	r1, [r7, #16]
 8003a4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	2203      	movs	r2, #3
 8003a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5e:	43db      	mvns	r3, r3
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	4013      	ands	r3, r2
 8003a64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f003 0203 	and.w	r2, r3, #3
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	fa02 f303 	lsl.w	r3, r2, r3
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f000 80ac 	beq.w	8003be8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a90:	4b5e      	ldr	r3, [pc, #376]	; (8003c0c <HAL_GPIO_Init+0x2f0>)
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	4a5d      	ldr	r2, [pc, #372]	; (8003c0c <HAL_GPIO_Init+0x2f0>)
 8003a96:	f043 0301 	orr.w	r3, r3, #1
 8003a9a:	6193      	str	r3, [r2, #24]
 8003a9c:	4b5b      	ldr	r3, [pc, #364]	; (8003c0c <HAL_GPIO_Init+0x2f0>)
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	60bb      	str	r3, [r7, #8]
 8003aa6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003aa8:	4a59      	ldr	r2, [pc, #356]	; (8003c10 <HAL_GPIO_Init+0x2f4>)
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	089b      	lsrs	r3, r3, #2
 8003aae:	3302      	adds	r3, #2
 8003ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f003 0303 	and.w	r3, r3, #3
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	220f      	movs	r2, #15
 8003ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003ad2:	d025      	beq.n	8003b20 <HAL_GPIO_Init+0x204>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a4f      	ldr	r2, [pc, #316]	; (8003c14 <HAL_GPIO_Init+0x2f8>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d01f      	beq.n	8003b1c <HAL_GPIO_Init+0x200>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a4e      	ldr	r2, [pc, #312]	; (8003c18 <HAL_GPIO_Init+0x2fc>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d019      	beq.n	8003b18 <HAL_GPIO_Init+0x1fc>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a4d      	ldr	r2, [pc, #308]	; (8003c1c <HAL_GPIO_Init+0x300>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d013      	beq.n	8003b14 <HAL_GPIO_Init+0x1f8>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a4c      	ldr	r2, [pc, #304]	; (8003c20 <HAL_GPIO_Init+0x304>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d00d      	beq.n	8003b10 <HAL_GPIO_Init+0x1f4>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a4b      	ldr	r2, [pc, #300]	; (8003c24 <HAL_GPIO_Init+0x308>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d007      	beq.n	8003b0c <HAL_GPIO_Init+0x1f0>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a4a      	ldr	r2, [pc, #296]	; (8003c28 <HAL_GPIO_Init+0x30c>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d101      	bne.n	8003b08 <HAL_GPIO_Init+0x1ec>
 8003b04:	2306      	movs	r3, #6
 8003b06:	e00c      	b.n	8003b22 <HAL_GPIO_Init+0x206>
 8003b08:	2307      	movs	r3, #7
 8003b0a:	e00a      	b.n	8003b22 <HAL_GPIO_Init+0x206>
 8003b0c:	2305      	movs	r3, #5
 8003b0e:	e008      	b.n	8003b22 <HAL_GPIO_Init+0x206>
 8003b10:	2304      	movs	r3, #4
 8003b12:	e006      	b.n	8003b22 <HAL_GPIO_Init+0x206>
 8003b14:	2303      	movs	r3, #3
 8003b16:	e004      	b.n	8003b22 <HAL_GPIO_Init+0x206>
 8003b18:	2302      	movs	r3, #2
 8003b1a:	e002      	b.n	8003b22 <HAL_GPIO_Init+0x206>
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e000      	b.n	8003b22 <HAL_GPIO_Init+0x206>
 8003b20:	2300      	movs	r3, #0
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	f002 0203 	and.w	r2, r2, #3
 8003b28:	0092      	lsls	r2, r2, #2
 8003b2a:	4093      	lsls	r3, r2
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003b32:	4937      	ldr	r1, [pc, #220]	; (8003c10 <HAL_GPIO_Init+0x2f4>)
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	089b      	lsrs	r3, r3, #2
 8003b38:	3302      	adds	r3, #2
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b40:	4b3a      	ldr	r3, [pc, #232]	; (8003c2c <HAL_GPIO_Init+0x310>)
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	43db      	mvns	r3, r3
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d003      	beq.n	8003b64 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003b64:	4a31      	ldr	r2, [pc, #196]	; (8003c2c <HAL_GPIO_Init+0x310>)
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b6a:	4b30      	ldr	r3, [pc, #192]	; (8003c2c <HAL_GPIO_Init+0x310>)
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	43db      	mvns	r3, r3
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	4013      	ands	r3, r2
 8003b78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d003      	beq.n	8003b8e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003b8e:	4a27      	ldr	r2, [pc, #156]	; (8003c2c <HAL_GPIO_Init+0x310>)
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b94:	4b25      	ldr	r3, [pc, #148]	; (8003c2c <HAL_GPIO_Init+0x310>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	43db      	mvns	r3, r3
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d003      	beq.n	8003bb8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003bb0:	693a      	ldr	r2, [r7, #16]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003bb8:	4a1c      	ldr	r2, [pc, #112]	; (8003c2c <HAL_GPIO_Init+0x310>)
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bbe:	4b1b      	ldr	r3, [pc, #108]	; (8003c2c <HAL_GPIO_Init+0x310>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	43db      	mvns	r3, r3
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	4013      	ands	r3, r2
 8003bcc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d003      	beq.n	8003be2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003be2:	4a12      	ldr	r2, [pc, #72]	; (8003c2c <HAL_GPIO_Init+0x310>)
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	3301      	adds	r3, #1
 8003bec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	f47f ae97 	bne.w	800392c <HAL_GPIO_Init+0x10>
  }
}
 8003bfe:	bf00      	nop
 8003c00:	bf00      	nop
 8003c02:	371c      	adds	r7, #28
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr
 8003c0c:	40021000 	.word	0x40021000
 8003c10:	40010000 	.word	0x40010000
 8003c14:	48000400 	.word	0x48000400
 8003c18:	48000800 	.word	0x48000800
 8003c1c:	48000c00 	.word	0x48000c00
 8003c20:	48001000 	.word	0x48001000
 8003c24:	48001400 	.word	0x48001400
 8003c28:	48001800 	.word	0x48001800
 8003c2c:	40010400 	.word	0x40010400

08003c30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	460b      	mov	r3, r1
 8003c3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	691a      	ldr	r2, [r3, #16]
 8003c40:	887b      	ldrh	r3, [r7, #2]
 8003c42:	4013      	ands	r3, r2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d002      	beq.n	8003c4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	73fb      	strb	r3, [r7, #15]
 8003c4c:	e001      	b.n	8003c52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3714      	adds	r7, #20
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	460b      	mov	r3, r1
 8003c6a:	807b      	strh	r3, [r7, #2]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c70:	787b      	ldrb	r3, [r7, #1]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c76:	887a      	ldrh	r2, [r7, #2]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c7c:	e002      	b.n	8003c84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c7e:	887a      	ldrh	r2, [r7, #2]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	4603      	mov	r3, r0
 8003c98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003c9a:	4b08      	ldr	r3, [pc, #32]	; (8003cbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c9c:	695a      	ldr	r2, [r3, #20]
 8003c9e:	88fb      	ldrh	r3, [r7, #6]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d006      	beq.n	8003cb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ca6:	4a05      	ldr	r2, [pc, #20]	; (8003cbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ca8:	88fb      	ldrh	r3, [r7, #6]
 8003caa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003cac:	88fb      	ldrh	r3, [r7, #6]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f000 f806 	bl	8003cc0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003cb4:	bf00      	nop
 8003cb6:	3708      	adds	r7, #8
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	40010400 	.word	0x40010400

08003cc0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003cca:	bf00      	nop
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
	...

08003cd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ce4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003ce8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d102      	bne.n	8003cfe <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	f001 b83a 	b.w	8004d72 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d02:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f000 816f 	beq.w	8003ff2 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003d14:	4bb5      	ldr	r3, [pc, #724]	; (8003fec <HAL_RCC_OscConfig+0x314>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f003 030c 	and.w	r3, r3, #12
 8003d1c:	2b04      	cmp	r3, #4
 8003d1e:	d00c      	beq.n	8003d3a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d20:	4bb2      	ldr	r3, [pc, #712]	; (8003fec <HAL_RCC_OscConfig+0x314>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f003 030c 	and.w	r3, r3, #12
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	d15c      	bne.n	8003de6 <HAL_RCC_OscConfig+0x10e>
 8003d2c:	4baf      	ldr	r3, [pc, #700]	; (8003fec <HAL_RCC_OscConfig+0x314>)
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d38:	d155      	bne.n	8003de6 <HAL_RCC_OscConfig+0x10e>
 8003d3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d3e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d42:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003d46:	fa93 f3a3 	rbit	r3, r3
 8003d4a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003d4e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d52:	fab3 f383 	clz	r3, r3
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	095b      	lsrs	r3, r3, #5
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	f043 0301 	orr.w	r3, r3, #1
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d102      	bne.n	8003d6c <HAL_RCC_OscConfig+0x94>
 8003d66:	4ba1      	ldr	r3, [pc, #644]	; (8003fec <HAL_RCC_OscConfig+0x314>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	e015      	b.n	8003d98 <HAL_RCC_OscConfig+0xc0>
 8003d6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d70:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d74:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003d78:	fa93 f3a3 	rbit	r3, r3
 8003d7c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003d80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d84:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003d88:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003d8c:	fa93 f3a3 	rbit	r3, r3
 8003d90:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003d94:	4b95      	ldr	r3, [pc, #596]	; (8003fec <HAL_RCC_OscConfig+0x314>)
 8003d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d98:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d9c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8003da0:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003da4:	fa92 f2a2 	rbit	r2, r2
 8003da8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8003dac:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003db0:	fab2 f282 	clz	r2, r2
 8003db4:	b2d2      	uxtb	r2, r2
 8003db6:	f042 0220 	orr.w	r2, r2, #32
 8003dba:	b2d2      	uxtb	r2, r2
 8003dbc:	f002 021f 	and.w	r2, r2, #31
 8003dc0:	2101      	movs	r1, #1
 8003dc2:	fa01 f202 	lsl.w	r2, r1, r2
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f000 8111 	beq.w	8003ff0 <HAL_RCC_OscConfig+0x318>
 8003dce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dd2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f040 8108 	bne.w	8003ff0 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	f000 bfc6 	b.w	8004d72 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003de6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003df6:	d106      	bne.n	8003e06 <HAL_RCC_OscConfig+0x12e>
 8003df8:	4b7c      	ldr	r3, [pc, #496]	; (8003fec <HAL_RCC_OscConfig+0x314>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a7b      	ldr	r2, [pc, #492]	; (8003fec <HAL_RCC_OscConfig+0x314>)
 8003dfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e02:	6013      	str	r3, [r2, #0]
 8003e04:	e036      	b.n	8003e74 <HAL_RCC_OscConfig+0x19c>
 8003e06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e0a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10c      	bne.n	8003e30 <HAL_RCC_OscConfig+0x158>
 8003e16:	4b75      	ldr	r3, [pc, #468]	; (8003fec <HAL_RCC_OscConfig+0x314>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a74      	ldr	r2, [pc, #464]	; (8003fec <HAL_RCC_OscConfig+0x314>)
 8003e1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e20:	6013      	str	r3, [r2, #0]
 8003e22:	4b72      	ldr	r3, [pc, #456]	; (8003fec <HAL_RCC_OscConfig+0x314>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a71      	ldr	r2, [pc, #452]	; (8003fec <HAL_RCC_OscConfig+0x314>)
 8003e28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e2c:	6013      	str	r3, [r2, #0]
 8003e2e:	e021      	b.n	8003e74 <HAL_RCC_OscConfig+0x19c>
 8003e30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e34:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e40:	d10c      	bne.n	8003e5c <HAL_RCC_OscConfig+0x184>
 8003e42:	4b6a      	ldr	r3, [pc, #424]	; (8003fec <HAL_RCC_OscConfig+0x314>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a69      	ldr	r2, [pc, #420]	; (8003fec <HAL_RCC_OscConfig+0x314>)
 8003e48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e4c:	6013      	str	r3, [r2, #0]
 8003e4e:	4b67      	ldr	r3, [pc, #412]	; (8003fec <HAL_RCC_OscConfig+0x314>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a66      	ldr	r2, [pc, #408]	; (8003fec <HAL_RCC_OscConfig+0x314>)
 8003e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e58:	6013      	str	r3, [r2, #0]
 8003e5a:	e00b      	b.n	8003e74 <HAL_RCC_OscConfig+0x19c>
 8003e5c:	4b63      	ldr	r3, [pc, #396]	; (8003fec <HAL_RCC_OscConfig+0x314>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a62      	ldr	r2, [pc, #392]	; (8003fec <HAL_RCC_OscConfig+0x314>)
 8003e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e66:	6013      	str	r3, [r2, #0]
 8003e68:	4b60      	ldr	r3, [pc, #384]	; (8003fec <HAL_RCC_OscConfig+0x314>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a5f      	ldr	r2, [pc, #380]	; (8003fec <HAL_RCC_OscConfig+0x314>)
 8003e6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e72:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e78:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d059      	beq.n	8003f38 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e84:	f7fe f9a6 	bl	80021d4 <HAL_GetTick>
 8003e88:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e8c:	e00a      	b.n	8003ea4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e8e:	f7fe f9a1 	bl	80021d4 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b64      	cmp	r3, #100	; 0x64
 8003e9c:	d902      	bls.n	8003ea4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	f000 bf67 	b.w	8004d72 <HAL_RCC_OscConfig+0x109a>
 8003ea4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ea8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eac:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003eb0:	fa93 f3a3 	rbit	r3, r3
 8003eb4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8003eb8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ebc:	fab3 f383 	clz	r3, r3
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	095b      	lsrs	r3, r3, #5
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	f043 0301 	orr.w	r3, r3, #1
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d102      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x1fe>
 8003ed0:	4b46      	ldr	r3, [pc, #280]	; (8003fec <HAL_RCC_OscConfig+0x314>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	e015      	b.n	8003f02 <HAL_RCC_OscConfig+0x22a>
 8003ed6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003eda:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ede:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003ee2:	fa93 f3a3 	rbit	r3, r3
 8003ee6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8003eea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003eee:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003ef2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8003ef6:	fa93 f3a3 	rbit	r3, r3
 8003efa:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003efe:	4b3b      	ldr	r3, [pc, #236]	; (8003fec <HAL_RCC_OscConfig+0x314>)
 8003f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f02:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003f06:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8003f0a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8003f0e:	fa92 f2a2 	rbit	r2, r2
 8003f12:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8003f16:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003f1a:	fab2 f282 	clz	r2, r2
 8003f1e:	b2d2      	uxtb	r2, r2
 8003f20:	f042 0220 	orr.w	r2, r2, #32
 8003f24:	b2d2      	uxtb	r2, r2
 8003f26:	f002 021f 	and.w	r2, r2, #31
 8003f2a:	2101      	movs	r1, #1
 8003f2c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f30:	4013      	ands	r3, r2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d0ab      	beq.n	8003e8e <HAL_RCC_OscConfig+0x1b6>
 8003f36:	e05c      	b.n	8003ff2 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f38:	f7fe f94c 	bl	80021d4 <HAL_GetTick>
 8003f3c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f40:	e00a      	b.n	8003f58 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f42:	f7fe f947 	bl	80021d4 <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b64      	cmp	r3, #100	; 0x64
 8003f50:	d902      	bls.n	8003f58 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	f000 bf0d 	b.w	8004d72 <HAL_RCC_OscConfig+0x109a>
 8003f58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f5c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f60:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003f64:	fa93 f3a3 	rbit	r3, r3
 8003f68:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8003f6c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f70:	fab3 f383 	clz	r3, r3
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	095b      	lsrs	r3, r3, #5
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	f043 0301 	orr.w	r3, r3, #1
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d102      	bne.n	8003f8a <HAL_RCC_OscConfig+0x2b2>
 8003f84:	4b19      	ldr	r3, [pc, #100]	; (8003fec <HAL_RCC_OscConfig+0x314>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	e015      	b.n	8003fb6 <HAL_RCC_OscConfig+0x2de>
 8003f8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f8e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f92:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003f96:	fa93 f3a3 	rbit	r3, r3
 8003f9a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003f9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003fa2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003fa6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003faa:	fa93 f3a3 	rbit	r3, r3
 8003fae:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003fb2:	4b0e      	ldr	r3, [pc, #56]	; (8003fec <HAL_RCC_OscConfig+0x314>)
 8003fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003fba:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8003fbe:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8003fc2:	fa92 f2a2 	rbit	r2, r2
 8003fc6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8003fca:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003fce:	fab2 f282 	clz	r2, r2
 8003fd2:	b2d2      	uxtb	r2, r2
 8003fd4:	f042 0220 	orr.w	r2, r2, #32
 8003fd8:	b2d2      	uxtb	r2, r2
 8003fda:	f002 021f 	and.w	r2, r2, #31
 8003fde:	2101      	movs	r1, #1
 8003fe0:	fa01 f202 	lsl.w	r2, r1, r2
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1ab      	bne.n	8003f42 <HAL_RCC_OscConfig+0x26a>
 8003fea:	e002      	b.n	8003ff2 <HAL_RCC_OscConfig+0x31a>
 8003fec:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ff0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ff2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ff6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b00      	cmp	r3, #0
 8004004:	f000 817f 	beq.w	8004306 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004008:	4ba7      	ldr	r3, [pc, #668]	; (80042a8 <HAL_RCC_OscConfig+0x5d0>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f003 030c 	and.w	r3, r3, #12
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00c      	beq.n	800402e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004014:	4ba4      	ldr	r3, [pc, #656]	; (80042a8 <HAL_RCC_OscConfig+0x5d0>)
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f003 030c 	and.w	r3, r3, #12
 800401c:	2b08      	cmp	r3, #8
 800401e:	d173      	bne.n	8004108 <HAL_RCC_OscConfig+0x430>
 8004020:	4ba1      	ldr	r3, [pc, #644]	; (80042a8 <HAL_RCC_OscConfig+0x5d0>)
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004028:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800402c:	d16c      	bne.n	8004108 <HAL_RCC_OscConfig+0x430>
 800402e:	2302      	movs	r3, #2
 8004030:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004034:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8004038:	fa93 f3a3 	rbit	r3, r3
 800403c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8004040:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004044:	fab3 f383 	clz	r3, r3
 8004048:	b2db      	uxtb	r3, r3
 800404a:	095b      	lsrs	r3, r3, #5
 800404c:	b2db      	uxtb	r3, r3
 800404e:	f043 0301 	orr.w	r3, r3, #1
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b01      	cmp	r3, #1
 8004056:	d102      	bne.n	800405e <HAL_RCC_OscConfig+0x386>
 8004058:	4b93      	ldr	r3, [pc, #588]	; (80042a8 <HAL_RCC_OscConfig+0x5d0>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	e013      	b.n	8004086 <HAL_RCC_OscConfig+0x3ae>
 800405e:	2302      	movs	r3, #2
 8004060:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004064:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004068:	fa93 f3a3 	rbit	r3, r3
 800406c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8004070:	2302      	movs	r3, #2
 8004072:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004076:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800407a:	fa93 f3a3 	rbit	r3, r3
 800407e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004082:	4b89      	ldr	r3, [pc, #548]	; (80042a8 <HAL_RCC_OscConfig+0x5d0>)
 8004084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004086:	2202      	movs	r2, #2
 8004088:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800408c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8004090:	fa92 f2a2 	rbit	r2, r2
 8004094:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8004098:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800409c:	fab2 f282 	clz	r2, r2
 80040a0:	b2d2      	uxtb	r2, r2
 80040a2:	f042 0220 	orr.w	r2, r2, #32
 80040a6:	b2d2      	uxtb	r2, r2
 80040a8:	f002 021f 	and.w	r2, r2, #31
 80040ac:	2101      	movs	r1, #1
 80040ae:	fa01 f202 	lsl.w	r2, r1, r2
 80040b2:	4013      	ands	r3, r2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00a      	beq.n	80040ce <HAL_RCC_OscConfig+0x3f6>
 80040b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040bc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d002      	beq.n	80040ce <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	f000 be52 	b.w	8004d72 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ce:	4b76      	ldr	r3, [pc, #472]	; (80042a8 <HAL_RCC_OscConfig+0x5d0>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040da:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	21f8      	movs	r1, #248	; 0xf8
 80040e4:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e8:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80040ec:	fa91 f1a1 	rbit	r1, r1
 80040f0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80040f4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80040f8:	fab1 f181 	clz	r1, r1
 80040fc:	b2c9      	uxtb	r1, r1
 80040fe:	408b      	lsls	r3, r1
 8004100:	4969      	ldr	r1, [pc, #420]	; (80042a8 <HAL_RCC_OscConfig+0x5d0>)
 8004102:	4313      	orrs	r3, r2
 8004104:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004106:	e0fe      	b.n	8004306 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004108:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800410c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	2b00      	cmp	r3, #0
 8004116:	f000 8088 	beq.w	800422a <HAL_RCC_OscConfig+0x552>
 800411a:	2301      	movs	r3, #1
 800411c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004120:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004124:	fa93 f3a3 	rbit	r3, r3
 8004128:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800412c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004130:	fab3 f383 	clz	r3, r3
 8004134:	b2db      	uxtb	r3, r3
 8004136:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800413a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	461a      	mov	r2, r3
 8004142:	2301      	movs	r3, #1
 8004144:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004146:	f7fe f845 	bl	80021d4 <HAL_GetTick>
 800414a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800414e:	e00a      	b.n	8004166 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004150:	f7fe f840 	bl	80021d4 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	2b02      	cmp	r3, #2
 800415e:	d902      	bls.n	8004166 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	f000 be06 	b.w	8004d72 <HAL_RCC_OscConfig+0x109a>
 8004166:	2302      	movs	r3, #2
 8004168:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800416c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004170:	fa93 f3a3 	rbit	r3, r3
 8004174:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8004178:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800417c:	fab3 f383 	clz	r3, r3
 8004180:	b2db      	uxtb	r3, r3
 8004182:	095b      	lsrs	r3, r3, #5
 8004184:	b2db      	uxtb	r3, r3
 8004186:	f043 0301 	orr.w	r3, r3, #1
 800418a:	b2db      	uxtb	r3, r3
 800418c:	2b01      	cmp	r3, #1
 800418e:	d102      	bne.n	8004196 <HAL_RCC_OscConfig+0x4be>
 8004190:	4b45      	ldr	r3, [pc, #276]	; (80042a8 <HAL_RCC_OscConfig+0x5d0>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	e013      	b.n	80041be <HAL_RCC_OscConfig+0x4e6>
 8004196:	2302      	movs	r3, #2
 8004198:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800419c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80041a0:	fa93 f3a3 	rbit	r3, r3
 80041a4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80041a8:	2302      	movs	r3, #2
 80041aa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80041ae:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80041b2:	fa93 f3a3 	rbit	r3, r3
 80041b6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80041ba:	4b3b      	ldr	r3, [pc, #236]	; (80042a8 <HAL_RCC_OscConfig+0x5d0>)
 80041bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041be:	2202      	movs	r2, #2
 80041c0:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80041c4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80041c8:	fa92 f2a2 	rbit	r2, r2
 80041cc:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80041d0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80041d4:	fab2 f282 	clz	r2, r2
 80041d8:	b2d2      	uxtb	r2, r2
 80041da:	f042 0220 	orr.w	r2, r2, #32
 80041de:	b2d2      	uxtb	r2, r2
 80041e0:	f002 021f 	and.w	r2, r2, #31
 80041e4:	2101      	movs	r1, #1
 80041e6:	fa01 f202 	lsl.w	r2, r1, r2
 80041ea:	4013      	ands	r3, r2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d0af      	beq.n	8004150 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041f0:	4b2d      	ldr	r3, [pc, #180]	; (80042a8 <HAL_RCC_OscConfig+0x5d0>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	21f8      	movs	r1, #248	; 0xf8
 8004206:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800420a:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800420e:	fa91 f1a1 	rbit	r1, r1
 8004212:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8004216:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800421a:	fab1 f181 	clz	r1, r1
 800421e:	b2c9      	uxtb	r1, r1
 8004220:	408b      	lsls	r3, r1
 8004222:	4921      	ldr	r1, [pc, #132]	; (80042a8 <HAL_RCC_OscConfig+0x5d0>)
 8004224:	4313      	orrs	r3, r2
 8004226:	600b      	str	r3, [r1, #0]
 8004228:	e06d      	b.n	8004306 <HAL_RCC_OscConfig+0x62e>
 800422a:	2301      	movs	r3, #1
 800422c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004230:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004234:	fa93 f3a3 	rbit	r3, r3
 8004238:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800423c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004240:	fab3 f383 	clz	r3, r3
 8004244:	b2db      	uxtb	r3, r3
 8004246:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800424a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	461a      	mov	r2, r3
 8004252:	2300      	movs	r3, #0
 8004254:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004256:	f7fd ffbd 	bl	80021d4 <HAL_GetTick>
 800425a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800425e:	e00a      	b.n	8004276 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004260:	f7fd ffb8 	bl	80021d4 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	2b02      	cmp	r3, #2
 800426e:	d902      	bls.n	8004276 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	f000 bd7e 	b.w	8004d72 <HAL_RCC_OscConfig+0x109a>
 8004276:	2302      	movs	r3, #2
 8004278:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800427c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004280:	fa93 f3a3 	rbit	r3, r3
 8004284:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8004288:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800428c:	fab3 f383 	clz	r3, r3
 8004290:	b2db      	uxtb	r3, r3
 8004292:	095b      	lsrs	r3, r3, #5
 8004294:	b2db      	uxtb	r3, r3
 8004296:	f043 0301 	orr.w	r3, r3, #1
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b01      	cmp	r3, #1
 800429e:	d105      	bne.n	80042ac <HAL_RCC_OscConfig+0x5d4>
 80042a0:	4b01      	ldr	r3, [pc, #4]	; (80042a8 <HAL_RCC_OscConfig+0x5d0>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	e016      	b.n	80042d4 <HAL_RCC_OscConfig+0x5fc>
 80042a6:	bf00      	nop
 80042a8:	40021000 	.word	0x40021000
 80042ac:	2302      	movs	r3, #2
 80042ae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042b6:	fa93 f3a3 	rbit	r3, r3
 80042ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80042be:	2302      	movs	r3, #2
 80042c0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80042c4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80042c8:	fa93 f3a3 	rbit	r3, r3
 80042cc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80042d0:	4bbf      	ldr	r3, [pc, #764]	; (80045d0 <HAL_RCC_OscConfig+0x8f8>)
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	2202      	movs	r2, #2
 80042d6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80042da:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80042de:	fa92 f2a2 	rbit	r2, r2
 80042e2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80042e6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80042ea:	fab2 f282 	clz	r2, r2
 80042ee:	b2d2      	uxtb	r2, r2
 80042f0:	f042 0220 	orr.w	r2, r2, #32
 80042f4:	b2d2      	uxtb	r2, r2
 80042f6:	f002 021f 	and.w	r2, r2, #31
 80042fa:	2101      	movs	r1, #1
 80042fc:	fa01 f202 	lsl.w	r2, r1, r2
 8004300:	4013      	ands	r3, r2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1ac      	bne.n	8004260 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004306:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800430a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0308 	and.w	r3, r3, #8
 8004316:	2b00      	cmp	r3, #0
 8004318:	f000 8113 	beq.w	8004542 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800431c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004320:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	695b      	ldr	r3, [r3, #20]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d07c      	beq.n	8004426 <HAL_RCC_OscConfig+0x74e>
 800432c:	2301      	movs	r3, #1
 800432e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004332:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004336:	fa93 f3a3 	rbit	r3, r3
 800433a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800433e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004342:	fab3 f383 	clz	r3, r3
 8004346:	b2db      	uxtb	r3, r3
 8004348:	461a      	mov	r2, r3
 800434a:	4ba2      	ldr	r3, [pc, #648]	; (80045d4 <HAL_RCC_OscConfig+0x8fc>)
 800434c:	4413      	add	r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	461a      	mov	r2, r3
 8004352:	2301      	movs	r3, #1
 8004354:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004356:	f7fd ff3d 	bl	80021d4 <HAL_GetTick>
 800435a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800435e:	e00a      	b.n	8004376 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004360:	f7fd ff38 	bl	80021d4 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	2b02      	cmp	r3, #2
 800436e:	d902      	bls.n	8004376 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	f000 bcfe 	b.w	8004d72 <HAL_RCC_OscConfig+0x109a>
 8004376:	2302      	movs	r3, #2
 8004378:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800437c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004380:	fa93 f2a3 	rbit	r2, r3
 8004384:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004388:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800438c:	601a      	str	r2, [r3, #0]
 800438e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004392:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004396:	2202      	movs	r2, #2
 8004398:	601a      	str	r2, [r3, #0]
 800439a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800439e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	fa93 f2a3 	rbit	r2, r3
 80043a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80043b0:	601a      	str	r2, [r3, #0]
 80043b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043b6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80043ba:	2202      	movs	r2, #2
 80043bc:	601a      	str	r2, [r3, #0]
 80043be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	fa93 f2a3 	rbit	r2, r3
 80043cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043d0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80043d4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043d6:	4b7e      	ldr	r3, [pc, #504]	; (80045d0 <HAL_RCC_OscConfig+0x8f8>)
 80043d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043de:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80043e2:	2102      	movs	r1, #2
 80043e4:	6019      	str	r1, [r3, #0]
 80043e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043ea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	fa93 f1a3 	rbit	r1, r3
 80043f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043f8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80043fc:	6019      	str	r1, [r3, #0]
  return result;
 80043fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004402:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	fab3 f383 	clz	r3, r3
 800440c:	b2db      	uxtb	r3, r3
 800440e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004412:	b2db      	uxtb	r3, r3
 8004414:	f003 031f 	and.w	r3, r3, #31
 8004418:	2101      	movs	r1, #1
 800441a:	fa01 f303 	lsl.w	r3, r1, r3
 800441e:	4013      	ands	r3, r2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d09d      	beq.n	8004360 <HAL_RCC_OscConfig+0x688>
 8004424:	e08d      	b.n	8004542 <HAL_RCC_OscConfig+0x86a>
 8004426:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800442a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800442e:	2201      	movs	r2, #1
 8004430:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004432:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004436:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	fa93 f2a3 	rbit	r2, r3
 8004440:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004444:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004448:	601a      	str	r2, [r3, #0]
  return result;
 800444a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800444e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004452:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004454:	fab3 f383 	clz	r3, r3
 8004458:	b2db      	uxtb	r3, r3
 800445a:	461a      	mov	r2, r3
 800445c:	4b5d      	ldr	r3, [pc, #372]	; (80045d4 <HAL_RCC_OscConfig+0x8fc>)
 800445e:	4413      	add	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	461a      	mov	r2, r3
 8004464:	2300      	movs	r3, #0
 8004466:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004468:	f7fd feb4 	bl	80021d4 <HAL_GetTick>
 800446c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004470:	e00a      	b.n	8004488 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004472:	f7fd feaf 	bl	80021d4 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d902      	bls.n	8004488 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	f000 bc75 	b.w	8004d72 <HAL_RCC_OscConfig+0x109a>
 8004488:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800448c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004490:	2202      	movs	r2, #2
 8004492:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004494:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004498:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	fa93 f2a3 	rbit	r2, r3
 80044a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044a6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80044aa:	601a      	str	r2, [r3, #0]
 80044ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80044b4:	2202      	movs	r2, #2
 80044b6:	601a      	str	r2, [r3, #0]
 80044b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	fa93 f2a3 	rbit	r2, r3
 80044c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044ce:	601a      	str	r2, [r3, #0]
 80044d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044d4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80044d8:	2202      	movs	r2, #2
 80044da:	601a      	str	r2, [r3, #0]
 80044dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044e0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	fa93 f2a3 	rbit	r2, r3
 80044ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044ee:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80044f2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044f4:	4b36      	ldr	r3, [pc, #216]	; (80045d0 <HAL_RCC_OscConfig+0x8f8>)
 80044f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044fc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004500:	2102      	movs	r1, #2
 8004502:	6019      	str	r1, [r3, #0]
 8004504:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004508:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	fa93 f1a3 	rbit	r1, r3
 8004512:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004516:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800451a:	6019      	str	r1, [r3, #0]
  return result;
 800451c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004520:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	fab3 f383 	clz	r3, r3
 800452a:	b2db      	uxtb	r3, r3
 800452c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004530:	b2db      	uxtb	r3, r3
 8004532:	f003 031f 	and.w	r3, r3, #31
 8004536:	2101      	movs	r1, #1
 8004538:	fa01 f303 	lsl.w	r3, r1, r3
 800453c:	4013      	ands	r3, r2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d197      	bne.n	8004472 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004542:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004546:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0304 	and.w	r3, r3, #4
 8004552:	2b00      	cmp	r3, #0
 8004554:	f000 81a5 	beq.w	80048a2 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004558:	2300      	movs	r3, #0
 800455a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800455e:	4b1c      	ldr	r3, [pc, #112]	; (80045d0 <HAL_RCC_OscConfig+0x8f8>)
 8004560:	69db      	ldr	r3, [r3, #28]
 8004562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d116      	bne.n	8004598 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800456a:	4b19      	ldr	r3, [pc, #100]	; (80045d0 <HAL_RCC_OscConfig+0x8f8>)
 800456c:	69db      	ldr	r3, [r3, #28]
 800456e:	4a18      	ldr	r2, [pc, #96]	; (80045d0 <HAL_RCC_OscConfig+0x8f8>)
 8004570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004574:	61d3      	str	r3, [r2, #28]
 8004576:	4b16      	ldr	r3, [pc, #88]	; (80045d0 <HAL_RCC_OscConfig+0x8f8>)
 8004578:	69db      	ldr	r3, [r3, #28]
 800457a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800457e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004582:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004586:	601a      	str	r2, [r3, #0]
 8004588:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800458c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004590:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004592:	2301      	movs	r3, #1
 8004594:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004598:	4b0f      	ldr	r3, [pc, #60]	; (80045d8 <HAL_RCC_OscConfig+0x900>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d121      	bne.n	80045e8 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045a4:	4b0c      	ldr	r3, [pc, #48]	; (80045d8 <HAL_RCC_OscConfig+0x900>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a0b      	ldr	r2, [pc, #44]	; (80045d8 <HAL_RCC_OscConfig+0x900>)
 80045aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045ae:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045b0:	f7fd fe10 	bl	80021d4 <HAL_GetTick>
 80045b4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045b8:	e010      	b.n	80045dc <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045ba:	f7fd fe0b 	bl	80021d4 <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b64      	cmp	r3, #100	; 0x64
 80045c8:	d908      	bls.n	80045dc <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e3d1      	b.n	8004d72 <HAL_RCC_OscConfig+0x109a>
 80045ce:	bf00      	nop
 80045d0:	40021000 	.word	0x40021000
 80045d4:	10908120 	.word	0x10908120
 80045d8:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045dc:	4b8d      	ldr	r3, [pc, #564]	; (8004814 <HAL_RCC_OscConfig+0xb3c>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d0e8      	beq.n	80045ba <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045ec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d106      	bne.n	8004606 <HAL_RCC_OscConfig+0x92e>
 80045f8:	4b87      	ldr	r3, [pc, #540]	; (8004818 <HAL_RCC_OscConfig+0xb40>)
 80045fa:	6a1b      	ldr	r3, [r3, #32]
 80045fc:	4a86      	ldr	r2, [pc, #536]	; (8004818 <HAL_RCC_OscConfig+0xb40>)
 80045fe:	f043 0301 	orr.w	r3, r3, #1
 8004602:	6213      	str	r3, [r2, #32]
 8004604:	e035      	b.n	8004672 <HAL_RCC_OscConfig+0x99a>
 8004606:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800460a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10c      	bne.n	8004630 <HAL_RCC_OscConfig+0x958>
 8004616:	4b80      	ldr	r3, [pc, #512]	; (8004818 <HAL_RCC_OscConfig+0xb40>)
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	4a7f      	ldr	r2, [pc, #508]	; (8004818 <HAL_RCC_OscConfig+0xb40>)
 800461c:	f023 0301 	bic.w	r3, r3, #1
 8004620:	6213      	str	r3, [r2, #32]
 8004622:	4b7d      	ldr	r3, [pc, #500]	; (8004818 <HAL_RCC_OscConfig+0xb40>)
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	4a7c      	ldr	r2, [pc, #496]	; (8004818 <HAL_RCC_OscConfig+0xb40>)
 8004628:	f023 0304 	bic.w	r3, r3, #4
 800462c:	6213      	str	r3, [r2, #32]
 800462e:	e020      	b.n	8004672 <HAL_RCC_OscConfig+0x99a>
 8004630:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004634:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	2b05      	cmp	r3, #5
 800463e:	d10c      	bne.n	800465a <HAL_RCC_OscConfig+0x982>
 8004640:	4b75      	ldr	r3, [pc, #468]	; (8004818 <HAL_RCC_OscConfig+0xb40>)
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	4a74      	ldr	r2, [pc, #464]	; (8004818 <HAL_RCC_OscConfig+0xb40>)
 8004646:	f043 0304 	orr.w	r3, r3, #4
 800464a:	6213      	str	r3, [r2, #32]
 800464c:	4b72      	ldr	r3, [pc, #456]	; (8004818 <HAL_RCC_OscConfig+0xb40>)
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	4a71      	ldr	r2, [pc, #452]	; (8004818 <HAL_RCC_OscConfig+0xb40>)
 8004652:	f043 0301 	orr.w	r3, r3, #1
 8004656:	6213      	str	r3, [r2, #32]
 8004658:	e00b      	b.n	8004672 <HAL_RCC_OscConfig+0x99a>
 800465a:	4b6f      	ldr	r3, [pc, #444]	; (8004818 <HAL_RCC_OscConfig+0xb40>)
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	4a6e      	ldr	r2, [pc, #440]	; (8004818 <HAL_RCC_OscConfig+0xb40>)
 8004660:	f023 0301 	bic.w	r3, r3, #1
 8004664:	6213      	str	r3, [r2, #32]
 8004666:	4b6c      	ldr	r3, [pc, #432]	; (8004818 <HAL_RCC_OscConfig+0xb40>)
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	4a6b      	ldr	r2, [pc, #428]	; (8004818 <HAL_RCC_OscConfig+0xb40>)
 800466c:	f023 0304 	bic.w	r3, r3, #4
 8004670:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004672:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004676:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	2b00      	cmp	r3, #0
 8004680:	f000 8081 	beq.w	8004786 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004684:	f7fd fda6 	bl	80021d4 <HAL_GetTick>
 8004688:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800468c:	e00b      	b.n	80046a6 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800468e:	f7fd fda1 	bl	80021d4 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	f241 3288 	movw	r2, #5000	; 0x1388
 800469e:	4293      	cmp	r3, r2
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e365      	b.n	8004d72 <HAL_RCC_OscConfig+0x109a>
 80046a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046aa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80046ae:	2202      	movs	r2, #2
 80046b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046b6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	fa93 f2a3 	rbit	r2, r3
 80046c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046c4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80046c8:	601a      	str	r2, [r3, #0]
 80046ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046ce:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80046d2:	2202      	movs	r2, #2
 80046d4:	601a      	str	r2, [r3, #0]
 80046d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046da:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	fa93 f2a3 	rbit	r2, r3
 80046e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046e8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80046ec:	601a      	str	r2, [r3, #0]
  return result;
 80046ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046f2:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80046f6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046f8:	fab3 f383 	clz	r3, r3
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	095b      	lsrs	r3, r3, #5
 8004700:	b2db      	uxtb	r3, r3
 8004702:	f043 0302 	orr.w	r3, r3, #2
 8004706:	b2db      	uxtb	r3, r3
 8004708:	2b02      	cmp	r3, #2
 800470a:	d102      	bne.n	8004712 <HAL_RCC_OscConfig+0xa3a>
 800470c:	4b42      	ldr	r3, [pc, #264]	; (8004818 <HAL_RCC_OscConfig+0xb40>)
 800470e:	6a1b      	ldr	r3, [r3, #32]
 8004710:	e013      	b.n	800473a <HAL_RCC_OscConfig+0xa62>
 8004712:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004716:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800471a:	2202      	movs	r2, #2
 800471c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800471e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004722:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	fa93 f2a3 	rbit	r2, r3
 800472c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004730:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8004734:	601a      	str	r2, [r3, #0]
 8004736:	4b38      	ldr	r3, [pc, #224]	; (8004818 <HAL_RCC_OscConfig+0xb40>)
 8004738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800473e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004742:	2102      	movs	r1, #2
 8004744:	6011      	str	r1, [r2, #0]
 8004746:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800474a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800474e:	6812      	ldr	r2, [r2, #0]
 8004750:	fa92 f1a2 	rbit	r1, r2
 8004754:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004758:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800475c:	6011      	str	r1, [r2, #0]
  return result;
 800475e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004762:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8004766:	6812      	ldr	r2, [r2, #0]
 8004768:	fab2 f282 	clz	r2, r2
 800476c:	b2d2      	uxtb	r2, r2
 800476e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004772:	b2d2      	uxtb	r2, r2
 8004774:	f002 021f 	and.w	r2, r2, #31
 8004778:	2101      	movs	r1, #1
 800477a:	fa01 f202 	lsl.w	r2, r1, r2
 800477e:	4013      	ands	r3, r2
 8004780:	2b00      	cmp	r3, #0
 8004782:	d084      	beq.n	800468e <HAL_RCC_OscConfig+0x9b6>
 8004784:	e083      	b.n	800488e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004786:	f7fd fd25 	bl	80021d4 <HAL_GetTick>
 800478a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800478e:	e00b      	b.n	80047a8 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004790:	f7fd fd20 	bl	80021d4 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	f241 3288 	movw	r2, #5000	; 0x1388
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d901      	bls.n	80047a8 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e2e4      	b.n	8004d72 <HAL_RCC_OscConfig+0x109a>
 80047a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047ac:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80047b0:	2202      	movs	r2, #2
 80047b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047b8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	fa93 f2a3 	rbit	r2, r3
 80047c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047c6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80047ca:	601a      	str	r2, [r3, #0]
 80047cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047d0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80047d4:	2202      	movs	r2, #2
 80047d6:	601a      	str	r2, [r3, #0]
 80047d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047dc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	fa93 f2a3 	rbit	r2, r3
 80047e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047ea:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80047ee:	601a      	str	r2, [r3, #0]
  return result;
 80047f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047f4:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80047f8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047fa:	fab3 f383 	clz	r3, r3
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	095b      	lsrs	r3, r3, #5
 8004802:	b2db      	uxtb	r3, r3
 8004804:	f043 0302 	orr.w	r3, r3, #2
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b02      	cmp	r3, #2
 800480c:	d106      	bne.n	800481c <HAL_RCC_OscConfig+0xb44>
 800480e:	4b02      	ldr	r3, [pc, #8]	; (8004818 <HAL_RCC_OscConfig+0xb40>)
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	e017      	b.n	8004844 <HAL_RCC_OscConfig+0xb6c>
 8004814:	40007000 	.word	0x40007000
 8004818:	40021000 	.word	0x40021000
 800481c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004820:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004824:	2202      	movs	r2, #2
 8004826:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004828:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800482c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	fa93 f2a3 	rbit	r2, r3
 8004836:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800483a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800483e:	601a      	str	r2, [r3, #0]
 8004840:	4bb3      	ldr	r3, [pc, #716]	; (8004b10 <HAL_RCC_OscConfig+0xe38>)
 8004842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004844:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004848:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800484c:	2102      	movs	r1, #2
 800484e:	6011      	str	r1, [r2, #0]
 8004850:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004854:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004858:	6812      	ldr	r2, [r2, #0]
 800485a:	fa92 f1a2 	rbit	r1, r2
 800485e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004862:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8004866:	6011      	str	r1, [r2, #0]
  return result;
 8004868:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800486c:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8004870:	6812      	ldr	r2, [r2, #0]
 8004872:	fab2 f282 	clz	r2, r2
 8004876:	b2d2      	uxtb	r2, r2
 8004878:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800487c:	b2d2      	uxtb	r2, r2
 800487e:	f002 021f 	and.w	r2, r2, #31
 8004882:	2101      	movs	r1, #1
 8004884:	fa01 f202 	lsl.w	r2, r1, r2
 8004888:	4013      	ands	r3, r2
 800488a:	2b00      	cmp	r3, #0
 800488c:	d180      	bne.n	8004790 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800488e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8004892:	2b01      	cmp	r3, #1
 8004894:	d105      	bne.n	80048a2 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004896:	4b9e      	ldr	r3, [pc, #632]	; (8004b10 <HAL_RCC_OscConfig+0xe38>)
 8004898:	69db      	ldr	r3, [r3, #28]
 800489a:	4a9d      	ldr	r2, [pc, #628]	; (8004b10 <HAL_RCC_OscConfig+0xe38>)
 800489c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048a0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048a6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f000 825e 	beq.w	8004d70 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048b4:	4b96      	ldr	r3, [pc, #600]	; (8004b10 <HAL_RCC_OscConfig+0xe38>)
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f003 030c 	and.w	r3, r3, #12
 80048bc:	2b08      	cmp	r3, #8
 80048be:	f000 821f 	beq.w	8004d00 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048c6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	f040 8170 	bne.w	8004bb4 <HAL_RCC_OscConfig+0xedc>
 80048d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048d8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80048dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80048e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048e6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	fa93 f2a3 	rbit	r2, r3
 80048f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048f4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80048f8:	601a      	str	r2, [r3, #0]
  return result;
 80048fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048fe:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004902:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004904:	fab3 f383 	clz	r3, r3
 8004908:	b2db      	uxtb	r3, r3
 800490a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800490e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	461a      	mov	r2, r3
 8004916:	2300      	movs	r3, #0
 8004918:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800491a:	f7fd fc5b 	bl	80021d4 <HAL_GetTick>
 800491e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004922:	e009      	b.n	8004938 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004924:	f7fd fc56 	bl	80021d4 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	2b02      	cmp	r3, #2
 8004932:	d901      	bls.n	8004938 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e21c      	b.n	8004d72 <HAL_RCC_OscConfig+0x109a>
 8004938:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800493c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004940:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004944:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004946:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800494a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	fa93 f2a3 	rbit	r2, r3
 8004954:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004958:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800495c:	601a      	str	r2, [r3, #0]
  return result;
 800495e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004962:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004966:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004968:	fab3 f383 	clz	r3, r3
 800496c:	b2db      	uxtb	r3, r3
 800496e:	095b      	lsrs	r3, r3, #5
 8004970:	b2db      	uxtb	r3, r3
 8004972:	f043 0301 	orr.w	r3, r3, #1
 8004976:	b2db      	uxtb	r3, r3
 8004978:	2b01      	cmp	r3, #1
 800497a:	d102      	bne.n	8004982 <HAL_RCC_OscConfig+0xcaa>
 800497c:	4b64      	ldr	r3, [pc, #400]	; (8004b10 <HAL_RCC_OscConfig+0xe38>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	e027      	b.n	80049d2 <HAL_RCC_OscConfig+0xcfa>
 8004982:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004986:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800498a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800498e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004990:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004994:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	fa93 f2a3 	rbit	r2, r3
 800499e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049a2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80049a6:	601a      	str	r2, [r3, #0]
 80049a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049ac:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80049b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80049b4:	601a      	str	r2, [r3, #0]
 80049b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049ba:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	fa93 f2a3 	rbit	r2, r3
 80049c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049c8:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80049cc:	601a      	str	r2, [r3, #0]
 80049ce:	4b50      	ldr	r3, [pc, #320]	; (8004b10 <HAL_RCC_OscConfig+0xe38>)
 80049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80049d6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80049da:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80049de:	6011      	str	r1, [r2, #0]
 80049e0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80049e4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80049e8:	6812      	ldr	r2, [r2, #0]
 80049ea:	fa92 f1a2 	rbit	r1, r2
 80049ee:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80049f2:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80049f6:	6011      	str	r1, [r2, #0]
  return result;
 80049f8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80049fc:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8004a00:	6812      	ldr	r2, [r2, #0]
 8004a02:	fab2 f282 	clz	r2, r2
 8004a06:	b2d2      	uxtb	r2, r2
 8004a08:	f042 0220 	orr.w	r2, r2, #32
 8004a0c:	b2d2      	uxtb	r2, r2
 8004a0e:	f002 021f 	and.w	r2, r2, #31
 8004a12:	2101      	movs	r1, #1
 8004a14:	fa01 f202 	lsl.w	r2, r1, r2
 8004a18:	4013      	ands	r3, r2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d182      	bne.n	8004924 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a1e:	4b3c      	ldr	r3, [pc, #240]	; (8004b10 <HAL_RCC_OscConfig+0xe38>)
 8004a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a22:	f023 020f 	bic.w	r2, r3, #15
 8004a26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a2a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a32:	4937      	ldr	r1, [pc, #220]	; (8004b10 <HAL_RCC_OscConfig+0xe38>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004a38:	4b35      	ldr	r3, [pc, #212]	; (8004b10 <HAL_RCC_OscConfig+0xe38>)
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8004a40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a44:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	6a19      	ldr	r1, [r3, #32]
 8004a4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a50:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	69db      	ldr	r3, [r3, #28]
 8004a58:	430b      	orrs	r3, r1
 8004a5a:	492d      	ldr	r1, [pc, #180]	; (8004b10 <HAL_RCC_OscConfig+0xe38>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	604b      	str	r3, [r1, #4]
 8004a60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a64:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004a68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a72:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	fa93 f2a3 	rbit	r2, r3
 8004a7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a80:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004a84:	601a      	str	r2, [r3, #0]
  return result;
 8004a86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a8a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004a8e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a90:	fab3 f383 	clz	r3, r3
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004a9a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa6:	f7fd fb95 	bl	80021d4 <HAL_GetTick>
 8004aaa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004aae:	e009      	b.n	8004ac4 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ab0:	f7fd fb90 	bl	80021d4 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d901      	bls.n	8004ac4 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e156      	b.n	8004d72 <HAL_RCC_OscConfig+0x109a>
 8004ac4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ac8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004acc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ad0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ad6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	fa93 f2a3 	rbit	r2, r3
 8004ae0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ae4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004ae8:	601a      	str	r2, [r3, #0]
  return result;
 8004aea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004aee:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004af2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004af4:	fab3 f383 	clz	r3, r3
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	095b      	lsrs	r3, r3, #5
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	f043 0301 	orr.w	r3, r3, #1
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d105      	bne.n	8004b14 <HAL_RCC_OscConfig+0xe3c>
 8004b08:	4b01      	ldr	r3, [pc, #4]	; (8004b10 <HAL_RCC_OscConfig+0xe38>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	e02a      	b.n	8004b64 <HAL_RCC_OscConfig+0xe8c>
 8004b0e:	bf00      	nop
 8004b10:	40021000 	.word	0x40021000
 8004b14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b18:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004b1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b26:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	fa93 f2a3 	rbit	r2, r3
 8004b30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b34:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004b38:	601a      	str	r2, [r3, #0]
 8004b3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b3e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004b42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b4c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	fa93 f2a3 	rbit	r2, r3
 8004b56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b5a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8004b5e:	601a      	str	r2, [r3, #0]
 8004b60:	4b86      	ldr	r3, [pc, #536]	; (8004d7c <HAL_RCC_OscConfig+0x10a4>)
 8004b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b64:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004b68:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004b6c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004b70:	6011      	str	r1, [r2, #0]
 8004b72:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004b76:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004b7a:	6812      	ldr	r2, [r2, #0]
 8004b7c:	fa92 f1a2 	rbit	r1, r2
 8004b80:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004b84:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004b88:	6011      	str	r1, [r2, #0]
  return result;
 8004b8a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004b8e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004b92:	6812      	ldr	r2, [r2, #0]
 8004b94:	fab2 f282 	clz	r2, r2
 8004b98:	b2d2      	uxtb	r2, r2
 8004b9a:	f042 0220 	orr.w	r2, r2, #32
 8004b9e:	b2d2      	uxtb	r2, r2
 8004ba0:	f002 021f 	and.w	r2, r2, #31
 8004ba4:	2101      	movs	r1, #1
 8004ba6:	fa01 f202 	lsl.w	r2, r1, r2
 8004baa:	4013      	ands	r3, r2
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f43f af7f 	beq.w	8004ab0 <HAL_RCC_OscConfig+0xdd8>
 8004bb2:	e0dd      	b.n	8004d70 <HAL_RCC_OscConfig+0x1098>
 8004bb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bb8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004bbc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004bc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bc6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	fa93 f2a3 	rbit	r2, r3
 8004bd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bd4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004bd8:	601a      	str	r2, [r3, #0]
  return result;
 8004bda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bde:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004be2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004be4:	fab3 f383 	clz	r3, r3
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004bee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bfa:	f7fd faeb 	bl	80021d4 <HAL_GetTick>
 8004bfe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c02:	e009      	b.n	8004c18 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c04:	f7fd fae6 	bl	80021d4 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d901      	bls.n	8004c18 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e0ac      	b.n	8004d72 <HAL_RCC_OscConfig+0x109a>
 8004c18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c1c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004c20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c2a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	fa93 f2a3 	rbit	r2, r3
 8004c34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c38:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004c3c:	601a      	str	r2, [r3, #0]
  return result;
 8004c3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c42:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004c46:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c48:	fab3 f383 	clz	r3, r3
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	095b      	lsrs	r3, r3, #5
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	f043 0301 	orr.w	r3, r3, #1
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d102      	bne.n	8004c62 <HAL_RCC_OscConfig+0xf8a>
 8004c5c:	4b47      	ldr	r3, [pc, #284]	; (8004d7c <HAL_RCC_OscConfig+0x10a4>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	e027      	b.n	8004cb2 <HAL_RCC_OscConfig+0xfda>
 8004c62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c66:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004c6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c74:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	fa93 f2a3 	rbit	r2, r3
 8004c7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c82:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004c86:	601a      	str	r2, [r3, #0]
 8004c88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c8c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004c90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c94:	601a      	str	r2, [r3, #0]
 8004c96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c9a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	fa93 f2a3 	rbit	r2, r3
 8004ca4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ca8:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8004cac:	601a      	str	r2, [r3, #0]
 8004cae:	4b33      	ldr	r3, [pc, #204]	; (8004d7c <HAL_RCC_OscConfig+0x10a4>)
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004cb6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004cba:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004cbe:	6011      	str	r1, [r2, #0]
 8004cc0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004cc4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004cc8:	6812      	ldr	r2, [r2, #0]
 8004cca:	fa92 f1a2 	rbit	r1, r2
 8004cce:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004cd2:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004cd6:	6011      	str	r1, [r2, #0]
  return result;
 8004cd8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004cdc:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004ce0:	6812      	ldr	r2, [r2, #0]
 8004ce2:	fab2 f282 	clz	r2, r2
 8004ce6:	b2d2      	uxtb	r2, r2
 8004ce8:	f042 0220 	orr.w	r2, r2, #32
 8004cec:	b2d2      	uxtb	r2, r2
 8004cee:	f002 021f 	and.w	r2, r2, #31
 8004cf2:	2101      	movs	r1, #1
 8004cf4:	fa01 f202 	lsl.w	r2, r1, r2
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d182      	bne.n	8004c04 <HAL_RCC_OscConfig+0xf2c>
 8004cfe:	e037      	b.n	8004d70 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d04:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d101      	bne.n	8004d14 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e02e      	b.n	8004d72 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004d14:	4b19      	ldr	r3, [pc, #100]	; (8004d7c <HAL_RCC_OscConfig+0x10a4>)
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004d1c:	4b17      	ldr	r3, [pc, #92]	; (8004d7c <HAL_RCC_OscConfig+0x10a4>)
 8004d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d20:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004d24:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004d28:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8004d2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d30:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	69db      	ldr	r3, [r3, #28]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d117      	bne.n	8004d6c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004d3c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004d40:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004d44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d48:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d10b      	bne.n	8004d6c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004d54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d58:	f003 020f 	and.w	r2, r3, #15
 8004d5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d60:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d001      	beq.n	8004d70 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e000      	b.n	8004d72 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	40021000 	.word	0x40021000

08004d80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b09e      	sub	sp, #120	; 0x78
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d101      	bne.n	8004d98 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e162      	b.n	800505e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d98:	4b90      	ldr	r3, [pc, #576]	; (8004fdc <HAL_RCC_ClockConfig+0x25c>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0307 	and.w	r3, r3, #7
 8004da0:	683a      	ldr	r2, [r7, #0]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d910      	bls.n	8004dc8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004da6:	4b8d      	ldr	r3, [pc, #564]	; (8004fdc <HAL_RCC_ClockConfig+0x25c>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f023 0207 	bic.w	r2, r3, #7
 8004dae:	498b      	ldr	r1, [pc, #556]	; (8004fdc <HAL_RCC_ClockConfig+0x25c>)
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004db6:	4b89      	ldr	r3, [pc, #548]	; (8004fdc <HAL_RCC_ClockConfig+0x25c>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0307 	and.w	r3, r3, #7
 8004dbe:	683a      	ldr	r2, [r7, #0]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d001      	beq.n	8004dc8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e14a      	b.n	800505e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0302 	and.w	r3, r3, #2
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d008      	beq.n	8004de6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dd4:	4b82      	ldr	r3, [pc, #520]	; (8004fe0 <HAL_RCC_ClockConfig+0x260>)
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	497f      	ldr	r1, [pc, #508]	; (8004fe0 <HAL_RCC_ClockConfig+0x260>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0301 	and.w	r3, r3, #1
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	f000 80dc 	beq.w	8004fac <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d13c      	bne.n	8004e76 <HAL_RCC_ClockConfig+0xf6>
 8004dfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e00:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e04:	fa93 f3a3 	rbit	r3, r3
 8004e08:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e0c:	fab3 f383 	clz	r3, r3
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	095b      	lsrs	r3, r3, #5
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	f043 0301 	orr.w	r3, r3, #1
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d102      	bne.n	8004e26 <HAL_RCC_ClockConfig+0xa6>
 8004e20:	4b6f      	ldr	r3, [pc, #444]	; (8004fe0 <HAL_RCC_ClockConfig+0x260>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	e00f      	b.n	8004e46 <HAL_RCC_ClockConfig+0xc6>
 8004e26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e2a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e2e:	fa93 f3a3 	rbit	r3, r3
 8004e32:	667b      	str	r3, [r7, #100]	; 0x64
 8004e34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e38:	663b      	str	r3, [r7, #96]	; 0x60
 8004e3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e3c:	fa93 f3a3 	rbit	r3, r3
 8004e40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e42:	4b67      	ldr	r3, [pc, #412]	; (8004fe0 <HAL_RCC_ClockConfig+0x260>)
 8004e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e46:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004e4a:	65ba      	str	r2, [r7, #88]	; 0x58
 8004e4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e4e:	fa92 f2a2 	rbit	r2, r2
 8004e52:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004e54:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004e56:	fab2 f282 	clz	r2, r2
 8004e5a:	b2d2      	uxtb	r2, r2
 8004e5c:	f042 0220 	orr.w	r2, r2, #32
 8004e60:	b2d2      	uxtb	r2, r2
 8004e62:	f002 021f 	and.w	r2, r2, #31
 8004e66:	2101      	movs	r1, #1
 8004e68:	fa01 f202 	lsl.w	r2, r1, r2
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d17b      	bne.n	8004f6a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e0f3      	b.n	800505e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d13c      	bne.n	8004ef8 <HAL_RCC_ClockConfig+0x178>
 8004e7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e82:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e86:	fa93 f3a3 	rbit	r3, r3
 8004e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004e8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e8e:	fab3 f383 	clz	r3, r3
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	095b      	lsrs	r3, r3, #5
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	f043 0301 	orr.w	r3, r3, #1
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d102      	bne.n	8004ea8 <HAL_RCC_ClockConfig+0x128>
 8004ea2:	4b4f      	ldr	r3, [pc, #316]	; (8004fe0 <HAL_RCC_ClockConfig+0x260>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	e00f      	b.n	8004ec8 <HAL_RCC_ClockConfig+0x148>
 8004ea8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004eac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004eb0:	fa93 f3a3 	rbit	r3, r3
 8004eb4:	647b      	str	r3, [r7, #68]	; 0x44
 8004eb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004eba:	643b      	str	r3, [r7, #64]	; 0x40
 8004ebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ebe:	fa93 f3a3 	rbit	r3, r3
 8004ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ec4:	4b46      	ldr	r3, [pc, #280]	; (8004fe0 <HAL_RCC_ClockConfig+0x260>)
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ecc:	63ba      	str	r2, [r7, #56]	; 0x38
 8004ece:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ed0:	fa92 f2a2 	rbit	r2, r2
 8004ed4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004ed6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ed8:	fab2 f282 	clz	r2, r2
 8004edc:	b2d2      	uxtb	r2, r2
 8004ede:	f042 0220 	orr.w	r2, r2, #32
 8004ee2:	b2d2      	uxtb	r2, r2
 8004ee4:	f002 021f 	and.w	r2, r2, #31
 8004ee8:	2101      	movs	r1, #1
 8004eea:	fa01 f202 	lsl.w	r2, r1, r2
 8004eee:	4013      	ands	r3, r2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d13a      	bne.n	8004f6a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e0b2      	b.n	800505e <HAL_RCC_ClockConfig+0x2de>
 8004ef8:	2302      	movs	r3, #2
 8004efa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efe:	fa93 f3a3 	rbit	r3, r3
 8004f02:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f06:	fab3 f383 	clz	r3, r3
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	095b      	lsrs	r3, r3, #5
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	f043 0301 	orr.w	r3, r3, #1
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d102      	bne.n	8004f20 <HAL_RCC_ClockConfig+0x1a0>
 8004f1a:	4b31      	ldr	r3, [pc, #196]	; (8004fe0 <HAL_RCC_ClockConfig+0x260>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	e00d      	b.n	8004f3c <HAL_RCC_ClockConfig+0x1bc>
 8004f20:	2302      	movs	r3, #2
 8004f22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f26:	fa93 f3a3 	rbit	r3, r3
 8004f2a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	623b      	str	r3, [r7, #32]
 8004f30:	6a3b      	ldr	r3, [r7, #32]
 8004f32:	fa93 f3a3 	rbit	r3, r3
 8004f36:	61fb      	str	r3, [r7, #28]
 8004f38:	4b29      	ldr	r3, [pc, #164]	; (8004fe0 <HAL_RCC_ClockConfig+0x260>)
 8004f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3c:	2202      	movs	r2, #2
 8004f3e:	61ba      	str	r2, [r7, #24]
 8004f40:	69ba      	ldr	r2, [r7, #24]
 8004f42:	fa92 f2a2 	rbit	r2, r2
 8004f46:	617a      	str	r2, [r7, #20]
  return result;
 8004f48:	697a      	ldr	r2, [r7, #20]
 8004f4a:	fab2 f282 	clz	r2, r2
 8004f4e:	b2d2      	uxtb	r2, r2
 8004f50:	f042 0220 	orr.w	r2, r2, #32
 8004f54:	b2d2      	uxtb	r2, r2
 8004f56:	f002 021f 	and.w	r2, r2, #31
 8004f5a:	2101      	movs	r1, #1
 8004f5c:	fa01 f202 	lsl.w	r2, r1, r2
 8004f60:	4013      	ands	r3, r2
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d101      	bne.n	8004f6a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e079      	b.n	800505e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f6a:	4b1d      	ldr	r3, [pc, #116]	; (8004fe0 <HAL_RCC_ClockConfig+0x260>)
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f023 0203 	bic.w	r2, r3, #3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	491a      	ldr	r1, [pc, #104]	; (8004fe0 <HAL_RCC_ClockConfig+0x260>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f7c:	f7fd f92a 	bl	80021d4 <HAL_GetTick>
 8004f80:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f82:	e00a      	b.n	8004f9a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f84:	f7fd f926 	bl	80021d4 <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d901      	bls.n	8004f9a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e061      	b.n	800505e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f9a:	4b11      	ldr	r3, [pc, #68]	; (8004fe0 <HAL_RCC_ClockConfig+0x260>)
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	f003 020c 	and.w	r2, r3, #12
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d1eb      	bne.n	8004f84 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fac:	4b0b      	ldr	r3, [pc, #44]	; (8004fdc <HAL_RCC_ClockConfig+0x25c>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0307 	and.w	r3, r3, #7
 8004fb4:	683a      	ldr	r2, [r7, #0]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d214      	bcs.n	8004fe4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fba:	4b08      	ldr	r3, [pc, #32]	; (8004fdc <HAL_RCC_ClockConfig+0x25c>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f023 0207 	bic.w	r2, r3, #7
 8004fc2:	4906      	ldr	r1, [pc, #24]	; (8004fdc <HAL_RCC_ClockConfig+0x25c>)
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fca:	4b04      	ldr	r3, [pc, #16]	; (8004fdc <HAL_RCC_ClockConfig+0x25c>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0307 	and.w	r3, r3, #7
 8004fd2:	683a      	ldr	r2, [r7, #0]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d005      	beq.n	8004fe4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e040      	b.n	800505e <HAL_RCC_ClockConfig+0x2de>
 8004fdc:	40022000 	.word	0x40022000
 8004fe0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0304 	and.w	r3, r3, #4
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d008      	beq.n	8005002 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ff0:	4b1d      	ldr	r3, [pc, #116]	; (8005068 <HAL_RCC_ClockConfig+0x2e8>)
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	491a      	ldr	r1, [pc, #104]	; (8005068 <HAL_RCC_ClockConfig+0x2e8>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0308 	and.w	r3, r3, #8
 800500a:	2b00      	cmp	r3, #0
 800500c:	d009      	beq.n	8005022 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800500e:	4b16      	ldr	r3, [pc, #88]	; (8005068 <HAL_RCC_ClockConfig+0x2e8>)
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	00db      	lsls	r3, r3, #3
 800501c:	4912      	ldr	r1, [pc, #72]	; (8005068 <HAL_RCC_ClockConfig+0x2e8>)
 800501e:	4313      	orrs	r3, r2
 8005020:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005022:	f000 f829 	bl	8005078 <HAL_RCC_GetSysClockFreq>
 8005026:	4601      	mov	r1, r0
 8005028:	4b0f      	ldr	r3, [pc, #60]	; (8005068 <HAL_RCC_ClockConfig+0x2e8>)
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005030:	22f0      	movs	r2, #240	; 0xf0
 8005032:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	fa92 f2a2 	rbit	r2, r2
 800503a:	60fa      	str	r2, [r7, #12]
  return result;
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	fab2 f282 	clz	r2, r2
 8005042:	b2d2      	uxtb	r2, r2
 8005044:	40d3      	lsrs	r3, r2
 8005046:	4a09      	ldr	r2, [pc, #36]	; (800506c <HAL_RCC_ClockConfig+0x2ec>)
 8005048:	5cd3      	ldrb	r3, [r2, r3]
 800504a:	fa21 f303 	lsr.w	r3, r1, r3
 800504e:	4a08      	ldr	r2, [pc, #32]	; (8005070 <HAL_RCC_ClockConfig+0x2f0>)
 8005050:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005052:	4b08      	ldr	r3, [pc, #32]	; (8005074 <HAL_RCC_ClockConfig+0x2f4>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4618      	mov	r0, r3
 8005058:	f7fd f878 	bl	800214c <HAL_InitTick>
  
  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3778      	adds	r7, #120	; 0x78
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	40021000 	.word	0x40021000
 800506c:	08008244 	.word	0x08008244
 8005070:	20000068 	.word	0x20000068
 8005074:	2000006c 	.word	0x2000006c

08005078 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005078:	b480      	push	{r7}
 800507a:	b08b      	sub	sp, #44	; 0x2c
 800507c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800507e:	2300      	movs	r3, #0
 8005080:	61fb      	str	r3, [r7, #28]
 8005082:	2300      	movs	r3, #0
 8005084:	61bb      	str	r3, [r7, #24]
 8005086:	2300      	movs	r3, #0
 8005088:	627b      	str	r3, [r7, #36]	; 0x24
 800508a:	2300      	movs	r3, #0
 800508c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800508e:	2300      	movs	r3, #0
 8005090:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005092:	4b2a      	ldr	r3, [pc, #168]	; (800513c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	f003 030c 	and.w	r3, r3, #12
 800509e:	2b04      	cmp	r3, #4
 80050a0:	d002      	beq.n	80050a8 <HAL_RCC_GetSysClockFreq+0x30>
 80050a2:	2b08      	cmp	r3, #8
 80050a4:	d003      	beq.n	80050ae <HAL_RCC_GetSysClockFreq+0x36>
 80050a6:	e03f      	b.n	8005128 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80050a8:	4b25      	ldr	r3, [pc, #148]	; (8005140 <HAL_RCC_GetSysClockFreq+0xc8>)
 80050aa:	623b      	str	r3, [r7, #32]
      break;
 80050ac:	e03f      	b.n	800512e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80050b4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80050b8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	fa92 f2a2 	rbit	r2, r2
 80050c0:	607a      	str	r2, [r7, #4]
  return result;
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	fab2 f282 	clz	r2, r2
 80050c8:	b2d2      	uxtb	r2, r2
 80050ca:	40d3      	lsrs	r3, r2
 80050cc:	4a1d      	ldr	r2, [pc, #116]	; (8005144 <HAL_RCC_GetSysClockFreq+0xcc>)
 80050ce:	5cd3      	ldrb	r3, [r2, r3]
 80050d0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80050d2:	4b1a      	ldr	r3, [pc, #104]	; (800513c <HAL_RCC_GetSysClockFreq+0xc4>)
 80050d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d6:	f003 030f 	and.w	r3, r3, #15
 80050da:	220f      	movs	r2, #15
 80050dc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	fa92 f2a2 	rbit	r2, r2
 80050e4:	60fa      	str	r2, [r7, #12]
  return result;
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	fab2 f282 	clz	r2, r2
 80050ec:	b2d2      	uxtb	r2, r2
 80050ee:	40d3      	lsrs	r3, r2
 80050f0:	4a15      	ldr	r2, [pc, #84]	; (8005148 <HAL_RCC_GetSysClockFreq+0xd0>)
 80050f2:	5cd3      	ldrb	r3, [r2, r3]
 80050f4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d008      	beq.n	8005112 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005100:	4a0f      	ldr	r2, [pc, #60]	; (8005140 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	fbb2 f2f3 	udiv	r2, r2, r3
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	fb02 f303 	mul.w	r3, r2, r3
 800510e:	627b      	str	r3, [r7, #36]	; 0x24
 8005110:	e007      	b.n	8005122 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005112:	4a0b      	ldr	r2, [pc, #44]	; (8005140 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	fbb2 f2f3 	udiv	r2, r2, r3
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	fb02 f303 	mul.w	r3, r2, r3
 8005120:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005124:	623b      	str	r3, [r7, #32]
      break;
 8005126:	e002      	b.n	800512e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005128:	4b05      	ldr	r3, [pc, #20]	; (8005140 <HAL_RCC_GetSysClockFreq+0xc8>)
 800512a:	623b      	str	r3, [r7, #32]
      break;
 800512c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800512e:	6a3b      	ldr	r3, [r7, #32]
}
 8005130:	4618      	mov	r0, r3
 8005132:	372c      	adds	r7, #44	; 0x2c
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr
 800513c:	40021000 	.word	0x40021000
 8005140:	007a1200 	.word	0x007a1200
 8005144:	0800825c 	.word	0x0800825c
 8005148:	0800826c 	.word	0x0800826c

0800514c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800514c:	b480      	push	{r7}
 800514e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005150:	4b03      	ldr	r3, [pc, #12]	; (8005160 <HAL_RCC_GetHCLKFreq+0x14>)
 8005152:	681b      	ldr	r3, [r3, #0]
}
 8005154:	4618      	mov	r0, r3
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	20000068 	.word	0x20000068

08005164 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800516a:	f7ff ffef 	bl	800514c <HAL_RCC_GetHCLKFreq>
 800516e:	4601      	mov	r1, r0
 8005170:	4b0b      	ldr	r3, [pc, #44]	; (80051a0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005178:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800517c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	fa92 f2a2 	rbit	r2, r2
 8005184:	603a      	str	r2, [r7, #0]
  return result;
 8005186:	683a      	ldr	r2, [r7, #0]
 8005188:	fab2 f282 	clz	r2, r2
 800518c:	b2d2      	uxtb	r2, r2
 800518e:	40d3      	lsrs	r3, r2
 8005190:	4a04      	ldr	r2, [pc, #16]	; (80051a4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005192:	5cd3      	ldrb	r3, [r2, r3]
 8005194:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005198:	4618      	mov	r0, r3
 800519a:	3708      	adds	r7, #8
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	40021000 	.word	0x40021000
 80051a4:	08008254 	.word	0x08008254

080051a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80051ae:	f7ff ffcd 	bl	800514c <HAL_RCC_GetHCLKFreq>
 80051b2:	4601      	mov	r1, r0
 80051b4:	4b0b      	ldr	r3, [pc, #44]	; (80051e4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80051bc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80051c0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	fa92 f2a2 	rbit	r2, r2
 80051c8:	603a      	str	r2, [r7, #0]
  return result;
 80051ca:	683a      	ldr	r2, [r7, #0]
 80051cc:	fab2 f282 	clz	r2, r2
 80051d0:	b2d2      	uxtb	r2, r2
 80051d2:	40d3      	lsrs	r3, r2
 80051d4:	4a04      	ldr	r2, [pc, #16]	; (80051e8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80051d6:	5cd3      	ldrb	r3, [r2, r3]
 80051d8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80051dc:	4618      	mov	r0, r3
 80051de:	3708      	adds	r7, #8
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	40021000 	.word	0x40021000
 80051e8:	08008254 	.word	0x08008254

080051ec <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b092      	sub	sp, #72	; 0x48
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051f4:	2300      	movs	r3, #0
 80051f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80051f8:	2300      	movs	r3, #0
 80051fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80051fc:	2300      	movs	r3, #0
 80051fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800520a:	2b00      	cmp	r3, #0
 800520c:	f000 80d4 	beq.w	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005210:	4b4e      	ldr	r3, [pc, #312]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005212:	69db      	ldr	r3, [r3, #28]
 8005214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d10e      	bne.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800521c:	4b4b      	ldr	r3, [pc, #300]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800521e:	69db      	ldr	r3, [r3, #28]
 8005220:	4a4a      	ldr	r2, [pc, #296]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005226:	61d3      	str	r3, [r2, #28]
 8005228:	4b48      	ldr	r3, [pc, #288]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800522a:	69db      	ldr	r3, [r3, #28]
 800522c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005230:	60bb      	str	r3, [r7, #8]
 8005232:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005234:	2301      	movs	r3, #1
 8005236:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800523a:	4b45      	ldr	r3, [pc, #276]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005242:	2b00      	cmp	r3, #0
 8005244:	d118      	bne.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005246:	4b42      	ldr	r3, [pc, #264]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a41      	ldr	r2, [pc, #260]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800524c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005250:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005252:	f7fc ffbf 	bl	80021d4 <HAL_GetTick>
 8005256:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005258:	e008      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800525a:	f7fc ffbb 	bl	80021d4 <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	2b64      	cmp	r3, #100	; 0x64
 8005266:	d901      	bls.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e1d6      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800526c:	4b38      	ldr	r3, [pc, #224]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005274:	2b00      	cmp	r3, #0
 8005276:	d0f0      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005278:	4b34      	ldr	r3, [pc, #208]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800527a:	6a1b      	ldr	r3, [r3, #32]
 800527c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005280:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005284:	2b00      	cmp	r3, #0
 8005286:	f000 8084 	beq.w	8005392 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005292:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005294:	429a      	cmp	r2, r3
 8005296:	d07c      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005298:	4b2c      	ldr	r3, [pc, #176]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800529a:	6a1b      	ldr	r3, [r3, #32]
 800529c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80052a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052aa:	fa93 f3a3 	rbit	r3, r3
 80052ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80052b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80052b2:	fab3 f383 	clz	r3, r3
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	461a      	mov	r2, r3
 80052ba:	4b26      	ldr	r3, [pc, #152]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80052bc:	4413      	add	r3, r2
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	461a      	mov	r2, r3
 80052c2:	2301      	movs	r3, #1
 80052c4:	6013      	str	r3, [r2, #0]
 80052c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80052ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ce:	fa93 f3a3 	rbit	r3, r3
 80052d2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80052d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80052d6:	fab3 f383 	clz	r3, r3
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	461a      	mov	r2, r3
 80052de:	4b1d      	ldr	r3, [pc, #116]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80052e0:	4413      	add	r3, r2
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	461a      	mov	r2, r3
 80052e6:	2300      	movs	r3, #0
 80052e8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80052ea:	4a18      	ldr	r2, [pc, #96]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052ee:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80052f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052f2:	f003 0301 	and.w	r3, r3, #1
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d04b      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052fa:	f7fc ff6b 	bl	80021d4 <HAL_GetTick>
 80052fe:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005300:	e00a      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005302:	f7fc ff67 	bl	80021d4 <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005310:	4293      	cmp	r3, r2
 8005312:	d901      	bls.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	e180      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005318:	2302      	movs	r3, #2
 800531a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800531c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531e:	fa93 f3a3 	rbit	r3, r3
 8005322:	627b      	str	r3, [r7, #36]	; 0x24
 8005324:	2302      	movs	r3, #2
 8005326:	623b      	str	r3, [r7, #32]
 8005328:	6a3b      	ldr	r3, [r7, #32]
 800532a:	fa93 f3a3 	rbit	r3, r3
 800532e:	61fb      	str	r3, [r7, #28]
  return result;
 8005330:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005332:	fab3 f383 	clz	r3, r3
 8005336:	b2db      	uxtb	r3, r3
 8005338:	095b      	lsrs	r3, r3, #5
 800533a:	b2db      	uxtb	r3, r3
 800533c:	f043 0302 	orr.w	r3, r3, #2
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b02      	cmp	r3, #2
 8005344:	d108      	bne.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005346:	4b01      	ldr	r3, [pc, #4]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005348:	6a1b      	ldr	r3, [r3, #32]
 800534a:	e00d      	b.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800534c:	40021000 	.word	0x40021000
 8005350:	40007000 	.word	0x40007000
 8005354:	10908100 	.word	0x10908100
 8005358:	2302      	movs	r3, #2
 800535a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	fa93 f3a3 	rbit	r3, r3
 8005362:	617b      	str	r3, [r7, #20]
 8005364:	4b9a      	ldr	r3, [pc, #616]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005368:	2202      	movs	r2, #2
 800536a:	613a      	str	r2, [r7, #16]
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	fa92 f2a2 	rbit	r2, r2
 8005372:	60fa      	str	r2, [r7, #12]
  return result;
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	fab2 f282 	clz	r2, r2
 800537a:	b2d2      	uxtb	r2, r2
 800537c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005380:	b2d2      	uxtb	r2, r2
 8005382:	f002 021f 	and.w	r2, r2, #31
 8005386:	2101      	movs	r1, #1
 8005388:	fa01 f202 	lsl.w	r2, r1, r2
 800538c:	4013      	ands	r3, r2
 800538e:	2b00      	cmp	r3, #0
 8005390:	d0b7      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005392:	4b8f      	ldr	r3, [pc, #572]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	498c      	ldr	r1, [pc, #560]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80053a0:	4313      	orrs	r3, r2
 80053a2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80053a4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d105      	bne.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053ac:	4b88      	ldr	r3, [pc, #544]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80053ae:	69db      	ldr	r3, [r3, #28]
 80053b0:	4a87      	ldr	r2, [pc, #540]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80053b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053b6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0301 	and.w	r3, r3, #1
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d008      	beq.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053c4:	4b82      	ldr	r3, [pc, #520]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80053c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c8:	f023 0203 	bic.w	r2, r3, #3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	497f      	ldr	r1, [pc, #508]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d008      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053e2:	4b7b      	ldr	r3, [pc, #492]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80053e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	4978      	ldr	r1, [pc, #480]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0304 	and.w	r3, r3, #4
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d008      	beq.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005400:	4b73      	ldr	r3, [pc, #460]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005404:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	4970      	ldr	r1, [pc, #448]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800540e:	4313      	orrs	r3, r2
 8005410:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0320 	and.w	r3, r3, #32
 800541a:	2b00      	cmp	r3, #0
 800541c:	d008      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800541e:	4b6c      	ldr	r3, [pc, #432]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005422:	f023 0210 	bic.w	r2, r3, #16
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	69db      	ldr	r3, [r3, #28]
 800542a:	4969      	ldr	r1, [pc, #420]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800542c:	4313      	orrs	r3, r2
 800542e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005438:	2b00      	cmp	r3, #0
 800543a:	d008      	beq.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800543c:	4b64      	ldr	r3, [pc, #400]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005448:	4961      	ldr	r1, [pc, #388]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800544a:	4313      	orrs	r3, r2
 800544c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005456:	2b00      	cmp	r3, #0
 8005458:	d008      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800545a:	4b5d      	ldr	r3, [pc, #372]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800545c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545e:	f023 0220 	bic.w	r2, r3, #32
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a1b      	ldr	r3, [r3, #32]
 8005466:	495a      	ldr	r1, [pc, #360]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005468:	4313      	orrs	r3, r2
 800546a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d008      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005478:	4b55      	ldr	r3, [pc, #340]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800547a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800547c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005484:	4952      	ldr	r1, [pc, #328]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005486:	4313      	orrs	r3, r2
 8005488:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0308 	and.w	r3, r3, #8
 8005492:	2b00      	cmp	r3, #0
 8005494:	d008      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005496:	4b4e      	ldr	r3, [pc, #312]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800549a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	494b      	ldr	r1, [pc, #300]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0310 	and.w	r3, r3, #16
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d008      	beq.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80054b4:	4b46      	ldr	r3, [pc, #280]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80054b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	699b      	ldr	r3, [r3, #24]
 80054c0:	4943      	ldr	r1, [pc, #268]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d008      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80054d2:	4b3f      	ldr	r3, [pc, #252]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054de:	493c      	ldr	r1, [pc, #240]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80054e0:	4313      	orrs	r3, r2
 80054e2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d008      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80054f0:	4b37      	ldr	r3, [pc, #220]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80054f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054fc:	4934      	ldr	r1, [pc, #208]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800550a:	2b00      	cmp	r3, #0
 800550c:	d008      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800550e:	4b30      	ldr	r3, [pc, #192]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005512:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800551a:	492d      	ldr	r1, [pc, #180]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800551c:	4313      	orrs	r3, r2
 800551e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005528:	2b00      	cmp	r3, #0
 800552a:	d008      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800552c:	4b28      	ldr	r3, [pc, #160]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800552e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005530:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005538:	4925      	ldr	r1, [pc, #148]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800553a:	4313      	orrs	r3, r2
 800553c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d008      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800554a:	4b21      	ldr	r3, [pc, #132]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800554c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005556:	491e      	ldr	r1, [pc, #120]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005558:	4313      	orrs	r3, r2
 800555a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005564:	2b00      	cmp	r3, #0
 8005566:	d008      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8005568:	4b19      	ldr	r3, [pc, #100]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800556a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005574:	4916      	ldr	r1, [pc, #88]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005576:	4313      	orrs	r3, r2
 8005578:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d008      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8005586:	4b12      	ldr	r3, [pc, #72]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800558a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005592:	490f      	ldr	r1, [pc, #60]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005594:	4313      	orrs	r3, r2
 8005596:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d008      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80055a4:	4b0a      	ldr	r3, [pc, #40]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80055a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055b0:	4907      	ldr	r1, [pc, #28]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00c      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80055c2:	4b03      	ldr	r3, [pc, #12]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80055c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	e002      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80055ce:	bf00      	nop
 80055d0:	40021000 	.word	0x40021000
 80055d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055d6:	4913      	ldr	r1, [pc, #76]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80055d8:	4313      	orrs	r3, r2
 80055da:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d008      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80055e8:	4b0e      	ldr	r3, [pc, #56]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80055ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055f4:	490b      	ldr	r1, [pc, #44]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d008      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8005606:	4b07      	ldr	r3, [pc, #28]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005612:	4904      	ldr	r1, [pc, #16]	; (8005624 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005614:	4313      	orrs	r3, r2
 8005616:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3748      	adds	r7, #72	; 0x48
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	40021000 	.word	0x40021000

08005628 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e049      	b.n	80056ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005640:	b2db      	uxtb	r3, r3
 8005642:	2b00      	cmp	r3, #0
 8005644:	d106      	bne.n	8005654 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f7fc fae4 	bl	8001c1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2202      	movs	r2, #2
 8005658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	3304      	adds	r3, #4
 8005664:	4619      	mov	r1, r3
 8005666:	4610      	mov	r0, r2
 8005668:	f000 fb80 	bl	8005d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3708      	adds	r7, #8
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b082      	sub	sp, #8
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d101      	bne.n	80056e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e049      	b.n	800577c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d106      	bne.n	8005702 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f000 f841 	bl	8005784 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2202      	movs	r2, #2
 8005706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	3304      	adds	r3, #4
 8005712:	4619      	mov	r1, r3
 8005714:	4610      	mov	r0, r2
 8005716:	f000 fb29 	bl	8005d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2201      	movs	r2, #1
 800572e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2201      	movs	r2, #1
 8005736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2201      	movs	r2, #1
 800573e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2201      	movs	r2, #1
 8005746:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2201      	movs	r2, #1
 800574e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2201      	movs	r2, #1
 8005756:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2201      	movs	r2, #1
 800575e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2201      	movs	r2, #1
 8005766:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2201      	movs	r2, #1
 800576e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2201      	movs	r2, #1
 8005776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3708      	adds	r7, #8
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800578c:	bf00      	nop
 800578e:	370c      	adds	r7, #12
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d109      	bne.n	80057bc <HAL_TIM_PWM_Start+0x24>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	bf14      	ite	ne
 80057b4:	2301      	movne	r3, #1
 80057b6:	2300      	moveq	r3, #0
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	e03c      	b.n	8005836 <HAL_TIM_PWM_Start+0x9e>
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	2b04      	cmp	r3, #4
 80057c0:	d109      	bne.n	80057d6 <HAL_TIM_PWM_Start+0x3e>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	bf14      	ite	ne
 80057ce:	2301      	movne	r3, #1
 80057d0:	2300      	moveq	r3, #0
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	e02f      	b.n	8005836 <HAL_TIM_PWM_Start+0x9e>
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	2b08      	cmp	r3, #8
 80057da:	d109      	bne.n	80057f0 <HAL_TIM_PWM_Start+0x58>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	bf14      	ite	ne
 80057e8:	2301      	movne	r3, #1
 80057ea:	2300      	moveq	r3, #0
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	e022      	b.n	8005836 <HAL_TIM_PWM_Start+0x9e>
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	2b0c      	cmp	r3, #12
 80057f4:	d109      	bne.n	800580a <HAL_TIM_PWM_Start+0x72>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	2b01      	cmp	r3, #1
 8005800:	bf14      	ite	ne
 8005802:	2301      	movne	r3, #1
 8005804:	2300      	moveq	r3, #0
 8005806:	b2db      	uxtb	r3, r3
 8005808:	e015      	b.n	8005836 <HAL_TIM_PWM_Start+0x9e>
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	2b10      	cmp	r3, #16
 800580e:	d109      	bne.n	8005824 <HAL_TIM_PWM_Start+0x8c>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005816:	b2db      	uxtb	r3, r3
 8005818:	2b01      	cmp	r3, #1
 800581a:	bf14      	ite	ne
 800581c:	2301      	movne	r3, #1
 800581e:	2300      	moveq	r3, #0
 8005820:	b2db      	uxtb	r3, r3
 8005822:	e008      	b.n	8005836 <HAL_TIM_PWM_Start+0x9e>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800582a:	b2db      	uxtb	r3, r3
 800582c:	2b01      	cmp	r3, #1
 800582e:	bf14      	ite	ne
 8005830:	2301      	movne	r3, #1
 8005832:	2300      	moveq	r3, #0
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b00      	cmp	r3, #0
 8005838:	d001      	beq.n	800583e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e0a1      	b.n	8005982 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d104      	bne.n	800584e <HAL_TIM_PWM_Start+0xb6>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2202      	movs	r2, #2
 8005848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800584c:	e023      	b.n	8005896 <HAL_TIM_PWM_Start+0xfe>
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	2b04      	cmp	r3, #4
 8005852:	d104      	bne.n	800585e <HAL_TIM_PWM_Start+0xc6>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2202      	movs	r2, #2
 8005858:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800585c:	e01b      	b.n	8005896 <HAL_TIM_PWM_Start+0xfe>
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	2b08      	cmp	r3, #8
 8005862:	d104      	bne.n	800586e <HAL_TIM_PWM_Start+0xd6>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2202      	movs	r2, #2
 8005868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800586c:	e013      	b.n	8005896 <HAL_TIM_PWM_Start+0xfe>
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	2b0c      	cmp	r3, #12
 8005872:	d104      	bne.n	800587e <HAL_TIM_PWM_Start+0xe6>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2202      	movs	r2, #2
 8005878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800587c:	e00b      	b.n	8005896 <HAL_TIM_PWM_Start+0xfe>
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	2b10      	cmp	r3, #16
 8005882:	d104      	bne.n	800588e <HAL_TIM_PWM_Start+0xf6>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2202      	movs	r2, #2
 8005888:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800588c:	e003      	b.n	8005896 <HAL_TIM_PWM_Start+0xfe>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2202      	movs	r2, #2
 8005892:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	2201      	movs	r2, #1
 800589c:	6839      	ldr	r1, [r7, #0]
 800589e:	4618      	mov	r0, r3
 80058a0:	f000 fea2 	bl	80065e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a38      	ldr	r2, [pc, #224]	; (800598c <HAL_TIM_PWM_Start+0x1f4>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d018      	beq.n	80058e0 <HAL_TIM_PWM_Start+0x148>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a37      	ldr	r2, [pc, #220]	; (8005990 <HAL_TIM_PWM_Start+0x1f8>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d013      	beq.n	80058e0 <HAL_TIM_PWM_Start+0x148>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a35      	ldr	r2, [pc, #212]	; (8005994 <HAL_TIM_PWM_Start+0x1fc>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d00e      	beq.n	80058e0 <HAL_TIM_PWM_Start+0x148>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a34      	ldr	r2, [pc, #208]	; (8005998 <HAL_TIM_PWM_Start+0x200>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d009      	beq.n	80058e0 <HAL_TIM_PWM_Start+0x148>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a32      	ldr	r2, [pc, #200]	; (800599c <HAL_TIM_PWM_Start+0x204>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d004      	beq.n	80058e0 <HAL_TIM_PWM_Start+0x148>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a31      	ldr	r2, [pc, #196]	; (80059a0 <HAL_TIM_PWM_Start+0x208>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d101      	bne.n	80058e4 <HAL_TIM_PWM_Start+0x14c>
 80058e0:	2301      	movs	r3, #1
 80058e2:	e000      	b.n	80058e6 <HAL_TIM_PWM_Start+0x14e>
 80058e4:	2300      	movs	r3, #0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d007      	beq.n	80058fa <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a23      	ldr	r2, [pc, #140]	; (800598c <HAL_TIM_PWM_Start+0x1f4>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d01d      	beq.n	8005940 <HAL_TIM_PWM_Start+0x1a8>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800590c:	d018      	beq.n	8005940 <HAL_TIM_PWM_Start+0x1a8>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a24      	ldr	r2, [pc, #144]	; (80059a4 <HAL_TIM_PWM_Start+0x20c>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d013      	beq.n	8005940 <HAL_TIM_PWM_Start+0x1a8>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a22      	ldr	r2, [pc, #136]	; (80059a8 <HAL_TIM_PWM_Start+0x210>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d00e      	beq.n	8005940 <HAL_TIM_PWM_Start+0x1a8>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a1a      	ldr	r2, [pc, #104]	; (8005990 <HAL_TIM_PWM_Start+0x1f8>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d009      	beq.n	8005940 <HAL_TIM_PWM_Start+0x1a8>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a18      	ldr	r2, [pc, #96]	; (8005994 <HAL_TIM_PWM_Start+0x1fc>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d004      	beq.n	8005940 <HAL_TIM_PWM_Start+0x1a8>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a19      	ldr	r2, [pc, #100]	; (80059a0 <HAL_TIM_PWM_Start+0x208>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d115      	bne.n	800596c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	689a      	ldr	r2, [r3, #8]
 8005946:	4b19      	ldr	r3, [pc, #100]	; (80059ac <HAL_TIM_PWM_Start+0x214>)
 8005948:	4013      	ands	r3, r2
 800594a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2b06      	cmp	r3, #6
 8005950:	d015      	beq.n	800597e <HAL_TIM_PWM_Start+0x1e6>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005958:	d011      	beq.n	800597e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f042 0201 	orr.w	r2, r2, #1
 8005968:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800596a:	e008      	b.n	800597e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f042 0201 	orr.w	r2, r2, #1
 800597a:	601a      	str	r2, [r3, #0]
 800597c:	e000      	b.n	8005980 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800597e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3710      	adds	r7, #16
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	40012c00 	.word	0x40012c00
 8005990:	40013400 	.word	0x40013400
 8005994:	40014000 	.word	0x40014000
 8005998:	40014400 	.word	0x40014400
 800599c:	40014800 	.word	0x40014800
 80059a0:	40015000 	.word	0x40015000
 80059a4:	40000400 	.word	0x40000400
 80059a8:	40000800 	.word	0x40000800
 80059ac:	00010007 	.word	0x00010007

080059b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b086      	sub	sp, #24
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059bc:	2300      	movs	r3, #0
 80059be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d101      	bne.n	80059ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80059ca:	2302      	movs	r3, #2
 80059cc:	e0ff      	b.n	8005bce <HAL_TIM_PWM_ConfigChannel+0x21e>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2b14      	cmp	r3, #20
 80059da:	f200 80f0 	bhi.w	8005bbe <HAL_TIM_PWM_ConfigChannel+0x20e>
 80059de:	a201      	add	r2, pc, #4	; (adr r2, 80059e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80059e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e4:	08005a39 	.word	0x08005a39
 80059e8:	08005bbf 	.word	0x08005bbf
 80059ec:	08005bbf 	.word	0x08005bbf
 80059f0:	08005bbf 	.word	0x08005bbf
 80059f4:	08005a79 	.word	0x08005a79
 80059f8:	08005bbf 	.word	0x08005bbf
 80059fc:	08005bbf 	.word	0x08005bbf
 8005a00:	08005bbf 	.word	0x08005bbf
 8005a04:	08005abb 	.word	0x08005abb
 8005a08:	08005bbf 	.word	0x08005bbf
 8005a0c:	08005bbf 	.word	0x08005bbf
 8005a10:	08005bbf 	.word	0x08005bbf
 8005a14:	08005afb 	.word	0x08005afb
 8005a18:	08005bbf 	.word	0x08005bbf
 8005a1c:	08005bbf 	.word	0x08005bbf
 8005a20:	08005bbf 	.word	0x08005bbf
 8005a24:	08005b3d 	.word	0x08005b3d
 8005a28:	08005bbf 	.word	0x08005bbf
 8005a2c:	08005bbf 	.word	0x08005bbf
 8005a30:	08005bbf 	.word	0x08005bbf
 8005a34:	08005b7d 	.word	0x08005b7d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68b9      	ldr	r1, [r7, #8]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f000 fa32 	bl	8005ea8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	699a      	ldr	r2, [r3, #24]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f042 0208 	orr.w	r2, r2, #8
 8005a52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	699a      	ldr	r2, [r3, #24]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f022 0204 	bic.w	r2, r2, #4
 8005a62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	6999      	ldr	r1, [r3, #24]
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	691a      	ldr	r2, [r3, #16]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	430a      	orrs	r2, r1
 8005a74:	619a      	str	r2, [r3, #24]
      break;
 8005a76:	e0a5      	b.n	8005bc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68b9      	ldr	r1, [r7, #8]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f000 faac 	bl	8005fdc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	699a      	ldr	r2, [r3, #24]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	699a      	ldr	r2, [r3, #24]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005aa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	6999      	ldr	r1, [r3, #24]
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	021a      	lsls	r2, r3, #8
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	430a      	orrs	r2, r1
 8005ab6:	619a      	str	r2, [r3, #24]
      break;
 8005ab8:	e084      	b.n	8005bc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68b9      	ldr	r1, [r7, #8]
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f000 fb1f 	bl	8006104 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	69da      	ldr	r2, [r3, #28]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f042 0208 	orr.w	r2, r2, #8
 8005ad4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	69da      	ldr	r2, [r3, #28]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f022 0204 	bic.w	r2, r2, #4
 8005ae4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	69d9      	ldr	r1, [r3, #28]
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	691a      	ldr	r2, [r3, #16]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	430a      	orrs	r2, r1
 8005af6:	61da      	str	r2, [r3, #28]
      break;
 8005af8:	e064      	b.n	8005bc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68b9      	ldr	r1, [r7, #8]
 8005b00:	4618      	mov	r0, r3
 8005b02:	f000 fb91 	bl	8006228 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	69da      	ldr	r2, [r3, #28]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	69da      	ldr	r2, [r3, #28]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	69d9      	ldr	r1, [r3, #28]
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	021a      	lsls	r2, r3, #8
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	430a      	orrs	r2, r1
 8005b38:	61da      	str	r2, [r3, #28]
      break;
 8005b3a:	e043      	b.n	8005bc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68b9      	ldr	r1, [r7, #8]
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 fbe0 	bl	8006308 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f042 0208 	orr.w	r2, r2, #8
 8005b56:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f022 0204 	bic.w	r2, r2, #4
 8005b66:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	691a      	ldr	r2, [r3, #16]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	430a      	orrs	r2, r1
 8005b78:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005b7a:	e023      	b.n	8005bc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68b9      	ldr	r1, [r7, #8]
 8005b82:	4618      	mov	r0, r3
 8005b84:	f000 fc2a 	bl	80063dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b96:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ba6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	021a      	lsls	r2, r3, #8
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005bbc:	e002      	b.n	8005bc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	75fb      	strb	r3, [r7, #23]
      break;
 8005bc2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005bcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3718      	adds	r7, #24
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop

08005bd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005be2:	2300      	movs	r3, #0
 8005be4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d101      	bne.n	8005bf4 <HAL_TIM_ConfigClockSource+0x1c>
 8005bf0:	2302      	movs	r3, #2
 8005bf2:	e0b6      	b.n	8005d62 <HAL_TIM_ConfigClockSource+0x18a>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2202      	movs	r2, #2
 8005c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68ba      	ldr	r2, [r7, #8]
 8005c26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c30:	d03e      	beq.n	8005cb0 <HAL_TIM_ConfigClockSource+0xd8>
 8005c32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c36:	f200 8087 	bhi.w	8005d48 <HAL_TIM_ConfigClockSource+0x170>
 8005c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c3e:	f000 8086 	beq.w	8005d4e <HAL_TIM_ConfigClockSource+0x176>
 8005c42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c46:	d87f      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x170>
 8005c48:	2b70      	cmp	r3, #112	; 0x70
 8005c4a:	d01a      	beq.n	8005c82 <HAL_TIM_ConfigClockSource+0xaa>
 8005c4c:	2b70      	cmp	r3, #112	; 0x70
 8005c4e:	d87b      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x170>
 8005c50:	2b60      	cmp	r3, #96	; 0x60
 8005c52:	d050      	beq.n	8005cf6 <HAL_TIM_ConfigClockSource+0x11e>
 8005c54:	2b60      	cmp	r3, #96	; 0x60
 8005c56:	d877      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x170>
 8005c58:	2b50      	cmp	r3, #80	; 0x50
 8005c5a:	d03c      	beq.n	8005cd6 <HAL_TIM_ConfigClockSource+0xfe>
 8005c5c:	2b50      	cmp	r3, #80	; 0x50
 8005c5e:	d873      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x170>
 8005c60:	2b40      	cmp	r3, #64	; 0x40
 8005c62:	d058      	beq.n	8005d16 <HAL_TIM_ConfigClockSource+0x13e>
 8005c64:	2b40      	cmp	r3, #64	; 0x40
 8005c66:	d86f      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x170>
 8005c68:	2b30      	cmp	r3, #48	; 0x30
 8005c6a:	d064      	beq.n	8005d36 <HAL_TIM_ConfigClockSource+0x15e>
 8005c6c:	2b30      	cmp	r3, #48	; 0x30
 8005c6e:	d86b      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x170>
 8005c70:	2b20      	cmp	r3, #32
 8005c72:	d060      	beq.n	8005d36 <HAL_TIM_ConfigClockSource+0x15e>
 8005c74:	2b20      	cmp	r3, #32
 8005c76:	d867      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x170>
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d05c      	beq.n	8005d36 <HAL_TIM_ConfigClockSource+0x15e>
 8005c7c:	2b10      	cmp	r3, #16
 8005c7e:	d05a      	beq.n	8005d36 <HAL_TIM_ConfigClockSource+0x15e>
 8005c80:	e062      	b.n	8005d48 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6818      	ldr	r0, [r3, #0]
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	6899      	ldr	r1, [r3, #8]
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	685a      	ldr	r2, [r3, #4]
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	f000 fc89 	bl	80065a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ca4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68ba      	ldr	r2, [r7, #8]
 8005cac:	609a      	str	r2, [r3, #8]
      break;
 8005cae:	e04f      	b.n	8005d50 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6818      	ldr	r0, [r3, #0]
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	6899      	ldr	r1, [r3, #8]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	f000 fc72 	bl	80065a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	689a      	ldr	r2, [r3, #8]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cd2:	609a      	str	r2, [r3, #8]
      break;
 8005cd4:	e03c      	b.n	8005d50 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6818      	ldr	r0, [r3, #0]
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	6859      	ldr	r1, [r3, #4]
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	f000 fbe6 	bl	80064b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2150      	movs	r1, #80	; 0x50
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f000 fc3f 	bl	8006572 <TIM_ITRx_SetConfig>
      break;
 8005cf4:	e02c      	b.n	8005d50 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6818      	ldr	r0, [r3, #0]
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	6859      	ldr	r1, [r3, #4]
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	461a      	mov	r2, r3
 8005d04:	f000 fc05 	bl	8006512 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2160      	movs	r1, #96	; 0x60
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f000 fc2f 	bl	8006572 <TIM_ITRx_SetConfig>
      break;
 8005d14:	e01c      	b.n	8005d50 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6818      	ldr	r0, [r3, #0]
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	6859      	ldr	r1, [r3, #4]
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	461a      	mov	r2, r3
 8005d24:	f000 fbc6 	bl	80064b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2140      	movs	r1, #64	; 0x40
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f000 fc1f 	bl	8006572 <TIM_ITRx_SetConfig>
      break;
 8005d34:	e00c      	b.n	8005d50 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4619      	mov	r1, r3
 8005d40:	4610      	mov	r0, r2
 8005d42:	f000 fc16 	bl	8006572 <TIM_ITRx_SetConfig>
      break;
 8005d46:	e003      	b.n	8005d50 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	73fb      	strb	r3, [r7, #15]
      break;
 8005d4c:	e000      	b.n	8005d50 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005d4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
	...

08005d6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a42      	ldr	r2, [pc, #264]	; (8005e88 <TIM_Base_SetConfig+0x11c>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d013      	beq.n	8005dac <TIM_Base_SetConfig+0x40>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d8a:	d00f      	beq.n	8005dac <TIM_Base_SetConfig+0x40>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a3f      	ldr	r2, [pc, #252]	; (8005e8c <TIM_Base_SetConfig+0x120>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d00b      	beq.n	8005dac <TIM_Base_SetConfig+0x40>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a3e      	ldr	r2, [pc, #248]	; (8005e90 <TIM_Base_SetConfig+0x124>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d007      	beq.n	8005dac <TIM_Base_SetConfig+0x40>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a3d      	ldr	r2, [pc, #244]	; (8005e94 <TIM_Base_SetConfig+0x128>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d003      	beq.n	8005dac <TIM_Base_SetConfig+0x40>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a3c      	ldr	r2, [pc, #240]	; (8005e98 <TIM_Base_SetConfig+0x12c>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d108      	bne.n	8005dbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005db2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a31      	ldr	r2, [pc, #196]	; (8005e88 <TIM_Base_SetConfig+0x11c>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d01f      	beq.n	8005e06 <TIM_Base_SetConfig+0x9a>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dcc:	d01b      	beq.n	8005e06 <TIM_Base_SetConfig+0x9a>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a2e      	ldr	r2, [pc, #184]	; (8005e8c <TIM_Base_SetConfig+0x120>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d017      	beq.n	8005e06 <TIM_Base_SetConfig+0x9a>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a2d      	ldr	r2, [pc, #180]	; (8005e90 <TIM_Base_SetConfig+0x124>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d013      	beq.n	8005e06 <TIM_Base_SetConfig+0x9a>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a2c      	ldr	r2, [pc, #176]	; (8005e94 <TIM_Base_SetConfig+0x128>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d00f      	beq.n	8005e06 <TIM_Base_SetConfig+0x9a>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a2c      	ldr	r2, [pc, #176]	; (8005e9c <TIM_Base_SetConfig+0x130>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d00b      	beq.n	8005e06 <TIM_Base_SetConfig+0x9a>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a2b      	ldr	r2, [pc, #172]	; (8005ea0 <TIM_Base_SetConfig+0x134>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d007      	beq.n	8005e06 <TIM_Base_SetConfig+0x9a>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a2a      	ldr	r2, [pc, #168]	; (8005ea4 <TIM_Base_SetConfig+0x138>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d003      	beq.n	8005e06 <TIM_Base_SetConfig+0x9a>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a25      	ldr	r2, [pc, #148]	; (8005e98 <TIM_Base_SetConfig+0x12c>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d108      	bne.n	8005e18 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	695b      	ldr	r3, [r3, #20]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	689a      	ldr	r2, [r3, #8]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a12      	ldr	r2, [pc, #72]	; (8005e88 <TIM_Base_SetConfig+0x11c>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d013      	beq.n	8005e6c <TIM_Base_SetConfig+0x100>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a13      	ldr	r2, [pc, #76]	; (8005e94 <TIM_Base_SetConfig+0x128>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d00f      	beq.n	8005e6c <TIM_Base_SetConfig+0x100>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4a13      	ldr	r2, [pc, #76]	; (8005e9c <TIM_Base_SetConfig+0x130>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d00b      	beq.n	8005e6c <TIM_Base_SetConfig+0x100>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a12      	ldr	r2, [pc, #72]	; (8005ea0 <TIM_Base_SetConfig+0x134>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d007      	beq.n	8005e6c <TIM_Base_SetConfig+0x100>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a11      	ldr	r2, [pc, #68]	; (8005ea4 <TIM_Base_SetConfig+0x138>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d003      	beq.n	8005e6c <TIM_Base_SetConfig+0x100>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4a0c      	ldr	r2, [pc, #48]	; (8005e98 <TIM_Base_SetConfig+0x12c>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d103      	bne.n	8005e74 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	691a      	ldr	r2, [r3, #16]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	615a      	str	r2, [r3, #20]
}
 8005e7a:	bf00      	nop
 8005e7c:	3714      	adds	r7, #20
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	40012c00 	.word	0x40012c00
 8005e8c:	40000400 	.word	0x40000400
 8005e90:	40000800 	.word	0x40000800
 8005e94:	40013400 	.word	0x40013400
 8005e98:	40015000 	.word	0x40015000
 8005e9c:	40014000 	.word	0x40014000
 8005ea0:	40014400 	.word	0x40014400
 8005ea4:	40014800 	.word	0x40014800

08005ea8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b087      	sub	sp, #28
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a1b      	ldr	r3, [r3, #32]
 8005eb6:	f023 0201 	bic.w	r2, r3, #1
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	699b      	ldr	r3, [r3, #24]
 8005ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f023 0303 	bic.w	r3, r3, #3
 8005ee2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	f023 0302 	bic.w	r3, r3, #2
 8005ef4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	697a      	ldr	r2, [r7, #20]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a30      	ldr	r2, [pc, #192]	; (8005fc4 <TIM_OC1_SetConfig+0x11c>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d013      	beq.n	8005f30 <TIM_OC1_SetConfig+0x88>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a2f      	ldr	r2, [pc, #188]	; (8005fc8 <TIM_OC1_SetConfig+0x120>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d00f      	beq.n	8005f30 <TIM_OC1_SetConfig+0x88>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a2e      	ldr	r2, [pc, #184]	; (8005fcc <TIM_OC1_SetConfig+0x124>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d00b      	beq.n	8005f30 <TIM_OC1_SetConfig+0x88>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a2d      	ldr	r2, [pc, #180]	; (8005fd0 <TIM_OC1_SetConfig+0x128>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d007      	beq.n	8005f30 <TIM_OC1_SetConfig+0x88>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a2c      	ldr	r2, [pc, #176]	; (8005fd4 <TIM_OC1_SetConfig+0x12c>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d003      	beq.n	8005f30 <TIM_OC1_SetConfig+0x88>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a2b      	ldr	r2, [pc, #172]	; (8005fd8 <TIM_OC1_SetConfig+0x130>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d10c      	bne.n	8005f4a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	f023 0308 	bic.w	r3, r3, #8
 8005f36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	697a      	ldr	r2, [r7, #20]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	f023 0304 	bic.w	r3, r3, #4
 8005f48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4a1d      	ldr	r2, [pc, #116]	; (8005fc4 <TIM_OC1_SetConfig+0x11c>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d013      	beq.n	8005f7a <TIM_OC1_SetConfig+0xd2>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a1c      	ldr	r2, [pc, #112]	; (8005fc8 <TIM_OC1_SetConfig+0x120>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d00f      	beq.n	8005f7a <TIM_OC1_SetConfig+0xd2>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a1b      	ldr	r2, [pc, #108]	; (8005fcc <TIM_OC1_SetConfig+0x124>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d00b      	beq.n	8005f7a <TIM_OC1_SetConfig+0xd2>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a1a      	ldr	r2, [pc, #104]	; (8005fd0 <TIM_OC1_SetConfig+0x128>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d007      	beq.n	8005f7a <TIM_OC1_SetConfig+0xd2>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a19      	ldr	r2, [pc, #100]	; (8005fd4 <TIM_OC1_SetConfig+0x12c>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d003      	beq.n	8005f7a <TIM_OC1_SetConfig+0xd2>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a18      	ldr	r2, [pc, #96]	; (8005fd8 <TIM_OC1_SetConfig+0x130>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d111      	bne.n	8005f9e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	695b      	ldr	r3, [r3, #20]
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	699b      	ldr	r3, [r3, #24]
 8005f98:	693a      	ldr	r2, [r7, #16]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	693a      	ldr	r2, [r7, #16]
 8005fa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	685a      	ldr	r2, [r3, #4]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	697a      	ldr	r2, [r7, #20]
 8005fb6:	621a      	str	r2, [r3, #32]
}
 8005fb8:	bf00      	nop
 8005fba:	371c      	adds	r7, #28
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr
 8005fc4:	40012c00 	.word	0x40012c00
 8005fc8:	40013400 	.word	0x40013400
 8005fcc:	40014000 	.word	0x40014000
 8005fd0:	40014400 	.word	0x40014400
 8005fd4:	40014800 	.word	0x40014800
 8005fd8:	40015000 	.word	0x40015000

08005fdc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b087      	sub	sp, #28
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a1b      	ldr	r3, [r3, #32]
 8005fea:	f023 0210 	bic.w	r2, r3, #16
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	699b      	ldr	r3, [r3, #24]
 8006002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800600a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800600e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006016:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	021b      	lsls	r3, r3, #8
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	4313      	orrs	r3, r2
 8006022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	f023 0320 	bic.w	r3, r3, #32
 800602a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	011b      	lsls	r3, r3, #4
 8006032:	697a      	ldr	r2, [r7, #20]
 8006034:	4313      	orrs	r3, r2
 8006036:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4a2c      	ldr	r2, [pc, #176]	; (80060ec <TIM_OC2_SetConfig+0x110>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d007      	beq.n	8006050 <TIM_OC2_SetConfig+0x74>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a2b      	ldr	r2, [pc, #172]	; (80060f0 <TIM_OC2_SetConfig+0x114>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d003      	beq.n	8006050 <TIM_OC2_SetConfig+0x74>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a2a      	ldr	r2, [pc, #168]	; (80060f4 <TIM_OC2_SetConfig+0x118>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d10d      	bne.n	800606c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006056:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	011b      	lsls	r3, r3, #4
 800605e:	697a      	ldr	r2, [r7, #20]
 8006060:	4313      	orrs	r3, r2
 8006062:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800606a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a1f      	ldr	r2, [pc, #124]	; (80060ec <TIM_OC2_SetConfig+0x110>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d013      	beq.n	800609c <TIM_OC2_SetConfig+0xc0>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a1e      	ldr	r2, [pc, #120]	; (80060f0 <TIM_OC2_SetConfig+0x114>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d00f      	beq.n	800609c <TIM_OC2_SetConfig+0xc0>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a1e      	ldr	r2, [pc, #120]	; (80060f8 <TIM_OC2_SetConfig+0x11c>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d00b      	beq.n	800609c <TIM_OC2_SetConfig+0xc0>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a1d      	ldr	r2, [pc, #116]	; (80060fc <TIM_OC2_SetConfig+0x120>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d007      	beq.n	800609c <TIM_OC2_SetConfig+0xc0>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a1c      	ldr	r2, [pc, #112]	; (8006100 <TIM_OC2_SetConfig+0x124>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d003      	beq.n	800609c <TIM_OC2_SetConfig+0xc0>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a17      	ldr	r2, [pc, #92]	; (80060f4 <TIM_OC2_SetConfig+0x118>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d113      	bne.n	80060c4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060a2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060aa:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	695b      	ldr	r3, [r3, #20]
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	693a      	ldr	r2, [r7, #16]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	699b      	ldr	r3, [r3, #24]
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	693a      	ldr	r2, [r7, #16]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	693a      	ldr	r2, [r7, #16]
 80060c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	685a      	ldr	r2, [r3, #4]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	697a      	ldr	r2, [r7, #20]
 80060dc:	621a      	str	r2, [r3, #32]
}
 80060de:	bf00      	nop
 80060e0:	371c      	adds	r7, #28
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop
 80060ec:	40012c00 	.word	0x40012c00
 80060f0:	40013400 	.word	0x40013400
 80060f4:	40015000 	.word	0x40015000
 80060f8:	40014000 	.word	0x40014000
 80060fc:	40014400 	.word	0x40014400
 8006100:	40014800 	.word	0x40014800

08006104 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006104:	b480      	push	{r7}
 8006106:	b087      	sub	sp, #28
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a1b      	ldr	r3, [r3, #32]
 8006112:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a1b      	ldr	r3, [r3, #32]
 800611e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	69db      	ldr	r3, [r3, #28]
 800612a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f023 0303 	bic.w	r3, r3, #3
 800613e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	4313      	orrs	r3, r2
 8006148:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006150:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	021b      	lsls	r3, r3, #8
 8006158:	697a      	ldr	r2, [r7, #20]
 800615a:	4313      	orrs	r3, r2
 800615c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a2b      	ldr	r2, [pc, #172]	; (8006210 <TIM_OC3_SetConfig+0x10c>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d007      	beq.n	8006176 <TIM_OC3_SetConfig+0x72>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a2a      	ldr	r2, [pc, #168]	; (8006214 <TIM_OC3_SetConfig+0x110>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d003      	beq.n	8006176 <TIM_OC3_SetConfig+0x72>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a29      	ldr	r2, [pc, #164]	; (8006218 <TIM_OC3_SetConfig+0x114>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d10d      	bne.n	8006192 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800617c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	021b      	lsls	r3, r3, #8
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	4313      	orrs	r3, r2
 8006188:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006190:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a1e      	ldr	r2, [pc, #120]	; (8006210 <TIM_OC3_SetConfig+0x10c>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d013      	beq.n	80061c2 <TIM_OC3_SetConfig+0xbe>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a1d      	ldr	r2, [pc, #116]	; (8006214 <TIM_OC3_SetConfig+0x110>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d00f      	beq.n	80061c2 <TIM_OC3_SetConfig+0xbe>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a1d      	ldr	r2, [pc, #116]	; (800621c <TIM_OC3_SetConfig+0x118>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d00b      	beq.n	80061c2 <TIM_OC3_SetConfig+0xbe>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a1c      	ldr	r2, [pc, #112]	; (8006220 <TIM_OC3_SetConfig+0x11c>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d007      	beq.n	80061c2 <TIM_OC3_SetConfig+0xbe>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a1b      	ldr	r2, [pc, #108]	; (8006224 <TIM_OC3_SetConfig+0x120>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d003      	beq.n	80061c2 <TIM_OC3_SetConfig+0xbe>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a16      	ldr	r2, [pc, #88]	; (8006218 <TIM_OC3_SetConfig+0x114>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d113      	bne.n	80061ea <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	011b      	lsls	r3, r3, #4
 80061d8:	693a      	ldr	r2, [r7, #16]
 80061da:	4313      	orrs	r3, r2
 80061dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	699b      	ldr	r3, [r3, #24]
 80061e2:	011b      	lsls	r3, r3, #4
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	685a      	ldr	r2, [r3, #4]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	621a      	str	r2, [r3, #32]
}
 8006204:	bf00      	nop
 8006206:	371c      	adds	r7, #28
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr
 8006210:	40012c00 	.word	0x40012c00
 8006214:	40013400 	.word	0x40013400
 8006218:	40015000 	.word	0x40015000
 800621c:	40014000 	.word	0x40014000
 8006220:	40014400 	.word	0x40014400
 8006224:	40014800 	.word	0x40014800

08006228 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006228:	b480      	push	{r7}
 800622a:	b087      	sub	sp, #28
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a1b      	ldr	r3, [r3, #32]
 8006242:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	69db      	ldr	r3, [r3, #28]
 800624e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800625a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006262:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	021b      	lsls	r3, r3, #8
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	4313      	orrs	r3, r2
 800626e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006276:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	031b      	lsls	r3, r3, #12
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	4313      	orrs	r3, r2
 8006282:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a1a      	ldr	r2, [pc, #104]	; (80062f0 <TIM_OC4_SetConfig+0xc8>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d013      	beq.n	80062b4 <TIM_OC4_SetConfig+0x8c>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a19      	ldr	r2, [pc, #100]	; (80062f4 <TIM_OC4_SetConfig+0xcc>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d00f      	beq.n	80062b4 <TIM_OC4_SetConfig+0x8c>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a18      	ldr	r2, [pc, #96]	; (80062f8 <TIM_OC4_SetConfig+0xd0>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d00b      	beq.n	80062b4 <TIM_OC4_SetConfig+0x8c>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a17      	ldr	r2, [pc, #92]	; (80062fc <TIM_OC4_SetConfig+0xd4>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d007      	beq.n	80062b4 <TIM_OC4_SetConfig+0x8c>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a16      	ldr	r2, [pc, #88]	; (8006300 <TIM_OC4_SetConfig+0xd8>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d003      	beq.n	80062b4 <TIM_OC4_SetConfig+0x8c>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a15      	ldr	r2, [pc, #84]	; (8006304 <TIM_OC4_SetConfig+0xdc>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d109      	bne.n	80062c8 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	695b      	ldr	r3, [r3, #20]
 80062c0:	019b      	lsls	r3, r3, #6
 80062c2:	697a      	ldr	r2, [r7, #20]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	697a      	ldr	r2, [r7, #20]
 80062cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	685a      	ldr	r2, [r3, #4]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	693a      	ldr	r2, [r7, #16]
 80062e0:	621a      	str	r2, [r3, #32]
}
 80062e2:	bf00      	nop
 80062e4:	371c      	adds	r7, #28
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	40012c00 	.word	0x40012c00
 80062f4:	40013400 	.word	0x40013400
 80062f8:	40014000 	.word	0x40014000
 80062fc:	40014400 	.word	0x40014400
 8006300:	40014800 	.word	0x40014800
 8006304:	40015000 	.word	0x40015000

08006308 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006308:	b480      	push	{r7}
 800630a:	b087      	sub	sp, #28
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a1b      	ldr	r3, [r3, #32]
 8006322:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800632e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800633a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	4313      	orrs	r3, r2
 8006344:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800634c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	041b      	lsls	r3, r3, #16
 8006354:	693a      	ldr	r2, [r7, #16]
 8006356:	4313      	orrs	r3, r2
 8006358:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a19      	ldr	r2, [pc, #100]	; (80063c4 <TIM_OC5_SetConfig+0xbc>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d013      	beq.n	800638a <TIM_OC5_SetConfig+0x82>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a18      	ldr	r2, [pc, #96]	; (80063c8 <TIM_OC5_SetConfig+0xc0>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d00f      	beq.n	800638a <TIM_OC5_SetConfig+0x82>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a17      	ldr	r2, [pc, #92]	; (80063cc <TIM_OC5_SetConfig+0xc4>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d00b      	beq.n	800638a <TIM_OC5_SetConfig+0x82>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a16      	ldr	r2, [pc, #88]	; (80063d0 <TIM_OC5_SetConfig+0xc8>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d007      	beq.n	800638a <TIM_OC5_SetConfig+0x82>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a15      	ldr	r2, [pc, #84]	; (80063d4 <TIM_OC5_SetConfig+0xcc>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d003      	beq.n	800638a <TIM_OC5_SetConfig+0x82>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a14      	ldr	r2, [pc, #80]	; (80063d8 <TIM_OC5_SetConfig+0xd0>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d109      	bne.n	800639e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006390:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	695b      	ldr	r3, [r3, #20]
 8006396:	021b      	lsls	r3, r3, #8
 8006398:	697a      	ldr	r2, [r7, #20]
 800639a:	4313      	orrs	r3, r2
 800639c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	697a      	ldr	r2, [r7, #20]
 80063a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	685a      	ldr	r2, [r3, #4]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	693a      	ldr	r2, [r7, #16]
 80063b6:	621a      	str	r2, [r3, #32]
}
 80063b8:	bf00      	nop
 80063ba:	371c      	adds	r7, #28
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr
 80063c4:	40012c00 	.word	0x40012c00
 80063c8:	40013400 	.word	0x40013400
 80063cc:	40014000 	.word	0x40014000
 80063d0:	40014400 	.word	0x40014400
 80063d4:	40014800 	.word	0x40014800
 80063d8:	40015000 	.word	0x40015000

080063dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80063dc:	b480      	push	{r7}
 80063de:	b087      	sub	sp, #28
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a1b      	ldr	r3, [r3, #32]
 80063f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800640a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800640e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	021b      	lsls	r3, r3, #8
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	4313      	orrs	r3, r2
 800641a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006422:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	051b      	lsls	r3, r3, #20
 800642a:	693a      	ldr	r2, [r7, #16]
 800642c:	4313      	orrs	r3, r2
 800642e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a1a      	ldr	r2, [pc, #104]	; (800649c <TIM_OC6_SetConfig+0xc0>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d013      	beq.n	8006460 <TIM_OC6_SetConfig+0x84>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	4a19      	ldr	r2, [pc, #100]	; (80064a0 <TIM_OC6_SetConfig+0xc4>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d00f      	beq.n	8006460 <TIM_OC6_SetConfig+0x84>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4a18      	ldr	r2, [pc, #96]	; (80064a4 <TIM_OC6_SetConfig+0xc8>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d00b      	beq.n	8006460 <TIM_OC6_SetConfig+0x84>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a17      	ldr	r2, [pc, #92]	; (80064a8 <TIM_OC6_SetConfig+0xcc>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d007      	beq.n	8006460 <TIM_OC6_SetConfig+0x84>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4a16      	ldr	r2, [pc, #88]	; (80064ac <TIM_OC6_SetConfig+0xd0>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d003      	beq.n	8006460 <TIM_OC6_SetConfig+0x84>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a15      	ldr	r2, [pc, #84]	; (80064b0 <TIM_OC6_SetConfig+0xd4>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d109      	bne.n	8006474 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006466:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	695b      	ldr	r3, [r3, #20]
 800646c:	029b      	lsls	r3, r3, #10
 800646e:	697a      	ldr	r2, [r7, #20]
 8006470:	4313      	orrs	r3, r2
 8006472:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	697a      	ldr	r2, [r7, #20]
 8006478:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	685a      	ldr	r2, [r3, #4]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	693a      	ldr	r2, [r7, #16]
 800648c:	621a      	str	r2, [r3, #32]
}
 800648e:	bf00      	nop
 8006490:	371c      	adds	r7, #28
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr
 800649a:	bf00      	nop
 800649c:	40012c00 	.word	0x40012c00
 80064a0:	40013400 	.word	0x40013400
 80064a4:	40014000 	.word	0x40014000
 80064a8:	40014400 	.word	0x40014400
 80064ac:	40014800 	.word	0x40014800
 80064b0:	40015000 	.word	0x40015000

080064b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b087      	sub	sp, #28
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6a1b      	ldr	r3, [r3, #32]
 80064c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6a1b      	ldr	r3, [r3, #32]
 80064ca:	f023 0201 	bic.w	r2, r3, #1
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	699b      	ldr	r3, [r3, #24]
 80064d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	011b      	lsls	r3, r3, #4
 80064e4:	693a      	ldr	r2, [r7, #16]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	f023 030a 	bic.w	r3, r3, #10
 80064f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064f2:	697a      	ldr	r2, [r7, #20]
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	693a      	ldr	r2, [r7, #16]
 80064fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	697a      	ldr	r2, [r7, #20]
 8006504:	621a      	str	r2, [r3, #32]
}
 8006506:	bf00      	nop
 8006508:	371c      	adds	r7, #28
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr

08006512 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006512:	b480      	push	{r7}
 8006514:	b087      	sub	sp, #28
 8006516:	af00      	add	r7, sp, #0
 8006518:	60f8      	str	r0, [r7, #12]
 800651a:	60b9      	str	r1, [r7, #8]
 800651c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6a1b      	ldr	r3, [r3, #32]
 8006522:	f023 0210 	bic.w	r2, r3, #16
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	699b      	ldr	r3, [r3, #24]
 800652e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6a1b      	ldr	r3, [r3, #32]
 8006534:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800653c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	031b      	lsls	r3, r3, #12
 8006542:	697a      	ldr	r2, [r7, #20]
 8006544:	4313      	orrs	r3, r2
 8006546:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800654e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	011b      	lsls	r3, r3, #4
 8006554:	693a      	ldr	r2, [r7, #16]
 8006556:	4313      	orrs	r3, r2
 8006558:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	697a      	ldr	r2, [r7, #20]
 800655e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	693a      	ldr	r2, [r7, #16]
 8006564:	621a      	str	r2, [r3, #32]
}
 8006566:	bf00      	nop
 8006568:	371c      	adds	r7, #28
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr

08006572 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006572:	b480      	push	{r7}
 8006574:	b085      	sub	sp, #20
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
 800657a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006588:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800658a:	683a      	ldr	r2, [r7, #0]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	4313      	orrs	r3, r2
 8006590:	f043 0307 	orr.w	r3, r3, #7
 8006594:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	609a      	str	r2, [r3, #8]
}
 800659c:	bf00      	nop
 800659e:	3714      	adds	r7, #20
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b087      	sub	sp, #28
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	60b9      	str	r1, [r7, #8]
 80065b2:	607a      	str	r2, [r7, #4]
 80065b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	021a      	lsls	r2, r3, #8
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	431a      	orrs	r2, r3
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	697a      	ldr	r2, [r7, #20]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	697a      	ldr	r2, [r7, #20]
 80065da:	609a      	str	r2, [r3, #8]
}
 80065dc:	bf00      	nop
 80065de:	371c      	adds	r7, #28
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr

080065e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b087      	sub	sp, #28
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	f003 031f 	and.w	r3, r3, #31
 80065fa:	2201      	movs	r2, #1
 80065fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006600:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6a1a      	ldr	r2, [r3, #32]
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	43db      	mvns	r3, r3
 800660a:	401a      	ands	r2, r3
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6a1a      	ldr	r2, [r3, #32]
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	f003 031f 	and.w	r3, r3, #31
 800661a:	6879      	ldr	r1, [r7, #4]
 800661c:	fa01 f303 	lsl.w	r3, r1, r3
 8006620:	431a      	orrs	r2, r3
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	621a      	str	r2, [r3, #32]
}
 8006626:	bf00      	nop
 8006628:	371c      	adds	r7, #28
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr
	...

08006634 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006634:	b480      	push	{r7}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006644:	2b01      	cmp	r3, #1
 8006646:	d101      	bne.n	800664c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006648:	2302      	movs	r3, #2
 800664a:	e06d      	b.n	8006728 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2202      	movs	r2, #2
 8006658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a30      	ldr	r2, [pc, #192]	; (8006734 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d009      	beq.n	800668a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a2f      	ldr	r2, [pc, #188]	; (8006738 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d004      	beq.n	800668a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a2d      	ldr	r2, [pc, #180]	; (800673c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d108      	bne.n	800669c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006690:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	68fa      	ldr	r2, [r7, #12]
 8006698:	4313      	orrs	r3, r2
 800669a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a1e      	ldr	r2, [pc, #120]	; (8006734 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d01d      	beq.n	80066fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066c8:	d018      	beq.n	80066fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a1c      	ldr	r2, [pc, #112]	; (8006740 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d013      	beq.n	80066fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a1a      	ldr	r2, [pc, #104]	; (8006744 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d00e      	beq.n	80066fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a15      	ldr	r2, [pc, #84]	; (8006738 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d009      	beq.n	80066fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a16      	ldr	r2, [pc, #88]	; (8006748 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d004      	beq.n	80066fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a11      	ldr	r2, [pc, #68]	; (800673c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d10c      	bne.n	8006716 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006702:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	68ba      	ldr	r2, [r7, #8]
 800670a:	4313      	orrs	r3, r2
 800670c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68ba      	ldr	r2, [r7, #8]
 8006714:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2201      	movs	r2, #1
 800671a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	3714      	adds	r7, #20
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr
 8006734:	40012c00 	.word	0x40012c00
 8006738:	40013400 	.word	0x40013400
 800673c:	40015000 	.word	0x40015000
 8006740:	40000400 	.word	0x40000400
 8006744:	40000800 	.word	0x40000800
 8006748:	40014000 	.word	0x40014000

0800674c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d101      	bne.n	800675e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e040      	b.n	80067e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006762:	2b00      	cmp	r3, #0
 8006764:	d106      	bne.n	8006774 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f7fb fb38 	bl	8001de4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2224      	movs	r2, #36	; 0x24
 8006778:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f022 0201 	bic.w	r2, r2, #1
 8006788:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 fc5e 	bl	800704c <UART_SetConfig>
 8006790:	4603      	mov	r3, r0
 8006792:	2b01      	cmp	r3, #1
 8006794:	d101      	bne.n	800679a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e022      	b.n	80067e0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d002      	beq.n	80067a8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 fe26 	bl	80073f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	685a      	ldr	r2, [r3, #4]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	689a      	ldr	r2, [r3, #8]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80067c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f042 0201 	orr.w	r2, r2, #1
 80067d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 fead 	bl	8007538 <UART_CheckIdleState>
 80067de:	4603      	mov	r3, r0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3708      	adds	r7, #8
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b08a      	sub	sp, #40	; 0x28
 80067ec:	af02      	add	r7, sp, #8
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	603b      	str	r3, [r7, #0]
 80067f4:	4613      	mov	r3, r2
 80067f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067fc:	2b20      	cmp	r3, #32
 80067fe:	d178      	bne.n	80068f2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d002      	beq.n	800680c <HAL_UART_Transmit+0x24>
 8006806:	88fb      	ldrh	r3, [r7, #6]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d101      	bne.n	8006810 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	e071      	b.n	80068f4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2200      	movs	r2, #0
 8006814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2221      	movs	r2, #33	; 0x21
 800681c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800681e:	f7fb fcd9 	bl	80021d4 <HAL_GetTick>
 8006822:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	88fa      	ldrh	r2, [r7, #6]
 8006828:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	88fa      	ldrh	r2, [r7, #6]
 8006830:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800683c:	d108      	bne.n	8006850 <HAL_UART_Transmit+0x68>
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	691b      	ldr	r3, [r3, #16]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d104      	bne.n	8006850 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006846:	2300      	movs	r3, #0
 8006848:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	61bb      	str	r3, [r7, #24]
 800684e:	e003      	b.n	8006858 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006854:	2300      	movs	r3, #0
 8006856:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006858:	e030      	b.n	80068bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	9300      	str	r3, [sp, #0]
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	2200      	movs	r2, #0
 8006862:	2180      	movs	r1, #128	; 0x80
 8006864:	68f8      	ldr	r0, [r7, #12]
 8006866:	f000 ff0f 	bl	8007688 <UART_WaitOnFlagUntilTimeout>
 800686a:	4603      	mov	r3, r0
 800686c:	2b00      	cmp	r3, #0
 800686e:	d004      	beq.n	800687a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2220      	movs	r2, #32
 8006874:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006876:	2303      	movs	r3, #3
 8006878:	e03c      	b.n	80068f4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d10b      	bne.n	8006898 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	881a      	ldrh	r2, [r3, #0]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800688c:	b292      	uxth	r2, r2
 800688e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	3302      	adds	r3, #2
 8006894:	61bb      	str	r3, [r7, #24]
 8006896:	e008      	b.n	80068aa <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	781a      	ldrb	r2, [r3, #0]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	b292      	uxth	r2, r2
 80068a2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	3301      	adds	r3, #1
 80068a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	3b01      	subs	r3, #1
 80068b4:	b29a      	uxth	r2, r3
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d1c8      	bne.n	800685a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	9300      	str	r3, [sp, #0]
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	2200      	movs	r2, #0
 80068d0:	2140      	movs	r1, #64	; 0x40
 80068d2:	68f8      	ldr	r0, [r7, #12]
 80068d4:	f000 fed8 	bl	8007688 <UART_WaitOnFlagUntilTimeout>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d004      	beq.n	80068e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2220      	movs	r2, #32
 80068e2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80068e4:	2303      	movs	r3, #3
 80068e6:	e005      	b.n	80068f4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2220      	movs	r2, #32
 80068ec:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80068ee:	2300      	movs	r3, #0
 80068f0:	e000      	b.n	80068f4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80068f2:	2302      	movs	r3, #2
  }
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3720      	adds	r7, #32
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b08b      	sub	sp, #44	; 0x2c
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	4613      	mov	r3, r2
 8006908:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800690e:	2b20      	cmp	r3, #32
 8006910:	d147      	bne.n	80069a2 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d002      	beq.n	800691e <HAL_UART_Transmit_IT+0x22>
 8006918:	88fb      	ldrh	r3, [r7, #6]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d101      	bne.n	8006922 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e040      	b.n	80069a4 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	68ba      	ldr	r2, [r7, #8]
 8006926:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	88fa      	ldrh	r2, [r7, #6]
 800692c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	88fa      	ldrh	r2, [r7, #6]
 8006934:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2200      	movs	r2, #0
 800693c:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2200      	movs	r2, #0
 8006942:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2221      	movs	r2, #33	; 0x21
 800694a:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006954:	d107      	bne.n	8006966 <HAL_UART_Transmit_IT+0x6a>
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d103      	bne.n	8006966 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	4a13      	ldr	r2, [pc, #76]	; (80069b0 <HAL_UART_Transmit_IT+0xb4>)
 8006962:	66da      	str	r2, [r3, #108]	; 0x6c
 8006964:	e002      	b.n	800696c <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	4a12      	ldr	r2, [pc, #72]	; (80069b4 <HAL_UART_Transmit_IT+0xb8>)
 800696a:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	e853 3f00 	ldrex	r3, [r3]
 8006978:	613b      	str	r3, [r7, #16]
   return(result);
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006980:	627b      	str	r3, [r7, #36]	; 0x24
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	461a      	mov	r2, r3
 8006988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698a:	623b      	str	r3, [r7, #32]
 800698c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698e:	69f9      	ldr	r1, [r7, #28]
 8006990:	6a3a      	ldr	r2, [r7, #32]
 8006992:	e841 2300 	strex	r3, r2, [r1]
 8006996:	61bb      	str	r3, [r7, #24]
   return(result);
 8006998:	69bb      	ldr	r3, [r7, #24]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d1e6      	bne.n	800696c <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800699e:	2300      	movs	r3, #0
 80069a0:	e000      	b.n	80069a4 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80069a2:	2302      	movs	r3, #2
  }
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	372c      	adds	r7, #44	; 0x2c
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr
 80069b0:	08007a91 	.word	0x08007a91
 80069b4:	080079d9 	.word	0x080079d9

080069b8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b08a      	sub	sp, #40	; 0x28
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	4613      	mov	r3, r2
 80069c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069cc:	2b20      	cmp	r3, #32
 80069ce:	d132      	bne.n	8006a36 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d002      	beq.n	80069dc <HAL_UART_Receive_IT+0x24>
 80069d6:	88fb      	ldrh	r3, [r7, #6]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d101      	bne.n	80069e0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	e02b      	b.n	8006a38 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2200      	movs	r2, #0
 80069e4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d018      	beq.n	8006a26 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	e853 3f00 	ldrex	r3, [r3]
 8006a00:	613b      	str	r3, [r7, #16]
   return(result);
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a08:	627b      	str	r3, [r7, #36]	; 0x24
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	461a      	mov	r2, r3
 8006a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a12:	623b      	str	r3, [r7, #32]
 8006a14:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a16:	69f9      	ldr	r1, [r7, #28]
 8006a18:	6a3a      	ldr	r2, [r7, #32]
 8006a1a:	e841 2300 	strex	r3, r2, [r1]
 8006a1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a20:	69bb      	ldr	r3, [r7, #24]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1e6      	bne.n	80069f4 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006a26:	88fb      	ldrh	r3, [r7, #6]
 8006a28:	461a      	mov	r2, r3
 8006a2a:	68b9      	ldr	r1, [r7, #8]
 8006a2c:	68f8      	ldr	r0, [r7, #12]
 8006a2e:	f000 fe93 	bl	8007758 <UART_Start_Receive_IT>
 8006a32:	4603      	mov	r3, r0
 8006a34:	e000      	b.n	8006a38 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006a36:	2302      	movs	r3, #2
  }
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3728      	adds	r7, #40	; 0x28
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b0ba      	sub	sp, #232	; 0xe8
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	69db      	ldr	r3, [r3, #28]
 8006a4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006a66:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006a6a:	f640 030f 	movw	r3, #2063	; 0x80f
 8006a6e:	4013      	ands	r3, r2
 8006a70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006a74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d115      	bne.n	8006aa8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a80:	f003 0320 	and.w	r3, r3, #32
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d00f      	beq.n	8006aa8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a8c:	f003 0320 	and.w	r3, r3, #32
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d009      	beq.n	8006aa8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	f000 82ab 	beq.w	8006ff4 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	4798      	blx	r3
      }
      return;
 8006aa6:	e2a5      	b.n	8006ff4 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006aa8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	f000 8117 	beq.w	8006ce0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006ab2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ab6:	f003 0301 	and.w	r3, r3, #1
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d106      	bne.n	8006acc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006abe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006ac2:	4b85      	ldr	r3, [pc, #532]	; (8006cd8 <HAL_UART_IRQHandler+0x298>)
 8006ac4:	4013      	ands	r3, r2
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	f000 810a 	beq.w	8006ce0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ad0:	f003 0301 	and.w	r3, r3, #1
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d011      	beq.n	8006afc <HAL_UART_IRQHandler+0xbc>
 8006ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d00b      	beq.n	8006afc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2201      	movs	r2, #1
 8006aea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006af2:	f043 0201 	orr.w	r2, r3, #1
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b00:	f003 0302 	and.w	r3, r3, #2
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d011      	beq.n	8006b2c <HAL_UART_IRQHandler+0xec>
 8006b08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b0c:	f003 0301 	and.w	r3, r3, #1
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d00b      	beq.n	8006b2c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	2202      	movs	r2, #2
 8006b1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b22:	f043 0204 	orr.w	r2, r3, #4
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b30:	f003 0304 	and.w	r3, r3, #4
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d011      	beq.n	8006b5c <HAL_UART_IRQHandler+0x11c>
 8006b38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b3c:	f003 0301 	and.w	r3, r3, #1
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d00b      	beq.n	8006b5c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2204      	movs	r2, #4
 8006b4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b52:	f043 0202 	orr.w	r2, r3, #2
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b60:	f003 0308 	and.w	r3, r3, #8
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d017      	beq.n	8006b98 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b6c:	f003 0320 	and.w	r3, r3, #32
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d105      	bne.n	8006b80 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006b74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b78:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d00b      	beq.n	8006b98 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	2208      	movs	r2, #8
 8006b86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b8e:	f043 0208 	orr.w	r2, r3, #8
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d012      	beq.n	8006bca <HAL_UART_IRQHandler+0x18a>
 8006ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ba8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d00c      	beq.n	8006bca <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006bb8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bc0:	f043 0220 	orr.w	r2, r3, #32
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	f000 8211 	beq.w	8006ff8 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bda:	f003 0320 	and.w	r3, r3, #32
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00d      	beq.n	8006bfe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006be2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006be6:	f003 0320 	and.w	r3, r3, #32
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d007      	beq.n	8006bfe <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d003      	beq.n	8006bfe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c12:	2b40      	cmp	r3, #64	; 0x40
 8006c14:	d005      	beq.n	8006c22 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006c16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d04f      	beq.n	8006cc2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 fe5e 	bl	80078e4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c32:	2b40      	cmp	r3, #64	; 0x40
 8006c34:	d141      	bne.n	8006cba <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	3308      	adds	r3, #8
 8006c3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c44:	e853 3f00 	ldrex	r3, [r3]
 8006c48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006c4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	3308      	adds	r3, #8
 8006c5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006c62:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006c66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006c6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006c72:	e841 2300 	strex	r3, r2, [r1]
 8006c76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006c7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d1d9      	bne.n	8006c36 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d013      	beq.n	8006cb2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c8e:	4a13      	ldr	r2, [pc, #76]	; (8006cdc <HAL_UART_IRQHandler+0x29c>)
 8006c90:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c96:	4618      	mov	r0, r3
 8006c98:	f7fc fcf4 	bl	8003684 <HAL_DMA_Abort_IT>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d017      	beq.n	8006cd2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006cac:	4610      	mov	r0, r2
 8006cae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cb0:	e00f      	b.n	8006cd2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 f9b4 	bl	8007020 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cb8:	e00b      	b.n	8006cd2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 f9b0 	bl	8007020 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cc0:	e007      	b.n	8006cd2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 f9ac 	bl	8007020 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006cd0:	e192      	b.n	8006ff8 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cd2:	bf00      	nop
    return;
 8006cd4:	e190      	b.n	8006ff8 <HAL_UART_IRQHandler+0x5b8>
 8006cd6:	bf00      	nop
 8006cd8:	04000120 	.word	0x04000120
 8006cdc:	080079ad 	.word	0x080079ad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	f040 814b 	bne.w	8006f80 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cee:	f003 0310 	and.w	r3, r3, #16
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f000 8144 	beq.w	8006f80 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cfc:	f003 0310 	and.w	r3, r3, #16
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	f000 813d 	beq.w	8006f80 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2210      	movs	r2, #16
 8006d0c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d18:	2b40      	cmp	r3, #64	; 0x40
 8006d1a:	f040 80b5 	bne.w	8006e88 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006d2a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	f000 8164 	beq.w	8006ffc <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006d3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	f080 815c 	bcs.w	8006ffc <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d4a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d52:	699b      	ldr	r3, [r3, #24]
 8006d54:	2b20      	cmp	r3, #32
 8006d56:	f000 8086 	beq.w	8006e66 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d62:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d66:	e853 3f00 	ldrex	r3, [r3]
 8006d6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006d6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d76:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	461a      	mov	r2, r3
 8006d80:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d84:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006d88:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006d90:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006d94:	e841 2300 	strex	r3, r2, [r1]
 8006d98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006d9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d1da      	bne.n	8006d5a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	3308      	adds	r3, #8
 8006daa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dae:	e853 3f00 	ldrex	r3, [r3]
 8006db2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006db4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006db6:	f023 0301 	bic.w	r3, r3, #1
 8006dba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	3308      	adds	r3, #8
 8006dc4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006dc8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006dcc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dce:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006dd0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006dd4:	e841 2300 	strex	r3, r2, [r1]
 8006dd8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006dda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d1e1      	bne.n	8006da4 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	3308      	adds	r3, #8
 8006de6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006dea:	e853 3f00 	ldrex	r3, [r3]
 8006dee:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006df0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006df2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006df6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	3308      	adds	r3, #8
 8006e00:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006e04:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006e06:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e08:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006e0a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006e0c:	e841 2300 	strex	r3, r2, [r1]
 8006e10:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006e12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d1e3      	bne.n	8006de0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2220      	movs	r2, #32
 8006e1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e2e:	e853 3f00 	ldrex	r3, [r3]
 8006e32:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006e34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e36:	f023 0310 	bic.w	r3, r3, #16
 8006e3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	461a      	mov	r2, r3
 8006e44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e48:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e4a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e50:	e841 2300 	strex	r3, r2, [r1]
 8006e54:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006e56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d1e4      	bne.n	8006e26 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e60:	4618      	mov	r0, r3
 8006e62:	f7fc fbd6 	bl	8003612 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2202      	movs	r2, #2
 8006e6a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	1ad3      	subs	r3, r2, r3
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	4619      	mov	r1, r3
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 f8d7 	bl	8007034 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e86:	e0b9      	b.n	8006ffc <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	1ad3      	subs	r3, r2, r3
 8006e98:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	f000 80ab 	beq.w	8007000 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8006eaa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	f000 80a6 	beq.w	8007000 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ebc:	e853 3f00 	ldrex	r3, [r3]
 8006ec0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ec4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ec8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ed6:	647b      	str	r3, [r7, #68]	; 0x44
 8006ed8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006edc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ede:	e841 2300 	strex	r3, r2, [r1]
 8006ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d1e4      	bne.n	8006eb4 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	3308      	adds	r3, #8
 8006ef0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef4:	e853 3f00 	ldrex	r3, [r3]
 8006ef8:	623b      	str	r3, [r7, #32]
   return(result);
 8006efa:	6a3b      	ldr	r3, [r7, #32]
 8006efc:	f023 0301 	bic.w	r3, r3, #1
 8006f00:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	3308      	adds	r3, #8
 8006f0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006f0e:	633a      	str	r2, [r7, #48]	; 0x30
 8006f10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f16:	e841 2300 	strex	r3, r2, [r1]
 8006f1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d1e3      	bne.n	8006eea <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2220      	movs	r2, #32
 8006f26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	e853 3f00 	ldrex	r3, [r3]
 8006f42:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f023 0310 	bic.w	r3, r3, #16
 8006f4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	461a      	mov	r2, r3
 8006f54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006f58:	61fb      	str	r3, [r7, #28]
 8006f5a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f5c:	69b9      	ldr	r1, [r7, #24]
 8006f5e:	69fa      	ldr	r2, [r7, #28]
 8006f60:	e841 2300 	strex	r3, r2, [r1]
 8006f64:	617b      	str	r3, [r7, #20]
   return(result);
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d1e4      	bne.n	8006f36 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2202      	movs	r2, #2
 8006f70:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f72:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f76:	4619      	mov	r1, r3
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 f85b 	bl	8007034 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f7e:	e03f      	b.n	8007000 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00e      	beq.n	8006faa <HAL_UART_IRQHandler+0x56a>
 8006f8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d008      	beq.n	8006faa <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006fa0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 ffa6 	bl	8007ef4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006fa8:	e02d      	b.n	8007006 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d00e      	beq.n	8006fd4 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006fb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d008      	beq.n	8006fd4 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d01c      	beq.n	8007004 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	4798      	blx	r3
    }
    return;
 8006fd2:	e017      	b.n	8007004 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006fd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d012      	beq.n	8007006 <HAL_UART_IRQHandler+0x5c6>
 8006fe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d00c      	beq.n	8007006 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 fdaf 	bl	8007b50 <UART_EndTransmit_IT>
    return;
 8006ff2:	e008      	b.n	8007006 <HAL_UART_IRQHandler+0x5c6>
      return;
 8006ff4:	bf00      	nop
 8006ff6:	e006      	b.n	8007006 <HAL_UART_IRQHandler+0x5c6>
    return;
 8006ff8:	bf00      	nop
 8006ffa:	e004      	b.n	8007006 <HAL_UART_IRQHandler+0x5c6>
      return;
 8006ffc:	bf00      	nop
 8006ffe:	e002      	b.n	8007006 <HAL_UART_IRQHandler+0x5c6>
      return;
 8007000:	bf00      	nop
 8007002:	e000      	b.n	8007006 <HAL_UART_IRQHandler+0x5c6>
    return;
 8007004:	bf00      	nop
  }

}
 8007006:	37e8      	adds	r7, #232	; 0xe8
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007014:	bf00      	nop
 8007016:	370c      	adds	r7, #12
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007028:	bf00      	nop
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	460b      	mov	r3, r1
 800703e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007040:	bf00      	nop
 8007042:	370c      	adds	r7, #12
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b088      	sub	sp, #32
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007054:	2300      	movs	r3, #0
 8007056:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	689a      	ldr	r2, [r3, #8]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	691b      	ldr	r3, [r3, #16]
 8007060:	431a      	orrs	r2, r3
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	695b      	ldr	r3, [r3, #20]
 8007066:	431a      	orrs	r2, r3
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	69db      	ldr	r3, [r3, #28]
 800706c:	4313      	orrs	r3, r2
 800706e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	4b92      	ldr	r3, [pc, #584]	; (80072c0 <UART_SetConfig+0x274>)
 8007078:	4013      	ands	r3, r2
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	6812      	ldr	r2, [r2, #0]
 800707e:	6979      	ldr	r1, [r7, #20]
 8007080:	430b      	orrs	r3, r1
 8007082:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	68da      	ldr	r2, [r3, #12]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	430a      	orrs	r2, r1
 8007098:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	699b      	ldr	r3, [r3, #24]
 800709e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6a1b      	ldr	r3, [r3, #32]
 80070a4:	697a      	ldr	r2, [r7, #20]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	697a      	ldr	r2, [r7, #20]
 80070ba:	430a      	orrs	r2, r1
 80070bc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a80      	ldr	r2, [pc, #512]	; (80072c4 <UART_SetConfig+0x278>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d120      	bne.n	800710a <UART_SetConfig+0xbe>
 80070c8:	4b7f      	ldr	r3, [pc, #508]	; (80072c8 <UART_SetConfig+0x27c>)
 80070ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070cc:	f003 0303 	and.w	r3, r3, #3
 80070d0:	2b03      	cmp	r3, #3
 80070d2:	d817      	bhi.n	8007104 <UART_SetConfig+0xb8>
 80070d4:	a201      	add	r2, pc, #4	; (adr r2, 80070dc <UART_SetConfig+0x90>)
 80070d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070da:	bf00      	nop
 80070dc:	080070ed 	.word	0x080070ed
 80070e0:	080070f9 	.word	0x080070f9
 80070e4:	080070ff 	.word	0x080070ff
 80070e8:	080070f3 	.word	0x080070f3
 80070ec:	2301      	movs	r3, #1
 80070ee:	77fb      	strb	r3, [r7, #31]
 80070f0:	e0b5      	b.n	800725e <UART_SetConfig+0x212>
 80070f2:	2302      	movs	r3, #2
 80070f4:	77fb      	strb	r3, [r7, #31]
 80070f6:	e0b2      	b.n	800725e <UART_SetConfig+0x212>
 80070f8:	2304      	movs	r3, #4
 80070fa:	77fb      	strb	r3, [r7, #31]
 80070fc:	e0af      	b.n	800725e <UART_SetConfig+0x212>
 80070fe:	2308      	movs	r3, #8
 8007100:	77fb      	strb	r3, [r7, #31]
 8007102:	e0ac      	b.n	800725e <UART_SetConfig+0x212>
 8007104:	2310      	movs	r3, #16
 8007106:	77fb      	strb	r3, [r7, #31]
 8007108:	e0a9      	b.n	800725e <UART_SetConfig+0x212>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a6f      	ldr	r2, [pc, #444]	; (80072cc <UART_SetConfig+0x280>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d124      	bne.n	800715e <UART_SetConfig+0x112>
 8007114:	4b6c      	ldr	r3, [pc, #432]	; (80072c8 <UART_SetConfig+0x27c>)
 8007116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007118:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800711c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007120:	d011      	beq.n	8007146 <UART_SetConfig+0xfa>
 8007122:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007126:	d817      	bhi.n	8007158 <UART_SetConfig+0x10c>
 8007128:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800712c:	d011      	beq.n	8007152 <UART_SetConfig+0x106>
 800712e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007132:	d811      	bhi.n	8007158 <UART_SetConfig+0x10c>
 8007134:	2b00      	cmp	r3, #0
 8007136:	d003      	beq.n	8007140 <UART_SetConfig+0xf4>
 8007138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800713c:	d006      	beq.n	800714c <UART_SetConfig+0x100>
 800713e:	e00b      	b.n	8007158 <UART_SetConfig+0x10c>
 8007140:	2300      	movs	r3, #0
 8007142:	77fb      	strb	r3, [r7, #31]
 8007144:	e08b      	b.n	800725e <UART_SetConfig+0x212>
 8007146:	2302      	movs	r3, #2
 8007148:	77fb      	strb	r3, [r7, #31]
 800714a:	e088      	b.n	800725e <UART_SetConfig+0x212>
 800714c:	2304      	movs	r3, #4
 800714e:	77fb      	strb	r3, [r7, #31]
 8007150:	e085      	b.n	800725e <UART_SetConfig+0x212>
 8007152:	2308      	movs	r3, #8
 8007154:	77fb      	strb	r3, [r7, #31]
 8007156:	e082      	b.n	800725e <UART_SetConfig+0x212>
 8007158:	2310      	movs	r3, #16
 800715a:	77fb      	strb	r3, [r7, #31]
 800715c:	e07f      	b.n	800725e <UART_SetConfig+0x212>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a5b      	ldr	r2, [pc, #364]	; (80072d0 <UART_SetConfig+0x284>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d124      	bne.n	80071b2 <UART_SetConfig+0x166>
 8007168:	4b57      	ldr	r3, [pc, #348]	; (80072c8 <UART_SetConfig+0x27c>)
 800716a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800716c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007170:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007174:	d011      	beq.n	800719a <UART_SetConfig+0x14e>
 8007176:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800717a:	d817      	bhi.n	80071ac <UART_SetConfig+0x160>
 800717c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007180:	d011      	beq.n	80071a6 <UART_SetConfig+0x15a>
 8007182:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007186:	d811      	bhi.n	80071ac <UART_SetConfig+0x160>
 8007188:	2b00      	cmp	r3, #0
 800718a:	d003      	beq.n	8007194 <UART_SetConfig+0x148>
 800718c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007190:	d006      	beq.n	80071a0 <UART_SetConfig+0x154>
 8007192:	e00b      	b.n	80071ac <UART_SetConfig+0x160>
 8007194:	2300      	movs	r3, #0
 8007196:	77fb      	strb	r3, [r7, #31]
 8007198:	e061      	b.n	800725e <UART_SetConfig+0x212>
 800719a:	2302      	movs	r3, #2
 800719c:	77fb      	strb	r3, [r7, #31]
 800719e:	e05e      	b.n	800725e <UART_SetConfig+0x212>
 80071a0:	2304      	movs	r3, #4
 80071a2:	77fb      	strb	r3, [r7, #31]
 80071a4:	e05b      	b.n	800725e <UART_SetConfig+0x212>
 80071a6:	2308      	movs	r3, #8
 80071a8:	77fb      	strb	r3, [r7, #31]
 80071aa:	e058      	b.n	800725e <UART_SetConfig+0x212>
 80071ac:	2310      	movs	r3, #16
 80071ae:	77fb      	strb	r3, [r7, #31]
 80071b0:	e055      	b.n	800725e <UART_SetConfig+0x212>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a47      	ldr	r2, [pc, #284]	; (80072d4 <UART_SetConfig+0x288>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d124      	bne.n	8007206 <UART_SetConfig+0x1ba>
 80071bc:	4b42      	ldr	r3, [pc, #264]	; (80072c8 <UART_SetConfig+0x27c>)
 80071be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80071c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80071c8:	d011      	beq.n	80071ee <UART_SetConfig+0x1a2>
 80071ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80071ce:	d817      	bhi.n	8007200 <UART_SetConfig+0x1b4>
 80071d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80071d4:	d011      	beq.n	80071fa <UART_SetConfig+0x1ae>
 80071d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80071da:	d811      	bhi.n	8007200 <UART_SetConfig+0x1b4>
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d003      	beq.n	80071e8 <UART_SetConfig+0x19c>
 80071e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071e4:	d006      	beq.n	80071f4 <UART_SetConfig+0x1a8>
 80071e6:	e00b      	b.n	8007200 <UART_SetConfig+0x1b4>
 80071e8:	2300      	movs	r3, #0
 80071ea:	77fb      	strb	r3, [r7, #31]
 80071ec:	e037      	b.n	800725e <UART_SetConfig+0x212>
 80071ee:	2302      	movs	r3, #2
 80071f0:	77fb      	strb	r3, [r7, #31]
 80071f2:	e034      	b.n	800725e <UART_SetConfig+0x212>
 80071f4:	2304      	movs	r3, #4
 80071f6:	77fb      	strb	r3, [r7, #31]
 80071f8:	e031      	b.n	800725e <UART_SetConfig+0x212>
 80071fa:	2308      	movs	r3, #8
 80071fc:	77fb      	strb	r3, [r7, #31]
 80071fe:	e02e      	b.n	800725e <UART_SetConfig+0x212>
 8007200:	2310      	movs	r3, #16
 8007202:	77fb      	strb	r3, [r7, #31]
 8007204:	e02b      	b.n	800725e <UART_SetConfig+0x212>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a33      	ldr	r2, [pc, #204]	; (80072d8 <UART_SetConfig+0x28c>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d124      	bne.n	800725a <UART_SetConfig+0x20e>
 8007210:	4b2d      	ldr	r3, [pc, #180]	; (80072c8 <UART_SetConfig+0x27c>)
 8007212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007214:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007218:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800721c:	d011      	beq.n	8007242 <UART_SetConfig+0x1f6>
 800721e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007222:	d817      	bhi.n	8007254 <UART_SetConfig+0x208>
 8007224:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007228:	d011      	beq.n	800724e <UART_SetConfig+0x202>
 800722a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800722e:	d811      	bhi.n	8007254 <UART_SetConfig+0x208>
 8007230:	2b00      	cmp	r3, #0
 8007232:	d003      	beq.n	800723c <UART_SetConfig+0x1f0>
 8007234:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007238:	d006      	beq.n	8007248 <UART_SetConfig+0x1fc>
 800723a:	e00b      	b.n	8007254 <UART_SetConfig+0x208>
 800723c:	2300      	movs	r3, #0
 800723e:	77fb      	strb	r3, [r7, #31]
 8007240:	e00d      	b.n	800725e <UART_SetConfig+0x212>
 8007242:	2302      	movs	r3, #2
 8007244:	77fb      	strb	r3, [r7, #31]
 8007246:	e00a      	b.n	800725e <UART_SetConfig+0x212>
 8007248:	2304      	movs	r3, #4
 800724a:	77fb      	strb	r3, [r7, #31]
 800724c:	e007      	b.n	800725e <UART_SetConfig+0x212>
 800724e:	2308      	movs	r3, #8
 8007250:	77fb      	strb	r3, [r7, #31]
 8007252:	e004      	b.n	800725e <UART_SetConfig+0x212>
 8007254:	2310      	movs	r3, #16
 8007256:	77fb      	strb	r3, [r7, #31]
 8007258:	e001      	b.n	800725e <UART_SetConfig+0x212>
 800725a:	2310      	movs	r3, #16
 800725c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	69db      	ldr	r3, [r3, #28]
 8007262:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007266:	d16b      	bne.n	8007340 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8007268:	7ffb      	ldrb	r3, [r7, #31]
 800726a:	2b08      	cmp	r3, #8
 800726c:	d838      	bhi.n	80072e0 <UART_SetConfig+0x294>
 800726e:	a201      	add	r2, pc, #4	; (adr r2, 8007274 <UART_SetConfig+0x228>)
 8007270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007274:	08007299 	.word	0x08007299
 8007278:	080072a1 	.word	0x080072a1
 800727c:	080072a9 	.word	0x080072a9
 8007280:	080072e1 	.word	0x080072e1
 8007284:	080072af 	.word	0x080072af
 8007288:	080072e1 	.word	0x080072e1
 800728c:	080072e1 	.word	0x080072e1
 8007290:	080072e1 	.word	0x080072e1
 8007294:	080072b7 	.word	0x080072b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007298:	f7fd ff64 	bl	8005164 <HAL_RCC_GetPCLK1Freq>
 800729c:	61b8      	str	r0, [r7, #24]
        break;
 800729e:	e024      	b.n	80072ea <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072a0:	f7fd ff82 	bl	80051a8 <HAL_RCC_GetPCLK2Freq>
 80072a4:	61b8      	str	r0, [r7, #24]
        break;
 80072a6:	e020      	b.n	80072ea <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072a8:	4b0c      	ldr	r3, [pc, #48]	; (80072dc <UART_SetConfig+0x290>)
 80072aa:	61bb      	str	r3, [r7, #24]
        break;
 80072ac:	e01d      	b.n	80072ea <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072ae:	f7fd fee3 	bl	8005078 <HAL_RCC_GetSysClockFreq>
 80072b2:	61b8      	str	r0, [r7, #24]
        break;
 80072b4:	e019      	b.n	80072ea <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072ba:	61bb      	str	r3, [r7, #24]
        break;
 80072bc:	e015      	b.n	80072ea <UART_SetConfig+0x29e>
 80072be:	bf00      	nop
 80072c0:	efff69f3 	.word	0xefff69f3
 80072c4:	40013800 	.word	0x40013800
 80072c8:	40021000 	.word	0x40021000
 80072cc:	40004400 	.word	0x40004400
 80072d0:	40004800 	.word	0x40004800
 80072d4:	40004c00 	.word	0x40004c00
 80072d8:	40005000 	.word	0x40005000
 80072dc:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80072e0:	2300      	movs	r3, #0
 80072e2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	77bb      	strb	r3, [r7, #30]
        break;
 80072e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d073      	beq.n	80073d8 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	005a      	lsls	r2, r3, #1
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	085b      	lsrs	r3, r3, #1
 80072fa:	441a      	add	r2, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	fbb2 f3f3 	udiv	r3, r2, r3
 8007304:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	2b0f      	cmp	r3, #15
 800730a:	d916      	bls.n	800733a <UART_SetConfig+0x2ee>
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007312:	d212      	bcs.n	800733a <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	b29b      	uxth	r3, r3
 8007318:	f023 030f 	bic.w	r3, r3, #15
 800731c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	085b      	lsrs	r3, r3, #1
 8007322:	b29b      	uxth	r3, r3
 8007324:	f003 0307 	and.w	r3, r3, #7
 8007328:	b29a      	uxth	r2, r3
 800732a:	89fb      	ldrh	r3, [r7, #14]
 800732c:	4313      	orrs	r3, r2
 800732e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	89fa      	ldrh	r2, [r7, #14]
 8007336:	60da      	str	r2, [r3, #12]
 8007338:	e04e      	b.n	80073d8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	77bb      	strb	r3, [r7, #30]
 800733e:	e04b      	b.n	80073d8 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007340:	7ffb      	ldrb	r3, [r7, #31]
 8007342:	2b08      	cmp	r3, #8
 8007344:	d827      	bhi.n	8007396 <UART_SetConfig+0x34a>
 8007346:	a201      	add	r2, pc, #4	; (adr r2, 800734c <UART_SetConfig+0x300>)
 8007348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800734c:	08007371 	.word	0x08007371
 8007350:	08007379 	.word	0x08007379
 8007354:	08007381 	.word	0x08007381
 8007358:	08007397 	.word	0x08007397
 800735c:	08007387 	.word	0x08007387
 8007360:	08007397 	.word	0x08007397
 8007364:	08007397 	.word	0x08007397
 8007368:	08007397 	.word	0x08007397
 800736c:	0800738f 	.word	0x0800738f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007370:	f7fd fef8 	bl	8005164 <HAL_RCC_GetPCLK1Freq>
 8007374:	61b8      	str	r0, [r7, #24]
        break;
 8007376:	e013      	b.n	80073a0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007378:	f7fd ff16 	bl	80051a8 <HAL_RCC_GetPCLK2Freq>
 800737c:	61b8      	str	r0, [r7, #24]
        break;
 800737e:	e00f      	b.n	80073a0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007380:	4b1b      	ldr	r3, [pc, #108]	; (80073f0 <UART_SetConfig+0x3a4>)
 8007382:	61bb      	str	r3, [r7, #24]
        break;
 8007384:	e00c      	b.n	80073a0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007386:	f7fd fe77 	bl	8005078 <HAL_RCC_GetSysClockFreq>
 800738a:	61b8      	str	r0, [r7, #24]
        break;
 800738c:	e008      	b.n	80073a0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800738e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007392:	61bb      	str	r3, [r7, #24]
        break;
 8007394:	e004      	b.n	80073a0 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8007396:	2300      	movs	r3, #0
 8007398:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	77bb      	strb	r3, [r7, #30]
        break;
 800739e:	bf00      	nop
    }

    if (pclk != 0U)
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d018      	beq.n	80073d8 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	085a      	lsrs	r2, r3, #1
 80073ac:	69bb      	ldr	r3, [r7, #24]
 80073ae:	441a      	add	r2, r3
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80073b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	2b0f      	cmp	r3, #15
 80073be:	d909      	bls.n	80073d4 <UART_SetConfig+0x388>
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073c6:	d205      	bcs.n	80073d4 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	b29a      	uxth	r2, r3
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	60da      	str	r2, [r3, #12]
 80073d2:	e001      	b.n	80073d8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80073e4:	7fbb      	ldrb	r3, [r7, #30]
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3720      	adds	r7, #32
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	007a1200 	.word	0x007a1200

080073f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007400:	f003 0301 	and.w	r3, r3, #1
 8007404:	2b00      	cmp	r3, #0
 8007406:	d00a      	beq.n	800741e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	430a      	orrs	r2, r1
 800741c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007422:	f003 0302 	and.w	r3, r3, #2
 8007426:	2b00      	cmp	r3, #0
 8007428:	d00a      	beq.n	8007440 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	430a      	orrs	r2, r1
 800743e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007444:	f003 0304 	and.w	r3, r3, #4
 8007448:	2b00      	cmp	r3, #0
 800744a:	d00a      	beq.n	8007462 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	430a      	orrs	r2, r1
 8007460:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007466:	f003 0308 	and.w	r3, r3, #8
 800746a:	2b00      	cmp	r3, #0
 800746c:	d00a      	beq.n	8007484 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	430a      	orrs	r2, r1
 8007482:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007488:	f003 0310 	and.w	r3, r3, #16
 800748c:	2b00      	cmp	r3, #0
 800748e:	d00a      	beq.n	80074a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	430a      	orrs	r2, r1
 80074a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074aa:	f003 0320 	and.w	r3, r3, #32
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d00a      	beq.n	80074c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	430a      	orrs	r2, r1
 80074c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d01a      	beq.n	800750a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	430a      	orrs	r2, r1
 80074e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074f2:	d10a      	bne.n	800750a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	430a      	orrs	r2, r1
 8007508:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007512:	2b00      	cmp	r3, #0
 8007514:	d00a      	beq.n	800752c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	430a      	orrs	r2, r1
 800752a:	605a      	str	r2, [r3, #4]
  }
}
 800752c:	bf00      	nop
 800752e:	370c      	adds	r7, #12
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b098      	sub	sp, #96	; 0x60
 800753c:	af02      	add	r7, sp, #8
 800753e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007548:	f7fa fe44 	bl	80021d4 <HAL_GetTick>
 800754c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f003 0308 	and.w	r3, r3, #8
 8007558:	2b08      	cmp	r3, #8
 800755a:	d12e      	bne.n	80075ba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800755c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007560:	9300      	str	r3, [sp, #0]
 8007562:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007564:	2200      	movs	r2, #0
 8007566:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 f88c 	bl	8007688 <UART_WaitOnFlagUntilTimeout>
 8007570:	4603      	mov	r3, r0
 8007572:	2b00      	cmp	r3, #0
 8007574:	d021      	beq.n	80075ba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800757c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800757e:	e853 3f00 	ldrex	r3, [r3]
 8007582:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007586:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800758a:	653b      	str	r3, [r7, #80]	; 0x50
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	461a      	mov	r2, r3
 8007592:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007594:	647b      	str	r3, [r7, #68]	; 0x44
 8007596:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007598:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800759a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800759c:	e841 2300 	strex	r3, r2, [r1]
 80075a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80075a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d1e6      	bne.n	8007576 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2220      	movs	r2, #32
 80075ac:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075b6:	2303      	movs	r3, #3
 80075b8:	e062      	b.n	8007680 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f003 0304 	and.w	r3, r3, #4
 80075c4:	2b04      	cmp	r3, #4
 80075c6:	d149      	bne.n	800765c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80075cc:	9300      	str	r3, [sp, #0]
 80075ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075d0:	2200      	movs	r2, #0
 80075d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 f856 	bl	8007688 <UART_WaitOnFlagUntilTimeout>
 80075dc:	4603      	mov	r3, r0
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d03c      	beq.n	800765c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ea:	e853 3f00 	ldrex	r3, [r3]
 80075ee:	623b      	str	r3, [r7, #32]
   return(result);
 80075f0:	6a3b      	ldr	r3, [r7, #32]
 80075f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	461a      	mov	r2, r3
 80075fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007600:	633b      	str	r3, [r7, #48]	; 0x30
 8007602:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007604:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007606:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007608:	e841 2300 	strex	r3, r2, [r1]
 800760c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800760e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007610:	2b00      	cmp	r3, #0
 8007612:	d1e6      	bne.n	80075e2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	3308      	adds	r3, #8
 800761a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	e853 3f00 	ldrex	r3, [r3]
 8007622:	60fb      	str	r3, [r7, #12]
   return(result);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f023 0301 	bic.w	r3, r3, #1
 800762a:	64bb      	str	r3, [r7, #72]	; 0x48
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	3308      	adds	r3, #8
 8007632:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007634:	61fa      	str	r2, [r7, #28]
 8007636:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007638:	69b9      	ldr	r1, [r7, #24]
 800763a:	69fa      	ldr	r2, [r7, #28]
 800763c:	e841 2300 	strex	r3, r2, [r1]
 8007640:	617b      	str	r3, [r7, #20]
   return(result);
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d1e5      	bne.n	8007614 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2220      	movs	r2, #32
 800764c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007658:	2303      	movs	r3, #3
 800765a:	e011      	b.n	8007680 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2220      	movs	r2, #32
 8007660:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2220      	movs	r2, #32
 8007666:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800767e:	2300      	movs	r3, #0
}
 8007680:	4618      	mov	r0, r3
 8007682:	3758      	adds	r7, #88	; 0x58
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	60b9      	str	r1, [r7, #8]
 8007692:	603b      	str	r3, [r7, #0]
 8007694:	4613      	mov	r3, r2
 8007696:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007698:	e049      	b.n	800772e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800769a:	69bb      	ldr	r3, [r7, #24]
 800769c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076a0:	d045      	beq.n	800772e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076a2:	f7fa fd97 	bl	80021d4 <HAL_GetTick>
 80076a6:	4602      	mov	r2, r0
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	1ad3      	subs	r3, r2, r3
 80076ac:	69ba      	ldr	r2, [r7, #24]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d302      	bcc.n	80076b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80076b2:	69bb      	ldr	r3, [r7, #24]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d101      	bne.n	80076bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80076b8:	2303      	movs	r3, #3
 80076ba:	e048      	b.n	800774e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f003 0304 	and.w	r3, r3, #4
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d031      	beq.n	800772e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	69db      	ldr	r3, [r3, #28]
 80076d0:	f003 0308 	and.w	r3, r3, #8
 80076d4:	2b08      	cmp	r3, #8
 80076d6:	d110      	bne.n	80076fa <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	2208      	movs	r2, #8
 80076de:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80076e0:	68f8      	ldr	r0, [r7, #12]
 80076e2:	f000 f8ff 	bl	80078e4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2208      	movs	r2, #8
 80076ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	e029      	b.n	800774e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	69db      	ldr	r3, [r3, #28]
 8007700:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007704:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007708:	d111      	bne.n	800772e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007712:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f000 f8e5 	bl	80078e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2220      	movs	r2, #32
 800771e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2200      	movs	r2, #0
 8007726:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800772a:	2303      	movs	r3, #3
 800772c:	e00f      	b.n	800774e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	69da      	ldr	r2, [r3, #28]
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	4013      	ands	r3, r2
 8007738:	68ba      	ldr	r2, [r7, #8]
 800773a:	429a      	cmp	r2, r3
 800773c:	bf0c      	ite	eq
 800773e:	2301      	moveq	r3, #1
 8007740:	2300      	movne	r3, #0
 8007742:	b2db      	uxtb	r3, r3
 8007744:	461a      	mov	r2, r3
 8007746:	79fb      	ldrb	r3, [r7, #7]
 8007748:	429a      	cmp	r2, r3
 800774a:	d0a6      	beq.n	800769a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800774c:	2300      	movs	r3, #0
}
 800774e:	4618      	mov	r0, r3
 8007750:	3710      	adds	r7, #16
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
	...

08007758 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007758:	b480      	push	{r7}
 800775a:	b097      	sub	sp, #92	; 0x5c
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	4613      	mov	r3, r2
 8007764:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	68ba      	ldr	r2, [r7, #8]
 800776a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	88fa      	ldrh	r2, [r7, #6]
 8007770:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	88fa      	ldrh	r2, [r7, #6]
 8007778:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2200      	movs	r2, #0
 8007780:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800778a:	d10e      	bne.n	80077aa <UART_Start_Receive_IT+0x52>
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	691b      	ldr	r3, [r3, #16]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d105      	bne.n	80077a0 <UART_Start_Receive_IT+0x48>
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f240 12ff 	movw	r2, #511	; 0x1ff
 800779a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800779e:	e02d      	b.n	80077fc <UART_Start_Receive_IT+0xa4>
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	22ff      	movs	r2, #255	; 0xff
 80077a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077a8:	e028      	b.n	80077fc <UART_Start_Receive_IT+0xa4>
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d10d      	bne.n	80077ce <UART_Start_Receive_IT+0x76>
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d104      	bne.n	80077c4 <UART_Start_Receive_IT+0x6c>
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	22ff      	movs	r2, #255	; 0xff
 80077be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077c2:	e01b      	b.n	80077fc <UART_Start_Receive_IT+0xa4>
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	227f      	movs	r2, #127	; 0x7f
 80077c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077cc:	e016      	b.n	80077fc <UART_Start_Receive_IT+0xa4>
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077d6:	d10d      	bne.n	80077f4 <UART_Start_Receive_IT+0x9c>
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	691b      	ldr	r3, [r3, #16]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d104      	bne.n	80077ea <UART_Start_Receive_IT+0x92>
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	227f      	movs	r2, #127	; 0x7f
 80077e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077e8:	e008      	b.n	80077fc <UART_Start_Receive_IT+0xa4>
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	223f      	movs	r2, #63	; 0x3f
 80077ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077f2:	e003      	b.n	80077fc <UART_Start_Receive_IT+0xa4>
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2200      	movs	r2, #0
 8007800:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2222      	movs	r2, #34	; 0x22
 8007808:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	3308      	adds	r3, #8
 8007812:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007816:	e853 3f00 	ldrex	r3, [r3]
 800781a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800781c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800781e:	f043 0301 	orr.w	r3, r3, #1
 8007822:	657b      	str	r3, [r7, #84]	; 0x54
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	3308      	adds	r3, #8
 800782a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800782c:	64ba      	str	r2, [r7, #72]	; 0x48
 800782e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007830:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007832:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007834:	e841 2300 	strex	r3, r2, [r1]
 8007838:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800783a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800783c:	2b00      	cmp	r3, #0
 800783e:	d1e5      	bne.n	800780c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007848:	d107      	bne.n	800785a <UART_Start_Receive_IT+0x102>
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	691b      	ldr	r3, [r3, #16]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d103      	bne.n	800785a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	4a21      	ldr	r2, [pc, #132]	; (80078dc <UART_Start_Receive_IT+0x184>)
 8007856:	669a      	str	r2, [r3, #104]	; 0x68
 8007858:	e002      	b.n	8007860 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	4a20      	ldr	r2, [pc, #128]	; (80078e0 <UART_Start_Receive_IT+0x188>)
 800785e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	691b      	ldr	r3, [r3, #16]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d019      	beq.n	800789c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800786e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007870:	e853 3f00 	ldrex	r3, [r3]
 8007874:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007878:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800787c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	461a      	mov	r2, r3
 8007884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007886:	637b      	str	r3, [r7, #52]	; 0x34
 8007888:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800788c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800788e:	e841 2300 	strex	r3, r2, [r1]
 8007892:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007896:	2b00      	cmp	r3, #0
 8007898:	d1e6      	bne.n	8007868 <UART_Start_Receive_IT+0x110>
 800789a:	e018      	b.n	80078ce <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	e853 3f00 	ldrex	r3, [r3]
 80078a8:	613b      	str	r3, [r7, #16]
   return(result);
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	f043 0320 	orr.w	r3, r3, #32
 80078b0:	653b      	str	r3, [r7, #80]	; 0x50
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	461a      	mov	r2, r3
 80078b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078ba:	623b      	str	r3, [r7, #32]
 80078bc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078be:	69f9      	ldr	r1, [r7, #28]
 80078c0:	6a3a      	ldr	r2, [r7, #32]
 80078c2:	e841 2300 	strex	r3, r2, [r1]
 80078c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80078c8:	69bb      	ldr	r3, [r7, #24]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d1e6      	bne.n	800789c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80078ce:	2300      	movs	r3, #0
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	375c      	adds	r7, #92	; 0x5c
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr
 80078dc:	08007d4d 	.word	0x08007d4d
 80078e0:	08007ba5 	.word	0x08007ba5

080078e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b095      	sub	sp, #84	; 0x54
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078f4:	e853 3f00 	ldrex	r3, [r3]
 80078f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80078fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007900:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	461a      	mov	r2, r3
 8007908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800790a:	643b      	str	r3, [r7, #64]	; 0x40
 800790c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800790e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007910:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007912:	e841 2300 	strex	r3, r2, [r1]
 8007916:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800791a:	2b00      	cmp	r3, #0
 800791c:	d1e6      	bne.n	80078ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	3308      	adds	r3, #8
 8007924:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007926:	6a3b      	ldr	r3, [r7, #32]
 8007928:	e853 3f00 	ldrex	r3, [r3]
 800792c:	61fb      	str	r3, [r7, #28]
   return(result);
 800792e:	69fb      	ldr	r3, [r7, #28]
 8007930:	f023 0301 	bic.w	r3, r3, #1
 8007934:	64bb      	str	r3, [r7, #72]	; 0x48
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	3308      	adds	r3, #8
 800793c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800793e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007940:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007942:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007944:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007946:	e841 2300 	strex	r3, r2, [r1]
 800794a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800794c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794e:	2b00      	cmp	r3, #0
 8007950:	d1e5      	bne.n	800791e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007956:	2b01      	cmp	r3, #1
 8007958:	d118      	bne.n	800798c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	e853 3f00 	ldrex	r3, [r3]
 8007966:	60bb      	str	r3, [r7, #8]
   return(result);
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	f023 0310 	bic.w	r3, r3, #16
 800796e:	647b      	str	r3, [r7, #68]	; 0x44
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	461a      	mov	r2, r3
 8007976:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007978:	61bb      	str	r3, [r7, #24]
 800797a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797c:	6979      	ldr	r1, [r7, #20]
 800797e:	69ba      	ldr	r2, [r7, #24]
 8007980:	e841 2300 	strex	r3, r2, [r1]
 8007984:	613b      	str	r3, [r7, #16]
   return(result);
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d1e6      	bne.n	800795a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2220      	movs	r2, #32
 8007990:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	669a      	str	r2, [r3, #104]	; 0x68
}
 80079a0:	bf00      	nop
 80079a2:	3754      	adds	r7, #84	; 0x54
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2200      	movs	r2, #0
 80079be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80079ca:	68f8      	ldr	r0, [r7, #12]
 80079cc:	f7ff fb28 	bl	8007020 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079d0:	bf00      	nop
 80079d2:	3710      	adds	r7, #16
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}

080079d8 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80079d8:	b480      	push	{r7}
 80079da:	b08f      	sub	sp, #60	; 0x3c
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079e4:	2b21      	cmp	r3, #33	; 0x21
 80079e6:	d14d      	bne.n	8007a84 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d132      	bne.n	8007a5a <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fa:	6a3b      	ldr	r3, [r7, #32]
 80079fc:	e853 3f00 	ldrex	r3, [r3]
 8007a00:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a08:	637b      	str	r3, [r7, #52]	; 0x34
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	461a      	mov	r2, r3
 8007a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a14:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a1a:	e841 2300 	strex	r3, r2, [r1]
 8007a1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d1e6      	bne.n	80079f4 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	e853 3f00 	ldrex	r3, [r3]
 8007a32:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a3a:	633b      	str	r3, [r7, #48]	; 0x30
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	461a      	mov	r2, r3
 8007a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a44:	61bb      	str	r3, [r7, #24]
 8007a46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a48:	6979      	ldr	r1, [r7, #20]
 8007a4a:	69ba      	ldr	r2, [r7, #24]
 8007a4c:	e841 2300 	strex	r3, r2, [r1]
 8007a50:	613b      	str	r3, [r7, #16]
   return(result);
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d1e6      	bne.n	8007a26 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007a58:	e014      	b.n	8007a84 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a5e:	781a      	ldrb	r2, [r3, #0]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	b292      	uxth	r2, r2
 8007a66:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a6c:	1c5a      	adds	r2, r3, #1
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	3b01      	subs	r3, #1
 8007a7c:	b29a      	uxth	r2, r3
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007a84:	bf00      	nop
 8007a86:	373c      	adds	r7, #60	; 0x3c
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b091      	sub	sp, #68	; 0x44
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a9c:	2b21      	cmp	r3, #33	; 0x21
 8007a9e:	d151      	bne.n	8007b44 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d132      	bne.n	8007b12 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab4:	e853 3f00 	ldrex	r3, [r3]
 8007ab8:	623b      	str	r3, [r7, #32]
   return(result);
 8007aba:	6a3b      	ldr	r3, [r7, #32]
 8007abc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ac0:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aca:	633b      	str	r3, [r7, #48]	; 0x30
 8007acc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ace:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ad0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ad2:	e841 2300 	strex	r3, r2, [r1]
 8007ad6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d1e6      	bne.n	8007aac <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	e853 3f00 	ldrex	r3, [r3]
 8007aea:	60fb      	str	r3, [r7, #12]
   return(result);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007af2:	637b      	str	r3, [r7, #52]	; 0x34
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	461a      	mov	r2, r3
 8007afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007afc:	61fb      	str	r3, [r7, #28]
 8007afe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b00:	69b9      	ldr	r1, [r7, #24]
 8007b02:	69fa      	ldr	r2, [r7, #28]
 8007b04:	e841 2300 	strex	r3, r2, [r1]
 8007b08:	617b      	str	r3, [r7, #20]
   return(result);
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d1e6      	bne.n	8007ade <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007b10:	e018      	b.n	8007b44 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b16:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b1a:	881a      	ldrh	r2, [r3, #0]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b24:	b292      	uxth	r2, r2
 8007b26:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b2c:	1c9a      	adds	r2, r3, #2
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	3b01      	subs	r3, #1
 8007b3c:	b29a      	uxth	r2, r3
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007b44:	bf00      	nop
 8007b46:	3744      	adds	r7, #68	; 0x44
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b088      	sub	sp, #32
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	e853 3f00 	ldrex	r3, [r3]
 8007b64:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b6c:	61fb      	str	r3, [r7, #28]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	461a      	mov	r2, r3
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	61bb      	str	r3, [r7, #24]
 8007b78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b7a:	6979      	ldr	r1, [r7, #20]
 8007b7c:	69ba      	ldr	r2, [r7, #24]
 8007b7e:	e841 2300 	strex	r3, r2, [r1]
 8007b82:	613b      	str	r3, [r7, #16]
   return(result);
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d1e6      	bne.n	8007b58 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2220      	movs	r2, #32
 8007b8e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f7ff fa38 	bl	800700c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b9c:	bf00      	nop
 8007b9e:	3720      	adds	r7, #32
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b09c      	sub	sp, #112	; 0x70
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007bb2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007bbc:	2b22      	cmp	r3, #34	; 0x22
 8007bbe:	f040 80b9 	bne.w	8007d34 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007bc8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007bcc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007bd0:	b2d9      	uxtb	r1, r3
 8007bd2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007bd6:	b2da      	uxtb	r2, r3
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bdc:	400a      	ands	r2, r1
 8007bde:	b2d2      	uxtb	r2, r2
 8007be0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007be6:	1c5a      	adds	r2, r3, #1
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	3b01      	subs	r3, #1
 8007bf6:	b29a      	uxth	r2, r3
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	f040 809c 	bne.w	8007d44 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c14:	e853 3f00 	ldrex	r3, [r3]
 8007c18:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007c1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c20:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	461a      	mov	r2, r3
 8007c28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c2a:	65bb      	str	r3, [r7, #88]	; 0x58
 8007c2c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c2e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007c30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007c32:	e841 2300 	strex	r3, r2, [r1]
 8007c36:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007c38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d1e6      	bne.n	8007c0c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	3308      	adds	r3, #8
 8007c44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c48:	e853 3f00 	ldrex	r3, [r3]
 8007c4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c50:	f023 0301 	bic.w	r3, r3, #1
 8007c54:	667b      	str	r3, [r7, #100]	; 0x64
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	3308      	adds	r3, #8
 8007c5c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007c5e:	647a      	str	r2, [r7, #68]	; 0x44
 8007c60:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c62:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c66:	e841 2300 	strex	r3, r2, [r1]
 8007c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d1e5      	bne.n	8007c3e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2220      	movs	r2, #32
 8007c76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d018      	beq.n	8007cc6 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9c:	e853 3f00 	ldrex	r3, [r3]
 8007ca0:	623b      	str	r3, [r7, #32]
   return(result);
 8007ca2:	6a3b      	ldr	r3, [r7, #32]
 8007ca4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007ca8:	663b      	str	r3, [r7, #96]	; 0x60
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	461a      	mov	r2, r3
 8007cb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007cb2:	633b      	str	r3, [r7, #48]	; 0x30
 8007cb4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007cb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cba:	e841 2300 	strex	r3, r2, [r1]
 8007cbe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d1e6      	bne.n	8007c94 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d12e      	bne.n	8007d2c <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	e853 3f00 	ldrex	r3, [r3]
 8007ce0:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f023 0310 	bic.w	r3, r3, #16
 8007ce8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	461a      	mov	r2, r3
 8007cf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cf2:	61fb      	str	r3, [r7, #28]
 8007cf4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf6:	69b9      	ldr	r1, [r7, #24]
 8007cf8:	69fa      	ldr	r2, [r7, #28]
 8007cfa:	e841 2300 	strex	r3, r2, [r1]
 8007cfe:	617b      	str	r3, [r7, #20]
   return(result);
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d1e6      	bne.n	8007cd4 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	69db      	ldr	r3, [r3, #28]
 8007d0c:	f003 0310 	and.w	r3, r3, #16
 8007d10:	2b10      	cmp	r3, #16
 8007d12:	d103      	bne.n	8007d1c <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2210      	movs	r2, #16
 8007d1a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007d22:	4619      	mov	r1, r3
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f7ff f985 	bl	8007034 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007d2a:	e00b      	b.n	8007d44 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f7f8 fd63 	bl	80007f8 <HAL_UART_RxCpltCallback>
}
 8007d32:	e007      	b.n	8007d44 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	699a      	ldr	r2, [r3, #24]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f042 0208 	orr.w	r2, r2, #8
 8007d42:	619a      	str	r2, [r3, #24]
}
 8007d44:	bf00      	nop
 8007d46:	3770      	adds	r7, #112	; 0x70
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b09c      	sub	sp, #112	; 0x70
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007d5a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d64:	2b22      	cmp	r3, #34	; 0x22
 8007d66:	f040 80b9 	bne.w	8007edc <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007d70:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d78:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007d7a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007d7e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007d82:	4013      	ands	r3, r2
 8007d84:	b29a      	uxth	r2, r3
 8007d86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d88:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d8e:	1c9a      	adds	r2, r3, #2
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	3b01      	subs	r3, #1
 8007d9e:	b29a      	uxth	r2, r3
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	f040 809c 	bne.w	8007eec <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007dbc:	e853 3f00 	ldrex	r3, [r3]
 8007dc0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007dc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007dc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007dc8:	667b      	str	r3, [r7, #100]	; 0x64
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	461a      	mov	r2, r3
 8007dd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007dd2:	657b      	str	r3, [r7, #84]	; 0x54
 8007dd4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007dd8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007dda:	e841 2300 	strex	r3, r2, [r1]
 8007dde:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007de0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d1e6      	bne.n	8007db4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	3308      	adds	r3, #8
 8007dec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007df0:	e853 3f00 	ldrex	r3, [r3]
 8007df4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df8:	f023 0301 	bic.w	r3, r3, #1
 8007dfc:	663b      	str	r3, [r7, #96]	; 0x60
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	3308      	adds	r3, #8
 8007e04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007e06:	643a      	str	r2, [r7, #64]	; 0x40
 8007e08:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e0a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007e0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007e0e:	e841 2300 	strex	r3, r2, [r1]
 8007e12:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d1e5      	bne.n	8007de6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2220      	movs	r2, #32
 8007e1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d018      	beq.n	8007e6e <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e42:	6a3b      	ldr	r3, [r7, #32]
 8007e44:	e853 3f00 	ldrex	r3, [r3]
 8007e48:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e4a:	69fb      	ldr	r3, [r7, #28]
 8007e4c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007e50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	461a      	mov	r2, r3
 8007e58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e5c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e62:	e841 2300 	strex	r3, r2, [r1]
 8007e66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d1e6      	bne.n	8007e3c <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d12e      	bne.n	8007ed4 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	e853 3f00 	ldrex	r3, [r3]
 8007e88:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	f023 0310 	bic.w	r3, r3, #16
 8007e90:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	461a      	mov	r2, r3
 8007e98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007e9a:	61bb      	str	r3, [r7, #24]
 8007e9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e9e:	6979      	ldr	r1, [r7, #20]
 8007ea0:	69ba      	ldr	r2, [r7, #24]
 8007ea2:	e841 2300 	strex	r3, r2, [r1]
 8007ea6:	613b      	str	r3, [r7, #16]
   return(result);
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d1e6      	bne.n	8007e7c <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	69db      	ldr	r3, [r3, #28]
 8007eb4:	f003 0310 	and.w	r3, r3, #16
 8007eb8:	2b10      	cmp	r3, #16
 8007eba:	d103      	bne.n	8007ec4 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	2210      	movs	r2, #16
 8007ec2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007eca:	4619      	mov	r1, r3
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f7ff f8b1 	bl	8007034 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ed2:	e00b      	b.n	8007eec <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f7f8 fc8f 	bl	80007f8 <HAL_UART_RxCpltCallback>
}
 8007eda:	e007      	b.n	8007eec <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	699a      	ldr	r2, [r3, #24]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f042 0208 	orr.w	r2, r2, #8
 8007eea:	619a      	str	r2, [r3, #24]
}
 8007eec:	bf00      	nop
 8007eee:	3770      	adds	r7, #112	; 0x70
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b083      	sub	sp, #12
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007efc:	bf00      	nop
 8007efe:	370c      	adds	r7, #12
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr

08007f08 <atoi>:
 8007f08:	220a      	movs	r2, #10
 8007f0a:	2100      	movs	r1, #0
 8007f0c:	f000 b8b4 	b.w	8008078 <strtol>

08007f10 <__errno>:
 8007f10:	4b01      	ldr	r3, [pc, #4]	; (8007f18 <__errno+0x8>)
 8007f12:	6818      	ldr	r0, [r3, #0]
 8007f14:	4770      	bx	lr
 8007f16:	bf00      	nop
 8007f18:	20000074 	.word	0x20000074

08007f1c <__libc_init_array>:
 8007f1c:	b570      	push	{r4, r5, r6, lr}
 8007f1e:	4d0d      	ldr	r5, [pc, #52]	; (8007f54 <__libc_init_array+0x38>)
 8007f20:	4c0d      	ldr	r4, [pc, #52]	; (8007f58 <__libc_init_array+0x3c>)
 8007f22:	1b64      	subs	r4, r4, r5
 8007f24:	10a4      	asrs	r4, r4, #2
 8007f26:	2600      	movs	r6, #0
 8007f28:	42a6      	cmp	r6, r4
 8007f2a:	d109      	bne.n	8007f40 <__libc_init_array+0x24>
 8007f2c:	4d0b      	ldr	r5, [pc, #44]	; (8007f5c <__libc_init_array+0x40>)
 8007f2e:	4c0c      	ldr	r4, [pc, #48]	; (8007f60 <__libc_init_array+0x44>)
 8007f30:	f000 f8ac 	bl	800808c <_init>
 8007f34:	1b64      	subs	r4, r4, r5
 8007f36:	10a4      	asrs	r4, r4, #2
 8007f38:	2600      	movs	r6, #0
 8007f3a:	42a6      	cmp	r6, r4
 8007f3c:	d105      	bne.n	8007f4a <__libc_init_array+0x2e>
 8007f3e:	bd70      	pop	{r4, r5, r6, pc}
 8007f40:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f44:	4798      	blx	r3
 8007f46:	3601      	adds	r6, #1
 8007f48:	e7ee      	b.n	8007f28 <__libc_init_array+0xc>
 8007f4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f4e:	4798      	blx	r3
 8007f50:	3601      	adds	r6, #1
 8007f52:	e7f2      	b.n	8007f3a <__libc_init_array+0x1e>
 8007f54:	08008380 	.word	0x08008380
 8007f58:	08008380 	.word	0x08008380
 8007f5c:	08008380 	.word	0x08008380
 8007f60:	08008384 	.word	0x08008384

08007f64 <memset>:
 8007f64:	4402      	add	r2, r0
 8007f66:	4603      	mov	r3, r0
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d100      	bne.n	8007f6e <memset+0xa>
 8007f6c:	4770      	bx	lr
 8007f6e:	f803 1b01 	strb.w	r1, [r3], #1
 8007f72:	e7f9      	b.n	8007f68 <memset+0x4>

08007f74 <_strtol_l.constprop.0>:
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f7a:	d001      	beq.n	8007f80 <_strtol_l.constprop.0+0xc>
 8007f7c:	2b24      	cmp	r3, #36	; 0x24
 8007f7e:	d906      	bls.n	8007f8e <_strtol_l.constprop.0+0x1a>
 8007f80:	f7ff ffc6 	bl	8007f10 <__errno>
 8007f84:	2316      	movs	r3, #22
 8007f86:	6003      	str	r3, [r0, #0]
 8007f88:	2000      	movs	r0, #0
 8007f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f8e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008074 <_strtol_l.constprop.0+0x100>
 8007f92:	460d      	mov	r5, r1
 8007f94:	462e      	mov	r6, r5
 8007f96:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f9a:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007f9e:	f017 0708 	ands.w	r7, r7, #8
 8007fa2:	d1f7      	bne.n	8007f94 <_strtol_l.constprop.0+0x20>
 8007fa4:	2c2d      	cmp	r4, #45	; 0x2d
 8007fa6:	d132      	bne.n	800800e <_strtol_l.constprop.0+0x9a>
 8007fa8:	782c      	ldrb	r4, [r5, #0]
 8007faa:	2701      	movs	r7, #1
 8007fac:	1cb5      	adds	r5, r6, #2
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d05b      	beq.n	800806a <_strtol_l.constprop.0+0xf6>
 8007fb2:	2b10      	cmp	r3, #16
 8007fb4:	d109      	bne.n	8007fca <_strtol_l.constprop.0+0x56>
 8007fb6:	2c30      	cmp	r4, #48	; 0x30
 8007fb8:	d107      	bne.n	8007fca <_strtol_l.constprop.0+0x56>
 8007fba:	782c      	ldrb	r4, [r5, #0]
 8007fbc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007fc0:	2c58      	cmp	r4, #88	; 0x58
 8007fc2:	d14d      	bne.n	8008060 <_strtol_l.constprop.0+0xec>
 8007fc4:	786c      	ldrb	r4, [r5, #1]
 8007fc6:	2310      	movs	r3, #16
 8007fc8:	3502      	adds	r5, #2
 8007fca:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007fce:	f108 38ff 	add.w	r8, r8, #4294967295
 8007fd2:	f04f 0c00 	mov.w	ip, #0
 8007fd6:	fbb8 f9f3 	udiv	r9, r8, r3
 8007fda:	4666      	mov	r6, ip
 8007fdc:	fb03 8a19 	mls	sl, r3, r9, r8
 8007fe0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007fe4:	f1be 0f09 	cmp.w	lr, #9
 8007fe8:	d816      	bhi.n	8008018 <_strtol_l.constprop.0+0xa4>
 8007fea:	4674      	mov	r4, lr
 8007fec:	42a3      	cmp	r3, r4
 8007fee:	dd24      	ble.n	800803a <_strtol_l.constprop.0+0xc6>
 8007ff0:	f1bc 0f00 	cmp.w	ip, #0
 8007ff4:	db1e      	blt.n	8008034 <_strtol_l.constprop.0+0xc0>
 8007ff6:	45b1      	cmp	r9, r6
 8007ff8:	d31c      	bcc.n	8008034 <_strtol_l.constprop.0+0xc0>
 8007ffa:	d101      	bne.n	8008000 <_strtol_l.constprop.0+0x8c>
 8007ffc:	45a2      	cmp	sl, r4
 8007ffe:	db19      	blt.n	8008034 <_strtol_l.constprop.0+0xc0>
 8008000:	fb06 4603 	mla	r6, r6, r3, r4
 8008004:	f04f 0c01 	mov.w	ip, #1
 8008008:	f815 4b01 	ldrb.w	r4, [r5], #1
 800800c:	e7e8      	b.n	8007fe0 <_strtol_l.constprop.0+0x6c>
 800800e:	2c2b      	cmp	r4, #43	; 0x2b
 8008010:	bf04      	itt	eq
 8008012:	782c      	ldrbeq	r4, [r5, #0]
 8008014:	1cb5      	addeq	r5, r6, #2
 8008016:	e7ca      	b.n	8007fae <_strtol_l.constprop.0+0x3a>
 8008018:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800801c:	f1be 0f19 	cmp.w	lr, #25
 8008020:	d801      	bhi.n	8008026 <_strtol_l.constprop.0+0xb2>
 8008022:	3c37      	subs	r4, #55	; 0x37
 8008024:	e7e2      	b.n	8007fec <_strtol_l.constprop.0+0x78>
 8008026:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800802a:	f1be 0f19 	cmp.w	lr, #25
 800802e:	d804      	bhi.n	800803a <_strtol_l.constprop.0+0xc6>
 8008030:	3c57      	subs	r4, #87	; 0x57
 8008032:	e7db      	b.n	8007fec <_strtol_l.constprop.0+0x78>
 8008034:	f04f 3cff 	mov.w	ip, #4294967295
 8008038:	e7e6      	b.n	8008008 <_strtol_l.constprop.0+0x94>
 800803a:	f1bc 0f00 	cmp.w	ip, #0
 800803e:	da05      	bge.n	800804c <_strtol_l.constprop.0+0xd8>
 8008040:	2322      	movs	r3, #34	; 0x22
 8008042:	6003      	str	r3, [r0, #0]
 8008044:	4646      	mov	r6, r8
 8008046:	b942      	cbnz	r2, 800805a <_strtol_l.constprop.0+0xe6>
 8008048:	4630      	mov	r0, r6
 800804a:	e79e      	b.n	8007f8a <_strtol_l.constprop.0+0x16>
 800804c:	b107      	cbz	r7, 8008050 <_strtol_l.constprop.0+0xdc>
 800804e:	4276      	negs	r6, r6
 8008050:	2a00      	cmp	r2, #0
 8008052:	d0f9      	beq.n	8008048 <_strtol_l.constprop.0+0xd4>
 8008054:	f1bc 0f00 	cmp.w	ip, #0
 8008058:	d000      	beq.n	800805c <_strtol_l.constprop.0+0xe8>
 800805a:	1e69      	subs	r1, r5, #1
 800805c:	6011      	str	r1, [r2, #0]
 800805e:	e7f3      	b.n	8008048 <_strtol_l.constprop.0+0xd4>
 8008060:	2430      	movs	r4, #48	; 0x30
 8008062:	2b00      	cmp	r3, #0
 8008064:	d1b1      	bne.n	8007fca <_strtol_l.constprop.0+0x56>
 8008066:	2308      	movs	r3, #8
 8008068:	e7af      	b.n	8007fca <_strtol_l.constprop.0+0x56>
 800806a:	2c30      	cmp	r4, #48	; 0x30
 800806c:	d0a5      	beq.n	8007fba <_strtol_l.constprop.0+0x46>
 800806e:	230a      	movs	r3, #10
 8008070:	e7ab      	b.n	8007fca <_strtol_l.constprop.0+0x56>
 8008072:	bf00      	nop
 8008074:	0800827d 	.word	0x0800827d

08008078 <strtol>:
 8008078:	4613      	mov	r3, r2
 800807a:	460a      	mov	r2, r1
 800807c:	4601      	mov	r1, r0
 800807e:	4802      	ldr	r0, [pc, #8]	; (8008088 <strtol+0x10>)
 8008080:	6800      	ldr	r0, [r0, #0]
 8008082:	f7ff bf77 	b.w	8007f74 <_strtol_l.constprop.0>
 8008086:	bf00      	nop
 8008088:	20000074 	.word	0x20000074

0800808c <_init>:
 800808c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800808e:	bf00      	nop
 8008090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008092:	bc08      	pop	{r3}
 8008094:	469e      	mov	lr, r3
 8008096:	4770      	bx	lr

08008098 <_fini>:
 8008098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800809a:	bf00      	nop
 800809c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800809e:	bc08      	pop	{r3}
 80080a0:	469e      	mov	lr, r3
 80080a2:	4770      	bx	lr

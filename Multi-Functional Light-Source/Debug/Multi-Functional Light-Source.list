
Multi-Functional Light-Source.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008394  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  08008534  08008534  00018534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008710  08008710  000200c0  2**0
                  CONTENTS
  4 .ARM          00000000  08008710  08008710  000200c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008710  08008710  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008710  08008710  00018710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008714  08008714  00018714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  08008718  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200c0  2**0
                  CONTENTS
 10 .bss          00002278  200000c0  200000c0  000200c0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002338  20002338  000200c0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013523  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025cb  00000000  00000000  00033613  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fa8  00000000  00000000  00035be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ec0  00000000  00000000  00036b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022051  00000000  00000000  00037a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014715  00000000  00000000  00059a99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3eff  00000000  00000000  0006e1ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001420ad  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004708  00000000  00000000  00142100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000c0 	.word	0x200000c0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800851c 	.word	0x0800851c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000c4 	.word	0x200000c4
 80001dc:	0800851c 	.word	0x0800851c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2uiz>:
 800085c:	004a      	lsls	r2, r1, #1
 800085e:	d211      	bcs.n	8000884 <__aeabi_d2uiz+0x28>
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000864:	d211      	bcs.n	800088a <__aeabi_d2uiz+0x2e>
 8000866:	d50d      	bpl.n	8000884 <__aeabi_d2uiz+0x28>
 8000868:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d40e      	bmi.n	8000890 <__aeabi_d2uiz+0x34>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	fa23 f002 	lsr.w	r0, r3, r2
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800088e:	d102      	bne.n	8000896 <__aeabi_d2uiz+0x3a>
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	4770      	bx	lr
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	4770      	bx	lr

0800089c <HAL_UART_RxCpltCallback>:
char recvd_char[1];

char set_or_ret_sys_state[19] = {' '} ;
uint8_t num_characters = 0 ;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]

	//transmit recvd characer
	set_or_ret_sys_state[num_characters] = recvd_char[0] ;
 80008a4:	4b1a      	ldr	r3, [pc, #104]	; (8000910 <HAL_UART_RxCpltCallback+0x74>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	461a      	mov	r2, r3
 80008aa:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <HAL_UART_RxCpltCallback+0x78>)
 80008ac:	7819      	ldrb	r1, [r3, #0]
 80008ae:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <HAL_UART_RxCpltCallback+0x7c>)
 80008b0:	5499      	strb	r1, [r3, r2]

	num_characters++ ;
 80008b2:	4b17      	ldr	r3, [pc, #92]	; (8000910 <HAL_UART_RxCpltCallback+0x74>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	3301      	adds	r3, #1
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	4b15      	ldr	r3, [pc, #84]	; (8000910 <HAL_UART_RxCpltCallback+0x74>)
 80008bc:	701a      	strb	r2, [r3, #0]
	if(recvd_char[0] == '\n'){
 80008be:	4b15      	ldr	r3, [pc, #84]	; (8000914 <HAL_UART_RxCpltCallback+0x78>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	2b0a      	cmp	r3, #10
 80008c4:	d11b      	bne.n	80008fe <HAL_UART_RxCpltCallback+0x62>
		if(num_characters == 19){
 80008c6:	4b12      	ldr	r3, [pc, #72]	; (8000910 <HAL_UART_RxCpltCallback+0x74>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2b13      	cmp	r3, #19
 80008cc:	d105      	bne.n	80008da <HAL_UART_RxCpltCallback+0x3e>
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)"set mode\n",9 ) ;
 80008ce:	2209      	movs	r2, #9
 80008d0:	4912      	ldr	r1, [pc, #72]	; (800091c <HAL_UART_RxCpltCallback+0x80>)
 80008d2:	4813      	ldr	r0, [pc, #76]	; (8000920 <HAL_UART_RxCpltCallback+0x84>)
 80008d4:	f005 fe7c 	bl	80065d0 <HAL_UART_Transmit_IT>
 80008d8:	e00e      	b.n	80008f8 <HAL_UART_RxCpltCallback+0x5c>
		}else if( num_characters == 7){
 80008da:	4b0d      	ldr	r3, [pc, #52]	; (8000910 <HAL_UART_RxCpltCallback+0x74>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	2b07      	cmp	r3, #7
 80008e0:	d105      	bne.n	80008ee <HAL_UART_RxCpltCallback+0x52>
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)"request mode\n", 13) ;
 80008e2:	220d      	movs	r2, #13
 80008e4:	490f      	ldr	r1, [pc, #60]	; (8000924 <HAL_UART_RxCpltCallback+0x88>)
 80008e6:	480e      	ldr	r0, [pc, #56]	; (8000920 <HAL_UART_RxCpltCallback+0x84>)
 80008e8:	f005 fe72 	bl	80065d0 <HAL_UART_Transmit_IT>
 80008ec:	e004      	b.n	80008f8 <HAL_UART_RxCpltCallback+0x5c>
		}else{
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)"Incorrect status request size\n", 30) ;
 80008ee:	221e      	movs	r2, #30
 80008f0:	490d      	ldr	r1, [pc, #52]	; (8000928 <HAL_UART_RxCpltCallback+0x8c>)
 80008f2:	480b      	ldr	r0, [pc, #44]	; (8000920 <HAL_UART_RxCpltCallback+0x84>)
 80008f4:	f005 fe6c 	bl	80065d0 <HAL_UART_Transmit_IT>
		}

		num_characters =  0;
 80008f8:	4b05      	ldr	r3, [pc, #20]	; (8000910 <HAL_UART_RxCpltCallback+0x74>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	701a      	strb	r2, [r3, #0]

	}


	// recieve character - re prime receiver to receive single characters at a time
	HAL_UART_Receive_IT(&huart2, (uint8_t*)recvd_char, 1);
 80008fe:	2201      	movs	r2, #1
 8000900:	4904      	ldr	r1, [pc, #16]	; (8000914 <HAL_UART_RxCpltCallback+0x78>)
 8000902:	4807      	ldr	r0, [pc, #28]	; (8000920 <HAL_UART_RxCpltCallback+0x84>)
 8000904:	f005 fec2 	bl	800668c <HAL_UART_Receive_IT>


}
 8000908:	bf00      	nop
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	20002315 	.word	0x20002315
 8000914:	20002314 	.word	0x20002314
 8000918:	2000003c 	.word	0x2000003c
 800091c:	08008664 	.word	0x08008664
 8000920:	20000254 	.word	0x20000254
 8000924:	08008670 	.word	0x08008670
 8000928:	08008680 	.word	0x08008680
 800092c:	00000000 	.word	0x00000000

08000930 <adc_dma_val_processing>:

/**
 * scale up transmit ADC values
 */

void adc_dma_val_processing(){
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0

	if(adc_conv_complete == 1){
 8000936:	4b3c      	ldr	r3, [pc, #240]	; (8000a28 <adc_dma_val_processing+0xf8>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b01      	cmp	r3, #1
 800093c:	d142      	bne.n	80009c4 <adc_dma_val_processing+0x94>

		adc_conv_complete =0  ;
 800093e:	4b3a      	ldr	r3, [pc, #232]	; (8000a28 <adc_dma_val_processing+0xf8>)
 8000940:	2200      	movs	r2, #0
 8000942:	701a      	strb	r2, [r3, #0]
		sum = 0 ;
 8000944:	4b39      	ldr	r3, [pc, #228]	; (8000a2c <adc_dma_val_processing+0xfc>)
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
		for(int i = 0 ; i < adc_buf_len ; i++){
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	e00c      	b.n	800096a <adc_dma_val_processing+0x3a>
			sum += adc_buf[i] ;
 8000950:	4a37      	ldr	r2, [pc, #220]	; (8000a30 <adc_dma_val_processing+0x100>)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000958:	461a      	mov	r2, r3
 800095a:	4b34      	ldr	r3, [pc, #208]	; (8000a2c <adc_dma_val_processing+0xfc>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4413      	add	r3, r2
 8000960:	4a32      	ldr	r2, [pc, #200]	; (8000a2c <adc_dma_val_processing+0xfc>)
 8000962:	6013      	str	r3, [r2, #0]
		for(int i = 0 ; i < adc_buf_len ; i++){
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	3301      	adds	r3, #1
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000970:	dbee      	blt.n	8000950 <adc_dma_val_processing+0x20>
		}
		raw_adc_dma_val =(uint16_t)(sum/adc_buf_len) ;
 8000972:	4b2e      	ldr	r3, [pc, #184]	; (8000a2c <adc_dma_val_processing+0xfc>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	2b00      	cmp	r3, #0
 8000978:	da01      	bge.n	800097e <adc_dma_val_processing+0x4e>
 800097a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800097e:	131b      	asrs	r3, r3, #12
 8000980:	b29a      	uxth	r2, r3
 8000982:	4b2c      	ldr	r3, [pc, #176]	; (8000a34 <adc_dma_val_processing+0x104>)
 8000984:	801a      	strh	r2, [r3, #0]

		scaled_adc_val = (uint16_t)raw_adc_dma_val*adc_scale_up ; //adc scaled to max =4095
 8000986:	4b2b      	ldr	r3, [pc, #172]	; (8000a34 <adc_dma_val_processing+0x104>)
 8000988:	881b      	ldrh	r3, [r3, #0]
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff fefc 	bl	8000788 <__aeabi_i2d>
 8000990:	4b29      	ldr	r3, [pc, #164]	; (8000a38 <adc_dma_val_processing+0x108>)
 8000992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000996:	f7ff fc7b 	bl	8000290 <__aeabi_dmul>
 800099a:	4602      	mov	r2, r0
 800099c:	460b      	mov	r3, r1
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	f7ff ff5b 	bl	800085c <__aeabi_d2uiz>
 80009a6:	4603      	mov	r3, r0
 80009a8:	b29a      	uxth	r2, r3
 80009aa:	4b24      	ldr	r3, [pc, #144]	; (8000a3c <adc_dma_val_processing+0x10c>)
 80009ac:	801a      	strh	r2, [r3, #0]

		//capture previous adc cal
		if(adc_val_capture == 1){
 80009ae:	4b24      	ldr	r3, [pc, #144]	; (8000a40 <adc_dma_val_processing+0x110>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d106      	bne.n	80009c4 <adc_dma_val_processing+0x94>
			adc_val_snapshot = scaled_adc_val ;
 80009b6:	4b21      	ldr	r3, [pc, #132]	; (8000a3c <adc_dma_val_processing+0x10c>)
 80009b8:	881a      	ldrh	r2, [r3, #0]
 80009ba:	4b22      	ldr	r3, [pc, #136]	; (8000a44 <adc_dma_val_processing+0x114>)
 80009bc:	801a      	strh	r2, [r3, #0]
			adc_val_capture = 0 ;
 80009be:	4b20      	ldr	r3, [pc, #128]	; (8000a40 <adc_dma_val_processing+0x110>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	701a      	strb	r2, [r3, #0]
		}
	}

	// if ADC movement significant update LED intensity
	if(abs(scaled_adc_val - adc_val_snapshot) >15){
 80009c4:	4b1d      	ldr	r3, [pc, #116]	; (8000a3c <adc_dma_val_processing+0x10c>)
 80009c6:	881b      	ldrh	r3, [r3, #0]
 80009c8:	461a      	mov	r2, r3
 80009ca:	4b1e      	ldr	r3, [pc, #120]	; (8000a44 <adc_dma_val_processing+0x114>)
 80009cc:	881b      	ldrh	r3, [r3, #0]
 80009ce:	1ad3      	subs	r3, r2, r3
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	bfb8      	it	lt
 80009d4:	425b      	neglt	r3, r3
 80009d6:	2b0f      	cmp	r3, #15
 80009d8:	dd02      	ble.n	80009e0 <adc_dma_val_processing+0xb0>
	  update_led_via_ADC = 1 ;
 80009da:	4b1b      	ldr	r3, [pc, #108]	; (8000a48 <adc_dma_val_processing+0x118>)
 80009dc:	2201      	movs	r2, #1
 80009de:	701a      	strb	r2, [r3, #0]
	}

//	 WHITE LED intensity
	LED_intensity =(float)(scaled_adc_val)*(512.0/4095.0)  ;
 80009e0:	4b16      	ldr	r3, [pc, #88]	; (8000a3c <adc_dma_val_processing+0x10c>)
 80009e2:	881b      	ldrh	r3, [r3, #0]
 80009e4:	ee07 3a90 	vmov	s15, r3
 80009e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009ec:	ee17 0a90 	vmov	r0, s15
 80009f0:	f7ff fedc 	bl	80007ac <__aeabi_f2d>
 80009f4:	a30a      	add	r3, pc, #40	; (adr r3, 8000a20 <adc_dma_val_processing+0xf0>)
 80009f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009fa:	f7ff fc49 	bl	8000290 <__aeabi_dmul>
 80009fe:	4602      	mov	r2, r0
 8000a00:	460b      	mov	r3, r1
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	f7ff ff29 	bl	800085c <__aeabi_d2uiz>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	b29a      	uxth	r2, r3
 8000a0e:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <adc_dma_val_processing+0x11c>)
 8000a10:	801a      	strh	r2, [r3, #0]


}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	f3af 8000 	nop.w
 8000a20:	10010010 	.word	0x10010010
 8000a24:	3fc00100 	.word	0x3fc00100
 8000a28:	200022fa 	.word	0x200022fa
 8000a2c:	200022f4 	.word	0x200022f4
 8000a30:	200002e4 	.word	0x200002e4
 8000a34:	200022e4 	.word	0x200022e4
 8000a38:	20000008 	.word	0x20000008
 8000a3c:	200022fc 	.word	0x200022fc
 8000a40:	20000002 	.word	0x20000002
 8000a44:	200022f8 	.word	0x200022f8
 8000a48:	200022fe 	.word	0x200022fe
 8000a4c:	20000010 	.word	0x20000010

08000a50 <system_state_update>:


void system_state_update(){
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
	 if(left_button_pressed ==1 ){
 8000a54:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <system_state_update+0x50>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d11c      	bne.n	8000a96 <system_state_update+0x46>
		 button_count++ ;
 8000a5c:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <system_state_update+0x54>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	3301      	adds	r3, #1
 8000a62:	4a10      	ldr	r2, [pc, #64]	; (8000aa4 <system_state_update+0x54>)
 8000a64:	6013      	str	r3, [r2, #0]
		 if(button_count > 2){
 8000a66:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <system_state_update+0x54>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	2b02      	cmp	r3, #2
 8000a6c:	dd02      	ble.n	8000a74 <system_state_update+0x24>
			 button_count = 0 ;
 8000a6e:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <system_state_update+0x54>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
		 }
		 update_led_via_ADC =  0 ; // don't read ADC by default in next state
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <system_state_update+0x58>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	701a      	strb	r2, [r3, #0]
		 // snapshot of ADC taken in next state
		 if(adc_conv_complete == 1){
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <system_state_update+0x5c>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d102      	bne.n	8000a88 <system_state_update+0x38>
			 adc_val_capture =1  ; // capture ADC value
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <system_state_update+0x60>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	701a      	strb	r2, [r3, #0]
		 }

		 // LED off at each new state
		 htim2.Instance->CCR1 = 0;
 8000a88:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <system_state_update+0x64>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	635a      	str	r2, [r3, #52]	; 0x34
		 left_button_pressed = 0 ;
 8000a90:	4b03      	ldr	r3, [pc, #12]	; (8000aa0 <system_state_update+0x50>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	701a      	strb	r2, [r3, #0]
	 }
}
 8000a96:	bf00      	nop
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	2000231e 	.word	0x2000231e
 8000aa4:	200002dc 	.word	0x200002dc
 8000aa8:	200022fe 	.word	0x200022fe
 8000aac:	200022fa 	.word	0x200022fa
 8000ab0:	20000002 	.word	0x20000002
 8000ab4:	20000170 	.word	0x20000170

08000ab8 <right_button_state_update>:

/**
 * Updates system state after right button pressed in emergency mode
 */
void right_button_state_update(){
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
	if(button_count == 1){
 8000abc:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <right_button_state_update+0x5c>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d117      	bne.n	8000af4 <right_button_state_update+0x3c>
		if(right_button_pressed){
 8000ac4:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <right_button_state_update+0x60>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d01e      	beq.n	8000b0a <right_button_state_update+0x52>
			right_button_pressed = 0 ;
 8000acc:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <right_button_state_update+0x60>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	701a      	strb	r2, [r3, #0]

			update_led_via_ADC = 0 ; // dont read adc by default in next state
 8000ad2:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <right_button_state_update+0x64>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	701a      	strb	r2, [r3, #0]

			 em_count++ ;
 8000ad8:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <right_button_state_update+0x68>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	3301      	adds	r3, #1
 8000ade:	b2da      	uxtb	r2, r3
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <right_button_state_update+0x68>)
 8000ae2:	701a      	strb	r2, [r3, #0]

			 if(em_count>2){
 8000ae4:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <right_button_state_update+0x68>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b02      	cmp	r3, #2
 8000aea:	d90e      	bls.n	8000b0a <right_button_state_update+0x52>
				 em_count = 0;
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <right_button_state_update+0x68>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	701a      	strb	r2, [r3, #0]
		}
	}else if( button_count != 1 && right_button_pressed){
		right_button_pressed = 0; //do not read right button presses triggered
								  // in other states except emergency mode
	}
}
 8000af2:	e00a      	b.n	8000b0a <right_button_state_update+0x52>
	}else if( button_count != 1 && right_button_pressed){
 8000af4:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <right_button_state_update+0x5c>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d006      	beq.n	8000b0a <right_button_state_update+0x52>
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <right_button_state_update+0x60>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d002      	beq.n	8000b0a <right_button_state_update+0x52>
		right_button_pressed = 0; //do not read right button presses triggered
 8000b04:	4b04      	ldr	r3, [pc, #16]	; (8000b18 <right_button_state_update+0x60>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	701a      	strb	r2, [r3, #0]
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	200002dc 	.word	0x200002dc
 8000b18:	2000231d 	.word	0x2000231d
 8000b1c:	200022fe 	.word	0x200022fe
 8000b20:	200002e0 	.word	0x200002e0

08000b24 <TURN_LED_ON_OFF>:

/**
 * Middle button press turns LED ON/OFF
 */
void TURN_LED_ON_OFF(){
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
	if(middle_button_pressed == 1){
 8000b28:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <TURN_LED_ON_OFF+0x30>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d10c      	bne.n	8000b4a <TURN_LED_ON_OFF+0x26>
		 LED_ON = !LED_ON ;  // turns the LED on OR off
 8000b30:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <TURN_LED_ON_OFF+0x34>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	bf0c      	ite	eq
 8000b38:	2301      	moveq	r3, #1
 8000b3a:	2300      	movne	r3, #0
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	461a      	mov	r2, r3
 8000b40:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <TURN_LED_ON_OFF+0x34>)
 8000b42:	701a      	strb	r2, [r3, #0]

		 middle_button_pressed = 0 ;
 8000b44:	4b03      	ldr	r3, [pc, #12]	; (8000b54 <TURN_LED_ON_OFF+0x30>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	701a      	strb	r2, [r3, #0]
	 }
}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	2000231c 	.word	0x2000231c
 8000b58:	200022ff 	.word	0x200022ff

08000b5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b62:	f001 f947 	bl	8001df4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b66:	f000 fa59 	bl	800101c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b6a:	f000 fcf1 	bl	8001550 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b6e:	f000 fcd1 	bl	8001514 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000b72:	f000 fc9d 	bl	80014b0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000b76:	f000 fab9 	bl	80010ec <MX_ADC1_Init>
  MX_TIM2_Init();
 8000b7a:	f000 fb27 	bl	80011cc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b7e:	f000 fba7 	bl	80012d0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000b82:	f000 fc1d 	bl	80013c0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(200);
 8000b86:	20c8      	movs	r0, #200	; 0xc8
 8000b88:	f001 f99a 	bl	8001ec0 <HAL_Delay>
  HAL_UART_Transmit(&huart2, studentNum, 13, 150); //transmit student number
 8000b8c:	2396      	movs	r3, #150	; 0x96
 8000b8e:	220d      	movs	r2, #13
 8000b90:	4989      	ldr	r1, [pc, #548]	; (8000db8 <main+0x25c>)
 8000b92:	488a      	ldr	r0, [pc, #552]	; (8000dbc <main+0x260>)
 8000b94:	f005 fc92 	bl	80064bc <HAL_UART_Transmit>

//  HAL_UART_Receive_IT(&huart2, (uint8_t*)set_or_ret_sys_state, 1); //recv character input
  HAL_UART_Receive_IT(&huart2, (uint8_t*)recvd_char, 1);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	4989      	ldr	r1, [pc, #548]	; (8000dc0 <main+0x264>)
 8000b9c:	4887      	ldr	r0, [pc, #540]	; (8000dbc <main+0x260>)
 8000b9e:	f005 fd75 	bl	800668c <HAL_UART_Receive_IT>

  //Startup ADC
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, adc_buf_len) ;
 8000ba2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ba6:	4987      	ldr	r1, [pc, #540]	; (8000dc4 <main+0x268>)
 8000ba8:	4887      	ldr	r0, [pc, #540]	; (8000dc8 <main+0x26c>)
 8000baa:	f001 fbbb 	bl	8002324 <HAL_ADC_Start_DMA>

  // TIM2_CH1 start PWM
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1) ;
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4886      	ldr	r0, [pc, #536]	; (8000dcc <main+0x270>)
 8000bb2:	f004 fc5b 	bl	800546c <HAL_TIM_PWM_Start>
  // TIM2_CH4 start PWM - red LED
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) ;
 8000bb6:	210c      	movs	r1, #12
 8000bb8:	4884      	ldr	r0, [pc, #528]	; (8000dcc <main+0x270>)
 8000bba:	f004 fc57 	bl	800546c <HAL_TIM_PWM_Start>
  // TIM3_CH4 start PWM - GREEN LED
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000bbe:	210c      	movs	r1, #12
 8000bc0:	4883      	ldr	r0, [pc, #524]	; (8000dd0 <main+0x274>)
 8000bc2:	f004 fc53 	bl	800546c <HAL_TIM_PWM_Start>
  // TIM4_CH1 start PWM - BLUE LED
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1) ;
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4882      	ldr	r0, [pc, #520]	; (8000dd4 <main+0x278>)
 8000bca:	f004 fc4f 	bl	800546c <HAL_TIM_PWM_Start>

  strobe_ticks  = HAL_GetTick() ;
 8000bce:	f001 f96b 	bl	8001ea8 <HAL_GetTick>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	4a80      	ldr	r2, [pc, #512]	; (8000dd8 <main+0x27c>)
 8000bd6:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // left button press to update system state (MF -> ME -> MM)
	  system_state_update() ;
 8000bd8:	f7ff ff3a 	bl	8000a50 <system_state_update>
	  //run adc and capture previous snapshot of ADC value and adc movement processing
	  adc_dma_val_processing();
 8000bdc:	f7ff fea8 	bl	8000930 <adc_dma_val_processing>
	  // Turn LED ON/OFF
	  TURN_LED_ON_OFF() ;
 8000be0:	f7ff ffa0 	bl	8000b24 <TURN_LED_ON_OFF>

	 // system state
	 if(button_count == 0 || start_up == 1){
 8000be4:	4b7d      	ldr	r3, [pc, #500]	; (8000ddc <main+0x280>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d003      	beq.n	8000bf4 <main+0x98>
 8000bec:	4b7c      	ldr	r3, [pc, #496]	; (8000de0 <main+0x284>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d13a      	bne.n	8000c6a <main+0x10e>
		 start_up = 0 ; //for default MF state
 8000bf4:	4b7a      	ldr	r3, [pc, #488]	; (8000de0 <main+0x284>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	701a      	strb	r2, [r3, #0]

		 MF_mode_LED() ; // sets the corresponding mode LED
 8000bfa:	f000 fd4d 	bl	8001698 <MF_mode_LED>
		 em_count=0;     // reset the emergency mode count
 8000bfe:	4b79      	ldr	r3, [pc, #484]	; (8000de4 <main+0x288>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	701a      	strb	r2, [r3, #0]
		 em_default = 1; // to re-enter the EM state
 8000c04:	4b78      	ldr	r3, [pc, #480]	; (8000de8 <main+0x28c>)
 8000c06:	2201      	movs	r2, #1
 8000c08:	701a      	strb	r2, [r3, #0]

		 // Middle button press -> LED ON / OFF
		 if(LED_ON == 1){
 8000c0a:	4b78      	ldr	r3, [pc, #480]	; (8000dec <main+0x290>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d104      	bne.n	8000c1c <main+0xc0>
			 htim2.Instance->CCR1 = 1 ; // LED ON
 8000c12:	4b6e      	ldr	r3, [pc, #440]	; (8000dcc <main+0x270>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	2201      	movs	r2, #1
 8000c18:	635a      	str	r2, [r3, #52]	; 0x34
 8000c1a:	e007      	b.n	8000c2c <main+0xd0>
		 }else if(LED_ON ==0){
 8000c1c:	4b73      	ldr	r3, [pc, #460]	; (8000dec <main+0x290>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d103      	bne.n	8000c2c <main+0xd0>
			 htim2.Instance->CCR1 = 0 ; //LED OFFS
 8000c24:	4b69      	ldr	r3, [pc, #420]	; (8000dcc <main+0x270>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2200      	movs	r2, #0
 8000c2a:	635a      	str	r2, [r3, #52]	; 0x34
		 }


		 // if LED_ON and SLIDER MOVED -> updated LED intensity
		if(LED_ON == 1 && update_led_via_ADC == 1){
 8000c2c:	4b6f      	ldr	r3, [pc, #444]	; (8000dec <main+0x290>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d164      	bne.n	8000cfe <main+0x1a2>
 8000c34:	4b6e      	ldr	r3, [pc, #440]	; (8000df0 <main+0x294>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d160      	bne.n	8000cfe <main+0x1a2>
		  htim2.Instance->CCR1 =  LED_intensity ; // vary the duty cycle of the LED [1:512]
 8000c3c:	4b6d      	ldr	r3, [pc, #436]	; (8000df4 <main+0x298>)
 8000c3e:	881a      	ldrh	r2, [r3, #0]
 8000c40:	4b62      	ldr	r3, [pc, #392]	; (8000dcc <main+0x270>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	635a      	str	r2, [r3, #52]	; 0x34
		  sprintf(adc_val, "%d\n", scaled_adc_val) ;
 8000c46:	4b6c      	ldr	r3, [pc, #432]	; (8000df8 <main+0x29c>)
 8000c48:	881b      	ldrh	r3, [r3, #0]
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	496b      	ldr	r1, [pc, #428]	; (8000dfc <main+0x2a0>)
 8000c4e:	486c      	ldr	r0, [pc, #432]	; (8000e00 <main+0x2a4>)
 8000c50:	f006 fff6 	bl	8007c40 <siprintf>
		  HAL_UART_Transmit_IT(&huart2, (uint8_t*)adc_val, strlen(adc_val)) ;
 8000c54:	486a      	ldr	r0, [pc, #424]	; (8000e00 <main+0x2a4>)
 8000c56:	f7ff fac3 	bl	80001e0 <strlen>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	461a      	mov	r2, r3
 8000c60:	4967      	ldr	r1, [pc, #412]	; (8000e00 <main+0x2a4>)
 8000c62:	4856      	ldr	r0, [pc, #344]	; (8000dbc <main+0x260>)
 8000c64:	f005 fcb4 	bl	80065d0 <HAL_UART_Transmit_IT>
		if(LED_ON == 1 && update_led_via_ADC == 1){
 8000c68:	e049      	b.n	8000cfe <main+0x1a2>
		}

	 }else if(button_count == 1){// right button system state updated
 8000c6a:	4b5c      	ldr	r3, [pc, #368]	; (8000ddc <main+0x280>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d11b      	bne.n	8000caa <main+0x14e>
		 ME_mode_LED() ; // sets the corresponding modes LED
 8000c72:	f000 fd2f 	bl	80016d4 <ME_mode_LED>

		 if(update_led_via_ADC == 1 && LED_ON ==1){
 8000c76:	4b5e      	ldr	r3, [pc, #376]	; (8000df0 <main+0x294>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d140      	bne.n	8000d00 <main+0x1a4>
 8000c7e:	4b5b      	ldr	r3, [pc, #364]	; (8000dec <main+0x290>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d13c      	bne.n	8000d00 <main+0x1a4>
			 sprintf(adc_val, "%d\n", scaled_adc_val) ;
 8000c86:	4b5c      	ldr	r3, [pc, #368]	; (8000df8 <main+0x29c>)
 8000c88:	881b      	ldrh	r3, [r3, #0]
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	495b      	ldr	r1, [pc, #364]	; (8000dfc <main+0x2a0>)
 8000c8e:	485c      	ldr	r0, [pc, #368]	; (8000e00 <main+0x2a4>)
 8000c90:	f006 ffd6 	bl	8007c40 <siprintf>
			 HAL_UART_Transmit_IT(&huart2, (uint8_t*)adc_val, strlen(adc_val)) ;
 8000c94:	485a      	ldr	r0, [pc, #360]	; (8000e00 <main+0x2a4>)
 8000c96:	f7ff faa3 	bl	80001e0 <strlen>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	4957      	ldr	r1, [pc, #348]	; (8000e00 <main+0x2a4>)
 8000ca2:	4846      	ldr	r0, [pc, #280]	; (8000dbc <main+0x260>)
 8000ca4:	f005 fc94 	bl	80065d0 <HAL_UART_Transmit_IT>
 8000ca8:	e02a      	b.n	8000d00 <main+0x1a4>
		 }
	 }else{
		 if(button_count == 2){ // Mood Mode
 8000caa:	4b4c      	ldr	r3, [pc, #304]	; (8000ddc <main+0x280>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d126      	bne.n	8000d00 <main+0x1a4>
			 // SET THE NECESSARY STATES
			 em_count=0; // reset the emergency mode state
 8000cb2:	4b4c      	ldr	r3, [pc, #304]	; (8000de4 <main+0x288>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	701a      	strb	r2, [r3, #0]
			 em_default = 1; // to re-enter EM state
 8000cb8:	4b4b      	ldr	r3, [pc, #300]	; (8000de8 <main+0x28c>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	701a      	strb	r2, [r3, #0]

			 MM_mode_LED() ; //sets the corresponding modes LED
 8000cbe:	f000 fd21 	bl	8001704 <MM_mode_LED>

			 if(LED_ON == 1){
 8000cc2:	4b4a      	ldr	r3, [pc, #296]	; (8000dec <main+0x290>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d10c      	bne.n	8000ce4 <main+0x188>
				 // set to channel intensities to default values
				 // no longer default mode - reset back to default in other states?
				 //red channel
				 htim2.Instance->CCR4 = 128 ;
 8000cca:	4b40      	ldr	r3, [pc, #256]	; (8000dcc <main+0x270>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	2280      	movs	r2, #128	; 0x80
 8000cd0:	641a      	str	r2, [r3, #64]	; 0x40
				 // GREEN channel
				 htim3.Instance->CCR4 = 128 ;
 8000cd2:	4b3f      	ldr	r3, [pc, #252]	; (8000dd0 <main+0x274>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	2280      	movs	r2, #128	; 0x80
 8000cd8:	641a      	str	r2, [r3, #64]	; 0x40
				 // BLUE channel
				 htim4.Instance->CCR1 = 128 ;
 8000cda:	4b3e      	ldr	r3, [pc, #248]	; (8000dd4 <main+0x278>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2280      	movs	r2, #128	; 0x80
 8000ce0:	635a      	str	r2, [r3, #52]	; 0x34
 8000ce2:	e00d      	b.n	8000d00 <main+0x1a4>


			 }else{
				 // put all channels off
				 htim2.Instance->CCR4 =  0;
 8000ce4:	4b39      	ldr	r3, [pc, #228]	; (8000dcc <main+0x270>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2200      	movs	r2, #0
 8000cea:	641a      	str	r2, [r3, #64]	; 0x40
				 htim3.Instance->CCR4 = 0 ;
 8000cec:	4b38      	ldr	r3, [pc, #224]	; (8000dd0 <main+0x274>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	641a      	str	r2, [r3, #64]	; 0x40
				 htim4.Instance->CCR1 = 0 ;
 8000cf4:	4b37      	ldr	r3, [pc, #220]	; (8000dd4 <main+0x278>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	635a      	str	r2, [r3, #52]	; 0x34
 8000cfc:	e000      	b.n	8000d00 <main+0x1a4>
		if(LED_ON == 1 && update_led_via_ADC == 1){
 8000cfe:	bf00      	nop

		 }
	 }

	 // right button state update
	 right_button_state_update() ;
 8000d00:	f7ff feda 	bl	8000ab8 <right_button_state_update>
	 //EMERGENCY MODES
	  if(button_count ==1 ){
 8000d04:	4b35      	ldr	r3, [pc, #212]	; (8000ddc <main+0x280>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	f47f af65 	bne.w	8000bd8 <main+0x7c>

		 if(em_count == 0 || em_default ==1){ //strobe wit default intensity
 8000d0e:	4b35      	ldr	r3, [pc, #212]	; (8000de4 <main+0x288>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d003      	beq.n	8000d1e <main+0x1c2>
 8000d16:	4b34      	ldr	r3, [pc, #208]	; (8000de8 <main+0x28c>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d13f      	bne.n	8000d9e <main+0x242>
			 em_default = 0 ; //default state reached
 8000d1e:	4b32      	ldr	r3, [pc, #200]	; (8000de8 <main+0x28c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	701a      	strb	r2, [r3, #0]
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2120      	movs	r1, #32
 8000d28:	4836      	ldr	r0, [pc, #216]	; (8000e04 <main+0x2a8>)
 8000d2a:	f002 fe03 	bl	8003934 <HAL_GPIO_WritePin>


			 if(LED_ON){ //LED_on =?
 8000d2e:	4b2f      	ldr	r3, [pc, #188]	; (8000dec <main+0x290>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f000 8156 	beq.w	8000fe4 <main+0x488>
				 // default delay 512ms
				 timePassed =HAL_GetTick() - strobe_ticks ;
 8000d38:	f001 f8b6 	bl	8001ea8 <HAL_GetTick>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	4b26      	ldr	r3, [pc, #152]	; (8000dd8 <main+0x27c>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	1ad3      	subs	r3, r2, r3
 8000d44:	4a30      	ldr	r2, [pc, #192]	; (8000e08 <main+0x2ac>)
 8000d46:	6013      	str	r3, [r2, #0]
				 // time passed >512
				 if( timePassed >= strobe_delay && led_strobe_on == 0){
 8000d48:	4b30      	ldr	r3, [pc, #192]	; (8000e0c <main+0x2b0>)
 8000d4a:	881b      	ldrh	r3, [r3, #0]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4b2e      	ldr	r3, [pc, #184]	; (8000e08 <main+0x2ac>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	429a      	cmp	r2, r3
 8000d54:	d80a      	bhi.n	8000d6c <main+0x210>
 8000d56:	4b2e      	ldr	r3, [pc, #184]	; (8000e10 <main+0x2b4>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d106      	bne.n	8000d6c <main+0x210>
					 led_strobe_on =1 ;
 8000d5e:	4b2c      	ldr	r3, [pc, #176]	; (8000e10 <main+0x2b4>)
 8000d60:	2201      	movs	r2, #1
 8000d62:	701a      	strb	r2, [r3, #0]
					 htim2.Instance->CCR1 = 0 ;
 8000d64:	4b19      	ldr	r3, [pc, #100]	; (8000dcc <main+0x270>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	635a      	str	r2, [r3, #52]	; 0x34
				 }
				 // time Passed > 1024
				 if(timePassed >= 1024 && led_strobe_on == 1){
 8000d6c:	4b26      	ldr	r3, [pc, #152]	; (8000e08 <main+0x2ac>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d74:	f0c0 8136 	bcc.w	8000fe4 <main+0x488>
 8000d78:	4b25      	ldr	r3, [pc, #148]	; (8000e10 <main+0x2b4>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	f040 8131 	bne.w	8000fe4 <main+0x488>
					 strobe_ticks =  HAL_GetTick() ; // update current time
 8000d82:	f001 f891 	bl	8001ea8 <HAL_GetTick>
 8000d86:	4603      	mov	r3, r0
 8000d88:	4a13      	ldr	r2, [pc, #76]	; (8000dd8 <main+0x27c>)
 8000d8a:	6013      	str	r3, [r2, #0]
					 led_strobe_on = 0 ;
 8000d8c:	4b20      	ldr	r3, [pc, #128]	; (8000e10 <main+0x2b4>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	701a      	strb	r2, [r3, #0]

					 htim2.Instance->CCR1 =256;
 8000d92:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <main+0x270>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d9a:	635a      	str	r2, [r3, #52]	; 0x34
			 if(LED_ON){ //LED_on =?
 8000d9c:	e122      	b.n	8000fe4 <main+0x488>
				 }
			 }
		 }
		 else if(em_count ==1){ // SOS MOSRE
 8000d9e:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <main+0x288>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	f040 8113 	bne.w	8000fce <main+0x472>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000da8:	2201      	movs	r2, #1
 8000daa:	2120      	movs	r1, #32
 8000dac:	4815      	ldr	r0, [pc, #84]	; (8000e04 <main+0x2a8>)
 8000dae:	f002 fdc1 	bl	8003934 <HAL_GPIO_WritePin>

			 for(int i = 0; SOS[i] !='\0' ; i++){
 8000db2:	2300      	movs	r3, #0
 8000db4:	607b      	str	r3, [r7, #4]
 8000db6:	e102      	b.n	8000fbe <main+0x462>
 8000db8:	2000002c 	.word	0x2000002c
 8000dbc:	20000254 	.word	0x20000254
 8000dc0:	20002314 	.word	0x20002314
 8000dc4:	200002e4 	.word	0x200002e4
 8000dc8:	200000dc 	.word	0x200000dc
 8000dcc:	20000170 	.word	0x20000170
 8000dd0:	200001bc 	.word	0x200001bc
 8000dd4:	20000208 	.word	0x20000208
 8000dd8:	20002300 	.word	0x20002300
 8000ddc:	200002dc 	.word	0x200002dc
 8000de0:	20000000 	.word	0x20000000
 8000de4:	200002e0 	.word	0x200002e0
 8000de8:	20000001 	.word	0x20000001
 8000dec:	200022ff 	.word	0x200022ff
 8000df0:	200022fe 	.word	0x200022fe
 8000df4:	20000010 	.word	0x20000010
 8000df8:	200022fc 	.word	0x200022fc
 8000dfc:	080086a0 	.word	0x080086a0
 8000e00:	200022e8 	.word	0x200022e8
 8000e04:	48000400 	.word	0x48000400
 8000e08:	20002308 	.word	0x20002308
 8000e0c:	20000012 	.word	0x20000012
 8000e10:	20002304 	.word	0x20002304

				 if(SOS[i] == '.' && DOT == 1){
 8000e14:	4a74      	ldr	r2, [pc, #464]	; (8000fe8 <main+0x48c>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4413      	add	r3, r2
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b2e      	cmp	r3, #46	; 0x2e
 8000e1e:	d12a      	bne.n	8000e76 <main+0x31a>
 8000e20:	4b72      	ldr	r3, [pc, #456]	; (8000fec <main+0x490>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d126      	bne.n	8000e76 <main+0x31a>

					 htim2.Instance->CCR1 = 512 ;
 8000e28:	4b71      	ldr	r3, [pc, #452]	; (8000ff0 <main+0x494>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e30:	635a      	str	r2, [r3, #52]	; 0x34
					 timePassed = HAL_GetTick() - morse_current_time ;
 8000e32:	f001 f839 	bl	8001ea8 <HAL_GetTick>
 8000e36:	4602      	mov	r2, r0
 8000e38:	4b6e      	ldr	r3, [pc, #440]	; (8000ff4 <main+0x498>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	4a6e      	ldr	r2, [pc, #440]	; (8000ff8 <main+0x49c>)
 8000e40:	6013      	str	r3, [r2, #0]
					 if(HAL_GetTick() - morse_current_time >= time_unit ){
 8000e42:	f001 f831 	bl	8001ea8 <HAL_GetTick>
 8000e46:	4602      	mov	r2, r0
 8000e48:	4b6a      	ldr	r3, [pc, #424]	; (8000ff4 <main+0x498>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	4a6b      	ldr	r2, [pc, #428]	; (8000ffc <main+0x4a0>)
 8000e50:	8812      	ldrh	r2, [r2, #0]
 8000e52:	4293      	cmp	r3, r2
 8000e54:	f0c0 80a2 	bcc.w	8000f9c <main+0x440>
						 morse_current_time = HAL_GetTick() ;
 8000e58:	f001 f826 	bl	8001ea8 <HAL_GetTick>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	4a65      	ldr	r2, [pc, #404]	; (8000ff4 <main+0x498>)
 8000e60:	6013      	str	r3, [r2, #0]

						 DOT=0;
 8000e62:	4b62      	ldr	r3, [pc, #392]	; (8000fec <main+0x490>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	701a      	strb	r2, [r3, #0]
						 DASH =0 ;
 8000e68:	4b65      	ldr	r3, [pc, #404]	; (8001000 <main+0x4a4>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	701a      	strb	r2, [r3, #0]
						 space_in_letter = 1 ;
 8000e6e:	4b65      	ldr	r3, [pc, #404]	; (8001004 <main+0x4a8>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	701a      	strb	r2, [r3, #0]
					 if(HAL_GetTick() - morse_current_time >= time_unit ){
 8000e74:	e092      	b.n	8000f9c <main+0x440>

					 }
				 }
				 else if(SOS[i] =='-'  && DASH == 1){
 8000e76:	4a5c      	ldr	r2, [pc, #368]	; (8000fe8 <main+0x48c>)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	2b2d      	cmp	r3, #45	; 0x2d
 8000e80:	d125      	bne.n	8000ece <main+0x372>
 8000e82:	4b5f      	ldr	r3, [pc, #380]	; (8001000 <main+0x4a4>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d121      	bne.n	8000ece <main+0x372>

					 htim2.Instance->CCR1 = 512 ;
 8000e8a:	4b59      	ldr	r3, [pc, #356]	; (8000ff0 <main+0x494>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e92:	635a      	str	r2, [r3, #52]	; 0x34
					 if(HAL_GetTick() - morse_current_time >= 3*time_unit  ){
 8000e94:	f001 f808 	bl	8001ea8 <HAL_GetTick>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	4b56      	ldr	r3, [pc, #344]	; (8000ff4 <main+0x498>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	1ad2      	subs	r2, r2, r3
 8000ea0:	4b56      	ldr	r3, [pc, #344]	; (8000ffc <main+0x4a0>)
 8000ea2:	881b      	ldrh	r3, [r3, #0]
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	440b      	add	r3, r1
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d375      	bcc.n	8000f9c <main+0x440>
						 morse_current_time = HAL_GetTick() ;
 8000eb0:	f000 fffa 	bl	8001ea8 <HAL_GetTick>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	4a4f      	ldr	r2, [pc, #316]	; (8000ff4 <main+0x498>)
 8000eb8:	6013      	str	r3, [r2, #0]

						 DOT =  0 ;
 8000eba:	4b4c      	ldr	r3, [pc, #304]	; (8000fec <main+0x490>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	701a      	strb	r2, [r3, #0]
						 DASH = 0 ;
 8000ec0:	4b4f      	ldr	r3, [pc, #316]	; (8001000 <main+0x4a4>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	701a      	strb	r2, [r3, #0]
						 space_in_letter = 1 ;
 8000ec6:	4b4f      	ldr	r3, [pc, #316]	; (8001004 <main+0x4a8>)
 8000ec8:	2201      	movs	r2, #1
 8000eca:	701a      	strb	r2, [r3, #0]
					 if(HAL_GetTick() - morse_current_time >= 3*time_unit  ){
 8000ecc:	e066      	b.n	8000f9c <main+0x440>

					 }
				 }
				 else if(SOS[i]== ' '   && space_in_letter ==1){
 8000ece:	4a46      	ldr	r2, [pc, #280]	; (8000fe8 <main+0x48c>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	2b20      	cmp	r3, #32
 8000ed8:	d141      	bne.n	8000f5e <main+0x402>
 8000eda:	4b4a      	ldr	r3, [pc, #296]	; (8001004 <main+0x4a8>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d13d      	bne.n	8000f5e <main+0x402>

					 htim2.Instance->CCR1 = 0 ;
 8000ee2:	4b43      	ldr	r3, [pc, #268]	; (8000ff0 <main+0x494>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	635a      	str	r2, [r3, #52]	; 0x34

					 if(HAL_GetTick() - morse_current_time >= time_unit ){
 8000eea:	f000 ffdd 	bl	8001ea8 <HAL_GetTick>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	4b40      	ldr	r3, [pc, #256]	; (8000ff4 <main+0x498>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	4a41      	ldr	r2, [pc, #260]	; (8000ffc <main+0x4a0>)
 8000ef8:	8812      	ldrh	r2, [r2, #0]
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d34d      	bcc.n	8000f9a <main+0x43e>
						 morse_current_time = HAL_GetTick() ;
 8000efe:	f000 ffd3 	bl	8001ea8 <HAL_GetTick>
 8000f02:	4603      	mov	r3, r0
 8000f04:	4a3b      	ldr	r2, [pc, #236]	; (8000ff4 <main+0x498>)
 8000f06:	6013      	str	r3, [r2, #0]
						 space_in_letter = 0 ;
 8000f08:	4b3e      	ldr	r3, [pc, #248]	; (8001004 <main+0x4a8>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	701a      	strb	r2, [r3, #0]

						 //NEXT CHARACTER CHECK
						 next_char_check = i ;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	b2da      	uxtb	r2, r3
 8000f12:	4b3d      	ldr	r3, [pc, #244]	; (8001008 <main+0x4ac>)
 8000f14:	701a      	strb	r2, [r3, #0]
						 next_char_check++ ;
 8000f16:	4b3c      	ldr	r3, [pc, #240]	; (8001008 <main+0x4ac>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	4b3a      	ldr	r3, [pc, #232]	; (8001008 <main+0x4ac>)
 8000f20:	701a      	strb	r2, [r3, #0]
						 if(SOS[next_char_check] == '.' && DOT == 0 ){
 8000f22:	4b39      	ldr	r3, [pc, #228]	; (8001008 <main+0x4ac>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	461a      	mov	r2, r3
 8000f28:	4b2f      	ldr	r3, [pc, #188]	; (8000fe8 <main+0x48c>)
 8000f2a:	5c9b      	ldrb	r3, [r3, r2]
 8000f2c:	2b2e      	cmp	r3, #46	; 0x2e
 8000f2e:	d107      	bne.n	8000f40 <main+0x3e4>
 8000f30:	4b2e      	ldr	r3, [pc, #184]	; (8000fec <main+0x490>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d103      	bne.n	8000f40 <main+0x3e4>
							 DOT= 1 ;
 8000f38:	4b2c      	ldr	r3, [pc, #176]	; (8000fec <main+0x490>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	701a      	strb	r2, [r3, #0]
					 if(HAL_GetTick() - morse_current_time >= time_unit ){
 8000f3e:	e02c      	b.n	8000f9a <main+0x43e>
						 }else if(SOS[next_char_check] == '-' && DASH == 0){
 8000f40:	4b31      	ldr	r3, [pc, #196]	; (8001008 <main+0x4ac>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	461a      	mov	r2, r3
 8000f46:	4b28      	ldr	r3, [pc, #160]	; (8000fe8 <main+0x48c>)
 8000f48:	5c9b      	ldrb	r3, [r3, r2]
 8000f4a:	2b2d      	cmp	r3, #45	; 0x2d
 8000f4c:	d125      	bne.n	8000f9a <main+0x43e>
 8000f4e:	4b2c      	ldr	r3, [pc, #176]	; (8001000 <main+0x4a4>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d121      	bne.n	8000f9a <main+0x43e>
							 DASH =1;
 8000f56:	4b2a      	ldr	r3, [pc, #168]	; (8001000 <main+0x4a4>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	701a      	strb	r2, [r3, #0]
					 if(HAL_GetTick() - morse_current_time >= time_unit ){
 8000f5c:	e01d      	b.n	8000f9a <main+0x43e>

					 }

				 }
				 else{
					 if(SOS[i]== '\0'){
 8000f5e:	4a22      	ldr	r2, [pc, #136]	; (8000fe8 <main+0x48c>)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4413      	add	r3, r2
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d118      	bne.n	8000f9c <main+0x440>

						 htim2.Instance->CCR1 = 0 ;
 8000f6a:	4b21      	ldr	r3, [pc, #132]	; (8000ff0 <main+0x494>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	635a      	str	r2, [r3, #52]	; 0x34
						 if(HAL_GetTick() - morse_current_time >= 3*time_unit){
 8000f72:	f000 ff99 	bl	8001ea8 <HAL_GetTick>
 8000f76:	4602      	mov	r2, r0
 8000f78:	4b1e      	ldr	r3, [pc, #120]	; (8000ff4 <main+0x498>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	1ad2      	subs	r2, r2, r3
 8000f7e:	4b1f      	ldr	r3, [pc, #124]	; (8000ffc <main+0x4a0>)
 8000f80:	881b      	ldrh	r3, [r3, #0]
 8000f82:	4619      	mov	r1, r3
 8000f84:	460b      	mov	r3, r1
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	440b      	add	r3, r1
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d306      	bcc.n	8000f9c <main+0x440>
							morse_current_time = HAL_GetTick() ;
 8000f8e:	f000 ff8b 	bl	8001ea8 <HAL_GetTick>
 8000f92:	4603      	mov	r3, r0
 8000f94:	4a17      	ldr	r2, [pc, #92]	; (8000ff4 <main+0x498>)
 8000f96:	6013      	str	r3, [r2, #0]
 8000f98:	e000      	b.n	8000f9c <main+0x440>
					 if(HAL_GetTick() - morse_current_time >= time_unit ){
 8000f9a:	bf00      	nop

						 }
					 }
				 }
				 if(next_char_checked == 1){
 8000f9c:	4b1b      	ldr	r3, [pc, #108]	; (800100c <main+0x4b0>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d109      	bne.n	8000fb8 <main+0x45c>
					 character = SOS[i++] ;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	1c5a      	adds	r2, r3, #1
 8000fa8:	607a      	str	r2, [r7, #4]
 8000faa:	4a0f      	ldr	r2, [pc, #60]	; (8000fe8 <main+0x48c>)
 8000fac:	5cd2      	ldrb	r2, [r2, r3]
 8000fae:	4b18      	ldr	r3, [pc, #96]	; (8001010 <main+0x4b4>)
 8000fb0:	701a      	strb	r2, [r3, #0]
					 next_char_checked = 0;
 8000fb2:	4b16      	ldr	r3, [pc, #88]	; (800100c <main+0x4b0>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	701a      	strb	r2, [r3, #0]
			 for(int i = 0; SOS[i] !='\0' ; i++){
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	607b      	str	r3, [r7, #4]
 8000fbe:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <main+0x48c>)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	f47f af24 	bne.w	8000e14 <main+0x2b8>
 8000fcc:	e604      	b.n	8000bd8 <main+0x7c>
				 }
			 }
		 }
		 else{
			 if(em_count == 2){ // CUSTOM MORSE
 8000fce:	4b11      	ldr	r3, [pc, #68]	; (8001014 <main+0x4b8>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	f47f ae00 	bne.w	8000bd8 <main+0x7c>
				 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000fd8:	2201      	movs	r2, #1
 8000fda:	2120      	movs	r1, #32
 8000fdc:	480e      	ldr	r0, [pc, #56]	; (8001018 <main+0x4bc>)
 8000fde:	f002 fca9 	bl	8003934 <HAL_GPIO_WritePin>
 8000fe2:	e5f9      	b.n	8000bd8 <main+0x7c>
			 if(LED_ON){ //LED_on =?
 8000fe4:	bf00      	nop
	  system_state_update() ;
 8000fe6:	e5f7      	b.n	8000bd8 <main+0x7c>
 8000fe8:	20000018 	.word	0x20000018
 8000fec:	20000016 	.word	0x20000016
 8000ff0:	20000170 	.word	0x20000170
 8000ff4:	2000230c 	.word	0x2000230c
 8000ff8:	20002308 	.word	0x20002308
 8000ffc:	20000014 	.word	0x20000014
 8001000:	20000017 	.word	0x20000017
 8001004:	20002310 	.word	0x20002310
 8001008:	20002311 	.word	0x20002311
 800100c:	20002312 	.word	0x20002312
 8001010:	20002313 	.word	0x20002313
 8001014:	200002e0 	.word	0x200002e0
 8001018:	48000400 	.word	0x48000400

0800101c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b0a6      	sub	sp, #152	; 0x98
 8001020:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001022:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001026:	2228      	movs	r2, #40	; 0x28
 8001028:	2100      	movs	r1, #0
 800102a:	4618      	mov	r0, r3
 800102c:	f006 fe00 	bl	8007c30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001030:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001040:	1d3b      	adds	r3, r7, #4
 8001042:	2258      	movs	r2, #88	; 0x58
 8001044:	2100      	movs	r1, #0
 8001046:	4618      	mov	r0, r3
 8001048:	f006 fdf2 	bl	8007c30 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800104c:	2302      	movs	r3, #2
 800104e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001050:	2301      	movs	r3, #1
 8001052:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001054:	2310      	movs	r3, #16
 8001056:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800105a:	2302      	movs	r3, #2
 800105c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001060:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001064:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001068:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800106c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001070:	2300      	movs	r3, #0
 8001072:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001076:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800107a:	4618      	mov	r0, r3
 800107c:	f002 fc96 	bl	80039ac <HAL_RCC_OscConfig>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001086:	f000 fb6b 	bl	8001760 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800108a:	230f      	movs	r3, #15
 800108c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800108e:	2302      	movs	r3, #2
 8001090:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001092:	2300      	movs	r3, #0
 8001094:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001096:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800109a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800109c:	2300      	movs	r3, #0
 800109e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010a0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80010a4:	2102      	movs	r1, #2
 80010a6:	4618      	mov	r0, r3
 80010a8:	f003 fcd4 	bl	8004a54 <HAL_RCC_ClockConfig>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80010b2:	f000 fb55 	bl	8001760 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12
 80010b6:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <SystemClock_Config+0xcc>)
 80010b8:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010ba:	2300      	movs	r3, #0
 80010bc:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80010be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 80010c4:	2300      	movs	r3, #0
 80010c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 80010c8:	2300      	movs	r3, #0
 80010ca:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	4618      	mov	r0, r3
 80010d0:	f003 fef6 	bl	8004ec0 <HAL_RCCEx_PeriphCLKConfig>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80010da:	f000 fb41 	bl	8001760 <Error_Handler>
  }
}
 80010de:	bf00      	nop
 80010e0:	3798      	adds	r7, #152	; 0x98
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	00300082 	.word	0x00300082

080010ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08a      	sub	sp, #40	; 0x28
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010f2:	f107 031c 	add.w	r3, r7, #28
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
 800110c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800110e:	4b2e      	ldr	r3, [pc, #184]	; (80011c8 <MX_ADC1_Init+0xdc>)
 8001110:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001114:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001116:	4b2c      	ldr	r3, [pc, #176]	; (80011c8 <MX_ADC1_Init+0xdc>)
 8001118:	2200      	movs	r2, #0
 800111a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800111c:	4b2a      	ldr	r3, [pc, #168]	; (80011c8 <MX_ADC1_Init+0xdc>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001122:	4b29      	ldr	r3, [pc, #164]	; (80011c8 <MX_ADC1_Init+0xdc>)
 8001124:	2200      	movs	r2, #0
 8001126:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001128:	4b27      	ldr	r3, [pc, #156]	; (80011c8 <MX_ADC1_Init+0xdc>)
 800112a:	2201      	movs	r2, #1
 800112c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800112e:	4b26      	ldr	r3, [pc, #152]	; (80011c8 <MX_ADC1_Init+0xdc>)
 8001130:	2200      	movs	r2, #0
 8001132:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001136:	4b24      	ldr	r3, [pc, #144]	; (80011c8 <MX_ADC1_Init+0xdc>)
 8001138:	2200      	movs	r2, #0
 800113a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800113c:	4b22      	ldr	r3, [pc, #136]	; (80011c8 <MX_ADC1_Init+0xdc>)
 800113e:	2201      	movs	r2, #1
 8001140:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001142:	4b21      	ldr	r3, [pc, #132]	; (80011c8 <MX_ADC1_Init+0xdc>)
 8001144:	2200      	movs	r2, #0
 8001146:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001148:	4b1f      	ldr	r3, [pc, #124]	; (80011c8 <MX_ADC1_Init+0xdc>)
 800114a:	2201      	movs	r2, #1
 800114c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800114e:	4b1e      	ldr	r3, [pc, #120]	; (80011c8 <MX_ADC1_Init+0xdc>)
 8001150:	2201      	movs	r2, #1
 8001152:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001156:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <MX_ADC1_Init+0xdc>)
 8001158:	2204      	movs	r2, #4
 800115a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800115c:	4b1a      	ldr	r3, [pc, #104]	; (80011c8 <MX_ADC1_Init+0xdc>)
 800115e:	2200      	movs	r2, #0
 8001160:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001162:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <MX_ADC1_Init+0xdc>)
 8001164:	2200      	movs	r2, #0
 8001166:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001168:	4817      	ldr	r0, [pc, #92]	; (80011c8 <MX_ADC1_Init+0xdc>)
 800116a:	f000 fee1 	bl	8001f30 <HAL_ADC_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001174:	f000 faf4 	bl	8001760 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001178:	2300      	movs	r3, #0
 800117a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800117c:	f107 031c 	add.w	r3, r7, #28
 8001180:	4619      	mov	r1, r3
 8001182:	4811      	ldr	r0, [pc, #68]	; (80011c8 <MX_ADC1_Init+0xdc>)
 8001184:	f001 fcd6 	bl	8002b34 <HAL_ADCEx_MultiModeConfigChannel>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800118e:	f000 fae7 	bl	8001760 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001192:	2301      	movs	r3, #1
 8001194:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001196:	2301      	movs	r3, #1
 8001198:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800119e:	2300      	movs	r3, #0
 80011a0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011a2:	2300      	movs	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	4619      	mov	r1, r3
 80011ae:	4806      	ldr	r0, [pc, #24]	; (80011c8 <MX_ADC1_Init+0xdc>)
 80011b0:	f001 f9d4 	bl	800255c <HAL_ADC_ConfigChannel>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80011ba:	f000 fad1 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	3728      	adds	r7, #40	; 0x28
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	200000dc 	.word	0x200000dc

080011cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08e      	sub	sp, #56	; 0x38
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]
 80011de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e0:	f107 031c 	add.w	r3, r7, #28
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ec:	463b      	mov	r3, r7
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]
 80011f8:	611a      	str	r2, [r3, #16]
 80011fa:	615a      	str	r2, [r3, #20]
 80011fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011fe:	4b33      	ldr	r3, [pc, #204]	; (80012cc <MX_TIM2_Init+0x100>)
 8001200:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001204:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36;
 8001206:	4b31      	ldr	r3, [pc, #196]	; (80012cc <MX_TIM2_Init+0x100>)
 8001208:	2224      	movs	r2, #36	; 0x24
 800120a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800120c:	4b2f      	ldr	r3, [pc, #188]	; (80012cc <MX_TIM2_Init+0x100>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 512;
 8001212:	4b2e      	ldr	r3, [pc, #184]	; (80012cc <MX_TIM2_Init+0x100>)
 8001214:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001218:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800121a:	4b2c      	ldr	r3, [pc, #176]	; (80012cc <MX_TIM2_Init+0x100>)
 800121c:	2200      	movs	r2, #0
 800121e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001220:	4b2a      	ldr	r3, [pc, #168]	; (80012cc <MX_TIM2_Init+0x100>)
 8001222:	2200      	movs	r2, #0
 8001224:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001226:	4829      	ldr	r0, [pc, #164]	; (80012cc <MX_TIM2_Init+0x100>)
 8001228:	f004 f868 	bl	80052fc <HAL_TIM_Base_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001232:	f000 fa95 	bl	8001760 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001236:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800123c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001240:	4619      	mov	r1, r3
 8001242:	4822      	ldr	r0, [pc, #136]	; (80012cc <MX_TIM2_Init+0x100>)
 8001244:	f004 fb32 	bl	80058ac <HAL_TIM_ConfigClockSource>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800124e:	f000 fa87 	bl	8001760 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001252:	481e      	ldr	r0, [pc, #120]	; (80012cc <MX_TIM2_Init+0x100>)
 8001254:	f004 f8a9 	bl	80053aa <HAL_TIM_PWM_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800125e:	f000 fa7f 	bl	8001760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001266:	2300      	movs	r3, #0
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800126a:	f107 031c 	add.w	r3, r7, #28
 800126e:	4619      	mov	r1, r3
 8001270:	4816      	ldr	r0, [pc, #88]	; (80012cc <MX_TIM2_Init+0x100>)
 8001272:	f005 f849 	bl	8006308 <HAL_TIMEx_MasterConfigSynchronization>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800127c:	f000 fa70 	bl	8001760 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001280:	2360      	movs	r3, #96	; 0x60
 8001282:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001288:	2300      	movs	r3, #0
 800128a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800128c:	2300      	movs	r3, #0
 800128e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001290:	463b      	mov	r3, r7
 8001292:	2200      	movs	r2, #0
 8001294:	4619      	mov	r1, r3
 8001296:	480d      	ldr	r0, [pc, #52]	; (80012cc <MX_TIM2_Init+0x100>)
 8001298:	f004 f9f4 	bl	8005684 <HAL_TIM_PWM_ConfigChannel>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80012a2:	f000 fa5d 	bl	8001760 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012a6:	463b      	mov	r3, r7
 80012a8:	220c      	movs	r2, #12
 80012aa:	4619      	mov	r1, r3
 80012ac:	4807      	ldr	r0, [pc, #28]	; (80012cc <MX_TIM2_Init+0x100>)
 80012ae:	f004 f9e9 	bl	8005684 <HAL_TIM_PWM_ConfigChannel>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80012b8:	f000 fa52 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80012bc:	4803      	ldr	r0, [pc, #12]	; (80012cc <MX_TIM2_Init+0x100>)
 80012be:	f000 fb27 	bl	8001910 <HAL_TIM_MspPostInit>

}
 80012c2:	bf00      	nop
 80012c4:	3738      	adds	r7, #56	; 0x38
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000170 	.word	0x20000170

080012d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08e      	sub	sp, #56	; 0x38
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e4:	f107 031c 	add.w	r3, r7, #28
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012f0:	463b      	mov	r3, r7
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]
 80012f8:	609a      	str	r2, [r3, #8]
 80012fa:	60da      	str	r2, [r3, #12]
 80012fc:	611a      	str	r2, [r3, #16]
 80012fe:	615a      	str	r2, [r3, #20]
 8001300:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001302:	4b2d      	ldr	r3, [pc, #180]	; (80013b8 <MX_TIM3_Init+0xe8>)
 8001304:	4a2d      	ldr	r2, [pc, #180]	; (80013bc <MX_TIM3_Init+0xec>)
 8001306:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 36;
 8001308:	4b2b      	ldr	r3, [pc, #172]	; (80013b8 <MX_TIM3_Init+0xe8>)
 800130a:	2224      	movs	r2, #36	; 0x24
 800130c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130e:	4b2a      	ldr	r3, [pc, #168]	; (80013b8 <MX_TIM3_Init+0xe8>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 512;
 8001314:	4b28      	ldr	r3, [pc, #160]	; (80013b8 <MX_TIM3_Init+0xe8>)
 8001316:	f44f 7200 	mov.w	r2, #512	; 0x200
 800131a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800131c:	4b26      	ldr	r3, [pc, #152]	; (80013b8 <MX_TIM3_Init+0xe8>)
 800131e:	2200      	movs	r2, #0
 8001320:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001322:	4b25      	ldr	r3, [pc, #148]	; (80013b8 <MX_TIM3_Init+0xe8>)
 8001324:	2200      	movs	r2, #0
 8001326:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001328:	4823      	ldr	r0, [pc, #140]	; (80013b8 <MX_TIM3_Init+0xe8>)
 800132a:	f003 ffe7 	bl	80052fc <HAL_TIM_Base_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001334:	f000 fa14 	bl	8001760 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001338:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800133c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800133e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001342:	4619      	mov	r1, r3
 8001344:	481c      	ldr	r0, [pc, #112]	; (80013b8 <MX_TIM3_Init+0xe8>)
 8001346:	f004 fab1 	bl	80058ac <HAL_TIM_ConfigClockSource>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001350:	f000 fa06 	bl	8001760 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001354:	4818      	ldr	r0, [pc, #96]	; (80013b8 <MX_TIM3_Init+0xe8>)
 8001356:	f004 f828 	bl	80053aa <HAL_TIM_PWM_Init>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001360:	f000 f9fe 	bl	8001760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001364:	2300      	movs	r3, #0
 8001366:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001368:	2300      	movs	r3, #0
 800136a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800136c:	f107 031c 	add.w	r3, r7, #28
 8001370:	4619      	mov	r1, r3
 8001372:	4811      	ldr	r0, [pc, #68]	; (80013b8 <MX_TIM3_Init+0xe8>)
 8001374:	f004 ffc8 	bl	8006308 <HAL_TIMEx_MasterConfigSynchronization>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800137e:	f000 f9ef 	bl	8001760 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001382:	2360      	movs	r3, #96	; 0x60
 8001384:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800138a:	2300      	movs	r3, #0
 800138c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800138e:	2300      	movs	r3, #0
 8001390:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001392:	463b      	mov	r3, r7
 8001394:	220c      	movs	r2, #12
 8001396:	4619      	mov	r1, r3
 8001398:	4807      	ldr	r0, [pc, #28]	; (80013b8 <MX_TIM3_Init+0xe8>)
 800139a:	f004 f973 	bl	8005684 <HAL_TIM_PWM_ConfigChannel>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80013a4:	f000 f9dc 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013a8:	4803      	ldr	r0, [pc, #12]	; (80013b8 <MX_TIM3_Init+0xe8>)
 80013aa:	f000 fab1 	bl	8001910 <HAL_TIM_MspPostInit>

}
 80013ae:	bf00      	nop
 80013b0:	3738      	adds	r7, #56	; 0x38
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	200001bc 	.word	0x200001bc
 80013bc:	40000400 	.word	0x40000400

080013c0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08e      	sub	sp, #56	; 0x38
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d4:	f107 031c 	add.w	r3, r7, #28
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013e0:	463b      	mov	r3, r7
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	60da      	str	r2, [r3, #12]
 80013ec:	611a      	str	r2, [r3, #16]
 80013ee:	615a      	str	r2, [r3, #20]
 80013f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013f2:	4b2d      	ldr	r3, [pc, #180]	; (80014a8 <MX_TIM4_Init+0xe8>)
 80013f4:	4a2d      	ldr	r2, [pc, #180]	; (80014ac <MX_TIM4_Init+0xec>)
 80013f6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 36;
 80013f8:	4b2b      	ldr	r3, [pc, #172]	; (80014a8 <MX_TIM4_Init+0xe8>)
 80013fa:	2224      	movs	r2, #36	; 0x24
 80013fc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fe:	4b2a      	ldr	r3, [pc, #168]	; (80014a8 <MX_TIM4_Init+0xe8>)
 8001400:	2200      	movs	r2, #0
 8001402:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001404:	4b28      	ldr	r3, [pc, #160]	; (80014a8 <MX_TIM4_Init+0xe8>)
 8001406:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800140a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800140c:	4b26      	ldr	r3, [pc, #152]	; (80014a8 <MX_TIM4_Init+0xe8>)
 800140e:	2200      	movs	r2, #0
 8001410:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001412:	4b25      	ldr	r3, [pc, #148]	; (80014a8 <MX_TIM4_Init+0xe8>)
 8001414:	2200      	movs	r2, #0
 8001416:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001418:	4823      	ldr	r0, [pc, #140]	; (80014a8 <MX_TIM4_Init+0xe8>)
 800141a:	f003 ff6f 	bl	80052fc <HAL_TIM_Base_Init>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001424:	f000 f99c 	bl	8001760 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001428:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800142c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800142e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001432:	4619      	mov	r1, r3
 8001434:	481c      	ldr	r0, [pc, #112]	; (80014a8 <MX_TIM4_Init+0xe8>)
 8001436:	f004 fa39 	bl	80058ac <HAL_TIM_ConfigClockSource>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001440:	f000 f98e 	bl	8001760 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001444:	4818      	ldr	r0, [pc, #96]	; (80014a8 <MX_TIM4_Init+0xe8>)
 8001446:	f003 ffb0 	bl	80053aa <HAL_TIM_PWM_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001450:	f000 f986 	bl	8001760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001454:	2300      	movs	r3, #0
 8001456:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001458:	2300      	movs	r3, #0
 800145a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800145c:	f107 031c 	add.w	r3, r7, #28
 8001460:	4619      	mov	r1, r3
 8001462:	4811      	ldr	r0, [pc, #68]	; (80014a8 <MX_TIM4_Init+0xe8>)
 8001464:	f004 ff50 	bl	8006308 <HAL_TIMEx_MasterConfigSynchronization>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800146e:	f000 f977 	bl	8001760 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001472:	2360      	movs	r3, #96	; 0x60
 8001474:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800147a:	2300      	movs	r3, #0
 800147c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800147e:	2300      	movs	r3, #0
 8001480:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001482:	463b      	mov	r3, r7
 8001484:	2200      	movs	r2, #0
 8001486:	4619      	mov	r1, r3
 8001488:	4807      	ldr	r0, [pc, #28]	; (80014a8 <MX_TIM4_Init+0xe8>)
 800148a:	f004 f8fb 	bl	8005684 <HAL_TIM_PWM_ConfigChannel>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001494:	f000 f964 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001498:	4803      	ldr	r0, [pc, #12]	; (80014a8 <MX_TIM4_Init+0xe8>)
 800149a:	f000 fa39 	bl	8001910 <HAL_TIM_MspPostInit>

}
 800149e:	bf00      	nop
 80014a0:	3738      	adds	r7, #56	; 0x38
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000208 	.word	0x20000208
 80014ac:	40000800 	.word	0x40000800

080014b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014b4:	4b15      	ldr	r3, [pc, #84]	; (800150c <MX_USART2_UART_Init+0x5c>)
 80014b6:	4a16      	ldr	r2, [pc, #88]	; (8001510 <MX_USART2_UART_Init+0x60>)
 80014b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 80014ba:	4b14      	ldr	r3, [pc, #80]	; (800150c <MX_USART2_UART_Init+0x5c>)
 80014bc:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80014c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80014c2:	4b12      	ldr	r3, [pc, #72]	; (800150c <MX_USART2_UART_Init+0x5c>)
 80014c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014c8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 80014ca:	4b10      	ldr	r3, [pc, #64]	; (800150c <MX_USART2_UART_Init+0x5c>)
 80014cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80014d2:	4b0e      	ldr	r3, [pc, #56]	; (800150c <MX_USART2_UART_Init+0x5c>)
 80014d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014d8:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014da:	4b0c      	ldr	r3, [pc, #48]	; (800150c <MX_USART2_UART_Init+0x5c>)
 80014dc:	220c      	movs	r2, #12
 80014de:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014e0:	4b0a      	ldr	r3, [pc, #40]	; (800150c <MX_USART2_UART_Init+0x5c>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014e6:	4b09      	ldr	r3, [pc, #36]	; (800150c <MX_USART2_UART_Init+0x5c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ec:	4b07      	ldr	r3, [pc, #28]	; (800150c <MX_USART2_UART_Init+0x5c>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014f2:	4b06      	ldr	r3, [pc, #24]	; (800150c <MX_USART2_UART_Init+0x5c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014f8:	4804      	ldr	r0, [pc, #16]	; (800150c <MX_USART2_UART_Init+0x5c>)
 80014fa:	f004 ff91 	bl	8006420 <HAL_UART_Init>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001504:	f000 f92c 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001508:	bf00      	nop
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000254 	.word	0x20000254
 8001510:	40004400 	.word	0x40004400

08001514 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800151a:	4b0c      	ldr	r3, [pc, #48]	; (800154c <MX_DMA_Init+0x38>)
 800151c:	695b      	ldr	r3, [r3, #20]
 800151e:	4a0b      	ldr	r2, [pc, #44]	; (800154c <MX_DMA_Init+0x38>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	6153      	str	r3, [r2, #20]
 8001526:	4b09      	ldr	r3, [pc, #36]	; (800154c <MX_DMA_Init+0x38>)
 8001528:	695b      	ldr	r3, [r3, #20]
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	607b      	str	r3, [r7, #4]
 8001530:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001532:	2200      	movs	r2, #0
 8001534:	2100      	movs	r1, #0
 8001536:	200b      	movs	r0, #11
 8001538:	f001 fdf9 	bl	800312e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800153c:	200b      	movs	r0, #11
 800153e:	f001 fe12 	bl	8003166 <HAL_NVIC_EnableIRQ>

}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40021000 	.word	0x40021000

08001550 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08a      	sub	sp, #40	; 0x28
 8001554:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001556:	f107 0314 	add.w	r3, r7, #20
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]
 8001562:	60da      	str	r2, [r3, #12]
 8001564:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001566:	4b49      	ldr	r3, [pc, #292]	; (800168c <MX_GPIO_Init+0x13c>)
 8001568:	695b      	ldr	r3, [r3, #20]
 800156a:	4a48      	ldr	r2, [pc, #288]	; (800168c <MX_GPIO_Init+0x13c>)
 800156c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001570:	6153      	str	r3, [r2, #20]
 8001572:	4b46      	ldr	r3, [pc, #280]	; (800168c <MX_GPIO_Init+0x13c>)
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800157e:	4b43      	ldr	r3, [pc, #268]	; (800168c <MX_GPIO_Init+0x13c>)
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	4a42      	ldr	r2, [pc, #264]	; (800168c <MX_GPIO_Init+0x13c>)
 8001584:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001588:	6153      	str	r3, [r2, #20]
 800158a:	4b40      	ldr	r3, [pc, #256]	; (800168c <MX_GPIO_Init+0x13c>)
 800158c:	695b      	ldr	r3, [r3, #20]
 800158e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001596:	4b3d      	ldr	r3, [pc, #244]	; (800168c <MX_GPIO_Init+0x13c>)
 8001598:	695b      	ldr	r3, [r3, #20]
 800159a:	4a3c      	ldr	r2, [pc, #240]	; (800168c <MX_GPIO_Init+0x13c>)
 800159c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015a0:	6153      	str	r3, [r2, #20]
 80015a2:	4b3a      	ldr	r3, [pc, #232]	; (800168c <MX_GPIO_Init+0x13c>)
 80015a4:	695b      	ldr	r3, [r3, #20]
 80015a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015aa:	60bb      	str	r3, [r7, #8]
 80015ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ae:	4b37      	ldr	r3, [pc, #220]	; (800168c <MX_GPIO_Init+0x13c>)
 80015b0:	695b      	ldr	r3, [r3, #20]
 80015b2:	4a36      	ldr	r2, [pc, #216]	; (800168c <MX_GPIO_Init+0x13c>)
 80015b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015b8:	6153      	str	r3, [r2, #20]
 80015ba:	4b34      	ldr	r3, [pc, #208]	; (800168c <MX_GPIO_Init+0x13c>)
 80015bc:	695b      	ldr	r3, [r3, #20]
 80015be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015c2:	607b      	str	r3, [r7, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_D3_Pin|LED_D4_Pin|LED_D5_Pin, GPIO_PIN_RESET);
 80015c6:	2200      	movs	r2, #0
 80015c8:	f44f 6186 	mov.w	r1, #1072	; 0x430
 80015cc:	4830      	ldr	r0, [pc, #192]	; (8001690 <MX_GPIO_Init+0x140>)
 80015ce:	f002 f9b1 	bl	8003934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_D2_GPIO_Port, LED_D2_Pin, GPIO_PIN_RESET);
 80015d2:	2200      	movs	r2, #0
 80015d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015dc:	f002 f9aa 	bl	8003934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015e6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80015ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015f0:	f107 0314 	add.w	r3, r7, #20
 80015f4:	4619      	mov	r1, r3
 80015f6:	4827      	ldr	r0, [pc, #156]	; (8001694 <MX_GPIO_Init+0x144>)
 80015f8:	f001 fffa 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015fc:	23c0      	movs	r3, #192	; 0xc0
 80015fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001600:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001606:	2301      	movs	r3, #1
 8001608:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160a:	f107 0314 	add.w	r3, r7, #20
 800160e:	4619      	mov	r1, r3
 8001610:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001614:	f001 ffec 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_D3_Pin LED_D4_Pin LED_D5_Pin */
  GPIO_InitStruct.Pin = LED_D3_Pin|LED_D4_Pin|LED_D5_Pin;
 8001618:	f44f 6386 	mov.w	r3, #1072	; 0x430
 800161c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161e:	2301      	movs	r3, #1
 8001620:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001626:	2300      	movs	r3, #0
 8001628:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162a:	f107 0314 	add.w	r3, r7, #20
 800162e:	4619      	mov	r1, r3
 8001630:	4817      	ldr	r0, [pc, #92]	; (8001690 <MX_GPIO_Init+0x140>)
 8001632:	f001 ffdd 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_D2_Pin */
  GPIO_InitStruct.Pin = LED_D2_Pin;
 8001636:	f44f 7380 	mov.w	r3, #256	; 0x100
 800163a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163c:	2301      	movs	r3, #1
 800163e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001644:	2300      	movs	r3, #0
 8001646:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_D2_GPIO_Port, &GPIO_InitStruct);
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	4619      	mov	r1, r3
 800164e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001652:	f001 ffcd 	bl	80035f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001656:	f44f 7380 	mov.w	r3, #256	; 0x100
 800165a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800165c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001660:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001662:	2301      	movs	r3, #1
 8001664:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001666:	f107 0314 	add.w	r3, r7, #20
 800166a:	4619      	mov	r1, r3
 800166c:	4808      	ldr	r0, [pc, #32]	; (8001690 <MX_GPIO_Init+0x140>)
 800166e:	f001 ffbf 	bl	80035f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001672:	2200      	movs	r2, #0
 8001674:	2100      	movs	r1, #0
 8001676:	2017      	movs	r0, #23
 8001678:	f001 fd59 	bl	800312e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800167c:	2017      	movs	r0, #23
 800167e:	f001 fd72 	bl	8003166 <HAL_NVIC_EnableIRQ>

}
 8001682:	bf00      	nop
 8001684:	3728      	adds	r7, #40	; 0x28
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40021000 	.word	0x40021000
 8001690:	48000400 	.word	0x48000400
 8001694:	48000800 	.word	0x48000800

08001698 <MF_mode_LED>:

/* USER CODE BEGIN 4 */
// FUNCTIONS
void MF_mode_LED(){
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800169c:	2201      	movs	r2, #1
 800169e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a6:	f002 f945 	bl	8003934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80016aa:	2200      	movs	r2, #0
 80016ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016b0:	4807      	ldr	r0, [pc, #28]	; (80016d0 <MF_mode_LED+0x38>)
 80016b2:	f002 f93f 	bl	8003934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2110      	movs	r1, #16
 80016ba:	4805      	ldr	r0, [pc, #20]	; (80016d0 <MF_mode_LED+0x38>)
 80016bc:	f002 f93a 	bl	8003934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80016c0:	2200      	movs	r2, #0
 80016c2:	2120      	movs	r1, #32
 80016c4:	4802      	ldr	r0, [pc, #8]	; (80016d0 <MF_mode_LED+0x38>)
 80016c6:	f002 f935 	bl	8003934 <HAL_GPIO_WritePin>
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	48000400 	.word	0x48000400

080016d4 <ME_mode_LED>:

void ME_mode_LED(){
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80016d8:	2200      	movs	r2, #0
 80016da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e2:	f002 f927 	bl	8003934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80016e6:	2201      	movs	r2, #1
 80016e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016ec:	4804      	ldr	r0, [pc, #16]	; (8001700 <ME_mode_LED+0x2c>)
 80016ee:	f002 f921 	bl	8003934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2110      	movs	r1, #16
 80016f6:	4802      	ldr	r0, [pc, #8]	; (8001700 <ME_mode_LED+0x2c>)
 80016f8:	f002 f91c 	bl	8003934 <HAL_GPIO_WritePin>
}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	48000400 	.word	0x48000400

08001704 <MM_mode_LED>:

void MM_mode_LED(){
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001708:	2200      	movs	r2, #0
 800170a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800170e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001712:	f002 f90f 	bl	8003934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001716:	2200      	movs	r2, #0
 8001718:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800171c:	4807      	ldr	r0, [pc, #28]	; (800173c <MM_mode_LED+0x38>)
 800171e:	f002 f909 	bl	8003934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001722:	2201      	movs	r2, #1
 8001724:	2110      	movs	r1, #16
 8001726:	4805      	ldr	r0, [pc, #20]	; (800173c <MM_mode_LED+0x38>)
 8001728:	f002 f904 	bl	8003934 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800172c:	2200      	movs	r2, #0
 800172e:	2120      	movs	r1, #32
 8001730:	4802      	ldr	r0, [pc, #8]	; (800173c <MM_mode_LED+0x38>)
 8001732:	f002 f8ff 	bl	8003934 <HAL_GPIO_WritePin>
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	48000400 	.word	0x48000400

08001740 <HAL_ADC_ConvCpltCallback>:


// adc buffer filled by dma circular sampling
// data should not be processed in the interrupt, it makes rest of the
// progam inaccessible
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
	adc_conv_complete = 1 ;
 8001748:	4b04      	ldr	r3, [pc, #16]	; (800175c <HAL_ADC_ConvCpltCallback+0x1c>)
 800174a:	2201      	movs	r2, #1
 800174c:	701a      	strb	r2, [r3, #0]

}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	200022fa 	.word	0x200022fa

08001760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001764:	b672      	cpsid	i
}
 8001766:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001768:	e7fe      	b.n	8001768 <Error_Handler+0x8>
	...

0800176c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001772:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <HAL_MspInit+0x44>)
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	4a0e      	ldr	r2, [pc, #56]	; (80017b0 <HAL_MspInit+0x44>)
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	6193      	str	r3, [r2, #24]
 800177e:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <HAL_MspInit+0x44>)
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	607b      	str	r3, [r7, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800178a:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <HAL_MspInit+0x44>)
 800178c:	69db      	ldr	r3, [r3, #28]
 800178e:	4a08      	ldr	r2, [pc, #32]	; (80017b0 <HAL_MspInit+0x44>)
 8001790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001794:	61d3      	str	r3, [r2, #28]
 8001796:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <HAL_MspInit+0x44>)
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179e:	603b      	str	r3, [r7, #0]
 80017a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017a2:	2007      	movs	r0, #7
 80017a4:	f001 fcb8 	bl	8003118 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017a8:	bf00      	nop
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40021000 	.word	0x40021000

080017b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08a      	sub	sp, #40	; 0x28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017d4:	d14c      	bne.n	8001870 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80017d6:	4b28      	ldr	r3, [pc, #160]	; (8001878 <HAL_ADC_MspInit+0xc4>)
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	4a27      	ldr	r2, [pc, #156]	; (8001878 <HAL_ADC_MspInit+0xc4>)
 80017dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e0:	6153      	str	r3, [r2, #20]
 80017e2:	4b25      	ldr	r3, [pc, #148]	; (8001878 <HAL_ADC_MspInit+0xc4>)
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ea:	613b      	str	r3, [r7, #16]
 80017ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ee:	4b22      	ldr	r3, [pc, #136]	; (8001878 <HAL_ADC_MspInit+0xc4>)
 80017f0:	695b      	ldr	r3, [r3, #20]
 80017f2:	4a21      	ldr	r2, [pc, #132]	; (8001878 <HAL_ADC_MspInit+0xc4>)
 80017f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f8:	6153      	str	r3, [r2, #20]
 80017fa:	4b1f      	ldr	r3, [pc, #124]	; (8001878 <HAL_ADC_MspInit+0xc4>)
 80017fc:	695b      	ldr	r3, [r3, #20]
 80017fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001806:	2301      	movs	r3, #1
 8001808:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800180a:	2303      	movs	r3, #3
 800180c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001812:	f107 0314 	add.w	r3, r7, #20
 8001816:	4619      	mov	r1, r3
 8001818:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800181c:	f001 fee8 	bl	80035f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001820:	4b16      	ldr	r3, [pc, #88]	; (800187c <HAL_ADC_MspInit+0xc8>)
 8001822:	4a17      	ldr	r2, [pc, #92]	; (8001880 <HAL_ADC_MspInit+0xcc>)
 8001824:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001826:	4b15      	ldr	r3, [pc, #84]	; (800187c <HAL_ADC_MspInit+0xc8>)
 8001828:	2200      	movs	r2, #0
 800182a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800182c:	4b13      	ldr	r3, [pc, #76]	; (800187c <HAL_ADC_MspInit+0xc8>)
 800182e:	2200      	movs	r2, #0
 8001830:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001832:	4b12      	ldr	r3, [pc, #72]	; (800187c <HAL_ADC_MspInit+0xc8>)
 8001834:	2280      	movs	r2, #128	; 0x80
 8001836:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001838:	4b10      	ldr	r3, [pc, #64]	; (800187c <HAL_ADC_MspInit+0xc8>)
 800183a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800183e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001840:	4b0e      	ldr	r3, [pc, #56]	; (800187c <HAL_ADC_MspInit+0xc8>)
 8001842:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001846:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001848:	4b0c      	ldr	r3, [pc, #48]	; (800187c <HAL_ADC_MspInit+0xc8>)
 800184a:	2220      	movs	r2, #32
 800184c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800184e:	4b0b      	ldr	r3, [pc, #44]	; (800187c <HAL_ADC_MspInit+0xc8>)
 8001850:	2200      	movs	r2, #0
 8001852:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001854:	4809      	ldr	r0, [pc, #36]	; (800187c <HAL_ADC_MspInit+0xc8>)
 8001856:	f001 fca0 	bl	800319a <HAL_DMA_Init>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8001860:	f7ff ff7e 	bl	8001760 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4a05      	ldr	r2, [pc, #20]	; (800187c <HAL_ADC_MspInit+0xc8>)
 8001868:	639a      	str	r2, [r3, #56]	; 0x38
 800186a:	4a04      	ldr	r2, [pc, #16]	; (800187c <HAL_ADC_MspInit+0xc8>)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001870:	bf00      	nop
 8001872:	3728      	adds	r7, #40	; 0x28
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40021000 	.word	0x40021000
 800187c:	2000012c 	.word	0x2000012c
 8001880:	40020008 	.word	0x40020008

08001884 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001884:	b480      	push	{r7}
 8001886:	b087      	sub	sp, #28
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001894:	d10c      	bne.n	80018b0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001896:	4b1b      	ldr	r3, [pc, #108]	; (8001904 <HAL_TIM_Base_MspInit+0x80>)
 8001898:	69db      	ldr	r3, [r3, #28]
 800189a:	4a1a      	ldr	r2, [pc, #104]	; (8001904 <HAL_TIM_Base_MspInit+0x80>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	61d3      	str	r3, [r2, #28]
 80018a2:	4b18      	ldr	r3, [pc, #96]	; (8001904 <HAL_TIM_Base_MspInit+0x80>)
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	617b      	str	r3, [r7, #20]
 80018ac:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80018ae:	e022      	b.n	80018f6 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a14      	ldr	r2, [pc, #80]	; (8001908 <HAL_TIM_Base_MspInit+0x84>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d10c      	bne.n	80018d4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018ba:	4b12      	ldr	r3, [pc, #72]	; (8001904 <HAL_TIM_Base_MspInit+0x80>)
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	4a11      	ldr	r2, [pc, #68]	; (8001904 <HAL_TIM_Base_MspInit+0x80>)
 80018c0:	f043 0302 	orr.w	r3, r3, #2
 80018c4:	61d3      	str	r3, [r2, #28]
 80018c6:	4b0f      	ldr	r3, [pc, #60]	; (8001904 <HAL_TIM_Base_MspInit+0x80>)
 80018c8:	69db      	ldr	r3, [r3, #28]
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	613b      	str	r3, [r7, #16]
 80018d0:	693b      	ldr	r3, [r7, #16]
}
 80018d2:	e010      	b.n	80018f6 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a0c      	ldr	r2, [pc, #48]	; (800190c <HAL_TIM_Base_MspInit+0x88>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d10b      	bne.n	80018f6 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018de:	4b09      	ldr	r3, [pc, #36]	; (8001904 <HAL_TIM_Base_MspInit+0x80>)
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	4a08      	ldr	r2, [pc, #32]	; (8001904 <HAL_TIM_Base_MspInit+0x80>)
 80018e4:	f043 0304 	orr.w	r3, r3, #4
 80018e8:	61d3      	str	r3, [r2, #28]
 80018ea:	4b06      	ldr	r3, [pc, #24]	; (8001904 <HAL_TIM_Base_MspInit+0x80>)
 80018ec:	69db      	ldr	r3, [r3, #28]
 80018ee:	f003 0304 	and.w	r3, r3, #4
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]
}
 80018f6:	bf00      	nop
 80018f8:	371c      	adds	r7, #28
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	40021000 	.word	0x40021000
 8001908:	40000400 	.word	0x40000400
 800190c:	40000800 	.word	0x40000800

08001910 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08c      	sub	sp, #48	; 0x30
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	f107 031c 	add.w	r3, r7, #28
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001930:	d13a      	bne.n	80019a8 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001932:	4b42      	ldr	r3, [pc, #264]	; (8001a3c <HAL_TIM_MspPostInit+0x12c>)
 8001934:	695b      	ldr	r3, [r3, #20]
 8001936:	4a41      	ldr	r2, [pc, #260]	; (8001a3c <HAL_TIM_MspPostInit+0x12c>)
 8001938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800193c:	6153      	str	r3, [r2, #20]
 800193e:	4b3f      	ldr	r3, [pc, #252]	; (8001a3c <HAL_TIM_MspPostInit+0x12c>)
 8001940:	695b      	ldr	r3, [r3, #20]
 8001942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001946:	61bb      	str	r3, [r7, #24]
 8001948:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800194a:	4b3c      	ldr	r3, [pc, #240]	; (8001a3c <HAL_TIM_MspPostInit+0x12c>)
 800194c:	695b      	ldr	r3, [r3, #20]
 800194e:	4a3b      	ldr	r2, [pc, #236]	; (8001a3c <HAL_TIM_MspPostInit+0x12c>)
 8001950:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001954:	6153      	str	r3, [r2, #20]
 8001956:	4b39      	ldr	r3, [pc, #228]	; (8001a3c <HAL_TIM_MspPostInit+0x12c>)
 8001958:	695b      	ldr	r3, [r3, #20]
 800195a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800195e:	617b      	str	r3, [r7, #20]
 8001960:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001962:	2320      	movs	r3, #32
 8001964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001966:	2302      	movs	r3, #2
 8001968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196e:	2300      	movs	r3, #0
 8001970:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001972:	2301      	movs	r3, #1
 8001974:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001976:	f107 031c 	add.w	r3, r7, #28
 800197a:	4619      	mov	r1, r3
 800197c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001980:	f001 fe36 	bl	80035f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001984:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198a:	2302      	movs	r3, #2
 800198c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001992:	2300      	movs	r3, #0
 8001994:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001996:	2301      	movs	r3, #1
 8001998:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800199a:	f107 031c 	add.w	r3, r7, #28
 800199e:	4619      	mov	r1, r3
 80019a0:	4827      	ldr	r0, [pc, #156]	; (8001a40 <HAL_TIM_MspPostInit+0x130>)
 80019a2:	f001 fe25 	bl	80035f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80019a6:	e044      	b.n	8001a32 <HAL_TIM_MspPostInit+0x122>
  else if(htim->Instance==TIM3)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a25      	ldr	r2, [pc, #148]	; (8001a44 <HAL_TIM_MspPostInit+0x134>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d11c      	bne.n	80019ec <HAL_TIM_MspPostInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b2:	4b22      	ldr	r3, [pc, #136]	; (8001a3c <HAL_TIM_MspPostInit+0x12c>)
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	4a21      	ldr	r2, [pc, #132]	; (8001a3c <HAL_TIM_MspPostInit+0x12c>)
 80019b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019bc:	6153      	str	r3, [r2, #20]
 80019be:	4b1f      	ldr	r3, [pc, #124]	; (8001a3c <HAL_TIM_MspPostInit+0x12c>)
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019c6:	613b      	str	r3, [r7, #16]
 80019c8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80019ca:	2302      	movs	r3, #2
 80019cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ce:	2302      	movs	r3, #2
 80019d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d6:	2300      	movs	r3, #0
 80019d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019da:	2302      	movs	r3, #2
 80019dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019de:	f107 031c 	add.w	r3, r7, #28
 80019e2:	4619      	mov	r1, r3
 80019e4:	4816      	ldr	r0, [pc, #88]	; (8001a40 <HAL_TIM_MspPostInit+0x130>)
 80019e6:	f001 fe03 	bl	80035f0 <HAL_GPIO_Init>
}
 80019ea:	e022      	b.n	8001a32 <HAL_TIM_MspPostInit+0x122>
  else if(htim->Instance==TIM4)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a15      	ldr	r2, [pc, #84]	; (8001a48 <HAL_TIM_MspPostInit+0x138>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d11d      	bne.n	8001a32 <HAL_TIM_MspPostInit+0x122>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f6:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <HAL_TIM_MspPostInit+0x12c>)
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	4a10      	ldr	r2, [pc, #64]	; (8001a3c <HAL_TIM_MspPostInit+0x12c>)
 80019fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a00:	6153      	str	r3, [r2, #20]
 8001a02:	4b0e      	ldr	r3, [pc, #56]	; (8001a3c <HAL_TIM_MspPostInit+0x12c>)
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001a0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a14:	2302      	movs	r3, #2
 8001a16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001a20:	230a      	movs	r3, #10
 8001a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a24:	f107 031c 	add.w	r3, r7, #28
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a2e:	f001 fddf 	bl	80035f0 <HAL_GPIO_Init>
}
 8001a32:	bf00      	nop
 8001a34:	3730      	adds	r7, #48	; 0x30
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	48000400 	.word	0x48000400
 8001a44:	40000400 	.word	0x40000400
 8001a48:	40000800 	.word	0x40000800

08001a4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08a      	sub	sp, #40	; 0x28
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a54:	f107 0314 	add.w	r3, r7, #20
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]
 8001a62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a1b      	ldr	r2, [pc, #108]	; (8001ad8 <HAL_UART_MspInit+0x8c>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d130      	bne.n	8001ad0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a6e:	4b1b      	ldr	r3, [pc, #108]	; (8001adc <HAL_UART_MspInit+0x90>)
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	4a1a      	ldr	r2, [pc, #104]	; (8001adc <HAL_UART_MspInit+0x90>)
 8001a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a78:	61d3      	str	r3, [r2, #28]
 8001a7a:	4b18      	ldr	r3, [pc, #96]	; (8001adc <HAL_UART_MspInit+0x90>)
 8001a7c:	69db      	ldr	r3, [r3, #28]
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a82:	613b      	str	r3, [r7, #16]
 8001a84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a86:	4b15      	ldr	r3, [pc, #84]	; (8001adc <HAL_UART_MspInit+0x90>)
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	4a14      	ldr	r2, [pc, #80]	; (8001adc <HAL_UART_MspInit+0x90>)
 8001a8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a90:	6153      	str	r3, [r2, #20]
 8001a92:	4b12      	ldr	r3, [pc, #72]	; (8001adc <HAL_UART_MspInit+0x90>)
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a9e:	230c      	movs	r3, #12
 8001aa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001aae:	2307      	movs	r3, #7
 8001ab0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab2:	f107 0314 	add.w	r3, r7, #20
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001abc:	f001 fd98 	bl	80035f0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	2026      	movs	r0, #38	; 0x26
 8001ac6:	f001 fb32 	bl	800312e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001aca:	2026      	movs	r0, #38	; 0x26
 8001acc:	f001 fb4b 	bl	8003166 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ad0:	bf00      	nop
 8001ad2:	3728      	adds	r7, #40	; 0x28
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40004400 	.word	0x40004400
 8001adc:	40021000 	.word	0x40021000

08001ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ae4:	e7fe      	b.n	8001ae4 <NMI_Handler+0x4>

08001ae6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aea:	e7fe      	b.n	8001aea <HardFault_Handler+0x4>

08001aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001af0:	e7fe      	b.n	8001af0 <MemManage_Handler+0x4>

08001af2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001af6:	e7fe      	b.n	8001af6 <BusFault_Handler+0x4>

08001af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001afc:	e7fe      	b.n	8001afc <UsageFault_Handler+0x4>

08001afe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b2c:	f000 f9a8 	bl	8001e80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b30:	bf00      	nop
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b38:	4802      	ldr	r0, [pc, #8]	; (8001b44 <DMA1_Channel1_IRQHandler+0x10>)
 8001b3a:	f001 fc4b 	bl	80033d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	2000012c 	.word	0x2000012c

08001b48 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_6) != RESET){
 8001b4c:	4b64      	ldr	r3, [pc, #400]	; (8001ce0 <EXTI9_5_IRQHandler+0x198>)
 8001b4e:	695b      	ldr	r3, [r3, #20]
 8001b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d038      	beq.n	8001bca <EXTI9_5_IRQHandler+0x82>

		if(HAL_GetTick() - ticks_pressed >= 20){
 8001b58:	f000 f9a6 	bl	8001ea8 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	4b61      	ldr	r3, [pc, #388]	; (8001ce4 <EXTI9_5_IRQHandler+0x19c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b13      	cmp	r3, #19
 8001b66:	d92c      	bls.n	8001bc2 <EXTI9_5_IRQHandler+0x7a>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 0){
 8001b68:	4b5f      	ldr	r3, [pc, #380]	; (8001ce8 <EXTI9_5_IRQHandler+0x1a0>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d112      	bne.n	8001b98 <EXTI9_5_IRQHandler+0x50>
 8001b72:	2140      	movs	r1, #64	; 0x40
 8001b74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b78:	f001 fec4 	bl	8003904 <HAL_GPIO_ReadPin>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d10a      	bne.n	8001b98 <EXTI9_5_IRQHandler+0x50>
				button_state =0 ; // stable low reached
 8001b82:	4b59      	ldr	r3, [pc, #356]	; (8001ce8 <EXTI9_5_IRQHandler+0x1a0>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 8001b88:	f000 f98e 	bl	8001ea8 <HAL_GetTick>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	4a55      	ldr	r2, [pc, #340]	; (8001ce4 <EXTI9_5_IRQHandler+0x19c>)
 8001b90:	6013      	str	r3, [r2, #0]

				middle_button_pressed = 1;
 8001b92:	4b56      	ldr	r3, [pc, #344]	; (8001cec <EXTI9_5_IRQHandler+0x1a4>)
 8001b94:	2201      	movs	r2, #1
 8001b96:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOA ,GPIO_PIN_6) == 1 ){
 8001b98:	4b53      	ldr	r3, [pc, #332]	; (8001ce8 <EXTI9_5_IRQHandler+0x1a0>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d10f      	bne.n	8001bc2 <EXTI9_5_IRQHandler+0x7a>
 8001ba2:	2140      	movs	r1, #64	; 0x40
 8001ba4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ba8:	f001 feac 	bl	8003904 <HAL_GPIO_ReadPin>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d107      	bne.n	8001bc2 <EXTI9_5_IRQHandler+0x7a>
				ticks_pressed = HAL_GetTick() ;
 8001bb2:	f000 f979 	bl	8001ea8 <HAL_GetTick>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	4a4a      	ldr	r2, [pc, #296]	; (8001ce4 <EXTI9_5_IRQHandler+0x19c>)
 8001bba:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 8001bbc:	4b4a      	ldr	r3, [pc, #296]	; (8001ce8 <EXTI9_5_IRQHandler+0x1a0>)
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	701a      	strb	r2, [r3, #0]

			}
		}
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6) ;
 8001bc2:	4b47      	ldr	r3, [pc, #284]	; (8001ce0 <EXTI9_5_IRQHandler+0x198>)
 8001bc4:	2240      	movs	r2, #64	; 0x40
 8001bc6:	615a      	str	r2, [r3, #20]
 8001bc8:	e07d      	b.n	8001cc6 <EXTI9_5_IRQHandler+0x17e>
	}
	else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET){
 8001bca:	4b45      	ldr	r3, [pc, #276]	; (8001ce0 <EXTI9_5_IRQHandler+0x198>)
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d038      	beq.n	8001c48 <EXTI9_5_IRQHandler+0x100>

			if(HAL_GetTick() - ticks_pressed >= 20){
 8001bd6:	f000 f967 	bl	8001ea8 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	4b41      	ldr	r3, [pc, #260]	; (8001ce4 <EXTI9_5_IRQHandler+0x19c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b13      	cmp	r3, #19
 8001be4:	d92c      	bls.n	8001c40 <EXTI9_5_IRQHandler+0xf8>
				// stable low state
				if(button_state == 1  && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 0){
 8001be6:	4b40      	ldr	r3, [pc, #256]	; (8001ce8 <EXTI9_5_IRQHandler+0x1a0>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d112      	bne.n	8001c16 <EXTI9_5_IRQHandler+0xce>
 8001bf0:	2180      	movs	r1, #128	; 0x80
 8001bf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bf6:	f001 fe85 	bl	8003904 <HAL_GPIO_ReadPin>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d10a      	bne.n	8001c16 <EXTI9_5_IRQHandler+0xce>
					button_state =0 ; // stable low reached
 8001c00:	4b39      	ldr	r3, [pc, #228]	; (8001ce8 <EXTI9_5_IRQHandler+0x1a0>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	701a      	strb	r2, [r3, #0]
					ticks_pressed = HAL_GetTick() ;
 8001c06:	f000 f94f 	bl	8001ea8 <HAL_GetTick>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	4a35      	ldr	r2, [pc, #212]	; (8001ce4 <EXTI9_5_IRQHandler+0x19c>)
 8001c0e:	6013      	str	r3, [r2, #0]

					right_button_pressed = 1;
 8001c10:	4b37      	ldr	r3, [pc, #220]	; (8001cf0 <EXTI9_5_IRQHandler+0x1a8>)
 8001c12:	2201      	movs	r2, #1
 8001c14:	701a      	strb	r2, [r3, #0]
				}

				// stable high state
				if(button_state == 0 && HAL_GPIO_ReadPin(GPIOA ,GPIO_PIN_7) == 1 ){
 8001c16:	4b34      	ldr	r3, [pc, #208]	; (8001ce8 <EXTI9_5_IRQHandler+0x1a0>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d10f      	bne.n	8001c40 <EXTI9_5_IRQHandler+0xf8>
 8001c20:	2180      	movs	r1, #128	; 0x80
 8001c22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c26:	f001 fe6d 	bl	8003904 <HAL_GPIO_ReadPin>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d107      	bne.n	8001c40 <EXTI9_5_IRQHandler+0xf8>
					ticks_pressed = HAL_GetTick() ;
 8001c30:	f000 f93a 	bl	8001ea8 <HAL_GetTick>
 8001c34:	4603      	mov	r3, r0
 8001c36:	4a2b      	ldr	r2, [pc, #172]	; (8001ce4 <EXTI9_5_IRQHandler+0x19c>)
 8001c38:	6013      	str	r3, [r2, #0]
					button_state =1 ; // stable high state
 8001c3a:	4b2b      	ldr	r3, [pc, #172]	; (8001ce8 <EXTI9_5_IRQHandler+0x1a0>)
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	701a      	strb	r2, [r3, #0]

				}
			}


			__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7) ;
 8001c40:	4b27      	ldr	r3, [pc, #156]	; (8001ce0 <EXTI9_5_IRQHandler+0x198>)
 8001c42:	2280      	movs	r2, #128	; 0x80
 8001c44:	615a      	str	r2, [r3, #20]
 8001c46:	e03e      	b.n	8001cc6 <EXTI9_5_IRQHandler+0x17e>
	}
	else{
		if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_8) != RESET){
 8001c48:	4b25      	ldr	r3, [pc, #148]	; (8001ce0 <EXTI9_5_IRQHandler+0x198>)
 8001c4a:	695b      	ldr	r3, [r3, #20]
 8001c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d038      	beq.n	8001cc6 <EXTI9_5_IRQHandler+0x17e>

				if(HAL_GetTick() - ticks_pressed >= 20){
 8001c54:	f000 f928 	bl	8001ea8 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	4b22      	ldr	r3, [pc, #136]	; (8001ce4 <EXTI9_5_IRQHandler+0x19c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b13      	cmp	r3, #19
 8001c62:	d92c      	bls.n	8001cbe <EXTI9_5_IRQHandler+0x176>
					// stable low state
					if(button_state == 1  && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == 0){
 8001c64:	4b20      	ldr	r3, [pc, #128]	; (8001ce8 <EXTI9_5_IRQHandler+0x1a0>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d112      	bne.n	8001c94 <EXTI9_5_IRQHandler+0x14c>
 8001c6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c72:	4820      	ldr	r0, [pc, #128]	; (8001cf4 <EXTI9_5_IRQHandler+0x1ac>)
 8001c74:	f001 fe46 	bl	8003904 <HAL_GPIO_ReadPin>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d10a      	bne.n	8001c94 <EXTI9_5_IRQHandler+0x14c>
						button_state =0 ; // stable low reached
 8001c7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ce8 <EXTI9_5_IRQHandler+0x1a0>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	701a      	strb	r2, [r3, #0]
						ticks_pressed = HAL_GetTick() ;
 8001c84:	f000 f910 	bl	8001ea8 <HAL_GetTick>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	4a16      	ldr	r2, [pc, #88]	; (8001ce4 <EXTI9_5_IRQHandler+0x19c>)
 8001c8c:	6013      	str	r3, [r2, #0]

						left_button_pressed = 1;
 8001c8e:	4b1a      	ldr	r3, [pc, #104]	; (8001cf8 <EXTI9_5_IRQHandler+0x1b0>)
 8001c90:	2201      	movs	r2, #1
 8001c92:	701a      	strb	r2, [r3, #0]
					}

					// stable high state
					if(button_state == 0 && HAL_GPIO_ReadPin(GPIOB ,GPIO_PIN_8) == 1 ){
 8001c94:	4b14      	ldr	r3, [pc, #80]	; (8001ce8 <EXTI9_5_IRQHandler+0x1a0>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d10f      	bne.n	8001cbe <EXTI9_5_IRQHandler+0x176>
 8001c9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ca2:	4814      	ldr	r0, [pc, #80]	; (8001cf4 <EXTI9_5_IRQHandler+0x1ac>)
 8001ca4:	f001 fe2e 	bl	8003904 <HAL_GPIO_ReadPin>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d107      	bne.n	8001cbe <EXTI9_5_IRQHandler+0x176>
						ticks_pressed = HAL_GetTick() ;
 8001cae:	f000 f8fb 	bl	8001ea8 <HAL_GetTick>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	4a0b      	ldr	r2, [pc, #44]	; (8001ce4 <EXTI9_5_IRQHandler+0x19c>)
 8001cb6:	6013      	str	r3, [r2, #0]
						button_state =1 ; // stable high state
 8001cb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <EXTI9_5_IRQHandler+0x1a0>)
 8001cba:	2201      	movs	r2, #1
 8001cbc:	701a      	strb	r2, [r3, #0]

					}
				}
				__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8) ;
 8001cbe:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <EXTI9_5_IRQHandler+0x198>)
 8001cc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cc4:	615a      	str	r2, [r3, #20]
			}
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001cc6:	2040      	movs	r0, #64	; 0x40
 8001cc8:	f001 fe4c 	bl	8003964 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001ccc:	2080      	movs	r0, #128	; 0x80
 8001cce:	f001 fe49 	bl	8003964 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001cd2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001cd6:	f001 fe45 	bl	8003964 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40010400 	.word	0x40010400
 8001ce4:	20002318 	.word	0x20002318
 8001ce8:	2000004f 	.word	0x2000004f
 8001cec:	2000231c 	.word	0x2000231c
 8001cf0:	2000231d 	.word	0x2000231d
 8001cf4:	48000400 	.word	0x48000400
 8001cf8:	2000231e 	.word	0x2000231e

08001cfc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d00:	4802      	ldr	r0, [pc, #8]	; (8001d0c <USART2_IRQHandler+0x10>)
 8001d02:	f004 fd07 	bl	8006714 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000254 	.word	0x20000254

08001d10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d18:	4a14      	ldr	r2, [pc, #80]	; (8001d6c <_sbrk+0x5c>)
 8001d1a:	4b15      	ldr	r3, [pc, #84]	; (8001d70 <_sbrk+0x60>)
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d24:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <_sbrk+0x64>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d102      	bne.n	8001d32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d2c:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <_sbrk+0x64>)
 8001d2e:	4a12      	ldr	r2, [pc, #72]	; (8001d78 <_sbrk+0x68>)
 8001d30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d32:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <_sbrk+0x64>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4413      	add	r3, r2
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d207      	bcs.n	8001d50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d40:	f005 ff4c 	bl	8007bdc <__errno>
 8001d44:	4603      	mov	r3, r0
 8001d46:	220c      	movs	r2, #12
 8001d48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4e:	e009      	b.n	8001d64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d50:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <_sbrk+0x64>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d56:	4b07      	ldr	r3, [pc, #28]	; (8001d74 <_sbrk+0x64>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	4a05      	ldr	r2, [pc, #20]	; (8001d74 <_sbrk+0x64>)
 8001d60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d62:	68fb      	ldr	r3, [r7, #12]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3718      	adds	r7, #24
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	20010000 	.word	0x20010000
 8001d70:	00000400 	.word	0x00000400
 8001d74:	20002320 	.word	0x20002320
 8001d78:	20002338 	.word	0x20002338

08001d7c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d80:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <SystemInit+0x20>)
 8001d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d86:	4a05      	ldr	r2, [pc, #20]	; (8001d9c <SystemInit+0x20>)
 8001d88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001da0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dd8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001da4:	f7ff ffea 	bl	8001d7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001da8:	480c      	ldr	r0, [pc, #48]	; (8001ddc <LoopForever+0x6>)
  ldr r1, =_edata
 8001daa:	490d      	ldr	r1, [pc, #52]	; (8001de0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001dac:	4a0d      	ldr	r2, [pc, #52]	; (8001de4 <LoopForever+0xe>)
  movs r3, #0
 8001dae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001db0:	e002      	b.n	8001db8 <LoopCopyDataInit>

08001db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001db6:	3304      	adds	r3, #4

08001db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dbc:	d3f9      	bcc.n	8001db2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dbe:	4a0a      	ldr	r2, [pc, #40]	; (8001de8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001dc0:	4c0a      	ldr	r4, [pc, #40]	; (8001dec <LoopForever+0x16>)
  movs r3, #0
 8001dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dc4:	e001      	b.n	8001dca <LoopFillZerobss>

08001dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dc8:	3204      	adds	r2, #4

08001dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dcc:	d3fb      	bcc.n	8001dc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dce:	f005 ff0b 	bl	8007be8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001dd2:	f7fe fec3 	bl	8000b5c <main>

08001dd6 <LoopForever>:

LoopForever:
    b LoopForever
 8001dd6:	e7fe      	b.n	8001dd6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001dd8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001ddc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001de0:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8001de4:	08008718 	.word	0x08008718
  ldr r2, =_sbss
 8001de8:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8001dec:	20002338 	.word	0x20002338

08001df0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001df0:	e7fe      	b.n	8001df0 <ADC1_2_IRQHandler>
	...

08001df4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001df8:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <HAL_Init+0x28>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a07      	ldr	r2, [pc, #28]	; (8001e1c <HAL_Init+0x28>)
 8001dfe:	f043 0310 	orr.w	r3, r3, #16
 8001e02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e04:	2003      	movs	r0, #3
 8001e06:	f001 f987 	bl	8003118 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	f000 f808 	bl	8001e20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e10:	f7ff fcac 	bl	800176c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40022000 	.word	0x40022000

08001e20 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e28:	4b12      	ldr	r3, [pc, #72]	; (8001e74 <HAL_InitTick+0x54>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	4b12      	ldr	r3, [pc, #72]	; (8001e78 <HAL_InitTick+0x58>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	4619      	mov	r1, r3
 8001e32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f001 f99f 	bl	8003182 <HAL_SYSTICK_Config>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e00e      	b.n	8001e6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2b0f      	cmp	r3, #15
 8001e52:	d80a      	bhi.n	8001e6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e54:	2200      	movs	r2, #0
 8001e56:	6879      	ldr	r1, [r7, #4]
 8001e58:	f04f 30ff 	mov.w	r0, #4294967295
 8001e5c:	f001 f967 	bl	800312e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e60:	4a06      	ldr	r2, [pc, #24]	; (8001e7c <HAL_InitTick+0x5c>)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
 8001e68:	e000      	b.n	8001e6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20000050 	.word	0x20000050
 8001e78:	20000058 	.word	0x20000058
 8001e7c:	20000054 	.word	0x20000054

08001e80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e84:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <HAL_IncTick+0x20>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	461a      	mov	r2, r3
 8001e8a:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <HAL_IncTick+0x24>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4413      	add	r3, r2
 8001e90:	4a04      	ldr	r2, [pc, #16]	; (8001ea4 <HAL_IncTick+0x24>)
 8001e92:	6013      	str	r3, [r2, #0]
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	20000058 	.word	0x20000058
 8001ea4:	20002324 	.word	0x20002324

08001ea8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  return uwTick;  
 8001eac:	4b03      	ldr	r3, [pc, #12]	; (8001ebc <HAL_GetTick+0x14>)
 8001eae:	681b      	ldr	r3, [r3, #0]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	20002324 	.word	0x20002324

08001ec0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ec8:	f7ff ffee 	bl	8001ea8 <HAL_GetTick>
 8001ecc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed8:	d005      	beq.n	8001ee6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eda:	4b0a      	ldr	r3, [pc, #40]	; (8001f04 <HAL_Delay+0x44>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001ee6:	bf00      	nop
 8001ee8:	f7ff ffde 	bl	8001ea8 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d8f7      	bhi.n	8001ee8 <HAL_Delay+0x28>
  {
  }
}
 8001ef8:	bf00      	nop
 8001efa:	bf00      	nop
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000058 	.word	0x20000058

08001f08 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b09a      	sub	sp, #104	; 0x68
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001f42:	2300      	movs	r3, #0
 8001f44:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d101      	bne.n	8001f50 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e1e3      	b.n	8002318 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	f003 0310 	and.w	r3, r3, #16
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d176      	bne.n	8002050 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d152      	bne.n	8002010 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff fc15 	bl	80017b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d13b      	bne.n	8002010 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 ff87 	bl	8002eac <ADC_Disable>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa8:	f003 0310 	and.w	r3, r3, #16
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d12f      	bne.n	8002010 <HAL_ADC_Init+0xe0>
 8001fb0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d12b      	bne.n	8002010 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001fc0:	f023 0302 	bic.w	r3, r3, #2
 8001fc4:	f043 0202 	orr.w	r2, r3, #2
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689a      	ldr	r2, [r3, #8]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001fda:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689a      	ldr	r2, [r3, #8]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001fea:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001fec:	4b92      	ldr	r3, [pc, #584]	; (8002238 <HAL_ADC_Init+0x308>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a92      	ldr	r2, [pc, #584]	; (800223c <HAL_ADC_Init+0x30c>)
 8001ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff6:	0c9a      	lsrs	r2, r3, #18
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002002:	e002      	b.n	800200a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	3b01      	subs	r3, #1
 8002008:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1f9      	bne.n	8002004 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d007      	beq.n	800202e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002028:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800202c:	d110      	bne.n	8002050 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	f023 0312 	bic.w	r3, r3, #18
 8002036:	f043 0210 	orr.w	r2, r3, #16
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002042:	f043 0201 	orr.w	r2, r3, #1
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002054:	f003 0310 	and.w	r3, r3, #16
 8002058:	2b00      	cmp	r3, #0
 800205a:	f040 8150 	bne.w	80022fe <HAL_ADC_Init+0x3ce>
 800205e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002062:	2b00      	cmp	r3, #0
 8002064:	f040 814b 	bne.w	80022fe <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002072:	2b00      	cmp	r3, #0
 8002074:	f040 8143 	bne.w	80022fe <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002080:	f043 0202 	orr.w	r2, r3, #2
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002090:	d004      	beq.n	800209c <HAL_ADC_Init+0x16c>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a6a      	ldr	r2, [pc, #424]	; (8002240 <HAL_ADC_Init+0x310>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d101      	bne.n	80020a0 <HAL_ADC_Init+0x170>
 800209c:	4b69      	ldr	r3, [pc, #420]	; (8002244 <HAL_ADC_Init+0x314>)
 800209e:	e000      	b.n	80020a2 <HAL_ADC_Init+0x172>
 80020a0:	4b69      	ldr	r3, [pc, #420]	; (8002248 <HAL_ADC_Init+0x318>)
 80020a2:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020ac:	d102      	bne.n	80020b4 <HAL_ADC_Init+0x184>
 80020ae:	4b64      	ldr	r3, [pc, #400]	; (8002240 <HAL_ADC_Init+0x310>)
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	e01a      	b.n	80020ea <HAL_ADC_Init+0x1ba>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a61      	ldr	r2, [pc, #388]	; (8002240 <HAL_ADC_Init+0x310>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d103      	bne.n	80020c6 <HAL_ADC_Init+0x196>
 80020be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	e011      	b.n	80020ea <HAL_ADC_Init+0x1ba>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a60      	ldr	r2, [pc, #384]	; (800224c <HAL_ADC_Init+0x31c>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d102      	bne.n	80020d6 <HAL_ADC_Init+0x1a6>
 80020d0:	4b5f      	ldr	r3, [pc, #380]	; (8002250 <HAL_ADC_Init+0x320>)
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	e009      	b.n	80020ea <HAL_ADC_Init+0x1ba>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a5d      	ldr	r2, [pc, #372]	; (8002250 <HAL_ADC_Init+0x320>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d102      	bne.n	80020e6 <HAL_ADC_Init+0x1b6>
 80020e0:	4b5a      	ldr	r3, [pc, #360]	; (800224c <HAL_ADC_Init+0x31c>)
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	e001      	b.n	80020ea <HAL_ADC_Init+0x1ba>
 80020e6:	2300      	movs	r3, #0
 80020e8:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f003 0303 	and.w	r3, r3, #3
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d108      	bne.n	800210a <HAL_ADC_Init+0x1da>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b01      	cmp	r3, #1
 8002104:	d101      	bne.n	800210a <HAL_ADC_Init+0x1da>
 8002106:	2301      	movs	r3, #1
 8002108:	e000      	b.n	800210c <HAL_ADC_Init+0x1dc>
 800210a:	2300      	movs	r3, #0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d11c      	bne.n	800214a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002110:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002112:	2b00      	cmp	r3, #0
 8002114:	d010      	beq.n	8002138 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	2b01      	cmp	r3, #1
 8002120:	d107      	bne.n	8002132 <HAL_ADC_Init+0x202>
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	2b01      	cmp	r3, #1
 800212c:	d101      	bne.n	8002132 <HAL_ADC_Init+0x202>
 800212e:	2301      	movs	r3, #1
 8002130:	e000      	b.n	8002134 <HAL_ADC_Init+0x204>
 8002132:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002134:	2b00      	cmp	r3, #0
 8002136:	d108      	bne.n	800214a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002138:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	431a      	orrs	r2, r3
 8002146:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002148:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	7e5b      	ldrb	r3, [r3, #25]
 800214e:	035b      	lsls	r3, r3, #13
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002154:	2a01      	cmp	r2, #1
 8002156:	d002      	beq.n	800215e <HAL_ADC_Init+0x22e>
 8002158:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800215c:	e000      	b.n	8002160 <HAL_ADC_Init+0x230>
 800215e:	2200      	movs	r2, #0
 8002160:	431a      	orrs	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	431a      	orrs	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	4313      	orrs	r3, r2
 800216e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002170:	4313      	orrs	r3, r2
 8002172:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f893 3020 	ldrb.w	r3, [r3, #32]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d11b      	bne.n	80021b6 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	7e5b      	ldrb	r3, [r3, #25]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d109      	bne.n	800219a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218a:	3b01      	subs	r3, #1
 800218c:	045a      	lsls	r2, r3, #17
 800218e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002190:	4313      	orrs	r3, r2
 8002192:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002196:	663b      	str	r3, [r7, #96]	; 0x60
 8002198:	e00d      	b.n	80021b6 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80021a2:	f043 0220 	orr.w	r2, r3, #32
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ae:	f043 0201 	orr.w	r2, r3, #1
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d054      	beq.n	8002268 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a22      	ldr	r2, [pc, #136]	; (800224c <HAL_ADC_Init+0x31c>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d004      	beq.n	80021d2 <HAL_ADC_Init+0x2a2>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a20      	ldr	r2, [pc, #128]	; (8002250 <HAL_ADC_Init+0x320>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d140      	bne.n	8002254 <HAL_ADC_Init+0x324>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d6:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80021da:	d02a      	beq.n	8002232 <HAL_ADC_Init+0x302>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021e4:	d022      	beq.n	800222c <HAL_ADC_Init+0x2fc>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ea:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80021ee:	d01a      	beq.n	8002226 <HAL_ADC_Init+0x2f6>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f4:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 80021f8:	d012      	beq.n	8002220 <HAL_ADC_Init+0x2f0>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fe:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8002202:	d00a      	beq.n	800221a <HAL_ADC_Init+0x2ea>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002208:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 800220c:	d002      	beq.n	8002214 <HAL_ADC_Init+0x2e4>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002212:	e023      	b.n	800225c <HAL_ADC_Init+0x32c>
 8002214:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002218:	e020      	b.n	800225c <HAL_ADC_Init+0x32c>
 800221a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800221e:	e01d      	b.n	800225c <HAL_ADC_Init+0x32c>
 8002220:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002224:	e01a      	b.n	800225c <HAL_ADC_Init+0x32c>
 8002226:	f44f 7380 	mov.w	r3, #256	; 0x100
 800222a:	e017      	b.n	800225c <HAL_ADC_Init+0x32c>
 800222c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002230:	e014      	b.n	800225c <HAL_ADC_Init+0x32c>
 8002232:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002236:	e011      	b.n	800225c <HAL_ADC_Init+0x32c>
 8002238:	20000050 	.word	0x20000050
 800223c:	431bde83 	.word	0x431bde83
 8002240:	50000100 	.word	0x50000100
 8002244:	50000300 	.word	0x50000300
 8002248:	50000700 	.word	0x50000700
 800224c:	50000400 	.word	0x50000400
 8002250:	50000500 	.word	0x50000500
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002258:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002260:	4313      	orrs	r3, r2
 8002262:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002264:	4313      	orrs	r3, r2
 8002266:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f003 030c 	and.w	r3, r3, #12
 8002272:	2b00      	cmp	r3, #0
 8002274:	d114      	bne.n	80022a0 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	6812      	ldr	r2, [r2, #0]
 8002280:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002284:	f023 0302 	bic.w	r3, r3, #2
 8002288:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	7e1b      	ldrb	r3, [r3, #24]
 800228e:	039a      	lsls	r2, r3, #14
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	4313      	orrs	r3, r2
 800229a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800229c:	4313      	orrs	r3, r2
 800229e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68da      	ldr	r2, [r3, #12]
 80022a6:	4b1e      	ldr	r3, [pc, #120]	; (8002320 <HAL_ADC_Init+0x3f0>)
 80022a8:	4013      	ands	r3, r2
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6812      	ldr	r2, [r2, #0]
 80022ae:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80022b0:	430b      	orrs	r3, r1
 80022b2:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d10c      	bne.n	80022d6 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	f023 010f 	bic.w	r1, r3, #15
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	1e5a      	subs	r2, r3, #1
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	631a      	str	r2, [r3, #48]	; 0x30
 80022d4:	e007      	b.n	80022e6 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f022 020f 	bic.w	r2, r2, #15
 80022e4:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f0:	f023 0303 	bic.w	r3, r3, #3
 80022f4:	f043 0201 	orr.w	r2, r3, #1
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	641a      	str	r2, [r3, #64]	; 0x40
 80022fc:	e00a      	b.n	8002314 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	f023 0312 	bic.w	r3, r3, #18
 8002306:	f043 0210 	orr.w	r2, r3, #16
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800230e:	2301      	movs	r3, #1
 8002310:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002314:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002318:	4618      	mov	r0, r3
 800231a:	3768      	adds	r7, #104	; 0x68
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	fff0c007 	.word	0xfff0c007

08002324 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002330:	2300      	movs	r3, #0
 8002332:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f003 0304 	and.w	r3, r3, #4
 800233e:	2b00      	cmp	r3, #0
 8002340:	f040 80f7 	bne.w	8002532 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800234a:	2b01      	cmp	r3, #1
 800234c:	d101      	bne.n	8002352 <HAL_ADC_Start_DMA+0x2e>
 800234e:	2302      	movs	r3, #2
 8002350:	e0f2      	b.n	8002538 <HAL_ADC_Start_DMA+0x214>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002362:	d004      	beq.n	800236e <HAL_ADC_Start_DMA+0x4a>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a75      	ldr	r2, [pc, #468]	; (8002540 <HAL_ADC_Start_DMA+0x21c>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d109      	bne.n	8002382 <HAL_ADC_Start_DMA+0x5e>
 800236e:	4b75      	ldr	r3, [pc, #468]	; (8002544 <HAL_ADC_Start_DMA+0x220>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f003 031f 	and.w	r3, r3, #31
 8002376:	2b00      	cmp	r3, #0
 8002378:	bf0c      	ite	eq
 800237a:	2301      	moveq	r3, #1
 800237c:	2300      	movne	r3, #0
 800237e:	b2db      	uxtb	r3, r3
 8002380:	e008      	b.n	8002394 <HAL_ADC_Start_DMA+0x70>
 8002382:	4b71      	ldr	r3, [pc, #452]	; (8002548 <HAL_ADC_Start_DMA+0x224>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f003 031f 	and.w	r3, r3, #31
 800238a:	2b00      	cmp	r3, #0
 800238c:	bf0c      	ite	eq
 800238e:	2301      	moveq	r3, #1
 8002390:	2300      	movne	r3, #0
 8002392:	b2db      	uxtb	r3, r3
 8002394:	2b00      	cmp	r3, #0
 8002396:	f000 80c5 	beq.w	8002524 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f000 fd22 	bl	8002de4 <ADC_Enable>
 80023a0:	4603      	mov	r3, r0
 80023a2:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80023a4:	7dfb      	ldrb	r3, [r7, #23]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f040 80b7 	bne.w	800251a <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023b4:	f023 0301 	bic.w	r3, r3, #1
 80023b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023c8:	d004      	beq.n	80023d4 <HAL_ADC_Start_DMA+0xb0>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a5c      	ldr	r2, [pc, #368]	; (8002540 <HAL_ADC_Start_DMA+0x21c>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d106      	bne.n	80023e2 <HAL_ADC_Start_DMA+0xbe>
 80023d4:	4b5b      	ldr	r3, [pc, #364]	; (8002544 <HAL_ADC_Start_DMA+0x220>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f003 031f 	and.w	r3, r3, #31
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d010      	beq.n	8002402 <HAL_ADC_Start_DMA+0xde>
 80023e0:	e005      	b.n	80023ee <HAL_ADC_Start_DMA+0xca>
 80023e2:	4b59      	ldr	r3, [pc, #356]	; (8002548 <HAL_ADC_Start_DMA+0x224>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 031f 	and.w	r3, r3, #31
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d009      	beq.n	8002402 <HAL_ADC_Start_DMA+0xde>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023f6:	d004      	beq.n	8002402 <HAL_ADC_Start_DMA+0xde>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a53      	ldr	r2, [pc, #332]	; (800254c <HAL_ADC_Start_DMA+0x228>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d115      	bne.n	800242e <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d036      	beq.n	800248a <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002420:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002424:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800242c:	e02d      	b.n	800248a <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002442:	d004      	beq.n	800244e <HAL_ADC_Start_DMA+0x12a>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a3d      	ldr	r2, [pc, #244]	; (8002540 <HAL_ADC_Start_DMA+0x21c>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d10a      	bne.n	8002464 <HAL_ADC_Start_DMA+0x140>
 800244e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002458:	2b00      	cmp	r3, #0
 800245a:	bf14      	ite	ne
 800245c:	2301      	movne	r3, #1
 800245e:	2300      	moveq	r3, #0
 8002460:	b2db      	uxtb	r3, r3
 8002462:	e008      	b.n	8002476 <HAL_ADC_Start_DMA+0x152>
 8002464:	4b39      	ldr	r3, [pc, #228]	; (800254c <HAL_ADC_Start_DMA+0x228>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246c:	2b00      	cmp	r3, #0
 800246e:	bf14      	ite	ne
 8002470:	2301      	movne	r3, #1
 8002472:	2300      	moveq	r3, #0
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d007      	beq.n	800248a <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002482:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002496:	d106      	bne.n	80024a6 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249c:	f023 0206 	bic.w	r2, r3, #6
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	645a      	str	r2, [r3, #68]	; 0x44
 80024a4:	e002      	b.n	80024ac <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b8:	4a25      	ldr	r2, [pc, #148]	; (8002550 <HAL_ADC_Start_DMA+0x22c>)
 80024ba:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c0:	4a24      	ldr	r2, [pc, #144]	; (8002554 <HAL_ADC_Start_DMA+0x230>)
 80024c2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c8:	4a23      	ldr	r2, [pc, #140]	; (8002558 <HAL_ADC_Start_DMA+0x234>)
 80024ca:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	221c      	movs	r2, #28
 80024d2:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	685a      	ldr	r2, [r3, #4]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 0210 	orr.w	r2, r2, #16
 80024e2:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68da      	ldr	r2, [r3, #12]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f042 0201 	orr.w	r2, r2, #1
 80024f2:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	3340      	adds	r3, #64	; 0x40
 80024fe:	4619      	mov	r1, r3
 8002500:	68ba      	ldr	r2, [r7, #8]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f000 fe90 	bl	8003228 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	689a      	ldr	r2, [r3, #8]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f042 0204 	orr.w	r2, r2, #4
 8002516:	609a      	str	r2, [r3, #8]
 8002518:	e00d      	b.n	8002536 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002522:	e008      	b.n	8002536 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002530:	e001      	b.n	8002536 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002532:	2302      	movs	r3, #2
 8002534:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002536:	7dfb      	ldrb	r3, [r7, #23]
}
 8002538:	4618      	mov	r0, r3
 800253a:	3718      	adds	r7, #24
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	50000100 	.word	0x50000100
 8002544:	50000300 	.word	0x50000300
 8002548:	50000700 	.word	0x50000700
 800254c:	50000400 	.word	0x50000400
 8002550:	08002d19 	.word	0x08002d19
 8002554:	08002d93 	.word	0x08002d93
 8002558:	08002daf 	.word	0x08002daf

0800255c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800255c:	b480      	push	{r7}
 800255e:	b09b      	sub	sp, #108	; 0x6c
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800256c:	2300      	movs	r3, #0
 800256e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002576:	2b01      	cmp	r3, #1
 8002578:	d101      	bne.n	800257e <HAL_ADC_ConfigChannel+0x22>
 800257a:	2302      	movs	r3, #2
 800257c:	e2ca      	b.n	8002b14 <HAL_ADC_ConfigChannel+0x5b8>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b00      	cmp	r3, #0
 8002592:	f040 82ae 	bne.w	8002af2 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	2b04      	cmp	r3, #4
 800259c:	d81c      	bhi.n	80025d8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	4613      	mov	r3, r2
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	4413      	add	r3, r2
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	461a      	mov	r2, r3
 80025b2:	231f      	movs	r3, #31
 80025b4:	4093      	lsls	r3, r2
 80025b6:	43db      	mvns	r3, r3
 80025b8:	4019      	ands	r1, r3
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	6818      	ldr	r0, [r3, #0]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685a      	ldr	r2, [r3, #4]
 80025c2:	4613      	mov	r3, r2
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	4413      	add	r3, r2
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	fa00 f203 	lsl.w	r2, r0, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	430a      	orrs	r2, r1
 80025d4:	631a      	str	r2, [r3, #48]	; 0x30
 80025d6:	e063      	b.n	80026a0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	2b09      	cmp	r3, #9
 80025de:	d81e      	bhi.n	800261e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	4613      	mov	r3, r2
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	4413      	add	r3, r2
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	3b1e      	subs	r3, #30
 80025f4:	221f      	movs	r2, #31
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43db      	mvns	r3, r3
 80025fc:	4019      	ands	r1, r3
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	6818      	ldr	r0, [r3, #0]
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685a      	ldr	r2, [r3, #4]
 8002606:	4613      	mov	r3, r2
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	4413      	add	r3, r2
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	3b1e      	subs	r3, #30
 8002610:	fa00 f203 	lsl.w	r2, r0, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	430a      	orrs	r2, r1
 800261a:	635a      	str	r2, [r3, #52]	; 0x34
 800261c:	e040      	b.n	80026a0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b0e      	cmp	r3, #14
 8002624:	d81e      	bhi.n	8002664 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	4613      	mov	r3, r2
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	4413      	add	r3, r2
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	3b3c      	subs	r3, #60	; 0x3c
 800263a:	221f      	movs	r2, #31
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43db      	mvns	r3, r3
 8002642:	4019      	ands	r1, r3
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	6818      	ldr	r0, [r3, #0]
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	4613      	mov	r3, r2
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	4413      	add	r3, r2
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	3b3c      	subs	r3, #60	; 0x3c
 8002656:	fa00 f203 	lsl.w	r2, r0, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	430a      	orrs	r2, r1
 8002660:	639a      	str	r2, [r3, #56]	; 0x38
 8002662:	e01d      	b.n	80026a0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	4613      	mov	r3, r2
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	4413      	add	r3, r2
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	3b5a      	subs	r3, #90	; 0x5a
 8002678:	221f      	movs	r2, #31
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	43db      	mvns	r3, r3
 8002680:	4019      	ands	r1, r3
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	6818      	ldr	r0, [r3, #0]
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685a      	ldr	r2, [r3, #4]
 800268a:	4613      	mov	r3, r2
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	4413      	add	r3, r2
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	3b5a      	subs	r3, #90	; 0x5a
 8002694:	fa00 f203 	lsl.w	r2, r0, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	430a      	orrs	r2, r1
 800269e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f003 030c 	and.w	r3, r3, #12
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f040 80e5 	bne.w	800287a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2b09      	cmp	r3, #9
 80026b6:	d91c      	bls.n	80026f2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6999      	ldr	r1, [r3, #24]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	4613      	mov	r3, r2
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	4413      	add	r3, r2
 80026c8:	3b1e      	subs	r3, #30
 80026ca:	2207      	movs	r2, #7
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	43db      	mvns	r3, r3
 80026d2:	4019      	ands	r1, r3
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	6898      	ldr	r0, [r3, #8]
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	4613      	mov	r3, r2
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	4413      	add	r3, r2
 80026e2:	3b1e      	subs	r3, #30
 80026e4:	fa00 f203 	lsl.w	r2, r0, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	430a      	orrs	r2, r1
 80026ee:	619a      	str	r2, [r3, #24]
 80026f0:	e019      	b.n	8002726 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6959      	ldr	r1, [r3, #20]
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	4613      	mov	r3, r2
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	4413      	add	r3, r2
 8002702:	2207      	movs	r2, #7
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	43db      	mvns	r3, r3
 800270a:	4019      	ands	r1, r3
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	6898      	ldr	r0, [r3, #8]
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	4613      	mov	r3, r2
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	4413      	add	r3, r2
 800271a:	fa00 f203 	lsl.w	r2, r0, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	430a      	orrs	r2, r1
 8002724:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	695a      	ldr	r2, [r3, #20]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	08db      	lsrs	r3, r3, #3
 8002732:	f003 0303 	and.w	r3, r3, #3
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	3b01      	subs	r3, #1
 8002744:	2b03      	cmp	r3, #3
 8002746:	d84f      	bhi.n	80027e8 <HAL_ADC_ConfigChannel+0x28c>
 8002748:	a201      	add	r2, pc, #4	; (adr r2, 8002750 <HAL_ADC_ConfigChannel+0x1f4>)
 800274a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800274e:	bf00      	nop
 8002750:	08002761 	.word	0x08002761
 8002754:	08002783 	.word	0x08002783
 8002758:	080027a5 	.word	0x080027a5
 800275c:	080027c7 	.word	0x080027c7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002766:	4b9a      	ldr	r3, [pc, #616]	; (80029d0 <HAL_ADC_ConfigChannel+0x474>)
 8002768:	4013      	ands	r3, r2
 800276a:	683a      	ldr	r2, [r7, #0]
 800276c:	6812      	ldr	r2, [r2, #0]
 800276e:	0691      	lsls	r1, r2, #26
 8002770:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002772:	430a      	orrs	r2, r1
 8002774:	431a      	orrs	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800277e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002780:	e07e      	b.n	8002880 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002788:	4b91      	ldr	r3, [pc, #580]	; (80029d0 <HAL_ADC_ConfigChannel+0x474>)
 800278a:	4013      	ands	r3, r2
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	6812      	ldr	r2, [r2, #0]
 8002790:	0691      	lsls	r1, r2, #26
 8002792:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002794:	430a      	orrs	r2, r1
 8002796:	431a      	orrs	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80027a0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80027a2:	e06d      	b.n	8002880 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80027aa:	4b89      	ldr	r3, [pc, #548]	; (80029d0 <HAL_ADC_ConfigChannel+0x474>)
 80027ac:	4013      	ands	r3, r2
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	6812      	ldr	r2, [r2, #0]
 80027b2:	0691      	lsls	r1, r2, #26
 80027b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80027b6:	430a      	orrs	r2, r1
 80027b8:	431a      	orrs	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80027c2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80027c4:	e05c      	b.n	8002880 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80027cc:	4b80      	ldr	r3, [pc, #512]	; (80029d0 <HAL_ADC_ConfigChannel+0x474>)
 80027ce:	4013      	ands	r3, r2
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	6812      	ldr	r2, [r2, #0]
 80027d4:	0691      	lsls	r1, r2, #26
 80027d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80027d8:	430a      	orrs	r2, r1
 80027da:	431a      	orrs	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80027e4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80027e6:	e04b      	b.n	8002880 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	069b      	lsls	r3, r3, #26
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d107      	bne.n	800280c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800280a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002812:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	069b      	lsls	r3, r3, #26
 800281c:	429a      	cmp	r2, r3
 800281e:	d107      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800282e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002836:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	069b      	lsls	r3, r3, #26
 8002840:	429a      	cmp	r2, r3
 8002842:	d107      	bne.n	8002854 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002852:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800285a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	069b      	lsls	r3, r3, #26
 8002864:	429a      	cmp	r2, r3
 8002866:	d10a      	bne.n	800287e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002876:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002878:	e001      	b.n	800287e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800287a:	bf00      	nop
 800287c:	e000      	b.n	8002880 <HAL_ADC_ConfigChannel+0x324>
      break;
 800287e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f003 0303 	and.w	r3, r3, #3
 800288a:	2b01      	cmp	r3, #1
 800288c:	d108      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x344>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	2b01      	cmp	r3, #1
 800289a:	d101      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x344>
 800289c:	2301      	movs	r3, #1
 800289e:	e000      	b.n	80028a2 <HAL_ADC_ConfigChannel+0x346>
 80028a0:	2300      	movs	r3, #0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f040 8130 	bne.w	8002b08 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d00f      	beq.n	80028d0 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2201      	movs	r2, #1
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	43da      	mvns	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	400a      	ands	r2, r1
 80028ca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80028ce:	e049      	b.n	8002964 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2201      	movs	r2, #1
 80028de:	409a      	lsls	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	430a      	orrs	r2, r1
 80028e6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2b09      	cmp	r3, #9
 80028f0:	d91c      	bls.n	800292c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6999      	ldr	r1, [r3, #24]
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	4613      	mov	r3, r2
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	4413      	add	r3, r2
 8002902:	3b1b      	subs	r3, #27
 8002904:	2207      	movs	r2, #7
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	43db      	mvns	r3, r3
 800290c:	4019      	ands	r1, r3
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	6898      	ldr	r0, [r3, #8]
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	4613      	mov	r3, r2
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	4413      	add	r3, r2
 800291c:	3b1b      	subs	r3, #27
 800291e:	fa00 f203 	lsl.w	r2, r0, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	430a      	orrs	r2, r1
 8002928:	619a      	str	r2, [r3, #24]
 800292a:	e01b      	b.n	8002964 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6959      	ldr	r1, [r3, #20]
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	1c5a      	adds	r2, r3, #1
 8002938:	4613      	mov	r3, r2
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	4413      	add	r3, r2
 800293e:	2207      	movs	r2, #7
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	43db      	mvns	r3, r3
 8002946:	4019      	ands	r1, r3
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	6898      	ldr	r0, [r3, #8]
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	1c5a      	adds	r2, r3, #1
 8002952:	4613      	mov	r3, r2
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	4413      	add	r3, r2
 8002958:	fa00 f203 	lsl.w	r2, r0, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	430a      	orrs	r2, r1
 8002962:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800296c:	d004      	beq.n	8002978 <HAL_ADC_ConfigChannel+0x41c>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a18      	ldr	r2, [pc, #96]	; (80029d4 <HAL_ADC_ConfigChannel+0x478>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d101      	bne.n	800297c <HAL_ADC_ConfigChannel+0x420>
 8002978:	4b17      	ldr	r3, [pc, #92]	; (80029d8 <HAL_ADC_ConfigChannel+0x47c>)
 800297a:	e000      	b.n	800297e <HAL_ADC_ConfigChannel+0x422>
 800297c:	4b17      	ldr	r3, [pc, #92]	; (80029dc <HAL_ADC_ConfigChannel+0x480>)
 800297e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2b10      	cmp	r3, #16
 8002986:	d105      	bne.n	8002994 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002988:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002990:	2b00      	cmp	r3, #0
 8002992:	d015      	beq.n	80029c0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002998:	2b11      	cmp	r3, #17
 800299a:	d105      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800299c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00b      	beq.n	80029c0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80029ac:	2b12      	cmp	r3, #18
 80029ae:	f040 80ab 	bne.w	8002b08 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80029b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f040 80a4 	bne.w	8002b08 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029c8:	d10a      	bne.n	80029e0 <HAL_ADC_ConfigChannel+0x484>
 80029ca:	4b02      	ldr	r3, [pc, #8]	; (80029d4 <HAL_ADC_ConfigChannel+0x478>)
 80029cc:	60fb      	str	r3, [r7, #12]
 80029ce:	e022      	b.n	8002a16 <HAL_ADC_ConfigChannel+0x4ba>
 80029d0:	83fff000 	.word	0x83fff000
 80029d4:	50000100 	.word	0x50000100
 80029d8:	50000300 	.word	0x50000300
 80029dc:	50000700 	.word	0x50000700
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a4e      	ldr	r2, [pc, #312]	; (8002b20 <HAL_ADC_ConfigChannel+0x5c4>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d103      	bne.n	80029f2 <HAL_ADC_ConfigChannel+0x496>
 80029ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	e011      	b.n	8002a16 <HAL_ADC_ConfigChannel+0x4ba>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a4b      	ldr	r2, [pc, #300]	; (8002b24 <HAL_ADC_ConfigChannel+0x5c8>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d102      	bne.n	8002a02 <HAL_ADC_ConfigChannel+0x4a6>
 80029fc:	4b4a      	ldr	r3, [pc, #296]	; (8002b28 <HAL_ADC_ConfigChannel+0x5cc>)
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	e009      	b.n	8002a16 <HAL_ADC_ConfigChannel+0x4ba>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a48      	ldr	r2, [pc, #288]	; (8002b28 <HAL_ADC_ConfigChannel+0x5cc>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d102      	bne.n	8002a12 <HAL_ADC_ConfigChannel+0x4b6>
 8002a0c:	4b45      	ldr	r3, [pc, #276]	; (8002b24 <HAL_ADC_ConfigChannel+0x5c8>)
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	e001      	b.n	8002a16 <HAL_ADC_ConfigChannel+0x4ba>
 8002a12:	2300      	movs	r3, #0
 8002a14:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f003 0303 	and.w	r3, r3, #3
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d108      	bne.n	8002a36 <HAL_ADC_ConfigChannel+0x4da>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d101      	bne.n	8002a36 <HAL_ADC_ConfigChannel+0x4da>
 8002a32:	2301      	movs	r3, #1
 8002a34:	e000      	b.n	8002a38 <HAL_ADC_ConfigChannel+0x4dc>
 8002a36:	2300      	movs	r3, #0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d150      	bne.n	8002ade <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002a3c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d010      	beq.n	8002a64 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 0303 	and.w	r3, r3, #3
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d107      	bne.n	8002a5e <HAL_ADC_ConfigChannel+0x502>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d101      	bne.n	8002a5e <HAL_ADC_ConfigChannel+0x502>
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e000      	b.n	8002a60 <HAL_ADC_ConfigChannel+0x504>
 8002a5e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d13c      	bne.n	8002ade <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2b10      	cmp	r3, #16
 8002a6a:	d11d      	bne.n	8002aa8 <HAL_ADC_ConfigChannel+0x54c>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a74:	d118      	bne.n	8002aa8 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002a76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002a7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a80:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a82:	4b2a      	ldr	r3, [pc, #168]	; (8002b2c <HAL_ADC_ConfigChannel+0x5d0>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a2a      	ldr	r2, [pc, #168]	; (8002b30 <HAL_ADC_ConfigChannel+0x5d4>)
 8002a88:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8c:	0c9a      	lsrs	r2, r3, #18
 8002a8e:	4613      	mov	r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	4413      	add	r3, r2
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a98:	e002      	b.n	8002aa0 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1f9      	bne.n	8002a9a <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002aa6:	e02e      	b.n	8002b06 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2b11      	cmp	r3, #17
 8002aae:	d10b      	bne.n	8002ac8 <HAL_ADC_ConfigChannel+0x56c>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ab8:	d106      	bne.n	8002ac8 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002aba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002ac2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ac4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002ac6:	e01e      	b.n	8002b06 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2b12      	cmp	r3, #18
 8002ace:	d11a      	bne.n	8002b06 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002ad0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002ad8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ada:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002adc:	e013      	b.n	8002b06 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	f043 0220 	orr.w	r2, r3, #32
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002af0:	e00a      	b.n	8002b08 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	f043 0220 	orr.w	r2, r3, #32
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002b04:	e000      	b.n	8002b08 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b06:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002b10:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	376c      	adds	r7, #108	; 0x6c
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	50000100 	.word	0x50000100
 8002b24:	50000400 	.word	0x50000400
 8002b28:	50000500 	.word	0x50000500
 8002b2c:	20000050 	.word	0x20000050
 8002b30:	431bde83 	.word	0x431bde83

08002b34 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b099      	sub	sp, #100	; 0x64
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b4c:	d102      	bne.n	8002b54 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002b4e:	4b6d      	ldr	r3, [pc, #436]	; (8002d04 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002b50:	60bb      	str	r3, [r7, #8]
 8002b52:	e01a      	b.n	8002b8a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a6a      	ldr	r2, [pc, #424]	; (8002d04 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d103      	bne.n	8002b66 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002b5e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b62:	60bb      	str	r3, [r7, #8]
 8002b64:	e011      	b.n	8002b8a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a67      	ldr	r2, [pc, #412]	; (8002d08 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d102      	bne.n	8002b76 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002b70:	4b66      	ldr	r3, [pc, #408]	; (8002d0c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002b72:	60bb      	str	r3, [r7, #8]
 8002b74:	e009      	b.n	8002b8a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a64      	ldr	r2, [pc, #400]	; (8002d0c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d102      	bne.n	8002b86 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002b80:	4b61      	ldr	r3, [pc, #388]	; (8002d08 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002b82:	60bb      	str	r3, [r7, #8]
 8002b84:	e001      	b.n	8002b8a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002b86:	2300      	movs	r3, #0
 8002b88:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d101      	bne.n	8002b94 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e0b0      	b.n	8002cf6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d101      	bne.n	8002ba2 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	e0a9      	b.n	8002cf6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f040 808d 	bne.w	8002cd4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f003 0304 	and.w	r3, r3, #4
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f040 8086 	bne.w	8002cd4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bd0:	d004      	beq.n	8002bdc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a4b      	ldr	r2, [pc, #300]	; (8002d04 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d101      	bne.n	8002be0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002bdc:	4b4c      	ldr	r3, [pc, #304]	; (8002d10 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002bde:	e000      	b.n	8002be2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002be0:	4b4c      	ldr	r3, [pc, #304]	; (8002d14 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002be2:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d040      	beq.n	8002c6e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002bec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	6859      	ldr	r1, [r3, #4]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002bfe:	035b      	lsls	r3, r3, #13
 8002c00:	430b      	orrs	r3, r1
 8002c02:	431a      	orrs	r2, r3
 8002c04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c06:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 0303 	and.w	r3, r3, #3
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d108      	bne.n	8002c28 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d101      	bne.n	8002c28 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002c24:	2301      	movs	r3, #1
 8002c26:	e000      	b.n	8002c2a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002c28:	2300      	movs	r3, #0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d15c      	bne.n	8002ce8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 0303 	and.w	r3, r3, #3
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d107      	bne.n	8002c4a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d101      	bne.n	8002c4a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002c46:	2301      	movs	r3, #1
 8002c48:	e000      	b.n	8002c4c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002c4a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d14b      	bne.n	8002ce8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002c50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002c58:	f023 030f 	bic.w	r3, r3, #15
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	6811      	ldr	r1, [r2, #0]
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	6892      	ldr	r2, [r2, #8]
 8002c64:	430a      	orrs	r2, r1
 8002c66:	431a      	orrs	r2, r3
 8002c68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c6a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c6c:	e03c      	b.n	8002ce8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002c6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c78:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f003 0303 	and.w	r3, r3, #3
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d108      	bne.n	8002c9a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d101      	bne.n	8002c9a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002c96:	2301      	movs	r3, #1
 8002c98:	e000      	b.n	8002c9c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d123      	bne.n	8002ce8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f003 0303 	and.w	r3, r3, #3
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d107      	bne.n	8002cbc <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d101      	bne.n	8002cbc <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e000      	b.n	8002cbe <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002cbc:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d112      	bne.n	8002ce8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002cc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002cca:	f023 030f 	bic.w	r3, r3, #15
 8002cce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002cd0:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cd2:	e009      	b.n	8002ce8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd8:	f043 0220 	orr.w	r2, r3, #32
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002ce6:	e000      	b.n	8002cea <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ce8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002cf2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3764      	adds	r7, #100	; 0x64
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	50000100 	.word	0x50000100
 8002d08:	50000400 	.word	0x50000400
 8002d0c:	50000500 	.word	0x50000500
 8002d10:	50000300 	.word	0x50000300
 8002d14:	50000700 	.word	0x50000700

08002d18 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d24:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d126      	bne.n	8002d80 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d115      	bne.n	8002d78 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d111      	bne.n	8002d78 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d105      	bne.n	8002d78 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d70:	f043 0201 	orr.w	r2, r3, #1
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f7fe fce1 	bl	8001740 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002d7e:	e004      	b.n	8002d8a <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	4798      	blx	r3
}
 8002d8a:	bf00      	nop
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b084      	sub	sp, #16
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f7ff f8b1 	bl	8001f08 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8002da6:	bf00      	nop
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b084      	sub	sp, #16
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dba:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dcc:	f043 0204 	orr.w	r2, r3, #4
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f7ff f8a1 	bl	8001f1c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002dda:	bf00      	nop
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
	...

08002de4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002dec:	2300      	movs	r3, #0
 8002dee:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 0303 	and.w	r3, r3, #3
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d108      	bne.n	8002e10 <ADC_Enable+0x2c>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d101      	bne.n	8002e10 <ADC_Enable+0x2c>
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e000      	b.n	8002e12 <ADC_Enable+0x2e>
 8002e10:	2300      	movs	r3, #0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d143      	bne.n	8002e9e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	689a      	ldr	r2, [r3, #8]
 8002e1c:	4b22      	ldr	r3, [pc, #136]	; (8002ea8 <ADC_Enable+0xc4>)
 8002e1e:	4013      	ands	r3, r2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00d      	beq.n	8002e40 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e28:	f043 0210 	orr.w	r2, r3, #16
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e34:	f043 0201 	orr.w	r2, r3, #1
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e02f      	b.n	8002ea0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689a      	ldr	r2, [r3, #8]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f042 0201 	orr.w	r2, r2, #1
 8002e4e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002e50:	f7ff f82a 	bl	8001ea8 <HAL_GetTick>
 8002e54:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002e56:	e01b      	b.n	8002e90 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e58:	f7ff f826 	bl	8001ea8 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d914      	bls.n	8002e90 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d00d      	beq.n	8002e90 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e78:	f043 0210 	orr.w	r2, r3, #16
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e84:	f043 0201 	orr.w	r2, r3, #1
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e007      	b.n	8002ea0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d1dc      	bne.n	8002e58 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	8000003f 	.word	0x8000003f

08002eac <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f003 0303 	and.w	r3, r3, #3
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d108      	bne.n	8002ed8 <ADC_Disable+0x2c>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d101      	bne.n	8002ed8 <ADC_Disable+0x2c>
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e000      	b.n	8002eda <ADC_Disable+0x2e>
 8002ed8:	2300      	movs	r3, #0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d047      	beq.n	8002f6e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f003 030d 	and.w	r3, r3, #13
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d10f      	bne.n	8002f0c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689a      	ldr	r2, [r3, #8]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f042 0202 	orr.w	r2, r2, #2
 8002efa:	609a      	str	r2, [r3, #8]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2203      	movs	r2, #3
 8002f02:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002f04:	f7fe ffd0 	bl	8001ea8 <HAL_GetTick>
 8002f08:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002f0a:	e029      	b.n	8002f60 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f10:	f043 0210 	orr.w	r2, r3, #16
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1c:	f043 0201 	orr.w	r2, r3, #1
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e023      	b.n	8002f70 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f28:	f7fe ffbe 	bl	8001ea8 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d914      	bls.n	8002f60 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d10d      	bne.n	8002f60 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f48:	f043 0210 	orr.w	r2, r3, #16
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f54:	f043 0201 	orr.w	r2, r3, #1
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e007      	b.n	8002f70 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d0dc      	beq.n	8002f28 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f003 0307 	and.w	r3, r3, #7
 8002f86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f88:	4b0c      	ldr	r3, [pc, #48]	; (8002fbc <__NVIC_SetPriorityGrouping+0x44>)
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f8e:	68ba      	ldr	r2, [r7, #8]
 8002f90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f94:	4013      	ands	r3, r2
 8002f96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002faa:	4a04      	ldr	r2, [pc, #16]	; (8002fbc <__NVIC_SetPriorityGrouping+0x44>)
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	60d3      	str	r3, [r2, #12]
}
 8002fb0:	bf00      	nop
 8002fb2:	3714      	adds	r7, #20
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr
 8002fbc:	e000ed00 	.word	0xe000ed00

08002fc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fc4:	4b04      	ldr	r3, [pc, #16]	; (8002fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	0a1b      	lsrs	r3, r3, #8
 8002fca:	f003 0307 	and.w	r3, r3, #7
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	e000ed00 	.word	0xe000ed00

08002fdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	db0b      	blt.n	8003006 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fee:	79fb      	ldrb	r3, [r7, #7]
 8002ff0:	f003 021f 	and.w	r2, r3, #31
 8002ff4:	4907      	ldr	r1, [pc, #28]	; (8003014 <__NVIC_EnableIRQ+0x38>)
 8002ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffa:	095b      	lsrs	r3, r3, #5
 8002ffc:	2001      	movs	r0, #1
 8002ffe:	fa00 f202 	lsl.w	r2, r0, r2
 8003002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	e000e100 	.word	0xe000e100

08003018 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	4603      	mov	r3, r0
 8003020:	6039      	str	r1, [r7, #0]
 8003022:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003028:	2b00      	cmp	r3, #0
 800302a:	db0a      	blt.n	8003042 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	b2da      	uxtb	r2, r3
 8003030:	490c      	ldr	r1, [pc, #48]	; (8003064 <__NVIC_SetPriority+0x4c>)
 8003032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003036:	0112      	lsls	r2, r2, #4
 8003038:	b2d2      	uxtb	r2, r2
 800303a:	440b      	add	r3, r1
 800303c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003040:	e00a      	b.n	8003058 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	b2da      	uxtb	r2, r3
 8003046:	4908      	ldr	r1, [pc, #32]	; (8003068 <__NVIC_SetPriority+0x50>)
 8003048:	79fb      	ldrb	r3, [r7, #7]
 800304a:	f003 030f 	and.w	r3, r3, #15
 800304e:	3b04      	subs	r3, #4
 8003050:	0112      	lsls	r2, r2, #4
 8003052:	b2d2      	uxtb	r2, r2
 8003054:	440b      	add	r3, r1
 8003056:	761a      	strb	r2, [r3, #24]
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr
 8003064:	e000e100 	.word	0xe000e100
 8003068:	e000ed00 	.word	0xe000ed00

0800306c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800306c:	b480      	push	{r7}
 800306e:	b089      	sub	sp, #36	; 0x24
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	f1c3 0307 	rsb	r3, r3, #7
 8003086:	2b04      	cmp	r3, #4
 8003088:	bf28      	it	cs
 800308a:	2304      	movcs	r3, #4
 800308c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	3304      	adds	r3, #4
 8003092:	2b06      	cmp	r3, #6
 8003094:	d902      	bls.n	800309c <NVIC_EncodePriority+0x30>
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	3b03      	subs	r3, #3
 800309a:	e000      	b.n	800309e <NVIC_EncodePriority+0x32>
 800309c:	2300      	movs	r3, #0
 800309e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030a0:	f04f 32ff 	mov.w	r2, #4294967295
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	fa02 f303 	lsl.w	r3, r2, r3
 80030aa:	43da      	mvns	r2, r3
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	401a      	ands	r2, r3
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030b4:	f04f 31ff 	mov.w	r1, #4294967295
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	fa01 f303 	lsl.w	r3, r1, r3
 80030be:	43d9      	mvns	r1, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c4:	4313      	orrs	r3, r2
         );
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3724      	adds	r7, #36	; 0x24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
	...

080030d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	3b01      	subs	r3, #1
 80030e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030e4:	d301      	bcc.n	80030ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030e6:	2301      	movs	r3, #1
 80030e8:	e00f      	b.n	800310a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030ea:	4a0a      	ldr	r2, [pc, #40]	; (8003114 <SysTick_Config+0x40>)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	3b01      	subs	r3, #1
 80030f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030f2:	210f      	movs	r1, #15
 80030f4:	f04f 30ff 	mov.w	r0, #4294967295
 80030f8:	f7ff ff8e 	bl	8003018 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030fc:	4b05      	ldr	r3, [pc, #20]	; (8003114 <SysTick_Config+0x40>)
 80030fe:	2200      	movs	r2, #0
 8003100:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003102:	4b04      	ldr	r3, [pc, #16]	; (8003114 <SysTick_Config+0x40>)
 8003104:	2207      	movs	r2, #7
 8003106:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	e000e010 	.word	0xe000e010

08003118 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f7ff ff29 	bl	8002f78 <__NVIC_SetPriorityGrouping>
}
 8003126:	bf00      	nop
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b086      	sub	sp, #24
 8003132:	af00      	add	r7, sp, #0
 8003134:	4603      	mov	r3, r0
 8003136:	60b9      	str	r1, [r7, #8]
 8003138:	607a      	str	r2, [r7, #4]
 800313a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800313c:	2300      	movs	r3, #0
 800313e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003140:	f7ff ff3e 	bl	8002fc0 <__NVIC_GetPriorityGrouping>
 8003144:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	68b9      	ldr	r1, [r7, #8]
 800314a:	6978      	ldr	r0, [r7, #20]
 800314c:	f7ff ff8e 	bl	800306c <NVIC_EncodePriority>
 8003150:	4602      	mov	r2, r0
 8003152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003156:	4611      	mov	r1, r2
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff ff5d 	bl	8003018 <__NVIC_SetPriority>
}
 800315e:	bf00      	nop
 8003160:	3718      	adds	r7, #24
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b082      	sub	sp, #8
 800316a:	af00      	add	r7, sp, #0
 800316c:	4603      	mov	r3, r0
 800316e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003174:	4618      	mov	r0, r3
 8003176:	f7ff ff31 	bl	8002fdc <__NVIC_EnableIRQ>
}
 800317a:	bf00      	nop
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b082      	sub	sp, #8
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7ff ffa2 	bl	80030d4 <SysTick_Config>
 8003190:	4603      	mov	r3, r0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800319a:	b580      	push	{r7, lr}
 800319c:	b084      	sub	sp, #16
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80031a2:	2300      	movs	r3, #0
 80031a4:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d101      	bne.n	80031b0 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e037      	b.n	8003220 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2202      	movs	r2, #2
 80031b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80031c6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80031ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80031d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f9b8 	bl	8003578 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800321e:	2300      	movs	r3, #0
}  
 8003220:	4618      	mov	r0, r3
 8003222:	3710      	adds	r7, #16
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
 8003234:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8003236:	2300      	movs	r3, #0
 8003238:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d101      	bne.n	8003248 <HAL_DMA_Start_IT+0x20>
 8003244:	2302      	movs	r3, #2
 8003246:	e04a      	b.n	80032de <HAL_DMA_Start_IT+0xb6>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003256:	2b01      	cmp	r3, #1
 8003258:	d13a      	bne.n	80032d0 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2202      	movs	r2, #2
 800325e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 0201 	bic.w	r2, r2, #1
 8003276:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	68b9      	ldr	r1, [r7, #8]
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f000 f94b 	bl	800351a <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003288:	2b00      	cmp	r3, #0
 800328a:	d008      	beq.n	800329e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f042 020e 	orr.w	r2, r2, #14
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	e00f      	b.n	80032be <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f042 020a 	orr.w	r2, r2, #10
 80032ac:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f022 0204 	bic.w	r2, r2, #4
 80032bc:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f042 0201 	orr.w	r2, r2, #1
 80032cc:	601a      	str	r2, [r3, #0]
 80032ce:	e005      	b.n	80032dc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80032d8:	2302      	movs	r3, #2
 80032da:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80032dc:	7dfb      	ldrb	r3, [r7, #23]
} 
 80032de:	4618      	mov	r0, r3
 80032e0:	3718      	adds	r7, #24
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d008      	beq.n	800330a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2204      	movs	r2, #4
 80032fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e020      	b.n	800334c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 020e 	bic.w	r2, r2, #14
 8003318:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 0201 	bic.w	r2, r2, #1
 8003328:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003332:	2101      	movs	r1, #1
 8003334:	fa01 f202 	lsl.w	r2, r1, r2
 8003338:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003360:	2300      	movs	r3, #0
 8003362:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800336a:	2b02      	cmp	r3, #2
 800336c:	d005      	beq.n	800337a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2204      	movs	r2, #4
 8003372:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	73fb      	strb	r3, [r7, #15]
 8003378:	e027      	b.n	80033ca <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 020e 	bic.w	r2, r2, #14
 8003388:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 0201 	bic.w	r2, r2, #1
 8003398:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a2:	2101      	movs	r1, #1
 80033a4:	fa01 f202 	lsl.w	r2, r1, r2
 80033a8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	4798      	blx	r3
    } 
  }
  return status;
 80033ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3710      	adds	r7, #16
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f0:	2204      	movs	r2, #4
 80033f2:	409a      	lsls	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	4013      	ands	r3, r2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d024      	beq.n	8003446 <HAL_DMA_IRQHandler+0x72>
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	f003 0304 	and.w	r3, r3, #4
 8003402:	2b00      	cmp	r3, #0
 8003404:	d01f      	beq.n	8003446 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0320 	and.w	r3, r3, #32
 8003410:	2b00      	cmp	r3, #0
 8003412:	d107      	bne.n	8003424 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f022 0204 	bic.w	r2, r2, #4
 8003422:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342c:	2104      	movs	r1, #4
 800342e:	fa01 f202 	lsl.w	r2, r1, r2
 8003432:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003438:	2b00      	cmp	r3, #0
 800343a:	d06a      	beq.n	8003512 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003444:	e065      	b.n	8003512 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	2202      	movs	r2, #2
 800344c:	409a      	lsls	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	4013      	ands	r3, r2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d02c      	beq.n	80034b0 <HAL_DMA_IRQHandler+0xdc>
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d027      	beq.n	80034b0 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0320 	and.w	r3, r3, #32
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10b      	bne.n	8003486 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 020a 	bic.w	r2, r2, #10
 800347c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800348e:	2102      	movs	r1, #2
 8003490:	fa01 f202 	lsl.w	r2, r1, r2
 8003494:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d035      	beq.n	8003512 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80034ae:	e030      	b.n	8003512 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b4:	2208      	movs	r2, #8
 80034b6:	409a      	lsls	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	4013      	ands	r3, r2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d028      	beq.n	8003512 <HAL_DMA_IRQHandler+0x13e>
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	f003 0308 	and.w	r3, r3, #8
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d023      	beq.n	8003512 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 020e 	bic.w	r2, r2, #14
 80034d8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e2:	2101      	movs	r1, #1
 80034e4:	fa01 f202 	lsl.w	r2, r1, r2
 80034e8:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003504:	2b00      	cmp	r3, #0
 8003506:	d004      	beq.n	8003512 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	4798      	blx	r3
    }
  }
}  
 8003510:	e7ff      	b.n	8003512 <HAL_DMA_IRQHandler+0x13e>
 8003512:	bf00      	nop
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800351a:	b480      	push	{r7}
 800351c:	b085      	sub	sp, #20
 800351e:	af00      	add	r7, sp, #0
 8003520:	60f8      	str	r0, [r7, #12]
 8003522:	60b9      	str	r1, [r7, #8]
 8003524:	607a      	str	r2, [r7, #4]
 8003526:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003530:	2101      	movs	r1, #1
 8003532:	fa01 f202 	lsl.w	r2, r1, r2
 8003536:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	2b10      	cmp	r3, #16
 8003546:	d108      	bne.n	800355a <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003558:	e007      	b.n	800356a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68ba      	ldr	r2, [r7, #8]
 8003560:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	60da      	str	r2, [r3, #12]
}
 800356a:	bf00      	nop
 800356c:	3714      	adds	r7, #20
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
	...

08003578 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	461a      	mov	r2, r3
 8003586:	4b14      	ldr	r3, [pc, #80]	; (80035d8 <DMA_CalcBaseAndBitshift+0x60>)
 8003588:	429a      	cmp	r2, r3
 800358a:	d80f      	bhi.n	80035ac <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	461a      	mov	r2, r3
 8003592:	4b12      	ldr	r3, [pc, #72]	; (80035dc <DMA_CalcBaseAndBitshift+0x64>)
 8003594:	4413      	add	r3, r2
 8003596:	4a12      	ldr	r2, [pc, #72]	; (80035e0 <DMA_CalcBaseAndBitshift+0x68>)
 8003598:	fba2 2303 	umull	r2, r3, r2, r3
 800359c:	091b      	lsrs	r3, r3, #4
 800359e:	009a      	lsls	r2, r3, #2
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a0f      	ldr	r2, [pc, #60]	; (80035e4 <DMA_CalcBaseAndBitshift+0x6c>)
 80035a8:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80035aa:	e00e      	b.n	80035ca <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	461a      	mov	r2, r3
 80035b2:	4b0d      	ldr	r3, [pc, #52]	; (80035e8 <DMA_CalcBaseAndBitshift+0x70>)
 80035b4:	4413      	add	r3, r2
 80035b6:	4a0a      	ldr	r2, [pc, #40]	; (80035e0 <DMA_CalcBaseAndBitshift+0x68>)
 80035b8:	fba2 2303 	umull	r2, r3, r2, r3
 80035bc:	091b      	lsrs	r3, r3, #4
 80035be:	009a      	lsls	r2, r3, #2
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a09      	ldr	r2, [pc, #36]	; (80035ec <DMA_CalcBaseAndBitshift+0x74>)
 80035c8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80035ca:	bf00      	nop
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	40020407 	.word	0x40020407
 80035dc:	bffdfff8 	.word	0xbffdfff8
 80035e0:	cccccccd 	.word	0xcccccccd
 80035e4:	40020000 	.word	0x40020000
 80035e8:	bffdfbf8 	.word	0xbffdfbf8
 80035ec:	40020400 	.word	0x40020400

080035f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b087      	sub	sp, #28
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035fa:	2300      	movs	r3, #0
 80035fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035fe:	e160      	b.n	80038c2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	2101      	movs	r1, #1
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	fa01 f303 	lsl.w	r3, r1, r3
 800360c:	4013      	ands	r3, r2
 800360e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2b00      	cmp	r3, #0
 8003614:	f000 8152 	beq.w	80038bc <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f003 0303 	and.w	r3, r3, #3
 8003620:	2b01      	cmp	r3, #1
 8003622:	d005      	beq.n	8003630 <HAL_GPIO_Init+0x40>
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f003 0303 	and.w	r3, r3, #3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d130      	bne.n	8003692 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	2203      	movs	r2, #3
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	43db      	mvns	r3, r3
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	4013      	ands	r3, r2
 8003646:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	68da      	ldr	r2, [r3, #12]
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	fa02 f303 	lsl.w	r3, r2, r3
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	4313      	orrs	r3, r2
 8003658:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003666:	2201      	movs	r2, #1
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	fa02 f303 	lsl.w	r3, r2, r3
 800366e:	43db      	mvns	r3, r3
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	4013      	ands	r3, r2
 8003674:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	091b      	lsrs	r3, r3, #4
 800367c:	f003 0201 	and.w	r2, r3, #1
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	fa02 f303 	lsl.w	r3, r2, r3
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	4313      	orrs	r3, r2
 800368a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f003 0303 	and.w	r3, r3, #3
 800369a:	2b03      	cmp	r3, #3
 800369c:	d017      	beq.n	80036ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	005b      	lsls	r3, r3, #1
 80036a8:	2203      	movs	r2, #3
 80036aa:	fa02 f303 	lsl.w	r3, r2, r3
 80036ae:	43db      	mvns	r3, r3
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	4013      	ands	r3, r2
 80036b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	689a      	ldr	r2, [r3, #8]
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f003 0303 	and.w	r3, r3, #3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d123      	bne.n	8003722 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	08da      	lsrs	r2, r3, #3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	3208      	adds	r2, #8
 80036e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	f003 0307 	and.w	r3, r3, #7
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	220f      	movs	r2, #15
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	43db      	mvns	r3, r3
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	4013      	ands	r3, r2
 80036fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	691a      	ldr	r2, [r3, #16]
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	f003 0307 	and.w	r3, r3, #7
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	fa02 f303 	lsl.w	r3, r2, r3
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	4313      	orrs	r3, r2
 8003712:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	08da      	lsrs	r2, r3, #3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	3208      	adds	r2, #8
 800371c:	6939      	ldr	r1, [r7, #16]
 800371e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	2203      	movs	r2, #3
 800372e:	fa02 f303 	lsl.w	r3, r2, r3
 8003732:	43db      	mvns	r3, r3
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	4013      	ands	r3, r2
 8003738:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f003 0203 	and.w	r2, r3, #3
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	fa02 f303 	lsl.w	r3, r2, r3
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	4313      	orrs	r3, r2
 800374e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800375e:	2b00      	cmp	r3, #0
 8003760:	f000 80ac 	beq.w	80038bc <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003764:	4b5e      	ldr	r3, [pc, #376]	; (80038e0 <HAL_GPIO_Init+0x2f0>)
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	4a5d      	ldr	r2, [pc, #372]	; (80038e0 <HAL_GPIO_Init+0x2f0>)
 800376a:	f043 0301 	orr.w	r3, r3, #1
 800376e:	6193      	str	r3, [r2, #24]
 8003770:	4b5b      	ldr	r3, [pc, #364]	; (80038e0 <HAL_GPIO_Init+0x2f0>)
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	f003 0301 	and.w	r3, r3, #1
 8003778:	60bb      	str	r3, [r7, #8]
 800377a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800377c:	4a59      	ldr	r2, [pc, #356]	; (80038e4 <HAL_GPIO_Init+0x2f4>)
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	089b      	lsrs	r3, r3, #2
 8003782:	3302      	adds	r3, #2
 8003784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003788:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	f003 0303 	and.w	r3, r3, #3
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	220f      	movs	r2, #15
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	43db      	mvns	r3, r3
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	4013      	ands	r3, r2
 800379e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80037a6:	d025      	beq.n	80037f4 <HAL_GPIO_Init+0x204>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a4f      	ldr	r2, [pc, #316]	; (80038e8 <HAL_GPIO_Init+0x2f8>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d01f      	beq.n	80037f0 <HAL_GPIO_Init+0x200>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a4e      	ldr	r2, [pc, #312]	; (80038ec <HAL_GPIO_Init+0x2fc>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d019      	beq.n	80037ec <HAL_GPIO_Init+0x1fc>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a4d      	ldr	r2, [pc, #308]	; (80038f0 <HAL_GPIO_Init+0x300>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d013      	beq.n	80037e8 <HAL_GPIO_Init+0x1f8>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a4c      	ldr	r2, [pc, #304]	; (80038f4 <HAL_GPIO_Init+0x304>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d00d      	beq.n	80037e4 <HAL_GPIO_Init+0x1f4>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a4b      	ldr	r2, [pc, #300]	; (80038f8 <HAL_GPIO_Init+0x308>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d007      	beq.n	80037e0 <HAL_GPIO_Init+0x1f0>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a4a      	ldr	r2, [pc, #296]	; (80038fc <HAL_GPIO_Init+0x30c>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d101      	bne.n	80037dc <HAL_GPIO_Init+0x1ec>
 80037d8:	2306      	movs	r3, #6
 80037da:	e00c      	b.n	80037f6 <HAL_GPIO_Init+0x206>
 80037dc:	2307      	movs	r3, #7
 80037de:	e00a      	b.n	80037f6 <HAL_GPIO_Init+0x206>
 80037e0:	2305      	movs	r3, #5
 80037e2:	e008      	b.n	80037f6 <HAL_GPIO_Init+0x206>
 80037e4:	2304      	movs	r3, #4
 80037e6:	e006      	b.n	80037f6 <HAL_GPIO_Init+0x206>
 80037e8:	2303      	movs	r3, #3
 80037ea:	e004      	b.n	80037f6 <HAL_GPIO_Init+0x206>
 80037ec:	2302      	movs	r3, #2
 80037ee:	e002      	b.n	80037f6 <HAL_GPIO_Init+0x206>
 80037f0:	2301      	movs	r3, #1
 80037f2:	e000      	b.n	80037f6 <HAL_GPIO_Init+0x206>
 80037f4:	2300      	movs	r3, #0
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	f002 0203 	and.w	r2, r2, #3
 80037fc:	0092      	lsls	r2, r2, #2
 80037fe:	4093      	lsls	r3, r2
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	4313      	orrs	r3, r2
 8003804:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003806:	4937      	ldr	r1, [pc, #220]	; (80038e4 <HAL_GPIO_Init+0x2f4>)
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	089b      	lsrs	r3, r3, #2
 800380c:	3302      	adds	r3, #2
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003814:	4b3a      	ldr	r3, [pc, #232]	; (8003900 <HAL_GPIO_Init+0x310>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	43db      	mvns	r3, r3
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	4013      	ands	r3, r2
 8003822:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d003      	beq.n	8003838 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	4313      	orrs	r3, r2
 8003836:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003838:	4a31      	ldr	r2, [pc, #196]	; (8003900 <HAL_GPIO_Init+0x310>)
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800383e:	4b30      	ldr	r3, [pc, #192]	; (8003900 <HAL_GPIO_Init+0x310>)
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	43db      	mvns	r3, r3
 8003848:	693a      	ldr	r2, [r7, #16]
 800384a:	4013      	ands	r3, r2
 800384c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d003      	beq.n	8003862 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	4313      	orrs	r3, r2
 8003860:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003862:	4a27      	ldr	r2, [pc, #156]	; (8003900 <HAL_GPIO_Init+0x310>)
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003868:	4b25      	ldr	r3, [pc, #148]	; (8003900 <HAL_GPIO_Init+0x310>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	43db      	mvns	r3, r3
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	4013      	ands	r3, r2
 8003876:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d003      	beq.n	800388c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	4313      	orrs	r3, r2
 800388a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800388c:	4a1c      	ldr	r2, [pc, #112]	; (8003900 <HAL_GPIO_Init+0x310>)
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003892:	4b1b      	ldr	r3, [pc, #108]	; (8003900 <HAL_GPIO_Init+0x310>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	43db      	mvns	r3, r3
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	4013      	ands	r3, r2
 80038a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80038b6:	4a12      	ldr	r2, [pc, #72]	; (8003900 <HAL_GPIO_Init+0x310>)
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	3301      	adds	r3, #1
 80038c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	fa22 f303 	lsr.w	r3, r2, r3
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	f47f ae97 	bne.w	8003600 <HAL_GPIO_Init+0x10>
  }
}
 80038d2:	bf00      	nop
 80038d4:	bf00      	nop
 80038d6:	371c      	adds	r7, #28
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr
 80038e0:	40021000 	.word	0x40021000
 80038e4:	40010000 	.word	0x40010000
 80038e8:	48000400 	.word	0x48000400
 80038ec:	48000800 	.word	0x48000800
 80038f0:	48000c00 	.word	0x48000c00
 80038f4:	48001000 	.word	0x48001000
 80038f8:	48001400 	.word	0x48001400
 80038fc:	48001800 	.word	0x48001800
 8003900:	40010400 	.word	0x40010400

08003904 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	460b      	mov	r3, r1
 800390e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	691a      	ldr	r2, [r3, #16]
 8003914:	887b      	ldrh	r3, [r7, #2]
 8003916:	4013      	ands	r3, r2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d002      	beq.n	8003922 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800391c:	2301      	movs	r3, #1
 800391e:	73fb      	strb	r3, [r7, #15]
 8003920:	e001      	b.n	8003926 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003922:	2300      	movs	r3, #0
 8003924:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003926:	7bfb      	ldrb	r3, [r7, #15]
}
 8003928:	4618      	mov	r0, r3
 800392a:	3714      	adds	r7, #20
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	460b      	mov	r3, r1
 800393e:	807b      	strh	r3, [r7, #2]
 8003940:	4613      	mov	r3, r2
 8003942:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003944:	787b      	ldrb	r3, [r7, #1]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800394a:	887a      	ldrh	r2, [r7, #2]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003950:	e002      	b.n	8003958 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003952:	887a      	ldrh	r2, [r7, #2]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	4603      	mov	r3, r0
 800396c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800396e:	4b08      	ldr	r3, [pc, #32]	; (8003990 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003970:	695a      	ldr	r2, [r3, #20]
 8003972:	88fb      	ldrh	r3, [r7, #6]
 8003974:	4013      	ands	r3, r2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d006      	beq.n	8003988 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800397a:	4a05      	ldr	r2, [pc, #20]	; (8003990 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800397c:	88fb      	ldrh	r3, [r7, #6]
 800397e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003980:	88fb      	ldrh	r3, [r7, #6]
 8003982:	4618      	mov	r0, r3
 8003984:	f000 f806 	bl	8003994 <HAL_GPIO_EXTI_Callback>
  }
}
 8003988:	bf00      	nop
 800398a:	3708      	adds	r7, #8
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	40010400 	.word	0x40010400

08003994 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	4603      	mov	r3, r0
 800399c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800399e:	bf00      	nop
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
	...

080039ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039b8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80039bc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d102      	bne.n	80039d2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	f001 b83a 	b.w	8004a46 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039d6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f000 816f 	beq.w	8003cc6 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80039e8:	4bb5      	ldr	r3, [pc, #724]	; (8003cc0 <HAL_RCC_OscConfig+0x314>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f003 030c 	and.w	r3, r3, #12
 80039f0:	2b04      	cmp	r3, #4
 80039f2:	d00c      	beq.n	8003a0e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80039f4:	4bb2      	ldr	r3, [pc, #712]	; (8003cc0 <HAL_RCC_OscConfig+0x314>)
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f003 030c 	and.w	r3, r3, #12
 80039fc:	2b08      	cmp	r3, #8
 80039fe:	d15c      	bne.n	8003aba <HAL_RCC_OscConfig+0x10e>
 8003a00:	4baf      	ldr	r3, [pc, #700]	; (8003cc0 <HAL_RCC_OscConfig+0x314>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a0c:	d155      	bne.n	8003aba <HAL_RCC_OscConfig+0x10e>
 8003a0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a12:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a16:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003a1a:	fa93 f3a3 	rbit	r3, r3
 8003a1e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003a22:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a26:	fab3 f383 	clz	r3, r3
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	095b      	lsrs	r3, r3, #5
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	f043 0301 	orr.w	r3, r3, #1
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d102      	bne.n	8003a40 <HAL_RCC_OscConfig+0x94>
 8003a3a:	4ba1      	ldr	r3, [pc, #644]	; (8003cc0 <HAL_RCC_OscConfig+0x314>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	e015      	b.n	8003a6c <HAL_RCC_OscConfig+0xc0>
 8003a40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a44:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a48:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003a4c:	fa93 f3a3 	rbit	r3, r3
 8003a50:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003a54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a58:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003a5c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003a60:	fa93 f3a3 	rbit	r3, r3
 8003a64:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003a68:	4b95      	ldr	r3, [pc, #596]	; (8003cc0 <HAL_RCC_OscConfig+0x314>)
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a70:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8003a74:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003a78:	fa92 f2a2 	rbit	r2, r2
 8003a7c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8003a80:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003a84:	fab2 f282 	clz	r2, r2
 8003a88:	b2d2      	uxtb	r2, r2
 8003a8a:	f042 0220 	orr.w	r2, r2, #32
 8003a8e:	b2d2      	uxtb	r2, r2
 8003a90:	f002 021f 	and.w	r2, r2, #31
 8003a94:	2101      	movs	r1, #1
 8003a96:	fa01 f202 	lsl.w	r2, r1, r2
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 8111 	beq.w	8003cc4 <HAL_RCC_OscConfig+0x318>
 8003aa2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aa6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	f040 8108 	bne.w	8003cc4 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	f000 bfc6 	b.w	8004a46 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003aba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003abe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aca:	d106      	bne.n	8003ada <HAL_RCC_OscConfig+0x12e>
 8003acc:	4b7c      	ldr	r3, [pc, #496]	; (8003cc0 <HAL_RCC_OscConfig+0x314>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a7b      	ldr	r2, [pc, #492]	; (8003cc0 <HAL_RCC_OscConfig+0x314>)
 8003ad2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ad6:	6013      	str	r3, [r2, #0]
 8003ad8:	e036      	b.n	8003b48 <HAL_RCC_OscConfig+0x19c>
 8003ada:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ade:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10c      	bne.n	8003b04 <HAL_RCC_OscConfig+0x158>
 8003aea:	4b75      	ldr	r3, [pc, #468]	; (8003cc0 <HAL_RCC_OscConfig+0x314>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a74      	ldr	r2, [pc, #464]	; (8003cc0 <HAL_RCC_OscConfig+0x314>)
 8003af0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003af4:	6013      	str	r3, [r2, #0]
 8003af6:	4b72      	ldr	r3, [pc, #456]	; (8003cc0 <HAL_RCC_OscConfig+0x314>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a71      	ldr	r2, [pc, #452]	; (8003cc0 <HAL_RCC_OscConfig+0x314>)
 8003afc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b00:	6013      	str	r3, [r2, #0]
 8003b02:	e021      	b.n	8003b48 <HAL_RCC_OscConfig+0x19c>
 8003b04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b08:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b14:	d10c      	bne.n	8003b30 <HAL_RCC_OscConfig+0x184>
 8003b16:	4b6a      	ldr	r3, [pc, #424]	; (8003cc0 <HAL_RCC_OscConfig+0x314>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a69      	ldr	r2, [pc, #420]	; (8003cc0 <HAL_RCC_OscConfig+0x314>)
 8003b1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b20:	6013      	str	r3, [r2, #0]
 8003b22:	4b67      	ldr	r3, [pc, #412]	; (8003cc0 <HAL_RCC_OscConfig+0x314>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a66      	ldr	r2, [pc, #408]	; (8003cc0 <HAL_RCC_OscConfig+0x314>)
 8003b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b2c:	6013      	str	r3, [r2, #0]
 8003b2e:	e00b      	b.n	8003b48 <HAL_RCC_OscConfig+0x19c>
 8003b30:	4b63      	ldr	r3, [pc, #396]	; (8003cc0 <HAL_RCC_OscConfig+0x314>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a62      	ldr	r2, [pc, #392]	; (8003cc0 <HAL_RCC_OscConfig+0x314>)
 8003b36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b3a:	6013      	str	r3, [r2, #0]
 8003b3c:	4b60      	ldr	r3, [pc, #384]	; (8003cc0 <HAL_RCC_OscConfig+0x314>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a5f      	ldr	r2, [pc, #380]	; (8003cc0 <HAL_RCC_OscConfig+0x314>)
 8003b42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b46:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b4c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d059      	beq.n	8003c0c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b58:	f7fe f9a6 	bl	8001ea8 <HAL_GetTick>
 8003b5c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b60:	e00a      	b.n	8003b78 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b62:	f7fe f9a1 	bl	8001ea8 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b64      	cmp	r3, #100	; 0x64
 8003b70:	d902      	bls.n	8003b78 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	f000 bf67 	b.w	8004a46 <HAL_RCC_OscConfig+0x109a>
 8003b78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b7c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b80:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003b84:	fa93 f3a3 	rbit	r3, r3
 8003b88:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8003b8c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b90:	fab3 f383 	clz	r3, r3
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	095b      	lsrs	r3, r3, #5
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	f043 0301 	orr.w	r3, r3, #1
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d102      	bne.n	8003baa <HAL_RCC_OscConfig+0x1fe>
 8003ba4:	4b46      	ldr	r3, [pc, #280]	; (8003cc0 <HAL_RCC_OscConfig+0x314>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	e015      	b.n	8003bd6 <HAL_RCC_OscConfig+0x22a>
 8003baa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bae:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003bb6:	fa93 f3a3 	rbit	r3, r3
 8003bba:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8003bbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bc2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003bc6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8003bca:	fa93 f3a3 	rbit	r3, r3
 8003bce:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003bd2:	4b3b      	ldr	r3, [pc, #236]	; (8003cc0 <HAL_RCC_OscConfig+0x314>)
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003bda:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8003bde:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8003be2:	fa92 f2a2 	rbit	r2, r2
 8003be6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8003bea:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003bee:	fab2 f282 	clz	r2, r2
 8003bf2:	b2d2      	uxtb	r2, r2
 8003bf4:	f042 0220 	orr.w	r2, r2, #32
 8003bf8:	b2d2      	uxtb	r2, r2
 8003bfa:	f002 021f 	and.w	r2, r2, #31
 8003bfe:	2101      	movs	r1, #1
 8003c00:	fa01 f202 	lsl.w	r2, r1, r2
 8003c04:	4013      	ands	r3, r2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d0ab      	beq.n	8003b62 <HAL_RCC_OscConfig+0x1b6>
 8003c0a:	e05c      	b.n	8003cc6 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c0c:	f7fe f94c 	bl	8001ea8 <HAL_GetTick>
 8003c10:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c14:	e00a      	b.n	8003c2c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c16:	f7fe f947 	bl	8001ea8 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b64      	cmp	r3, #100	; 0x64
 8003c24:	d902      	bls.n	8003c2c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	f000 bf0d 	b.w	8004a46 <HAL_RCC_OscConfig+0x109a>
 8003c2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c30:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c34:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003c38:	fa93 f3a3 	rbit	r3, r3
 8003c3c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8003c40:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c44:	fab3 f383 	clz	r3, r3
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	095b      	lsrs	r3, r3, #5
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	f043 0301 	orr.w	r3, r3, #1
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d102      	bne.n	8003c5e <HAL_RCC_OscConfig+0x2b2>
 8003c58:	4b19      	ldr	r3, [pc, #100]	; (8003cc0 <HAL_RCC_OscConfig+0x314>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	e015      	b.n	8003c8a <HAL_RCC_OscConfig+0x2de>
 8003c5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c62:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c66:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003c6a:	fa93 f3a3 	rbit	r3, r3
 8003c6e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003c72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c76:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003c7a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c7e:	fa93 f3a3 	rbit	r3, r3
 8003c82:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003c86:	4b0e      	ldr	r3, [pc, #56]	; (8003cc0 <HAL_RCC_OscConfig+0x314>)
 8003c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c8e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8003c92:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8003c96:	fa92 f2a2 	rbit	r2, r2
 8003c9a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8003c9e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003ca2:	fab2 f282 	clz	r2, r2
 8003ca6:	b2d2      	uxtb	r2, r2
 8003ca8:	f042 0220 	orr.w	r2, r2, #32
 8003cac:	b2d2      	uxtb	r2, r2
 8003cae:	f002 021f 	and.w	r2, r2, #31
 8003cb2:	2101      	movs	r1, #1
 8003cb4:	fa01 f202 	lsl.w	r2, r1, r2
 8003cb8:	4013      	ands	r3, r2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1ab      	bne.n	8003c16 <HAL_RCC_OscConfig+0x26a>
 8003cbe:	e002      	b.n	8003cc6 <HAL_RCC_OscConfig+0x31a>
 8003cc0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	f000 817f 	beq.w	8003fda <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003cdc:	4ba7      	ldr	r3, [pc, #668]	; (8003f7c <HAL_RCC_OscConfig+0x5d0>)
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f003 030c 	and.w	r3, r3, #12
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00c      	beq.n	8003d02 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003ce8:	4ba4      	ldr	r3, [pc, #656]	; (8003f7c <HAL_RCC_OscConfig+0x5d0>)
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f003 030c 	and.w	r3, r3, #12
 8003cf0:	2b08      	cmp	r3, #8
 8003cf2:	d173      	bne.n	8003ddc <HAL_RCC_OscConfig+0x430>
 8003cf4:	4ba1      	ldr	r3, [pc, #644]	; (8003f7c <HAL_RCC_OscConfig+0x5d0>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003cfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d00:	d16c      	bne.n	8003ddc <HAL_RCC_OscConfig+0x430>
 8003d02:	2302      	movs	r3, #2
 8003d04:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d08:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003d0c:	fa93 f3a3 	rbit	r3, r3
 8003d10:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003d14:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d18:	fab3 f383 	clz	r3, r3
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	095b      	lsrs	r3, r3, #5
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	f043 0301 	orr.w	r3, r3, #1
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d102      	bne.n	8003d32 <HAL_RCC_OscConfig+0x386>
 8003d2c:	4b93      	ldr	r3, [pc, #588]	; (8003f7c <HAL_RCC_OscConfig+0x5d0>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	e013      	b.n	8003d5a <HAL_RCC_OscConfig+0x3ae>
 8003d32:	2302      	movs	r3, #2
 8003d34:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d38:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003d3c:	fa93 f3a3 	rbit	r3, r3
 8003d40:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003d44:	2302      	movs	r3, #2
 8003d46:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003d4a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003d4e:	fa93 f3a3 	rbit	r3, r3
 8003d52:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003d56:	4b89      	ldr	r3, [pc, #548]	; (8003f7c <HAL_RCC_OscConfig+0x5d0>)
 8003d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003d60:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8003d64:	fa92 f2a2 	rbit	r2, r2
 8003d68:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8003d6c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003d70:	fab2 f282 	clz	r2, r2
 8003d74:	b2d2      	uxtb	r2, r2
 8003d76:	f042 0220 	orr.w	r2, r2, #32
 8003d7a:	b2d2      	uxtb	r2, r2
 8003d7c:	f002 021f 	and.w	r2, r2, #31
 8003d80:	2101      	movs	r1, #1
 8003d82:	fa01 f202 	lsl.w	r2, r1, r2
 8003d86:	4013      	ands	r3, r2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00a      	beq.n	8003da2 <HAL_RCC_OscConfig+0x3f6>
 8003d8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d90:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d002      	beq.n	8003da2 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	f000 be52 	b.w	8004a46 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003da2:	4b76      	ldr	r3, [pc, #472]	; (8003f7c <HAL_RCC_OscConfig+0x5d0>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003daa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	21f8      	movs	r1, #248	; 0xf8
 8003db8:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dbc:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8003dc0:	fa91 f1a1 	rbit	r1, r1
 8003dc4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8003dc8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003dcc:	fab1 f181 	clz	r1, r1
 8003dd0:	b2c9      	uxtb	r1, r1
 8003dd2:	408b      	lsls	r3, r1
 8003dd4:	4969      	ldr	r1, [pc, #420]	; (8003f7c <HAL_RCC_OscConfig+0x5d0>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dda:	e0fe      	b.n	8003fda <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ddc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003de0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 8088 	beq.w	8003efe <HAL_RCC_OscConfig+0x552>
 8003dee:	2301      	movs	r3, #1
 8003df0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003df8:	fa93 f3a3 	rbit	r3, r3
 8003dfc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003e00:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e04:	fab3 f383 	clz	r3, r3
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e0e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	461a      	mov	r2, r3
 8003e16:	2301      	movs	r3, #1
 8003e18:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e1a:	f7fe f845 	bl	8001ea8 <HAL_GetTick>
 8003e1e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e22:	e00a      	b.n	8003e3a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e24:	f7fe f840 	bl	8001ea8 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d902      	bls.n	8003e3a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	f000 be06 	b.w	8004a46 <HAL_RCC_OscConfig+0x109a>
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e40:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003e44:	fa93 f3a3 	rbit	r3, r3
 8003e48:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003e4c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e50:	fab3 f383 	clz	r3, r3
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	095b      	lsrs	r3, r3, #5
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	f043 0301 	orr.w	r3, r3, #1
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d102      	bne.n	8003e6a <HAL_RCC_OscConfig+0x4be>
 8003e64:	4b45      	ldr	r3, [pc, #276]	; (8003f7c <HAL_RCC_OscConfig+0x5d0>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	e013      	b.n	8003e92 <HAL_RCC_OscConfig+0x4e6>
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e70:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003e74:	fa93 f3a3 	rbit	r3, r3
 8003e78:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003e82:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003e86:	fa93 f3a3 	rbit	r3, r3
 8003e8a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003e8e:	4b3b      	ldr	r3, [pc, #236]	; (8003f7c <HAL_RCC_OscConfig+0x5d0>)
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e92:	2202      	movs	r2, #2
 8003e94:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003e98:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003e9c:	fa92 f2a2 	rbit	r2, r2
 8003ea0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8003ea4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003ea8:	fab2 f282 	clz	r2, r2
 8003eac:	b2d2      	uxtb	r2, r2
 8003eae:	f042 0220 	orr.w	r2, r2, #32
 8003eb2:	b2d2      	uxtb	r2, r2
 8003eb4:	f002 021f 	and.w	r2, r2, #31
 8003eb8:	2101      	movs	r1, #1
 8003eba:	fa01 f202 	lsl.w	r2, r1, r2
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d0af      	beq.n	8003e24 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ec4:	4b2d      	ldr	r3, [pc, #180]	; (8003f7c <HAL_RCC_OscConfig+0x5d0>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ecc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ed0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	21f8      	movs	r1, #248	; 0xf8
 8003eda:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ede:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8003ee2:	fa91 f1a1 	rbit	r1, r1
 8003ee6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8003eea:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003eee:	fab1 f181 	clz	r1, r1
 8003ef2:	b2c9      	uxtb	r1, r1
 8003ef4:	408b      	lsls	r3, r1
 8003ef6:	4921      	ldr	r1, [pc, #132]	; (8003f7c <HAL_RCC_OscConfig+0x5d0>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	600b      	str	r3, [r1, #0]
 8003efc:	e06d      	b.n	8003fda <HAL_RCC_OscConfig+0x62e>
 8003efe:	2301      	movs	r3, #1
 8003f00:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f04:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003f08:	fa93 f3a3 	rbit	r3, r3
 8003f0c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8003f10:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f14:	fab3 f383 	clz	r3, r3
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f1e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	461a      	mov	r2, r3
 8003f26:	2300      	movs	r3, #0
 8003f28:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f2a:	f7fd ffbd 	bl	8001ea8 <HAL_GetTick>
 8003f2e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f32:	e00a      	b.n	8003f4a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f34:	f7fd ffb8 	bl	8001ea8 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d902      	bls.n	8003f4a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	f000 bd7e 	b.w	8004a46 <HAL_RCC_OscConfig+0x109a>
 8003f4a:	2302      	movs	r3, #2
 8003f4c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f50:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003f54:	fa93 f3a3 	rbit	r3, r3
 8003f58:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8003f5c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f60:	fab3 f383 	clz	r3, r3
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	095b      	lsrs	r3, r3, #5
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	f043 0301 	orr.w	r3, r3, #1
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d105      	bne.n	8003f80 <HAL_RCC_OscConfig+0x5d4>
 8003f74:	4b01      	ldr	r3, [pc, #4]	; (8003f7c <HAL_RCC_OscConfig+0x5d0>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	e016      	b.n	8003fa8 <HAL_RCC_OscConfig+0x5fc>
 8003f7a:	bf00      	nop
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	2302      	movs	r3, #2
 8003f82:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f8a:	fa93 f3a3 	rbit	r3, r3
 8003f8e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003f92:	2302      	movs	r3, #2
 8003f94:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003f98:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003f9c:	fa93 f3a3 	rbit	r3, r3
 8003fa0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003fa4:	4bbf      	ldr	r3, [pc, #764]	; (80042a4 <HAL_RCC_OscConfig+0x8f8>)
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa8:	2202      	movs	r2, #2
 8003faa:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003fae:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003fb2:	fa92 f2a2 	rbit	r2, r2
 8003fb6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8003fba:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003fbe:	fab2 f282 	clz	r2, r2
 8003fc2:	b2d2      	uxtb	r2, r2
 8003fc4:	f042 0220 	orr.w	r2, r2, #32
 8003fc8:	b2d2      	uxtb	r2, r2
 8003fca:	f002 021f 	and.w	r2, r2, #31
 8003fce:	2101      	movs	r1, #1
 8003fd0:	fa01 f202 	lsl.w	r2, r1, r2
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1ac      	bne.n	8003f34 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fde:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0308 	and.w	r3, r3, #8
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	f000 8113 	beq.w	8004216 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ff0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ff4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d07c      	beq.n	80040fa <HAL_RCC_OscConfig+0x74e>
 8004000:	2301      	movs	r3, #1
 8004002:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004006:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800400a:	fa93 f3a3 	rbit	r3, r3
 800400e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8004012:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004016:	fab3 f383 	clz	r3, r3
 800401a:	b2db      	uxtb	r3, r3
 800401c:	461a      	mov	r2, r3
 800401e:	4ba2      	ldr	r3, [pc, #648]	; (80042a8 <HAL_RCC_OscConfig+0x8fc>)
 8004020:	4413      	add	r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	461a      	mov	r2, r3
 8004026:	2301      	movs	r3, #1
 8004028:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800402a:	f7fd ff3d 	bl	8001ea8 <HAL_GetTick>
 800402e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004032:	e00a      	b.n	800404a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004034:	f7fd ff38 	bl	8001ea8 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	2b02      	cmp	r3, #2
 8004042:	d902      	bls.n	800404a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	f000 bcfe 	b.w	8004a46 <HAL_RCC_OscConfig+0x109a>
 800404a:	2302      	movs	r3, #2
 800404c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004050:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004054:	fa93 f2a3 	rbit	r2, r3
 8004058:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800405c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004060:	601a      	str	r2, [r3, #0]
 8004062:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004066:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800406a:	2202      	movs	r2, #2
 800406c:	601a      	str	r2, [r3, #0]
 800406e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004072:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	fa93 f2a3 	rbit	r2, r3
 800407c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004080:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004084:	601a      	str	r2, [r3, #0]
 8004086:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800408a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800408e:	2202      	movs	r2, #2
 8004090:	601a      	str	r2, [r3, #0]
 8004092:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004096:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	fa93 f2a3 	rbit	r2, r3
 80040a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040a4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80040a8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040aa:	4b7e      	ldr	r3, [pc, #504]	; (80042a4 <HAL_RCC_OscConfig+0x8f8>)
 80040ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040b2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80040b6:	2102      	movs	r1, #2
 80040b8:	6019      	str	r1, [r3, #0]
 80040ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040be:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	fa93 f1a3 	rbit	r1, r3
 80040c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040cc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80040d0:	6019      	str	r1, [r3, #0]
  return result;
 80040d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040d6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	fab3 f383 	clz	r3, r3
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	f003 031f 	and.w	r3, r3, #31
 80040ec:	2101      	movs	r1, #1
 80040ee:	fa01 f303 	lsl.w	r3, r1, r3
 80040f2:	4013      	ands	r3, r2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d09d      	beq.n	8004034 <HAL_RCC_OscConfig+0x688>
 80040f8:	e08d      	b.n	8004216 <HAL_RCC_OscConfig+0x86a>
 80040fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040fe:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004102:	2201      	movs	r2, #1
 8004104:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004106:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800410a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	fa93 f2a3 	rbit	r2, r3
 8004114:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004118:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800411c:	601a      	str	r2, [r3, #0]
  return result;
 800411e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004122:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004126:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004128:	fab3 f383 	clz	r3, r3
 800412c:	b2db      	uxtb	r3, r3
 800412e:	461a      	mov	r2, r3
 8004130:	4b5d      	ldr	r3, [pc, #372]	; (80042a8 <HAL_RCC_OscConfig+0x8fc>)
 8004132:	4413      	add	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	461a      	mov	r2, r3
 8004138:	2300      	movs	r3, #0
 800413a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800413c:	f7fd feb4 	bl	8001ea8 <HAL_GetTick>
 8004140:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004144:	e00a      	b.n	800415c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004146:	f7fd feaf 	bl	8001ea8 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b02      	cmp	r3, #2
 8004154:	d902      	bls.n	800415c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	f000 bc75 	b.w	8004a46 <HAL_RCC_OscConfig+0x109a>
 800415c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004160:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004164:	2202      	movs	r2, #2
 8004166:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004168:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800416c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	fa93 f2a3 	rbit	r2, r3
 8004176:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800417a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800417e:	601a      	str	r2, [r3, #0]
 8004180:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004184:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004188:	2202      	movs	r2, #2
 800418a:	601a      	str	r2, [r3, #0]
 800418c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004190:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	fa93 f2a3 	rbit	r2, r3
 800419a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800419e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80041a2:	601a      	str	r2, [r3, #0]
 80041a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041a8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80041ac:	2202      	movs	r2, #2
 80041ae:	601a      	str	r2, [r3, #0]
 80041b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041b4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	fa93 f2a3 	rbit	r2, r3
 80041be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041c2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80041c6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041c8:	4b36      	ldr	r3, [pc, #216]	; (80042a4 <HAL_RCC_OscConfig+0x8f8>)
 80041ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041d0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80041d4:	2102      	movs	r1, #2
 80041d6:	6019      	str	r1, [r3, #0]
 80041d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041dc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	fa93 f1a3 	rbit	r1, r3
 80041e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041ea:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80041ee:	6019      	str	r1, [r3, #0]
  return result;
 80041f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041f4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	fab3 f383 	clz	r3, r3
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004204:	b2db      	uxtb	r3, r3
 8004206:	f003 031f 	and.w	r3, r3, #31
 800420a:	2101      	movs	r1, #1
 800420c:	fa01 f303 	lsl.w	r3, r1, r3
 8004210:	4013      	ands	r3, r2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d197      	bne.n	8004146 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004216:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800421a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0304 	and.w	r3, r3, #4
 8004226:	2b00      	cmp	r3, #0
 8004228:	f000 81a5 	beq.w	8004576 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800422c:	2300      	movs	r3, #0
 800422e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004232:	4b1c      	ldr	r3, [pc, #112]	; (80042a4 <HAL_RCC_OscConfig+0x8f8>)
 8004234:	69db      	ldr	r3, [r3, #28]
 8004236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d116      	bne.n	800426c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800423e:	4b19      	ldr	r3, [pc, #100]	; (80042a4 <HAL_RCC_OscConfig+0x8f8>)
 8004240:	69db      	ldr	r3, [r3, #28]
 8004242:	4a18      	ldr	r2, [pc, #96]	; (80042a4 <HAL_RCC_OscConfig+0x8f8>)
 8004244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004248:	61d3      	str	r3, [r2, #28]
 800424a:	4b16      	ldr	r3, [pc, #88]	; (80042a4 <HAL_RCC_OscConfig+0x8f8>)
 800424c:	69db      	ldr	r3, [r3, #28]
 800424e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004252:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004256:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800425a:	601a      	str	r2, [r3, #0]
 800425c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004260:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004264:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004266:	2301      	movs	r3, #1
 8004268:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800426c:	4b0f      	ldr	r3, [pc, #60]	; (80042ac <HAL_RCC_OscConfig+0x900>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004274:	2b00      	cmp	r3, #0
 8004276:	d121      	bne.n	80042bc <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004278:	4b0c      	ldr	r3, [pc, #48]	; (80042ac <HAL_RCC_OscConfig+0x900>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a0b      	ldr	r2, [pc, #44]	; (80042ac <HAL_RCC_OscConfig+0x900>)
 800427e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004282:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004284:	f7fd fe10 	bl	8001ea8 <HAL_GetTick>
 8004288:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800428c:	e010      	b.n	80042b0 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800428e:	f7fd fe0b 	bl	8001ea8 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b64      	cmp	r3, #100	; 0x64
 800429c:	d908      	bls.n	80042b0 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e3d1      	b.n	8004a46 <HAL_RCC_OscConfig+0x109a>
 80042a2:	bf00      	nop
 80042a4:	40021000 	.word	0x40021000
 80042a8:	10908120 	.word	0x10908120
 80042ac:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042b0:	4b8d      	ldr	r3, [pc, #564]	; (80044e8 <HAL_RCC_OscConfig+0xb3c>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d0e8      	beq.n	800428e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042c0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d106      	bne.n	80042da <HAL_RCC_OscConfig+0x92e>
 80042cc:	4b87      	ldr	r3, [pc, #540]	; (80044ec <HAL_RCC_OscConfig+0xb40>)
 80042ce:	6a1b      	ldr	r3, [r3, #32]
 80042d0:	4a86      	ldr	r2, [pc, #536]	; (80044ec <HAL_RCC_OscConfig+0xb40>)
 80042d2:	f043 0301 	orr.w	r3, r3, #1
 80042d6:	6213      	str	r3, [r2, #32]
 80042d8:	e035      	b.n	8004346 <HAL_RCC_OscConfig+0x99a>
 80042da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042de:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10c      	bne.n	8004304 <HAL_RCC_OscConfig+0x958>
 80042ea:	4b80      	ldr	r3, [pc, #512]	; (80044ec <HAL_RCC_OscConfig+0xb40>)
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	4a7f      	ldr	r2, [pc, #508]	; (80044ec <HAL_RCC_OscConfig+0xb40>)
 80042f0:	f023 0301 	bic.w	r3, r3, #1
 80042f4:	6213      	str	r3, [r2, #32]
 80042f6:	4b7d      	ldr	r3, [pc, #500]	; (80044ec <HAL_RCC_OscConfig+0xb40>)
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	4a7c      	ldr	r2, [pc, #496]	; (80044ec <HAL_RCC_OscConfig+0xb40>)
 80042fc:	f023 0304 	bic.w	r3, r3, #4
 8004300:	6213      	str	r3, [r2, #32]
 8004302:	e020      	b.n	8004346 <HAL_RCC_OscConfig+0x99a>
 8004304:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004308:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	2b05      	cmp	r3, #5
 8004312:	d10c      	bne.n	800432e <HAL_RCC_OscConfig+0x982>
 8004314:	4b75      	ldr	r3, [pc, #468]	; (80044ec <HAL_RCC_OscConfig+0xb40>)
 8004316:	6a1b      	ldr	r3, [r3, #32]
 8004318:	4a74      	ldr	r2, [pc, #464]	; (80044ec <HAL_RCC_OscConfig+0xb40>)
 800431a:	f043 0304 	orr.w	r3, r3, #4
 800431e:	6213      	str	r3, [r2, #32]
 8004320:	4b72      	ldr	r3, [pc, #456]	; (80044ec <HAL_RCC_OscConfig+0xb40>)
 8004322:	6a1b      	ldr	r3, [r3, #32]
 8004324:	4a71      	ldr	r2, [pc, #452]	; (80044ec <HAL_RCC_OscConfig+0xb40>)
 8004326:	f043 0301 	orr.w	r3, r3, #1
 800432a:	6213      	str	r3, [r2, #32]
 800432c:	e00b      	b.n	8004346 <HAL_RCC_OscConfig+0x99a>
 800432e:	4b6f      	ldr	r3, [pc, #444]	; (80044ec <HAL_RCC_OscConfig+0xb40>)
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	4a6e      	ldr	r2, [pc, #440]	; (80044ec <HAL_RCC_OscConfig+0xb40>)
 8004334:	f023 0301 	bic.w	r3, r3, #1
 8004338:	6213      	str	r3, [r2, #32]
 800433a:	4b6c      	ldr	r3, [pc, #432]	; (80044ec <HAL_RCC_OscConfig+0xb40>)
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	4a6b      	ldr	r2, [pc, #428]	; (80044ec <HAL_RCC_OscConfig+0xb40>)
 8004340:	f023 0304 	bic.w	r3, r3, #4
 8004344:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004346:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800434a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	2b00      	cmp	r3, #0
 8004354:	f000 8081 	beq.w	800445a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004358:	f7fd fda6 	bl	8001ea8 <HAL_GetTick>
 800435c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004360:	e00b      	b.n	800437a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004362:	f7fd fda1 	bl	8001ea8 <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004372:	4293      	cmp	r3, r2
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e365      	b.n	8004a46 <HAL_RCC_OscConfig+0x109a>
 800437a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800437e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004382:	2202      	movs	r2, #2
 8004384:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004386:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800438a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	fa93 f2a3 	rbit	r2, r3
 8004394:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004398:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800439c:	601a      	str	r2, [r3, #0]
 800439e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043a2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80043a6:	2202      	movs	r2, #2
 80043a8:	601a      	str	r2, [r3, #0]
 80043aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043ae:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	fa93 f2a3 	rbit	r2, r3
 80043b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043bc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80043c0:	601a      	str	r2, [r3, #0]
  return result;
 80043c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043c6:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80043ca:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043cc:	fab3 f383 	clz	r3, r3
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	095b      	lsrs	r3, r3, #5
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	f043 0302 	orr.w	r3, r3, #2
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d102      	bne.n	80043e6 <HAL_RCC_OscConfig+0xa3a>
 80043e0:	4b42      	ldr	r3, [pc, #264]	; (80044ec <HAL_RCC_OscConfig+0xb40>)
 80043e2:	6a1b      	ldr	r3, [r3, #32]
 80043e4:	e013      	b.n	800440e <HAL_RCC_OscConfig+0xa62>
 80043e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043ea:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80043ee:	2202      	movs	r2, #2
 80043f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043f6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	fa93 f2a3 	rbit	r2, r3
 8004400:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004404:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8004408:	601a      	str	r2, [r3, #0]
 800440a:	4b38      	ldr	r3, [pc, #224]	; (80044ec <HAL_RCC_OscConfig+0xb40>)
 800440c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004412:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004416:	2102      	movs	r1, #2
 8004418:	6011      	str	r1, [r2, #0]
 800441a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800441e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004422:	6812      	ldr	r2, [r2, #0]
 8004424:	fa92 f1a2 	rbit	r1, r2
 8004428:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800442c:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8004430:	6011      	str	r1, [r2, #0]
  return result;
 8004432:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004436:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800443a:	6812      	ldr	r2, [r2, #0]
 800443c:	fab2 f282 	clz	r2, r2
 8004440:	b2d2      	uxtb	r2, r2
 8004442:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004446:	b2d2      	uxtb	r2, r2
 8004448:	f002 021f 	and.w	r2, r2, #31
 800444c:	2101      	movs	r1, #1
 800444e:	fa01 f202 	lsl.w	r2, r1, r2
 8004452:	4013      	ands	r3, r2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d084      	beq.n	8004362 <HAL_RCC_OscConfig+0x9b6>
 8004458:	e083      	b.n	8004562 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800445a:	f7fd fd25 	bl	8001ea8 <HAL_GetTick>
 800445e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004462:	e00b      	b.n	800447c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004464:	f7fd fd20 	bl	8001ea8 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	f241 3288 	movw	r2, #5000	; 0x1388
 8004474:	4293      	cmp	r3, r2
 8004476:	d901      	bls.n	800447c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e2e4      	b.n	8004a46 <HAL_RCC_OscConfig+0x109a>
 800447c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004480:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004484:	2202      	movs	r2, #2
 8004486:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004488:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800448c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	fa93 f2a3 	rbit	r2, r3
 8004496:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800449a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800449e:	601a      	str	r2, [r3, #0]
 80044a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044a4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80044a8:	2202      	movs	r2, #2
 80044aa:	601a      	str	r2, [r3, #0]
 80044ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044b0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	fa93 f2a3 	rbit	r2, r3
 80044ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044be:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80044c2:	601a      	str	r2, [r3, #0]
  return result;
 80044c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044c8:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80044cc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044ce:	fab3 f383 	clz	r3, r3
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	095b      	lsrs	r3, r3, #5
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	f043 0302 	orr.w	r3, r3, #2
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d106      	bne.n	80044f0 <HAL_RCC_OscConfig+0xb44>
 80044e2:	4b02      	ldr	r3, [pc, #8]	; (80044ec <HAL_RCC_OscConfig+0xb40>)
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	e017      	b.n	8004518 <HAL_RCC_OscConfig+0xb6c>
 80044e8:	40007000 	.word	0x40007000
 80044ec:	40021000 	.word	0x40021000
 80044f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044f4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80044f8:	2202      	movs	r2, #2
 80044fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004500:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	fa93 f2a3 	rbit	r2, r3
 800450a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800450e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004512:	601a      	str	r2, [r3, #0]
 8004514:	4bb3      	ldr	r3, [pc, #716]	; (80047e4 <HAL_RCC_OscConfig+0xe38>)
 8004516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004518:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800451c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004520:	2102      	movs	r1, #2
 8004522:	6011      	str	r1, [r2, #0]
 8004524:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004528:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800452c:	6812      	ldr	r2, [r2, #0]
 800452e:	fa92 f1a2 	rbit	r1, r2
 8004532:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004536:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800453a:	6011      	str	r1, [r2, #0]
  return result;
 800453c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004540:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8004544:	6812      	ldr	r2, [r2, #0]
 8004546:	fab2 f282 	clz	r2, r2
 800454a:	b2d2      	uxtb	r2, r2
 800454c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004550:	b2d2      	uxtb	r2, r2
 8004552:	f002 021f 	and.w	r2, r2, #31
 8004556:	2101      	movs	r1, #1
 8004558:	fa01 f202 	lsl.w	r2, r1, r2
 800455c:	4013      	ands	r3, r2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d180      	bne.n	8004464 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004562:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8004566:	2b01      	cmp	r3, #1
 8004568:	d105      	bne.n	8004576 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800456a:	4b9e      	ldr	r3, [pc, #632]	; (80047e4 <HAL_RCC_OscConfig+0xe38>)
 800456c:	69db      	ldr	r3, [r3, #28]
 800456e:	4a9d      	ldr	r2, [pc, #628]	; (80047e4 <HAL_RCC_OscConfig+0xe38>)
 8004570:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004574:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004576:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800457a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	2b00      	cmp	r3, #0
 8004584:	f000 825e 	beq.w	8004a44 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004588:	4b96      	ldr	r3, [pc, #600]	; (80047e4 <HAL_RCC_OscConfig+0xe38>)
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f003 030c 	and.w	r3, r3, #12
 8004590:	2b08      	cmp	r3, #8
 8004592:	f000 821f 	beq.w	80049d4 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004596:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800459a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	f040 8170 	bne.w	8004888 <HAL_RCC_OscConfig+0xedc>
 80045a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045ac:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80045b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80045b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045ba:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	fa93 f2a3 	rbit	r2, r3
 80045c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045c8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80045cc:	601a      	str	r2, [r3, #0]
  return result;
 80045ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045d2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80045d6:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045d8:	fab3 f383 	clz	r3, r3
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80045e2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	461a      	mov	r2, r3
 80045ea:	2300      	movs	r3, #0
 80045ec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ee:	f7fd fc5b 	bl	8001ea8 <HAL_GetTick>
 80045f2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045f6:	e009      	b.n	800460c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045f8:	f7fd fc56 	bl	8001ea8 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d901      	bls.n	800460c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e21c      	b.n	8004a46 <HAL_RCC_OscConfig+0x109a>
 800460c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004610:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004614:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004618:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800461a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800461e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	fa93 f2a3 	rbit	r2, r3
 8004628:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800462c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004630:	601a      	str	r2, [r3, #0]
  return result;
 8004632:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004636:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800463a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800463c:	fab3 f383 	clz	r3, r3
 8004640:	b2db      	uxtb	r3, r3
 8004642:	095b      	lsrs	r3, r3, #5
 8004644:	b2db      	uxtb	r3, r3
 8004646:	f043 0301 	orr.w	r3, r3, #1
 800464a:	b2db      	uxtb	r3, r3
 800464c:	2b01      	cmp	r3, #1
 800464e:	d102      	bne.n	8004656 <HAL_RCC_OscConfig+0xcaa>
 8004650:	4b64      	ldr	r3, [pc, #400]	; (80047e4 <HAL_RCC_OscConfig+0xe38>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	e027      	b.n	80046a6 <HAL_RCC_OscConfig+0xcfa>
 8004656:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800465a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800465e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004662:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004664:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004668:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	fa93 f2a3 	rbit	r2, r3
 8004672:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004676:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800467a:	601a      	str	r2, [r3, #0]
 800467c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004680:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004684:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004688:	601a      	str	r2, [r3, #0]
 800468a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800468e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	fa93 f2a3 	rbit	r2, r3
 8004698:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800469c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80046a0:	601a      	str	r2, [r3, #0]
 80046a2:	4b50      	ldr	r3, [pc, #320]	; (80047e4 <HAL_RCC_OscConfig+0xe38>)
 80046a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80046aa:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80046ae:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80046b2:	6011      	str	r1, [r2, #0]
 80046b4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80046b8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80046bc:	6812      	ldr	r2, [r2, #0]
 80046be:	fa92 f1a2 	rbit	r1, r2
 80046c2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80046c6:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80046ca:	6011      	str	r1, [r2, #0]
  return result;
 80046cc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80046d0:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80046d4:	6812      	ldr	r2, [r2, #0]
 80046d6:	fab2 f282 	clz	r2, r2
 80046da:	b2d2      	uxtb	r2, r2
 80046dc:	f042 0220 	orr.w	r2, r2, #32
 80046e0:	b2d2      	uxtb	r2, r2
 80046e2:	f002 021f 	and.w	r2, r2, #31
 80046e6:	2101      	movs	r1, #1
 80046e8:	fa01 f202 	lsl.w	r2, r1, r2
 80046ec:	4013      	ands	r3, r2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d182      	bne.n	80045f8 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046f2:	4b3c      	ldr	r3, [pc, #240]	; (80047e4 <HAL_RCC_OscConfig+0xe38>)
 80046f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f6:	f023 020f 	bic.w	r2, r3, #15
 80046fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046fe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004706:	4937      	ldr	r1, [pc, #220]	; (80047e4 <HAL_RCC_OscConfig+0xe38>)
 8004708:	4313      	orrs	r3, r2
 800470a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800470c:	4b35      	ldr	r3, [pc, #212]	; (80047e4 <HAL_RCC_OscConfig+0xe38>)
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8004714:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004718:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	6a19      	ldr	r1, [r3, #32]
 8004720:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004724:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	69db      	ldr	r3, [r3, #28]
 800472c:	430b      	orrs	r3, r1
 800472e:	492d      	ldr	r1, [pc, #180]	; (80047e4 <HAL_RCC_OscConfig+0xe38>)
 8004730:	4313      	orrs	r3, r2
 8004732:	604b      	str	r3, [r1, #4]
 8004734:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004738:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800473c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004740:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004742:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004746:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	fa93 f2a3 	rbit	r2, r3
 8004750:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004754:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004758:	601a      	str	r2, [r3, #0]
  return result;
 800475a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800475e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004762:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004764:	fab3 f383 	clz	r3, r3
 8004768:	b2db      	uxtb	r3, r3
 800476a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800476e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	461a      	mov	r2, r3
 8004776:	2301      	movs	r3, #1
 8004778:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800477a:	f7fd fb95 	bl	8001ea8 <HAL_GetTick>
 800477e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004782:	e009      	b.n	8004798 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004784:	f7fd fb90 	bl	8001ea8 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	2b02      	cmp	r3, #2
 8004792:	d901      	bls.n	8004798 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e156      	b.n	8004a46 <HAL_RCC_OscConfig+0x109a>
 8004798:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800479c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80047a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80047a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047aa:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	fa93 f2a3 	rbit	r2, r3
 80047b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047b8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80047bc:	601a      	str	r2, [r3, #0]
  return result;
 80047be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047c2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80047c6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80047c8:	fab3 f383 	clz	r3, r3
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	095b      	lsrs	r3, r3, #5
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	f043 0301 	orr.w	r3, r3, #1
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d105      	bne.n	80047e8 <HAL_RCC_OscConfig+0xe3c>
 80047dc:	4b01      	ldr	r3, [pc, #4]	; (80047e4 <HAL_RCC_OscConfig+0xe38>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	e02a      	b.n	8004838 <HAL_RCC_OscConfig+0xe8c>
 80047e2:	bf00      	nop
 80047e4:	40021000 	.word	0x40021000
 80047e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047ec:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80047f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80047f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047fa:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	fa93 f2a3 	rbit	r2, r3
 8004804:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004808:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800480c:	601a      	str	r2, [r3, #0]
 800480e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004812:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004816:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800481a:	601a      	str	r2, [r3, #0]
 800481c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004820:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	fa93 f2a3 	rbit	r2, r3
 800482a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800482e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8004832:	601a      	str	r2, [r3, #0]
 8004834:	4b86      	ldr	r3, [pc, #536]	; (8004a50 <HAL_RCC_OscConfig+0x10a4>)
 8004836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004838:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800483c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004840:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004844:	6011      	str	r1, [r2, #0]
 8004846:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800484a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800484e:	6812      	ldr	r2, [r2, #0]
 8004850:	fa92 f1a2 	rbit	r1, r2
 8004854:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004858:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800485c:	6011      	str	r1, [r2, #0]
  return result;
 800485e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004862:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004866:	6812      	ldr	r2, [r2, #0]
 8004868:	fab2 f282 	clz	r2, r2
 800486c:	b2d2      	uxtb	r2, r2
 800486e:	f042 0220 	orr.w	r2, r2, #32
 8004872:	b2d2      	uxtb	r2, r2
 8004874:	f002 021f 	and.w	r2, r2, #31
 8004878:	2101      	movs	r1, #1
 800487a:	fa01 f202 	lsl.w	r2, r1, r2
 800487e:	4013      	ands	r3, r2
 8004880:	2b00      	cmp	r3, #0
 8004882:	f43f af7f 	beq.w	8004784 <HAL_RCC_OscConfig+0xdd8>
 8004886:	e0dd      	b.n	8004a44 <HAL_RCC_OscConfig+0x1098>
 8004888:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800488c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004890:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004894:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004896:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800489a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	fa93 f2a3 	rbit	r2, r3
 80048a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048a8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80048ac:	601a      	str	r2, [r3, #0]
  return result;
 80048ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048b2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80048b6:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048b8:	fab3 f383 	clz	r3, r3
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80048c2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	461a      	mov	r2, r3
 80048ca:	2300      	movs	r3, #0
 80048cc:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ce:	f7fd faeb 	bl	8001ea8 <HAL_GetTick>
 80048d2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048d6:	e009      	b.n	80048ec <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048d8:	f7fd fae6 	bl	8001ea8 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d901      	bls.n	80048ec <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e0ac      	b.n	8004a46 <HAL_RCC_OscConfig+0x109a>
 80048ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048f0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80048f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048fe:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	fa93 f2a3 	rbit	r2, r3
 8004908:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800490c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004910:	601a      	str	r2, [r3, #0]
  return result;
 8004912:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004916:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800491a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800491c:	fab3 f383 	clz	r3, r3
 8004920:	b2db      	uxtb	r3, r3
 8004922:	095b      	lsrs	r3, r3, #5
 8004924:	b2db      	uxtb	r3, r3
 8004926:	f043 0301 	orr.w	r3, r3, #1
 800492a:	b2db      	uxtb	r3, r3
 800492c:	2b01      	cmp	r3, #1
 800492e:	d102      	bne.n	8004936 <HAL_RCC_OscConfig+0xf8a>
 8004930:	4b47      	ldr	r3, [pc, #284]	; (8004a50 <HAL_RCC_OscConfig+0x10a4>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	e027      	b.n	8004986 <HAL_RCC_OscConfig+0xfda>
 8004936:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800493a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800493e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004942:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004944:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004948:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	fa93 f2a3 	rbit	r2, r3
 8004952:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004956:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800495a:	601a      	str	r2, [r3, #0]
 800495c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004960:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004964:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004968:	601a      	str	r2, [r3, #0]
 800496a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800496e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	fa93 f2a3 	rbit	r2, r3
 8004978:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800497c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8004980:	601a      	str	r2, [r3, #0]
 8004982:	4b33      	ldr	r3, [pc, #204]	; (8004a50 <HAL_RCC_OscConfig+0x10a4>)
 8004984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004986:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800498a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800498e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004992:	6011      	str	r1, [r2, #0]
 8004994:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004998:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800499c:	6812      	ldr	r2, [r2, #0]
 800499e:	fa92 f1a2 	rbit	r1, r2
 80049a2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80049a6:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80049aa:	6011      	str	r1, [r2, #0]
  return result;
 80049ac:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80049b0:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80049b4:	6812      	ldr	r2, [r2, #0]
 80049b6:	fab2 f282 	clz	r2, r2
 80049ba:	b2d2      	uxtb	r2, r2
 80049bc:	f042 0220 	orr.w	r2, r2, #32
 80049c0:	b2d2      	uxtb	r2, r2
 80049c2:	f002 021f 	and.w	r2, r2, #31
 80049c6:	2101      	movs	r1, #1
 80049c8:	fa01 f202 	lsl.w	r2, r1, r2
 80049cc:	4013      	ands	r3, r2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d182      	bne.n	80048d8 <HAL_RCC_OscConfig+0xf2c>
 80049d2:	e037      	b.n	8004a44 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049d8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d101      	bne.n	80049e8 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e02e      	b.n	8004a46 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80049e8:	4b19      	ldr	r3, [pc, #100]	; (8004a50 <HAL_RCC_OscConfig+0x10a4>)
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80049f0:	4b17      	ldr	r3, [pc, #92]	; (8004a50 <HAL_RCC_OscConfig+0x10a4>)
 80049f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80049f8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80049fc:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8004a00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a04:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	69db      	ldr	r3, [r3, #28]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d117      	bne.n	8004a40 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004a10:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004a14:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004a18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a1c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d10b      	bne.n	8004a40 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004a28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a2c:	f003 020f 	and.w	r2, r3, #15
 8004a30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a34:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d001      	beq.n	8004a44 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e000      	b.n	8004a46 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	40021000 	.word	0x40021000

08004a54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b09e      	sub	sp, #120	; 0x78
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d101      	bne.n	8004a6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e162      	b.n	8004d32 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a6c:	4b90      	ldr	r3, [pc, #576]	; (8004cb0 <HAL_RCC_ClockConfig+0x25c>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0307 	and.w	r3, r3, #7
 8004a74:	683a      	ldr	r2, [r7, #0]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d910      	bls.n	8004a9c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a7a:	4b8d      	ldr	r3, [pc, #564]	; (8004cb0 <HAL_RCC_ClockConfig+0x25c>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f023 0207 	bic.w	r2, r3, #7
 8004a82:	498b      	ldr	r1, [pc, #556]	; (8004cb0 <HAL_RCC_ClockConfig+0x25c>)
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a8a:	4b89      	ldr	r3, [pc, #548]	; (8004cb0 <HAL_RCC_ClockConfig+0x25c>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0307 	and.w	r3, r3, #7
 8004a92:	683a      	ldr	r2, [r7, #0]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d001      	beq.n	8004a9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e14a      	b.n	8004d32 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0302 	and.w	r3, r3, #2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d008      	beq.n	8004aba <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004aa8:	4b82      	ldr	r3, [pc, #520]	; (8004cb4 <HAL_RCC_ClockConfig+0x260>)
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	497f      	ldr	r1, [pc, #508]	; (8004cb4 <HAL_RCC_ClockConfig+0x260>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f000 80dc 	beq.w	8004c80 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d13c      	bne.n	8004b4a <HAL_RCC_ClockConfig+0xf6>
 8004ad0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ad4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ad8:	fa93 f3a3 	rbit	r3, r3
 8004adc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ae0:	fab3 f383 	clz	r3, r3
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	095b      	lsrs	r3, r3, #5
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	f043 0301 	orr.w	r3, r3, #1
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d102      	bne.n	8004afa <HAL_RCC_ClockConfig+0xa6>
 8004af4:	4b6f      	ldr	r3, [pc, #444]	; (8004cb4 <HAL_RCC_ClockConfig+0x260>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	e00f      	b.n	8004b1a <HAL_RCC_ClockConfig+0xc6>
 8004afa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004afe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b02:	fa93 f3a3 	rbit	r3, r3
 8004b06:	667b      	str	r3, [r7, #100]	; 0x64
 8004b08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b0c:	663b      	str	r3, [r7, #96]	; 0x60
 8004b0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b10:	fa93 f3a3 	rbit	r3, r3
 8004b14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b16:	4b67      	ldr	r3, [pc, #412]	; (8004cb4 <HAL_RCC_ClockConfig+0x260>)
 8004b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004b1e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004b20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b22:	fa92 f2a2 	rbit	r2, r2
 8004b26:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004b28:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004b2a:	fab2 f282 	clz	r2, r2
 8004b2e:	b2d2      	uxtb	r2, r2
 8004b30:	f042 0220 	orr.w	r2, r2, #32
 8004b34:	b2d2      	uxtb	r2, r2
 8004b36:	f002 021f 	and.w	r2, r2, #31
 8004b3a:	2101      	movs	r1, #1
 8004b3c:	fa01 f202 	lsl.w	r2, r1, r2
 8004b40:	4013      	ands	r3, r2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d17b      	bne.n	8004c3e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e0f3      	b.n	8004d32 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d13c      	bne.n	8004bcc <HAL_RCC_ClockConfig+0x178>
 8004b52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b56:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b5a:	fa93 f3a3 	rbit	r3, r3
 8004b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b62:	fab3 f383 	clz	r3, r3
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	095b      	lsrs	r3, r3, #5
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	f043 0301 	orr.w	r3, r3, #1
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d102      	bne.n	8004b7c <HAL_RCC_ClockConfig+0x128>
 8004b76:	4b4f      	ldr	r3, [pc, #316]	; (8004cb4 <HAL_RCC_ClockConfig+0x260>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	e00f      	b.n	8004b9c <HAL_RCC_ClockConfig+0x148>
 8004b7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b80:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b84:	fa93 f3a3 	rbit	r3, r3
 8004b88:	647b      	str	r3, [r7, #68]	; 0x44
 8004b8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b8e:	643b      	str	r3, [r7, #64]	; 0x40
 8004b90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b92:	fa93 f3a3 	rbit	r3, r3
 8004b96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b98:	4b46      	ldr	r3, [pc, #280]	; (8004cb4 <HAL_RCC_ClockConfig+0x260>)
 8004b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ba0:	63ba      	str	r2, [r7, #56]	; 0x38
 8004ba2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ba4:	fa92 f2a2 	rbit	r2, r2
 8004ba8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004baa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bac:	fab2 f282 	clz	r2, r2
 8004bb0:	b2d2      	uxtb	r2, r2
 8004bb2:	f042 0220 	orr.w	r2, r2, #32
 8004bb6:	b2d2      	uxtb	r2, r2
 8004bb8:	f002 021f 	and.w	r2, r2, #31
 8004bbc:	2101      	movs	r1, #1
 8004bbe:	fa01 f202 	lsl.w	r2, r1, r2
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d13a      	bne.n	8004c3e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e0b2      	b.n	8004d32 <HAL_RCC_ClockConfig+0x2de>
 8004bcc:	2302      	movs	r3, #2
 8004bce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd2:	fa93 f3a3 	rbit	r3, r3
 8004bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bda:	fab3 f383 	clz	r3, r3
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	095b      	lsrs	r3, r3, #5
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	f043 0301 	orr.w	r3, r3, #1
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d102      	bne.n	8004bf4 <HAL_RCC_ClockConfig+0x1a0>
 8004bee:	4b31      	ldr	r3, [pc, #196]	; (8004cb4 <HAL_RCC_ClockConfig+0x260>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	e00d      	b.n	8004c10 <HAL_RCC_ClockConfig+0x1bc>
 8004bf4:	2302      	movs	r3, #2
 8004bf6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bfa:	fa93 f3a3 	rbit	r3, r3
 8004bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8004c00:	2302      	movs	r3, #2
 8004c02:	623b      	str	r3, [r7, #32]
 8004c04:	6a3b      	ldr	r3, [r7, #32]
 8004c06:	fa93 f3a3 	rbit	r3, r3
 8004c0a:	61fb      	str	r3, [r7, #28]
 8004c0c:	4b29      	ldr	r3, [pc, #164]	; (8004cb4 <HAL_RCC_ClockConfig+0x260>)
 8004c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c10:	2202      	movs	r2, #2
 8004c12:	61ba      	str	r2, [r7, #24]
 8004c14:	69ba      	ldr	r2, [r7, #24]
 8004c16:	fa92 f2a2 	rbit	r2, r2
 8004c1a:	617a      	str	r2, [r7, #20]
  return result;
 8004c1c:	697a      	ldr	r2, [r7, #20]
 8004c1e:	fab2 f282 	clz	r2, r2
 8004c22:	b2d2      	uxtb	r2, r2
 8004c24:	f042 0220 	orr.w	r2, r2, #32
 8004c28:	b2d2      	uxtb	r2, r2
 8004c2a:	f002 021f 	and.w	r2, r2, #31
 8004c2e:	2101      	movs	r1, #1
 8004c30:	fa01 f202 	lsl.w	r2, r1, r2
 8004c34:	4013      	ands	r3, r2
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e079      	b.n	8004d32 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c3e:	4b1d      	ldr	r3, [pc, #116]	; (8004cb4 <HAL_RCC_ClockConfig+0x260>)
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f023 0203 	bic.w	r2, r3, #3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	491a      	ldr	r1, [pc, #104]	; (8004cb4 <HAL_RCC_ClockConfig+0x260>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c50:	f7fd f92a 	bl	8001ea8 <HAL_GetTick>
 8004c54:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c56:	e00a      	b.n	8004c6e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c58:	f7fd f926 	bl	8001ea8 <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d901      	bls.n	8004c6e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e061      	b.n	8004d32 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c6e:	4b11      	ldr	r3, [pc, #68]	; (8004cb4 <HAL_RCC_ClockConfig+0x260>)
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f003 020c 	and.w	r2, r3, #12
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d1eb      	bne.n	8004c58 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c80:	4b0b      	ldr	r3, [pc, #44]	; (8004cb0 <HAL_RCC_ClockConfig+0x25c>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0307 	and.w	r3, r3, #7
 8004c88:	683a      	ldr	r2, [r7, #0]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d214      	bcs.n	8004cb8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c8e:	4b08      	ldr	r3, [pc, #32]	; (8004cb0 <HAL_RCC_ClockConfig+0x25c>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f023 0207 	bic.w	r2, r3, #7
 8004c96:	4906      	ldr	r1, [pc, #24]	; (8004cb0 <HAL_RCC_ClockConfig+0x25c>)
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c9e:	4b04      	ldr	r3, [pc, #16]	; (8004cb0 <HAL_RCC_ClockConfig+0x25c>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0307 	and.w	r3, r3, #7
 8004ca6:	683a      	ldr	r2, [r7, #0]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d005      	beq.n	8004cb8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e040      	b.n	8004d32 <HAL_RCC_ClockConfig+0x2de>
 8004cb0:	40022000 	.word	0x40022000
 8004cb4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0304 	and.w	r3, r3, #4
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d008      	beq.n	8004cd6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cc4:	4b1d      	ldr	r3, [pc, #116]	; (8004d3c <HAL_RCC_ClockConfig+0x2e8>)
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	491a      	ldr	r1, [pc, #104]	; (8004d3c <HAL_RCC_ClockConfig+0x2e8>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0308 	and.w	r3, r3, #8
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d009      	beq.n	8004cf6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ce2:	4b16      	ldr	r3, [pc, #88]	; (8004d3c <HAL_RCC_ClockConfig+0x2e8>)
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	00db      	lsls	r3, r3, #3
 8004cf0:	4912      	ldr	r1, [pc, #72]	; (8004d3c <HAL_RCC_ClockConfig+0x2e8>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004cf6:	f000 f829 	bl	8004d4c <HAL_RCC_GetSysClockFreq>
 8004cfa:	4601      	mov	r1, r0
 8004cfc:	4b0f      	ldr	r3, [pc, #60]	; (8004d3c <HAL_RCC_ClockConfig+0x2e8>)
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d04:	22f0      	movs	r2, #240	; 0xf0
 8004d06:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	fa92 f2a2 	rbit	r2, r2
 8004d0e:	60fa      	str	r2, [r7, #12]
  return result;
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	fab2 f282 	clz	r2, r2
 8004d16:	b2d2      	uxtb	r2, r2
 8004d18:	40d3      	lsrs	r3, r2
 8004d1a:	4a09      	ldr	r2, [pc, #36]	; (8004d40 <HAL_RCC_ClockConfig+0x2ec>)
 8004d1c:	5cd3      	ldrb	r3, [r2, r3]
 8004d1e:	fa21 f303 	lsr.w	r3, r1, r3
 8004d22:	4a08      	ldr	r2, [pc, #32]	; (8004d44 <HAL_RCC_ClockConfig+0x2f0>)
 8004d24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004d26:	4b08      	ldr	r3, [pc, #32]	; (8004d48 <HAL_RCC_ClockConfig+0x2f4>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7fd f878 	bl	8001e20 <HAL_InitTick>
  
  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3778      	adds	r7, #120	; 0x78
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	40021000 	.word	0x40021000
 8004d40:	080086a4 	.word	0x080086a4
 8004d44:	20000050 	.word	0x20000050
 8004d48:	20000054 	.word	0x20000054

08004d4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b08b      	sub	sp, #44	; 0x2c
 8004d50:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004d52:	2300      	movs	r3, #0
 8004d54:	61fb      	str	r3, [r7, #28]
 8004d56:	2300      	movs	r3, #0
 8004d58:	61bb      	str	r3, [r7, #24]
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d5e:	2300      	movs	r3, #0
 8004d60:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004d62:	2300      	movs	r3, #0
 8004d64:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004d66:	4b2a      	ldr	r3, [pc, #168]	; (8004e10 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	f003 030c 	and.w	r3, r3, #12
 8004d72:	2b04      	cmp	r3, #4
 8004d74:	d002      	beq.n	8004d7c <HAL_RCC_GetSysClockFreq+0x30>
 8004d76:	2b08      	cmp	r3, #8
 8004d78:	d003      	beq.n	8004d82 <HAL_RCC_GetSysClockFreq+0x36>
 8004d7a:	e03f      	b.n	8004dfc <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004d7c:	4b25      	ldr	r3, [pc, #148]	; (8004e14 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004d7e:	623b      	str	r3, [r7, #32]
      break;
 8004d80:	e03f      	b.n	8004e02 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004d88:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004d8c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d8e:	68ba      	ldr	r2, [r7, #8]
 8004d90:	fa92 f2a2 	rbit	r2, r2
 8004d94:	607a      	str	r2, [r7, #4]
  return result;
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	fab2 f282 	clz	r2, r2
 8004d9c:	b2d2      	uxtb	r2, r2
 8004d9e:	40d3      	lsrs	r3, r2
 8004da0:	4a1d      	ldr	r2, [pc, #116]	; (8004e18 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004da2:	5cd3      	ldrb	r3, [r2, r3]
 8004da4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004da6:	4b1a      	ldr	r3, [pc, #104]	; (8004e10 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004daa:	f003 030f 	and.w	r3, r3, #15
 8004dae:	220f      	movs	r2, #15
 8004db0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	fa92 f2a2 	rbit	r2, r2
 8004db8:	60fa      	str	r2, [r7, #12]
  return result;
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	fab2 f282 	clz	r2, r2
 8004dc0:	b2d2      	uxtb	r2, r2
 8004dc2:	40d3      	lsrs	r3, r2
 8004dc4:	4a15      	ldr	r2, [pc, #84]	; (8004e1c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004dc6:	5cd3      	ldrb	r3, [r2, r3]
 8004dc8:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d008      	beq.n	8004de6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004dd4:	4a0f      	ldr	r2, [pc, #60]	; (8004e14 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	fb02 f303 	mul.w	r3, r2, r3
 8004de2:	627b      	str	r3, [r7, #36]	; 0x24
 8004de4:	e007      	b.n	8004df6 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004de6:	4a0b      	ldr	r2, [pc, #44]	; (8004e14 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	fbb2 f2f3 	udiv	r2, r2, r3
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	fb02 f303 	mul.w	r3, r2, r3
 8004df4:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df8:	623b      	str	r3, [r7, #32]
      break;
 8004dfa:	e002      	b.n	8004e02 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004dfc:	4b05      	ldr	r3, [pc, #20]	; (8004e14 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004dfe:	623b      	str	r3, [r7, #32]
      break;
 8004e00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e02:	6a3b      	ldr	r3, [r7, #32]
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	372c      	adds	r7, #44	; 0x2c
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr
 8004e10:	40021000 	.word	0x40021000
 8004e14:	007a1200 	.word	0x007a1200
 8004e18:	080086bc 	.word	0x080086bc
 8004e1c:	080086cc 	.word	0x080086cc

08004e20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e20:	b480      	push	{r7}
 8004e22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e24:	4b03      	ldr	r3, [pc, #12]	; (8004e34 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e26:	681b      	ldr	r3, [r3, #0]
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	20000050 	.word	0x20000050

08004e38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004e3e:	f7ff ffef 	bl	8004e20 <HAL_RCC_GetHCLKFreq>
 8004e42:	4601      	mov	r1, r0
 8004e44:	4b0b      	ldr	r3, [pc, #44]	; (8004e74 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e4c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004e50:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	fa92 f2a2 	rbit	r2, r2
 8004e58:	603a      	str	r2, [r7, #0]
  return result;
 8004e5a:	683a      	ldr	r2, [r7, #0]
 8004e5c:	fab2 f282 	clz	r2, r2
 8004e60:	b2d2      	uxtb	r2, r2
 8004e62:	40d3      	lsrs	r3, r2
 8004e64:	4a04      	ldr	r2, [pc, #16]	; (8004e78 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004e66:	5cd3      	ldrb	r3, [r2, r3]
 8004e68:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3708      	adds	r7, #8
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	40021000 	.word	0x40021000
 8004e78:	080086b4 	.word	0x080086b4

08004e7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004e82:	f7ff ffcd 	bl	8004e20 <HAL_RCC_GetHCLKFreq>
 8004e86:	4601      	mov	r1, r0
 8004e88:	4b0b      	ldr	r3, [pc, #44]	; (8004eb8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004e90:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004e94:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	fa92 f2a2 	rbit	r2, r2
 8004e9c:	603a      	str	r2, [r7, #0]
  return result;
 8004e9e:	683a      	ldr	r2, [r7, #0]
 8004ea0:	fab2 f282 	clz	r2, r2
 8004ea4:	b2d2      	uxtb	r2, r2
 8004ea6:	40d3      	lsrs	r3, r2
 8004ea8:	4a04      	ldr	r2, [pc, #16]	; (8004ebc <HAL_RCC_GetPCLK2Freq+0x40>)
 8004eaa:	5cd3      	ldrb	r3, [r2, r3]
 8004eac:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3708      	adds	r7, #8
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	40021000 	.word	0x40021000
 8004ebc:	080086b4 	.word	0x080086b4

08004ec0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b092      	sub	sp, #72	; 0x48
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	f000 80d4 	beq.w	800508c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ee4:	4b4e      	ldr	r3, [pc, #312]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ee6:	69db      	ldr	r3, [r3, #28]
 8004ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d10e      	bne.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ef0:	4b4b      	ldr	r3, [pc, #300]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ef2:	69db      	ldr	r3, [r3, #28]
 8004ef4:	4a4a      	ldr	r2, [pc, #296]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004efa:	61d3      	str	r3, [r2, #28]
 8004efc:	4b48      	ldr	r3, [pc, #288]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004efe:	69db      	ldr	r3, [r3, #28]
 8004f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f04:	60bb      	str	r3, [r7, #8]
 8004f06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f0e:	4b45      	ldr	r3, [pc, #276]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d118      	bne.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f1a:	4b42      	ldr	r3, [pc, #264]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a41      	ldr	r2, [pc, #260]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f24:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f26:	f7fc ffbf 	bl	8001ea8 <HAL_GetTick>
 8004f2a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f2c:	e008      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f2e:	f7fc ffbb 	bl	8001ea8 <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	2b64      	cmp	r3, #100	; 0x64
 8004f3a:	d901      	bls.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e1d6      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f40:	4b38      	ldr	r3, [pc, #224]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d0f0      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f4c:	4b34      	ldr	r3, [pc, #208]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f4e:	6a1b      	ldr	r3, [r3, #32]
 8004f50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f54:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f000 8084 	beq.w	8005066 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d07c      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f6c:	4b2c      	ldr	r3, [pc, #176]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f6e:	6a1b      	ldr	r3, [r3, #32]
 8004f70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f7a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7e:	fa93 f3a3 	rbit	r3, r3
 8004f82:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f86:	fab3 f383 	clz	r3, r3
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	4b26      	ldr	r3, [pc, #152]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f90:	4413      	add	r3, r2
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	461a      	mov	r2, r3
 8004f96:	2301      	movs	r3, #1
 8004f98:	6013      	str	r3, [r2, #0]
 8004f9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f9e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa2:	fa93 f3a3 	rbit	r3, r3
 8004fa6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004faa:	fab3 f383 	clz	r3, r3
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	4b1d      	ldr	r3, [pc, #116]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004fb4:	4413      	add	r3, r2
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	461a      	mov	r2, r3
 8004fba:	2300      	movs	r3, #0
 8004fbc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004fbe:	4a18      	ldr	r2, [pc, #96]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fc2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d04b      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fce:	f7fc ff6b 	bl	8001ea8 <HAL_GetTick>
 8004fd2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fd4:	e00a      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fd6:	f7fc ff67 	bl	8001ea8 <HAL_GetTick>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d901      	bls.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e180      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004fec:	2302      	movs	r3, #2
 8004fee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff2:	fa93 f3a3 	rbit	r3, r3
 8004ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ff8:	2302      	movs	r3, #2
 8004ffa:	623b      	str	r3, [r7, #32]
 8004ffc:	6a3b      	ldr	r3, [r7, #32]
 8004ffe:	fa93 f3a3 	rbit	r3, r3
 8005002:	61fb      	str	r3, [r7, #28]
  return result;
 8005004:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005006:	fab3 f383 	clz	r3, r3
 800500a:	b2db      	uxtb	r3, r3
 800500c:	095b      	lsrs	r3, r3, #5
 800500e:	b2db      	uxtb	r3, r3
 8005010:	f043 0302 	orr.w	r3, r3, #2
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2b02      	cmp	r3, #2
 8005018:	d108      	bne.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800501a:	4b01      	ldr	r3, [pc, #4]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	e00d      	b.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005020:	40021000 	.word	0x40021000
 8005024:	40007000 	.word	0x40007000
 8005028:	10908100 	.word	0x10908100
 800502c:	2302      	movs	r3, #2
 800502e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	fa93 f3a3 	rbit	r3, r3
 8005036:	617b      	str	r3, [r7, #20]
 8005038:	4b9a      	ldr	r3, [pc, #616]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800503a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503c:	2202      	movs	r2, #2
 800503e:	613a      	str	r2, [r7, #16]
 8005040:	693a      	ldr	r2, [r7, #16]
 8005042:	fa92 f2a2 	rbit	r2, r2
 8005046:	60fa      	str	r2, [r7, #12]
  return result;
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	fab2 f282 	clz	r2, r2
 800504e:	b2d2      	uxtb	r2, r2
 8005050:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005054:	b2d2      	uxtb	r2, r2
 8005056:	f002 021f 	and.w	r2, r2, #31
 800505a:	2101      	movs	r1, #1
 800505c:	fa01 f202 	lsl.w	r2, r1, r2
 8005060:	4013      	ands	r3, r2
 8005062:	2b00      	cmp	r3, #0
 8005064:	d0b7      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005066:	4b8f      	ldr	r3, [pc, #572]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	498c      	ldr	r1, [pc, #560]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005074:	4313      	orrs	r3, r2
 8005076:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005078:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800507c:	2b01      	cmp	r3, #1
 800507e:	d105      	bne.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005080:	4b88      	ldr	r3, [pc, #544]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005082:	69db      	ldr	r3, [r3, #28]
 8005084:	4a87      	ldr	r2, [pc, #540]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005086:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800508a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0301 	and.w	r3, r3, #1
 8005094:	2b00      	cmp	r3, #0
 8005096:	d008      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005098:	4b82      	ldr	r3, [pc, #520]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800509a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509c:	f023 0203 	bic.w	r2, r3, #3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	497f      	ldr	r1, [pc, #508]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0302 	and.w	r3, r3, #2
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d008      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050b6:	4b7b      	ldr	r3, [pc, #492]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80050b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	4978      	ldr	r1, [pc, #480]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0304 	and.w	r3, r3, #4
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d008      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80050d4:	4b73      	ldr	r3, [pc, #460]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80050d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	4970      	ldr	r1, [pc, #448]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0320 	and.w	r3, r3, #32
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d008      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050f2:	4b6c      	ldr	r3, [pc, #432]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80050f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f6:	f023 0210 	bic.w	r2, r3, #16
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	69db      	ldr	r3, [r3, #28]
 80050fe:	4969      	ldr	r1, [pc, #420]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005100:	4313      	orrs	r3, r2
 8005102:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800510c:	2b00      	cmp	r3, #0
 800510e:	d008      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005110:	4b64      	ldr	r3, [pc, #400]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800511c:	4961      	ldr	r1, [pc, #388]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800511e:	4313      	orrs	r3, r2
 8005120:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800512a:	2b00      	cmp	r3, #0
 800512c:	d008      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800512e:	4b5d      	ldr	r3, [pc, #372]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005132:	f023 0220 	bic.w	r2, r3, #32
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	495a      	ldr	r1, [pc, #360]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800513c:	4313      	orrs	r3, r2
 800513e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d008      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800514c:	4b55      	ldr	r3, [pc, #340]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800514e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005150:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005158:	4952      	ldr	r1, [pc, #328]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800515a:	4313      	orrs	r3, r2
 800515c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0308 	and.w	r3, r3, #8
 8005166:	2b00      	cmp	r3, #0
 8005168:	d008      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800516a:	4b4e      	ldr	r3, [pc, #312]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800516c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	494b      	ldr	r1, [pc, #300]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005178:	4313      	orrs	r3, r2
 800517a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0310 	and.w	r3, r3, #16
 8005184:	2b00      	cmp	r3, #0
 8005186:	d008      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005188:	4b46      	ldr	r3, [pc, #280]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800518a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	4943      	ldr	r1, [pc, #268]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005196:	4313      	orrs	r3, r2
 8005198:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d008      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80051a6:	4b3f      	ldr	r3, [pc, #252]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b2:	493c      	ldr	r1, [pc, #240]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d008      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80051c4:	4b37      	ldr	r3, [pc, #220]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80051c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d0:	4934      	ldr	r1, [pc, #208]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d008      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80051e2:	4b30      	ldr	r3, [pc, #192]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80051e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ee:	492d      	ldr	r1, [pc, #180]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d008      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005200:	4b28      	ldr	r3, [pc, #160]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005204:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800520c:	4925      	ldr	r1, [pc, #148]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800520e:	4313      	orrs	r3, r2
 8005210:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d008      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800521e:	4b21      	ldr	r3, [pc, #132]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005222:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522a:	491e      	ldr	r1, [pc, #120]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800522c:	4313      	orrs	r3, r2
 800522e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d008      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800523c:	4b19      	ldr	r3, [pc, #100]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800523e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005240:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005248:	4916      	ldr	r1, [pc, #88]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800524a:	4313      	orrs	r3, r2
 800524c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d008      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800525a:	4b12      	ldr	r3, [pc, #72]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800525c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005266:	490f      	ldr	r1, [pc, #60]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005268:	4313      	orrs	r3, r2
 800526a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d008      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005278:	4b0a      	ldr	r3, [pc, #40]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800527a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005284:	4907      	ldr	r1, [pc, #28]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005286:	4313      	orrs	r3, r2
 8005288:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00c      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8005296:	4b03      	ldr	r3, [pc, #12]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	e002      	b.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80052a2:	bf00      	nop
 80052a4:	40021000 	.word	0x40021000
 80052a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052aa:	4913      	ldr	r1, [pc, #76]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80052ac:	4313      	orrs	r3, r2
 80052ae:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d008      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80052bc:	4b0e      	ldr	r3, [pc, #56]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80052be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052c8:	490b      	ldr	r1, [pc, #44]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d008      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80052da:	4b07      	ldr	r3, [pc, #28]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80052dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052de:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052e6:	4904      	ldr	r1, [pc, #16]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80052e8:	4313      	orrs	r3, r2
 80052ea:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3748      	adds	r7, #72	; 0x48
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	40021000 	.word	0x40021000

080052fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d101      	bne.n	800530e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e049      	b.n	80053a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005314:	b2db      	uxtb	r3, r3
 8005316:	2b00      	cmp	r3, #0
 8005318:	d106      	bne.n	8005328 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f7fc faae 	bl	8001884 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2202      	movs	r2, #2
 800532c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	3304      	adds	r3, #4
 8005338:	4619      	mov	r1, r3
 800533a:	4610      	mov	r0, r2
 800533c:	f000 fb80 	bl	8005a40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3708      	adds	r7, #8
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b082      	sub	sp, #8
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d101      	bne.n	80053bc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e049      	b.n	8005450 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d106      	bne.n	80053d6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 f841 	bl	8005458 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2202      	movs	r2, #2
 80053da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	3304      	adds	r3, #4
 80053e6:	4619      	mov	r1, r3
 80053e8:	4610      	mov	r0, r2
 80053ea:	f000 fb29 	bl	8005a40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2201      	movs	r2, #1
 8005402:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2201      	movs	r2, #1
 8005412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2201      	movs	r2, #1
 800541a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2201      	movs	r2, #1
 8005422:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2201      	movs	r2, #1
 800542a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2201      	movs	r2, #1
 800544a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3708      	adds	r7, #8
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005460:	bf00      	nop
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d109      	bne.n	8005490 <HAL_TIM_PWM_Start+0x24>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005482:	b2db      	uxtb	r3, r3
 8005484:	2b01      	cmp	r3, #1
 8005486:	bf14      	ite	ne
 8005488:	2301      	movne	r3, #1
 800548a:	2300      	moveq	r3, #0
 800548c:	b2db      	uxtb	r3, r3
 800548e:	e03c      	b.n	800550a <HAL_TIM_PWM_Start+0x9e>
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	2b04      	cmp	r3, #4
 8005494:	d109      	bne.n	80054aa <HAL_TIM_PWM_Start+0x3e>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800549c:	b2db      	uxtb	r3, r3
 800549e:	2b01      	cmp	r3, #1
 80054a0:	bf14      	ite	ne
 80054a2:	2301      	movne	r3, #1
 80054a4:	2300      	moveq	r3, #0
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	e02f      	b.n	800550a <HAL_TIM_PWM_Start+0x9e>
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	2b08      	cmp	r3, #8
 80054ae:	d109      	bne.n	80054c4 <HAL_TIM_PWM_Start+0x58>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	bf14      	ite	ne
 80054bc:	2301      	movne	r3, #1
 80054be:	2300      	moveq	r3, #0
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	e022      	b.n	800550a <HAL_TIM_PWM_Start+0x9e>
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	2b0c      	cmp	r3, #12
 80054c8:	d109      	bne.n	80054de <HAL_TIM_PWM_Start+0x72>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	bf14      	ite	ne
 80054d6:	2301      	movne	r3, #1
 80054d8:	2300      	moveq	r3, #0
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	e015      	b.n	800550a <HAL_TIM_PWM_Start+0x9e>
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	2b10      	cmp	r3, #16
 80054e2:	d109      	bne.n	80054f8 <HAL_TIM_PWM_Start+0x8c>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	bf14      	ite	ne
 80054f0:	2301      	movne	r3, #1
 80054f2:	2300      	moveq	r3, #0
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	e008      	b.n	800550a <HAL_TIM_PWM_Start+0x9e>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	2b01      	cmp	r3, #1
 8005502:	bf14      	ite	ne
 8005504:	2301      	movne	r3, #1
 8005506:	2300      	moveq	r3, #0
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d001      	beq.n	8005512 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e0a1      	b.n	8005656 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d104      	bne.n	8005522 <HAL_TIM_PWM_Start+0xb6>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2202      	movs	r2, #2
 800551c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005520:	e023      	b.n	800556a <HAL_TIM_PWM_Start+0xfe>
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	2b04      	cmp	r3, #4
 8005526:	d104      	bne.n	8005532 <HAL_TIM_PWM_Start+0xc6>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2202      	movs	r2, #2
 800552c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005530:	e01b      	b.n	800556a <HAL_TIM_PWM_Start+0xfe>
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	2b08      	cmp	r3, #8
 8005536:	d104      	bne.n	8005542 <HAL_TIM_PWM_Start+0xd6>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2202      	movs	r2, #2
 800553c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005540:	e013      	b.n	800556a <HAL_TIM_PWM_Start+0xfe>
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	2b0c      	cmp	r3, #12
 8005546:	d104      	bne.n	8005552 <HAL_TIM_PWM_Start+0xe6>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2202      	movs	r2, #2
 800554c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005550:	e00b      	b.n	800556a <HAL_TIM_PWM_Start+0xfe>
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	2b10      	cmp	r3, #16
 8005556:	d104      	bne.n	8005562 <HAL_TIM_PWM_Start+0xf6>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2202      	movs	r2, #2
 800555c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005560:	e003      	b.n	800556a <HAL_TIM_PWM_Start+0xfe>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2202      	movs	r2, #2
 8005566:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2201      	movs	r2, #1
 8005570:	6839      	ldr	r1, [r7, #0]
 8005572:	4618      	mov	r0, r3
 8005574:	f000 fea2 	bl	80062bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a38      	ldr	r2, [pc, #224]	; (8005660 <HAL_TIM_PWM_Start+0x1f4>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d018      	beq.n	80055b4 <HAL_TIM_PWM_Start+0x148>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a37      	ldr	r2, [pc, #220]	; (8005664 <HAL_TIM_PWM_Start+0x1f8>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d013      	beq.n	80055b4 <HAL_TIM_PWM_Start+0x148>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a35      	ldr	r2, [pc, #212]	; (8005668 <HAL_TIM_PWM_Start+0x1fc>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d00e      	beq.n	80055b4 <HAL_TIM_PWM_Start+0x148>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a34      	ldr	r2, [pc, #208]	; (800566c <HAL_TIM_PWM_Start+0x200>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d009      	beq.n	80055b4 <HAL_TIM_PWM_Start+0x148>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a32      	ldr	r2, [pc, #200]	; (8005670 <HAL_TIM_PWM_Start+0x204>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d004      	beq.n	80055b4 <HAL_TIM_PWM_Start+0x148>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a31      	ldr	r2, [pc, #196]	; (8005674 <HAL_TIM_PWM_Start+0x208>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d101      	bne.n	80055b8 <HAL_TIM_PWM_Start+0x14c>
 80055b4:	2301      	movs	r3, #1
 80055b6:	e000      	b.n	80055ba <HAL_TIM_PWM_Start+0x14e>
 80055b8:	2300      	movs	r3, #0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d007      	beq.n	80055ce <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a23      	ldr	r2, [pc, #140]	; (8005660 <HAL_TIM_PWM_Start+0x1f4>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d01d      	beq.n	8005614 <HAL_TIM_PWM_Start+0x1a8>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055e0:	d018      	beq.n	8005614 <HAL_TIM_PWM_Start+0x1a8>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a24      	ldr	r2, [pc, #144]	; (8005678 <HAL_TIM_PWM_Start+0x20c>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d013      	beq.n	8005614 <HAL_TIM_PWM_Start+0x1a8>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a22      	ldr	r2, [pc, #136]	; (800567c <HAL_TIM_PWM_Start+0x210>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d00e      	beq.n	8005614 <HAL_TIM_PWM_Start+0x1a8>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a1a      	ldr	r2, [pc, #104]	; (8005664 <HAL_TIM_PWM_Start+0x1f8>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d009      	beq.n	8005614 <HAL_TIM_PWM_Start+0x1a8>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a18      	ldr	r2, [pc, #96]	; (8005668 <HAL_TIM_PWM_Start+0x1fc>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d004      	beq.n	8005614 <HAL_TIM_PWM_Start+0x1a8>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a19      	ldr	r2, [pc, #100]	; (8005674 <HAL_TIM_PWM_Start+0x208>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d115      	bne.n	8005640 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	689a      	ldr	r2, [r3, #8]
 800561a:	4b19      	ldr	r3, [pc, #100]	; (8005680 <HAL_TIM_PWM_Start+0x214>)
 800561c:	4013      	ands	r3, r2
 800561e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2b06      	cmp	r3, #6
 8005624:	d015      	beq.n	8005652 <HAL_TIM_PWM_Start+0x1e6>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800562c:	d011      	beq.n	8005652 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f042 0201 	orr.w	r2, r2, #1
 800563c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800563e:	e008      	b.n	8005652 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f042 0201 	orr.w	r2, r2, #1
 800564e:	601a      	str	r2, [r3, #0]
 8005650:	e000      	b.n	8005654 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005652:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3710      	adds	r7, #16
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	40012c00 	.word	0x40012c00
 8005664:	40013400 	.word	0x40013400
 8005668:	40014000 	.word	0x40014000
 800566c:	40014400 	.word	0x40014400
 8005670:	40014800 	.word	0x40014800
 8005674:	40015000 	.word	0x40015000
 8005678:	40000400 	.word	0x40000400
 800567c:	40000800 	.word	0x40000800
 8005680:	00010007 	.word	0x00010007

08005684 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b086      	sub	sp, #24
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005690:	2300      	movs	r3, #0
 8005692:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800569a:	2b01      	cmp	r3, #1
 800569c:	d101      	bne.n	80056a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800569e:	2302      	movs	r3, #2
 80056a0:	e0ff      	b.n	80058a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2201      	movs	r2, #1
 80056a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2b14      	cmp	r3, #20
 80056ae:	f200 80f0 	bhi.w	8005892 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80056b2:	a201      	add	r2, pc, #4	; (adr r2, 80056b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80056b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b8:	0800570d 	.word	0x0800570d
 80056bc:	08005893 	.word	0x08005893
 80056c0:	08005893 	.word	0x08005893
 80056c4:	08005893 	.word	0x08005893
 80056c8:	0800574d 	.word	0x0800574d
 80056cc:	08005893 	.word	0x08005893
 80056d0:	08005893 	.word	0x08005893
 80056d4:	08005893 	.word	0x08005893
 80056d8:	0800578f 	.word	0x0800578f
 80056dc:	08005893 	.word	0x08005893
 80056e0:	08005893 	.word	0x08005893
 80056e4:	08005893 	.word	0x08005893
 80056e8:	080057cf 	.word	0x080057cf
 80056ec:	08005893 	.word	0x08005893
 80056f0:	08005893 	.word	0x08005893
 80056f4:	08005893 	.word	0x08005893
 80056f8:	08005811 	.word	0x08005811
 80056fc:	08005893 	.word	0x08005893
 8005700:	08005893 	.word	0x08005893
 8005704:	08005893 	.word	0x08005893
 8005708:	08005851 	.word	0x08005851
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68b9      	ldr	r1, [r7, #8]
 8005712:	4618      	mov	r0, r3
 8005714:	f000 fa32 	bl	8005b7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	699a      	ldr	r2, [r3, #24]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f042 0208 	orr.w	r2, r2, #8
 8005726:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	699a      	ldr	r2, [r3, #24]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f022 0204 	bic.w	r2, r2, #4
 8005736:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6999      	ldr	r1, [r3, #24]
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	691a      	ldr	r2, [r3, #16]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	430a      	orrs	r2, r1
 8005748:	619a      	str	r2, [r3, #24]
      break;
 800574a:	e0a5      	b.n	8005898 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68b9      	ldr	r1, [r7, #8]
 8005752:	4618      	mov	r0, r3
 8005754:	f000 faac 	bl	8005cb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	699a      	ldr	r2, [r3, #24]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005766:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	699a      	ldr	r2, [r3, #24]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005776:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6999      	ldr	r1, [r3, #24]
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	021a      	lsls	r2, r3, #8
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	430a      	orrs	r2, r1
 800578a:	619a      	str	r2, [r3, #24]
      break;
 800578c:	e084      	b.n	8005898 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68b9      	ldr	r1, [r7, #8]
 8005794:	4618      	mov	r0, r3
 8005796:	f000 fb1f 	bl	8005dd8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	69da      	ldr	r2, [r3, #28]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f042 0208 	orr.w	r2, r2, #8
 80057a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	69da      	ldr	r2, [r3, #28]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f022 0204 	bic.w	r2, r2, #4
 80057b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	69d9      	ldr	r1, [r3, #28]
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	691a      	ldr	r2, [r3, #16]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	430a      	orrs	r2, r1
 80057ca:	61da      	str	r2, [r3, #28]
      break;
 80057cc:	e064      	b.n	8005898 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68b9      	ldr	r1, [r7, #8]
 80057d4:	4618      	mov	r0, r3
 80057d6:	f000 fb91 	bl	8005efc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	69da      	ldr	r2, [r3, #28]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	69da      	ldr	r2, [r3, #28]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	69d9      	ldr	r1, [r3, #28]
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	021a      	lsls	r2, r3, #8
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	430a      	orrs	r2, r1
 800580c:	61da      	str	r2, [r3, #28]
      break;
 800580e:	e043      	b.n	8005898 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68b9      	ldr	r1, [r7, #8]
 8005816:	4618      	mov	r0, r3
 8005818:	f000 fbe0 	bl	8005fdc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f042 0208 	orr.w	r2, r2, #8
 800582a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f022 0204 	bic.w	r2, r2, #4
 800583a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	691a      	ldr	r2, [r3, #16]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	430a      	orrs	r2, r1
 800584c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800584e:	e023      	b.n	8005898 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68b9      	ldr	r1, [r7, #8]
 8005856:	4618      	mov	r0, r3
 8005858:	f000 fc2a 	bl	80060b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800586a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800587a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	021a      	lsls	r2, r3, #8
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	430a      	orrs	r2, r1
 800588e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005890:	e002      	b.n	8005898 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	75fb      	strb	r3, [r7, #23]
      break;
 8005896:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3718      	adds	r7, #24
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop

080058ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058b6:	2300      	movs	r3, #0
 80058b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d101      	bne.n	80058c8 <HAL_TIM_ConfigClockSource+0x1c>
 80058c4:	2302      	movs	r3, #2
 80058c6:	e0b6      	b.n	8005a36 <HAL_TIM_ConfigClockSource+0x18a>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2202      	movs	r2, #2
 80058d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80058ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68ba      	ldr	r2, [r7, #8]
 80058fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005904:	d03e      	beq.n	8005984 <HAL_TIM_ConfigClockSource+0xd8>
 8005906:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800590a:	f200 8087 	bhi.w	8005a1c <HAL_TIM_ConfigClockSource+0x170>
 800590e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005912:	f000 8086 	beq.w	8005a22 <HAL_TIM_ConfigClockSource+0x176>
 8005916:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800591a:	d87f      	bhi.n	8005a1c <HAL_TIM_ConfigClockSource+0x170>
 800591c:	2b70      	cmp	r3, #112	; 0x70
 800591e:	d01a      	beq.n	8005956 <HAL_TIM_ConfigClockSource+0xaa>
 8005920:	2b70      	cmp	r3, #112	; 0x70
 8005922:	d87b      	bhi.n	8005a1c <HAL_TIM_ConfigClockSource+0x170>
 8005924:	2b60      	cmp	r3, #96	; 0x60
 8005926:	d050      	beq.n	80059ca <HAL_TIM_ConfigClockSource+0x11e>
 8005928:	2b60      	cmp	r3, #96	; 0x60
 800592a:	d877      	bhi.n	8005a1c <HAL_TIM_ConfigClockSource+0x170>
 800592c:	2b50      	cmp	r3, #80	; 0x50
 800592e:	d03c      	beq.n	80059aa <HAL_TIM_ConfigClockSource+0xfe>
 8005930:	2b50      	cmp	r3, #80	; 0x50
 8005932:	d873      	bhi.n	8005a1c <HAL_TIM_ConfigClockSource+0x170>
 8005934:	2b40      	cmp	r3, #64	; 0x40
 8005936:	d058      	beq.n	80059ea <HAL_TIM_ConfigClockSource+0x13e>
 8005938:	2b40      	cmp	r3, #64	; 0x40
 800593a:	d86f      	bhi.n	8005a1c <HAL_TIM_ConfigClockSource+0x170>
 800593c:	2b30      	cmp	r3, #48	; 0x30
 800593e:	d064      	beq.n	8005a0a <HAL_TIM_ConfigClockSource+0x15e>
 8005940:	2b30      	cmp	r3, #48	; 0x30
 8005942:	d86b      	bhi.n	8005a1c <HAL_TIM_ConfigClockSource+0x170>
 8005944:	2b20      	cmp	r3, #32
 8005946:	d060      	beq.n	8005a0a <HAL_TIM_ConfigClockSource+0x15e>
 8005948:	2b20      	cmp	r3, #32
 800594a:	d867      	bhi.n	8005a1c <HAL_TIM_ConfigClockSource+0x170>
 800594c:	2b00      	cmp	r3, #0
 800594e:	d05c      	beq.n	8005a0a <HAL_TIM_ConfigClockSource+0x15e>
 8005950:	2b10      	cmp	r3, #16
 8005952:	d05a      	beq.n	8005a0a <HAL_TIM_ConfigClockSource+0x15e>
 8005954:	e062      	b.n	8005a1c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6818      	ldr	r0, [r3, #0]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	6899      	ldr	r1, [r3, #8]
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	685a      	ldr	r2, [r3, #4]
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	f000 fc89 	bl	800627c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005978:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68ba      	ldr	r2, [r7, #8]
 8005980:	609a      	str	r2, [r3, #8]
      break;
 8005982:	e04f      	b.n	8005a24 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6818      	ldr	r0, [r3, #0]
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	6899      	ldr	r1, [r3, #8]
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	685a      	ldr	r2, [r3, #4]
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	f000 fc72 	bl	800627c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	689a      	ldr	r2, [r3, #8]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059a6:	609a      	str	r2, [r3, #8]
      break;
 80059a8:	e03c      	b.n	8005a24 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6818      	ldr	r0, [r3, #0]
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	6859      	ldr	r1, [r3, #4]
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	461a      	mov	r2, r3
 80059b8:	f000 fbe6 	bl	8006188 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2150      	movs	r1, #80	; 0x50
 80059c2:	4618      	mov	r0, r3
 80059c4:	f000 fc3f 	bl	8006246 <TIM_ITRx_SetConfig>
      break;
 80059c8:	e02c      	b.n	8005a24 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6818      	ldr	r0, [r3, #0]
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	6859      	ldr	r1, [r3, #4]
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	461a      	mov	r2, r3
 80059d8:	f000 fc05 	bl	80061e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2160      	movs	r1, #96	; 0x60
 80059e2:	4618      	mov	r0, r3
 80059e4:	f000 fc2f 	bl	8006246 <TIM_ITRx_SetConfig>
      break;
 80059e8:	e01c      	b.n	8005a24 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6818      	ldr	r0, [r3, #0]
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	6859      	ldr	r1, [r3, #4]
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	461a      	mov	r2, r3
 80059f8:	f000 fbc6 	bl	8006188 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2140      	movs	r1, #64	; 0x40
 8005a02:	4618      	mov	r0, r3
 8005a04:	f000 fc1f 	bl	8006246 <TIM_ITRx_SetConfig>
      break;
 8005a08:	e00c      	b.n	8005a24 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4619      	mov	r1, r3
 8005a14:	4610      	mov	r0, r2
 8005a16:	f000 fc16 	bl	8006246 <TIM_ITRx_SetConfig>
      break;
 8005a1a:	e003      	b.n	8005a24 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a20:	e000      	b.n	8005a24 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005a22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3710      	adds	r7, #16
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
	...

08005a40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a42      	ldr	r2, [pc, #264]	; (8005b5c <TIM_Base_SetConfig+0x11c>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d013      	beq.n	8005a80 <TIM_Base_SetConfig+0x40>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a5e:	d00f      	beq.n	8005a80 <TIM_Base_SetConfig+0x40>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a3f      	ldr	r2, [pc, #252]	; (8005b60 <TIM_Base_SetConfig+0x120>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d00b      	beq.n	8005a80 <TIM_Base_SetConfig+0x40>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a3e      	ldr	r2, [pc, #248]	; (8005b64 <TIM_Base_SetConfig+0x124>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d007      	beq.n	8005a80 <TIM_Base_SetConfig+0x40>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a3d      	ldr	r2, [pc, #244]	; (8005b68 <TIM_Base_SetConfig+0x128>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d003      	beq.n	8005a80 <TIM_Base_SetConfig+0x40>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a3c      	ldr	r2, [pc, #240]	; (8005b6c <TIM_Base_SetConfig+0x12c>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d108      	bne.n	8005a92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a31      	ldr	r2, [pc, #196]	; (8005b5c <TIM_Base_SetConfig+0x11c>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d01f      	beq.n	8005ada <TIM_Base_SetConfig+0x9a>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aa0:	d01b      	beq.n	8005ada <TIM_Base_SetConfig+0x9a>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a2e      	ldr	r2, [pc, #184]	; (8005b60 <TIM_Base_SetConfig+0x120>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d017      	beq.n	8005ada <TIM_Base_SetConfig+0x9a>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a2d      	ldr	r2, [pc, #180]	; (8005b64 <TIM_Base_SetConfig+0x124>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d013      	beq.n	8005ada <TIM_Base_SetConfig+0x9a>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a2c      	ldr	r2, [pc, #176]	; (8005b68 <TIM_Base_SetConfig+0x128>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d00f      	beq.n	8005ada <TIM_Base_SetConfig+0x9a>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a2c      	ldr	r2, [pc, #176]	; (8005b70 <TIM_Base_SetConfig+0x130>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d00b      	beq.n	8005ada <TIM_Base_SetConfig+0x9a>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a2b      	ldr	r2, [pc, #172]	; (8005b74 <TIM_Base_SetConfig+0x134>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d007      	beq.n	8005ada <TIM_Base_SetConfig+0x9a>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a2a      	ldr	r2, [pc, #168]	; (8005b78 <TIM_Base_SetConfig+0x138>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d003      	beq.n	8005ada <TIM_Base_SetConfig+0x9a>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a25      	ldr	r2, [pc, #148]	; (8005b6c <TIM_Base_SetConfig+0x12c>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d108      	bne.n	8005aec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ae0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	689a      	ldr	r2, [r3, #8]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a12      	ldr	r2, [pc, #72]	; (8005b5c <TIM_Base_SetConfig+0x11c>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d013      	beq.n	8005b40 <TIM_Base_SetConfig+0x100>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a13      	ldr	r2, [pc, #76]	; (8005b68 <TIM_Base_SetConfig+0x128>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d00f      	beq.n	8005b40 <TIM_Base_SetConfig+0x100>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a13      	ldr	r2, [pc, #76]	; (8005b70 <TIM_Base_SetConfig+0x130>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d00b      	beq.n	8005b40 <TIM_Base_SetConfig+0x100>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a12      	ldr	r2, [pc, #72]	; (8005b74 <TIM_Base_SetConfig+0x134>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d007      	beq.n	8005b40 <TIM_Base_SetConfig+0x100>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a11      	ldr	r2, [pc, #68]	; (8005b78 <TIM_Base_SetConfig+0x138>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d003      	beq.n	8005b40 <TIM_Base_SetConfig+0x100>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a0c      	ldr	r2, [pc, #48]	; (8005b6c <TIM_Base_SetConfig+0x12c>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d103      	bne.n	8005b48 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	691a      	ldr	r2, [r3, #16]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	615a      	str	r2, [r3, #20]
}
 8005b4e:	bf00      	nop
 8005b50:	3714      	adds	r7, #20
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	40012c00 	.word	0x40012c00
 8005b60:	40000400 	.word	0x40000400
 8005b64:	40000800 	.word	0x40000800
 8005b68:	40013400 	.word	0x40013400
 8005b6c:	40015000 	.word	0x40015000
 8005b70:	40014000 	.word	0x40014000
 8005b74:	40014400 	.word	0x40014400
 8005b78:	40014800 	.word	0x40014800

08005b7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b087      	sub	sp, #28
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	f023 0201 	bic.w	r2, r3, #1
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a1b      	ldr	r3, [r3, #32]
 8005b96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f023 0303 	bic.w	r3, r3, #3
 8005bb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	f023 0302 	bic.w	r3, r3, #2
 8005bc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	697a      	ldr	r2, [r7, #20]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a30      	ldr	r2, [pc, #192]	; (8005c98 <TIM_OC1_SetConfig+0x11c>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d013      	beq.n	8005c04 <TIM_OC1_SetConfig+0x88>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a2f      	ldr	r2, [pc, #188]	; (8005c9c <TIM_OC1_SetConfig+0x120>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d00f      	beq.n	8005c04 <TIM_OC1_SetConfig+0x88>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a2e      	ldr	r2, [pc, #184]	; (8005ca0 <TIM_OC1_SetConfig+0x124>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d00b      	beq.n	8005c04 <TIM_OC1_SetConfig+0x88>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a2d      	ldr	r2, [pc, #180]	; (8005ca4 <TIM_OC1_SetConfig+0x128>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d007      	beq.n	8005c04 <TIM_OC1_SetConfig+0x88>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a2c      	ldr	r2, [pc, #176]	; (8005ca8 <TIM_OC1_SetConfig+0x12c>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d003      	beq.n	8005c04 <TIM_OC1_SetConfig+0x88>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a2b      	ldr	r2, [pc, #172]	; (8005cac <TIM_OC1_SetConfig+0x130>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d10c      	bne.n	8005c1e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	f023 0308 	bic.w	r3, r3, #8
 8005c0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	697a      	ldr	r2, [r7, #20]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	f023 0304 	bic.w	r3, r3, #4
 8005c1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a1d      	ldr	r2, [pc, #116]	; (8005c98 <TIM_OC1_SetConfig+0x11c>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d013      	beq.n	8005c4e <TIM_OC1_SetConfig+0xd2>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a1c      	ldr	r2, [pc, #112]	; (8005c9c <TIM_OC1_SetConfig+0x120>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d00f      	beq.n	8005c4e <TIM_OC1_SetConfig+0xd2>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a1b      	ldr	r2, [pc, #108]	; (8005ca0 <TIM_OC1_SetConfig+0x124>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d00b      	beq.n	8005c4e <TIM_OC1_SetConfig+0xd2>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a1a      	ldr	r2, [pc, #104]	; (8005ca4 <TIM_OC1_SetConfig+0x128>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d007      	beq.n	8005c4e <TIM_OC1_SetConfig+0xd2>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a19      	ldr	r2, [pc, #100]	; (8005ca8 <TIM_OC1_SetConfig+0x12c>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d003      	beq.n	8005c4e <TIM_OC1_SetConfig+0xd2>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a18      	ldr	r2, [pc, #96]	; (8005cac <TIM_OC1_SetConfig+0x130>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d111      	bne.n	8005c72 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	693a      	ldr	r2, [r7, #16]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	699b      	ldr	r3, [r3, #24]
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	685a      	ldr	r2, [r3, #4]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	621a      	str	r2, [r3, #32]
}
 8005c8c:	bf00      	nop
 8005c8e:	371c      	adds	r7, #28
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr
 8005c98:	40012c00 	.word	0x40012c00
 8005c9c:	40013400 	.word	0x40013400
 8005ca0:	40014000 	.word	0x40014000
 8005ca4:	40014400 	.word	0x40014400
 8005ca8:	40014800 	.word	0x40014800
 8005cac:	40015000 	.word	0x40015000

08005cb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b087      	sub	sp, #28
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	f023 0210 	bic.w	r2, r3, #16
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a1b      	ldr	r3, [r3, #32]
 8005cca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	699b      	ldr	r3, [r3, #24]
 8005cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	021b      	lsls	r3, r3, #8
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	f023 0320 	bic.w	r3, r3, #32
 8005cfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	011b      	lsls	r3, r3, #4
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a2c      	ldr	r2, [pc, #176]	; (8005dc0 <TIM_OC2_SetConfig+0x110>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d007      	beq.n	8005d24 <TIM_OC2_SetConfig+0x74>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a2b      	ldr	r2, [pc, #172]	; (8005dc4 <TIM_OC2_SetConfig+0x114>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d003      	beq.n	8005d24 <TIM_OC2_SetConfig+0x74>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a2a      	ldr	r2, [pc, #168]	; (8005dc8 <TIM_OC2_SetConfig+0x118>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d10d      	bne.n	8005d40 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	011b      	lsls	r3, r3, #4
 8005d32:	697a      	ldr	r2, [r7, #20]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a1f      	ldr	r2, [pc, #124]	; (8005dc0 <TIM_OC2_SetConfig+0x110>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d013      	beq.n	8005d70 <TIM_OC2_SetConfig+0xc0>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a1e      	ldr	r2, [pc, #120]	; (8005dc4 <TIM_OC2_SetConfig+0x114>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d00f      	beq.n	8005d70 <TIM_OC2_SetConfig+0xc0>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a1e      	ldr	r2, [pc, #120]	; (8005dcc <TIM_OC2_SetConfig+0x11c>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d00b      	beq.n	8005d70 <TIM_OC2_SetConfig+0xc0>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a1d      	ldr	r2, [pc, #116]	; (8005dd0 <TIM_OC2_SetConfig+0x120>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d007      	beq.n	8005d70 <TIM_OC2_SetConfig+0xc0>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a1c      	ldr	r2, [pc, #112]	; (8005dd4 <TIM_OC2_SetConfig+0x124>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d003      	beq.n	8005d70 <TIM_OC2_SetConfig+0xc0>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a17      	ldr	r2, [pc, #92]	; (8005dc8 <TIM_OC2_SetConfig+0x118>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d113      	bne.n	8005d98 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d76:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d7e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	695b      	ldr	r3, [r3, #20]
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	699b      	ldr	r3, [r3, #24]
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	693a      	ldr	r2, [r7, #16]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	693a      	ldr	r2, [r7, #16]
 8005d9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	685a      	ldr	r2, [r3, #4]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	697a      	ldr	r2, [r7, #20]
 8005db0:	621a      	str	r2, [r3, #32]
}
 8005db2:	bf00      	nop
 8005db4:	371c      	adds	r7, #28
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	40012c00 	.word	0x40012c00
 8005dc4:	40013400 	.word	0x40013400
 8005dc8:	40015000 	.word	0x40015000
 8005dcc:	40014000 	.word	0x40014000
 8005dd0:	40014400 	.word	0x40014400
 8005dd4:	40014800 	.word	0x40014800

08005dd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b087      	sub	sp, #28
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a1b      	ldr	r3, [r3, #32]
 8005de6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	69db      	ldr	r3, [r3, #28]
 8005dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f023 0303 	bic.w	r3, r3, #3
 8005e12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	021b      	lsls	r3, r3, #8
 8005e2c:	697a      	ldr	r2, [r7, #20]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a2b      	ldr	r2, [pc, #172]	; (8005ee4 <TIM_OC3_SetConfig+0x10c>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d007      	beq.n	8005e4a <TIM_OC3_SetConfig+0x72>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a2a      	ldr	r2, [pc, #168]	; (8005ee8 <TIM_OC3_SetConfig+0x110>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d003      	beq.n	8005e4a <TIM_OC3_SetConfig+0x72>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a29      	ldr	r2, [pc, #164]	; (8005eec <TIM_OC3_SetConfig+0x114>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d10d      	bne.n	8005e66 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	021b      	lsls	r3, r3, #8
 8005e58:	697a      	ldr	r2, [r7, #20]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e64:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a1e      	ldr	r2, [pc, #120]	; (8005ee4 <TIM_OC3_SetConfig+0x10c>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d013      	beq.n	8005e96 <TIM_OC3_SetConfig+0xbe>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a1d      	ldr	r2, [pc, #116]	; (8005ee8 <TIM_OC3_SetConfig+0x110>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d00f      	beq.n	8005e96 <TIM_OC3_SetConfig+0xbe>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a1d      	ldr	r2, [pc, #116]	; (8005ef0 <TIM_OC3_SetConfig+0x118>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d00b      	beq.n	8005e96 <TIM_OC3_SetConfig+0xbe>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a1c      	ldr	r2, [pc, #112]	; (8005ef4 <TIM_OC3_SetConfig+0x11c>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d007      	beq.n	8005e96 <TIM_OC3_SetConfig+0xbe>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a1b      	ldr	r2, [pc, #108]	; (8005ef8 <TIM_OC3_SetConfig+0x120>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d003      	beq.n	8005e96 <TIM_OC3_SetConfig+0xbe>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a16      	ldr	r2, [pc, #88]	; (8005eec <TIM_OC3_SetConfig+0x114>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d113      	bne.n	8005ebe <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ea4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	011b      	lsls	r3, r3, #4
 8005eac:	693a      	ldr	r2, [r7, #16]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	699b      	ldr	r3, [r3, #24]
 8005eb6:	011b      	lsls	r3, r3, #4
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	685a      	ldr	r2, [r3, #4]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	697a      	ldr	r2, [r7, #20]
 8005ed6:	621a      	str	r2, [r3, #32]
}
 8005ed8:	bf00      	nop
 8005eda:	371c      	adds	r7, #28
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr
 8005ee4:	40012c00 	.word	0x40012c00
 8005ee8:	40013400 	.word	0x40013400
 8005eec:	40015000 	.word	0x40015000
 8005ef0:	40014000 	.word	0x40014000
 8005ef4:	40014400 	.word	0x40014400
 8005ef8:	40014800 	.word	0x40014800

08005efc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b087      	sub	sp, #28
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a1b      	ldr	r3, [r3, #32]
 8005f0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a1b      	ldr	r3, [r3, #32]
 8005f16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	69db      	ldr	r3, [r3, #28]
 8005f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	021b      	lsls	r3, r3, #8
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	031b      	lsls	r3, r3, #12
 8005f52:	693a      	ldr	r2, [r7, #16]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a1a      	ldr	r2, [pc, #104]	; (8005fc4 <TIM_OC4_SetConfig+0xc8>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d013      	beq.n	8005f88 <TIM_OC4_SetConfig+0x8c>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a19      	ldr	r2, [pc, #100]	; (8005fc8 <TIM_OC4_SetConfig+0xcc>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d00f      	beq.n	8005f88 <TIM_OC4_SetConfig+0x8c>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a18      	ldr	r2, [pc, #96]	; (8005fcc <TIM_OC4_SetConfig+0xd0>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d00b      	beq.n	8005f88 <TIM_OC4_SetConfig+0x8c>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a17      	ldr	r2, [pc, #92]	; (8005fd0 <TIM_OC4_SetConfig+0xd4>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d007      	beq.n	8005f88 <TIM_OC4_SetConfig+0x8c>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a16      	ldr	r2, [pc, #88]	; (8005fd4 <TIM_OC4_SetConfig+0xd8>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d003      	beq.n	8005f88 <TIM_OC4_SetConfig+0x8c>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a15      	ldr	r2, [pc, #84]	; (8005fd8 <TIM_OC4_SetConfig+0xdc>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d109      	bne.n	8005f9c <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	695b      	ldr	r3, [r3, #20]
 8005f94:	019b      	lsls	r3, r3, #6
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	697a      	ldr	r2, [r7, #20]
 8005fa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	685a      	ldr	r2, [r3, #4]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	693a      	ldr	r2, [r7, #16]
 8005fb4:	621a      	str	r2, [r3, #32]
}
 8005fb6:	bf00      	nop
 8005fb8:	371c      	adds	r7, #28
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	40012c00 	.word	0x40012c00
 8005fc8:	40013400 	.word	0x40013400
 8005fcc:	40014000 	.word	0x40014000
 8005fd0:	40014400 	.word	0x40014400
 8005fd4:	40014800 	.word	0x40014800
 8005fd8:	40015000 	.word	0x40015000

08005fdc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b087      	sub	sp, #28
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a1b      	ldr	r3, [r3, #32]
 8005fea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800600a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800600e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	4313      	orrs	r3, r2
 8006018:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006020:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	041b      	lsls	r3, r3, #16
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	4313      	orrs	r3, r2
 800602c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a19      	ldr	r2, [pc, #100]	; (8006098 <TIM_OC5_SetConfig+0xbc>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d013      	beq.n	800605e <TIM_OC5_SetConfig+0x82>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a18      	ldr	r2, [pc, #96]	; (800609c <TIM_OC5_SetConfig+0xc0>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d00f      	beq.n	800605e <TIM_OC5_SetConfig+0x82>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a17      	ldr	r2, [pc, #92]	; (80060a0 <TIM_OC5_SetConfig+0xc4>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d00b      	beq.n	800605e <TIM_OC5_SetConfig+0x82>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a16      	ldr	r2, [pc, #88]	; (80060a4 <TIM_OC5_SetConfig+0xc8>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d007      	beq.n	800605e <TIM_OC5_SetConfig+0x82>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a15      	ldr	r2, [pc, #84]	; (80060a8 <TIM_OC5_SetConfig+0xcc>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d003      	beq.n	800605e <TIM_OC5_SetConfig+0x82>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a14      	ldr	r2, [pc, #80]	; (80060ac <TIM_OC5_SetConfig+0xd0>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d109      	bne.n	8006072 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006064:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	021b      	lsls	r3, r3, #8
 800606c:	697a      	ldr	r2, [r7, #20]
 800606e:	4313      	orrs	r3, r2
 8006070:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	697a      	ldr	r2, [r7, #20]
 8006076:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	685a      	ldr	r2, [r3, #4]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	621a      	str	r2, [r3, #32]
}
 800608c:	bf00      	nop
 800608e:	371c      	adds	r7, #28
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr
 8006098:	40012c00 	.word	0x40012c00
 800609c:	40013400 	.word	0x40013400
 80060a0:	40014000 	.word	0x40014000
 80060a4:	40014400 	.word	0x40014400
 80060a8:	40014800 	.word	0x40014800
 80060ac:	40015000 	.word	0x40015000

080060b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b087      	sub	sp, #28
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a1b      	ldr	r3, [r3, #32]
 80060be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a1b      	ldr	r3, [r3, #32]
 80060ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	021b      	lsls	r3, r3, #8
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80060f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	051b      	lsls	r3, r3, #20
 80060fe:	693a      	ldr	r2, [r7, #16]
 8006100:	4313      	orrs	r3, r2
 8006102:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a1a      	ldr	r2, [pc, #104]	; (8006170 <TIM_OC6_SetConfig+0xc0>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d013      	beq.n	8006134 <TIM_OC6_SetConfig+0x84>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a19      	ldr	r2, [pc, #100]	; (8006174 <TIM_OC6_SetConfig+0xc4>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d00f      	beq.n	8006134 <TIM_OC6_SetConfig+0x84>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a18      	ldr	r2, [pc, #96]	; (8006178 <TIM_OC6_SetConfig+0xc8>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d00b      	beq.n	8006134 <TIM_OC6_SetConfig+0x84>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a17      	ldr	r2, [pc, #92]	; (800617c <TIM_OC6_SetConfig+0xcc>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d007      	beq.n	8006134 <TIM_OC6_SetConfig+0x84>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a16      	ldr	r2, [pc, #88]	; (8006180 <TIM_OC6_SetConfig+0xd0>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d003      	beq.n	8006134 <TIM_OC6_SetConfig+0x84>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a15      	ldr	r2, [pc, #84]	; (8006184 <TIM_OC6_SetConfig+0xd4>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d109      	bne.n	8006148 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800613a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	695b      	ldr	r3, [r3, #20]
 8006140:	029b      	lsls	r3, r3, #10
 8006142:	697a      	ldr	r2, [r7, #20]
 8006144:	4313      	orrs	r3, r2
 8006146:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	697a      	ldr	r2, [r7, #20]
 800614c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	685a      	ldr	r2, [r3, #4]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	621a      	str	r2, [r3, #32]
}
 8006162:	bf00      	nop
 8006164:	371c      	adds	r7, #28
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	40012c00 	.word	0x40012c00
 8006174:	40013400 	.word	0x40013400
 8006178:	40014000 	.word	0x40014000
 800617c:	40014400 	.word	0x40014400
 8006180:	40014800 	.word	0x40014800
 8006184:	40015000 	.word	0x40015000

08006188 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006188:	b480      	push	{r7}
 800618a:	b087      	sub	sp, #28
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6a1b      	ldr	r3, [r3, #32]
 8006198:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	f023 0201 	bic.w	r2, r3, #1
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	011b      	lsls	r3, r3, #4
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	f023 030a 	bic.w	r3, r3, #10
 80061c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	697a      	ldr	r2, [r7, #20]
 80061d8:	621a      	str	r2, [r3, #32]
}
 80061da:	bf00      	nop
 80061dc:	371c      	adds	r7, #28
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr

080061e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061e6:	b480      	push	{r7}
 80061e8:	b087      	sub	sp, #28
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	60f8      	str	r0, [r7, #12]
 80061ee:	60b9      	str	r1, [r7, #8]
 80061f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6a1b      	ldr	r3, [r3, #32]
 80061f6:	f023 0210 	bic.w	r2, r3, #16
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	699b      	ldr	r3, [r3, #24]
 8006202:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6a1b      	ldr	r3, [r3, #32]
 8006208:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006210:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	031b      	lsls	r3, r3, #12
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	4313      	orrs	r3, r2
 800621a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006222:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	011b      	lsls	r3, r3, #4
 8006228:	693a      	ldr	r2, [r7, #16]
 800622a:	4313      	orrs	r3, r2
 800622c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	697a      	ldr	r2, [r7, #20]
 8006232:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	693a      	ldr	r2, [r7, #16]
 8006238:	621a      	str	r2, [r3, #32]
}
 800623a:	bf00      	nop
 800623c:	371c      	adds	r7, #28
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006246:	b480      	push	{r7}
 8006248:	b085      	sub	sp, #20
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
 800624e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800625c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800625e:	683a      	ldr	r2, [r7, #0]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	4313      	orrs	r3, r2
 8006264:	f043 0307 	orr.w	r3, r3, #7
 8006268:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	609a      	str	r2, [r3, #8]
}
 8006270:	bf00      	nop
 8006272:	3714      	adds	r7, #20
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800627c:	b480      	push	{r7}
 800627e:	b087      	sub	sp, #28
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	607a      	str	r2, [r7, #4]
 8006288:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006296:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	021a      	lsls	r2, r3, #8
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	431a      	orrs	r2, r3
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	697a      	ldr	r2, [r7, #20]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	697a      	ldr	r2, [r7, #20]
 80062ae:	609a      	str	r2, [r3, #8]
}
 80062b0:	bf00      	nop
 80062b2:	371c      	adds	r7, #28
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80062bc:	b480      	push	{r7}
 80062be:	b087      	sub	sp, #28
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	f003 031f 	and.w	r3, r3, #31
 80062ce:	2201      	movs	r2, #1
 80062d0:	fa02 f303 	lsl.w	r3, r2, r3
 80062d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6a1a      	ldr	r2, [r3, #32]
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	43db      	mvns	r3, r3
 80062de:	401a      	ands	r2, r3
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6a1a      	ldr	r2, [r3, #32]
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	f003 031f 	and.w	r3, r3, #31
 80062ee:	6879      	ldr	r1, [r7, #4]
 80062f0:	fa01 f303 	lsl.w	r3, r1, r3
 80062f4:	431a      	orrs	r2, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	621a      	str	r2, [r3, #32]
}
 80062fa:	bf00      	nop
 80062fc:	371c      	adds	r7, #28
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
	...

08006308 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006308:	b480      	push	{r7}
 800630a:	b085      	sub	sp, #20
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006318:	2b01      	cmp	r3, #1
 800631a:	d101      	bne.n	8006320 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800631c:	2302      	movs	r3, #2
 800631e:	e06d      	b.n	80063fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2202      	movs	r2, #2
 800632c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a30      	ldr	r2, [pc, #192]	; (8006408 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d009      	beq.n	800635e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a2f      	ldr	r2, [pc, #188]	; (800640c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d004      	beq.n	800635e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a2d      	ldr	r2, [pc, #180]	; (8006410 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d108      	bne.n	8006370 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006364:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	4313      	orrs	r3, r2
 800636e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006376:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	4313      	orrs	r3, r2
 8006380:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a1e      	ldr	r2, [pc, #120]	; (8006408 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d01d      	beq.n	80063d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800639c:	d018      	beq.n	80063d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a1c      	ldr	r2, [pc, #112]	; (8006414 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d013      	beq.n	80063d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a1a      	ldr	r2, [pc, #104]	; (8006418 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d00e      	beq.n	80063d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a15      	ldr	r2, [pc, #84]	; (800640c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d009      	beq.n	80063d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a16      	ldr	r2, [pc, #88]	; (800641c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d004      	beq.n	80063d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a11      	ldr	r2, [pc, #68]	; (8006410 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d10c      	bne.n	80063ea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	68ba      	ldr	r2, [r7, #8]
 80063de:	4313      	orrs	r3, r2
 80063e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	68ba      	ldr	r2, [r7, #8]
 80063e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2201      	movs	r2, #1
 80063ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063fa:	2300      	movs	r3, #0
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3714      	adds	r7, #20
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr
 8006408:	40012c00 	.word	0x40012c00
 800640c:	40013400 	.word	0x40013400
 8006410:	40015000 	.word	0x40015000
 8006414:	40000400 	.word	0x40000400
 8006418:	40000800 	.word	0x40000800
 800641c:	40014000 	.word	0x40014000

08006420 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d101      	bne.n	8006432 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e040      	b.n	80064b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006436:	2b00      	cmp	r3, #0
 8006438:	d106      	bne.n	8006448 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f7fb fb02 	bl	8001a4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2224      	movs	r2, #36	; 0x24
 800644c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f022 0201 	bic.w	r2, r2, #1
 800645c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 fc5e 	bl	8006d20 <UART_SetConfig>
 8006464:	4603      	mov	r3, r0
 8006466:	2b01      	cmp	r3, #1
 8006468:	d101      	bne.n	800646e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e022      	b.n	80064b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006472:	2b00      	cmp	r3, #0
 8006474:	d002      	beq.n	800647c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 fe26 	bl	80070c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	685a      	ldr	r2, [r3, #4]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800648a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	689a      	ldr	r2, [r3, #8]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800649a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f042 0201 	orr.w	r2, r2, #1
 80064aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 fead 	bl	800720c <UART_CheckIdleState>
 80064b2:	4603      	mov	r3, r0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3708      	adds	r7, #8
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b08a      	sub	sp, #40	; 0x28
 80064c0:	af02      	add	r7, sp, #8
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	603b      	str	r3, [r7, #0]
 80064c8:	4613      	mov	r3, r2
 80064ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064d0:	2b20      	cmp	r3, #32
 80064d2:	d178      	bne.n	80065c6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d002      	beq.n	80064e0 <HAL_UART_Transmit+0x24>
 80064da:	88fb      	ldrh	r3, [r7, #6]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d101      	bne.n	80064e4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e071      	b.n	80065c8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2221      	movs	r2, #33	; 0x21
 80064f0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064f2:	f7fb fcd9 	bl	8001ea8 <HAL_GetTick>
 80064f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	88fa      	ldrh	r2, [r7, #6]
 80064fc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	88fa      	ldrh	r2, [r7, #6]
 8006504:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006510:	d108      	bne.n	8006524 <HAL_UART_Transmit+0x68>
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d104      	bne.n	8006524 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800651a:	2300      	movs	r3, #0
 800651c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	61bb      	str	r3, [r7, #24]
 8006522:	e003      	b.n	800652c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006528:	2300      	movs	r3, #0
 800652a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800652c:	e030      	b.n	8006590 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	2200      	movs	r2, #0
 8006536:	2180      	movs	r1, #128	; 0x80
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f000 ff0f 	bl	800735c <UART_WaitOnFlagUntilTimeout>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d004      	beq.n	800654e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2220      	movs	r2, #32
 8006548:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800654a:	2303      	movs	r3, #3
 800654c:	e03c      	b.n	80065c8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d10b      	bne.n	800656c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	881a      	ldrh	r2, [r3, #0]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006560:	b292      	uxth	r2, r2
 8006562:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	3302      	adds	r3, #2
 8006568:	61bb      	str	r3, [r7, #24]
 800656a:	e008      	b.n	800657e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	781a      	ldrb	r2, [r3, #0]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	b292      	uxth	r2, r2
 8006576:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	3301      	adds	r3, #1
 800657c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006584:	b29b      	uxth	r3, r3
 8006586:	3b01      	subs	r3, #1
 8006588:	b29a      	uxth	r2, r3
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006596:	b29b      	uxth	r3, r3
 8006598:	2b00      	cmp	r3, #0
 800659a:	d1c8      	bne.n	800652e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	9300      	str	r3, [sp, #0]
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	2200      	movs	r2, #0
 80065a4:	2140      	movs	r1, #64	; 0x40
 80065a6:	68f8      	ldr	r0, [r7, #12]
 80065a8:	f000 fed8 	bl	800735c <UART_WaitOnFlagUntilTimeout>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d004      	beq.n	80065bc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2220      	movs	r2, #32
 80065b6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80065b8:	2303      	movs	r3, #3
 80065ba:	e005      	b.n	80065c8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2220      	movs	r2, #32
 80065c0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80065c2:	2300      	movs	r3, #0
 80065c4:	e000      	b.n	80065c8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80065c6:	2302      	movs	r3, #2
  }
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3720      	adds	r7, #32
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b08b      	sub	sp, #44	; 0x2c
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	4613      	mov	r3, r2
 80065dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065e2:	2b20      	cmp	r3, #32
 80065e4:	d147      	bne.n	8006676 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d002      	beq.n	80065f2 <HAL_UART_Transmit_IT+0x22>
 80065ec:	88fb      	ldrh	r3, [r7, #6]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d101      	bne.n	80065f6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e040      	b.n	8006678 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	68ba      	ldr	r2, [r7, #8]
 80065fa:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	88fa      	ldrh	r2, [r7, #6]
 8006600:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	88fa      	ldrh	r2, [r7, #6]
 8006608:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2200      	movs	r2, #0
 8006610:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2200      	movs	r2, #0
 8006616:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2221      	movs	r2, #33	; 0x21
 800661e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006628:	d107      	bne.n	800663a <HAL_UART_Transmit_IT+0x6a>
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d103      	bne.n	800663a <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	4a13      	ldr	r2, [pc, #76]	; (8006684 <HAL_UART_Transmit_IT+0xb4>)
 8006636:	66da      	str	r2, [r3, #108]	; 0x6c
 8006638:	e002      	b.n	8006640 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	4a12      	ldr	r2, [pc, #72]	; (8006688 <HAL_UART_Transmit_IT+0xb8>)
 800663e:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	e853 3f00 	ldrex	r3, [r3]
 800664c:	613b      	str	r3, [r7, #16]
   return(result);
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006654:	627b      	str	r3, [r7, #36]	; 0x24
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	461a      	mov	r2, r3
 800665c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665e:	623b      	str	r3, [r7, #32]
 8006660:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006662:	69f9      	ldr	r1, [r7, #28]
 8006664:	6a3a      	ldr	r2, [r7, #32]
 8006666:	e841 2300 	strex	r3, r2, [r1]
 800666a:	61bb      	str	r3, [r7, #24]
   return(result);
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1e6      	bne.n	8006640 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8006672:	2300      	movs	r3, #0
 8006674:	e000      	b.n	8006678 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8006676:	2302      	movs	r3, #2
  }
}
 8006678:	4618      	mov	r0, r3
 800667a:	372c      	adds	r7, #44	; 0x2c
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr
 8006684:	08007765 	.word	0x08007765
 8006688:	080076ad 	.word	0x080076ad

0800668c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b08a      	sub	sp, #40	; 0x28
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	4613      	mov	r3, r2
 8006698:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066a0:	2b20      	cmp	r3, #32
 80066a2:	d132      	bne.n	800670a <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d002      	beq.n	80066b0 <HAL_UART_Receive_IT+0x24>
 80066aa:	88fb      	ldrh	r3, [r7, #6]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d101      	bne.n	80066b4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	e02b      	b.n	800670c <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2200      	movs	r2, #0
 80066b8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d018      	beq.n	80066fa <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	e853 3f00 	ldrex	r3, [r3]
 80066d4:	613b      	str	r3, [r7, #16]
   return(result);
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80066dc:	627b      	str	r3, [r7, #36]	; 0x24
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	461a      	mov	r2, r3
 80066e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e6:	623b      	str	r3, [r7, #32]
 80066e8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ea:	69f9      	ldr	r1, [r7, #28]
 80066ec:	6a3a      	ldr	r2, [r7, #32]
 80066ee:	e841 2300 	strex	r3, r2, [r1]
 80066f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1e6      	bne.n	80066c8 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80066fa:	88fb      	ldrh	r3, [r7, #6]
 80066fc:	461a      	mov	r2, r3
 80066fe:	68b9      	ldr	r1, [r7, #8]
 8006700:	68f8      	ldr	r0, [r7, #12]
 8006702:	f000 fe93 	bl	800742c <UART_Start_Receive_IT>
 8006706:	4603      	mov	r3, r0
 8006708:	e000      	b.n	800670c <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800670a:	2302      	movs	r3, #2
  }
}
 800670c:	4618      	mov	r0, r3
 800670e:	3728      	adds	r7, #40	; 0x28
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b0ba      	sub	sp, #232	; 0xe8
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	69db      	ldr	r3, [r3, #28]
 8006722:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800673a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800673e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006742:	4013      	ands	r3, r2
 8006744:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006748:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800674c:	2b00      	cmp	r3, #0
 800674e:	d115      	bne.n	800677c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006754:	f003 0320 	and.w	r3, r3, #32
 8006758:	2b00      	cmp	r3, #0
 800675a:	d00f      	beq.n	800677c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800675c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006760:	f003 0320 	and.w	r3, r3, #32
 8006764:	2b00      	cmp	r3, #0
 8006766:	d009      	beq.n	800677c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800676c:	2b00      	cmp	r3, #0
 800676e:	f000 82ab 	beq.w	8006cc8 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	4798      	blx	r3
      }
      return;
 800677a:	e2a5      	b.n	8006cc8 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800677c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006780:	2b00      	cmp	r3, #0
 8006782:	f000 8117 	beq.w	80069b4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006786:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800678a:	f003 0301 	and.w	r3, r3, #1
 800678e:	2b00      	cmp	r3, #0
 8006790:	d106      	bne.n	80067a0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006792:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006796:	4b85      	ldr	r3, [pc, #532]	; (80069ac <HAL_UART_IRQHandler+0x298>)
 8006798:	4013      	ands	r3, r2
 800679a:	2b00      	cmp	r3, #0
 800679c:	f000 810a 	beq.w	80069b4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80067a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067a4:	f003 0301 	and.w	r3, r3, #1
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d011      	beq.n	80067d0 <HAL_UART_IRQHandler+0xbc>
 80067ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d00b      	beq.n	80067d0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2201      	movs	r2, #1
 80067be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067c6:	f043 0201 	orr.w	r2, r3, #1
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80067d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067d4:	f003 0302 	and.w	r3, r3, #2
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d011      	beq.n	8006800 <HAL_UART_IRQHandler+0xec>
 80067dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067e0:	f003 0301 	and.w	r3, r3, #1
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d00b      	beq.n	8006800 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2202      	movs	r2, #2
 80067ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067f6:	f043 0204 	orr.w	r2, r3, #4
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006804:	f003 0304 	and.w	r3, r3, #4
 8006808:	2b00      	cmp	r3, #0
 800680a:	d011      	beq.n	8006830 <HAL_UART_IRQHandler+0x11c>
 800680c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006810:	f003 0301 	and.w	r3, r3, #1
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00b      	beq.n	8006830 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2204      	movs	r2, #4
 800681e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006826:	f043 0202 	orr.w	r2, r3, #2
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006834:	f003 0308 	and.w	r3, r3, #8
 8006838:	2b00      	cmp	r3, #0
 800683a:	d017      	beq.n	800686c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800683c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006840:	f003 0320 	and.w	r3, r3, #32
 8006844:	2b00      	cmp	r3, #0
 8006846:	d105      	bne.n	8006854 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006848:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800684c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006850:	2b00      	cmp	r3, #0
 8006852:	d00b      	beq.n	800686c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2208      	movs	r2, #8
 800685a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006862:	f043 0208 	orr.w	r2, r3, #8
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800686c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006870:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006874:	2b00      	cmp	r3, #0
 8006876:	d012      	beq.n	800689e <HAL_UART_IRQHandler+0x18a>
 8006878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800687c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006880:	2b00      	cmp	r3, #0
 8006882:	d00c      	beq.n	800689e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800688c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006894:	f043 0220 	orr.w	r2, r3, #32
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f000 8211 	beq.w	8006ccc <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80068aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068ae:	f003 0320 	and.w	r3, r3, #32
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00d      	beq.n	80068d2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80068b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068ba:	f003 0320 	and.w	r3, r3, #32
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d007      	beq.n	80068d2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d003      	beq.n	80068d2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068e6:	2b40      	cmp	r3, #64	; 0x40
 80068e8:	d005      	beq.n	80068f6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80068ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d04f      	beq.n	8006996 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 fe5e 	bl	80075b8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006906:	2b40      	cmp	r3, #64	; 0x40
 8006908:	d141      	bne.n	800698e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	3308      	adds	r3, #8
 8006910:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006914:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006918:	e853 3f00 	ldrex	r3, [r3]
 800691c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006920:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006924:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006928:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	3308      	adds	r3, #8
 8006932:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006936:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800693a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006942:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006946:	e841 2300 	strex	r3, r2, [r1]
 800694a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800694e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1d9      	bne.n	800690a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800695a:	2b00      	cmp	r3, #0
 800695c:	d013      	beq.n	8006986 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006962:	4a13      	ldr	r2, [pc, #76]	; (80069b0 <HAL_UART_IRQHandler+0x29c>)
 8006964:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800696a:	4618      	mov	r0, r3
 800696c:	f7fc fcf4 	bl	8003358 <HAL_DMA_Abort_IT>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d017      	beq.n	80069a6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800697a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006980:	4610      	mov	r0, r2
 8006982:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006984:	e00f      	b.n	80069a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 f9b4 	bl	8006cf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800698c:	e00b      	b.n	80069a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 f9b0 	bl	8006cf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006994:	e007      	b.n	80069a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 f9ac 	bl	8006cf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80069a4:	e192      	b.n	8006ccc <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069a6:	bf00      	nop
    return;
 80069a8:	e190      	b.n	8006ccc <HAL_UART_IRQHandler+0x5b8>
 80069aa:	bf00      	nop
 80069ac:	04000120 	.word	0x04000120
 80069b0:	08007681 	.word	0x08007681

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	f040 814b 	bne.w	8006c54 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80069be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069c2:	f003 0310 	and.w	r3, r3, #16
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	f000 8144 	beq.w	8006c54 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80069cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069d0:	f003 0310 	and.w	r3, r3, #16
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	f000 813d 	beq.w	8006c54 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	2210      	movs	r2, #16
 80069e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ec:	2b40      	cmp	r3, #64	; 0x40
 80069ee:	f040 80b5 	bne.w	8006b5c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80069fe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	f000 8164 	beq.w	8006cd0 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006a0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a12:	429a      	cmp	r2, r3
 8006a14:	f080 815c 	bcs.w	8006cd0 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a1e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a26:	699b      	ldr	r3, [r3, #24]
 8006a28:	2b20      	cmp	r3, #32
 8006a2a:	f000 8086 	beq.w	8006b3a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006a3a:	e853 3f00 	ldrex	r3, [r3]
 8006a3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006a42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a4a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	461a      	mov	r2, r3
 8006a54:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006a5c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a60:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006a64:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006a68:	e841 2300 	strex	r3, r2, [r1]
 8006a6c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006a70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d1da      	bne.n	8006a2e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	3308      	adds	r3, #8
 8006a7e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a82:	e853 3f00 	ldrex	r3, [r3]
 8006a86:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006a88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a8a:	f023 0301 	bic.w	r3, r3, #1
 8006a8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	3308      	adds	r3, #8
 8006a98:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006a9c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006aa0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006aa4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006aa8:	e841 2300 	strex	r3, r2, [r1]
 8006aac:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006aae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d1e1      	bne.n	8006a78 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	3308      	adds	r3, #8
 8006aba:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006abc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006abe:	e853 3f00 	ldrex	r3, [r3]
 8006ac2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006ac4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ac6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006aca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	3308      	adds	r3, #8
 8006ad4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006ad8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006ada:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006adc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006ade:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006ae0:	e841 2300 	strex	r3, r2, [r1]
 8006ae4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006ae6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1e3      	bne.n	8006ab4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2220      	movs	r2, #32
 8006af0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b02:	e853 3f00 	ldrex	r3, [r3]
 8006b06:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b0a:	f023 0310 	bic.w	r3, r3, #16
 8006b0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	461a      	mov	r2, r3
 8006b18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b1c:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b1e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b24:	e841 2300 	strex	r3, r2, [r1]
 8006b28:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006b2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d1e4      	bne.n	8006afa <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b34:	4618      	mov	r0, r3
 8006b36:	f7fc fbd6 	bl	80032e6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2202      	movs	r2, #2
 8006b3e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	1ad3      	subs	r3, r2, r3
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	4619      	mov	r1, r3
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 f8d7 	bl	8006d08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b5a:	e0b9      	b.n	8006cd0 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	1ad3      	subs	r3, r2, r3
 8006b6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	f000 80ab 	beq.w	8006cd4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8006b7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	f000 80a6 	beq.w	8006cd4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b90:	e853 3f00 	ldrex	r3, [r3]
 8006b94:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006baa:	647b      	str	r3, [r7, #68]	; 0x44
 8006bac:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006bb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bb2:	e841 2300 	strex	r3, r2, [r1]
 8006bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1e4      	bne.n	8006b88 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	3308      	adds	r3, #8
 8006bc4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc8:	e853 3f00 	ldrex	r3, [r3]
 8006bcc:	623b      	str	r3, [r7, #32]
   return(result);
 8006bce:	6a3b      	ldr	r3, [r7, #32]
 8006bd0:	f023 0301 	bic.w	r3, r3, #1
 8006bd4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	3308      	adds	r3, #8
 8006bde:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006be2:	633a      	str	r2, [r7, #48]	; 0x30
 8006be4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006be8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bea:	e841 2300 	strex	r3, r2, [r1]
 8006bee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d1e3      	bne.n	8006bbe <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2220      	movs	r2, #32
 8006bfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	e853 3f00 	ldrex	r3, [r3]
 8006c16:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f023 0310 	bic.w	r3, r3, #16
 8006c1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	461a      	mov	r2, r3
 8006c28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006c2c:	61fb      	str	r3, [r7, #28]
 8006c2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c30:	69b9      	ldr	r1, [r7, #24]
 8006c32:	69fa      	ldr	r2, [r7, #28]
 8006c34:	e841 2300 	strex	r3, r2, [r1]
 8006c38:	617b      	str	r3, [r7, #20]
   return(result);
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d1e4      	bne.n	8006c0a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2202      	movs	r2, #2
 8006c44:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c46:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 f85b 	bl	8006d08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006c52:	e03f      	b.n	8006cd4 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006c54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00e      	beq.n	8006c7e <HAL_UART_IRQHandler+0x56a>
 8006c60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d008      	beq.n	8006c7e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006c74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 ffa6 	bl	8007bc8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c7c:	e02d      	b.n	8006cda <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00e      	beq.n	8006ca8 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006c8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d008      	beq.n	8006ca8 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d01c      	beq.n	8006cd8 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	4798      	blx	r3
    }
    return;
 8006ca6:	e017      	b.n	8006cd8 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d012      	beq.n	8006cda <HAL_UART_IRQHandler+0x5c6>
 8006cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d00c      	beq.n	8006cda <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 fdaf 	bl	8007824 <UART_EndTransmit_IT>
    return;
 8006cc6:	e008      	b.n	8006cda <HAL_UART_IRQHandler+0x5c6>
      return;
 8006cc8:	bf00      	nop
 8006cca:	e006      	b.n	8006cda <HAL_UART_IRQHandler+0x5c6>
    return;
 8006ccc:	bf00      	nop
 8006cce:	e004      	b.n	8006cda <HAL_UART_IRQHandler+0x5c6>
      return;
 8006cd0:	bf00      	nop
 8006cd2:	e002      	b.n	8006cda <HAL_UART_IRQHandler+0x5c6>
      return;
 8006cd4:	bf00      	nop
 8006cd6:	e000      	b.n	8006cda <HAL_UART_IRQHandler+0x5c6>
    return;
 8006cd8:	bf00      	nop
  }

}
 8006cda:	37e8      	adds	r7, #232	; 0xe8
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006ce8:	bf00      	nop
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006cfc:	bf00      	nop
 8006cfe:	370c      	adds	r7, #12
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr

08006d08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	460b      	mov	r3, r1
 8006d12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d14:	bf00      	nop
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b088      	sub	sp, #32
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	689a      	ldr	r2, [r3, #8]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	691b      	ldr	r3, [r3, #16]
 8006d34:	431a      	orrs	r2, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	695b      	ldr	r3, [r3, #20]
 8006d3a:	431a      	orrs	r2, r3
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	69db      	ldr	r3, [r3, #28]
 8006d40:	4313      	orrs	r3, r2
 8006d42:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	4b92      	ldr	r3, [pc, #584]	; (8006f94 <UART_SetConfig+0x274>)
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	6812      	ldr	r2, [r2, #0]
 8006d52:	6979      	ldr	r1, [r7, #20]
 8006d54:	430b      	orrs	r3, r1
 8006d56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	68da      	ldr	r2, [r3, #12]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	430a      	orrs	r2, r1
 8006d6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	699b      	ldr	r3, [r3, #24]
 8006d72:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6a1b      	ldr	r3, [r3, #32]
 8006d78:	697a      	ldr	r2, [r7, #20]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	697a      	ldr	r2, [r7, #20]
 8006d8e:	430a      	orrs	r2, r1
 8006d90:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a80      	ldr	r2, [pc, #512]	; (8006f98 <UART_SetConfig+0x278>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d120      	bne.n	8006dde <UART_SetConfig+0xbe>
 8006d9c:	4b7f      	ldr	r3, [pc, #508]	; (8006f9c <UART_SetConfig+0x27c>)
 8006d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da0:	f003 0303 	and.w	r3, r3, #3
 8006da4:	2b03      	cmp	r3, #3
 8006da6:	d817      	bhi.n	8006dd8 <UART_SetConfig+0xb8>
 8006da8:	a201      	add	r2, pc, #4	; (adr r2, 8006db0 <UART_SetConfig+0x90>)
 8006daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dae:	bf00      	nop
 8006db0:	08006dc1 	.word	0x08006dc1
 8006db4:	08006dcd 	.word	0x08006dcd
 8006db8:	08006dd3 	.word	0x08006dd3
 8006dbc:	08006dc7 	.word	0x08006dc7
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	77fb      	strb	r3, [r7, #31]
 8006dc4:	e0b5      	b.n	8006f32 <UART_SetConfig+0x212>
 8006dc6:	2302      	movs	r3, #2
 8006dc8:	77fb      	strb	r3, [r7, #31]
 8006dca:	e0b2      	b.n	8006f32 <UART_SetConfig+0x212>
 8006dcc:	2304      	movs	r3, #4
 8006dce:	77fb      	strb	r3, [r7, #31]
 8006dd0:	e0af      	b.n	8006f32 <UART_SetConfig+0x212>
 8006dd2:	2308      	movs	r3, #8
 8006dd4:	77fb      	strb	r3, [r7, #31]
 8006dd6:	e0ac      	b.n	8006f32 <UART_SetConfig+0x212>
 8006dd8:	2310      	movs	r3, #16
 8006dda:	77fb      	strb	r3, [r7, #31]
 8006ddc:	e0a9      	b.n	8006f32 <UART_SetConfig+0x212>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a6f      	ldr	r2, [pc, #444]	; (8006fa0 <UART_SetConfig+0x280>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d124      	bne.n	8006e32 <UART_SetConfig+0x112>
 8006de8:	4b6c      	ldr	r3, [pc, #432]	; (8006f9c <UART_SetConfig+0x27c>)
 8006dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006df0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006df4:	d011      	beq.n	8006e1a <UART_SetConfig+0xfa>
 8006df6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006dfa:	d817      	bhi.n	8006e2c <UART_SetConfig+0x10c>
 8006dfc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e00:	d011      	beq.n	8006e26 <UART_SetConfig+0x106>
 8006e02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e06:	d811      	bhi.n	8006e2c <UART_SetConfig+0x10c>
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d003      	beq.n	8006e14 <UART_SetConfig+0xf4>
 8006e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e10:	d006      	beq.n	8006e20 <UART_SetConfig+0x100>
 8006e12:	e00b      	b.n	8006e2c <UART_SetConfig+0x10c>
 8006e14:	2300      	movs	r3, #0
 8006e16:	77fb      	strb	r3, [r7, #31]
 8006e18:	e08b      	b.n	8006f32 <UART_SetConfig+0x212>
 8006e1a:	2302      	movs	r3, #2
 8006e1c:	77fb      	strb	r3, [r7, #31]
 8006e1e:	e088      	b.n	8006f32 <UART_SetConfig+0x212>
 8006e20:	2304      	movs	r3, #4
 8006e22:	77fb      	strb	r3, [r7, #31]
 8006e24:	e085      	b.n	8006f32 <UART_SetConfig+0x212>
 8006e26:	2308      	movs	r3, #8
 8006e28:	77fb      	strb	r3, [r7, #31]
 8006e2a:	e082      	b.n	8006f32 <UART_SetConfig+0x212>
 8006e2c:	2310      	movs	r3, #16
 8006e2e:	77fb      	strb	r3, [r7, #31]
 8006e30:	e07f      	b.n	8006f32 <UART_SetConfig+0x212>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a5b      	ldr	r2, [pc, #364]	; (8006fa4 <UART_SetConfig+0x284>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d124      	bne.n	8006e86 <UART_SetConfig+0x166>
 8006e3c:	4b57      	ldr	r3, [pc, #348]	; (8006f9c <UART_SetConfig+0x27c>)
 8006e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e40:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006e44:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006e48:	d011      	beq.n	8006e6e <UART_SetConfig+0x14e>
 8006e4a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006e4e:	d817      	bhi.n	8006e80 <UART_SetConfig+0x160>
 8006e50:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006e54:	d011      	beq.n	8006e7a <UART_SetConfig+0x15a>
 8006e56:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006e5a:	d811      	bhi.n	8006e80 <UART_SetConfig+0x160>
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d003      	beq.n	8006e68 <UART_SetConfig+0x148>
 8006e60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006e64:	d006      	beq.n	8006e74 <UART_SetConfig+0x154>
 8006e66:	e00b      	b.n	8006e80 <UART_SetConfig+0x160>
 8006e68:	2300      	movs	r3, #0
 8006e6a:	77fb      	strb	r3, [r7, #31]
 8006e6c:	e061      	b.n	8006f32 <UART_SetConfig+0x212>
 8006e6e:	2302      	movs	r3, #2
 8006e70:	77fb      	strb	r3, [r7, #31]
 8006e72:	e05e      	b.n	8006f32 <UART_SetConfig+0x212>
 8006e74:	2304      	movs	r3, #4
 8006e76:	77fb      	strb	r3, [r7, #31]
 8006e78:	e05b      	b.n	8006f32 <UART_SetConfig+0x212>
 8006e7a:	2308      	movs	r3, #8
 8006e7c:	77fb      	strb	r3, [r7, #31]
 8006e7e:	e058      	b.n	8006f32 <UART_SetConfig+0x212>
 8006e80:	2310      	movs	r3, #16
 8006e82:	77fb      	strb	r3, [r7, #31]
 8006e84:	e055      	b.n	8006f32 <UART_SetConfig+0x212>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a47      	ldr	r2, [pc, #284]	; (8006fa8 <UART_SetConfig+0x288>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d124      	bne.n	8006eda <UART_SetConfig+0x1ba>
 8006e90:	4b42      	ldr	r3, [pc, #264]	; (8006f9c <UART_SetConfig+0x27c>)
 8006e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e94:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006e98:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e9c:	d011      	beq.n	8006ec2 <UART_SetConfig+0x1a2>
 8006e9e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006ea2:	d817      	bhi.n	8006ed4 <UART_SetConfig+0x1b4>
 8006ea4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ea8:	d011      	beq.n	8006ece <UART_SetConfig+0x1ae>
 8006eaa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006eae:	d811      	bhi.n	8006ed4 <UART_SetConfig+0x1b4>
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d003      	beq.n	8006ebc <UART_SetConfig+0x19c>
 8006eb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006eb8:	d006      	beq.n	8006ec8 <UART_SetConfig+0x1a8>
 8006eba:	e00b      	b.n	8006ed4 <UART_SetConfig+0x1b4>
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	77fb      	strb	r3, [r7, #31]
 8006ec0:	e037      	b.n	8006f32 <UART_SetConfig+0x212>
 8006ec2:	2302      	movs	r3, #2
 8006ec4:	77fb      	strb	r3, [r7, #31]
 8006ec6:	e034      	b.n	8006f32 <UART_SetConfig+0x212>
 8006ec8:	2304      	movs	r3, #4
 8006eca:	77fb      	strb	r3, [r7, #31]
 8006ecc:	e031      	b.n	8006f32 <UART_SetConfig+0x212>
 8006ece:	2308      	movs	r3, #8
 8006ed0:	77fb      	strb	r3, [r7, #31]
 8006ed2:	e02e      	b.n	8006f32 <UART_SetConfig+0x212>
 8006ed4:	2310      	movs	r3, #16
 8006ed6:	77fb      	strb	r3, [r7, #31]
 8006ed8:	e02b      	b.n	8006f32 <UART_SetConfig+0x212>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a33      	ldr	r2, [pc, #204]	; (8006fac <UART_SetConfig+0x28c>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d124      	bne.n	8006f2e <UART_SetConfig+0x20e>
 8006ee4:	4b2d      	ldr	r3, [pc, #180]	; (8006f9c <UART_SetConfig+0x27c>)
 8006ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ee8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006eec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006ef0:	d011      	beq.n	8006f16 <UART_SetConfig+0x1f6>
 8006ef2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006ef6:	d817      	bhi.n	8006f28 <UART_SetConfig+0x208>
 8006ef8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006efc:	d011      	beq.n	8006f22 <UART_SetConfig+0x202>
 8006efe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f02:	d811      	bhi.n	8006f28 <UART_SetConfig+0x208>
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d003      	beq.n	8006f10 <UART_SetConfig+0x1f0>
 8006f08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f0c:	d006      	beq.n	8006f1c <UART_SetConfig+0x1fc>
 8006f0e:	e00b      	b.n	8006f28 <UART_SetConfig+0x208>
 8006f10:	2300      	movs	r3, #0
 8006f12:	77fb      	strb	r3, [r7, #31]
 8006f14:	e00d      	b.n	8006f32 <UART_SetConfig+0x212>
 8006f16:	2302      	movs	r3, #2
 8006f18:	77fb      	strb	r3, [r7, #31]
 8006f1a:	e00a      	b.n	8006f32 <UART_SetConfig+0x212>
 8006f1c:	2304      	movs	r3, #4
 8006f1e:	77fb      	strb	r3, [r7, #31]
 8006f20:	e007      	b.n	8006f32 <UART_SetConfig+0x212>
 8006f22:	2308      	movs	r3, #8
 8006f24:	77fb      	strb	r3, [r7, #31]
 8006f26:	e004      	b.n	8006f32 <UART_SetConfig+0x212>
 8006f28:	2310      	movs	r3, #16
 8006f2a:	77fb      	strb	r3, [r7, #31]
 8006f2c:	e001      	b.n	8006f32 <UART_SetConfig+0x212>
 8006f2e:	2310      	movs	r3, #16
 8006f30:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	69db      	ldr	r3, [r3, #28]
 8006f36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f3a:	d16b      	bne.n	8007014 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8006f3c:	7ffb      	ldrb	r3, [r7, #31]
 8006f3e:	2b08      	cmp	r3, #8
 8006f40:	d838      	bhi.n	8006fb4 <UART_SetConfig+0x294>
 8006f42:	a201      	add	r2, pc, #4	; (adr r2, 8006f48 <UART_SetConfig+0x228>)
 8006f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f48:	08006f6d 	.word	0x08006f6d
 8006f4c:	08006f75 	.word	0x08006f75
 8006f50:	08006f7d 	.word	0x08006f7d
 8006f54:	08006fb5 	.word	0x08006fb5
 8006f58:	08006f83 	.word	0x08006f83
 8006f5c:	08006fb5 	.word	0x08006fb5
 8006f60:	08006fb5 	.word	0x08006fb5
 8006f64:	08006fb5 	.word	0x08006fb5
 8006f68:	08006f8b 	.word	0x08006f8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f6c:	f7fd ff64 	bl	8004e38 <HAL_RCC_GetPCLK1Freq>
 8006f70:	61b8      	str	r0, [r7, #24]
        break;
 8006f72:	e024      	b.n	8006fbe <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f74:	f7fd ff82 	bl	8004e7c <HAL_RCC_GetPCLK2Freq>
 8006f78:	61b8      	str	r0, [r7, #24]
        break;
 8006f7a:	e020      	b.n	8006fbe <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f7c:	4b0c      	ldr	r3, [pc, #48]	; (8006fb0 <UART_SetConfig+0x290>)
 8006f7e:	61bb      	str	r3, [r7, #24]
        break;
 8006f80:	e01d      	b.n	8006fbe <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f82:	f7fd fee3 	bl	8004d4c <HAL_RCC_GetSysClockFreq>
 8006f86:	61b8      	str	r0, [r7, #24]
        break;
 8006f88:	e019      	b.n	8006fbe <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f8e:	61bb      	str	r3, [r7, #24]
        break;
 8006f90:	e015      	b.n	8006fbe <UART_SetConfig+0x29e>
 8006f92:	bf00      	nop
 8006f94:	efff69f3 	.word	0xefff69f3
 8006f98:	40013800 	.word	0x40013800
 8006f9c:	40021000 	.word	0x40021000
 8006fa0:	40004400 	.word	0x40004400
 8006fa4:	40004800 	.word	0x40004800
 8006fa8:	40004c00 	.word	0x40004c00
 8006fac:	40005000 	.word	0x40005000
 8006fb0:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	77bb      	strb	r3, [r7, #30]
        break;
 8006fbc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d073      	beq.n	80070ac <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	005a      	lsls	r2, r3, #1
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	085b      	lsrs	r3, r3, #1
 8006fce:	441a      	add	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fd8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	2b0f      	cmp	r3, #15
 8006fde:	d916      	bls.n	800700e <UART_SetConfig+0x2ee>
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fe6:	d212      	bcs.n	800700e <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	f023 030f 	bic.w	r3, r3, #15
 8006ff0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	085b      	lsrs	r3, r3, #1
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	f003 0307 	and.w	r3, r3, #7
 8006ffc:	b29a      	uxth	r2, r3
 8006ffe:	89fb      	ldrh	r3, [r7, #14]
 8007000:	4313      	orrs	r3, r2
 8007002:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	89fa      	ldrh	r2, [r7, #14]
 800700a:	60da      	str	r2, [r3, #12]
 800700c:	e04e      	b.n	80070ac <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	77bb      	strb	r3, [r7, #30]
 8007012:	e04b      	b.n	80070ac <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007014:	7ffb      	ldrb	r3, [r7, #31]
 8007016:	2b08      	cmp	r3, #8
 8007018:	d827      	bhi.n	800706a <UART_SetConfig+0x34a>
 800701a:	a201      	add	r2, pc, #4	; (adr r2, 8007020 <UART_SetConfig+0x300>)
 800701c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007020:	08007045 	.word	0x08007045
 8007024:	0800704d 	.word	0x0800704d
 8007028:	08007055 	.word	0x08007055
 800702c:	0800706b 	.word	0x0800706b
 8007030:	0800705b 	.word	0x0800705b
 8007034:	0800706b 	.word	0x0800706b
 8007038:	0800706b 	.word	0x0800706b
 800703c:	0800706b 	.word	0x0800706b
 8007040:	08007063 	.word	0x08007063
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007044:	f7fd fef8 	bl	8004e38 <HAL_RCC_GetPCLK1Freq>
 8007048:	61b8      	str	r0, [r7, #24]
        break;
 800704a:	e013      	b.n	8007074 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800704c:	f7fd ff16 	bl	8004e7c <HAL_RCC_GetPCLK2Freq>
 8007050:	61b8      	str	r0, [r7, #24]
        break;
 8007052:	e00f      	b.n	8007074 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007054:	4b1b      	ldr	r3, [pc, #108]	; (80070c4 <UART_SetConfig+0x3a4>)
 8007056:	61bb      	str	r3, [r7, #24]
        break;
 8007058:	e00c      	b.n	8007074 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800705a:	f7fd fe77 	bl	8004d4c <HAL_RCC_GetSysClockFreq>
 800705e:	61b8      	str	r0, [r7, #24]
        break;
 8007060:	e008      	b.n	8007074 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007062:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007066:	61bb      	str	r3, [r7, #24]
        break;
 8007068:	e004      	b.n	8007074 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800706a:	2300      	movs	r3, #0
 800706c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	77bb      	strb	r3, [r7, #30]
        break;
 8007072:	bf00      	nop
    }

    if (pclk != 0U)
 8007074:	69bb      	ldr	r3, [r7, #24]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d018      	beq.n	80070ac <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	085a      	lsrs	r2, r3, #1
 8007080:	69bb      	ldr	r3, [r7, #24]
 8007082:	441a      	add	r2, r3
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	fbb2 f3f3 	udiv	r3, r2, r3
 800708c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	2b0f      	cmp	r3, #15
 8007092:	d909      	bls.n	80070a8 <UART_SetConfig+0x388>
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800709a:	d205      	bcs.n	80070a8 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	b29a      	uxth	r2, r3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	60da      	str	r2, [r3, #12]
 80070a6:	e001      	b.n	80070ac <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80070b8:	7fbb      	ldrb	r3, [r7, #30]
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3720      	adds	r7, #32
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	007a1200 	.word	0x007a1200

080070c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d4:	f003 0301 	and.w	r3, r3, #1
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d00a      	beq.n	80070f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	430a      	orrs	r2, r1
 80070f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f6:	f003 0302 	and.w	r3, r3, #2
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d00a      	beq.n	8007114 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	430a      	orrs	r2, r1
 8007112:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007118:	f003 0304 	and.w	r3, r3, #4
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00a      	beq.n	8007136 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	430a      	orrs	r2, r1
 8007134:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713a:	f003 0308 	and.w	r3, r3, #8
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00a      	beq.n	8007158 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	430a      	orrs	r2, r1
 8007156:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715c:	f003 0310 	and.w	r3, r3, #16
 8007160:	2b00      	cmp	r3, #0
 8007162:	d00a      	beq.n	800717a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	430a      	orrs	r2, r1
 8007178:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717e:	f003 0320 	and.w	r3, r3, #32
 8007182:	2b00      	cmp	r3, #0
 8007184:	d00a      	beq.n	800719c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	430a      	orrs	r2, r1
 800719a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d01a      	beq.n	80071de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	430a      	orrs	r2, r1
 80071bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071c6:	d10a      	bne.n	80071de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	430a      	orrs	r2, r1
 80071dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d00a      	beq.n	8007200 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	430a      	orrs	r2, r1
 80071fe:	605a      	str	r2, [r3, #4]
  }
}
 8007200:	bf00      	nop
 8007202:	370c      	adds	r7, #12
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b098      	sub	sp, #96	; 0x60
 8007210:	af02      	add	r7, sp, #8
 8007212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800721c:	f7fa fe44 	bl	8001ea8 <HAL_GetTick>
 8007220:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f003 0308 	and.w	r3, r3, #8
 800722c:	2b08      	cmp	r3, #8
 800722e:	d12e      	bne.n	800728e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007230:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007234:	9300      	str	r3, [sp, #0]
 8007236:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007238:	2200      	movs	r2, #0
 800723a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 f88c 	bl	800735c <UART_WaitOnFlagUntilTimeout>
 8007244:	4603      	mov	r3, r0
 8007246:	2b00      	cmp	r3, #0
 8007248:	d021      	beq.n	800728e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007252:	e853 3f00 	ldrex	r3, [r3]
 8007256:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800725a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800725e:	653b      	str	r3, [r7, #80]	; 0x50
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	461a      	mov	r2, r3
 8007266:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007268:	647b      	str	r3, [r7, #68]	; 0x44
 800726a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800726c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800726e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007270:	e841 2300 	strex	r3, r2, [r1]
 8007274:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007278:	2b00      	cmp	r3, #0
 800727a:	d1e6      	bne.n	800724a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2220      	movs	r2, #32
 8007280:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800728a:	2303      	movs	r3, #3
 800728c:	e062      	b.n	8007354 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f003 0304 	and.w	r3, r3, #4
 8007298:	2b04      	cmp	r3, #4
 800729a:	d149      	bne.n	8007330 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800729c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072a0:	9300      	str	r3, [sp, #0]
 80072a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072a4:	2200      	movs	r2, #0
 80072a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 f856 	bl	800735c <UART_WaitOnFlagUntilTimeout>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d03c      	beq.n	8007330 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072be:	e853 3f00 	ldrex	r3, [r3]
 80072c2:	623b      	str	r3, [r7, #32]
   return(result);
 80072c4:	6a3b      	ldr	r3, [r7, #32]
 80072c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	461a      	mov	r2, r3
 80072d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072d4:	633b      	str	r3, [r7, #48]	; 0x30
 80072d6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072dc:	e841 2300 	strex	r3, r2, [r1]
 80072e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80072e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d1e6      	bne.n	80072b6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	3308      	adds	r3, #8
 80072ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	e853 3f00 	ldrex	r3, [r3]
 80072f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f023 0301 	bic.w	r3, r3, #1
 80072fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	3308      	adds	r3, #8
 8007306:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007308:	61fa      	str	r2, [r7, #28]
 800730a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800730c:	69b9      	ldr	r1, [r7, #24]
 800730e:	69fa      	ldr	r2, [r7, #28]
 8007310:	e841 2300 	strex	r3, r2, [r1]
 8007314:	617b      	str	r3, [r7, #20]
   return(result);
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d1e5      	bne.n	80072e8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2220      	movs	r2, #32
 8007320:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800732c:	2303      	movs	r3, #3
 800732e:	e011      	b.n	8007354 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2220      	movs	r2, #32
 8007334:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2220      	movs	r2, #32
 800733a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007352:	2300      	movs	r3, #0
}
 8007354:	4618      	mov	r0, r3
 8007356:	3758      	adds	r7, #88	; 0x58
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b084      	sub	sp, #16
 8007360:	af00      	add	r7, sp, #0
 8007362:	60f8      	str	r0, [r7, #12]
 8007364:	60b9      	str	r1, [r7, #8]
 8007366:	603b      	str	r3, [r7, #0]
 8007368:	4613      	mov	r3, r2
 800736a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800736c:	e049      	b.n	8007402 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800736e:	69bb      	ldr	r3, [r7, #24]
 8007370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007374:	d045      	beq.n	8007402 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007376:	f7fa fd97 	bl	8001ea8 <HAL_GetTick>
 800737a:	4602      	mov	r2, r0
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	1ad3      	subs	r3, r2, r3
 8007380:	69ba      	ldr	r2, [r7, #24]
 8007382:	429a      	cmp	r2, r3
 8007384:	d302      	bcc.n	800738c <UART_WaitOnFlagUntilTimeout+0x30>
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d101      	bne.n	8007390 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800738c:	2303      	movs	r3, #3
 800738e:	e048      	b.n	8007422 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f003 0304 	and.w	r3, r3, #4
 800739a:	2b00      	cmp	r3, #0
 800739c:	d031      	beq.n	8007402 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	69db      	ldr	r3, [r3, #28]
 80073a4:	f003 0308 	and.w	r3, r3, #8
 80073a8:	2b08      	cmp	r3, #8
 80073aa:	d110      	bne.n	80073ce <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2208      	movs	r2, #8
 80073b2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80073b4:	68f8      	ldr	r0, [r7, #12]
 80073b6:	f000 f8ff 	bl	80075b8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2208      	movs	r2, #8
 80073be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	e029      	b.n	8007422 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	69db      	ldr	r3, [r3, #28]
 80073d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073dc:	d111      	bne.n	8007402 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80073e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80073e8:	68f8      	ldr	r0, [r7, #12]
 80073ea:	f000 f8e5 	bl	80075b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2220      	movs	r2, #32
 80073f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80073fe:	2303      	movs	r3, #3
 8007400:	e00f      	b.n	8007422 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	69da      	ldr	r2, [r3, #28]
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	4013      	ands	r3, r2
 800740c:	68ba      	ldr	r2, [r7, #8]
 800740e:	429a      	cmp	r2, r3
 8007410:	bf0c      	ite	eq
 8007412:	2301      	moveq	r3, #1
 8007414:	2300      	movne	r3, #0
 8007416:	b2db      	uxtb	r3, r3
 8007418:	461a      	mov	r2, r3
 800741a:	79fb      	ldrb	r3, [r7, #7]
 800741c:	429a      	cmp	r2, r3
 800741e:	d0a6      	beq.n	800736e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	3710      	adds	r7, #16
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
	...

0800742c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800742c:	b480      	push	{r7}
 800742e:	b097      	sub	sp, #92	; 0x5c
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	4613      	mov	r3, r2
 8007438:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	68ba      	ldr	r2, [r7, #8]
 800743e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	88fa      	ldrh	r2, [r7, #6]
 8007444:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	88fa      	ldrh	r2, [r7, #6]
 800744c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2200      	movs	r2, #0
 8007454:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800745e:	d10e      	bne.n	800747e <UART_Start_Receive_IT+0x52>
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	691b      	ldr	r3, [r3, #16]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d105      	bne.n	8007474 <UART_Start_Receive_IT+0x48>
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800746e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007472:	e02d      	b.n	80074d0 <UART_Start_Receive_IT+0xa4>
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	22ff      	movs	r2, #255	; 0xff
 8007478:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800747c:	e028      	b.n	80074d0 <UART_Start_Receive_IT+0xa4>
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d10d      	bne.n	80074a2 <UART_Start_Receive_IT+0x76>
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d104      	bne.n	8007498 <UART_Start_Receive_IT+0x6c>
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	22ff      	movs	r2, #255	; 0xff
 8007492:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007496:	e01b      	b.n	80074d0 <UART_Start_Receive_IT+0xa4>
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	227f      	movs	r2, #127	; 0x7f
 800749c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80074a0:	e016      	b.n	80074d0 <UART_Start_Receive_IT+0xa4>
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074aa:	d10d      	bne.n	80074c8 <UART_Start_Receive_IT+0x9c>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d104      	bne.n	80074be <UART_Start_Receive_IT+0x92>
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	227f      	movs	r2, #127	; 0x7f
 80074b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80074bc:	e008      	b.n	80074d0 <UART_Start_Receive_IT+0xa4>
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	223f      	movs	r2, #63	; 0x3f
 80074c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80074c6:	e003      	b.n	80074d0 <UART_Start_Receive_IT+0xa4>
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2222      	movs	r2, #34	; 0x22
 80074dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	3308      	adds	r3, #8
 80074e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074ea:	e853 3f00 	ldrex	r3, [r3]
 80074ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80074f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f2:	f043 0301 	orr.w	r3, r3, #1
 80074f6:	657b      	str	r3, [r7, #84]	; 0x54
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	3308      	adds	r3, #8
 80074fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007500:	64ba      	str	r2, [r7, #72]	; 0x48
 8007502:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007504:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007506:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007508:	e841 2300 	strex	r3, r2, [r1]
 800750c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800750e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007510:	2b00      	cmp	r3, #0
 8007512:	d1e5      	bne.n	80074e0 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800751c:	d107      	bne.n	800752e <UART_Start_Receive_IT+0x102>
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	691b      	ldr	r3, [r3, #16]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d103      	bne.n	800752e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	4a21      	ldr	r2, [pc, #132]	; (80075b0 <UART_Start_Receive_IT+0x184>)
 800752a:	669a      	str	r2, [r3, #104]	; 0x68
 800752c:	e002      	b.n	8007534 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	4a20      	ldr	r2, [pc, #128]	; (80075b4 <UART_Start_Receive_IT+0x188>)
 8007532:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	691b      	ldr	r3, [r3, #16]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d019      	beq.n	8007570 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007544:	e853 3f00 	ldrex	r3, [r3]
 8007548:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800754a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007550:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	461a      	mov	r2, r3
 8007558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800755a:	637b      	str	r3, [r7, #52]	; 0x34
 800755c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800755e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007560:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007562:	e841 2300 	strex	r3, r2, [r1]
 8007566:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800756a:	2b00      	cmp	r3, #0
 800756c:	d1e6      	bne.n	800753c <UART_Start_Receive_IT+0x110>
 800756e:	e018      	b.n	80075a2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	e853 3f00 	ldrex	r3, [r3]
 800757c:	613b      	str	r3, [r7, #16]
   return(result);
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	f043 0320 	orr.w	r3, r3, #32
 8007584:	653b      	str	r3, [r7, #80]	; 0x50
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	461a      	mov	r2, r3
 800758c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800758e:	623b      	str	r3, [r7, #32]
 8007590:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007592:	69f9      	ldr	r1, [r7, #28]
 8007594:	6a3a      	ldr	r2, [r7, #32]
 8007596:	e841 2300 	strex	r3, r2, [r1]
 800759a:	61bb      	str	r3, [r7, #24]
   return(result);
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d1e6      	bne.n	8007570 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80075a2:	2300      	movs	r3, #0
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	375c      	adds	r7, #92	; 0x5c
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr
 80075b0:	08007a21 	.word	0x08007a21
 80075b4:	08007879 	.word	0x08007879

080075b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b095      	sub	sp, #84	; 0x54
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075c8:	e853 3f00 	ldrex	r3, [r3]
 80075cc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80075ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	461a      	mov	r2, r3
 80075dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075de:	643b      	str	r3, [r7, #64]	; 0x40
 80075e0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80075e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80075e6:	e841 2300 	strex	r3, r2, [r1]
 80075ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80075ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d1e6      	bne.n	80075c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	3308      	adds	r3, #8
 80075f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fa:	6a3b      	ldr	r3, [r7, #32]
 80075fc:	e853 3f00 	ldrex	r3, [r3]
 8007600:	61fb      	str	r3, [r7, #28]
   return(result);
 8007602:	69fb      	ldr	r3, [r7, #28]
 8007604:	f023 0301 	bic.w	r3, r3, #1
 8007608:	64bb      	str	r3, [r7, #72]	; 0x48
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	3308      	adds	r3, #8
 8007610:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007612:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007614:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007616:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007618:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800761a:	e841 2300 	strex	r3, r2, [r1]
 800761e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007622:	2b00      	cmp	r3, #0
 8007624:	d1e5      	bne.n	80075f2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800762a:	2b01      	cmp	r3, #1
 800762c:	d118      	bne.n	8007660 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	e853 3f00 	ldrex	r3, [r3]
 800763a:	60bb      	str	r3, [r7, #8]
   return(result);
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	f023 0310 	bic.w	r3, r3, #16
 8007642:	647b      	str	r3, [r7, #68]	; 0x44
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	461a      	mov	r2, r3
 800764a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800764c:	61bb      	str	r3, [r7, #24]
 800764e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007650:	6979      	ldr	r1, [r7, #20]
 8007652:	69ba      	ldr	r2, [r7, #24]
 8007654:	e841 2300 	strex	r3, r2, [r1]
 8007658:	613b      	str	r3, [r7, #16]
   return(result);
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d1e6      	bne.n	800762e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2220      	movs	r2, #32
 8007664:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007674:	bf00      	nop
 8007676:	3754      	adds	r7, #84	; 0x54
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800768c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2200      	movs	r2, #0
 8007692:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2200      	movs	r2, #0
 800769a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800769e:	68f8      	ldr	r0, [r7, #12]
 80076a0:	f7ff fb28 	bl	8006cf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076a4:	bf00      	nop
 80076a6:	3710      	adds	r7, #16
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b08f      	sub	sp, #60	; 0x3c
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076b8:	2b21      	cmp	r3, #33	; 0x21
 80076ba:	d14d      	bne.n	8007758 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d132      	bne.n	800772e <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ce:	6a3b      	ldr	r3, [r7, #32]
 80076d0:	e853 3f00 	ldrex	r3, [r3]
 80076d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80076d6:	69fb      	ldr	r3, [r7, #28]
 80076d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076dc:	637b      	str	r3, [r7, #52]	; 0x34
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	461a      	mov	r2, r3
 80076e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076e8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076ee:	e841 2300 	strex	r3, r2, [r1]
 80076f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d1e6      	bne.n	80076c8 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	e853 3f00 	ldrex	r3, [r3]
 8007706:	60bb      	str	r3, [r7, #8]
   return(result);
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800770e:	633b      	str	r3, [r7, #48]	; 0x30
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	461a      	mov	r2, r3
 8007716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007718:	61bb      	str	r3, [r7, #24]
 800771a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771c:	6979      	ldr	r1, [r7, #20]
 800771e:	69ba      	ldr	r2, [r7, #24]
 8007720:	e841 2300 	strex	r3, r2, [r1]
 8007724:	613b      	str	r3, [r7, #16]
   return(result);
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d1e6      	bne.n	80076fa <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800772c:	e014      	b.n	8007758 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007732:	781a      	ldrb	r2, [r3, #0]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	b292      	uxth	r2, r2
 800773a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007740:	1c5a      	adds	r2, r3, #1
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800774c:	b29b      	uxth	r3, r3
 800774e:	3b01      	subs	r3, #1
 8007750:	b29a      	uxth	r2, r3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007758:	bf00      	nop
 800775a:	373c      	adds	r7, #60	; 0x3c
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007764:	b480      	push	{r7}
 8007766:	b091      	sub	sp, #68	; 0x44
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007770:	2b21      	cmp	r3, #33	; 0x21
 8007772:	d151      	bne.n	8007818 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800777a:	b29b      	uxth	r3, r3
 800777c:	2b00      	cmp	r3, #0
 800777e:	d132      	bne.n	80077e6 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007788:	e853 3f00 	ldrex	r3, [r3]
 800778c:	623b      	str	r3, [r7, #32]
   return(result);
 800778e:	6a3b      	ldr	r3, [r7, #32]
 8007790:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007794:	63bb      	str	r3, [r7, #56]	; 0x38
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	461a      	mov	r2, r3
 800779c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800779e:	633b      	str	r3, [r7, #48]	; 0x30
 80077a0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80077a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077a6:	e841 2300 	strex	r3, r2, [r1]
 80077aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80077ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d1e6      	bne.n	8007780 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	e853 3f00 	ldrex	r3, [r3]
 80077be:	60fb      	str	r3, [r7, #12]
   return(result);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077c6:	637b      	str	r3, [r7, #52]	; 0x34
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	461a      	mov	r2, r3
 80077ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077d0:	61fb      	str	r3, [r7, #28]
 80077d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d4:	69b9      	ldr	r1, [r7, #24]
 80077d6:	69fa      	ldr	r2, [r7, #28]
 80077d8:	e841 2300 	strex	r3, r2, [r1]
 80077dc:	617b      	str	r3, [r7, #20]
   return(result);
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d1e6      	bne.n	80077b2 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80077e4:	e018      	b.n	8007818 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077ea:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80077ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077ee:	881a      	ldrh	r2, [r3, #0]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80077f8:	b292      	uxth	r2, r2
 80077fa:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007800:	1c9a      	adds	r2, r3, #2
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800780c:	b29b      	uxth	r3, r3
 800780e:	3b01      	subs	r3, #1
 8007810:	b29a      	uxth	r2, r3
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007818:	bf00      	nop
 800781a:	3744      	adds	r7, #68	; 0x44
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr

08007824 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b088      	sub	sp, #32
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	e853 3f00 	ldrex	r3, [r3]
 8007838:	60bb      	str	r3, [r7, #8]
   return(result);
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007840:	61fb      	str	r3, [r7, #28]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	461a      	mov	r2, r3
 8007848:	69fb      	ldr	r3, [r7, #28]
 800784a:	61bb      	str	r3, [r7, #24]
 800784c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800784e:	6979      	ldr	r1, [r7, #20]
 8007850:	69ba      	ldr	r2, [r7, #24]
 8007852:	e841 2300 	strex	r3, r2, [r1]
 8007856:	613b      	str	r3, [r7, #16]
   return(result);
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d1e6      	bne.n	800782c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2220      	movs	r2, #32
 8007862:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f7ff fa38 	bl	8006ce0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007870:	bf00      	nop
 8007872:	3720      	adds	r7, #32
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b09c      	sub	sp, #112	; 0x70
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007886:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007890:	2b22      	cmp	r3, #34	; 0x22
 8007892:	f040 80b9 	bne.w	8007a08 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800789c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80078a0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80078a4:	b2d9      	uxtb	r1, r3
 80078a6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80078aa:	b2da      	uxtb	r2, r3
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078b0:	400a      	ands	r2, r1
 80078b2:	b2d2      	uxtb	r2, r2
 80078b4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ba:	1c5a      	adds	r2, r3, #1
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	3b01      	subs	r3, #1
 80078ca:	b29a      	uxth	r2, r3
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80078d8:	b29b      	uxth	r3, r3
 80078da:	2b00      	cmp	r3, #0
 80078dc:	f040 809c 	bne.w	8007a18 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078e8:	e853 3f00 	ldrex	r3, [r3]
 80078ec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80078ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	461a      	mov	r2, r3
 80078fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8007900:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007902:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007904:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007906:	e841 2300 	strex	r3, r2, [r1]
 800790a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800790c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800790e:	2b00      	cmp	r3, #0
 8007910:	d1e6      	bne.n	80078e0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	3308      	adds	r3, #8
 8007918:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800791c:	e853 3f00 	ldrex	r3, [r3]
 8007920:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007924:	f023 0301 	bic.w	r3, r3, #1
 8007928:	667b      	str	r3, [r7, #100]	; 0x64
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	3308      	adds	r3, #8
 8007930:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007932:	647a      	str	r2, [r7, #68]	; 0x44
 8007934:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007936:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007938:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800793a:	e841 2300 	strex	r3, r2, [r1]
 800793e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007942:	2b00      	cmp	r3, #0
 8007944:	d1e5      	bne.n	8007912 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2220      	movs	r2, #32
 800794a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007964:	2b00      	cmp	r3, #0
 8007966:	d018      	beq.n	800799a <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007970:	e853 3f00 	ldrex	r3, [r3]
 8007974:	623b      	str	r3, [r7, #32]
   return(result);
 8007976:	6a3b      	ldr	r3, [r7, #32]
 8007978:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800797c:	663b      	str	r3, [r7, #96]	; 0x60
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	461a      	mov	r2, r3
 8007984:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007986:	633b      	str	r3, [r7, #48]	; 0x30
 8007988:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800798c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800798e:	e841 2300 	strex	r3, r2, [r1]
 8007992:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007996:	2b00      	cmp	r3, #0
 8007998:	d1e6      	bne.n	8007968 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d12e      	bne.n	8007a00 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	e853 3f00 	ldrex	r3, [r3]
 80079b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f023 0310 	bic.w	r3, r3, #16
 80079bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	461a      	mov	r2, r3
 80079c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079c6:	61fb      	str	r3, [r7, #28]
 80079c8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ca:	69b9      	ldr	r1, [r7, #24]
 80079cc:	69fa      	ldr	r2, [r7, #28]
 80079ce:	e841 2300 	strex	r3, r2, [r1]
 80079d2:	617b      	str	r3, [r7, #20]
   return(result);
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d1e6      	bne.n	80079a8 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	69db      	ldr	r3, [r3, #28]
 80079e0:	f003 0310 	and.w	r3, r3, #16
 80079e4:	2b10      	cmp	r3, #16
 80079e6:	d103      	bne.n	80079f0 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	2210      	movs	r2, #16
 80079ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80079f6:	4619      	mov	r1, r3
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f7ff f985 	bl	8006d08 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80079fe:	e00b      	b.n	8007a18 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f7f8 ff4b 	bl	800089c <HAL_UART_RxCpltCallback>
}
 8007a06:	e007      	b.n	8007a18 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	699a      	ldr	r2, [r3, #24]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f042 0208 	orr.w	r2, r2, #8
 8007a16:	619a      	str	r2, [r3, #24]
}
 8007a18:	bf00      	nop
 8007a1a:	3770      	adds	r7, #112	; 0x70
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b09c      	sub	sp, #112	; 0x70
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007a2e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a38:	2b22      	cmp	r3, #34	; 0x22
 8007a3a:	f040 80b9 	bne.w	8007bb0 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007a44:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a4c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007a4e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007a52:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007a56:	4013      	ands	r3, r2
 8007a58:	b29a      	uxth	r2, r3
 8007a5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a5c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a62:	1c9a      	adds	r2, r3, #2
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	3b01      	subs	r3, #1
 8007a72:	b29a      	uxth	r2, r3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	f040 809c 	bne.w	8007bc0 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a90:	e853 3f00 	ldrex	r3, [r3]
 8007a94:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007a96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a9c:	667b      	str	r3, [r7, #100]	; 0x64
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007aa6:	657b      	str	r3, [r7, #84]	; 0x54
 8007aa8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aaa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007aac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007aae:	e841 2300 	strex	r3, r2, [r1]
 8007ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007ab4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d1e6      	bne.n	8007a88 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	3308      	adds	r3, #8
 8007ac0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ac4:	e853 3f00 	ldrex	r3, [r3]
 8007ac8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007acc:	f023 0301 	bic.w	r3, r3, #1
 8007ad0:	663b      	str	r3, [r7, #96]	; 0x60
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	3308      	adds	r3, #8
 8007ad8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007ada:	643a      	str	r2, [r7, #64]	; 0x40
 8007adc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ade:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007ae0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ae2:	e841 2300 	strex	r3, r2, [r1]
 8007ae6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d1e5      	bne.n	8007aba <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2220      	movs	r2, #32
 8007af2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2200      	movs	r2, #0
 8007afa:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2200      	movs	r2, #0
 8007b00:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d018      	beq.n	8007b42 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b16:	6a3b      	ldr	r3, [r7, #32]
 8007b18:	e853 3f00 	ldrex	r3, [r3]
 8007b1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007b24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b30:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b36:	e841 2300 	strex	r3, r2, [r1]
 8007b3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d1e6      	bne.n	8007b10 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d12e      	bne.n	8007ba8 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	e853 3f00 	ldrex	r3, [r3]
 8007b5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	f023 0310 	bic.w	r3, r3, #16
 8007b64:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	461a      	mov	r2, r3
 8007b6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b6e:	61bb      	str	r3, [r7, #24]
 8007b70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b72:	6979      	ldr	r1, [r7, #20]
 8007b74:	69ba      	ldr	r2, [r7, #24]
 8007b76:	e841 2300 	strex	r3, r2, [r1]
 8007b7a:	613b      	str	r3, [r7, #16]
   return(result);
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d1e6      	bne.n	8007b50 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	69db      	ldr	r3, [r3, #28]
 8007b88:	f003 0310 	and.w	r3, r3, #16
 8007b8c:	2b10      	cmp	r3, #16
 8007b8e:	d103      	bne.n	8007b98 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2210      	movs	r2, #16
 8007b96:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f7ff f8b1 	bl	8006d08 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ba6:	e00b      	b.n	8007bc0 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f7f8 fe77 	bl	800089c <HAL_UART_RxCpltCallback>
}
 8007bae:	e007      	b.n	8007bc0 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	699a      	ldr	r2, [r3, #24]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f042 0208 	orr.w	r2, r2, #8
 8007bbe:	619a      	str	r2, [r3, #24]
}
 8007bc0:	bf00      	nop
 8007bc2:	3770      	adds	r7, #112	; 0x70
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b083      	sub	sp, #12
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007bd0:	bf00      	nop
 8007bd2:	370c      	adds	r7, #12
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <__errno>:
 8007bdc:	4b01      	ldr	r3, [pc, #4]	; (8007be4 <__errno+0x8>)
 8007bde:	6818      	ldr	r0, [r3, #0]
 8007be0:	4770      	bx	lr
 8007be2:	bf00      	nop
 8007be4:	2000005c 	.word	0x2000005c

08007be8 <__libc_init_array>:
 8007be8:	b570      	push	{r4, r5, r6, lr}
 8007bea:	4d0d      	ldr	r5, [pc, #52]	; (8007c20 <__libc_init_array+0x38>)
 8007bec:	4c0d      	ldr	r4, [pc, #52]	; (8007c24 <__libc_init_array+0x3c>)
 8007bee:	1b64      	subs	r4, r4, r5
 8007bf0:	10a4      	asrs	r4, r4, #2
 8007bf2:	2600      	movs	r6, #0
 8007bf4:	42a6      	cmp	r6, r4
 8007bf6:	d109      	bne.n	8007c0c <__libc_init_array+0x24>
 8007bf8:	4d0b      	ldr	r5, [pc, #44]	; (8007c28 <__libc_init_array+0x40>)
 8007bfa:	4c0c      	ldr	r4, [pc, #48]	; (8007c2c <__libc_init_array+0x44>)
 8007bfc:	f000 fc8e 	bl	800851c <_init>
 8007c00:	1b64      	subs	r4, r4, r5
 8007c02:	10a4      	asrs	r4, r4, #2
 8007c04:	2600      	movs	r6, #0
 8007c06:	42a6      	cmp	r6, r4
 8007c08:	d105      	bne.n	8007c16 <__libc_init_array+0x2e>
 8007c0a:	bd70      	pop	{r4, r5, r6, pc}
 8007c0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c10:	4798      	blx	r3
 8007c12:	3601      	adds	r6, #1
 8007c14:	e7ee      	b.n	8007bf4 <__libc_init_array+0xc>
 8007c16:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c1a:	4798      	blx	r3
 8007c1c:	3601      	adds	r6, #1
 8007c1e:	e7f2      	b.n	8007c06 <__libc_init_array+0x1e>
 8007c20:	08008710 	.word	0x08008710
 8007c24:	08008710 	.word	0x08008710
 8007c28:	08008710 	.word	0x08008710
 8007c2c:	08008714 	.word	0x08008714

08007c30 <memset>:
 8007c30:	4402      	add	r2, r0
 8007c32:	4603      	mov	r3, r0
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d100      	bne.n	8007c3a <memset+0xa>
 8007c38:	4770      	bx	lr
 8007c3a:	f803 1b01 	strb.w	r1, [r3], #1
 8007c3e:	e7f9      	b.n	8007c34 <memset+0x4>

08007c40 <siprintf>:
 8007c40:	b40e      	push	{r1, r2, r3}
 8007c42:	b500      	push	{lr}
 8007c44:	b09c      	sub	sp, #112	; 0x70
 8007c46:	ab1d      	add	r3, sp, #116	; 0x74
 8007c48:	9002      	str	r0, [sp, #8]
 8007c4a:	9006      	str	r0, [sp, #24]
 8007c4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007c50:	4809      	ldr	r0, [pc, #36]	; (8007c78 <siprintf+0x38>)
 8007c52:	9107      	str	r1, [sp, #28]
 8007c54:	9104      	str	r1, [sp, #16]
 8007c56:	4909      	ldr	r1, [pc, #36]	; (8007c7c <siprintf+0x3c>)
 8007c58:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c5c:	9105      	str	r1, [sp, #20]
 8007c5e:	6800      	ldr	r0, [r0, #0]
 8007c60:	9301      	str	r3, [sp, #4]
 8007c62:	a902      	add	r1, sp, #8
 8007c64:	f000 f868 	bl	8007d38 <_svfiprintf_r>
 8007c68:	9b02      	ldr	r3, [sp, #8]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	701a      	strb	r2, [r3, #0]
 8007c6e:	b01c      	add	sp, #112	; 0x70
 8007c70:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c74:	b003      	add	sp, #12
 8007c76:	4770      	bx	lr
 8007c78:	2000005c 	.word	0x2000005c
 8007c7c:	ffff0208 	.word	0xffff0208

08007c80 <__ssputs_r>:
 8007c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c84:	688e      	ldr	r6, [r1, #8]
 8007c86:	429e      	cmp	r6, r3
 8007c88:	4682      	mov	sl, r0
 8007c8a:	460c      	mov	r4, r1
 8007c8c:	4690      	mov	r8, r2
 8007c8e:	461f      	mov	r7, r3
 8007c90:	d838      	bhi.n	8007d04 <__ssputs_r+0x84>
 8007c92:	898a      	ldrh	r2, [r1, #12]
 8007c94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007c98:	d032      	beq.n	8007d00 <__ssputs_r+0x80>
 8007c9a:	6825      	ldr	r5, [r4, #0]
 8007c9c:	6909      	ldr	r1, [r1, #16]
 8007c9e:	eba5 0901 	sub.w	r9, r5, r1
 8007ca2:	6965      	ldr	r5, [r4, #20]
 8007ca4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ca8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007cac:	3301      	adds	r3, #1
 8007cae:	444b      	add	r3, r9
 8007cb0:	106d      	asrs	r5, r5, #1
 8007cb2:	429d      	cmp	r5, r3
 8007cb4:	bf38      	it	cc
 8007cb6:	461d      	movcc	r5, r3
 8007cb8:	0553      	lsls	r3, r2, #21
 8007cba:	d531      	bpl.n	8007d20 <__ssputs_r+0xa0>
 8007cbc:	4629      	mov	r1, r5
 8007cbe:	f000 fb63 	bl	8008388 <_malloc_r>
 8007cc2:	4606      	mov	r6, r0
 8007cc4:	b950      	cbnz	r0, 8007cdc <__ssputs_r+0x5c>
 8007cc6:	230c      	movs	r3, #12
 8007cc8:	f8ca 3000 	str.w	r3, [sl]
 8007ccc:	89a3      	ldrh	r3, [r4, #12]
 8007cce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cd2:	81a3      	strh	r3, [r4, #12]
 8007cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8007cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cdc:	6921      	ldr	r1, [r4, #16]
 8007cde:	464a      	mov	r2, r9
 8007ce0:	f000 fabe 	bl	8008260 <memcpy>
 8007ce4:	89a3      	ldrh	r3, [r4, #12]
 8007ce6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cee:	81a3      	strh	r3, [r4, #12]
 8007cf0:	6126      	str	r6, [r4, #16]
 8007cf2:	6165      	str	r5, [r4, #20]
 8007cf4:	444e      	add	r6, r9
 8007cf6:	eba5 0509 	sub.w	r5, r5, r9
 8007cfa:	6026      	str	r6, [r4, #0]
 8007cfc:	60a5      	str	r5, [r4, #8]
 8007cfe:	463e      	mov	r6, r7
 8007d00:	42be      	cmp	r6, r7
 8007d02:	d900      	bls.n	8007d06 <__ssputs_r+0x86>
 8007d04:	463e      	mov	r6, r7
 8007d06:	6820      	ldr	r0, [r4, #0]
 8007d08:	4632      	mov	r2, r6
 8007d0a:	4641      	mov	r1, r8
 8007d0c:	f000 fab6 	bl	800827c <memmove>
 8007d10:	68a3      	ldr	r3, [r4, #8]
 8007d12:	1b9b      	subs	r3, r3, r6
 8007d14:	60a3      	str	r3, [r4, #8]
 8007d16:	6823      	ldr	r3, [r4, #0]
 8007d18:	4433      	add	r3, r6
 8007d1a:	6023      	str	r3, [r4, #0]
 8007d1c:	2000      	movs	r0, #0
 8007d1e:	e7db      	b.n	8007cd8 <__ssputs_r+0x58>
 8007d20:	462a      	mov	r2, r5
 8007d22:	f000 fba5 	bl	8008470 <_realloc_r>
 8007d26:	4606      	mov	r6, r0
 8007d28:	2800      	cmp	r0, #0
 8007d2a:	d1e1      	bne.n	8007cf0 <__ssputs_r+0x70>
 8007d2c:	6921      	ldr	r1, [r4, #16]
 8007d2e:	4650      	mov	r0, sl
 8007d30:	f000 fabe 	bl	80082b0 <_free_r>
 8007d34:	e7c7      	b.n	8007cc6 <__ssputs_r+0x46>
	...

08007d38 <_svfiprintf_r>:
 8007d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d3c:	4698      	mov	r8, r3
 8007d3e:	898b      	ldrh	r3, [r1, #12]
 8007d40:	061b      	lsls	r3, r3, #24
 8007d42:	b09d      	sub	sp, #116	; 0x74
 8007d44:	4607      	mov	r7, r0
 8007d46:	460d      	mov	r5, r1
 8007d48:	4614      	mov	r4, r2
 8007d4a:	d50e      	bpl.n	8007d6a <_svfiprintf_r+0x32>
 8007d4c:	690b      	ldr	r3, [r1, #16]
 8007d4e:	b963      	cbnz	r3, 8007d6a <_svfiprintf_r+0x32>
 8007d50:	2140      	movs	r1, #64	; 0x40
 8007d52:	f000 fb19 	bl	8008388 <_malloc_r>
 8007d56:	6028      	str	r0, [r5, #0]
 8007d58:	6128      	str	r0, [r5, #16]
 8007d5a:	b920      	cbnz	r0, 8007d66 <_svfiprintf_r+0x2e>
 8007d5c:	230c      	movs	r3, #12
 8007d5e:	603b      	str	r3, [r7, #0]
 8007d60:	f04f 30ff 	mov.w	r0, #4294967295
 8007d64:	e0d1      	b.n	8007f0a <_svfiprintf_r+0x1d2>
 8007d66:	2340      	movs	r3, #64	; 0x40
 8007d68:	616b      	str	r3, [r5, #20]
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	9309      	str	r3, [sp, #36]	; 0x24
 8007d6e:	2320      	movs	r3, #32
 8007d70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d74:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d78:	2330      	movs	r3, #48	; 0x30
 8007d7a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007f24 <_svfiprintf_r+0x1ec>
 8007d7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d82:	f04f 0901 	mov.w	r9, #1
 8007d86:	4623      	mov	r3, r4
 8007d88:	469a      	mov	sl, r3
 8007d8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d8e:	b10a      	cbz	r2, 8007d94 <_svfiprintf_r+0x5c>
 8007d90:	2a25      	cmp	r2, #37	; 0x25
 8007d92:	d1f9      	bne.n	8007d88 <_svfiprintf_r+0x50>
 8007d94:	ebba 0b04 	subs.w	fp, sl, r4
 8007d98:	d00b      	beq.n	8007db2 <_svfiprintf_r+0x7a>
 8007d9a:	465b      	mov	r3, fp
 8007d9c:	4622      	mov	r2, r4
 8007d9e:	4629      	mov	r1, r5
 8007da0:	4638      	mov	r0, r7
 8007da2:	f7ff ff6d 	bl	8007c80 <__ssputs_r>
 8007da6:	3001      	adds	r0, #1
 8007da8:	f000 80aa 	beq.w	8007f00 <_svfiprintf_r+0x1c8>
 8007dac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007dae:	445a      	add	r2, fp
 8007db0:	9209      	str	r2, [sp, #36]	; 0x24
 8007db2:	f89a 3000 	ldrb.w	r3, [sl]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	f000 80a2 	beq.w	8007f00 <_svfiprintf_r+0x1c8>
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8007dc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007dc6:	f10a 0a01 	add.w	sl, sl, #1
 8007dca:	9304      	str	r3, [sp, #16]
 8007dcc:	9307      	str	r3, [sp, #28]
 8007dce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007dd2:	931a      	str	r3, [sp, #104]	; 0x68
 8007dd4:	4654      	mov	r4, sl
 8007dd6:	2205      	movs	r2, #5
 8007dd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ddc:	4851      	ldr	r0, [pc, #324]	; (8007f24 <_svfiprintf_r+0x1ec>)
 8007dde:	f7f8 fa07 	bl	80001f0 <memchr>
 8007de2:	9a04      	ldr	r2, [sp, #16]
 8007de4:	b9d8      	cbnz	r0, 8007e1e <_svfiprintf_r+0xe6>
 8007de6:	06d0      	lsls	r0, r2, #27
 8007de8:	bf44      	itt	mi
 8007dea:	2320      	movmi	r3, #32
 8007dec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007df0:	0711      	lsls	r1, r2, #28
 8007df2:	bf44      	itt	mi
 8007df4:	232b      	movmi	r3, #43	; 0x2b
 8007df6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dfa:	f89a 3000 	ldrb.w	r3, [sl]
 8007dfe:	2b2a      	cmp	r3, #42	; 0x2a
 8007e00:	d015      	beq.n	8007e2e <_svfiprintf_r+0xf6>
 8007e02:	9a07      	ldr	r2, [sp, #28]
 8007e04:	4654      	mov	r4, sl
 8007e06:	2000      	movs	r0, #0
 8007e08:	f04f 0c0a 	mov.w	ip, #10
 8007e0c:	4621      	mov	r1, r4
 8007e0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e12:	3b30      	subs	r3, #48	; 0x30
 8007e14:	2b09      	cmp	r3, #9
 8007e16:	d94e      	bls.n	8007eb6 <_svfiprintf_r+0x17e>
 8007e18:	b1b0      	cbz	r0, 8007e48 <_svfiprintf_r+0x110>
 8007e1a:	9207      	str	r2, [sp, #28]
 8007e1c:	e014      	b.n	8007e48 <_svfiprintf_r+0x110>
 8007e1e:	eba0 0308 	sub.w	r3, r0, r8
 8007e22:	fa09 f303 	lsl.w	r3, r9, r3
 8007e26:	4313      	orrs	r3, r2
 8007e28:	9304      	str	r3, [sp, #16]
 8007e2a:	46a2      	mov	sl, r4
 8007e2c:	e7d2      	b.n	8007dd4 <_svfiprintf_r+0x9c>
 8007e2e:	9b03      	ldr	r3, [sp, #12]
 8007e30:	1d19      	adds	r1, r3, #4
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	9103      	str	r1, [sp, #12]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	bfbb      	ittet	lt
 8007e3a:	425b      	neglt	r3, r3
 8007e3c:	f042 0202 	orrlt.w	r2, r2, #2
 8007e40:	9307      	strge	r3, [sp, #28]
 8007e42:	9307      	strlt	r3, [sp, #28]
 8007e44:	bfb8      	it	lt
 8007e46:	9204      	strlt	r2, [sp, #16]
 8007e48:	7823      	ldrb	r3, [r4, #0]
 8007e4a:	2b2e      	cmp	r3, #46	; 0x2e
 8007e4c:	d10c      	bne.n	8007e68 <_svfiprintf_r+0x130>
 8007e4e:	7863      	ldrb	r3, [r4, #1]
 8007e50:	2b2a      	cmp	r3, #42	; 0x2a
 8007e52:	d135      	bne.n	8007ec0 <_svfiprintf_r+0x188>
 8007e54:	9b03      	ldr	r3, [sp, #12]
 8007e56:	1d1a      	adds	r2, r3, #4
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	9203      	str	r2, [sp, #12]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	bfb8      	it	lt
 8007e60:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e64:	3402      	adds	r4, #2
 8007e66:	9305      	str	r3, [sp, #20]
 8007e68:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007f34 <_svfiprintf_r+0x1fc>
 8007e6c:	7821      	ldrb	r1, [r4, #0]
 8007e6e:	2203      	movs	r2, #3
 8007e70:	4650      	mov	r0, sl
 8007e72:	f7f8 f9bd 	bl	80001f0 <memchr>
 8007e76:	b140      	cbz	r0, 8007e8a <_svfiprintf_r+0x152>
 8007e78:	2340      	movs	r3, #64	; 0x40
 8007e7a:	eba0 000a 	sub.w	r0, r0, sl
 8007e7e:	fa03 f000 	lsl.w	r0, r3, r0
 8007e82:	9b04      	ldr	r3, [sp, #16]
 8007e84:	4303      	orrs	r3, r0
 8007e86:	3401      	adds	r4, #1
 8007e88:	9304      	str	r3, [sp, #16]
 8007e8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e8e:	4826      	ldr	r0, [pc, #152]	; (8007f28 <_svfiprintf_r+0x1f0>)
 8007e90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e94:	2206      	movs	r2, #6
 8007e96:	f7f8 f9ab 	bl	80001f0 <memchr>
 8007e9a:	2800      	cmp	r0, #0
 8007e9c:	d038      	beq.n	8007f10 <_svfiprintf_r+0x1d8>
 8007e9e:	4b23      	ldr	r3, [pc, #140]	; (8007f2c <_svfiprintf_r+0x1f4>)
 8007ea0:	bb1b      	cbnz	r3, 8007eea <_svfiprintf_r+0x1b2>
 8007ea2:	9b03      	ldr	r3, [sp, #12]
 8007ea4:	3307      	adds	r3, #7
 8007ea6:	f023 0307 	bic.w	r3, r3, #7
 8007eaa:	3308      	adds	r3, #8
 8007eac:	9303      	str	r3, [sp, #12]
 8007eae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eb0:	4433      	add	r3, r6
 8007eb2:	9309      	str	r3, [sp, #36]	; 0x24
 8007eb4:	e767      	b.n	8007d86 <_svfiprintf_r+0x4e>
 8007eb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8007eba:	460c      	mov	r4, r1
 8007ebc:	2001      	movs	r0, #1
 8007ebe:	e7a5      	b.n	8007e0c <_svfiprintf_r+0xd4>
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	3401      	adds	r4, #1
 8007ec4:	9305      	str	r3, [sp, #20]
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	f04f 0c0a 	mov.w	ip, #10
 8007ecc:	4620      	mov	r0, r4
 8007ece:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ed2:	3a30      	subs	r2, #48	; 0x30
 8007ed4:	2a09      	cmp	r2, #9
 8007ed6:	d903      	bls.n	8007ee0 <_svfiprintf_r+0x1a8>
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d0c5      	beq.n	8007e68 <_svfiprintf_r+0x130>
 8007edc:	9105      	str	r1, [sp, #20]
 8007ede:	e7c3      	b.n	8007e68 <_svfiprintf_r+0x130>
 8007ee0:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ee4:	4604      	mov	r4, r0
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e7f0      	b.n	8007ecc <_svfiprintf_r+0x194>
 8007eea:	ab03      	add	r3, sp, #12
 8007eec:	9300      	str	r3, [sp, #0]
 8007eee:	462a      	mov	r2, r5
 8007ef0:	4b0f      	ldr	r3, [pc, #60]	; (8007f30 <_svfiprintf_r+0x1f8>)
 8007ef2:	a904      	add	r1, sp, #16
 8007ef4:	4638      	mov	r0, r7
 8007ef6:	f3af 8000 	nop.w
 8007efa:	1c42      	adds	r2, r0, #1
 8007efc:	4606      	mov	r6, r0
 8007efe:	d1d6      	bne.n	8007eae <_svfiprintf_r+0x176>
 8007f00:	89ab      	ldrh	r3, [r5, #12]
 8007f02:	065b      	lsls	r3, r3, #25
 8007f04:	f53f af2c 	bmi.w	8007d60 <_svfiprintf_r+0x28>
 8007f08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f0a:	b01d      	add	sp, #116	; 0x74
 8007f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f10:	ab03      	add	r3, sp, #12
 8007f12:	9300      	str	r3, [sp, #0]
 8007f14:	462a      	mov	r2, r5
 8007f16:	4b06      	ldr	r3, [pc, #24]	; (8007f30 <_svfiprintf_r+0x1f8>)
 8007f18:	a904      	add	r1, sp, #16
 8007f1a:	4638      	mov	r0, r7
 8007f1c:	f000 f87a 	bl	8008014 <_printf_i>
 8007f20:	e7eb      	b.n	8007efa <_svfiprintf_r+0x1c2>
 8007f22:	bf00      	nop
 8007f24:	080086dc 	.word	0x080086dc
 8007f28:	080086e6 	.word	0x080086e6
 8007f2c:	00000000 	.word	0x00000000
 8007f30:	08007c81 	.word	0x08007c81
 8007f34:	080086e2 	.word	0x080086e2

08007f38 <_printf_common>:
 8007f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f3c:	4616      	mov	r6, r2
 8007f3e:	4699      	mov	r9, r3
 8007f40:	688a      	ldr	r2, [r1, #8]
 8007f42:	690b      	ldr	r3, [r1, #16]
 8007f44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	bfb8      	it	lt
 8007f4c:	4613      	movlt	r3, r2
 8007f4e:	6033      	str	r3, [r6, #0]
 8007f50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f54:	4607      	mov	r7, r0
 8007f56:	460c      	mov	r4, r1
 8007f58:	b10a      	cbz	r2, 8007f5e <_printf_common+0x26>
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	6033      	str	r3, [r6, #0]
 8007f5e:	6823      	ldr	r3, [r4, #0]
 8007f60:	0699      	lsls	r1, r3, #26
 8007f62:	bf42      	ittt	mi
 8007f64:	6833      	ldrmi	r3, [r6, #0]
 8007f66:	3302      	addmi	r3, #2
 8007f68:	6033      	strmi	r3, [r6, #0]
 8007f6a:	6825      	ldr	r5, [r4, #0]
 8007f6c:	f015 0506 	ands.w	r5, r5, #6
 8007f70:	d106      	bne.n	8007f80 <_printf_common+0x48>
 8007f72:	f104 0a19 	add.w	sl, r4, #25
 8007f76:	68e3      	ldr	r3, [r4, #12]
 8007f78:	6832      	ldr	r2, [r6, #0]
 8007f7a:	1a9b      	subs	r3, r3, r2
 8007f7c:	42ab      	cmp	r3, r5
 8007f7e:	dc26      	bgt.n	8007fce <_printf_common+0x96>
 8007f80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007f84:	1e13      	subs	r3, r2, #0
 8007f86:	6822      	ldr	r2, [r4, #0]
 8007f88:	bf18      	it	ne
 8007f8a:	2301      	movne	r3, #1
 8007f8c:	0692      	lsls	r2, r2, #26
 8007f8e:	d42b      	bmi.n	8007fe8 <_printf_common+0xb0>
 8007f90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f94:	4649      	mov	r1, r9
 8007f96:	4638      	mov	r0, r7
 8007f98:	47c0      	blx	r8
 8007f9a:	3001      	adds	r0, #1
 8007f9c:	d01e      	beq.n	8007fdc <_printf_common+0xa4>
 8007f9e:	6823      	ldr	r3, [r4, #0]
 8007fa0:	68e5      	ldr	r5, [r4, #12]
 8007fa2:	6832      	ldr	r2, [r6, #0]
 8007fa4:	f003 0306 	and.w	r3, r3, #6
 8007fa8:	2b04      	cmp	r3, #4
 8007faa:	bf08      	it	eq
 8007fac:	1aad      	subeq	r5, r5, r2
 8007fae:	68a3      	ldr	r3, [r4, #8]
 8007fb0:	6922      	ldr	r2, [r4, #16]
 8007fb2:	bf0c      	ite	eq
 8007fb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007fb8:	2500      	movne	r5, #0
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	bfc4      	itt	gt
 8007fbe:	1a9b      	subgt	r3, r3, r2
 8007fc0:	18ed      	addgt	r5, r5, r3
 8007fc2:	2600      	movs	r6, #0
 8007fc4:	341a      	adds	r4, #26
 8007fc6:	42b5      	cmp	r5, r6
 8007fc8:	d11a      	bne.n	8008000 <_printf_common+0xc8>
 8007fca:	2000      	movs	r0, #0
 8007fcc:	e008      	b.n	8007fe0 <_printf_common+0xa8>
 8007fce:	2301      	movs	r3, #1
 8007fd0:	4652      	mov	r2, sl
 8007fd2:	4649      	mov	r1, r9
 8007fd4:	4638      	mov	r0, r7
 8007fd6:	47c0      	blx	r8
 8007fd8:	3001      	adds	r0, #1
 8007fda:	d103      	bne.n	8007fe4 <_printf_common+0xac>
 8007fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8007fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fe4:	3501      	adds	r5, #1
 8007fe6:	e7c6      	b.n	8007f76 <_printf_common+0x3e>
 8007fe8:	18e1      	adds	r1, r4, r3
 8007fea:	1c5a      	adds	r2, r3, #1
 8007fec:	2030      	movs	r0, #48	; 0x30
 8007fee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007ff2:	4422      	add	r2, r4
 8007ff4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ff8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ffc:	3302      	adds	r3, #2
 8007ffe:	e7c7      	b.n	8007f90 <_printf_common+0x58>
 8008000:	2301      	movs	r3, #1
 8008002:	4622      	mov	r2, r4
 8008004:	4649      	mov	r1, r9
 8008006:	4638      	mov	r0, r7
 8008008:	47c0      	blx	r8
 800800a:	3001      	adds	r0, #1
 800800c:	d0e6      	beq.n	8007fdc <_printf_common+0xa4>
 800800e:	3601      	adds	r6, #1
 8008010:	e7d9      	b.n	8007fc6 <_printf_common+0x8e>
	...

08008014 <_printf_i>:
 8008014:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008018:	7e0f      	ldrb	r7, [r1, #24]
 800801a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800801c:	2f78      	cmp	r7, #120	; 0x78
 800801e:	4691      	mov	r9, r2
 8008020:	4680      	mov	r8, r0
 8008022:	460c      	mov	r4, r1
 8008024:	469a      	mov	sl, r3
 8008026:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800802a:	d807      	bhi.n	800803c <_printf_i+0x28>
 800802c:	2f62      	cmp	r7, #98	; 0x62
 800802e:	d80a      	bhi.n	8008046 <_printf_i+0x32>
 8008030:	2f00      	cmp	r7, #0
 8008032:	f000 80d8 	beq.w	80081e6 <_printf_i+0x1d2>
 8008036:	2f58      	cmp	r7, #88	; 0x58
 8008038:	f000 80a3 	beq.w	8008182 <_printf_i+0x16e>
 800803c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008040:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008044:	e03a      	b.n	80080bc <_printf_i+0xa8>
 8008046:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800804a:	2b15      	cmp	r3, #21
 800804c:	d8f6      	bhi.n	800803c <_printf_i+0x28>
 800804e:	a101      	add	r1, pc, #4	; (adr r1, 8008054 <_printf_i+0x40>)
 8008050:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008054:	080080ad 	.word	0x080080ad
 8008058:	080080c1 	.word	0x080080c1
 800805c:	0800803d 	.word	0x0800803d
 8008060:	0800803d 	.word	0x0800803d
 8008064:	0800803d 	.word	0x0800803d
 8008068:	0800803d 	.word	0x0800803d
 800806c:	080080c1 	.word	0x080080c1
 8008070:	0800803d 	.word	0x0800803d
 8008074:	0800803d 	.word	0x0800803d
 8008078:	0800803d 	.word	0x0800803d
 800807c:	0800803d 	.word	0x0800803d
 8008080:	080081cd 	.word	0x080081cd
 8008084:	080080f1 	.word	0x080080f1
 8008088:	080081af 	.word	0x080081af
 800808c:	0800803d 	.word	0x0800803d
 8008090:	0800803d 	.word	0x0800803d
 8008094:	080081ef 	.word	0x080081ef
 8008098:	0800803d 	.word	0x0800803d
 800809c:	080080f1 	.word	0x080080f1
 80080a0:	0800803d 	.word	0x0800803d
 80080a4:	0800803d 	.word	0x0800803d
 80080a8:	080081b7 	.word	0x080081b7
 80080ac:	682b      	ldr	r3, [r5, #0]
 80080ae:	1d1a      	adds	r2, r3, #4
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	602a      	str	r2, [r5, #0]
 80080b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80080bc:	2301      	movs	r3, #1
 80080be:	e0a3      	b.n	8008208 <_printf_i+0x1f4>
 80080c0:	6820      	ldr	r0, [r4, #0]
 80080c2:	6829      	ldr	r1, [r5, #0]
 80080c4:	0606      	lsls	r6, r0, #24
 80080c6:	f101 0304 	add.w	r3, r1, #4
 80080ca:	d50a      	bpl.n	80080e2 <_printf_i+0xce>
 80080cc:	680e      	ldr	r6, [r1, #0]
 80080ce:	602b      	str	r3, [r5, #0]
 80080d0:	2e00      	cmp	r6, #0
 80080d2:	da03      	bge.n	80080dc <_printf_i+0xc8>
 80080d4:	232d      	movs	r3, #45	; 0x2d
 80080d6:	4276      	negs	r6, r6
 80080d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080dc:	485e      	ldr	r0, [pc, #376]	; (8008258 <_printf_i+0x244>)
 80080de:	230a      	movs	r3, #10
 80080e0:	e019      	b.n	8008116 <_printf_i+0x102>
 80080e2:	680e      	ldr	r6, [r1, #0]
 80080e4:	602b      	str	r3, [r5, #0]
 80080e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80080ea:	bf18      	it	ne
 80080ec:	b236      	sxthne	r6, r6
 80080ee:	e7ef      	b.n	80080d0 <_printf_i+0xbc>
 80080f0:	682b      	ldr	r3, [r5, #0]
 80080f2:	6820      	ldr	r0, [r4, #0]
 80080f4:	1d19      	adds	r1, r3, #4
 80080f6:	6029      	str	r1, [r5, #0]
 80080f8:	0601      	lsls	r1, r0, #24
 80080fa:	d501      	bpl.n	8008100 <_printf_i+0xec>
 80080fc:	681e      	ldr	r6, [r3, #0]
 80080fe:	e002      	b.n	8008106 <_printf_i+0xf2>
 8008100:	0646      	lsls	r6, r0, #25
 8008102:	d5fb      	bpl.n	80080fc <_printf_i+0xe8>
 8008104:	881e      	ldrh	r6, [r3, #0]
 8008106:	4854      	ldr	r0, [pc, #336]	; (8008258 <_printf_i+0x244>)
 8008108:	2f6f      	cmp	r7, #111	; 0x6f
 800810a:	bf0c      	ite	eq
 800810c:	2308      	moveq	r3, #8
 800810e:	230a      	movne	r3, #10
 8008110:	2100      	movs	r1, #0
 8008112:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008116:	6865      	ldr	r5, [r4, #4]
 8008118:	60a5      	str	r5, [r4, #8]
 800811a:	2d00      	cmp	r5, #0
 800811c:	bfa2      	ittt	ge
 800811e:	6821      	ldrge	r1, [r4, #0]
 8008120:	f021 0104 	bicge.w	r1, r1, #4
 8008124:	6021      	strge	r1, [r4, #0]
 8008126:	b90e      	cbnz	r6, 800812c <_printf_i+0x118>
 8008128:	2d00      	cmp	r5, #0
 800812a:	d04d      	beq.n	80081c8 <_printf_i+0x1b4>
 800812c:	4615      	mov	r5, r2
 800812e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008132:	fb03 6711 	mls	r7, r3, r1, r6
 8008136:	5dc7      	ldrb	r7, [r0, r7]
 8008138:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800813c:	4637      	mov	r7, r6
 800813e:	42bb      	cmp	r3, r7
 8008140:	460e      	mov	r6, r1
 8008142:	d9f4      	bls.n	800812e <_printf_i+0x11a>
 8008144:	2b08      	cmp	r3, #8
 8008146:	d10b      	bne.n	8008160 <_printf_i+0x14c>
 8008148:	6823      	ldr	r3, [r4, #0]
 800814a:	07de      	lsls	r6, r3, #31
 800814c:	d508      	bpl.n	8008160 <_printf_i+0x14c>
 800814e:	6923      	ldr	r3, [r4, #16]
 8008150:	6861      	ldr	r1, [r4, #4]
 8008152:	4299      	cmp	r1, r3
 8008154:	bfde      	ittt	le
 8008156:	2330      	movle	r3, #48	; 0x30
 8008158:	f805 3c01 	strble.w	r3, [r5, #-1]
 800815c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008160:	1b52      	subs	r2, r2, r5
 8008162:	6122      	str	r2, [r4, #16]
 8008164:	f8cd a000 	str.w	sl, [sp]
 8008168:	464b      	mov	r3, r9
 800816a:	aa03      	add	r2, sp, #12
 800816c:	4621      	mov	r1, r4
 800816e:	4640      	mov	r0, r8
 8008170:	f7ff fee2 	bl	8007f38 <_printf_common>
 8008174:	3001      	adds	r0, #1
 8008176:	d14c      	bne.n	8008212 <_printf_i+0x1fe>
 8008178:	f04f 30ff 	mov.w	r0, #4294967295
 800817c:	b004      	add	sp, #16
 800817e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008182:	4835      	ldr	r0, [pc, #212]	; (8008258 <_printf_i+0x244>)
 8008184:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008188:	6829      	ldr	r1, [r5, #0]
 800818a:	6823      	ldr	r3, [r4, #0]
 800818c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008190:	6029      	str	r1, [r5, #0]
 8008192:	061d      	lsls	r5, r3, #24
 8008194:	d514      	bpl.n	80081c0 <_printf_i+0x1ac>
 8008196:	07df      	lsls	r7, r3, #31
 8008198:	bf44      	itt	mi
 800819a:	f043 0320 	orrmi.w	r3, r3, #32
 800819e:	6023      	strmi	r3, [r4, #0]
 80081a0:	b91e      	cbnz	r6, 80081aa <_printf_i+0x196>
 80081a2:	6823      	ldr	r3, [r4, #0]
 80081a4:	f023 0320 	bic.w	r3, r3, #32
 80081a8:	6023      	str	r3, [r4, #0]
 80081aa:	2310      	movs	r3, #16
 80081ac:	e7b0      	b.n	8008110 <_printf_i+0xfc>
 80081ae:	6823      	ldr	r3, [r4, #0]
 80081b0:	f043 0320 	orr.w	r3, r3, #32
 80081b4:	6023      	str	r3, [r4, #0]
 80081b6:	2378      	movs	r3, #120	; 0x78
 80081b8:	4828      	ldr	r0, [pc, #160]	; (800825c <_printf_i+0x248>)
 80081ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80081be:	e7e3      	b.n	8008188 <_printf_i+0x174>
 80081c0:	0659      	lsls	r1, r3, #25
 80081c2:	bf48      	it	mi
 80081c4:	b2b6      	uxthmi	r6, r6
 80081c6:	e7e6      	b.n	8008196 <_printf_i+0x182>
 80081c8:	4615      	mov	r5, r2
 80081ca:	e7bb      	b.n	8008144 <_printf_i+0x130>
 80081cc:	682b      	ldr	r3, [r5, #0]
 80081ce:	6826      	ldr	r6, [r4, #0]
 80081d0:	6961      	ldr	r1, [r4, #20]
 80081d2:	1d18      	adds	r0, r3, #4
 80081d4:	6028      	str	r0, [r5, #0]
 80081d6:	0635      	lsls	r5, r6, #24
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	d501      	bpl.n	80081e0 <_printf_i+0x1cc>
 80081dc:	6019      	str	r1, [r3, #0]
 80081de:	e002      	b.n	80081e6 <_printf_i+0x1d2>
 80081e0:	0670      	lsls	r0, r6, #25
 80081e2:	d5fb      	bpl.n	80081dc <_printf_i+0x1c8>
 80081e4:	8019      	strh	r1, [r3, #0]
 80081e6:	2300      	movs	r3, #0
 80081e8:	6123      	str	r3, [r4, #16]
 80081ea:	4615      	mov	r5, r2
 80081ec:	e7ba      	b.n	8008164 <_printf_i+0x150>
 80081ee:	682b      	ldr	r3, [r5, #0]
 80081f0:	1d1a      	adds	r2, r3, #4
 80081f2:	602a      	str	r2, [r5, #0]
 80081f4:	681d      	ldr	r5, [r3, #0]
 80081f6:	6862      	ldr	r2, [r4, #4]
 80081f8:	2100      	movs	r1, #0
 80081fa:	4628      	mov	r0, r5
 80081fc:	f7f7 fff8 	bl	80001f0 <memchr>
 8008200:	b108      	cbz	r0, 8008206 <_printf_i+0x1f2>
 8008202:	1b40      	subs	r0, r0, r5
 8008204:	6060      	str	r0, [r4, #4]
 8008206:	6863      	ldr	r3, [r4, #4]
 8008208:	6123      	str	r3, [r4, #16]
 800820a:	2300      	movs	r3, #0
 800820c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008210:	e7a8      	b.n	8008164 <_printf_i+0x150>
 8008212:	6923      	ldr	r3, [r4, #16]
 8008214:	462a      	mov	r2, r5
 8008216:	4649      	mov	r1, r9
 8008218:	4640      	mov	r0, r8
 800821a:	47d0      	blx	sl
 800821c:	3001      	adds	r0, #1
 800821e:	d0ab      	beq.n	8008178 <_printf_i+0x164>
 8008220:	6823      	ldr	r3, [r4, #0]
 8008222:	079b      	lsls	r3, r3, #30
 8008224:	d413      	bmi.n	800824e <_printf_i+0x23a>
 8008226:	68e0      	ldr	r0, [r4, #12]
 8008228:	9b03      	ldr	r3, [sp, #12]
 800822a:	4298      	cmp	r0, r3
 800822c:	bfb8      	it	lt
 800822e:	4618      	movlt	r0, r3
 8008230:	e7a4      	b.n	800817c <_printf_i+0x168>
 8008232:	2301      	movs	r3, #1
 8008234:	4632      	mov	r2, r6
 8008236:	4649      	mov	r1, r9
 8008238:	4640      	mov	r0, r8
 800823a:	47d0      	blx	sl
 800823c:	3001      	adds	r0, #1
 800823e:	d09b      	beq.n	8008178 <_printf_i+0x164>
 8008240:	3501      	adds	r5, #1
 8008242:	68e3      	ldr	r3, [r4, #12]
 8008244:	9903      	ldr	r1, [sp, #12]
 8008246:	1a5b      	subs	r3, r3, r1
 8008248:	42ab      	cmp	r3, r5
 800824a:	dcf2      	bgt.n	8008232 <_printf_i+0x21e>
 800824c:	e7eb      	b.n	8008226 <_printf_i+0x212>
 800824e:	2500      	movs	r5, #0
 8008250:	f104 0619 	add.w	r6, r4, #25
 8008254:	e7f5      	b.n	8008242 <_printf_i+0x22e>
 8008256:	bf00      	nop
 8008258:	080086ed 	.word	0x080086ed
 800825c:	080086fe 	.word	0x080086fe

08008260 <memcpy>:
 8008260:	440a      	add	r2, r1
 8008262:	4291      	cmp	r1, r2
 8008264:	f100 33ff 	add.w	r3, r0, #4294967295
 8008268:	d100      	bne.n	800826c <memcpy+0xc>
 800826a:	4770      	bx	lr
 800826c:	b510      	push	{r4, lr}
 800826e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008272:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008276:	4291      	cmp	r1, r2
 8008278:	d1f9      	bne.n	800826e <memcpy+0xe>
 800827a:	bd10      	pop	{r4, pc}

0800827c <memmove>:
 800827c:	4288      	cmp	r0, r1
 800827e:	b510      	push	{r4, lr}
 8008280:	eb01 0402 	add.w	r4, r1, r2
 8008284:	d902      	bls.n	800828c <memmove+0x10>
 8008286:	4284      	cmp	r4, r0
 8008288:	4623      	mov	r3, r4
 800828a:	d807      	bhi.n	800829c <memmove+0x20>
 800828c:	1e43      	subs	r3, r0, #1
 800828e:	42a1      	cmp	r1, r4
 8008290:	d008      	beq.n	80082a4 <memmove+0x28>
 8008292:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008296:	f803 2f01 	strb.w	r2, [r3, #1]!
 800829a:	e7f8      	b.n	800828e <memmove+0x12>
 800829c:	4402      	add	r2, r0
 800829e:	4601      	mov	r1, r0
 80082a0:	428a      	cmp	r2, r1
 80082a2:	d100      	bne.n	80082a6 <memmove+0x2a>
 80082a4:	bd10      	pop	{r4, pc}
 80082a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80082aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80082ae:	e7f7      	b.n	80082a0 <memmove+0x24>

080082b0 <_free_r>:
 80082b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80082b2:	2900      	cmp	r1, #0
 80082b4:	d044      	beq.n	8008340 <_free_r+0x90>
 80082b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082ba:	9001      	str	r0, [sp, #4]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	f1a1 0404 	sub.w	r4, r1, #4
 80082c2:	bfb8      	it	lt
 80082c4:	18e4      	addlt	r4, r4, r3
 80082c6:	f000 f913 	bl	80084f0 <__malloc_lock>
 80082ca:	4a1e      	ldr	r2, [pc, #120]	; (8008344 <_free_r+0x94>)
 80082cc:	9801      	ldr	r0, [sp, #4]
 80082ce:	6813      	ldr	r3, [r2, #0]
 80082d0:	b933      	cbnz	r3, 80082e0 <_free_r+0x30>
 80082d2:	6063      	str	r3, [r4, #4]
 80082d4:	6014      	str	r4, [r2, #0]
 80082d6:	b003      	add	sp, #12
 80082d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80082dc:	f000 b90e 	b.w	80084fc <__malloc_unlock>
 80082e0:	42a3      	cmp	r3, r4
 80082e2:	d908      	bls.n	80082f6 <_free_r+0x46>
 80082e4:	6825      	ldr	r5, [r4, #0]
 80082e6:	1961      	adds	r1, r4, r5
 80082e8:	428b      	cmp	r3, r1
 80082ea:	bf01      	itttt	eq
 80082ec:	6819      	ldreq	r1, [r3, #0]
 80082ee:	685b      	ldreq	r3, [r3, #4]
 80082f0:	1949      	addeq	r1, r1, r5
 80082f2:	6021      	streq	r1, [r4, #0]
 80082f4:	e7ed      	b.n	80082d2 <_free_r+0x22>
 80082f6:	461a      	mov	r2, r3
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	b10b      	cbz	r3, 8008300 <_free_r+0x50>
 80082fc:	42a3      	cmp	r3, r4
 80082fe:	d9fa      	bls.n	80082f6 <_free_r+0x46>
 8008300:	6811      	ldr	r1, [r2, #0]
 8008302:	1855      	adds	r5, r2, r1
 8008304:	42a5      	cmp	r5, r4
 8008306:	d10b      	bne.n	8008320 <_free_r+0x70>
 8008308:	6824      	ldr	r4, [r4, #0]
 800830a:	4421      	add	r1, r4
 800830c:	1854      	adds	r4, r2, r1
 800830e:	42a3      	cmp	r3, r4
 8008310:	6011      	str	r1, [r2, #0]
 8008312:	d1e0      	bne.n	80082d6 <_free_r+0x26>
 8008314:	681c      	ldr	r4, [r3, #0]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	6053      	str	r3, [r2, #4]
 800831a:	4421      	add	r1, r4
 800831c:	6011      	str	r1, [r2, #0]
 800831e:	e7da      	b.n	80082d6 <_free_r+0x26>
 8008320:	d902      	bls.n	8008328 <_free_r+0x78>
 8008322:	230c      	movs	r3, #12
 8008324:	6003      	str	r3, [r0, #0]
 8008326:	e7d6      	b.n	80082d6 <_free_r+0x26>
 8008328:	6825      	ldr	r5, [r4, #0]
 800832a:	1961      	adds	r1, r4, r5
 800832c:	428b      	cmp	r3, r1
 800832e:	bf04      	itt	eq
 8008330:	6819      	ldreq	r1, [r3, #0]
 8008332:	685b      	ldreq	r3, [r3, #4]
 8008334:	6063      	str	r3, [r4, #4]
 8008336:	bf04      	itt	eq
 8008338:	1949      	addeq	r1, r1, r5
 800833a:	6021      	streq	r1, [r4, #0]
 800833c:	6054      	str	r4, [r2, #4]
 800833e:	e7ca      	b.n	80082d6 <_free_r+0x26>
 8008340:	b003      	add	sp, #12
 8008342:	bd30      	pop	{r4, r5, pc}
 8008344:	20002328 	.word	0x20002328

08008348 <sbrk_aligned>:
 8008348:	b570      	push	{r4, r5, r6, lr}
 800834a:	4e0e      	ldr	r6, [pc, #56]	; (8008384 <sbrk_aligned+0x3c>)
 800834c:	460c      	mov	r4, r1
 800834e:	6831      	ldr	r1, [r6, #0]
 8008350:	4605      	mov	r5, r0
 8008352:	b911      	cbnz	r1, 800835a <sbrk_aligned+0x12>
 8008354:	f000 f8bc 	bl	80084d0 <_sbrk_r>
 8008358:	6030      	str	r0, [r6, #0]
 800835a:	4621      	mov	r1, r4
 800835c:	4628      	mov	r0, r5
 800835e:	f000 f8b7 	bl	80084d0 <_sbrk_r>
 8008362:	1c43      	adds	r3, r0, #1
 8008364:	d00a      	beq.n	800837c <sbrk_aligned+0x34>
 8008366:	1cc4      	adds	r4, r0, #3
 8008368:	f024 0403 	bic.w	r4, r4, #3
 800836c:	42a0      	cmp	r0, r4
 800836e:	d007      	beq.n	8008380 <sbrk_aligned+0x38>
 8008370:	1a21      	subs	r1, r4, r0
 8008372:	4628      	mov	r0, r5
 8008374:	f000 f8ac 	bl	80084d0 <_sbrk_r>
 8008378:	3001      	adds	r0, #1
 800837a:	d101      	bne.n	8008380 <sbrk_aligned+0x38>
 800837c:	f04f 34ff 	mov.w	r4, #4294967295
 8008380:	4620      	mov	r0, r4
 8008382:	bd70      	pop	{r4, r5, r6, pc}
 8008384:	2000232c 	.word	0x2000232c

08008388 <_malloc_r>:
 8008388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800838c:	1ccd      	adds	r5, r1, #3
 800838e:	f025 0503 	bic.w	r5, r5, #3
 8008392:	3508      	adds	r5, #8
 8008394:	2d0c      	cmp	r5, #12
 8008396:	bf38      	it	cc
 8008398:	250c      	movcc	r5, #12
 800839a:	2d00      	cmp	r5, #0
 800839c:	4607      	mov	r7, r0
 800839e:	db01      	blt.n	80083a4 <_malloc_r+0x1c>
 80083a0:	42a9      	cmp	r1, r5
 80083a2:	d905      	bls.n	80083b0 <_malloc_r+0x28>
 80083a4:	230c      	movs	r3, #12
 80083a6:	603b      	str	r3, [r7, #0]
 80083a8:	2600      	movs	r6, #0
 80083aa:	4630      	mov	r0, r6
 80083ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083b0:	4e2e      	ldr	r6, [pc, #184]	; (800846c <_malloc_r+0xe4>)
 80083b2:	f000 f89d 	bl	80084f0 <__malloc_lock>
 80083b6:	6833      	ldr	r3, [r6, #0]
 80083b8:	461c      	mov	r4, r3
 80083ba:	bb34      	cbnz	r4, 800840a <_malloc_r+0x82>
 80083bc:	4629      	mov	r1, r5
 80083be:	4638      	mov	r0, r7
 80083c0:	f7ff ffc2 	bl	8008348 <sbrk_aligned>
 80083c4:	1c43      	adds	r3, r0, #1
 80083c6:	4604      	mov	r4, r0
 80083c8:	d14d      	bne.n	8008466 <_malloc_r+0xde>
 80083ca:	6834      	ldr	r4, [r6, #0]
 80083cc:	4626      	mov	r6, r4
 80083ce:	2e00      	cmp	r6, #0
 80083d0:	d140      	bne.n	8008454 <_malloc_r+0xcc>
 80083d2:	6823      	ldr	r3, [r4, #0]
 80083d4:	4631      	mov	r1, r6
 80083d6:	4638      	mov	r0, r7
 80083d8:	eb04 0803 	add.w	r8, r4, r3
 80083dc:	f000 f878 	bl	80084d0 <_sbrk_r>
 80083e0:	4580      	cmp	r8, r0
 80083e2:	d13a      	bne.n	800845a <_malloc_r+0xd2>
 80083e4:	6821      	ldr	r1, [r4, #0]
 80083e6:	3503      	adds	r5, #3
 80083e8:	1a6d      	subs	r5, r5, r1
 80083ea:	f025 0503 	bic.w	r5, r5, #3
 80083ee:	3508      	adds	r5, #8
 80083f0:	2d0c      	cmp	r5, #12
 80083f2:	bf38      	it	cc
 80083f4:	250c      	movcc	r5, #12
 80083f6:	4629      	mov	r1, r5
 80083f8:	4638      	mov	r0, r7
 80083fa:	f7ff ffa5 	bl	8008348 <sbrk_aligned>
 80083fe:	3001      	adds	r0, #1
 8008400:	d02b      	beq.n	800845a <_malloc_r+0xd2>
 8008402:	6823      	ldr	r3, [r4, #0]
 8008404:	442b      	add	r3, r5
 8008406:	6023      	str	r3, [r4, #0]
 8008408:	e00e      	b.n	8008428 <_malloc_r+0xa0>
 800840a:	6822      	ldr	r2, [r4, #0]
 800840c:	1b52      	subs	r2, r2, r5
 800840e:	d41e      	bmi.n	800844e <_malloc_r+0xc6>
 8008410:	2a0b      	cmp	r2, #11
 8008412:	d916      	bls.n	8008442 <_malloc_r+0xba>
 8008414:	1961      	adds	r1, r4, r5
 8008416:	42a3      	cmp	r3, r4
 8008418:	6025      	str	r5, [r4, #0]
 800841a:	bf18      	it	ne
 800841c:	6059      	strne	r1, [r3, #4]
 800841e:	6863      	ldr	r3, [r4, #4]
 8008420:	bf08      	it	eq
 8008422:	6031      	streq	r1, [r6, #0]
 8008424:	5162      	str	r2, [r4, r5]
 8008426:	604b      	str	r3, [r1, #4]
 8008428:	4638      	mov	r0, r7
 800842a:	f104 060b 	add.w	r6, r4, #11
 800842e:	f000 f865 	bl	80084fc <__malloc_unlock>
 8008432:	f026 0607 	bic.w	r6, r6, #7
 8008436:	1d23      	adds	r3, r4, #4
 8008438:	1af2      	subs	r2, r6, r3
 800843a:	d0b6      	beq.n	80083aa <_malloc_r+0x22>
 800843c:	1b9b      	subs	r3, r3, r6
 800843e:	50a3      	str	r3, [r4, r2]
 8008440:	e7b3      	b.n	80083aa <_malloc_r+0x22>
 8008442:	6862      	ldr	r2, [r4, #4]
 8008444:	42a3      	cmp	r3, r4
 8008446:	bf0c      	ite	eq
 8008448:	6032      	streq	r2, [r6, #0]
 800844a:	605a      	strne	r2, [r3, #4]
 800844c:	e7ec      	b.n	8008428 <_malloc_r+0xa0>
 800844e:	4623      	mov	r3, r4
 8008450:	6864      	ldr	r4, [r4, #4]
 8008452:	e7b2      	b.n	80083ba <_malloc_r+0x32>
 8008454:	4634      	mov	r4, r6
 8008456:	6876      	ldr	r6, [r6, #4]
 8008458:	e7b9      	b.n	80083ce <_malloc_r+0x46>
 800845a:	230c      	movs	r3, #12
 800845c:	603b      	str	r3, [r7, #0]
 800845e:	4638      	mov	r0, r7
 8008460:	f000 f84c 	bl	80084fc <__malloc_unlock>
 8008464:	e7a1      	b.n	80083aa <_malloc_r+0x22>
 8008466:	6025      	str	r5, [r4, #0]
 8008468:	e7de      	b.n	8008428 <_malloc_r+0xa0>
 800846a:	bf00      	nop
 800846c:	20002328 	.word	0x20002328

08008470 <_realloc_r>:
 8008470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008474:	4680      	mov	r8, r0
 8008476:	4614      	mov	r4, r2
 8008478:	460e      	mov	r6, r1
 800847a:	b921      	cbnz	r1, 8008486 <_realloc_r+0x16>
 800847c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008480:	4611      	mov	r1, r2
 8008482:	f7ff bf81 	b.w	8008388 <_malloc_r>
 8008486:	b92a      	cbnz	r2, 8008494 <_realloc_r+0x24>
 8008488:	f7ff ff12 	bl	80082b0 <_free_r>
 800848c:	4625      	mov	r5, r4
 800848e:	4628      	mov	r0, r5
 8008490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008494:	f000 f838 	bl	8008508 <_malloc_usable_size_r>
 8008498:	4284      	cmp	r4, r0
 800849a:	4607      	mov	r7, r0
 800849c:	d802      	bhi.n	80084a4 <_realloc_r+0x34>
 800849e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80084a2:	d812      	bhi.n	80084ca <_realloc_r+0x5a>
 80084a4:	4621      	mov	r1, r4
 80084a6:	4640      	mov	r0, r8
 80084a8:	f7ff ff6e 	bl	8008388 <_malloc_r>
 80084ac:	4605      	mov	r5, r0
 80084ae:	2800      	cmp	r0, #0
 80084b0:	d0ed      	beq.n	800848e <_realloc_r+0x1e>
 80084b2:	42bc      	cmp	r4, r7
 80084b4:	4622      	mov	r2, r4
 80084b6:	4631      	mov	r1, r6
 80084b8:	bf28      	it	cs
 80084ba:	463a      	movcs	r2, r7
 80084bc:	f7ff fed0 	bl	8008260 <memcpy>
 80084c0:	4631      	mov	r1, r6
 80084c2:	4640      	mov	r0, r8
 80084c4:	f7ff fef4 	bl	80082b0 <_free_r>
 80084c8:	e7e1      	b.n	800848e <_realloc_r+0x1e>
 80084ca:	4635      	mov	r5, r6
 80084cc:	e7df      	b.n	800848e <_realloc_r+0x1e>
	...

080084d0 <_sbrk_r>:
 80084d0:	b538      	push	{r3, r4, r5, lr}
 80084d2:	4d06      	ldr	r5, [pc, #24]	; (80084ec <_sbrk_r+0x1c>)
 80084d4:	2300      	movs	r3, #0
 80084d6:	4604      	mov	r4, r0
 80084d8:	4608      	mov	r0, r1
 80084da:	602b      	str	r3, [r5, #0]
 80084dc:	f7f9 fc18 	bl	8001d10 <_sbrk>
 80084e0:	1c43      	adds	r3, r0, #1
 80084e2:	d102      	bne.n	80084ea <_sbrk_r+0x1a>
 80084e4:	682b      	ldr	r3, [r5, #0]
 80084e6:	b103      	cbz	r3, 80084ea <_sbrk_r+0x1a>
 80084e8:	6023      	str	r3, [r4, #0]
 80084ea:	bd38      	pop	{r3, r4, r5, pc}
 80084ec:	20002330 	.word	0x20002330

080084f0 <__malloc_lock>:
 80084f0:	4801      	ldr	r0, [pc, #4]	; (80084f8 <__malloc_lock+0x8>)
 80084f2:	f000 b811 	b.w	8008518 <__retarget_lock_acquire_recursive>
 80084f6:	bf00      	nop
 80084f8:	20002334 	.word	0x20002334

080084fc <__malloc_unlock>:
 80084fc:	4801      	ldr	r0, [pc, #4]	; (8008504 <__malloc_unlock+0x8>)
 80084fe:	f000 b80c 	b.w	800851a <__retarget_lock_release_recursive>
 8008502:	bf00      	nop
 8008504:	20002334 	.word	0x20002334

08008508 <_malloc_usable_size_r>:
 8008508:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800850c:	1f18      	subs	r0, r3, #4
 800850e:	2b00      	cmp	r3, #0
 8008510:	bfbc      	itt	lt
 8008512:	580b      	ldrlt	r3, [r1, r0]
 8008514:	18c0      	addlt	r0, r0, r3
 8008516:	4770      	bx	lr

08008518 <__retarget_lock_acquire_recursive>:
 8008518:	4770      	bx	lr

0800851a <__retarget_lock_release_recursive>:
 800851a:	4770      	bx	lr

0800851c <_init>:
 800851c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800851e:	bf00      	nop
 8008520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008522:	bc08      	pop	{r3}
 8008524:	469e      	mov	lr, r3
 8008526:	4770      	bx	lr

08008528 <_fini>:
 8008528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800852a:	bf00      	nop
 800852c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800852e:	bc08      	pop	{r3}
 8008530:	469e      	mov	lr, r3
 8008532:	4770      	bx	lr


Multi-Functional Light-Source.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f38  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080040cc  080040cc  000140cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004104  08004104  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08004104  08004104  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004104  08004104  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004104  08004104  00014104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004108  08004108  00014108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  0800410c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020020  2**0
                  CONTENTS
 10 .bss          000000b8  20000020  20000020  00020020  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000d8  200000d8  00020020  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b408  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a9c  00000000  00000000  0002b458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000768  00000000  00000000  0002cef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006d0  00000000  00000000  0002d660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fd81  00000000  00000000  0002dd30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000aca0  00000000  00000000  0004dab1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c04d2  00000000  00000000  00058751  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00118c23  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001cc8  00000000  00000000  00118c74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000020 	.word	0x20000020
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080040b4 	.word	0x080040b4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000024 	.word	0x20000024
 80001d0:	080040b4 	.word	0x080040b4

080001d4 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t studentNum[13]="#:23765518:$\n" ;
uint8_t recvd_char[1];
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]

	//transmit recvd characer
	HAL_UART_Transmit(&huart2, recvd_char, 1, 50) ;
 80001dc:	2332      	movs	r3, #50	; 0x32
 80001de:	2201      	movs	r2, #1
 80001e0:	4906      	ldr	r1, [pc, #24]	; (80001fc <HAL_UART_RxCpltCallback+0x28>)
 80001e2:	4807      	ldr	r0, [pc, #28]	; (8000200 <HAL_UART_RxCpltCallback+0x2c>)
 80001e4:	f002 fcc4 	bl	8002b70 <HAL_UART_Transmit>

	// recieve character
	HAL_UART_Receive_IT(&huart2, recvd_char, 1);
 80001e8:	2201      	movs	r2, #1
 80001ea:	4904      	ldr	r1, [pc, #16]	; (80001fc <HAL_UART_RxCpltCallback+0x28>)
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <HAL_UART_RxCpltCallback+0x2c>)
 80001ee:	f002 fd49 	bl	8002c84 <HAL_UART_Receive_IT>
}
 80001f2:	bf00      	nop
 80001f4:	3708      	adds	r7, #8
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	200000c8 	.word	0x200000c8
 8000200:	2000003c 	.word	0x2000003c

08000204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000208:	f000 fbcc 	bl	80009a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800020c:	f000 f8d8 	bl	80003c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000210:	f000 f966 	bl	80004e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000214:	f000 f932 	bl	800047c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(200);
 8000218:	20c8      	movs	r0, #200	; 0xc8
 800021a:	f000 fc29 	bl	8000a70 <HAL_Delay>
  HAL_UART_Transmit(&huart2, studentNum, 13, 150); //transmit student number
 800021e:	2396      	movs	r3, #150	; 0x96
 8000220:	220d      	movs	r2, #13
 8000222:	495d      	ldr	r1, [pc, #372]	; (8000398 <main+0x194>)
 8000224:	485d      	ldr	r0, [pc, #372]	; (800039c <main+0x198>)
 8000226:	f002 fca3 	bl	8002b70 <HAL_UART_Transmit>

  HAL_UART_Receive_IT(&huart2, recvd_char, 1); //recv character input
 800022a:	2201      	movs	r2, #1
 800022c:	495c      	ldr	r1, [pc, #368]	; (80003a0 <main+0x19c>)
 800022e:	485b      	ldr	r0, [pc, #364]	; (800039c <main+0x198>)
 8000230:	f002 fd28 	bl	8002c84 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 //10 ms delay
	 if(left_button_pressed ==1 || start_up == 1){
 8000234:	4b5b      	ldr	r3, [pc, #364]	; (80003a4 <main+0x1a0>)
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	2b01      	cmp	r3, #1
 800023a:	d003      	beq.n	8000244 <main+0x40>
 800023c:	4b5a      	ldr	r3, [pc, #360]	; (80003a8 <main+0x1a4>)
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	2b01      	cmp	r3, #1
 8000242:	d16b      	bne.n	800031c <main+0x118>
		 start_up = 0 ; //for default MF state
 8000244:	4b58      	ldr	r3, [pc, #352]	; (80003a8 <main+0x1a4>)
 8000246:	2200      	movs	r2, #0
 8000248:	701a      	strb	r2, [r3, #0]
		 button_count++ ;
 800024a:	4b58      	ldr	r3, [pc, #352]	; (80003ac <main+0x1a8>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	3301      	adds	r3, #1
 8000250:	4a56      	ldr	r2, [pc, #344]	; (80003ac <main+0x1a8>)
 8000252:	6013      	str	r3, [r2, #0]

		 if(button_count > 3){
 8000254:	4b55      	ldr	r3, [pc, #340]	; (80003ac <main+0x1a8>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	2b03      	cmp	r3, #3
 800025a:	dd02      	ble.n	8000262 <main+0x5e>
			 button_count = 1 ;
 800025c:	4b53      	ldr	r3, [pc, #332]	; (80003ac <main+0x1a8>)
 800025e:	2201      	movs	r2, #1
 8000260:	601a      	str	r2, [r3, #0]
		 }

		 if(button_count == 1){
 8000262:	4b52      	ldr	r3, [pc, #328]	; (80003ac <main+0x1a8>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	2b01      	cmp	r3, #1
 8000268:	d11d      	bne.n	80002a6 <main+0xa2>
			 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800026a:	2201      	movs	r2, #1
 800026c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000270:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000274:	f000 ff4a 	bl	800110c <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000278:	2200      	movs	r2, #0
 800027a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800027e:	484c      	ldr	r0, [pc, #304]	; (80003b0 <main+0x1ac>)
 8000280:	f000 ff44 	bl	800110c <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000284:	2200      	movs	r2, #0
 8000286:	2110      	movs	r1, #16
 8000288:	4849      	ldr	r0, [pc, #292]	; (80003b0 <main+0x1ac>)
 800028a:	f000 ff3f 	bl	800110c <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800028e:	2200      	movs	r2, #0
 8000290:	2120      	movs	r1, #32
 8000292:	4847      	ldr	r0, [pc, #284]	; (80003b0 <main+0x1ac>)
 8000294:	f000 ff3a 	bl	800110c <HAL_GPIO_WritePin>
			 em_count=1;
 8000298:	4b46      	ldr	r3, [pc, #280]	; (80003b4 <main+0x1b0>)
 800029a:	2201      	movs	r2, #1
 800029c:	701a      	strb	r2, [r3, #0]
			 em_default = 1; // to re-enter the EM state
 800029e:	4b46      	ldr	r3, [pc, #280]	; (80003b8 <main+0x1b4>)
 80002a0:	2201      	movs	r2, #1
 80002a2:	701a      	strb	r2, [r3, #0]
 80002a4:	e037      	b.n	8000316 <main+0x112>
		 }
		 else if(button_count == 2){
 80002a6:	4b41      	ldr	r3, [pc, #260]	; (80003ac <main+0x1a8>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	2b02      	cmp	r3, #2
 80002ac:	d112      	bne.n	80002d4 <main+0xd0>
			 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80002ae:	2200      	movs	r2, #0
 80002b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002b8:	f000 ff28 	bl	800110c <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80002bc:	2201      	movs	r2, #1
 80002be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002c2:	483b      	ldr	r0, [pc, #236]	; (80003b0 <main+0x1ac>)
 80002c4:	f000 ff22 	bl	800110c <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80002c8:	2200      	movs	r2, #0
 80002ca:	2110      	movs	r1, #16
 80002cc:	4838      	ldr	r0, [pc, #224]	; (80003b0 <main+0x1ac>)
 80002ce:	f000 ff1d 	bl	800110c <HAL_GPIO_WritePin>
 80002d2:	e020      	b.n	8000316 <main+0x112>


		 }else{
			 if(button_count == 3){
 80002d4:	4b35      	ldr	r3, [pc, #212]	; (80003ac <main+0x1a8>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	2b03      	cmp	r3, #3
 80002da:	d11c      	bne.n	8000316 <main+0x112>
				 em_count=1;
 80002dc:	4b35      	ldr	r3, [pc, #212]	; (80003b4 <main+0x1b0>)
 80002de:	2201      	movs	r2, #1
 80002e0:	701a      	strb	r2, [r3, #0]
				 em_default = 1; // to re-enter EM state
 80002e2:	4b35      	ldr	r3, [pc, #212]	; (80003b8 <main+0x1b4>)
 80002e4:	2201      	movs	r2, #1
 80002e6:	701a      	strb	r2, [r3, #0]
				 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80002e8:	2200      	movs	r2, #0
 80002ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002f2:	f000 ff0b 	bl	800110c <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80002f6:	2200      	movs	r2, #0
 80002f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002fc:	482c      	ldr	r0, [pc, #176]	; (80003b0 <main+0x1ac>)
 80002fe:	f000 ff05 	bl	800110c <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000302:	2201      	movs	r2, #1
 8000304:	2110      	movs	r1, #16
 8000306:	482a      	ldr	r0, [pc, #168]	; (80003b0 <main+0x1ac>)
 8000308:	f000 ff00 	bl	800110c <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800030c:	2200      	movs	r2, #0
 800030e:	2120      	movs	r1, #32
 8000310:	4827      	ldr	r0, [pc, #156]	; (80003b0 <main+0x1ac>)
 8000312:	f000 fefb 	bl	800110c <HAL_GPIO_WritePin>
			 }
		 }
		 left_button_pressed = 0 ;
 8000316:	4b23      	ldr	r3, [pc, #140]	; (80003a4 <main+0x1a0>)
 8000318:	2200      	movs	r2, #0
 800031a:	701a      	strb	r2, [r3, #0]
	 }

	 //EMERGENCY MODES
	  if(button_count ==2 ){
 800031c:	4b23      	ldr	r3, [pc, #140]	; (80003ac <main+0x1a8>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	2b02      	cmp	r3, #2
 8000322:	d187      	bne.n	8000234 <main+0x30>
		 if(right_button_pressed ==1){
 8000324:	4b25      	ldr	r3, [pc, #148]	; (80003bc <main+0x1b8>)
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	2b01      	cmp	r3, #1
 800032a:	d10f      	bne.n	800034c <main+0x148>
			 right_button_pressed = 0  ;
 800032c:	4b23      	ldr	r3, [pc, #140]	; (80003bc <main+0x1b8>)
 800032e:	2200      	movs	r2, #0
 8000330:	701a      	strb	r2, [r3, #0]
			 em_count++ ;
 8000332:	4b20      	ldr	r3, [pc, #128]	; (80003b4 <main+0x1b0>)
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	3301      	adds	r3, #1
 8000338:	b2da      	uxtb	r2, r3
 800033a:	4b1e      	ldr	r3, [pc, #120]	; (80003b4 <main+0x1b0>)
 800033c:	701a      	strb	r2, [r3, #0]

			 if(em_count>3){
 800033e:	4b1d      	ldr	r3, [pc, #116]	; (80003b4 <main+0x1b0>)
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	2b03      	cmp	r3, #3
 8000344:	d902      	bls.n	800034c <main+0x148>
				 em_count = 1 ;
 8000346:	4b1b      	ldr	r3, [pc, #108]	; (80003b4 <main+0x1b0>)
 8000348:	2201      	movs	r2, #1
 800034a:	701a      	strb	r2, [r3, #0]
			 }
		 }
		 if(em_count == 1 || em_default ==1){ //strobe wit default intensity
 800034c:	4b19      	ldr	r3, [pc, #100]	; (80003b4 <main+0x1b0>)
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	2b01      	cmp	r3, #1
 8000352:	d003      	beq.n	800035c <main+0x158>
 8000354:	4b18      	ldr	r3, [pc, #96]	; (80003b8 <main+0x1b4>)
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	2b01      	cmp	r3, #1
 800035a:	d108      	bne.n	800036e <main+0x16a>
			 em_default = 0 ; //default state reached
 800035c:	4b16      	ldr	r3, [pc, #88]	; (80003b8 <main+0x1b4>)
 800035e:	2200      	movs	r2, #0
 8000360:	701a      	strb	r2, [r3, #0]
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000362:	2200      	movs	r2, #0
 8000364:	2120      	movs	r1, #32
 8000366:	4812      	ldr	r0, [pc, #72]	; (80003b0 <main+0x1ac>)
 8000368:	f000 fed0 	bl	800110c <HAL_GPIO_WritePin>
 800036c:	e013      	b.n	8000396 <main+0x192>
		 }
		 else if(em_count ==2 ){ // SOS morse
 800036e:	4b11      	ldr	r3, [pc, #68]	; (80003b4 <main+0x1b0>)
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	2b02      	cmp	r3, #2
 8000374:	d105      	bne.n	8000382 <main+0x17e>

			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000376:	2201      	movs	r2, #1
 8000378:	2120      	movs	r1, #32
 800037a:	480d      	ldr	r0, [pc, #52]	; (80003b0 <main+0x1ac>)
 800037c:	f000 fec6 	bl	800110c <HAL_GPIO_WritePin>
 8000380:	e758      	b.n	8000234 <main+0x30>
		 }
		 else{
			 if(em_count == 3){ // custom morse
 8000382:	4b0c      	ldr	r3, [pc, #48]	; (80003b4 <main+0x1b0>)
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	2b03      	cmp	r3, #3
 8000388:	f47f af54 	bne.w	8000234 <main+0x30>
				 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800038c:	2201      	movs	r2, #1
 800038e:	2120      	movs	r1, #32
 8000390:	4807      	ldr	r0, [pc, #28]	; (80003b0 <main+0x1ac>)
 8000392:	f000 febb 	bl	800110c <HAL_GPIO_WritePin>
	 if(left_button_pressed ==1 || start_up == 1){
 8000396:	e74d      	b.n	8000234 <main+0x30>
 8000398:	20000004 	.word	0x20000004
 800039c:	2000003c 	.word	0x2000003c
 80003a0:	200000c8 	.word	0x200000c8
 80003a4:	200000d2 	.word	0x200000d2
 80003a8:	20000000 	.word	0x20000000
 80003ac:	200000c4 	.word	0x200000c4
 80003b0:	48000400 	.word	0x48000400
 80003b4:	20000001 	.word	0x20000001
 80003b8:	20000002 	.word	0x20000002
 80003bc:	200000d1 	.word	0x200000d1

080003c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b0a6      	sub	sp, #152	; 0x98
 80003c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003c6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80003ca:	2228      	movs	r2, #40	; 0x28
 80003cc:	2100      	movs	r1, #0
 80003ce:	4618      	mov	r0, r3
 80003d0:	f003 fe68 	bl	80040a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80003d8:	2200      	movs	r2, #0
 80003da:	601a      	str	r2, [r3, #0]
 80003dc:	605a      	str	r2, [r3, #4]
 80003de:	609a      	str	r2, [r3, #8]
 80003e0:	60da      	str	r2, [r3, #12]
 80003e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003e4:	1d3b      	adds	r3, r7, #4
 80003e6:	2258      	movs	r2, #88	; 0x58
 80003e8:	2100      	movs	r1, #0
 80003ea:	4618      	mov	r0, r3
 80003ec:	f003 fe5a 	bl	80040a4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003f0:	2302      	movs	r3, #2
 80003f2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003f4:	2301      	movs	r3, #1
 80003f6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003f8:	2310      	movs	r3, #16
 80003fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003fe:	2302      	movs	r3, #2
 8000400:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000404:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000408:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800040c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000410:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000414:	2300      	movs	r3, #0
 8000416:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800041a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800041e:	4618      	mov	r0, r3
 8000420:	f000 feb0 	bl	8001184 <HAL_RCC_OscConfig>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800042a:	f000 f8fd 	bl	8000628 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800042e:	230f      	movs	r3, #15
 8000430:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000432:	2302      	movs	r3, #2
 8000434:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000436:	2300      	movs	r3, #0
 8000438:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800043a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800043e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000440:	2300      	movs	r3, #0
 8000442:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000444:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000448:	2102      	movs	r1, #2
 800044a:	4618      	mov	r0, r3
 800044c:	f001 feee 	bl	800222c <HAL_RCC_ClockConfig>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000456:	f000 f8e7 	bl	8000628 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800045a:	2302      	movs	r3, #2
 800045c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800045e:	2300      	movs	r3, #0
 8000460:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000462:	1d3b      	adds	r3, r7, #4
 8000464:	4618      	mov	r0, r3
 8000466:	f002 f917 	bl	8002698 <HAL_RCCEx_PeriphCLKConfig>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000470:	f000 f8da 	bl	8000628 <Error_Handler>
  }
}
 8000474:	bf00      	nop
 8000476:	3798      	adds	r7, #152	; 0x98
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}

0800047c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000480:	4b15      	ldr	r3, [pc, #84]	; (80004d8 <MX_USART2_UART_Init+0x5c>)
 8000482:	4a16      	ldr	r2, [pc, #88]	; (80004dc <MX_USART2_UART_Init+0x60>)
 8000484:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8000486:	4b14      	ldr	r3, [pc, #80]	; (80004d8 <MX_USART2_UART_Init+0x5c>)
 8000488:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800048c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800048e:	4b12      	ldr	r3, [pc, #72]	; (80004d8 <MX_USART2_UART_Init+0x5c>)
 8000490:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000494:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8000496:	4b10      	ldr	r3, [pc, #64]	; (80004d8 <MX_USART2_UART_Init+0x5c>)
 8000498:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800049c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 800049e:	4b0e      	ldr	r3, [pc, #56]	; (80004d8 <MX_USART2_UART_Init+0x5c>)
 80004a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80004a4:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004a6:	4b0c      	ldr	r3, [pc, #48]	; (80004d8 <MX_USART2_UART_Init+0x5c>)
 80004a8:	220c      	movs	r2, #12
 80004aa:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004ac:	4b0a      	ldr	r3, [pc, #40]	; (80004d8 <MX_USART2_UART_Init+0x5c>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004b2:	4b09      	ldr	r3, [pc, #36]	; (80004d8 <MX_USART2_UART_Init+0x5c>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004b8:	4b07      	ldr	r3, [pc, #28]	; (80004d8 <MX_USART2_UART_Init+0x5c>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004be:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <MX_USART2_UART_Init+0x5c>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004c4:	4804      	ldr	r0, [pc, #16]	; (80004d8 <MX_USART2_UART_Init+0x5c>)
 80004c6:	f002 fb05 	bl	8002ad4 <HAL_UART_Init>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80004d0:	f000 f8aa 	bl	8000628 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004d4:	bf00      	nop
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	2000003c 	.word	0x2000003c
 80004dc:	40004400 	.word	0x40004400

080004e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b08a      	sub	sp, #40	; 0x28
 80004e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e6:	f107 0314 	add.w	r3, r7, #20
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
 80004ee:	605a      	str	r2, [r3, #4]
 80004f0:	609a      	str	r2, [r3, #8]
 80004f2:	60da      	str	r2, [r3, #12]
 80004f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004f6:	4b49      	ldr	r3, [pc, #292]	; (800061c <MX_GPIO_Init+0x13c>)
 80004f8:	695b      	ldr	r3, [r3, #20]
 80004fa:	4a48      	ldr	r2, [pc, #288]	; (800061c <MX_GPIO_Init+0x13c>)
 80004fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000500:	6153      	str	r3, [r2, #20]
 8000502:	4b46      	ldr	r3, [pc, #280]	; (800061c <MX_GPIO_Init+0x13c>)
 8000504:	695b      	ldr	r3, [r3, #20]
 8000506:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800050a:	613b      	str	r3, [r7, #16]
 800050c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800050e:	4b43      	ldr	r3, [pc, #268]	; (800061c <MX_GPIO_Init+0x13c>)
 8000510:	695b      	ldr	r3, [r3, #20]
 8000512:	4a42      	ldr	r2, [pc, #264]	; (800061c <MX_GPIO_Init+0x13c>)
 8000514:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000518:	6153      	str	r3, [r2, #20]
 800051a:	4b40      	ldr	r3, [pc, #256]	; (800061c <MX_GPIO_Init+0x13c>)
 800051c:	695b      	ldr	r3, [r3, #20]
 800051e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000526:	4b3d      	ldr	r3, [pc, #244]	; (800061c <MX_GPIO_Init+0x13c>)
 8000528:	695b      	ldr	r3, [r3, #20]
 800052a:	4a3c      	ldr	r2, [pc, #240]	; (800061c <MX_GPIO_Init+0x13c>)
 800052c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000530:	6153      	str	r3, [r2, #20]
 8000532:	4b3a      	ldr	r3, [pc, #232]	; (800061c <MX_GPIO_Init+0x13c>)
 8000534:	695b      	ldr	r3, [r3, #20]
 8000536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800053a:	60bb      	str	r3, [r7, #8]
 800053c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053e:	4b37      	ldr	r3, [pc, #220]	; (800061c <MX_GPIO_Init+0x13c>)
 8000540:	695b      	ldr	r3, [r3, #20]
 8000542:	4a36      	ldr	r2, [pc, #216]	; (800061c <MX_GPIO_Init+0x13c>)
 8000544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000548:	6153      	str	r3, [r2, #20]
 800054a:	4b34      	ldr	r3, [pc, #208]	; (800061c <MX_GPIO_Init+0x13c>)
 800054c:	695b      	ldr	r3, [r3, #20]
 800054e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED_D2_Pin, GPIO_PIN_RESET);
 8000556:	2200      	movs	r2, #0
 8000558:	f44f 7190 	mov.w	r1, #288	; 0x120
 800055c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000560:	f000 fdd4 	bl	800110c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_D3_Pin|LED_D4_Pin|LED_D5_Pin, GPIO_PIN_RESET);
 8000564:	2200      	movs	r2, #0
 8000566:	f44f 6186 	mov.w	r1, #1072	; 0x430
 800056a:	482d      	ldr	r0, [pc, #180]	; (8000620 <MX_GPIO_Init+0x140>)
 800056c:	f000 fdce 	bl	800110c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000570:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000576:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800057a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057c:	2300      	movs	r3, #0
 800057e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000580:	f107 0314 	add.w	r3, r7, #20
 8000584:	4619      	mov	r1, r3
 8000586:	4827      	ldr	r0, [pc, #156]	; (8000624 <MX_GPIO_Init+0x144>)
 8000588:	f000 fc1e 	bl	8000dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LED_D2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED_D2_Pin;
 800058c:	f44f 7390 	mov.w	r3, #288	; 0x120
 8000590:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000592:	2301      	movs	r3, #1
 8000594:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000596:	2300      	movs	r3, #0
 8000598:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059a:	2300      	movs	r3, #0
 800059c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800059e:	f107 0314 	add.w	r3, r7, #20
 80005a2:	4619      	mov	r1, r3
 80005a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a8:	f000 fc0e 	bl	8000dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80005ac:	23c0      	movs	r3, #192	; 0xc0
 80005ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80005b0:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80005b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005b6:	2301      	movs	r3, #1
 80005b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	4619      	mov	r1, r3
 80005c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c4:	f000 fc00 	bl	8000dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_D3_Pin LED_D4_Pin LED_D5_Pin */
  GPIO_InitStruct.Pin = LED_D3_Pin|LED_D4_Pin|LED_D5_Pin;
 80005c8:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80005cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ce:	2301      	movs	r3, #1
 80005d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	2300      	movs	r3, #0
 80005d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d6:	2300      	movs	r3, #0
 80005d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005da:	f107 0314 	add.w	r3, r7, #20
 80005de:	4619      	mov	r1, r3
 80005e0:	480f      	ldr	r0, [pc, #60]	; (8000620 <MX_GPIO_Init+0x140>)
 80005e2:	f000 fbf1 	bl	8000dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80005e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80005ec:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80005f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005f2:	2301      	movs	r3, #1
 80005f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005f6:	f107 0314 	add.w	r3, r7, #20
 80005fa:	4619      	mov	r1, r3
 80005fc:	4808      	ldr	r0, [pc, #32]	; (8000620 <MX_GPIO_Init+0x140>)
 80005fe:	f000 fbe3 	bl	8000dc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000602:	2200      	movs	r2, #0
 8000604:	2100      	movs	r1, #0
 8000606:	2017      	movs	r0, #23
 8000608:	f000 fb31 	bl	8000c6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800060c:	2017      	movs	r0, #23
 800060e:	f000 fb4a 	bl	8000ca6 <HAL_NVIC_EnableIRQ>

}
 8000612:	bf00      	nop
 8000614:	3728      	adds	r7, #40	; 0x28
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40021000 	.word	0x40021000
 8000620:	48000400 	.word	0x48000400
 8000624:	48000800 	.word	0x48000800

08000628 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800062c:	b672      	cpsid	i
}
 800062e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000630:	e7fe      	b.n	8000630 <Error_Handler+0x8>
	...

08000634 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800063a:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <HAL_MspInit+0x44>)
 800063c:	699b      	ldr	r3, [r3, #24]
 800063e:	4a0e      	ldr	r2, [pc, #56]	; (8000678 <HAL_MspInit+0x44>)
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	6193      	str	r3, [r2, #24]
 8000646:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <HAL_MspInit+0x44>)
 8000648:	699b      	ldr	r3, [r3, #24]
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000652:	4b09      	ldr	r3, [pc, #36]	; (8000678 <HAL_MspInit+0x44>)
 8000654:	69db      	ldr	r3, [r3, #28]
 8000656:	4a08      	ldr	r2, [pc, #32]	; (8000678 <HAL_MspInit+0x44>)
 8000658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065c:	61d3      	str	r3, [r2, #28]
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <HAL_MspInit+0x44>)
 8000660:	69db      	ldr	r3, [r3, #28]
 8000662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000666:	603b      	str	r3, [r7, #0]
 8000668:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800066a:	2007      	movs	r0, #7
 800066c:	f000 faf4 	bl	8000c58 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40021000 	.word	0x40021000

0800067c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08a      	sub	sp, #40	; 0x28
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a1b      	ldr	r2, [pc, #108]	; (8000708 <HAL_UART_MspInit+0x8c>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d130      	bne.n	8000700 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800069e:	4b1b      	ldr	r3, [pc, #108]	; (800070c <HAL_UART_MspInit+0x90>)
 80006a0:	69db      	ldr	r3, [r3, #28]
 80006a2:	4a1a      	ldr	r2, [pc, #104]	; (800070c <HAL_UART_MspInit+0x90>)
 80006a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006a8:	61d3      	str	r3, [r2, #28]
 80006aa:	4b18      	ldr	r3, [pc, #96]	; (800070c <HAL_UART_MspInit+0x90>)
 80006ac:	69db      	ldr	r3, [r3, #28]
 80006ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006b2:	613b      	str	r3, [r7, #16]
 80006b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b6:	4b15      	ldr	r3, [pc, #84]	; (800070c <HAL_UART_MspInit+0x90>)
 80006b8:	695b      	ldr	r3, [r3, #20]
 80006ba:	4a14      	ldr	r2, [pc, #80]	; (800070c <HAL_UART_MspInit+0x90>)
 80006bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006c0:	6153      	str	r3, [r2, #20]
 80006c2:	4b12      	ldr	r3, [pc, #72]	; (800070c <HAL_UART_MspInit+0x90>)
 80006c4:	695b      	ldr	r3, [r3, #20]
 80006c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80006ce:	230c      	movs	r3, #12
 80006d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d2:	2302      	movs	r3, #2
 80006d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006da:	2300      	movs	r3, #0
 80006dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80006de:	2307      	movs	r3, #7
 80006e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e2:	f107 0314 	add.w	r3, r7, #20
 80006e6:	4619      	mov	r1, r3
 80006e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ec:	f000 fb6c 	bl	8000dc8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2100      	movs	r1, #0
 80006f4:	2026      	movs	r0, #38	; 0x26
 80006f6:	f000 faba 	bl	8000c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80006fa:	2026      	movs	r0, #38	; 0x26
 80006fc:	f000 fad3 	bl	8000ca6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000700:	bf00      	nop
 8000702:	3728      	adds	r7, #40	; 0x28
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40004400 	.word	0x40004400
 800070c:	40021000 	.word	0x40021000

08000710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000714:	e7fe      	b.n	8000714 <NMI_Handler+0x4>

08000716 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800071a:	e7fe      	b.n	800071a <HardFault_Handler+0x4>

0800071c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000720:	e7fe      	b.n	8000720 <MemManage_Handler+0x4>

08000722 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000722:	b480      	push	{r7}
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000726:	e7fe      	b.n	8000726 <BusFault_Handler+0x4>

08000728 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800072c:	e7fe      	b.n	800072c <UsageFault_Handler+0x4>

0800072e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000732:	bf00      	nop
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr

0800073c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr

0800074a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800074a:	b480      	push	{r7}
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800074e:	bf00      	nop
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr

08000758 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800075c:	f000 f968 	bl	8000a30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}

08000764 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_6) != RESET){
 8000768:	4b64      	ldr	r3, [pc, #400]	; (80008fc <EXTI9_5_IRQHandler+0x198>)
 800076a:	695b      	ldr	r3, [r3, #20]
 800076c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000770:	2b00      	cmp	r3, #0
 8000772:	d038      	beq.n	80007e6 <EXTI9_5_IRQHandler+0x82>

		if(HAL_GetTick() - ticks_pressed >= 20){
 8000774:	f000 f970 	bl	8000a58 <HAL_GetTick>
 8000778:	4602      	mov	r2, r0
 800077a:	4b61      	ldr	r3, [pc, #388]	; (8000900 <EXTI9_5_IRQHandler+0x19c>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	1ad3      	subs	r3, r2, r3
 8000780:	2b13      	cmp	r3, #19
 8000782:	d92c      	bls.n	80007de <EXTI9_5_IRQHandler+0x7a>
			// stable low state
			if(button_state == 1  && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == 0){
 8000784:	4b5f      	ldr	r3, [pc, #380]	; (8000904 <EXTI9_5_IRQHandler+0x1a0>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	b2db      	uxtb	r3, r3
 800078a:	2b01      	cmp	r3, #1
 800078c:	d112      	bne.n	80007b4 <EXTI9_5_IRQHandler+0x50>
 800078e:	2140      	movs	r1, #64	; 0x40
 8000790:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000794:	f000 fca2 	bl	80010dc <HAL_GPIO_ReadPin>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d10a      	bne.n	80007b4 <EXTI9_5_IRQHandler+0x50>
				button_state =0 ; // stable low reached
 800079e:	4b59      	ldr	r3, [pc, #356]	; (8000904 <EXTI9_5_IRQHandler+0x1a0>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	701a      	strb	r2, [r3, #0]
				ticks_pressed = HAL_GetTick() ;
 80007a4:	f000 f958 	bl	8000a58 <HAL_GetTick>
 80007a8:	4603      	mov	r3, r0
 80007aa:	4a55      	ldr	r2, [pc, #340]	; (8000900 <EXTI9_5_IRQHandler+0x19c>)
 80007ac:	6013      	str	r3, [r2, #0]

				middle_button_pressed = 1;
 80007ae:	4b56      	ldr	r3, [pc, #344]	; (8000908 <EXTI9_5_IRQHandler+0x1a4>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	701a      	strb	r2, [r3, #0]
			}

			// stable high state
			if(button_state == 0 && HAL_GPIO_ReadPin(GPIOA ,GPIO_PIN_6) == 1 ){
 80007b4:	4b53      	ldr	r3, [pc, #332]	; (8000904 <EXTI9_5_IRQHandler+0x1a0>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d10f      	bne.n	80007de <EXTI9_5_IRQHandler+0x7a>
 80007be:	2140      	movs	r1, #64	; 0x40
 80007c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c4:	f000 fc8a 	bl	80010dc <HAL_GPIO_ReadPin>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d107      	bne.n	80007de <EXTI9_5_IRQHandler+0x7a>
				ticks_pressed = HAL_GetTick() ;
 80007ce:	f000 f943 	bl	8000a58 <HAL_GetTick>
 80007d2:	4603      	mov	r3, r0
 80007d4:	4a4a      	ldr	r2, [pc, #296]	; (8000900 <EXTI9_5_IRQHandler+0x19c>)
 80007d6:	6013      	str	r3, [r2, #0]
				button_state =1 ; // stable high state
 80007d8:	4b4a      	ldr	r3, [pc, #296]	; (8000904 <EXTI9_5_IRQHandler+0x1a0>)
 80007da:	2201      	movs	r2, #1
 80007dc:	701a      	strb	r2, [r3, #0]

			}
		}
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6) ;
 80007de:	4b47      	ldr	r3, [pc, #284]	; (80008fc <EXTI9_5_IRQHandler+0x198>)
 80007e0:	2240      	movs	r2, #64	; 0x40
 80007e2:	615a      	str	r2, [r3, #20]
 80007e4:	e07d      	b.n	80008e2 <EXTI9_5_IRQHandler+0x17e>
	}
	else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET){
 80007e6:	4b45      	ldr	r3, [pc, #276]	; (80008fc <EXTI9_5_IRQHandler+0x198>)
 80007e8:	695b      	ldr	r3, [r3, #20]
 80007ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d038      	beq.n	8000864 <EXTI9_5_IRQHandler+0x100>

			if(HAL_GetTick() - ticks_pressed >= 20){
 80007f2:	f000 f931 	bl	8000a58 <HAL_GetTick>
 80007f6:	4602      	mov	r2, r0
 80007f8:	4b41      	ldr	r3, [pc, #260]	; (8000900 <EXTI9_5_IRQHandler+0x19c>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	1ad3      	subs	r3, r2, r3
 80007fe:	2b13      	cmp	r3, #19
 8000800:	d92c      	bls.n	800085c <EXTI9_5_IRQHandler+0xf8>
				// stable low state
				if(button_state == 1  && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == 0){
 8000802:	4b40      	ldr	r3, [pc, #256]	; (8000904 <EXTI9_5_IRQHandler+0x1a0>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	b2db      	uxtb	r3, r3
 8000808:	2b01      	cmp	r3, #1
 800080a:	d112      	bne.n	8000832 <EXTI9_5_IRQHandler+0xce>
 800080c:	2180      	movs	r1, #128	; 0x80
 800080e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000812:	f000 fc63 	bl	80010dc <HAL_GPIO_ReadPin>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d10a      	bne.n	8000832 <EXTI9_5_IRQHandler+0xce>
					button_state =0 ; // stable low reached
 800081c:	4b39      	ldr	r3, [pc, #228]	; (8000904 <EXTI9_5_IRQHandler+0x1a0>)
 800081e:	2200      	movs	r2, #0
 8000820:	701a      	strb	r2, [r3, #0]
					ticks_pressed = HAL_GetTick() ;
 8000822:	f000 f919 	bl	8000a58 <HAL_GetTick>
 8000826:	4603      	mov	r3, r0
 8000828:	4a35      	ldr	r2, [pc, #212]	; (8000900 <EXTI9_5_IRQHandler+0x19c>)
 800082a:	6013      	str	r3, [r2, #0]

					right_button_pressed = 1;
 800082c:	4b37      	ldr	r3, [pc, #220]	; (800090c <EXTI9_5_IRQHandler+0x1a8>)
 800082e:	2201      	movs	r2, #1
 8000830:	701a      	strb	r2, [r3, #0]
				}

				// stable high state
				if(button_state == 0 && HAL_GPIO_ReadPin(GPIOA ,GPIO_PIN_7) == 1 ){
 8000832:	4b34      	ldr	r3, [pc, #208]	; (8000904 <EXTI9_5_IRQHandler+0x1a0>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	b2db      	uxtb	r3, r3
 8000838:	2b00      	cmp	r3, #0
 800083a:	d10f      	bne.n	800085c <EXTI9_5_IRQHandler+0xf8>
 800083c:	2180      	movs	r1, #128	; 0x80
 800083e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000842:	f000 fc4b 	bl	80010dc <HAL_GPIO_ReadPin>
 8000846:	4603      	mov	r3, r0
 8000848:	2b01      	cmp	r3, #1
 800084a:	d107      	bne.n	800085c <EXTI9_5_IRQHandler+0xf8>
					ticks_pressed = HAL_GetTick() ;
 800084c:	f000 f904 	bl	8000a58 <HAL_GetTick>
 8000850:	4603      	mov	r3, r0
 8000852:	4a2b      	ldr	r2, [pc, #172]	; (8000900 <EXTI9_5_IRQHandler+0x19c>)
 8000854:	6013      	str	r3, [r2, #0]
					button_state =1 ; // stable high state
 8000856:	4b2b      	ldr	r3, [pc, #172]	; (8000904 <EXTI9_5_IRQHandler+0x1a0>)
 8000858:	2201      	movs	r2, #1
 800085a:	701a      	strb	r2, [r3, #0]

				}
			}


			__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7) ;
 800085c:	4b27      	ldr	r3, [pc, #156]	; (80008fc <EXTI9_5_IRQHandler+0x198>)
 800085e:	2280      	movs	r2, #128	; 0x80
 8000860:	615a      	str	r2, [r3, #20]
 8000862:	e03e      	b.n	80008e2 <EXTI9_5_IRQHandler+0x17e>
	}
	else{
		if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_8) != RESET){
 8000864:	4b25      	ldr	r3, [pc, #148]	; (80008fc <EXTI9_5_IRQHandler+0x198>)
 8000866:	695b      	ldr	r3, [r3, #20]
 8000868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800086c:	2b00      	cmp	r3, #0
 800086e:	d038      	beq.n	80008e2 <EXTI9_5_IRQHandler+0x17e>

				if(HAL_GetTick() - ticks_pressed >= 20){
 8000870:	f000 f8f2 	bl	8000a58 <HAL_GetTick>
 8000874:	4602      	mov	r2, r0
 8000876:	4b22      	ldr	r3, [pc, #136]	; (8000900 <EXTI9_5_IRQHandler+0x19c>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	1ad3      	subs	r3, r2, r3
 800087c:	2b13      	cmp	r3, #19
 800087e:	d92c      	bls.n	80008da <EXTI9_5_IRQHandler+0x176>
					// stable low state
					if(button_state == 1  && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == 0){
 8000880:	4b20      	ldr	r3, [pc, #128]	; (8000904 <EXTI9_5_IRQHandler+0x1a0>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	b2db      	uxtb	r3, r3
 8000886:	2b01      	cmp	r3, #1
 8000888:	d112      	bne.n	80008b0 <EXTI9_5_IRQHandler+0x14c>
 800088a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800088e:	4820      	ldr	r0, [pc, #128]	; (8000910 <EXTI9_5_IRQHandler+0x1ac>)
 8000890:	f000 fc24 	bl	80010dc <HAL_GPIO_ReadPin>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d10a      	bne.n	80008b0 <EXTI9_5_IRQHandler+0x14c>
						button_state =0 ; // stable low reached
 800089a:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <EXTI9_5_IRQHandler+0x1a0>)
 800089c:	2200      	movs	r2, #0
 800089e:	701a      	strb	r2, [r3, #0]
						ticks_pressed = HAL_GetTick() ;
 80008a0:	f000 f8da 	bl	8000a58 <HAL_GetTick>
 80008a4:	4603      	mov	r3, r0
 80008a6:	4a16      	ldr	r2, [pc, #88]	; (8000900 <EXTI9_5_IRQHandler+0x19c>)
 80008a8:	6013      	str	r3, [r2, #0]

						left_button_pressed = 1;
 80008aa:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <EXTI9_5_IRQHandler+0x1b0>)
 80008ac:	2201      	movs	r2, #1
 80008ae:	701a      	strb	r2, [r3, #0]
					}

					// stable high state
					if(button_state == 0 && HAL_GPIO_ReadPin(GPIOB ,GPIO_PIN_8) == 1 ){
 80008b0:	4b14      	ldr	r3, [pc, #80]	; (8000904 <EXTI9_5_IRQHandler+0x1a0>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d10f      	bne.n	80008da <EXTI9_5_IRQHandler+0x176>
 80008ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008be:	4814      	ldr	r0, [pc, #80]	; (8000910 <EXTI9_5_IRQHandler+0x1ac>)
 80008c0:	f000 fc0c 	bl	80010dc <HAL_GPIO_ReadPin>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d107      	bne.n	80008da <EXTI9_5_IRQHandler+0x176>
						ticks_pressed = HAL_GetTick() ;
 80008ca:	f000 f8c5 	bl	8000a58 <HAL_GetTick>
 80008ce:	4603      	mov	r3, r0
 80008d0:	4a0b      	ldr	r2, [pc, #44]	; (8000900 <EXTI9_5_IRQHandler+0x19c>)
 80008d2:	6013      	str	r3, [r2, #0]
						button_state =1 ; // stable high state
 80008d4:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <EXTI9_5_IRQHandler+0x1a0>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	701a      	strb	r2, [r3, #0]

					}
				}
				__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8) ;
 80008da:	4b08      	ldr	r3, [pc, #32]	; (80008fc <EXTI9_5_IRQHandler+0x198>)
 80008dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008e0:	615a      	str	r2, [r3, #20]
			}
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80008e2:	2040      	movs	r0, #64	; 0x40
 80008e4:	f000 fc2a 	bl	800113c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80008e8:	2080      	movs	r0, #128	; 0x80
 80008ea:	f000 fc27 	bl	800113c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80008ee:	f44f 7080 	mov.w	r0, #256	; 0x100
 80008f2:	f000 fc23 	bl	800113c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40010400 	.word	0x40010400
 8000900:	200000cc 	.word	0x200000cc
 8000904:	20000011 	.word	0x20000011
 8000908:	200000d0 	.word	0x200000d0
 800090c:	200000d1 	.word	0x200000d1
 8000910:	48000400 	.word	0x48000400
 8000914:	200000d2 	.word	0x200000d2

08000918 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800091c:	4802      	ldr	r0, [pc, #8]	; (8000928 <USART2_IRQHandler+0x10>)
 800091e:	f002 f9f5 	bl	8002d0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	2000003c 	.word	0x2000003c

0800092c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <SystemInit+0x20>)
 8000932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000936:	4a05      	ldr	r2, [pc, #20]	; (800094c <SystemInit+0x20>)
 8000938:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800093c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	e000ed00 	.word	0xe000ed00

08000950 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000950:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000988 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000954:	f7ff ffea 	bl	800092c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000958:	480c      	ldr	r0, [pc, #48]	; (800098c <LoopForever+0x6>)
  ldr r1, =_edata
 800095a:	490d      	ldr	r1, [pc, #52]	; (8000990 <LoopForever+0xa>)
  ldr r2, =_sidata
 800095c:	4a0d      	ldr	r2, [pc, #52]	; (8000994 <LoopForever+0xe>)
  movs r3, #0
 800095e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000960:	e002      	b.n	8000968 <LoopCopyDataInit>

08000962 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000962:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000964:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000966:	3304      	adds	r3, #4

08000968 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000968:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800096a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800096c:	d3f9      	bcc.n	8000962 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800096e:	4a0a      	ldr	r2, [pc, #40]	; (8000998 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000970:	4c0a      	ldr	r4, [pc, #40]	; (800099c <LoopForever+0x16>)
  movs r3, #0
 8000972:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000974:	e001      	b.n	800097a <LoopFillZerobss>

08000976 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000976:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000978:	3204      	adds	r2, #4

0800097a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800097a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800097c:	d3fb      	bcc.n	8000976 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800097e:	f003 fb6d 	bl	800405c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000982:	f7ff fc3f 	bl	8000204 <main>

08000986 <LoopForever>:

LoopForever:
    b LoopForever
 8000986:	e7fe      	b.n	8000986 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000988:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800098c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000990:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000994:	0800410c 	.word	0x0800410c
  ldr r2, =_sbss
 8000998:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 800099c:	200000d8 	.word	0x200000d8

080009a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009a0:	e7fe      	b.n	80009a0 <ADC1_2_IRQHandler>
	...

080009a4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009a8:	4b08      	ldr	r3, [pc, #32]	; (80009cc <HAL_Init+0x28>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a07      	ldr	r2, [pc, #28]	; (80009cc <HAL_Init+0x28>)
 80009ae:	f043 0310 	orr.w	r3, r3, #16
 80009b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b4:	2003      	movs	r0, #3
 80009b6:	f000 f94f 	bl	8000c58 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ba:	2000      	movs	r0, #0
 80009bc:	f000 f808 	bl	80009d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009c0:	f7ff fe38 	bl	8000634 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009c4:	2300      	movs	r3, #0
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40022000 	.word	0x40022000

080009d0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <HAL_InitTick+0x54>)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <HAL_InitTick+0x58>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	4619      	mov	r1, r3
 80009e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ee:	4618      	mov	r0, r3
 80009f0:	f000 f967 	bl	8000cc2 <HAL_SYSTICK_Config>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
 80009fc:	e00e      	b.n	8000a1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2b0f      	cmp	r3, #15
 8000a02:	d80a      	bhi.n	8000a1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a04:	2200      	movs	r2, #0
 8000a06:	6879      	ldr	r1, [r7, #4]
 8000a08:	f04f 30ff 	mov.w	r0, #4294967295
 8000a0c:	f000 f92f 	bl	8000c6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a10:	4a06      	ldr	r2, [pc, #24]	; (8000a2c <HAL_InitTick+0x5c>)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a16:	2300      	movs	r3, #0
 8000a18:	e000      	b.n	8000a1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a1a:	2301      	movs	r3, #1
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20000014 	.word	0x20000014
 8000a28:	2000001c 	.word	0x2000001c
 8000a2c:	20000018 	.word	0x20000018

08000a30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_IncTick+0x20>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	461a      	mov	r2, r3
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <HAL_IncTick+0x24>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4413      	add	r3, r2
 8000a40:	4a04      	ldr	r2, [pc, #16]	; (8000a54 <HAL_IncTick+0x24>)
 8000a42:	6013      	str	r3, [r2, #0]
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	2000001c 	.word	0x2000001c
 8000a54:	200000d4 	.word	0x200000d4

08000a58 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a5c:	4b03      	ldr	r3, [pc, #12]	; (8000a6c <HAL_GetTick+0x14>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	200000d4 	.word	0x200000d4

08000a70 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a78:	f7ff ffee 	bl	8000a58 <HAL_GetTick>
 8000a7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a88:	d005      	beq.n	8000a96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a8a:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <HAL_Delay+0x44>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	461a      	mov	r2, r3
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	4413      	add	r3, r2
 8000a94:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a96:	bf00      	nop
 8000a98:	f7ff ffde 	bl	8000a58 <HAL_GetTick>
 8000a9c:	4602      	mov	r2, r0
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	1ad3      	subs	r3, r2, r3
 8000aa2:	68fa      	ldr	r2, [r7, #12]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d8f7      	bhi.n	8000a98 <HAL_Delay+0x28>
  {
  }
}
 8000aa8:	bf00      	nop
 8000aaa:	bf00      	nop
 8000aac:	3710      	adds	r7, #16
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	2000001c 	.word	0x2000001c

08000ab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f003 0307 	and.w	r3, r3, #7
 8000ac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <__NVIC_SetPriorityGrouping+0x44>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ace:	68ba      	ldr	r2, [r7, #8]
 8000ad0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ae0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aea:	4a04      	ldr	r2, [pc, #16]	; (8000afc <__NVIC_SetPriorityGrouping+0x44>)
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	60d3      	str	r3, [r2, #12]
}
 8000af0:	bf00      	nop
 8000af2:	3714      	adds	r7, #20
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b04:	4b04      	ldr	r3, [pc, #16]	; (8000b18 <__NVIC_GetPriorityGrouping+0x18>)
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	0a1b      	lsrs	r3, r3, #8
 8000b0a:	f003 0307 	and.w	r3, r3, #7
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	db0b      	blt.n	8000b46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	f003 021f 	and.w	r2, r3, #31
 8000b34:	4907      	ldr	r1, [pc, #28]	; (8000b54 <__NVIC_EnableIRQ+0x38>)
 8000b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3a:	095b      	lsrs	r3, r3, #5
 8000b3c:	2001      	movs	r0, #1
 8000b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	e000e100 	.word	0xe000e100

08000b58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	6039      	str	r1, [r7, #0]
 8000b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	db0a      	blt.n	8000b82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	b2da      	uxtb	r2, r3
 8000b70:	490c      	ldr	r1, [pc, #48]	; (8000ba4 <__NVIC_SetPriority+0x4c>)
 8000b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b76:	0112      	lsls	r2, r2, #4
 8000b78:	b2d2      	uxtb	r2, r2
 8000b7a:	440b      	add	r3, r1
 8000b7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b80:	e00a      	b.n	8000b98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	b2da      	uxtb	r2, r3
 8000b86:	4908      	ldr	r1, [pc, #32]	; (8000ba8 <__NVIC_SetPriority+0x50>)
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	f003 030f 	and.w	r3, r3, #15
 8000b8e:	3b04      	subs	r3, #4
 8000b90:	0112      	lsls	r2, r2, #4
 8000b92:	b2d2      	uxtb	r2, r2
 8000b94:	440b      	add	r3, r1
 8000b96:	761a      	strb	r2, [r3, #24]
}
 8000b98:	bf00      	nop
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	e000e100 	.word	0xe000e100
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b089      	sub	sp, #36	; 0x24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	f003 0307 	and.w	r3, r3, #7
 8000bbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bc0:	69fb      	ldr	r3, [r7, #28]
 8000bc2:	f1c3 0307 	rsb	r3, r3, #7
 8000bc6:	2b04      	cmp	r3, #4
 8000bc8:	bf28      	it	cs
 8000bca:	2304      	movcs	r3, #4
 8000bcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	3304      	adds	r3, #4
 8000bd2:	2b06      	cmp	r3, #6
 8000bd4:	d902      	bls.n	8000bdc <NVIC_EncodePriority+0x30>
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	3b03      	subs	r3, #3
 8000bda:	e000      	b.n	8000bde <NVIC_EncodePriority+0x32>
 8000bdc:	2300      	movs	r3, #0
 8000bde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be0:	f04f 32ff 	mov.w	r2, #4294967295
 8000be4:	69bb      	ldr	r3, [r7, #24]
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	43da      	mvns	r2, r3
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	401a      	ands	r2, r3
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bf4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfe:	43d9      	mvns	r1, r3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c04:	4313      	orrs	r3, r2
         );
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3724      	adds	r7, #36	; 0x24
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
	...

08000c14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c24:	d301      	bcc.n	8000c2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c26:	2301      	movs	r3, #1
 8000c28:	e00f      	b.n	8000c4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c2a:	4a0a      	ldr	r2, [pc, #40]	; (8000c54 <SysTick_Config+0x40>)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c32:	210f      	movs	r1, #15
 8000c34:	f04f 30ff 	mov.w	r0, #4294967295
 8000c38:	f7ff ff8e 	bl	8000b58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c3c:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <SysTick_Config+0x40>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c42:	4b04      	ldr	r3, [pc, #16]	; (8000c54 <SysTick_Config+0x40>)
 8000c44:	2207      	movs	r2, #7
 8000c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c48:	2300      	movs	r3, #0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	e000e010 	.word	0xe000e010

08000c58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c60:	6878      	ldr	r0, [r7, #4]
 8000c62:	f7ff ff29 	bl	8000ab8 <__NVIC_SetPriorityGrouping>
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b086      	sub	sp, #24
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	4603      	mov	r3, r0
 8000c76:	60b9      	str	r1, [r7, #8]
 8000c78:	607a      	str	r2, [r7, #4]
 8000c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c80:	f7ff ff3e 	bl	8000b00 <__NVIC_GetPriorityGrouping>
 8000c84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	68b9      	ldr	r1, [r7, #8]
 8000c8a:	6978      	ldr	r0, [r7, #20]
 8000c8c:	f7ff ff8e 	bl	8000bac <NVIC_EncodePriority>
 8000c90:	4602      	mov	r2, r0
 8000c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c96:	4611      	mov	r1, r2
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff ff5d 	bl	8000b58 <__NVIC_SetPriority>
}
 8000c9e:	bf00      	nop
 8000ca0:	3718      	adds	r7, #24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	4603      	mov	r3, r0
 8000cae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff ff31 	bl	8000b1c <__NVIC_EnableIRQ>
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b082      	sub	sp, #8
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f7ff ffa2 	bl	8000c14 <SysTick_Config>
 8000cd0:	4603      	mov	r3, r0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	b083      	sub	sp, #12
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ce8:	2b02      	cmp	r3, #2
 8000cea:	d008      	beq.n	8000cfe <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2204      	movs	r2, #4
 8000cf0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e020      	b.n	8000d40 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f022 020e 	bic.w	r2, r2, #14
 8000d0c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f022 0201 	bic.w	r2, r2, #1
 8000d1c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d26:	2101      	movs	r1, #1
 8000d28:	fa01 f202 	lsl.w	r2, r1, r2
 8000d2c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2201      	movs	r2, #1
 8000d32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000d3e:	2300      	movs	r3, #0
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d54:	2300      	movs	r3, #0
 8000d56:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	d005      	beq.n	8000d6e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2204      	movs	r2, #4
 8000d66:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	73fb      	strb	r3, [r7, #15]
 8000d6c:	e027      	b.n	8000dbe <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f022 020e 	bic.w	r2, r2, #14
 8000d7c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f022 0201 	bic.w	r2, r2, #1
 8000d8c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d96:	2101      	movs	r1, #1
 8000d98:	fa01 f202 	lsl.w	r2, r1, r2
 8000d9c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2201      	movs	r2, #1
 8000da2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2200      	movs	r2, #0
 8000daa:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d003      	beq.n	8000dbe <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	4798      	blx	r3
    } 
  }
  return status;
 8000dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3710      	adds	r7, #16
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b087      	sub	sp, #28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dd6:	e160      	b.n	800109a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	2101      	movs	r1, #1
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	fa01 f303 	lsl.w	r3, r1, r3
 8000de4:	4013      	ands	r3, r2
 8000de6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	f000 8152 	beq.w	8001094 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f003 0303 	and.w	r3, r3, #3
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d005      	beq.n	8000e08 <HAL_GPIO_Init+0x40>
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f003 0303 	and.w	r3, r3, #3
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d130      	bne.n	8000e6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	2203      	movs	r2, #3
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	68da      	ldr	r2, [r3, #12]
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e3e:	2201      	movs	r2, #1
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	43db      	mvns	r3, r3
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	091b      	lsrs	r3, r3, #4
 8000e54:	f003 0201 	and.w	r2, r3, #1
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f003 0303 	and.w	r3, r3, #3
 8000e72:	2b03      	cmp	r3, #3
 8000e74:	d017      	beq.n	8000ea6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	68db      	ldr	r3, [r3, #12]
 8000e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	2203      	movs	r2, #3
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43db      	mvns	r3, r3
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	689a      	ldr	r2, [r3, #8]
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f003 0303 	and.w	r3, r3, #3
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d123      	bne.n	8000efa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	08da      	lsrs	r2, r3, #3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	3208      	adds	r2, #8
 8000eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	f003 0307 	and.w	r3, r3, #7
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	220f      	movs	r2, #15
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	691a      	ldr	r2, [r3, #16]
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	f003 0307 	and.w	r3, r3, #7
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	08da      	lsrs	r2, r3, #3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3208      	adds	r2, #8
 8000ef4:	6939      	ldr	r1, [r7, #16]
 8000ef6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	2203      	movs	r2, #3
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f003 0203 	and.w	r2, r3, #3
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	f000 80ac 	beq.w	8001094 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3c:	4b5e      	ldr	r3, [pc, #376]	; (80010b8 <HAL_GPIO_Init+0x2f0>)
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	4a5d      	ldr	r2, [pc, #372]	; (80010b8 <HAL_GPIO_Init+0x2f0>)
 8000f42:	f043 0301 	orr.w	r3, r3, #1
 8000f46:	6193      	str	r3, [r2, #24]
 8000f48:	4b5b      	ldr	r3, [pc, #364]	; (80010b8 <HAL_GPIO_Init+0x2f0>)
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	f003 0301 	and.w	r3, r3, #1
 8000f50:	60bb      	str	r3, [r7, #8]
 8000f52:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f54:	4a59      	ldr	r2, [pc, #356]	; (80010bc <HAL_GPIO_Init+0x2f4>)
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	089b      	lsrs	r3, r3, #2
 8000f5a:	3302      	adds	r3, #2
 8000f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	f003 0303 	and.w	r3, r3, #3
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	220f      	movs	r2, #15
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	4013      	ands	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f7e:	d025      	beq.n	8000fcc <HAL_GPIO_Init+0x204>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a4f      	ldr	r2, [pc, #316]	; (80010c0 <HAL_GPIO_Init+0x2f8>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d01f      	beq.n	8000fc8 <HAL_GPIO_Init+0x200>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4a4e      	ldr	r2, [pc, #312]	; (80010c4 <HAL_GPIO_Init+0x2fc>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d019      	beq.n	8000fc4 <HAL_GPIO_Init+0x1fc>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4a4d      	ldr	r2, [pc, #308]	; (80010c8 <HAL_GPIO_Init+0x300>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d013      	beq.n	8000fc0 <HAL_GPIO_Init+0x1f8>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a4c      	ldr	r2, [pc, #304]	; (80010cc <HAL_GPIO_Init+0x304>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d00d      	beq.n	8000fbc <HAL_GPIO_Init+0x1f4>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a4b      	ldr	r2, [pc, #300]	; (80010d0 <HAL_GPIO_Init+0x308>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d007      	beq.n	8000fb8 <HAL_GPIO_Init+0x1f0>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4a4a      	ldr	r2, [pc, #296]	; (80010d4 <HAL_GPIO_Init+0x30c>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d101      	bne.n	8000fb4 <HAL_GPIO_Init+0x1ec>
 8000fb0:	2306      	movs	r3, #6
 8000fb2:	e00c      	b.n	8000fce <HAL_GPIO_Init+0x206>
 8000fb4:	2307      	movs	r3, #7
 8000fb6:	e00a      	b.n	8000fce <HAL_GPIO_Init+0x206>
 8000fb8:	2305      	movs	r3, #5
 8000fba:	e008      	b.n	8000fce <HAL_GPIO_Init+0x206>
 8000fbc:	2304      	movs	r3, #4
 8000fbe:	e006      	b.n	8000fce <HAL_GPIO_Init+0x206>
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	e004      	b.n	8000fce <HAL_GPIO_Init+0x206>
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	e002      	b.n	8000fce <HAL_GPIO_Init+0x206>
 8000fc8:	2301      	movs	r3, #1
 8000fca:	e000      	b.n	8000fce <HAL_GPIO_Init+0x206>
 8000fcc:	2300      	movs	r3, #0
 8000fce:	697a      	ldr	r2, [r7, #20]
 8000fd0:	f002 0203 	and.w	r2, r2, #3
 8000fd4:	0092      	lsls	r2, r2, #2
 8000fd6:	4093      	lsls	r3, r2
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fde:	4937      	ldr	r1, [pc, #220]	; (80010bc <HAL_GPIO_Init+0x2f4>)
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	089b      	lsrs	r3, r3, #2
 8000fe4:	3302      	adds	r3, #2
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fec:	4b3a      	ldr	r3, [pc, #232]	; (80010d8 <HAL_GPIO_Init+0x310>)
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d003      	beq.n	8001010 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	4313      	orrs	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001010:	4a31      	ldr	r2, [pc, #196]	; (80010d8 <HAL_GPIO_Init+0x310>)
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001016:	4b30      	ldr	r3, [pc, #192]	; (80010d8 <HAL_GPIO_Init+0x310>)
 8001018:	68db      	ldr	r3, [r3, #12]
 800101a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	43db      	mvns	r3, r3
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	4013      	ands	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d003      	beq.n	800103a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	4313      	orrs	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800103a:	4a27      	ldr	r2, [pc, #156]	; (80010d8 <HAL_GPIO_Init+0x310>)
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001040:	4b25      	ldr	r3, [pc, #148]	; (80010d8 <HAL_GPIO_Init+0x310>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	43db      	mvns	r3, r3
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	4013      	ands	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	4313      	orrs	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001064:	4a1c      	ldr	r2, [pc, #112]	; (80010d8 <HAL_GPIO_Init+0x310>)
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800106a:	4b1b      	ldr	r3, [pc, #108]	; (80010d8 <HAL_GPIO_Init+0x310>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	43db      	mvns	r3, r3
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	4013      	ands	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4313      	orrs	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800108e:	4a12      	ldr	r2, [pc, #72]	; (80010d8 <HAL_GPIO_Init+0x310>)
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	3301      	adds	r3, #1
 8001098:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	fa22 f303 	lsr.w	r3, r2, r3
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	f47f ae97 	bne.w	8000dd8 <HAL_GPIO_Init+0x10>
  }
}
 80010aa:	bf00      	nop
 80010ac:	bf00      	nop
 80010ae:	371c      	adds	r7, #28
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40010000 	.word	0x40010000
 80010c0:	48000400 	.word	0x48000400
 80010c4:	48000800 	.word	0x48000800
 80010c8:	48000c00 	.word	0x48000c00
 80010cc:	48001000 	.word	0x48001000
 80010d0:	48001400 	.word	0x48001400
 80010d4:	48001800 	.word	0x48001800
 80010d8:	40010400 	.word	0x40010400

080010dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	460b      	mov	r3, r1
 80010e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	691a      	ldr	r2, [r3, #16]
 80010ec:	887b      	ldrh	r3, [r7, #2]
 80010ee:	4013      	ands	r3, r2
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d002      	beq.n	80010fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010f4:	2301      	movs	r3, #1
 80010f6:	73fb      	strb	r3, [r7, #15]
 80010f8:	e001      	b.n	80010fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010fa:	2300      	movs	r3, #0
 80010fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001100:	4618      	mov	r0, r3
 8001102:	3714      	adds	r7, #20
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	807b      	strh	r3, [r7, #2]
 8001118:	4613      	mov	r3, r2
 800111a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800111c:	787b      	ldrb	r3, [r7, #1]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001122:	887a      	ldrh	r2, [r7, #2]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001128:	e002      	b.n	8001130 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800112a:	887a      	ldrh	r2, [r7, #2]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001146:	4b08      	ldr	r3, [pc, #32]	; (8001168 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001148:	695a      	ldr	r2, [r3, #20]
 800114a:	88fb      	ldrh	r3, [r7, #6]
 800114c:	4013      	ands	r3, r2
 800114e:	2b00      	cmp	r3, #0
 8001150:	d006      	beq.n	8001160 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001152:	4a05      	ldr	r2, [pc, #20]	; (8001168 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001154:	88fb      	ldrh	r3, [r7, #6]
 8001156:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001158:	88fb      	ldrh	r3, [r7, #6]
 800115a:	4618      	mov	r0, r3
 800115c:	f000 f806 	bl	800116c <HAL_GPIO_EXTI_Callback>
  }
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40010400 	.word	0x40010400

0800116c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
	...

08001184 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800118a:	af00      	add	r7, sp, #0
 800118c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001190:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001194:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001196:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800119a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d102      	bne.n	80011aa <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	f001 b83a 	b.w	800221e <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011ae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	f000 816f 	beq.w	800149e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80011c0:	4bb5      	ldr	r3, [pc, #724]	; (8001498 <HAL_RCC_OscConfig+0x314>)
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f003 030c 	and.w	r3, r3, #12
 80011c8:	2b04      	cmp	r3, #4
 80011ca:	d00c      	beq.n	80011e6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011cc:	4bb2      	ldr	r3, [pc, #712]	; (8001498 <HAL_RCC_OscConfig+0x314>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 030c 	and.w	r3, r3, #12
 80011d4:	2b08      	cmp	r3, #8
 80011d6:	d15c      	bne.n	8001292 <HAL_RCC_OscConfig+0x10e>
 80011d8:	4baf      	ldr	r3, [pc, #700]	; (8001498 <HAL_RCC_OscConfig+0x314>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80011e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011e4:	d155      	bne.n	8001292 <HAL_RCC_OscConfig+0x10e>
 80011e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011ea:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80011f2:	fa93 f3a3 	rbit	r3, r3
 80011f6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80011fa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011fe:	fab3 f383 	clz	r3, r3
 8001202:	b2db      	uxtb	r3, r3
 8001204:	095b      	lsrs	r3, r3, #5
 8001206:	b2db      	uxtb	r3, r3
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	b2db      	uxtb	r3, r3
 800120e:	2b01      	cmp	r3, #1
 8001210:	d102      	bne.n	8001218 <HAL_RCC_OscConfig+0x94>
 8001212:	4ba1      	ldr	r3, [pc, #644]	; (8001498 <HAL_RCC_OscConfig+0x314>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	e015      	b.n	8001244 <HAL_RCC_OscConfig+0xc0>
 8001218:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800121c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001220:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001224:	fa93 f3a3 	rbit	r3, r3
 8001228:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800122c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001230:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001234:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001238:	fa93 f3a3 	rbit	r3, r3
 800123c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001240:	4b95      	ldr	r3, [pc, #596]	; (8001498 <HAL_RCC_OscConfig+0x314>)
 8001242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001244:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001248:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800124c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001250:	fa92 f2a2 	rbit	r2, r2
 8001254:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001258:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800125c:	fab2 f282 	clz	r2, r2
 8001260:	b2d2      	uxtb	r2, r2
 8001262:	f042 0220 	orr.w	r2, r2, #32
 8001266:	b2d2      	uxtb	r2, r2
 8001268:	f002 021f 	and.w	r2, r2, #31
 800126c:	2101      	movs	r1, #1
 800126e:	fa01 f202 	lsl.w	r2, r1, r2
 8001272:	4013      	ands	r3, r2
 8001274:	2b00      	cmp	r3, #0
 8001276:	f000 8111 	beq.w	800149c <HAL_RCC_OscConfig+0x318>
 800127a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800127e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	2b00      	cmp	r3, #0
 8001288:	f040 8108 	bne.w	800149c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	f000 bfc6 	b.w	800221e <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001292:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001296:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012a2:	d106      	bne.n	80012b2 <HAL_RCC_OscConfig+0x12e>
 80012a4:	4b7c      	ldr	r3, [pc, #496]	; (8001498 <HAL_RCC_OscConfig+0x314>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a7b      	ldr	r2, [pc, #492]	; (8001498 <HAL_RCC_OscConfig+0x314>)
 80012aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ae:	6013      	str	r3, [r2, #0]
 80012b0:	e036      	b.n	8001320 <HAL_RCC_OscConfig+0x19c>
 80012b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d10c      	bne.n	80012dc <HAL_RCC_OscConfig+0x158>
 80012c2:	4b75      	ldr	r3, [pc, #468]	; (8001498 <HAL_RCC_OscConfig+0x314>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a74      	ldr	r2, [pc, #464]	; (8001498 <HAL_RCC_OscConfig+0x314>)
 80012c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	4b72      	ldr	r3, [pc, #456]	; (8001498 <HAL_RCC_OscConfig+0x314>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a71      	ldr	r2, [pc, #452]	; (8001498 <HAL_RCC_OscConfig+0x314>)
 80012d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	e021      	b.n	8001320 <HAL_RCC_OscConfig+0x19c>
 80012dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012e0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012ec:	d10c      	bne.n	8001308 <HAL_RCC_OscConfig+0x184>
 80012ee:	4b6a      	ldr	r3, [pc, #424]	; (8001498 <HAL_RCC_OscConfig+0x314>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a69      	ldr	r2, [pc, #420]	; (8001498 <HAL_RCC_OscConfig+0x314>)
 80012f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012f8:	6013      	str	r3, [r2, #0]
 80012fa:	4b67      	ldr	r3, [pc, #412]	; (8001498 <HAL_RCC_OscConfig+0x314>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a66      	ldr	r2, [pc, #408]	; (8001498 <HAL_RCC_OscConfig+0x314>)
 8001300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001304:	6013      	str	r3, [r2, #0]
 8001306:	e00b      	b.n	8001320 <HAL_RCC_OscConfig+0x19c>
 8001308:	4b63      	ldr	r3, [pc, #396]	; (8001498 <HAL_RCC_OscConfig+0x314>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a62      	ldr	r2, [pc, #392]	; (8001498 <HAL_RCC_OscConfig+0x314>)
 800130e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001312:	6013      	str	r3, [r2, #0]
 8001314:	4b60      	ldr	r3, [pc, #384]	; (8001498 <HAL_RCC_OscConfig+0x314>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a5f      	ldr	r2, [pc, #380]	; (8001498 <HAL_RCC_OscConfig+0x314>)
 800131a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800131e:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001320:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001324:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d059      	beq.n	80013e4 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001330:	f7ff fb92 	bl	8000a58 <HAL_GetTick>
 8001334:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001338:	e00a      	b.n	8001350 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800133a:	f7ff fb8d 	bl	8000a58 <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b64      	cmp	r3, #100	; 0x64
 8001348:	d902      	bls.n	8001350 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	f000 bf67 	b.w	800221e <HAL_RCC_OscConfig+0x109a>
 8001350:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001354:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001358:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800135c:	fa93 f3a3 	rbit	r3, r3
 8001360:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001364:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001368:	fab3 f383 	clz	r3, r3
 800136c:	b2db      	uxtb	r3, r3
 800136e:	095b      	lsrs	r3, r3, #5
 8001370:	b2db      	uxtb	r3, r3
 8001372:	f043 0301 	orr.w	r3, r3, #1
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2b01      	cmp	r3, #1
 800137a:	d102      	bne.n	8001382 <HAL_RCC_OscConfig+0x1fe>
 800137c:	4b46      	ldr	r3, [pc, #280]	; (8001498 <HAL_RCC_OscConfig+0x314>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	e015      	b.n	80013ae <HAL_RCC_OscConfig+0x22a>
 8001382:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001386:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800138a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800138e:	fa93 f3a3 	rbit	r3, r3
 8001392:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001396:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800139a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800139e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80013a2:	fa93 f3a3 	rbit	r3, r3
 80013a6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80013aa:	4b3b      	ldr	r3, [pc, #236]	; (8001498 <HAL_RCC_OscConfig+0x314>)
 80013ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013b2:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80013b6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80013ba:	fa92 f2a2 	rbit	r2, r2
 80013be:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80013c2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80013c6:	fab2 f282 	clz	r2, r2
 80013ca:	b2d2      	uxtb	r2, r2
 80013cc:	f042 0220 	orr.w	r2, r2, #32
 80013d0:	b2d2      	uxtb	r2, r2
 80013d2:	f002 021f 	and.w	r2, r2, #31
 80013d6:	2101      	movs	r1, #1
 80013d8:	fa01 f202 	lsl.w	r2, r1, r2
 80013dc:	4013      	ands	r3, r2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d0ab      	beq.n	800133a <HAL_RCC_OscConfig+0x1b6>
 80013e2:	e05c      	b.n	800149e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e4:	f7ff fb38 	bl	8000a58 <HAL_GetTick>
 80013e8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ec:	e00a      	b.n	8001404 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013ee:	f7ff fb33 	bl	8000a58 <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b64      	cmp	r3, #100	; 0x64
 80013fc:	d902      	bls.n	8001404 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	f000 bf0d 	b.w	800221e <HAL_RCC_OscConfig+0x109a>
 8001404:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001408:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800140c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001410:	fa93 f3a3 	rbit	r3, r3
 8001414:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001418:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800141c:	fab3 f383 	clz	r3, r3
 8001420:	b2db      	uxtb	r3, r3
 8001422:	095b      	lsrs	r3, r3, #5
 8001424:	b2db      	uxtb	r3, r3
 8001426:	f043 0301 	orr.w	r3, r3, #1
 800142a:	b2db      	uxtb	r3, r3
 800142c:	2b01      	cmp	r3, #1
 800142e:	d102      	bne.n	8001436 <HAL_RCC_OscConfig+0x2b2>
 8001430:	4b19      	ldr	r3, [pc, #100]	; (8001498 <HAL_RCC_OscConfig+0x314>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	e015      	b.n	8001462 <HAL_RCC_OscConfig+0x2de>
 8001436:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800143a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800143e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001442:	fa93 f3a3 	rbit	r3, r3
 8001446:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800144a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800144e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001452:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001456:	fa93 f3a3 	rbit	r3, r3
 800145a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <HAL_RCC_OscConfig+0x314>)
 8001460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001462:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001466:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800146a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800146e:	fa92 f2a2 	rbit	r2, r2
 8001472:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001476:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800147a:	fab2 f282 	clz	r2, r2
 800147e:	b2d2      	uxtb	r2, r2
 8001480:	f042 0220 	orr.w	r2, r2, #32
 8001484:	b2d2      	uxtb	r2, r2
 8001486:	f002 021f 	and.w	r2, r2, #31
 800148a:	2101      	movs	r1, #1
 800148c:	fa01 f202 	lsl.w	r2, r1, r2
 8001490:	4013      	ands	r3, r2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1ab      	bne.n	80013ee <HAL_RCC_OscConfig+0x26a>
 8001496:	e002      	b.n	800149e <HAL_RCC_OscConfig+0x31a>
 8001498:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800149c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800149e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014a2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	f000 817f 	beq.w	80017b2 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80014b4:	4ba7      	ldr	r3, [pc, #668]	; (8001754 <HAL_RCC_OscConfig+0x5d0>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f003 030c 	and.w	r3, r3, #12
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d00c      	beq.n	80014da <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80014c0:	4ba4      	ldr	r3, [pc, #656]	; (8001754 <HAL_RCC_OscConfig+0x5d0>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 030c 	and.w	r3, r3, #12
 80014c8:	2b08      	cmp	r3, #8
 80014ca:	d173      	bne.n	80015b4 <HAL_RCC_OscConfig+0x430>
 80014cc:	4ba1      	ldr	r3, [pc, #644]	; (8001754 <HAL_RCC_OscConfig+0x5d0>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80014d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014d8:	d16c      	bne.n	80015b4 <HAL_RCC_OscConfig+0x430>
 80014da:	2302      	movs	r3, #2
 80014dc:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e0:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80014e4:	fa93 f3a3 	rbit	r3, r3
 80014e8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80014ec:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014f0:	fab3 f383 	clz	r3, r3
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	095b      	lsrs	r3, r3, #5
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	f043 0301 	orr.w	r3, r3, #1
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	2b01      	cmp	r3, #1
 8001502:	d102      	bne.n	800150a <HAL_RCC_OscConfig+0x386>
 8001504:	4b93      	ldr	r3, [pc, #588]	; (8001754 <HAL_RCC_OscConfig+0x5d0>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	e013      	b.n	8001532 <HAL_RCC_OscConfig+0x3ae>
 800150a:	2302      	movs	r3, #2
 800150c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001510:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001514:	fa93 f3a3 	rbit	r3, r3
 8001518:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800151c:	2302      	movs	r3, #2
 800151e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001522:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001526:	fa93 f3a3 	rbit	r3, r3
 800152a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800152e:	4b89      	ldr	r3, [pc, #548]	; (8001754 <HAL_RCC_OscConfig+0x5d0>)
 8001530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001532:	2202      	movs	r2, #2
 8001534:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001538:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800153c:	fa92 f2a2 	rbit	r2, r2
 8001540:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001544:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001548:	fab2 f282 	clz	r2, r2
 800154c:	b2d2      	uxtb	r2, r2
 800154e:	f042 0220 	orr.w	r2, r2, #32
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	f002 021f 	and.w	r2, r2, #31
 8001558:	2101      	movs	r1, #1
 800155a:	fa01 f202 	lsl.w	r2, r1, r2
 800155e:	4013      	ands	r3, r2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d00a      	beq.n	800157a <HAL_RCC_OscConfig+0x3f6>
 8001564:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001568:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d002      	beq.n	800157a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	f000 be52 	b.w	800221e <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800157a:	4b76      	ldr	r3, [pc, #472]	; (8001754 <HAL_RCC_OscConfig+0x5d0>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001582:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001586:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	691b      	ldr	r3, [r3, #16]
 800158e:	21f8      	movs	r1, #248	; 0xf8
 8001590:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001594:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001598:	fa91 f1a1 	rbit	r1, r1
 800159c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80015a0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80015a4:	fab1 f181 	clz	r1, r1
 80015a8:	b2c9      	uxtb	r1, r1
 80015aa:	408b      	lsls	r3, r1
 80015ac:	4969      	ldr	r1, [pc, #420]	; (8001754 <HAL_RCC_OscConfig+0x5d0>)
 80015ae:	4313      	orrs	r3, r2
 80015b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015b2:	e0fe      	b.n	80017b2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015b8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f000 8088 	beq.w	80016d6 <HAL_RCC_OscConfig+0x552>
 80015c6:	2301      	movs	r3, #1
 80015c8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015cc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80015d0:	fa93 f3a3 	rbit	r3, r3
 80015d4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80015d8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015dc:	fab3 f383 	clz	r3, r3
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80015e6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	461a      	mov	r2, r3
 80015ee:	2301      	movs	r3, #1
 80015f0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f2:	f7ff fa31 	bl	8000a58 <HAL_GetTick>
 80015f6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015fa:	e00a      	b.n	8001612 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015fc:	f7ff fa2c 	bl	8000a58 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d902      	bls.n	8001612 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	f000 be06 	b.w	800221e <HAL_RCC_OscConfig+0x109a>
 8001612:	2302      	movs	r3, #2
 8001614:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001618:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800161c:	fa93 f3a3 	rbit	r3, r3
 8001620:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001624:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001628:	fab3 f383 	clz	r3, r3
 800162c:	b2db      	uxtb	r3, r3
 800162e:	095b      	lsrs	r3, r3, #5
 8001630:	b2db      	uxtb	r3, r3
 8001632:	f043 0301 	orr.w	r3, r3, #1
 8001636:	b2db      	uxtb	r3, r3
 8001638:	2b01      	cmp	r3, #1
 800163a:	d102      	bne.n	8001642 <HAL_RCC_OscConfig+0x4be>
 800163c:	4b45      	ldr	r3, [pc, #276]	; (8001754 <HAL_RCC_OscConfig+0x5d0>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	e013      	b.n	800166a <HAL_RCC_OscConfig+0x4e6>
 8001642:	2302      	movs	r3, #2
 8001644:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001648:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800164c:	fa93 f3a3 	rbit	r3, r3
 8001650:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001654:	2302      	movs	r3, #2
 8001656:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800165a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800165e:	fa93 f3a3 	rbit	r3, r3
 8001662:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001666:	4b3b      	ldr	r3, [pc, #236]	; (8001754 <HAL_RCC_OscConfig+0x5d0>)
 8001668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166a:	2202      	movs	r2, #2
 800166c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001670:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001674:	fa92 f2a2 	rbit	r2, r2
 8001678:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 800167c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001680:	fab2 f282 	clz	r2, r2
 8001684:	b2d2      	uxtb	r2, r2
 8001686:	f042 0220 	orr.w	r2, r2, #32
 800168a:	b2d2      	uxtb	r2, r2
 800168c:	f002 021f 	and.w	r2, r2, #31
 8001690:	2101      	movs	r1, #1
 8001692:	fa01 f202 	lsl.w	r2, r1, r2
 8001696:	4013      	ands	r3, r2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d0af      	beq.n	80015fc <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800169c:	4b2d      	ldr	r3, [pc, #180]	; (8001754 <HAL_RCC_OscConfig+0x5d0>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016a8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	21f8      	movs	r1, #248	; 0xf8
 80016b2:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b6:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80016ba:	fa91 f1a1 	rbit	r1, r1
 80016be:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80016c2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80016c6:	fab1 f181 	clz	r1, r1
 80016ca:	b2c9      	uxtb	r1, r1
 80016cc:	408b      	lsls	r3, r1
 80016ce:	4921      	ldr	r1, [pc, #132]	; (8001754 <HAL_RCC_OscConfig+0x5d0>)
 80016d0:	4313      	orrs	r3, r2
 80016d2:	600b      	str	r3, [r1, #0]
 80016d4:	e06d      	b.n	80017b2 <HAL_RCC_OscConfig+0x62e>
 80016d6:	2301      	movs	r3, #1
 80016d8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016dc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80016e0:	fa93 f3a3 	rbit	r3, r3
 80016e4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80016e8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ec:	fab3 f383 	clz	r3, r3
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80016f6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	461a      	mov	r2, r3
 80016fe:	2300      	movs	r3, #0
 8001700:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001702:	f7ff f9a9 	bl	8000a58 <HAL_GetTick>
 8001706:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800170a:	e00a      	b.n	8001722 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800170c:	f7ff f9a4 	bl	8000a58 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d902      	bls.n	8001722 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	f000 bd7e 	b.w	800221e <HAL_RCC_OscConfig+0x109a>
 8001722:	2302      	movs	r3, #2
 8001724:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001728:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800172c:	fa93 f3a3 	rbit	r3, r3
 8001730:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001734:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001738:	fab3 f383 	clz	r3, r3
 800173c:	b2db      	uxtb	r3, r3
 800173e:	095b      	lsrs	r3, r3, #5
 8001740:	b2db      	uxtb	r3, r3
 8001742:	f043 0301 	orr.w	r3, r3, #1
 8001746:	b2db      	uxtb	r3, r3
 8001748:	2b01      	cmp	r3, #1
 800174a:	d105      	bne.n	8001758 <HAL_RCC_OscConfig+0x5d4>
 800174c:	4b01      	ldr	r3, [pc, #4]	; (8001754 <HAL_RCC_OscConfig+0x5d0>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	e016      	b.n	8001780 <HAL_RCC_OscConfig+0x5fc>
 8001752:	bf00      	nop
 8001754:	40021000 	.word	0x40021000
 8001758:	2302      	movs	r3, #2
 800175a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800175e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001762:	fa93 f3a3 	rbit	r3, r3
 8001766:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800176a:	2302      	movs	r3, #2
 800176c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001770:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001774:	fa93 f3a3 	rbit	r3, r3
 8001778:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800177c:	4bbf      	ldr	r3, [pc, #764]	; (8001a7c <HAL_RCC_OscConfig+0x8f8>)
 800177e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001780:	2202      	movs	r2, #2
 8001782:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001786:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800178a:	fa92 f2a2 	rbit	r2, r2
 800178e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001792:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001796:	fab2 f282 	clz	r2, r2
 800179a:	b2d2      	uxtb	r2, r2
 800179c:	f042 0220 	orr.w	r2, r2, #32
 80017a0:	b2d2      	uxtb	r2, r2
 80017a2:	f002 021f 	and.w	r2, r2, #31
 80017a6:	2101      	movs	r1, #1
 80017a8:	fa01 f202 	lsl.w	r2, r1, r2
 80017ac:	4013      	ands	r3, r2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1ac      	bne.n	800170c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0308 	and.w	r3, r3, #8
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f000 8113 	beq.w	80019ee <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017cc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	695b      	ldr	r3, [r3, #20]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d07c      	beq.n	80018d2 <HAL_RCC_OscConfig+0x74e>
 80017d8:	2301      	movs	r3, #1
 80017da:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80017e2:	fa93 f3a3 	rbit	r3, r3
 80017e6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80017ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ee:	fab3 f383 	clz	r3, r3
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	461a      	mov	r2, r3
 80017f6:	4ba2      	ldr	r3, [pc, #648]	; (8001a80 <HAL_RCC_OscConfig+0x8fc>)
 80017f8:	4413      	add	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	461a      	mov	r2, r3
 80017fe:	2301      	movs	r3, #1
 8001800:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001802:	f7ff f929 	bl	8000a58 <HAL_GetTick>
 8001806:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800180a:	e00a      	b.n	8001822 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800180c:	f7ff f924 	bl	8000a58 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d902      	bls.n	8001822 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	f000 bcfe 	b.w	800221e <HAL_RCC_OscConfig+0x109a>
 8001822:	2302      	movs	r3, #2
 8001824:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001828:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800182c:	fa93 f2a3 	rbit	r2, r3
 8001830:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001834:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800183e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001842:	2202      	movs	r2, #2
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800184a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	fa93 f2a3 	rbit	r2, r3
 8001854:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001858:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001862:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001866:	2202      	movs	r2, #2
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800186e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	fa93 f2a3 	rbit	r2, r3
 8001878:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800187c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001880:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001882:	4b7e      	ldr	r3, [pc, #504]	; (8001a7c <HAL_RCC_OscConfig+0x8f8>)
 8001884:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001886:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800188a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800188e:	2102      	movs	r1, #2
 8001890:	6019      	str	r1, [r3, #0]
 8001892:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001896:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	fa93 f1a3 	rbit	r1, r3
 80018a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018a4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80018a8:	6019      	str	r1, [r3, #0]
  return result;
 80018aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018ae:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	fab3 f383 	clz	r3, r3
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	f003 031f 	and.w	r3, r3, #31
 80018c4:	2101      	movs	r1, #1
 80018c6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ca:	4013      	ands	r3, r2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d09d      	beq.n	800180c <HAL_RCC_OscConfig+0x688>
 80018d0:	e08d      	b.n	80019ee <HAL_RCC_OscConfig+0x86a>
 80018d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018d6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80018da:	2201      	movs	r2, #1
 80018dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018e2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	fa93 f2a3 	rbit	r2, r3
 80018ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018f0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80018f4:	601a      	str	r2, [r3, #0]
  return result;
 80018f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018fa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80018fe:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001900:	fab3 f383 	clz	r3, r3
 8001904:	b2db      	uxtb	r3, r3
 8001906:	461a      	mov	r2, r3
 8001908:	4b5d      	ldr	r3, [pc, #372]	; (8001a80 <HAL_RCC_OscConfig+0x8fc>)
 800190a:	4413      	add	r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	461a      	mov	r2, r3
 8001910:	2300      	movs	r3, #0
 8001912:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001914:	f7ff f8a0 	bl	8000a58 <HAL_GetTick>
 8001918:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800191c:	e00a      	b.n	8001934 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800191e:	f7ff f89b 	bl	8000a58 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d902      	bls.n	8001934 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	f000 bc75 	b.w	800221e <HAL_RCC_OscConfig+0x109a>
 8001934:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001938:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800193c:	2202      	movs	r2, #2
 800193e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001940:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001944:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	fa93 f2a3 	rbit	r2, r3
 800194e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001952:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800195c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001960:	2202      	movs	r2, #2
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001968:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	fa93 f2a3 	rbit	r2, r3
 8001972:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001976:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001980:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001984:	2202      	movs	r2, #2
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800198c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	fa93 f2a3 	rbit	r2, r3
 8001996:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800199a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800199e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019a0:	4b36      	ldr	r3, [pc, #216]	; (8001a7c <HAL_RCC_OscConfig+0x8f8>)
 80019a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019a8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80019ac:	2102      	movs	r1, #2
 80019ae:	6019      	str	r1, [r3, #0]
 80019b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019b4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	fa93 f1a3 	rbit	r1, r3
 80019be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019c2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80019c6:	6019      	str	r1, [r3, #0]
  return result;
 80019c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019cc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	fab3 f383 	clz	r3, r3
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	f003 031f 	and.w	r3, r3, #31
 80019e2:	2101      	movs	r1, #1
 80019e4:	fa01 f303 	lsl.w	r3, r1, r3
 80019e8:	4013      	ands	r3, r2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d197      	bne.n	800191e <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019f2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0304 	and.w	r3, r3, #4
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f000 81a5 	beq.w	8001d4e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a04:	2300      	movs	r3, #0
 8001a06:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a0a:	4b1c      	ldr	r3, [pc, #112]	; (8001a7c <HAL_RCC_OscConfig+0x8f8>)
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d116      	bne.n	8001a44 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a16:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <HAL_RCC_OscConfig+0x8f8>)
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	4a18      	ldr	r2, [pc, #96]	; (8001a7c <HAL_RCC_OscConfig+0x8f8>)
 8001a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a20:	61d3      	str	r3, [r2, #28]
 8001a22:	4b16      	ldr	r3, [pc, #88]	; (8001a7c <HAL_RCC_OscConfig+0x8f8>)
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001a2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a3c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a44:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <HAL_RCC_OscConfig+0x900>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d121      	bne.n	8001a94 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a50:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <HAL_RCC_OscConfig+0x900>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a0b      	ldr	r2, [pc, #44]	; (8001a84 <HAL_RCC_OscConfig+0x900>)
 8001a56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a5a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a5c:	f7fe fffc 	bl	8000a58 <HAL_GetTick>
 8001a60:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a64:	e010      	b.n	8001a88 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a66:	f7fe fff7 	bl	8000a58 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b64      	cmp	r3, #100	; 0x64
 8001a74:	d908      	bls.n	8001a88 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e3d1      	b.n	800221e <HAL_RCC_OscConfig+0x109a>
 8001a7a:	bf00      	nop
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	10908120 	.word	0x10908120
 8001a84:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a88:	4b8d      	ldr	r3, [pc, #564]	; (8001cc0 <HAL_RCC_OscConfig+0xb3c>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d0e8      	beq.n	8001a66 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a98:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d106      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x92e>
 8001aa4:	4b87      	ldr	r3, [pc, #540]	; (8001cc4 <HAL_RCC_OscConfig+0xb40>)
 8001aa6:	6a1b      	ldr	r3, [r3, #32]
 8001aa8:	4a86      	ldr	r2, [pc, #536]	; (8001cc4 <HAL_RCC_OscConfig+0xb40>)
 8001aaa:	f043 0301 	orr.w	r3, r3, #1
 8001aae:	6213      	str	r3, [r2, #32]
 8001ab0:	e035      	b.n	8001b1e <HAL_RCC_OscConfig+0x99a>
 8001ab2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ab6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d10c      	bne.n	8001adc <HAL_RCC_OscConfig+0x958>
 8001ac2:	4b80      	ldr	r3, [pc, #512]	; (8001cc4 <HAL_RCC_OscConfig+0xb40>)
 8001ac4:	6a1b      	ldr	r3, [r3, #32]
 8001ac6:	4a7f      	ldr	r2, [pc, #508]	; (8001cc4 <HAL_RCC_OscConfig+0xb40>)
 8001ac8:	f023 0301 	bic.w	r3, r3, #1
 8001acc:	6213      	str	r3, [r2, #32]
 8001ace:	4b7d      	ldr	r3, [pc, #500]	; (8001cc4 <HAL_RCC_OscConfig+0xb40>)
 8001ad0:	6a1b      	ldr	r3, [r3, #32]
 8001ad2:	4a7c      	ldr	r2, [pc, #496]	; (8001cc4 <HAL_RCC_OscConfig+0xb40>)
 8001ad4:	f023 0304 	bic.w	r3, r3, #4
 8001ad8:	6213      	str	r3, [r2, #32]
 8001ada:	e020      	b.n	8001b1e <HAL_RCC_OscConfig+0x99a>
 8001adc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ae0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	2b05      	cmp	r3, #5
 8001aea:	d10c      	bne.n	8001b06 <HAL_RCC_OscConfig+0x982>
 8001aec:	4b75      	ldr	r3, [pc, #468]	; (8001cc4 <HAL_RCC_OscConfig+0xb40>)
 8001aee:	6a1b      	ldr	r3, [r3, #32]
 8001af0:	4a74      	ldr	r2, [pc, #464]	; (8001cc4 <HAL_RCC_OscConfig+0xb40>)
 8001af2:	f043 0304 	orr.w	r3, r3, #4
 8001af6:	6213      	str	r3, [r2, #32]
 8001af8:	4b72      	ldr	r3, [pc, #456]	; (8001cc4 <HAL_RCC_OscConfig+0xb40>)
 8001afa:	6a1b      	ldr	r3, [r3, #32]
 8001afc:	4a71      	ldr	r2, [pc, #452]	; (8001cc4 <HAL_RCC_OscConfig+0xb40>)
 8001afe:	f043 0301 	orr.w	r3, r3, #1
 8001b02:	6213      	str	r3, [r2, #32]
 8001b04:	e00b      	b.n	8001b1e <HAL_RCC_OscConfig+0x99a>
 8001b06:	4b6f      	ldr	r3, [pc, #444]	; (8001cc4 <HAL_RCC_OscConfig+0xb40>)
 8001b08:	6a1b      	ldr	r3, [r3, #32]
 8001b0a:	4a6e      	ldr	r2, [pc, #440]	; (8001cc4 <HAL_RCC_OscConfig+0xb40>)
 8001b0c:	f023 0301 	bic.w	r3, r3, #1
 8001b10:	6213      	str	r3, [r2, #32]
 8001b12:	4b6c      	ldr	r3, [pc, #432]	; (8001cc4 <HAL_RCC_OscConfig+0xb40>)
 8001b14:	6a1b      	ldr	r3, [r3, #32]
 8001b16:	4a6b      	ldr	r2, [pc, #428]	; (8001cc4 <HAL_RCC_OscConfig+0xb40>)
 8001b18:	f023 0304 	bic.w	r3, r3, #4
 8001b1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b22:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f000 8081 	beq.w	8001c32 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b30:	f7fe ff92 	bl	8000a58 <HAL_GetTick>
 8001b34:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b38:	e00b      	b.n	8001b52 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b3a:	f7fe ff8d 	bl	8000a58 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e365      	b.n	800221e <HAL_RCC_OscConfig+0x109a>
 8001b52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b56:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b62:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	fa93 f2a3 	rbit	r2, r3
 8001b6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b70:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b7a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001b7e:	2202      	movs	r2, #2
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b86:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	fa93 f2a3 	rbit	r2, r3
 8001b90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b94:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001b98:	601a      	str	r2, [r3, #0]
  return result;
 8001b9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b9e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001ba2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba4:	fab3 f383 	clz	r3, r3
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	095b      	lsrs	r3, r3, #5
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	f043 0302 	orr.w	r3, r3, #2
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d102      	bne.n	8001bbe <HAL_RCC_OscConfig+0xa3a>
 8001bb8:	4b42      	ldr	r3, [pc, #264]	; (8001cc4 <HAL_RCC_OscConfig+0xb40>)
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	e013      	b.n	8001be6 <HAL_RCC_OscConfig+0xa62>
 8001bbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bc2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bce:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	fa93 f2a3 	rbit	r2, r3
 8001bd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bdc:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	4b38      	ldr	r3, [pc, #224]	; (8001cc4 <HAL_RCC_OscConfig+0xb40>)
 8001be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bea:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001bee:	2102      	movs	r1, #2
 8001bf0:	6011      	str	r1, [r2, #0]
 8001bf2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bf6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001bfa:	6812      	ldr	r2, [r2, #0]
 8001bfc:	fa92 f1a2 	rbit	r1, r2
 8001c00:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c04:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001c08:	6011      	str	r1, [r2, #0]
  return result;
 8001c0a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c0e:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001c12:	6812      	ldr	r2, [r2, #0]
 8001c14:	fab2 f282 	clz	r2, r2
 8001c18:	b2d2      	uxtb	r2, r2
 8001c1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c1e:	b2d2      	uxtb	r2, r2
 8001c20:	f002 021f 	and.w	r2, r2, #31
 8001c24:	2101      	movs	r1, #1
 8001c26:	fa01 f202 	lsl.w	r2, r1, r2
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d084      	beq.n	8001b3a <HAL_RCC_OscConfig+0x9b6>
 8001c30:	e083      	b.n	8001d3a <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c32:	f7fe ff11 	bl	8000a58 <HAL_GetTick>
 8001c36:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c3a:	e00b      	b.n	8001c54 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c3c:	f7fe ff0c 	bl	8000a58 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e2e4      	b.n	800221e <HAL_RCC_OscConfig+0x109a>
 8001c54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c58:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001c5c:	2202      	movs	r2, #2
 8001c5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c64:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	fa93 f2a3 	rbit	r2, r3
 8001c6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c72:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c7c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001c80:	2202      	movs	r2, #2
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c88:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	fa93 f2a3 	rbit	r2, r3
 8001c92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c96:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001c9a:	601a      	str	r2, [r3, #0]
  return result;
 8001c9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ca0:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001ca4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ca6:	fab3 f383 	clz	r3, r3
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	095b      	lsrs	r3, r3, #5
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	f043 0302 	orr.w	r3, r3, #2
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d106      	bne.n	8001cc8 <HAL_RCC_OscConfig+0xb44>
 8001cba:	4b02      	ldr	r3, [pc, #8]	; (8001cc4 <HAL_RCC_OscConfig+0xb40>)
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
 8001cbe:	e017      	b.n	8001cf0 <HAL_RCC_OscConfig+0xb6c>
 8001cc0:	40007000 	.word	0x40007000
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ccc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cd8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	fa93 f2a3 	rbit	r2, r3
 8001ce2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ce6:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	4bb3      	ldr	r3, [pc, #716]	; (8001fbc <HAL_RCC_OscConfig+0xe38>)
 8001cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cf4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001cf8:	2102      	movs	r1, #2
 8001cfa:	6011      	str	r1, [r2, #0]
 8001cfc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d00:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001d04:	6812      	ldr	r2, [r2, #0]
 8001d06:	fa92 f1a2 	rbit	r1, r2
 8001d0a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d0e:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001d12:	6011      	str	r1, [r2, #0]
  return result;
 8001d14:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d18:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001d1c:	6812      	ldr	r2, [r2, #0]
 8001d1e:	fab2 f282 	clz	r2, r2
 8001d22:	b2d2      	uxtb	r2, r2
 8001d24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	f002 021f 	and.w	r2, r2, #31
 8001d2e:	2101      	movs	r1, #1
 8001d30:	fa01 f202 	lsl.w	r2, r1, r2
 8001d34:	4013      	ands	r3, r2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d180      	bne.n	8001c3c <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d3a:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d105      	bne.n	8001d4e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d42:	4b9e      	ldr	r3, [pc, #632]	; (8001fbc <HAL_RCC_OscConfig+0xe38>)
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	4a9d      	ldr	r2, [pc, #628]	; (8001fbc <HAL_RCC_OscConfig+0xe38>)
 8001d48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d4c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d52:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f000 825e 	beq.w	800221c <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d60:	4b96      	ldr	r3, [pc, #600]	; (8001fbc <HAL_RCC_OscConfig+0xe38>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f003 030c 	and.w	r3, r3, #12
 8001d68:	2b08      	cmp	r3, #8
 8001d6a:	f000 821f 	beq.w	80021ac <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d72:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	f040 8170 	bne.w	8002060 <HAL_RCC_OscConfig+0xedc>
 8001d80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d84:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001d88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d92:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	fa93 f2a3 	rbit	r2, r3
 8001d9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001da0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001da4:	601a      	str	r2, [r3, #0]
  return result;
 8001da6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001daa:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001dae:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001db0:	fab3 f383 	clz	r3, r3
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001dba:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc6:	f7fe fe47 	bl	8000a58 <HAL_GetTick>
 8001dca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dce:	e009      	b.n	8001de4 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dd0:	f7fe fe42 	bl	8000a58 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e21c      	b.n	800221e <HAL_RCC_OscConfig+0x109a>
 8001de4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001de8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001dec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001df0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001df6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	fa93 f2a3 	rbit	r2, r3
 8001e00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e04:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001e08:	601a      	str	r2, [r3, #0]
  return result;
 8001e0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e0e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001e12:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e14:	fab3 f383 	clz	r3, r3
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	095b      	lsrs	r3, r3, #5
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	f043 0301 	orr.w	r3, r3, #1
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d102      	bne.n	8001e2e <HAL_RCC_OscConfig+0xcaa>
 8001e28:	4b64      	ldr	r3, [pc, #400]	; (8001fbc <HAL_RCC_OscConfig+0xe38>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	e027      	b.n	8001e7e <HAL_RCC_OscConfig+0xcfa>
 8001e2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e32:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001e36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e40:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	fa93 f2a3 	rbit	r2, r3
 8001e4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e4e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e58:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001e5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e66:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	fa93 f2a3 	rbit	r2, r3
 8001e70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e74:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	4b50      	ldr	r3, [pc, #320]	; (8001fbc <HAL_RCC_OscConfig+0xe38>)
 8001e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e82:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001e86:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e8a:	6011      	str	r1, [r2, #0]
 8001e8c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e90:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001e94:	6812      	ldr	r2, [r2, #0]
 8001e96:	fa92 f1a2 	rbit	r1, r2
 8001e9a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e9e:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001ea2:	6011      	str	r1, [r2, #0]
  return result;
 8001ea4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ea8:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001eac:	6812      	ldr	r2, [r2, #0]
 8001eae:	fab2 f282 	clz	r2, r2
 8001eb2:	b2d2      	uxtb	r2, r2
 8001eb4:	f042 0220 	orr.w	r2, r2, #32
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	f002 021f 	and.w	r2, r2, #31
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d182      	bne.n	8001dd0 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eca:	4b3c      	ldr	r3, [pc, #240]	; (8001fbc <HAL_RCC_OscConfig+0xe38>)
 8001ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ece:	f023 020f 	bic.w	r2, r3, #15
 8001ed2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ed6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ede:	4937      	ldr	r1, [pc, #220]	; (8001fbc <HAL_RCC_OscConfig+0xe38>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001ee4:	4b35      	ldr	r3, [pc, #212]	; (8001fbc <HAL_RCC_OscConfig+0xe38>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001eec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ef0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	6a19      	ldr	r1, [r3, #32]
 8001ef8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001efc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	69db      	ldr	r3, [r3, #28]
 8001f04:	430b      	orrs	r3, r1
 8001f06:	492d      	ldr	r1, [pc, #180]	; (8001fbc <HAL_RCC_OscConfig+0xe38>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	604b      	str	r3, [r1, #4]
 8001f0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f10:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001f14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f1e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	fa93 f2a3 	rbit	r2, r3
 8001f28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f2c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001f30:	601a      	str	r2, [r3, #0]
  return result;
 8001f32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f36:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001f3a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f3c:	fab3 f383 	clz	r3, r3
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f46:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	2301      	movs	r3, #1
 8001f50:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f52:	f7fe fd81 	bl	8000a58 <HAL_GetTick>
 8001f56:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f5a:	e009      	b.n	8001f70 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f5c:	f7fe fd7c 	bl	8000a58 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e156      	b.n	800221e <HAL_RCC_OscConfig+0x109a>
 8001f70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f74:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001f78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f82:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	fa93 f2a3 	rbit	r2, r3
 8001f8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f90:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001f94:	601a      	str	r2, [r3, #0]
  return result;
 8001f96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f9a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001f9e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fa0:	fab3 f383 	clz	r3, r3
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	095b      	lsrs	r3, r3, #5
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	f043 0301 	orr.w	r3, r3, #1
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d105      	bne.n	8001fc0 <HAL_RCC_OscConfig+0xe3c>
 8001fb4:	4b01      	ldr	r3, [pc, #4]	; (8001fbc <HAL_RCC_OscConfig+0xe38>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	e02a      	b.n	8002010 <HAL_RCC_OscConfig+0xe8c>
 8001fba:	bf00      	nop
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fc4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001fc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fd2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	fa93 f2a3 	rbit	r2, r3
 8001fdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fe0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fea:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001fee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ff8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	fa93 f2a3 	rbit	r2, r3
 8002002:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002006:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	4b86      	ldr	r3, [pc, #536]	; (8002228 <HAL_RCC_OscConfig+0x10a4>)
 800200e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002010:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002014:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002018:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800201c:	6011      	str	r1, [r2, #0]
 800201e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002022:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002026:	6812      	ldr	r2, [r2, #0]
 8002028:	fa92 f1a2 	rbit	r1, r2
 800202c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002030:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002034:	6011      	str	r1, [r2, #0]
  return result;
 8002036:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800203a:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800203e:	6812      	ldr	r2, [r2, #0]
 8002040:	fab2 f282 	clz	r2, r2
 8002044:	b2d2      	uxtb	r2, r2
 8002046:	f042 0220 	orr.w	r2, r2, #32
 800204a:	b2d2      	uxtb	r2, r2
 800204c:	f002 021f 	and.w	r2, r2, #31
 8002050:	2101      	movs	r1, #1
 8002052:	fa01 f202 	lsl.w	r2, r1, r2
 8002056:	4013      	ands	r3, r2
 8002058:	2b00      	cmp	r3, #0
 800205a:	f43f af7f 	beq.w	8001f5c <HAL_RCC_OscConfig+0xdd8>
 800205e:	e0dd      	b.n	800221c <HAL_RCC_OscConfig+0x1098>
 8002060:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002064:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002068:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800206c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002072:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	fa93 f2a3 	rbit	r2, r3
 800207c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002080:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002084:	601a      	str	r2, [r3, #0]
  return result;
 8002086:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800208a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800208e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002090:	fab3 f383 	clz	r3, r3
 8002094:	b2db      	uxtb	r3, r3
 8002096:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800209a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	461a      	mov	r2, r3
 80020a2:	2300      	movs	r3, #0
 80020a4:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a6:	f7fe fcd7 	bl	8000a58 <HAL_GetTick>
 80020aa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ae:	e009      	b.n	80020c4 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020b0:	f7fe fcd2 	bl	8000a58 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e0ac      	b.n	800221e <HAL_RCC_OscConfig+0x109a>
 80020c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020c8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80020cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020d6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	fa93 f2a3 	rbit	r2, r3
 80020e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020e4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80020e8:	601a      	str	r2, [r3, #0]
  return result;
 80020ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ee:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80020f2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020f4:	fab3 f383 	clz	r3, r3
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	095b      	lsrs	r3, r3, #5
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	f043 0301 	orr.w	r3, r3, #1
 8002102:	b2db      	uxtb	r3, r3
 8002104:	2b01      	cmp	r3, #1
 8002106:	d102      	bne.n	800210e <HAL_RCC_OscConfig+0xf8a>
 8002108:	4b47      	ldr	r3, [pc, #284]	; (8002228 <HAL_RCC_OscConfig+0x10a4>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	e027      	b.n	800215e <HAL_RCC_OscConfig+0xfda>
 800210e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002112:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002116:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800211a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002120:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	fa93 f2a3 	rbit	r2, r3
 800212a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800212e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002138:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800213c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002146:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	fa93 f2a3 	rbit	r2, r3
 8002150:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002154:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	4b33      	ldr	r3, [pc, #204]	; (8002228 <HAL_RCC_OscConfig+0x10a4>)
 800215c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002162:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002166:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800216a:	6011      	str	r1, [r2, #0]
 800216c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002170:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002174:	6812      	ldr	r2, [r2, #0]
 8002176:	fa92 f1a2 	rbit	r1, r2
 800217a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800217e:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002182:	6011      	str	r1, [r2, #0]
  return result;
 8002184:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002188:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800218c:	6812      	ldr	r2, [r2, #0]
 800218e:	fab2 f282 	clz	r2, r2
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	f042 0220 	orr.w	r2, r2, #32
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	f002 021f 	and.w	r2, r2, #31
 800219e:	2101      	movs	r1, #1
 80021a0:	fa01 f202 	lsl.w	r2, r1, r2
 80021a4:	4013      	ands	r3, r2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d182      	bne.n	80020b0 <HAL_RCC_OscConfig+0xf2c>
 80021aa:	e037      	b.n	800221c <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021b0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d101      	bne.n	80021c0 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e02e      	b.n	800221e <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021c0:	4b19      	ldr	r3, [pc, #100]	; (8002228 <HAL_RCC_OscConfig+0x10a4>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80021c8:	4b17      	ldr	r3, [pc, #92]	; (8002228 <HAL_RCC_OscConfig+0x10a4>)
 80021ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021cc:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80021d0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80021d4:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80021d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021dc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	69db      	ldr	r3, [r3, #28]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d117      	bne.n	8002218 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80021e8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80021ec:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021f4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d10b      	bne.n	8002218 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002200:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002204:	f003 020f 	and.w	r2, r3, #15
 8002208:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800220c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002214:	429a      	cmp	r2, r3
 8002216:	d001      	beq.n	800221c <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e000      	b.n	800221e <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40021000 	.word	0x40021000

0800222c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b09e      	sub	sp, #120	; 0x78
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002236:	2300      	movs	r3, #0
 8002238:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d101      	bne.n	8002244 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e162      	b.n	800250a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002244:	4b90      	ldr	r3, [pc, #576]	; (8002488 <HAL_RCC_ClockConfig+0x25c>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0307 	and.w	r3, r3, #7
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	429a      	cmp	r2, r3
 8002250:	d910      	bls.n	8002274 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002252:	4b8d      	ldr	r3, [pc, #564]	; (8002488 <HAL_RCC_ClockConfig+0x25c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f023 0207 	bic.w	r2, r3, #7
 800225a:	498b      	ldr	r1, [pc, #556]	; (8002488 <HAL_RCC_ClockConfig+0x25c>)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	4313      	orrs	r3, r2
 8002260:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002262:	4b89      	ldr	r3, [pc, #548]	; (8002488 <HAL_RCC_ClockConfig+0x25c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	429a      	cmp	r2, r3
 800226e:	d001      	beq.n	8002274 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e14a      	b.n	800250a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d008      	beq.n	8002292 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002280:	4b82      	ldr	r3, [pc, #520]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	497f      	ldr	r1, [pc, #508]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 800228e:	4313      	orrs	r3, r2
 8002290:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	2b00      	cmp	r3, #0
 800229c:	f000 80dc 	beq.w	8002458 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d13c      	bne.n	8002322 <HAL_RCC_ClockConfig+0xf6>
 80022a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022ac:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022b0:	fa93 f3a3 	rbit	r3, r3
 80022b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80022b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b8:	fab3 f383 	clz	r3, r3
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	095b      	lsrs	r3, r3, #5
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	f043 0301 	orr.w	r3, r3, #1
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d102      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xa6>
 80022cc:	4b6f      	ldr	r3, [pc, #444]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	e00f      	b.n	80022f2 <HAL_RCC_ClockConfig+0xc6>
 80022d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022d6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022da:	fa93 f3a3 	rbit	r3, r3
 80022de:	667b      	str	r3, [r7, #100]	; 0x64
 80022e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022e4:	663b      	str	r3, [r7, #96]	; 0x60
 80022e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022e8:	fa93 f3a3 	rbit	r3, r3
 80022ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80022ee:	4b67      	ldr	r3, [pc, #412]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 80022f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022f6:	65ba      	str	r2, [r7, #88]	; 0x58
 80022f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80022fa:	fa92 f2a2 	rbit	r2, r2
 80022fe:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002300:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002302:	fab2 f282 	clz	r2, r2
 8002306:	b2d2      	uxtb	r2, r2
 8002308:	f042 0220 	orr.w	r2, r2, #32
 800230c:	b2d2      	uxtb	r2, r2
 800230e:	f002 021f 	and.w	r2, r2, #31
 8002312:	2101      	movs	r1, #1
 8002314:	fa01 f202 	lsl.w	r2, r1, r2
 8002318:	4013      	ands	r3, r2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d17b      	bne.n	8002416 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e0f3      	b.n	800250a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b02      	cmp	r3, #2
 8002328:	d13c      	bne.n	80023a4 <HAL_RCC_ClockConfig+0x178>
 800232a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800232e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002330:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002332:	fa93 f3a3 	rbit	r3, r3
 8002336:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800233a:	fab3 f383 	clz	r3, r3
 800233e:	b2db      	uxtb	r3, r3
 8002340:	095b      	lsrs	r3, r3, #5
 8002342:	b2db      	uxtb	r3, r3
 8002344:	f043 0301 	orr.w	r3, r3, #1
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b01      	cmp	r3, #1
 800234c:	d102      	bne.n	8002354 <HAL_RCC_ClockConfig+0x128>
 800234e:	4b4f      	ldr	r3, [pc, #316]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	e00f      	b.n	8002374 <HAL_RCC_ClockConfig+0x148>
 8002354:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002358:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800235c:	fa93 f3a3 	rbit	r3, r3
 8002360:	647b      	str	r3, [r7, #68]	; 0x44
 8002362:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002366:	643b      	str	r3, [r7, #64]	; 0x40
 8002368:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800236a:	fa93 f3a3 	rbit	r3, r3
 800236e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002370:	4b46      	ldr	r3, [pc, #280]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 8002372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002374:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002378:	63ba      	str	r2, [r7, #56]	; 0x38
 800237a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800237c:	fa92 f2a2 	rbit	r2, r2
 8002380:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002382:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002384:	fab2 f282 	clz	r2, r2
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	f042 0220 	orr.w	r2, r2, #32
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	f002 021f 	and.w	r2, r2, #31
 8002394:	2101      	movs	r1, #1
 8002396:	fa01 f202 	lsl.w	r2, r1, r2
 800239a:	4013      	ands	r3, r2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d13a      	bne.n	8002416 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e0b2      	b.n	800250a <HAL_RCC_ClockConfig+0x2de>
 80023a4:	2302      	movs	r3, #2
 80023a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023aa:	fa93 f3a3 	rbit	r3, r3
 80023ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80023b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b2:	fab3 f383 	clz	r3, r3
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	095b      	lsrs	r3, r3, #5
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	f043 0301 	orr.w	r3, r3, #1
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d102      	bne.n	80023cc <HAL_RCC_ClockConfig+0x1a0>
 80023c6:	4b31      	ldr	r3, [pc, #196]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	e00d      	b.n	80023e8 <HAL_RCC_ClockConfig+0x1bc>
 80023cc:	2302      	movs	r3, #2
 80023ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d2:	fa93 f3a3 	rbit	r3, r3
 80023d6:	627b      	str	r3, [r7, #36]	; 0x24
 80023d8:	2302      	movs	r3, #2
 80023da:	623b      	str	r3, [r7, #32]
 80023dc:	6a3b      	ldr	r3, [r7, #32]
 80023de:	fa93 f3a3 	rbit	r3, r3
 80023e2:	61fb      	str	r3, [r7, #28]
 80023e4:	4b29      	ldr	r3, [pc, #164]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 80023e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e8:	2202      	movs	r2, #2
 80023ea:	61ba      	str	r2, [r7, #24]
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	fa92 f2a2 	rbit	r2, r2
 80023f2:	617a      	str	r2, [r7, #20]
  return result;
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	fab2 f282 	clz	r2, r2
 80023fa:	b2d2      	uxtb	r2, r2
 80023fc:	f042 0220 	orr.w	r2, r2, #32
 8002400:	b2d2      	uxtb	r2, r2
 8002402:	f002 021f 	and.w	r2, r2, #31
 8002406:	2101      	movs	r1, #1
 8002408:	fa01 f202 	lsl.w	r2, r1, r2
 800240c:	4013      	ands	r3, r2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e079      	b.n	800250a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002416:	4b1d      	ldr	r3, [pc, #116]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f023 0203 	bic.w	r2, r3, #3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	491a      	ldr	r1, [pc, #104]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 8002424:	4313      	orrs	r3, r2
 8002426:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002428:	f7fe fb16 	bl	8000a58 <HAL_GetTick>
 800242c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242e:	e00a      	b.n	8002446 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002430:	f7fe fb12 	bl	8000a58 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	f241 3288 	movw	r2, #5000	; 0x1388
 800243e:	4293      	cmp	r3, r2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e061      	b.n	800250a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002446:	4b11      	ldr	r3, [pc, #68]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f003 020c 	and.w	r2, r3, #12
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	429a      	cmp	r2, r3
 8002456:	d1eb      	bne.n	8002430 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002458:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <HAL_RCC_ClockConfig+0x25c>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0307 	and.w	r3, r3, #7
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	429a      	cmp	r2, r3
 8002464:	d214      	bcs.n	8002490 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002466:	4b08      	ldr	r3, [pc, #32]	; (8002488 <HAL_RCC_ClockConfig+0x25c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f023 0207 	bic.w	r2, r3, #7
 800246e:	4906      	ldr	r1, [pc, #24]	; (8002488 <HAL_RCC_ClockConfig+0x25c>)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	4313      	orrs	r3, r2
 8002474:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002476:	4b04      	ldr	r3, [pc, #16]	; (8002488 <HAL_RCC_ClockConfig+0x25c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0307 	and.w	r3, r3, #7
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	429a      	cmp	r2, r3
 8002482:	d005      	beq.n	8002490 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e040      	b.n	800250a <HAL_RCC_ClockConfig+0x2de>
 8002488:	40022000 	.word	0x40022000
 800248c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b00      	cmp	r3, #0
 800249a:	d008      	beq.n	80024ae <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800249c:	4b1d      	ldr	r3, [pc, #116]	; (8002514 <HAL_RCC_ClockConfig+0x2e8>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	491a      	ldr	r1, [pc, #104]	; (8002514 <HAL_RCC_ClockConfig+0x2e8>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0308 	and.w	r3, r3, #8
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d009      	beq.n	80024ce <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024ba:	4b16      	ldr	r3, [pc, #88]	; (8002514 <HAL_RCC_ClockConfig+0x2e8>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	4912      	ldr	r1, [pc, #72]	; (8002514 <HAL_RCC_ClockConfig+0x2e8>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80024ce:	f000 f829 	bl	8002524 <HAL_RCC_GetSysClockFreq>
 80024d2:	4601      	mov	r1, r0
 80024d4:	4b0f      	ldr	r3, [pc, #60]	; (8002514 <HAL_RCC_ClockConfig+0x2e8>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024dc:	22f0      	movs	r2, #240	; 0xf0
 80024de:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	fa92 f2a2 	rbit	r2, r2
 80024e6:	60fa      	str	r2, [r7, #12]
  return result;
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	fab2 f282 	clz	r2, r2
 80024ee:	b2d2      	uxtb	r2, r2
 80024f0:	40d3      	lsrs	r3, r2
 80024f2:	4a09      	ldr	r2, [pc, #36]	; (8002518 <HAL_RCC_ClockConfig+0x2ec>)
 80024f4:	5cd3      	ldrb	r3, [r2, r3]
 80024f6:	fa21 f303 	lsr.w	r3, r1, r3
 80024fa:	4a08      	ldr	r2, [pc, #32]	; (800251c <HAL_RCC_ClockConfig+0x2f0>)
 80024fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80024fe:	4b08      	ldr	r3, [pc, #32]	; (8002520 <HAL_RCC_ClockConfig+0x2f4>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f7fe fa64 	bl	80009d0 <HAL_InitTick>
  
  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3778      	adds	r7, #120	; 0x78
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40021000 	.word	0x40021000
 8002518:	080040cc 	.word	0x080040cc
 800251c:	20000014 	.word	0x20000014
 8002520:	20000018 	.word	0x20000018

08002524 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002524:	b480      	push	{r7}
 8002526:	b08b      	sub	sp, #44	; 0x2c
 8002528:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800252a:	2300      	movs	r3, #0
 800252c:	61fb      	str	r3, [r7, #28]
 800252e:	2300      	movs	r3, #0
 8002530:	61bb      	str	r3, [r7, #24]
 8002532:	2300      	movs	r3, #0
 8002534:	627b      	str	r3, [r7, #36]	; 0x24
 8002536:	2300      	movs	r3, #0
 8002538:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800253a:	2300      	movs	r3, #0
 800253c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800253e:	4b2a      	ldr	r3, [pc, #168]	; (80025e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	f003 030c 	and.w	r3, r3, #12
 800254a:	2b04      	cmp	r3, #4
 800254c:	d002      	beq.n	8002554 <HAL_RCC_GetSysClockFreq+0x30>
 800254e:	2b08      	cmp	r3, #8
 8002550:	d003      	beq.n	800255a <HAL_RCC_GetSysClockFreq+0x36>
 8002552:	e03f      	b.n	80025d4 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002554:	4b25      	ldr	r3, [pc, #148]	; (80025ec <HAL_RCC_GetSysClockFreq+0xc8>)
 8002556:	623b      	str	r3, [r7, #32]
      break;
 8002558:	e03f      	b.n	80025da <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002560:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002564:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	fa92 f2a2 	rbit	r2, r2
 800256c:	607a      	str	r2, [r7, #4]
  return result;
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	fab2 f282 	clz	r2, r2
 8002574:	b2d2      	uxtb	r2, r2
 8002576:	40d3      	lsrs	r3, r2
 8002578:	4a1d      	ldr	r2, [pc, #116]	; (80025f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800257a:	5cd3      	ldrb	r3, [r2, r3]
 800257c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800257e:	4b1a      	ldr	r3, [pc, #104]	; (80025e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002582:	f003 030f 	and.w	r3, r3, #15
 8002586:	220f      	movs	r2, #15
 8002588:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	fa92 f2a2 	rbit	r2, r2
 8002590:	60fa      	str	r2, [r7, #12]
  return result;
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	fab2 f282 	clz	r2, r2
 8002598:	b2d2      	uxtb	r2, r2
 800259a:	40d3      	lsrs	r3, r2
 800259c:	4a15      	ldr	r2, [pc, #84]	; (80025f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800259e:	5cd3      	ldrb	r3, [r2, r3]
 80025a0:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d008      	beq.n	80025be <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025ac:	4a0f      	ldr	r2, [pc, #60]	; (80025ec <HAL_RCC_GetSysClockFreq+0xc8>)
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	fb02 f303 	mul.w	r3, r2, r3
 80025ba:	627b      	str	r3, [r7, #36]	; 0x24
 80025bc:	e007      	b.n	80025ce <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025be:	4a0b      	ldr	r2, [pc, #44]	; (80025ec <HAL_RCC_GetSysClockFreq+0xc8>)
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	fb02 f303 	mul.w	r3, r2, r3
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	623b      	str	r3, [r7, #32]
      break;
 80025d2:	e002      	b.n	80025da <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025d4:	4b05      	ldr	r3, [pc, #20]	; (80025ec <HAL_RCC_GetSysClockFreq+0xc8>)
 80025d6:	623b      	str	r3, [r7, #32]
      break;
 80025d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025da:	6a3b      	ldr	r3, [r7, #32]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	372c      	adds	r7, #44	; 0x2c
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	40021000 	.word	0x40021000
 80025ec:	007a1200 	.word	0x007a1200
 80025f0:	080040e4 	.word	0x080040e4
 80025f4:	080040f4 	.word	0x080040f4

080025f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025fc:	4b03      	ldr	r3, [pc, #12]	; (800260c <HAL_RCC_GetHCLKFreq+0x14>)
 80025fe:	681b      	ldr	r3, [r3, #0]
}
 8002600:	4618      	mov	r0, r3
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	20000014 	.word	0x20000014

08002610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002616:	f7ff ffef 	bl	80025f8 <HAL_RCC_GetHCLKFreq>
 800261a:	4601      	mov	r1, r0
 800261c:	4b0b      	ldr	r3, [pc, #44]	; (800264c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002624:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002628:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	fa92 f2a2 	rbit	r2, r2
 8002630:	603a      	str	r2, [r7, #0]
  return result;
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	fab2 f282 	clz	r2, r2
 8002638:	b2d2      	uxtb	r2, r2
 800263a:	40d3      	lsrs	r3, r2
 800263c:	4a04      	ldr	r2, [pc, #16]	; (8002650 <HAL_RCC_GetPCLK1Freq+0x40>)
 800263e:	5cd3      	ldrb	r3, [r2, r3]
 8002640:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002644:	4618      	mov	r0, r3
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40021000 	.word	0x40021000
 8002650:	080040dc 	.word	0x080040dc

08002654 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800265a:	f7ff ffcd 	bl	80025f8 <HAL_RCC_GetHCLKFreq>
 800265e:	4601      	mov	r1, r0
 8002660:	4b0b      	ldr	r3, [pc, #44]	; (8002690 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002668:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800266c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	fa92 f2a2 	rbit	r2, r2
 8002674:	603a      	str	r2, [r7, #0]
  return result;
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	fab2 f282 	clz	r2, r2
 800267c:	b2d2      	uxtb	r2, r2
 800267e:	40d3      	lsrs	r3, r2
 8002680:	4a04      	ldr	r2, [pc, #16]	; (8002694 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002682:	5cd3      	ldrb	r3, [r2, r3]
 8002684:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002688:	4618      	mov	r0, r3
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40021000 	.word	0x40021000
 8002694:	080040dc 	.word	0x080040dc

08002698 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b092      	sub	sp, #72	; 0x48
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026a0:	2300      	movs	r3, #0
 80026a2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80026a8:	2300      	movs	r3, #0
 80026aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f000 80d4 	beq.w	8002864 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026bc:	4b4e      	ldr	r3, [pc, #312]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026be:	69db      	ldr	r3, [r3, #28]
 80026c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d10e      	bne.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026c8:	4b4b      	ldr	r3, [pc, #300]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ca:	69db      	ldr	r3, [r3, #28]
 80026cc:	4a4a      	ldr	r2, [pc, #296]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026d2:	61d3      	str	r3, [r2, #28]
 80026d4:	4b48      	ldr	r3, [pc, #288]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026d6:	69db      	ldr	r3, [r3, #28]
 80026d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026dc:	60bb      	str	r3, [r7, #8]
 80026de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026e0:	2301      	movs	r3, #1
 80026e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e6:	4b45      	ldr	r3, [pc, #276]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d118      	bne.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026f2:	4b42      	ldr	r3, [pc, #264]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a41      	ldr	r2, [pc, #260]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026fc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026fe:	f7fe f9ab 	bl	8000a58 <HAL_GetTick>
 8002702:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002704:	e008      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002706:	f7fe f9a7 	bl	8000a58 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b64      	cmp	r3, #100	; 0x64
 8002712:	d901      	bls.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e1d6      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002718:	4b38      	ldr	r3, [pc, #224]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002720:	2b00      	cmp	r3, #0
 8002722:	d0f0      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002724:	4b34      	ldr	r3, [pc, #208]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800272c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800272e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 8084 	beq.w	800283e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800273e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002740:	429a      	cmp	r2, r3
 8002742:	d07c      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002744:	4b2c      	ldr	r3, [pc, #176]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800274c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800274e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002752:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002756:	fa93 f3a3 	rbit	r3, r3
 800275a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800275c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800275e:	fab3 f383 	clz	r3, r3
 8002762:	b2db      	uxtb	r3, r3
 8002764:	461a      	mov	r2, r3
 8002766:	4b26      	ldr	r3, [pc, #152]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002768:	4413      	add	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	461a      	mov	r2, r3
 800276e:	2301      	movs	r3, #1
 8002770:	6013      	str	r3, [r2, #0]
 8002772:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002776:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800277a:	fa93 f3a3 	rbit	r3, r3
 800277e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002782:	fab3 f383 	clz	r3, r3
 8002786:	b2db      	uxtb	r3, r3
 8002788:	461a      	mov	r2, r3
 800278a:	4b1d      	ldr	r3, [pc, #116]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800278c:	4413      	add	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	461a      	mov	r2, r3
 8002792:	2300      	movs	r3, #0
 8002794:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002796:	4a18      	ldr	r2, [pc, #96]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800279a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800279c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d04b      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a6:	f7fe f957 	bl	8000a58 <HAL_GetTick>
 80027aa:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ac:	e00a      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ae:	f7fe f953 	bl	8000a58 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027bc:	4293      	cmp	r3, r2
 80027be:	d901      	bls.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e180      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80027c4:	2302      	movs	r3, #2
 80027c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ca:	fa93 f3a3 	rbit	r3, r3
 80027ce:	627b      	str	r3, [r7, #36]	; 0x24
 80027d0:	2302      	movs	r3, #2
 80027d2:	623b      	str	r3, [r7, #32]
 80027d4:	6a3b      	ldr	r3, [r7, #32]
 80027d6:	fa93 f3a3 	rbit	r3, r3
 80027da:	61fb      	str	r3, [r7, #28]
  return result;
 80027dc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027de:	fab3 f383 	clz	r3, r3
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	095b      	lsrs	r3, r3, #5
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	f043 0302 	orr.w	r3, r3, #2
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d108      	bne.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80027f2:	4b01      	ldr	r3, [pc, #4]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	e00d      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80027f8:	40021000 	.word	0x40021000
 80027fc:	40007000 	.word	0x40007000
 8002800:	10908100 	.word	0x10908100
 8002804:	2302      	movs	r3, #2
 8002806:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	fa93 f3a3 	rbit	r3, r3
 800280e:	617b      	str	r3, [r7, #20]
 8002810:	4b9a      	ldr	r3, [pc, #616]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002814:	2202      	movs	r2, #2
 8002816:	613a      	str	r2, [r7, #16]
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	fa92 f2a2 	rbit	r2, r2
 800281e:	60fa      	str	r2, [r7, #12]
  return result;
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	fab2 f282 	clz	r2, r2
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800282c:	b2d2      	uxtb	r2, r2
 800282e:	f002 021f 	and.w	r2, r2, #31
 8002832:	2101      	movs	r1, #1
 8002834:	fa01 f202 	lsl.w	r2, r1, r2
 8002838:	4013      	ands	r3, r2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d0b7      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800283e:	4b8f      	ldr	r3, [pc, #572]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	498c      	ldr	r1, [pc, #560]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800284c:	4313      	orrs	r3, r2
 800284e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002850:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002854:	2b01      	cmp	r3, #1
 8002856:	d105      	bne.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002858:	4b88      	ldr	r3, [pc, #544]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800285a:	69db      	ldr	r3, [r3, #28]
 800285c:	4a87      	ldr	r2, [pc, #540]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800285e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002862:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b00      	cmp	r3, #0
 800286e:	d008      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002870:	4b82      	ldr	r3, [pc, #520]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002874:	f023 0203 	bic.w	r2, r3, #3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	497f      	ldr	r1, [pc, #508]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800287e:	4313      	orrs	r3, r2
 8002880:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d008      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800288e:	4b7b      	ldr	r3, [pc, #492]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	4978      	ldr	r1, [pc, #480]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800289c:	4313      	orrs	r3, r2
 800289e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0304 	and.w	r3, r3, #4
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d008      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028ac:	4b73      	ldr	r3, [pc, #460]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	4970      	ldr	r1, [pc, #448]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0320 	and.w	r3, r3, #32
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d008      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028ca:	4b6c      	ldr	r3, [pc, #432]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	f023 0210 	bic.w	r2, r3, #16
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	4969      	ldr	r1, [pc, #420]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d008      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80028e8:	4b64      	ldr	r3, [pc, #400]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f4:	4961      	ldr	r1, [pc, #388]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002902:	2b00      	cmp	r3, #0
 8002904:	d008      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002906:	4b5d      	ldr	r3, [pc, #372]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	f023 0220 	bic.w	r2, r3, #32
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	495a      	ldr	r1, [pc, #360]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002914:	4313      	orrs	r3, r2
 8002916:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d008      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002924:	4b55      	ldr	r3, [pc, #340]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002928:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002930:	4952      	ldr	r1, [pc, #328]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002932:	4313      	orrs	r3, r2
 8002934:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0308 	and.w	r3, r3, #8
 800293e:	2b00      	cmp	r3, #0
 8002940:	d008      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002942:	4b4e      	ldr	r3, [pc, #312]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002946:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	494b      	ldr	r1, [pc, #300]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002950:	4313      	orrs	r3, r2
 8002952:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0310 	and.w	r3, r3, #16
 800295c:	2b00      	cmp	r3, #0
 800295e:	d008      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002960:	4b46      	ldr	r3, [pc, #280]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002964:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	4943      	ldr	r1, [pc, #268]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800296e:	4313      	orrs	r3, r2
 8002970:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800297a:	2b00      	cmp	r3, #0
 800297c:	d008      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800297e:	4b3f      	ldr	r3, [pc, #252]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	493c      	ldr	r1, [pc, #240]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800298c:	4313      	orrs	r3, r2
 800298e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002998:	2b00      	cmp	r3, #0
 800299a:	d008      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800299c:	4b37      	ldr	r3, [pc, #220]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800299e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a8:	4934      	ldr	r1, [pc, #208]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d008      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80029ba:	4b30      	ldr	r3, [pc, #192]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029be:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c6:	492d      	ldr	r1, [pc, #180]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d008      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80029d8:	4b28      	ldr	r3, [pc, #160]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029e4:	4925      	ldr	r1, [pc, #148]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d008      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80029f6:	4b21      	ldr	r3, [pc, #132]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fa:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	491e      	ldr	r1, [pc, #120]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d008      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002a14:	4b19      	ldr	r3, [pc, #100]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a18:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a20:	4916      	ldr	r1, [pc, #88]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d008      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002a32:	4b12      	ldr	r3, [pc, #72]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a36:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a3e:	490f      	ldr	r1, [pc, #60]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d008      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002a50:	4b0a      	ldr	r3, [pc, #40]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a54:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5c:	4907      	ldr	r1, [pc, #28]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00c      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002a6e:	4b03      	ldr	r3, [pc, #12]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a72:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	e002      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002a7a:	bf00      	nop
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a82:	4913      	ldr	r1, [pc, #76]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d008      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002a94:	4b0e      	ldr	r3, [pc, #56]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a98:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa0:	490b      	ldr	r1, [pc, #44]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d008      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002ab2:	4b07      	ldr	r3, [pc, #28]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002abe:	4904      	ldr	r1, [pc, #16]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3748      	adds	r7, #72	; 0x48
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40021000 	.word	0x40021000

08002ad4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e040      	b.n	8002b68 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d106      	bne.n	8002afc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7fd fdc0 	bl	800067c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2224      	movs	r2, #36	; 0x24
 8002b00:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 0201 	bic.w	r2, r2, #1
 8002b10:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 fc00 	bl	8003318 <UART_SetConfig>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d101      	bne.n	8002b22 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e022      	b.n	8002b68 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d002      	beq.n	8002b30 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 fdc8 	bl	80036c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	685a      	ldr	r2, [r3, #4]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689a      	ldr	r2, [r3, #8]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f042 0201 	orr.w	r2, r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 fe4f 	bl	8003804 <UART_CheckIdleState>
 8002b66:	4603      	mov	r3, r0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b08a      	sub	sp, #40	; 0x28
 8002b74:	af02      	add	r7, sp, #8
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	603b      	str	r3, [r7, #0]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b84:	2b20      	cmp	r3, #32
 8002b86:	d178      	bne.n	8002c7a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d002      	beq.n	8002b94 <HAL_UART_Transmit+0x24>
 8002b8e:	88fb      	ldrh	r3, [r7, #6]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d101      	bne.n	8002b98 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e071      	b.n	8002c7c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2221      	movs	r2, #33	; 0x21
 8002ba4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ba6:	f7fd ff57 	bl	8000a58 <HAL_GetTick>
 8002baa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	88fa      	ldrh	r2, [r7, #6]
 8002bb0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	88fa      	ldrh	r2, [r7, #6]
 8002bb8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bc4:	d108      	bne.n	8002bd8 <HAL_UART_Transmit+0x68>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d104      	bne.n	8002bd8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	61bb      	str	r3, [r7, #24]
 8002bd6:	e003      	b.n	8002be0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002be0:	e030      	b.n	8002c44 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	9300      	str	r3, [sp, #0]
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	2200      	movs	r2, #0
 8002bea:	2180      	movs	r1, #128	; 0x80
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f000 feb1 	bl	8003954 <UART_WaitOnFlagUntilTimeout>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d004      	beq.n	8002c02 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2220      	movs	r2, #32
 8002bfc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e03c      	b.n	8002c7c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d10b      	bne.n	8002c20 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	881a      	ldrh	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c14:	b292      	uxth	r2, r2
 8002c16:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	3302      	adds	r3, #2
 8002c1c:	61bb      	str	r3, [r7, #24]
 8002c1e:	e008      	b.n	8002c32 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	781a      	ldrb	r2, [r3, #0]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	b292      	uxth	r2, r2
 8002c2a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1c8      	bne.n	8002be2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	9300      	str	r3, [sp, #0]
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	2200      	movs	r2, #0
 8002c58:	2140      	movs	r1, #64	; 0x40
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f000 fe7a 	bl	8003954 <UART_WaitOnFlagUntilTimeout>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d004      	beq.n	8002c70 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2220      	movs	r2, #32
 8002c6a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e005      	b.n	8002c7c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2220      	movs	r2, #32
 8002c74:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002c76:	2300      	movs	r3, #0
 8002c78:	e000      	b.n	8002c7c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002c7a:	2302      	movs	r3, #2
  }
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3720      	adds	r7, #32
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b08a      	sub	sp, #40	; 0x28
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c98:	2b20      	cmp	r3, #32
 8002c9a:	d132      	bne.n	8002d02 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d002      	beq.n	8002ca8 <HAL_UART_Receive_IT+0x24>
 8002ca2:	88fb      	ldrh	r3, [r7, #6]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e02b      	b.n	8002d04 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d018      	beq.n	8002cf2 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	e853 3f00 	ldrex	r3, [r3]
 8002ccc:	613b      	str	r3, [r7, #16]
   return(result);
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cde:	623b      	str	r3, [r7, #32]
 8002ce0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce2:	69f9      	ldr	r1, [r7, #28]
 8002ce4:	6a3a      	ldr	r2, [r7, #32]
 8002ce6:	e841 2300 	strex	r3, r2, [r1]
 8002cea:	61bb      	str	r3, [r7, #24]
   return(result);
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1e6      	bne.n	8002cc0 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002cf2:	88fb      	ldrh	r3, [r7, #6]
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	68b9      	ldr	r1, [r7, #8]
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f000 fe93 	bl	8003a24 <UART_Start_Receive_IT>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	e000      	b.n	8002d04 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8002d02:	2302      	movs	r3, #2
  }
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3728      	adds	r7, #40	; 0x28
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b0ba      	sub	sp, #232	; 0xe8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002d32:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002d36:	f640 030f 	movw	r3, #2063	; 0x80f
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002d40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d115      	bne.n	8002d74 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002d48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d4c:	f003 0320 	and.w	r3, r3, #32
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00f      	beq.n	8002d74 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002d54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d58:	f003 0320 	and.w	r3, r3, #32
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d009      	beq.n	8002d74 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f000 82ab 	beq.w	80032c0 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	4798      	blx	r3
      }
      return;
 8002d72:	e2a5      	b.n	80032c0 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002d74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f000 8117 	beq.w	8002fac <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002d7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d106      	bne.n	8002d98 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002d8a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002d8e:	4b85      	ldr	r3, [pc, #532]	; (8002fa4 <HAL_UART_IRQHandler+0x298>)
 8002d90:	4013      	ands	r3, r2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f000 810a 	beq.w	8002fac <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002d98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d011      	beq.n	8002dc8 <HAL_UART_IRQHandler+0xbc>
 8002da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00b      	beq.n	8002dc8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2201      	movs	r2, #1
 8002db6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dbe:	f043 0201 	orr.w	r2, r3, #1
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d011      	beq.n	8002df8 <HAL_UART_IRQHandler+0xec>
 8002dd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00b      	beq.n	8002df8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2202      	movs	r2, #2
 8002de6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dee:	f043 0204 	orr.w	r2, r3, #4
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dfc:	f003 0304 	and.w	r3, r3, #4
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d011      	beq.n	8002e28 <HAL_UART_IRQHandler+0x11c>
 8002e04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00b      	beq.n	8002e28 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2204      	movs	r2, #4
 8002e16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e1e:	f043 0202 	orr.w	r2, r3, #2
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e2c:	f003 0308 	and.w	r3, r3, #8
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d017      	beq.n	8002e64 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e38:	f003 0320 	and.w	r3, r3, #32
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d105      	bne.n	8002e4c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002e40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e44:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00b      	beq.n	8002e64 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2208      	movs	r2, #8
 8002e52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e5a:	f043 0208 	orr.w	r2, r3, #8
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d012      	beq.n	8002e96 <HAL_UART_IRQHandler+0x18a>
 8002e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00c      	beq.n	8002e96 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e8c:	f043 0220 	orr.w	r2, r3, #32
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 8211 	beq.w	80032c4 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ea6:	f003 0320 	and.w	r3, r3, #32
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00d      	beq.n	8002eca <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002eae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002eb2:	f003 0320 	and.w	r3, r3, #32
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d007      	beq.n	8002eca <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ed0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ede:	2b40      	cmp	r3, #64	; 0x40
 8002ee0:	d005      	beq.n	8002eee <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002ee2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ee6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d04f      	beq.n	8002f8e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 fe5e 	bl	8003bb0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002efe:	2b40      	cmp	r3, #64	; 0x40
 8002f00:	d141      	bne.n	8002f86 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	3308      	adds	r3, #8
 8002f08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f10:	e853 3f00 	ldrex	r3, [r3]
 8002f14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002f18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	3308      	adds	r3, #8
 8002f2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002f2e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002f32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002f3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002f3e:	e841 2300 	strex	r3, r2, [r1]
 8002f42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002f46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1d9      	bne.n	8002f02 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d013      	beq.n	8002f7e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f5a:	4a13      	ldr	r2, [pc, #76]	; (8002fa8 <HAL_UART_IRQHandler+0x29c>)
 8002f5c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7fd fef2 	bl	8000d4c <HAL_DMA_Abort_IT>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d017      	beq.n	8002f9e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002f78:	4610      	mov	r0, r2
 8002f7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f7c:	e00f      	b.n	8002f9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f9b4 	bl	80032ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f84:	e00b      	b.n	8002f9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f9b0 	bl	80032ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f8c:	e007      	b.n	8002f9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 f9ac 	bl	80032ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002f9c:	e192      	b.n	80032c4 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f9e:	bf00      	nop
    return;
 8002fa0:	e190      	b.n	80032c4 <HAL_UART_IRQHandler+0x5b8>
 8002fa2:	bf00      	nop
 8002fa4:	04000120 	.word	0x04000120
 8002fa8:	08003c79 	.word	0x08003c79

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	f040 814b 	bne.w	800324c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fba:	f003 0310 	and.w	r3, r3, #16
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f000 8144 	beq.w	800324c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fc8:	f003 0310 	and.w	r3, r3, #16
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f000 813d 	beq.w	800324c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2210      	movs	r2, #16
 8002fd8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe4:	2b40      	cmp	r3, #64	; 0x40
 8002fe6:	f040 80b5 	bne.w	8003154 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ff6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f000 8164 	beq.w	80032c8 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003006:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800300a:	429a      	cmp	r2, r3
 800300c:	f080 815c 	bcs.w	80032c8 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003016:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	2b20      	cmp	r3, #32
 8003022:	f000 8086 	beq.w	8003132 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800302e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003032:	e853 3f00 	ldrex	r3, [r3]
 8003036:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800303a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800303e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003042:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	461a      	mov	r2, r3
 800304c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003050:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003054:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003058:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800305c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003060:	e841 2300 	strex	r3, r2, [r1]
 8003064:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003068:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1da      	bne.n	8003026 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	3308      	adds	r3, #8
 8003076:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003078:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800307a:	e853 3f00 	ldrex	r3, [r3]
 800307e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003080:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003082:	f023 0301 	bic.w	r3, r3, #1
 8003086:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	3308      	adds	r3, #8
 8003090:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003094:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003098:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800309a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800309c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80030a0:	e841 2300 	strex	r3, r2, [r1]
 80030a4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80030a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1e1      	bne.n	8003070 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	3308      	adds	r3, #8
 80030b2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030b6:	e853 3f00 	ldrex	r3, [r3]
 80030ba:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80030bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	3308      	adds	r3, #8
 80030cc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80030d0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80030d2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80030d6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80030d8:	e841 2300 	strex	r3, r2, [r1]
 80030dc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80030de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1e3      	bne.n	80030ac <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2220      	movs	r2, #32
 80030e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030fa:	e853 3f00 	ldrex	r3, [r3]
 80030fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003100:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003102:	f023 0310 	bic.w	r3, r3, #16
 8003106:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	461a      	mov	r2, r3
 8003110:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003114:	65bb      	str	r3, [r7, #88]	; 0x58
 8003116:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003118:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800311a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800311c:	e841 2300 	strex	r3, r2, [r1]
 8003120:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003122:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1e4      	bne.n	80030f2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800312c:	4618      	mov	r0, r3
 800312e:	f7fd fdd4 	bl	8000cda <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2202      	movs	r2, #2
 8003136:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003144:	b29b      	uxth	r3, r3
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	b29b      	uxth	r3, r3
 800314a:	4619      	mov	r1, r3
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f000 f8d7 	bl	8003300 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003152:	e0b9      	b.n	80032c8 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003160:	b29b      	uxth	r3, r3
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800316e:	b29b      	uxth	r3, r3
 8003170:	2b00      	cmp	r3, #0
 8003172:	f000 80ab 	beq.w	80032cc <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003176:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800317a:	2b00      	cmp	r3, #0
 800317c:	f000 80a6 	beq.w	80032cc <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003188:	e853 3f00 	ldrex	r3, [r3]
 800318c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800318e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003190:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003194:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	461a      	mov	r2, r3
 800319e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80031a2:	647b      	str	r3, [r7, #68]	; 0x44
 80031a4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80031a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031aa:	e841 2300 	strex	r3, r2, [r1]
 80031ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80031b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1e4      	bne.n	8003180 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	3308      	adds	r3, #8
 80031bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c0:	e853 3f00 	ldrex	r3, [r3]
 80031c4:	623b      	str	r3, [r7, #32]
   return(result);
 80031c6:	6a3b      	ldr	r3, [r7, #32]
 80031c8:	f023 0301 	bic.w	r3, r3, #1
 80031cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	3308      	adds	r3, #8
 80031d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80031da:	633a      	str	r2, [r7, #48]	; 0x30
 80031dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031e2:	e841 2300 	strex	r3, r2, [r1]
 80031e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80031e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1e3      	bne.n	80031b6 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2220      	movs	r2, #32
 80031f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	e853 3f00 	ldrex	r3, [r3]
 800320e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f023 0310 	bic.w	r3, r3, #16
 8003216:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	461a      	mov	r2, r3
 8003220:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003224:	61fb      	str	r3, [r7, #28]
 8003226:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003228:	69b9      	ldr	r1, [r7, #24]
 800322a:	69fa      	ldr	r2, [r7, #28]
 800322c:	e841 2300 	strex	r3, r2, [r1]
 8003230:	617b      	str	r3, [r7, #20]
   return(result);
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1e4      	bne.n	8003202 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2202      	movs	r2, #2
 800323c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800323e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003242:	4619      	mov	r1, r3
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 f85b 	bl	8003300 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800324a:	e03f      	b.n	80032cc <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800324c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003250:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00e      	beq.n	8003276 <HAL_UART_IRQHandler+0x56a>
 8003258:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800325c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d008      	beq.n	8003276 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800326c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 feea 	bl	8004048 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003274:	e02d      	b.n	80032d2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800327a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00e      	beq.n	80032a0 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003282:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800328a:	2b00      	cmp	r3, #0
 800328c:	d008      	beq.n	80032a0 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003292:	2b00      	cmp	r3, #0
 8003294:	d01c      	beq.n	80032d0 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	4798      	blx	r3
    }
    return;
 800329e:	e017      	b.n	80032d0 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80032a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d012      	beq.n	80032d2 <HAL_UART_IRQHandler+0x5c6>
 80032ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00c      	beq.n	80032d2 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 fcf3 	bl	8003ca4 <UART_EndTransmit_IT>
    return;
 80032be:	e008      	b.n	80032d2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80032c0:	bf00      	nop
 80032c2:	e006      	b.n	80032d2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80032c4:	bf00      	nop
 80032c6:	e004      	b.n	80032d2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80032c8:	bf00      	nop
 80032ca:	e002      	b.n	80032d2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80032cc:	bf00      	nop
 80032ce:	e000      	b.n	80032d2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80032d0:	bf00      	nop
  }

}
 80032d2:	37e8      	adds	r7, #232	; 0xe8
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	460b      	mov	r3, r1
 800330a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b088      	sub	sp, #32
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003320:	2300      	movs	r3, #0
 8003322:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689a      	ldr	r2, [r3, #8]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	431a      	orrs	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	431a      	orrs	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	69db      	ldr	r3, [r3, #28]
 8003338:	4313      	orrs	r3, r2
 800333a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	4b92      	ldr	r3, [pc, #584]	; (800358c <UART_SetConfig+0x274>)
 8003344:	4013      	ands	r3, r2
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	6812      	ldr	r2, [r2, #0]
 800334a:	6979      	ldr	r1, [r7, #20]
 800334c:	430b      	orrs	r3, r1
 800334e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	68da      	ldr	r2, [r3, #12]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	430a      	orrs	r2, r1
 8003364:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	4313      	orrs	r3, r2
 8003374:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	430a      	orrs	r2, r1
 8003388:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a80      	ldr	r2, [pc, #512]	; (8003590 <UART_SetConfig+0x278>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d120      	bne.n	80033d6 <UART_SetConfig+0xbe>
 8003394:	4b7f      	ldr	r3, [pc, #508]	; (8003594 <UART_SetConfig+0x27c>)
 8003396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003398:	f003 0303 	and.w	r3, r3, #3
 800339c:	2b03      	cmp	r3, #3
 800339e:	d817      	bhi.n	80033d0 <UART_SetConfig+0xb8>
 80033a0:	a201      	add	r2, pc, #4	; (adr r2, 80033a8 <UART_SetConfig+0x90>)
 80033a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a6:	bf00      	nop
 80033a8:	080033b9 	.word	0x080033b9
 80033ac:	080033c5 	.word	0x080033c5
 80033b0:	080033cb 	.word	0x080033cb
 80033b4:	080033bf 	.word	0x080033bf
 80033b8:	2301      	movs	r3, #1
 80033ba:	77fb      	strb	r3, [r7, #31]
 80033bc:	e0b5      	b.n	800352a <UART_SetConfig+0x212>
 80033be:	2302      	movs	r3, #2
 80033c0:	77fb      	strb	r3, [r7, #31]
 80033c2:	e0b2      	b.n	800352a <UART_SetConfig+0x212>
 80033c4:	2304      	movs	r3, #4
 80033c6:	77fb      	strb	r3, [r7, #31]
 80033c8:	e0af      	b.n	800352a <UART_SetConfig+0x212>
 80033ca:	2308      	movs	r3, #8
 80033cc:	77fb      	strb	r3, [r7, #31]
 80033ce:	e0ac      	b.n	800352a <UART_SetConfig+0x212>
 80033d0:	2310      	movs	r3, #16
 80033d2:	77fb      	strb	r3, [r7, #31]
 80033d4:	e0a9      	b.n	800352a <UART_SetConfig+0x212>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a6f      	ldr	r2, [pc, #444]	; (8003598 <UART_SetConfig+0x280>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d124      	bne.n	800342a <UART_SetConfig+0x112>
 80033e0:	4b6c      	ldr	r3, [pc, #432]	; (8003594 <UART_SetConfig+0x27c>)
 80033e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80033ec:	d011      	beq.n	8003412 <UART_SetConfig+0xfa>
 80033ee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80033f2:	d817      	bhi.n	8003424 <UART_SetConfig+0x10c>
 80033f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033f8:	d011      	beq.n	800341e <UART_SetConfig+0x106>
 80033fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033fe:	d811      	bhi.n	8003424 <UART_SetConfig+0x10c>
 8003400:	2b00      	cmp	r3, #0
 8003402:	d003      	beq.n	800340c <UART_SetConfig+0xf4>
 8003404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003408:	d006      	beq.n	8003418 <UART_SetConfig+0x100>
 800340a:	e00b      	b.n	8003424 <UART_SetConfig+0x10c>
 800340c:	2300      	movs	r3, #0
 800340e:	77fb      	strb	r3, [r7, #31]
 8003410:	e08b      	b.n	800352a <UART_SetConfig+0x212>
 8003412:	2302      	movs	r3, #2
 8003414:	77fb      	strb	r3, [r7, #31]
 8003416:	e088      	b.n	800352a <UART_SetConfig+0x212>
 8003418:	2304      	movs	r3, #4
 800341a:	77fb      	strb	r3, [r7, #31]
 800341c:	e085      	b.n	800352a <UART_SetConfig+0x212>
 800341e:	2308      	movs	r3, #8
 8003420:	77fb      	strb	r3, [r7, #31]
 8003422:	e082      	b.n	800352a <UART_SetConfig+0x212>
 8003424:	2310      	movs	r3, #16
 8003426:	77fb      	strb	r3, [r7, #31]
 8003428:	e07f      	b.n	800352a <UART_SetConfig+0x212>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a5b      	ldr	r2, [pc, #364]	; (800359c <UART_SetConfig+0x284>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d124      	bne.n	800347e <UART_SetConfig+0x166>
 8003434:	4b57      	ldr	r3, [pc, #348]	; (8003594 <UART_SetConfig+0x27c>)
 8003436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003438:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800343c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003440:	d011      	beq.n	8003466 <UART_SetConfig+0x14e>
 8003442:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003446:	d817      	bhi.n	8003478 <UART_SetConfig+0x160>
 8003448:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800344c:	d011      	beq.n	8003472 <UART_SetConfig+0x15a>
 800344e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003452:	d811      	bhi.n	8003478 <UART_SetConfig+0x160>
 8003454:	2b00      	cmp	r3, #0
 8003456:	d003      	beq.n	8003460 <UART_SetConfig+0x148>
 8003458:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800345c:	d006      	beq.n	800346c <UART_SetConfig+0x154>
 800345e:	e00b      	b.n	8003478 <UART_SetConfig+0x160>
 8003460:	2300      	movs	r3, #0
 8003462:	77fb      	strb	r3, [r7, #31]
 8003464:	e061      	b.n	800352a <UART_SetConfig+0x212>
 8003466:	2302      	movs	r3, #2
 8003468:	77fb      	strb	r3, [r7, #31]
 800346a:	e05e      	b.n	800352a <UART_SetConfig+0x212>
 800346c:	2304      	movs	r3, #4
 800346e:	77fb      	strb	r3, [r7, #31]
 8003470:	e05b      	b.n	800352a <UART_SetConfig+0x212>
 8003472:	2308      	movs	r3, #8
 8003474:	77fb      	strb	r3, [r7, #31]
 8003476:	e058      	b.n	800352a <UART_SetConfig+0x212>
 8003478:	2310      	movs	r3, #16
 800347a:	77fb      	strb	r3, [r7, #31]
 800347c:	e055      	b.n	800352a <UART_SetConfig+0x212>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a47      	ldr	r2, [pc, #284]	; (80035a0 <UART_SetConfig+0x288>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d124      	bne.n	80034d2 <UART_SetConfig+0x1ba>
 8003488:	4b42      	ldr	r3, [pc, #264]	; (8003594 <UART_SetConfig+0x27c>)
 800348a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003490:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003494:	d011      	beq.n	80034ba <UART_SetConfig+0x1a2>
 8003496:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800349a:	d817      	bhi.n	80034cc <UART_SetConfig+0x1b4>
 800349c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034a0:	d011      	beq.n	80034c6 <UART_SetConfig+0x1ae>
 80034a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034a6:	d811      	bhi.n	80034cc <UART_SetConfig+0x1b4>
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d003      	beq.n	80034b4 <UART_SetConfig+0x19c>
 80034ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034b0:	d006      	beq.n	80034c0 <UART_SetConfig+0x1a8>
 80034b2:	e00b      	b.n	80034cc <UART_SetConfig+0x1b4>
 80034b4:	2300      	movs	r3, #0
 80034b6:	77fb      	strb	r3, [r7, #31]
 80034b8:	e037      	b.n	800352a <UART_SetConfig+0x212>
 80034ba:	2302      	movs	r3, #2
 80034bc:	77fb      	strb	r3, [r7, #31]
 80034be:	e034      	b.n	800352a <UART_SetConfig+0x212>
 80034c0:	2304      	movs	r3, #4
 80034c2:	77fb      	strb	r3, [r7, #31]
 80034c4:	e031      	b.n	800352a <UART_SetConfig+0x212>
 80034c6:	2308      	movs	r3, #8
 80034c8:	77fb      	strb	r3, [r7, #31]
 80034ca:	e02e      	b.n	800352a <UART_SetConfig+0x212>
 80034cc:	2310      	movs	r3, #16
 80034ce:	77fb      	strb	r3, [r7, #31]
 80034d0:	e02b      	b.n	800352a <UART_SetConfig+0x212>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a33      	ldr	r2, [pc, #204]	; (80035a4 <UART_SetConfig+0x28c>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d124      	bne.n	8003526 <UART_SetConfig+0x20e>
 80034dc:	4b2d      	ldr	r3, [pc, #180]	; (8003594 <UART_SetConfig+0x27c>)
 80034de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80034e4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034e8:	d011      	beq.n	800350e <UART_SetConfig+0x1f6>
 80034ea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034ee:	d817      	bhi.n	8003520 <UART_SetConfig+0x208>
 80034f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034f4:	d011      	beq.n	800351a <UART_SetConfig+0x202>
 80034f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034fa:	d811      	bhi.n	8003520 <UART_SetConfig+0x208>
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d003      	beq.n	8003508 <UART_SetConfig+0x1f0>
 8003500:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003504:	d006      	beq.n	8003514 <UART_SetConfig+0x1fc>
 8003506:	e00b      	b.n	8003520 <UART_SetConfig+0x208>
 8003508:	2300      	movs	r3, #0
 800350a:	77fb      	strb	r3, [r7, #31]
 800350c:	e00d      	b.n	800352a <UART_SetConfig+0x212>
 800350e:	2302      	movs	r3, #2
 8003510:	77fb      	strb	r3, [r7, #31]
 8003512:	e00a      	b.n	800352a <UART_SetConfig+0x212>
 8003514:	2304      	movs	r3, #4
 8003516:	77fb      	strb	r3, [r7, #31]
 8003518:	e007      	b.n	800352a <UART_SetConfig+0x212>
 800351a:	2308      	movs	r3, #8
 800351c:	77fb      	strb	r3, [r7, #31]
 800351e:	e004      	b.n	800352a <UART_SetConfig+0x212>
 8003520:	2310      	movs	r3, #16
 8003522:	77fb      	strb	r3, [r7, #31]
 8003524:	e001      	b.n	800352a <UART_SetConfig+0x212>
 8003526:	2310      	movs	r3, #16
 8003528:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	69db      	ldr	r3, [r3, #28]
 800352e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003532:	d16b      	bne.n	800360c <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003534:	7ffb      	ldrb	r3, [r7, #31]
 8003536:	2b08      	cmp	r3, #8
 8003538:	d838      	bhi.n	80035ac <UART_SetConfig+0x294>
 800353a:	a201      	add	r2, pc, #4	; (adr r2, 8003540 <UART_SetConfig+0x228>)
 800353c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003540:	08003565 	.word	0x08003565
 8003544:	0800356d 	.word	0x0800356d
 8003548:	08003575 	.word	0x08003575
 800354c:	080035ad 	.word	0x080035ad
 8003550:	0800357b 	.word	0x0800357b
 8003554:	080035ad 	.word	0x080035ad
 8003558:	080035ad 	.word	0x080035ad
 800355c:	080035ad 	.word	0x080035ad
 8003560:	08003583 	.word	0x08003583
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003564:	f7ff f854 	bl	8002610 <HAL_RCC_GetPCLK1Freq>
 8003568:	61b8      	str	r0, [r7, #24]
        break;
 800356a:	e024      	b.n	80035b6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800356c:	f7ff f872 	bl	8002654 <HAL_RCC_GetPCLK2Freq>
 8003570:	61b8      	str	r0, [r7, #24]
        break;
 8003572:	e020      	b.n	80035b6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003574:	4b0c      	ldr	r3, [pc, #48]	; (80035a8 <UART_SetConfig+0x290>)
 8003576:	61bb      	str	r3, [r7, #24]
        break;
 8003578:	e01d      	b.n	80035b6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800357a:	f7fe ffd3 	bl	8002524 <HAL_RCC_GetSysClockFreq>
 800357e:	61b8      	str	r0, [r7, #24]
        break;
 8003580:	e019      	b.n	80035b6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003582:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003586:	61bb      	str	r3, [r7, #24]
        break;
 8003588:	e015      	b.n	80035b6 <UART_SetConfig+0x29e>
 800358a:	bf00      	nop
 800358c:	efff69f3 	.word	0xefff69f3
 8003590:	40013800 	.word	0x40013800
 8003594:	40021000 	.word	0x40021000
 8003598:	40004400 	.word	0x40004400
 800359c:	40004800 	.word	0x40004800
 80035a0:	40004c00 	.word	0x40004c00
 80035a4:	40005000 	.word	0x40005000
 80035a8:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80035ac:	2300      	movs	r3, #0
 80035ae:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	77bb      	strb	r3, [r7, #30]
        break;
 80035b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d073      	beq.n	80036a4 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	005a      	lsls	r2, r3, #1
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	085b      	lsrs	r3, r3, #1
 80035c6:	441a      	add	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	2b0f      	cmp	r3, #15
 80035d6:	d916      	bls.n	8003606 <UART_SetConfig+0x2ee>
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035de:	d212      	bcs.n	8003606 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	f023 030f 	bic.w	r3, r3, #15
 80035e8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	085b      	lsrs	r3, r3, #1
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	f003 0307 	and.w	r3, r3, #7
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	89fb      	ldrh	r3, [r7, #14]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	89fa      	ldrh	r2, [r7, #14]
 8003602:	60da      	str	r2, [r3, #12]
 8003604:	e04e      	b.n	80036a4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	77bb      	strb	r3, [r7, #30]
 800360a:	e04b      	b.n	80036a4 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800360c:	7ffb      	ldrb	r3, [r7, #31]
 800360e:	2b08      	cmp	r3, #8
 8003610:	d827      	bhi.n	8003662 <UART_SetConfig+0x34a>
 8003612:	a201      	add	r2, pc, #4	; (adr r2, 8003618 <UART_SetConfig+0x300>)
 8003614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003618:	0800363d 	.word	0x0800363d
 800361c:	08003645 	.word	0x08003645
 8003620:	0800364d 	.word	0x0800364d
 8003624:	08003663 	.word	0x08003663
 8003628:	08003653 	.word	0x08003653
 800362c:	08003663 	.word	0x08003663
 8003630:	08003663 	.word	0x08003663
 8003634:	08003663 	.word	0x08003663
 8003638:	0800365b 	.word	0x0800365b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800363c:	f7fe ffe8 	bl	8002610 <HAL_RCC_GetPCLK1Freq>
 8003640:	61b8      	str	r0, [r7, #24]
        break;
 8003642:	e013      	b.n	800366c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003644:	f7ff f806 	bl	8002654 <HAL_RCC_GetPCLK2Freq>
 8003648:	61b8      	str	r0, [r7, #24]
        break;
 800364a:	e00f      	b.n	800366c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800364c:	4b1b      	ldr	r3, [pc, #108]	; (80036bc <UART_SetConfig+0x3a4>)
 800364e:	61bb      	str	r3, [r7, #24]
        break;
 8003650:	e00c      	b.n	800366c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003652:	f7fe ff67 	bl	8002524 <HAL_RCC_GetSysClockFreq>
 8003656:	61b8      	str	r0, [r7, #24]
        break;
 8003658:	e008      	b.n	800366c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800365a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800365e:	61bb      	str	r3, [r7, #24]
        break;
 8003660:	e004      	b.n	800366c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003662:	2300      	movs	r3, #0
 8003664:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	77bb      	strb	r3, [r7, #30]
        break;
 800366a:	bf00      	nop
    }

    if (pclk != 0U)
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d018      	beq.n	80036a4 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	085a      	lsrs	r2, r3, #1
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	441a      	add	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	fbb2 f3f3 	udiv	r3, r2, r3
 8003684:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	2b0f      	cmp	r3, #15
 800368a:	d909      	bls.n	80036a0 <UART_SetConfig+0x388>
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003692:	d205      	bcs.n	80036a0 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	b29a      	uxth	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	60da      	str	r2, [r3, #12]
 800369e:	e001      	b.n	80036a4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80036b0:	7fbb      	ldrb	r3, [r7, #30]
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3720      	adds	r7, #32
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	007a1200 	.word	0x007a1200

080036c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00a      	beq.n	80036ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00a      	beq.n	800370c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	430a      	orrs	r2, r1
 800370a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003710:	f003 0304 	and.w	r3, r3, #4
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00a      	beq.n	800372e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	430a      	orrs	r2, r1
 800372c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003732:	f003 0308 	and.w	r3, r3, #8
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00a      	beq.n	8003750 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	430a      	orrs	r2, r1
 800374e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003754:	f003 0310 	and.w	r3, r3, #16
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00a      	beq.n	8003772 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	430a      	orrs	r2, r1
 8003770:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003776:	f003 0320 	and.w	r3, r3, #32
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00a      	beq.n	8003794 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	430a      	orrs	r2, r1
 8003792:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800379c:	2b00      	cmp	r3, #0
 800379e:	d01a      	beq.n	80037d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037be:	d10a      	bne.n	80037d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00a      	beq.n	80037f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	430a      	orrs	r2, r1
 80037f6:	605a      	str	r2, [r3, #4]
  }
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b098      	sub	sp, #96	; 0x60
 8003808:	af02      	add	r7, sp, #8
 800380a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003814:	f7fd f920 	bl	8000a58 <HAL_GetTick>
 8003818:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0308 	and.w	r3, r3, #8
 8003824:	2b08      	cmp	r3, #8
 8003826:	d12e      	bne.n	8003886 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003828:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003830:	2200      	movs	r2, #0
 8003832:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f88c 	bl	8003954 <UART_WaitOnFlagUntilTimeout>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d021      	beq.n	8003886 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800384a:	e853 3f00 	ldrex	r3, [r3]
 800384e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003852:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003856:	653b      	str	r3, [r7, #80]	; 0x50
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	461a      	mov	r2, r3
 800385e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003860:	647b      	str	r3, [r7, #68]	; 0x44
 8003862:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003864:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003866:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003868:	e841 2300 	strex	r3, r2, [r1]
 800386c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800386e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1e6      	bne.n	8003842 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2220      	movs	r2, #32
 8003878:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e062      	b.n	800394c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b04      	cmp	r3, #4
 8003892:	d149      	bne.n	8003928 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003894:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003898:	9300      	str	r3, [sp, #0]
 800389a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800389c:	2200      	movs	r2, #0
 800389e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 f856 	bl	8003954 <UART_WaitOnFlagUntilTimeout>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d03c      	beq.n	8003928 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b6:	e853 3f00 	ldrex	r3, [r3]
 80038ba:	623b      	str	r3, [r7, #32]
   return(result);
 80038bc:	6a3b      	ldr	r3, [r7, #32]
 80038be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	461a      	mov	r2, r3
 80038ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038cc:	633b      	str	r3, [r7, #48]	; 0x30
 80038ce:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038d4:	e841 2300 	strex	r3, r2, [r1]
 80038d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80038da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1e6      	bne.n	80038ae <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	3308      	adds	r3, #8
 80038e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	e853 3f00 	ldrex	r3, [r3]
 80038ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f023 0301 	bic.w	r3, r3, #1
 80038f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	3308      	adds	r3, #8
 80038fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003900:	61fa      	str	r2, [r7, #28]
 8003902:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003904:	69b9      	ldr	r1, [r7, #24]
 8003906:	69fa      	ldr	r2, [r7, #28]
 8003908:	e841 2300 	strex	r3, r2, [r1]
 800390c:	617b      	str	r3, [r7, #20]
   return(result);
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1e5      	bne.n	80038e0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2220      	movs	r2, #32
 8003918:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e011      	b.n	800394c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2220      	movs	r2, #32
 800392c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2220      	movs	r2, #32
 8003932:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	3758      	adds	r7, #88	; 0x58
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	603b      	str	r3, [r7, #0]
 8003960:	4613      	mov	r3, r2
 8003962:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003964:	e049      	b.n	80039fa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800396c:	d045      	beq.n	80039fa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800396e:	f7fd f873 	bl	8000a58 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	429a      	cmp	r2, r3
 800397c:	d302      	bcc.n	8003984 <UART_WaitOnFlagUntilTimeout+0x30>
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d101      	bne.n	8003988 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e048      	b.n	8003a1a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0304 	and.w	r3, r3, #4
 8003992:	2b00      	cmp	r3, #0
 8003994:	d031      	beq.n	80039fa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	69db      	ldr	r3, [r3, #28]
 800399c:	f003 0308 	and.w	r3, r3, #8
 80039a0:	2b08      	cmp	r3, #8
 80039a2:	d110      	bne.n	80039c6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2208      	movs	r2, #8
 80039aa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f000 f8ff 	bl	8003bb0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2208      	movs	r2, #8
 80039b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e029      	b.n	8003a1a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	69db      	ldr	r3, [r3, #28]
 80039cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039d4:	d111      	bne.n	80039fa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f000 f8e5 	bl	8003bb0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2220      	movs	r2, #32
 80039ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e00f      	b.n	8003a1a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	69da      	ldr	r2, [r3, #28]
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	4013      	ands	r3, r2
 8003a04:	68ba      	ldr	r2, [r7, #8]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	bf0c      	ite	eq
 8003a0a:	2301      	moveq	r3, #1
 8003a0c:	2300      	movne	r3, #0
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	461a      	mov	r2, r3
 8003a12:	79fb      	ldrb	r3, [r7, #7]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d0a6      	beq.n	8003966 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
	...

08003a24 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b097      	sub	sp, #92	; 0x5c
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	68ba      	ldr	r2, [r7, #8]
 8003a36:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	88fa      	ldrh	r2, [r7, #6]
 8003a3c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	88fa      	ldrh	r2, [r7, #6]
 8003a44:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a56:	d10e      	bne.n	8003a76 <UART_Start_Receive_IT+0x52>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d105      	bne.n	8003a6c <UART_Start_Receive_IT+0x48>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003a66:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a6a:	e02d      	b.n	8003ac8 <UART_Start_Receive_IT+0xa4>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	22ff      	movs	r2, #255	; 0xff
 8003a70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a74:	e028      	b.n	8003ac8 <UART_Start_Receive_IT+0xa4>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10d      	bne.n	8003a9a <UART_Start_Receive_IT+0x76>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d104      	bne.n	8003a90 <UART_Start_Receive_IT+0x6c>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	22ff      	movs	r2, #255	; 0xff
 8003a8a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a8e:	e01b      	b.n	8003ac8 <UART_Start_Receive_IT+0xa4>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	227f      	movs	r2, #127	; 0x7f
 8003a94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a98:	e016      	b.n	8003ac8 <UART_Start_Receive_IT+0xa4>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003aa2:	d10d      	bne.n	8003ac0 <UART_Start_Receive_IT+0x9c>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d104      	bne.n	8003ab6 <UART_Start_Receive_IT+0x92>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	227f      	movs	r2, #127	; 0x7f
 8003ab0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ab4:	e008      	b.n	8003ac8 <UART_Start_Receive_IT+0xa4>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	223f      	movs	r2, #63	; 0x3f
 8003aba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003abe:	e003      	b.n	8003ac8 <UART_Start_Receive_IT+0xa4>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2222      	movs	r2, #34	; 0x22
 8003ad4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	3308      	adds	r3, #8
 8003ade:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ae2:	e853 3f00 	ldrex	r3, [r3]
 8003ae6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aea:	f043 0301 	orr.w	r3, r3, #1
 8003aee:	657b      	str	r3, [r7, #84]	; 0x54
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	3308      	adds	r3, #8
 8003af6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003af8:	64ba      	str	r2, [r7, #72]	; 0x48
 8003afa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003afe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b00:	e841 2300 	strex	r3, r2, [r1]
 8003b04:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003b06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1e5      	bne.n	8003ad8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b14:	d107      	bne.n	8003b26 <UART_Start_Receive_IT+0x102>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d103      	bne.n	8003b26 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	4a21      	ldr	r2, [pc, #132]	; (8003ba8 <UART_Start_Receive_IT+0x184>)
 8003b22:	669a      	str	r2, [r3, #104]	; 0x68
 8003b24:	e002      	b.n	8003b2c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	4a20      	ldr	r2, [pc, #128]	; (8003bac <UART_Start_Receive_IT+0x188>)
 8003b2a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d019      	beq.n	8003b68 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3c:	e853 3f00 	ldrex	r3, [r3]
 8003b40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b44:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003b48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	461a      	mov	r2, r3
 8003b50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b52:	637b      	str	r3, [r7, #52]	; 0x34
 8003b54:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b5a:	e841 2300 	strex	r3, r2, [r1]
 8003b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1e6      	bne.n	8003b34 <UART_Start_Receive_IT+0x110>
 8003b66:	e018      	b.n	8003b9a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	e853 3f00 	ldrex	r3, [r3]
 8003b74:	613b      	str	r3, [r7, #16]
   return(result);
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	f043 0320 	orr.w	r3, r3, #32
 8003b7c:	653b      	str	r3, [r7, #80]	; 0x50
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	461a      	mov	r2, r3
 8003b84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b86:	623b      	str	r3, [r7, #32]
 8003b88:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8a:	69f9      	ldr	r1, [r7, #28]
 8003b8c:	6a3a      	ldr	r2, [r7, #32]
 8003b8e:	e841 2300 	strex	r3, r2, [r1]
 8003b92:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1e6      	bne.n	8003b68 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	375c      	adds	r7, #92	; 0x5c
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr
 8003ba8:	08003ea1 	.word	0x08003ea1
 8003bac:	08003cf9 	.word	0x08003cf9

08003bb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b095      	sub	sp, #84	; 0x54
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bc0:	e853 3f00 	ldrex	r3, [r3]
 8003bc4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bcc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bd6:	643b      	str	r3, [r7, #64]	; 0x40
 8003bd8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bda:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003bdc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003bde:	e841 2300 	strex	r3, r2, [r1]
 8003be2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1e6      	bne.n	8003bb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	3308      	adds	r3, #8
 8003bf0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf2:	6a3b      	ldr	r3, [r7, #32]
 8003bf4:	e853 3f00 	ldrex	r3, [r3]
 8003bf8:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	f023 0301 	bic.w	r3, r3, #1
 8003c00:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	3308      	adds	r3, #8
 8003c08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c0c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c12:	e841 2300 	strex	r3, r2, [r1]
 8003c16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1e5      	bne.n	8003bea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d118      	bne.n	8003c58 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	e853 3f00 	ldrex	r3, [r3]
 8003c32:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	f023 0310 	bic.w	r3, r3, #16
 8003c3a:	647b      	str	r3, [r7, #68]	; 0x44
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	461a      	mov	r2, r3
 8003c42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c44:	61bb      	str	r3, [r7, #24]
 8003c46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c48:	6979      	ldr	r1, [r7, #20]
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	e841 2300 	strex	r3, r2, [r1]
 8003c50:	613b      	str	r3, [r7, #16]
   return(result);
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1e6      	bne.n	8003c26 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003c6c:	bf00      	nop
 8003c6e:	3754      	adds	r7, #84	; 0x54
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f7ff fb28 	bl	80032ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c9c:	bf00      	nop
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b088      	sub	sp, #32
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	e853 3f00 	ldrex	r3, [r3]
 8003cb8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cc0:	61fb      	str	r3, [r7, #28]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	61bb      	str	r3, [r7, #24]
 8003ccc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cce:	6979      	ldr	r1, [r7, #20]
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	e841 2300 	strex	r3, r2, [r1]
 8003cd6:	613b      	str	r3, [r7, #16]
   return(result);
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1e6      	bne.n	8003cac <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7ff faf4 	bl	80032d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cf0:	bf00      	nop
 8003cf2:	3720      	adds	r7, #32
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b09c      	sub	sp, #112	; 0x70
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003d06:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d10:	2b22      	cmp	r3, #34	; 0x22
 8003d12:	f040 80b9 	bne.w	8003e88 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003d1c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003d20:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003d24:	b2d9      	uxtb	r1, r3
 8003d26:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003d2a:	b2da      	uxtb	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d30:	400a      	ands	r2, r1
 8003d32:	b2d2      	uxtb	r2, r2
 8003d34:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d3a:	1c5a      	adds	r2, r3, #1
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f040 809c 	bne.w	8003e98 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d68:	e853 3f00 	ldrex	r3, [r3]
 8003d6c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d74:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d7e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d80:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d82:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d86:	e841 2300 	strex	r3, r2, [r1]
 8003d8a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003d8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1e6      	bne.n	8003d60 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	3308      	adds	r3, #8
 8003d98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d9c:	e853 3f00 	ldrex	r3, [r3]
 8003da0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003da4:	f023 0301 	bic.w	r3, r3, #1
 8003da8:	667b      	str	r3, [r7, #100]	; 0x64
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	3308      	adds	r3, #8
 8003db0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003db2:	647a      	str	r2, [r7, #68]	; 0x44
 8003db4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003db8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003dba:	e841 2300 	strex	r3, r2, [r1]
 8003dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1e5      	bne.n	8003d92 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d018      	beq.n	8003e1a <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df0:	e853 3f00 	ldrex	r3, [r3]
 8003df4:	623b      	str	r3, [r7, #32]
   return(result);
 8003df6:	6a3b      	ldr	r3, [r7, #32]
 8003df8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003dfc:	663b      	str	r3, [r7, #96]	; 0x60
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	461a      	mov	r2, r3
 8003e04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e06:	633b      	str	r3, [r7, #48]	; 0x30
 8003e08:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e0e:	e841 2300 	strex	r3, r2, [r1]
 8003e12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1e6      	bne.n	8003de8 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d12e      	bne.n	8003e80 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	e853 3f00 	ldrex	r3, [r3]
 8003e34:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f023 0310 	bic.w	r3, r3, #16
 8003e3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	461a      	mov	r2, r3
 8003e44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e46:	61fb      	str	r3, [r7, #28]
 8003e48:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4a:	69b9      	ldr	r1, [r7, #24]
 8003e4c:	69fa      	ldr	r2, [r7, #28]
 8003e4e:	e841 2300 	strex	r3, r2, [r1]
 8003e52:	617b      	str	r3, [r7, #20]
   return(result);
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1e6      	bne.n	8003e28 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	69db      	ldr	r3, [r3, #28]
 8003e60:	f003 0310 	and.w	r3, r3, #16
 8003e64:	2b10      	cmp	r3, #16
 8003e66:	d103      	bne.n	8003e70 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2210      	movs	r2, #16
 8003e6e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003e76:	4619      	mov	r1, r3
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f7ff fa41 	bl	8003300 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003e7e:	e00b      	b.n	8003e98 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f7fc f9a7 	bl	80001d4 <HAL_UART_RxCpltCallback>
}
 8003e86:	e007      	b.n	8003e98 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	699a      	ldr	r2, [r3, #24]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f042 0208 	orr.w	r2, r2, #8
 8003e96:	619a      	str	r2, [r3, #24]
}
 8003e98:	bf00      	nop
 8003e9a:	3770      	adds	r7, #112	; 0x70
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b09c      	sub	sp, #112	; 0x70
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003eae:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003eb8:	2b22      	cmp	r3, #34	; 0x22
 8003eba:	f040 80b9 	bne.w	8004030 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003ec4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ecc:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003ece:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8003ed2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003edc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee2:	1c9a      	adds	r2, r3, #2
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f040 809c 	bne.w	8004040 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f10:	e853 3f00 	ldrex	r3, [r3]
 8003f14:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003f16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f1c:	667b      	str	r3, [r7, #100]	; 0x64
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	461a      	mov	r2, r3
 8003f24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f26:	657b      	str	r3, [r7, #84]	; 0x54
 8003f28:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003f2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003f2e:	e841 2300 	strex	r3, r2, [r1]
 8003f32:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003f34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1e6      	bne.n	8003f08 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	3308      	adds	r3, #8
 8003f40:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f44:	e853 3f00 	ldrex	r3, [r3]
 8003f48:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4c:	f023 0301 	bic.w	r3, r3, #1
 8003f50:	663b      	str	r3, [r7, #96]	; 0x60
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	3308      	adds	r3, #8
 8003f58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f5a:	643a      	str	r2, [r7, #64]	; 0x40
 8003f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f62:	e841 2300 	strex	r3, r2, [r1]
 8003f66:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1e5      	bne.n	8003f3a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2220      	movs	r2, #32
 8003f72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d018      	beq.n	8003fc2 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f96:	6a3b      	ldr	r3, [r7, #32]
 8003f98:	e853 3f00 	ldrex	r3, [r3]
 8003f9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003fa4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	461a      	mov	r2, r3
 8003fac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fb0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fb6:	e841 2300 	strex	r3, r2, [r1]
 8003fba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1e6      	bne.n	8003f90 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d12e      	bne.n	8004028 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	e853 3f00 	ldrex	r3, [r3]
 8003fdc:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	f023 0310 	bic.w	r3, r3, #16
 8003fe4:	65bb      	str	r3, [r7, #88]	; 0x58
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	461a      	mov	r2, r3
 8003fec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fee:	61bb      	str	r3, [r7, #24]
 8003ff0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff2:	6979      	ldr	r1, [r7, #20]
 8003ff4:	69ba      	ldr	r2, [r7, #24]
 8003ff6:	e841 2300 	strex	r3, r2, [r1]
 8003ffa:	613b      	str	r3, [r7, #16]
   return(result);
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1e6      	bne.n	8003fd0 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	69db      	ldr	r3, [r3, #28]
 8004008:	f003 0310 	and.w	r3, r3, #16
 800400c:	2b10      	cmp	r3, #16
 800400e:	d103      	bne.n	8004018 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2210      	movs	r2, #16
 8004016:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800401e:	4619      	mov	r1, r3
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f7ff f96d 	bl	8003300 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004026:	e00b      	b.n	8004040 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f7fc f8d3 	bl	80001d4 <HAL_UART_RxCpltCallback>
}
 800402e:	e007      	b.n	8004040 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	699a      	ldr	r2, [r3, #24]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f042 0208 	orr.w	r2, r2, #8
 800403e:	619a      	str	r2, [r3, #24]
}
 8004040:	bf00      	nop
 8004042:	3770      	adds	r7, #112	; 0x70
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <__libc_init_array>:
 800405c:	b570      	push	{r4, r5, r6, lr}
 800405e:	4d0d      	ldr	r5, [pc, #52]	; (8004094 <__libc_init_array+0x38>)
 8004060:	4c0d      	ldr	r4, [pc, #52]	; (8004098 <__libc_init_array+0x3c>)
 8004062:	1b64      	subs	r4, r4, r5
 8004064:	10a4      	asrs	r4, r4, #2
 8004066:	2600      	movs	r6, #0
 8004068:	42a6      	cmp	r6, r4
 800406a:	d109      	bne.n	8004080 <__libc_init_array+0x24>
 800406c:	4d0b      	ldr	r5, [pc, #44]	; (800409c <__libc_init_array+0x40>)
 800406e:	4c0c      	ldr	r4, [pc, #48]	; (80040a0 <__libc_init_array+0x44>)
 8004070:	f000 f820 	bl	80040b4 <_init>
 8004074:	1b64      	subs	r4, r4, r5
 8004076:	10a4      	asrs	r4, r4, #2
 8004078:	2600      	movs	r6, #0
 800407a:	42a6      	cmp	r6, r4
 800407c:	d105      	bne.n	800408a <__libc_init_array+0x2e>
 800407e:	bd70      	pop	{r4, r5, r6, pc}
 8004080:	f855 3b04 	ldr.w	r3, [r5], #4
 8004084:	4798      	blx	r3
 8004086:	3601      	adds	r6, #1
 8004088:	e7ee      	b.n	8004068 <__libc_init_array+0xc>
 800408a:	f855 3b04 	ldr.w	r3, [r5], #4
 800408e:	4798      	blx	r3
 8004090:	3601      	adds	r6, #1
 8004092:	e7f2      	b.n	800407a <__libc_init_array+0x1e>
 8004094:	08004104 	.word	0x08004104
 8004098:	08004104 	.word	0x08004104
 800409c:	08004104 	.word	0x08004104
 80040a0:	08004108 	.word	0x08004108

080040a4 <memset>:
 80040a4:	4402      	add	r2, r0
 80040a6:	4603      	mov	r3, r0
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d100      	bne.n	80040ae <memset+0xa>
 80040ac:	4770      	bx	lr
 80040ae:	f803 1b01 	strb.w	r1, [r3], #1
 80040b2:	e7f9      	b.n	80040a8 <memset+0x4>

080040b4 <_init>:
 80040b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040b6:	bf00      	nop
 80040b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ba:	bc08      	pop	{r3}
 80040bc:	469e      	mov	lr, r3
 80040be:	4770      	bx	lr

080040c0 <_fini>:
 80040c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040c2:	bf00      	nop
 80040c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040c6:	bc08      	pop	{r3}
 80040c8:	469e      	mov	lr, r3
 80040ca:	4770      	bx	lr
